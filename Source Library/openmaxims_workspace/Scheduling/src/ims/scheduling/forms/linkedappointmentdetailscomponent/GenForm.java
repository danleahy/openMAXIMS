//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.linkedappointmentdetailscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbOtherHCPValuesComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.OtherHCP value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.OtherHCP getValue()
		{
			return (ims.core.vo.lookups.OtherHCP)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.OtherHCP value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPeriodComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
		{
			return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFunctionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ServiceFunction value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ServiceFunction value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ServiceFunction getValue()
		{
			return (ims.core.vo.lookups.ServiceFunction)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ServiceFunction value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}

	public static class GroupSeqRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 140, 10, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "3", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 105, 10, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "2", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 72, 10, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "1", startTabIndex.intValue() + 1);
		}
		public void setText(GroupSeqEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupSeqEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupSeqEnumeration.None;
				case 0: return GroupSeqEnumeration.rdoSeq3;
				case 1: return GroupSeqEnumeration.rdoSeq2;
				case 2: return GroupSeqEnumeration.rdoSeq1;
			}
			return null;
		}
		public void setValue(GroupSeqEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupSeqEnumeration.None.id);
		}
		public boolean isEnabled(GroupSeqEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupSeqEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupSeqEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupSeqEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupSeqEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupSeqEnumeration None = new GroupSeqEnumeration(-1);
		public static GroupSeqEnumeration rdoSeq3 = new GroupSeqEnumeration(0);
		public static GroupSeqEnumeration rdoSeq2 = new GroupSeqEnumeration(1);
		public static GroupSeqEnumeration rdoSeq1 = new GroupSeqEnumeration(2);
		private GroupSeqEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupSeqEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(752, 104);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 224, 10, 165, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Interval before the C&B Appt:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 173, 10, 228, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Interval from 1st Appointment booked:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 74, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To See:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 392, 42, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Function:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sequence:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 582, 8, 155, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 561, 72, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbOtherHCPValuesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbOtherHCPValuesTemp);
		cmbOtherHCPValuesComboBox cmbOtherHCPValues = (cmbOtherHCPValuesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOtherHCPValuesComboBox.class, m_cmbOtherHCPValuesTemp);
		super.addComboBox(cmbOtherHCPValues);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 447, 8, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbPeriodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPeriodTemp);
		cmbPeriodComboBox cmbPeriod = (cmbPeriodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeriodComboBox.class, m_cmbPeriodTemp);
		super.addComboBox(cmbPeriod);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 447, 40, 290, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbFunctionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFunctionTemp);
		cmbFunctionComboBox cmbFunction = (cmbFunctionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFunctionComboBox.class, m_cmbFunctionTemp);
		super.addComboBox(cmbFunction);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 72, 40, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbServiceTemp);
		qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
		super.addComboBox(qmbService);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 481, 74, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Other HCP", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 220, 74, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Associate Specialist", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 352, 74, 118, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Any Doctor to See", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 166, 74, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"SPR", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 72, 74, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Consultant", Boolean.TRUE, null}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 400, 8, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(2)}));

		// RadioButton Controls
		RadioButton tmpGroupSeq = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupSeq);
		GroupSeqRadioButton GroupSeq = (GroupSeqRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSeqRadioButton.class, tmpGroupSeq);
		GroupSeq.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupSeq);
	}


	public Label lblCAB()
	{
		return (Label)super.getControl(0);
	}
	public Label lblManual()
	{
		return (Label)super.getControl(1);
	}
	public Label lblToSee()
	{
		return (Label)super.getControl(2);
	}
	public Label lblService()
	{
		return (Label)super.getControl(3);
	}
	public Label lblFunction()
	{
		return (Label)super.getControl(4);
	}
	public Label lblSequence()
	{
		return (Label)super.getControl(5);
	}
	public DateControl dteApptDate()
	{
		return (DateControl)super.getControl(6);
	}
	public cmbOtherHCPValuesComboBox cmbOtherHCPValues()
	{
		return (cmbOtherHCPValuesComboBox)super.getComboBox(0);
	}
	public cmbPeriodComboBox cmbPeriod()
	{
		return (cmbPeriodComboBox)super.getComboBox(1);
	}
	public cmbFunctionComboBox cmbFunction()
	{
		return (cmbFunctionComboBox)super.getComboBox(2);
	}
	public qmbServiceComboBox qmbService()
	{
		return (qmbServiceComboBox)super.getComboBox(3);
	}
	public CheckBox chkOtherHCP()
	{
		return (CheckBox)super.getControl(11);
	}
	public CheckBox chkAssociateSpecialist()
	{
		return (CheckBox)super.getControl(12);
	}
	public CheckBox chkAnyDoctorToSee()
	{
		return (CheckBox)super.getControl(13);
	}
	public CheckBox chkSPR()
	{
		return (CheckBox)super.getControl(14);
	}
	public CheckBox chkConsultant()
	{
		return (CheckBox)super.getControl(15);
	}
	public IntBox intValue()
	{
		return (IntBox)super.getControl(16);
	}
	public GroupSeqRadioButton GroupSeq()
	{
		return (GroupSeqRadioButton)super.getRadioButton(0);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsCAB = new ims.framework.ContextVariable("IsCAB", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__IsCAB_" + componentIdentifier + "");
			cxl_OriginalService = new ims.framework.ContextVariable("OriginalService", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier + "");
			cxl_OriginalFunction = new ims.framework.ContextVariable("OriginalFunction", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalFunction_" + componentIdentifier + "");
			cxl_ServiceTriageConf = new ims.framework.ContextVariable("ServiceTriageConf", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier + "");
			cxl_EnableTimeControls = new ims.framework.ContextVariable("EnableTimeControls", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__EnableTimeControls_" + componentIdentifier + "");
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
			cxl_Sequence = new ims.framework.ContextVariable("Sequence", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__Sequence_" + componentIdentifier + "");
			cxl_IsVisible = new ims.framework.ContextVariable("IsVisible", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__IsVisible_" + componentIdentifier + "");
			cxl_ApptDate = new ims.framework.ContextVariable("ApptDate", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ApptDate_" + componentIdentifier + "");
			cxl_CatsReferral = new ims.framework.ContextVariable("CatsReferral", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__CatsReferral_" + componentIdentifier + "");
			cxl_IsFromAppointmentOutcome = new ims.framework.ContextVariable("IsFromAppointmentOutcome", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__IsFromAppointmentOutcome_" + componentIdentifier + "");
			cxl_PreviousApptDate = new ims.framework.ContextVariable("PreviousApptDate", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__PreviousApptDate_" + componentIdentifier + "");
			cxl_EnableService = new ims.framework.ContextVariable("EnableService", prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__EnableService_" + componentIdentifier + "");
		}
		
		public boolean getIsCABIsNotNull()
		{
			return !cxl_IsCAB.getValueIsNull(context);
		}
		public Boolean getIsCAB()
		{
			return (Boolean)cxl_IsCAB.getValue(context);
		}
		public void setIsCAB(Boolean value)
		{
			cxl_IsCAB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsCAB = null;
		public boolean getOriginalServiceIsNotNull()
		{
			return !cxl_OriginalService.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVo getOriginalService()
		{
			return (ims.core.vo.ServiceLiteVo)cxl_OriginalService.getValue(context);
		}
		public void setOriginalService(ims.core.vo.ServiceLiteVo value)
		{
			cxl_OriginalService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OriginalService = null;
		public boolean getOriginalFunctionIsNotNull()
		{
			return !cxl_OriginalFunction.getValueIsNull(context);
		}
		public ims.core.vo.lookups.ServiceFunction getOriginalFunction()
		{
			return (ims.core.vo.lookups.ServiceFunction)cxl_OriginalFunction.getValue(context);
		}
		public void setOriginalFunction(ims.core.vo.lookups.ServiceFunction value)
		{
			cxl_OriginalFunction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OriginalFunction = null;
		public boolean getServiceTriageConfIsNotNull()
		{
			return !cxl_ServiceTriageConf.getValueIsNull(context);
		}
		public ims.core.vo.ServiceTriageActionVo getServiceTriageConf()
		{
			return (ims.core.vo.ServiceTriageActionVo)cxl_ServiceTriageConf.getValue(context);
		}
		public void setServiceTriageConf(ims.core.vo.ServiceTriageActionVo value)
		{
			cxl_ServiceTriageConf.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceTriageConf = null;
		public boolean getEnableTimeControlsIsNotNull()
		{
			return !cxl_EnableTimeControls.getValueIsNull(context);
		}
		public Boolean getEnableTimeControls()
		{
			return (Boolean)cxl_EnableTimeControls.getValue(context);
		}
		public void setEnableTimeControls(Boolean value)
		{
			cxl_EnableTimeControls.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EnableTimeControls = null;
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.LinkedAppointmentVo getCurrentRecord()
		{
			return (ims.RefMan.vo.LinkedAppointmentVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.RefMan.vo.LinkedAppointmentVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
		public boolean getSequenceIsNotNull()
		{
			return !cxl_Sequence.getValueIsNull(context);
		}
		public Integer getSequence()
		{
			return (Integer)cxl_Sequence.getValue(context);
		}
		public void setSequence(Integer value)
		{
			cxl_Sequence.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sequence = null;
		public boolean getIsVisibleIsNotNull()
		{
			return !cxl_IsVisible.getValueIsNull(context);
		}
		public Boolean getIsVisible()
		{
			return (Boolean)cxl_IsVisible.getValue(context);
		}
		public void setIsVisible(Boolean value)
		{
			cxl_IsVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsVisible = null;
		public boolean getApptDateIsNotNull()
		{
			return !cxl_ApptDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getApptDate()
		{
			return (ims.framework.utils.Date)cxl_ApptDate.getValue(context);
		}
		public void setApptDate(ims.framework.utils.Date value)
		{
			cxl_ApptDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptDate = null;
		public boolean getCatsReferralIsNotNull()
		{
			return !cxl_CatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cxl_CatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CatsReferral' RefVo context variable.");
			if(value == null)
				cxl_CatsReferral.setValue(context, null);
			else
				cxl_CatsReferral.setValue(context, new ims.RefMan.vo.CatsReferralRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CatsReferral = null;
		public boolean getIsFromAppointmentOutcomeIsNotNull()
		{
			return !cxl_IsFromAppointmentOutcome.getValueIsNull(context);
		}
		public Boolean getIsFromAppointmentOutcome()
		{
			return (Boolean)cxl_IsFromAppointmentOutcome.getValue(context);
		}
		public void setIsFromAppointmentOutcome(Boolean value)
		{
			cxl_IsFromAppointmentOutcome.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsFromAppointmentOutcome = null;
		public boolean getPreviousApptDateIsNotNull()
		{
			return !cxl_PreviousApptDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getPreviousApptDate()
		{
			return (ims.framework.utils.Date)cxl_PreviousApptDate.getValue(context);
		}
		public void setPreviousApptDate(ims.framework.utils.Date value)
		{
			cxl_PreviousApptDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousApptDate = null;
		public boolean getEnableServiceIsNotNull()
		{
			return !cxl_EnableService.getValueIsNull(context);
		}
		public Boolean getEnableService()
		{
			return (Boolean)cxl_EnableService.getValue(context);
		}
		public void setEnableService(Boolean value)
		{
			cxl_EnableService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EnableService = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[176];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__OriginalService_" + componentIdentifier, "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-ID", "ID_ServiceTriageAction");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-SERVICE", "Service");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-OPA", "OPA");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DIRECTTOLIST", "DirectToList");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DIRECTTOLISTANDOPA", "DirectToListAndOPA");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-SPR", "SPR");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-LINKEDDIAGNOSTIC", "LinkedDiagnostic");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CONSULTANT", "Consultant");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-ASSOCIATESPECIALIST", "AssociateSpecialist");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-ANYDOCTORTOSEE", "AnyDoctorToSee");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-OTHERHCP", "OtherHCP");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-LINKEDOPASANDDIAGNOSTIC", "LinkedOPAsAndDiagnostic");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-OPAANDLINKEDDIAGOSTIC", "OPAAndLinkedDiagostic");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-LINKEDOPAS", "LinkedOPAs");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORMANUALREFERRAL", "DefaultActionForManualReferral");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORCABREFERRAL", "DefaultActionForCABReferral");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CHANGECABOPA", "ChangeCABOPA");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CHANGECABOPAANDDIRECTTOLIST", "ChangeCABOPAandDirectToList");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CABOPAANDDIRECTTOLIST", "CABOPAandDirectToList");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.LinkedAppointmentDetailsComponent.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
