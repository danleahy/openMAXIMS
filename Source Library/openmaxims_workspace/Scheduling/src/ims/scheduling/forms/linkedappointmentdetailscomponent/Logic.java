//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.linkedappointmentdetailscomponent;

import java.util.ArrayList;
import java.util.List;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.LinkedAppointmentVo;
import ims.RefMan.vo.OPAVo;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.ServiceFunction;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.framework.controls.CheckBox;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.scheduling.forms.linkedappointmentdetailscomponent.GenForm.GroupSeqEnumeration;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private GroupSeqEnumeration getGroupSequenceValue(Integer sequence)
	{
		if(sequence == null)
			return null;
		
		if(sequence == 1)
			return GroupSeqEnumeration.rdoSeq1;
		else if(sequence == 2)
			return GroupSeqEnumeration.rdoSeq2;
		else if(sequence == 3)
			return GroupSeqEnumeration.rdoSeq3;
		
		return null;
	}

	private void updateControlsState()
	{
		form.lblSequence().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.GroupSeq().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.GroupSeq().setEnabled(false);
		
		if (form.getLocalContext().getSequence() != null && form.getLocalContext().getSequence().equals(1))
			form.lblManual().setValue(Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) ? "To be Scheduled For" : "Interval from 1st Appointment booked");
		else if (form.getLocalContext().getSequence() != null && form.getLocalContext().getSequence().equals(3))
			form.lblManual().setValue( Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) ? "Interval from 2nd Appointment booked" : "Interval from 1st Appointment booked");
		
		form.lblManual().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsCAB()) && Boolean.TRUE.equals(form.getLocalContext().getEnableTimeControls()) && form.getLocalContext().getSequence() != null && (form.getLocalContext().getSequence() > 1 || Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome())) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.lblCAB().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsCAB()) && Boolean.TRUE.equals(form.getLocalContext().getEnableTimeControls()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		
		form.intValue().setVisible(Boolean.TRUE.equals(form.getLocalContext().getEnableTimeControls()) && (form.getLocalContext().getSequence() != null && (form.getLocalContext().getSequence() > 1 || Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) || Boolean.TRUE.equals(form.getLocalContext().getIsCAB()))) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.intValue().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.cmbPeriod().setVisible(Boolean.TRUE.equals(form.getLocalContext().getEnableTimeControls()) && (form.getLocalContext().getSequence() != null && (form.getLocalContext().getSequence() > 1 || Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) || Boolean.TRUE.equals(form.getLocalContext().getIsCAB()))) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.cmbPeriod().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.dteApptDate().setVisible(Boolean.TRUE.equals(form.getLocalContext().getEnableTimeControls()) && form.getLocalContext().getSequence() != null && (form.getLocalContext().getSequence() > 1 || Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome())) && Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.dteApptDate().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) ? false : FormMode.EDIT.equals(form.getMode()));
		
		form.qmbService().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.qmbService().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getEnableService()) && FormMode.EDIT.equals(form.getMode()));
		form.lblService().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		
		form.cmbFunction().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.cmbFunction().setEnabled(form.qmbService().getValue() != null && FormMode.EDIT.equals(form.getMode()) && form.cmbFunction().getValues().size() > 0);
		form.lblFunction().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		
		form.lblToSee().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.chkAnyDoctorToSee().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getAnyDoctorToSee()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.chkAnyDoctorToSee().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.chkAssociateSpecialist().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getAssociateSpecialist()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.chkAssociateSpecialist().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.chkConsultant().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.chkConsultant().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.chkOtherHCP().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getOtherHCP()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.chkOtherHCP().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.chkSPR().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getSPR()) && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.chkSPR().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.cmbOtherHCPValues().setVisible(form.chkOtherHCP().getValue() && Boolean.TRUE.equals(form.getLocalContext().getIsVisible()));
		form.cmbOtherHCPValues().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.qmbService().setRequired(Boolean.TRUE.equals(form.getLocalContext().getIsVisible()) && Boolean.TRUE.equals(form.getLocalContext().getEnableService()) && FormMode.EDIT.equals(form.getMode())); //WDEV-22336
	}

	public void setValue(LinkedAppointmentVo value)
	{
		clear();
		
		form.getLocalContext().setCurrentRecord(value);
		
		if(value == null)
			return;
		
		form.GroupSeq().setValue(getGroupSequenceValue(value.getSequence()));
		form.intValue().setValue(value.getPeriodValue());
		form.cmbPeriod().setValue(value.getPeriodType());
		form.dteApptDate().setValue(value.getApptDate());
		
		if(value.getService() != null)
		{
			form.qmbService().newRow(value.getService(), value.getService().getServiceName());
		}
		form.qmbService().setValue(value.getService());
		
		bindFunctionCombo(form.qmbService().getValue());
		form.cmbFunction().setValue(value.getFunction());
		
		form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(value.getService()));
		bindOtherHCPCombo();
		
		if(value.getOPA() != null)
		{
			form.chkConsultant().setValue(value.getOPA().getConsultant());
			form.chkSPR().setValue(value.getOPA().getSPR());
			form.chkAssociateSpecialist().setValue(value.getOPA().getAssociateSpecialist());
			form.chkAnyDoctorToSee().setValue(value.getOPA().getAnyDoctorToSee());
			form.chkOtherHCP().setValue(value.getOPA().getOtherHCP());
			form.cmbOtherHCPValues().setValue(value.getOPA().getOtherHCPValue());
		}
		
		updateControlsState();
	}

	public LinkedAppointmentVo getValue()
	{
		return populateDataFromScreen(form.getLocalContext().getCurrentRecord());
	}

	private LinkedAppointmentVo populateDataFromScreen(LinkedAppointmentVo linkedAppointmentVo)
	{
		LinkedAppointmentVo currentRecord = new LinkedAppointmentVo();
		
		currentRecord.setService(form.qmbService().getValue());
		currentRecord.setFunction(form.cmbFunction().getValue());
		
		if(Boolean.TRUE.equals(form.getLocalContext().getIsCAB()))
		{
			currentRecord.setApptDate(calculateApptDate());
		}
		else
		{
			currentRecord.setApptDate(form.dteApptDate().getValue());
		}
		
		currentRecord.setPeriodValue(form.intValue().getValue());
		currentRecord.setPeriodType(form.cmbPeriod().getValue());
		
		currentRecord.setSequence(form.getLocalContext().getSequence());
		currentRecord.setOPA(populateOPAFromScreen(form.getLocalContext().getCurrentRecord() != null ? form.getLocalContext().getCurrentRecord().getOPA() : null));
		
		return currentRecord;
	}

	private OPAVo populateOPAFromScreen(OPAVo opaVo)
	{
		if(opaVo == null)
		{
			opaVo = new OPAVo();
			opaVo.setCatsReferral(form.getLocalContext().getCatsReferral());
		}
		
		opaVo.setAnyDoctorToSee(form.chkAnyDoctorToSee().getValue());
		opaVo.setAssociateSpecialist(form.chkAssociateSpecialist().getValue());
		opaVo.setConsultant(form.chkConsultant().getValue());
		opaVo.setSPR(form.chkSPR().getValue());
		opaVo.setOtherHCP(form.chkOtherHCP().getValue());
		opaVo.setOtherHCPValue(form.cmbOtherHCPValues().getValue());
		
		return opaVo;
	}

	public void setVisible(Boolean value)
	{
		form.getLocalContext().setIsVisible(value);
		
		updateControlsState();
	}

	@Override
	protected void onChkOtherHCPValueChanged() throws PresentationLogicException
	{
		uncheckToSee(form.chkOtherHCP());
		updateControlsState();
	}

	public void initialise(CatsReferralRefVo catsReferral, Boolean isCAB, Integer sequence, ServiceLiteVo originalService, ServiceFunction originalFunction, Boolean enableTimeControls, Date cabDate, Boolean fromApptOutcome, Boolean enableService)
	{
		form.getLocalContext().setCatsReferral(catsReferral);
		form.getLocalContext().setIsCAB(isCAB);
		form.getLocalContext().setSequence(sequence);
		form.getLocalContext().setOriginalService(originalService);
		form.getLocalContext().setOriginalFunction(originalFunction);
		
		clear();
		
		form.GroupSeq().setValue(getGroupSequenceValue(sequence));
		
		if(originalService != null)
		{
			form.qmbService().newRow(originalService, originalService.getServiceName());
		}
		
		form.qmbService().setValue(originalService);
		
		bindFunctionCombo(form.qmbService().getValue());
		
		if(originalFunction != null)
		{
			form.cmbFunction().newRow(originalFunction, originalFunction.getText());	
		}

		form.cmbFunction().setValue(originalFunction);
		
		form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(originalService));
		
		bindOtherHCPCombo();
		
		form.getLocalContext().setEnableTimeControls(enableTimeControls);
		form.getLocalContext().setApptDate(cabDate);
		form.getLocalContext().setIsFromAppointmentOutcome(fromApptOutcome);
		form.getLocalContext().setEnableService(enableService);
		
		updateControlsState();
	}

	private void clear()
	{
		form.GroupSeq().setValue(null);
		form.intValue().setValue(null);
		form.cmbPeriod().setValue(null);
		form.dteApptDate().setValue(null);
		
		form.qmbService().clear();
		form.cmbFunction().setValue(null);
		form.chkAnyDoctorToSee().setValue(null);
		form.chkAssociateSpecialist().setValue(null);
		form.chkConsultant().setValue(null);
		form.chkOtherHCP().setValue(null);
		form.chkSPR().setValue(null);
		
		form.cmbOtherHCPValues().clear();
	}

	private void bindOtherHCPCombo()
	{
		form.cmbOtherHCPValues().clear();
		
		if(form.getLocalContext().getServiceTriageConf() == null || form.getLocalContext().getServiceTriageConf().getOtherHCPValues() == null)
			return;
		
		for(int i=0; i<form.getLocalContext().getServiceTriageConf().getOtherHCPValues().size(); i++)
		{
			if(form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i) == null)
				continue;
			
			form.cmbOtherHCPValues().newRow(form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i), form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i).getText());
		}
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		bindFunctionCombo(form.qmbService().getValue());
		
		form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(form.qmbService().getValue()));
		bindOtherHCPCombo();
		
		updateControlsState();
	}

	private void bindFunctionCombo(ServiceLiteVo value)
	{
		form.cmbFunction().clear();
		
		if(value == null)
			return;
		
		ServiceFunctionLiteVoCollection serviceFunction = domain.listServiceFunctions(form.qmbService().getValue());
		
		for(ServiceFunctionLiteVo function : serviceFunction)
		{
			if(function == null || function.getFunction() == null)
				continue;
			
			form.cmbFunction().newRow(function.getFunction(), function.getFunction().getText());
		}
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbService().clear();
		
		if(value == null)
			return;
		
		ServiceLiteVoCollection services = domain.listService(value);
		
		if(services == null)
			return;
		
		for(ServiceLiteVo service : services)
		{
			if(service == null)
				continue;
			
			form.qmbService().newRow(service, service.getServiceName());
		}
		
		if(services.size() == 1)
		{
			form.qmbService().setValue(services.get(0));
			onQmbServiceValueChanged();
		}
		else
		{
			form.qmbService().showOpened();
		}
	}

	@Override
	protected void onIntValueValueChanged() throws PresentationLogicException
	{
		form.dteApptDate().setValue(Boolean.TRUE.equals(form.getLocalContext().getIsCAB()) || Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) ? calculateApptDate() : null);
	}

	private Date calculateApptDate()
	{
		Date date = form.getLocalContext().getApptDate();
		
		if (Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()))
		{
			if (form.intValue().getValue() == null || form.cmbPeriod().getValue() == null)
				return null;
			
			if (form.getLocalContext().getPreviousApptDate() != null)
				date = (Date) form.getLocalContext().getPreviousApptDate().clone();
			else
				date = new Date();
		}
		
		if(date == null)
			return null;
		
		if(form.intValue().getValue() != null)
		{
			if(TimeUnitsSecondsToMonths.DAYS.equals(form.cmbPeriod().getValue()))
			{
				date.addDay(form.intValue().getValue());
			}
			else if(TimeUnitsSecondsToMonths.WEEKS.equals(form.cmbPeriod().getValue()))
			{
				date.addDay(7 * form.intValue().getValue());
			}
			else if(TimeUnitsSecondsToMonths.MONTHS.equals(form.cmbPeriod().getValue()))
			{
				date.addMonth(form.intValue().getValue());
			}
		}
		
		return date;
	}

	@Override
	protected void onDteApptDateValueChanged() throws PresentationLogicException
	{
		form.intValue().setValue(null);
		form.cmbPeriod().setValue(null);
	}

	@Override
	protected void onCmbPeriodValueChanged() throws PresentationLogicException
	{
		form.dteApptDate().setValue(Boolean.TRUE.equals(form.getLocalContext().getIsCAB()) || Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()) ? calculateApptDate() : null);
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}

	@Override
	protected void onChkAssociateSpecialistValueChanged() throws PresentationLogicException
	{
		uncheckToSee(form.chkAssociateSpecialist());
		
	}

	private void uncheckToSee(CheckBox checkBox)
	{
		boolean consultant = (checkBox.getID() == form.chkConsultant().getID()) && Boolean.TRUE.equals(form.chkConsultant().getValue());
		boolean spr = (checkBox.getID() == form.chkSPR().getID()) && Boolean.TRUE.equals(form.chkSPR().getValue());
		boolean associateSpecialist = (checkBox.getID() == form.chkAssociateSpecialist().getID()) && Boolean.TRUE.equals(form.chkAssociateSpecialist().getValue());
		boolean anyDoctor = (checkBox.getID() == form.chkAnyDoctorToSee().getID()) && Boolean.TRUE.equals(form.chkAnyDoctorToSee().getValue());
		boolean otherHcp = (checkBox.getID() == form.chkOtherHCP().getID()) && Boolean.TRUE.equals(form.chkOtherHCP().getValue());
		
		form.chkConsultant().setValue( consultant ? true : false);
		form.chkSPR().setValue( spr ? true : false);
		form.chkAssociateSpecialist().setValue( associateSpecialist ? true : false);
		form.chkAnyDoctorToSee().setValue( anyDoctor ? true : false);
		form.chkOtherHCP().setValue( otherHcp ? true : false);
		form.cmbOtherHCPValues().setValue(null);
		
		updateControlsState();
		
	}

	@Override
	protected void onChkAnyDoctorToSeeValueChanged() throws PresentationLogicException
	{
		uncheckToSee(form.chkAnyDoctorToSee());
		
	}

	@Override
	protected void onChkSPRValueChanged() throws PresentationLogicException
	{
		uncheckToSee(form.chkSPR());
		
	}

	@Override
	protected void onChkConsultantValueChanged() throws PresentationLogicException
	{
		uncheckToSee(form.chkConsultant());
		
	}

	public List<String> getErrors()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		//WDEV-22336
		if (form.qmbService().getVisible() && form.qmbService().getValue() == null && form.getLocalContext().getSequence() != null)
		{
			if (form.getLocalContext().getSequence().equals(1))
				uiErrors.add("Sequence 1 - Service is mandatory.");
			else if (form.getLocalContext().getSequence().equals(2))
				uiErrors.add("Sequence 2 - Service is mandatory.");
			else if (form.getLocalContext().getSequence().equals(3))
				uiErrors.add("Sequence 3 - Service is mandatory.");
		}
		//WDEV-22336 ends here
		
		if (form.intValue().isVisible() && form.cmbPeriod().getVisible() && form.getLocalContext().getSequence() != null && (form.intValue().getValue() == null || form.cmbPeriod().getValue() == null))
		{
			if (form.getLocalContext().getSequence().equals(1))
			{
				if (form.lblManual().isVisible())
					uiErrors.add("Sequence 1 - To be Scheduled For is mandatory.");
				else if (form.lblCAB().isVisible())
					uiErrors.add("Sequence 1 - Interval before the C&B Appt is mandatory.");
			}
			else if (form.getLocalContext().getSequence().equals(2))
			{
				if (form.lblManual().isVisible())
					uiErrors.add("Sequence 2 - Interval from 1st Appoinment booked is mandatory.");
				else if (form.lblCAB().isVisible())
					uiErrors.add("Sequence 2 - Interval before the C&B Appt is mandatory.");
			}
			else if (form.getLocalContext().getSequence().equals(3))
			{
				if (form.lblManual().isVisible())
				{
					if (Boolean.TRUE.equals(form.getLocalContext().getIsFromAppointmentOutcome()))
						uiErrors.add("Sequence 3 - Interval from 2nd Appoinment booked is mandatory.");
					else
						uiErrors.add("Sequence 3 - Interval from 1st Appoinment booked is mandatory.");
				}
				else if (form.lblCAB().isVisible())
					uiErrors.add("Sequence 3 - Interval before the C&B Appt is mandatory.");
			}
		}
		
		//WDEV-22336
		Boolean consultantChecked = form.chkConsultant().isVisible() && form.chkConsultant().getValue();
		Boolean sprChecked = form.chkSPR().isVisible() && form.chkSPR().getValue();
		Boolean specialistChecked =  form.chkAssociateSpecialist().isVisible() && form.chkAssociateSpecialist().getValue();
		Boolean anyDoctorChecked = form.chkAnyDoctorToSee().isVisible() && form.chkAnyDoctorToSee().getValue();
		Boolean otherHCPChecked = form.chkOtherHCP().isVisible() && form.chkOtherHCP().getValue();
		
		Boolean currentSequenceVisible = form.chkConsultant().isVisible() || form.chkSPR().isVisible() || form.chkAssociateSpecialist().isVisible() ||form.chkAnyDoctorToSee().isVisible() || form.chkOtherHCP().isVisible();
		
		Boolean oneValueChecked = false;
		
		if (consultantChecked || sprChecked || specialistChecked || anyDoctorChecked || otherHCPChecked)
		{
			oneValueChecked = true;
		}
		
		if(!oneValueChecked && currentSequenceVisible && form.getLocalContext().getSequence() != null)
		{
			if (form.getLocalContext().getSequence().equals(1))
				uiErrors.add("Sequence 1 - To See is mandatory.");
			else if (form.getLocalContext().getSequence().equals(2))
				uiErrors.add("Sequence 2 - To See is mandatory.");
			else if (form.getLocalContext().getSequence().equals(3))
				uiErrors.add("Sequence 3 - To See is mandatory.");
		}
		//WDEV-22336 ends here
		
		if (form.cmbOtherHCPValues().getVisible() && form.cmbOtherHCPValues().getValue() == null && form.getLocalContext().getSequence() != null)
		{
			if (form.getLocalContext().getSequence().equals(1))
				uiErrors.add("Sequence 1 - Other HCP is mandatory.");
			else if (form.getLocalContext().getSequence().equals(2))
				uiErrors.add("Sequence 2 - Other HCP is mandatory.");
			else if (form.getLocalContext().getSequence().equals(3))
				uiErrors.add("Sequence 3 - Other HCP is mandatory.");
		}
		
		return uiErrors;
	}

	public Date getScheduledForDate()
	{
		return form.dteApptDate().getValue();
	}

	public void setPreviousApptDate(Date date)
	{
		if (form.getLocalContext().getSequence().equals(2) || form.getLocalContext().getSequence().equals(3))
		{
		form.getLocalContext().setPreviousApptDate(date);
		form.dteApptDate().setValue(calculateApptDate());
		}
		
	}
}
