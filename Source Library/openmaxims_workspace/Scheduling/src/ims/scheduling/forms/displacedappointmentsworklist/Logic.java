//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.displacedappointmentsworklist;

import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo;
import ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVoCollection;
import ims.scheduling.vo.DisplacedAppointmentsSearchCriteriaVo;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.SessionManagementVo;
import ims.scheduling.vo.SessionManagementVoCollection;
import ims.scheduling.vo.Session_ListOwnerVoCollection;

import java.text.SimpleDateFormat;
import java.util.ArrayList;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String	COLUMN_CAB					= "0";
	private static final String	COLUMN_PATIENT_IDENTIFIER	= "1";
	private static final String	COLUMN_PATIENT	    		= "2";
	private static final String	COLUMN_SESSION_DATE    		= "3";
	private static final String	COLUMN_START_TIME			= "4";
	private static final String	COLUMN_END_TIME				= "5";
	private static final String	COLUMN_URGENCY              = "6";
	private static final String	COLUMN_SLOT_OWNER     		= "7";
	private static final String	COLUMN_ACTIVITY      		= "8";
	private static final String	COLUMN_LINKED_APPOINTMENTS	= "9";
	private static final String	COLUMN_RTT_BREACH			= "10";
	private static final String COLUMN_CANCELLATION_REASON	= "11";

	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCABMessageBoxIDIsNotNull() && form.getLocalContext().getCABMessageBoxID() == messageBoxId && DialogResult.YES.equals(result))
			updateCABBookingAndSessionSlot();
		else
			form.lyrSessions().tabPageExtended().dyngrdSlots().setSelectedRow(null);
		
		updateControlsState();
	}
	
	
	private void updateCABBookingAndSessionSlot() 
	{
		BookingAppointmentForDisplacedAppointmentVo voAppt = domain.getDisplacedBookingAppointment((BookingAppointmentForDisplacedAppointmentVo)form.lyrSessions().tabPageExtended().dyngrdSlots().getSelectedRow().getValue());
		if (voAppt == null)
			return;
		
		voAppt.setIsDisplaced(false);

		String[] arrErrors = voAppt.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.saveAppointment(voAppt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		loadSessionAppointments();
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(null);

		if(formName.equals(form.getForms().RefMan.BookAppointmentDialog) && result.equals(DialogResult.OK))
		{
			form.getGlobalContext().Core.setPatientShort(null);
			
			loadSessionAppointments();
		}
		else if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}

		updateControlsState();
	}
	
	@Override
	protected void onGrdSessionsSelectionChanged()
	{
		loadSessionAppointments();
		updateControlsState();
	}
	
	
	private void loadSessionAppointments() 
	{
		form.lyrSessions().tabPageExtended().dyngrdSlots().getRows().clear();
		form.lyrSessions().tabPageExtended().htmSession().setHTML(" ");

		populateDisplacedAppts(domain.getDisplacedAppointmentsForSession(form.lyrSessions().tabPageSession().grdSessions().getValue()));
	}

	private void bookAppt()
	{
		BookingAppointmentForDisplacedAppointmentVo voAppt = ((BookingAppointmentForDisplacedAppointmentVo)form.lyrSessions().tabPageExtended().dyngrdSlots().getSelectedRow().getValue());
		
	
		SessionManagementVo session = form.lyrSessions().tabPageSession().grdSessions().getValue();
		form.getGlobalContext().Scheduling.setBookingAppointment(domain.getBookingAppointment(voAppt));
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextFromCatsReferral(voAppt));//WDEV-22521
		form.getGlobalContext().Scheduling.setBookingService(session.getService());
		form.getGlobalContext().Scheduling.setBookingListType(form.getGlobalContext().Scheduling.getBookingAppointment().getSessionIsNotNull() ? form.getGlobalContext().Scheduling.getBookingAppointment().getSession().getListType() : null);
		form.getGlobalContext().Scheduling.setBookingHospital(domain.getHospitalForCurrentLocation(session.getSchLocation().getID_Location()));
		form.getGlobalContext().Scheduling.setBookingLocation(session.getSchLocation());
		form.getGlobalContext().Scheduling.setBookingUrgency(voAppt.getSessionSlotIsNotNull() ? voAppt.getSessionSlot().getPriority() : null);
		form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((BookingAppointmentForDisplacedAppointmentVo)form.lyrSessions().tabPageExtended().dyngrdSlots().getSelectedRow().getValue()).getPatient()));

		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
		
	}
		
	private boolean isReferralEndOfCare()
	{
		CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferralForAppointment(((BookingAppointmentForDisplacedAppointmentVo)form.lyrSessions().tabPageExtended().dyngrdSlots().getSelectedRow().getValue()));
		form.getGlobalContext().RefMan.setCatsReferral(catsReferral);
		
		if (catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}

	private void populateDisplacedAppts(BookingAppointmentForDisplacedAppointmentVoCollection displacedAppointmentsForSession) 
	{
		if (displacedAppointmentsForSession == null || displacedAppointmentsForSession.size() == 0)
		{
			clearTabs();
			engine.showMessage("All Displaced Appointments for the Session you have been working on haved been re-booked.", "Session is now fully Re-booked", MessageButtons.OK);
			form.lyrSessions().showtabPageSession();
			doSearch();

			return;
		}

		populateExtendedViewSessionLabel();

		form.lyrSessions().tabPageExtended().dyngrdSlots().getRows().clear();
		for (int i = 0; i < displacedAppointmentsForSession.size(); i++)
		{
			BookingAppointmentForDisplacedAppointmentVo appt = displacedAppointmentsForSession.get(i);
			
			DynamicGridRow nDynamicRow = form.lyrSessions().tabPageExtended().dyngrdSlots().getRows().newRow();
			
			DynamicGridCell cellCAB = nDynamicRow.getCells().newCell(getColumnById(COLUMN_CAB), DynamicCellType.IMAGE);
			cellCAB.setValue(appt.getIsCABBookingIsNotNull() && appt.getIsCABBooking() ? form.getImages().Core.ChooseBook : null);
			cellCAB.setReadOnly(true);

			DynamicGridCell cellPid = nDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT_IDENTIFIER), DynamicCellType.HTMLVIEW);
			if (appt.getPatient() != null && appt.getPatient().getDisplayId() != null)
				cellPid.setValue(appt.getPatient().getDisplayId()!= null && appt.getPatient().getDisplayId().getValueIsNotNull() ? appt.getPatient().getDisplayId().getValue().toString():"");
			cellPid.setReadOnly(true);
			
			DynamicGridCell cellPatient = nDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT), DynamicCellType.HTMLVIEW);
			if (appt.getPatient() != null)
				cellPatient.setValue(appt.getPatient().getName().toString());
			cellPatient.setReadOnly(true);
			
			DynamicGridCell cellSessionDate = nDynamicRow.getCells().newCell(getColumnById(COLUMN_SESSION_DATE), DynamicCellType.HTMLVIEW);
			if (appt.getAppointmentDateIsNotNull())
				cellSessionDate.setValue(appt.getAppointmentDate().toString());
			cellSessionDate.setReadOnly(true);

			DynamicGridCell cellStartTime = nDynamicRow.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.HTMLVIEW);
			if (appt.getApptStartTime() != null)
				cellStartTime.setValue(appt.getApptStartTime().toString());
			cellStartTime.setReadOnly(true);
			
			DynamicGridCell cellEndTime = nDynamicRow.getCells().newCell(getColumnById(COLUMN_END_TIME), DynamicCellType.HTMLVIEW);
			if (appt.getApptEndTime() != null)
				cellEndTime .setValue(appt.getApptEndTime().toString());
			cellEndTime.setReadOnly(true);

			DynamicGridCell cellUrgency = nDynamicRow.getCells().newCell(getColumnById(COLUMN_URGENCY), DynamicCellType.IMAGE);
			cellUrgency.setValue(appt.getSessionSlotIsNotNull() && appt.getSessionSlot().getPriorityIsNotNull() ? appt.getSessionSlot().getPriority().getImage() : null);
			cellUrgency.setTooltip(appt.getSessionSlotIsNotNull() && appt.getSessionSlot().getPriorityIsNotNull() ? appt.getSessionSlot().getPriority().getText() : null);
			cellUrgency.setReadOnly(true);

			DynamicGridCell cellSlotOwner = nDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_OWNER), DynamicCellType.HTMLVIEW);
			if(appt.getSessionSlotIsNotNull() && appt.getSessionSlot().getSlotRespIsNotNull())
				cellSlotOwner.setValue(appt.getSessionSlot().getSlotResp().getHcpIsNotNull() ? appt.getSessionSlot().getSlotResp().getHcp().toString() : "");
			cellSlotOwner.setReadOnly(true);

			DynamicGridCell cellActivity = nDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.HTMLVIEW);
			if (appt.getActivityIsNotNull())
				cellActivity.setValue(appt.getActivity().getNameIsNotNull() ? appt.getActivity().getName().toString() : "");
			cellActivity.setReadOnly(true);

			DynamicGridCell cellLinked = nDynamicRow.getCells().newCell(getColumnById(COLUMN_LINKED_APPOINTMENTS), DynamicCellType.IMAGE);
			if (appt.getLinkedAppointmentsIsNotNull() &&  appt.getLinkedAppointments().size()>0)
			{
				cellLinked.setValue(form.getImages().Admin.link);
				cellLinked.setTooltip("This appointment has one or more linked appointments");
				cellLinked.setReadOnly(true);				
			}

			DynamicGridCell cellRTTBreach = nDynamicRow.getCells().newCell(getColumnById(COLUMN_RTT_BREACH), DynamicCellType.HTMLVIEW);
			if (appt.getRTTBreachKPIDateIsNotNull())
				cellRTTBreach.setValue(appt.getRTTBreachKPIDateIsNotNull() ? appt.getRTTBreachKPIDate().toString() : "");
			cellRTTBreach.setReadOnly(true);
			
			DynamicGridCell cellCancelReason = nDynamicRow.getCells().newCell(getColumnById(COLUMN_CANCELLATION_REASON), DynamicCellType.HTMLVIEW);
			if (appt.getCurrentStatusRecordIsNotNull() && appt.getCurrentStatusRecord().getCancellationReasonIsNotNull())
				cellCancelReason.setValue(appt.getCurrentStatusRecord().getCancellationReason().toString());
			cellCancelReason.setReadOnly(true);
			
			nDynamicRow.setValue(appt);
		}	
		form.lyrSessions().showtabPageExtended();
		
	}
	
	@Override
	protected void onDyngrdSlotsRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.getContextMenus().Scheduling.getDisplacedAppointmentsREBOOK_APPOINTMENTItem().setVisible(form.lyrSessions().tabPageExtended().dyngrdSlots().getValue() instanceof BookingAppointmentForDisplacedAppointmentVo);
		form.getContextMenus().Scheduling.getDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem().setVisible(form.lyrSessions().tabPageExtended().dyngrdSlots().getValue() instanceof BookingAppointmentForDisplacedAppointmentVo);
	}
	
	@Override
	protected void onCcListOwnerValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lblListOwners().setValue("");
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);
	}
	
	@Override
	protected void onCmbListTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	private void clearSearchCriteria()
	{
		form.cmbHospital().setValue(null);
		form.cmbLocation().setValue(null);
		form.qmbProfile().clear();
		form.cmbService().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		form.cmbListType().setValue(null);

		form.getGlobalContext().Scheduling.setDisplacedAppointmentsSearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearTabs();
		form.lyrSessions().showtabPageSession();
		
		updateControlsState();
	}
	
	
	private boolean validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			listOfErrors.add("Date From cannot be greater than Date To.");

		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}


	private void populateExtendedViewSessionLabel()
	{
		SessionManagementVo session = form.lyrSessions().tabPageSession().grdSessions().getValue();

		StringBuffer sessionInfo = new StringBuffer();

		sessionInfo.append("<font size = 2>");
		sessionInfo.append(session.getName() != null ? "Session Details: <b>" + session.getName() + "</b>": "");

		if (session.getSessionDate() != null)
		{
			SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE");
			sessionInfo.append("&nbsp;&nbsp;&nbsp;&nbsp;<b>" + dateFormat.format(session.getSessionDate().getDate()) + "</b>");
			sessionInfo.append(" - <b>" + session.getSessionDate() + "</b>");
		}

		sessionInfo.append(session.getStartTm() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;<b>" + session.getStartTm() + "</b>" : "");
		sessionInfo.append(session.getEndTm() != null ? " - <b>" + session.getEndTm() + "</b>" : "");

		sessionInfo.append("<br>");
		LocationLiteVo voHosp = null;
		if (session.getSchLocation() != null)
			voHosp = domain.getHospitalForCurrentLocation(session.getSchLocation().getID_Location());
		
		sessionInfo.append(voHosp != null && voHosp.getNameIsNotNull() ? "Hospital: <b>" + voHosp.getName() + "</b> &nbsp;&nbsp;&nbsp; " : "");
		sessionInfo.append(session.getSchLocation() != null && session.getSchLocation().getName() != null ? "Location: <b>" + session.getSchLocation().getName() + "</b>" : "");
		sessionInfo.append(session.getService() != null && session.getService().getServiceName() != null ? "&nbsp;&nbsp;&nbsp; Service: <b>" + session.getService().getServiceName() + "</b>" : "");
		sessionInfo.append(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? "&nbsp;&nbsp;&nbsp; Status: <b>" + session.getSessionStatus().getText() + "</b>" : "");
			
		sessionInfo.append("</font>");
			
		form.lyrSessions().tabPageExtended().htmSession().setHTML(sessionInfo.toString());
	}

	private void clearTabs()
	{
		form.lyrSessions().tabPageSession().grdSessions().getRows().clear();
		form.lyrSessions().tabPageSession().setHeaderVisible(true);
		form.lyrSessions().tabPageExtended().dyngrdSlots().getRows().clear();

		form.lyrSessions().tabPageExtended().htmSession().setHTML(" ");
		form.lyrSessions().tabPageExtended().dyngrdSlots().getRows().clear();

		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearTabs();

		if (!validateSearchCriteria())
			return;

		populateSearchCriteriaFromScreen();
		form.lyrSessions().showtabPageSession();

		doSearch();
		
		updateControlsState();
	}
	
	private void populateSearchCriteriaFromScreen()
	{
		DisplacedAppointmentsSearchCriteriaVo searchCriteria = new DisplacedAppointmentsSearchCriteriaVo();

		searchCriteria.setHospital(form.cmbHospital().getValue());
		searchCriteria.setLocation(form.cmbLocation().getValue());
		searchCriteria.setProfile(form.qmbProfile().getValue());
		searchCriteria.setService(form.cmbService().getValue());
		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());
		searchCriteria.setListType(form.cmbListType().getValue());

		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			searchCriteria.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			searchCriteria.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
		
		searchCriteria.setListType(form.cmbListType().getValue());
		form.getGlobalContext().Scheduling.setDisplacedAppointmentsSearchCriteria(searchCriteria);
	}


	@Override
	protected void onQmbProfileTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateProfiles(value);
	}

	private void populateProfiles(String value)
	{
		form.qmbProfile().clear();

		if (value == null || value.length() == 0)
			return;
	
		ProfileLiteVoCollection profiles = domain.listProfiles(value);
	
		if (profiles == null || profiles.size() == 0)
			return;
	
		for (ProfileLiteVo profile : profiles)
		{
			if (profile == null)
				continue;
	
			form.qmbProfile().newRow(profile, profile.getName());
		}
	
		if (profiles.size() == 1)
		{
			form.qmbProfile().setValue(profiles.get(0));
		}
		else
		{
			form.qmbProfile().showOpened();
		}
	}

	@Override
	protected void onCmbLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		populateLocationCombo();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.DisplacedAppointments.REBOOK_APPOINTMENT:
				rebookAppt();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.DisplacedAppointments.REMOVE_FROM_DISPLACED_WORKLIST:
				if(removeFromDisplacedList())
					loadSessionAppointments();
			break;
		}
		
		updateControlsState();
	}
	
	private boolean removeFromDisplacedList()
	{
		if(!(form.lyrSessions().tabPageExtended().dyngrdSlots().getValue() instanceof BookingAppointmentForDisplacedAppointmentVo))
			return false;
		
		try
		{
			domain.removeFromDisplacedWorklist((BookingAppointmentForDisplacedAppointmentVo) form.lyrSessions().tabPageExtended().dyngrdSlots().getValue());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			loadSessionAppointments();
			
			return false;
		}
		
		return true;
	}
	
	private void rebookAppt()
	{
		BookingAppointmentForDisplacedAppointmentVo voAppt = ((BookingAppointmentForDisplacedAppointmentVo)form.lyrSessions().tabPageExtended().dyngrdSlots().getSelectedRow().getValue());
		if (voAppt.getIsCABBookingIsNotNull() && voAppt.getIsCABBooking())
			form.getLocalContext().setCABMessageBoxID(engine.showMessage("Do you want to remove this Choose and Book appointment from the Displaced Appointments Worklist ?", "CAB Appointment", MessageButtons.YESNO, MessageIcon.WARNING));
		else
			bookAppt();
	}
	
	
	private void initialise()
	{

		form.lblListOwners().setValue("");
		
		form.ccListOwner().initialize(MosType.HCP);
		populateHospitalCombo();
		populateServicesCombo();

		populateSearchCriteria();
		

		initialiseGrid();
		
		form.setMode(FormMode.VIEW);
		
		updateControlsState();
		
	}

	private void populateServicesCombo()
	{
		form.cmbService().clear();

		ServiceVoCollection voCollServices = domain.listServices();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}

	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voLocColl = domain.listActiveHospitals();

		if (voLocColl != null)
		{
			for (LocationLiteVo hospital : voLocColl)
			{
				form.cmbHospital().newRow(hospital, hospital.getName());
			}
		}

		ILocation location = engine.getCurrentLocation();

		if (location != null)
		{
			LocationLiteVo hospitalForCurrentLocation = domain.getHospitalForCurrentLocation(location.getID());
			form.cmbHospital().setValue(hospitalForCurrentLocation);
		}

		populateLocationCombo();

	}

	private void populateLocationCombo()
	{
		form.cmbLocation().clear();

		if (form.cmbHospital().getValue() == null)
			return;

		if (form.cmbHospital().getValue().getType() != null && form.cmbHospital().getValue().getType().equals(LocationType.HOSP))
		{
			LocShortMappingsVoCollection voLocShortMapColl = domain.listActiveLocationsForHospital(form.cmbHospital().getValue());

			if (voLocShortMapColl != null)
			{
				for (int i = 0; i < voLocShortMapColl.size(); i++)
				{
					LocShortMappingsVo voLocShortMap = voLocShortMapColl.get(i);
					form.cmbLocation().newRow(voLocShortMap, voLocShortMap.getName());
				}
			}
		}
	}

	private void populateSearchCriteria()
	{
		DisplacedAppointmentsSearchCriteriaVo searchCriteria = form.getGlobalContext().Scheduling.getDisplacedAppointmentsSearchCriteria();

		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue(searchCriteria.getHospital());
		form.cmbLocation().setValue(searchCriteria.getLocation());
		form.cmbListType().setValue(searchCriteria.getListType());		//wdev-19419
		//WDEV-20479 form.ccConsultant().setValue(searchCriteria.getConsultant());	//wdev-19419

		if (searchCriteria.getProfile() != null)
		{
			form.qmbProfile().newRow(searchCriteria.getProfile(), searchCriteria.getProfile().getName());
			form.qmbProfile().setValue(searchCriteria.getProfile());
		}

		form.cmbService().setValue(searchCriteria.getService());
		form.dteFrom().setValue(searchCriteria.getDateFrom());
		form.dteTo().setValue(searchCriteria.getDateTo());

		if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
		{
			if (searchCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(searchCriteria.getListOwners().get(0));
			}
			else
			{
				form.getGlobalContext().Scheduling.setSelectedHCPs(searchCriteria.getListOwners());
				populateListOwnersLabel(searchCriteria.getListOwners());

			}
		}

		doSearch();
	}
	
	private void doSearch()
	{
		SessionManagementVoCollection sessions = domain.listSessionsWithDisplacedApppointments(form.getGlobalContext().Scheduling.getDisplacedAppointmentsSearchCriteria());

		if (sessions == null || sessions.size() == 0)
		{
			engine.showMessage("No matching Sessions found.");
			return;
		}

		populateClinicView(sessions);
	}

	private void populateClinicView(SessionManagementVoCollection sessions)
	{

		form.lyrSessions().tabPageSession().grdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

		for (SessionManagementVo session : sessions)
		{
			ims.scheduling.forms.displacedappointmentsworklist.GenForm.lyrSessionsLayer.tabPageSessionContainer.grdSessionsRow newRow = form.lyrSessions().tabPageSession().grdSessions().getRows().newRow();

			if (session == null)
				continue;

			newRow.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

			newRow.setColSessionName(session.getName() != null ? session.getName() : "");
			newRow.setTooltipForColSessionName(newRow.getColSessionName());

			newRow.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
			newRow.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

			newRow.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
			newRow.setTooltipForColService(newRow.getColService());

			newRow.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
			newRow.setTooltipForColLocation(newRow.getColLocation());

			newRow.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
			newRow.setTooltipForColStatus(newRow.getColStatus());
			
			newRow.setColListType(session.getListTypeIsNotNull() ? session.getListType().getIItemText():"");
			newRow.setTooltipForColListType(session.getListTypeIsNotNull() ? session.getListType().getIItemText():"");
			
			if(session.getListOwners() != null)
			{
				Session_ListOwnerVoCollection listOwners =  session.getListOwners();
				StringBuilder listOwn = new StringBuilder();
				for (int j = 0; j < listOwners.size(); j++)
				{
					if(Boolean.TRUE.equals(listOwners.get(j).getListOwner()))
					{
						listOwn.append(listOwners.get(j).getHcpIsNotNull() ? listOwners.get(j).getHcp().getIHcpName(): "");
						listOwn.append(", ");
					}
				}
				
				if(listOwn != null && listOwn.length() > 1)
				{
					String ownersList = listOwn.toString();
					ownersList = ownersList.substring(0, ownersList.length() - 2);
					newRow.setColListOwners(ownersList);
					newRow.setTooltipForColListOwners(ownersList);
				}
				
			}
			newRow.setValue(session);
		}

	}


	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		
		if (listOwners == null)
			return;
		
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 80)
		{
			form.lblListOwners().setValue(namesString.substring(0, 80) + "...");
		}
		else
			form.lblListOwners().setValue(namesString.toString());

		form.lblListOwners().setTooltip(namesString.toString());

	}
	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().getByIdentifier(identifier);
	}
	
	private void initialiseGrid()
	{
		form.lyrSessions().tabPageExtended().dyngrdSlots().setHeaderHeight(45);
		form.lyrSessions().tabPageExtended().dyngrdSlots().setSelectable(true);
		
		form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().clear();
		
		DynamicGridColumn column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn(" ", COLUMN_CAB);
		column.setWidth(30);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		 column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn(dispIdType.getText(),COLUMN_PATIENT_IDENTIFIER );
		column.setWidth(50);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("Patient", COLUMN_PATIENT);
		
		column.setWidth(125);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);

		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("Session\nDate", COLUMN_SESSION_DATE);
		column.setWidth(80);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("Start\nTime", COLUMN_START_TIME);
		column.setWidth(43);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false); 
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("End\nTime", COLUMN_END_TIME);
		column.setWidth(43);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false); 
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn(" ", COLUMN_URGENCY);
		column.setWidth(20);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("Slot Owner", COLUMN_SLOT_OWNER);
		column.setWidth(115);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("Activity", COLUMN_ACTIVITY);
		column.setWidth(115);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn(" ", COLUMN_LINKED_APPOINTMENTS);
		column.setWidth(24);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("RTT Breach", COLUMN_RTT_BREACH);
		column.setWidth(55);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrSessions().tabPageExtended().dyngrdSlots().getColumns().newColumn("Cancellation\nReason ", COLUMN_CANCELLATION_REASON);
		column.setWidth(125);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
	}
	
	@Override
	protected void onImbAddListOwnersClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
	}

}
