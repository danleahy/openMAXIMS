//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.displacedappointmentsworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSessionsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageSessionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSessionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSessionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSessionDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSessionDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSessionDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColSessionDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColSessionDate()
				{
					return (String)super.row.get(0);
				}
				public void setColSessionDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSessionDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSessionNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSessionNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSessionNameOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColSessionName(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColSessionName()
				{
					return (String)super.row.get(1);
				}
				public void setColSessionName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColSessionNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColStartTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColStartTimeReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColStartTimeOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColStartTime(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColStartTime()
				{
					return (String)super.row.get(2);
				}
				public void setColStartTime(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColStartTimeTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColEndTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColEndTimeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColEndTimeOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColEndTime(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColEndTime()
				{
					return (String)super.row.get(3);
				}
				public void setColEndTime(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColEndTimeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColServiceReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColServiceOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColService(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColService()
				{
					return (String)super.row.get(4);
				}
				public void setColService(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColServiceTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColLocationReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColLocationOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColLocation(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColLocation()
				{
					return (String)super.row.get(5);
				}
				public void setColLocation(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColLocationTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColListTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColListTypeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColListTypeOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColListType(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColListType()
				{
					return (String)super.row.get(6);
				}
				public void setColListType(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColListTypeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColListOwnersReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColListOwnersReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColListOwnersOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColListOwners(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getColListOwners()
				{
					return (String)super.row.get(7);
				}
				public void setColListOwners(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColListOwnersTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getColStatus()
				{
					return (String)super.row.get(8);
				}
				public void setColStatus(String value)
				{
					super.row.set(8, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.scheduling.vo.SessionManagementVo getValue()
				{
					return (ims.scheduling.vo.SessionManagementVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionManagementVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSessionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSessionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSessionsRow get(int index)
				{
					return new grdSessionsRow(super.collection.get(index));
				}
				public grdSessionsRow newRow()
				{
					return new grdSessionsRow(super.collection.newRow());
				}
				public grdSessionsRow newRow(boolean autoSelect)
				{
					return new grdSessionsRow(super.collection.newRow(autoSelect));
				}
				public grdSessionsRow newRowAt(int index)
				{
					return new grdSessionsRow(super.collection.newRowAt(index));
				}
				public grdSessionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSessionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSessionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.scheduling.vo.SessionManagementVoCollection getValues()
				{
					ims.scheduling.vo.SessionManagementVoCollection listOfValues = new ims.scheduling.vo.SessionManagementVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionManagementVo getValue()
				{
					return (ims.scheduling.vo.SessionManagementVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionManagementVo value)
				{
					super.grid.setValue(value);
				}
				public grdSessionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSessionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSessionsRowCollection getRows()
				{
					return new grdSessionsRowCollection(super.grid.getRows());
				}
				public grdSessionsRow getRowByValue(ims.scheduling.vo.SessionManagementVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSessionsRow(row);
				}
				public void setColSessionDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSessionDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSessionNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSessionNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColStartTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColStartTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColEndTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColEndTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColListTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColListTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColListOwnersHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColListOwnersHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 6, 3, 812, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSessionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSessionsTemp);
				grdSessionsGrid grdSessions = (grdSessionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSessionsGrid.class, m_grdSessionsTemp);
				grdSessions.addStringColumn("Session Date", 0, 0, 80, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("Session Name", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("Start Time", 0, 0, 70, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("End Time", 0, 0, 70, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("Service", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("Location", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("List Type", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("List Owners", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSessions.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSessions);
			}

			public grdSessionsGrid grdSessions()
			{
				return (grdSessionsGrid)super.getGrid(0);
			}
		}
		public static class tabPageExtendedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 808, 410, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Scheduling.contextMenuDisplacedAppointments, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 35, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public DynamicGrid dyngrdSlots()
			{
				return (DynamicGrid)super.getControl(0);
			}
			public HTMLViewer htmSession()
			{
				return (HTMLViewer)super.getControl(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 832, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageSession = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Session View", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageSessionContainer m_tabPageSessionContainer = (tabPageSessionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSessionContainer.class, m_tabPageSession, factory);
			super.addContainer(m_tabPageSession, m_tabPageSessionContainer);
			ims.framework.utils.SizeInfo m_tabPageSessionDesignSize = new ims.framework.utils.SizeInfo(832, 496);
			ims.framework.utils.SizeInfo m_tabPageSessionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper4.getWidth(), anchoringHelper4.getHeight());
			m_tabPageSessionContainer.setContext(form, appForm, m_tabPageSession, loader, form_images_local, contextMenus, startControlID, m_tabPageSessionDesignSize, m_tabPageSessionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 832, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageExtended = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Extended View", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageExtendedContainer m_tabPageExtendedContainer = (tabPageExtendedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageExtendedContainer.class, m_tabPageExtended, factory);
			super.addContainer(m_tabPageExtended, m_tabPageExtendedContainer);
			ims.framework.utils.SizeInfo m_tabPageExtendedDesignSize = new ims.framework.utils.SizeInfo(832, 496);
			ims.framework.utils.SizeInfo m_tabPageExtendedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
			m_tabPageExtendedContainer.setContext(form, appForm, m_tabPageExtended, loader, form_images_local, contextMenus, startControlID, m_tabPageExtendedDesignSize, m_tabPageExtendedRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageSession().setVisible(false);
			tabPageExtended().setVisible(false);
		}
		public void settabPageSessionEnabled(boolean value)
		{
			tabPageSession().setEnabled(value);
		}
		public void settabPageExtendedEnabled(boolean value)
		{
			tabPageExtended().setEnabled(value);
		}
		public void showtabPageSession()
		{
			tabPageExtended().setVisible(false);
			tabPageSession().setVisible(true);
		}
		public void showtabPageExtended()
		{
			tabPageSession().setVisible(false);
			tabPageExtended().setVisible(true);
		}

		public tabPageSessionContainer tabPageSession()
		{
			return (tabPageSessionContainer)super.layers.get(0);
		}
		public tabPageExtendedContainer tabPageExtended()
		{
			return (tabPageExtendedContainer)super.layers.get(1);
		}
	}
	public static class cmbListTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ProfileListType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ProfileListType getValue()
		{
			return (ims.scheduling.vo.lookups.ProfileListType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ProfileListType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceShortVo getValue()
		{
			return (ims.core.vo.ServiceShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbProfileComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.ProfileLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.ProfileLiteVo getValue()
		{
			return (ims.scheduling.vo.ProfileLiteVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.scheduling.vo.DisplacedAppointmentsSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.scheduling.vo.DisplacedAppointmentsSearchCriteriaVo' of the global context variable 'Scheduling.DisplacedAppointmentsSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(120);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuDisplacedAppointments = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuDisplacedAppointmentsREMOVE_CABItem = factory.createMenuItem(startControlID.intValue() + 1, "Remove C and B Appointment", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6370001)))
			contextMenus.Scheduling.contextMenuDisplacedAppointments.add(contextMenus.Scheduling.contextMenuDisplacedAppointmentsREMOVE_CABItem);
		contextMenus.Scheduling.contextMenuDisplacedAppointmentsREBOOK_APPOINTMENTItem = factory.createMenuItem(startControlID.intValue() + 2, "Rebook Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6370002)))
			contextMenus.Scheduling.contextMenuDisplacedAppointments.add(contextMenus.Scheduling.contextMenuDisplacedAppointmentsREBOOK_APPOINTMENTItem);
		contextMenus.Scheduling.contextMenuDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove from Displaced Worklist", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6370003)))
			contextMenus.Scheduling.contextMenuDisplacedAppointments.add(contextMenus.Scheduling.contextMenuDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuDisplacedAppointments);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 88, 86, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccListOwnerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper6.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(88), new Integer(86), new Integer(224), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4), m_ccListOwnerForm, instance1 } );
		ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4), m_ccListOwnerForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccListOwnerControl);
		Menu[] menus1 = m_ccListOwnerForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrSessionsLayer m_lyrSessionsLayer = (lyrSessionsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSessionsLayer.class, this, factory);
		super.addLayer(m_lyrSessionsLayer);
		m_lyrSessionsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 336, 90, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<List Owners>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 9, 90, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owners:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 568, 38, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 568, 14, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 312, 14, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Profile:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 312, 38, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 38, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 14, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 640, 32, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 640, 8, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 88, 60, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbListTypeTemp);
		cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
		super.addComboBox(cmbListType);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 368, 32, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbServiceTemp);
		cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
		super.addComboBox(cmbService);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 88, 34, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 88, 8, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 368, 8, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbProfileTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProfileTemp);
		qmbProfileComboBox qmbProfile = (qmbProfileComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProfileComboBox.class, m_qmbProfileTemp);
		super.addComboBox(qmbProfile);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 312, 86, 23, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.FindEnabled16, this.getImages().Core.FindDisabled16, "Add List Owners", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 808, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 776, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccListOwner()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccListOwnerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccListOwnerVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccListOwnerVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccListOwnerEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccListOwnerEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public lyrSessionsLayer lyrSessions()
	{
		return (lyrSessionsLayer)super.getLayer(0);
	}
	public Label lblListOwners()
	{
		return (Label)super.getControl(3);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(12);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(13);
	}
	public cmbListTypeComboBox cmbListType()
	{
		return (cmbListTypeComboBox)super.getComboBox(0);
	}
	public cmbServiceComboBox cmbService()
	{
		return (cmbServiceComboBox)super.getComboBox(1);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(2);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(3);
	}
	public qmbProfileComboBox qmbProfile()
	{
		return (qmbProfileComboBox)super.getComboBox(4);
	}
	public ImageButton imbAddListOwners()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(20);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(21);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookAppointmentDialog = new LocalFormName(134134);
			}
			public final FormName BookAppointmentDialog;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				HcpMultipleSelectDialog = new LocalFormName(114115);
			}
			public final FormName HcpMultipleSelectDialog;
		}

		public RefManForms RefMan;
		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				ChooseBook = new ImageHelper(102339, "Images/Core/ChooseBook.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image ChooseBook;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				link = new ImageHelper(103164, "Images/Admin/small.JPG", new Integer(23), new Integer(23));
			}
			public final ims.framework.utils.Image link;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CABMessageBoxID = new ims.framework.ContextVariable("CABMessageBoxID", prefix + "_lv_Scheduling.DisplacedAppointmentsWorklist.__internal_x_context__CABMessageBoxID_" + componentIdentifier + "");
		}
		
		public boolean getCABMessageBoxIDIsNotNull()
		{
			return !cxl_CABMessageBoxID.getValueIsNull(context);
		}
		public Integer getCABMessageBoxID()
		{
			return (Integer)cxl_CABMessageBoxID.getValue(context);
		}
		public void setCABMessageBoxID(Integer value)
		{
			cxl_CABMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CABMessageBoxID = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class DisplacedAppointments implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int REMOVE_CAB = 1;
				public static final int REBOOK_APPOINTMENT = 2;
				public static final int REMOVE_FROM_DISPLACED_WORKLIST = 3;
			}
			public void disableAllDisplacedAppointmentsMenuItems()
			{
				this.contextMenuDisplacedAppointmentsREMOVE_CABItem.setEnabled(false);
				this.contextMenuDisplacedAppointmentsREBOOK_APPOINTMENTItem.setEnabled(false);
				this.contextMenuDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem.setEnabled(false);
			}
			public void hideAllDisplacedAppointmentsMenuItems()
			{
				this.contextMenuDisplacedAppointmentsREMOVE_CABItem.setVisible(false);
				this.contextMenuDisplacedAppointmentsREBOOK_APPOINTMENTItem.setVisible(false);
				this.contextMenuDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem.setVisible(false);
			}
			private Menu contextMenuDisplacedAppointments;
			public ReadOnlyMenuItem getDisplacedAppointmentsREMOVE_CABItem()
			{
				return this.contextMenuDisplacedAppointmentsREMOVE_CABItem;
			}
			private MenuItem contextMenuDisplacedAppointmentsREMOVE_CABItem;
			public ReadOnlyMenuItem getDisplacedAppointmentsREBOOK_APPOINTMENTItem()
			{
				return this.contextMenuDisplacedAppointmentsREBOOK_APPOINTMENTItem;
			}
			private MenuItem contextMenuDisplacedAppointmentsREBOOK_APPOINTMENTItem;
			public ReadOnlyMenuItem getDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem()
			{
				return this.contextMenuDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem;
			}
			private MenuItem contextMenuDisplacedAppointmentsREMOVE_FROM_DISPLACED_WORKLISTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[204];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPROVIDERCANCELLATIONS", "NumProviderCancellations");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPATIENTCANCELLATIONS", "NumPatientCancellations");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTAPPTKPIDATE", "FirstApptKPIDate");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-RTTBREACHKPIDATE", "RTTBreachKPIDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REASONFORBREACHINGFIRSTAPPTKPI", "ReasonForBreachingFirstApptKPI");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTSFORBREACHINGFIRSTAPPTKPI", "CommentsForBreachingFirstApptKPI");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DONOTMOVE", "DoNotMove");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISFLEXIBLEAPPOINTMENT", "IsFlexibleAppointment");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISWARDATTENDANCE", "IsWardAttendance");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATIENTCATEGORY", "PatientCategory");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASAPPTCOMMUNICATED", "WasApptCommunicated");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISDISPLACED", "IsDisplaced");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-ID", "ID_Location");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-NAME", "Name");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-ISACTIVE", "IsActive");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-TYPE", "Type");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingHospital", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-ID", "ID_Location");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-NAME", "Name");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-TYPE", "Type");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingLocation", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
