//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.movesessiondialog;

import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.scheduling.vo.SessionMoveVo;
import ims.scheduling.vo.SessionMoveVoCollection;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.lookups.SchProfileType;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		SessionShortVo voSession = null;
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof SessionShortVo)
			{
				voSession = (SessionShortVo) args[0];
			}
		}
		
		form.getLocalContext().setSelectedSession(voSession);
		open();
	}

	/**
	 * @param voSession
	 */
	private void open()
	{
		clear();
		form.dteSessionTo().setFocus();
		
		populateHospitalCombo();
		
		SessionShortVo voSession = form.getLocalContext().getSelectedSession();
		
		if(voSession != null)
		{
			form.dteSessionFrom().setValue(voSession.getSessionDate());
			
			form.getLocalContext().setSessionHospital(domain.getHospitalForCurrentLocation(voSession.getSchLocation()));
			
			form.cmbHospital().setValue(form.getLocalContext().getSessionHospital());
			form.qmbLocation().newRow(voSession.getSchLocation(), voSession.getSchLocation().getName());
			form.qmbLocation().setValue(voSession.getSchLocation());
		}
		
		updateControlsState();
		
	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voLocColl = domain.listActiveHospitals();

		if (voLocColl != null)
		{
			for (LocationLiteVo hospital : voLocColl)
			{
				form.cmbHospital().newRow(hospital, hospital.getName());
			}
		}

	}
	
	private void updateControlsState()
	{
		
		boolean apptsExistForSession = domain.countBookedAppointmentsForSession(form.getLocalContext().getSelectedSession()) > 0;
		boolean notOnTheSameDate = (form.dteSessionFrom().getValue() != null && form.dteSessionTo().getValue() != null && !form.dteSessionFrom().getValue().equals(form.dteSessionTo().getValue()));
		boolean differentHospital = form.getLocalContext().getSessionHospital() != null && form.cmbHospital().getValue() != null && !form.getLocalContext().getSessionHospital().getID_Location().equals(form.cmbHospital().getValue().getID_Location());

		boolean showCancelApptsControls = apptsExistForSession && (notOnTheSameDate || differentHospital); 
			
		form.lblAppts().setVisible(showCancelApptsControls);
		form.lblAppts().setTextColor(Color.Red);

		form.lblreason().setVisible(showCancelApptsControls);
		form.lblComment().setVisible(showCancelApptsControls);
		form.cmbReason().setVisible(showCancelApptsControls);
		form.txtComments().setVisible(showCancelApptsControls);

		form.getLocalContext().setCancelAppointments(showCancelApptsControls);

	}

	private void clear()
	{
		form.dteSessionFrom().setValue(null);
		form.dteSessionTo().setValue(null);
		form.cmbHospital().clear();
		form.qmbLocation().clear();
		//WDEV-22944
		form.cmbMoveReason().setValue(null);
		form.txtMoveComment().setValue(null);
		form.getGlobalContext().Admin.setProfileLocation(null); 
		form.getGlobalContext().Admin.setProfileCaseNoteFoldersLocation(null);//WDEV-19518
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SessionShortVo sessionToSave = populateDataFromScreen(form.getLocalContext().getSelectedSession());
		
		String[] arrErrors = getUIValidation();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		boolean apptsExistForSession = domain.countBookedAppointmentsForSession(form.getLocalContext().getSelectedSession()) > 0;
		boolean notOnTheSameDate = (form.dteSessionFrom().getValue() != null && form.dteSessionTo().getValue() != null && !form.dteSessionFrom().getValue().equals(form.dteSessionTo().getValue()));
		boolean differentHospital = form.getLocalContext().getSessionHospital() != null && form.cmbHospital().getValue() != null && !form.getLocalContext().getSessionHospital().getID_Location().equals(form.cmbHospital().getValue().getID_Location());

		boolean showCancelApptsControls = apptsExistForSession && (notOnTheSameDate || differentHospital); 
		
		if (showCancelApptsControls && sessionToSave != null && !SchProfileType.THEATRE.equals(sessionToSave.getSessionProfileType()))
		{
			form.getLocalContext().setBreachedFirstAppointmentsIds(domain.getFirstAppointmentsBreachDate(form.getLocalContext().getSelectedSession(), form.dteSessionTo().getValue()));
			
			if (form.getLocalContext().getBreachedFirstAppointmentsIds() != null && form.getLocalContext().getBreachedFirstAppointmentsIds().size() > 0)
			{
				form.getLocalContext().setBreachFirstApptKPIMessageBoxId(engine.showMessage("Appointments exist within the Session which will breach their KPI. Do you want to continue ? ", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
		}
		
		try
		{
			domain.moveSessionToDate(sessionToSave, form.dteSessionTo().getValue(), form.getLocalContext().getLocationForMovedSession(), form.getLocalContext().getBreachedFirstAppointmentsIds(), form.getGlobalContext().RefMan.getReasonPastFirstApptKPI(), null, form.getLocalContext().getCancelAppointments());
		}
		catch (StaleObjectException e)
		{
			form.getLocalContext().setSelectedSession(domain.getSession(form.getLocalContext().getSelectedSession()));
			open();
			return;
		}
		
		if(Boolean.TRUE.equals(form.chkLetterRequired().getValue()) && form.getLocalContext().getSelectedSession() != null && !SchProfileType.THEATRE.equals(form.getLocalContext().getSelectedSession().getSessionProfileType()))
		{
			form.getGlobalContext().Scheduling.setAppointmentIds(getAppointmentIdsForSession(form.getLocalContext().getSelectedSession()));
			
			if(form.getGlobalContext().Scheduling.getAppointmentIdsIsNotNull())
				engine.open(form.getForms().Scheduling.PrintAppointment, "Reprint Letters");
			else
				engine.close(DialogResult.OK);
		}
		else
			engine.close(DialogResult.OK);
	}
	
	@Override
	protected SessionShortVo populateDataFromScreen(SessionShortVo value)
	{
		//WDEV-22944
		if (value == null)
			value = new SessionShortVo();
		else
			value = (SessionShortVo) value.clone();
		
		value = super.populateDataFromScreen(value);
		
		value.setWasSessionMoved(true);
		value.setLetterRequired(form.chkLetterRequired().getValue());
		
		if (value.getSessionMove()==null)
			value.setSessionMove(new SessionMoveVoCollection());
		
		SessionMoveVo sessionMoveToSave = new SessionMoveVo();
		sessionMoveToSave.setComment(form.txtMoveComment().getValue());
		sessionMoveToSave.setReason(form.cmbMoveReason().getValue());
		sessionMoveToSave.setMoveDate(new Date());
		value.getSessionMove().add(sessionMoveToSave);
		
		return value;
	}

	private ArrayList<Integer> getAppointmentIdsForSession(SessionShortVo selectedSession)
	{
		if (selectedSession == null)
			throw new CodingRuntimeException("selectedSession cannot be null in method getAppointmentIdsForSession");
		
		Integer[] arrIds = domain.getBookedAppointmentIdsForSession(selectedSession);
		ArrayList<Integer> ids = null;
		if(arrIds != null)
		{
			ids = new ArrayList<Integer>();
			for (Integer integer : arrIds)
			{
				ids.add(integer);
			}
		}

		return ids;
	}

	private String[] getUIValidation()
	{
		List<String> errors = new ArrayList<String>();

		boolean differentLocationSelected = form.qmbLocation().getValue() != null && form.getLocalContext().getSelectedSession() != null && form.getLocalContext().getSelectedSession().getSchLocation() != null && !form.qmbLocation().getValue().getID_Location().equals(form.getLocalContext().getSelectedSession().getSchLocation().getID_Location());

		if (form.dteSessionTo().getValue() != null && form.dteSessionTo().getValue().isLessThan(new Date()))
			errors.add("'To Date' must be in the future.");
		
		if (form.dteSessionTo().getValue() == null && !differentLocationSelected)
		errors.add("Please complete 'To Date' or select a different Location.");

//		if (form.dteSessionTo().getValue() != null && form.dteSessionTo().getValue().isLessOrEqualThan(form.dteSessionFrom().getValue()) && !differentLocationSelected)
//			errors.add("'To Date' must be greater than 'From Date' or select a different Location.");
		
		if (form.cmbHospital().getValue() == null)
			errors.add("Hospital is mandatory.");
		
		if (form.qmbLocation().getValue() == null)
			errors.add("Location is mandatory.");
		
		if (form.cmbMoveReason().getValue() == null) //WDEV-22944
			errors.add("Move Reason is mandatory.");
		
		if (Boolean.TRUE.equals(form.cmbReason().getVisible()) &&  form.cmbReason().getValue() == null)
			errors.add("Reason is mandatory.");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		
			if(formName.equals(form.getForms().Scheduling.PrintAppointment))
			{
				form.getGlobalContext().Scheduling.setAppointmentIds(null);
				engine.close(DialogResult.OK);
			}
			else if(formName.equals(form.getForms().RefMan.ReasonForBookingPastFirstApptKPIDialog))
			{
				if (DialogResult.OK.equals(result))
				{
					try
					{
						domain.moveSessionToDate(form.getLocalContext().getSelectedSession(), form.dteSessionTo().getValue(), form.getLocalContext().getLocationForMovedSession(), form.getLocalContext().getBreachedFirstAppointmentsIds(), form.getGlobalContext().RefMan.getReasonPastFirstApptKPI(), null, form.getLocalContext().getCancelAppointments()); //WDEV-19518
					}
					catch (StaleObjectException e)
					{
						form.getLocalContext().setSelectedSession(domain.getSession(form.getLocalContext().getSelectedSession()));
						open();
						return;
					}
					
					if(Boolean.TRUE.equals(form.chkLetterRequired().getValue()) && form.getLocalContext().getSelectedSession() != null && !SchProfileType.THEATRE.equals(form.getLocalContext().getSelectedSession().getSessionProfileType()))
					{
						form.getGlobalContext().Scheduling.setAppointmentIds(getAppointmentIdsForSession(form.getLocalContext().getSelectedSession()));
						
						if(form.getGlobalContext().Scheduling.getAppointmentIdsIsNotNull())
							engine.open(form.getForms().Scheduling.PrintAppointment, "Reprint Letters");
						else
							engine.close(DialogResult.OK);
					}
					else
						engine.close(DialogResult.OK);
					
				}
				
				form.getLocalContext().setBreachedFirstAppointmentsIds(null);
			}
		
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getBreachFirstApptKPIMessageBoxId() != null && form.getLocalContext().getBreachFirstApptKPIMessageBoxId().equals(messageBoxId))
		{
			if (DialogResult.YES.equals(result))
				engine.open(form.getForms().RefMan.ReasonForBookingPastFirstApptKPIDialog);
			else
				form.getLocalContext().setBreachedFirstAppointmentsIds(null);
		}
		
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		form.qmbLocation().clear();
		updateControlsState();
		
	}

	@Override
	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		populateLocations(value);
		
	}
	
	private void populateLocations(String value)
	{
		form.qmbLocation().clear();

		if (value == null || value.length() == 0)
			return;

		LocShortMappingsVoCollection locations = null;
		
		if (form.getLocalContext().getSelectedSession() != null && SchProfileType.THEATRE.equals(form.getLocalContext().getSelectedSession().getSessionProfileType()))
			locations = domain.listActiveTheatreLocationsForHospital(form.cmbHospital().getValue(), value);
		else 
			locations = domain.listActiveOutpatientLocationsForHospital(form.cmbHospital().getValue(), value);
		
		if (locations == null || locations.size() == 0)
			return;

		for (LocShortMappingsVo location : locations)
		{
			if (location == null)
				continue;

			form.qmbLocation().newRow(location, location.getName());
		}

		if (locations.size() == 1)
		{
			form.qmbLocation().setValue(locations.get(0));
			locationChanged();
		}
		else
		{
			form.qmbLocation().showOpened();
		}

	}

	@Override
	protected void onDteSessionToValueChanged() throws PresentationLogicException
	{
		
		updateControlsState();
		
	}

	@Override
	protected void onQmbLocationValueChanged() throws PresentationLogicException
	{
		locationChanged();
		
	}

	private void locationChanged()
	{
		if (form.getLocalContext().getSelectedSession() != null && form.qmbLocation().getValue() != null && form.getLocalContext().getSelectedSession().getSchLocation() != null && !form.getLocalContext().getSelectedSession().getSchLocation().getID_Location().equals(form.qmbLocation().getValue().getID_Location()))
			form.getLocalContext().setLocationForMovedSession(form.qmbLocation().getValue());
		else
			form.getLocalContext().setLocationForMovedSession(null);
		
	}
}
