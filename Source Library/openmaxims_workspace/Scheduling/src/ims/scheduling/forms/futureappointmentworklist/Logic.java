//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.futureappointmentworklist;

import ims.RefMan.vo.CatsReferralListManualAssemblyVo;
import ims.RefMan.vo.FutureAppointmentStatusVo;
import ims.RefMan.vo.FutureAppointmentStatusVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.TimeUnitsSecondsToMonthsCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.FutureAppointmentListVo;
import ims.scheduling.vo.FutureAppointmentListVoCollection;
import ims.scheduling.vo.FutureAppointmentWorklistSearchCriteriaVo;
import ims.scheduling.vo.lookups.FutureAppointmentStatus;
import ims.scheduling.vo.lookups.RequestToSchedule;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String	COLUMN_IDENTIFIER		= "0";
	private static final String	COLUMN_PATIENT_NAME		= "1";
	private static final String	COLUMN_SERVICE			= "2";
	private static final String	COLUMN_FUNCTION         = "3";
	private static final String	COLUMN_APPT_REQ_IN     	= "4";
	private static final String	COLUMN_APPT_REQ_DATE	= "5";
	private static final String	COLUMN_DELAY    		= "6";
	private static final String COLUMN_TO_SEE   		= "7";
	private static final String	COLUMN_RTT_BREACH       = "8";
	private static final String	COLUMN_STATUS           = "9";
	private static final String COLUMN_DO_NOT_MOVE_DATE = "10"; //WDEV-23475
	
	private static final String	CONSULTANT            = "Consultant";
	private static final String	SPR                   = "Spr";
	private static final String	ASSOCIATE_SPECIALIST  = "Associate Specialist";
	private static final String	ANY_DOCTOR_TO_SEE     = "Any Doctor To See";


	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialise();
		open();
		
	}
	
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getMessageConfirmAppointmentBooked() != null && form.getLocalContext().getMessageConfirmAppointmentBooked().equals(messageBoxId))
		{
			form.getLocalContext().setMessageConfirmAppointmentBooked(null);
			
			if (DialogResult.YES.equals(result))
			{
        		updateFutureAppointmentStatus(FutureAppointmentStatus.BOOKED);
        		open();
			}
		}
	}

	
	private void initialise()
	{
		loadServices();
		bindUnitCombos();
		
		form.cmbStatus().setValue(FutureAppointmentStatus.OPEN);
		form.ccNamedConsultant().initializeResponsibleHcp(MosType.HCP, true, null, null);//WDEV-21379
		createDinamicGrid();
		
		populateSearchCriteriaFromGC();
		
	}

	private void loadServices()
	{
		form.cmbService().clear();
		
		ServiceLiteVoCollection services = domain.getServices();
		
		if (services == null || services.size() == 0)
			return;
		
		for (int i = 0; i < services.size(); i++)
			form.cmbService().newRow(services.get(i), services.get(i).getServiceName());
		
	}

	private void updateControlsState()
	{
		
		boolean showDelayedControls =  Boolean.TRUE.equals(form.chkDelayedAppointmentBookings().getValue());
		boolean rowSelected = form.dyngrdResults().getValue() != null;
		
		boolean appointmentOpened = form.dyngrdResults().getValue() != null && FutureAppointmentStatus.OPEN.equals(((FutureAppointmentListVo)form.dyngrdResults().getValue()).getCurrentStatus().getPendingStatus());
		
		form.cmbFunction().setEnabled(form.cmbService().getValue() != null);
		form.cmbOtherHCP().setVisible(Boolean.TRUE.equals(form.chkOtherHCP().getValue()));
		
		form.lblDelayedBy().setVisible(showDelayedControls);
		form.intDelayedBy().setVisible(showDelayedControls);
		form.cmbDelayed().setVisible(showDelayedControls);
		
		form.lblTimeOnList().setVisible(!showDelayedControls);
		form.intTimeOnList().setVisible(!showDelayedControls);
		form.cmbTimeOnList().setVisible(!showDelayedControls);
		
		form.cmbDelayed().setRequired(Boolean.TRUE.equals(form.chkDelayedAppointmentBookings().getValue()));
		
		form.getContextMenus().Scheduling.hideAllFutureAppointmentWorklistMenuItems();
		
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistBOOK_APPOINTMENTItem().setVisible(appointmentOpened);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistREMOVEItem().setVisible(appointmentOpened);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem().setVisible(appointmentOpened);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistVIEW_DETAILSItem().setVisible(rowSelected);
		form.getContextMenus().Scheduling.getFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem().setVisible(rowSelected);
		
	}
	
	private void loadFunctions()
	{
		form.cmbFunction().clear();
		
		if (form.cmbService().getValue() == null)
			return;
		
		ServiceFunctionLiteVoCollection functions = domain.getFunctionsForService(form.cmbService().getValue());
		
		if (functions == null || functions.size() == 0)
			return;
		
		for (int i = 0; i < functions.size(); i++)
			form.cmbFunction().newRow(functions.get(i), functions.get(i).getFunction().getText());
		
	}

	private void createDinamicGrid()
	{
		form.dyngrdResults().setSelectable(true);
		form.dyngrdResults().setHeaderHeight(45);
		
		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		DynamicGridColumn column = form.dyngrdResults().getColumns().newColumn(dispIdType.getText(), COLUMN_IDENTIFIER);
		
		column.setWidth(80);
		column.setSortMode(SortMode.AUTOMATIC); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.dyngrdResults().getColumns().newColumn("Patient Name", COLUMN_PATIENT_NAME);
		
		column.setWidth(100);
		column.setSortMode(SortMode.MANUAL); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.dyngrdResults().getColumns().newColumn("Service", COLUMN_SERVICE);
		
		column.setWidth(85); //WDEV-23475
		column.setSortMode(SortMode.AUTOMATIC); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.dyngrdResults().getColumns().newColumn("Function", COLUMN_FUNCTION);
		
		column.setWidth(100);
		column.setSortMode(SortMode.AUTOMATIC); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		//WDEV-23475
		column = form.dyngrdResults().getColumns().newColumn("", COLUMN_DO_NOT_MOVE_DATE);
		
		column.setWidth(25);
		column.setSortMode(SortMode.MANUAL);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//WDEV-23475 ends here
		
		column = form.dyngrdResults().getColumns().newColumn("Appt Req. In", COLUMN_APPT_REQ_IN);
		
		column.setWidth(80);
		column.setSortMode(SortMode.MANUAL); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.dyngrdResults().getColumns().newColumn("Appt Req.\nDate", COLUMN_APPT_REQ_DATE);
		
		column.setWidth(70);
		column.setSortMode(SortMode.MANUAL); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.dyngrdResults().getColumns().newColumn("Delay", COLUMN_DELAY);
		
		column.setWidth(60);
		column.setSortMode(SortMode.MANUAL); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.dyngrdResults().getColumns().newColumn("To See", COLUMN_TO_SEE);
		
		column.setWidth(70); //WDEV-23475
		column.setSortMode(SortMode.AUTOMATIC); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.dyngrdResults().getColumns().newColumn("RTT Breach", COLUMN_RTT_BREACH);
		
		column.setWidth(80);
		column.setSortMode(SortMode.MANUAL); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.dyngrdResults().getColumns().newColumn("Status", COLUMN_STATUS);
		
		column.setWidth(-1);
		column.setSortMode(SortMode.AUTOMATIC); //WDEV-22986
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
	}

	private void bindUnitCombos()
	{
		TimeUnitsSecondsToMonthsCollection lookupCollection = LookupHelper.getTimeUnitsSecondsToMonths(this.domain.getLookupService());
		
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(TimeUnitsSecondsToMonths.SECONDS.equals(lookupCollection.get(x)) || TimeUnitsSecondsToMonths.MINUTES.equals(lookupCollection.get(x)) || TimeUnitsSecondsToMonths.HOURS.equals(lookupCollection.get(x)))
				continue;
			
			form.cmbDelayed().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			form.cmbTimeOnList().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			
		}
		
	}

	private void open()
	{
		if (form.getGlobalContext().Scheduling.getFutureAppointmentWorklistSearchCriteria() != null)
			doSearch();
		
		updateControlsState();
	}

	private void populateSearchCriteriaFromGC()
	{
		if (form.getGlobalContext().Scheduling.getFutureAppointmentWorklistSearchCriteria() == null)
			return;
		
		clearSearchCriteria();
		
		FutureAppointmentWorklistSearchCriteriaVo criteria = form.getGlobalContext().Scheduling.getFutureAppointmentWorklistSearchCriteria();
		
		form.cmbService().setValue(criteria.getService());
		loadFunctions();
		
		form.cmbFunction().setValue(criteria.getFunction());
		
		form.chkConsultant().setValue(criteria.getConsultant());
		form.chkAssociateSpecialist().setValue(criteria.getAssociateSpecialist());
		form.chkSPR().setValue(criteria.getSPR());
		form.chkAnyDoctorToSee().setValue(criteria.getAnyDoctorToSee());
		
		form.chkOtherHCP().setValue(criteria.getOtherHCP());
		form.cmbOtherHCP().setValue(criteria.getHCP());
		
		form.chkDelayedAppointmentBookings().setValue(criteria.getDelayedAppointmentBookings());
		form.intDelayedBy().setValue(criteria.getDelayedBy());
		form.cmbDelayed().setValue(criteria.getDelayedByType());
		form.intTimeOnList().setValue(criteria.getTimeOnList());
		form.cmbTimeOnList().setValue(criteria.getTimeOnlistType());
		
		form.cmbStatus().setValue(criteria.getStatus());
		
		form.dteFrom().setValue(criteria.getStartDate());
		form.dteTo().setValue(criteria.getEndDate());
		form.ccNamedConsultant().setValue(criteria.getNamedConsultant());//WDEV-21379
		
	}

	@Override
	protected void onDyngrdResultsRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		if (form.dyngrdResults().getValue() == null)
			return;
		
		form.getLocalContext().setSelectedRecord((FutureAppointmentListVo)form.dyngrdResults().getValue());
		
		if (form.getLocalContext().getSelectedRecord().getReferral() !=null )
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.getLocalContext().getSelectedRecord().getReferral().getPatient()));
		
		form.getGlobalContext().RefMan.setCatsReferral(form.getLocalContext().getSelectedRecord().getReferral());
		
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		clearSearchCriteria();
		
		form.dyngrdResults().getRows().clear();
		form.getLocalContext().setSelectedRecord(null);
		
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Scheduling.setFutureAppointmentWorklistSearchCriteria(null);
		
		
	}

	private void clearSearchCriteria()
	{
		form.cmbService().setValue(null);
		form.cmbFunction().setValue(null);
		form.chkConsultant().setValue(false);
		form.chkSPR().setValue(false);
		form.chkAssociateSpecialist().setValue(false);
		form.chkAnyDoctorToSee().setValue(false);
		form.chkOtherHCP().setValue(false);
		form.cmbOtherHCP().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.chkDelayedAppointmentBookings().setValue(false);
		form.intDelayedBy().setValue(null);
		form.cmbDelayed().setValue(null);
		form.intTimeOnList().setValue(null);
		form.cmbTimeOnList().setValue(null);
		form.cmbStatus().setValue(null);
		form.ccNamedConsultant().clear();//WDEV-21379
		
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!validateSearchCriteria())
		{
			form.dyngrdResults().getRows().clear();
			form.getGlobalContext().Core.setPatientShort(null);
			updateControlsState();
			return;
		}

		populateSearchCriteriaFromScreen();
		
		doSearch();
	}

	private void doSearch()
	{
		FutureAppointmentListVoCollection futureAppts = domain.getFutureAppointments(form.getGlobalContext().Scheduling.getFutureAppointmentWorklistSearchCriteria());

		if (futureAppts == null || futureAppts.size() == 0)
		{
			engine.showMessage("No Matching Records found.");
			form.dyngrdResults().getRows().clear();
			form.getGlobalContext().Core.setPatientShort(null);
			updateControlsState();
			return;
		}

		futureAppts.sort(new ApptReqDateComparator(SortOrder.ASCENDING)); //WDEV-22986
		
		populateResultsGrid(futureAppts);

		updateControlsState();
		
	}

	private void populateResultsGrid(FutureAppointmentListVoCollection futureAppts)
	{
		form.dyngrdResults().getRows().clear();
		form.getGlobalContext().Core.setPatientShort(null);
		
		if (futureAppts == null || futureAppts.size() == 0)
			return;
		
		for (int i = 0; i < futureAppts.size(); i++)
		{
			FutureAppointmentListVo appt = futureAppts.get(i);
			
			DynamicGridRow newDynamicRow = form.dyngrdResults().getRows().newRow();

			DynamicGridCell cellIdentifier = newDynamicRow.getCells().newCell(getColumnById(COLUMN_IDENTIFIER), DynamicCellType.STRING);
			
			if (appt.getReferral() != null && appt.getReferral().getPatient() != null && appt.getReferral().getPatient().getDisplayId() != null)
			{
				String identifierValue = appt.getReferral().getPatient().getDisplayId().getValue();
				
				cellIdentifier.setValue(identifierValue);
				cellIdentifier.setTooltip(identifierValue);
			}
			
			cellIdentifier.setReadOnly(true);
			
			DynamicGridCell cellPatName = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT_NAME), DynamicCellType.STRING);
			
			//WDEV-22986
			if (appt.getReferral() != null && appt.getReferral().getPatient() != null && appt.getReferral().getPatient().getName() != null)
			{
				String name = (appt.getReferral().getPatient().getName().getSurname() != null ? appt.getReferral().getPatient().getName().getSurname() + " ": "") + 
								(appt.getReferral().getPatient().getName().getForename() != null? appt.getReferral().getPatient().getName().getForename() + " " : "") +
								(appt.getReferral().getPatient().getName().getTitle() != null ? appt.getReferral().getPatient().getName().getTitle().toString() : "");
				
				cellPatName.setValue(name);
				cellPatName.setTooltip(name);
			}
			//WDEV-22986 ends here
			
			cellPatName.setReadOnly(true);
			
			DynamicGridCell cellService = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SERVICE), DynamicCellType.STRING);
			cellService.setValue(appt.getFirstApptService() != null ?  appt.getFirstApptService().getServiceName() : "");
			cellService.setTooltip(cellService.getValue().toString());
			cellService.setReadOnly(true);
			
			DynamicGridCell cellFunction = newDynamicRow.getCells().newCell(getColumnById(COLUMN_FUNCTION), DynamicCellType.STRING);
			cellFunction.setValue(appt.getFirstApptFunction() != null ?  appt.getFirstApptFunction().getText() : "");
			cellFunction.setTooltip(cellFunction.getValue().toString());
			cellFunction.setReadOnly(true);
			
			//WDEV-23475
			DynamicGridCell cellDoNotMoveDate = newDynamicRow.getCells().newCell(getColumnById(COLUMN_DO_NOT_MOVE_DATE), DynamicCellType.IMAGE);
			cellDoNotMoveDate.setReadOnly(true);
			
			if (appt.getDoNotMoveDate() != null && appt.getDoNotMoveDate())
			{
				cellDoNotMoveDate.setValue(form.getImages().Scheduling.DoNotMoveDate);
				cellDoNotMoveDate.setTooltip("Do not change interval");
			}
			//WDEV-23475 - ends here
			
			DynamicGridCell cellApptReqIn = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_REQ_IN), DynamicCellType.STRING);
			cellApptReqIn.setReadOnly(true);
			
			if(appt.getRequestToScheduleIsNotNull() && RequestToSchedule.RECURRING_APPOINTMENTS.equals(appt.getRequestToSchedule()))//wdev-21193
			{
				cellApptReqIn.setValue("Recurring");
				cellApptReqIn.setTooltip("Recurring");
			}
			else if (appt.getFirstApptPeriodValue() != null && appt.getFirstApptPeriodType() != null)
			{
				cellApptReqIn.setValue(appt.getFirstApptPeriodValue().toString() + "  " + appt.getFirstApptPeriodType().getText());
				cellApptReqIn.setTooltip(cellApptReqIn.getValue().toString());
			}

			DynamicGridCell cellApptReqDate = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_REQ_DATE), DynamicCellType.STRING);
			cellApptReqDate.setReadOnly(true);
			
			if (appt.getStartingWeekIsNotNull())//wdev-21193
			{
				cellApptReqDate.setValue(appt.getStartingWeekIsNotNull() ?  appt.getStartingWeek().toString() : "");
				cellApptReqDate.setTooltip("Starting week commencing: " + cellApptReqDate.getValue().toString());
			}
			else
			{
				cellApptReqDate.setValue(appt.getFirstApptFutureApptByDate() != null ?  appt.getFirstApptFutureApptByDate().toString() : "");
				cellApptReqDate.setTooltip(cellApptReqDate.getValue().toString());
			}
			
			DynamicGridCell cellDelay = newDynamicRow.getCells().newCell(getColumnById(COLUMN_DELAY), DynamicCellType.STRING);
			
			Date today = new Date();
			
			cellDelay.setValue(appt.getFirstApptFutureApptByDate() != null ? Long.toString(Date.daysBetween(appt.getFirstApptFutureApptByDate(), today)) + " days" : "");
			cellDelay.setTooltip(cellDelay.getValue().toString());
			cellDelay.setReadOnly(true);
			
			DynamicGridCell cellToSee = newDynamicRow.getCells().newCell(getColumnById(COLUMN_TO_SEE), DynamicCellType.STRING);
			cellToSee.setValue(getToSee(appt));
			cellToSee.setTooltip(cellToSee.getValue().toString());
			cellToSee.setReadOnly(true);
			
			DynamicGridCell cellRTTBreach = newDynamicRow.getCells().newCell(getColumnById(COLUMN_RTT_BREACH), DynamicCellType.STRING);
			cellRTTBreach.setValue(appt.getReferral() != null && appt.getReferral().getReferralDetails() != null && appt.getReferral().getReferralDetails().getEnd18WW() != null ? appt.getReferral().getReferralDetails().getEnd18WW().toString() : "");
			cellRTTBreach.setTooltip(cellRTTBreach.getValue().toString());
			cellRTTBreach.setReadOnly(true);
			
			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.STRING);
			
			if (appt.getCurrentStatus() != null && appt.getCurrentStatus().getPendingStatus() != null)
			{
				String status = appt.getCurrentStatus().getPendingStatus().getText();
				cellStatus.setValue(status);
				
				if (FutureAppointmentStatus.REMOVED.equals(appt.getCurrentStatus().getPendingStatus()) && appt.getCurrentStatus().getRemovalReason() != null)
					status += "<br> <b> Removal Reason </b>: " +appt.getCurrentStatus().getRemovalReason().getText();
				
				cellStatus.setTooltip(status);
			}
			
			cellStatus.setReadOnly(true);
			
			newDynamicRow.setValue(appt);
		}
	}

	private String getToSee(FutureAppointmentListVo appt)
	{
		if (appt == null || appt.getFirstApptToSee() == null)
			return "";
		
		if (Boolean.TRUE.equals(appt.getFirstApptToSee().getConsultant()))
			return CONSULTANT;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getAssociateSpecialist()))
			return ASSOCIATE_SPECIALIST;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getSPR()))
			return SPR;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getAnyDoctorToSee()))
			return ANY_DOCTOR_TO_SEE;
		else if (Boolean.TRUE.equals(appt.getFirstApptToSee().getOtherHCP()))
			return appt.getFirstApptToSee().getOtherHCPValue() != null ? appt.getFirstApptToSee().getOtherHCPValue().getText() : "";
		
		return "";
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.dyngrdResults().getColumns().getByIdentifier(identifier);
	}
		
	private void populateSearchCriteriaFromScreen()
	{
		FutureAppointmentWorklistSearchCriteriaVo searchCriteria = new FutureAppointmentWorklistSearchCriteriaVo();

		searchCriteria.setService(form.cmbService().getValue());
		searchCriteria.setFunction(form.cmbFunction().getValue());
		searchCriteria.setStartDate(form.dteFrom().getValue());
		searchCriteria.setEndDate(form.dteTo().getValue());
		searchCriteria.setStatus(form.cmbStatus().getValue());
		
		searchCriteria.setDelayedAppointmentBookings(form.chkDelayedAppointmentBookings().getValue());
		searchCriteria.setDelayedBy(form.intDelayedBy().getValue());
		searchCriteria.setDelayedByType(form.cmbDelayed().getValue());
		searchCriteria.setTimeOnList(form.intTimeOnList().getValue());
		searchCriteria.setTimeOnlistType(form.cmbTimeOnList().getValue());
		
		searchCriteria.setConsultant(form.chkConsultant().getValue());
		searchCriteria.setAssociateSpecialist(form.chkAssociateSpecialist().getValue());
		searchCriteria.setSPR(form.chkSPR().getValue());
		searchCriteria.setAnyDoctorToSee(form.chkAnyDoctorToSee().getValue());
		searchCriteria.setOtherHCP(form.chkOtherHCP().getValue());
		searchCriteria.setHCP(form.cmbOtherHCP().getValue());
		searchCriteria.setNamedConsultant((HcpLiteVo)form.ccNamedConsultant().getValue());//WDEV-21379
		
		form.getGlobalContext().Scheduling.setFutureAppointmentWorklistSearchCriteria(searchCriteria);
		
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.cmbService().getValue() == null )
		{
			listOfErrors.add("Service is mandatory.");
		}
		
		if (form.cmbOtherHCP().getVisible() &&  form.cmbOtherHCP().getValue() == null )
		{
			listOfErrors.add("Other HCP is mandatory.");
		}
		
		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			listOfErrors.add("Date From cannot be greater than Date To.");
		}
		
		if (Boolean.TRUE.equals(form.chkDelayedAppointmentBookings().getValue()))
		{
			if (form.intDelayedBy().getValue() == null || form.cmbDelayed().getValue() == null)
			{
				listOfErrors.add("'Delayed By:' Value and Type fields are mandatory.");
			}
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	@Override
	protected void onChkDelayedAppointmentBookingsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.intDelayedBy().setValue(null);
		form.cmbDelayed().setValue(null);
		form.intTimeOnList().setValue(null);
		form.cmbTimeOnList().setValue(null);
		
		updateControlsState();
	}

	@Override
	protected void onChkOtherHCPValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbOtherHCP().setValue(null);
		
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Scheduling.FutureAppointmentRemovalReason) && DialogResult.OK.equals(result))
		{
			updateFutureAppointmentStatus(FutureAppointmentStatus.REMOVED);
		}
		else if (formName.equals(form.getForms().Scheduling.FutureAppointmentDetails) && DialogResult.OK.equals(result))
		{
			try
			{
				domain.saveFutureAppointment(form.getGlobalContext().Scheduling.getFutureAppointmentDetails());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
		}
		//WDEV-21028
		else if (formName.equals(form.getForms().RefMan.BookAppointmentDialog) && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved()))
		{
			if (form.getLocalContext().getSelectedRecord() != null && (RequestToSchedule.OPA.equals(form.getLocalContext().getSelectedRecord().getRequestToSchedule()) || RequestToSchedule.OPA_AND_LINKED_DIAGNOSTICS.equals(form.getLocalContext().getSelectedRecord().getRequestToSchedule())))
				updateFutureAppointmentStatus(FutureAppointmentStatus.BOOKED);
		}
	
		open();
		//WDEV-22704
		if(form.getLocalContext().getSelectedRecord() != null)
		{
			form.dyngrdResults().setValue(form.getLocalContext().getSelectedRecord());
			if (form.getLocalContext().getSelectedRecord().getReferral() !=null )
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.getLocalContext().getSelectedRecord().getReferral().getPatient()));
			form.getGlobalContext().RefMan.setCatsReferral(form.getLocalContext().getSelectedRecord().getReferral());
			updateControlsState();
		}
	}

	private void updateFutureAppointmentStatus(FutureAppointmentStatus appointmentStatus)
	{
		if (form.getLocalContext().getSelectedRecord() == null)
			return;

		FutureAppointmentListVo futureAppt = form.getLocalContext().getSelectedRecord();

		FutureAppointmentDetailsVo updatedFutureAppt = domain.getFutureAppointmentDetails(futureAppt);

		if (futureAppt.getVersion_FutureAppointmentDetails() != updatedFutureAppt.getVersion_FutureAppointmentDetails())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		FutureAppointmentStatusVo status = new FutureAppointmentStatusVo();
		status.setPendingStatus(appointmentStatus);
		status.setStatusDateTime(new DateTime());

		Object mosUser = domain.getMosUser();

		if (mosUser instanceof MemberOfStaffRefVo)
		{
			status.setAuthoringUser((MemberOfStaffRefVo) mosUser);
		}

		if (FutureAppointmentStatus.REMOVED.equals(appointmentStatus) && form.getGlobalContext().Scheduling.getFutureAppointmentRemoval() != null)
		{
			status.setRemovalReason(form.getGlobalContext().Scheduling.getFutureAppointmentRemoval().getReason());
			status.setStatusComment(form.getGlobalContext().Scheduling.getFutureAppointmentRemoval().getComment());
		}
		
		updatedFutureAppt.setCurrentStatus(status);

		if (updatedFutureAppt.getStatusHistory() == null)
			updatedFutureAppt.setStatusHistory(new FutureAppointmentStatusVoCollection());

		updatedFutureAppt.getStatusHistory().add(status);

		String[] errors = updatedFutureAppt.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try
		{
			domain.saveFutureAppointment(updatedFutureAppt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}

	@Override
	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		loadFunctions();
		updateControlsState();
		
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		FutureAppointmentListVo futureAppt = (FutureAppointmentListVo) form.dyngrdResults().getValue();
		
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.BOOK_APPOINTMENT :
				
				form.getGlobalContext().RefMan.setAppointmentSaved(null);
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForReferral(futureAppt.getReferral()));
				
				if (!RequestToSchedule.LINKED_OPA.equals(futureAppt.getRequestToSchedule()))
				{
					form.getGlobalContext().Scheduling.setBookingService(futureAppt.getFirstApptService());
					form.getGlobalContext().Scheduling.setServiceFunctionRef(domain.getServiceFunction(futureAppt.getFirstApptService(), futureAppt.getFirstApptFunction()));
				}
				
				engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
				
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.VIEW_DETAILS :
				
				form.getGlobalContext().Scheduling.setFutureAppointmentDetails(domain.getFutureAppointmentDetails(futureAppt));
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(domain.getAppointmentForRecord(futureAppt));
				engine.open(form.getForms().Scheduling.FutureAppointmentDetails);
				
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.REMOVE :
				
				engine.open(form.getForms().Scheduling.FutureAppointmentRemovalReason);
				
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.APPOINTMENT_BOOKED :
				
				FutureAppointmentListVo selectedRecord = form.getLocalContext().getSelectedRecord();
				if (selectedRecord != null && selectedRecord.getReferral() != null && selectedRecord.getReferral().getPatient() != null
						&& selectedRecord.getReferral().getPatient().getName() != null)
				{
					form.getLocalContext().setMessageConfirmAppointmentBooked(engine.showMessage("Please confirm that you have booked all future appointments for " + selectedRecord.getReferral().getPatient().getName().toProperCase(), "Confirmation Requested", MessageButtons.YESNO));
				}
				
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FutureAppointmentWorklist.VIEW_REFERRAL_DETAILS ://wdev-21192
				
				editReferralDetails();
				
			break;
		}
		
	}
	//wdev-21192
	private void editReferralDetails() 
	{
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForReferral(form.getGlobalContext().RefMan.getCatsReferral()));
		engine.open(form.getForms().RefMan.ReferralDetailsDialog);
	}
	
	//WDEV-22986
	
	@Override
	protected void onDyngrdResultsColumnHeaderClicked(DynamicGridColumn column) 
	{
		FutureAppointmentListVoCollection values = new FutureAppointmentListVoCollection();
		
		for (int i=0;i<form.dyngrdResults().getRows().size();i++)
		{
			values.add((FutureAppointmentListVo) form.dyngrdResults().getRows().get(i).getValue());
		}
		
		if (values==null || values.size()<=1)
			return;
		
		if (column.equals(getColumnById(COLUMN_PATIENT_NAME)))
		{
			form.getLocalContext().setSortOrderName(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderName())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			values.sort(new PatientNameComparator(form.getLocalContext().getSortOrderName()));
		}
		
		else if (column.equals(getColumnById(COLUMN_APPT_REQ_DATE)))
		{
			form.getLocalContext().setSortOrderAppReqDate(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAppReqDate())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			values.sort(new ApptReqDateComparator(form.getLocalContext().getSortOrderAppReqDate()));
		}
		
		else if (column.equals(getColumnById(COLUMN_DELAY)))
		{
			form.getLocalContext().setSortOrderDelay(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDelay())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			values.sort(new DelayComparator(form.getLocalContext().getSortOrderDelay()));
		}
		
		else if (column.equals(getColumnById(COLUMN_RTT_BREACH)))
		{
			form.getLocalContext().setSortOrderRTTBreach(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderRTTBreach())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			values.sort(new RTTBreachComparator(form.getLocalContext().getSortOrderRTTBreach()));
		}
		
		else if (column.equals(getColumnById(COLUMN_APPT_REQ_IN)))
		{
			form.getLocalContext().setSortOrderAppReqIn(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAppReqIn())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			values.sort(new ApptReqInComparator(form.getLocalContext().getSortOrderAppReqIn()));
		}
		
		//WDEV-23475
		else if (column.equals(getColumnById(COLUMN_DO_NOT_MOVE_DATE)))
		{
			form.getLocalContext().setSortOrderDoNotChangeInterval(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDoNotChangeInterval())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			values.sort(new DoNotChangeIntervalComparator(form.getLocalContext().getSortOrderDoNotChangeInterval()));
		}
		//WDEV-23475 ends here
		
		populateResultsGrid(values);
	}
	
	private Long getApptReqIn(Long value, TimeUnitsSecondsToMonths unitValue)
	{
		Long d= null;
		
		if (value!=null && unitValue!=null)
		{
			if (unitValue.equals(TimeUnitsSecondsToMonths.SECONDS))
				d = value;
			if (unitValue.equals(TimeUnitsSecondsToMonths.MINUTES))
				d = value * 60;
			if (unitValue.equals(TimeUnitsSecondsToMonths.HOURS))
				d = value * 3600;
			if (unitValue.equals(TimeUnitsSecondsToMonths.DAYS))
				d = value * 3600 * 24;
			if (unitValue.equals(TimeUnitsSecondsToMonths.WEEKS))
				d = value * 3600 * 24 * 7;
			if (unitValue.equals(TimeUnitsSecondsToMonths.MONTHS))
				d = value * 3600 * 24 * 7 * 30;
		}
		return d;
	}
	
	//WDEV-23475
	public class DoNotChangeIntervalComparator implements Comparator<Object>
	{
		private int direction = 1;

		public DoNotChangeIntervalComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public DoNotChangeIntervalComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			Integer doNotChangeInterval1 = 0;
			Integer doNotChangeInterval2 = 0;

			if (ob1 instanceof FutureAppointmentListVo)
			{
				FutureAppointmentListVo o1 = (FutureAppointmentListVo) ob1;
				doNotChangeInterval1 = (Boolean.TRUE.equals(o1.getDoNotMoveDate()) ? 1 : 0);
			}

			if (ob2 instanceof FutureAppointmentListVo)
			{
				FutureAppointmentListVo o2 = (FutureAppointmentListVo) ob2;
				doNotChangeInterval2 = (Boolean.TRUE.equals(o2.getDoNotMoveDate()) ? 1 : 0);
			}

			if (doNotChangeInterval1 != 0 && doNotChangeInterval2 != 0)
			{
				return doNotChangeInterval1.compareTo(doNotChangeInterval2) * direction;
			}

			if (doNotChangeInterval1 != 0 && doNotChangeInterval2 == 0)
			{
				return direction;
			}

			if (doNotChangeInterval2 != 0 && doNotChangeInterval1 == 0)
			{
				return -1 * direction;
			}	
			
			return 0;
		}
	}
	//WDEV-23475 ends here
	
	public class PatientNameComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public PatientNameComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public PatientNameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		
		public int compare(Object o1, Object o2)
		{
			String s1 = null;
			String f1 = null;
			String t1 = null;
			String s2 = null;
			String f2 = null;
			String t2 = null;
			int retVal = 0;
			if(o1 != null && o1 instanceof FutureAppointmentListVo)
			{
				FutureAppointmentListVo appt1 = ((FutureAppointmentListVo) o1);
				s1 = appt1.getReferral() != null && appt1.getReferral().getPatient() != null && appt1.getReferral().getPatient().getName() != null && appt1.getReferral().getPatient().getName().getSurname() != null ? (String) appt1.getReferral().getPatient().getName().getSurname() : "";
				f1 = appt1.getReferral() != null && appt1.getReferral().getPatient() != null && appt1.getReferral().getPatient().getName() != null && appt1.getReferral().getPatient().getName().getForename() != null ? (String) appt1.getReferral().getPatient().getName().getForename() : "";
				t1 = appt1.getReferral() != null && appt1.getReferral().getPatient() != null && appt1.getReferral().getPatient().getName() != null && appt1.getReferral().getPatient().getName().getTitle() != null ? (String) appt1.getReferral().getPatient().getName().getTitle().toString() : "";
			}
			
			if(o2 != null && o2 instanceof FutureAppointmentListVo)
			{
				FutureAppointmentListVo appt2 = ((FutureAppointmentListVo) o2);
				s2 = appt2.getReferral() != null && appt2.getReferral().getPatient() != null && appt2.getReferral().getPatient().getName() != null && appt2.getReferral().getPatient().getName().getSurname() != null ? (String) appt2.getReferral().getPatient().getName().getSurname() : "";
				f2 = appt2.getReferral() != null && appt2.getReferral().getPatient() != null && appt2.getReferral().getPatient().getName() != null && appt2.getReferral().getPatient().getName().getForename() != null ? (String) appt2.getReferral().getPatient().getName().getForename() : "";
				t2 = appt2.getReferral() != null && appt2.getReferral().getPatient() != null && appt2.getReferral().getPatient().getName() != null && appt2.getReferral().getPatient().getName().getTitle() != null ? (String) appt2.getReferral().getPatient().getName().getTitle().toString() : "";
			
			}
			
			retVal = compare(s1, s2, f1, f2, t1, t2);
			
			return retVal;
		}
		
		public int compare(String s1, String s2, String f1, String f2, String t1, String t2)
		{
			int retVal = 0;
			if (retVal == 0)
			{
				retVal = compare(s1, s2);
			}
			if (retVal == 0)
			{
				retVal = compare(f1, f2);
			}
			if (retVal == 0)
			{
				retVal = compare(t1, t2);
			}
			return retVal;
		}
		
		public int compare(String s1, String s2)
		{
			int retVal = 0;
			if (retVal == 0)
			{
				if(s1 == null && s2 != null)
					return -1*direction;
				if(s1 != null && s2 == null)
					return direction;
				if(s1 != null && s2 != null)
					retVal = s1.toLowerCase().compareTo(s2.toLowerCase())*direction;
			}
			return retVal;
		}
	}
	
	public class ApptReqInComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ApptReqInComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ApptReqInComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Long date1 = null;
			Long date2 = null;
			if(ob1 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt1 = (FutureAppointmentListVo)ob1;
				
				if (appt1.getStartingWeek() == null)
					date1 = appt1.getFirstApptPeriodValue() != null && appt1.getFirstApptPeriodType() != null ? getApptReqIn(appt1.getFirstApptPeriodValue().longValue(), appt1.getFirstApptPeriodType()) : null;
				else
					date1 = null;
						
			}
			if(ob2 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt2 = (FutureAppointmentListVo)ob2;
				if (appt2.getStartingWeek() == null)
					date2 = appt2.getFirstApptPeriodValue() != null && appt2.getFirstApptPeriodType() != null ? getApptReqIn(appt2.getFirstApptPeriodValue().longValue(), appt2.getFirstApptPeriodType()) : null;
				else
					date2 = null;
			}
			
			if(date1 != null && date2 != null)
				return  date1.compareTo(date2)*direction;
			
			if(date1 != null && date2 == null)
				return  direction;
			
			if(date2 != null && date1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	
	public class ApptReqDateComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ApptReqDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ApptReqDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date date1 = null;
			Date date2 = null;
			if(ob1 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt1 = (FutureAppointmentListVo)ob1;
				date1 = appt1.getFirstApptFutureApptByDate() != null ? appt1.getFirstApptFutureApptByDate() : appt1.getStartingWeek();
			}
			if(ob2 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt2 = (FutureAppointmentListVo)ob2;
				date2 =	appt2.getFirstApptFutureApptByDate() != null ? appt2.getFirstApptFutureApptByDate() : appt2.getStartingWeek();
			}
			
			if(date1 != null && date2 != null)
				return  date1.compareTo(date2)*direction;
			
			if(date1 != null && date2 == null)
				return  direction;
			
			if(date2 != null && date1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class RTTBreachComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public RTTBreachComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public RTTBreachComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date date1 = null;
			Date date2 = null;
			if(ob1 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt1 = (FutureAppointmentListVo)ob1;
				date1 = appt1.getReferral() != null && appt1.getReferral().getReferralDetails() != null && appt1.getReferral().getReferralDetails().getEnd18WW() != null ? appt1.getReferral().getReferralDetails().getEnd18WW() : null;
			}
			if(ob2 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt2 = (FutureAppointmentListVo)ob2;
				date2 = appt2.getReferral() != null && appt2.getReferral().getReferralDetails() != null && appt2.getReferral().getReferralDetails().getEnd18WW() != null ? appt2.getReferral().getReferralDetails().getEnd18WW() : null;
			}
			
			if(date1 != null && date2 != null)
				return  date1.compareTo(date2)*direction;
			
			if(date1 != null && date2 == null)
				return  direction;
			
			if(date2 != null && date1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class DelayComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public DelayComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DelayComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Long delay1 = null;
			Long delay2 = null;
			
			Date today = new Date();
			
			if(ob1 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt1 = (FutureAppointmentListVo)ob1;
				delay1 = appt1.getFirstApptFutureApptByDate() != null ? Date.daysBetween(appt1.getFirstApptFutureApptByDate(), today) : null;
			}
			if(ob2 instanceof FutureAppointmentListVo )
			{
				FutureAppointmentListVo appt2 = (FutureAppointmentListVo)ob2;
				delay2 = appt2.getFirstApptFutureApptByDate() != null ? Date.daysBetween(appt2.getFirstApptFutureApptByDate(), today) : null;
			}
			
			if(delay1 != null && delay2 != null)
				return  delay1.compareTo(delay2)*direction;
			
			if(delay1 != null && delay2 == null)
				return  direction;
			
			if(delay2 != null && delay1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	//WDEV-22986 ends here
	
}
