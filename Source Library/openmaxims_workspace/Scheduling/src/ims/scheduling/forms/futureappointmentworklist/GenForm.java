//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.futureappointmentworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.FutureAppointmentStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.FutureAppointmentStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.FutureAppointmentStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.FutureAppointmentStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.FutureAppointmentStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.FutureAppointmentStatus getValue()
		{
			return (ims.scheduling.vo.lookups.FutureAppointmentStatus)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.FutureAppointmentStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOtherHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.OtherHCP value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.OtherHCP getValue()
		{
			return (ims.core.vo.lookups.OtherHCP)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.OtherHCP value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTimeOnListComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
		{
			return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDelayedComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
		{
			return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFunctionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceFunctionLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceFunctionLiteVo getValue()
		{
			return (ims.core.vo.ServiceFunctionLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceFunctionLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.scheduling.vo.FutureAppointmentWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.scheduling.vo.FutureAppointmentWorklistSearchCriteriaVo' of the global context variable 'Scheduling.FutureAppointmentWorklistSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(165);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklist = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Future Appointment Details", true, false, new Integer(134179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6230006)))
			contextMenus.Scheduling.contextMenuFutureAppointmentWorklist.add(contextMenus.Scheduling.contextMenuFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem);
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklistBOOK_APPOINTMENTItem = factory.createMenuItem(startControlID.intValue() + 2, "Book Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6230002)))
			contextMenus.Scheduling.contextMenuFutureAppointmentWorklist.add(contextMenus.Scheduling.contextMenuFutureAppointmentWorklistBOOK_APPOINTMENTItem);
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklistVIEW_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 3, "View Details", true, false, new Integer(111109), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6230004)))
			contextMenus.Scheduling.contextMenuFutureAppointmentWorklist.add(contextMenus.Scheduling.contextMenuFutureAppointmentWorklistVIEW_DETAILSItem);
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklistREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove From Pending List", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6230001)))
			contextMenus.Scheduling.contextMenuFutureAppointmentWorklist.add(contextMenus.Scheduling.contextMenuFutureAppointmentWorklistREMOVEItem);
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 5, "View Referral Details", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6230005)))
			contextMenus.Scheduling.contextMenuFutureAppointmentWorklist.add(contextMenus.Scheduling.contextMenuFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem);
		contextMenus.Scheduling.contextMenuFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem = factory.createMenuItem(startControlID.intValue() + 6, "Appointment Booked", true, false, new Integer(102209), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6230003)))
			contextMenus.Scheduling.contextMenuFutureAppointmentWorklist.add(contextMenus.Scheduling.contextMenuFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuFutureAppointmentWorklist);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 168, 140, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccNamedConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 9, skipContextValidation);
		//ims.framework.Control m_ccNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(168), new Integer(140), new Integer(160), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 9), m_ccNamedConsultantForm, instance1 } );
		ims.framework.Control m_ccNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 9), m_ccNamedConsultantForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccNamedConsultantControl);
		Menu[] menus1 = m_ccNamedConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 141, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Named Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 332, 119, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 332, 96, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Time on List:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 332, 72, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Delayed By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 600, 16, 16, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "to", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 332, 16, 143, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Appt Required between:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To See:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Function:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));

		// Date Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 622, 14, 122, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 472, 14, 122, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 406, 117, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 168, 117, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbOtherHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbOtherHCPTemp);
		cmbOtherHCPComboBox cmbOtherHCP = (cmbOtherHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOtherHCPComboBox.class, m_cmbOtherHCPTemp);
		super.addComboBox(cmbOtherHCP);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 472, 94, 121, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbTimeOnListTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTimeOnListTemp);
		cmbTimeOnListComboBox cmbTimeOnList = (cmbTimeOnListComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTimeOnListComboBox.class, m_cmbTimeOnListTemp);
		super.addComboBox(cmbTimeOnList);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 472, 70, 121, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbDelayedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDelayedTemp);
		cmbDelayedComboBox cmbDelayed = (cmbDelayedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDelayedComboBox.class, m_cmbDelayedTemp);
		super.addComboBox(cmbDelayed);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 72, 41, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbFunctionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFunctionTemp);
		cmbFunctionComboBox cmbFunction = (cmbFunctionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFunctionComboBox.class, m_cmbFunctionTemp);
		super.addComboBox(cmbFunction);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 72, 14, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbServiceTemp);
		cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
		super.addComboBox(cmbService);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 332, 43, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Delayed Appointment Bookings", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 72, 119, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Other HCP", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 168, 96, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Any Doctor To See", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 168, 72, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Associate Specialist", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 72, 96, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"SPR", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 72, 72, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Consultant", Boolean.FALSE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 832, 456, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Scheduling.contextMenuFutureAppointmentWorklist, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 405, 94, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 405, 70, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 806, 14, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 772, 14, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccNamedConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccNamedConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccNamedConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccNamedConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccNamedConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccNamedConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblTimeOnList()
	{
		return (Label)super.getControl(3);
	}
	public Label lblDelayedBy()
	{
		return (Label)super.getControl(4);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(10);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(11);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public cmbOtherHCPComboBox cmbOtherHCP()
	{
		return (cmbOtherHCPComboBox)super.getComboBox(1);
	}
	public cmbTimeOnListComboBox cmbTimeOnList()
	{
		return (cmbTimeOnListComboBox)super.getComboBox(2);
	}
	public cmbDelayedComboBox cmbDelayed()
	{
		return (cmbDelayedComboBox)super.getComboBox(3);
	}
	public cmbFunctionComboBox cmbFunction()
	{
		return (cmbFunctionComboBox)super.getComboBox(4);
	}
	public cmbServiceComboBox cmbService()
	{
		return (cmbServiceComboBox)super.getComboBox(5);
	}
	public CheckBox chkDelayedAppointmentBookings()
	{
		return (CheckBox)super.getControl(18);
	}
	public CheckBox chkOtherHCP()
	{
		return (CheckBox)super.getControl(19);
	}
	public CheckBox chkAnyDoctorToSee()
	{
		return (CheckBox)super.getControl(20);
	}
	public CheckBox chkAssociateSpecialist()
	{
		return (CheckBox)super.getControl(21);
	}
	public CheckBox chkSPR()
	{
		return (CheckBox)super.getControl(22);
	}
	public CheckBox chkConsultant()
	{
		return (CheckBox)super.getControl(23);
	}
	public DynamicGrid dyngrdResults()
	{
		return (DynamicGrid)super.getControl(24);
	}
	public IntBox intTimeOnList()
	{
		return (IntBox)super.getControl(25);
	}
	public IntBox intDelayedBy()
	{
		return (IntBox)super.getControl(26);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(27);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(28);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				FutureAppointmentDetails = new LocalFormName(114113);
				FutureAppointmentRemovalReason = new LocalFormName(114128);
			}
			public final FormName FutureAppointmentDetails;
			public final FormName FutureAppointmentRemovalReason;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookAppointmentDialog = new LocalFormName(134134);
				ReferralDetailsDialog = new LocalFormName(134104);
			}
			public final FormName BookAppointmentDialog;
			public final FormName ReferralDetailsDialog;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Scheduling = new SchedulingImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final class SchedulingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingImages()
			{
				DoNotMoveDate = new ImageHelper(114144, "Images/Scheduling/DoNotMoveDate.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image DoNotMoveDate;
		}
		public final CoreImages Core;
		public final SchedulingImages Scheduling;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_MessageConfirmAppointmentBooked = new ims.framework.ContextVariable("MessageConfirmAppointmentBooked", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__MessageConfirmAppointmentBooked_" + componentIdentifier + "");
			cxl_SortOrderAppReqDate = new ims.framework.ContextVariable("SortOrderAppReqDate", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SortOrderAppReqDate_" + componentIdentifier + "");
			cxl_SortOrderDelay = new ims.framework.ContextVariable("SortOrderDelay", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SortOrderDelay_" + componentIdentifier + "");
			cxl_SortOrderRTTBreach = new ims.framework.ContextVariable("SortOrderRTTBreach", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SortOrderRTTBreach_" + componentIdentifier + "");
			cxl_SortOrderAppReqIn = new ims.framework.ContextVariable("SortOrderAppReqIn", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SortOrderAppReqIn_" + componentIdentifier + "");
			cxl_SortOrderName = new ims.framework.ContextVariable("SortOrderName", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SortOrderName_" + componentIdentifier + "");
			cxl_SortOrderDoNotChangeInterval = new ims.framework.ContextVariable("SortOrderDoNotChangeInterval", prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SortOrderDoNotChangeInterval_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.scheduling.vo.FutureAppointmentListVo getSelectedRecord()
		{
			return (ims.scheduling.vo.FutureAppointmentListVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.scheduling.vo.FutureAppointmentListVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getMessageConfirmAppointmentBookedIsNotNull()
		{
			return !cxl_MessageConfirmAppointmentBooked.getValueIsNull(context);
		}
		public Integer getMessageConfirmAppointmentBooked()
		{
			return (Integer)cxl_MessageConfirmAppointmentBooked.getValue(context);
		}
		public void setMessageConfirmAppointmentBooked(Integer value)
		{
			cxl_MessageConfirmAppointmentBooked.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageConfirmAppointmentBooked = null;
		public boolean getSortOrderAppReqDateIsNotNull()
		{
			return !cxl_SortOrderAppReqDate.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAppReqDate()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAppReqDate.getValue(context);
		}
		public void setSortOrderAppReqDate(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAppReqDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAppReqDate = null;
		public boolean getSortOrderDelayIsNotNull()
		{
			return !cxl_SortOrderDelay.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDelay()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDelay.getValue(context);
		}
		public void setSortOrderDelay(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDelay.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDelay = null;
		public boolean getSortOrderRTTBreachIsNotNull()
		{
			return !cxl_SortOrderRTTBreach.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderRTTBreach()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderRTTBreach.getValue(context);
		}
		public void setSortOrderRTTBreach(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderRTTBreach.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderRTTBreach = null;
		public boolean getSortOrderAppReqInIsNotNull()
		{
			return !cxl_SortOrderAppReqIn.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAppReqIn()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAppReqIn.getValue(context);
		}
		public void setSortOrderAppReqIn(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAppReqIn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAppReqIn = null;
		public boolean getSortOrderNameIsNotNull()
		{
			return !cxl_SortOrderName.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderName()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderName.getValue(context);
		}
		public void setSortOrderName(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderName.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderName = null;
		public boolean getSortOrderDoNotChangeIntervalIsNotNull()
		{
			return !cxl_SortOrderDoNotChangeInterval.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDoNotChangeInterval()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDoNotChangeInterval.getValue(context);
		}
		public void setSortOrderDoNotChangeInterval(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDoNotChangeInterval.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDoNotChangeInterval = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class FutureAppointmentWorklist implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_FUTURE_APPT_DETAILS = 1;
				public static final int BOOK_APPOINTMENT = 2;
				public static final int VIEW_DETAILS = 3;
				public static final int REMOVE = 4;
				public static final int VIEW_REFERRAL_DETAILS = 5;
				public static final int APPOINTMENT_BOOKED = 6;
			}
			public void disableAllFutureAppointmentWorklistMenuItems()
			{
				this.contextMenuFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem.setEnabled(false);
				this.contextMenuFutureAppointmentWorklistBOOK_APPOINTMENTItem.setEnabled(false);
				this.contextMenuFutureAppointmentWorklistVIEW_DETAILSItem.setEnabled(false);
				this.contextMenuFutureAppointmentWorklistREMOVEItem.setEnabled(false);
				this.contextMenuFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem.setEnabled(false);
				this.contextMenuFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem.setEnabled(false);
			}
			public void hideAllFutureAppointmentWorklistMenuItems()
			{
				this.contextMenuFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem.setVisible(false);
				this.contextMenuFutureAppointmentWorklistBOOK_APPOINTMENTItem.setVisible(false);
				this.contextMenuFutureAppointmentWorklistVIEW_DETAILSItem.setVisible(false);
				this.contextMenuFutureAppointmentWorklistREMOVEItem.setVisible(false);
				this.contextMenuFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem.setVisible(false);
				this.contextMenuFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem.setVisible(false);
			}
			private Menu contextMenuFutureAppointmentWorklist;
			public ReadOnlyMenuItem getFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem()
			{
				return this.contextMenuFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem;
			}
			private MenuItem contextMenuFutureAppointmentWorklistADD_FUTURE_APPT_DETAILSItem;
			public ReadOnlyMenuItem getFutureAppointmentWorklistBOOK_APPOINTMENTItem()
			{
				return this.contextMenuFutureAppointmentWorklistBOOK_APPOINTMENTItem;
			}
			private MenuItem contextMenuFutureAppointmentWorklistBOOK_APPOINTMENTItem;
			public ReadOnlyMenuItem getFutureAppointmentWorklistVIEW_DETAILSItem()
			{
				return this.contextMenuFutureAppointmentWorklistVIEW_DETAILSItem;
			}
			private MenuItem contextMenuFutureAppointmentWorklistVIEW_DETAILSItem;
			public ReadOnlyMenuItem getFutureAppointmentWorklistREMOVEItem()
			{
				return this.contextMenuFutureAppointmentWorklistREMOVEItem;
			}
			private MenuItem contextMenuFutureAppointmentWorklistREMOVEItem;
			public ReadOnlyMenuItem getFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem()
			{
				return this.contextMenuFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem;
			}
			private MenuItem contextMenuFutureAppointmentWorklistVIEW_REFERRAL_DETAILSItem;
			public ReadOnlyMenuItem getFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem()
			{
				return this.contextMenuFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem;
			}
			private MenuItem contextMenuFutureAppointmentWorklistAPPOINTMENT_BOOKEDItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[192];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-APPOINTMENTS", "Appointments");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SOURCE", "Source");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SAMESERVICE", "SameService");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SAMEDAY", "SameDay");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-REQUESTTOSCHEDULE", "RequestToSchedule");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-STARTINGWEEK", "StartingWeek");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-MON", "Mon");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-TUES", "Tues");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-WED", "Wed");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-THURS", "Thurs");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-FRI", "Fri");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SAT", "Sat");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SUN", "Sun");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-COMMENTS", "Comments");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-REFERRAL", "Referral");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-NUMBEROFLINKEDRECURRINGAPPTSTOBOOK", "NumberOfLinkedRecurringApptsToBook");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTFUNCTION", "FirstApptFunction");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTPERIODVALUE", "FirstApptPeriodValue");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTPERIODTYPE", "FirstApptPeriodType");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTFUTUREAPPTBYDATE", "FirstApptFutureApptByDate");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTFUNCTION", "SecondApptFunction");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTPERIODVALUE", "SecondApptPeriodValue");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTPERIODTYPE", "SecondApptPeriodType");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTFUTUREAPPTBYDATE", "SecondApptFutureApptByDate");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTFUNCTION", "ThirdApptFunction");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTPERIODVALUE", "ThirdApptPeriodValue");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTPERIODTYPE", "ThirdApptPeriodType");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTFUTUREAPPTBYDATE", "ThirdApptFutureApptByDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-RECURRING", "Recurring");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-ENDAFTERNOCCURRENCES", "EndAfterNOccurrences");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-NOOFTIMESPERWEEK", "NoOfTimesPerWeek");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-EVERYNMONTHS", "EveryNMonths");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-WEEKINTHEMONTH", "WeekInTheMonth");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-FUTUREAPPOINTMENTCOMMENTS", "FutureAppointmentComments");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-DONOTMOVEDATE", "DoNotMoveDate");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ServiceFunctionRef", "BO-1003100034-ID", "ID_ServiceFunction");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-_1STAPPTFUNCTION", "FirstApptFunction");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-_1STAPPTPERIODVALUE", "FirstApptPeriodValue");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-_1STAPPTPERIODTYPE", "FirstApptPeriodType");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-_1STAPPTFUTUREAPPTBYDATE", "FirstApptFutureApptByDate");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-REQUESTTOSCHEDULE", "RequestToSchedule");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-NUMBEROFLINKEDRECURRINGAPPTSTOBOOK", "NumberOfLinkedRecurringApptsToBook");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-STARTINGWEEK", "StartingWeek");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentWorklist.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1090100021-DONOTMOVEDATE", "DoNotMoveDate");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
