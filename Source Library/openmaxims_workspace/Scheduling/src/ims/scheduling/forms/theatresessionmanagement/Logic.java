//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.theatresessionmanagement;

import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.sessionmanagement.GenForm;
import ims.scheduling.forms.theatresessionmanagement.GenForm.lyrTabsLayer.tabClinicViewContainer.grdSessionsRow;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentForSessionManagementVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.SessionManagementSearchCriteriaVo;
import ims.scheduling.vo.SessionMoveVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionSlotStatusVo;
import ims.scheduling.vo.SessionSlotStatusVoCollection;
import ims.scheduling.vo.SessionTheatreFixedSlotForSessionManagementVo;
import ims.scheduling.vo.SessionTheatreFixedSlotForSessionManagementVoCollection;
import ims.scheduling.vo.SessionVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.TheatreSessionManagementVo;
import ims.scheduling.vo.TheatreSessionManagementVoCollection;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;

import java.text.SimpleDateFormat;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int ClinicView = 1;
	private static final int AvailabilityView = 2;
	
	private static final int CANCEL_SLOT = -1;
	private static final int CANCEL_SELECTED_SLOTS = -2;
	private static final int BLOCK_SLOT = -3;
	private static final int BLOCK_SELECTED_SLOTS = -4;
	private static final int BLOCK_SESSION = -5;
	private static final int ADD_APPOINTMENT_COMMENTS = -6;
	private static final int ADD_SLOT_COMMENT = -7;
	
	private static final String	COLUMN_START_TIME		= "0";
	private static final String	COLUMN_END_TIME			= "1";
	private static final String	COLUMN_PATIENT          = "2";
	private static final String	COLUMN_PROCEDURE     	= "3";
	private static final String	COLUMN_RTT      		= "4";
	private static final String	COLUMN_STATUS   		= "5";
	private static final String COLUMN_SLOT_COMMENT		= "6";
	private static final String	COLUMN_SELECT           = "7";
	
	private static final String	COLUMN_CAN_START_TIME			= "20";
	private static final String	COLUMN_CAN_END_TIME				= "21";
	private static final String	COLUMN_CAN_PATIENT              = "22";
	private static final String	COLUMN_CAN_STATUS   			= "23";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		updateControlsState();
	}

	private void initialise()
	{

		form.lblListOwners().setValue("");
		form.lyrTabs().tabExtendedView().btnBlockSession().setImage(form.getImages().Core.RedFlag);
		form.lyrTabs().tabExtendedView().btnCancelSession().setImage(form.getImages().Core.Delete);
		form.lyrTabs().tabExtendedView().btnMoveSession().setImage(form.getImages().Core.MoveTo);
		form.lyrTabs().tabExtendedView().btnMoveLocation().setImage(form.getImages().Core.MoveTo);
		form.lyrTabs().tabExtendedView().btnSessionComments().setImage(form.getImages().Core.Add);
		form.lyrTabs().tabExtendedView().btnAddSlot().setImage(form.getImages().Core.Add);
		form.lyrTabs().tabExtendedView().btnReOpen().setImage(form.getImages().Core.Tick);
		
		//WDEV-20479 form.ccConsultant().initialize(MosType.HCP);
		form.ccListOwner().initialize(MosType.HCP);
		
		populateHospitalCombo();
		populateServicesCombo();
		
		//WDEV-22715
		form.dteFrom().setValue(new Date());

		populateSearchCriteria();
		
		createDynamicGridSlots();
		
		form.setMode(FormMode.VIEW);
	}

	private void createDynamicGridSlots()
	{
		
		form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().clear();
		form.lyrTabs().tabExtendedView().dyngrdSlots().setHeaderHeight(45);
		form.lyrTabs().tabExtendedView().dyngrdSlots().setSelectable(true);
		
		DynamicGridColumn column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Start\nTime", COLUMN_START_TIME);
		
		column.setWidth(45);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("End\nTime", COLUMN_END_TIME);
		
		column.setWidth(45);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Patient", COLUMN_PATIENT);
		
		column.setWidth(200);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Procedure", COLUMN_PROCEDURE);
		
		column.setWidth(230);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("RTT", COLUMN_RTT);
		
		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Status", COLUMN_STATUS);
		
		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_SLOT_COMMENT);
		
		column.setWidth(26);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Select", COLUMN_SELECT);
		
		column.setWidth(-1);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(false);
		column.setCanGrow(true);
	}

	private void populateServicesCombo()
	{
		form.cmbService().clear();

		ServiceVoCollection voCollServices = domain.listServices();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}

	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voLocColl = domain.listActiveHospitals();

		if (voLocColl != null)
		{
			for (LocationLiteVo hospital : voLocColl)
			{
				form.cmbHospital().newRow(hospital, hospital.getName());
			}
		}

		ILocation location = engine.getCurrentLocation();

		if (location != null)
		{
			LocationLiteVo hospitalForCurrentLocation = domain.getHospitalForCurrentLocation(location.getID());
			form.cmbHospital().setValue(hospitalForCurrentLocation);
		}

		populateLocationCombo();

	}

	private void populateLocationCombo()
	{
		form.cmbLocation().clear();

		if (form.cmbHospital().getValue() == null)
			return;

		if (form.cmbHospital().getValue().getType() != null && form.cmbHospital().getValue().getType().equals(LocationType.HOSP))
		{
			LocShortMappingsVoCollection voLocShortMapColl = domain.listActiveLocationsForHospital(form.cmbHospital().getValue());

			if (voLocShortMapColl != null)
			{
				for (int i = 0; i < voLocShortMapColl.size(); i++)
				{
					LocShortMappingsVo voLocShortMap = voLocShortMapColl.get(i);
					form.cmbLocation().newRow(voLocShortMap, voLocShortMap.getName());
				}
			}
		}

	}

	private void populateSearchCriteria()
	{

		SessionManagementSearchCriteriaVo searchCriteria = form.getGlobalContext().Scheduling.getTheatreSessionManagementSearchCriteria();

		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue(searchCriteria.getHospital());
		form.cmbLocation().setValue(searchCriteria.getLocation());
		form.cmbListType().setValue(searchCriteria.getListType());
		//WDEV-20479 form.ccConsultant().setValue(searchCriteria.getConsultant());

		if (searchCriteria.getProfile() != null)
		{
			form.qmbProfile().newRow(searchCriteria.getProfile(), searchCriteria.getProfile().getName());
			form.qmbProfile().setValue(searchCriteria.getProfile());
		}

		form.cmbService().setValue(searchCriteria.getService());
		form.dteFrom().setValue(searchCriteria.getDateFrom());
		form.dteTo().setValue(searchCriteria.getDateTo());

		if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
		{
			if (searchCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(searchCriteria.getListOwners().get(0));
			}
			else
			{
				form.getGlobalContext().Scheduling.setSelectedHCPs(searchCriteria.getListOwners());
				populateListOwnersLabel(searchCriteria.getListOwners());

			}
		}

		doSearch();

	}

	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		
		if (listOwners == null)
			return;
		
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 80)
		{
			form.lblListOwners().setValue(namesString.substring(0, 80) + "...");
		}
		else
			form.lblListOwners().setValue(namesString.toString());

		form.lblListOwners().setTooltip(namesString.toString());

	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
		else if (formName.equals(form.getForms().Scheduling.SessionParentChildSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				
				SessionParentChildSlotVo voSlot = form.getGlobalContext().Scheduling.getSessionParentChildSlot();
				
				TheatreSessionManagementVo domainSession = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
				
				if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() != domainSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(domainSession);
					return;
				}
				
				try
				{
					boolean slotsOverlap = domain.hasSlotConflictWithSessionSlots(form.getLocalContext().getSelectedSession(), voSlot);
					
					if(!slotsOverlap)
						domain.addTheatreFixedSlotToSession(form.getLocalContext().getSelectedSession(), voSlot);
					else
						engine.showMessage("Overlapping of time is not allowed!");
					
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					
				}
				 
				updateScreenForRecord(null);
				
			}

		}
		else if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK) && Boolean.TRUE.equals(form.getLocalContext().getCancelSessionActioned()))
			{
				
				SessionVo domainSession = domain.getSessionVo(form.getLocalContext().getSelectedSession());
				
				if (isAppInSession(domainSession))
				{
					if ( isAppInSessionMarkedAsDoNotMove(domainSession) ) 
					{
						form.getLocalContext().setCancelAppConfirmationMessageBoxID(engine.showMessage("There are appointments already booked for this Session and at least one is marked as 'Do Not Move'. These appointments will be cancelled. Do you wish to continue?", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION));
						return; 
					}
					else 
					{
						form.getLocalContext().setCancelAppConfirmationMessageBoxID(engine.showMessage("There are appointments already booked for this Session. These appointments will be cancelled. Do you wish to continue?", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION));//WDEV-18528
						return;
					}
				}
				else
				{
					cancelSession(false, domainSession);
				}
			}
			else if(result.equals(DialogResult.OK))
			{
				Booking_AppointmentVo voAppt = cancelAppt(false, null);
				
				if(voAppt == null)
				{
					updateScreenForRecord(null);
					return;
				}
				
				// rebook
				if(form.getGlobalContext().Scheduling.getApptCancelStatus() != null && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected()))
				{	
					if(voAppt.getTheatreBookingIsNotNull())
						rebookTheatreAppt(domain.getTheatreAppointment(voAppt), null);
					return;
				}
				
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
				form.getGlobalContext().Scheduling.setTheatreService(null);
				form.getGlobalContext().Scheduling.setTheatreProcedure(null);
				form.getGlobalContext().Scheduling.setTheatreConsultant(null);
			}
			
			form.getGlobalContext().Core.setPatientShort(null);
			updateScreenForRecord(null);
		}
		else if (formName.equals(form.getForms().Scheduling.ReasonTextDialog) && DialogResult.OK.equals(result))
		{
			if (form.getLocalContext().getContextMenuActioned() != null)
			{
				
				if (form.getLocalContext().getContextMenuActioned() == BLOCK_SLOT)
				{
					updateTheatreSlotStatus(Status_Reason.BLOCKED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == BLOCK_SESSION)
				{
					updateSessionStatus(form.getLocalContext().getSelectedSession(), Session_Status_and_Reason.BLOCKED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == BLOCK_SELECTED_SLOTS)
				{
					updateStatusesForCheckedSlots(Status_Reason.BLOCKED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == CANCEL_SLOT)
				{
					updateTheatreSlotStatus(Status_Reason.CANCELLED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == CANCEL_SELECTED_SLOTS)
				{
					updateStatusesForCheckedSlots(Status_Reason.CANCELLED);
				}
			}
		}
		else if(formName.equals(form.getForms().RefMan.BookTheatreSlot) || formName.equals(form.getForms().RefMan.BookEmergencyTheatre) || formName.equals(form.getForms().RefMan.BookTheatreDialog))
		{
			
			form.getGlobalContext().Core.setPatientShort(null);
			updateScreenForRecord(null);
		}
		else if ((formName.equals(form.getForms().Scheduling.MoveSessionDialog) || formName.equals(form.getForms().Scheduling.MoveSessionToLocationDialog)) && DialogResult.OK.equals(result))
		{
			
			updateScreenForRecord(null);
		}
		else if(formName.equals(form.getForms().Core.CommentDialog) && DialogResult.OK.equals(result))
		{
			if (form.getLocalContext().getContextMenuActioned() != null && form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() != null)
			{	

				SessionTheatreFixedSlotForSessionManagementVo flexibleSlot  = (SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
				
				if (form.getLocalContext().getContextMenuActioned() == ADD_APPOINTMENT_COMMENTS)
				{
					addAppointmentComments(flexibleSlot.getAppointment());
				}
				else if (form.getLocalContext().getContextMenuActioned() == ADD_SLOT_COMMENT )
				{
					updateTheatreSlotStatus(null);
				}
			}
			else
				addCommentToSession();

		}
		
	}
	
	private void updateTheatreSlotStatus(Status_Reason status)
	{
		int repeats = 0;

		do
		{
			try
			{
				TheatreSessionManagementVo session = form.getLocalContext().getSelectedSession();

				SessionVo voSession = domain.getSessionVo(session);

				if (voSession == null)
					return;

				if (session.getVersion_Sch_Session() != voSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(null);
					return;
				}

				SessionTheatreFixedSlotForSessionManagementVo slot = (SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue();

				if (voSession.getSessionSlots() != null)
				{
					for (int i = 0; i < voSession.getParentChildSlots().size(); i++)
					{
						if (voSession.getParentChildSlots().get(i) == null || voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot() == null)
							continue;

						if (voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot().equals(slot.getID_SessionParentChildSlot()))
						{
							SessionParentChildSlotVo slotToUpdate = voSession.getParentChildSlots().get(i);

							if (status != null)
							{
								slotToUpdate.setStatus(status);
								slotToUpdate.setStatusReason(status);

								if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
								{
									slotToUpdate.setCancelBlockReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
									slotToUpdate.setCancelBlockComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
								}

								SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();

								//update slot status history
								if(voCollStatusHistory == null)
									voCollStatusHistory = new SessionSlotStatusVoCollection();

								SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
								voSlotStatus.setDateTime(new DateTime());
								voSlotStatus.setStatus(status);
								voSlotStatus.setStatusReason(status);

								voCollStatusHistory.add(voSlotStatus);
								slotToUpdate.setStatusReasonHistory(voCollStatusHistory);
							}

							if (form.getLocalContext().getContextMenuActionedIsNotNull() && form.getLocalContext().getContextMenuActioned() == ADD_SLOT_COMMENT)
							{
								slotToUpdate.setComment(form.getGlobalContext().Core.getCommentDialogString());
							}

							break;
						}
					}
				}

				String[] arrErrors = voSession.validate();

				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				voSession = domain.saveSession(voSession, true);

				updateScreenForRecord(null);
				return;
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

				updateScreenForRecord(null);
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}

	//WDEV-19440
	private boolean isAppInSessionMarkedAsDoNotMove(SessionVo session)  //Only for Outpatient Appointments
	{
		if (session==null || session.getSessionSlots()==null)
			return false;
		
		for (int i=0;i<session.getSessionSlots().size();i++)
		{
			if (session.getSessionSlots().get(i).getAppointmentIsNotNull() && Boolean.TRUE.equals(session.getSessionSlots().get(i).getAppointment().getDoNotMove()))
				return true;
		}
		
		return false;
	}
	
	private void addCommentToSession()
	{
		
		TheatreSessionManagementVo session = form.getLocalContext().getSelectedSession();
		
		if (session == null)
			return;
		
		session.setSessionComment(form.getGlobalContext().Core.getCommentDialogString());
		
		String[] arrErrors = session.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		TheatreSessionManagementVo updatedSession = null;
		
		try
		{
			updatedSession = domain.justSaveSession(session);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		updateScreenForRecord(updatedSession);
		
	}

	private void updateStatusesForCheckedSlots(Status_Reason status)
	{
		int repeats = 0;
		
		do
		{
		try
		{
		TheatreSessionManagementVo session = form.getLocalContext().getSelectedSession();

		SessionVo voSession = domain.getSessionVo(session);

		if (voSession == null)
			return;

		if (session.getVersion_Sch_Session() != voSession.getVersion_Sch_Session())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			updateScreenForRecord(null);
			return;
		}

		SessionTheatreFixedSlotForSessionManagementVoCollection theatreSlots = form.getLocalContext().getTheatreFixedSlotsSelected();

		if (theatreSlots != null && theatreSlots.size() > 0)
		{
			if (voSession.getParentChildSlots() != null)
			{
				for (int i = 0; i < voSession.getParentChildSlots().size(); i++)
				{
					if (voSession.getParentChildSlots().get(i) == null || voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot() == null)
						continue;

					for (int j = 0; j < theatreSlots.size(); j++)
					{
						if (voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot().equals(theatreSlots.get(j).getID_SessionParentChildSlot()))
						{
							SessionParentChildSlotVo slotToUpdate = voSession.getParentChildSlots().get(i);

							slotToUpdate.setStatus(status);
							slotToUpdate.setStatusReason(status);

							if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
							{
								slotToUpdate.setCancelBlockReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
								slotToUpdate.setCancelBlockComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
							}

							SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();

							// update slot status history
							if (voCollStatusHistory == null)
								voCollStatusHistory = new SessionSlotStatusVoCollection();

							SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
							voSlotStatus.setDateTime(new DateTime());
							voSlotStatus.setStatus(status);
							voSlotStatus.setStatusReason(status);

							voCollStatusHistory.add(voSlotStatus);
							slotToUpdate.setStatusReasonHistory(voCollStatusHistory);

						}
					}
				}
			}
		}
		else
			return;
		
		String[] arrErrors = voSession.validate();

		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

			voSession = domain.saveSession(voSession, true);

			form.getLocalContext().setTheatreFixedSlotsSelected(null);
			updateScreenForRecord(null);
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			form.getLocalContext().setTheatreFixedSlotsSelected(null);
			updateScreenForRecord(null);
			return;
		}
		catch (DomainInterfaceException e)
		{
			repeats++;
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		form.getLocalContext().setTheatreFixedSlotsSelected(null);
		updateScreenForRecord(null);		
	}

	
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation, BookingAppointmentForSessionManagementVo appointment) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				BookingAppointmentForSessionManagementVo voAppt = appointment;

				if (voAppt == null)
				{
					if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionTheatreFixedSlotForSessionManagementVo)
						voAppt = ((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue()).getAppointment();
				}

				if(voAppt == null)
					return null;

				Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);

				if (voApptFull.getApptStatusIsNotNull() && voAppt.getApptStatusIsNotNull()
						&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull, Status_Reason.CANCELLED, voApptStatus));

					Appointment_StatusVo cancelApptStatusData = form.getGlobalContext().Scheduling.getApptCancelStatus();

					voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());

					if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
						voApptFull.setRequiresRebook(cancelApptStatusData.getRebookSelected());

					if (Boolean.TRUE.equals(cancelApptStatusData.getCancelTCI()) && Boolean.TRUE.equals(cancelApptStatusData.getCancelledForNonMedicalReason()) && voApptFull.getTheatreBooking() != null && Status_Reason.HOSPITALCANCELLED.equals(cancelApptStatusData.getStatusReason()) && cancelApptStatusData.getStatusChangeDateTimeIsNotNull() && cancelApptStatusData.getStatusChangeDateTime().getDate().equals(cancelApptStatusData.getTCIDate()))
					{
						voApptFull.setDate28DayRuleBreach(new DateTime(voAppt.getAppointmentDate(), voAppt.getApptStartTime()).addDays(28).getDate());					
					}

				}

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return null;
				}

				if (tciCancelation)
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
				else
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Session Management");

				CatsReferralForSessionManagementVo catsReferral = null;

				if (appointment != null)
					catsReferral  = domain.getCatsReferralForAppointment(appointment);
				else
					catsReferral = ((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue()).getCatsReferral();

				domain.updateCatsReferralAdditionalInvStatus(catsReferral, voApptFull);


				if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI()))
				{
					domain.cancelTCIAndReferralEROD(catsReferral, voApptFull, form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason(), form.getGlobalContext().Scheduling.getApptCancelStatus().getComment(), Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());
				}

				return voApptFull;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		return null;
	}

	private void rebookTheatreAppt(BookingAppointmentTheatreVo voAppt, BookingAppointmentForSessionManagementVo apptFromGrid)
	{		
		
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null && voAppt.getApptStatusIsNotNull() && apptFromGrid != null
			&& apptFromGrid.getApptStatusIsNotNull() && ! voAppt.getApptStatus().equals(apptFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
		}
		else if (voAppt != null  && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && isTheatreAppt
			&& (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			
			form.getGlobalContext().Scheduling.setTheatreAppointment(voAppt);

			if(voAppt.getSessionIsNotNull())
				form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSession().getTheatreType());
			
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voAppt);
			
			if(voPsc != null)
			{
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment().getPatient()));
				form.getGlobalContext().RefMan.setCatsReferral(((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getCatsReferral());
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());			
				bookTheatreAppt();
			}
		}
	}

	private void bookTheatreAppt()
	{
		
		if (isReferralEndOfCare())
			return;

		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
			engine.open(form.getForms().RefMan.BookTheatreDialog);
		else
		{
			PatientElectiveListRefVo patientElectiveList = domain.getPatientElectiveListForAppt(form.getGlobalContext().Scheduling.getTheatreAppointment());
			
			if (patientElectiveList != null)
				engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {patientElectiveList});
			else
				engine.open(form.getForms().RefMan.BookEmergencyTheatre,new Object[] {domain.getPendingEmergencyTheatreForAppt(form.getGlobalContext().Scheduling.getTheatreAppointment())});
				
		}
		
	}

	private boolean isReferralEndOfCare()
	{
		CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferralForAppointment(((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment());
		
		if (catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}

	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	
	private void updateSessionStatus(TheatreSessionManagementVo session, Session_Status_and_Reason lkpInstance)
	{
		int repeats = 0;

		do
		{
			try 
			{
				SessionVo voSession = domain.getSessionVo(session);

				if(voSession == null)
					return;

				if (session.getVersion_Sch_Session() !=  voSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(null);
					return;
				}

				if(lkpInstance != null)
				{
					if(!lkpInstance.equals(Session_Status_and_Reason.OPEN))
					{
						if (voSession.getParentChildSlotsIsNotNull())
						{
							for(int i = 0; i < voSession.getParentChildSlots().size();i++)
							{
								if(voSession.getParentChildSlots().get(i).getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
								{
									engine.showMessage("Some Session Slots cannot be Cancelled as they are pending confirmation from ChooseAndBook");
									return;
								}
							}
						}
					}
				}

				if(lkpInstance == null)
				{
					voSession.setIsActive(Boolean.FALSE);
				}
				else
				{

					if(lkpInstance.equals(Session_Status_and_Reason.BLOCKED))
					{
						if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
						{
							voSession.setCancellationReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
							voSession.setComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
						}

						for(int i = 0; voSession.getParentChildSlots() != null && i < voSession.getParentChildSlots().size(); i++)
						{
							if (voSession.getParentChildSlots().get(i) == null)
								continue;

							if(voSession.getParentChildSlots().get(i).getAppointment() == null && !Status_Reason.CANCELLED.equals(voSession.getParentChildSlots().get(i).getStatus()) && !Status_Reason.BOOKED.equals(voSession.getParentChildSlots().get(i).getStatus()))
							{
								voSession.getParentChildSlots().get(i).setStatus(Status_Reason.BLOCKED); 
								voSession.getParentChildSlots().get(i).setStatusReason(Status_Reason.BLOCKED);
								voSession.getParentChildSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getParentChildSlots().get(i).getStatusReasonHistory(), Status_Reason.BLOCKED));							
							}
						}
					}
					else if (lkpInstance.equals(Session_Status_and_Reason.OPEN))
					{

						for (int i = 0; voSession.getParentChildSlots() != null && i < voSession.getParentChildSlots().size(); i++)
						{

							if (voSession.getParentChildSlots().get(i) == null)
								continue;

							if (voSession.getParentChildSlots().get(i).getAppointment() == null)
							{

								if (Session_Status_and_Reason.CANCELLED.equals(voSession.getSessionStatus()) || Status_Reason.BLOCKED.equals(voSession.getParentChildSlots().get(i).getStatus()))
								{
									voSession.getParentChildSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
									voSession.getParentChildSlots().get(i).setStatusReason(Status_Reason.SLOTOPENED);
									voSession.getParentChildSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getParentChildSlots().get(i).getStatusReasonHistory(), Status_Reason.SLOTOPENED));
									voSession.getParentChildSlots().get(i).setIsActive(true);
								}
							}
							else if (voSession.getParentChildSlots().get(i).getAppointment() != null && Status_Reason.CANCELLED.equals(voSession.getParentChildSlots().get(i).getStatus()))
							{
								voSession.getParentChildSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
								voSession.getParentChildSlots().get(i).setAppointment(null);
								voSession.getParentChildSlots().get(i).setIsActive(true);
							}
						}
					}

					voSession.setSessionStatus(lkpInstance);

				}

				String[] arrErrors = voSession.validate();

				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				domain.saveSession(voSession, false);

				updateScreenForRecord(null);
				return;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

				updateScreenForRecord(null);
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}

	private SessionSlotStatusVoCollection getSessionStatusHistory(SessionSlotStatusVoCollection voCollStatusHistory, Status_Reason status)
	{
		
		if(voCollStatusHistory == null)
			voCollStatusHistory = new SessionSlotStatusVoCollection();
		
		SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
		voSlotStatus.setDateTime(new DateTime());
		//TODO
		//voSlotStatus.setUBRN(voSessionSlot.getUBRN());
		voSlotStatus.setStatus(status);
		voSlotStatus.setStatusReason(form.getGlobalContext().ChooseAndBook.getSessionSlotStatusReason());
		voCollStatusHistory.add(voSlotStatus);
		
		return voCollStatusHistory;
	}

	private void updateScreenForRecord(TheatreSessionManagementVo session)
	{
		if (session == null)
			session = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
		
		if (session == null)
			return;
			
		grdSessionsRow row = form.lyrTabs().tabClinicView().grdSessions().getSelectedRow();
		
		row.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

		row.setColSessionName(session.getName() != null ? session.getName() : "");
		row.setTooltipForColSessionName(row.getColSessionName());

		row.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
		row.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

		row.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
		row.setTooltipForColService(row.getColService());

		row.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
		row.setTooltipForColLocation(row.getColLocation());

		row.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
		row.setTooltipForColStatus(row.getColStatus());

		row.setValue(session);
		
		form.getLocalContext().setSelectedSession(session);
		
		populateExtendedViewWithTheatreSlots(domain.getTheatreFixedSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		
		boolean cancelledSession = Session_Status_and_Reason.CANCELLED.equals(session.getSessionStatus());
		
		//WDEV-20588
		if (cancelledSession)
		{
			initializeCancelledApptGrid();
			populateCancelledAppts(domain.getCancelledAppointmentsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		}
		
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setTooltip(getTooltipForSessionMoveDetailsButton(form.getLocalContext().getSelectedSession())); //WDEV-22944
		
		updateControlsState();
		
	}

	private void cancelSession(boolean cancelAppointment, SessionVo session)
	{
		if(form.getGlobalContext().Scheduling.getApptCancelStatus() != null)
		{
			
			if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() !=  session.getVersion_Sch_Session())
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			
			try 
			{
				domain.cancelSession(session, form.getGlobalContext().Scheduling.getApptCancelStatus(), cancelAppointment, false);
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}	
		}
		
	}
	
	private boolean isAppInSession(SessionVo session)
	{
		if (session == null || (session.getParentChildSlots() == null && session.getTheatreSlots() == null))
			return false;
		
		for (int i=0;i<session.getParentChildSlots().size();i++)
		{
			if (session.getParentChildSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		
		for (int i=0;i<session.getTheatreSlots().size();i++)
		{
			if (session.getTheatreSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		
		return false;
	}

	@Override
	protected void onlyrTabsTabChanged(ims.framework.LayerBridge tab)
	{
		
		if (form.lyrTabs().tabClinicView().equals(tab))
		{
			form.lyrTabs().tabClinicView().grdSessions().setValue(null);
			form.getLocalContext().setSelectedSession(null);
			updateControlsState();
		}
	}

	@Override
	protected void onBtnAddSlotClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addSessionSlot();
		
	}

	private void addSessionSlot()
	{
		form.getGlobalContext().Scheduling.setSessionParentChildSlot(null);
		engine.open(form.getForms().Scheduling.SessionParentChildSlotDialog, new Object[] {form.getLocalContext().getSelectedSession()}); //WDEV-22972
		
	}

	
	@Override
	protected void onBtnSessionCommentsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setContextMenuActioned(null);
		form.getGlobalContext().Core.setCommentDialogString(form.getLocalContext().getSelectedSession().getSessionComment());
		form.getGlobalContext().Core.setCommentDialogTitle("Session Comment");
		engine.open(form.getForms().Core.CommentDialog, new Object[] { Boolean.TRUE });
	}

	@Override
	protected void onBtnMoveSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.MoveSessionDialog , new Object[] {domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
		
	}

	@Override
	protected void onBtnCancelSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.getLocalContext().setCancelSessionActioned(true);
		engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[]{true}, "Cancel Session");
	}

	@Override
	protected void onBtnBlockSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.getLocalContext().setContextMenuActioned(BLOCK_SESSION);
		engine.open(form.getForms().Scheduling.ReasonTextDialog);
		
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearTabs();
		form.lyrTabs().showtabClinicView();
		updateControlsState();

	}

	private void clearTabs()
	{
		form.lyrTabs().tabClinicView().grdSessions().getRows().clear();

		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getColumns().clear();
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getRows().clear();

		form.lyrTabs().tabExtendedView().pnlSessionInfo().setValue(" ");
		form.lyrTabs().tabExtendedView().htmSession().setHTML(" ");
		form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().clear();
		form.lyrTabs().tabExtendedView().chkSelectAll().setValue(Boolean.FALSE);

		form.getLocalContext().setSelectedTab(null);
		form.getLocalContext().setSelectedSession(null);
		form.getLocalContext().setTheatreFixedSlotsSelected(null);
		form.getLocalContext().setNoneOrBookedAppointmentsOnly(null);
		form.getLocalContext().setBookedOrAdmittedAppointmentsOnly(null);
		
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
		form.getGlobalContext().Scheduling.setTheatreService(null);
		form.getGlobalContext().Scheduling.setTheatreProcedure(null);
		form.getGlobalContext().Scheduling.setTheatreConsultant(null);
		form.getGlobalContext().Scheduling.setTheatreAppointment(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	private void clearSearchCriteria()
	{
		form.cmbHospital().setValue(null);
		form.cmbLocation().setValue(null);
		form.qmbProfile().clear();
		form.cmbService().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		form.cmbListType().setValue(null);
		//WDEV-20479 form.ccConsultant().setValue(null);

		form.getGlobalContext().Scheduling.setTheatreSessionManagementSearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearTabs();

		form.lyrTabs().showtabClinicView();

		if (!validateSearchCriteria())
		{
			updateControlsState();
			return;
		}

		populateSearchCriteriaFromScreen();

		doSearch();
	}

	private void doSearch()
	{

		TheatreSessionManagementVoCollection sessions = domain.listSessions(form.getGlobalContext().Scheduling.getTheatreSessionManagementSearchCriteria());

		if (sessions == null || sessions.size() == 0)
		{
			engine.showMessage("No matching Sessions found.");
			updateControlsState();
			return;
		}

		populateClinicView(sessions);
		populateAvailabilityView(sessions);

		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().Scheduling.hideAllSessionManagementMenuItems();

		SessionTheatreFixedSlotForSessionManagementVo theatreFixedSlot = null;
		
		theatreFixedSlot = (SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		
		boolean sessionSelected = form.getLocalContext().getSelectedSession() != null;
		boolean sessionBlocked = sessionSelected && Session_Status_and_Reason.BLOCKED.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		boolean sessionCancelled = sessionSelected && Session_Status_and_Reason.CANCELLED.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		boolean sessionOpen = sessionSelected && Session_Status_and_Reason.OPEN.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		
		boolean slotOpened = theatreFixedSlot != null && Status_Reason.SLOTOPENED.equals(theatreFixedSlot.getStatus());
		boolean slotBlocked = theatreFixedSlot != null && Status_Reason.BLOCKED.equals(theatreFixedSlot.getStatus());
		boolean hasAppointment = theatreFixedSlot != null && theatreFixedSlot.getAppointment() != null ;
		boolean isChooseAndBookAppt = hasAppointment && Boolean.TRUE.equals(theatreFixedSlot.getAppointment().getIsCABBooking());
		//boolean apptCancelled = hasAppointment && Status_Reason.CANCELLED.equals(slot.getAppointment().getApptStatus());
		boolean apptBooked = hasAppointment && Status_Reason.BOOKED.equals(theatreFixedSlot.getAppointment().getApptStatus());
		boolean apptReqRebook = hasAppointment && Boolean.TRUE.equals(theatreFixedSlot.getAppointment().getRequiresRebook());
		//boolean canMarkAsDonNotMove = apptBooked && !Boolean.TRUE.equals(theatreFixedSlot.getAppointment().getDoNotMove());
		
		ReferralApptStatus statusLookup = null;
		
		if (theatreFixedSlot != null && theatreFixedSlot.getCatsReferral() != null && theatreFixedSlot.getCatsReferral().getCurrentStatus() != null)
			statusLookup = theatreFixedSlot.getCatsReferral().getCurrentStatus().getReferralStatus();
		
		boolean referralWasAccepted = statusLookup != null && (statusLookup.equals(ReferralApptStatus.REFERRAL_ACCEPTED) 
		|| statusLookup.equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED) 
		|| statusLookup.equals(ReferralApptStatus.ACTIVE_MONITORING) 
		|| statusLookup.equals(ReferralApptStatus.DISCHARGED) 
		|| statusLookup.equals(ReferralApptStatus.APPOINTMENTBOOKED));

		boolean icpCompleted = theatreFixedSlot != null && domain.isReferralICPCompleted(theatreFixedSlot.getCatsReferral());
		boolean slotsSelected = (form.getLocalContext().getTheatreFixedSlotsSelected() != null && form.getLocalContext().getTheatreFixedSlotsSelected().size() > 0);
		
		form.getContextMenus().Scheduling.getSessionManagementADD_SLOTItem().setVisible(sessionSelected);
		form.getContextMenus().Scheduling.getSessionManagementBLOCK_SLOTItem().setVisible(slotOpened);
		form.getContextMenus().Scheduling.getSessionManagementUNBLOCKItem().setVisible(slotBlocked);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_SLOTItem().setVisible(slotOpened);
		
		form.getContextMenus().Scheduling.getSessionManagementBLOCK_SELECTED_SLOTSItem().setVisible(slotsSelected);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_SELECTED_SLOTSItem().setVisible(slotsSelected);

		form.getContextMenus().Scheduling.getSessionManagementADD_COMMENTSItem().setVisible(hasAppointment  && !isChooseAndBookAppt);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_APPOINTMENTItem().setVisible(!isChooseAndBookAppt && apptBooked);
		//form.getContextMenus().Scheduling.getSessionManagementDO_NOT_MOVEItem().setVisible(!isChooseAndBookAppt && canMarkAsDonNotMove);
		
		form.getContextMenus().Scheduling.getSessionManagementREBOOK_APPOINTMENTItem().setVisible(!isChooseAndBookAppt && !icpCompleted && apptReqRebook && referralWasAccepted && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		
		form.getContextMenus().Scheduling.getSessionManagementADD_SLOT_COMMENTItem().setVisible(theatreFixedSlot != null);

		form.lnkreturnToList().setEnabled(form.getLocalContext().getSelectedTab() != null);

		form.lyrTabs().tabExtendedView().btnBlockSession().setEnabled(sessionOpen);
		form.lyrTabs().tabExtendedView().btnCancelSession().setEnabled(sessionOpen);
		form.lyrTabs().tabExtendedView().btnMoveSession().setEnabled(sessionSelected && Boolean.TRUE.equals(form.getLocalContext().getNoneOrBookedAppointmentsOnly()) && form.getLocalContext().getSelectedSession().getSessionDate() != null && form.getLocalContext().getSelectedSession().getSessionDate().isGreaterOrEqualThan(new Date()));
		form.lyrTabs().tabExtendedView().btnMoveLocation().setEnabled(sessionSelected && Boolean.TRUE.equals(form.getLocalContext().getBookedOrAdmittedAppointmentsOnly()) && form.getLocalContext().getSelectedSession().getSessionDate() != null && form.getLocalContext().getSelectedSession().getSessionDate().isGreaterOrEqualThan(new Date()));
		form.lyrTabs().tabExtendedView().btnSessionComments().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnAddSlot().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnReOpen().setEnabled(sessionBlocked || sessionCancelled);
		
		form.lyrTabs().tabExtendedView().setHeaderEnabled(sessionSelected);
		form.lyrTabs().tabAvailabilityView().setHeaderVisible(false);
		
		//WDEV-20588
		form.lyrTabs().tabCancelledAppointments().setHeaderVisible(sessionCancelled);
		form.getContextMenus().Scheduling.getCancelledApptsSessionManREBOOK_APPOINTMENTItem().setVisible(form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getValue() != null);
		
		//WDEV-22944
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setVisible(form.getLocalContext().getSelectedSession()!=null && (form.getLocalContext().getSelectedSession().getSessionCommentIsNotNull() || (form.getLocalContext().getSelectedSession().getSessionMoveIsNotNull() && form.getLocalContext().getSelectedSession().getSessionMove().size()>0))); 
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setEnabled(false);
		
		//WDEV-23633
		boolean showTheatreUtilisationDashboardButton = ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue() != null && ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue().length() > 0;
		form.btnTheatreUtilisationDashboard().setVisible(showTheatreUtilisationDashboardButton);
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			listOfErrors.add("Date From cannot be greater than Date To.");

		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	private void populateSearchCriteriaFromScreen()
	{
		SessionManagementSearchCriteriaVo searchCriteria = new SessionManagementSearchCriteriaVo();

		searchCriteria.setHospital(form.cmbHospital().getValue());
		searchCriteria.setLocation(form.cmbLocation().getValue());
		searchCriteria.setProfile(form.qmbProfile().getValue());
		searchCriteria.setService(form.cmbService().getValue());
		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());
		searchCriteria.setListType(form.cmbListType().getValue());
		//WDEV-20479 searchCriteria.setConsultant((HcpLiteVo) form.ccConsultant().getValue());

		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			searchCriteria.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			searchCriteria.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
		
		searchCriteria.setListType(form.cmbListType().getValue());
		//WDEV-20479 searchCriteria.setConsultant((HcpLiteVo) form.ccConsultant().getValue());
		
		form.getGlobalContext().Scheduling.setTheatreSessionManagementSearchCriteria(searchCriteria);
		
	}

	private void populateClinicView(TheatreSessionManagementVoCollection sessions)
	{

		form.lyrTabs().tabClinicView().grdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

		for (TheatreSessionManagementVo session : sessions)
		{
			grdSessionsRow newRow = form.lyrTabs().tabClinicView().grdSessions().getRows().newRow();

			if (session == null)
				continue;

			newRow.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

			newRow.setColSessionName(session.getName() != null ? session.getName() : "");
			newRow.setTooltipForColSessionName(newRow.getColSessionName());

			newRow.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
			newRow.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

			newRow.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
			newRow.setTooltipForColService(newRow.getColService());

			newRow.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
			newRow.setTooltipForColLocation(newRow.getColLocation());

			newRow.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
			newRow.setTooltipForColStatus(newRow.getColStatus());
			
			newRow.setColListType(session.getListTypeIsNotNull() ? session.getListType().getIItemText():"");
			newRow.setTooltipForColListType(session.getListTypeIsNotNull() ? session.getListType().getIItemText():"");
			
			//newRow.setColConsultant(session.getResponsibleHCPIsNotNull() ? session.getResponsibleHCP().getIHcpName():"");
			//newRow.setTooltipForColConsultant(session.getResponsibleHCPIsNotNull() ? session.getResponsibleHCP().getIHcpName():"");
			
			//WDEV-20479
			if(session.getListOwners() != null)
			{
				Session_ListOwnerVoCollection listOwners =  session.getListOwners();
				StringBuilder listOwn = new StringBuilder();
				for (int i = 0; i < listOwners.size(); i++)
				{
					if(Boolean.TRUE.equals(listOwners.get(i).getListOwner()))
					{
						listOwn.append(listOwners.get(i).getHcpIsNotNull() ? listOwners.get(i).getHcp().getIHcpName(): "");
						listOwn.append(", ");
					}
				}
				
				if(listOwn != null && listOwn.length() > 1)
				{
					String ownersList = listOwn.toString();
					ownersList = ownersList.substring(0, ownersList.length() - 2);
					newRow.setColListOwners(ownersList);
					newRow.setTooltipForColListOwners(ownersList);
				}

			}

			newRow.setValue(session);
		}

	}

	private void populateAvailabilityView(TheatreSessionManagementVoCollection sessions)
	{
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getColumns().clear();
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

	}

	@Override
	protected void onImbAddListOwnersClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
	}

	@Override
	protected void onQmbProfileTextSubmited(String value) throws PresentationLogicException
	{
		populateProfiles(value);

	}

	private void populateProfiles(String value)
	{
		form.qmbProfile().clear();

		if (value == null || value.length() == 0)
			return;

		ProfileLiteVoCollection profiles = domain.listProfiles(value);

		if (profiles == null || profiles.size() == 0)
			return;

		for (ProfileLiteVo profile : profiles)
		{
			if (profile == null)
				continue;

			form.qmbProfile().newRow(profile, profile.getName());
		}

		if (profiles.size() == 1)
		{
			form.qmbProfile().setValue(profiles.get(0));
		}
		else
		{
			form.qmbProfile().showOpened();
		}

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		
		BookingAppointmentForSessionManagementVo gridAppt = null;
		SessionTheatreFixedSlotForSessionManagementVo theatreFixedSlot = null;
		
		theatreFixedSlot = (SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		
		switch (menuItemID)
		{
			
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_SLOT:
				addSessionSlot();
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.BLOCK_SLOT:
				form.getLocalContext().setContextMenuActioned(BLOCK_SLOT);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.UNBLOCK:
				updateTheatreSlotStatus(Status_Reason.SLOTOPENED);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_SLOT:
				form.getLocalContext().setContextMenuActioned(CANCEL_SLOT);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.BLOCK_SELECTED_SLOTS:
				form.getLocalContext().setContextMenuActioned(BLOCK_SELECTED_SLOTS);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_SELECTED_SLOTS:
				form.getLocalContext().setContextMenuActioned(CANCEL_SELECTED_SLOTS);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_APPOINTMENT:
				
				form.getLocalContext().setCancelSessionActioned(false);
				
				gridAppt = ((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment();
				
				Booking_AppointmentVo voAppt = domain.getBookingAppointment(gridAppt);
				cancelTheatreAppointment(voAppt, gridAppt);
				
				break;	
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.REBOOK_APPOINTMENT:
				
				form.getLocalContext().setCancelSessionActioned(false);
				
				gridAppt = ((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment();
				
				BookingAppointmentTheatreVo voTheatreAppt = domain.getTheatreAppointment(gridAppt);
				rebookTheatreAppt(voTheatreAppt, gridAppt);
				
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_COMMENTS:
				
				form.getLocalContext().setContextMenuActioned(ADD_APPOINTMENT_COMMENTS);
				form.getGlobalContext().Core.setCommentDialogString(null);
				
				if (theatreFixedSlot != null && theatreFixedSlot.getAppointment() != null)
				{
					form.getGlobalContext().Core.setCommentDialogString(theatreFixedSlot.getAppointment().getComments());
				}
				
				form.getGlobalContext().Core.setCommentDialogTitle("Appointment Comment");
				engine.open(form.getForms().Core.CommentDialog, new Object[] { Boolean.TRUE });
				
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_SLOT_COMMENT:
				form.getLocalContext().setContextMenuActioned(ADD_SLOT_COMMENT);
				form.getGlobalContext().Core.setCommentDialogString(null);
				
				form.getGlobalContext().Core.setCommentDialogString(theatreFixedSlot.getComment());
		
				form.getGlobalContext().Core.setCommentDialogTitle("Slot Comment");
				engine.open(form.getForms().Core.CommentDialog, new Object[] {Boolean.TRUE});
				break;
				
			//WDEV-20588	
			case GenForm.ContextMenus.SchedulingNamespace.CancelledApptsSessionMan.REBOOK_APPOINTMENT:
				
				rebookCancelledTheatreAppointment((BookingAppointmentTheatreVo)form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getValue());
				
				break;
		}
	}
	
	//WDEV-20588
	private void rebookCancelledTheatreAppointment(BookingAppointmentTheatreVo appt) 
	{
		
		Booking_AppointmentVo updatedAppointment = domain.getBookingAppointment(appt);
		
		if (appt.getVersion_Booking_Appointment() != updatedAppointment.getVersion_Booking_Appointment())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateCancelledAppts(domain.getCancelledAppointmentsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
			return;
		}
		
		form.getGlobalContext().Scheduling.setTheatreAppointment(appt);

		if(appt.getSessionIsNotNull())
			form.getGlobalContext().Scheduling.setTheatreType(appt.getSession().getTheatreType());
		
		TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(appt);
		
		if(voPsc != null)
		{
			form.getGlobalContext().Core.setPatientShort(updatedAppointment.getPatient());
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralForAppointment(updatedAppointment));
			form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
			form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
			form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());			
	
			if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
				engine.open(form.getForms().RefMan.BookTheatreDialog);
			else
			//WDEV-22896
			{
				PatientElectiveListRefVo patientElectiveList = domain.getPatientElectiveListForAppt(form.getGlobalContext().Scheduling.getTheatreAppointment());
				
				if (patientElectiveList != null)
					engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {patientElectiveList});
				else
					engine.open(form.getForms().RefMan.BookEmergencyTheatre,new Object[] {domain.getPendingEmergencyTheatreForAppt(form.getGlobalContext().Scheduling.getTheatreAppointment())});
					
			}
		}
	}

	private void addAppointmentComments(BookingAppointmentForSessionManagementVo appointment)
	{
		if (appointment == null)
			return;
		
		appointment.setComments(form.getGlobalContext().Core.getCommentDialogString());
		
		String[] arrErrors = appointment.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.saveAppointment(appointment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		updateScreenForRecord(null);
		
	}

	private void cancelTheatreAppointment(Booking_AppointmentVo voAppt, BookingAppointmentForSessionManagementVo gridAppt) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null && Status_Reason.BOOKED.equals(voAppt.getApptStatus()) )
		{
		
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(gridAppt);
			
			if(voPsc != null)
			{
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((SessionTheatreFixedSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment().getPatient()));
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[] {null, isTheatreAppt});
			}
			
		}
		else if (voAppt != null && voAppt.getApptStatusIsNotNull() && gridAppt != null && gridAppt.getApptStatusIsNotNull()
				&& ! voAppt.getApptStatus().equals(gridAppt.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			updateScreenForRecord(null);	
		}
	}
	
	@Override
	protected void onGrdSessionsSelectionChanged() throws PresentationLogicException
	{
		boolean cancelledSession = form.lyrTabs().tabClinicView().grdSessions().getValue() != null && Session_Status_and_Reason.CANCELLED.equals(form.lyrTabs().tabClinicView().grdSessions().getValue().getSessionStatus());//WDEV-20588
		
		populateExtendedViewWithTheatreSlots(domain.getTheatreFixedSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));

		//WDEV-20588
		if (cancelledSession)
		{
			initializeCancelledApptGrid();
			populateCancelledAppts(domain.getCancelledAppointmentsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		}
		
		updateControlsState();

	}

	private void populateExtendedViewWithTheatreSlots(SessionTheatreFixedSlotForSessionManagementVoCollection sessionSlots)
	{
		form.lyrTabs().showtabExtendedView();

		form.getLocalContext().setSelectedSession(form.lyrTabs().tabClinicView().grdSessions().getValue());
		form.getLocalContext().setSelectedTab(ClinicView);

		populateExtendedViewSessionLabel();

		form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().clear();
		form.lyrTabs().tabExtendedView().chkSelectAll().setValue(Boolean.FALSE);
		form.getLocalContext().setTheatreFixedSlotsSelected(null);
		form.getLocalContext().setNoneOrBookedAppointmentsOnly(Boolean.TRUE);
		form.getLocalContext().setBookedOrAdmittedAppointmentsOnly(Boolean.TRUE);
		
		if (sessionSlots == null || sessionSlots.size() == 0)
			return;

		for (int i = 0; i < sessionSlots.size(); i++)
		{
			SessionTheatreFixedSlotForSessionManagementVo slot = sessionSlots.get(i);
			
			String cancelTooltip = getCancellationTooltip(slot.getAppointment());
			String formatedCancelTooltip = (cancelTooltip.length() > 0 ? "<br>" : "") + cancelTooltip;
			
			DynamicGridRow newDynamicRow = form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().newRow();

			DynamicGridCell cellProcedure = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PROCEDURE), DynamicCellType.HTMLVIEW);
			cellProcedure.setValue(slot.getAppointment() != null && slot.getAppointment().getTheatreBooking() != null && slot.getAppointment().getTheatreBooking().getProcedure() != null && slot.getAppointment().getTheatreBooking().getProcedure().getProcedureName() != null ? slot.getAppointment().getTheatreBooking().getProcedure().getProcedureName() : "");
			cellProcedure.setTooltip(cellProcedure.getValue().toString());
			cellProcedure.setReadOnly(true);
			
			DynamicGridCell cellStartTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.HTMLVIEW);
			cellStartTime.setValue(slot.getStartTime() != null ? slot.getStartTime().toString() : "");
			cellStartTime.setReadOnly(true);

			Time endTime = null;

			if (slot.getStartTime() != null && slot.getDuration() != null)
			{
				endTime = slot.getStartTime();
				endTime.addMinutes(slot.getDuration());
			}

			DynamicGridCell cellEndTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_END_TIME), DynamicCellType.HTMLVIEW);
			cellEndTime.setValue(endTime != null ? endTime.toString() : "");
			cellEndTime.setReadOnly(true);
			
			DynamicGridCell cellPatient = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT), DynamicCellType.HTMLVIEW);
			cellPatient.setReadOnly(true);
			
			DynamicGridCell cellRTT = newDynamicRow.getCells().newCell(getColumnById(COLUMN_RTT), DynamicCellType.HTMLVIEW);
			cellRTT.setReadOnly(true);
			
			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.HTMLVIEW);
			cellStatus.setValue(slot.getStatus() != null ? slot.getStatus().getText() : "");
			cellStatus.setTooltip(slot.getStatus() != null ? slot.getStatus().getText() + formatedCancelTooltip : cancelTooltip);
			cellStatus.setReadOnly(true);
			
			DynamicGridCell cellSlotComments = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_COMMENT), DynamicCellType.IMAGE);
			
			if (slot.getComment() != null)
			{
				cellSlotComments.setValue(form.getImages().Core.Comment16);
				cellSlotComments.setTooltip("Slot Comment: <b>" + slot.getComment() + "</b>");
				cellSlotComments.setReadOnly(true);				
			}
			
			DynamicGridCell cellSelect = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SELECT), DynamicCellType.BOOL);
			cellSelect.setReadOnly(!Status_Reason.SLOTOPENED.equals(slot.getStatus()));
			cellSelect.setAutoPostBack(true);
			
			if (!Status_Reason.SLOTOPENED.equals(slot.getStatus()))
			{
				cellSelect.setBackColor(Color.LightGray);
				cellSelect.setTooltip("Not Selectable");
			}
			
			if (slot.getAppointment() != null)
			{
				
				CatsReferralForSessionManagementVo referral = domain.getCatsReferralForAppointment(slot.getAppointment());
				
				cellRTT.setValue(referral != null && referral.getReferralDetails() != null && referral.getReferralDetails().getEnd18WW() != null ? referral.getReferralDetails().getEnd18WW().toString() : "");
				
				slot.setCatsReferral(referral);
				
				cellPatient.setValue(slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null ? slot.getAppointment().getPatient().getName().toString() : "");
				cellPatient.setTooltip(slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null ? slot.getAppointment().getPatient().getName().toString() + formatedCancelTooltip : cancelTooltip);
				
				if (!Status_Reason.BOOKED.equals(slot.getAppointment().getApptStatus()))
					form.getLocalContext().setNoneOrBookedAppointmentsOnly(Boolean.FALSE);
				
				if (!Status_Reason.BOOKED.equals(slot.getAppointment().getApptStatus()) && !Status_Reason.ADMITTED.equals(slot.getAppointment().getApptStatus()))
					form.getLocalContext().setBookedOrAdmittedAppointmentsOnly(Boolean.FALSE);
			}

			newDynamicRow.setValue(slot);
		}
		
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setTooltip(getTooltipForSessionMoveDetailsButton(form.getLocalContext().getSelectedSession())); //WDEV-22944
	}
	
	//WDEV-22944
	private String getTooltipForSessionMoveDetailsButton(TheatreSessionManagementVo selectedSession)
	{
		String strTooltip = "";
		if (selectedSession==null)
		{
			return strTooltip;
		}
		
		strTooltip += selectedSession.getSessionCommentIsNotNull() ? "<b>Session Comment: </b>" + selectedSession.getSessionComment() : "";
		if (strTooltip.length()>0)
		{
			strTooltip+="<br>";
		}
		
		//SessionMoveDetails
		for  (int i=0; selectedSession.getSessionMove()!=null && i<selectedSession.getSessionMove().size(); i++)
		{
			strTooltip +="---------------------------------";
			SessionMoveVo sessionMoveItem = selectedSession.getSessionMove().get(i);
			
			strTooltip += sessionMoveItem.getMoveDateIsNotNull() ? "<br><b>Moved Date: </b>" +  sessionMoveItem.getMoveDate() : "";
			strTooltip += sessionMoveItem.getSystemInformationIsNotNull() && sessionMoveItem.getSystemInformation().getCreationUser()!=null ? "<br><b>Moved By: </b>" +  sessionMoveItem.getSystemInformation().getCreationUser().toString() : "";
			strTooltip += sessionMoveItem.getReasonIsNotNull() ? "<br><b>Moved Reason: </b>" +  sessionMoveItem.getReason() : "";
			strTooltip += sessionMoveItem.getCommentIsNotNull() ? "<br><b>Moved Comment: </b>" +  sessionMoveItem.getComment() : "";
			strTooltip+="<br>";
		}
		
		return strTooltip;
	}

	//WDEV-20588
	private void populateCancelledAppts(BookingAppointmentTheatreVoCollection appointments)
	{
		
		if (appointments == null || appointments.size() == 0)
			return;

		for (int i = 0; i < appointments.size(); i++)
		{
			BookingAppointmentTheatreVo appt = appointments.get(i);
			DynamicGridRow nDynamicRow = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getRows().newRow();
			
			DynamicGridCell cellStartTime = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_START_TIME), DynamicCellType.HTMLVIEW);
			
			if (appt.getApptStartTime() != null)
				cellStartTime.setValue(appt.getApptStartTime().toString());
			cellStartTime.setReadOnly(true);
			
			DynamicGridCell cellEndTime = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_END_TIME), DynamicCellType.HTMLVIEW);
			
			if (appt.getApptEndTime() != null)
				cellEndTime .setValue(appt.getApptEndTime().toString());
			cellEndTime .setReadOnly(true);
			
			DynamicGridCell cellPatient = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_PATIENT), DynamicCellType.HTMLVIEW);
			
			if (appt.getPatient().getName() != null)
				cellPatient.setValue(appt.getPatient().getName().toString());
			cellPatient.setReadOnly(true);
			
			
			DynamicGridCell cellStatus = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_STATUS), DynamicCellType.HTMLVIEW);
			
			if(appt.getApptStatus() != null)
				cellStatus.setValue(appt.getApptStatus().getText());
			cellStatus.setReadOnly(true);
			
			nDynamicRow.setValue(appt);
		}	
		
	}
	
	private String getCancellationTooltip(BookingAppointmentForSessionManagementVo appointment)
	{
		if(appointment == null)
			return "";
		
		StringBuffer tooltip = new StringBuffer();
		
		if(appointment.getNumProviderCancellations() != null && appointment.getNumProviderCancellations() > 0)
		{
			tooltip.append("Number Of Provider Cancellations = ");
			tooltip.append(appointment.getNumProviderCancellations());
		}
		if(appointment.getNumPatientCancellations() != null && appointment.getNumPatientCancellations() > 0)
		{
			if(tooltip.length() > 0)
				tooltip.append("<br>");
			
			tooltip.append("Number Of Patient Cancellations = ");
			tooltip.append(appointment.getNumPatientCancellations());
		}
		
		return tooltip.toString();
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().getByIdentifier(identifier);
	}
	
	//WDEV-20588
	private DynamicGridColumn getCancelledAppointmentsColumnById(String identifier)
	{
		return form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().getByIdentifier(identifier);
	}
	
	private void populateExtendedViewSessionLabel()
	{

		if (form.getLocalContext().getSelectedSession() != null)
		{
			TheatreSessionManagementVo session = form.getLocalContext().getSelectedSession();

			StringBuffer sessionInfo = new StringBuffer();

			sessionInfo.append("<font size = 2>");
			sessionInfo.append(session.getName() != null ? "Session: <b>" + session.getName() + (Boolean.TRUE.equals(form.getLocalContext().getSelectedSession().getWasSessionMoved()) ? " (MOVED) </b>" : "</b>"): "");

			if (session.getSessionDate() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE");
				sessionInfo.append("&nbsp;&nbsp;&nbsp;&nbsp;<b>" + dateFormat.format(session.getSessionDate().getDate()) + "</b>");
				sessionInfo.append(" - <b>" + session.getSessionDate() + "</b>");
			}

			sessionInfo.append(session.getStartTm() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;<b>" + session.getStartTm() + "</b>" : "");
			sessionInfo.append(session.getEndTm() != null ? " - <b>" + session.getEndTm() + "</b>" : "");

			sessionInfo.append("<br>");
			sessionInfo.append(session.getService() != null && session.getService().getServiceName() != null ? "Service: <b>" + session.getService().getServiceName() + "</b>" : "");
			sessionInfo.append(session.getSchLocation() != null && session.getSchLocation().getName() != null ? "&nbsp;&nbsp;&nbsp; Location: <b>" + session.getSchLocation().getName() + "</b>" : "");
			sessionInfo.append(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? "&nbsp;&nbsp;&nbsp; Status: <b>" + session.getSessionStatus().getText() + "</b>" : "");
			
			sessionInfo.append("</font>");
			
			form.lyrTabs().tabExtendedView().htmSession().setHTML(sessionInfo.toString());
		}

	}

	@Override
	protected void onDyngrdSessionsCellButtonClicked(DynamicGridCell cell)
	{

	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		populateLocationCombo();

	}

	@Override
	protected void onLnkreturnToListClick() throws PresentationLogicException
	{
		if (ClinicView == form.getLocalContext().getSelectedTab())
		{
			form.lyrTabs().showtabClinicView();
		}
		else if (AvailabilityView == form.getLocalContext().getSelectedTab())
		{
			form.lyrTabs().showtabAvailabilityView();
		}
		
		form.lyrTabs().tabClinicView().grdSessions().setValue(null);
		form.getLocalContext().setSelectedSession(null);
		updateControlsState();

	}

	@Override
	protected void onCcListOwnerValueChanged() throws PresentationLogicException
	{
		form.lblListOwners().setValue("");
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getCancelAppConfirmationMessageBoxID() != null && form.getLocalContext().getCancelAppConfirmationMessageBoxID().equals(messageBoxId))//WDEV-19779
		{
			if (DialogResult.YES.equals(result))
			{
				cancelSession(true, domain.getSessionVo(form.getLocalContext().getSelectedSession()));
			}
			updateScreenForRecord(null);

		}
		
		if (form.getLocalContext().getMoveSessionConfirmationMessageBoxID() != null && form.getLocalContext().getMoveSessionConfirmationMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			engine.open(form.getForms().Scheduling.MoveSessionDialog , new Object[] {domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
		}
	}

	@Override
	protected void onBtnReOpenClick() throws PresentationLogicException
	{
		updateSessionStatus(form.getLocalContext().getSelectedSession(), Session_Status_and_Reason.OPEN);
		
	}

	@Override
	protected void onChkSelectAllValueChanged() throws PresentationLogicException
	{
		DynamicGridRowCollection rows = form.lyrTabs().tabExtendedView().dyngrdSlots().getRows();
		
		if (rows == null || rows.size() == 0)
			return;
		
		for (int i = 0 ; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
				
			if (!Status_Reason.SLOTOPENED.equals(((SessionTheatreFixedSlotForSessionManagementVo)row.getValue()).getStatus()))
				continue;
			
			row.getCells().get(getColumnById(COLUMN_SELECT)).setValue(form.lyrTabs().tabExtendedView().chkSelectAll().getValue());
			
			if (form.lyrTabs().tabExtendedView().chkSelectAll().getValue())
			{
				if (form.getLocalContext().getTheatreFixedSlotsSelected() == null)
					form.getLocalContext().setTheatreFixedSlotsSelected(new SessionTheatreFixedSlotForSessionManagementVoCollection());
			
				form.getLocalContext().getTheatreFixedSlotsSelected().add((SessionTheatreFixedSlotForSessionManagementVo)row.getValue());
			}
			else
				form.getLocalContext().setTheatreFixedSlotsSelected(null);
		}
		
		updateControlsState();
		
	}

	@Override
	protected void onDyngrdSlotsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
		
	}

	@Override
	protected void onDyngrdSlotsCellValueChanged(DynamicGridCell cell)
	{
		if (form.getLocalContext().getTheatreFixedSlotsSelected() == null)
			form.getLocalContext().setTheatreFixedSlotsSelected(new SessionTheatreFixedSlotForSessionManagementVoCollection());

		if (Boolean.TRUE.equals(cell.getValue()))
		{
			form.getLocalContext().getTheatreFixedSlotsSelected().add((SessionTheatreFixedSlotForSessionManagementVo) cell.getRow().getValue());
		}
		else
			form.getLocalContext().getTheatreFixedSlotsSelected().remove((SessionTheatreFixedSlotForSessionManagementVo) cell.getRow().getValue());
		
		updateControlsState();
		
	}
	
	//WDEV-20588
	private void initializeCancelledApptGrid()
	{
		form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().clear();
		form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getRows().clear();
		
		DynamicGridColumn column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("Start Time", COLUMN_CAN_START_TIME);
		
		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("End Time", COLUMN_CAN_END_TIME);
		
		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false); 	

		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("Patient", COLUMN_CAN_PATIENT);
		
		column.setWidth(125);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("Status", COLUMN_CAN_STATUS);
		
		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);

		
	}

	@Override
	protected void onDynCancelledApptsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{	
		updateControlsState();

		//WDEV-22391
		BookingAppointmentTheatreVo cancelAppt = null;
		cancelAppt = (BookingAppointmentTheatreVo)form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getValue();
		if(cancelAppt != null)
		{
			form.getGlobalContext().Core.setPatientShort(cancelAppt.getPatient());
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralForAppointment(cancelAppt));
		}
	}

	//WDEV-23633
	@Override
	protected void onBtnTheatreUtilisationDashboardClick() throws PresentationLogicException 
	{
		engine.openDashboard(ConfigFlag.GEN.THEATRE_DASHBOARD_URL.getValue(), null);
	}

	@Override
	protected void onBtnMoveLocationClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.MoveSessionToLocationDialog , new Object[] {domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
		
	}

}
