//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.flexibleprofileslot;

import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Time;
import ims.scheduling.vo.ProfileParentChildSlotVo;
import ims.scheduling.vo.Profile_ListOwnerVo;

import java.util.ArrayList;
import java.util.List;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		loadListOwners();
		
		if(form.getGlobalContext().Scheduling.getProfileEndTime() != null)
			form.lblProfileEndTm().setValue(form.getGlobalContext().Scheduling.getProfileEndTime().toString());
		//wdev-20074
		if( form.getGlobalContext().Scheduling.getProfileStartTimeIsNotNull())
			form.lblProfileStartTime().setValue(form.getGlobalContext().Scheduling.getProfileStartTime().toString());
		
		ProfileParentChildSlotVo slot = form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot();
		
		if (slot == null || (slot != null && slot.getID_ProfileParentChildSlot() == null && slot.getIsActive() == null))
		{
			form.chkActive().setValue(true);
		}
		
	}

	private void open()
	{
		populateScreenFromData();
		
	}
	
	private void populateScreenFromData()
	{
		clearScreen();
		
		ProfileParentChildSlotVo outpatientFlexibleProfileSlot = form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot();
		
		if (outpatientFlexibleProfileSlot == null)
			return;
		
		form.cmbPriority().setValue(outpatientFlexibleProfileSlot.getPriority());
		form.intNoInst().setValue(outpatientFlexibleProfileSlot.getNoOfInstances());
		form.intNoSlots().setValue(outpatientFlexibleProfileSlot.getNumberSlotsReq());
		form.cmbSlotResp().setValue(outpatientFlexibleProfileSlot.getSlotResp());
		form.intSlotInterval().setValue(outpatientFlexibleProfileSlot.getDuration());
		form.timStart().setValue(outpatientFlexibleProfileSlot.getStartTime());
		form.chkActive().setValue(outpatientFlexibleProfileSlot.getIsActive());
		form.timEnd().setValue(outpatientFlexibleProfileSlot.getEndTm());
		
	}

	private void clearScreen()
	{
		form.cmbPriority().setValue(null);
		form.cmbSlotResp().setValue(null);
		form.timStart().setValue(null);
		form.intSlotInterval().setValue(null);
		form.intNoSlots().setValue(null);
		form.intNoInst().setValue(null);
		
	}

	private void loadListOwners()
	{
		form.cmbSlotResp().clear();
		
		 if (form.getGlobalContext().Scheduling.getListOwnerCollection() == null)
			 return;
		 
		for (Profile_ListOwnerVo voListOwner : form.getGlobalContext().Scheduling.getListOwnerCollection())
		{
			if(voListOwner.getHCP() != null && voListOwner.getHCP().getName() != null)
				form.cmbSlotResp().newRow(voListOwner, voListOwner.getHCP().getName().toString());
		}
		
	}

	/*@Override wdev-20074
	protected void onImbCalculateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Time startTime = form.timStart().getValue();
		Time endTime = form.getGlobalContext().Scheduling.getProfileEndTime();

		//this is mandatory for dialog
		if(form.getGlobalContext().Scheduling.getProfileEndTime() == null)
			return;
		
		if(startTime == null || (form.intSlotInterval().getValue() == null || form.intSlotInterval().getValue() == 0))
		{
			engine.showErrors(new String[] {"Start Time and Slot Interval need to be provided for calculation"});
			return;
		}
		
		int iDuration = form.intSlotInterval().getValue();
		
		int iTime = endTime.getTotalMinutes() - startTime.getTotalMinutes(); 
		form.intNoSlots().setValue(iTime/iDuration);
	}*/
	
	//wdev-20074
	private void calculate(Time startTime, Time endTime, Integer noOfSlots, Integer slotDuration) //WDEV-19702 
	{		
		//this is mandatory for dialog
		if (form.getGlobalContext().Scheduling.getProfileEndTime() == null)
			return;
		if (form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot() != null && form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getDurationIsNotNull() && form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getStartTimeIsNotNull() && form.getLocalContext().getbWasSlotNoUserSet() == null && form.getLocalContext().getbWasEndTimeUserSet() == null &&  form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getStartTime().equals(form.timStart().getValue()) && form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getDuration().equals(form.intSlotInterval().getValue()))
			return;  //no re-calculation if no value changed when editing a slot

		
		if (!Boolean.TRUE.equals(form.getLocalContext().getbWasEndTimeUserSet()) || (form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlotIsNotNull() &&  form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getDurationIsNotNull() && !form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getDuration().equals(form.intSlotInterval().getValue())))
				form.timEnd().setValue(null);
		if (!Boolean.TRUE.equals(form.getLocalContext().getbWasSlotNoUserSet()) && (Boolean.TRUE.equals(form.getLocalContext().getbWasEndTimeUserSet())) || (form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlotIsNotNull() &&  form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getDurationIsNotNull() && !form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot().getDuration().equals(form.intSlotInterval().getValue())))
				form.intNoSlots().setValue(null);
		

		if ((endTime == null && (noOfSlots == null || noOfSlots != null && !Boolean.TRUE.equals(form.getLocalContext().getbWasSlotNoUserSet())) && slotDuration != null) || (slotDuration != null && endTime != null && !Boolean.TRUE.equals(form.getLocalContext().getbWasSlotNoUserSet()) && !Boolean.TRUE.equals(form.getLocalContext().getbWasEndTimeUserSet())))
			endTime =  form.getGlobalContext().Scheduling.getProfileEndTime();
		
		if(startTime == null || (form.intSlotInterval().getValue() == null || form.intSlotInterval().getValue() == 0))
		{
			engine.showErrors(new String[] {"At least Start Time and Slot Duration need to be provided for slot calculation."});
			return;
		}
		if  (!Boolean.TRUE.equals(form.getLocalContext().getbWasSlotNoUserSet()) && endTime != null)
		{	
			int iDuration = form.intSlotInterval().getValue();
			int iTime = endTime.getTotalMinutes() - startTime.getTotalMinutes();
			
			if (iTime/iDuration == 0)
			{
				form.timEnd().setValue(null);
				form.intNoSlots().setValue(null);
				engine.showErrors(new String[] {"Invalid set of values entered for No. of Slots and/or Slot Duration fields.\nThe resulted end time cannot exceed Profile End Time."});
				return;
			}	
			form.intNoSlots().setValue(iTime/iDuration);
			form.getLocalContext().setbWasSlotNoUserSet(false);
		}

		if (slotDuration != null && !Boolean.TRUE.equals(form.getLocalContext().getbWasEndTimeUserSet()))
		{
			if (noOfSlots == null || !Boolean.TRUE.equals(form.getLocalContext().getbWasSlotNoUserSet())) // WDEV-19959
				noOfSlots = form.intNoSlots().getValue();
			if (noOfSlots != null && ((noOfSlots * slotDuration > (form.getGlobalContext().Scheduling.getProfileEndTime().getTotalMinutes() - startTime.getTotalMinutes()) || (slotDuration > (form.getGlobalContext().Scheduling.getProfileEndTime().getTotalMinutes() - startTime.getTotalMinutes()))))) // WDEV-19959
			{			
				form.timEnd().setValue(null);
				form.intNoSlots().setValue(null);
				engine.showErrors(new String[] {"Invalid set of values entered for No. of Slots and/or Slot Duration fields.\nThe resulted end time cannot exceed Profile End Time."});
				return;
			}	
			form.timEnd().setValue(calculateEndTime(startTime,noOfSlots,slotDuration));
			form.getLocalContext().setbWasEndTimeUserSet(false);
		}	
	}
	//--------------

	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-20631 - No. of instances is always 1 for flexible slots
		form.intNoInst().setValue(1);
			
		if(!validateUI())
			return;
		
		ProfileParentChildSlotVo voSlot = populateDataFromScreen(form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot());
		
		String[] arrErrors = voSlot.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;
		}
		
		
		
		form.getGlobalContext().Scheduling.setOutpatientFlexibleProfileSlot(voSlot);
		engine.close(DialogResult.OK);
		
	}
	
	private ProfileParentChildSlotVo populateDataFromScreen(ProfileParentChildSlotVo outpatientFlexibleProfileSlot)
	{
		
		if (outpatientFlexibleProfileSlot == null)
			outpatientFlexibleProfileSlot = new ProfileParentChildSlotVo();
		
		outpatientFlexibleProfileSlot.setPriority(form.cmbPriority().getValue());
		outpatientFlexibleProfileSlot.setNoOfInstances(form.intNoInst().getValue());
		outpatientFlexibleProfileSlot.setNumberSlotsReq(form.intNoSlots().getValue());
		outpatientFlexibleProfileSlot.setSlotResp(form.cmbSlotResp().getValue());
		outpatientFlexibleProfileSlot.setIsActive(form.chkActive().getValue());
		outpatientFlexibleProfileSlot.setDuration(form.intSlotInterval().getValue());
		outpatientFlexibleProfileSlot.setStartTime(form.timStart().getValue());
		outpatientFlexibleProfileSlot.setEndTm(calculateEndTime());
		
		return outpatientFlexibleProfileSlot;
	}

	private boolean validateUI()
	{
		List<String> errors = new ArrayList<String>();
		
		if (form.cmbPriority().getValue() == null)
		{
			errors.add("Priority is mandatory");
		}
		
		if (form.timStart().getValue() == null)
		{
			errors.add("Start Time is mandatory");
		}
		
		if (form.intSlotInterval().getValue() == null)
		{
			errors.add("Slot Duration is mandatory");
		}
		
		if (form.intNoSlots().getValue() == null)
		{
			errors.add("No. of Slots is mandatory");
		}
		
		if (form.intNoInst().getValue() == null)
		{
			errors.add("No. of Instances is mandatory");
		}
		
		String[] arrErrors = errors.toArray(new String[0]);
		
		if(arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		if(form.timStart().getValue() != null && form.getGlobalContext().Scheduling.getProfileStartTime() != null && form.timStart().getValue().isLessThan(form.getGlobalContext().Scheduling.getProfileStartTime()))
				errors.add("Start Time of Slot ( " + form.timStart().getValue().toString() +  " ) cannot be before Profile Start Time ( " + form.getGlobalContext().Scheduling.getProfileStartTime() + " )");
		
		if(form.timStart().getValue() != null && form.getGlobalContext().Scheduling.getProfileEndTime() != null && form.timStart().getValue().isGreaterThan(form.getGlobalContext().Scheduling.getProfileEndTime()))
			errors.add("Start Time of Slot ( " + form.timStart().getValue().toString() +  " ) cannot exceed Profile End Time ( " + form.getGlobalContext().Scheduling.getProfileEndTime() + " )");
		else if(!isSlotEndTimeLessThanProfileEndTime())
			errors.add("End Time of Slots ( " + calculateEndTime() +  " ) cannot exceed Profile End Time ( " + form.getGlobalContext().Scheduling.getProfileEndTime() + " )");

		arrErrors = errors.toArray(new String[0]);
		
		if(arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		return true;
	}
	
	//wdev-20074
	private Time calculateEndTime(Time startTime, Integer noOfSlots,Integer slotDuration)
	{
		if (startTime == null)
			return null;
		if (noOfSlots == null) // WDEV-19959 
			return null;
		if (slotDuration == null) 
			return null;
		Time tempTime = (Time) startTime.clone();
		tempTime.addMinutes(noOfSlots*slotDuration);
		
		return new Time(tempTime.toString());
	}
	//----------------
	
	private Time calculateEndTime()
	{
		Time endTime = new Time();
		
		endTime = (Time) form.timStart().getValue().clone();
		endTime.addMinutes(form.intNoSlots().getValue() * form.intSlotInterval().getValue());
		
		return endTime;
	}
	
	private boolean isSlotEndTimeLessThanProfileEndTime()
	{	
		int availableMins = 0;
		if(form.getGlobalContext().Scheduling.getProfileEndTimeIsNotNull())
		{
			if(form.getGlobalContext().Scheduling.getProfileEndTime().isGreaterThan(form.timStart().getValue()))
				availableMins = form.getGlobalContext().Scheduling.getProfileEndTime().getTotalMinutes() - form.timStart().getValue().getTotalMinutes();
		}
	
		int requiredMins = form.intNoSlots().getValue() * form.intSlotInterval().getValue();		
		return requiredMins <= availableMins;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	//wdev-20074
	protected void onTimEndValueChanged() throws PresentationLogicException
	{
		boolean isEndTimeSet = form.timEnd().getValue() != null;
		if (isEndTimeSet)
			form.intNoSlots().setValue(null);
		form.getLocalContext().setbWasSlotNoUserSet(false);
		form.getLocalContext().setbWasEndTimeUserSet( isEndTimeSet ? true : false);
		
	}

	//wdev-20074
	protected void onIntNoSlotsValueChanged() throws PresentationLogicException
	{
		boolean isNoOfSlotsSet = form.intNoSlots().getValue() != null;
		if (isNoOfSlotsSet)
			form.timEnd().setValue(null);
		form.getLocalContext().setbWasEndTimeUserSet(false);
		form.getLocalContext().setbWasSlotNoUserSet(isNoOfSlotsSet ? true : false);
		
	}

	//wdev-20074
	protected void onBtnCalculateNrOfSlotsEndTimeClick() throws PresentationLogicException
	{
		calculate(form.timStart().getValue(),form.timEnd().getValue(), form.intNoSlots().getValue(), form.intSlotInterval().getValue());
		
	}
}
