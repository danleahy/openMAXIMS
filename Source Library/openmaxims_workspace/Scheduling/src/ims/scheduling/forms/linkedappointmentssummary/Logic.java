//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.linkedappointmentssummary;

import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Appointment_withLinkedAppointmentsSummaryVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVo;
import ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_DATE_TIME	= 1;
	private static final Integer COL_SERVICE	= 2;
	private static final Integer COL_CLINIC		= 3;
	private static final Integer COL_STATUS		= 4;
	
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		open(args);
	}


	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}



	private void initialize()
	{
		form.dyngrdLinkedAppointments().clear();
		
		DynamicGridColumn columnDateTime = form.dyngrdLinkedAppointments().getColumns().newColumn("Date Time", COL_DATE_TIME);
		columnDateTime.setWidth(100);
		
		DynamicGridColumn columnService = form.dyngrdLinkedAppointments().getColumns().newColumn("Service", COL_SERVICE);
		columnService.setWidth(150);
		
		DynamicGridColumn columnClinic = form.dyngrdLinkedAppointments().getColumns().newColumn("Clinic", COL_CLINIC);
		columnClinic.setWidth(250);
		
		DynamicGridColumn columnStatus = form.dyngrdLinkedAppointments().getColumns().newColumn("Status", COL_STATUS);
		columnStatus.setWidth(150);
	}


	private void open(Object[] args)
	{
		if (args != null && args.length > 0 && args[0] instanceof Booking_AppointmentRefVo)
		{
			form.getLocalContext().setAppointment(domain.getAppointmentLinkedSummary((Booking_AppointmentRefVo) args[0]));
		}
		
		populateDataFromScreen(form.getLocalContext().getAppointment());
	}


	private void clearScreen()
	{
		form.lblPatient().setValue(null);
		form.lblAppointmentDateTime().setValue(null);
		form.lblStatus().setValue(null);
		form.lblClinic().setValue(null);
		
		form.dyngrdLinkedAppointments().getRows().clear();
	}


	private void populateDataFromScreen(Appointment_withLinkedAppointmentsSummaryVo appointment)
	{
		clearScreen();
		
		if (appointment == null)
			return;
		
		form.lblPatient().setValue(form.getGlobalContext().Core.getPatientShort().getName().toString());
		form.lblAppointmentDateTime().setValue(new DateTime(appointment.getAppointmentDate(), appointment.getApptStartTime()).toString());
		form.lblStatus().setValue(appointment.getApptStatus().toString());
		form.lblClinic().setValue(appointment.getSession() != null ? appointment.getSession().getName() : "");
		
		populateLinkedAppointments(appointment.getLinkedAppointments());
	}


	private void populateLinkedAppointments(LinkedAppointmentsForClinicListWithICPActionsVoCollection linkedAppointments)
	{
		form.dyngrdLinkedAppointments().getRows().clear();
		
		if (linkedAppointments == null)
			return;
		
		for (LinkedAppointmentsForClinicListWithICPActionsVo appointment : linkedAppointments)
		{
			DynamicGridRow row = form.dyngrdLinkedAppointments().getRows().newRow();
			
			DynamicGridCell cellDateTime = row.getCells().newCell(form.dyngrdLinkedAppointments().getColumns().getByIdentifier(COL_DATE_TIME), DynamicCellType.DATETIME);
			cellDateTime.setValue(new DateTime(appointment.getAppointmentDate(), appointment.getApptStartTime()));
			cellDateTime.setReadOnly(true);
			
			
			DynamicGridCell cellService = row.getCells().newCell(form.dyngrdLinkedAppointments().getColumns().getByIdentifier(COL_SERVICE), DynamicCellType.STRING);
			cellService.setValue(appointment.getSession() != null && appointment.getSession().getService() != null ? appointment.getSession().getService().getServiceName() : "");
			cellService.setReadOnly(true);
			
			
			DynamicGridCell cellClinic = row.getCells().newCell(form.dyngrdLinkedAppointments().getColumns().getByIdentifier(COL_CLINIC), DynamicCellType.STRING);
			cellClinic.setValue(appointment.getSession() != null ? appointment.getSession().getName() : "");
			cellClinic.setReadOnly(true);
			
			
			DynamicGridCell cellStatus = row.getCells().newCell(form.dyngrdLinkedAppointments().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
			cellStatus.setValue(appointment.getApptStatus().getText());
			cellStatus.setReadOnly(true);
			
			row.setValue(appointment);
		}
	}
}
