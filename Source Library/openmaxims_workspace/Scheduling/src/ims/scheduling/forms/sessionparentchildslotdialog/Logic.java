//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.sessionparentchildslotdialog;

import java.util.ArrayList;
import java.util.List;

import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Time;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.TheatreSessionManagementVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData(form.getGlobalContext().Scheduling.getSessionParentChildSlot());
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof TheatreSessionManagementVo)
			{
				TheatreSessionManagementVo voSession = (TheatreSessionManagementVo) args[0];
				form.getLocalContext().setTheatreSessionManagement(voSession);
			}
			else if(args[0] instanceof SessionTheatreVo)
			{
				SessionTheatreVo voSession = (SessionTheatreVo) args[0];
				form.getLocalContext().setSessionTheatre(voSession);
			}
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUI())
		{
			form.getGlobalContext().Scheduling.setSessionParentChildSlot(populateDataFromScreen(form.getGlobalContext().Scheduling.getSessionParentChildSlot()));
			engine.close(DialogResult.OK);
		}
	}
	private boolean validateUI()
	{
		List<String> errors = new ArrayList<String>();
		
		if (form.timStart().getValue() == null)
			errors.add("'Start Time' is mandatory");
		if (form.intDuration().getValue() == null)
			errors.add("'Duration' is mandatory");
		if (form.intDuration().getValue() != null && form.intDuration().getValue() == 0)
			errors.add("Duration of the slot must be greater than zero");
		
		//WDEV-22972
		if (form.timStart().getValue() != null && form.intDuration().getValue() != null)
		{
			if (form.getLocalContext().getTheatreSessionManagement() != null && form.getLocalContext().getTheatreSessionManagement().getStartTm() != null)
			{
				Time timeStart = form.timStart().getValue();

				if (timeStart.isLessThan(form.getLocalContext().getTheatreSessionManagement().getStartTm()))
				{
					errors.add("Slot Start Time cannot be earlier than Session Start Time");
				}
			}

			if (form.getLocalContext().getTheatreSessionManagement() != null && form.getLocalContext().getTheatreSessionManagement().getEndTm() != null)
			{
				if (form.timStart().getValue().isGreaterThan(form.getLocalContext().getTheatreSessionManagement().getEndTm()))
				{
					errors.add("Slot Start Time cannot be later than Session End Time");
				}
				
				Time timeDuration = (Time) form.timStart().getValue().clone();
				timeDuration.addMinutes(form.intDuration().getValue());
				if (timeDuration.isGreaterThan(form.getLocalContext().getTheatreSessionManagement().getEndTm()))
				{
					errors.add("Slot End Time cannot be later than Session End Time");
				}
			}
			//--
			if (form.getLocalContext().getSessionTheatre() != null && form.getLocalContext().getSessionTheatre().getStartTm() != null)
			{
				Time timeStart = form.timStart().getValue();

				if (timeStart.isLessThan(form.getLocalContext().getSessionTheatre().getStartTm()))
				{
					errors.add("Slot Start Time cannot be earlier than Session Start Time");
				}
			}
			
			if (form.getLocalContext().getSessionTheatre() != null && form.getLocalContext().getSessionTheatre().getEndTm() != null)
			{
				if (form.timStart().getValue().isGreaterThan(form.getLocalContext().getSessionTheatre().getEndTm()))
				{
					errors.add("Slot Start Time cannot be later than Session End Time");
				}
				
				Time timeDuration = (Time) form.timStart().getValue().clone();
				timeDuration.addMinutes(form.intDuration().getValue());
				if (timeDuration.isGreaterThan(form.getLocalContext().getSessionTheatre().getEndTm()))
				{
					errors.add("Slot End Time cannot be later than Session End Time");
				}
			}
		}
		//end WDEV-22972
		if (errors.size() > 0)
		{
			engine.showErrors(errors.toArray(new String[errors.size()]));
			return false;
		}
		
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
