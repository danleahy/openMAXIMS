//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50218.1400)
//Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.profiles;

import ims.admin.vo.AppRoleShortVo;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.ReportTemplateLiteVo;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.clinical.vo.lookups.AnaestheticTypeCollection;
import ims.clinical.vo.lookups.LookupHelper;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.HcpRefVoCollection;
import ims.core.vo.ActivityLiteVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureNameVo;
import ims.core.vo.ProcedureNameVoCollection;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.ServiceFunction;
import ims.core.vo.lookups.ServiceFunctionCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DayOfWeek;
import ims.framework.utils.Time;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabActivitiesContainer.grdActivitiesRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabActivitiesWithSlotsContainer.grdActivitiesSlotsRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabActivitiesWithSlotsContainer.grdSlotsRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabGeneralDetailsContainer.GroupFlexibleProfileEnumeration;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabGeneralDetailsContainer.GroupHospitalEnumeration;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabGeneralDetailsContainer.GroupProfileTypeEnumeration;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabGeneralDetailsContainer.grdServiceFunctionsRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTemplatesContainer.grdTemplatesRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreServiceRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.lyrSlotsLayer.tabTCIContainer.grdTCITimesRow;
import ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.lyrSlotsLayer.tabTheatreSlotsContainer.grdParentChildSlotsRow;
import ims.scheduling.vo.DirectoryOfServiceVo;
import ims.scheduling.vo.DirectoryOfServiceVoCollection;
import ims.scheduling.vo.ProfileActivityVo;
import ims.scheduling.vo.ProfileActivityVoCollection;
import ims.scheduling.vo.ProfileParentChildSlotVo;
import ims.scheduling.vo.ProfileParentChildSlotVoCollection;
import ims.scheduling.vo.ProfileShortVo;
import ims.scheduling.vo.ProfileShortVoCollection;
import ims.scheduling.vo.ProfileTemplateVo;
import ims.scheduling.vo.ProfileTemplateVoCollection;
import ims.scheduling.vo.ProfileTheatreTCISlotVo;
import ims.scheduling.vo.ProfileTheatreTCISlotVoCollection;
import ims.scheduling.vo.Profile_BookRightsVo;
import ims.scheduling.vo.Profile_BookRightsVoCollection;
import ims.scheduling.vo.Profile_Exc_DateVo;
import ims.scheduling.vo.Profile_Exc_DateVoCollection;
import ims.scheduling.vo.Profile_Exc_TimeVo;
import ims.scheduling.vo.Profile_Exc_TimeVoCollection;
import ims.scheduling.vo.Profile_ListOwnerVo;
import ims.scheduling.vo.Profile_ListOwnerVoCollection;
import ims.scheduling.vo.Profile_SlotGenericVo;
import ims.scheduling.vo.Profile_SlotGenericVoCollection;
import ims.scheduling.vo.Sch_ProfileGenericVo;
import ims.scheduling.vo.Sch_ProfileRefVo;
import ims.scheduling.vo.SlotDirectoryOfServiceVo;
import ims.scheduling.vo.SlotDirectoryOfServiceVoCollection;
import ims.scheduling.vo.TheatreDetailLiteVo;
import ims.scheduling.vo.TheatreDetailLiteVoCollection;
import ims.scheduling.vo.lookups.ConsultationMediaType;
import ims.scheduling.vo.lookups.Profile_Interval_Type;
import ims.scheduling.vo.lookups.SchProfileType;
import ims.scheduling.vo.lookups.SchedCABSlotType;
import ims.scheduling.vo.lookups.Sched_Prfile_Cat;
import ims.scheduling.vo.lookups.Sched_Profile_Type;
import ims.scheduling.vo.lookups.SlotType;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final String LIST_OWNER_PROCEDURES = "List Owner";
	private static final String SERVICE_PROCEDURES = "Service";
	
	
	protected void onFormOpen() throws FormOpenException
	{
		initialiseScreenAndLists();
	}

	private void initialiseScreenAndLists()
	{
		//WDEV-16799 - show DoS controls depending on Config Flag value
		form.lyrDetails().tabDOS().setHeaderVisible(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"));
		form.lblDOS().setVisible(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"));
		form.qmbFilterDirectoryOfService().setVisible(!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"));
		

		// workaround to show location is required
		//form.lyrDetails().tabGeneralDetails().lblLocStar().setTextColor(Color.Red);	//wdev-20233
		//form.lyrDetails().tabGeneralDetails().lblLocStar().setTooltip("Required");	wdev-20233
		
		//form.lyrDetails().tabGeneralDetails().lblCNLocStar().setTextColor(Color.Red);	//wdev-20233
		//form.lyrDetails().tabGeneralDetails().lblCNLocStar().setTooltip("Required");	//wdev-20233
		
		//wdev-20074
		form.lyrDetails().tabGeneralDetails().lblFlexibleProfileStar().setTextColor(Color.Red);
		form.lyrDetails().tabGeneralDetails().lblFlexibleProfileStar().setTooltip("Required");
		
		form.lyrDetails().tabGeneralDetails().lblProfileTypeStar().setTextColor(Color.Red);
		form.lyrDetails().tabGeneralDetails().lblProfileTypeStar().setTooltip("Required");
		
		form.lyrDetails().tabTheatre().setVisible( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/);		//wdev-20074
		form.lyrDetails().tabTheatre().setHeaderVisible(GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/);	//wdev-20074
		
		//wdev-20074
		form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoOutpatient);
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoNo);
		
		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
		{
			form.lyrDetails().tabTheatre().lyrSlots().showtabTCI();
			form.lyrDetails().tabGeneralDetails().cmbSlotType().removeRow(SlotType.SLOTS);
		}
		else if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
		{
			form.lyrDetails().tabTheatre().lyrSlots().showtabTheatreSlots();
			form.lyrDetails().tabGeneralDetails().cmbSlotType().removeRow(SlotType.THEATRETCITIME);
		}
		
		//WDEV-12918
		AnaestheticTypeCollection collAnaesTypes = LookupHelper.getAnaestheticType(domain.getLookupService());
		for(int i=0;i<collAnaesTypes.size();i++)
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().newRow(collAnaesTypes.get(i), collAnaesTypes.get(i).getText());
		
		// prepopulating reference data
		form.getLocalContext().setRoleList(domain.listRoles());
		
		// initialising search
		form.chkActiveOnly().setValue(true);
		//WDEV-12039
		form.lyrDetails().tabSlots().chkSlotsActiveOnly().setValue(true);
		
		loadServices();
		loadHospitals();
		loadActivities();
		
		//WDEV-13362
		form.ccListOwner().initialize(MosType.HCP);
		
		//wdev-19419
		//form.lyrDetails().tabListOwners().ccConsultant().initialize(MosType.HCP);		//wdev-20074
		//wdev-19921
		form.btnAdd().setImage(form.getImages().Core.Add);
		form.btnEdit().setImage(form.getImages().Core.Edit);
		form.btnCloneThisProfile().setImage(form.getImages().Core.Copy);
		//---------
			
		
		radioButtonGroupProfileTypeValueChanged();
		//----------
		updateControlState();
	}

	private void loadActivities()
	{
		form.getLocalContext().setProfileActivities(domain.listActivityByService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(),(GroupFlexibleProfileEnumeration.rdoYes.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()) ? Boolean.TRUE:Boolean.FALSE)) /*domain.listActivity()*/);	//wdev-20074
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection voCollHosp = domain.listActiveHospitalsLite();
		form.cmbHospFilter().clear();
		form.lyrDetails().tabGeneralDetails().cmbHospital().clear();	//wdev-20233
		form.lyrDetails().tabGeneralDetails().cmbOtherHosp().clear(); //WDEV-21203

		for (int i = 0; i < voCollHosp.size(); i++)
		{
			form.cmbHospFilter().newRow(voCollHosp.get(i), voCollHosp.get(i).getName());
			form.lyrDetails().tabGeneralDetails().cmbHospital().newRow(voCollHosp.get(i), voCollHosp.get(i).getName());		//wdev-20233
			form.lyrDetails().tabGeneralDetails().cmbOtherHosp().newRow(voCollHosp.get(i), voCollHosp.get(i).getName()); //WDEV-21203
		}
	}
	
	private void loadServices()
	{
		ServiceVoCollection voCollServices = domain.listServices();
		form.cmbFilterSpecialty().clear();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbFilterSpecialty().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
			form.lyrDetails().tabGeneralDetails().cmbSpeciality().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}
	
	


	// Populate the not selected only in Edit Mode
	private void populateDOSGrid(DirectoryOfServiceVoCollection coll, boolean showSelected)
	{
		if (showSelected == false)
			form.lyrDetails().tabDOS().grdDOS().getRows().clear();
		GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow row;
		for (int i = 0; i < coll.size(); i++)
		{
			DirectoryOfServiceVo vo = coll.get(i);
			if (showSelected && dosAdded(vo))
				continue;
			row = form.lyrDetails().tabDOS().grdDOS().getRows().newRow();
			row.setValue(vo);
			row.setcolDosId(vo.getDoSId());
			row.setcolDosName(vo.getDoSName());
			row.setColSelected(false);
		}
	}

	protected void clearScreen()
	{
		clearGlobalContexts();

		super.clearScreen();
		form.lyrDetails().tabGeneralDetails().GroupHospital().setValue(GroupHospitalEnumeration.rdoProfileHospital);//WDEV-22289
		form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(null); //WDEV-12918
		form.lyrDetails().tabDOS().grdDOS().getRows().clear();
		form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().clear();
			
		form.lyrDetails().tabGeneralDetails().cmbHospital().setValue(null);	//wdev-20233
		form.lyrDetails().tabGeneralDetails().qmbLocation().clear();		//wdev-20233
		
		form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setValue(null);	//wdev-20262
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();	//wdev-20074
		form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setValue(null);
		form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(null);
		form.lyrDetails().tabGeneralDetails().intAutoGeneratePeriodWeeks().setValue(null);
		form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().setValue(null);
		form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setValue(null);
		
		
		//WDEV-18369
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(null);
		form.lyrDetails().tabBookingRights().grdBookingRights().getRows().clear();
		//wdev - wdev-19419
		form.lyrDetails().tabListOwners().cmbListType().setValue(null);
		//form.lyrDetails().tabListOwners().ccConsultant().setValue(null);	//wdev-20074
		
		form.lyrDetails().tabListOwners().grdListOwner().getRows().clear();
		form.lyrDetails().tabExclusion().grdExclDates().getRows().clear();
		form.lyrDetails().tabExclusion().grdExclPeriods().getRows().clear();
		form.lyrDetails().tabTemplates().grdTemplates().getRows().clear();
		form.lyrDetails().tabActivities().grdActivities().getRows().clear();
		form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().clear();
		form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().clear();
		form.lyrDetails().tabTheatre().grdTheatre().getRows().clear();
		form.lyrDetails().tabTheatre().grdTheatreService().getRows().clear();
		form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().clear(); //WDEV-11777
		form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().clear();
		
		enableAndClearIntervalControls(NOINTERVAL, false, true);
		//WDEV-12282 Comment this line will temporary fix issue until further investigation.  form.lyrDetails().showtabGeneralDetails();
		
		
		//wdev-20074
		form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoOutpatient);
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoNo);
		form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().clear();
		form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(false);
		//---------
	}

	private void clearGlobalContexts()
	{
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(null);
		form.getGlobalContext().Scheduling.setListOwnerCollection(null);
		form.getGlobalContext().Scheduling.setProfileStartTime(null);
		form.getGlobalContext().Scheduling.setProfileEndTime(null);
		form.getGlobalContext().Scheduling.setProfileService(null);
		form.getLocalContext().setTheatreSlots(null);
		form.getLocalContext().setParentChildSlots(null);
		form.getLocalContext().setSlots(null);
	}

	private void searchProfiles(boolean fromBtn)
	{
		form.grdProfiles().getRows().clear();
		if (fromBtn)
		{	
			form.getLocalContext().setCurrentProfile(null);
		}
		clearScreen();//WDEV-14644
		//WDEV-16799
		ProfileShortVoCollection coll = domain.listProfiles((ServiceVo) form.cmbFilterSpecialty().getValue(), form.qmbFilterDirectoryOfService().getValue(), form.cmbHospFilter().getValue(), form.chkActiveOnly().getValue() == false ? null : true, form.chkFilterOutpatients().getValue(), form.chkFilterTheatre().getValue(), form.txtName().getValue(), form.ccListOwner().getValue(),form.chkFilterWardAttendance().getValue());	//wdev-20074
		if (coll == null || coll.size() == 0)
			return;
		
		//wdev-20074
		if (form.getLocalContext().getCurrentProfile() != null && form.getLocalContext().getCurrentProfile().getID_Sch_Profile() != null)
		{
			if( !coll.contains(form.getLocalContext().getCurrentProfile()))
				form.getLocalContext().setCurrentProfile(null);
		}
		else
		{
			form.getLocalContext().setCurrentProfile(null);
		}

		GenForm.grdProfilesRow row;
		for (int i = 0; i < coll.size(); i++)
		{
			ProfileShortVo prfile = coll.get(i);
			row = form.grdProfiles().getRows().newRow();
			row.setValue(prfile);
			if (prfile.getEffToIsNotNull())
				row.setcolEndDate(prfile.getEffTo().toString());
			if (prfile.getEffFrmIsNotNull())
				row.setcolStartDate(prfile.getEffFrm().toString());
			row.setcolProfileDescription(prfile.getDescription());
			if (prfile.getServiceIsNotNull())
				row.setcolSpeciality(prfile.getService().getServiceName());
		}
	}

	protected void onBtnLocationClick() throws PresentationLogicException
	{
		if( GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))  //wdev-20067
			engine.open(form.getForms().Admin.LocationSelect, new Object[]{ims.core.vo.lookups.LocationType.WARD});
		else	
			engine.open(form.getForms().Admin.LocationSelect);
	}

	protected void onCmbSpecialityValueChanged() throws PresentationLogicException
	{
		
		
		cmbSpecialityValueChanged();
		
		//wdev-20074
		if(  ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(SERVICE_PROCEDURES))
		{
			if( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) )
			{
				form.lyrDetails().tabTheatre().grdTheatreService().getRows().clear();
			}
		}
	}
	
	//wdev-20074
	
	private void cmbSpecialityValueChanged()
	{
		form.getGlobalContext().Scheduling.setProfileService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
				
		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() == null)
		{
			form.lyrDetails().tabDOS().grdDOS().getRows().clear();
			form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(false);		//wdev-20074
			return;
		}
		else
		{
			//wdev-20074
			ServiceFunctionLiteVoCollection voCollServiceFunctions = domain.listServiceFunctionByService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
			if( voCollServiceFunctions != null && voCollServiceFunctions.size() > 0)
			{
				if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
				{
					form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(true);
					populateServiceFunctionGrid(voCollServiceFunctions);
				}
			}
			else
			{
				form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(false);
			}
		}

		loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
		
		form.getLocalContext().setProfileActivities(domain.listActivityByService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(),(GroupFlexibleProfileEnumeration.rdoYes.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()) ? Boolean.TRUE:Boolean.FALSE))    );	//wdev-20074

	}
	//wdev-20074
	private void populateServiceFunctionGrid(ServiceFunctionLiteVoCollection voCollServiceFunctions)
	{
		form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().clear();
		if( voCollServiceFunctions == null || voCollServiceFunctions.size() == 0 )
			return;
		for( int i = 0; i < voCollServiceFunctions.size();i++ )
		{
			
			ServiceFunctionLiteVo tempVo = voCollServiceFunctions.get(i); 
			if( tempVo != null )
			{
				grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().newRow();
				row.setColumnFunctions(tempVo.getFunction().getText());
				row.setColumnSelect(false);
				row.setValue(tempVo.getFunction());
				
				
			}
		}
		
	}
	//-----------

	private void loadDos(ServiceShortVo voService)
	{
		loadDos(voService, false);
	}

	private void loadDos(ServiceShortVo voService, boolean showSelected)
	{
		DirectoryOfServiceVo voDirService = new DirectoryOfServiceVo();
		if (voService != null)
		{
			voDirService.setService(voService);
			// WDEV-5584
			voDirService.setLocation(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue());	//wdev-20074
			voDirService.setIsActive(Boolean.TRUE);

			
			//WDEV-20896 the DOS will now be populated will all records depending only on service
			populateDOSGrid(domain.listDOS(voDirService, null), showSelected);
			
			//ims.core.vo.lookups.ServiceFunctionCollection tempColl = getFunctionsCollFromGeneralDetailsTab();	//wdev-20262
			//populateDOSGrid(domain.listDOS(voDirService,tempColl), showSelected);	//wdev-20262
		}
	}
	//wdev-20262
	//get collection of active ServiceFunction from  "Clinic Type / Function" grid in general details tab
	private ims.core.vo.lookups.ServiceFunctionCollection getFunctionsCollFromGeneralDetailsTab()
	{
		ServiceFunctionLiteVoCollection voCollServiceFunctions = domain.listServiceFunctionByService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
		ims.core.vo.lookups.ServiceFunctionCollection tempColl = new ServiceFunctionCollection();
		if( form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size() >  0)
		{
			for(int m = 0; m < form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size();m++)
			{
				grdServiceFunctionsRow rowF = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().get(m);
				if( rowF.getColumnSelect() == true)
				{
					if( isFunctionInCollection(voCollServiceFunctions,rowF.getValue()) == true)			 
						tempColl.add(rowF.getValue());			//take only active function from  - "Clinic Type / Function" grid in general details tab
				}
			}
		}
		if( tempColl != null && tempColl.size() == 0)
			tempColl = null;
		
		return tempColl;
	}
	//---------

	protected void onGrdProfilesSelectionChanged() throws PresentationLogicException
	{
		// Display the current row in the detail fields below
		ProfileShortVo voProfileShort = form.grdProfiles().getValue();
		Sch_ProfileGenericVo voProfile = domain.getGenericProfileDetails(voProfileShort);
		form.getLocalContext().setCurrentProfile(voProfile);
		form.lyrDetails().tabSlots().chkSlotsActiveOnly().setValue(true);
		this.populateScreenFromData(voProfile, listTemplates());
		
		// Reset to General Details tab
		form.lyrDetails().showtabGeneralDetails();
		form.getGlobalContext().Scheduling.setProfile(form.grdProfiles().getValue());
		
		updateControlState();
	}

	private ProfileTemplateVoCollection listTemplates()
	{
		if (form.getLocalContext().getCurrentProfileIsNotNull())
		{
			if (form.getLocalContext().getCurrentProfile().getID_Sch_Profile() != null)
			{
				return domain.listProfileTemplatesByProfile(form.getLocalContext().getCurrentProfile());
			}
		}

		return null;
	}

	protected void populateScreenFromData(Sch_ProfileGenericVo voProfile, ProfileTemplateVoCollection templates)
	{
		if (voProfile == null || voProfile.getID_Sch_Profile() == null) //if it is new profile return
			return;
		
		super.populateScreenFromData(voProfile); //WDEV-20178
		
		//form.lyrDetails().tabGeneralDetails().chkFlexible().setValue(!Boolean.TRUE.equals(voProfile.getIsFixed())); //WDEV-20049, //wdev-20074
		//wdev-20074
		if( Boolean.TRUE.equals(voProfile.getIsFixed()))
		{
			form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoNo);
		}
		else
		{
			form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoYes);
		}
		
		form.lyrDetails().tabGeneralDetails().cmbHospital().setValue(voProfile.getHospital());
		
		//WDEV-21203
		if (voProfile.getIsOtherHospital() != null && Boolean.TRUE.equals(voProfile.getIsOtherHospital()))
			form.lyrDetails().tabGeneralDetails().GroupHospital().setValue(GroupHospitalEnumeration.rdoOtherHospital);
		else
			form.lyrDetails().tabGeneralDetails().GroupHospital().setValue(GroupHospitalEnumeration.rdoProfileHospital);
		
		form.lyrDetails().tabGeneralDetails().cmbOtherHosp().setValue(voProfile.getOtherHospital());
		//end WDEV-21203
			
		//-------------
		//form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(voProfile.getIsFixedIsNotNull() ? (Boolean.TRUE.equals(voProfile.getIsFixed())? GroupFlexibleProfileEnumeration.rdoNo : GroupFlexibleProfileEnumeration.rdoYes) :null);
			
		//WDEV-18369
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(voProfile.getConsMediaType());
		
		//wdev-20074
		form.lyrDetails().tabGeneralDetails().intAutoGeneratePeriodWeeks().setValue(voProfile.getAutoGeneratePeriod());
		form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().setValue(voProfile.getReadyToGenerate());
		if( voProfile.getProfileTypeIsNotNull() )
		{
			if( voProfile.getProfileType().equals( SchProfileType.OUTPATIENT))
				form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoOutpatient);
			else if( voProfile.getProfileType().equals( SchProfileType.THEATRE))
				form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoTheatre);
			else if( voProfile.getProfileType().equals( SchProfileType.WARD_ATTENDANCE))
				form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoWardAttendance);
			
			radioButtonGroupProfileTypeValueChanged();
			updateControlState();
		}
		else
		{
			/*if( Boolean.TRUE.equals(voProfile.getIsTheatreProfile()) )		//this code should be removed, it is used for old records that doesn't has profiletype 
			{
				form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoTheatre);
				
			}
			else
			{
				form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoOutpatient);
			}
			radioButtonGroupProfileTypeValueChanged();*/
		}
		
		form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setValue(voProfile.getHasChooseBookActivity());
		chkProfileHasChooseAndBookActivityValueChanged();
		
		//WDEV-19518
		form.getGlobalContext().Admin.setProfileLocation(voProfile.getSchLocation());
		form.getGlobalContext().Admin.setProfileCaseNoteFoldersLocation(voProfile.getCaseNoteFolderLocation());
		form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setValue(voProfile.getCaseNoteFolderNotRequired());
		setLocation(voProfile.getSchLocation());
		setCaseNoteFolderLocation(voProfile.getCaseNoteFolderLocation(), true); //WDEV-19631
		//WDEV-19518 ----ends here

		form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(voProfile.getService());
		
		//wdev-20074
		if( form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValues() != null && !form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValues().contains(voProfile.getService()) )
		{
			if( voProfile.getService() != null )
			{
				form.lyrDetails().tabGeneralDetails().cmbSpeciality().newRow(voProfile.getService(), voProfile.getService().getServiceName());
				form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(voProfile.getService());
			}
		}
		//---------
		
		cmbSpecialityValueChanged();
		
		//wdev-20074
		//form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().clear();
		//form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(false);
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
    		if( voProfile.getFunctionIsNotNull() && voProfile.getFunction().size() > 0)
    		{
    			form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(true);
    			for( int k = 0; k < voProfile.getFunction().size();k++ )
    			{
    				

    				ServiceFunction tempLk =  voProfile.getFunction().get(k); 
    				if( tempLk != null )
    				{
    					if( setColSelectTrueIfGridContainFunction(tempLk) == false)
    					{
        					grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().newRow();
        					row.setColumnFunctions(tempLk.getText());
        					row.setColumnSelect(true);
        					row.setBackColor(Color.LightYellow);
        					row.setValue(tempLk);
    					}
    					
    				}
    			}
    			//wdsev-20448
    			if( form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().isVisible() && form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue() == true)
    				loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(), false);
    			//---------
    		}
		}
		//----------- end of wdev-20074
		
		
		//--------------
		

		if( !SchProfileType.THEATRE.equals(voProfile.getProfileType()) /*voProfile.getIsTheatreProfile() == null || voProfile.getIsTheatreProfile() == false */)
		{
			if(voProfile.getIsFixed() != null && !voProfile.getIsFixed())
			{
				if (ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITHOUT_SLOTS"))
				{
					//Activities (Flexible Profile)
					form.lyrDetails().tabActivities().grdActivities().getRows().clear();
					if (voProfile.getProfileActivitiesIsNotNull())
					{
						ProfileActivityVo voProfAct = null;
						GenForm.lyrDetailsLayer.tabActivitiesContainer.grdActivitiesRow aRow = null;
						for (int i = 0; i < voProfile.getProfileActivities().size(); i++)
						{
							voProfAct = voProfile.getProfileActivities().get(i);
							aRow = form.lyrDetails().tabActivities().grdActivities().getRows().newRow();
							
							//addActivitiesToRow WDEV-8810
							if(form.getLocalContext().getProfileActivitiesIsNotNull())
							{
								for(ActivityLiteVo voActivity : form.getLocalContext().getProfileActivities())
									aRow.getcolActivity().newRow(voActivity, voActivity.getName());
							}
							
							if(voProfAct.getActivityIsNotNull())
							{
								if(form.getLocalContext().getProfileActivitiesIsNotNull())
								{
									//if the activity has not been added
									if(!form.getLocalContext().getProfileActivities().contains(voProfAct.getActivity()))
										aRow.getcolActivity().newRow(voProfAct.getActivity(), voProfAct.getActivity().getName());
								}
								else
									aRow.getcolActivity().newRow(voProfAct.getActivity(), voProfAct.getActivity().getName());
							}
							
							aRow.getcolActivity().setValue(voProfAct.getActivity());
							aRow.setcolActive(voProfAct.getIsActive());
							
							aRow.setValue(voProfAct);
							aRow.setSelectable(false);
						}
					}
				}
				else if (ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITH_SLOTS"))
				{
					//Outpatient Flexible Profile
					
					form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().clear();
					
					if (voProfile.getProfileActivities() != null)
					{
						
						for (int i = 0; i < voProfile.getProfileActivities().size(); i++)
						{
							ProfileActivityVo voProfAct = voProfile.getProfileActivities().get(i);
							grdActivitiesSlotsRow aRow = form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().newRow();
							
							if(voProfAct.getActivity() != null)
							{
								aRow.getColActivity().newRow(voProfAct.getActivity(), voProfAct.getActivity().getName());
							}
							
							aRow.getColActivity().setValue(voProfAct.getActivity());
							aRow.setColActive(voProfAct.getIsActive());
							
							aRow.setValue(voProfAct);
							aRow.setSelectable(false);
						}
					}
					
					form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().clear();
					
					if (voProfile.getParentChildSlots() != null)
					{
						voProfile.getParentChildSlots().sort();

						for (ProfileParentChildSlotVo voParentChildSlot : voProfile.getParentChildSlots())
						{
							grdSlotsRow pcRow = form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().newRow();
							updateRowForOutpatientFlexibleSlot(voParentChildSlot, pcRow);
							pcRow.setSelectable(false);
						}
					}
				}
			}
			else
			{
				// Directory of Services grid
				if (voProfile.getDirectoryOfServicesIsNotNull())
				{
					DirectoryOfServiceVo voDirService = null;
					GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow dRow = null;
					for (int i = 0; i < voProfile.getDirectoryOfServices().size(); i++)
					{
						voDirService = voProfile.getDirectoryOfServices().get(i);
						if (dosAdded(voDirService) == false)
						{
							dRow = form.lyrDetails().tabDOS().grdDOS().getRows().newRow();
							dRow.setcolDosId(voDirService.getDoSId());
							dRow.setcolDosName(voDirService.getDoSName());
							dRow.setColSelected(true);
							dRow.setValue(voDirService);
							dRow.setSelectable(false);
						}
					}
				}

				form.getLocalContext().setSlots(voProfile.getProfileSlots());
				form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().clear();
				filterSlotsDisplay(voProfile.getProfileSlots(), false);
				setSlotsTabsState();
			}
		}
		else
		{
			//WDEV-12918
			if(voProfile.getAnaestheticTypeIsNotNull())
				form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(voProfile.getAnaestheticType().toArray());
			//Theatre Detail
			form.lyrDetails().tabTheatre().grdTheatre().getRows().clear();
			form.lyrDetails().tabTheatre().grdTheatreService().getRows().clear();
			if (voProfile.getTheatreDetailsIsNotNull())
			{
				TheatreDetailLiteVo voTheatre = null;

				if( ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
				{
					GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow tRow = null;
					for (int i = 0; i < voProfile.getTheatreDetails().size(); i++)
					{
						voTheatre = voProfile.getTheatreDetails().get(i);
						if (voTheatre.getIsActive())
						{
							tRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().newRow();
							if(voTheatre.getProcedureIsNotNull())
								tRow.getcolProcedure().newRow(voTheatre.getProcedure(), voTheatre.getProcedure().getProcedureName());

							tRow.getcolProcedure().setValue(voTheatre.getProcedure());
							tRow.setcolActive(voTheatre.getIsActive());
							if(voTheatre.getMaxNoIsNotNull())
								tRow.setcolMax(voTheatre.getMaxNo());

							tRow.setValue(voTheatre);
							tRow.setSelectable(false);
						}
					}
				}
				else
				{
					GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreServiceRow tRow = null;
					for (int i = 0; i < voProfile.getTheatreDetails().size(); i++)
					{
						voTheatre = voProfile.getTheatreDetails().get(i);
						if (voTheatre.getIsActive())
						{
							tRow = form.lyrDetails().tabTheatre().grdTheatreService().getRows().newRow();
							if(voTheatre.getProcedureIsNotNull())
							{
								tRow.setcolProcedure(voTheatre.getProcedure().getProcedureName());
								tRow.setcolProcedureReadOnly(true);
							}

							tRow.setcolActive(voTheatre.getIsActive());
							if(voTheatre.getMaxNoIsNotNull())
								tRow.setcolMax(voTheatre.getMaxNo());

							tRow.setValue(voTheatre);
							tRow.setSelectable(false);
						}
					}
				}
			}
			
			if(voProfile.getSlotType() != null)
			{
				if(voProfile.getSlotType().equals(SlotType.THEATRETCITIME))
				{
					//WDEV-11777
					form.getLocalContext().setTheatreSlots((ProfileTheatreTCISlotVoCollection) voProfile.getProfileTheatreSlots().clone());
					form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().clear();
					if (voProfile.getProfileTheatreSlotsIsNotNull())
					{
						 voProfile.getProfileTheatreSlots().sort(); //WDEV-11777
						 for(ProfileTheatreTCISlotVo voTheatreSlot : voProfile.getProfileTheatreSlots())
						 {
							 if(voTheatreSlot.getIsActive())
							 {
								 ims.scheduling.forms.profiles.GenForm.lyrDetailsLayer.tabTheatreContainer.lyrSlotsLayer.tabTCIContainer.grdTCITimesRow tsRow = form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().newRow();
								 tsRow.setcolTCITime(voTheatreSlot.getToComeInTime());
								 tsRow.setcolNoInstances(voTheatreSlot.getNoOfInstances());
								 tsRow.setValue(voTheatreSlot);
								 tsRow.setReadOnly(true);
								 tsRow.setSelectable(false); 
							 }
						 }
					}
				}
				//WDEV-12918
				else if(voProfile.getSlotType().equals(SlotType.SLOTS))
				{
					form.getLocalContext().setParentChildSlots((ProfileParentChildSlotVoCollection)voProfile.getParentChildSlots().clone());
					form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().clear();
					if (voProfile.getParentChildSlotsIsNotNull())
					{
						 voProfile.getParentChildSlots().sort(); 
						 for(ProfileParentChildSlotVo voParentChildSlot : voProfile.getParentChildSlots())
						 {
							 if(voParentChildSlot.getIsActive())
							 {
								 grdParentChildSlotsRow pcRow = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().newRow();
								 if(voParentChildSlot.getStartTimeIsNotNull())
									 pcRow.setColStartTime(voParentChildSlot.getStartTime().toString());
								 if(voParentChildSlot.getDurationIsNotNull())
									 pcRow.setColDuration(voParentChildSlot.getDuration().toString());
								 
								 pcRow.setColActive(true);
								 pcRow.setValue(voParentChildSlot);
								 pcRow.setReadOnly(true);
								 pcRow.setSelectable(true); //WDEV-13224
							 }
						 }
					}
				}	
			}
		}
		//WDEV-19518
		/*form.getGlobalContext().Admin.setProfileLocation(voProfile.getSchLocation());
		form.getGlobalContext().Admin.setProfileCaseNoteFoldersLocation(voProfile.getCaseNoteFolderLocation());
		form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setValue(voProfile.getCaseNoteFolderNotRequired());
		setLocation(voProfile.getSchLocation());
		setCaseNoteFolderLocation(voProfile.getCaseNoteFolderLocation(), true); //WDEV-19631
		//WDEV-19518 ----ends here

		form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(voProfile.getService());
		//wdev-20074
		if( form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValues() != null && !form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValues().contains(voProfile.getService()))
		{
			if( voProfile.getService() != null )
			{
				form.lyrDetails().tabGeneralDetails().cmbSpeciality().newRow(voProfile.getService(), voProfile.getService().getServiceName());
				form.lyrDetails().tabGeneralDetails().cmbSpeciality().setValue(voProfile.getService());
			}
		}
		//---------
		
		cmbSpecialityValueChanged(); */
		
		//wdev-20074
		//form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().clear();
		//form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(false);
		/*if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
    		if( voProfile.getFunctionIsNotNull() && voProfile.getFunction().size() > 0)
    		{
    			form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(true);
    			for( int k = 0; k < voProfile.getFunction().size();k++ )
    			{
    				

    				ServiceFunction tempLk =  voProfile.getFunction().get(k); 
    				if( tempLk != null )
    				{
    					if( setColSelectTrueIfGridContainFunction(tempLk) == false)
    					{
        					grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().newRow();
        					row.setColumnFunctions(tempLk.getText());
        					row.setColumnSelect(true);
        					row.setBackColor(Color.LightYellow);
        					row.setValue(tempLk);
    					}
    					
    				}
    			}
    			//wdsev-20448
    			if( form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().isVisible() && form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue() == true)
    				loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(), false);
    			//---------
    		}
		}*/
		//----------- end of wdev-20074

		// Populate the Booking Rights Grid
		form.lyrDetails().tabBookingRights().grdBookingRights().getRows().clear();
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow;
		for (int i = 0; voProfile.getBookingRights() != null && i < voProfile.getBookingRights().size(); i++)
		{
			Profile_BookRightsVo rightVo = voProfile.getBookingRights().get(i);
			bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().newRow();
			bRow.setValue(rightVo);
			loadRolesUsersIntoGridColumnCombo(bRow);
			bRow.getcolRole().setValue(rightVo.getRole());
			bRow.setReadOnly(true);
			bRow.setSelectable(false);
		}
		//wdev-19419
		form.lyrDetails().tabListOwners().cmbListType().setValue(voProfile.getListType());
		//form.lyrDetails().tabListOwners().ccConsultant().setValue(voProfile.getResponsibleHCP());		//wdev-20074
		//----------

		// List Owners
		form.lyrDetails().tabListOwners().grdListOwner().getRows().clear();
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow lRow;
		for (int i = 0; i < voProfile.getListOwners().size(); i++)
		{
			Profile_ListOwnerVo listVo = voProfile.getListOwners().get(i);
			lRow = form.lyrDetails().tabListOwners().grdListOwner().getRows().newRow();
			lRow.setValue(listVo);
			if (listVo.getHCPIsNotNull())
			{
				lRow.getColHcp().newRow(listVo.getHCP(), listVo.getHCP().getName().toString());
				lRow.getColHcp().setValue(listVo.getHCP());
			}
			//wdev-20074
			if( listVo.getAttendingClinicianIsNotNull() )
				lRow.setColAttendingClinician(listVo.getAttendingClinician());
			
			if( listVo.getListOwnerIsNotNull() )
				lRow.setColListOwner(listVo.getListOwner());
			//----------
			lRow.setReadOnly(true);
			lRow.setSelectable(false);
		}

		// Populate the exclusion dates grid
		form.lyrDetails().tabExclusion().grdExclDates().getRows().clear();
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclDatesRow eDrow;
		for (int i = 0; i < voProfile.getExclusionDates().size(); i++)
		{
			Profile_Exc_DateVo dateVo = voProfile.getExclusionDates().get(i);
			eDrow = form.lyrDetails().tabExclusion().grdExclDates().getRows().newRow();
			eDrow.setValue(dateVo);
			eDrow.setcolEndDate(dateVo.getEndDate());
			eDrow.setcolStartDate(dateVo.getStartDate());
			eDrow.setReadOnly(true);
			eDrow.setSelectable(false);
		}

		// Populate the exclusion times grid
		form.lyrDetails().tabExclusion().grdExclPeriods().getRows().clear();
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclPeriodsRow pRow;
		for (int i = 0; i < voProfile.getExclusionTimes().size(); i++)
		{
			Profile_Exc_TimeVo timeVo = voProfile.getExclusionTimes().get(i);
			pRow = form.lyrDetails().tabExclusion().grdExclPeriods().getRows().newRow();
			pRow.setValue(timeVo);
			pRow.setcolEndTime(timeVo.getEndTime());
			pRow.setcolStartTime(timeVo.getStartTime());
			pRow.setReadOnly(true);
			pRow.setSelectable(false);
		}

		// Populate the templates grid
		form.lyrDetails().tabTemplates().grdTemplates().getRows().clear();
		GenForm.lyrDetailsLayer.tabTemplatesContainer.grdTemplatesRow tRow;
		if (templates != null)
		{
			for (int i = 0; i < templates.size(); i++)
			{
				ProfileTemplateVo voProfTemp = templates.get(i);
				tRow = form.lyrDetails().tabTemplates().grdTemplates().getRows().newRow();
				tRow.setColTemplate(voProfTemp.getTemplate());
				tRow.setValue(voProfTemp);
				tRow.setReadOnly(true);
				tRow.setSelectable(false);
			}
		}
	}
	//wdev-20074
	//set colSelect to TRUE if grid contain tempLk argument 
	private boolean setColSelectTrueIfGridContainFunction(ServiceFunction tempLk )
	{
		for(int i = 0;i < form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size();i++)
		{
			grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().get(i);
			if( row != null && tempLk != null && row.getValue() != null && tempLk.equals(row.getValue()))
			{
				row.setColumnSelect(true);
				return true;
			}
		}
		
		return false;
	}
	
	//---- end wdev-20074

	private boolean dosAdded(DirectoryOfServiceVo voDirService)
	{
		GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow dRow;
		for (int j = 0; j < form.lyrDetails().tabDOS().grdDOS().getRows().size(); j++)
		{
			dRow = form.lyrDetails().tabDOS().grdDOS().getRows().get(j);
			if (voDirService.equals(dRow.getValue()))
			{
				dRow.setColSelected(true);
				return true;
			}
		}
		return false;
	}

	private void loadRolesUsersIntoGridColumnCombo(grdBookingRightsRow row)
	{
		AppRoleShortVoCollection voCollRole = form.getLocalContext().getRoleList();
		if (voCollRole == null)
			return;

		for (int i = 0; i < voCollRole.size(); i++)
			row.getcolRole().newRow(voCollRole.get(i), voCollRole.get(i).getName());
	}

	protected void onChkActiveOnlyValueChanged() throws PresentationLogicException
	{
		searchProfiles(true);
	}

	protected Sch_ProfileGenericVo populateDataFromScreen(Sch_ProfileGenericVo profile)
	{
		super.populateDataFromScreen(profile);
		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() != null)
			profile.setService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
		else
			profile.setService(null);

		
		
		//profile.setIsFixed(!form.lyrDetails().tabGeneralDetails().chkFlexible().getValue());	//wdev-20074
		// copying name to description also
		profile.setDescription(form.lyrDetails().tabGeneralDetails().txtProfileName().getValue());
		profile.setIsActive(new Boolean(form.lyrDetails().tabGeneralDetails().chkProfileActive().getValue()));
		profile.setPrfCategory(Sched_Prfile_Cat.STANDARD /*form.lyrDetails().tabGeneralDetails().cmbCategory().getValue()*/); //wdev-20074
		profile.setPrftype(Sched_Profile_Type.SINGLE);
		
		//wdev-20233
		profile.setSchLocation(form.lyrDetails().tabGeneralDetails().qmbLocation().getValue());
		
		//wdev-20074
		profile.setAutoGeneratePeriod(form.lyrDetails().tabGeneralDetails().intAutoGeneratePeriodWeeks().getValue());
		profile.setReadyToGenerate(form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().getValue());

		profile.setHospital(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue());
		
		//WDEV-21203
		if(GroupHospitalEnumeration.rdoOtherHospital.equals(form.lyrDetails().tabGeneralDetails().GroupHospital().getValue()))
		{
			profile.setIsOtherHospital(true);
			profile.setOtherHospital(form.lyrDetails().tabGeneralDetails().cmbOtherHosp().getValue());
		}
		else
		{
			profile.setIsOtherHospital(false);
			profile.setOtherHospital(null);
		}
		//end WDEV-21203
		
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) )
		{
			profile.setProfileType(SchProfileType.OUTPATIENT);
			//profile.setIsTheatreProfile(false);
		}
		else if( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue())  )
		{
			profile.setProfileType(SchProfileType.THEATRE);
			//profile.setIsTheatreProfile(true);
			
		}
		else if( GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue())  )
		{
			profile.setProfileType(SchProfileType.WARD_ATTENDANCE);
			//profile.setIsTheatreProfile(false);
		}
		//--------- end of wdev-20074
		
		
		
		if (form.lyrDetails().tabDOS().isHeaderVisible())
			profile.setDirectoryOfServices(getSelectedDosColl());

		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /* !form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/) //wdev-20074 
		{
			//wdev-20074
			profile.setHasChooseBookActivity(form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue());
			//WDEV-18369
			profile.setConsMediaType(form.lyrDetails().tabGeneralDetails().cmbConsMediaType().getValue());
			ims.core.vo.lookups.ServiceFunctionCollection tempColl = new ServiceFunctionCollection();
			if( form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size() >  0)
			{
				for(int m = 0; m < form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size();m++)
				{
					grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().get(m);
					if( row.getColumnSelect() == true)
					{
						tempColl.add(row.getValue());
					}
				}
			}
			if( tempColl != null && tempColl.size() > 0)
				profile.setFunction(tempColl);
			else
				profile.setFunction(null);
			
			if( form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue().equals(GroupFlexibleProfileEnumeration.rdoYes))
			{
				profile.setIsFixed(false);
			}
			else
				profile.setIsFixed(true);
			
			
			//--------- end of wdev-20074
			
			if( GroupFlexibleProfileEnumeration.rdoYes.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue())/*form.lyrDetails().tabGeneralDetails().chkFlexible().getValue()*/)	//wdev-20074
			{
				//populate ProfileActivities
				ProfileActivityVoCollection voCollAct = profile.getProfileActivities();
				if(voCollAct == null)
					voCollAct = new ProfileActivityVoCollection();
				else
					voCollAct.clear();
				
				
				if (ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITHOUT_SLOTS"))
				{
					for (int i = 0; i < form.lyrDetails().tabActivities().grdActivities().getRows().size(); i++)
					{
						grdActivitiesRow aRow = form.lyrDetails().tabActivities().grdActivities().getRows().get(i);
						ProfileActivityVo voProfAct = aRow.getValue();
						voProfAct.setActivity((ActivityLiteVo) aRow.getcolActivity().getValue());
						voProfAct.setIsActive(aRow.getcolActive());
						voCollAct.add(voProfAct);
					}
				}
				else if (ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITH_SLOTS"))
				{
					for (int i = 0; i < form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().size(); i++)
					{
						grdActivitiesSlotsRow aRow = form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().get(i);
						ProfileActivityVo voProfAct = aRow.getValue();
						voProfAct.setActivity((ActivityLiteVo) aRow.getColActivity().getValue());
						voProfAct.setIsActive(aRow.getColActive());
						voCollAct.add(voProfAct);
					}
					
					ProfileParentChildSlotVoCollection voCollParentChildSlots = profile.getParentChildSlots();
					
					if(voCollParentChildSlots == null)
						voCollParentChildSlots = new ProfileParentChildSlotVoCollection();
					else
						voCollParentChildSlots.clear();
					
					for(int i = 0; i < form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().size(); i++)
					{
						grdSlotsRow tRow = form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().get(i);
						ProfileParentChildSlotVo voParentChildSlot = tRow.getValue();
						voCollParentChildSlots.add(voParentChildSlot);
					}
					
					/*
					//add the inactivated (removed) items to the collection
					if(form.getLocalContext().getParentChildSlotsIsNotNull())
					{
						for(ProfileParentChildSlotVo voSlot : form.getLocalContext().getParentChildSlots())
						{
							//WDEV-18216 check if the slot id is not null
							for (int i=0; i < voCollParentChildSlots.size(); i++)
							{
								if (voCollParentChildSlots.get(i).getID_ProfileParentChildSlot() != null && !voCollParentChildSlots.get(i).equals(voSlot)) 
								{
									voSlot.setIsActive(false);
									voCollParentChildSlots.add(voSlot);
								}
							}
						}
					}
					*/
					profile.setParentChildSlots(voCollParentChildSlots);
				}
				
				profile.setProfileActivities(voCollAct);
			}
			else
			{
				// Populate the profile slots collection
				Profile_SlotGenericVoCollection coll = (profile).getProfileSlots();
				if (coll == null)
					coll = new Profile_SlotGenericVoCollection();
	  				
				GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row;
				for (int i = 0; i < form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().size(); i++)
				{
					row = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i);
					int index = coll.indexOf(row.getValue());
					if (index != -1)
						coll.set(index, row.getValue());
					else
						coll.add(row.getValue());
				}
				profile.setProfileSlots(coll);
			}
		}
		else if( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/)
		{
			profile.setIsFixed(true);	//wdev-20074
			
			//WDEV-12918
			if(form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().getValues() != null && form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().getValues().length > 0)
			{
				AnaestheticType[] collAnaes = form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().getValues();
				profile.setAnaestheticType(new AnaestheticTypeCollection());
				for(int i=0;i<collAnaes.length;i++)
					profile.getAnaestheticType().add(collAnaes[i]);
			}
			else //WDEV-19854 
				profile.setAnaestheticType(null);
				
			//populate theatre detail
			TheatreDetailLiteVoCollection voCollTheatre = profile.getTheatreDetails();
			if(voCollTheatre == null)
				voCollTheatre = new TheatreDetailLiteVoCollection();
			else
				voCollTheatre.clear();
				
			
			if( ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
			{
				for(int i=0;i<form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); i++)
				{
					grdTheatreRow thRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().get(i);
					TheatreDetailLiteVo voTheatre = thRow.getValue();
					voTheatre.setProcedure((ProcedureNameVo) thRow.getcolProcedure().getValue());
					voTheatre.setMaxNo(thRow.getcolMax());
					voTheatre.setIsActive(thRow.getcolActive());
					voCollTheatre.add(voTheatre);
				}
			}
			else
			{
				for(int i=0;i<form.lyrDetails().tabTheatre().grdTheatreService().getRows().size(); i++)
				{
					grdTheatreServiceRow thRow = form.lyrDetails().tabTheatre().grdTheatreService().getRows().get(i);
					TheatreDetailLiteVo voTheatre = thRow.getValue();
					voTheatre.setProcedure(thRow.getValue().getProcedure());
					voTheatre.setMaxNo(thRow.getcolMax());
					voTheatre.setIsActive(thRow.getcolActive());
					voCollTheatre.add(voTheatre);
				}
			}
			profile.setTheatreDetails(voCollTheatre);
							
			//WDEV-12918
			if(profile.getSlotType() != null)
			{
				if(profile.getSlotType().equals(SlotType.THEATRETCITIME))
				{
					//WDEV-11777 populate theatre slots
					ProfileTheatreTCISlotVoCollection voCollTheatreSlots = profile.getProfileTheatreSlots();
					if(voCollTheatreSlots == null)
						voCollTheatreSlots = new ProfileTheatreTCISlotVoCollection();
					else
						voCollTheatreSlots.clear();
					
					for(int i=0;i<form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().size(); i++)
					{
						grdTCITimesRow tcRow = form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().get(i);
						ProfileTheatreTCISlotVo voTheatreSlot = tcRow.getValue();
						voTheatreSlot.setToComeInTime(tcRow.getcolTCITime());
						voTheatreSlot.setNoOfInstances(tcRow.getcolNoInstances());
						voTheatreSlot.setIsActive(true);
						voCollTheatreSlots.add(voTheatreSlot);
					}
					
					//add the inactivated (removed) items to the collection
					if(form.getLocalContext().getTheatreSlotsIsNotNull())
					{
						for(ProfileTheatreTCISlotVo voSlot : form.getLocalContext().getTheatreSlots())
						{
							//WDEV-18216 check if the slot id is not null
							for (int i=0; i < voCollTheatreSlots.size(); i++)
							{
								if (voCollTheatreSlots.get(i).getID_ProfileTheatreTCISlot() != null && !voCollTheatreSlots.get(i).equals(voSlot)) 
								{
									voSlot.setIsActive(false);
									voCollTheatreSlots.add(voSlot);
								}
							}
						}
					}
					profile.setProfileTheatreSlots(voCollTheatreSlots);
				}
				else if(profile.getSlotType().equals(SlotType.SLOTS))
				{
					//WDEV-11777 populate theatre slots
					ProfileParentChildSlotVoCollection voCollParentChildSlots = profile.getParentChildSlots();
					if(voCollParentChildSlots == null)
						voCollParentChildSlots = new ProfileParentChildSlotVoCollection();
					else
						voCollParentChildSlots.clear();
					
					for(int i=0;i<form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().size(); i++)
					{
						grdParentChildSlotsRow tRow = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().get(i);
						ProfileParentChildSlotVo voParentChildSlot = tRow.getValue();
						voCollParentChildSlots.add(voParentChildSlot);
					}
					
					//add the inactivated (removed) items to the collection
					if(form.getLocalContext().getParentChildSlotsIsNotNull())
					{
						for(ProfileParentChildSlotVo voSlot : form.getLocalContext().getParentChildSlots())
						{
							//WDEV-18216 check if the slot id is not null
							for (int i=0; i < voCollParentChildSlots.size(); i++)
							{
								if (voCollParentChildSlots.get(i).getID_ProfileParentChildSlot() != null && !voCollParentChildSlots.get(i).equals(voSlot)) 
								{
									voSlot.setIsActive(false);
									voCollParentChildSlots.add(voSlot);
								}
							}
						}
					}
					
					profile.setParentChildSlots(voCollParentChildSlots);
				}
			}
		}
		
		// Set the Booking Rights for the profile
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow;
		Profile_BookRightsVoCollection rightsColl = new Profile_BookRightsVoCollection();
		for (int i = 0; i < form.lyrDetails().tabBookingRights().grdBookingRights().getRows().size(); i++)
		{
			bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().get(i);
			Profile_BookRightsVo vo = bRow.getValue();
			AppRoleShortVo voAppRole = (AppRoleShortVo) bRow.getcolRole().getValue();
			vo.setRole(voAppRole);
			rightsColl.add(vo);
		}
		profile.setBookingRights(rightsColl);
		
		//wdev-19419
		profile.setListType(form.lyrDetails().tabListOwners().cmbListType().getValue());
		//profile.setResponsibleHCP((HcpLiteVo) form.lyrDetails().tabListOwners().ccConsultant().getValue());	//wdev-20074
		
		//---------

		// Set the List Owners for the profile
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow oRow;
		Profile_ListOwnerVoCollection ownerColl = new Profile_ListOwnerVoCollection();
		for (int i = 0; i < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			oRow = form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i);
			Profile_ListOwnerVo vo = oRow.getValue();
			vo.setHCP((HcpLiteVo) oRow.getColHcp().getValue());
			//wdev-20074
			vo.setListOwner(oRow.getColListOwner());
			vo.setAttendingClinician(oRow.getColAttendingClinician());
			//---------
			ownerColl.add(vo);
		}
		profile.setListOwners(ownerColl);

		// go through the slots and remove any reference to listowners that are
		// no longer in overall record - dlaffan
		if (profile.getProfileSlotsIsNotNull())
		{
			for (Profile_SlotGenericVo voProfleSlot : profile.getProfileSlots())
			{
				if (voProfleSlot.getSlotRespIsNotNull())
				{
					if (!profile.getListOwners().contains(voProfleSlot.getSlotResp()))
						voProfleSlot.setSlotResp(null);
				}
			}
		}
		
		//wdev-20891
		if (profile.getParentChildSlotsIsNotNull() )
		{
			for (ProfileParentChildSlotVo voParentProfleSlot : profile.getParentChildSlots())
			{
				if (voParentProfleSlot.getSlotRespIsNotNull())
				{
					if (!profile.getListOwners().contains(voParentProfleSlot.getSlotResp()))
						voParentProfleSlot.setSlotResp(null);
				}
			}
		}
		///----------

		// Set the Exclusion Dates for the profile
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclDatesRow eRow;
		Profile_Exc_DateVoCollection dateColl = new Profile_Exc_DateVoCollection();
		Profile_Exc_DateVo voExclDate = null;
		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclDates().getRows().size(); i++)
		{
			eRow = form.lyrDetails().tabExclusion().grdExclDates().getRows().get(i);
			voExclDate = eRow.getValue();
			voExclDate.setEndDate(eRow.getcolEndDate());
			voExclDate.setStartDate(eRow.getcolStartDate());
			dateColl.add(voExclDate);
		}
		profile.setExclusionDates(dateColl);

		// Set the Exclusion Times for the profile
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclPeriodsRow timeRow;
		Profile_Exc_TimeVoCollection timeColl = new Profile_Exc_TimeVoCollection();
		Profile_Exc_TimeVo voExclTime = null;
		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclPeriods().getRows().size(); i++)
		{
			timeRow = form.lyrDetails().tabExclusion().grdExclPeriods().getRows().get(i);
			voExclTime = timeRow.getValue();
			voExclTime.setEndTime(timeRow.getcolEndTime());
			voExclTime.setStartTime(timeRow.getcolStartTime());
			timeColl.add(voExclTime);
		}
		profile.setExclusionTimes(timeColl);
		return profile;
	}

	private boolean validTimes(Profile_Exc_TimeVo voExclTime, Sch_ProfileGenericVo profile)
	{
		// Any exclusion dates must be between profile start and end dates
		Time startTime = voExclTime.getStartTime();
		Time endTime = voExclTime.getEndTime();
		Time profStartTime = profile.getStartTm();
		Time profEndTime = profile.getEndTm();
		if (startTime != null && endTime != null && profStartTime != null)
		{
			if (startTime.isLessThan(profStartTime) || startTime.isGreaterThan(profEndTime) || endTime.isLessThan(profStartTime) || endTime.isGreaterThan(profEndTime))
				return false;
		}
		return true;
	}

	private boolean validDates(Profile_Exc_DateVo voExclDate, Sch_ProfileGenericVo profile)
	{
		// Any exclusion dates must be between profile start and end dates
		Date startDate = voExclDate.getStartDate();
		Date endDate = voExclDate.getEndDate();
		Date profStartDate = profile.getEffFrm();
		Date profEndDate = profile.getEffTo();
		if (startDate.isLessThan(profStartDate) || (startDate.isGreaterThan(profEndDate) && profEndDate != null) || endDate.isLessThan(profStartDate) || (endDate.isGreaterThan(profEndDate) && profEndDate != null))
			return false;
		return true;
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		Sch_ProfileGenericVo profile = form.getLocalContext().getCurrentProfile();
		this.populateDataFromScreen(profile);

		String[] errors = profile.validate(getUIValidationRules(form.getLocalContext().getCurrentProfile()));
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		try
		{
			form.getLocalContext().setCurrentProfile(domain.saveGenericProfile(profile, populateTemplatesFromScreen()));
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}

	private String[] getUIValidationRules(Sch_ProfileGenericVo profile)
	{
		List<String> errors = new ArrayList<String>();

		Date newDate = validateStartDateIsSunday(form.lyrDetails().tabProfileDetails().dteStartDate().getValue());
		if (newDate != null)
			errors.add("'Week Starting' date must be a Sunday");
		
		//wdev-20074
		if( form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().isVisible())
		{
			if (profile.getCaseNoteFolderLocation() == null && !Boolean.TRUE.equals(profile.getCaseNoteFolderNotRequired())) //WDEV-19518
				errors.add("'Case Note Folders Location' is mandatory");
		}
		//wdev-20233 
		if( form.lyrDetails().tabGeneralDetails().cmbTheatreType().getVisible() && form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue() != null && form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue().equals(TheatreType.EMERGENCY))
		{
			if( form.lyrDetails().tabTheatre().grdTheatre().getRows().size() > 0)
				errors.add(" No procedures are to be saved for Emergency Theatre type ");
		}
		//wdev-20074
		if( form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue() == null || form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue().equals(GroupProfileTypeEnumeration.None))
			errors.add("Profile Type is mandatory");
		
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue())) //wdev-20074
		{
			if( form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue() == null || form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue().equals(GroupFlexibleProfileEnumeration.None))
			{
				errors.add("Flexible Profile is mandatory");
			}
		}
		//-------
		
		//WDEV-7323 - if configuring a theatre ignore slot validation
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/)	//wdev-20074
		{
			if(Boolean.TRUE.equals(profile.getIsFixed()))
			{
				if ((Boolean.TRUE.equals(profile.getIsActive())) && (profile.getProfileSlots() == null || profile.getProfileSlots().size() == 0 || isAllSlotsInactive(profile.getProfileSlots())) || (Boolean.FALSE.equals(profile.getIsActive()) && ((profile.getProfileSlots() == null || profile.getProfileSlots().size() == 0))))	//wdev-20448 //WDEV-23013
					errors.add("Slots are mandatory");
				else
				{
					for (Profile_SlotGenericVo voSlot : profile.getProfileSlots())
					{
						// vo automatic validation will look after checking this data
						if (voSlot.getStartTm() == null || profile.getStartTm() == null)
							continue;
					}
		
					int countCabSlots= 0;
					for (Profile_SlotGenericVo voSlot : profile.getProfileSlots())
					{
						//WDEV-10003
						if(voSlot.getTypeIsNotNull())
						{
							if(!voSlot.getType().equals(SchedCABSlotType.LOCAL))
								countCabSlots++;
						}
					
						// vo automatic validation will look after checking this data
						if (voSlot.getDirectoryOfServiceIsNotNull())
						{
							//WDEV-10371
							if(voSlot.getTypeIsNotNull())
							{
								if(!voSlot.getType().equals(SchedCABSlotType.LOCAL))
								{
									if(voSlot.getDirectoryOfService() == null || voSlot.getDirectoryOfService().size() == 0)
										errors.add("Directory of Service must be selected for non-local slot");
								}	
							}

							for (SlotDirectoryOfServiceVo voDirService : voSlot.getDirectoryOfService())
							{
								if (!isDirectoryOfServiceLocationEqualProfileLocation(profile, voDirService))
								{
									errors.add("Directory of Service (" + voDirService.getDirectoryOfService().getDoSName() + ") selected for one of the slots is not applicable for the Location selected for the Profile, it has been removed");
									voSlot.setDirectoryOfService(null);
								}
							}
						}
						
						//WDEV-12039 validate that slots are within profile start and end time (end time/start time may get changed)
						if(voSlot.getIsActiveIsNotNull() && voSlot.getIsActive())
						{
							if(voSlot.getStartTm() != null && profile.getStartTm() != null)
								if(voSlot.getStartTm().isLessThan(profile.getStartTm()))
									errors.add("Start Time of Slot ( " + voSlot.getStartTm().toString() +  " ) cannot be before Profile Start Time ( " + profile.getStartTm() + " )");
							
							if(voSlot.getStartTm() != null && profile.getEndTm() != null)
								if(voSlot.getStartTm().isGreaterThan(profile.getEndTm()))
									errors.add("Start Time of Slot ( " + voSlot.getStartTm().toString() +  " ) cannot exceed Profile End Time ( " + profile.getEndTm() + " )");
							
							if(profile.getEndTmIsNotNull())
							{	
								if(voSlot.getIsActiveIsNotNull() && voSlot.getIsActive())
								{
									Time endSlotTime = new Time();
									endSlotTime = (Time) voSlot.getStartTm().clone();
									endSlotTime.addMinutes(voSlot.getNumberSlotsReq() * voSlot.getDuration());
									if(endSlotTime.isGreaterThan(profile.getEndTm()))
										errors.add("End Time of Slots ( " + endSlotTime.toString() +  " ) cannot exceed Profile End Time ( " + profile.getEndTm() + " )");
								}
							}	
						}
					}
					
					//WDEV-10003
					if(countCabSlots > 0)
					{
						if (form.lyrDetails().tabDOS().isHeaderVisible())		//wdev-20074
						{
    						if(profile.getDirectoryOfServices() == null || profile.getDirectoryOfServices().size() == 0)
    							errors.add("Directory of Service must be selected as there are non-local slots present.");
						}
						
					}
					else	//wdev-20448
					{
						//wdev-20074
						if( form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().isVisible() && form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue() )
						{
							if( !profile.getDirectoryOfServicesIsNotNull() || profile.getDirectoryOfServices().size() == 0)
								errors.add("At least one Directory of Service must be selected ");
						}
						//--------
					}
				}
			}	
			else
			{
				if (profile.getProfileActivities() == null || profile.getProfileActivities().size() == 0)
					errors.add("Activities are mandatory");
				else
				{
					//count active there must be at least one
					int activeCount = 0;
					for( ProfileActivityVo voProfAct : profile.getProfileActivities())
					{
						if(voProfAct.getActivity() == null)
							errors.add("Activity is mandatory on the Activities Tab");
						
						if (voProfAct.getActivity() != null && (voProfAct.getIsActiveIsNotNull() && voProfAct.getIsActive()))
							activeCount++;	
					}
					if( activeCount == 0)
						errors.add("You must select one active Activity on the Activities Tab");
					
					//wdev-20448
					if( ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITH_SLOTS"))
					{
						if( isAllActivitiesTabSlotsInactiveOrMissing())
							errors.add("Slots are mandatory");
						if( isDuplicateActivitiesWithSlots())
							errors.add("Duplicate Activities not allowed.");
												
					}
					if( ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITHOUT_SLOTS"))
					{
						if( isDuplicateActivitiesWithoutSlots())
							errors.add("Duplicate Activities not allowed.");
					}
					//----end wdev-20448
				}
			}
		}
		else
		{
			if(profile.getListOwners() == null || profile.getListOwners().size() == 0)
				errors.add("At Least one record is mandatory on the List Owners Tab");
			
			
			//wdev-20233 WDEV-21874
			if( form.lyrDetails().tabGeneralDetails().cmbTheatreType().getVisible() && form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue() != null && !form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue().equals(TheatreType.EMERGENCY) && !form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue().equals(TheatreType.EMERGENCY_NON_TO))
			{
    			if(profile.getTheatreDetails() == null || profile.getTheatreDetails().size() == 0 || isAllTheatreProceduresInactive())	//wdev-20074
    				errors.add("At Least one record is mandatory on the Theatre Tab");
    			
    			if( isDuplicateTheatreProcedures())	//wdev-20074
    				errors.add("Duplicate Procedures not allowed.");
			}
			if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed") && !atLeastOneSlotIsActive(profile.getParentChildSlots()))//WDEV-13224
				errors.add("At least one Theatre Slot must be defined on Theatre Tab");
			
			for(TheatreDetailLiteVo voTheatre : profile.getTheatreDetails())
			{
				if(voTheatre.getProcedure() == null)
					errors.add("Procedure is mandatory on the Theatre Tab");
			}
			
			if(profile.getTheatreType() == null)
				errors.add("Theatre Session Type is mandatory");
		}

		Profile_Exc_DateVo voExclDate;
		if (profile != null)
		{
			if (profile.getExclusionDatesIsNotNull())
			{
				for (int i = 0; i < profile.getExclusionDates().size(); i++)
				{
					voExclDate = profile.getExclusionDates().get(i);

					// vo automatic validation will look after checking this
					// data
					if (voExclDate.getEndDate() == null || voExclDate.getStartDate() == null)
						continue;

					if (voExclDate.getEndDateIsNotNull() && voExclDate.getStartDateIsNotNull())
						if (voExclDate.getEndDate().isLessThan(voExclDate.getStartDate()))
							errors.add("Exclusion End Date MUST be after Start Date");

					if (!validDates(voExclDate, profile))
						errors.add("Exclusion Dates must be between profile start and end dates");;
				}
			}
			if (profile.getExclusionTimesIsNotNull())
			{
				for (int i = 0; i < profile.getExclusionTimes().size(); i++)
				{
					Profile_Exc_TimeVo voExclTime = profile.getExclusionTimes().get(i);

					// vo automatic validation will look after checking this
					// data
					if (voExclTime.getEndTime() == null || voExclTime.getStartTime() == null)
						continue;

					if (voExclTime.getEndTime().isLessThan(voExclTime.getStartTime()))
						errors.add("Exclusion End Time MUST be after Start Time");

					if (!validTimes(voExclTime, profile))
						errors.add("Exclusion Times must be between profile start and end times");;
				}
			}
		}

		if (profile.getEffFrmIsNotNull() && profile.getEffToIsNotNull())
		{
			if (profile.getEffTo().isLessThan(profile.getEffFrm()))
				errors.add("Profile 'End Date' cannot be before 'Week Starting'");
		}
		
		//WDEV-10444 - if we have previously generated sessions for this profile don't allow setting of to date before either of these dates
		if(profile.getEffToIsNotNull())
		{
			if(profile.getLastActualGenDateIsNotNull())
			{
				if(profile.getEffTo().isLessThan(profile.getLastActualGenDate()))
					errors.add("Profile 'End Date' cannot be before 'Last Actual Generated Date' (" + profile.getLastActualGenDate().toString() + ")");
			}
			else if(profile.getLastGenDateIsNotNull())
			{
				if(profile.getEffTo().isLessThan(profile.getLastGenDate()))
					errors.add("Profile 'End Date' cannot be before 'Last Generated Date' (" + profile.getLastGenDate().toString() + ")");			
			}
		}
		//wdev-20074
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow;
		if( form.lyrDetails().tabBookingRights().grdBookingRights().getRows().size() > 0 )
		{
			bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().get(0);
			AppRoleShortVo voAppRole = (AppRoleShortVo) bRow.getcolRole().getValue();
			
			for(int i = 1; i < form.lyrDetails().tabBookingRights().grdBookingRights().getRows().size();i++)
			{
				bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().get(i);
				AppRoleShortVo tempvoAppRole = (AppRoleShortVo) bRow.getcolRole().getValue();
				if( voAppRole != null && tempvoAppRole != null && voAppRole.equals(tempvoAppRole))
				{
					errors.add("Duplicate Role Rights not allowed.");
				}
			}
		}
		
		if( isDuplicateListOwners() == true )
		{
			errors.add("Duplicate List Owners not allowed.");
		}
		//--------------
		
		

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}
	//wdev-20448
	private boolean isDuplicateActivitiesWithSlots()
	{
		boolean isDuplicateActivities = false;
		boolean isAllInactive = true;
		
		if( form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().size() == 0)
			return isDuplicateActivities;
		
		grdActivitiesSlotsRow oRow = null;
		int m = 0;
		for( m = 0; m < form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().size(); m++)
		{
			
			oRow = form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().get(m);
			if( oRow.getColActive() == true)
			{
				isAllInactive = false;
				break;
			}
		}
		if( isAllInactive == true)
			return false;
		
		for (int i = 0; i < form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().size(); i++)
		{
			grdActivitiesSlotsRow oRow1 = form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().get(i);
			if( m != i && oRow1 != null &&  oRow.getValue() != null && oRow1.getValue() != null && oRow.getValue().getActivityIsNotNull() && oRow1.getValue().getActivityIsNotNull() && oRow.getValue().getActivity().equals(oRow1.getValue().getActivity()) && oRow1.getColActive())
				isDuplicateActivities = true;
		}
		
		return isDuplicateActivities;
	}
	//wdev-20448
	private boolean isDuplicateActivitiesWithoutSlots()
	{
		boolean isDuplicateActivities = false;
		boolean isAllInactive = true;
		
		
		if( form.lyrDetails().tabActivities().grdActivities().getRows().size() == 0)
			return isDuplicateActivities;
		
		grdActivitiesRow oRow = null;
		int m = 0;
		for( m = 0; m < form.lyrDetails().tabActivities().grdActivities().getRows().size(); m++)
		{
			
			oRow = form.lyrDetails().tabActivities().grdActivities().getRows().get(m);
			if( oRow.getcolActive() == true)
			{
				isAllInactive = false;
				break;
			}
		}
		
		if( isAllInactive == true )
			return false;
		
		for (int i = 0; i < form.lyrDetails().tabActivities().grdActivities().getRows().size(); i++)
		{
			grdActivitiesRow oRow1 = form.lyrDetails().tabActivities().grdActivities().getRows().get(i);
			if( m != i && oRow1 != null &&  oRow.getValue() != null && oRow1.getValue() != null && oRow.getValue().getActivityIsNotNull() && oRow1.getValue().getActivityIsNotNull() && oRow.getValue().getActivity().equals(oRow1.getValue().getActivity()) && oRow1.getcolActive())
				isDuplicateActivities = true;
		}
		
		return isDuplicateActivities;
	}
	private boolean isAllActivitiesTabSlotsInactiveOrMissing()
	{
		if( form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().size() == 0)
			return true;
		
		boolean isAllSlotsInactive = true;
		for(int i = 0;i < form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().size(); i++)
		{
			grdSlotsRow shRow = form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().get(i);
			if( shRow.getColActive() == true )
				isAllSlotsInactive = false;
		}
		
		return isAllSlotsInactive;
	}
	
	//wdev-20448
	private boolean isAllSlotsInactive(Profile_SlotGenericVoCollection  tempColl)
	{
		if( tempColl == null || tempColl.size() == 0)
			return false;
		boolean isAllProceduresInactive = true;
		for(int i = 0; i < tempColl.size(); i++)
		{
			Profile_SlotGenericVo tempVo = tempColl.get(i);
			if( tempVo != null &&  Boolean.TRUE.equals(tempVo.getIsActive()))
				isAllProceduresInactive = false;
		}
		
		return isAllProceduresInactive;
	}
	//wdev-20074 //WDEV-21641
	private boolean isDuplicateListOwners() 
	{
		if( form.lyrDetails().tabListOwners().grdListOwner().getRows().size() == 0)
			return false;
		
		for (int i = 0; i <form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			grdListOwnerRow row1 = form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i);
			HcpLiteVo hcp1 = row1.getColHcp()!=null && row1.getColHcp().getValue()!=null && row1.getColHcp().getValue() instanceof HcpLiteVo  ? (HcpLiteVo)row1.getColHcp().getValue(): null;
			for (int j = i+1; j < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); j++)
			{
				grdListOwnerRow row2 = form.lyrDetails().tabListOwners().grdListOwner().getRows().get(j);
				HcpLiteVo hcp2 = row2.getColHcp()!=null && row2.getColHcp().getValue()!=null && row2.getColHcp().getValue() instanceof HcpLiteVo  ? (HcpLiteVo)row2.getColHcp().getValue(): null;
				if( hcp1!=null && hcp2 != null && hcp1.equals(hcp2))
					return true;
			}
		}
		
		return false;
	}
	//wdev-20074
	private boolean isDuplicateTheatreProcedures()
	{
		if (ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
		{	
			if (form.lyrDetails().tabTheatre().grdTheatre().getRows().size() == 0)
				return false;
			
			for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); i++)
			{
				grdTheatreRow thRow1 = form.lyrDetails().tabTheatre().grdTheatre().getRows().get(i);
				ProcedureNameVo proc1 = thRow1.getValue() != null && thRow1.getValue().getProcedure() != null ? thRow1.getValue().getProcedure() : null;
				
				if (thRow1.getcolActive())
				{
					for (int j = i + 1; j < form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); j++)
					{
						grdTheatreRow thRow2 = form.lyrDetails().tabTheatre().grdTheatre().getRows().get(j);
						ProcedureNameVo proc2 = thRow2.getValue() != null && thRow2.getValue().getProcedure() != null ? thRow2.getValue().getProcedure() : null;
						
						if (proc1 != null && proc2 != null && proc1.equals(proc2) && thRow2.getcolActive())
							return true;
					}
				}
			}
		}
		else if (ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(SERVICE_PROCEDURES))
		{
			if (form.lyrDetails().tabTheatre().grdTheatreService().getRows().size() == 0)
				return false;
			
			for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatreService().getRows().size(); i++)
			{
				grdTheatreServiceRow thRow1 = form.lyrDetails().tabTheatre().grdTheatreService().getRows().get(i);
				ProcedureNameVo proc1 = thRow1.getValue() != null && thRow1.getValue().getProcedure() != null ? thRow1.getValue().getProcedure() : null;
				
				if (thRow1.getcolActive())
				{
					for (int j = i + 1; j < form.lyrDetails().tabTheatre().grdTheatreService().getRows().size(); j++)
					{
						grdTheatreServiceRow thRow2 = form.lyrDetails().tabTheatre().grdTheatreService().getRows().get(j);
						ProcedureNameVo proc2 = thRow2.getValue() != null && thRow2.getValue().getProcedure() != null ? thRow2.getValue().getProcedure() : null;
						
						if (proc1 != null && proc2 != null && proc1.equals(proc2) && thRow2.getcolActive())
							return true;
					}
				}
			}
		}

		return false;
	}
	
	//wdev-20074
	private boolean isAllTheatreProceduresInactive()
	{
		if (ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
		{
			for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); i++)
			{
				grdTheatreRow thRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().get(i);
				
				if (thRow.getcolActive() == true)
					return false;
			}
		}
		else if (ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(SERVICE_PROCEDURES))
		{
			for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatreService().getRows().size(); i++)
			{
				grdTheatreServiceRow thRow = form.lyrDetails().tabTheatre().grdTheatreService().getRows().get(i);
				if (thRow.getcolActive() == true)
					return false;
			}
		}

		return true ;
	}

	//WDEV-13224
	private boolean atLeastOneSlotIsActive(ProfileParentChildSlotVoCollection parentChildSlots) 
	{
		if(parentChildSlots == null || parentChildSlots.size() == 0)
			return false;
		
		for(ProfileParentChildSlotVo slot : parentChildSlots)
		{
			if(slot == null)
				continue;
			
			if(slot.getIsActive())
				return true;
		}
		
		return false;
	}

	private boolean isDirectoryOfServiceLocationEqualProfileLocation(Sch_ProfileGenericVo profile, SlotDirectoryOfServiceVo voSlotDirService)
	{
		if (profile == null || voSlotDirService == null)
			return true;

		if (profile.getSchLocation() != null && voSlotDirService.getDirectoryOfService() != null)
		{
			if (profile.getSchLocation().equals(voSlotDirService.getDirectoryOfService().getLocation()))
			{
				return true;
			} //WDEV-21898
			else return domain.onTheSameHospital(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue(), voSlotDirService.getDirectoryOfService().getLocation());
		}
			
		return false;
	}

	private void open()
	{
		this.clearScreen();
		searchProfiles(false);
		form.grdProfiles().setValue(form.getLocalContext().getCurrentProfileIsNotNull() ? (ProfileShortVo) form.getLocalContext().getCurrentProfile() : null);
		form.getGlobalContext().Scheduling.setProfile(form.grdProfiles().getValue());
		form.lyrDetails().tabSlots().chkSlotsActiveOnly().setValue(true);
		//wdev-20074
		if (form.getLocalContext().getCurrentProfile() != null && form.getLocalContext().getCurrentProfile().getID_Sch_Profile() != null)
		{
    		Sch_ProfileGenericVo voProfile = domain.getGenericProfileDetails(form.getLocalContext().getCurrentProfile());
    		form.getLocalContext().setCurrentProfile(voProfile);
		}
		//---------
		this.populateScreenFromData(form.getLocalContext().getCurrentProfile(), listTemplates());
		// Reset to General Details tab
		form.lyrDetails().showtabGeneralDetails(); //WDEV-18821
		form.setMode(FormMode.VIEW);	
	}

	private ProfileTemplateVoCollection populateTemplatesFromScreen()
	{
		ProfileTemplateVoCollection voCollTemplates = new ProfileTemplateVoCollection();
		for (int i = 0; i < form.lyrDetails().tabTemplates().grdTemplates().getRows().size(); i++)
		{
			ProfileTemplateVo voProfileTemplate = form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i).getValue();
			voProfileTemplate.setProfile(form.getLocalContext().getCurrentProfile());
			voProfileTemplate.setTemplate(form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i).getColTemplate());
			voCollTemplates.add(voProfileTemplate);
		}
		return voCollTemplates.size() > 0 ? voCollTemplates : null;
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		
		open();	 //WDEV-18821
	}
	//wdev-20891
	private void removeListOwnerFromRespSlot( Profile_ListOwnerVo record)
	{
		if( record == null)
			return;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{

		form.getLocalContext().setLastMenuItem(new Integer(menuItemID));
		// For Add, put null in the global context before loading the profile
		// slots dialog
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.ProfilesMenu.ADD :
				addRecord();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfilesMenu.UPDATE :
				updateRecord();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfilesMenu.CLONE_PROFILE :
				cloneRecord();
			break;

			// list owners
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.ADD :
				addListOwner();
				updateControlState();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.EDIT :
				form.lyrDetails().tabListOwners().grdListOwner().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.REMOVE :
				
				//WDEV-20893
				form.getLocalContext().setlistOwnerRemoveConfirm(engine.showMessage("List Owner will be removed from both List Owners/Attending Clinician and Slots.", "Confirm remove", MessageButtons.YESNO, MessageIcon.WARNING));
				
			break;

			// slots general
			case GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.ADD :
				addSlotGeneral();
				
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.EDIT :
				editSlotGeneral();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.REMOVE :
			
				//Inactivate SelectedItem
				if(form.lyrDetails().tabSlots().grdSlotsGeneral().getValue() != null)
				{
					form.lyrDetails().tabSlots().grdSlotsGeneral().getValue().setIsActive(false);
					form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow().setcolSlotsActive(false);
					if(form.getGlobalContext().Scheduling.getProfileSlotGenericIsNotNull())
						form.getGlobalContext().Scheduling.getProfileSlotGeneric().setIsActive(false);
				}
				
				//WDEV-15319
				if (form.lyrDetails().tabSlots().grdSlotsGeneral().getValue() != null && Boolean.TRUE.equals(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue()))
				{
					onChkSlotsActiveOnlyValueChanged();
				}
				else
				{
					updateControlState();
				}
			break;

			// booking rights
			case GenForm.ContextMenus.SchedulingNamespace.ProfileBookingRights.ADD :
				addBookingRight();
				updateControlState();//WDEV-20512
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileBookingRights.EDIT :
				form.lyrDetails().tabBookingRights().grdBookingRights().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileBookingRights.REMOVE :
				form.lyrDetails().tabBookingRights().grdBookingRights().removeSelectedRow();
				updateControlState();
			break;

			// exclusion dates
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionDates.ADD :
				addExclusionDate();
				updateControlState();//WDEV-22337
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionDates.EDIT :
				form.lyrDetails().tabExclusion().grdExclDates().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionDates.REMOVE :
				form.lyrDetails().tabExclusion().grdExclDates().removeSelectedRow();
				updateControlState();
			break;

			// exclusion times
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionTimes.ADD :
				addExclusionTime();
				updateControlState();//WDEV-22337
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionTimes.EDIT :
				form.lyrDetails().tabExclusion().grdExclPeriods().getSelectedRow().setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileExclusionTimes.REMOVE :
				form.lyrDetails().tabExclusion().grdExclPeriods().removeSelectedRow();
				updateControlState();
			break;

			// templates
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTemplates.ADDTEMPLATE :
				addTemplate();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTemplates.REMOVETEMPLATE :
				removeTemplate();
				updateControlState();
			break;

			// theatre
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatre.ADD :
				addTheatre();
				updateControlState();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatre.REMOVE :
				removeTheatre();
			break;
			
			//WDEV-11777
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreTCITimes.ADD :
				addTheatreTCI();
				updateControlState();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreTCITimes.REMOVE :
				removeTheatreTCI();
			break;
			
			
			//WDEV-12918
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreSlots.ADD :
				addTheatreSlot();
				updateControlState();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreSlots.REMOVE :
				removeTheatreSlot();
			break;
			
			//activity
			case GenForm.ContextMenus.SchedulingNamespace.ProfileActivity.ADD :
				addActivity();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.ProfileActivity.REMOVE :
				removeActivity();
				updateControlState();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FlexibleProfileSlot.ADD:
				addFlexibleSlot();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.FlexibleProfileSlot.EDIT:
				editFlexibleSlot();
			break;
				
			case GenForm.ContextMenus.SchedulingNamespace.FlexibleProfileSlot.INACTIVATE:
				
				if(form.lyrDetails().tabActivitiesWithSlots().grdSlots().getValue() != null)
				{
					form.lyrDetails().tabActivitiesWithSlots().grdSlots().getValue().setIsActive(false);
					form.lyrDetails().tabActivitiesWithSlots().grdSlots().getSelectedRow().setColActive(false);
				}
				
				updateControlState();
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ProfileServiceFunctions.SELECT_ALL:		//wdev-20074
				selectAllServiceFunctions();
				loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(), false);	//wdev-20262
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ProfileServiceFunctions.DESELECT_ALL:		//wdev-20074
				deselectAllServiceFunctions();
				loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(), false);	//wdev-20262
				
			break;
			
			
			
			case GenForm.ContextMenus.SchedulingNamespace.ProfileDOS.ADD_SPECIALTY_DOS:
				openDosSpecialtyDialog();
				
			break;
		}
	}
	private void openDosSpecialtyDialog()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetails().tabGeneralDetails().cmbHospital().getValue() == null)
			errors.add("Hospital on General Details Tab is mandatory");

		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() == null)
			errors.add("Service on General Details Tab is mandatory");

		String[] arrErrors = errors.toArray(new String[0]);
		if (arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		engine.open(form.getForms().Scheduling.DosSpecialtySelection,new Object[] {form.lyrDetails().tabGeneralDetails().cmbHospital().getValue(), form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue()});
	}

	//wdev-20074
	private void removeTheatreProcedures()
	{
		if( ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
		{
			if( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) )
			{
				if(form.lyrDetails().tabListOwners().grdListOwner().getRows().size() == 0)
				{
					form.lyrDetails().tabTheatre().grdTheatre().getRows().clear();
					return;
				}
					
				ProcedureNameVoCollection voCollProcedure = null;
								
				HcpRefVoCollection voCollHcp = new HcpRefVoCollection();
				for(int i=0;i<form.lyrDetails().tabListOwners().grdListOwner().getRows().size();i++)
					voCollHcp.add ((HcpRefVo) form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i).getColHcp().getValue());

				if (voCollHcp.size() > 0)
					voCollProcedure = domain.listProcedureByHcpAndNameLite(voCollHcp, "%%%");
				else
					return;
				
				List<Integer> listProcIndex = new ArrayList<Integer>();
				
				if( voCollProcedure != null && voCollProcedure.size() > 0)
				{
					GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow tRow;
					for( int m = 0; m < form.lyrDetails().tabTheatre().grdTheatre().getRows().size();m++)
					{
						tRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().get(m);
						ProcedureNameVo tempVo = (ProcedureNameVo) tRow.getcolProcedure().getValue();
						if( tempVo != null )
						{
							if( !voCollProcedure.contains(tempVo))
							{
								
								
								listProcIndex.add(m);
								
							}
						}
					}
					for( Integer index:listProcIndex)
					{
						form.lyrDetails().tabTheatre().grdTheatre().getRows().remove(index);
					}
					
					
				}
					
			}
			
		}
		
	}
	
	//-------
	//wdev-20074
	private void selectAllServiceFunctions()
	{
		
		for(int i = 0; i < form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size();i++)
		{
			grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().get(i);
			row.setColumnSelect(true);
		}
		
	}
	private void deselectAllServiceFunctions()
	{
		
		for(int i = 0; i < form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size();i++)
		{
			grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().get(i);
			row.setColumnSelect(false);
		}
		
	}
	//--------------------


	private void editFlexibleSlot()
	{
		form.getGlobalContext().Scheduling.setListOwnerCollection(getSelectedListOwnersColl());
		form.getGlobalContext().Scheduling.setOutpatientFlexibleProfileSlot(form.lyrDetails().tabActivitiesWithSlots().grdSlots().getValue());
		openFlexibleSlotsDialog();
	}

	private void addFlexibleSlot()
	{
		form.getGlobalContext().Scheduling.setOutpatientFlexibleProfileSlot(null);
		form.getGlobalContext().Scheduling.setProfileStartTime(form.lyrDetails().tabProfileDetails().timStartTime().getValue());
		form.getGlobalContext().Scheduling.setProfileEndTime(form.lyrDetails().tabProfileDetails().timEndTime().getValue());
		form.getGlobalContext().Scheduling.setListOwnerCollection(getSelectedListOwnersColl());
		
		openFlexibleSlotsDialog();
	}

	private void openFlexibleSlotsDialog()
	{
			List<String> errors = new ArrayList<String>();

			if (form.lyrDetails().tabProfileDetails().timStartTime().getValue() == null)
				errors.add("Start Time on Profile Details Tab is mandatory");

			if (form.lyrDetails().tabProfileDetails().timEndTime().getValue() == null)
				errors.add("End Time on Profile Details Tab is mandatory");

			String[] arrErrors = errors.toArray(new String[0]);
			
			if (arrErrors.length > 0)
			{
				engine.showErrors(arrErrors);
				return;
			}

			form.getGlobalContext().Scheduling.setProfileStartTime(form.lyrDetails().tabProfileDetails().timStartTime().getValue());
			form.getGlobalContext().Scheduling.setProfileEndTime(form.lyrDetails().tabProfileDetails().timEndTime().getValue());

			engine.open(form.getForms().Scheduling.FlexibleProfileSlot);
	}

	//WDEV-12918
	private void removeTheatreSlot()
	{
		form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().removeSelectedRow();
		updateControlState();
	}
	
	//WDEV-12918
	private void addTheatreSlot()
	{
		form.getGlobalContext().Scheduling.setProfileParentChildSlot(new ProfileParentChildSlotVo());
		openTheatreSlotsDialog();
	}

	private void openTheatreSlotsDialog()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetails().tabProfileDetails().timStartTime().getValue() == null)
			errors.add("Start Time on Profile Details Tab is mandatory");

		if (form.lyrDetails().tabProfileDetails().timEndTime().getValue() == null)
			errors.add("End Time on Profile Details Tab is mandatory");

		String[] arrErrors = errors.toArray(new String[0]);
		if (arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		form.getGlobalContext().Scheduling.setProfileStartTime(form.lyrDetails().tabProfileDetails().timStartTime().getValue());
		form.getGlobalContext().Scheduling.setProfileEndTime(form.lyrDetails().tabProfileDetails().timEndTime().getValue());

		engine.open(form.getForms().Scheduling.ProfileTheatreSlotDialog);
	}

	//WDEV-11777
	private void removeTheatreTCI()
	{
		form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().removeSelectedRow();
		updateControlState();
	}

	//WDEV-11777
	private void addTheatreTCI()
	{
		grdTCITimesRow tRow = form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().newRow(true);
		tRow.setValue(new ProfileTheatreTCISlotVo());
		tRow.setReadOnly(false);
	}

	private void removeActivity()
	{
		if (form.lyrDetails().tabActivities().isHeaderVisible())
		{
			form.lyrDetails().tabActivities().grdActivities().removeSelectedRow();
		}
		else if (form.lyrDetails().tabActivitiesWithSlots().isHeaderVisible())
		{
			form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().removeSelectedRow();
		}
			
		updateControlState();
	}

	private void addActivity()
	{
		if(form.getLocalContext().getProfileActivities() == null || form.getLocalContext().getProfileActivities().size() == 0)
		{
			engine.showErrors(new String[] {"No Available Activities"});
			return;
		}
		
		if (form.lyrDetails().tabActivities().isHeaderVisible())
		{
			GenForm.lyrDetailsLayer.tabActivitiesContainer.grdActivitiesRow aRow = form.lyrDetails().tabActivities().grdActivities().getRows().newRow(true);

			if (form.getLocalContext().getProfileActivities() != null)
			{
				for (ActivityLiteVo voActivity : form.getLocalContext().getProfileActivities())
					aRow.getcolActivity().newRow(voActivity, voActivity.getName());

				if (form.getLocalContext().getProfileActivities().size() == 1)
					aRow.getcolActivity().setValue(form.getLocalContext().getProfileActivities().get(0));
			}

			aRow.setcolActive(true);
			aRow.setValue(new ProfileActivityVo());
			aRow.setReadOnly(false);
		}
		else if (form.lyrDetails().tabActivitiesWithSlots().isHeaderVisible())
		{
			grdActivitiesSlotsRow bRow = form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().newRow(true);

			if (form.getLocalContext().getProfileActivities() != null)
			{
				for (ActivityLiteVo voActivity : form.getLocalContext().getProfileActivities())
					bRow.getColActivity().newRow(voActivity, voActivity.getName());

				if (form.getLocalContext().getProfileActivities().size() == 1)
					bRow.getColActivity().setValue(form.getLocalContext().getProfileActivities().get(0));
			}

			bRow.setColActive(true);
			bRow.setValue(new ProfileActivityVo());
			bRow.setReadOnly(false);

		}
		
		updateControlState();
	}

	private void removeTheatre()
	{
		if(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(SERVICE_PROCEDURES))
			form.lyrDetails().tabTheatre().grdTheatreService().removeSelectedRow();
		
		else if(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
			form.lyrDetails().tabTheatre().grdTheatre().removeSelectedRow();
			
		updateControlState();
	}

	private void addTheatre()
	{
		if(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(SERVICE_PROCEDURES))
		{
			ServiceShortVo service = form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue();
			if(service == null)
			{
				engine.showErrors(new String[] {"Service is mandatory."});
				return;
			}
			
			engine.open(form.getForms().Admin.ProcedureSpecialtyHotlist, new Object[] {service.getSpecialty(),Boolean.FALSE, Boolean.TRUE});	//wdev-20233 WDEV-21233 //WDEV-22034
			
		}
		else if(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES))
		{
			GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreRow tRow = form.lyrDetails().tabTheatre().grdTheatre().getRows().newRow(true);
			tRow.setValue(new TheatreDetailLiteVo());
			//WDEV-9907
			tRow.setcolActive(true);
			tRow.setReadOnly(false);
		}
	}

	private void addExclusionTime()
	{
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclPeriodsRow etRow = form.lyrDetails().tabExclusion().grdExclPeriods().getRows().newRow(true);
		etRow.setValue(new Profile_Exc_TimeVo());
	}

	private void addExclusionDate()
	{
		GenForm.lyrDetailsLayer.tabExclusionContainer.grdExclDatesRow edRow = form.lyrDetails().tabExclusion().grdExclDates().getRows().newRow(true);
		edRow.setValue(new Profile_Exc_DateVo());
	}

	private void addBookingRight()
	{
		GenForm.lyrDetailsLayer.tabBookingRightsContainer.grdBookingRightsRow bRow = form.lyrDetails().tabBookingRights().grdBookingRights().getRows().newRow(true);
		// Setup the contents of the combos
		loadRolesUsersIntoGridColumnCombo(bRow);
		bRow.setValue(new Profile_BookRightsVo());
		bRow.setReadOnly(false);
	}

	private void editSlotGeneral()
	{
		form.getGlobalContext().Scheduling.setProfileSlotGeneric((Profile_SlotGenericVo)form.lyrDetails().tabSlots().grdSlotsGeneral().getValue());
		populateServiceFunctionsGlobalContext();	//wdev-20074
		openSlotsDialog();
	}

	private void addSlotGeneral()
	{
		form.getGlobalContext().Scheduling.setProfileSlotGeneric(new Profile_SlotGenericVo());
		
		populateServiceFunctionsGlobalContext();	//wdev-20074
		openSlotsDialog();
	}
	//wdev-20074
	//set  ServiceFunctions Global Context  with a collection of active ServiceFunction from  "Clinic Type / Function" grid in general details tab
	private void populateServiceFunctionsGlobalContext()
	{
		if(  GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
			if( form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() != null )	//wdev-20262
			{
				
    			ServiceFunctionLiteVoCollection voCollServiceFunctions = domain.listServiceFunctionByService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
    			ims.core.vo.lookups.ServiceFunctionCollection temColl = new ServiceFunctionCollection();
    			for( int h = 0; h < form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size();h++)
    			{
    				grdServiceFunctionsRow row = form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().get(h);
    				if( row.getColumnSelect() )
    				{
    					if( isFunctionInCollection(voCollServiceFunctions,row.getValue()) == true)	
    						temColl.add(row.getValue());		//take only active function from  - "Clinic Type / Function" grid in general details tab
    				}
    			}
    			if( temColl != null && temColl.size() > 0)
    				form.getGlobalContext().Scheduling.setServiceFunctions(temColl);
    			else
    				form.getGlobalContext().Scheduling.setServiceFunctions(null);
			
			}
		}
		else
			form.getGlobalContext().Scheduling.setServiceFunctions(null);	
	}
	private boolean isFunctionInCollection(ServiceFunctionLiteVoCollection voCollServiceFunctions, ims.core.vo.lookups.ServiceFunction tempLkp)
	{
		if( voCollServiceFunctions == null || voCollServiceFunctions.size() == 0 || tempLkp == null)
			return false;
		
		for(ServiceFunctionLiteVo tempVo : voCollServiceFunctions)
		{
			if( tempVo != null && tempVo.getFunctionIsNotNull())
			{
				if( tempVo.getFunction().equals(tempLkp))
					return true;
			}
		}
		
		return false;
	}
	
	
	//----------

	private void openSlotsDialog()
	{
		List<String> errors = new ArrayList<String>();

		if (form.lyrDetails().tabProfileDetails().timStartTime().getValue() == null)
			errors.add("Start Time on Profile Details Tab is mandatory");

		if (form.lyrDetails().tabProfileDetails().timEndTime().getValue() == null)
			errors.add("End Time on Profile Details Tab is mandatory");

		if (form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() == null)
			errors.add("Service on General Details Tab is mandatory");

		String[] arrErrors = errors.toArray(new String[0]);
		if (arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return;
		}

		form.getGlobalContext().Scheduling.setProfileService(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue());
		form.getGlobalContext().Scheduling.setProfileStartTime(form.lyrDetails().tabProfileDetails().timStartTime().getValue());
		form.getGlobalContext().Scheduling.setProfileEndTime(form.lyrDetails().tabProfileDetails().timEndTime().getValue());
		form.getGlobalContext().Scheduling.setListOwnerCollection(getSelectedListOwnersColl());
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(getSelectedDosColl());

		
		engine.open(form.getForms().Scheduling.ProfilesSlotGeneric,new Object[] {form.lyrDetails().tabGeneralDetails().cmbHospital().getValue(),(GroupFlexibleProfileEnumeration.rdoYes.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()) ? Boolean.TRUE:Boolean.FALSE), form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue()});	//wdev-20188
	}

	private void addListOwner()
	{
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow oRow = form.lyrDetails().tabListOwners().grdListOwner().getRows().newRow(true);
		oRow.setValue(new Profile_ListOwnerVo());

		oRow.setReadOnly(false);
	}

	private void removeTemplate()
	{
		if (form.lyrDetails().tabTemplates().grdTemplates().getSelectedRowIndex() == -1)
		{
			engine.showMessage("Please select a row to delete");
			return;
		}

		form.lyrDetails().tabTemplates().grdTemplates().removeSelectedRow();
	}

	private void addTemplate()
	{
		form.getGlobalContext().Core.setReportTemplateRef(null);
		form.getGlobalContext().Core.setTemplate(null);
		engine.open(form.getForms().Core.ReportTemplate);
	}

	private void updateRecord()
	{
		
		form.getLocalContext().setprofileHasSessions(form.grdProfiles().getValue() != null && form.grdProfiles().getValue().getLastGenDate() != null);//WDEV-21906 WDEV-22294
		form.setMode(FormMode.EDIT);
		
		//form.lyrDetails().tabGeneralDetails().chkProfileActive().setEnabled(true);

		/*if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))		//wdev-20074
		{
			// Load the dos not selected
			ServiceShortVo voService = form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue();
			if (voService != null)
				loadDos(voService, false);
		}*/
		if (form.getLocalContext().getCurrentProfileIsNotNull() && form.getLocalContext().getCurrentProfile().getCaseNoteFolderLocation() != null && !Boolean.TRUE.equals(form.getLocalContext().getCurrentProfile().getCaseNoteFolderNotRequired())) //WDEV-19631
		{
			if (!Boolean.TRUE.equals(form.getLocalContext().getCurrentProfile().getCaseNoteFolderLocation().getCaseNoteFolderLocation()))
			{
				form.getLocalContext().getCurrentProfile().setCaseNoteFolderLocation(null);
				//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setValue(null);	//wdev-20074
				form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(null);		//wdev-20074
			}

		}
	}

	private void addRecord()
	{
		form.setMode(FormMode.EDIT);
		form.getGlobalContext().Scheduling.setProfile(null);
		//form.lyrDetails().tabGeneralDetails().chkProfileActive().setEnabled(true);
		form.getLocalContext().setCurrentProfile(new Sch_ProfileGenericVo());
		
		this.clearScreen();
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setValue(true);
		form.grdProfiles().setValue(null);
		form.getLocalContext().setprofileHasSessions(Boolean.FALSE);
		form.lyrDetails().showtabGeneralDetails();
		//WDEV-18369
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(ConsultationMediaType.FACETOFACE);
		
		form.lyrDetails().tabGeneralDetails().GroupProfileType().setValue(GroupProfileTypeEnumeration.rdoOutpatient);	//wdev-20074
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoNo);	//wdev-20074
		
		radioButtonGroupProfileTypeValueChanged();
		updateControlState();
	}

	private void cloneRecord()
	{
		
		form.grdProfiles().setValue(null);
		form.getLocalContext().setprofileHasSessions(Boolean.FALSE);
	
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setValue(false);			//wdev-20051
		form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().setValue(false);	//wdev-20051
		form.setMode(FormMode.EDIT);
		
		form.getLocalContext().getCurrentProfile().clearIDAndVersion();
		if (form.getLocalContext().getCurrentProfile().getProfileSlotsIsNotNull() && form.getLocalContext().getCurrentProfile().getProfileSlots().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getProfileSlots().size(); i++)
			{
				Profile_SlotGenericVo profileSlot = form.getLocalContext().getCurrentProfile().getProfileSlots().get(i);
				profileSlot.clearIDAndVersion();
				
				//WDEV-11701
				if(profileSlot.getDirectoryOfServiceIsNotNull())
				{
					for(SlotDirectoryOfServiceVo voSlotDos : profileSlot.getDirectoryOfService())
						voSlotDos.clearIDAndVersion();
				}
			}
		}

		// WDEV-12029
		// When cloning a profile load DoS not selected to allow user to associate more than
		// the DoS associated with initial profile
		if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			ServiceShortVo voService = form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue();
			if (voService != null)
				loadDos(voService, true);
		}

		if (form.getLocalContext().getCurrentProfile().getBookingRightsIsNotNull() && form.getLocalContext().getCurrentProfile().getBookingRights().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getBookingRights().size(); i++)
			{
				Profile_BookRightsVo bookingRight = form.getLocalContext().getCurrentProfile().getBookingRights().get(i);
				bookingRight.clearIDAndVersion();
			}
		}
		if (form.getLocalContext().getCurrentProfile().getListOwnersIsNotNull() && form.getLocalContext().getCurrentProfile().getListOwners().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getListOwners().size(); i++)
			{
				Profile_ListOwnerVo listOwners = form.getLocalContext().getCurrentProfile().getListOwners().get(i);
				listOwners.clearIDAndVersion();
			}
		}
		if (form.getLocalContext().getCurrentProfile().getExclusionDatesIsNotNull() && form.getLocalContext().getCurrentProfile().getExclusionDates().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getExclusionDates().size(); i++)
			{
				Profile_Exc_DateVo profile_Exc_DateVo = form.getLocalContext().getCurrentProfile().getExclusionDates().get(i);
				profile_Exc_DateVo.clearIDAndVersion();
			}
		}
		if (form.getLocalContext().getCurrentProfile().getExclusionTimesIsNotNull() && form.getLocalContext().getCurrentProfile().getExclusionTimes().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getExclusionTimes().size(); i++)
			{
				Profile_Exc_TimeVo profile_Exc_TimeVo = form.getLocalContext().getCurrentProfile().getExclusionTimes().get(i);
				profile_Exc_TimeVo.clearIDAndVersion();
			}
		}
		//WDEV-7443
		if (form.getLocalContext().getCurrentProfile().getTheatreDetailsIsNotNull() && form.getLocalContext().getCurrentProfile().getTheatreDetails().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getTheatreDetails().size(); i++)
			{
				TheatreDetailLiteVo voTheatreDetail = form.getLocalContext().getCurrentProfile().getTheatreDetails().get(i);
				voTheatreDetail.clearIDAndVersion();
			}
		}
		
		//WDEV-11777
		if (form.getLocalContext().getCurrentProfile().getProfileTheatreSlotsIsNotNull() && form.getLocalContext().getCurrentProfile().getProfileTheatreSlots().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getProfileTheatreSlots().size(); i++)
			{
				ProfileTheatreTCISlotVo voTheatreSlot = form.getLocalContext().getCurrentProfile().getProfileTheatreSlots().get(i);
				voTheatreSlot.clearIDAndVersion();
			}
		}
		
		if (form.getLocalContext().getCurrentProfile().getParentChildSlotsIsNotNull() && form.getLocalContext().getCurrentProfile().getParentChildSlots().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getParentChildSlots().size(); i++)
			{
				ProfileParentChildSlotVo voParentChildSlot = form.getLocalContext().getCurrentProfile().getParentChildSlots().get(i);
				voParentChildSlot.clearIDAndVersion();
			}
		}
		
		//WDEV-11701
		if (form.getLocalContext().getCurrentProfile().getProfileActivitiesIsNotNull() && form.getLocalContext().getCurrentProfile().getProfileActivities().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getCurrentProfile().getProfileActivities().size(); i++)
			{
				ProfileActivityVo voProfileActivity = form.getLocalContext().getCurrentProfile().getProfileActivities().get(i);
				voProfileActivity.clearIDAndVersion();
			}
		}
		
		//WDEV-8388
		form.getLocalContext().getCurrentProfile().setLastGenDate(null);
		form.getLocalContext().getCurrentProfile().setLastActualGenDate(null);
		
		form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(true);
	}

	private DirectoryOfServiceVoCollection getSelectedDosColl()
	{
		if (form.lyrDetails().tabDOS().grdDOS().getRows().size() == 0)
			return null;

		DirectoryOfServiceVoCollection voCollDirServices = new DirectoryOfServiceVoCollection();
		GenForm.lyrDetailsLayer.tabDOSContainer.grdDOSRow dRow = null;
		for (int i = 0; i < form.lyrDetails().tabDOS().grdDOS().getRows().size(); i++)
		{
			dRow = form.lyrDetails().tabDOS().grdDOS().getRows().get(i);
			if (dRow.getColSelected() == true)
				voCollDirServices.add(dRow.getValue());
		}

		return voCollDirServices;
	}

	private Profile_ListOwnerVoCollection getSelectedListOwnersColl()
	{
		if (form.lyrDetails().tabListOwners().grdListOwner().getRows().size() == 0)
			return null;

		Profile_ListOwnerVoCollection voColl = new Profile_ListOwnerVoCollection();
		GenForm.lyrDetailsLayer.tabListOwnersContainer.grdListOwnerRow row = null;
		for (int i = 0; i < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			row = form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i);
			Profile_ListOwnerVo vo = row.getValue();
			vo.setHCP((HcpLiteVo) row.getColHcp().getValue());
			voColl.add(vo);
		}

		return voColl;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Admin.LocationSelect) && result.equals(DialogResult.OK)) //WDEV-19518
		{
			if (form.getGlobalContext().Admin.getProfileLocation() != null)
			{	
				setLocation(form.getGlobalContext().Admin.getProfileLocation());
			}
			else if (form.getGlobalContext().Admin.getProfileCaseNoteFoldersLocation() != null)
			{	
				setCaseNoteFolderLocation(form.getGlobalContext().Admin.getProfileCaseNoteFoldersLocation(), false);
			}
			cmbSpecialityValueChanged();	//wdev-20074
		}	
		else if (formName.equals(form.getForms().Scheduling.ProfilesSlotGeneric) && (result.equals(DialogResult.OK)))
		{
			Profile_SlotGenericVo vo = form.getGlobalContext().Scheduling.getProfileSlotGeneric();
			int lastMenuItemId = form.getLocalContext().getLastMenuItem().intValue();
			if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.ADD)
			{
				GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().newRow();
				populateSlotsRow(row, vo, true); //WDEV-12039
	
				//WDEV-15319
				if (Boolean.TRUE.equals(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue()) && Boolean.FALSE.equals(vo.getIsActive()))
				{
					onChkSlotsActiveOnlyValueChanged();
				}
				else
				{
					updateControlState();
				}
			}
			else if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.ProfileSlotsGeneral.EDIT)
			{
				int idx = form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRowIndex();
				GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(idx);
				populateSlotsRow(row, vo, true); //WDEV-12039
				
				//WDEV-15319
				if (Boolean.TRUE.equals(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue()) && Boolean.FALSE.equals(vo.getIsActive()))
				{
					onChkSlotsActiveOnlyValueChanged();
				}
				else
				{
					updateControlState();
				}
			}
		}
		else if (formName.equals(form.getForms().Core.ReportTemplate) && result.equals(DialogResult.OK))
		{
			addTemplateRow();
		}
		else if (formName.equals(form.getForms().Scheduling.ProfileTheatreSlotDialog) && (result.equals(DialogResult.OK)))
		{
			ProfileParentChildSlotVo vo = form.getGlobalContext().Scheduling.getProfileParentChildSlot();
			int lastMenuItemId = form.getLocalContext().getLastMenuItem().intValue();
			if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.ProfileTheatreSlots.ADD)
			{
				if(isOverlapingOfTime(vo) == true)	//wdev-20233
				{
					engine.showMessage("Overlapping of time is not allowed!");
					return;
				}
				grdParentChildSlotsRow row = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().newRow();
				populateParentChilSlotsRow(row, vo);
				row.setSelectable(true);
				updateControlState();
			}
		}
		else if (formName.equals(form.getForms().Admin.ProcedureSpecialtyHotlist))
		{
			if(result.equals(DialogResult.OK))
			{
				addSelectedProcedures();
			}
			
			form.getGlobalContext().Clinical.setSelectedProcedures(null);
		}
		else if (formName.equals(form.getForms().Scheduling.FlexibleProfileSlot) && result.equals(DialogResult.OK))
		{

			ProfileParentChildSlotVo vo = form.getGlobalContext().Scheduling.getOutpatientFlexibleProfileSlot();

			if (vo == null)
				return;
			
			int lastMenuItemId = form.getLocalContext().getLastMenuItem().intValue();
			
			if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.FlexibleProfileSlot.ADD)		
			{
				//add a new row
				grdSlotsRow row = form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().newRow();
				updateRowForOutpatientFlexibleSlot(vo, row);
				
				form.lyrDetails().tabActivitiesWithSlots().grdSlots().setValue(vo);
				
			}
			else if (lastMenuItemId == GenForm.ContextMenus.SchedulingNamespace.FlexibleProfileSlot.EDIT)
			{
				//get selected row
				grdSlotsRow row = form.lyrDetails().tabActivitiesWithSlots().grdSlots().getSelectedRow();
				updateRowForOutpatientFlexibleSlot(vo, row);
			}
			
			updateControlState();
		}
		else if (formName.equals(form.getForms().Scheduling.DosSpecialtySelection) && result.equals(DialogResult.OK))
		{
			DirectoryOfServiceVoCollection dosCollToAdd = form.getGlobalContext().Scheduling.getDirectoryofServicesCollection();
			
			for (int i = 0; i < dosCollToAdd.size(); i++)
			{
				if (dosCollToAdd.get(i) == null)
					continue;
				
				if (dosAlreadyInList(dosCollToAdd.get(i)))
					continue;
				
				grdDOSRow row = form.lyrDetails().tabDOS().grdDOS().getRows().newRow();
				
				row.setValue(dosCollToAdd.get(i));
				row.setcolDosId(dosCollToAdd.get(i).getDoSId());
				row.setcolDosName(dosCollToAdd.get(i).getDoSName());
				row.setColSelected(true);
			}
			
		}
			
	}
	private boolean dosAlreadyInList(DirectoryOfServiceVo dos)
	{
		DirectoryOfServiceVoCollection alreadyAddedDos = form.lyrDetails().tabDOS().grdDOS().getValues();
		
		if (alreadyAddedDos == null || alreadyAddedDos.size() == 0)
			return false;
		
		for (int i = 0; i < alreadyAddedDos.size(); i++)
		{
			if (alreadyAddedDos.get(i) == null)
				continue;
			
			if (alreadyAddedDos.get(i).getID_DirectoryofService().equals(dos.getID_DirectoryofService()))
				return true;
		}
		
		return false;
		
	}

	//wdev-20233
	private boolean isOverlapingOfTime(ProfileParentChildSlotVo vo)
	{
		if( form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().size() == 0)
			return false;
		boolean flagis = false;
		for(int i = 0;i < form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().size();i++)
		{
			ProfileParentChildSlotVo tempVo = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getRows().get(i).getValue();
			if( tempVo != null && vo != null && tempVo.getStartTime() != null &&  tempVo.getEndTmIsNotNull() && vo.getStartTimeIsNotNull() && vo.getEndTmIsNotNull())
			{
				if( ( vo.getStartTime().isLessThan(tempVo.getStartTime()) && vo.getEndTm().isLessThan(tempVo.getStartTime())) || ( vo.getStartTime().isGreaterThan(tempVo.getEndTm()) &&  vo.getEndTm().isGreaterThan(tempVo.getEndTm())))
					;
				else
					flagis = true;
			}
		}
		return flagis;
	}

	private void updateRowForOutpatientFlexibleSlot(ProfileParentChildSlotVo vo, grdSlotsRow row)
	{
		row.setColStartTime(vo.getStartTime() != null ? vo.getStartTime().toString() : "");
		row.setColDuration(vo.getDuration() != null ? vo.getDuration().toString() : "");
		row.setColPriority(vo.getPriority() != null ? vo.getPriority().getText() : "");
		row.setColActive(vo.getIsActive());
		row.setValue(vo);
	}
	
	//WDEV-19518
	private void setCaseNoteFolderLocation(LocShortVo profileCaseNoteFoldersLocation, boolean wasAlreadySavedAgainstProfile)
	{
		
		Sch_ProfileGenericVo voProfile = form.getLocalContext().getCurrentProfile();
		voProfile.setCaseNoteFolderLocation(profileCaseNoteFoldersLocation);
		form.getLocalContext().setCurrentProfile(voProfile);

		if (profileCaseNoteFoldersLocation == null)
			return;
		
		//wdev-20233
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(!wasAlreadySavedAgainstProfile && Boolean.TRUE.equals(profileCaseNoteFoldersLocation.getCaseNoteFolderLocation()) ? profileCaseNoteFoldersLocation : profileCaseNoteFoldersLocation);
		if( form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValues() == null)
		{
			if( voProfile.getCaseNoteFolderLocationIsNotNull())
			{
				form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().newRow(voProfile.getCaseNoteFolderLocation(), voProfile.getCaseNoteFolderLocation().getName());
				form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(voProfile.getCaseNoteFolderLocation());
			}
		}
		else if( form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValues() != null && !form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValues().contains(voProfile.getSchLocation()))
		{
			if( voProfile.getCaseNoteFolderLocationIsNotNull())
			{
				form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().newRow(voProfile.getCaseNoteFolderLocation(), voProfile.getCaseNoteFolderLocation().getName());
				form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(voProfile.getCaseNoteFolderLocation());
			}

		}

	}

	private void addSelectedProcedures()
	{
		if(form.getGlobalContext().Clinical.getSelectedProcedures() == null)
			return;

		for(ProcedureLiteVo procedure : form.getGlobalContext().Clinical.getSelectedProcedures())
		{
			if(procedure == null)
				continue;
			
			GenForm.lyrDetailsLayer.tabTheatreContainer.grdTheatreServiceRow tRow = form.lyrDetails().tabTheatre().grdTheatreService().getRows().newRow(true);
			
			ProcedureNameVo proc = new ProcedureNameVo();
			proc.setID_Procedure(procedure.getID_Procedure());
			proc.setProcedureName(procedure.getProcedureName());

			TheatreDetailLiteVo theatreProcedure = new TheatreDetailLiteVo();
			theatreProcedure.setProcedure(proc);
			
			tRow.setcolProcedure(proc.getProcedureName());
			tRow.setcolProcedureReadOnly(true);
			tRow.setcolActive(true);
			tRow.setReadOnly(false);

			tRow.setValue(theatreProcedure);
		}
	}

	//WDEV-12918
	private void populateParentChilSlotsRow(grdParentChildSlotsRow row, ProfileParentChildSlotVo vo)
	{
		row.setValue(vo);
		if(vo.getIsActiveIsNotNull())
			row.setColActive(vo.getIsActive().booleanValue());
		if (vo.getDurationIsNotNull())
			row.setColDuration(vo.getDuration().toString());
		if (vo.getStartTimeIsNotNull()) 
			row.setColStartTime(vo.getStartTime().toString());

		row.setSelectable(true);
	}
	
	private void addTemplateRow()
	{
		if (form.getGlobalContext().Core.getReportTemplateRef() instanceof ReportTemplateLiteVo)
		{
			if (!templateAddedPreviously((ReportTemplateLiteVo) form.getGlobalContext().Core.getReportTemplateRef()))
			{
				grdTemplatesRow row = form.lyrDetails().tabTemplates().grdTemplates().getRows().newRow();
				row.setColTemplate((ReportTemplateLiteVo) form.getGlobalContext().Core.getReportTemplateRef());
				row.setValue(new ProfileTemplateVo());
			}
		}
	}

	private boolean templateAddedPreviously(ReportTemplateLiteVo selectedTemplate)
	{
		for (int i = 0; i < form.lyrDetails().tabTemplates().grdTemplates().getRows().size(); i++)
		{
			grdTemplatesRow row = form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i);
			if (row.getColTemplate() != null && row.getColTemplate().equals(selectedTemplate))
				return true;
		}

		return false;
	}
	//WDEV-19518
	private void setLocation(LocShortVo voLocShort)
	{
		Sch_ProfileGenericVo voProfile = form.getLocalContext().getCurrentProfile();
		voProfile.setSchLocation(voLocShort);
		boolean isSelectedLocationCaseNote = voLocShort != null && Boolean.TRUE.equals(voLocShort.getCaseNoteFolderLocation());
		if (voProfile.getID_Sch_Profile() == null && voProfile.getCaseNoteFolderLocation() == null && !Boolean.TRUE.equals(voProfile.getCaseNoteFolderNotRequired()))
		{	
			voProfile.setCaseNoteFolderLocation(isSelectedLocationCaseNote ? voLocShort : null);
			//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setValue(isSelectedLocationCaseNote ? voLocShort.getName() : null);
						
			//wdev-20074
			form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(isSelectedLocationCaseNote ? voLocShort : null);
			if( form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValues() == null)
			{
				if( voLocShort != null)
				{
					form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().newRow(voLocShort, voLocShort.getName());
					form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(voLocShort);
				}
			}
			else if( form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValues() != null && !form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValues().contains(voProfile.getSchLocation()))
			{
				if( voLocShort != null)
				{
					form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().newRow(voLocShort, voLocShort.getName());
					form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(voLocShort);
				}

			}

		}
		form.getLocalContext().setCurrentProfile(voProfile);

		//form.lyrDetails().tabGeneralDetails().txtLocation().setValue(voLocShort != null ? voLocShort.getName() : null ); //wdev-20233
		//wdev-20233
		form.lyrDetails().tabGeneralDetails().qmbLocation().setValue(voProfile.getSchLocation());
		if( form.lyrDetails().tabGeneralDetails().qmbLocation().getValues() == null)
		{
			if( voProfile.getSchLocationIsNotNull())
			{
				form.lyrDetails().tabGeneralDetails().qmbLocation().newRow(voProfile.getSchLocation(), voProfile.getSchLocation().getName());
				form.lyrDetails().tabGeneralDetails().qmbLocation().setValue(voProfile.getSchLocation());
			}
		}
		else if( form.lyrDetails().tabGeneralDetails().qmbLocation().getValues() != null && !form.lyrDetails().tabGeneralDetails().qmbLocation().getValues().contains(voProfile.getSchLocation()))
		{
			if( voProfile.getSchLocationIsNotNull())
			{
				form.lyrDetails().tabGeneralDetails().qmbLocation().newRow(voProfile.getSchLocation(), voProfile.getSchLocation().getName());
				form.lyrDetails().tabGeneralDetails().qmbLocation().setValue(voProfile.getSchLocation());
			}

		}
		
	}	

	private void populateSlotsRow(GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow row, Profile_SlotGenericVo vo, boolean selectable)
	{
		row.setValue(vo);
		row.setcolSlotsActive(vo.getIsActive().booleanValue());
		if (vo.getActivityIsNotNull())
			row.setcolSlotsActivity(vo.getActivity().getName());
		if (vo.getDurationIsNotNull())
			row.setcolSlotsDuration(vo.getDuration().toString());
		if (vo.getPriorityIsNotNull())
			row.setcolSlotsPriority(vo.getPriority().getText());
		if (vo.getStartTmIsNotNull())
			row.setcolSlotsStartTime(vo.getStartTm().toString());
		row.setcolSlotsEndTime(vo.getEndTimeIsNotNull() ? vo.getEndTime().toString() : null); //WDEV-19702
		
		//wdev-20262
		if( vo.getFunctionsIsNotNull())
		{
			if( vo.getFunctions().size() > 0)
			{
				ServiceFunctionLiteVo tempServVo = domain.getServiceFunction(vo.getFunctions().get(0));
				row.setcolSlotsFunction(tempServVo != null && tempServVo.getFunctionIsNotNull() ? tempServVo.getFunction().getIItemText():null);
				
			}
			else
				row.setcolSlotsFunction(null);
		}
		else
			row.setcolSlotsFunction(null);
		
		row.setSelectable(selectable && FormMode.EDIT.equals(form.getMode())); //WDEV-23611 
	}

	protected void onCmbIntervalTypeValueChanged() throws PresentationLogicException
	{
		setIntervalControlStates(true);
	}

	private void setIntervalControlStates(boolean bClearFields)
	{
		if (form.lyrDetails().tabProfileDetails().cmbIntervalType().getValue() == null)
		{
			enableAndClearIntervalControls(NOINTERVAL, false, bClearFields);
			form.lyrDetails().tabProfileDetails().lblMonthWeek().setValue("");	//wdev-20074
			return;
		}

		if (form.lyrDetails().tabProfileDetails().cmbIntervalType().getValue().equals(Profile_Interval_Type.MONTHLY))
		{
			form.lyrDetails().tabProfileDetails().lblMonthWeek().setValue("Month(s)");	//wdev-20074
			enableAndClearIntervalControls(MONTHLYINTERVAL, true, bClearFields);
		}
		else if (form.lyrDetails().tabProfileDetails().cmbIntervalType().getValue().equals(Profile_Interval_Type.WEEKLY))
		{
			form.lyrDetails().tabProfileDetails().lblMonthWeek().setValue("Week(s)");	//wdev-20074
			enableAndClearIntervalControls(WEEKLYINTERVAL, true, bClearFields);
		}
	}

	private void enableAndClearIntervalControls(int intervalType, boolean bEnable, boolean bClearFields)
	{
		boolean profileHasSessions = Boolean.TRUE.equals(form.getLocalContext().getprofileHasSessions());
		
		if (bClearFields)
		{
			form.lyrDetails().tabProfileDetails().chkFive().setValue(false);
			form.lyrDetails().tabProfileDetails().chkFour().setValue(false);
			form.lyrDetails().tabProfileDetails().chkThree().setValue(false);
			form.lyrDetails().tabProfileDetails().chkTwo().setValue(false);
			form.lyrDetails().tabProfileDetails().chkOne().setValue(false);

			if (intervalType != WEEKLYINTERVAL)
			{
				form.lyrDetails().tabProfileDetails().chkMonday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkTuesday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkWednesday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkThursday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkFriday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkSaturday().setValue(false);
				form.lyrDetails().tabProfileDetails().chkSunday().setValue(false);
			}
		}
		switch (intervalType)
		{
			case NOINTERVAL :
				form.lyrDetails().tabProfileDetails().chkFive().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkFour().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkThree().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkTwo().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkOne().setEnabled(false);

				form.lyrDetails().tabProfileDetails().chkMonday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkTuesday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkWednesday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkThursday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkFriday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkSaturday().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkSunday().setEnabled(false);
			break;
			case MONTHLYINTERVAL :
				form.lyrDetails().tabProfileDetails().chkFive().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkFour().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkThree().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkTwo().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkOne().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));

				form.lyrDetails().tabProfileDetails().chkMonday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkTuesday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkWednesday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkThursday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkFriday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSaturday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSunday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
			break;
			case WEEKLYINTERVAL :
				form.lyrDetails().tabProfileDetails().chkFive().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkFour().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkThree().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkTwo().setEnabled(false);
				form.lyrDetails().tabProfileDetails().chkOne().setEnabled(false);

				form.lyrDetails().tabProfileDetails().chkMonday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkTuesday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkWednesday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkThursday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkFriday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSaturday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
				form.lyrDetails().tabProfileDetails().chkSunday().setEnabled(!profileHasSessions && form.getMode().equals(FormMode.EDIT));
			break;
		}
	}

	protected void onGrdListOwnersGridQueryComboBoxTextSubmited(int column, grdListOwnerRow row, String text) throws PresentationLogicException
	{
		row.getColHcp().clear();

		HcpFilter filter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(text);
		filter.setQueryName(voName);

		//HcpLiteVoCollection voCollHcp = domain.listHcpLite(filter);
		//wdev-20074
		if( form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue() == null )
		{
			engine.showMessage("Please Select a Service!");
			return; 
		}
		ims.core.vo.lookups.ServiceFunctionCollection tempColl = getFunctionsCollFromGeneralDetailsTab();	//wdev-20262
				
		HcpLiteVoCollection voCollHcp = domain.listHcpLiteBySerbiceFunction(filter,form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(),tempColl);
		//-----------
		
		if( voCollHcp == null || voCollHcp.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			row.getColHcp().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			row.getColHcp().setValue(voCollHcp.get(0));
		else
			row.getColHcp().showOpened();

	}

	protected void onBtnSearchClick() throws PresentationLogicException
	{
		searchProfiles(true);
		updateControlState();//WDEV-14644
		if (form.grdProfiles().getRows().size() == 0)
			engine.showMessage("No matching Profiles found.");
	}

	protected void onBtnClearClick() throws PresentationLogicException
	{
		//WDEV-16799 
		form.qmbFilterDirectoryOfService().setValue(null);
		form.cmbFilterSpecialty().setValue(null);
		form.cmbHospFilter().setValue(null);
		
		//WDEV-13362
		form.txtName().setValue(null);
		form.ccListOwner().clear();
		form.chkFilterOutpatients().setValue(false);
		form.chkFilterTheatre().setValue(false);
		form.chkFilterWardAttendance().setValue(false);	//wdev-20074
		
		form.grdProfiles().getRows().clear();
		
		this.clearScreen();
		form.getLocalContext().setCurrentProfile(null);
		updateControlState();//WDEV-14644
	}

	protected void onRadioButtonGroupSlotTypeValueChanged() throws PresentationLogicException
	{
		setSlotsTabsState();
	}

	private void setSlotsTabsState()
	{
		if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
			form.lyrDetails().tabSlots().setHeaderVisible(true);
		else if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
			form.lyrDetails().tabDOS().setHeaderVisible(true);
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		form.getContextMenus().Scheduling.hideAllProfileBookingRightsMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileTemplatesMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileExclusionDatesMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileExclusionTimesMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileSlotsGeneralMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileListOwnersMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileTheatreMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileActivityMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileTheatreTCITimesMenuItems(); //WDEV-11777
		form.getContextMenus().Scheduling.hideAllProfileTheatreSlotsMenuItems(); //WDEV-12918
		form.getContextMenus().Scheduling.hideAllFlexibleProfileSlotMenuItems();
		form.getContextMenus().Scheduling.hideAllProfileServiceFunctionsMenuItems();	//wdev-20074
		form.getContextMenus().Scheduling.hideAllProfileDOSMenuItems();
		
		//WDEV-21906
		Boolean profileHasSessions = Boolean.TRUE.equals(form.getLocalContext().getprofileHasSessions());
		Boolean selectedProfile = form.grdProfiles().getValue() != null;
		
		form.lyrDetails().tabGeneralDetails().GroupProfileType().setEnabled(form.getMode().equals(FormMode.EDIT) && !selectedProfile);
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setEnabled(form.getMode().equals(FormMode.EDIT) && !selectedProfile);
		form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setEnabled(form.getMode().equals(FormMode.EDIT) && !selectedProfile); //WDEV-21137
		form.lyrDetails().tabGeneralDetails().txtProfileName().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().chkProfileActive().setEnabled(form.getMode().equals(FormMode.EDIT));//WDEV-22299
		form.lyrDetails().tabGeneralDetails().cmbHospital().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().qmbLocation().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().cmbSpeciality().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().cmbTheatreType().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().intAutoGeneratePeriodWeeks().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().setEnabled(form.getMode().equals(FormMode.EDIT) && Boolean.TRUE.equals(form.lyrDetails().tabGeneralDetails().chkProfileActive().getValue()));
		
		form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabProfileDetails().dteEndDate().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lyrDetails().tabProfileDetails().timStartTime().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabProfileDetails().timEndTime().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabProfileDetails().cmbIntervalType().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		form.lyrDetails().tabProfileDetails().intIntSize().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		
		form.lyrDetails().tabListOwners().cmbListType().setEnabled(form.getMode().equals(FormMode.EDIT) && ((selectedProfile && !profileHasSessions) || !selectedProfile));
		
		form.lyrDetails().tabSlots().chkSlotsActiveOnly().setEnabled(true); //WDEV-23611 - enabled all the time, even for generated profiles // && ((selectedProfile && !profileHasSessions) || !selectedProfile));
				
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.lyrDetails().tabListOwners().grdListOwner().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabDOS().grdDOS().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabSlots().grdSlotsGeneral().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabActivities().grdActivities().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabActivitiesWithSlots().grdSlots().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabTheatre().grdTheatre().setReadOnly(selectedProfile);
			form.lyrDetails().tabTheatre().grdTheatreService().setReadOnly(selectedProfile);

			
			form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().setReadOnly(selectedProfile && profileHasSessions);
			
			form.lyrDetails().tabExclusion().grdExclDates().setReadOnly(selectedProfile && profileHasSessions);
			form.lyrDetails().tabExclusion().grdExclPeriods().setReadOnly(selectedProfile && profileHasSessions);
			
			form.lyrDetails().tabTemplates().grdTemplates().setReadOnly(selectedProfile && profileHasSessions);
		}
		
		//wdev-20074
		//form.lyrDetails().tabGeneralDetails().GroupProfileType().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lyrDetails().tabGeneralDetails().lblProfileTypeStar().setVisible(form.getMode().equals(FormMode.EDIT) && !selectedProfile);
		form.lyrDetails().tabGeneralDetails().lblFlexibleProfileStar().setVisible( form.getMode().equals(FormMode.EDIT) && ( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) ) && !selectedProfile);
		//form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.lyrDetails().tabGeneralDetails().intAutoGeneratePeriodWeeks().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		//outpatient and ward attendance and theatre profile type
		form.lyrDetails().tabGeneralDetails().lblFlexibleProfile().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setVisible(GroupFlexibleProfileEnumeration.rdoYes,GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setVisible(GroupFlexibleProfileEnumeration.rdoNo, GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setEnabled(GroupFlexibleProfileEnumeration.rdoYes, GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setEnabled(GroupFlexibleProfileEnumeration.rdoNo, GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		
		form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().lblCaseNoteLocation().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setVisible(true);
		//WDEV-21203
		form.lyrDetails().tabGeneralDetails().GroupHospital().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		
		//form.lyrDetails().tabGeneralDetails().btnCaseNotesLocation().setVisible(true);
		//form.lyrDetails().tabGeneralDetails().lblCNLocStar().setVisible(true);
		form.lyrDetails().tabGeneralDetails().lblConsultationType().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setVisible(GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		
		form.lyrDetails().tabGeneralDetails().lblTheatreType().setVisible(GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().cmbTheatreType().setVisible(GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().lblAnaesType().setVisible(GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
		form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setVisible(GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()));
	
		if( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
			form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setVisible(false);
				
		//----------------------
		
		form.getContextMenus().Scheduling.getProfileDOSADD_SPECIALTY_DOSItem().setVisible(form.getMode().equals(FormMode.EDIT) && !profileHasSessions);
		
		if (ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue())
		{
			//form.lyrDetails().tabGeneralDetails().chkTheatre().setVisible(true);		wdev-20074
			form.lyrDetails().tabGeneralDetails().GroupProfileType().setVisible(GroupProfileTypeEnumeration.rdoTheatre, true);	//wdev-20074
			if(GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
			{
    			form.lyrDetails().tabGeneralDetails().lblTheatreType().setVisible(true);
    			//form.lyrDetails().tabGeneralDetails().chkTheatre().setEnabled(form.getMode().equals(FormMode.VIEW) ? false : true); //wdev-20074
    			form.lyrDetails().tabGeneralDetails().cmbTheatreType().setVisible(true);
    			//form.lyrDetails().tabGeneralDetails().cmbTheatreType().setEnabled(form.getMode().equals(FormMode.EDIT) /*&& form.lyrDetails().tabGeneralDetails().chkTheatre().getValue() */ ? true : false);   //wdev-20074
    			//WDEV-12918
    			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setVisible(true);
    			//form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setEnabled(form.getMode().equals(FormMode.EDIT) /* && form.lyrDetails().tabGeneralDetails().chkTheatre().getValue() */ ? true : false);  //wdev-20074
			}
			
			//default SlotType according to ConfigFlag if we are adding a new TheatreProfile
			if(form.getLocalContext().getCurrentProfile() != null && form.getLocalContext().getCurrentProfile().getID_Sch_Profile() == null && form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue() == null && GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*form.lyrDetails().tabGeneralDetails().chkTheatre().getValue() == true*/ && form.getMode().equals(FormMode.EDIT))  //wdev-20074
			{
				if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
					form.lyrDetails().tabGeneralDetails().cmbSlotType().setValue(SlotType.THEATRETCITIME);
				else if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
					form.lyrDetails().tabGeneralDetails().cmbSlotType().setValue(SlotType.SLOTS);
			}
			
			//WDEV-12918
			if(form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue() != null)
			{
				if(form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue().equals(SlotType.THEATRETCITIME))
					form.lyrDetails().tabTheatre().lyrSlots().showtabTCI();
				else if(form.lyrDetails().tabGeneralDetails().cmbSlotType().getValue().equals(SlotType.SLOTS))
					form.lyrDetails().tabTheatre().lyrSlots().showtabTheatreSlots();
			}	
		}
		else
		{
			//form.lyrDetails().tabGeneralDetails().chkTheatre().setVisible(false);  //wdev-20074
			form.lyrDetails().tabGeneralDetails().GroupProfileType().setVisible(GroupProfileTypeEnumeration.rdoTheatre, false);		//wdev-20074
			form.lyrDetails().tabGeneralDetails().cmbTheatreType().setVisible(false);
			form.lyrDetails().tabGeneralDetails().lblTheatreType().setVisible(false);
			//WDEV-12918
			form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setVisible(false);
			form.lyrDetails().tabGeneralDetails().lblAnaesType().setVisible(false);
		}
		
		if ( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/)  //wdev-20074
		{
			form.lyrDetails().tabDOS().setHeaderVisible(false);
			form.lyrDetails().tabSlots().setHeaderVisible(false);
			form.lyrDetails().tabTheatre().setHeaderVisible(true);
		}
		else
		{
			if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals(new String("Local Only")))   	//wdev-12846
				form.lyrDetails().tabDOS().setHeaderVisible(false);										//wdev-12846
			else
				form.lyrDetails().tabDOS().setHeaderVisible(true);
			
			form.lyrDetails().tabSlots().setHeaderVisible(true);
			form.lyrDetails().tabTheatre().setHeaderVisible(false);
		}
		
		form.lyrDetails().tabActivities().setHeaderVisible(false);
		form.lyrDetails().tabActivitiesWithSlots().setHeaderVisible(false);
		
		if(  GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) )  //wdev-20074
		{
			form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoYes);
			
		}
		
		if( GroupFlexibleProfileEnumeration.rdoYes.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()) /*form.lyrDetails().tabGeneralDetails().chkFlexible().getValue()*/)	//wdev-20074
		{
			form.lyrDetails().tabDOS().setHeaderVisible(false);
			form.lyrDetails().tabSlots().setHeaderVisible(false);
			
			if (ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITHOUT_SLOTS"))
				form.lyrDetails().tabActivities().setHeaderVisible(true);
			else if (ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITH_SLOTS"))
				form.lyrDetails().tabActivitiesWithSlots().setHeaderVisible(true);
		}
		
		if( !GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))		//wdev-20074
		{
    		form.lyrDetails().tabGeneralDetails().lblCaseNoteLocation().setVisible(!form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
    		//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setVisible(!form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
    		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setVisible(!form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
    		//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setEnabled(false);
    		//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setRequired(false);
    		//form.lyrDetails().tabGeneralDetails().btnCaseNotesLocation().setVisible(!form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
    		//form.lyrDetails().tabGeneralDetails().btnCaseNotesLocation().setEnabled(FormMode.EDIT.equals(form.getMode()) && !form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
    		//form.lyrDetails().tabGeneralDetails().lblCNLocStar().setVisible(FormMode.EDIT.equals(form.getMode()) && !form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
    		
    		//WDEV-21203
    		form.lyrDetails().tabGeneralDetails().GroupHospital().setVisible(Boolean.FALSE.equals(form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue()));
    		form.lyrDetails().tabGeneralDetails().GroupHospital().setEnabled(FormMode.EDIT.equals(form.getMode()) && !profileHasSessions); 
    		form.lyrDetails().tabGeneralDetails().cmbOtherHosp().setEnabled(FormMode.EDIT.equals(form.getMode()) && !profileHasSessions);
		}
		
		form.lyrDetails().tabGeneralDetails().cmbOtherHosp().setVisible(!GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) && Boolean.FALSE.equals(form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue()) && GroupHospitalEnumeration.rdoOtherHospital.equals(form.lyrDetails().tabGeneralDetails().GroupHospital().getValue())); //WDEV-21203
		
//		form.lyrDetails().tabGeneralDetails().cmbTheatreType().setEnabled(form.getMode().equals(FormMode.EDIT));				//wdev-20074
//		form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setEnabled(form.getMode().equals(FormMode.EDIT));		//wdev-20074
//		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setEnabled(form.getMode().equals(FormMode.EDIT));				//wdev-20074
		form.getContextMenus().Scheduling.getProfileServiceFunctionsSELECT_ALLItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size() > 0);	//wdev-20074
		form.getContextMenus().Scheduling.getProfileServiceFunctionsDESELECT_ALLItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyrDetails().tabGeneralDetails().grdServiceFunctions().getRows().size() > 0);	//wdev-20074
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			//form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setEnabled(false);	//wdev-20074
			form.getContextMenus().Scheduling.getProfilesMenuADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfilesMenuUPDATEItem().setVisible(selectedProfile);
			form.getContextMenus().Scheduling.getProfilesMenuCLONE_PROFILEItem().setVisible(selectedProfile);
			
			//form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setEnabled(false);	//wdev-20074
			//form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setEnabled(false);				//wdev-20074
			
			//wdev-19921
			form.btnAdd().setVisible(true);
			form.btnEdit().setVisible(selectedProfile);
			form.btnCloneThisProfile().setVisible(selectedProfile);
			//----------
			//WDEV-16799 
			form.qmbFilterDirectoryOfService().setEnabled(true);
			//WDEV-13362
			form.ccListOwner().setEnabled(true);
			//form.lyrDetails().tabGeneralDetails().btnCaseNotesLocation().setEnabled(false);
			//form.lyrDetails().tabGeneralDetails().lblCNLocStar().setVisible(false);
			
			
			form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setReadOnly(true);	//wdev-20074
			form.lyrDetails().tabTheatre().grdTheatre().setReadOnly(true);
			form.lyrDetails().tabTheatre().grdTheatreService().setReadOnly(true);
		}
		else if (form.getMode().equals(FormMode.EDIT))	
		{
			//form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setEnabled(true);	//wdev-20074
			//form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setEnabled(true);	//wdev-20074
			//form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setEnabled(true);				//wdev-20074
			
			//WDEV-13362
			form.ccListOwner().setEnabled(false);
			//WDEV-16799
			form.qmbFilterDirectoryOfService().setEnabled(false);
			//WDEV-7615
			//form.lyrDetails().tabGeneralDetails().cmbTheatreType().setEnabled(true/*form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/);		//wdev-20074
			
			//WDEV-18369 
			//form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setEnabled(!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());			//wdev-20074
			//WDEV-12918
			//form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setEnabled(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue());		//wdev-20074
			
			if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) || GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()) /*!form.lyrDetails().tabGeneralDetails().chkTheatre().getValue()*/)  //wdev-20074 
			{
				form.lyrDetails().tabGeneralDetails().cmbTheatreType().setValue(null);
				//WDEV-12918
				form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(null);
				form.lyrDetails().tabGeneralDetails().cmbSlotType().setValue(null);
			}
			
			// WDEV-6918
			if (selectedProfile)
				form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(form.grdProfiles().getValue().getLastActualGenDate() == null && !profileHasSessions);
			else
				form.lyrDetails().tabProfileDetails().dteStartDate().setEnabled(true);

			enableRowSelection();

			form.getContextMenus().Scheduling.getProfilesMenuADDItem().setVisible(false);
			form.getContextMenus().Scheduling.getProfilesMenuUPDATEItem().setVisible(false);
			form.getContextMenus().Scheduling.getProfilesMenuCLONE_PROFILEItem().setVisible(false);
			
			//wdev-19921
			form.btnAdd().setVisible(false);
			form.btnEdit().setVisible(false);
			form.btnCloneThisProfile().setVisible(false);
			//----------

			form.getContextMenus().Scheduling.getProfileBookingRightsADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getProfileTemplatesADDTEMPLATEItem().setVisible(true); //WDEV-21904 MAXIMS_10.5.1.0
			form.getContextMenus().Scheduling.getProfileExclusionDatesADDItem().setVisible(!profileHasSessions);
			form.getContextMenus().Scheduling.getProfileExclusionTimesADDItem().setVisible(!profileHasSessions);
			form.getContextMenus().Scheduling.getProfileSlotsGeneralADDItem().setVisible(!profileHasSessions);
			form.getContextMenus().Scheduling.getProfileListOwnersADDItem().setVisible(!profileHasSessions);
			form.getContextMenus().Scheduling.getProfileTheatreADDItem().setVisible(!TheatreType.EMERGENCY.equals(form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue()) && !TheatreType.EMERGENCY_NON_TO.equals(form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue()));	//wdev-20233
			form.getContextMenus().Scheduling.getProfileTheatreTCITimesADDItem().setVisible(!profileHasSessions); //WDEV-11777
			form.getContextMenus().Scheduling.getProfileActivityADDItem().setVisible(!profileHasSessions);
			form.getContextMenus().Scheduling.getProfileTheatreSlotsADDItem().setVisible(!profileHasSessions); //WDEV-12918

			form.getContextMenus().Scheduling.getProfileBookingRightsEDITItem().setVisible(form.lyrDetails().tabBookingRights().grdBookingRights().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileExclusionDatesEDITItem().setVisible(form.lyrDetails().tabExclusion().grdExclDates().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileExclusionTimesEDITItem().setVisible(form.lyrDetails().tabExclusion().grdExclPeriods().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileSlotsGeneralEDITItem().setVisible(form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileListOwnersEDITItem().setVisible(form.lyrDetails().tabListOwners().grdListOwner().getSelectedRow() != null && !profileHasSessions);

			form.getContextMenus().Scheduling.getProfileBookingRightsREMOVEItem().setVisible(form.lyrDetails().tabBookingRights().grdBookingRights().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getProfileTemplatesREMOVETEMPLATEItem().setVisible(form.lyrDetails().tabTemplates().grdTemplates().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileExclusionDatesREMOVEItem().setVisible(form.lyrDetails().tabExclusion().grdExclDates().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileExclusionTimesREMOVEItem().setVisible(form.lyrDetails().tabExclusion().grdExclPeriods().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileSlotsGeneralREMOVEItem().setVisible(form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow() != null && form.lyrDetails().tabSlots().grdSlotsGeneral().getSelectedRow().getcolSlotsActive() && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileListOwnersREMOVEItem().setVisible(form.lyrDetails().tabListOwners().grdListOwner().getSelectedRow() != null && !profileHasSessions);
			
			if (Boolean.TRUE.equals(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES)))
				form.getContextMenus().Scheduling.getProfileTheatreREMOVEItem().setVisible(form.lyrDetails().tabTheatre().grdTheatre().getSelectedRow() != null);
			else
				form.getContextMenus().Scheduling.getProfileTheatreREMOVEItem().setVisible(form.lyrDetails().tabTheatre().grdTheatreService().getSelectedRow() != null);
			
			
			form.getContextMenus().Scheduling.getProfileActivityREMOVEItem().setVisible((form.lyrDetails().tabActivities().grdActivities().getSelectedRow() != null || form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getSelectedRow() != null) && !profileHasSessions);
			form.getContextMenus().Scheduling.getProfileTheatreTCITimesREMOVEItem().setVisible(form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getSelectedRow() != null && !profileHasSessions); //WDEV-11777
			
			ProfileParentChildSlotVo rowSelectedValue = form.lyrDetails().tabTheatre().lyrSlots().tabTheatreSlots().grdParentChildSlots().getValue(); //WDEV-19953
			form.getContextMenus().Scheduling.getProfileTheatreSlotsREMOVEItem().setVisible( rowSelectedValue!=null && (rowSelectedValue.getID_ProfileParentChildSlot()==null || (rowSelectedValue.getID_ProfileParentChildSlotIsNotNull() && !domain.isParentChildSlotUsed(rowSelectedValue))) && !profileHasSessions); //WDEV-12918  //WDEV-19953
			
			form.getContextMenus().Scheduling.getFlexibleProfileSlotADDItem().setVisible(!profileHasSessions);
			form.getContextMenus().Scheduling.getFlexibleProfileSlotEDITItem().setVisible(form.lyrDetails().tabActivitiesWithSlots().grdSlots().getSelectedRow() != null && !profileHasSessions);
			form.getContextMenus().Scheduling.getFlexibleProfileSlotINACTIVATEItem().setVisible(form.lyrDetails().tabActivitiesWithSlots().grdSlots().getSelectedRow() != null && form.lyrDetails().tabActivitiesWithSlots().grdSlots().getSelectedRow().getColActive() && !profileHasSessions);
			
			
			form.lyrDetails().tabGeneralDetails().grdServiceFunctions().setReadOnly(false);	//wdev-20074
			
			
		}
		
		
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
			if( !ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals(new String("Local Only")) &&  GroupFlexibleProfileEnumeration.rdoNo.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()))
			{
				form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setVisible(true);
				
				if( form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue() == true)
					form.lyrDetails().tabDOS().setHeaderVisible(true);
				else
					form.lyrDetails().tabDOS().setHeaderVisible(false);
					
								
				
			}
			else
			{
				form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setVisible(false);
			}
		}
		
		boolean isGrdTheatreListOwnerVisible = Boolean.TRUE.equals(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(LIST_OWNER_PROCEDURES)) &&
					GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue());
		
		boolean isGrdTheatreServiceVisible = Boolean.TRUE.equals(ConfigFlag.GEN.THEATRE_PROFILE_PROCEDURES.getValue().equals(SERVICE_PROCEDURES)) &&
		GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue());

		
		form.lyrDetails().tabTheatre().grdTheatre().setVisible(isGrdTheatreListOwnerVisible);
		form.lyrDetails().tabTheatre().grdTheatreService().setVisible(isGrdTheatreServiceVisible);

		boolean isFlexibleWhithoutSlots = form.getLocalContext().getCurrentProfile() != null && !Boolean.TRUE.equals(form.getLocalContext().getCurrentProfile().getIsFixed()) && ConfigFlag.DOM.PROFILE_FLEXIBLE_TYPE.getValue().equals("WITHOUT_SLOTS");
		form.btnPreview().setVisible(FormMode.VIEW.equals(form.getMode()) && selectedProfile && !isFlexibleWhithoutSlots);
		form.btnPreview().setEnabled(selectedProfile && Boolean.TRUE.equals(form.grdProfiles().getValue().getIsActive()));
		form.chkFilterWardAttendance().setEnabled(FormMode.VIEW.equals(form.getMode()));	//wdev-20074
		
		setIntervalControlStates(false);
		
	}

	private void enableRowSelection()
	{
		for (int i = 0; i < form.lyrDetails().tabBookingRights().grdBookingRights().getRows().size(); i++)
		{
			form.lyrDetails().tabBookingRights().grdBookingRights().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclDates().getRows().size(); i++)
		{
			form.lyrDetails().tabExclusion().grdExclDates().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabExclusion().grdExclPeriods().getRows().size(); i++)
		{
			form.lyrDetails().tabExclusion().grdExclPeriods().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().size(); i++)
		{
			form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrDetails().tabTemplates().grdTemplates().getRows().size(); i++)
		{
			form.lyrDetails().tabTemplates().grdTemplates().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatre().getRows().size(); i++)
		{
			form.lyrDetails().tabTheatre().grdTheatre().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabTheatre().grdTheatreService().getRows().size(); i++)
		{
			form.lyrDetails().tabTheatre().grdTheatreService().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabActivities().grdActivities().getRows().size(); i++)
		{
			form.lyrDetails().tabActivities().grdActivities().getRows().get(i).setSelectable(true);
		}
		
		//WDEV-11777
		for (int i = 0; i < form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().size(); i++)
		{
			form.lyrDetails().tabTheatre().lyrSlots().tabTCI().grdTCITimes().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().size(); i++)
		{
			form.lyrDetails().tabActivitiesWithSlots().grdActivitiesSlots().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().size(); i++)
		{
			form.lyrDetails().tabActivitiesWithSlots().grdSlots().getRows().get(i).setSelectable(true);
		}
		
	}

	protected void onGrdBookingRightsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdEventsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdExclDatesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdExclPeriodsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdListOwnerSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdSlotsGeneralSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdTemplatesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onDteStartDateValueChanged() throws PresentationLogicException
	{
		Date dt = form.lyrDetails().tabProfileDetails().dteStartDate().getValue();
		if (dt == null)
			return;

		Date newDate = validateStartDateIsSunday(dt);
		if (newDate != null)
		{
			engine.showErrors(new String[]{"'Week Starting' Date must be a Sunday"});
			form.lyrDetails().tabProfileDetails().dteStartDate().setValue(null);
			form.lyrDetails().tabProfileDetails().dteStartDate().setValue(newDate);
		}
	}

	private Date validateStartDateIsSunday(Date dt)
	{
		if (dt == null)
			return null;

		DayOfWeek weekDay = dt.getDayOfWeek();
		if (!weekDay.equals(DayOfWeek.SUNDAY))
		{
			if (weekDay.equals(DayOfWeek.MONDAY))
				dt.addDay(-1);
			if (weekDay.equals(DayOfWeek.TUESDAY))
				dt.addDay(-2);
			if (weekDay.equals(DayOfWeek.WEDNESDAY))
				dt.addDay(-3);
			if (weekDay.equals(DayOfWeek.THURSDAY))
				dt.addDay(-4);
			if (weekDay.equals(DayOfWeek.FRIDAY))
				dt.addDay(-5);
			if (weekDay.equals(DayOfWeek.SATURDAY))
				dt.addDay(-6);

			return new Date(dt);
		}

		return null;
	}

	private final static int	WEEKLYINTERVAL	= 1;
	private final static int	MONTHLYINTERVAL	= 2;
	private final static int	NOINTERVAL		= 3;

	/*@Override
	protected void onChkTheatreValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabGeneralDetails().chkTheatre().getValue())
		{	
			form.lyrDetails().tabGeneralDetails().chkFlexible().setValue(false);
			//WDEV-18369
			form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(null);
		}	
		updateControlState();	
	}*/

	@Override
	protected void onGrdTheatreGridQueryComboBoxTextSubmited(int column, grdTheatreRow row, String text) throws PresentationLogicException
	{
		if(form.lyrDetails().tabListOwners().grdListOwner().getRows().size() == 0)
		{
			row.getcolProcedure().setEditedText("");
			return;
		}

		row.getcolProcedure().clear();

		ProcedureNameVoCollection voCollProcedure = null;

		HcpRefVoCollection voCollHcp = new HcpRefVoCollection();

		for(int i=0;i<form.lyrDetails().tabListOwners().grdListOwner().getRows().size();i++)
			voCollHcp.add ((HcpRefVo) form.lyrDetails().tabListOwners().grdListOwner().getRows().get(i).getColHcp().getValue());

		if (voCollHcp.size() > 0)
			voCollProcedure = domain.listProcedureByHcpAndNameLite(voCollHcp, text);
		else
		{
			row.getcolProcedure().setEditedText("");
			return;
		}

		if (voCollProcedure != null && voCollProcedure.size() > 0)
		{
			row.getcolProcedure().clear();
			for(ProcedureNameVo voProc : voCollProcedure)
			{
				row.getcolProcedure().newRow(voProc, voProc.getProcedureName());
			}
			if(voCollProcedure.size() == 1)
				row.getcolProcedure().setValue(voCollProcedure.get(0));
			else
				row.getcolProcedure().showOpened();
		}
		else
			row.getcolProcedure().setEditedText("");
	}

	@Override
	protected void onGrdTheatreSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	
	@Override
	protected void onGrdTheatreServiceSelectionChanged() throws PresentationLogicException 
	{
		updateControlState();
	}

	/*@Override
	protected void onChkFlexibleValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabGeneralDetails().chkFlexible().getValue())
			form.lyrDetails().tabGeneralDetails().chkTheatre().setValue(false);
		
		updateControlState();
	}*/

	@Override
	protected void onGrdActivitiesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdTCITimesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdDOSGridCheckBoxClicked(int column, grdDOSRow row, boolean isChecked) throws PresentationLogicException
	{
		// WDEV-12028
		// If the slot is unchecked and is associated to a slot then display
		// the message box for user to confirm / deny DOS removal from slot
		if(!isChecked && hasSlotAssociated(row.getValue()))
		{
			//WDEV-20896
			engine.showMessage("This DOS record is currently configured against a slot. The DOS must be removed from the Slot before it can be de-selected.", "Warning", MessageButtons.OK, MessageIcon.WARNING);
			row.setColSelected(true);
			
			//form.getLocalContext().setSelectedDos(row.getValue());
			//form.getLocalContext().setDosMessageBoxID(engine.showMessage("Remove DoS's from Corresponding Slots", "Modify Slots", MessageButtons.YESNO, MessageIcon.QUESTION));
		}
		else
			form.getLocalContext().setSelectedDos(null);
	}

	/**
	 * WDEV-12028
	 * Function used to check if DOS is associated with a slot
	 */
	private boolean hasSlotAssociated(DirectoryOfServiceVo dos)
	{
		if (dos == null)
			return false;
		
		Profile_SlotGenericVoCollection slots = form.lyrDetails().tabSlots().grdSlotsGeneral().getValues();
		
		for (int indexSlot = 0; slots != null && indexSlot < slots.size(); indexSlot++)
		{
			SlotDirectoryOfServiceVoCollection slotDoS = slots.get(indexSlot).getDirectoryOfService();
			
			for (int indexSlotDoS = 0; slotDoS != null && indexSlotDoS < slotDoS.size(); indexSlotDoS++)
			{
				if (dos.equals(slotDoS.get(indexSlotDoS).getDirectoryOfService()))
					return true;
			}
		}

		return false;
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getDosMessageBoxIDIsNotNull())
		{
			if(messageBoxId == form.getLocalContext().getDosMessageBoxID())
			{
				if(result.equals(DialogResult.YES))
				{
					Profile_SlotGenericVoCollection voCollSlots = form.lyrDetails().tabSlots().grdSlotsGeneral().getValues();
					
					if(voCollSlots != null)
					{
						for(Profile_SlotGenericVo voSlot : voCollSlots)
						{
							if(voSlot.getDirectoryOfServiceIsNotNull())
							{
								if(form.getLocalContext().getSelectedDosIsNotNull())
								{
									for(SlotDirectoryOfServiceVo voSlotDos : voSlot.getDirectoryOfService())
									{
										if(voSlotDos.getDirectoryOfServiceIsNotNull() && voSlotDos.getDirectoryOfService().equals(form.getLocalContext().getSelectedDos()))
										{
											voSlot.getDirectoryOfService().remove(voSlotDos);
											break;
										}
									}
								}
							}
						}
					}	
				}
				if(result.equals(DialogResult.NO))
					form.getLocalContext().setSelectedDos(null);
			}
		}
		
		//WDEV-20893
		else if (form.getLocalContext().getlistOwnerRemoveConfirm() != null && messageBoxId == form.getLocalContext().getlistOwnerRemoveConfirm() && (DialogResult.YES).equals(result))
		{
			form.getLocalContext().setlistOwnerRemoveConfirm(null);
			
			form.lyrDetails().tabListOwners().grdListOwner().removeSelectedRow();
			removeTheatreProcedures();	//wdev-20074
			updateControlState();
		}
	}

	@Override
	protected void onChkSlotsActiveOnlyValueChanged() throws PresentationLogicException
	{	
		//WDEV-12039
		storeSlots();
		
		form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().clear();
		
		Profile_SlotGenericVoCollection voCollSlots = form.getLocalContext().getSlots();
		filterSlotsDisplay(voCollSlots, true);
		
		if (FormMode.EDIT.equals(form.getMode())) //WDEV-23611
			updateControlState();
	}

	//WDEV-12039 need to hold persisted and non-persisted slots locally to allow filtering of unsaved data
	private void storeSlots()
	{
		Profile_SlotGenericVoCollection voCollSlots = form.getLocalContext().getSlots();
		if(voCollSlots == null)
			voCollSlots = new Profile_SlotGenericVoCollection();
		
		for(int i=0;i<form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().size(); i++)
		{
			if(!voCollSlots.contains(form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i).getValue()))
				voCollSlots.add(form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().get(i).getValue());
		}
		
		form.getLocalContext().setSlots(voCollSlots);
	}

	//WDEV-12039
	private void filterSlotsDisplay(Profile_SlotGenericVoCollection voCollSlots, boolean selectable)
	{
		if(voCollSlots == null)
			return;
		
		voCollSlots.sort(SortOrder.ASCENDING);

		Profile_SlotGenericVo voProfileSlot = null;
		GenForm.lyrDetailsLayer.tabSlotsContainer.grdSlotsGeneralRow sRow = null;
		for (int i = 0; i < voCollSlots.size(); i++)
		{
			voProfileSlot = voCollSlots.get(i);
			if(form.lyrDetails().tabSlots().chkSlotsActiveOnly().getValue())
			{
				if(voProfileSlot.getIsActive())
				{
					sRow = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().newRow();
					populateSlotsRow(sRow, voProfileSlot, selectable);	
				}
			}
			else
			{
				sRow = form.lyrDetails().tabSlots().grdSlotsGeneral().getRows().newRow();
				populateSlotsRow(sRow, voProfileSlot, selectable);	
			}
		}
	}

	protected void onCmbSlotTypeValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdParentChildSlotsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	//WDEV-16799 - DoS control is now a query combo to avoid exceeded result limit messages from hibernate on form open.
	@Override
	protected void onQmbFilterDirectoryOfServiceTextSubmited(String value)throws PresentationLogicException
	{
		if (value != null && value.length()> 0)
		{
		DirectoryOfServiceVo voDosFilter = new DirectoryOfServiceVo();
		voDosFilter.setIsActive(Boolean.TRUE);
		voDosFilter.setDoSName(value);
		
		listDos(voDosFilter);
		}
		
	}
	//WDEV-16799
	private void listDos(DirectoryOfServiceVo voDosFilter) 
	{		
			form.qmbFilterDirectoryOfService().clear();
			DirectoryOfServiceVoCollection voCollDoS = domain.listDOS(voDosFilter,null);	//wdev-20262
			
			if (voCollDoS == null || voCollDoS.size() == 0)
			{	
				form.qmbFilterDirectoryOfService().showOpened();
				return;	
			}
						
			for (int i=0; i<voCollDoS.size(); i++)
			{
				form.qmbFilterDirectoryOfService().newRow(voCollDoS.get(i), voCollDoS.get(i).getDoSName());	
			}
			
			if (voCollDoS.size() == 1)
			{
				form.qmbFilterDirectoryOfService().setValue(voCollDoS.get(0));
			}
			else
			{
				form.qmbFilterDirectoryOfService().showOpened();
			}
	}
	//WDEV-19518
	@Override
	protected void onChkCaseNotesNotRequiredValueChanged()	throws PresentationLogicException
	{
		//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setValue(null);
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();
		
		Sch_ProfileGenericVo profileVo = form.getLocalContext().getCurrentProfile();
		profileVo.setCaseNoteFolderNotRequired(form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue());
		if (form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue())
			profileVo.setCaseNoteFolderLocation(null);
		form.getLocalContext().setCurrentProfile(profileVo);
		
		//WDEV-21203
		if(Boolean.TRUE.equals(form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().getValue()))
		{
			form.lyrDetails().tabGeneralDetails().GroupHospital().setValue(null);
			form.lyrDetails().tabGeneralDetails().cmbOtherHosp().setValue(null);
		}
		
		updateControlState();
		
	}

	/*@Override
	protected void onBtnCaseNotesLocationClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Admin.LocationSelect, new Object[]{Boolean.TRUE});
		
	}*/

	@Override
	protected void onGrdActivitiesSlotsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
		
	}

	@Override
	protected void onGrdSlotsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
		
	}

	@Override
	protected void onBtnPreviewClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.ProfilePreview);
		
	}

	//wdev-19921
	protected void onBtnCloneThisProfileClick() throws PresentationLogicException
	{
		cloneRecord();
		
	}

	//wdev-19921
	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateRecord();
		
	}

	//wdev-19921
	protected void onBtnAddClick() throws PresentationLogicException
	{
		addRecord();
		
	}

	//wdev-20074
	protected void onRadioButtonGroupFlexibleProfileValueChanged() throws PresentationLogicException
	{
		if( GroupFlexibleProfileEnumeration.rdoYes.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()))
		{
			form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setValue(false);
			loadActivities();
		}
		
		updateControlState();
		
	}

	//wdev-20074
	protected void onRadioButtonGroupProfileTypeValueChanged() throws PresentationLogicException
	{
		cmbHospitalValueChanged();
		radioButtonGroupProfileTypeValueChanged();
		cmbSpecialityValueChanged();
		updateControlState();
		
	}
	private void radioButtonGroupProfileTypeValueChanged()
	{
		if( form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue().equals(GroupProfileTypeEnumeration.rdoOutpatient))
		{
			clearProfileTheatreControls();
		}
		else if( form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue().equals(GroupProfileTypeEnumeration.rdoTheatre))
		{
			clearOutpatientControls();
			
			form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(null);
			form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(null);
		}
		else if( form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue().equals(GroupProfileTypeEnumeration.rdoWardAttendance))
		{
			clearProfileTheatreControls();
			form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setValue(false);
		}
		
		
	}
	
	private void clearProfileTheatreControls()
	{
		form.lyrDetails().tabGeneralDetails().cmbTheatreType().setValue(null);
		form.lyrDetails().tabGeneralDetails().chklistAnaesthetictype().setValues(null);
		//WDEV-20939
		if(form.getLocalContext().getCurrentProfileIsNotNull() && form.getLocalContext().getCurrentProfile().getID_Sch_ProfileIsNotNull())
			form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(SchProfileType.OUTPATIENT.equals(form.getLocalContext().getCurrentProfile().getProfileType())
																				&& !Boolean.TRUE.equals(form.getLocalContext().getCurrentProfile().getIsFixed())
																				? GroupFlexibleProfileEnumeration.rdoYes
																				: GroupFlexibleProfileEnumeration.rdoNo		
																				);
		
		else
			form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(GroupFlexibleProfileEnumeration.rdoNo	);
	}
	private void clearOutpatientControls()
	{
		form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().setValue(null);
		form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().setValue(null);
		form.lyrDetails().tabGeneralDetails().chkCaseNotesNotRequired().setValue(null);
		//form.lyrDetails().tabGeneralDetails().txtCaseNoteLocation().setValue(null);
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();
		form.lyrDetails().tabGeneralDetails().cmbConsMediaType().setValue(null);
		
		
	}
		
	//wdev-20074
	protected void onChkProfileHasChooseAndBookActivityValueChanged() throws PresentationLogicException
	{
		chkProfileHasChooseAndBookActivityValueChanged();
		
	}
	private void chkProfileHasChooseAndBookActivityValueChanged()
	{
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
			if( !ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals(new String("Local Only")) &&  GroupFlexibleProfileEnumeration.rdoNo.equals(form.lyrDetails().tabGeneralDetails().GroupFlexibleProfile().getValue()))
			{
				if( form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue() == true)
				{
					form.lyrDetails().tabDOS().setHeaderVisible(true);
					loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(), false);
				}
				else
					form.lyrDetails().tabDOS().setHeaderVisible(false);
				
							
			}
			
		}
	}

	//wdev-20233
	protected void onQmbLocationValueChanged() throws PresentationLogicException
	{
		cmbSpecialityValueChanged();	//wdev-20074
		
	}

	//wdev-20233
	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		if( form.lyrDetails().tabGeneralDetails().cmbHospital().getValue() == null )
		{
			engine.showMessage("Select a Hospital");
			return;
		}
		form.lyrDetails().tabGeneralDetails().qmbLocation().clear();
		LocShortVoCollection tempColl = null;
		
		if( GroupProfileTypeEnumeration.rdoOutpatient.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
			tempColl = domain.getLocationByParent(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue() , value, LocationType.CLINIC);
		}
		else if( GroupProfileTypeEnumeration.rdoTheatre.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
			tempColl = domain.getLocationByParent(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue() , value, LocationType.THEATRE);
		}
		else if( GroupProfileTypeEnumeration.rdoWardAttendance.equals(form.lyrDetails().tabGeneralDetails().GroupProfileType().getValue()))
		{
			tempColl = domain.getLocationByParent(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue() , value, LocationType.WARD);
		}
		else
		{
			engine.showMessage("Select a Profile Type");
			return;
		}
		
		if( tempColl == null)
			return;
		
		for (LocShortVo loc : tempColl)
		{
			form.lyrDetails().tabGeneralDetails().qmbLocation().newRow(loc, loc.getName());
		}
		
		if (tempColl.size() == 1)
		{
			form.lyrDetails().tabGeneralDetails().qmbLocation().setValue(tempColl.get(0));
			//updateWardSelection();
		}
		else
		{
			form.lyrDetails().tabGeneralDetails().qmbLocation().showOpened();
		}
		
		cmbSpecialityValueChanged();	//wdev-20074
		
		
	}

	//wdev-20233
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		
		cmbHospitalValueChanged();
		
	}
	private void cmbHospitalValueChanged()
	{
		form.lyrDetails().tabGeneralDetails().qmbLocation().clear();
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();
	}

	//wdev-20233
	protected void onCmbTheatreTypeValueChanged() throws PresentationLogicException
	{
		boolean sessionTypeUrgent = TheatreType.EMERGENCY.equals(form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue()) || TheatreType.EMERGENCY_NON_TO.equals(form.lyrDetails().tabGeneralDetails().cmbTheatreType().getValue());
		
		if (sessionTypeUrgent)
		{
			form.lyrDetails().tabTheatre().grdTheatre().getRows().clear();
			form.lyrDetails().tabTheatre().grdTheatreService().getRows().clear();
		}
			
		updateControlState();
		
	}

	//wdev-20074
	protected void onQmbCaseNoteLocationValueChanged() throws PresentationLogicException
	{
		setCaseNoteFolderLocation(form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValue(), false);
		
	}
	//WDEV-21203
	private void populateCaseNoteFolderLocationByHospital(String value, LocationLiteVo hospital)
	{
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();
		LocShortVoCollection tempColl = null;
		
		tempColl = domain.getCaseNoteFolderLocationByParent(hospital, value, null);
		
		if( tempColl == null)
			return;
		
		for (LocShortVo loc : tempColl)
		{
			form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().newRow(loc, loc.getName());
		}
		
		if (tempColl.size() == 1)
		{
			form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().setValue(tempColl.get(0));
			setCaseNoteFolderLocation(form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().getValue(), false); //WDEV-20798
			//updateWardSelection();
		}
		else
		{
			form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().showOpened();
		}
	}

	//wdev-20074
	protected void onQmbCaseNoteLocationTextSubmited(String value) throws PresentationLogicException
	{
		//WDEV-21203
		if(GroupHospitalEnumeration.rdoOtherHospital.equals(form.lyrDetails().tabGeneralDetails().GroupHospital().getValue()))
		{
			if (form.lyrDetails().tabGeneralDetails().cmbOtherHosp().getValue() == null )
			{
				engine.showMessage("Select Other Hospital");
				return;
			}
			populateCaseNoteFolderLocationByHospital(value, form.lyrDetails().tabGeneralDetails().cmbOtherHosp().getValue());
		}
		else
		{
			if(form.lyrDetails().tabGeneralDetails().cmbHospital().getValue() == null )
			{
				engine.showMessage("Select a Hospital");
				return;
			}
			populateCaseNoteFolderLocationByHospital(value, form.lyrDetails().tabGeneralDetails().cmbHospital().getValue());
		}
		
	}

	//wdev-20262
	protected void onGrdServiceFunctionsGridCheckBoxClicked(int column, grdServiceFunctionsRow row, boolean isChecked) throws PresentationLogicException
	{
		/* no need to do anything now WDEV-20896
		if( form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().isVisible() && form.lyrDetails().tabGeneralDetails().chkProfileHasChooseAndBookActivity().getValue() == true)
			loadDos(form.lyrDetails().tabGeneralDetails().cmbSpeciality().getValue(), false);
		*/
		
	}

	private boolean profileHasGeneratedSessions(Sch_ProfileRefVo profile) 
	{
		if (profile == null)
			return false;

		int sesionCount = domain.countSessionsForProfile(profile);

		if (sesionCount > 0)
			return true;
		else
			return false;
	}	
	//----------

	//WDEV-21203
	protected void onRadioButtonGroupHospitalValueChanged()  throws PresentationLogicException 
	{
		form.lyrDetails().tabGeneralDetails().cmbOtherHosp().setVisible(GroupHospitalEnumeration.rdoOtherHospital.equals(form.lyrDetails().tabGeneralDetails().GroupHospital().getValue()));
		form.lyrDetails().tabGeneralDetails().cmbOtherHosp().setValue(null);
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();
		form.getLocalContext().getCurrentProfile().setCaseNoteFolderLocation(null);
	}


	protected void onCmbOtherHospValueChanged() throws PresentationLogicException 
	{
		form.lyrDetails().tabGeneralDetails().qmbCaseNoteLocation().clear();
		form.getLocalContext().getCurrentProfile().setCaseNoteFolderLocation(null);
	}

	@Override
	protected void onChkProfileActiveValueChanged() throws PresentationLogicException
	{
		form.lyrDetails().tabGeneralDetails().chkReadyToGenerateSessions().setValue(Boolean.FALSE);
		updateControlState();
	}

}	
