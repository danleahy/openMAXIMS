//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Petru Rotariu using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.appointmentarrivaldialog;

import java.util.ArrayList;

import ims.framework.enumerations.DialogResult;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.LateTimeArrivalRecordVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args[0] instanceof DateTime)
			form.getLocalContext().setApptDateTime((DateTime)args[0]);
		
		form.timArrivalTime().setValue(new Time());
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUI())
		{
			populateDataFromScreen();
			engine.close(DialogResult.OK);
		}
	}
	@Override
	protected void onChklNotReadyToSeeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(Boolean.TRUE.equals(form.chklNotReadyToSee().getValue()))
		{
			form.chkPatientNotSeen().setValue(null);
			form.chkReadyToSee().setValue(null);
		}
	}

	@Override
	protected void onChkReadyToSeeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(Boolean.TRUE.equals(form.chkReadyToSee().getValue()));
		{
			form.chkPatientNotSeen().setValue(null);
			form.chklNotReadyToSee().setValue(null);
		}
	}

	@Override
	protected void onChkPatientNotSeenValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(Boolean.TRUE.equals(form.chkPatientNotSeen().getValue()))
		{
			form.chkReadyToSee().setValue(null);
			form.chklNotReadyToSee().setValue(null);
		}
	}
	
	private void populateDataFromScreen() 
	{	
		LateTimeArrivalRecordVo arrivalRecords = new LateTimeArrivalRecordVo();
		arrivalRecords.setArrivalTime(form.timArrivalTime().getValue());
		arrivalRecords.setCareProfessionalNotReadyToSee(form.chklNotReadyToSee().getValue());
		arrivalRecords.setCareProfessionalReadyToSee(form.chkReadyToSee().getValue());
		arrivalRecords.setCouldNotBeSeen(form.chkPatientNotSeen().getValue());
		form.getGlobalContext().Scheduling.setLateArrivalRecord(arrivalRecords);
	}
	
	public boolean validateUI()
	{
		ArrayList<String> error = new ArrayList<String>();

		if( form.timArrivalTime().getValue() == null)
			error.add("Please enter an appointment arrival time.");
		DateTime apptDateTime = form.getLocalContext().getApptDateTime();

		if(form.timArrivalTime().getValue() != null)
		{
			Time arrivalTime = form.timArrivalTime().getValue();
			Boolean arrivalTimeIsGreaterApptTime = apptDateTime !=null && apptDateTime.getTime() != null && arrivalTime != null &&  arrivalTime.isGreaterThan(apptDateTime.getTime()); 
			if (arrivalTimeIsGreaterApptTime && !(Boolean.TRUE.equals(form.chklNotReadyToSee().getValue())
					|| Boolean.TRUE.equals(form.chkPatientNotSeen().getValue())
					|| Boolean.TRUE.equals(form.chkReadyToSee().getValue())))
			{
				error.add("Please indicate if the Patient could be seen or not by a Care Professional.");
			}
		}
		if(error.size()>0)
		{
			engine.showErrors(error.toArray(new String[error.size()]));
			return false;
		}
		return true;
	}
}
