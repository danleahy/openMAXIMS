//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.dosspecialtyselection;

import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.forms.dosspecialtyselection.GenForm.grdDOSRow;
import ims.scheduling.vo.DirectoryOfServiceVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{

		if (args != null && args.length > 1 && args[0] instanceof LocationLiteVo && args[1] instanceof ServiceShortVo)
		{
			form.getLocalContext().setLocation((LocationRefVo) args[0]);
			form.getLocalContext().setService((ServiceShortVo) args[1]);
		}

		open();

	}

	private void open()
	{
		populateServiceCombo();
		populateDosGrid();

		updateControlsState();
	}

	private void populateServiceCombo()
	{
		form.cmbService().clear();

		ServiceShortVoCollection services = domain.getDosServicesForSpecialtyAndLocation(form.getLocalContext().getService(), form.getLocalContext().getLocation());

		if (services == null)
			return;

		for (int i = 0; i < services.size(); i++)
		{
			if (services.get(i) == null)
				continue;

			form.cmbService().newRow(services.get(i), services.get(i).getServiceName());
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(form.getLocalContext().getSelectedDos());
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onCmbServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		populateDosGrid();
	}

	private void populateDosGrid()
	{
		form.grdDOS().getRows().clear();

		DirectoryOfServiceVoCollection dosColl = domain.getDosForServiceAndLocation(form.getLocalContext().getService(), form.getLocalContext().getLocation(), form.cmbService().getValue());

		if (dosColl == null)
			return;

		for (int i = 0; i < dosColl.size(); i++)
		{

			if (dosColl.get(i) == null)
				continue;

			grdDOSRow row = form.grdDOS().getRows().newRow();

			row.setColDosId(dosColl.get(i).getDoSId());
			row.setColDosName(dosColl.get(i).getDoSName());
			row.setColService(dosColl.get(i).getService() != null ? dosColl.get(i).getService().getServiceName() : "");

			row.setValue(dosColl.get(i));
		}
	}

	@Override
	protected void onGrdDOSGridCheckBoxClicked(int column, grdDOSRow row, boolean isChecked) throws PresentationLogicException
	{
		if (isChecked)
		{
			if (form.getLocalContext().getSelectedDos() == null)
				form.getLocalContext().setSelectedDos(new DirectoryOfServiceVoCollection());

			form.getLocalContext().getSelectedDos().add(row.getValue());
		}
		else
			form.getLocalContext().getSelectedDos().remove(row.getValue());

		updateControlsState();

	}

	private void updateControlsState()
	{
		boolean recordsSlected = form.getLocalContext().getSelectedDos() != null && form.getLocalContext().getSelectedDos().size() > 0;

		form.btnOK().setEnabled(recordsSlected);
		form.cmbService().setEnabled(!recordsSlected);

	}
}
