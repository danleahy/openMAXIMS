//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.futureappointmentdetails;

import ims.RefMan.vo.FutureAppointmentStatusVo;
import ims.RefMan.vo.FutureAppointmentStatusVoCollection;
import ims.RefMan.vo.LinkedDiagnosticVo;
import ims.RefMan.vo.OPAVo;
import ims.RefMan.vo.lookups.Recurring;
import ims.RefMan.vo.lookups.TriageOutcomeAppointmentDay;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ServiceDiagnosticsVo;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.ServiceFunction;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.TimeUnitsSecondsToMonthsCollection;
import ims.framework.FormName;
import ims.framework.controls.CheckBox;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.forms.futureappointmentdetails.GenForm.GroupRequestEnumeration;
import ims.scheduling.forms.futureappointmentdetails.GenForm.lyrTabsLayer.tabLinkedOpaContainer.GroupNoLinkedApptsEnumeration;
import ims.scheduling.forms.futureappointmentdetails.GenForm.lyrTabsLayer.tabOpaAndDiagnosticsContainer.GroupDiagnosticDayEnumeration;
import ims.scheduling.forms.futureappointmentdetails.GenForm.lyrTabsLayer.tabOpaAndDiagnosticsContainer.grdDiagnosticRow;
import ims.scheduling.forms.futureappointmentdetails.GenForm.lyrTabsLayer.tabRecurringApptsContainer.GroupEnuRecurringEnumeration;
import ims.scheduling.forms.futureappointmentdetails.GenForm.lyrTabsLayer.tabRecurringApptsContainer.GroupYesNoEnumeration;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.ServiceAndFunctionForFutureApptsVo;
import ims.scheduling.vo.lookups.FutureAppointmentSource;
import ims.scheduling.vo.lookups.FutureAppointmentStatus;
import ims.scheduling.vo.lookups.RequestToSchedule;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	public static final Integer SHOW_RIE_BUTTON = 1;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args != null && args.length > 0 && SHOW_RIE_BUTTON.equals(args[0]))
		{
			form.getLocalContext().setShow_RIE_Button(SHOW_RIE_BUTTON);
		}
		//WDEV-23051
		if (args != null && args.length > 0 && args[1] instanceof Boolean)
		{
			form.getLocalContext().setHideRIEandEdit(true);
		}
		
		initialise();
		open();
	}
	

	private void initialise()
	{
		form.lyrTabs().tabOPA().setHeaderVisible(false);
		form.lyrTabs().tabOPA().setVisible(false);
		
		form.lyrTabs().tabLinkedOpa().setHeaderVisible(false);
		form.lyrTabs().tabLinkedOpa().setVisible(false);
		
		form.lyrTabs().tabOpaAndDiagnostics().setHeaderVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().setVisible(false);
		
		form.lyrTabs().tabRecurringAppts().setHeaderVisible(false);
		form.lyrTabs().tabRecurringAppts().setVisible(false);
		
		if (form.getGlobalContext().Scheduling.getBookingAppointmentRef() != null)
		{	
			form.getLocalContext().setServiceAndFunctionForAppt(domain.getServiceAndFunctionForAppt(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
			form.getLocalContext().setCatsReferral(domain.getCatsReferralForAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		}
		else if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull()) //WDEV-21210
		{
			form.getLocalContext().setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			form.getLocalContext().setServiceAndFunctionForAppt(domain.getCatsReferralServiceAndfunction(form.getGlobalContext().RefMan.getCatsReferral()));
		}
		
		Object hcp = domain.getHcpLiteUser();
		if(hcp instanceof HcpLiteVo)
		{
			form.getLocalContext().setLoggedHCP((HcpLiteVo) hcp);
		}
		form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().setValue(GroupEnuRecurringEnumeration.rdoDaily);
		bindUnitCombos();
	}
	
	private void open()
	{
		FutureAppointmentDetailsVo futureAppointment = form.getGlobalContext().Scheduling.getFutureAppointmentDetails() != null ? (FutureAppointmentDetailsVo) form.getGlobalContext().Scheduling.getFutureAppointmentDetails().clone() : null;
		
		form.getLocalContext().setSelectedFutureAppointment(futureAppointment);
		
		populateScreenFromData(futureAppointment);
		
		form.setMode((futureAppointment == null || futureAppointment.getID_FutureAppointmentDetails() == null) ? FormMode.EDIT : FormMode.VIEW);
	}

	private void populateScreenFromData(FutureAppointmentDetailsVo futureAppointment)
	{
		form.txtComment().setValue(null);
		
		if (futureAppointment == null)
			return;
			
		if (futureAppointment.getRequestToSchedule().equals(RequestToSchedule.OPA))
		{
			populateOPATab(futureAppointment);
			
		}
		else if (futureAppointment.getRequestToSchedule().equals(RequestToSchedule.LINKED_OPA))
		{
			populateLinkedOPATab(futureAppointment);
			
		}
		else if (futureAppointment.getRequestToSchedule().equals(RequestToSchedule.OPA_AND_LINKED_DIAGNOSTICS))
		{
			populateOPAandDiagnosticTab(futureAppointment);
			
		}
		else if (futureAppointment.getRequestToSchedule().equals(RequestToSchedule.RECURRING_APPOINTMENTS))
		{
			populateRecurringApptTab(futureAppointment);
			
		}
		
		form.txtComment().setValue(futureAppointment.getComments());
		
		updateControlsState();
	}

	private void populateLinkedOPATab(FutureAppointmentDetailsVo futureAppointment)
	{
		form.GroupRequest().setValue(GroupRequestEnumeration.rdoLinkedOPAs);
		form.lyrTabs().showtabLinkedOpa();
		
		if (futureAppointment.getNumberOfLinkedRecurringApptsToBook() != null)
		{
			if (futureAppointment.getNumberOfLinkedRecurringApptsToBook().equals(2))
				form.lyrTabs().tabLinkedOpa().GroupNoLinkedAppts().setValue(GroupNoLinkedApptsEnumeration.rdo2);
			else if (futureAppointment.getNumberOfLinkedRecurringApptsToBook().equals(3))
				form.lyrTabs().tabLinkedOpa().GroupNoLinkedAppts().setValue(GroupNoLinkedApptsEnumeration.rdo3);
			
		}
		
	}


	private void populateRecurringApptTab(FutureAppointmentDetailsVo futureAppointment)
	{
		clearRecurringAppointmentsTab();
		form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().setValue(GroupEnuRecurringEnumeration.rdoDaily);
		form.GroupRequest().setValue(GroupRequestEnumeration.rdoRecurringAppt);
		form.lyrTabs().showtabRecurringAppts();
		
		if (futureAppointment == null)
			return;
		
		if (Boolean.TRUE.equals(futureAppointment.getSameService()))
			form.lyrTabs().tabRecurringAppts().GroupYesNo().setValue(GroupYesNoEnumeration.rdoYes);
		else
			form.lyrTabs().tabRecurringAppts().GroupYesNo().setValue(GroupYesNoEnumeration.rdoNo);
		
		populateServicesForRecurringAppointments();
		form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setValue(futureAppointment.getFirstApptService());
		
		//in view mode (service was already saved), make sure the value is populated as it might have been removed
		if (futureAppointment.getFirstApptService() != null && futureAppointment.getID_FutureAppointmentDetails() != null && form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().getValue() == null)
		{
			form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().newRow(futureAppointment.getFirstApptService(), futureAppointment.getFirstApptService().getServiceName());
			form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setValue(futureAppointment.getFirstApptService());
		}
		
		populateFunctionsForRecurringAppts();//WDEV-21163
		form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().setValue(futureAppointment.getFirstApptFunction());
		
		//in view mode (function was already saved), make sure the value is populated as it might have been removed
		if (futureAppointment.getFirstApptFunction() != null && futureAppointment.getID_FutureAppointmentDetails() != null && form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().getValue() == null)
		{
			form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().newRow(futureAppointment.getFirstApptFunction(), futureAppointment.getFirstApptFunction().getText());
			form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().setValue(futureAppointment.getFirstApptFunction());
		}
		
		form.lyrTabs().tabRecurringAppts().dteWeekCommencing().setValue(futureAppointment.getStartingWeek());
		
		populateRecurringFromData(futureAppointment);
		
		form.lyrTabs().tabRecurringAppts().chkMon().setValue(futureAppointment.getMon());
		form.lyrTabs().tabRecurringAppts().chkTues().setValue(futureAppointment.getTues());
		form.lyrTabs().tabRecurringAppts().chkWed().setValue(futureAppointment.getWed());
		form.lyrTabs().tabRecurringAppts().chkThurs().setValue(futureAppointment.getThurs());
		form.lyrTabs().tabRecurringAppts().chkFri().setValue(futureAppointment.getFri());
		form.lyrTabs().tabRecurringAppts().chkSat().setValue(futureAppointment.getSat());
		form.lyrTabs().tabRecurringAppts().chkSun().setValue(futureAppointment.getSun());
	}


	private void populateOPAandDiagnosticTab(FutureAppointmentDetailsVo futureAppointment)
	{
		clearOPAandDiagnosticTab();
		
		form.GroupRequest().setValue(GroupRequestEnumeration.rdoOpaDiagnosis);
		form.lyrTabs().showtabOpaAndDiagnostics();
		
		if (futureAppointment == null)
			return;
		
		form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(futureAppointment.getFirstApptService()));
		
		form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().initializeResponsibleHcp(MosType.HCP, true, futureAppointment.getFirstApptService(), null);
		
		populateOtherHCPForOPAandDiagnostic();
		
		if (futureAppointment.getFirstApptToSee() != null)
		{
			form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setValue(futureAppointment.getFirstApptToSee().getConsultant());
			form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setValue(futureAppointment.getFirstApptToSee().getSPR());
			form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setValue(futureAppointment.getFirstApptToSee().getAssociateSpecialist());
			form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setValue(futureAppointment.getFirstApptToSee().getAnyDoctorToSee());
			form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setValue(futureAppointment.getFirstApptToSee().getOtherHCP());
			form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().setValue(futureAppointment.getFirstApptToSee().getOtherHCPValue());
			form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setValue(futureAppointment.getFirstApptToSee().getNamedConsultant());
			form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().setValue(futureAppointment.getFirstApptToSee().getNamedConsultantValue());
			
			//in view mode (otherHCP was already saved), make sure the value is populated as it might have been removed
			if (futureAppointment.getFirstApptToSee().getOtherHCPValue() != null && futureAppointment.getID_FutureAppointmentDetails() != null && form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().getValue() == null)
			{
				form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().newRow(futureAppointment.getFirstApptToSee().getOtherHCPValue(), futureAppointment.getFirstApptToSee().getOtherHCPValue().getText());
				form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().setValue(futureAppointment.getFirstApptToSee().getOtherHCPValue());
			}
		}
		
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().setValue(futureAppointment.getFirstApptPeriodValue());
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().setValue(futureAppointment.getFirstApptPeriodType());
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForLinked().setValue(futureAppointment.getFirstApptFutureApptByDate());
		
		if (futureAppointment.getLinkedDiagnostics() != null)
		{
			for (int i = 0; i < futureAppointment.getLinkedDiagnostics().size(); i++)
			{
				LinkedDiagnosticVo diagnostic = futureAppointment.getLinkedDiagnostics().get(i);
				
				if (diagnostic == null)
					continue;
				
				addOrUpdateDiagnosticRow(diagnostic, null);
			}
		}
		
		clearDiagnosticControls(true, false);
		initialiseDiagnosticButtons();
	}


	private void populateOPATab(FutureAppointmentDetailsVo futureAppointment)
	{
		clearOPATab();
		
		form.GroupRequest().setValue(GroupRequestEnumeration.rdoOPA);
		form.lyrTabs().showtabOPA();
		
		if (futureAppointment == null)
			return;
		
		populateServicesForOPA();
		form.lyrTabs().tabOPA().cmbService().setValue(futureAppointment.getFirstApptService());
		
		form.lyrTabs().tabOPA().ccNamedConsultant().initializeResponsibleHcp(MosType.HCP, true, futureAppointment.getFirstApptService(), null);
		
		//in view mode (service was already saved), make sure the value is populated as it might have been removed
		if (futureAppointment.getFirstApptService() != null && futureAppointment.getID_FutureAppointmentDetails() != null && form.lyrTabs().tabOPA().cmbService().getValue() == null)
		{
			form.lyrTabs().tabOPA().cmbService().newRow(futureAppointment.getFirstApptService(), futureAppointment.getFirstApptService().getServiceName());
			form.lyrTabs().tabOPA().cmbService().setValue(futureAppointment.getFirstApptService());
		}
		
		form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(futureAppointment.getFirstApptService()));
		
		populateFunctionsForOPA();
		form.lyrTabs().tabOPA().cmbFunction().setValue(futureAppointment.getFirstApptFunction());
		
		//in view mode (function was already saved), make sure the value is populated as it might have been removed
		if (futureAppointment.getFirstApptFunction() != null && futureAppointment.getID_FutureAppointmentDetails() != null && form.lyrTabs().tabOPA().cmbFunction().getValue() == null)
		{
			form.lyrTabs().tabOPA().cmbFunction().newRow(futureAppointment.getFirstApptFunction(), futureAppointment.getFirstApptFunction().getText());
			form.lyrTabs().tabOPA().cmbFunction().setValue(futureAppointment.getFirstApptFunction());
		}
		
		populateOtherHCPForOPA();
		
		if (futureAppointment.getFirstApptToSee() != null)
		{
			form.lyrTabs().tabOPA().chkConsultant().setValue(futureAppointment.getFirstApptToSee().getConsultant());
			form.lyrTabs().tabOPA().chkSPR().setValue(futureAppointment.getFirstApptToSee().getSPR());
			form.lyrTabs().tabOPA().chkAssociateSpec().setValue(futureAppointment.getFirstApptToSee().getAssociateSpecialist());
			form.lyrTabs().tabOPA().chkAnyDoctor().setValue(futureAppointment.getFirstApptToSee().getAnyDoctorToSee());
			form.lyrTabs().tabOPA().chkOtherHcp().setValue(futureAppointment.getFirstApptToSee().getOtherHCP());
			form.lyrTabs().tabOPA().cmbOtherHcp().setValue(futureAppointment.getFirstApptToSee().getOtherHCPValue());
			
			//in view mode (otherHCP was already saved), make sure the value is populated as it might have been removed
			if (futureAppointment.getFirstApptToSee().getOtherHCPValue() != null && futureAppointment.getID_FutureAppointmentDetails() != null && form.lyrTabs().tabOPA().cmbOtherHcp().getValue() == null)
			{
				form.lyrTabs().tabOPA().cmbOtherHcp().newRow(futureAppointment.getFirstApptToSee().getOtherHCPValue(), futureAppointment.getFirstApptToSee().getOtherHCPValue().getText());
				form.lyrTabs().tabOPA().cmbOtherHcp().setValue(futureAppointment.getFirstApptToSee().getOtherHCPValue());
			}
			
			form.lyrTabs().tabOPA().chkNamedConsultant().setValue(futureAppointment.getFirstApptToSee().getNamedConsultant());
			form.lyrTabs().tabOPA().ccNamedConsultant().setValue(futureAppointment.getFirstApptToSee().getNamedConsultantValue());
		}
		
		form.lyrTabs().tabOPA().intScheduledFor().setValue(futureAppointment.getFirstApptPeriodValue());
		form.lyrTabs().tabOPA().cmbScheduledFor().setValue(futureAppointment.getFirstApptPeriodType());
		form.lyrTabs().tabOPA().dteScheduledFor().setValue(futureAppointment.getFirstApptFutureApptByDate());
		form.lyrTabs().tabOPA().chkDoNotChangeInterval().setValue(futureAppointment.getDoNotMoveDate()); //WDEV-23475
		
	}


	private void bindUnitCombos()
	{
		
		TimeUnitsSecondsToMonthsCollection lookupCollection = LookupHelper.getTimeUnitsSecondsToMonths(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(TimeUnitsSecondsToMonths.SECONDS.equals(lookupCollection.get(x)) || TimeUnitsSecondsToMonths.MINUTES.equals(lookupCollection.get(x)) || TimeUnitsSecondsToMonths.HOURS.equals(lookupCollection.get(x)))
				continue;
			
			form.lyrTabs().tabOPA().cmbScheduledFor().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	
	private String[] validateUIRules()
	{
		ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		
		if (form.lyrTabs().tabOPA().isVisible())
		{
			//WDEV-22336
			
			if (form.lyrTabs().tabOPA().cmbService().getVisible() &&  form.lyrTabs().tabOPA().cmbService().getValue() == null)
				listOfErrors.add("Service is mandatory.");
			
			Boolean consultantChecked = form.lyrTabs().tabOPA().chkConsultant().isVisible() && form.lyrTabs().tabOPA().chkConsultant().getValue();
			Boolean sprChecked = form.lyrTabs().tabOPA().chkSPR().isVisible() && form.lyrTabs().tabOPA().chkSPR().getValue();
			Boolean specialistChecked =  form.lyrTabs().tabOPA().chkAssociateSpec().isVisible() && form.lyrTabs().tabOPA().chkAssociateSpec().getValue();
			Boolean anyDoctorChecked = form.lyrTabs().tabOPA().chkAnyDoctor().isVisible() && form.lyrTabs().tabOPA().chkAnyDoctor().getValue();
			Boolean otherHCPChecked = form.lyrTabs().tabOPA().chkOtherHcp().isVisible() && form.lyrTabs().tabOPA().chkOtherHcp().getValue();
			Boolean namedConsultantChecked = form.lyrTabs().tabOPA().chkNamedConsultant().isVisible() && form.lyrTabs().tabOPA().chkNamedConsultant().getValue();
			
			Boolean oneValueChecked = false;
			
			if(consultantChecked || sprChecked || specialistChecked || anyDoctorChecked ||otherHCPChecked || namedConsultantChecked )
				oneValueChecked = true;
			
			Boolean toSeeVisible = 	form.lyrTabs().tabOPA().chkConsultant().isVisible() || 
									form.lyrTabs().tabOPA().chkSPR().isVisible() ||
									form.lyrTabs().tabOPA().chkAssociateSpec().isVisible() || 
									form.lyrTabs().tabOPA().chkAnyDoctor().isVisible() ||
									form.lyrTabs().tabOPA().chkOtherHcp().isVisible() ||
									form.lyrTabs().tabOPA().chkNamedConsultant().isVisible();
			
			if (!oneValueChecked && toSeeVisible)
				listOfErrors.add("To See is mandatory.");
			
			if (form.lyrTabs().tabOPA().ccNamedConsultant().isVisible() &&  form.lyrTabs().tabOPA().ccNamedConsultant().getValue() == null)
			listOfErrors.add("Named Consultant is mandatory.");
		
			if (form.lyrTabs().tabOPA().cmbOtherHcp().getVisible() &&  form.lyrTabs().tabOPA().cmbOtherHcp().getValue() == null)
				listOfErrors.add("Other HCP is mandatory.");
			//WDEV-22336 ends here
			
			if (form.lyrTabs().tabOPA().intScheduledFor().getValue() == null || form.lyrTabs().tabOPA().cmbScheduledFor().getValue() == null)
				listOfErrors.add("To be Scheduled for is mandatory.");
		}
		
		if (form.lyrTabs().tabOpaAndDiagnostics().isVisible())
		{
			if(!form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().getValue() && !form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().getValue() && !form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().getValue() && !form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().getValue() && !form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getValue() && !form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().getValue())
				listOfErrors.add("To See is mandatory.");
			
			if (form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().isVisible() &&  form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().getValue() == null)
				listOfErrors.add("Named Consultant is mandatory.");
			
			if (form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().getVisible() &&  form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().getValue() == null)
				listOfErrors.add("Other HCP is mandatory.");
			
			if (form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().getValue() == null || form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().getValue() == null)
				listOfErrors.add("To be Scheduled for is mandatory.");
			
			if (form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getRows().size() == 0)
				listOfErrors.add("At least one Diagnostic must be recorded.");
			
		}
		if (form.lyrTabs().tabRecurringAppts().isVisible())
		{
			if(form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().getValue() == null)
				listOfErrors.add("Service is mandatory.");
			
			if(form.lyrTabs().tabRecurringAppts().dteWeekCommencing().getValue() == null)//WDEV-22360 
				listOfErrors.add("Starting week commencing is mandatory.");
				
			if(GroupEnuRecurringEnumeration.None.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()) || form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()== null)
				listOfErrors.add("A Recurring option must be selected.");
			
			if(form.lyrTabs().tabRecurringAppts().intOccueancs().getValue() == null)
				listOfErrors.add("End After Occurrences is mandatory.");
			
			if(GroupEnuRecurringEnumeration.rdoWeekly.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()) && ((!(isAtLeastADaySelected() || form.lyrTabs().tabRecurringAppts().intNoOfTime().getValue() != null)) || (isAtLeastADaySelected() &&  form.lyrTabs().tabRecurringAppts().intNoOfTime().getValue() != null)))
				listOfErrors.add("Please enter the number of times per week or days.");
			
			if(GroupEnuRecurringEnumeration.rdoMonthly.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
			{
				if(form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().getValue() == null || !isAtLeastADaySelected() || form.lyrTabs().tabRecurringAppts().intNMonth().getValue() == null)
					listOfErrors.add("Please enter the week, day(s) and instance of each month.");
			}	
		}
		
		String[] uiResults = new String[listOfErrors.size()];
		listOfErrors.toArray(uiResults);
		
		return uiResults;
	}
	
	private void populateRecurringFromData(FutureAppointmentDetailsVo futureAppointment)
	{
		if(futureAppointment == null)
			return;
		
		if(futureAppointment.getRecurringIsNotNull()) 
		{	
			GroupEnuRecurringEnumeration value = null;
			Recurring recurring = futureAppointment.getRecurring();
			if(Recurring.DAILY.equals(recurring))
			{
				value = GroupEnuRecurringEnumeration.rdoDaily;
			}
			else if(Recurring.WEEKLY.equals(recurring))
			{
				value = GroupEnuRecurringEnumeration.rdoWeekly;
			}
			else if(Recurring.MONTHLY.equals(recurring))
			{
				value = GroupEnuRecurringEnumeration.rdoMonthly;
			}
			else
				value = GroupEnuRecurringEnumeration.None;	
			
			form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().setValue(value);
			form.getLocalContext().setRecurring(futureAppointment.getRecurring());
		}
		form.lyrTabs().tabRecurringAppts().intNoOfTime().setValue(futureAppointment.getNoOfTimesPerWeek());
		form.lyrTabs().tabRecurringAppts().intOccueancs().setValue(futureAppointment.getEndAfterNOccurrences());
		form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().setValue(futureAppointment.getWeekInTheMonth());
		form.lyrTabs().tabRecurringAppts().intNMonth().setValue(futureAppointment.getEveryNMonths());
		
	
	}
	
	private Boolean isAtLeastADaySelected()
	{
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkFri().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkMon().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkSat().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkSun().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkThurs().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkTues().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.lyrTabs().tabRecurringAppts().chkWed().getValue()))
			return true;
			
		return false;
	}
	
	private String[] validateDiagnosticUIRules()
	{
		ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		
		if (form.lyrTabs().tabOpaAndDiagnostics().isVisible())
		{	
			if (form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().isEnabled() && form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().isEnabled() && (form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().getValue() == null || form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().getValue() == null))
				listOfErrors.add("To be Scheduled for is mandatory.");
			
		}
		
		String[] uiResults = new String[listOfErrors.size()];
		listOfErrors.toArray(uiResults);
		
		return uiResults;
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		FutureAppointmentDetailsVo futureAppointment = populateDataFromScreen(form.getLocalContext().getSelectedFutureAppointment());
		
		String[] errors = futureAppointment.validate(validateUIRules());
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		form.getGlobalContext().Scheduling.setFutureAppointmentDetails(futureAppointment);
		
		engine.close(DialogResult.OK);
	}


	private FutureAppointmentDetailsVo populateDataFromScreen(FutureAppointmentDetailsVo futureAppointment)
	{
		if (futureAppointment == null)
			futureAppointment = new FutureAppointmentDetailsVo();
		
		futureAppointment.setSource(FutureAppointmentSource.APPOINTMENT_OUTCOME);
		futureAppointment.setReferral(form.getLocalContext().getCatsReferral());
		
		FutureAppointmentStatusVo status = new FutureAppointmentStatusVo();
		status.setPendingStatus(FutureAppointmentStatus.OPEN);
		status.setStatusDateTime(new DateTime());
		
		Object mosUser = domain.getMosUser();
		
		if(mosUser instanceof MemberOfStaffRefVo)
		{
			status.setAuthoringUser((MemberOfStaffRefVo) mosUser);
		}
		
		futureAppointment.setCurrentStatus(status);
		
		if(futureAppointment.getStatusHistory() == null)
		   futureAppointment.setStatusHistory(new FutureAppointmentStatusVoCollection());
		
		futureAppointment.getStatusHistory().add(status);
		
		if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoOPA))
		{
			populateDataFromOPATab(futureAppointment);
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoLinkedOPAs))
		{
			//no need to code here. When the dialog is closed, the GC will be populated
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoOpaDiagnosis))
		{
			populateDataFromOPAandDiagnosticTab(futureAppointment);
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoRecurringAppt))
		{
			populateDataFromRecurringApptTab(futureAppointment);
		}
		
		futureAppointment.setComments(form.txtComment().getValue());
		
		return futureAppointment;
	}


	private FutureAppointmentDetailsVo populateDataFromRecurringApptTab(FutureAppointmentDetailsVo futureAppointment)
	{
		
		futureAppointment.setSameService(GroupYesNoEnumeration.rdoYes.equals(form.lyrTabs().tabRecurringAppts().GroupYesNo().getValue()));
		futureAppointment.setRequestToSchedule(RequestToSchedule.RECURRING_APPOINTMENTS);
		futureAppointment.setFirstApptService(form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().getValue());
		futureAppointment.setFirstApptFunction(form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().getValue());
		
		futureAppointment.setStartingWeek(form.lyrTabs().tabRecurringAppts().dteWeekCommencing().getValue());

		Recurring recurring = getRecurringFromScreen();
		futureAppointment.setRecurring(recurring);
		futureAppointment.setNoOfTimesPerWeek(form.lyrTabs().tabRecurringAppts().intNoOfTime().getValue());
		futureAppointment.setEndAfterNOccurrences(form.lyrTabs().tabRecurringAppts().intOccueancs().getValue());
		futureAppointment.setWeekInTheMonth(form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().getValue());
		futureAppointment.setEveryNMonths(form.lyrTabs().tabRecurringAppts().intNMonth().getValue());
		
		futureAppointment.setMon(form.lyrTabs().tabRecurringAppts().chkMon().getValue());
		futureAppointment.setTues(form.lyrTabs().tabRecurringAppts().chkTues().getValue());
		futureAppointment.setWed(form.lyrTabs().tabRecurringAppts().chkWed().getValue());
		futureAppointment.setThurs(form.lyrTabs().tabRecurringAppts().chkThurs().getValue());
		futureAppointment.setFri(form.lyrTabs().tabRecurringAppts().chkFri().getValue());
		futureAppointment.setSat(form.lyrTabs().tabRecurringAppts().chkSat().getValue());
		futureAppointment.setSun(form.lyrTabs().tabRecurringAppts().chkSun().getValue());
		
		return futureAppointment;
	}


	private Recurring getRecurringFromScreen()
	{
		Recurring recurring= null;
		
		if(GroupEnuRecurringEnumeration.rdoDaily.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
		{
			 recurring = Recurring.DAILY;
		}
		else if(GroupEnuRecurringEnumeration.rdoMonthly.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
		{
			 recurring = Recurring.MONTHLY;
		}
		else if(GroupEnuRecurringEnumeration.rdoWeekly.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
		{
			 recurring = Recurring.WEEKLY;
		}
		return recurring;
	}


	private FutureAppointmentDetailsVo populateDataFromOPAandDiagnosticTab(FutureAppointmentDetailsVo futureAppointment)
	{
		
		futureAppointment.setRequestToSchedule(RequestToSchedule.OPA_AND_LINKED_DIAGNOSTICS);
		
		if (form.getLocalContext().getServiceAndFunctionForAppt() != null)
		{
			futureAppointment.setFirstApptService(form.getLocalContext().getServiceAndFunctionForAppt().getService());
			futureAppointment.setFirstApptFunction(form.getLocalContext().getServiceAndFunctionForAppt().getFunction() != null ? form.getLocalContext().getServiceAndFunctionForAppt().getFunction().getFunction() : null);
		}
		
		OPAVo opa = new OPAVo();
		
		opa.setConsultant(form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().getValue());
		opa.setSPR(form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().getValue());
		opa.setAssociateSpecialist(form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().getValue());
		opa.setAnyDoctorToSee(form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().getValue());
		opa.setOtherHCP(form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().getValue());
		opa.setCatsReferral(form.getLocalContext().getCatsReferral());
		
		if (Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().getValue()))
		{
			opa.setOtherHCPValue(form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().getValue());
		}
		else
			opa.setOtherHCPValue(null);
		
		opa.setNamedConsultant(form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getValue());
		if(form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getValue() && form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().getValue() instanceof HcpLiteVo)
		{
			opa.setNamedConsultantValue((HcpLiteVo) form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().getValue());
		}
		else
		{
			opa.setNamedConsultantValue(null);
		}
		
		futureAppointment.setFirstApptToSee(opa);
		
		futureAppointment.setFirstApptPeriodValue(form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().getValue());
		futureAppointment.setFirstApptPeriodType(form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().getValue());
		futureAppointment.setFirstApptFutureApptByDate(form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForLinked().getValue());
		
		futureAppointment.setLinkedDiagnostics(form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getValues());
		
		return futureAppointment;
	}


	private FutureAppointmentDetailsVo populateDataFromOPATab(FutureAppointmentDetailsVo futureAppointment)
	{
		
		futureAppointment.setRequestToSchedule(RequestToSchedule.OPA);
		futureAppointment.setFirstApptService(form.lyrTabs().tabOPA().cmbService().getValue());
		futureAppointment.setFirstApptFunction(form.lyrTabs().tabOPA().cmbFunction().getValue());
		
		OPAVo opa = new OPAVo();
		
		opa.setConsultant(form.lyrTabs().tabOPA().chkConsultant().getValue());
		opa.setSPR(form.lyrTabs().tabOPA().chkSPR().getValue());
		opa.setAssociateSpecialist(form.lyrTabs().tabOPA().chkAssociateSpec().getValue());
		opa.setAnyDoctorToSee(form.lyrTabs().tabOPA().chkAnyDoctor().getValue());
		opa.setOtherHCP(form.lyrTabs().tabOPA().chkOtherHcp().getValue());
		opa.setCatsReferral(form.getLocalContext().getCatsReferral());
		
		if (Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkOtherHcp().getValue()))
		{
			opa.setOtherHCPValue(form.lyrTabs().tabOPA().cmbOtherHcp().getValue());
		}
		else
			opa.setOtherHCPValue(null);
		
		opa.setNamedConsultant(form.lyrTabs().tabOPA().chkNamedConsultant().getValue());
		if(form.lyrTabs().tabOPA().chkNamedConsultant().getValue() && form.lyrTabs().tabOPA().ccNamedConsultant().getValue() instanceof HcpLiteVo)
		{
			opa.setNamedConsultantValue((HcpLiteVo) form.lyrTabs().tabOPA().ccNamedConsultant().getValue());
		}
		else
		{
			opa.setNamedConsultantValue(null);
		}
		
		futureAppointment.setFirstApptToSee(opa);
		futureAppointment.setFirstApptPeriodValue(form.lyrTabs().tabOPA().intScheduledFor().getValue());
		futureAppointment.setFirstApptPeriodType(form.lyrTabs().tabOPA().cmbScheduledFor().getValue());
		futureAppointment.setFirstApptFutureApptByDate(form.lyrTabs().tabOPA().dteScheduledFor().getValue());
		
		futureAppointment.setDoNotMoveDate(form.lyrTabs().tabOPA().chkDoNotChangeInterval().getValue()); // WDEV-23475
		
		return futureAppointment;
	}


	@Override
	protected void onRadioButtonGroupRequestValueChanged() throws PresentationLogicException
	{
		if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoOPA))
		{
			clearOPATab();
			initialiseOPATab();
			form.lyrTabs().showtabOPA();
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoLinkedOPAs))
		{
			clearLinkedOPATab();
			form.lyrTabs().showtabLinkedOpa();
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoOpaDiagnosis))
		{
			clearOPAandDiagnosticTab();
			initialiseOPAandDiagnosticTab();
			form.lyrTabs().showtabOpaAndDiagnostics();
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoRecurringAppt))
		{
			clearRecurringAppointmentsTab();
			initialiseRecurringAppointmentsTab();
			form.lyrTabs().showtabRecurringAppts();
		}
		
		updateControlsState();
	}

	private void initialiseOPAandDiagnosticTab()
	{
		
		clearDiagnosticControls(false, false);
		
		initialiseDiagnosticButtons();
		
		form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().clear();
		
		if (form.getLocalContext().getServiceAndFunctionForAppt() != null)
		{
			form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(form.getLocalContext().getServiceAndFunctionForAppt().getService()));
			
			form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().initializeResponsibleHcp(MosType.HCP, true, form.getLocalContext().getServiceAndFunctionForAppt().getService(), null);
		}
		
		populateOtherHCPForOPAandDiagnostic();
		populateDiagnosticCombo();
		
	}


	private void initialiseDiagnosticButtons()
	{
		form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setEnabled(true);
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnSaveDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnCancelDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(false);
		
	}


	private void populateDiagnosticCombo()
	{
		form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().clear();
		
		if(form.getLocalContext().getServiceAndFunctionForAppt() == null || form.getLocalContext().getServiceAndFunctionForAppt().getService() == null)
			return;
		
		ServiceDiagnosticsVo serviceConf = domain.getServiceDiagnostics(form.getLocalContext().getServiceAndFunctionForAppt().getService());
		
		if(serviceConf == null || serviceConf.getDiagnostics() == null)
			return;
		
		for(int i=0; i<serviceConf.getDiagnostics().size(); i++)
		{
			if(serviceConf.getDiagnostics().get(i) == null)
				continue;
			
			form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().newRow(serviceConf.getDiagnostics().get(i), serviceConf.getDiagnostics().get(i).getText());
		}
	}


	private void populateOtherHCPForOPAandDiagnostic()
	{
		form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().clear();
		
		if(form.getLocalContext().getServiceTriageConf() == null || form.getLocalContext().getServiceTriageConf().getOtherHCPValues() == null)
			return;
		
		for(int i=0; i < form.getLocalContext().getServiceTriageConf().getOtherHCPValues().size(); i++)
		{
			if(form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i) == null)
				continue;
			
			form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().newRow(form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i), form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i).getText());
		}
	}


	private void initialiseRecurringAppointmentsTab()
	{
		
		populateServicesForRecurringAppointments();
		
		//default appointment service and function
		if (form.getLocalContext().getServiceAndFunctionForAppt() != null)
		{
			if (form.getLocalContext().getServiceAndFunctionForAppt().getService() != null)
			{
				form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setValue(form.getLocalContext().getServiceAndFunctionForAppt().getService());
				serviceForOPAValueChanged();
			}
			
			if (form.getLocalContext().getServiceAndFunctionForAppt().getFunction() != null)
				form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().setValue(form.getLocalContext().getServiceAndFunctionForAppt().getFunction().getFunction());
		}
	}


	private void populateServicesForRecurringAppointments()
	{
		form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().clear();
		
		ServiceLiteVoCollection services = domain.getServices();
			
		if (services == null || services.size() == 0)
			return;
			
		for (int i = 0; i < services.size(); i++)
			form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().newRow(services.get(i), services.get(i).getServiceName());
		
	}


	private void initialiseOPATab()
	{
		populateServicesForOPA();
			
		//default appointment service and function
		if (form.getLocalContext().getServiceAndFunctionForAppt() != null)
		{
			if (form.getLocalContext().getServiceAndFunctionForAppt().getService() != null)
			{
				form.lyrTabs().tabOPA().cmbService().setValue(form.getLocalContext().getServiceAndFunctionForAppt().getService());
				serviceForOPAValueChanged();
			}
			
			if (form.getLocalContext().getServiceAndFunctionForAppt().getFunction() != null)
				form.lyrTabs().tabOPA().cmbFunction().setValue(form.getLocalContext().getServiceAndFunctionForAppt().getFunction().getFunction());
			
			form.lyrTabs().tabOPA().ccNamedConsultant().initializeResponsibleHcp(MosType.HCP, true, form.getLocalContext().getServiceAndFunctionForAppt().getService(), null);
		}
	}


	private void populateServicesForOPA()
	{
		form.lyrTabs().tabOPA().cmbService().clear();
		
		ServiceLiteVoCollection services = domain.getServices();
			
		if (services == null || services.size() == 0)
			return;
			
		for (int i = 0; i < services.size(); i++)
			form.lyrTabs().tabOPA().cmbService().newRow(services.get(i), services.get(i).getServiceName());
		
	}


	private void updateControlsState()
	{
		boolean isEditMode = FormMode.EDIT.equals(form.getMode());
		boolean enableRequestToSchedule = isEditMode && (form.getLocalContext().getSelectedFutureAppointment() == null || (form.getLocalContext().getSelectedFutureAppointment() != null && form.getLocalContext().getSelectedFutureAppointment().getID_FutureAppointmentDetails() == null));
		
		form.GroupRequest().setEnabled(GroupRequestEnumeration.rdoOPA, enableRequestToSchedule);
		form.GroupRequest().setEnabled(GroupRequestEnumeration.rdoLinkedOPAs, enableRequestToSchedule);
		form.GroupRequest().setEnabled(GroupRequestEnumeration.rdoOpaDiagnosis, enableRequestToSchedule);
		form.GroupRequest().setEnabled(GroupRequestEnumeration.rdoRecurringAppt, enableRequestToSchedule);
		
		if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoOPA))
		{
			form.lyrTabs().tabOPA().lblToSee().setVisible(form.getLocalContext().getServiceTriageConf() != null);
			form.lyrTabs().tabOPA().chkAnyDoctor().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getAnyDoctorToSee()));
			form.lyrTabs().tabOPA().chkAssociateSpec().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getAssociateSpecialist()));
			form.lyrTabs().tabOPA().chkConsultant().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()));
			form.lyrTabs().tabOPA().chkOtherHcp().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getOtherHCP()));
			form.lyrTabs().tabOPA().chkSPR().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getSPR()));
			form.lyrTabs().tabOPA().ccNamedConsultant().setRequired(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()) && isEditMode); //WDEV-22336
			
			form.lyrTabs().tabOPA().chkAnyDoctor().setEnabled(isEditMode);
			form.lyrTabs().tabOPA().chkAssociateSpec().setEnabled(isEditMode);
			form.lyrTabs().tabOPA().chkConsultant().setEnabled(isEditMode);
			form.lyrTabs().tabOPA().chkOtherHcp().setEnabled(isEditMode);
			form.lyrTabs().tabOPA().chkSPR().setEnabled(isEditMode);
			
			form.lyrTabs().tabOPA().cmbOtherHcp().setVisible(Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkOtherHcp().getValue()));
			form.lyrTabs().tabOPA().cmbOtherHcp().setEnabled(isEditMode);
			
			form.lyrTabs().tabOPA().chkNamedConsultant().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()));
			form.lyrTabs().tabOPA().chkNamedConsultant().setEnabled(isEditMode);
			
			form.lyrTabs().tabOPA().ccNamedConsultant().setVisible(form.lyrTabs().tabOPA().chkNamedConsultant().getValue());
			form.lyrTabs().tabOPA().ccNamedConsultant().setEnabled(isEditMode);
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoOpaDiagnosis))
		{
			form.lyrTabs().tabOpaAndDiagnostics().lblToSeeLinked().setVisible(form.getLocalContext().getServiceTriageConf() != null);
			form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getAnyDoctorToSee()));
			form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getAssociateSpecialist()));
			form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()));
			form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getOtherHCP()));
			form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getSPR()));
			form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().setRequired(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()) && isEditMode); //WDEV-22336
			
			form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setEnabled(isEditMode);
			form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setEnabled(isEditMode);
			form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setEnabled(isEditMode);
			form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setEnabled(isEditMode);
			form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setEnabled(isEditMode);
			
			form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().setVisible(Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().getValue()));
			form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().setEnabled(isEditMode);

			form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setVisible(isEditMode);
			form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setVisible(isEditMode);
			
			form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setVisible(form.getLocalContext().getServiceTriageConf() != null && Boolean.TRUE.equals(form.getLocalContext().getServiceTriageConf().getConsultant()));
			form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setEnabled(isEditMode);
			
			form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().setVisible(form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getValue());
			form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().setEnabled(isEditMode);
		}
		else if (form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoRecurringAppt))
		{
			form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setEnabled(GroupYesNoEnumeration.rdoNo.equals(form.lyrTabs().tabRecurringAppts().GroupYesNo().getValue()) && isEditMode);
			form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().setEnabled(GroupYesNoEnumeration.rdoNo.equals(form.lyrTabs().tabRecurringAppts().GroupYesNo().getValue()) && isEditMode);
			
			//WDEV-21163
			Boolean isWeekly = Recurring.WEEKLY.equals(form.getLocalContext().getRecurring());
			Boolean isMonthly = Recurring.MONTHLY.equals(form.getLocalContext().getRecurring());
			form.lyrTabs().tabRecurringAppts().lblNoOfTimePerWeek().setVisible(isWeekly);
			form.lyrTabs().tabRecurringAppts().intNoOfTime().setVisible(isWeekly);
			form.lyrTabs().tabRecurringAppts().lblOrDays().setVisible(isWeekly);
			form.lyrTabs().tabRecurringAppts().chkFri().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkMon().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkTues().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkWed().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkThurs().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkFri().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkSat().setVisible(isWeekly || isMonthly);
			form.lyrTabs().tabRecurringAppts().chkSun().setVisible(isWeekly || isMonthly);
			
			
			form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().setVisible(isMonthly);
			form.lyrTabs().tabRecurringAppts().lblOfEvery().setVisible(isMonthly);
			form.lyrTabs().tabRecurringAppts().intNMonth().setVisible(isMonthly);
			form.lyrTabs().tabRecurringAppts().lblMonth().setVisible(isMonthly);
			form.lyrTabs().tabRecurringAppts().txtDays().setVisible(isMonthly);
			
			
			
			form.lyrTabs().tabRecurringAppts().intNoOfTime().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkFri().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkMon().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkTues().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkWed().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkThurs().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkFri().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkSat().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().chkSun().setEnabled(isEditMode);
			
			
			form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().intNMonth().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().txtDays().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().setEnabled(isEditMode);
			form.lyrTabs().tabRecurringAppts().intOccueancs().setEnabled(isEditMode);
			//end WDEV-21163
			
		}

		form.btnRIE().setVisible(FormMode.VIEW.equals(form.getMode()) && SHOW_RIE_BUTTON.equals(form.getLocalContext().getShow_RIE_Button()) && !Boolean.TRUE.equals(form.getLocalContext().getHideRIEandEdit())); //WDEV-23051
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getHideRIEandEdit())); //WDEV-23051
		form.btnSave().setVisible(isEditMode && !(form.GroupRequest().getValue().equals(GroupRequestEnumeration.rdoLinkedOPAs)));
		form.btnCancel().setVisible(isEditMode);
		form.btnClose().setVisible(FormMode.VIEW.equals(form.getMode()));
	}


	private void clearRecurringAppointmentsTab()
	{
		form.lyrTabs().tabRecurringAppts().GroupYesNo().setValue(GroupYesNoEnumeration.rdoYes);
		form.lyrTabs().tabRecurringAppts().dteWeekCommencing().setValue(null);
		clearRecurringOption();
		
	}


	private void clearOPAandDiagnosticTab()
	{
		
		form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setValue(false);
		form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().clear();
		
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForLinked().setValue(null);
		
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getRows().clear();
		form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(null);
		
		form.getLocalContext().setServiceTriageConf(null);
		form.getLocalContext().setSelectedDiagnostic(null);
	}


	private void clearLinkedOPATab()
	{
		form.lyrTabs().tabLinkedOpa().GroupNoLinkedAppts().setValue(GroupNoLinkedApptsEnumeration.rdo2);
		
	}


	private void clearOPATab()
	{

		form.lyrTabs().tabOPA().cmbService().setValue(null);
		form.lyrTabs().tabOPA().cmbFunction().setValue(null);
		form.lyrTabs().tabOPA().chkConsultant().setValue(false);
		form.lyrTabs().tabOPA().chkSPR().setValue(false);
		form.lyrTabs().tabOPA().chkAssociateSpec().setValue(false);
		form.lyrTabs().tabOPA().chkAnyDoctor().setValue(false);
		form.lyrTabs().tabOPA().chkOtherHcp().setValue(false);
		form.lyrTabs().tabOPA().cmbOtherHcp().setValue(null);
		form.lyrTabs().tabOPA().intScheduledFor().setValue(null);
		form.lyrTabs().tabOPA().cmbScheduledFor().setValue(null);
		form.lyrTabs().tabOPA().dteScheduledFor().setValue(null);
		
		form.lyrTabs().tabOPA().chkNamedConsultant().setValue(null);
		form.lyrTabs().tabOPA().ccNamedConsultant().clear();
		
		form.getLocalContext().setServiceTriageConf(null);
	}

	@Override
	protected void onChkOtherHcpValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPA(form.lyrTabs().tabOPA().chkOtherHcp());
	}

	private void uncheckToSeeForOPA(CheckBox checkBox)
	{
		boolean consultant = (checkBox.getID() == form.lyrTabs().tabOPA().chkConsultant().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkConsultant().getValue());
		boolean spr = (checkBox.getID() == form.lyrTabs().tabOPA().chkSPR().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkSPR().getValue());
		boolean associateSpecialist = (checkBox.getID() == form.lyrTabs().tabOPA().chkAssociateSpec().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkAssociateSpec().getValue());
		boolean anyDoctor = (checkBox.getID() == form.lyrTabs().tabOPA().chkAnyDoctor().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkAnyDoctor().getValue());
		boolean otherHcp = (checkBox.getID() == form.lyrTabs().tabOPA().chkOtherHcp().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkOtherHcp().getValue());
		boolean namedConsultant = (checkBox.getID() == form.lyrTabs().tabOPA().chkNamedConsultant().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOPA().chkNamedConsultant().getValue());
		
		form.lyrTabs().tabOPA().chkConsultant().setValue( consultant ? true : false);
		form.lyrTabs().tabOPA().chkSPR().setValue( spr ? true : false);
		form.lyrTabs().tabOPA().chkAssociateSpec().setValue( associateSpecialist ? true : false);
		form.lyrTabs().tabOPA().chkAnyDoctor().setValue( anyDoctor ? true : false);
		form.lyrTabs().tabOPA().chkOtherHcp().setValue( otherHcp ? true : false);
		form.lyrTabs().tabOPA().cmbOtherHcp().setValue(null);
		form.lyrTabs().tabOPA().chkNamedConsultant().setValue(namedConsultant);
		form.lyrTabs().tabOPA().ccNamedConsultant().clear();
		
		updateControlsState();
	}


	@Override
	protected void onBtnLinkedAppointmentsClick() throws PresentationLogicException
	{
		
		form.getGlobalContext().Scheduling.setLinkedOPA(form.getLocalContext().getSelectedFutureAppointment());
		ServiceAndFunctionForFutureApptsVo serviceAndFunction = form.getLocalContext().getServiceAndFunctionForAppt();
		
		ServiceLiteVo service = serviceAndFunction != null ? serviceAndFunction.getService() : null;
		ServiceFunction function = serviceAndFunction != null && serviceAndFunction.getFunction() != null ? serviceAndFunction.getFunction().getFunction() : null;
		
		Integer numberOfLinkedAppts = 0;
		
		if (GroupNoLinkedApptsEnumeration.rdo2.equals(form.lyrTabs().tabLinkedOpa().GroupNoLinkedAppts().getValue()))
			numberOfLinkedAppts = 2;
		else if (GroupNoLinkedApptsEnumeration.rdo3.equals(form.lyrTabs().tabLinkedOpa().GroupNoLinkedAppts().getValue()))
			numberOfLinkedAppts = 3;
		
		engine.open(form.getForms().Scheduling.LinkedAppointmentDetails, new Object[] {numberOfLinkedAppts, service , function , form.getMode() , Boolean.TRUE});
		
	}


	@Override
	protected void onChkOtherHCPLinkedValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPAandDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked());
	}


	@Override
	protected void onBtnCancelDiagnosticClick() throws PresentationLogicException
	{
		form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setVisible(true);
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(form.getLocalContext().getSelectedDiagnostic() != null);
		form.lyrTabs().tabOpaAndDiagnostics().btnSaveDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnCancelDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(form.getLocalContext().getSelectedDiagnostic() != null);
		
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setEnabled(true);

		populateDiagnosticControls(form.getLocalContext().getSelectedDiagnostic());
		
	}


	@Override
	protected void onBtnSaveDiagnosticClick() throws PresentationLogicException
	{
		LinkedDiagnosticVo diagnostic = populateDataFromDiagnostic(form.getLocalContext().getSelectedDiagnostic());
		
		String[] errors = diagnostic.validate(validateDiagnosticUIRules());
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		addOrUpdateDiagnosticRow(diagnostic, form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getSelectedRow());
		
		clearDiagnosticControls(false, false);
		
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setValue(diagnostic);
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setEnabled(true);
		
		form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setVisible(true);
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getValue() != null);
		form.lyrTabs().tabOpaAndDiagnostics().btnSaveDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnCancelDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getValue() != null);
		
	}


	private LinkedDiagnosticVo populateDataFromDiagnostic(LinkedDiagnosticVo diagnosticValue)
	{
		LinkedDiagnosticVo diagnostic = null;
		
		if (diagnosticValue == null)
			diagnostic =  new LinkedDiagnosticVo();
		else
			diagnostic = (LinkedDiagnosticVo) diagnosticValue.clone();
		
		diagnostic.setDiagnostics(form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().getValue());
		diagnostic.setPeriodValue(form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().getValue());
		diagnostic.setPeriodType(form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().getValue());
		diagnostic.setRequestedDate(form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().getValue());
		
		if (GroupDiagnosticDayEnumeration.rdoSameDay.equals(form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().getValue()))
			diagnostic.setSameDay(TriageOutcomeAppointmentDay.SAME_DAY);
		else
			diagnostic.setSameDay(TriageOutcomeAppointmentDay.BEFORE_OPA_APPOINTMENT);
		
		return diagnostic;
	}


	private void addOrUpdateDiagnosticRow(LinkedDiagnosticVo diagnostic, grdDiagnosticRow row)
	{
		if (diagnostic == null)
			return;
		
		if (row == null)
			row = form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getRows().newRow();
		
		row.setColDiagnostic(diagnostic.getDiagnostics() != null ? diagnostic.getDiagnostics().getText() : "");
		
		String detail = "";
		
		if (diagnostic.getPeriodValue() != null && diagnostic.getPeriodType() != null)
			detail += diagnostic.getPeriodValue().toString() + " " + diagnostic.getPeriodType().getText() + " - ";
		
		if (diagnostic.getRequestedDate() != null)
			detail += diagnostic.getRequestedDate().toString();
		
		row.setColDetail(detail);
		
		row.setValue(diagnostic);
		
		form.getLocalContext().setSelectedDiagnostic(diagnostic);
	}


	@Override
	protected void onBtnEditDiagnosticClick() throws PresentationLogicException
	{
		form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnSaveDiagnostic().setVisible(true);
		form.lyrTabs().tabOpaAndDiagnostics().btnCancelDiagnostic().setVisible(true);
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setEnabled(false);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(false);
		
		clearDiagnosticControls(false, true);
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setEnabled(GroupDiagnosticDayEnumeration.rdoBeforeAppt.equals(form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().getValue()));
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setEnabled(GroupDiagnosticDayEnumeration.rdoBeforeAppt.equals(form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().getValue()));
	}

	
	@Override
	protected void onBtnAddDiagnosticClick() throws PresentationLogicException
	{
		
		form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().btnSaveDiagnostic().setVisible(true);
		form.lyrTabs().tabOpaAndDiagnostics().btnCancelDiagnostic().setVisible(true);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(false);
		
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setValue(null);
		form.getLocalContext().setSelectedDiagnostic(null);
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setEnabled(false);
		
		clearDiagnosticControls(true, true);
		diagnosticDayValueChanged();
		
	}


	private void clearDiagnosticControls(boolean clearControls, boolean enableControls)
	{
		if (clearControls)
		{
			form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().setValue(null);
			form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setValue(null);
			form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setValue(null);
			form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(null);
			form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().setValue(GroupDiagnosticDayEnumeration.rdoSameDay);
		}
		
		form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().setEnabled(enableControls);
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setEnabled(enableControls);
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setEnabled(enableControls);
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setEnabled(false);
		form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().setEnabled(enableControls);
		
	}


	@Override
	protected void onRadioButtonGroupYesNoValueChanged() throws PresentationLogicException
	{
		form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setValue(null);
		form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().setValue(null);
		
		//default appointment service and function
		if (GroupYesNoEnumeration.rdoYes.equals(form.lyrTabs().tabRecurringAppts().GroupYesNo().getValue()) && form.getLocalContext().getServiceAndFunctionForAppt() != null)
		{
			if (form.getLocalContext().getServiceAndFunctionForAppt().getService() != null)
			{
				form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setValue(form.getLocalContext().getServiceAndFunctionForAppt().getService());
				serviceForOPAValueChanged();
			}
			
			if (form.getLocalContext().getServiceAndFunctionForAppt().getFunction() != null)
				form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().setValue(form.getLocalContext().getServiceAndFunctionForAppt().getFunction().getFunction());
		}
		
		updateControlsState();
		
	}


	@Override
	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		serviceForOPAValueChanged();
		
	}

	private void serviceForOPAValueChanged()
	{
		form.lyrTabs().tabOPA().chkConsultant().setValue(false);
		form.lyrTabs().tabOPA().chkSPR().setValue(false);
		form.lyrTabs().tabOPA().chkAssociateSpec().setValue(false);
		form.lyrTabs().tabOPA().chkAnyDoctor().setValue(false);
		form.lyrTabs().tabOPA().chkOtherHcp().setValue(false);
		form.lyrTabs().tabOPA().chkNamedConsultant().setValue(null);
		
		form.lyrTabs().tabOPA().ccNamedConsultant().initializeResponsibleHcp(MosType.HCP, true, form.lyrTabs().tabOPA().cmbService().getValue(), null);
		
		populateFunctionsForOPA();
		
		form.getLocalContext().setServiceTriageConf(domain.getServiceTriageActions(form.lyrTabs().tabOPA().cmbService().getValue()));
		populateOtherHCPForOPA();
		
		updateControlsState();
		
	}


	private void populateOtherHCPForOPA()
	{
		form.lyrTabs().tabOPA().cmbOtherHcp().clear();
		
		if(form.getLocalContext().getServiceTriageConf() == null || form.getLocalContext().getServiceTriageConf().getOtherHCPValues() == null)
			return;
		
		for(int i=0; i<form.getLocalContext().getServiceTriageConf().getOtherHCPValues().size(); i++)
		{
			if(form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i) == null)
				continue;
			
			form.lyrTabs().tabOPA().cmbOtherHcp().newRow(form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i), form.getLocalContext().getServiceTriageConf().getOtherHCPValues().get(i).getText());
		}
		
	}


	private void populateFunctionsForOPA()
	{
		form.lyrTabs().tabOPA().cmbFunction().clear();
		
		if(form.lyrTabs().tabOPA().cmbService().getValue() == null)
			return;
		
		ServiceFunctionLiteVoCollection serviceFunction = domain.listServiceFunctions(form.lyrTabs().tabOPA().cmbService().getValue());
		
		for(ServiceFunctionLiteVo function : serviceFunction)
		{
			if(function == null || function.getFunction() == null)
				continue;
			
			form.lyrTabs().tabOPA().cmbFunction().newRow(function.getFunction(), function.getFunction().getText());
		}	
	}


	@Override
	protected void onCmbServiceRecurringValueChanged() throws PresentationLogicException
	{
		populateFunctionsForRecurringAppts();
		
	}


	private void populateFunctionsForRecurringAppts()
	{
		form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().clear();
		
		if(form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().getValue() == null)
			return;
		
		ServiceFunctionLiteVoCollection serviceFunction = domain.listServiceFunctions(form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().getValue());
		
		for(ServiceFunctionLiteVo function : serviceFunction)
		{
			if(function == null || function.getFunction() == null)
				continue;
			
			form.lyrTabs().tabRecurringAppts().cmbFunctionRecurring().newRow(function.getFunction(), function.getFunction().getText());
		}
		
	}


	@Override
	protected void onGrdDiagnosticSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().getValue());
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getSelectedDiagnostic() != null);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(true);
		
		populateDiagnosticControls(form.getLocalContext().getSelectedDiagnostic());
		
	}


	private void populateDiagnosticControls(LinkedDiagnosticVo diagnostic)
	{
		clearDiagnosticControls(true, false);
		
		if (diagnostic == null)
			return;
		
		form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().setValue(diagnostic.getDiagnostics());
		
		//in view mode make sure the value is populated 
		if (FormMode.VIEW.equals(form.getMode()) && form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().getValue() == null)
		{
			form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().newRow(diagnostic.getDiagnostics(), diagnostic.getDiagnostics().getText());
			form.lyrTabs().tabOpaAndDiagnostics().cmbDiagnostic().setValue(diagnostic.getDiagnostics());
		}
		
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setValue(diagnostic.getPeriodValue());
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setValue(diagnostic.getPeriodType());
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(diagnostic.getRequestedDate());

		if (TriageOutcomeAppointmentDay.SAME_DAY.equals(diagnostic.getSameDay()))
			form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().setValue(GroupDiagnosticDayEnumeration.rdoSameDay);
		else
			form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().setValue(GroupDiagnosticDayEnumeration.rdoBeforeAppt);
		
	}


	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}


	@Override
	protected void onCmbScheduledForValueChanged() throws PresentationLogicException
	{
		Integer value = form.lyrTabs().tabOPA().intScheduledFor().getValue();
		TimeUnitsSecondsToMonths unit = form.lyrTabs().tabOPA().cmbScheduledFor().getValue();
		
		form.lyrTabs().tabOPA().dteScheduledFor().setValue(calculateFutureAppointmentDate(value, unit));
		
	}


	@Override
	protected void onIntScheduledForValueChanged() throws PresentationLogicException
	{
		Integer value = form.lyrTabs().tabOPA().intScheduledFor().getValue();
		TimeUnitsSecondsToMonths unit = form.lyrTabs().tabOPA().cmbScheduledFor().getValue();
		
		form.lyrTabs().tabOPA().dteScheduledFor().setValue(calculateFutureAppointmentDate(value, unit));
		
	}


	@Override
	protected void onDteScheduledForDiagnosticValueChanged() throws PresentationLogicException
	{
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setValue(null);
		
	}


	@Override
	protected void onCmbScheduledForDiagnosticValueChanged() throws PresentationLogicException
	{
		Integer value = form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().getValue();
		TimeUnitsSecondsToMonths unit = form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().getValue();
		
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(calculateFutureAppointmentDate(value, unit));
		
	}


	@Override
	protected void onIntScheduledForDiagnosticValueChanged() throws PresentationLogicException
	{
		Integer value = form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().getValue();
		TimeUnitsSecondsToMonths unit = form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().getValue();
		
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(calculateFutureAppointmentDate(value, unit));
		
	}


	@Override
	protected void onCmbScheduledForLinkedValueChanged() throws PresentationLogicException
	{
		Integer value = form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().getValue();
		TimeUnitsSecondsToMonths unit = form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().getValue();
		
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForLinked().setValue(calculateFutureAppointmentDate(value, unit));
		
	}


	@Override
	protected void onIntScheduledForLinkedValueChanged() throws PresentationLogicException
	{
		Integer value = form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().getValue();
		TimeUnitsSecondsToMonths unit = form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().getValue();
		
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForLinked().setValue(calculateFutureAppointmentDate(value, unit));
		
	}
	
	private Date calculateFutureAppointmentDate(Integer value , TimeUnitsSecondsToMonths unit)
	{
		if(value == null || unit == null)
			return null;
		
		Date futureDate = new Date();

		if (unit.equals(TimeUnitsSecondsToMonths.DAYS))
			futureDate.addDay(value);
		if (unit.equals(TimeUnitsSecondsToMonths.WEEKS))
			futureDate.addDay(value * 7);
		if (unit.equals(TimeUnitsSecondsToMonths.MONTHS))
			futureDate.addMonth(value);
		
		return futureDate;
	}


	@Override
	protected void onImbRemoveDiagnosticClick() throws PresentationLogicException
	{
		form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().removeSelectedRow();
		
		clearDiagnosticControls(true, false);
		
		form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setVisible(false);
		form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setEnabled(false);
		
	}


	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}


	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.LinkedAppointmentDetails) && result.equals(DialogResult.OK))
		{
			form.getGlobalContext().Scheduling.setFutureAppointmentDetails(form.getGlobalContext().Scheduling.getLinkedOPA());
			
			engine.close(DialogResult.OK);
		}
		else if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			engine.close(DialogResult.CONFIRM);
		}
		
	}


	@Override
	protected void onRadioButtonGroupNoLinkedApptsValueChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setFutureAppointmentDetails(null);
		
	}


	@Override
	protected void onChkAnyDoctorValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPA(form.lyrTabs().tabOPA().chkAnyDoctor());
		
	}


	@Override
	protected void onChkAssociateSpecValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPA(form.lyrTabs().tabOPA().chkAssociateSpec());
		
	}


	@Override
	protected void onChkSPRValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPA(form.lyrTabs().tabOPA().chkSPR());
		
	}


	@Override
	protected void onChkConsultantValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPA(form.lyrTabs().tabOPA().chkConsultant());
		
	}


	@Override
	protected void onChkAnyDoctorLinkedValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPAandDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked());
		
	}


	private void uncheckToSeeForOPAandDiagnostic(CheckBox checkBox)
	{
		boolean consultant = (checkBox.getID() == form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().getValue());
		boolean spr = (checkBox.getID() == form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().getValue());
		boolean associateSpecialist = (checkBox.getID() == form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().getValue());
		boolean anyDoctor = (checkBox.getID() == form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().getValue());
		boolean otherHcp = (checkBox.getID() == form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().getValue());
		boolean namedConsultant = (checkBox.getID() == form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getID()) && Boolean.TRUE.equals(form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getValue());
		
		form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setValue( consultant ? true : false);
		form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setValue( spr ? true : false);
		form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setValue( associateSpecialist ? true : false);
		form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setValue( anyDoctor ? true : false);
		form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setValue( otherHcp ? true : false);
		form.lyrTabs().tabOpaAndDiagnostics().cmbOtherHCPLinked().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setValue(namedConsultant);
		form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().clear();
		
		updateControlsState();
	}


	@Override
	protected void onChkAssociateSpecLinkedValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPAandDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked());
		
	}


	@Override
	protected void onChkSprLinkedValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPAandDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked());
		
	}


	@Override
	protected void onChkConsultantLinkedValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPAandDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked());
		
	}


	@Override
	protected void onRadioButtonGroupDiagnosticDayValueChanged() throws PresentationLogicException
	{
		diagnosticDayValueChanged();
		
	}


	private void diagnosticDayValueChanged()
	{
		form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setValue(null);
		form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(null);
		
		if (GroupDiagnosticDayEnumeration.rdoSameDay.equals(form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().getValue()))
		{
			form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setEnabled(false);
			form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setEnabled(false);
			form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValue(new Date());
		}
		else if (GroupDiagnosticDayEnumeration.rdoBeforeAppt.equals(form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().getValue()))
		{
			form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setEnabled(true);
			form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setEnabled(true);
		}	
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onChkNamedConsultantValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPA(form.lyrTabs().tabOPA().chkNamedConsultant());
		
		ServiceLiteVo service  = form.lyrTabs().tabOPA().cmbService().getValue();
		
		if(form.lyrTabs().tabOPA().chkNamedConsultant().getValue())
		{
			if(form.getLocalContext().getLoggedHCP() != null && service != null)
			{
				if(Boolean.TRUE.equals(domain.checkIfUserIsResponsibleHcpAndLinkedWithService(form.getLocalContext().getLoggedHCP(), service)))
				{
					form.lyrTabs().tabOPA().ccNamedConsultant().setValue(form.getLocalContext().getLoggedHCP());
				}
			}
		}
		else
		{
			form.lyrTabs().tabOPA().ccNamedConsultant().clear();
		}
	}

	@Override
	protected void onChkLinkedNamedConsultantValueChanged() throws PresentationLogicException
	{
		uncheckToSeeForOPAandDiagnostic(form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant());
		
		ServiceLiteVo service  = form.getLocalContext().getSelectedFutureAppointment() != null ? form.getLocalContext().getSelectedFutureAppointment().getFirstApptService() : null;
		
		if(service == null && form.getLocalContext().getServiceAndFunctionForAppt() != null)
		{
			service = form.getLocalContext().getServiceAndFunctionForAppt().getService();
		}
		
		if(form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().getValue())
		{
			if(form.getLocalContext().getLoggedHCP() != null && service != null)
			{
				if(Boolean.TRUE.equals(domain.checkIfUserIsResponsibleHcpAndLinkedWithService(form.getLocalContext().getLoggedHCP(), service)))
				{
					form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().setValue(form.getLocalContext().getLoggedHCP());
				}
			}
		}
		else
		{
			form.lyrTabs().tabOpaAndDiagnostics().ccLinkedNamedConsultant().clear();
		}
	}


	@Override
	protected void onRadioButtonGroupEnuRecurringValueChanged() throws PresentationLogicException
	{
		//WDEV-21163
		if(GroupEnuRecurringEnumeration.rdoDaily.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
		{
			form.getLocalContext().setRecurring(Recurring.DAILY);
		}
		else if(GroupEnuRecurringEnumeration.rdoMonthly.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
		{
			form.getLocalContext().setRecurring(Recurring.MONTHLY);
		}
		else if(GroupEnuRecurringEnumeration.rdoWeekly.equals(form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().getValue()))
		{
			form.getLocalContext().setRecurring(Recurring.WEEKLY);
		}
		clearRecurringOption();
		updateControlsState();

	}

	//WDEV-21163
	private void clearRecurringOption()
	{
		
		form.lyrTabs().tabRecurringAppts().intNMonth().setValue(null);
		form.lyrTabs().tabRecurringAppts().intNoOfTime().setValue(null);
		form.lyrTabs().tabRecurringAppts().intOccueancs().setValue(null);
		form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().setValue(null);
		
		form.lyrTabs().tabRecurringAppts().chkMon().setValue(false);
		form.lyrTabs().tabRecurringAppts().chkTues().setValue(false);
		form.lyrTabs().tabRecurringAppts().chkWed().setValue(false);
		form.lyrTabs().tabRecurringAppts().chkThurs().setValue(false);
		form.lyrTabs().tabRecurringAppts().chkFri().setValue(false);
		form.lyrTabs().tabRecurringAppts().chkSat().setValue(false);
		form.lyrTabs().tabRecurringAppts().chkSun().setValue(false);
	}


	@Override
	protected void onBtnRIEClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}
	
}
