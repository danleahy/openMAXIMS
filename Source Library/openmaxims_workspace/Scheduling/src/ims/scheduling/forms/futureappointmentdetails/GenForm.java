//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.futureappointmentdetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabOPAContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbScheduledForComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
				{
					return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbFunctionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ServiceFunction value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ServiceFunction getValue()
				{
					return (ims.core.vo.lookups.ServiceFunction)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ServiceFunction value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOtherHcpComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.OtherHCP value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.OtherHCP getValue()
				{
					return (ims.core.vo.lookups.OtherHCP)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.OtherHCP value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 800, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"OPA Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 275, 130, 405, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccNamedConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 13, skipContextValidation);
				//ims.framework.Control m_ccNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(275), new Integer(130), new Integer(405), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 13), m_ccNamedConsultantForm, instance1 } );
				ims.framework.Control m_ccNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 13), m_ccNamedConsultantForm, instance1, Boolean.TRUE } );
				super.addControl(m_ccNamedConsultantControl);
				Menu[] menus1 = m_ccNamedConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 409, 221, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Do not change interval", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 409, 194, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Appt Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 88, 194, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To be Scheduled for:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 88, 104, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To See:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 88, 68, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Function:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 88, 40, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 542, 192, 122, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 275, 192, 121, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbScheduledForTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbScheduledForTemp);
				cmbScheduledForComboBox cmbScheduledFor = (cmbScheduledForComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbScheduledForComboBox.class, m_cmbScheduledForTemp);
				super.addComboBox(cmbScheduledFor);
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 144, 66, 520, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbFunctionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbFunctionTemp);
				cmbFunctionComboBox cmbFunction = (cmbFunctionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFunctionComboBox.class, m_cmbFunctionTemp);
				super.addComboBox(cmbFunction);
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 144, 38, 520, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbServiceTemp);
				cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
				super.addComboBox(cmbService);
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 275, 158, 389, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbOtherHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbOtherHcpTemp);
				cmbOtherHcpComboBox cmbOtherHcp = (cmbOtherHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOtherHcpComboBox.class, m_cmbOtherHcpTemp);
				super.addComboBox(cmbOtherHcp);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 542, 221, 10, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 144, 132, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Named Consultant", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 144, 160, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Other HCP", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 512, 104, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Any Doctor to See", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 360, 104, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Associate Specialist", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 275, 104, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"SPR", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 144, 104, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Consultant", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 208, 192, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
			}

			public ims.core.forms.mosquery.IComponent ccNamedConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccNamedConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccNamedConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccNamedConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccNamedConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccNamedConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblToSee()
			{
				return (Label)super.getControl(5);
			}
			public DateControl dteScheduledFor()
			{
				return (DateControl)super.getControl(8);
			}
			public cmbScheduledForComboBox cmbScheduledFor()
			{
				return (cmbScheduledForComboBox)super.getComboBox(0);
			}
			public cmbFunctionComboBox cmbFunction()
			{
				return (cmbFunctionComboBox)super.getComboBox(1);
			}
			public cmbServiceComboBox cmbService()
			{
				return (cmbServiceComboBox)super.getComboBox(2);
			}
			public cmbOtherHcpComboBox cmbOtherHcp()
			{
				return (cmbOtherHcpComboBox)super.getComboBox(3);
			}
			public CheckBox chkDoNotChangeInterval()
			{
				return (CheckBox)super.getControl(13);
			}
			public CheckBox chkNamedConsultant()
			{
				return (CheckBox)super.getControl(14);
			}
			public CheckBox chkOtherHcp()
			{
				return (CheckBox)super.getControl(15);
			}
			public CheckBox chkAnyDoctor()
			{
				return (CheckBox)super.getControl(16);
			}
			public CheckBox chkAssociateSpec()
			{
				return (CheckBox)super.getControl(17);
			}
			public CheckBox chkSPR()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkConsultant()
			{
				return (CheckBox)super.getControl(19);
			}
			public IntBox intScheduledFor()
			{
				return (IntBox)super.getControl(20);
			}
		}
		public static class tabLinkedOpaContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
		
			public static class GroupNoLinkedApptsRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 352, 64, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "3", startTabIndex.intValue() + 22);
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 296, 64, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper23.getX(), anchoringHelper23.getY(), anchoringHelper23.getWidth(), "2", startTabIndex.intValue() + 21);
				}
				public void setText(GroupNoLinkedApptsEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupNoLinkedApptsEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupNoLinkedApptsEnumeration.None;
						case 0: return GroupNoLinkedApptsEnumeration.rdo3;
						case 1: return GroupNoLinkedApptsEnumeration.rdo2;
					}
					return null;
				}
				public void setValue(GroupNoLinkedApptsEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupNoLinkedApptsEnumeration.None.id);
				}
				public boolean isEnabled(GroupNoLinkedApptsEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupNoLinkedApptsEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupNoLinkedApptsEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupNoLinkedApptsEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupNoLinkedApptsEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupNoLinkedApptsEnumeration None = new GroupNoLinkedApptsEnumeration(-1);
				public static GroupNoLinkedApptsEnumeration rdo3 = new GroupNoLinkedApptsEnumeration(0);
				public static GroupNoLinkedApptsEnumeration rdo2 = new GroupNoLinkedApptsEnumeration(1);
				private GroupNoLinkedApptsEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupNoLinkedApptsEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 800, 128, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Linked OPAs", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 88, 64, 193, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Number of Linked Appointments:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 408, 61, 216, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Linked Appointment Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// RadioButton Controls
				RadioButton tmpGroupNoLinkedAppts = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupNoLinkedAppts);
				GroupNoLinkedApptsRadioButton GroupNoLinkedAppts = (GroupNoLinkedApptsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupNoLinkedApptsRadioButton.class, tmpGroupNoLinkedAppts);
				GroupNoLinkedAppts.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupNoLinkedAppts);
			}

			public Button btnLinkedAppointments()
			{
				return (Button)super.getControl(2);
			}
			public GroupNoLinkedApptsRadioButton GroupNoLinkedAppts()
			{
				return (GroupNoLinkedApptsRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabOpaAndDiagnosticsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbScheduledForDiagnosticComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
				{
					return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDiagnosticComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.admin.vo.lookups.Diagnostic value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.admin.vo.lookups.Diagnostic value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.admin.vo.lookups.Diagnostic value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.admin.vo.lookups.Diagnostic value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.admin.vo.lookups.Diagnostic value)
				{
					return super.control.removeRow(value);
				}
				public ims.admin.vo.lookups.Diagnostic getValue()
				{
					return (ims.admin.vo.lookups.Diagnostic)super.control.getValue();
				}
				public void setValue(ims.admin.vo.lookups.Diagnostic value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOtherHCPLinkedComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.OtherHCP value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.OtherHCP value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.OtherHCP getValue()
				{
					return (ims.core.vo.lookups.OtherHCP)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.OtherHCP value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbScheduledForLinkedComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
				{
					return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdDiagnosticRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagnosticRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiagnosticReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiagnosticReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiagnosticOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDiagnostic()
				{
					return (String)super.row.get(0);
				}
				public void setColDiagnostic(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiagnosticTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDetailReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDetailReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDetailOpened()
				{
					super.row.showOpened(1);
				}
				public String getColDetail()
				{
					return (String)super.row.get(1);
				}
				public void setColDetail(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDetailTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.RefMan.vo.LinkedDiagnosticVo getValue()
				{
					return (ims.RefMan.vo.LinkedDiagnosticVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.LinkedDiagnosticVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagnosticRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagnosticRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagnosticRow get(int index)
				{
					return new grdDiagnosticRow(super.collection.get(index));
				}
				public grdDiagnosticRow newRow()
				{
					return new grdDiagnosticRow(super.collection.newRow());
				}
				public grdDiagnosticRow newRow(boolean autoSelect)
				{
					return new grdDiagnosticRow(super.collection.newRow(autoSelect));
				}
				public grdDiagnosticRow newRowAt(int index)
				{
					return new grdDiagnosticRow(super.collection.newRowAt(index));
				}
				public grdDiagnosticRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagnosticRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagnosticGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.RefMan.vo.LinkedDiagnosticVoCollection getValues()
				{
					ims.RefMan.vo.LinkedDiagnosticVoCollection listOfValues = new ims.RefMan.vo.LinkedDiagnosticVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.LinkedDiagnosticVo getValue()
				{
					return (ims.RefMan.vo.LinkedDiagnosticVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.LinkedDiagnosticVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiagnosticRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagnosticRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagnosticRowCollection getRows()
				{
					return new grdDiagnosticRowCollection(super.grid.getRows());
				}
				public grdDiagnosticRow getRowByValue(ims.RefMan.vo.LinkedDiagnosticVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagnosticRow(row);
				}
				public void setColDiagnosticHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiagnosticHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDetailHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDetailHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
		
			public static class GroupDiagnosticDayRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 328, 383, 192, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper27.getX(), anchoringHelper27.getY(), anchoringHelper27.getWidth(), "Before Appointment", startTabIndex.intValue() + 40);
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 207, 383, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper28.getX(), anchoringHelper28.getY(), anchoringHelper28.getWidth(), "Same Day", startTabIndex.intValue() + 39);
				}
				public void setText(GroupDiagnosticDayEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupDiagnosticDayEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupDiagnosticDayEnumeration.None;
						case 0: return GroupDiagnosticDayEnumeration.rdoBeforeAppt;
						case 1: return GroupDiagnosticDayEnumeration.rdoSameDay;
					}
					return null;
				}
				public void setValue(GroupDiagnosticDayEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupDiagnosticDayEnumeration.None.id);
				}
				public boolean isEnabled(GroupDiagnosticDayEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupDiagnosticDayEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupDiagnosticDayEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupDiagnosticDayEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupDiagnosticDayEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupDiagnosticDayEnumeration None = new GroupDiagnosticDayEnumeration(-1);
				public static GroupDiagnosticDayEnumeration rdoBeforeAppt = new GroupDiagnosticDayEnumeration(0);
				public static GroupDiagnosticDayEnumeration rdoSameDay = new GroupDiagnosticDayEnumeration(1);
				private GroupDiagnosticDayEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupDiagnosticDayEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 168, 800, 304, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Linked Diagnostics", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 800, 150, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"OPA", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 272, 66, 416, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccLinkedNamedConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper31.getSize(), instance1, startTabIndex.intValue() + 29, skipContextValidation);
				//ims.framework.Control m_ccLinkedNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(272), new Integer(66), new Integer(416), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 29), m_ccLinkedNamedConsultantForm, instance1 } );
				ims.framework.Control m_ccLinkedNamedConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1029),  new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 29), m_ccLinkedNamedConsultantForm, instance1, Boolean.TRUE } );
				super.addControl(m_ccLinkedNamedConsultantControl);
				Menu[] menus1 = m_ccLinkedNamedConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 416, 410, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Appt Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 88, 354, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnostic:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 88, 410, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To be Scheduled for:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 408, 130, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Appt Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 88, 130, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To be Scheduled for:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 88, 40, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To See:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 672, 441, 132, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Diagnostic", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 535, 441, 132, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save Diagnostic", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 166, 441, 132, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Diagnostic", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 28, 441, 132, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add Diagnostic", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 544, 408, 122, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 534, 128, 130, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 276, 408, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbScheduledForDiagnosticTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbScheduledForDiagnosticTemp);
				cmbScheduledForDiagnosticComboBox cmbScheduledForDiagnostic = (cmbScheduledForDiagnosticComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbScheduledForDiagnosticComboBox.class, m_cmbScheduledForDiagnosticTemp);
				super.addComboBox(cmbScheduledForDiagnostic);
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 156, 352, 508, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDiagnosticTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDiagnosticTemp);
				cmbDiagnosticComboBox cmbDiagnostic = (cmbDiagnosticComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiagnosticComboBox.class, m_cmbDiagnosticTemp);
				super.addComboBox(cmbDiagnostic);
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 272, 94, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbOtherHCPLinkedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbOtherHCPLinkedTemp);
				cmbOtherHCPLinkedComboBox cmbOtherHCPLinked = (cmbOtherHCPLinkedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOtherHCPLinkedComboBox.class, m_cmbOtherHCPLinkedTemp);
				super.addComboBox(cmbOtherHCPLinked);
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 273, 128, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbScheduledForLinkedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbScheduledForLinkedTemp);
				cmbScheduledForLinkedComboBox cmbScheduledForLinked = (cmbScheduledForLinkedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbScheduledForLinkedComboBox.class, m_cmbScheduledForLinkedTemp);
				super.addComboBox(cmbScheduledForLinked);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 144, 68, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Named Consultant", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 144, 96, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Other HCP", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 512, 40, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Any Doctor to See", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 360, 40, 118, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Associate Specialist", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 272, 40, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"SPR", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 144, 40, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Consultant", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 28, 195, 748, 117, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdDiagnosticTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagnosticTemp);
				grdDiagnosticGrid grdDiagnostic = (grdDiagnosticGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosticGrid.class, m_grdDiagnosticTemp);
				grdDiagnostic.addStringColumn("Diagnostic", 0, 0, 550, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnostic.addStringColumn("Schedule Detail", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdDiagnostic);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 207, 408, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 205, 128, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 784, 195, 25, 25, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Minus, form_images_local.Core.MinusDisabled, "Remove Selected Diagnostic", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupDiagnosticDay = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupDiagnosticDay);
				GroupDiagnosticDayRadioButton GroupDiagnosticDay = (GroupDiagnosticDayRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDiagnosticDayRadioButton.class, tmpGroupDiagnosticDay);
				GroupDiagnosticDay.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupDiagnosticDay);
			}

			public ims.core.forms.mosquery.IComponent ccLinkedNamedConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccLinkedNamedConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccLinkedNamedConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccLinkedNamedConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccLinkedNamedConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccLinkedNamedConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public Label lblToSeeLinked()
			{
				return (Label)super.getControl(8);
			}
			public Button btnCancelDiagnostic()
			{
				return (Button)super.getControl(9);
			}
			public Button btnSaveDiagnostic()
			{
				return (Button)super.getControl(10);
			}
			public Button btnEditDiagnostic()
			{
				return (Button)super.getControl(11);
			}
			public Button btnAddDiagnostic()
			{
				return (Button)super.getControl(12);
			}
			public DateControl dteScheduledForDiagnostic()
			{
				return (DateControl)super.getControl(13);
			}
			public DateControl dteScheduledForLinked()
			{
				return (DateControl)super.getControl(14);
			}
			public cmbScheduledForDiagnosticComboBox cmbScheduledForDiagnostic()
			{
				return (cmbScheduledForDiagnosticComboBox)super.getComboBox(0);
			}
			public cmbDiagnosticComboBox cmbDiagnostic()
			{
				return (cmbDiagnosticComboBox)super.getComboBox(1);
			}
			public cmbOtherHCPLinkedComboBox cmbOtherHCPLinked()
			{
				return (cmbOtherHCPLinkedComboBox)super.getComboBox(2);
			}
			public cmbScheduledForLinkedComboBox cmbScheduledForLinked()
			{
				return (cmbScheduledForLinkedComboBox)super.getComboBox(3);
			}
			public CheckBox chkLinkedNamedConsultant()
			{
				return (CheckBox)super.getControl(19);
			}
			public CheckBox chkOtherHCPLinked()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkAnyDoctorLinked()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkAssociateSpecLinked()
			{
				return (CheckBox)super.getControl(22);
			}
			public CheckBox chkSprLinked()
			{
				return (CheckBox)super.getControl(23);
			}
			public CheckBox chkConsultantLinked()
			{
				return (CheckBox)super.getControl(24);
			}
			public grdDiagnosticGrid grdDiagnostic()
			{
				return (grdDiagnosticGrid)super.getGrid(0);
			}
			public IntBox intScheduledForDiagnostic()
			{
				return (IntBox)super.getControl(26);
			}
			public IntBox intScheduledForLinked()
			{
				return (IntBox)super.getControl(27);
			}
			public ImageButton imbRemoveDiagnostic()
			{
				return (ImageButton)super.getControl(28);
			}
			public GroupDiagnosticDayRadioButton GroupDiagnosticDay()
			{
				return (GroupDiagnosticDayRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabRecurringApptsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbWeeklyInYheMonthComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.WeekInTheMonth value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.WeekInTheMonth value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.WeekInTheMonth value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.WeekInTheMonth value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.WeekInTheMonth value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.WeekInTheMonth getValue()
				{
					return (ims.RefMan.vo.lookups.WeekInTheMonth)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.WeekInTheMonth value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbFunctionRecurringComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ServiceFunction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ServiceFunction value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ServiceFunction getValue()
				{
					return (ims.core.vo.lookups.ServiceFunction)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ServiceFunction value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbServiceRecurringComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupEnuRecurringRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 152, 240, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper58.getX(), anchoringHelper58.getY(), anchoringHelper58.getWidth(), "Monthly", startTabIndex.intValue() + 55);
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 152, 216, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper59.getX(), anchoringHelper59.getY(), anchoringHelper59.getWidth(), "Weekly", startTabIndex.intValue() + 54);
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 152, 192, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper60.getX(), anchoringHelper60.getY(), anchoringHelper60.getWidth(), "Daily", startTabIndex.intValue() + 53);
				}
				public void setText(GroupEnuRecurringEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupEnuRecurringEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupEnuRecurringEnumeration.None;
						case 0: return GroupEnuRecurringEnumeration.rdoMonthly;
						case 1: return GroupEnuRecurringEnumeration.rdoWeekly;
						case 2: return GroupEnuRecurringEnumeration.rdoDaily;
					}
					return null;
				}
				public void setValue(GroupEnuRecurringEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupEnuRecurringEnumeration.None.id);
				}
				public boolean isEnabled(GroupEnuRecurringEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupEnuRecurringEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupEnuRecurringEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupEnuRecurringEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupEnuRecurringEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupEnuRecurringEnumeration None = new GroupEnuRecurringEnumeration(-1);
				public static GroupEnuRecurringEnumeration rdoMonthly = new GroupEnuRecurringEnumeration(0);
				public static GroupEnuRecurringEnumeration rdoWeekly = new GroupEnuRecurringEnumeration(1);
				public static GroupEnuRecurringEnumeration rdoDaily = new GroupEnuRecurringEnumeration(2);
				private GroupEnuRecurringEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupEnuRecurringEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupYesNoRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 320, 40, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper61.getX(), anchoringHelper61.getY(), anchoringHelper61.getWidth(), "No", startTabIndex.intValue() + 49);
					RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 251, 40, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper62.getX(), anchoringHelper62.getY(), anchoringHelper62.getWidth(), "Yes", startTabIndex.intValue() + 48);
				}
				public void setText(GroupYesNoEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupYesNoEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupYesNoEnumeration.None;
						case 0: return GroupYesNoEnumeration.rdoNo;
						case 1: return GroupYesNoEnumeration.rdoYes;
					}
					return null;
				}
				public void setValue(GroupYesNoEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupYesNoEnumeration.None.id);
				}
				public boolean isEnabled(GroupYesNoEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupYesNoEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupYesNoEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupYesNoEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupYesNoEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupYesNoEnumeration None = new GroupYesNoEnumeration(-1);
				public static GroupYesNoEnumeration rdoNo = new GroupYesNoEnumeration(0);
				public static GroupYesNoEnumeration rdoYes = new GroupYesNoEnumeration(1);
				private GroupYesNoEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupYesNoEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 800, 344, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Recurring Appointments Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 648, 216, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "month", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 528, 216, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "of every", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 416, 216, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "or Days", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 88, 264, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End After:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 218, 264, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Occurrences", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 88, 192, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recurring:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 88, 93, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Function:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 88, 67, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 88, 40, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Same Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 232, 216, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No of times per week:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 88, 126, 164, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Starting week commencing:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 520, 144, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 250, 124, 122, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 240, 214, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbWeeklyInYheMonthTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbWeeklyInYheMonthTemp);
				cmbWeeklyInYheMonthComboBox cmbWeeklyInYheMonth = (cmbWeeklyInYheMonthComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWeeklyInYheMonthComboBox.class, m_cmbWeeklyInYheMonthTemp);
				super.addComboBox(cmbWeeklyInYheMonth);
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 250, 91, 389, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbFunctionRecurringTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbFunctionRecurringTemp);
				cmbFunctionRecurringComboBox cmbFunctionRecurring = (cmbFunctionRecurringComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFunctionRecurringComboBox.class, m_cmbFunctionRecurringTemp);
				super.addComboBox(cmbFunctionRecurring);
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 250, 65, 389, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbServiceRecurringTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbServiceRecurringTemp);
				cmbServiceRecurringComboBox cmbServiceRecurring = (cmbServiceRecurringComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceRecurringComboBox.class, m_cmbServiceRecurringTemp);
				super.addComboBox(cmbServiceRecurring);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 472, 296, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sun", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 472, 272, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 64), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sat", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 472, 248, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Fri", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 472, 224, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Thurs", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 472, 200, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Wed", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 472, 176, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 60), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Tues", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 472, 152, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Mon", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 584, 214, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 360, 214, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 152, 262, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(2)}));
		
				// RadioButton Controls
				RadioButton tmpGroupEnuRecurring = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupEnuRecurring);
				GroupEnuRecurringRadioButton GroupEnuRecurring = (GroupEnuRecurringRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupEnuRecurringRadioButton.class, tmpGroupEnuRecurring);
				GroupEnuRecurring.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupEnuRecurring);
				RadioButton tmpGroupYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupYesNo);
				GroupYesNoRadioButton GroupYesNo = (GroupYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupYesNoRadioButton.class, tmpGroupYesNo);
				GroupYesNo.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupYesNo);
			}

			public Label lblMonth()
			{
				return (Label)super.getControl(1);
			}
			public Label lblOfEvery()
			{
				return (Label)super.getControl(2);
			}
			public Label lblOrDays()
			{
				return (Label)super.getControl(3);
			}
			public Label lbl4()
			{
				return (Label)super.getControl(5);
			}
			public Label lblFunctionRecurring()
			{
				return (Label)super.getControl(7);
			}
			public Label lblServiceRecurring()
			{
				return (Label)super.getControl(8);
			}
			public Label lblNoOfTimePerWeek()
			{
				return (Label)super.getControl(10);
			}
			public TextBox txtDays()
			{
				return (TextBox)super.getControl(12);
			}
			public DateControl dteWeekCommencing()
			{
				return (DateControl)super.getControl(13);
			}
			public cmbWeeklyInYheMonthComboBox cmbWeeklyInYheMonth()
			{
				return (cmbWeeklyInYheMonthComboBox)super.getComboBox(0);
			}
			public cmbFunctionRecurringComboBox cmbFunctionRecurring()
			{
				return (cmbFunctionRecurringComboBox)super.getComboBox(1);
			}
			public cmbServiceRecurringComboBox cmbServiceRecurring()
			{
				return (cmbServiceRecurringComboBox)super.getComboBox(2);
			}
			public CheckBox chkSun()
			{
				return (CheckBox)super.getControl(17);
			}
			public CheckBox chkSat()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkFri()
			{
				return (CheckBox)super.getControl(19);
			}
			public CheckBox chkThurs()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkWed()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkTues()
			{
				return (CheckBox)super.getControl(22);
			}
			public CheckBox chkMon()
			{
				return (CheckBox)super.getControl(23);
			}
			public IntBox intNMonth()
			{
				return (IntBox)super.getControl(24);
			}
			public IntBox intNoOfTime()
			{
				return (IntBox)super.getControl(25);
			}
			public IntBox intOccueancs()
			{
				return (IntBox)super.getControl(26);
			}
			public GroupEnuRecurringRadioButton GroupEnuRecurring()
			{
				return (GroupEnuRecurringRadioButton)super.getRadioButton(0);
			}
			public GroupYesNoRadioButton GroupYesNo()
			{
				return (GroupYesNoRadioButton)super.getRadioButton(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 504, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOPA = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"OPA", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabOPAContainer m_tabOPAContainer = (tabOPAContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOPAContainer.class, m_tabOPA, factory);
			super.addContainer(m_tabOPA, m_tabOPAContainer);
			ims.framework.utils.SizeInfo m_tabOPADesignSize = new ims.framework.utils.SizeInfo(832, 504);
			ims.framework.utils.SizeInfo m_tabOPARuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper90.getWidth(), anchoringHelper90.getHeight());
			m_tabOPAContainer.setContext(form, appForm, m_tabOPA, loader, form_images_local, startControlID, m_tabOPADesignSize, m_tabOPARuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 504, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLinkedOpa = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Linked OPAs", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabLinkedOpaContainer m_tabLinkedOpaContainer = (tabLinkedOpaContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLinkedOpaContainer.class, m_tabLinkedOpa, factory);
			super.addContainer(m_tabLinkedOpa, m_tabLinkedOpaContainer);
			ims.framework.utils.SizeInfo m_tabLinkedOpaDesignSize = new ims.framework.utils.SizeInfo(832, 504);
			ims.framework.utils.SizeInfo m_tabLinkedOpaRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper91.getWidth(), anchoringHelper91.getHeight());
			m_tabLinkedOpaContainer.setContext(form, appForm, m_tabLinkedOpa, loader, form_images_local, startControlID, m_tabLinkedOpaDesignSize, m_tabLinkedOpaRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 504, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOpaAndDiagnostics = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"OPA and Linked Diagnostic(s)", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabOpaAndDiagnosticsContainer m_tabOpaAndDiagnosticsContainer = (tabOpaAndDiagnosticsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOpaAndDiagnosticsContainer.class, m_tabOpaAndDiagnostics, factory);
			super.addContainer(m_tabOpaAndDiagnostics, m_tabOpaAndDiagnosticsContainer);
			ims.framework.utils.SizeInfo m_tabOpaAndDiagnosticsDesignSize = new ims.framework.utils.SizeInfo(832, 504);
			ims.framework.utils.SizeInfo m_tabOpaAndDiagnosticsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper92.getWidth(), anchoringHelper92.getHeight());
			m_tabOpaAndDiagnosticsContainer.setContext(form, appForm, m_tabOpaAndDiagnostics, loader, form_images_local, startControlID, m_tabOpaAndDiagnosticsDesignSize, m_tabOpaAndDiagnosticsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 504, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRecurringAppts = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Recurring Appointments", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabRecurringApptsContainer m_tabRecurringApptsContainer = (tabRecurringApptsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRecurringApptsContainer.class, m_tabRecurringAppts, factory);
			super.addContainer(m_tabRecurringAppts, m_tabRecurringApptsContainer);
			ims.framework.utils.SizeInfo m_tabRecurringApptsDesignSize = new ims.framework.utils.SizeInfo(832, 504);
			ims.framework.utils.SizeInfo m_tabRecurringApptsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper93.getWidth(), anchoringHelper93.getHeight());
			m_tabRecurringApptsContainer.setContext(form, appForm, m_tabRecurringAppts, loader, form_images_local, startControlID, m_tabRecurringApptsDesignSize, m_tabRecurringApptsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabOPA().setVisible(false);
			tabLinkedOpa().setVisible(false);
			tabOpaAndDiagnostics().setVisible(false);
			tabRecurringAppts().setVisible(false);
		}
		public void settabOPAEnabled(boolean value)
		{
			tabOPA().setEnabled(value);
		}
		public void settabLinkedOpaEnabled(boolean value)
		{
			tabLinkedOpa().setEnabled(value);
		}
		public void settabOpaAndDiagnosticsEnabled(boolean value)
		{
			tabOpaAndDiagnostics().setEnabled(value);
		}
		public void settabRecurringApptsEnabled(boolean value)
		{
			tabRecurringAppts().setEnabled(value);
		}
		public void showtabOPA()
		{
			tabLinkedOpa().setVisible(false);
			tabOpaAndDiagnostics().setVisible(false);
			tabRecurringAppts().setVisible(false);
			tabOPA().setVisible(true);
		}
		public void showtabLinkedOpa()
		{
			tabOPA().setVisible(false);
			tabOpaAndDiagnostics().setVisible(false);
			tabRecurringAppts().setVisible(false);
			tabLinkedOpa().setVisible(true);
		}
		public void showtabOpaAndDiagnostics()
		{
			tabOPA().setVisible(false);
			tabLinkedOpa().setVisible(false);
			tabRecurringAppts().setVisible(false);
			tabOpaAndDiagnostics().setVisible(true);
		}
		public void showtabRecurringAppts()
		{
			tabOPA().setVisible(false);
			tabLinkedOpa().setVisible(false);
			tabOpaAndDiagnostics().setVisible(false);
			tabRecurringAppts().setVisible(true);
		}

		public tabOPAContainer tabOPA()
		{
			return (tabOPAContainer)super.layers.get(0);
		}
		public tabLinkedOpaContainer tabLinkedOpa()
		{
			return (tabLinkedOpaContainer)super.layers.get(1);
		}
		public tabOpaAndDiagnosticsContainer tabOpaAndDiagnostics()
		{
			return (tabOpaAndDiagnosticsContainer)super.layers.get(2);
		}
		public tabRecurringApptsContainer tabRecurringAppts()
		{
			return (tabRecurringApptsContainer)super.layers.get(3);
		}
	}

	public static class GroupRequestRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 144, 80, 198, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper94.getX(), anchoringHelper94.getY(), anchoringHelper94.getWidth(), "Recurring Appointments", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 144, 56, 198, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper95.getX(), anchoringHelper95.getY(), anchoringHelper95.getWidth(), "OPA and Linked Diagnostic(s)", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 144, 32, 118, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper96.getX(), anchoringHelper96.getY(), anchoringHelper96.getWidth(), "Linked OPAs", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 144, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper97.getX(), anchoringHelper97.getY(), anchoringHelper97.getWidth(), "OPA", startTabIndex.intValue() + 1);
		}
		public void setText(GroupRequestEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupRequestEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupRequestEnumeration.None;
				case 0: return GroupRequestEnumeration.rdoRecurringAppt;
				case 1: return GroupRequestEnumeration.rdoOpaDiagnosis;
				case 2: return GroupRequestEnumeration.rdoLinkedOPAs;
				case 3: return GroupRequestEnumeration.rdoOPA;
			}
			return null;
		}
		public void setValue(GroupRequestEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupRequestEnumeration.None.id);
		}
		public boolean isEnabled(GroupRequestEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupRequestEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupRequestEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupRequestEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupRequestEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupRequestEnumeration None = new GroupRequestEnumeration(-1);
		public static GroupRequestEnumeration rdoRecurringAppt = new GroupRequestEnumeration(0);
		public static GroupRequestEnumeration rdoOpaDiagnosis = new GroupRequestEnumeration(1);
		public static GroupRequestEnumeration rdoLinkedOPAs = new GroupRequestEnumeration(2);
		public static GroupRequestEnumeration rdoOPA = new GroupRequestEnumeration(3);
		private GroupRequestEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupRequestEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 416, 8, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Request to Schedule:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 368, 600, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 70), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 685, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 68), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 480, 8, 360, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// RadioButton Controls
		RadioButton tmpGroupRequest = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupRequest);
		GroupRequestRadioButton GroupRequest = (GroupRequestRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRequestRadioButton.class, tmpGroupRequest);
		GroupRequest.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupRequest);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}
	public Button btnRIE()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtComment()
	{
		return (TextBox)super.getControl(11);
	}
	public GroupRequestRadioButton GroupRequest()
	{
		return (GroupRequestRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			Core = new CoreForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				LinkedAppointmentDetails = new LocalFormName(114124);
			}
			public final FormName LinkedAppointmentDetails;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public SchedulingForms Scheduling;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Minus = new ImageHelper(102118, "Images/Core/minus.gif", new Integer(16), new Integer(16));
				MinusDisabled = new ImageHelper(102119, "Images/Core/minus_disabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Minus;
			public final ims.framework.utils.Image MinusDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ServiceTriageConf = new ims.framework.ContextVariable("ServiceTriageConf", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier + "");
			cxl_ServiceAndFunctionForAppt = new ims.framework.ContextVariable("ServiceAndFunctionForAppt", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceAndFunctionForAppt_" + componentIdentifier + "");
			cxl_SelectedDiagnostic = new ims.framework.ContextVariable("SelectedDiagnostic", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier + "");
			cxl_CatsReferral = new ims.framework.ContextVariable("CatsReferral", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__CatsReferral_" + componentIdentifier + "");
			cxl_SelectedFutureAppointment = new ims.framework.ContextVariable("SelectedFutureAppointment", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier + "");
			cxl_LoggedHCP = new ims.framework.ContextVariable("LoggedHCP", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier + "");
			cxl_Recurring = new ims.framework.ContextVariable("Recurring", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__Recurring_" + componentIdentifier + "");
			cxl_Show_RIE_Button = new ims.framework.ContextVariable("Show_RIE_Button", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__Show_RIE_Button_" + componentIdentifier + "");
			cxl_HideRIEandEdit = new ims.framework.ContextVariable("HideRIEandEdit", prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__HideRIEandEdit_" + componentIdentifier + "");
		}
		
		public boolean getServiceTriageConfIsNotNull()
		{
			return !cxl_ServiceTriageConf.getValueIsNull(context);
		}
		public ims.core.vo.ServiceTriageActionVo getServiceTriageConf()
		{
			return (ims.core.vo.ServiceTriageActionVo)cxl_ServiceTriageConf.getValue(context);
		}
		public void setServiceTriageConf(ims.core.vo.ServiceTriageActionVo value)
		{
			cxl_ServiceTriageConf.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceTriageConf = null;
		public boolean getServiceAndFunctionForApptIsNotNull()
		{
			return !cxl_ServiceAndFunctionForAppt.getValueIsNull(context);
		}
		public ims.scheduling.vo.ServiceAndFunctionForFutureApptsVo getServiceAndFunctionForAppt()
		{
			return (ims.scheduling.vo.ServiceAndFunctionForFutureApptsVo)cxl_ServiceAndFunctionForAppt.getValue(context);
		}
		public void setServiceAndFunctionForAppt(ims.scheduling.vo.ServiceAndFunctionForFutureApptsVo value)
		{
			cxl_ServiceAndFunctionForAppt.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceAndFunctionForAppt = null;
		public boolean getSelectedDiagnosticIsNotNull()
		{
			return !cxl_SelectedDiagnostic.getValueIsNull(context);
		}
		public ims.RefMan.vo.LinkedDiagnosticVo getSelectedDiagnostic()
		{
			return (ims.RefMan.vo.LinkedDiagnosticVo)cxl_SelectedDiagnostic.getValue(context);
		}
		public void setSelectedDiagnostic(ims.RefMan.vo.LinkedDiagnosticVo value)
		{
			cxl_SelectedDiagnostic.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDiagnostic = null;
		public boolean getCatsReferralIsNotNull()
		{
			return !cxl_CatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cxl_CatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CatsReferral' RefVo context variable.");
			if(value == null)
				cxl_CatsReferral.setValue(context, null);
			else
				cxl_CatsReferral.setValue(context, new ims.RefMan.vo.CatsReferralRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CatsReferral = null;
		public boolean getSelectedFutureAppointmentIsNotNull()
		{
			return !cxl_SelectedFutureAppointment.getValueIsNull(context);
		}
		public ims.scheduling.vo.FutureAppointmentDetailsVo getSelectedFutureAppointment()
		{
			return (ims.scheduling.vo.FutureAppointmentDetailsVo)cxl_SelectedFutureAppointment.getValue(context);
		}
		public void setSelectedFutureAppointment(ims.scheduling.vo.FutureAppointmentDetailsVo value)
		{
			cxl_SelectedFutureAppointment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedFutureAppointment = null;
		public boolean getLoggedHCPIsNotNull()
		{
			return !cxl_LoggedHCP.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedHCP()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedHCP.getValue(context);
		}
		public void setLoggedHCP(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedHCP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedHCP = null;
		public boolean getRecurringIsNotNull()
		{
			return !cxl_Recurring.getValueIsNull(context);
		}
		public ims.RefMan.vo.lookups.Recurring getRecurring()
		{
			return (ims.RefMan.vo.lookups.Recurring)cxl_Recurring.getValue(context);
		}
		public void setRecurring(ims.RefMan.vo.lookups.Recurring value)
		{
			cxl_Recurring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Recurring = null;
		public boolean getShow_RIE_ButtonIsNotNull()
		{
			return !cxl_Show_RIE_Button.getValueIsNull(context);
		}
		public Integer getShow_RIE_Button()
		{
			return (Integer)cxl_Show_RIE_Button.getValue(context);
		}
		public void setShow_RIE_Button(Integer value)
		{
			cxl_Show_RIE_Button.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Show_RIE_Button = null;
		public boolean getHideRIEandEditIsNotNull()
		{
			return !cxl_HideRIEandEdit.getValueIsNull(context);
		}
		public Boolean getHideRIEandEdit()
		{
			return (Boolean)cxl_HideRIEandEdit.getValue(context);
		}
		public void setHideRIEandEdit(Boolean value)
		{
			cxl_HideRIEandEdit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HideRIEandEdit = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[285];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-APPOINTMENTS", "Appointments");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SOURCE", "Source");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SAMESERVICE", "SameService");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SAMEDAY", "SameDay");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-REQUESTTOSCHEDULE", "RequestToSchedule");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-STARTINGWEEK", "StartingWeek");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-MON", "Mon");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-TUES", "Tues");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-WED", "Wed");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-THURS", "Thurs");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-FRI", "Fri");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SAT", "Sat");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SUN", "Sun");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-COMMENTS", "Comments");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-REFERRAL", "Referral");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-NUMBEROFLINKEDRECURRINGAPPTSTOBOOK", "NumberOfLinkedRecurringApptsToBook");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTFUNCTION", "FirstApptFunction");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTPERIODVALUE", "FirstApptPeriodValue");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTPERIODTYPE", "FirstApptPeriodType");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTFUTUREAPPTBYDATE", "FirstApptFutureApptByDate");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTFUNCTION", "SecondApptFunction");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTPERIODVALUE", "SecondApptPeriodValue");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTPERIODTYPE", "SecondApptPeriodType");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTFUTUREAPPTBYDATE", "SecondApptFutureApptByDate");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTFUNCTION", "ThirdApptFunction");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTPERIODVALUE", "ThirdApptPeriodValue");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTPERIODTYPE", "ThirdApptPeriodType");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTFUTUREAPPTBYDATE", "ThirdApptFutureApptByDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-RECURRING", "Recurring");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-ENDAFTERNOCCURRENCES", "EndAfterNOccurrences");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-NOOFTIMESPERWEEK", "NoOfTimesPerWeek");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-EVERYNMONTHS", "EveryNMonths");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-WEEKINTHEMONTH", "WeekInTheMonth");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-FUTUREAPPOINTMENTCOMMENTS", "FutureAppointmentComments");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-DONOTMOVEDATE", "DoNotMoveDate");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-APPOINTMENTS", "Appointments");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SOURCE", "Source");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SAMESERVICE", "SameService");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SAMEDAY", "SameDay");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-REQUESTTOSCHEDULE", "RequestToSchedule");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-STARTINGWEEK", "StartingWeek");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-MON", "Mon");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-TUES", "Tues");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-WED", "Wed");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-THURS", "Thurs");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-FRI", "Fri");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SAT", "Sat");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-SUN", "Sun");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-COMMENTS", "Comments");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-REFERRAL", "Referral");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-NUMBEROFLINKEDRECURRINGAPPTSTOBOOK", "NumberOfLinkedRecurringApptsToBook");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTFUNCTION", "FirstApptFunction");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTPERIODVALUE", "FirstApptPeriodValue");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTPERIODTYPE", "FirstApptPeriodType");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_1STAPPTFUTUREAPPTBYDATE", "FirstApptFutureApptByDate");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTFUNCTION", "SecondApptFunction");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTPERIODVALUE", "SecondApptPeriodValue");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTPERIODTYPE", "SecondApptPeriodType");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_2NDAPPTFUTUREAPPTBYDATE", "SecondApptFutureApptByDate");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTFUNCTION", "ThirdApptFunction");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTPERIODVALUE", "ThirdApptPeriodValue");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTPERIODTYPE", "ThirdApptPeriodType");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-_3RDAPPTFUTUREAPPTBYDATE", "ThirdApptFutureApptByDate");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-RECURRING", "Recurring");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-ENDAFTERNOCCURRENCES", "EndAfterNOccurrences");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-NOOFTIMESPERWEEK", "NoOfTimesPerWeek");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-EVERYNMONTHS", "EveryNMonths");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-WEEKINTHEMONTH", "WeekInTheMonth");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-FUTUREAPPOINTMENTCOMMENTS", "FutureAppointmentComments");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-DONOTMOVEDATE", "DoNotMoveDate");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-ID", "ID_ServiceTriageAction");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-SERVICE", "Service");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-OPA", "OPA");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DIRECTTOLIST", "DirectToList");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DIRECTTOLISTANDOPA", "DirectToListAndOPA");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-SPR", "SPR");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-LINKEDDIAGNOSTIC", "LinkedDiagnostic");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CONSULTANT", "Consultant");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-ASSOCIATESPECIALIST", "AssociateSpecialist");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-ANYDOCTORTOSEE", "AnyDoctorToSee");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-OTHERHCP", "OtherHCP");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-LINKEDOPASANDDIAGNOSTIC", "LinkedOPAsAndDiagnostic");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-OPAANDLINKEDDIAGOSTIC", "OPAAndLinkedDiagostic");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-LINKEDOPAS", "LinkedOPAs");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORMANUALREFERRAL", "DefaultActionForManualReferral");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORCABREFERRAL", "DefaultActionForCABReferral");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CHANGECABOPA", "ChangeCABOPA");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CHANGECABOPAANDDIRECTTOLIST", "ChangeCABOPAandDirectToList");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__ServiceTriageConf_" + componentIdentifier, "BO-1005100010-CABOPAANDDIRECTTOLIST", "CABOPAandDirectToList");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier, "BO-1096100082-ID", "ID_LinkedDiagnostic");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier, "BO-1096100082-DIAGNOSTICS", "Diagnostics");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier, "BO-1096100082-PERIODVALUE", "PeriodValue");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier, "BO-1096100082-PERIODTYPE", "PeriodType");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier, "BO-1096100082-SAMEDAY", "SameDay");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedDiagnostic_" + componentIdentifier, "BO-1096100082-REQUESTEDDATE", "RequestedDate");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-APPOINTMENTS", "Appointments");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-SOURCE", "Source");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-SAMESERVICE", "SameService");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-SAMEDAY", "SameDay");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-REQUESTTOSCHEDULE", "RequestToSchedule");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-STARTINGWEEK", "StartingWeek");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-MON", "Mon");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-TUES", "Tues");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-WED", "Wed");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-THURS", "Thurs");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-FRI", "Fri");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-SAT", "Sat");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-SUN", "Sun");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-COMMENTS", "Comments");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-REFERRAL", "Referral");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-NUMBEROFLINKEDRECURRINGAPPTSTOBOOK", "NumberOfLinkedRecurringApptsToBook");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_1STAPPTFUNCTION", "FirstApptFunction");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_1STAPPTPERIODVALUE", "FirstApptPeriodValue");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_1STAPPTPERIODTYPE", "FirstApptPeriodType");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_1STAPPTFUTUREAPPTBYDATE", "FirstApptFutureApptByDate");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_2NDAPPTFUNCTION", "SecondApptFunction");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_2NDAPPTPERIODVALUE", "SecondApptPeriodValue");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_2NDAPPTPERIODTYPE", "SecondApptPeriodType");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_2NDAPPTFUTUREAPPTBYDATE", "SecondApptFutureApptByDate");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_3RDAPPTFUNCTION", "ThirdApptFunction");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_3RDAPPTPERIODVALUE", "ThirdApptPeriodValue");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_3RDAPPTPERIODTYPE", "ThirdApptPeriodType");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-_3RDAPPTFUTUREAPPTBYDATE", "ThirdApptFutureApptByDate");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-RECURRING", "Recurring");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-ENDAFTERNOCCURRENCES", "EndAfterNOccurrences");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-NOOFTIMESPERWEEK", "NoOfTimesPerWeek");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-EVERYNMONTHS", "EveryNMonths");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-WEEKINTHEMONTH", "WeekInTheMonth");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-FUTUREAPPOINTMENTCOMMENTS", "FutureAppointmentComments");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__SelectedFutureAppointment_" + componentIdentifier, "BO-1090100021-DONOTMOVEDATE", "DoNotMoveDate");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.FutureAppointmentDetails.__internal_x_context__LoggedHCP_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
