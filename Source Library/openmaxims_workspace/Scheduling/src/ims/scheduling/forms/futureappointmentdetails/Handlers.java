//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.futureappointmentdetails;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbWeeklyInYheMonthLookup();
	abstract protected void defaultcmbWeeklyInYheMonthLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRIEClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupRequestValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkNamedConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbScheduledForValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntScheduledForValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkOtherHcpValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAnyDoctorValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAssociateSpecValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSPRValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnLinkedAppointmentsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupNoLinkedApptsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupDiagnosticDayValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveDiagnosticClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelDiagnosticClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveDiagnosticClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditDiagnosticClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddDiagnosticClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteScheduledForDiagnosticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbScheduledForDiagnosticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntScheduledForDiagnosticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosticSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkLinkedNamedConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbScheduledForLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntScheduledForLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkOtherHCPLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAnyDoctorLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAssociateSpecLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSprLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkConsultantLinkedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupEnuRecurringValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbWeeklyInYheMonthValueSet(Object value);
	abstract protected void onCmbServiceRecurringValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupYesNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnRIE().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRIEClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnClose().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseClick();
			}
		});
		this.form.GroupRequest().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupRequestValueChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.lyrTabs().tabOPA().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabOPAActivated();
			}
		});
		this.form.lyrTabs().tabLinkedOpa().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabLinkedOpaActivated();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabOpaAndDiagnosticsActivated();
			}
		});
		this.form.lyrTabs().tabRecurringAppts().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTabstabRecurringApptsActivated();
			}
		});
		this.form.lyrTabs().tabOPA().chkNamedConsultant().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkNamedConsultantValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().cmbScheduledFor().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbScheduledForValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().intScheduledFor().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntScheduledForValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().chkOtherHcp().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkOtherHcpValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().chkAnyDoctor().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAnyDoctorValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().chkAssociateSpec().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAssociateSpecValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().chkSPR().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSPRValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().chkConsultant().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkConsultantValueChanged();
			}
		});
		this.form.lyrTabs().tabOPA().cmbService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbServiceValueChanged();
			}
		});
		this.form.lyrTabs().tabLinkedOpa().btnLinkedAppointments().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnLinkedAppointmentsClick();
			}
		});
		this.form.lyrTabs().tabLinkedOpa().GroupNoLinkedAppts().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupNoLinkedApptsValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().GroupDiagnosticDay().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupDiagnosticDayValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().imbRemoveDiagnostic().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveDiagnosticClick();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().btnCancelDiagnostic().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelDiagnosticClick();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().btnSaveDiagnostic().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveDiagnosticClick();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().btnEditDiagnostic().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditDiagnosticClick();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().btnAddDiagnostic().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddDiagnosticClick();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().dteScheduledForDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteScheduledForDiagnosticValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbScheduledForDiagnosticValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().intScheduledForDiagnostic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntScheduledForDiagnosticValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().grdDiagnostic().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosticSelectionChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().chkLinkedNamedConsultant().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkLinkedNamedConsultantValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().cmbScheduledForLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbScheduledForLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().intScheduledForLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntScheduledForLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().chkOtherHCPLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkOtherHCPLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().chkAnyDoctorLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAnyDoctorLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().chkAssociateSpecLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAssociateSpecLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().chkSprLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSprLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabOpaAndDiagnostics().chkConsultantLinked().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkConsultantLinkedValueChanged();
			}
		});
		this.form.lyrTabs().tabRecurringAppts().GroupEnuRecurring().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupEnuRecurringValueChanged();
			}
		});
		this.form.lyrTabs().tabRecurringAppts().cmbWeeklyInYheMonth().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbWeeklyInYheMonthValueSet(value);
			}
		});
		this.form.lyrTabs().tabRecurringAppts().cmbServiceRecurring().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbServiceRecurringValueChanged();
			}
		});
		this.form.lyrTabs().tabRecurringAppts().GroupYesNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupYesNoValueChanged();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbWeeklyInYheMonthLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbWeeklyInYheMonthLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbWeeklyInYheMonthLookupValue();
	}
	private void onlyrTabstabOPAActivated()
	{
		this.form.lyrTabs().showtabOPA();
	}
	private void onlyrTabstabLinkedOpaActivated()
	{
		this.form.lyrTabs().showtabLinkedOpa();
	}
	private void onlyrTabstabOpaAndDiagnosticsActivated()
	{
		this.form.lyrTabs().showtabOpaAndDiagnostics();
	}
	private void onlyrTabstabRecurringApptsActivated()
	{
		this.form.lyrTabs().showtabRecurringAppts();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
