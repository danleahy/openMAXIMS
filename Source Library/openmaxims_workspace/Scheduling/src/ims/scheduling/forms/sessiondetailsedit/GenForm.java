//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.sessiondetailsedit;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSessEditLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGeneralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbConsMediaComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ConsultationMediaType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ConsultationMediaType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ConsultationMediaType getValue()
				{
					return (ims.scheduling.vo.lookups.ConsultationMediaType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ConsultationMediaType value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 457, 174, 14, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "*", new Integer(0), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 457, 122, 14, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "*", new Integer(0), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 172, 100, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Case Note Folders\nLocation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 233, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultation Media:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 458, 233, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Slot Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 458, 97, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Anaesthetic Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 458, 69, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Theatre Session Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 458, 41, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "End Time: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 458, 10, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Start Time: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 152, 240, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 97, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 69, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 41, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 125, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 205, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 261, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 432, 175, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "...", Boolean.FALSE, "Select Case Note Folders Location", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 432, 123, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "...", Boolean.FALSE, "Select Location", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 128, 175, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 594, 231, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 594, 97, 216, 79, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 594, 67, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 128, 39, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 128, 67, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 128, 95, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 128, 123, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 128, 203, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 128, 259, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 128, 231, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbConsMediaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbConsMediaTemp);
				cmbConsMediaComboBox cmbConsMedia = (cmbConsMediaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbConsMediaComboBox.class, m_cmbConsMediaTemp);
				super.addComboBox(cmbConsMedia);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 128, 152, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Case Notes Not Required", Boolean.TRUE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 538, 39, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 538, 8, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
			}

			public Label lblCaseNoteLocStar()
			{
				return (Label)super.getControl(0);
			}
			public Label lblLocStar()
			{
				return (Label)super.getControl(1);
			}
			public Label lblCaseNoteLoc()
			{
				return (Label)super.getControl(2);
			}
			public Label lblSlotType()
			{
				return (Label)super.getControl(4);
			}
			public Label lblAnaestheticType()
			{
				return (Label)super.getControl(5);
			}
			public Label lblTheatreType()
			{
				return (Label)super.getControl(6);
			}
			public Button btnCaseNoteLocation()
			{
				return (Button)super.getControl(17);
			}
			public Button btnLocation()
			{
				return (Button)super.getControl(18);
			}
			public TextBox txtCaseNoteLocation()
			{
				return (TextBox)super.getControl(19);
			}
			public TextBox txtSlotType()
			{
				return (TextBox)super.getControl(20);
			}
			public TextBox txtAnaestheticTypes()
			{
				return (TextBox)super.getControl(21);
			}
			public TextBox txtTheatreSessionType()
			{
				return (TextBox)super.getControl(22);
			}
			public TextBox txtName()
			{
				return (TextBox)super.getControl(23);
			}
			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(24);
			}
			public TextBox txtType()
			{
				return (TextBox)super.getControl(25);
			}
			public TextBox txtCategory()
			{
				return (TextBox)super.getControl(26);
			}
			public TextBox txtLocation()
			{
				return (TextBox)super.getControl(27);
			}
			public TextBox txtService()
			{
				return (TextBox)super.getControl(28);
			}
			public TextBox txtStatus()
			{
				return (TextBox)super.getControl(29);
			}
			public cmbConsMediaComboBox cmbConsMedia()
			{
				return (cmbConsMediaComboBox)super.getComboBox(0);
			}
			public CheckBox chkCaseNotesNotRequired()
			{
				return (CheckBox)super.getControl(31);
			}
			public TimeControl timEnd()
			{
				return (TimeControl)super.getControl(32);
			}
			public TimeControl timStart()
			{
				return (TimeControl)super.getControl(33);
			}
		}
		public static class tabListOwnersContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbListTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ProfileListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ProfileListType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ProfileListType getValue()
				{
					return (ims.scheduling.vo.lookups.ProfileListType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ProfileListType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdListOwnerRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdListOwnerRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColHcpReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColHcpReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColHcpOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColHcp()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColHcpTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColListOwnerReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColListOwnerReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColListOwnerOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColListOwner()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColListOwner(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColListOwnerTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColAttendingClinicianReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColAttendingClinicianReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColAttendingClinicianOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColAttendingClinician()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColAttendingClinician(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColAttendingClinicianTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.scheduling.vo.Session_ListOwnerVo getValue()
				{
					return (ims.scheduling.vo.Session_ListOwnerVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Session_ListOwnerVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdListOwnerRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdListOwnerRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdListOwnerRow get(int index)
				{
					return new grdListOwnerRow(super.collection.get(index));
				}
				public grdListOwnerRow newRow()
				{
					return new grdListOwnerRow(super.collection.newRow());
				}
				public grdListOwnerRow newRow(boolean autoSelect)
				{
					return new grdListOwnerRow(super.collection.newRow(autoSelect));
				}
				public grdListOwnerRow newRowAt(int index)
				{
					return new grdListOwnerRow(super.collection.newRowAt(index));
				}
				public grdListOwnerRow newRowAt(int index, boolean autoSelect)
				{
					return new grdListOwnerRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdListOwnerGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.Session_ListOwnerVoCollection getValues()
				{
					ims.scheduling.vo.Session_ListOwnerVoCollection listOfValues = new ims.scheduling.vo.Session_ListOwnerVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Session_ListOwnerVo getValue()
				{
					return (ims.scheduling.vo.Session_ListOwnerVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Session_ListOwnerVo value)
				{
					super.grid.setValue(value);
				}
				public grdListOwnerRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdListOwnerRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdListOwnerRowCollection getRows()
				{
					return new grdListOwnerRowCollection(super.grid.getRows());
				}
				public grdListOwnerRow getRowByValue(ims.scheduling.vo.Session_ListOwnerVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdListOwnerRow(row);
				}
				public void setColHcpHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColHcpHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColListOwnerHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColListOwnerHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColAttendingClinicianHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColAttendingClinicianHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper35.getSize(), instance1, startTabIndex.intValue() + 27, skipContextValidation);
				//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(88), new Integer(32), new Integer(296), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 27), m_ccConsultantForm, instance1 } );
				ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1035),  new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 27), m_ccConsultantForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccConsultantControl);
				Menu[] menus1 = m_ccConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 88, 6, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbListTypeTemp);
				cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
				super.addComboBox(cmbListType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 792, 208, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdListOwnerTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsListOwners, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdListOwnerTemp);
				grdListOwnerGrid grdListOwner = (grdListOwnerGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListOwnerGrid.class, m_grdListOwnerTemp);
				grdListOwner.addMutableComboBoxColumn("List Owner", 0, 0, 550, false, true, true, false, true, true, -1);
				grdListOwner.addBoolColumn("List Owner", 1, 1, 100, false, false, 0, true);
				grdListOwner.addBoolColumn("Attending Clinician", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdListOwner);
			}

			public ims.core.forms.mosquery.IComponent ccConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public cmbListTypeComboBox cmbListType()
			{
				return (cmbListTypeComboBox)super.getComboBox(0);
			}
			public grdListOwnerGrid grdListOwner()
			{
				return (grdListOwnerGrid)super.getGrid(0);
			}
		}
		public static class tabDosContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdDosRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDosRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDosIdReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDosIdReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDosIdOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolDosId()
				{
					return (String)super.row.get(0);
				}
				public void setcolDosId(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDosIdTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolDosNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolDosNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolDosNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolDosName()
				{
					return (String)super.row.get(1);
				}
				public void setcolDosName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolDosNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSelectedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSelectedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSelectedOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColSelected()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColSelected(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColSelectedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.scheduling.vo.DirectoryOfServiceVo getValue()
				{
					return (ims.scheduling.vo.DirectoryOfServiceVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.DirectoryOfServiceVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDosRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDosRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDosRow get(int index)
				{
					return new grdDosRow(super.collection.get(index));
				}
				public grdDosRow newRow()
				{
					return new grdDosRow(super.collection.newRow());
				}
				public grdDosRow newRow(boolean autoSelect)
				{
					return new grdDosRow(super.collection.newRow(autoSelect));
				}
				public grdDosRow newRowAt(int index)
				{
					return new grdDosRow(super.collection.newRowAt(index));
				}
				public grdDosRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDosRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDosGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.DirectoryOfServiceVoCollection getValues()
				{
					ims.scheduling.vo.DirectoryOfServiceVoCollection listOfValues = new ims.scheduling.vo.DirectoryOfServiceVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.DirectoryOfServiceVo getValue()
				{
					return (ims.scheduling.vo.DirectoryOfServiceVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.DirectoryOfServiceVo value)
				{
					super.grid.setValue(value);
				}
				public grdDosRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDosRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDosRowCollection getRows()
				{
					return new grdDosRowCollection(super.grid.getRows());
				}
				public grdDosRow getRowByValue(ims.scheduling.vo.DirectoryOfServiceVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDosRow(row);
				}
				public void setcolDosIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDosIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolDosNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolDosNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSelectedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSelectedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 11, 792, 240, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdDosTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDosTemp);
				grdDosGrid grdDos = (grdDosGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDosGrid.class, m_grdDosTemp);
				grdDos.addStringColumn("Directory of Service ID ( DoSId)", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDos.addStringColumn("Directory of Service Name", 0, 0, 450, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDos.addBoolColumn("Select", 0, 1, -1, true, true, 0, true);
				super.addGrid(grdDos);
			}

			public grdDosGrid grdDos()
			{
				return (grdDosGrid)super.getGrid(0);
			}
		}
		public static class tabSlotDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSlotsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSlotsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolSTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolSTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolSTimeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolSTime(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolSTime()
				{
					return (String)super.row.get(0);
				}
				public void setcolSTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolSTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolETimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolETimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolETimeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolETime(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolETime()
				{
					return (String)super.row.get(1);
				}
				public void setcolETime(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolETimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColFunctionsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColFunctionsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColFunctionsOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColFunctions(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColFunctions()
				{
					return (String)super.row.get(2);
				}
				public void setColFunctions(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColFunctionsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColImageActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColImageActivityReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColImageActivityOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColImageActivity(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.framework.utils.Image getColImageActivity()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColImageActivity(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColImageActivityTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolActivityReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolActivityOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolActivity(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getcolActivity()
				{
					return (String)super.row.get(4);
				}
				public void setcolActivity(String value)
				{
					super.row.set(4, value);
				}
				public void setCellcolActivityTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolPriorityReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolPriorityReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolPriorityOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolPriority(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.scheduling.vo.lookups.SchedulingPriority getcolPriority()
				{
					return (ims.scheduling.vo.lookups.SchedulingPriority)super.row.get(5);
				}
				public void setcolPriority(ims.scheduling.vo.lookups.SchedulingPriority value)
				{
					super.row.set(5, value, true);
				}
				public void setCellcolPriorityTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColSlotOwnerReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColSlotOwnerReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColSlotOwnerOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColSlotOwner(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColSlotOwner()
				{
					return (String)super.row.get(6);
				}
				public void setColSlotOwner(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColSlotOwnerTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolAccessTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolAccessTypeReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolAccessTypeOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForcolAccessType(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getcolAccessType()
				{
					return (String)super.row.get(7);
				}
				public void setcolAccessType(String value)
				{
					super.row.set(7, value);
				}
				public void setCellcolAccessTypeTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolBookedReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolBookedReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolBookedOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForcolBooked(String value)
				{
					super.row.setTooltip(8, value);
				}
				public boolean getcolBooked()
				{
					return ((Boolean)super.row.get(8)).booleanValue();
				}
				public void setcolBooked(boolean value)
				{
					super.row.set(8, new Boolean(value));
				}
				public void setCellcolBookedTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(9, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(9);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(9);
				}
				public void setTooltipForcolImage(String value)
				{
					super.row.setTooltip(9, value);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(9);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(9, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(9, value);
				}
				public ims.scheduling.vo.SessionSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionSlotVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionSlotVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSlotsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSlotsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSlotsRow get(int index)
				{
					return new grdSlotsRow(super.collection.get(index));
				}
				public grdSlotsRow newRow()
				{
					return new grdSlotsRow(super.collection.newRow());
				}
				public grdSlotsRow newRow(boolean autoSelect)
				{
					return new grdSlotsRow(super.collection.newRow(autoSelect));
				}
				public grdSlotsRow newRowAt(int index)
				{
					return new grdSlotsRow(super.collection.newRowAt(index));
				}
				public grdSlotsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSlotsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSlotsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.SessionSlotVoCollection getValues()
				{
					ims.scheduling.vo.SessionSlotVoCollection listOfValues = new ims.scheduling.vo.SessionSlotVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionSlotVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionSlotVo value)
				{
					super.grid.setValue(value);
				}
				public grdSlotsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSlotsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSlotsRowCollection getRows()
				{
					return new grdSlotsRowCollection(super.grid.getRows());
				}
				public grdSlotsRow getRowByValue(ims.scheduling.vo.SessionSlotVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSlotsRow(row);
				}
				public void setcolSTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolSTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolETimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolETimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColFunctionsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColFunctionsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColImageActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColImageActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolPriorityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolPriorityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public GridComboBox colPriorityComboBox()
				{
					return new GridComboBox(super.grid, 5);
				}
				public void setColSlotOwnerHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColSlotOwnerHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolAccessTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolAccessTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolBookedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolBookedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(9, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(9);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 792, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(45), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditSlots, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSlotsTemp);
				grdSlotsGrid grdSlots = (grdSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotsGrid.class, m_grdSlotsTemp);
				grdSlots.addStringColumn("Start\nTime", 0, 0, 45, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlots.addStringColumn("End\nTime", 0, 0, 45, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlots.addHtmlColumn("Functions", 0, 0, 115, true, false, 0, true);
				grdSlots.addImageColumn(" ", 0, 0, 30, false, 0);
				grdSlots.addStringColumn("Activity", 0, 0, 145, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlots.addComboBoxColumn("Priority", 0, 0, 80, false, true, false, false, true, -1);
				grdSlots.addStringColumn("Slot Owner", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlots.addStringColumn("Access Type", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlots.addBoolColumn("Booked", 1, 1, 50, true, false, 0, false);
				grdSlots.addImageColumn(" ", 0, 1, -1, true, 0);
				super.addGrid(grdSlots);
			}

			public grdSlotsGrid grdSlots()
			{
				return (grdSlotsGrid)super.getGrid(0);
			}
		}
		public static class tabActivityContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdActivitiesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdActivitiesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolActivityReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolActivityOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolActivity()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolActivityTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.scheduling.vo.SessionActivityLiteVo getValue()
				{
					return (ims.scheduling.vo.SessionActivityLiteVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionActivityLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdActivitiesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdActivitiesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdActivitiesRow get(int index)
				{
					return new grdActivitiesRow(super.collection.get(index));
				}
				public grdActivitiesRow newRow()
				{
					return new grdActivitiesRow(super.collection.newRow());
				}
				public grdActivitiesRow newRow(boolean autoSelect)
				{
					return new grdActivitiesRow(super.collection.newRow(autoSelect));
				}
				public grdActivitiesRow newRowAt(int index)
				{
					return new grdActivitiesRow(super.collection.newRowAt(index));
				}
				public grdActivitiesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdActivitiesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdActivitiesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.SessionActivityLiteVoCollection getValues()
				{
					ims.scheduling.vo.SessionActivityLiteVoCollection listOfValues = new ims.scheduling.vo.SessionActivityLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionActivityLiteVo getValue()
				{
					return (ims.scheduling.vo.SessionActivityLiteVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionActivityLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdActivitiesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdActivitiesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdActivitiesRowCollection getRows()
				{
					return new grdActivitiesRowCollection(super.grid.getRows());
				}
				public grdActivitiesRow getRowByValue(ims.scheduling.vo.SessionActivityLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdActivitiesRow(row);
				}
				public void setcolActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 16, 36, 792, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdActivitiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditActivity, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdActivitiesTemp);
				grdActivitiesGrid grdActivities = (grdActivitiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActivitiesGrid.class, m_grdActivitiesTemp);
				grdActivities.addMutableComboBoxColumn("Activity", 0, 0, 600, false, true, false, false, false, true, -1);
				grdActivities.addBoolColumn("Active", 0, 1, -1, false, false, 0, true);
				super.addGrid(grdActivities);
			}

			public grdActivitiesGrid grdActivities()
			{
				return (grdActivitiesGrid)super.getGrid(0);
			}
		}
		public static class tabActivitiesWithSlotsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSlotsFlexibleRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSlotsFlexibleRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColStartTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColStartTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColStartTimeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColStartTime(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColStartTime()
				{
					return (String)super.row.get(0);
				}
				public void setColStartTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColStartTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEndTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEndTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEndTimeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColEndTime(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColEndTime()
				{
					return (String)super.row.get(1);
				}
				public void setColEndTime(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColEndTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColActivityReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColActivityOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColActivity(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColActivity()
				{
					return (String)super.row.get(2);
				}
				public void setColActivity(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColActivityTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColPriorityReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColPriorityReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColPriorityOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColPriority(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.scheduling.vo.lookups.SchedulingPriority getColPriority()
				{
					return (ims.scheduling.vo.lookups.SchedulingPriority)super.row.get(3);
				}
				public void setColPriority(ims.scheduling.vo.lookups.SchedulingPriority value)
				{
					super.row.set(3, value, true);
				}
				public void setCellColPriorityTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSlotOwnerReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSlotOwnerReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSlotOwnerOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColSlotOwner(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColSlotOwner()
				{
					return (String)super.row.get(4);
				}
				public void setColSlotOwner(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSlotOwnerTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColBookedReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColBookedReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColBookedOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColBooked(String value)
				{
					super.row.setTooltip(5, value);
				}
				public boolean getColBooked()
				{
					return ((Boolean)super.row.get(5)).booleanValue();
				}
				public void setColBooked(boolean value)
				{
					super.row.set(5, new Boolean(value));
				}
				public void setCellColBookedTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.framework.utils.Image getColStatus()
				{
					return (ims.framework.utils.Image)super.row.get(6);
				}
				public void setColStatus(ims.framework.utils.Image value)
				{
					super.row.set(6, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.scheduling.vo.SessionParentChildSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionParentChildSlotVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionParentChildSlotVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSlotsFlexibleRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSlotsFlexibleRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSlotsFlexibleRow get(int index)
				{
					return new grdSlotsFlexibleRow(super.collection.get(index));
				}
				public grdSlotsFlexibleRow newRow()
				{
					return new grdSlotsFlexibleRow(super.collection.newRow());
				}
				public grdSlotsFlexibleRow newRow(boolean autoSelect)
				{
					return new grdSlotsFlexibleRow(super.collection.newRow(autoSelect));
				}
				public grdSlotsFlexibleRow newRowAt(int index)
				{
					return new grdSlotsFlexibleRow(super.collection.newRowAt(index));
				}
				public grdSlotsFlexibleRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSlotsFlexibleRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSlotsFlexibleGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.scheduling.vo.SessionParentChildSlotVoCollection getValues()
				{
					ims.scheduling.vo.SessionParentChildSlotVoCollection listOfValues = new ims.scheduling.vo.SessionParentChildSlotVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionParentChildSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionParentChildSlotVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionParentChildSlotVo value)
				{
					super.grid.setValue(value);
				}
				public grdSlotsFlexibleRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSlotsFlexibleRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSlotsFlexibleRowCollection getRows()
				{
					return new grdSlotsFlexibleRowCollection(super.grid.getRows());
				}
				public grdSlotsFlexibleRow getRowByValue(ims.scheduling.vo.SessionParentChildSlotVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSlotsFlexibleRow(row);
				}
				public void setColStartTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColStartTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEndTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEndTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColPriorityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColPriorityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public GridComboBox ColPriorityComboBox()
				{
					return new GridComboBox(super.grid, 3);
				}
				public void setColSlotOwnerHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSlotOwnerHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColBookedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColBookedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
			public static class grdActivitiesSlotsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdActivitiesSlotsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColActivityReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColActivityOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColActivity()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColActivityTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.scheduling.vo.SessionActivityLiteVo getValue()
				{
					return (ims.scheduling.vo.SessionActivityLiteVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionActivityLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdActivitiesSlotsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdActivitiesSlotsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdActivitiesSlotsRow get(int index)
				{
					return new grdActivitiesSlotsRow(super.collection.get(index));
				}
				public grdActivitiesSlotsRow newRow()
				{
					return new grdActivitiesSlotsRow(super.collection.newRow());
				}
				public grdActivitiesSlotsRow newRow(boolean autoSelect)
				{
					return new grdActivitiesSlotsRow(super.collection.newRow(autoSelect));
				}
				public grdActivitiesSlotsRow newRowAt(int index)
				{
					return new grdActivitiesSlotsRow(super.collection.newRowAt(index));
				}
				public grdActivitiesSlotsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdActivitiesSlotsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdActivitiesSlotsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.scheduling.vo.SessionActivityLiteVoCollection getValues()
				{
					ims.scheduling.vo.SessionActivityLiteVoCollection listOfValues = new ims.scheduling.vo.SessionActivityLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionActivityLiteVo getValue()
				{
					return (ims.scheduling.vo.SessionActivityLiteVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionActivityLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdActivitiesSlotsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdActivitiesSlotsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdActivitiesSlotsRowCollection getRows()
				{
					return new grdActivitiesSlotsRowCollection(super.grid.getRows());
				}
				public grdActivitiesSlotsRow getRowByValue(ims.scheduling.vo.SessionActivityLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdActivitiesSlotsRow(row);
				}
				public void setColActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 360, 16, 456, 264, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,"Slots", new Integer(2), ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 368, 40, 440, 222, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				Grid m_grdSlotsFlexibleTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(45), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlot, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSlotsFlexibleTemp);
				grdSlotsFlexibleGrid grdSlotsFlexible = (grdSlotsFlexibleGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotsFlexibleGrid.class, m_grdSlotsFlexibleTemp);
				grdSlotsFlexible.addStringColumn("Start\nTime", 0, 0, 45, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsFlexible.addStringColumn("End\nTime", 0, 0, 45, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsFlexible.addStringColumn("Activity", 0, 0, 55, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsFlexible.addComboBoxColumn("Priority", 0, 0, 75, false, true, false, false, true, -1);
				grdSlotsFlexible.addStringColumn("Slot Owner", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotsFlexible.addBoolColumn("Booked", 1, 1, 50, true, false, 0, false);
				grdSlotsFlexible.addImageColumn(" ", 0, 0, -1, true, 0);
				super.addGrid(grdSlotsFlexible);
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 344, 256, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdActivitiesSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivity, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdActivitiesSlotsTemp);
				grdActivitiesSlotsGrid grdActivitiesSlots = (grdActivitiesSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActivitiesSlotsGrid.class, m_grdActivitiesSlotsTemp);
				grdActivitiesSlots.addMutableComboBoxColumn("Activity", 0, 0, 280, false, true, false, false, false, true, -1);
				grdActivitiesSlots.addBoolColumn("Active", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdActivitiesSlots);
			}

			public grdSlotsFlexibleGrid grdSlotsFlexible()
			{
				return (grdSlotsFlexibleGrid)super.getGrid(0);
			}
			public grdActivitiesSlotsGrid grdActivitiesSlots()
			{
				return (grdActivitiesSlotsGrid)super.getGrid(1);
			}
		}
		public static class tabTheatreProceduresContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrTheatreLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabTCITimesContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdTCIRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdTCIRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setcolTCITimeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean iscolTCITimeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showcolTCITimeOpened()
						{
							super.row.showOpened(0);
						}
						public ims.framework.utils.Time getcolTCITime()
						{
							return (ims.framework.utils.Time)super.row.get(0);
						}
						public void setcolTCITime(ims.framework.utils.Time value)
						{
							super.row.set(0, value);
						}
						public void setCellcolTCITimeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public ims.scheduling.vo.SessionTheatreTCISlotLiteVo getValue()
						{
							return (ims.scheduling.vo.SessionTheatreTCISlotLiteVo)super.row.getValue();
						}
						public void setValue(ims.scheduling.vo.SessionTheatreTCISlotLiteVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdTCIRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdTCIRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdTCIRow get(int index)
						{
							return new grdTCIRow(super.collection.get(index));
						}
						public grdTCIRow newRow()
						{
							return new grdTCIRow(super.collection.newRow());
						}
						public grdTCIRow newRow(boolean autoSelect)
						{
							return new grdTCIRow(super.collection.newRow(autoSelect));
						}
						public grdTCIRow newRowAt(int index)
						{
							return new grdTCIRow(super.collection.newRowAt(index));
						}
						public grdTCIRow newRowAt(int index, boolean autoSelect)
						{
							return new grdTCIRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdTCIGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
						{
							super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
						}
						public ims.scheduling.vo.SessionTheatreTCISlotLiteVoCollection getValues()
						{
							ims.scheduling.vo.SessionTheatreTCISlotLiteVoCollection listOfValues = new ims.scheduling.vo.SessionTheatreTCISlotLiteVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.scheduling.vo.SessionTheatreTCISlotLiteVo getValue()
						{
							return (ims.scheduling.vo.SessionTheatreTCISlotLiteVo)super.grid.getValue();
						}
						public void setValue(ims.scheduling.vo.SessionTheatreTCISlotLiteVo value)
						{
							super.grid.setValue(value);
						}
						public grdTCIRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdTCIRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdTCIRowCollection getRows()
						{
							return new grdTCIRowCollection(super.grid.getRows());
						}
						public grdTCIRow getRowByValue(ims.scheduling.vo.SessionTheatreTCISlotLiteVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdTCIRow(row);
						}
						public void setcolTCITimeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getcolTCITimeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 320, 188, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
						Grid m_grdTCITemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdTCITemp);
						grdTCIGrid grdTCI = (grdTCIGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCIGrid.class, m_grdTCITemp);
						grdTCI.addTimeColumn("TCI Time", 0, 0, -1, false, true, false, "Invalid Time", false, 0, true);
						super.addGrid(grdTCI);
					}
		
					public grdTCIGrid grdTCI()
					{
						return (grdTCIGrid)super.getGrid(0);
					}
				}
				public static class tabPCSlotsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdPCSlotsRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdPCSlotsRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColStartTimeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColStartTimeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColStartTimeOpened()
						{
							super.row.showOpened(0);
						}
						public String getColStartTime()
						{
							return (String)super.row.get(0);
						}
						public void setColStartTime(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColStartTimeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColDurationReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColDurationReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColDurationOpened()
						{
							super.row.showOpened(1);
						}
						public String getColDuration()
						{
							return (String)super.row.get(1);
						}
						public void setColDuration(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColDurationTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColBookedReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColBookedReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColBookedOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getColBooked()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setColBooked(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellColBookedTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColActiveReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColActiveReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColActiveOpened()
						{
							super.row.showOpened(3);
						}
						public boolean getColActive()
						{
							return ((Boolean)super.row.get(3)).booleanValue();
						}
						public void setColActive(boolean value)
						{
							super.row.set(3, new Boolean(value));
						}
						public void setCellColActiveTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.scheduling.vo.SessionParentChildSlotVo getValue()
						{
							return (ims.scheduling.vo.SessionParentChildSlotVo)super.row.getValue();
						}
						public void setValue(ims.scheduling.vo.SessionParentChildSlotVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdPCSlotsRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdPCSlotsRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdPCSlotsRow get(int index)
						{
							return new grdPCSlotsRow(super.collection.get(index));
						}
						public grdPCSlotsRow newRow()
						{
							return new grdPCSlotsRow(super.collection.newRow());
						}
						public grdPCSlotsRow newRow(boolean autoSelect)
						{
							return new grdPCSlotsRow(super.collection.newRow(autoSelect));
						}
						public grdPCSlotsRow newRowAt(int index)
						{
							return new grdPCSlotsRow(super.collection.newRowAt(index));
						}
						public grdPCSlotsRow newRowAt(int index, boolean autoSelect)
						{
							return new grdPCSlotsRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdPCSlotsGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.scheduling.vo.SessionParentChildSlotVoCollection getValues()
						{
							ims.scheduling.vo.SessionParentChildSlotVoCollection listOfValues = new ims.scheduling.vo.SessionParentChildSlotVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.scheduling.vo.SessionParentChildSlotVo getValue()
						{
							return (ims.scheduling.vo.SessionParentChildSlotVo)super.grid.getValue();
						}
						public void setValue(ims.scheduling.vo.SessionParentChildSlotVo value)
						{
							super.grid.setValue(value);
						}
						public grdPCSlotsRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdPCSlotsRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdPCSlotsRowCollection getRows()
						{
							return new grdPCSlotsRowCollection(super.grid.getRows());
						}
						public grdPCSlotsRow getRowByValue(ims.scheduling.vo.SessionParentChildSlotVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdPCSlotsRow(row);
						}
						public void setColStartTimeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColStartTimeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColDurationHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColDurationHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColBookedHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColBookedHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColActiveHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColActiveHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 320, 188, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
						Grid m_grdPCSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlots, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdPCSlotsTemp);
						grdPCSlotsGrid grdPCSlots = (grdPCSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPCSlotsGrid.class, m_grdPCSlotsTemp);
						grdPCSlots.addStringColumn("Start Time", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdPCSlots.addStringColumn("Duration", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdPCSlots.addBoolColumn("Booked", 0, 0, 60, true, false, 0, true);
						grdPCSlots.addBoolColumn("Active", 0, 0, -1, true, false, 0, true);
						super.addGrid(grdPCSlots);
					}
		
					public grdPCSlotsGrid grdPCSlots()
					{
						return (grdPCSlotsGrid)super.getGrid(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 456, 35, 360, 244, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					Container m_tabTCITimes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,"TCI Times", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabTCITimesContainer m_tabTCITimesContainer = (tabTCITimesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTCITimesContainer.class, m_tabTCITimes, factory);
					super.addContainer(m_tabTCITimes, m_tabTCITimesContainer);
					ims.framework.utils.SizeInfo m_tabTCITimesDesignSize = new ims.framework.utils.SizeInfo(360, 244);
					ims.framework.utils.SizeInfo m_tabTCITimesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper48.getWidth(), anchoringHelper48.getHeight());
					m_tabTCITimesContainer.setContext(form, appForm, m_tabTCITimes, loader, form_images_local, contextMenus, startControlID, m_tabTCITimesDesignSize, m_tabTCITimesRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 456, 35, 360, 244, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					Container m_tabPCSlots = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,"Theatre Slots", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabPCSlotsContainer m_tabPCSlotsContainer = (tabPCSlotsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPCSlotsContainer.class, m_tabPCSlots, factory);
					super.addContainer(m_tabPCSlots, m_tabPCSlotsContainer);
					ims.framework.utils.SizeInfo m_tabPCSlotsDesignSize = new ims.framework.utils.SizeInfo(360, 244);
					ims.framework.utils.SizeInfo m_tabPCSlotsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper49.getWidth(), anchoringHelper49.getHeight());
					m_tabPCSlotsContainer.setContext(form, appForm, m_tabPCSlots, loader, form_images_local, contextMenus, startControlID, m_tabPCSlotsDesignSize, m_tabPCSlotsRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabTCITimes().setVisible(false);
					tabPCSlots().setVisible(false);
				}
				public void showtabTCITimes()
				{
					tabPCSlots().setVisible(false);
					tabTCITimes().setVisible(true);
				}
				public void showtabPCSlots()
				{
					tabTCITimes().setVisible(false);
					tabPCSlots().setVisible(true);
				}
		
				public tabTCITimesContainer tabTCITimes()
				{
					return (tabTCITimesContainer)super.layers.get(0);
				}
				public tabPCSlotsContainer tabPCSlots()
				{
					return (tabPCSlotsContainer)super.layers.get(1);
				}
			}
			public static class grdTheatreRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTheatreRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProcedureReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProcedureOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolProcedure()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolProcedureTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolIsLimitedReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolIsLimitedReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolIsLimitedOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolIsLimited()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolIsLimited(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolIsLimitedTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolNumberLeftReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolNumberLeftReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolNumberLeftOpened()
				{
					super.row.showOpened(2);
				}
				public Integer getcolNumberLeft()
				{
					return (Integer)super.row.get(2);
				}
				public void setcolNumberLeft(Integer value)
				{
					super.row.set(2, value);
				}
				public void setCellcolNumberLeftTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.scheduling.vo.TheatreProcedureLiteVo getValue()
				{
					return (ims.scheduling.vo.TheatreProcedureLiteVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.TheatreProcedureLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTheatreRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTheatreRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTheatreRow get(int index)
				{
					return new grdTheatreRow(super.collection.get(index));
				}
				public grdTheatreRow newRow()
				{
					return new grdTheatreRow(super.collection.newRow());
				}
				public grdTheatreRow newRow(boolean autoSelect)
				{
					return new grdTheatreRow(super.collection.newRow(autoSelect));
				}
				public grdTheatreRow newRowAt(int index)
				{
					return new grdTheatreRow(super.collection.newRowAt(index));
				}
				public grdTheatreRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTheatreRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTheatreGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
				}
				public ims.scheduling.vo.TheatreProcedureLiteVoCollection getValues()
				{
					ims.scheduling.vo.TheatreProcedureLiteVoCollection listOfValues = new ims.scheduling.vo.TheatreProcedureLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.TheatreProcedureLiteVo getValue()
				{
					return (ims.scheduling.vo.TheatreProcedureLiteVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.TheatreProcedureLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdTheatreRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTheatreRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTheatreRowCollection getRows()
				{
					return new grdTheatreRowCollection(super.grid.getRows());
				}
				public grdTheatreRow getRowByValue(ims.scheduling.vo.TheatreProcedureLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTheatreRow(row);
				}
				public void setcolProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolIsLimitedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolIsLimitedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolNumberLeftHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolNumberLeftHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrTheatreLayer m_lyrTheatreLayer = (lyrTheatreLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTheatreLayer.class, this, factory);
				super.addLayer(m_lyrTheatreLayer);
				m_lyrTheatreLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 11, 424, 240, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdTheatreTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProcedures, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTheatreTemp);
				grdTheatreGrid grdTheatre = (grdTheatreGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTheatreGrid.class, m_grdTheatreTemp);
				grdTheatre.addMutableComboBoxColumn("Procedure", 0, 0, 250, false, true, true, false, true, true, -1);
				grdTheatre.addBoolColumn("Limited", 0, 0, 80, false, true, 0, true);
				grdTheatre.addIntColumn("No. Remaining", 0, 0, -1, false, true, null, false, 0, true, 0);
				super.addGrid(grdTheatre);
			}

			public lyrTheatreLayer lyrTheatre()
			{
				return (lyrTheatreLayer)super.getLayer(0);
			}
			public grdTheatreGrid grdTheatre()
			{
				return (grdTheatreGrid)super.getGrid(0);
			}
		}
		public static class tabBookingRightsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdBookRightsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdBookRightsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolRoleReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolRoleOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolRole()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolRoleTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.scheduling.vo.Profile_BookRightsVo getValue()
				{
					return (ims.scheduling.vo.Profile_BookRightsVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_BookRightsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdBookRightsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdBookRightsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdBookRightsRow get(int index)
				{
					return new grdBookRightsRow(super.collection.get(index));
				}
				public grdBookRightsRow newRow()
				{
					return new grdBookRightsRow(super.collection.newRow());
				}
				public grdBookRightsRow newRow(boolean autoSelect)
				{
					return new grdBookRightsRow(super.collection.newRow(autoSelect));
				}
				public grdBookRightsRow newRowAt(int index)
				{
					return new grdBookRightsRow(super.collection.newRowAt(index));
				}
				public grdBookRightsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdBookRightsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdBookRightsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				public ims.scheduling.vo.Profile_BookRightsVoCollection getValues()
				{
					ims.scheduling.vo.Profile_BookRightsVoCollection listOfValues = new ims.scheduling.vo.Profile_BookRightsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Profile_BookRightsVo getValue()
				{
					return (ims.scheduling.vo.Profile_BookRightsVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Profile_BookRightsVo value)
				{
					super.grid.setValue(value);
				}
				public grdBookRightsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdBookRightsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdBookRightsRowCollection getRows()
				{
					return new grdBookRightsRowCollection(super.grid.getRows());
				}
				public grdBookRightsRow getRowByValue(ims.scheduling.vo.Profile_BookRightsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdBookRightsRow(row);
				}
				public void setcolRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 12, 36, 356, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdBookRightsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdBookRightsTemp);
				grdBookRightsGrid grdBookRights = (grdBookRightsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBookRightsGrid.class, m_grdBookRightsTemp);
				grdBookRights.addMutableComboBoxColumn("Role", 0, 1, -1, false, true, false, false, false, true, -1);
				super.addGrid(grdBookRights);
			}

			public grdBookRightsGrid grdBookRights()
			{
				return (grdBookRightsGrid)super.getGrid(0);
			}
		}
		public static class tabExclusionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdApptsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdApptsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolApptTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolApptTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolApptTimeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Time getcolApptTime()
				{
					return (ims.framework.utils.Time)super.row.get(0);
				}
				public void setcolApptTime(ims.framework.utils.Time value)
				{
					super.row.set(0, value);
				}
				public void setCellcolApptTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColEndTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColEndTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColEndTimeOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Time getColEndTime()
				{
					return (ims.framework.utils.Time)super.row.get(1);
				}
				public void setColEndTime(ims.framework.utils.Time value)
				{
					super.row.set(1, value);
				}
				public void setCellColEndTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDurationReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDurationReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDurationOpened()
				{
					super.row.showOpened(2);
				}
				public Integer getColDuration()
				{
					return (Integer)super.row.get(2);
				}
				public void setColDuration(Integer value)
				{
					super.row.set(2, value);
				}
				public void setCellColDurationTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColActivityReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColActivityReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColActivityOpened()
				{
					super.row.showOpened(3);
				}
				public String getColActivity()
				{
					return (String)super.row.get(3);
				}
				public void setColActivity(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColActivityTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.row.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdApptsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdApptsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdApptsRow get(int index)
				{
					return new grdApptsRow(super.collection.get(index));
				}
				public grdApptsRow newRow()
				{
					return new grdApptsRow(super.collection.newRow());
				}
				public grdApptsRow newRow(boolean autoSelect)
				{
					return new grdApptsRow(super.collection.newRow(autoSelect));
				}
				public grdApptsRow newRowAt(int index)
				{
					return new grdApptsRow(super.collection.newRowAt(index));
				}
				public grdApptsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdApptsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdApptsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.vo.ValueObject[] getValues()
				{
					ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.grid.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.grid.setValue(value);
				}
				public grdApptsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdApptsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdApptsRowCollection getRows()
				{
					return new grdApptsRowCollection(super.grid.getRows());
				}
				public grdApptsRow getRowByValue(ims.vo.ValueObject value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdApptsRow(row);
				}
				public void setcolApptTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolApptTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColEndTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColEndTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDurationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDurationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColActivityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColActivityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public static class grdExclTimeRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdExclTimeRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolStartTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolStartTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolStartTimeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Time getcolStartTime()
				{
					return (ims.framework.utils.Time)super.row.get(0);
				}
				public void setcolStartTime(ims.framework.utils.Time value)
				{
					super.row.set(0, value);
				}
				public void setCellcolStartTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolEndTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolEndTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolEndTimeOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Time getcolEndTime()
				{
					return (ims.framework.utils.Time)super.row.get(1);
				}
				public void setcolEndTime(ims.framework.utils.Time value)
				{
					super.row.set(1, value);
				}
				public void setCellcolEndTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.scheduling.vo.Session_Exc_TimesVo getValue()
				{
					return (ims.scheduling.vo.Session_Exc_TimesVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.Session_Exc_TimesVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdExclTimeRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdExclTimeRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdExclTimeRow get(int index)
				{
					return new grdExclTimeRow(super.collection.get(index));
				}
				public grdExclTimeRow newRow()
				{
					return new grdExclTimeRow(super.collection.newRow());
				}
				public grdExclTimeRow newRow(boolean autoSelect)
				{
					return new grdExclTimeRow(super.collection.newRow(autoSelect));
				}
				public grdExclTimeRow newRowAt(int index)
				{
					return new grdExclTimeRow(super.collection.newRowAt(index));
				}
				public grdExclTimeRow newRowAt(int index, boolean autoSelect)
				{
					return new grdExclTimeRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdExclTimeGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
				}
				public ims.scheduling.vo.Session_Exc_TimesVoCollection getValues()
				{
					ims.scheduling.vo.Session_Exc_TimesVoCollection listOfValues = new ims.scheduling.vo.Session_Exc_TimesVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.Session_Exc_TimesVo getValue()
				{
					return (ims.scheduling.vo.Session_Exc_TimesVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.Session_Exc_TimesVo value)
				{
					super.grid.setValue(value);
				}
				public grdExclTimeRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdExclTimeRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdExclTimeRowCollection getRows()
				{
					return new grdExclTimeRowCollection(super.grid.getRows());
				}
				public grdExclTimeRow getRowByValue(ims.scheduling.vo.Session_Exc_TimesVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdExclTimeRow(row);
				}
				public void setcolStartTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolStartTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolEndTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolEndTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 200, 12, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Existing Appointments:", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 200, 32, 472, 244, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdApptsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grdApptsTemp);
				grdApptsGrid grdAppts = (grdApptsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApptsGrid.class, m_grdApptsTemp);
				grdAppts.addTimeColumn("Appointment Time", 0, 0, 100, true, true, false, null, false, 0, true);
				grdAppts.addTimeColumn("End Time", 0, 0, 100, true, true, false, null, false, 0, true);
				grdAppts.addIntColumn("Time Required", 0, 0, 100, true, true, null, false, 0, true, 0);
				grdAppts.addStringColumn("Activity", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdAppts);
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 16, 36, 168, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				Grid m_grdExclTimeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimes, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdExclTimeTemp);
				grdExclTimeGrid grdExclTime = (grdExclTimeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdExclTimeGrid.class, m_grdExclTimeTemp);
				grdExclTime.addTimeColumn("Start Time", 0, 0, 85, false, true, false, null, false, 0, true);
				grdExclTime.addTimeColumn("End Time", 0, 0, -1, false, true, false, null, false, 0, true);
				super.addGrid(grdExclTime);
			}

			public grdApptsGrid grdAppts()
			{
				return (grdApptsGrid)super.getGrid(0);
			}
			public grdExclTimeGrid grdExclTime()
			{
				return (grdExclTimeGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabGeneral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"General Details", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGeneralContainer m_tabGeneralContainer = (tabGeneralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGeneralContainer.class, m_tabGeneral, factory);
			super.addContainer(m_tabGeneral, m_tabGeneralContainer);
			ims.framework.utils.SizeInfo m_tabGeneralDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabGeneralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper55.getWidth(), anchoringHelper55.getHeight());
			m_tabGeneralContainer.setContext(form, appForm, m_tabGeneral, loader, form_images_local, contextMenus, startControlID, m_tabGeneralDesignSize, m_tabGeneralRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabListOwners = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"List Owners", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabListOwnersContainer m_tabListOwnersContainer = (tabListOwnersContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabListOwnersContainer.class, m_tabListOwners, factory);
			super.addContainer(m_tabListOwners, m_tabListOwnersContainer);
			ims.framework.utils.SizeInfo m_tabListOwnersDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabListOwnersRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper56.getWidth(), anchoringHelper56.getHeight());
			m_tabListOwnersContainer.setContext(form, appForm, m_tabListOwners, loader, form_images_local, contextMenus, startControlID, m_tabListOwnersDesignSize, m_tabListOwnersRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabDos = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Directory Of Service", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDosContainer m_tabDosContainer = (tabDosContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDosContainer.class, m_tabDos, factory);
			super.addContainer(m_tabDos, m_tabDosContainer);
			ims.framework.utils.SizeInfo m_tabDosDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabDosRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper57.getWidth(), anchoringHelper57.getHeight());
			m_tabDosContainer.setContext(form, appForm, m_tabDos, loader, form_images_local, contextMenus, startControlID, m_tabDosDesignSize, m_tabDosRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabSlotDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Slot Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSlotDetailsContainer m_tabSlotDetailsContainer = (tabSlotDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSlotDetailsContainer.class, m_tabSlotDetails, factory);
			super.addContainer(m_tabSlotDetails, m_tabSlotDetailsContainer);
			ims.framework.utils.SizeInfo m_tabSlotDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabSlotDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
			m_tabSlotDetailsContainer.setContext(form, appForm, m_tabSlotDetails, loader, form_images_local, contextMenus, startControlID, m_tabSlotDetailsDesignSize, m_tabSlotDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabActivity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Activities", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActivityContainer m_tabActivityContainer = (tabActivityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActivityContainer.class, m_tabActivity, factory);
			super.addContainer(m_tabActivity, m_tabActivityContainer);
			ims.framework.utils.SizeInfo m_tabActivityDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabActivityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
			m_tabActivityContainer.setContext(form, appForm, m_tabActivity, loader, form_images_local, contextMenus, startControlID, m_tabActivityDesignSize, m_tabActivityRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabActivitiesWithSlots = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Activities", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActivitiesWithSlotsContainer m_tabActivitiesWithSlotsContainer = (tabActivitiesWithSlotsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActivitiesWithSlotsContainer.class, m_tabActivitiesWithSlots, factory);
			super.addContainer(m_tabActivitiesWithSlots, m_tabActivitiesWithSlotsContainer);
			ims.framework.utils.SizeInfo m_tabActivitiesWithSlotsDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabActivitiesWithSlotsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabActivitiesWithSlotsContainer.setContext(form, appForm, m_tabActivitiesWithSlots, loader, form_images_local, contextMenus, startControlID, m_tabActivitiesWithSlotsDesignSize, m_tabActivitiesWithSlotsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabTheatreProcedures = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Theatre", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTheatreProceduresContainer m_tabTheatreProceduresContainer = (tabTheatreProceduresContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTheatreProceduresContainer.class, m_tabTheatreProcedures, factory);
			super.addContainer(m_tabTheatreProcedures, m_tabTheatreProceduresContainer);
			ims.framework.utils.SizeInfo m_tabTheatreProceduresDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabTheatreProceduresRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabTheatreProceduresContainer.setContext(form, appForm, m_tabTheatreProcedures, loader, form_images_local, contextMenus, startControlID, m_tabTheatreProceduresDesignSize, m_tabTheatreProceduresRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabBookingRights = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Booking Rights", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBookingRightsContainer m_tabBookingRightsContainer = (tabBookingRightsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBookingRightsContainer.class, m_tabBookingRights, factory);
			super.addContainer(m_tabBookingRights, m_tabBookingRightsContainer);
			ims.framework.utils.SizeInfo m_tabBookingRightsDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabBookingRightsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
			m_tabBookingRightsContainer.setContext(form, appForm, m_tabBookingRights, loader, form_images_local, contextMenus, startControlID, m_tabBookingRightsDesignSize, m_tabBookingRightsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 832, 312, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabExclusion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Exclusion Periods", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabExclusionContainer m_tabExclusionContainer = (tabExclusionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabExclusionContainer.class, m_tabExclusion, factory);
			super.addContainer(m_tabExclusion, m_tabExclusionContainer);
			ims.framework.utils.SizeInfo m_tabExclusionDesignSize = new ims.framework.utils.SizeInfo(832, 312);
			ims.framework.utils.SizeInfo m_tabExclusionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper63.getWidth(), anchoringHelper63.getHeight());
			m_tabExclusionContainer.setContext(form, appForm, m_tabExclusion, loader, form_images_local, contextMenus, startControlID, m_tabExclusionDesignSize, m_tabExclusionRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
		}
		public void settabGeneralEnabled(boolean value)
		{
			tabGeneral().setEnabled(value);
		}
		public void settabListOwnersEnabled(boolean value)
		{
			tabListOwners().setEnabled(value);
		}
		public void settabDosEnabled(boolean value)
		{
			tabDos().setEnabled(value);
		}
		public void settabSlotDetailsEnabled(boolean value)
		{
			tabSlotDetails().setEnabled(value);
		}
		public void settabActivityEnabled(boolean value)
		{
			tabActivity().setEnabled(value);
		}
		public void settabActivitiesWithSlotsEnabled(boolean value)
		{
			tabActivitiesWithSlots().setEnabled(value);
		}
		public void settabTheatreProceduresEnabled(boolean value)
		{
			tabTheatreProcedures().setEnabled(value);
		}
		public void settabBookingRightsEnabled(boolean value)
		{
			tabBookingRights().setEnabled(value);
		}
		public void settabExclusionEnabled(boolean value)
		{
			tabExclusion().setEnabled(value);
		}
		public void showtabGeneral()
		{
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabGeneral().setVisible(true);
		}
		public void showtabListOwners()
		{
			tabGeneral().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabListOwners().setVisible(true);
		}
		public void showtabDos()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabDos().setVisible(true);
		}
		public void showtabSlotDetails()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabSlotDetails().setVisible(true);
		}
		public void showtabActivity()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabActivity().setVisible(true);
		}
		public void showtabActivitiesWithSlots()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabActivitiesWithSlots().setVisible(true);
		}
		public void showtabTheatreProcedures()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(false);
			tabTheatreProcedures().setVisible(true);
		}
		public void showtabBookingRights()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabExclusion().setVisible(false);
			tabBookingRights().setVisible(true);
		}
		public void showtabExclusion()
		{
			tabGeneral().setVisible(false);
			tabListOwners().setVisible(false);
			tabDos().setVisible(false);
			tabSlotDetails().setVisible(false);
			tabActivity().setVisible(false);
			tabActivitiesWithSlots().setVisible(false);
			tabTheatreProcedures().setVisible(false);
			tabBookingRights().setVisible(false);
			tabExclusion().setVisible(true);
		}

		public tabGeneralContainer tabGeneral()
		{
			return (tabGeneralContainer)super.layers.get(0);
		}
		public tabListOwnersContainer tabListOwners()
		{
			return (tabListOwnersContainer)super.layers.get(1);
		}
		public tabDosContainer tabDos()
		{
			return (tabDosContainer)super.layers.get(2);
		}
		public tabSlotDetailsContainer tabSlotDetails()
		{
			return (tabSlotDetailsContainer)super.layers.get(3);
		}
		public tabActivityContainer tabActivity()
		{
			return (tabActivityContainer)super.layers.get(4);
		}
		public tabActivitiesWithSlotsContainer tabActivitiesWithSlots()
		{
			return (tabActivitiesWithSlotsContainer)super.layers.get(5);
		}
		public tabTheatreProceduresContainer tabTheatreProcedures()
		{
			return (tabTheatreProceduresContainer)super.layers.get(6);
		}
		public tabBookingRightsContainer tabBookingRights()
		{
			return (tabBookingRightsContainer)super.layers.get(7);
		}
		public tabExclusionContainer tabExclusion()
		{
			return (tabExclusionContainer)super.layers.get(8);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.Session_Status_and_Reason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.Session_Status_and_Reason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.Session_Status_and_Reason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.Session_Status_and_Reason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.Session_Status_and_Reason value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.Session_Status_and_Reason getValue()
		{
			return (ims.scheduling.vo.lookups.Session_Status_and_Reason)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.Session_Status_and_Reason value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbDoServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.DirectoryOfServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.DirectoryOfServiceLiteVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbProfileComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.ProfileLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.ProfileLiteVo getValue()
		{
			return (ims.scheduling.vo.ProfileLiteVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdSessionsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSessionsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolSessDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolSessDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolSessDateOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolSessDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolSessDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolSessDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolStartTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolStartTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolStartTimeOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolStartTime()
		{
			return (String)super.row.get(1);
		}
		public void setcolStartTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolStartTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolEndTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolEndTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolEndTimeOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolEndTime()
		{
			return (String)super.row.get(2);
		}
		public void setcolEndTime(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolEndTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColSpecialtyReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColSpecialtyOpened()
		{
			super.row.showOpened(3);
		}
		public String getColSpecialty()
		{
			return (String)super.row.get(3);
		}
		public void setColSpecialty(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColSpecialtyTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnStatusReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnStatusOpened()
		{
			super.row.showOpened(4);
		}
		public String getColumnStatus()
		{
			return (String)super.row.get(4);
		}
		public void setColumnStatus(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnStatusTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolDescriptionReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolDescriptionOpened()
		{
			super.row.showOpened(5);
		}
		public String getcolDescription()
		{
			return (String)super.row.get(5);
		}
		public void setcolDescription(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolDescriptionTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolConsMediaTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolConsMediaTypeReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolConsMediaTypeOpened()
		{
			super.row.showOpened(6);
		}
		public String getcolConsMediaType()
		{
			return (String)super.row.get(6);
		}
		public void setcolConsMediaType(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolConsMediaTypeTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSessionsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSessionsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSessionsRow get(int index)
		{
			return new grdSessionsRow(super.collection.get(index));
		}
		public grdSessionsRow newRow()
		{
			return new grdSessionsRow(super.collection.newRow());
		}
		public grdSessionsRow newRow(boolean autoSelect)
		{
			return new grdSessionsRow(super.collection.newRow(autoSelect));
		}
		public grdSessionsRow newRowAt(int index)
		{
			return new grdSessionsRow(super.collection.newRowAt(index));
		}
		public grdSessionsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSessionsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSessionsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.SessionShortVoCollection getValues()
		{
			ims.scheduling.vo.SessionShortVoCollection listOfValues = new ims.scheduling.vo.SessionShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdSessionsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSessionsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSessionsRowCollection getRows()
		{
			return new grdSessionsRowCollection(super.grid.getRows());
		}
		public grdSessionsRow getRowByValue(ims.scheduling.vo.SessionShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSessionsRow(row);
		}
		public void setcolSessDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolSessDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolStartTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolStartTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolEndTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolEndTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolConsMediaTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolConsMediaTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(63);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuSessionDetailsListOwners = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuSessionDetailsListOwnersADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsListOwners.add(contextMenus.Scheduling.contextMenuSessionDetailsListOwnersADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsListOwnersEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsListOwners.add(contextMenus.Scheduling.contextMenuSessionDetailsListOwnersEDITItem);
		contextMenus.Scheduling.contextMenuSessionDetailsListOwnersREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsListOwners.add(contextMenus.Scheduling.contextMenuSessionDetailsListOwnersREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsListOwners);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlots = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlotsADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Slot", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlots.add(contextMenus.Scheduling.contextMenuSessionDetailsEditSlotsADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlotsBLOCKItem = factory.createMenuItem(startControlID.intValue() + 5, "Block", true, false, new Integer(102138), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlots.add(contextMenus.Scheduling.contextMenuSessionDetailsEditSlotsBLOCKItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlotsCANCELItem = factory.createMenuItem(startControlID.intValue() + 6, "Cancel Slot", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditSlots.add(contextMenus.Scheduling.contextMenuSessionDetailsEditSlotsCANCELItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditSlots);
		contextMenus.Scheduling.contextMenuSessionDetailsEditActivity = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Scheduling.contextMenuSessionDetailsEditActivityADDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Activity", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditActivity.add(contextMenus.Scheduling.contextMenuSessionDetailsEditActivityADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditActivityREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove Activity", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditActivity.add(contextMenus.Scheduling.contextMenuSessionDetailsEditActivityREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditActivity);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlot = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotADDItem = factory.createMenuItem(startControlID.intValue() + 9, "Add Slot", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5880001)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlot.add(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotBLOCKItem = factory.createMenuItem(startControlID.intValue() + 10, "Block", true, false, new Integer(102138), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5880002)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlot.add(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotBLOCKItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotCANCELItem = factory.createMenuItem(startControlID.intValue() + 11, "Cancel Slot", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5880003)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlot.add(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotCANCELItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlot);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivity = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivityADDItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Activity", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5870001)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivity.add(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivityADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivityREMOVEItem = factory.createMenuItem(startControlID.intValue() + 13, "Remove Activity", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5870002)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivity.add(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivityREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditFlexibleSlotsActivity);
		contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlots = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlotsADDItem = factory.createMenuItem(startControlID.intValue() + 14, "Add Slot", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4190001)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlots.add(contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlotsADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlotsSUSPENDItem = factory.createMenuItem(startControlID.intValue() + 15, "Suspend", true, false, new Integer(114134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4190002)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlots.add(contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlotsSUSPENDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlotsRELEASEItem = factory.createMenuItem(startControlID.intValue() + 16, "Release Slots", true, false, new Integer(114135), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4190003)))
			contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlots.add(contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlotsRELEASEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditParentChildSlots);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProcedures = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProceduresADDItem = factory.createMenuItem(startControlID.intValue() + 17, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProcedures.add(contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProceduresADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProceduresEDITItem = factory.createMenuItem(startControlID.intValue() + 18, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProcedures.add(contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProceduresEDITItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProceduresREMOVEItem = factory.createMenuItem(startControlID.intValue() + 19, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProcedures.add(contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProceduresREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditTheatreProcedures);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimes = factory.createMenu(startControlID.intValue() + 8);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimesADDItem = factory.createMenuItem(startControlID.intValue() + 20, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimes.add(contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimesADDItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimesEDITItem = factory.createMenuItem(startControlID.intValue() + 21, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimes.add(contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimesEDITItem);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimesREMOVEItem = factory.createMenuItem(startControlID.intValue() + 22, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimes.add(contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimesREMOVEItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEditExclusionTimes);
		contextMenus.Scheduling.contextMenuSessionDetailsEdit = factory.createMenu(startControlID.intValue() + 9);
		contextMenus.Scheduling.contextMenuSessionDetailsEditEDITItem = factory.createMenuItem(startControlID.intValue() + 23, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Scheduling.contextMenuSessionDetailsEdit.add(contextMenus.Scheduling.contextMenuSessionDetailsEditEDITItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuSessionDetailsEdit);


		// Layer Clasess
		lyrSessEditLayer m_lyrSessEditLayer = (lyrSessEditLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSessEditLayer.class, this, factory);
		super.addLayer(m_lyrSessEditLayer);
		m_lyrSessEditLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 16, 558, 116, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Session Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 272, 14, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "DoS:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 14, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Profile:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 480, 14, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 632, 14, 18, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 685, 603, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 765, 603, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 136, 558, 704, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 528, 12, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 664, 12, 95, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 64, 38, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 312, 12, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_qmbDoServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbDoServiceTemp);
		qmbDoServiceComboBox qmbDoService = (qmbDoServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbDoServiceComboBox.class, m_qmbDoServiceTemp);
		super.addComboBox(qmbDoService);
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 64, 12, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbProfileTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProfileTemp);
		qmbProfileComboBox qmbProfile = (qmbProfileComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProfileComboBox.class, m_qmbProfileTemp);
		super.addComboBox(qmbProfile);

		// Grid Controls
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 74, 832, 164, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSessionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuSessionDetailsEdit, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdSessionsTemp);
		grdSessionsGrid grdSessions = (grdSessionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSessionsGrid.class, m_grdSessionsTemp);
		grdSessions.addStringColumn("Session Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessions.addStringColumn("Start Time", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessions.addStringColumn("End Time", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessions.addStringColumn("Service", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessions.addStringColumn("Status", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessions.addStringColumn("Description", 0, 0, 245, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessions.addStringColumn("Consultation Media", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSessions);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 776, 7, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for sessions matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 808, 7, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrSessEditLayer lyrSessEdit()
	{
		return (lyrSessEditLayer)super.getLayer(0);
	}
	public Label lblDos()
	{
		return (Label)super.getControl(11);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(15);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(16);
	}
	public TextBox txtSessionComment()
	{
		return (TextBox)super.getControl(17);
	}
	public DateControl dteProfFrom()
	{
		return (DateControl)super.getControl(18);
	}
	public DateControl dteProfTo()
	{
		return (DateControl)super.getControl(19);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public qmbDoServiceComboBox qmbDoService()
	{
		return (qmbDoServiceComboBox)super.getComboBox(1);
	}
	public qmbProfileComboBox qmbProfile()
	{
		return (qmbProfileComboBox)super.getComboBox(2);
	}
	public grdSessionsGrid grdSessions()
	{
		return (grdSessionsGrid)super.getGrid(0);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(24);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(25);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			Admin = new AdminForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				SessionSlotDialog = new LocalFormName(114164);
				SessionParentChildSlotDialog = new LocalFormName(114103);
				ModifyMultipleSlotsDialog = new LocalFormName(114104);
				ReasonTextDialog = new LocalFormName(114112);
				SessionFlexibleSlotDialog = new LocalFormName(114120);
			}
			public final FormName SessionSlotDialog;
			public final FormName SessionParentChildSlotDialog;
			public final FormName ModifyMultipleSlotsDialog;
			public final FormName ReasonTextDialog;
			public final FormName SessionFlexibleSlotDialog;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				LocationSelect = new LocalFormName(103127);
				ProcedureSpecialtyHotlist = new LocalFormName(103218);
			}
			public final FormName LocationSelect;
			public final FormName ProcedureSpecialtyHotlist;
		}

		public SchedulingForms Scheduling;
		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Scheduling = new SchedulingImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				RedFlag = new ImageHelper(102138, "Images/Core/flag_red.png", new Integer(21), new Integer(21));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image RedFlag;
		}
		public final class SchedulingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingImages()
			{
				Cancelled = new ImageHelper(114104, "Images/Scheduling/cancel.png", new Integer(16), new Integer(16));
				Cancel_Provisional = new ImageHelper(114132, "Images/Scheduling/caution_cancel_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Cancelled;
			public final ims.framework.utils.Image Cancel_Provisional;
		}
		public final CoreImages Core;
		public final SchedulingImages Scheduling;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Session = new ims.framework.ContextVariable("Session", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier + "");
			cxl_RoleList = new ims.framework.ContextVariable("RoleList", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__RoleList_" + componentIdentifier + "");
			cxl_SelectedDos = new ims.framework.ContextVariable("SelectedDos", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__SelectedDos_" + componentIdentifier + "");
			cxl_HasOwnerProcedures = new ims.framework.ContextVariable("HasOwnerProcedures", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__HasOwnerProcedures_" + componentIdentifier + "");
			cxl_ExclusionTimeRemoved = new ims.framework.ContextVariable("ExclusionTimeRemoved", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__ExclusionTimeRemoved_" + componentIdentifier + "");
			cxl_CancelBlockCM = new ims.framework.ContextVariable("CancelBlockCM", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__CancelBlockCM_" + componentIdentifier + "");
			cxl_ListOwnerRemoveConfirm = new ims.framework.ContextVariable("ListOwnerRemoveConfirm", prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__ListOwnerRemoveConfirm_" + componentIdentifier + "");
		}
		
		public boolean getSessionIsNotNull()
		{
			return !cxl_Session.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionVo getSession()
		{
			return (ims.scheduling.vo.SessionVo)cxl_Session.getValue(context);
		}
		public void setSession(ims.scheduling.vo.SessionVo value)
		{
			cxl_Session.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Session = null;
		public boolean getRoleListIsNotNull()
		{
			return !cxl_RoleList.getValueIsNull(context);
		}
		public ims.admin.vo.AppRoleShortVoCollection getRoleList()
		{
			return (ims.admin.vo.AppRoleShortVoCollection)cxl_RoleList.getValue(context);
		}
		public void setRoleList(ims.admin.vo.AppRoleShortVoCollection value)
		{
			cxl_RoleList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RoleList = null;
		public boolean getSelectedDosIsNotNull()
		{
			return !cxl_SelectedDos.getValueIsNull(context);
		}
		public ims.scheduling.vo.DirectoryofServiceRefVo getSelectedDos()
		{
			return (ims.scheduling.vo.DirectoryofServiceRefVo)cxl_SelectedDos.getValue(context);
		}
		public void setSelectedDos(ims.scheduling.vo.DirectoryofServiceRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedDos' RefVo context variable.");
			if(value == null)
				cxl_SelectedDos.setValue(context, null);
			else
				cxl_SelectedDos.setValue(context, new ims.scheduling.vo.DirectoryofServiceRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedDos = null;
		public boolean getHasOwnerProceduresIsNotNull()
		{
			return !cxl_HasOwnerProcedures.getValueIsNull(context);
		}
		public Boolean getHasOwnerProcedures()
		{
			return (Boolean)cxl_HasOwnerProcedures.getValue(context);
		}
		public void setHasOwnerProcedures(Boolean value)
		{
			cxl_HasOwnerProcedures.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasOwnerProcedures = null;
		public boolean getExclusionTimeRemovedIsNotNull()
		{
			return !cxl_ExclusionTimeRemoved.getValueIsNull(context);
		}
		public Integer getExclusionTimeRemoved()
		{
			return (Integer)cxl_ExclusionTimeRemoved.getValue(context);
		}
		public void setExclusionTimeRemoved(Integer value)
		{
			cxl_ExclusionTimeRemoved.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ExclusionTimeRemoved = null;
		public boolean getCancelBlockCMIsNotNull()
		{
			return !cxl_CancelBlockCM.getValueIsNull(context);
		}
		public Integer getCancelBlockCM()
		{
			return (Integer)cxl_CancelBlockCM.getValue(context);
		}
		public void setCancelBlockCM(Integer value)
		{
			cxl_CancelBlockCM.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CancelBlockCM = null;
		public boolean getListOwnerRemoveConfirmIsNotNull()
		{
			return !cxl_ListOwnerRemoveConfirm.getValueIsNull(context);
		}
		public Integer getListOwnerRemoveConfirm()
		{
			return (Integer)cxl_ListOwnerRemoveConfirm.getValue(context);
		}
		public void setListOwnerRemoveConfirm(Integer value)
		{
			cxl_ListOwnerRemoveConfirm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ListOwnerRemoveConfirm = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SessionDetailsListOwners implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllSessionDetailsListOwnersMenuItems()
			{
				this.contextMenuSessionDetailsListOwnersADDItem.setEnabled(false);
				this.contextMenuSessionDetailsListOwnersEDITItem.setEnabled(false);
				this.contextMenuSessionDetailsListOwnersREMOVEItem.setEnabled(false);
			}
			public void hideAllSessionDetailsListOwnersMenuItems()
			{
				this.contextMenuSessionDetailsListOwnersADDItem.setVisible(false);
				this.contextMenuSessionDetailsListOwnersEDITItem.setVisible(false);
				this.contextMenuSessionDetailsListOwnersREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsListOwners;
			public ReadOnlyMenuItem getSessionDetailsListOwnersADDItem()
			{
				return this.contextMenuSessionDetailsListOwnersADDItem;
			}
			private MenuItem contextMenuSessionDetailsListOwnersADDItem;
			public ReadOnlyMenuItem getSessionDetailsListOwnersEDITItem()
			{
				return this.contextMenuSessionDetailsListOwnersEDITItem;
			}
			private MenuItem contextMenuSessionDetailsListOwnersEDITItem;
			public ReadOnlyMenuItem getSessionDetailsListOwnersREMOVEItem()
			{
				return this.contextMenuSessionDetailsListOwnersREMOVEItem;
			}
			private MenuItem contextMenuSessionDetailsListOwnersREMOVEItem;
			public final class SessionDetailsEditSlots implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int BLOCK = 5;
				public static final int CANCEL = 6;
			}
			public void disableAllSessionDetailsEditSlotsMenuItems()
			{
				this.contextMenuSessionDetailsEditSlotsADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditSlotsBLOCKItem.setEnabled(false);
				this.contextMenuSessionDetailsEditSlotsCANCELItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditSlotsMenuItems()
			{
				this.contextMenuSessionDetailsEditSlotsADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditSlotsBLOCKItem.setVisible(false);
				this.contextMenuSessionDetailsEditSlotsCANCELItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditSlots;
			public ReadOnlyMenuItem getSessionDetailsEditSlotsADDItem()
			{
				return this.contextMenuSessionDetailsEditSlotsADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditSlotsADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditSlotsBLOCKItem()
			{
				return this.contextMenuSessionDetailsEditSlotsBLOCKItem;
			}
			private MenuItem contextMenuSessionDetailsEditSlotsBLOCKItem;
			public ReadOnlyMenuItem getSessionDetailsEditSlotsCANCELItem()
			{
				return this.contextMenuSessionDetailsEditSlotsCANCELItem;
			}
			private MenuItem contextMenuSessionDetailsEditSlotsCANCELItem;
			public final class SessionDetailsEditActivity implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 7;
				public static final int REMOVE = 8;
			}
			public void disableAllSessionDetailsEditActivityMenuItems()
			{
				this.contextMenuSessionDetailsEditActivityADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditActivityREMOVEItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditActivityMenuItems()
			{
				this.contextMenuSessionDetailsEditActivityADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditActivityREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditActivity;
			public ReadOnlyMenuItem getSessionDetailsEditActivityADDItem()
			{
				return this.contextMenuSessionDetailsEditActivityADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditActivityADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditActivityREMOVEItem()
			{
				return this.contextMenuSessionDetailsEditActivityREMOVEItem;
			}
			private MenuItem contextMenuSessionDetailsEditActivityREMOVEItem;
			public final class SessionDetailsEditFlexibleSlot implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 9;
				public static final int BLOCK = 10;
				public static final int CANCEL = 11;
			}
			public void disableAllSessionDetailsEditFlexibleSlotMenuItems()
			{
				this.contextMenuSessionDetailsEditFlexibleSlotADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditFlexibleSlotBLOCKItem.setEnabled(false);
				this.contextMenuSessionDetailsEditFlexibleSlotCANCELItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditFlexibleSlotMenuItems()
			{
				this.contextMenuSessionDetailsEditFlexibleSlotADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditFlexibleSlotBLOCKItem.setVisible(false);
				this.contextMenuSessionDetailsEditFlexibleSlotCANCELItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditFlexibleSlot;
			public ReadOnlyMenuItem getSessionDetailsEditFlexibleSlotADDItem()
			{
				return this.contextMenuSessionDetailsEditFlexibleSlotADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditFlexibleSlotADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditFlexibleSlotBLOCKItem()
			{
				return this.contextMenuSessionDetailsEditFlexibleSlotBLOCKItem;
			}
			private MenuItem contextMenuSessionDetailsEditFlexibleSlotBLOCKItem;
			public ReadOnlyMenuItem getSessionDetailsEditFlexibleSlotCANCELItem()
			{
				return this.contextMenuSessionDetailsEditFlexibleSlotCANCELItem;
			}
			private MenuItem contextMenuSessionDetailsEditFlexibleSlotCANCELItem;
			public final class SessionDetailsEditFlexibleSlotsActivity implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 12;
				public static final int REMOVE = 13;
			}
			public void disableAllSessionDetailsEditFlexibleSlotsActivityMenuItems()
			{
				this.contextMenuSessionDetailsEditFlexibleSlotsActivityADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditFlexibleSlotsActivityREMOVEItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditFlexibleSlotsActivityMenuItems()
			{
				this.contextMenuSessionDetailsEditFlexibleSlotsActivityADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditFlexibleSlotsActivityREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditFlexibleSlotsActivity;
			public ReadOnlyMenuItem getSessionDetailsEditFlexibleSlotsActivityADDItem()
			{
				return this.contextMenuSessionDetailsEditFlexibleSlotsActivityADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditFlexibleSlotsActivityADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditFlexibleSlotsActivityREMOVEItem()
			{
				return this.contextMenuSessionDetailsEditFlexibleSlotsActivityREMOVEItem;
			}
			private MenuItem contextMenuSessionDetailsEditFlexibleSlotsActivityREMOVEItem;
			public final class SessionDetailsEditParentChildSlots implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 14;
				public static final int SUSPEND = 15;
				public static final int RELEASE = 16;
			}
			public void disableAllSessionDetailsEditParentChildSlotsMenuItems()
			{
				this.contextMenuSessionDetailsEditParentChildSlotsADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditParentChildSlotsSUSPENDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditParentChildSlotsRELEASEItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditParentChildSlotsMenuItems()
			{
				this.contextMenuSessionDetailsEditParentChildSlotsADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditParentChildSlotsSUSPENDItem.setVisible(false);
				this.contextMenuSessionDetailsEditParentChildSlotsRELEASEItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditParentChildSlots;
			public ReadOnlyMenuItem getSessionDetailsEditParentChildSlotsADDItem()
			{
				return this.contextMenuSessionDetailsEditParentChildSlotsADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditParentChildSlotsADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditParentChildSlotsSUSPENDItem()
			{
				return this.contextMenuSessionDetailsEditParentChildSlotsSUSPENDItem;
			}
			private MenuItem contextMenuSessionDetailsEditParentChildSlotsSUSPENDItem;
			public ReadOnlyMenuItem getSessionDetailsEditParentChildSlotsRELEASEItem()
			{
				return this.contextMenuSessionDetailsEditParentChildSlotsRELEASEItem;
			}
			private MenuItem contextMenuSessionDetailsEditParentChildSlotsRELEASEItem;
			public final class SessionDetailsEditTheatreProcedures implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 17;
				public static final int EDIT = 18;
				public static final int REMOVE = 19;
			}
			public void disableAllSessionDetailsEditTheatreProceduresMenuItems()
			{
				this.contextMenuSessionDetailsEditTheatreProceduresADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditTheatreProceduresEDITItem.setEnabled(false);
				this.contextMenuSessionDetailsEditTheatreProceduresREMOVEItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditTheatreProceduresMenuItems()
			{
				this.contextMenuSessionDetailsEditTheatreProceduresADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditTheatreProceduresEDITItem.setVisible(false);
				this.contextMenuSessionDetailsEditTheatreProceduresREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditTheatreProcedures;
			public ReadOnlyMenuItem getSessionDetailsEditTheatreProceduresADDItem()
			{
				return this.contextMenuSessionDetailsEditTheatreProceduresADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditTheatreProceduresADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditTheatreProceduresEDITItem()
			{
				return this.contextMenuSessionDetailsEditTheatreProceduresEDITItem;
			}
			private MenuItem contextMenuSessionDetailsEditTheatreProceduresEDITItem;
			public ReadOnlyMenuItem getSessionDetailsEditTheatreProceduresREMOVEItem()
			{
				return this.contextMenuSessionDetailsEditTheatreProceduresREMOVEItem;
			}
			private MenuItem contextMenuSessionDetailsEditTheatreProceduresREMOVEItem;
			public final class SessionDetailsEditExclusionTimes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 20;
				public static final int EDIT = 21;
				public static final int REMOVE = 22;
			}
			public void disableAllSessionDetailsEditExclusionTimesMenuItems()
			{
				this.contextMenuSessionDetailsEditExclusionTimesADDItem.setEnabled(false);
				this.contextMenuSessionDetailsEditExclusionTimesEDITItem.setEnabled(false);
				this.contextMenuSessionDetailsEditExclusionTimesREMOVEItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditExclusionTimesMenuItems()
			{
				this.contextMenuSessionDetailsEditExclusionTimesADDItem.setVisible(false);
				this.contextMenuSessionDetailsEditExclusionTimesEDITItem.setVisible(false);
				this.contextMenuSessionDetailsEditExclusionTimesREMOVEItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEditExclusionTimes;
			public ReadOnlyMenuItem getSessionDetailsEditExclusionTimesADDItem()
			{
				return this.contextMenuSessionDetailsEditExclusionTimesADDItem;
			}
			private MenuItem contextMenuSessionDetailsEditExclusionTimesADDItem;
			public ReadOnlyMenuItem getSessionDetailsEditExclusionTimesEDITItem()
			{
				return this.contextMenuSessionDetailsEditExclusionTimesEDITItem;
			}
			private MenuItem contextMenuSessionDetailsEditExclusionTimesEDITItem;
			public ReadOnlyMenuItem getSessionDetailsEditExclusionTimesREMOVEItem()
			{
				return this.contextMenuSessionDetailsEditExclusionTimesREMOVEItem;
			}
			private MenuItem contextMenuSessionDetailsEditExclusionTimesREMOVEItem;
			public final class SessionDetailsEdit implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 23;
			}
			public void disableAllSessionDetailsEditMenuItems()
			{
				this.contextMenuSessionDetailsEditEDITItem.setEnabled(false);
			}
			public void hideAllSessionDetailsEditMenuItems()
			{
				this.contextMenuSessionDetailsEditEDITItem.setVisible(false);
			}
			private Menu contextMenuSessionDetailsEdit;
			public ReadOnlyMenuItem getSessionDetailsEditEDITItem()
			{
				return this.contextMenuSessionDetailsEditEDITItem;
			}
			private MenuItem contextMenuSessionDetailsEditEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[215];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-ID", "ID_SessionParentChildSlot");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-STARTTIME", "StartTime");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-ISACTIVE", "IsActive");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-PROFILESLOT", "ProfileSlot");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-SESSDATETIME", "SessDateTime");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-STATUS", "Status");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-STATUSREASON", "StatusReason");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-SESSION", "Session");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-PARENTSLOT", "ParentSlot");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-DURATION", "Duration");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-CANCELBLOCKREASON", "CancelBlockReason");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-CANCELBLOCKCOMMENT", "CancelBlockComment");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-PRIORITY", "Priority");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionParentChildSlot", "BO-1090100019-COMMENT", "Comment");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-ID", "ID_Location");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-NAME", "Name");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-TYPE", "Type");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileLocation", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-ID", "ID_Location");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-NAME", "Name");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-TYPE", "Type");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Admin.ProfileCaseNoteFoldersLocation", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ID", "ID_Sch_Session");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-NAME", "Name");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-REMAININGSLOTS", "RemainingSlots");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-TOTALSLOTS", "TotalSlots");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ISFIXED", "IsFixed");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-STARTTM", "StartTm");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ENDTM", "EndTm");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-MAXCONTINUOUSAVAILABLEMINS", "MaxContinuousAvailableMins");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-CONSMEDIATYPE", "ConsMediaType");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SESSIONSTATUS", "SessionStatus");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SESSIONCOMMENT", "SessionComment");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-LISTTYPE", "ListType");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-DESCRIPTION", "Description");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ISACTIVE", "IsActive");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-PASCLINIC", "PASClinic");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-CANCELLATIONREASON", "CancellationReason");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-COMMENT", "Comment");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-WASSESSIONMOVED", "WasSessionMoved");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-CASENOTEFOLDERNOTREQUIRED", "CaseNoteFolderNotRequired");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SESSIONPROFILETYPE", "SessionProfileType");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-LETTERREQUIRED", "LetterRequired");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SAFETYBRIEFDELAYREASON", "SafetyBriefDelayReason");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-STATUSREASON", "StatusReason");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-DURATION", "Duration");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SESSIONTYPE", "SessionType");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-MININT", "MinInt");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ROUNDATTTIME", "RoundAttTime");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-LASTAPPINTERVAL", "LastAppInterval");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-MAXNOAPPTS", "MaxNoAppts");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ISMODIFIED", "IsModified");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-ISADHOCSESSION", "IsAdHocSession");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-SLOTTYPE", "SlotType");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__Session_" + componentIdentifier, "BO-1055100010-LOCATIONMOVEDDATETIME", "LocationMovedDateTime");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionDetailsEdit.__internal_x_context__SelectedDos_" + componentIdentifier, "BO-1055100011-ID", "ID_DirectoryofService");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
