//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5527.24259)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.updateprofilelistowners;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.lookups.ServiceFunctionCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.forms.updateprofilelistowners.GenForm.grdListOwnersRow;
import ims.scheduling.vo.ProfileForProfileRippleVo;
import ims.scheduling.vo.ProfileRippleVo;
import ims.scheduling.vo.Profile_ListOwnerVo;
import ims.scheduling.vo.Profile_ListOwnerVoCollection;
import ims.scheduling.vo.Profile_SlotGenericVoCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedProfile(form.getGlobalContext().Scheduling.getProfileForProfileRippleVo());
		populateGrid(form.getLocalContext().getSelectedProfile().getListOwners());
		form.setMode(FormMode.EDIT);
		updateControlState();
	}
	
	private void populateGrid(Profile_ListOwnerVoCollection collListOwners)
	{
		form.grdListOwners().getRows().clear();
		
		if (collListOwners==null || collListOwners.size()==0)
			return;
		
		for (Profile_ListOwnerVo listOwner : collListOwners)
		{
			addRow(listOwner);
		}
		
	}
	
	private void addRow(Profile_ListOwnerVo listOwner)
	{
		if (listOwner == null)
			return;
		
		grdListOwnersRow row = form.grdListOwners().getRows().newRow();
		row.setValue(listOwner);
		
		if (listOwner.getHCPIsNotNull())
		{
			row.getColHcp().newRow(listOwner.getHCP(), listOwner.getHCP().getName().toString());
			row.getColHcp().setValue(listOwner.getHCP());
		}
		
		row.setColAttendingClinician(listOwner.getAttendingClinicianIsNotNull() ? listOwner.getAttendingClinician() : false);
		row.setColListOwner(listOwner.getListOwnerIsNotNull() ? listOwner.getListOwner() : false);
		
		row.setReadOnly(true);
	}

	//WDEV-21641
	private boolean isDuplicateListOwners()
	{
		if( form.grdListOwners().getRows().size() == 0)
			return false;
		
		for (int i = 0; i < form.grdListOwners().getRows().size(); i++)
		{
			grdListOwnersRow row1 = form.grdListOwners().getRows().get(i);
			HcpLiteVo hcp1 = row1.getColHcp()!=null && row1.getColHcp().getValue()!=null && row1.getColHcp().getValue() instanceof HcpLiteVo  ? (HcpLiteVo)row1.getColHcp().getValue(): null;
			for (int j = i+1; j < form.grdListOwners().getRows().size(); j++)
			{
				grdListOwnersRow row2 = form.grdListOwners().getRows().get(j);
				HcpLiteVo hcp2 = row2.getColHcp()!=null && row2.getColHcp().getValue()!=null && row2.getColHcp().getValue() instanceof HcpLiteVo  ? (HcpLiteVo)row2.getColHcp().getValue(): null;
				if( hcp1!=null && hcp2 != null && hcp1.equals(hcp2))
					return true;
			}
		}
		
		return false;
	}
	
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}
	
	private boolean save()
	{
		ProfileRippleVo profileRippleToSave=populateDataFromScreen();
		
		String[] errors = profileRippleToSave.validate(getUIErrors());
		
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.save(profileRippleToSave); 
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		return true;
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.dteEffectiveFromDate().getValue()!=null && form.dteEffectiveFromDate().getValue().isLessThan(new Date()))
		{
			errors.add("'Effective From Date' should be later than today's date."); //WDEV-22649
		}
		
		if (form.dteEffectiveFromDate().getValue()!=null && form.getLocalContext().getSelectedProfile()!=null && form.getLocalContext().getSelectedProfile().getLastGenDate()!=null && form.dteEffectiveFromDate().getValue().isGreaterThan(form.getLocalContext().getSelectedProfile().getLastGenDate())) //WDEV-21450
		{
			errors.add("'Effective From Date' is later than the last generation date for sessions of the profile. In this case, no ripple-out is required and the profile should be cloned on the Profile Configuration screen and the relevant changes made there."); //WDEV-22649
		}

		if( isDuplicateListOwners() == true ) //WDEV-21641
		{
			errors.add("Duplicate List Owners are not allowed."); //WDEV-22649
		}
		
		if (errors.size() > 0)
		{			
			return errors.toArray(new String[errors.size()]);		
		}

		return null;
	}
	
	private ProfileRippleVo populateDataFromScreen()
	{
		ProfileRippleVo profileRipple = new ProfileRippleVo();
		ProfileForProfileRippleVo profile = (ProfileForProfileRippleVo)form.getLocalContext().getSelectedProfile().clone();
		Profile_ListOwnerVoCollection collListOwners = getSelectedListOwnersColl();
		
		profile.setListOwners(collListOwners);
		
		profileRipple.setDateTimeRequested(new DateTime());
		profileRipple.setEffectiveFromDate(form.dteEffectiveFromDate().getValue());
		profileRipple.setProfile(profile);
		profileRipple.setProfile(form.getLocalContext().getSelectedProfile());
		
		profileRipple.setListOwners(collListOwners);
		profileRipple.setActive(true);
		
		return profileRipple;
	}
	
	private Profile_ListOwnerVoCollection getSelectedListOwnersColl()
	{
		if (form.grdListOwners().getRows().size() == 0)
			return null;

		Profile_ListOwnerVoCollection voColl = new Profile_ListOwnerVoCollection();
		
		for (int i = 0; i < form.grdListOwners().getRows().size(); i++)
		{
			grdListOwnersRow row = form.grdListOwners().getRows().get(i);
			Profile_ListOwnerVo listOwner = row.getValue() != null && row.getValue().getID_Profile_ListOwnerIsNotNull() ? row.getValue() : new Profile_ListOwnerVo();
			listOwner.setHCP((HcpLiteVo) row.getColHcp().getValue());
			listOwner.setListOwner(row.getColListOwner());
			listOwner.setAttendingClinician(row.getColAttendingClinician());
			voColl.add(listOwner);
		}

		return voColl;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onGrdListOwnersSelectionChanged()
	{
		updateControlState();
	}
	@Override
	protected void onGrdListOwnersGridQueryComboBoxTextSubmited(int column, grdListOwnersRow row, String text) throws PresentationLogicException
	{
		row.getColHcp().clear();

		HcpFilter filter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(text);
		filter.setQueryName(voName);

		
		ims.core.vo.lookups.ServiceFunctionCollection tempColl = getServiceFunctionsFromProfile(form.getLocalContext().getSelectedProfile());
				
		HcpLiteVoCollection voCollHcp = domain.listHcpLiteByServiceFunction(filter,form.getGlobalContext().Scheduling.getProfileForProfileRippleVo().getService(),tempColl);
		
		if( voCollHcp == null || voCollHcp.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			row.getColHcp().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			row.getColHcp().setValue(voCollHcp.get(0));
		else
			row.getColHcp().showOpened();
	}
	
	private ims.core.vo.lookups.ServiceFunctionCollection getServiceFunctionsFromProfile(ProfileForProfileRippleVo profile)
	{
		if (profile==null)
		{
			return null;
		}
		
		ServiceFunctionLiteVoCollection voCollServiceFunctions = domain.listServiceFunctionByService(profile.getService());
		ims.core.vo.lookups.ServiceFunctionCollection tempColl = new ServiceFunctionCollection();
		ServiceFunctionCollection collFunctions = profile.getFunction();
		
		for(int i = 0; collFunctions!=null && i < collFunctions.size();i++)
		{
				if( isFunctionInCollection(voCollServiceFunctions,collFunctions.get(i)) == true)			 
						tempColl.add(collFunctions.get(i));			
		}
		
		if( tempColl != null && tempColl.size() == 0)
			tempColl = null;
		
		return tempColl;
	}
	
    private boolean isFunctionInCollection(ServiceFunctionLiteVoCollection voCollServiceFunctions, ims.core.vo.lookups.ServiceFunction tempLkp)
    {
    	if( voCollServiceFunctions == null || voCollServiceFunctions.size() == 0 || tempLkp == null)
    		return false;
    	
    	for(ServiceFunctionLiteVo tempVo : voCollServiceFunctions)
    	{
    		if( tempVo != null && tempVo.getFunctionIsNotNull())
    		{
    			if( tempVo.getFunction().equals(tempLkp))
    				return true;
    		}
    	}
    	
    	return false;
    }

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.ADD :
				form.getLocalContext().setContextualMenuActionWasLaunched(true); //WDEV-23971
				addListOwner();  
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.EDIT :
				form.getLocalContext().setContextualMenuActionWasLaunched(true); //WDEV-23971
				form.grdListOwners().getSelectedRow().setReadOnly(false);				
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.ProfileListOwners.REMOVE :
				if (isListOwnerSaved(form.grdListOwners().getValue())) 	//WDEV-21668 //WDEV-23971
				{
					form.getLocalContext().setRemoveListOwnerConfirmationMessageID(engine.showMessage("List Owner will be removed from both List Owners/Attending Clinician profile configuration and generated slots." + (form.grdListOwners().getRows().size() == 0 ? "\nAre you sure you want to remove all records ?" : " Do you want to continue?"), "Confirm Removal", MessageButtons.YESNO, MessageIcon.WARNING));
				}
				else
				{
					form.grdListOwners().removeSelectedRow();
				}
			break;
		}
		
		updateControlState();
	}
		
	//WDEV-21668
	private boolean isListOwnerSaved(Profile_ListOwnerVo listOwner)
	{
		if (listOwner == null)
			return false;

		if (listOwner.getID_Profile_ListOwner() != null)
			return true;	
		
		return false;
	}
	//WDEV-21668 ends here
	
	private void updateControlState()
	{
		boolean isRowSelected = form.grdListOwners().getValue()!=null;
		boolean isRowReadOnly = form.grdListOwners().getSelectedRow() != null && form.grdListOwners().getSelectedRow().isReadOnly(); //WDEV-21668
		//boolean isListOwnerLinkedToSlot = isListOwnerLinkedToSlot(form.grdListOwners().getValue(),form.getLocalContext().getSelectedProfile().getProfileSlots()); //WDEV-23971
		
		
		form.getContextMenus().Scheduling.getProfileListOwnersADDItem().setVisible(true);
		form.getContextMenus().Scheduling.getProfileListOwnersEDITItem().setVisible(isRowSelected && isRowReadOnly); //WDEV-21668 //WDEV-22649 //wdev-22659
		form.getContextMenus().Scheduling.getProfileListOwnersREMOVEItem().setVisible(isRowSelected); //WDEV-23971
		form.grdListOwners().setReadOnly(false);
		form.grdListOwners().setSelectable(true);
		form.btnSave().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getContextualMenuActionWasLaunched()));
	}
	
	/*private boolean isListOwnerLinkedToSlot(Profile_ListOwnerVo listOwner, Profile_SlotGenericVoCollection collSlots)
	{
		if (listOwner==null || collSlots==null || collSlots.size()==0)
			return false;
		
		for (int i=0;i<collSlots.size();i++)
		{
			if (listOwner.getHCPIsNotNull() && collSlots.get(i).getSlotRespIsNotNull() && listOwner.getHCP().equals(collSlots.get(i).getSlotResp().getHCP()))
				return true;
		}
		
		return false;
	}*/
	
	private void addListOwner()
	{
		grdListOwnersRow row = form.grdListOwners().getRows().newRow(true);
		row.setValue(new Profile_ListOwnerVo());

		row.setReadOnly(false);
	}
	
	@Override
	protected void onDteEffectiveFromDateValueChanged() throws PresentationLogicException
	{
		if (form.dteEffectiveFromDate().getValue()!=null && form.getLocalContext().getSelectedProfile()!=null && form.getLocalContext().getSelectedProfile().getLastGenDate()!=null && form.dteEffectiveFromDate().getValue().isGreaterThan(form.getLocalContext().getSelectedProfile().getLastGenDate())) //WDEV-21450
		{
			engine.showMessage("'Effective From Date' is greater than the last generation date for sessions on the profile. In this case no ripple out is required and the profile should be cloned on the Profile Configuration screen and the relevant changes made there.", "Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21641
		}
	}
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getRemoveListOwnerConfirmationMessageID() != null && messageBoxId == form.getLocalContext().getRemoveListOwnerConfirmationMessageID() && (DialogResult.YES).equals(result))
		{
			form.getLocalContext().setRemoveListOwnerConfirmationMessageID(null);
			form.grdListOwners().removeSelectedRow();
			form.getLocalContext().setContextualMenuActionWasLaunched(true); //WDEV-23971
			updateControlState();
		}
	}
	
}
