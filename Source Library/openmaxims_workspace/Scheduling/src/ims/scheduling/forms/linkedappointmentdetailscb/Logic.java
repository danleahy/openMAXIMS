//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.linkedappointmentdetailscb;

import java.util.ArrayList;
import java.util.List;

import ims.RefMan.vo.BookAppointmentForReferralTriageVo;
import ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection;
import ims.RefMan.vo.FutureAppointmentStatusVo;
import ims.RefMan.vo.FutureAppointmentStatusVoCollection;
import ims.RefMan.vo.LinkedAppointmentVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.lookups.ServiceFunction;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.forms.linkedappointmentdetailscb.GenForm.GroupSameDayEnumeration;
import ims.scheduling.forms.linkedappointmentdetailscb.GenForm.GroupSameServiceEnumeration;
import ims.scheduling.forms.linkedappointmentdetailscb.GenForm.GroupSeqEnumeration;
import ims.scheduling.forms.linkedappointmentdetailscb.GenForm.grdApptRow;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.lookups.FutureAppointmentSource;
import ims.scheduling.vo.lookups.FutureAppointmentStatus;
import ims.scheduling.vo.lookups.RequestToSchedule;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		FutureAppointmentDetailsVo linkedOPA = populateDataFromScreen();
		
		String[] errors = linkedOPA.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		form.getGlobalContext().Scheduling.setLinkedOPA(linkedOPA);
		
		engine.close(DialogResult.OK);
	}
	
	private FutureAppointmentDetailsVo populateDataFromScreen()
	{
		FutureAppointmentDetailsVo record = null;
		
		if(form.getGlobalContext().Scheduling.getLinkedOPA() != null)
		{
			record = (FutureAppointmentDetailsVo) form.getGlobalContext().Scheduling.getLinkedOPA().clone();
		}
		else
		{
			record = new FutureAppointmentDetailsVo();
			record.setReferral(form.getGlobalContext().RefMan.getCatsReferral());
			record.setSource(FutureAppointmentSource.TRIAGE);
			record.setRequestToSchedule(RequestToSchedule.LINKED_OPA);
		}
		
		record.setNumberOfLinkedRecurringApptsToBook(getNumberOfLinkedAppointmentsFromScrren());
		
		if(form.getLocalContext().getNumberOfLinkedAppointmentsIsNotNull())//WDEV-23839
		{
			if(form.getLocalContext().getNumberOfLinkedAppointments() >= 1)
			{
				populateLinkedAppointmentsFromScreen(record, form.cc1().getValue(), 1);
			}
			if(form.getLocalContext().getNumberOfLinkedAppointments() >= 2)
			{
				populateLinkedAppointmentsFromScreen(record, form.cc2().getValue(), 2);
			}
			if(form.getLocalContext().getNumberOfLinkedAppointments() >= 3)
			{
				populateLinkedAppointmentsFromScreen(record, form.cc3().getValue(), 3);
			}
		}
		/*if(GroupSameDayEnumeration.rdoYesSameDay.equals(form.GroupSameDay().getValue()))
		{
			record.setFirstApptFutureApptByDate(form.getLocalContext().getCABApptDate());
			record.setSecondApptFutureApptByDate(form.getLocalContext().getCABApptDate());
			record.setThirdApptFutureApptByDate(form.getLocalContext().getCABApptDate());
		}*/
		
		FutureAppointmentStatusVo status = new FutureAppointmentStatusVo();
		status.setPendingStatus(FutureAppointmentStatus.OPEN);
		status.setStatusDateTime(new DateTime());
		
		Object user = domain.getMosUser();
		if(user instanceof MemberOfStaffRefVo)
		{
			status.setAuthoringUser((MemberOfStaffRefVo) user);
		}
		
		record.setCurrentStatus(status);
		
		if(record.getStatusHistory() == null)
			record.setStatusHistory(new FutureAppointmentStatusVoCollection());
		
		record.getStatusHistory().add(status);
		
		record.setSameDay(GroupSameDayEnumeration.rdoYesSameDay.equals(form.GroupSameDay().getValue()) ? true : false);
		record.setSameService(GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? true : false);
		record.setComments(form.txtComments().getValue());
		
		return record;
	}
	
	private void populateLinkedAppointmentsFromScreen(FutureAppointmentDetailsVo record, LinkedAppointmentVo linkedAppt, int sequence)
	{
		if(record == null)
			record = new FutureAppointmentDetailsVo();
		
		if(sequence == 1 && linkedAppt != null)
		{
			record.setFirstApptFunction(linkedAppt.getFunction());
			record.setFirstApptFutureApptByDate(linkedAppt.getApptDate());
			record.setFirstApptPeriodType(linkedAppt.getPeriodType());
			record.setFirstApptPeriodValue(linkedAppt.getPeriodValue());
			record.setFirstApptService(linkedAppt.getService());
			record.setFirstApptToSee(linkedAppt.getOPA());
		}
		
		if(sequence == 2 && linkedAppt != null)
		{
			record.setSecondApptFunction(linkedAppt.getFunction());
			record.setSecondApptFutureApptByDate(linkedAppt.getApptDate());
			record.setSecondApptPeriodType(linkedAppt.getPeriodType());
			record.setSecondApptPeriodValue(linkedAppt.getPeriodValue());
			record.setSecondApptService(linkedAppt.getService());
			record.setSecondApptToSee(linkedAppt.getOPA());
		}
		
		if(sequence == 3 && linkedAppt != null)
		{
			record.setThirdApptFunction(linkedAppt.getFunction());
			record.setThirdApptFutureApptByDate(linkedAppt.getApptDate());
			record.setThirdApptPeriodType(linkedAppt.getPeriodType());
			record.setThirdApptPeriodValue(linkedAppt.getPeriodValue());
			record.setThirdApptService(linkedAppt.getService());
			record.setThirdAppToSee(linkedAppt.getOPA());
		}
	}

	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.cc1().setVisible(form.getLocalContext().getNumberOfLinkedAppointments() != null && form.getLocalContext().getNumberOfLinkedAppointments() >= 1);
		form.cc2().setVisible(form.getLocalContext().getNumberOfLinkedAppointments() != null && form.getLocalContext().getNumberOfLinkedAppointments() >= 2);
		form.cc3().setVisible(form.getLocalContext().getNumberOfLinkedAppointments() != null && form.getLocalContext().getNumberOfLinkedAppointments() >= 3);
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof Integer)
			{
				form.getLocalContext().setNumberOfLinkedAppointments((Integer) args[0]);
			}
			
			if(args.length > 1)
			{
				if(args[1] instanceof ServiceLiteVo)
				{
					form.getLocalContext().setOriginalService((ServiceLiteVo) args[1]);
				}
				
				if(args.length > 2)
				{
					if(args[2] instanceof ServiceFunction)
					{
						form.getLocalContext().setOriginalFunction((ServiceFunction) args[2]);
					}
					
					if(args.length > 3)
					{
						if(args[3] instanceof BookAppointmentForReferralTriageVoCollection)
						{
							form.getLocalContext().setCABAppointments((BookAppointmentForReferralTriageVoCollection) args[3]);
						}
						
						if(args.length > 4)
						{
							if(args[4] instanceof FormMode)
							{
								form.getLocalContext().setFormMode((FormMode) args[4]);
							}
						}
					}
				}
			}
		}
		
		initialise();
		open();
	}
	
	private void open()
	{
		populateScreenFromData(form.getGlobalContext().Scheduling.getLinkedOPA());
		
		form.setMode(form.getLocalContext().getFormMode() != null ? form.getLocalContext().getFormMode() : FormMode.EDIT);
	}

	private void populateScreenFromData(FutureAppointmentDetailsVo futureAppointmentDetailsVo)
	{
		clear();
		
		if(form.getGlobalContext().Scheduling.getLinkedOPA() == null)
			return;
		
		form.getLocalContext().setNumberOfLinkedAppointments(futureAppointmentDetailsVo.getNumberOfLinkedRecurringApptsToBook());
		form.GroupSeq().setValue(getNumberOfLinkedAppointments(futureAppointmentDetailsVo.getNumberOfLinkedRecurringApptsToBook()));
		form.GroupSameService().setValue(Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getLinkedOPA().getSameService()) ? GroupSameServiceEnumeration.rdoYes : GroupSameServiceEnumeration.rdoNo);
		form.GroupSameDay().setValue(Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getLinkedOPA().getSameDay()) ? GroupSameDayEnumeration.rdoYesSameDay : GroupSameDayEnumeration.rdoNoSameDay);
		
		if(futureAppointmentDetailsVo.getNumberOfLinkedRecurringApptsToBookIsNotNull())//WDEV-23839
		{
			if(futureAppointmentDetailsVo.getNumberOfLinkedRecurringApptsToBook() >= 1)
			{
				form.cc1().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 1, (GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? form.getLocalContext().getOriginalService() : null), (GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? form.getLocalContext().getOriginalFunction() : null), getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? false : true);
				form.cc1().setValue(getLinkedAppointment(futureAppointmentDetailsVo, 1));
			}
			if(futureAppointmentDetailsVo.getNumberOfLinkedRecurringApptsToBook() >= 2)
			{
				form.cc2().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 2, (GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? form.getLocalContext().getOriginalService() : null), (GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? form.getLocalContext().getOriginalFunction() : null), getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? false : true);
				form.cc2().setValue(getLinkedAppointment(futureAppointmentDetailsVo, 2));
			}
			if(futureAppointmentDetailsVo.getNumberOfLinkedRecurringApptsToBook() >= 3)
			{
				form.cc3().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 3, (GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? form.getLocalContext().getOriginalService() : null), (GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? form.getLocalContext().getOriginalFunction() : null), getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? false : true);
				form.cc3().setValue(getLinkedAppointment(futureAppointmentDetailsVo, 3));
			}
		}
	
		form.txtComments().setValue(form.getGlobalContext().Scheduling.getLinkedOPA().getComments());
	}
	
	private LinkedAppointmentVo getLinkedAppointment(FutureAppointmentDetailsVo futureAppointmentDetailsVo, int sequence)
	{
		if(futureAppointmentDetailsVo == null)
			return null;
		
		LinkedAppointmentVo appt = new LinkedAppointmentVo();
		appt.setSequence(sequence);
		
		if(sequence == 1)
		{
			appt.setApptDate(futureAppointmentDetailsVo.getFirstApptFutureApptByDate());
			appt.setPeriodValue(futureAppointmentDetailsVo.getFirstApptPeriodValue());
			appt.setPeriodType(futureAppointmentDetailsVo.getFirstApptPeriodType());
			appt.setService(futureAppointmentDetailsVo.getFirstApptService());
			appt.setFunction(futureAppointmentDetailsVo.getFirstApptFunction());
			appt.setOPA(futureAppointmentDetailsVo.getFirstApptToSee());
		}
		else if(sequence == 2)
		{
			appt.setApptDate(futureAppointmentDetailsVo.getSecondApptFutureApptByDate());
			appt.setPeriodValue(futureAppointmentDetailsVo.getSecondApptPeriodValue());
			appt.setPeriodType(futureAppointmentDetailsVo.getSecondApptPeriodType());
			appt.setService(futureAppointmentDetailsVo.getSecondApptService());
			appt.setFunction(futureAppointmentDetailsVo.getSecondApptFunction());
			appt.setOPA(futureAppointmentDetailsVo.getSecondApptToSee());
		}
		else if(sequence == 3)
		{
			appt.setApptDate(futureAppointmentDetailsVo.getThirdApptFutureApptByDate());
			appt.setPeriodValue(futureAppointmentDetailsVo.getThirdApptPeriodValue());
			appt.setPeriodType(futureAppointmentDetailsVo.getThirdApptPeriodType());
			appt.setService(futureAppointmentDetailsVo.getThirdApptService());
			appt.setFunction(futureAppointmentDetailsVo.getThirdApptFunction());
			appt.setOPA(futureAppointmentDetailsVo.getThirdAppToSee());
		}
		
		return appt;
	}

	private void clear()
	{
		form.txtComments().setValue(null);
	}
	
	private void initialise()
	{
		form.getLocalContext().setCABApptDate(getFirstCABAppt(form.getLocalContext().getCABAppointments()));
		
		if(form.getGlobalContext().Scheduling.getLinkedOPA() == null)
		{
    		form.GroupSeq().setValue(getNumberOfLinkedAppointments(form.getLocalContext().getNumberOfLinkedAppointments()));
    		
    		form.GroupSameService().setValue(GroupSameServiceEnumeration.rdoYes);
    		form.GroupSameDay().setValue(GroupSameDayEnumeration.rdoYesSameDay);
    		
    		form.cc1().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 1, form.getLocalContext().getOriginalService(), form.getLocalContext().getOriginalFunction(), false, form.getLocalContext().getCABApptDate(), false, false);
    		form.cc2().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 2, form.getLocalContext().getOriginalService(), form.getLocalContext().getOriginalFunction(), false, form.getLocalContext().getCABApptDate(), false, false);
    		form.cc3().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 3, form.getLocalContext().getOriginalService(), form.getLocalContext().getOriginalFunction(), false, form.getLocalContext().getCABApptDate(), false, false);
		}
		
		form.cc1().setMode(form.getLocalContext().getFormMode() != null ? form.getLocalContext().getFormMode() : FormMode.EDIT);
		form.cc2().setMode(form.getLocalContext().getFormMode() != null ? form.getLocalContext().getFormMode() : FormMode.EDIT);
		form.cc3().setMode(form.getLocalContext().getFormMode() != null ? form.getLocalContext().getFormMode() : FormMode.EDIT);
	
		populateApptGrid(form.getLocalContext().getCABAppointments());
	}
	
	private Date getFirstCABAppt(BookAppointmentForReferralTriageVoCollection appts)
	{
		if(appts == null)
			return null;
		
		Date cabApptDate = null;
		
		for(BookAppointmentForReferralTriageVo appt : appts)
		{
			if(appt == null)
				continue;
			
			if(cabApptDate == null)
			{
				cabApptDate = appt.getAppointmentDate();
			}
			
			if(cabApptDate != null && appt.getAppointmentDate() != null && cabApptDate.isLessThan(appt.getAppointmentDate()))
			{
				cabApptDate = appt.getAppointmentDate();
			}
		}
		return cabApptDate;
	}

	private void populateApptGrid(BookAppointmentForReferralTriageVoCollection appts)
	{
		form.grdAppt().getRows().clear();
		
		if(appts == null)
			return;
		
		for(BookAppointmentForReferralTriageVo appt : appts)
		{
			addApptRow(appt);
		}
		
		if(appts.size() > 0)
		{
			form.grdAppt().setValue(appts.get(0));
		}
	}

	private void addApptRow(BookAppointmentForReferralTriageVo appt)
	{
		if(appt == null)
			return;
		
		grdApptRow newRow = form.grdAppt().getRows().newRow();
		
		newRow.setColApptDate(appt.getAppointmentDate() != null ? appt.getAppointmentDate().toString() : null);
		newRow.setColClinic(appt.getSession() != null ? appt.getSession().getName() : null);
		newRow.setColService((appt.getSession() != null && appt.getSession().getService() != null) ? appt.getSession().getService().getServiceName() : null);
		newRow.setColStatus((appt.getCurrentStatusRecord() != null && appt.getCurrentStatusRecord().getStatus() != null) ? appt.getCurrentStatusRecord().getStatus().getText() : null);
		
		newRow.setValue(appt);
	}

	private GroupSeqEnumeration getNumberOfLinkedAppointments(Integer numberOfLinkedAppointments)
	{
		if(numberOfLinkedAppointments == null)
			return null;
		
		if(numberOfLinkedAppointments == 1)
			return GroupSeqEnumeration.rdo1;
		else if(numberOfLinkedAppointments == 2)
			return GroupSeqEnumeration.rdo2;
		else if(numberOfLinkedAppointments == 3)
			return GroupSeqEnumeration.rdo3;
		
		return null;
	}
	
	@Override
	protected void onRadioButtonGroupSameDayValueChanged() throws PresentationLogicException
	{
		ServiceLiteVo originalService = null;
		ServiceFunction originalFunction = null;
		if(form.GroupSameService().getValue().equals(GroupSameServiceEnumeration.rdoYes))
		{
			originalService = form.getLocalContext().getOriginalService();
			originalFunction = form.getLocalContext().getOriginalFunction();
		}
		
		form.cc1().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 1, form.getLocalContext().getOriginalService(), originalFunction, getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? false : true);
		form.cc2().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 2, originalService, originalFunction, getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? false : true);
		form.cc3().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 3, originalService, originalFunction, getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, GroupSameServiceEnumeration.rdoYes.equals(form.GroupSameService().getValue()) ? false : true);
		
		updateControlsState();
	}
	
	@Override
	protected void onRadioButtonGroupSameServiceValueChanged() throws PresentationLogicException
	{
		if(form.GroupSameService().getValue().equals(GroupSameServiceEnumeration.rdoYes))
		{
			form.cc1().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 1, form.getLocalContext().getOriginalService(), form.getLocalContext().getOriginalFunction(), getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, false);
			form.cc2().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 2, form.getLocalContext().getOriginalService(), form.getLocalContext().getOriginalFunction(), getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, false);
			form.cc3().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 3, form.getLocalContext().getOriginalService(), form.getLocalContext().getOriginalFunction(), getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, false);
		}
		else if(form.GroupSameService().getValue().equals(GroupSameServiceEnumeration.rdoNo))
		{
			form.cc1().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 1, form.getLocalContext().getOriginalService(), null, getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, true);
			form.cc2().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 2, null, null, getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, true);
			form.cc3().initialise(form.getGlobalContext().RefMan.getCatsReferral(), true, 3, null, null, getOtherDayValue(), form.getLocalContext().getCABApptDate(), false, true);
		}
	}
	
	private Boolean getOtherDayValue()
	{
		if(GroupSameDayEnumeration.rdoNoSameDay.equals(form.GroupSameDay().getValue()))
			return true;
		
		return false;
	}

	@Override
	protected void onGrdApptSelectionChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onRadioButtonGroupSeqValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setNumberOfLinkedAppointments(getNumberOfLinkedAppointmentsFromScrren());
		form.getGlobalContext().Scheduling.setLinkedOPA(null);
		
		initialise();
		open();
	}
	
	private Integer getNumberOfLinkedAppointmentsFromScrren()
	{
		if(GroupSeqEnumeration.rdo1.equals(form.GroupSeq().getValue()))
		{
			return 1;
		}
		else if(GroupSeqEnumeration.rdo2.equals(form.GroupSeq().getValue()))
		{
			return 2;
		}
		else if(GroupSeqEnumeration.rdo3.equals(form.GroupSeq().getValue()))
		{
			return 3;
		}
		
		return null;
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
//		if (form.intValue().isVisible() && form.cmbPeriod().getVisible() && (form.intValue().getValue() == null || form.cmbPeriod().getValue() == null))
//		{
//			uiErrors.add("To be Scheduled For is mandatory.");
//		}
		
		uiErrors.addAll(form.cc1().getErrors());
		uiErrors.addAll(form.cc2().getErrors());
		uiErrors.addAll(form.cc3().getErrors());
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}
	
}
