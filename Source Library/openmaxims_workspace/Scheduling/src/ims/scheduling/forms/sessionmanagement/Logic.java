//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5196.22631)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.sessionmanagement;

import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ActivityWithImageLiteVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageDefaultButton;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.sessionmanagement.GenForm.lyrTabsLayer.tabClinicViewContainer.grdSessionsRow;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentForSessionManagementVo;
import ims.scheduling.vo.BookingAppointmentForSessionManagementVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.SessionActivityLiteVo;
import ims.scheduling.vo.SessionFlexibleSlotForSessionManagementVo;
import ims.scheduling.vo.SessionFlexibleSlotForSessionManagementVoCollection;
import ims.scheduling.vo.SessionManagementSearchCriteriaVo;
import ims.scheduling.vo.SessionManagementVo;
import ims.scheduling.vo.SessionManagementVoCollection;
import ims.scheduling.vo.SessionMoveVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionParentChildSlotVoCollection;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionSlotForSessionManagementVo;
import ims.scheduling.vo.SessionSlotForSessionManagementVoCollection;
import ims.scheduling.vo.SessionSlotStatusVo;
import ims.scheduling.vo.SessionSlotStatusVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.SessionVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.lookups.CancelAppointmentReason;
import ims.scheduling.vo.lookups.SchedCABSlotType;
import ims.scheduling.vo.lookups.SchedulingPriority;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.framework.controls.DynamicGridRowCollection;

import java.text.SimpleDateFormat;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int ClinicView = 1;
	private static final int AvailabilityView = 2;
	
	private static final int CANCEL_SLOT = -1;
	private static final int CANCEL_SELECTED_SLOTS = -2;
	private static final int BLOCK_SLOT = -3;
	private static final int BLOCK_SELECTED_SLOTS = -4;
	private static final int BLOCK_SESSION = -5;
	private static final int ADD_APPOINTMENT_COMMENTS = -6;
	private static final int ADD_SLOT_COMMENT = -7;
	
	//WDEV-23054
//	private static final String	COLUMN_ACTIVITY     		= "0";
//	private static final String	COLUMN_CB_APPT  			= "1";
//	private static final String	COLUMN_START_TIME			= "2";
//	private static final String	COLUMN_END_TIME				= "3";
//	private static final String	COLUMN_PATIENT              = "4";
//	private static final String	COLUMN_DO_NOT_MOVE     		= "5";
//	private static final String	COLUMN_RTT      			= "6";
//	private static final String	COLUMN_STATUS   			= "7"; 
//	private static final String	COLUMN_SLOT_OWNER			= "8";
//	private static final String COLUMN_SLOT_COMMENT			= "9";
//	private static final String	COLUMN_SELECT               = "10";
//	private static final String	COLUMN_ACTIVITYIMAGE        = "11";
//	private static final String	COLUMN_LINKED_APPOINTMENTS  = "12"; //WDEV-19543
//	private static final String COLUMN_FUNCTIONS            = "13";
//	private static final String COLUMN_PRIORITY             = "14";
//	private static final String COLUMN_PATIENT_IDENTIFIER  	= "15";
	private static final String	COLUMN_ACTIVITY     		= "0";
	private static final String	COLUMN_CB_APPT  			= "1";
	private static final String	COLUMN_START_TIME			= "2";
	private static final String	COLUMN_SLOT_STATUS   		= "3";
	private static final String	COLUMN_END_TIME				= "4";
	private static final String	COLUMN_PATIENT              = "5";
	private static final String COLUMN_APPT_STATUS  		= "6";
	private static final String	COLUMN_DO_NOT_MOVE     		= "7";
	private static final String	COLUMN_RTT      			= "8";
	private static final String	COLUMN_SLOT_OWNER			= "9";
	private static final String COLUMN_SLOT_COMMENT			= "10";
	private static final String	COLUMN_SELECT               = "11";
	private static final String	COLUMN_ACTIVITYIMAGE        = "12";
	private static final String	COLUMN_LINKED_APPOINTMENTS  = "13"; //WDEV-19543
	private static final String COLUMN_FUNCTIONS            = "14";
	private static final String COLUMN_PRIORITY             = "15";
	private static final String COLUMN_PATIENT_IDENTIFIER  	= "16"; //WDEV-23054
	
	private static final String	COLUMN_CAN_START_TIME			= "20";
	private static final String	COLUMN_CAN_END_TIME				= "21";
	private static final String	COLUMN_CAN_PATIENT              = "22";
	private static final String	COLUMN_CAN_STATUS   			= "23";
	private static final String	COLUMN_CAN_PATIENT_IDENTIFIER   = "24";

	
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		updateControlsState();
	}

	private void initialise()
	{

		form.lblListOwners().setValue("");
		form.lyrTabs().tabExtendedView().btnBlockSession().setImage(form.getImages().Core.RedFlag);
		form.lyrTabs().tabExtendedView().btnCancelSession().setImage(form.getImages().Core.Delete);
		form.lyrTabs().tabExtendedView().btnMoveSession().setImage(form.getImages().Core.MoveTo);
		form.lyrTabs().tabExtendedView().btnSessionComments().setImage(form.getImages().Core.Add);
		form.lyrTabs().tabExtendedView().btnAddSlot().setImage(form.getImages().Core.Add);
		form.lyrTabs().tabExtendedView().btnReOpen().setImage(form.getImages().Core.Tick);
		
		//WDEV-20479 form.ccConsultant().initialize(MosType.HCP);		//wdev-19419

		form.ccListOwner().initialize(MosType.HCP);
		populateHospitalCombo();
		populateServicesCombo();

		populateSearchCriteria();
		
		form.lyrTabs().tabExtendedView().dyngrdSlots().setHeaderHeight(45);
		form.lyrTabs().tabExtendedView().dyngrdSlots().setSelectable(true);
		
		form.setMode(FormMode.VIEW);
		
	}

	private void createDynamicGridSlots(boolean fixedSession)
	{
		form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().clear();
		
		//wdev-19496
		DynamicGridColumn column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Start\nTime", COLUMN_START_TIME);
		
		column.setWidth(37);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("End\nTime", COLUMN_END_TIME);
		
		column.setWidth(37);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false); 
		
		//WDEV-23054
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Slot\nStatus", COLUMN_SLOT_STATUS);
		
		column.setWidth(fixedSession ? 51 : 56 );
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true); //WDEV-23054
		
		if (fixedSession)
		{
			column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Functions", COLUMN_FUNCTIONS);
		
			column.setWidth(80);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(true);
		}
		
		if (fixedSession)
		{
			column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_ACTIVITYIMAGE);
		
			column.setWidth(30);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(false);
		}		
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Activity", COLUMN_ACTIVITY);
		
		column.setWidth(fixedSession ? 70 : 110);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_PRIORITY);
		
		column.setWidth(20);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Slot Owner", COLUMN_SLOT_OWNER);
		
		column.setWidth(fixedSession ? 98 : 115);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_CB_APPT);
		
		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(dispIdType.getText(),COLUMN_PATIENT_IDENTIFIER );
		column.setWidth(50);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Patient", COLUMN_PATIENT);
		
		column.setWidth(fixedSession ? 98 : 125);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		//WDEV-23054
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Appt\nStatus", COLUMN_APPT_STATUS);
		
		column.setWidth(fixedSession ? 51 : 56 );
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true); //WDEV-23054
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_DO_NOT_MOVE);
		
		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("RTT", COLUMN_RTT);
		
		column.setWidth(fixedSession ? 65 : 70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		//WDEV-23054
		/*
		 * Moved to 3rd column in grid
		 */
//		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Status", COLUMN_SLOT_STATUS); //WDEV-23054
//		
//		column.setWidth(fixedSession ? 51 : 56 );
//		column.setAlignment(Alignment.LEFT);
//		column.setReadOnly(true);
//		column.setCanGrow(true); //WDEV-23054
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_SLOT_COMMENT);
		
		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		//WDEV-19543
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn(" ", COLUMN_LINKED_APPOINTMENTS);
		
		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().newColumn("Select", COLUMN_SELECT);
		
		column.setWidth(-1);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(false);
		column.setCanGrow(true);
	}

	private void populateServicesCombo()
	{
		form.cmbService().clear();

		ServiceVoCollection voCollServices = domain.listServices();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}

	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		LocationLiteVoCollection voLocColl = domain.listActiveHospitals();

		if (voLocColl != null)
		{
			for (LocationLiteVo hospital : voLocColl)
			{
				form.cmbHospital().newRow(hospital, hospital.getName());
			}
		}

		ILocation location = engine.getCurrentLocation();

		if (location != null)
		{
			LocationLiteVo hospitalForCurrentLocation = domain.getHospitalForCurrentLocation(location.getID());
			form.cmbHospital().setValue(hospitalForCurrentLocation);
		}

		populateLocationCombo();

	}

	private void populateLocationCombo()
	{
		form.cmbLocation().clear();

		if (form.cmbHospital().getValue() == null)
			return;

		if (form.cmbHospital().getValue().getType() != null && form.cmbHospital().getValue().getType().equals(LocationType.HOSP))
		{
			LocShortMappingsVoCollection voLocShortMapColl = domain.listActiveLocationsForHospital(form.cmbHospital().getValue());

			if (voLocShortMapColl != null)
			{
				for (int i = 0; i < voLocShortMapColl.size(); i++)
				{
					LocShortMappingsVo voLocShortMap = voLocShortMapColl.get(i);
					form.cmbLocation().newRow(voLocShortMap, voLocShortMap.getName());
				}
			}
		}
	}

	private void populateSearchCriteria()
	{

		SessionManagementSearchCriteriaVo searchCriteria = form.getGlobalContext().Scheduling.getSessionManagementSearchCriteria();

		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue(searchCriteria.getHospital());
		form.cmbLocation().setValue(searchCriteria.getLocation());
		form.cmbListType().setValue(searchCriteria.getListType());		//wdev-19419
		//WDEV-20479 form.ccConsultant().setValue(searchCriteria.getConsultant());	//wdev-19419

		if (searchCriteria.getProfile() != null)
		{
			form.qmbProfile().newRow(searchCriteria.getProfile(), searchCriteria.getProfile().getName());
			form.qmbProfile().setValue(searchCriteria.getProfile());
		}

		form.cmbService().setValue(searchCriteria.getService());
		form.dteFrom().setValue(searchCriteria.getDateFrom());
		form.dteTo().setValue(searchCriteria.getDateTo());

		if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
		{
			if (searchCriteria.getListOwners().size() == 1)
			{
				form.ccListOwner().setValue(searchCriteria.getListOwners().get(0));
			}
			else
			{
				form.getGlobalContext().Scheduling.setSelectedHCPs(searchCriteria.getListOwners());
				populateListOwnersLabel(searchCriteria.getListOwners());

			}
		}

		doSearch();

	}

	private void populateListOwnersLabel(HcpLiteVoCollection listOwners)
	{
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		
		if (listOwners == null)
			return;
		
		StringBuffer namesString = new StringBuffer();

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner != null && listOwner.getName() != null)
			{
				if (i == 0)
					namesString.append(listOwner.getName());
				else
					namesString.append(", " + listOwner.getName());
			}
		}

		if (namesString.length() > 80)
		{
			form.lblListOwners().setValue(namesString.substring(0, 80) + "...");
		}
		else
			form.lblListOwners().setValue(namesString.toString());

		form.lblListOwners().setTooltip(namesString.toString());

	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Scheduling.HcpMultipleSelectDialog) && DialogResult.OK.equals(result))
		{
			populateListOwnersLabel(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
		else if (formName.equals(form.getForms().Scheduling.SessionSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				SessionSlotVoCollection voSlots = form.getGlobalContext().Scheduling.getSessionSlots();
				
				SessionManagementVo domainSession = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
				
				if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() != domainSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(domainSession);
					return;
				}
				
				try
				{
					domain.addFixedSlotsToSession(form.getLocalContext().getSelectedSession(), voSlots);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					
				}

				updateScreenForRecord(null);
			}

		}
		else if (formName.equals(form.getForms().Scheduling.SessionFlexibleSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				
				SessionParentChildSlotVoCollection voSlots = form.getGlobalContext().Scheduling.getFlexibleSessionSlots();
				
				SessionManagementVo domainSession = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
				
				if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() != domainSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(domainSession);
					return;
				}
				
				try
				{
					domain.addFlexibleSlotsToSession(form.getLocalContext().getSelectedSession(), voSlots);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					
				}

				updateScreenForRecord(null);
				
			}

		}
		else if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK) && Boolean.TRUE.equals(form.getLocalContext().getCancelSessionActioned()))
			{
				
				SessionVo domainSession = domain.getSessionVo(form.getLocalContext().getSelectedSession());
				
				if (isAppInSession(domainSession))//WDEV-19440 //WDEV-19779
				{
					if ( isAppInSessionMarkedAsDoNotMove(domainSession) ) 
					{
						form.getLocalContext().setCancelAppConfirmationMessageBoxID(engine.showMessage("There are appointments already booked for this Session and at least one is marked as 'Do Not Move'. These appointments will be cancelled. Do you wish to continue?", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION));
						return; 
					}
					else 
					{
						form.getLocalContext().setCancelAppConfirmationMessageBoxID(engine.showMessage("There are appointments already booked for this Session. These appointments will be cancelled. Do you wish to continue?", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION));//WDEV-18528
						return;
					}
				}
				else
				{
					cancelSession(false, domainSession);
					//	updateScreenForRecord(null);	//wdev-20003
				}
			}
			else if(result.equals(DialogResult.OK))
			{
				Booking_AppointmentVo voAppt = cancelAppt(false, null);
				
				if(voAppt == null)
				{
					updateScreenForRecord(null);
					return;
				}
				
				// rebook
				if(form.getGlobalContext().Scheduling.getApptCancelStatus() != null && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected()))
				{	
					//if(voAppt.getTheatreBookingIsNotNull())
					//	rebookTheatreAppt(domain.getTheatreAppointment(voAppt), null);
					//else
						rebookAppt(voAppt, null);
					return;
				}
				
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingSession(null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(null);
			}
			
			form.getGlobalContext().Core.setPatientShort(null);
			updateScreenForRecord(null);
		}
		else if (formName.equals(form.getForms().Scheduling.ReasonTextDialog) && DialogResult.OK.equals(result))
		{
			if (form.getLocalContext().getContextMenuActioned() != null)
			{
				SessionSlotForSessionManagementVo fixedSlot = null;
				SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;
				
				if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
					fixedSlot  = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
				else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
					flexibleSlot  = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
				
				if (form.getLocalContext().getContextMenuActioned() == BLOCK_SLOT)
				{
					if (fixedSlot != null)
						updateFixedSlotStatus(Status_Reason.BLOCKED);
					else if (flexibleSlot != null)
						updateFlexibleSlotStatus(Status_Reason.BLOCKED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == BLOCK_SESSION)
				{
					updateSessionStatus(form.getLocalContext().getSelectedSession(), Session_Status_and_Reason.BLOCKED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == BLOCK_SELECTED_SLOTS)
				{
					updateStatusesForCheckedSlots(Status_Reason.BLOCKED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == CANCEL_SLOT)
				{
					if (fixedSlot != null)
						updateFixedSlotStatus(Status_Reason.CANCELLED);
					else if (flexibleSlot != null)
						updateFlexibleSlotStatus(Status_Reason.CANCELLED);
				}
				else if (form.getLocalContext().getContextMenuActioned() == CANCEL_SELECTED_SLOTS)
				{
					updateStatusesForCheckedSlots(Status_Reason.CANCELLED);
				}
			}
		}
		else if(formName.equals(form.getForms().RefMan.BookAppointmentDialog))
		{
			form.getGlobalContext().Core.setPatientShort(null);
			updateScreenForRecord(null);
		}
		else if(formName.equals(form.getForms().Scheduling.MoveSessionDialog) && DialogResult.OK.equals(result))
		{
			if (chooseAndBookAppInSession(form.getLocalContext().getSelectedSession()))
			{
				cancelChooseAndBookAppointments();
			}
			
			updateScreenForRecord(null);
		}
		else if(formName.equals(form.getForms().Core.CommentDialog) && DialogResult.OK.equals(result))
		{
			if (form.getLocalContext().getContextMenuActioned() != null && form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() != null)
			{	

				SessionSlotForSessionManagementVo fixedSlot = null;
				SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;
				
				if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
					fixedSlot  = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
				else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
					flexibleSlot  = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
				
				if (form.getLocalContext().getContextMenuActioned() == ADD_APPOINTMENT_COMMENTS)
				{
					addAppointmentComments(fixedSlot != null ? fixedSlot.getAppointment() : flexibleSlot.getAppointment());
				}
				else if (form.getLocalContext().getContextMenuActioned() == ADD_SLOT_COMMENT )
				{
					if (fixedSlot != null)
						updateFixedSlotStatus(null);
					else if (flexibleSlot != null)
						updateFlexibleSlotStatus(null);
				}
			}
			else
				addCommentToSession();

		}
		
	}
	
	private void updateFlexibleSlotStatus(Status_Reason status)
	{
		int repeats = 0;

		do
		{
			try
			{
				SessionManagementVo session = form.getLocalContext().getSelectedSession();

				SessionVo voSession = domain.getSessionVo(session);

				if (voSession == null)
					return;

				if (session.getVersion_Sch_Session() != voSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(null);
					return;
				}

				SessionFlexibleSlotForSessionManagementVo slot = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue();

				if (voSession.getSessionSlots() != null)
				{
					for (int i = 0; i < voSession.getParentChildSlots().size(); i++)
					{
						if (voSession.getParentChildSlots().get(i) == null || voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot() == null)
							continue;

						if (voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot().equals(slot.getID_SessionParentChildSlot()))
						{
							SessionParentChildSlotVo slotToUpdate = voSession.getParentChildSlots().get(i);

							if (status != null)
							{
								slotToUpdate.setStatus(status);
								slotToUpdate.setStatusReason(status);

								if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
								{
									slotToUpdate.setCancelBlockReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
									slotToUpdate.setCancelBlockComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
								}

								SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();

								//update slot status history
								if(voCollStatusHistory == null)
									voCollStatusHistory = new SessionSlotStatusVoCollection();

								SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
								voSlotStatus.setDateTime(new DateTime());
								voSlotStatus.setStatus(status);
								voSlotStatus.setStatusReason(status);

								voCollStatusHistory.add(voSlotStatus);
								slotToUpdate.setStatusReasonHistory(voCollStatusHistory);
							}

							if (form.getLocalContext().getContextMenuActionedIsNotNull() && form.getLocalContext().getContextMenuActioned() == ADD_SLOT_COMMENT)
							{
								slotToUpdate.setComment(form.getGlobalContext().Core.getCommentDialogString());
							}

							break;
						}
					}
				}

				String[] arrErrors = voSession.validate();

				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				voSession = domain.saveSession(voSession, true);
				updateScreenForRecord(null);
				return;
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				updateScreenForRecord(null);
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}


	//WDEV-19440
	private boolean isAppInSessionMarkedAsDoNotMove(SessionVo session)  //Only for Outpatient Appointments
	{
		if (session==null || session.getSessionSlots()==null)
			return false;
		
		for (int i=0;i<session.getSessionSlots().size();i++)
		{
			if (session.getSessionSlots().get(i).getAppointmentIsNotNull() && Boolean.TRUE.equals(session.getSessionSlots().get(i).getAppointment().getDoNotMove()))
				return true;
		}
		
		return false;
	}
	
	private void cancelChooseAndBookAppointments()
	{
		if (!ConfigFlag.GEN.ICAB_ENABLED.getValue())
			return;
			
		SessionSlotForSessionManagementVoCollection slots = domain.getFixedSlotsForSession(form.getLocalContext().getSelectedSession());
		
		for (int i = 0; i < slots.size(); i++)
		{
			if (slots.get(i) == null || slots.get(i).getAppointment() == null)
				continue;
			
			if (Boolean.TRUE.equals(slots.get(i).getAppointment().getIsCABBooking()) && Status_Reason.BOOKED.equals(slots.get(i).getAppointment().getApptStatus()))
			{
				cancelAppt(false, slots.get(i).getAppointment());
			}
		}
	}
	
	private void addCommentToSession()
	{
		
		SessionManagementVo session = form.getLocalContext().getSelectedSession();
		
		if (session == null)
			return;
		
		session.setSessionComment(form.getGlobalContext().Core.getCommentDialogString());
		
		String[] arrErrors = session.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		SessionManagementVo updatedSession = null;
		
		try
		{
			updatedSession = domain.justSaveSession(session);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		updateScreenForRecord(updatedSession);
		
	}

	private void updateStatusesForCheckedSlots(Status_Reason status)
	{
		int repeats = 0;

		do
		{
			try
			{
				SessionManagementVo session = form.getLocalContext().getSelectedSession();

				SessionVo voSession = domain.getSessionVo(session);

				if (voSession == null)
					return;

				if (session.getVersion_Sch_Session() != voSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(null);
					return;
				}

				SessionSlotForSessionManagementVoCollection fixedSlots = form.getLocalContext().getFixedSlotsSelected();
				SessionFlexibleSlotForSessionManagementVoCollection flexibleSlots = form.getLocalContext().getFlexibleSlotsSelected();

				if (fixedSlots != null && fixedSlots.size() > 0)
				{

					int remainingSlots = voSession.getRemainingSlots();
					remainingSlots -= fixedSlots.size();

					if (remainingSlots < 0)
						remainingSlots = 0;

					voSession.setRemainingSlots(remainingSlots);

					if (voSession.getSessionSlots() != null)
					{
						for (int i = 0; i < voSession.getSessionSlots().size(); i++)
						{
							if (voSession.getSessionSlots().get(i) == null || voSession.getSessionSlots().get(i).getID_Session_Slot() == null)
								continue;

							for (int j = 0; j < fixedSlots.size(); j++)
							{
								if (voSession.getSessionSlots().get(i).getID_Session_Slot().equals(fixedSlots.get(j).getID_Session_Slot()))
								{
									SessionSlotVo slotToUpdate = voSession.getSessionSlots().get(i);

									slotToUpdate.setStatus(status);
									slotToUpdate.setStatusReason(status);

									if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
									{
										slotToUpdate.setCancelBlockReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
										slotToUpdate.setCancelBlockComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
									}

									SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();

									// update slot status history
									if (voCollStatusHistory == null)
										voCollStatusHistory = new SessionSlotStatusVoCollection();

									SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
									voSlotStatus.setDateTime(new DateTime());
									voSlotStatus.setStatus(status);
									voSlotStatus.setStatusReason(status);

									voCollStatusHistory.add(voSlotStatus);
									slotToUpdate.setStatusReasonHistory(voCollStatusHistory);

								}
							}
						}
					}
				}
				else if (flexibleSlots != null && flexibleSlots.size() > 0)
				{
					if (voSession.getParentChildSlots() != null)
					{
						for (int i = 0; i < voSession.getParentChildSlots().size(); i++)
						{
							if (voSession.getParentChildSlots().get(i) == null || voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot() == null)
								continue;

							for (int j = 0; j < flexibleSlots.size(); j++)
							{
								if (voSession.getParentChildSlots().get(i).getID_SessionParentChildSlot().equals(flexibleSlots.get(j).getID_SessionParentChildSlot()))
								{
									SessionParentChildSlotVo slotToUpdate = voSession.getParentChildSlots().get(i);

									slotToUpdate.setStatus(status);
									slotToUpdate.setStatusReason(status);

									if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
									{
										slotToUpdate.setCancelBlockReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
										slotToUpdate.setCancelBlockComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
									}

									SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();

									// update slot status history
									if (voCollStatusHistory == null)
										voCollStatusHistory = new SessionSlotStatusVoCollection();

									SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
									voSlotStatus.setDateTime(new DateTime());
									voSlotStatus.setStatus(status);
									voSlotStatus.setStatusReason(status);

									voCollStatusHistory.add(voSlotStatus);
									slotToUpdate.setStatusReasonHistory(voCollStatusHistory);

								}
							}
						}
					}
				}
				else
					return;

				String[] arrErrors = voSession.validate();

				if (arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				voSession = domain.saveSession(voSession, true);

				form.getLocalContext().setFixedSlotsSelected(null);
				form.getLocalContext().setFlexibleSlotsSelected(null);
				updateScreenForRecord(null);
				return;
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getLocalContext().setFixedSlotsSelected(null);
				form.getLocalContext().setFlexibleSlotsSelected(null);
				updateScreenForRecord(null);
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}

	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation, BookingAppointmentForSessionManagementVo appointment) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				BookingAppointmentForSessionManagementVo voAppt = appointment;

				if (voAppt == null)
				{
					if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
						voAppt = ((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue()).getAppointment();
					else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
						voAppt = ((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue()).getAppointment();
				}

				if(voAppt == null)
					return null;

				Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);

				if (voApptFull.getApptStatusIsNotNull() && voAppt.getApptStatusIsNotNull()
						&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull, Status_Reason.CANCELLED, voApptStatus));
					if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
					{
						voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
						if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
							voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
					}

					if(Status_Reason.HOSPITALCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numProviderCancellations = 0;

						if(voApptFull.getNumProviderCancellations() != null)
						{
							numProviderCancellations = voApptFull.getNumProviderCancellations();
						}
						numProviderCancellations += 1;

						voApptFull.setNumProviderCancellations(numProviderCancellations);
					}

					if(Status_Reason.PATIENTCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numPatientCancellations = 0;

						if(voApptFull.getNumPatientCancellations() != null)
						{
							numPatientCancellations = voApptFull.getNumPatientCancellations();
						}
						numPatientCancellations += 1;

						voApptFull.setNumPatientCancellations(numPatientCancellations);
					}
				}
				if (voApptFull.getSessionSlotIsNotNull())
					voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus()); 

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return null;
				}

				SessionSlotForSessionManagementVo fixedSlot = null;
				SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;

				if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
					fixedSlot = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
				else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
					flexibleSlot = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();

				if (tciCancelation)
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
				else
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Session Management");

				CatsReferralForSessionManagementVo catsReferral = null;

				if (appointment != null)
					catsReferral  = domain.getCatsReferralForAppointment(appointment);
				else
					if (fixedSlot != null)
						catsReferral = ((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue()).getCatsReferral();
					else if (flexibleSlot != null)
						catsReferral = ((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue()).getCatsReferral();

				domain.updateCatsReferralAdditionalInvStatus(catsReferral, voApptFull);

				domain.updateCatsReferralCancelStatus(catsReferral);

				/*
    			if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
    			{
    				domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
    			}
				 */
				return voApptFull;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");

		return null;
	}

	private void rebookAppt(Booking_AppointmentVo voAppt, BookingAppointmentForSessionManagementVo apptFromGrid)
	{		
		
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null && voAppt.getApptStatusIsNotNull() && apptFromGrid != null
			&& apptFromGrid.getApptStatusIsNotNull() && ! voAppt.getApptStatus().equals(apptFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
		}
		else if (voAppt != null  && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && !isTheatreAppt
			&& (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
			
			//WDEV-20588
			if (form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue() instanceof SessionSlotForSessionManagementVo)
			{
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment().getPatient()));
				form.getGlobalContext().RefMan.setCatsReferral(((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getCatsReferral());
			}
			else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
			{
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment().getPatient()));
				form.getGlobalContext().RefMan.setCatsReferral(((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getCatsReferral());
			}
			
			bookAppt();
		}
	}

	private void bookAppt()
	{
		
		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
		
	}

	private boolean isReferralEndOfCare()
	{
		SessionSlotForSessionManagementVo fixedSlot = null;
		SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;
		
		if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
			fixedSlot = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
			flexibleSlot = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		
		CatsReferralForSessionManagementVo catsReferral = null;
		
		if (fixedSlot != null)
			catsReferral = domain.getCatsReferralForAppointment(((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment());
		else if (flexibleSlot != null)
			catsReferral = domain.getCatsReferralForAppointment(((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment());
		
		if (catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}

	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	
	private void updateSessionStatus(SessionManagementVo session, Session_Status_and_Reason lkpInstance)
	{
		int repeats = 0;

		do
		{
			try 
			{
				SessionVo voSession = domain.getSessionVo(session);

				if(voSession == null)
					return;

				if (session.getVersion_Sch_Session() !=  voSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(null);
					return;
				}

				if(lkpInstance != null)
				{
					if(!lkpInstance.equals(Session_Status_and_Reason.OPEN))
					{
						//validation - go through all slots if any have status of cancelled pending appt send error message to user
						if(voSession.getSessionSlotsIsNotNull())
						{
							for(int i = 0; i < voSession.getSessionSlots().size();i++)
							{
								if(voSession.getSessionSlots().get(i).getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
								{
									engine.showMessage("Some Session Slots cannot be Cancelled as they are pending confirmation from ChooseAndBook");
									return;
								}
							}
						}
						else if (voSession.getParentChildSlotsIsNotNull())
						{
							for(int i = 0; i < voSession.getParentChildSlots().size();i++)
							{
								if(voSession.getParentChildSlots().get(i).getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
								{
									engine.showMessage("Some Session Slots cannot be Cancelled as they are pending confirmation from ChooseAndBook");
									return;
								}
							}
						}
					}
				}

				if(lkpInstance == null)
				{
					voSession.setIsActive(Boolean.FALSE);
				}
				else
				{

					if(lkpInstance.equals(Session_Status_and_Reason.BLOCKED))
					{
						if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
						{
							voSession.setCancellationReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
							voSession.setComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
						}

						for(int i = 0; voSession.getSessionSlots() != null && i < voSession.getSessionSlots().size(); i++)
						{
							if (voSession.getSessionSlots().get(i) == null)
								continue;
							
							//WDEV-23465
							if (SchedCABSlotType.CAB.equals(voSession.getSessionSlots().get(i).getDirectAccessSlot()) || SchedCABSlotType.BOTH.equals(voSession.getSessionSlots().get(i).getDirectAccessSlot()))
							{
								voSession.getSessionSlots().get(i).setWasBlockedCABSlot(true);
							}
							//WDEV-2346 ends here
							
							if(voSession.getSessionSlots().get(i).getAppointment() == null && !Status_Reason.CANCELLED.equals(voSession.getSessionSlots().get(i).getStatus()))
							{
								voSession.getSessionSlots().get(i).setStatus(Status_Reason.BLOCKED); 
								voSession.getSessionSlots().get(i).setStatusReason(Status_Reason.BLOCKED);
								voSession.getSessionSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getSessionSlots().get(i).getStatusReasonHistory(), Status_Reason.BLOCKED));							
							}
						}

						for(int i = 0; voSession.getParentChildSlots() != null && i < voSession.getParentChildSlots().size(); i++)
						{
							if (voSession.getParentChildSlots().get(i) == null)
								continue;

							if(voSession.getParentChildSlots().get(i).getAppointment() == null && !Status_Reason.CANCELLED.equals(voSession.getParentChildSlots().get(i).getStatus()) && !Status_Reason.BOOKED.equals(voSession.getParentChildSlots().get(i).getStatus()))
							{
								voSession.getParentChildSlots().get(i).setStatus(Status_Reason.BLOCKED); 
								voSession.getParentChildSlots().get(i).setStatusReason(Status_Reason.BLOCKED);
								voSession.getParentChildSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getParentChildSlots().get(i).getStatusReasonHistory(), Status_Reason.BLOCKED));							
							}
						}
					}
					else if (lkpInstance.equals(Session_Status_and_Reason.OPEN))
					{
						for (int i = 0; voSession.getSessionSlots() != null && i < voSession.getSessionSlots().size(); i++)
						{

							if (voSession.getSessionSlots().get(i) == null)
								continue;

							if (voSession.getSessionSlots().get(i).getAppointment() == null)
							{
								//WDEV-19620
								if (Session_Status_and_Reason.CANCELLED.equals(voSession.getSessionStatus()) || Status_Reason.BLOCKED.equals(voSession.getSessionSlots().get(i).getStatus()) ||  Boolean.TRUE.equals(voSession.getSessionSlots().get(i).getWasBlockedCABSlot())) //WDEV-23465
								{
									voSession.getSessionSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
									voSession.getSessionSlots().get(i).setStatusReason(Status_Reason.SLOTOPENED);
									voSession.getSessionSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getSessionSlots().get(i).getStatusReasonHistory(), Status_Reason.SLOTOPENED));
									voSession.getSessionSlots().get(i).setIsActive(true);
									voSession.getSessionSlots().get(i).setWasBlockedCABSlot(null); ////WDEV-23465
								}
							}
							else if (voSession.getSessionSlots().get(i).getAppointment() != null && Status_Reason.CANCELLED.equals(voSession.getSessionSlots().get(i).getStatus()))
							{
								voSession.getSessionSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
								voSession.getSessionSlots().get(i).setAppointment(null);
								voSession.getSessionSlots().get(i).setIsActive(true);
							}
						}

						for (int i = 0; voSession.getParentChildSlots() != null && i < voSession.getParentChildSlots().size(); i++)
						{

							if (voSession.getParentChildSlots().get(i) == null)
								continue;

							if (voSession.getParentChildSlots().get(i).getAppointment() == null)
							{

								if (Session_Status_and_Reason.CANCELLED.equals(voSession.getSessionStatus()) || Status_Reason.BLOCKED.equals(voSession.getParentChildSlots().get(i).getStatus()))
								{
									voSession.getParentChildSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
									voSession.getParentChildSlots().get(i).setStatusReason(Status_Reason.SLOTOPENED);
									voSession.getParentChildSlots().get(i).setStatusReasonHistory(getSessionStatusHistory(voSession.getParentChildSlots().get(i).getStatusReasonHistory(), Status_Reason.SLOTOPENED));
									voSession.getParentChildSlots().get(i).setIsActive(true);
								}
							}
							else if (voSession.getParentChildSlots().get(i).getAppointment() != null && Status_Reason.CANCELLED.equals(voSession.getParentChildSlots().get(i).getStatus()))
							{
								voSession.getParentChildSlots().get(i).setStatus(Status_Reason.SLOTOPENED);
								voSession.getParentChildSlots().get(i).setAppointment(null);
								voSession.getParentChildSlots().get(i).setIsActive(true);
							}
						}
					}

					voSession.setSessionStatus(lkpInstance);

				}

				String[] arrErrors = voSession.validate();

				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				domain.saveSession(voSession, false);
				updateScreenForRecord(null);
				
				return;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				updateScreenForRecord(null);
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}

	private SessionSlotStatusVoCollection getSessionStatusHistory(SessionSlotStatusVoCollection voCollStatusHistory, Status_Reason status)
	{
		
		if(voCollStatusHistory == null)
			voCollStatusHistory = new SessionSlotStatusVoCollection();
		
		SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
		voSlotStatus.setDateTime(new DateTime());
		//TODO
		//voSlotStatus.setUBRN(voSessionSlot.getUBRN());
		voSlotStatus.setStatus(status);
		voSlotStatus.setStatusReason(form.getGlobalContext().ChooseAndBook.getSessionSlotStatusReason());
		voCollStatusHistory.add(voSlotStatus);
		
		return voCollStatusHistory;
	}

	private void updateScreenForRecord(SessionManagementVo session)
	{
		if (session == null)
			session = domain.getSessionManagementVo(form.getLocalContext().getSelectedSession());
		
		if (session == null)
			return;
			
		grdSessionsRow row = form.lyrTabs().tabClinicView().grdSessions().getSelectedRow();
		
		row.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

		row.setColSessionName(session.getName() != null ? session.getName() : "");
		row.setTooltipForColSessionName(row.getColSessionName());

		row.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
		row.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

		row.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
		row.setTooltipForColService(row.getColService());

		row.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
		row.setTooltipForColLocation(row.getColLocation());
		
		row.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
		row.setTooltipForColStatus(null);
		String cancelBlockReason = !Session_Status_and_Reason.OPEN.equals(session.getSessionStatus()) ? getCancelBlockSessionReasonTooltip(session) : " ";
		row.setTooltipForColStatus(row.getColStatus() + cancelBlockReason);//WDEV-21851
			
		row.setValue(session);
		
		form.getLocalContext().setSelectedSession(session);
		
		if (Boolean.TRUE.equals(session.getIsFixed()))
			populateExtendedViewWithFixedSlots(domain.getFixedSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		else
			populateExtendedViewWithFlexibleSlots(domain.getFlexibleSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		
		boolean cancelledSession = Session_Status_and_Reason.CANCELLED.equals(session.getSessionStatus());
		
		//WDEV-20588
		if (cancelledSession)
		{
			initializeCancelledApptGrid();
			populateCancelledAppts(domain.getCancelledAppointmentsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		}
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setTooltip(getTooltipForSessionMoveDetailsButton(form.getLocalContext().getSelectedSession())); //WDEV-22944
		updateControlsState();
		
	}

	private String getCancelBlockSessionReasonTooltip(SessionManagementVo session)//WDEV-21851
	{
		if(session == null)
			return "";

		String cancellatinComments = session.getCommentIsNotNull() ? "<br>Comments: " + session.getComment():"";
		String cancellationReason =  session.getCancellationReasonIsNotNull()? "<br>Reason: "+ session.getCancellationReason().getText():""; 
		
		return cancellationReason + cancellatinComments;

	}
	
	private String getCancelBlockSpecificSlotReason(CancelAppointmentReason cancelOrBlockReason, String commentsReason)//WDEV-21851
	{
		if(cancelOrBlockReason == null && commentsReason == null)
			return "";
			
			String cancellationReason = cancelOrBlockReason != null ? "<br>Reason: " + cancelOrBlockReason.getText():"";
			String cancellatinComments =  commentsReason != null? "<br>Comments: "+commentsReason:""; 
		
			return cancellationReason + cancellatinComments;

	}
	
	private void cancelSession(boolean cancelAppointment, SessionVo session)
	{
		if(form.getGlobalContext().Scheduling.getApptCancelStatus() != null)
		{
			//WDEV-19543
			if (hasApptLinkedAppointments(session))
			{
				engine.showMessage("Some appointments being cancelled have linked appointments - these linked appointments will however not be cancelled.", "Information message", MessageButtons.OK, MessageIcon.INFORMATION, MessageDefaultButton.BUTTON1);
			}
			
			if (form.getLocalContext().getSelectedSession().getVersion_Sch_Session() !=  session.getVersion_Sch_Session())
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			
			boolean isFlexibleSession = !Boolean.TRUE.equals(session.getIsFixed());
			
			try 
			{
				domain.cancelSession(session, form.getGlobalContext().Scheduling.getApptCancelStatus(), cancelAppointment, isFlexibleSession);
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}	
		}
		
	}

	//WDEV-19543
	private boolean hasApptLinkedAppointments(SessionVo session)
	{
		if (session==null || session.getSessionSlots()==null)
			return false;
		
		for (int i=0;i<session.getSessionSlots().size();i++)
		{
			if (session.getSessionSlots().get(i).getAppointmentIsNotNull() && session.getSessionSlots().get(i).getAppointment().getLinkedAppointmentsIsNotNull() && session.getSessionSlots().get(i).getAppointment().getLinkedAppointments().size()>0)
				return true;
		}
		
		return false;
	}
	
	private boolean isAppInSession(SessionVo session)
	{
		if (session==null || (session.getSessionSlots() == null && session.getTheatreSlots() == null && session.getParentChildSlots() == null) || (!Boolean.TRUE.equals(session.getIsFixed()) && session.getRemainingTime() != null && session.getRemainingTime().equals(session.getDuration())))
			return false;
		
		if (!Boolean.TRUE.equals(session.getIsFixed()) && session.getRemainingTime() != null && session.getRemainingTime().compareTo(session.getDuration()) < 0) //WDEV-19046
			return true;
		
		for (int i=0;i<session.getSessionSlots().size();i++)
		{
			if (session.getSessionSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		
		for (int i=0;i<session.getTheatreSlots().size();i++)
		{
			if (session.getTheatreSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		
		//flexible session with fixed slots
		for (int i=0;i<session.getParentChildSlots().size();i++)
		{
			if (session.getParentChildSlots().get(i).getAppointmentIsNotNull())
				return true;
		}
		return false;
	}

	@Override
	protected void onlyrTabsTabChanged(ims.framework.LayerBridge tab)
	{
		
		if (form.lyrTabs().tabClinicView().equals(tab))
		{
			form.lyrTabs().tabClinicView().grdSessions().setValue(null);
			form.getLocalContext().setSelectedSession(null);
			updateControlsState();
		}
	}

	@Override
	protected void onBtnAddSlotClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addSessionSlot();
		
	}

	private void addSessionSlot()
	{
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(form.getLocalContext().getSelectedSession() != null ? form.getLocalContext().getSelectedSession().getDirectoryofServices() : null);
		form.getGlobalContext().Scheduling.setSelectedSessionListOwners(form.getLocalContext().getSelectedSession() != null ? form.getLocalContext().getSelectedSession().getListOwners() : null);
		
		if (form.getLocalContext().getSelectedSession() != null && Boolean.TRUE.equals(form.getLocalContext().getSelectedSession().getIsFixed()))
			engine.open(form.getForms().Scheduling.SessionSlotDialog, new Object[] { domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
		else
			engine.open(form.getForms().Scheduling.SessionFlexibleSlotDialog, new Object[] { domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
		
	}

	@Override
	protected void onBtnSessionCommentsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setContextMenuActioned(null);
		form.getGlobalContext().Core.setCommentDialogString(form.getLocalContext().getSelectedSession().getSessionComment());
		form.getGlobalContext().Core.setCommentDialogTitle("Session Comment");
		engine.open(form.getForms().Core.CommentDialog, new Object[] { Boolean.TRUE });
	}

	@Override
	protected void onBtnMoveSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (chooseAndBookAppInSession(form.getLocalContext().getSelectedSession()))
		{
			form.getLocalContext().setMoveSessionConfirmationMessageBoxID(engine.showMessage("C&B Appointments exist within the Session and will be Cancelled and will not be moved to new session. Do you want to proceed with the move? ", "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION));
			return;
		}
		else
			engine.open(form.getForms().Scheduling.MoveSessionDialog , new Object[] {domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
	}

	@Override
	protected void onBtnCancelSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if ( !ConfigFlag.DOM.ALLOW_BLOCK_SESSION_WITH_CAB_APPTS.getValue() && chooseAndBookAppInSession(form.getLocalContext().getSelectedSession()))
		{
			engine.showMessage("Session cannot be Cancelled as there are C&B appointments linked.");
			return;
		}
		
		form.getLocalContext().setCancelSessionActioned(true);
		engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[]{true}, "Cancel Session");
	}

	//WDEV-19329
	private boolean chooseAndBookAppInSession(SessionManagementVo session)
	{
		
		SessionSlotForSessionManagementVoCollection sessionSlots = domain.getFixedSlotsForSession(session);
		
		if (sessionSlots == null || sessionSlots.size() == 0)
			return false;
		
		for (int i=0;i < sessionSlots.size();i++)
		{
			if (sessionSlots.get(i).getAppointment() != null && Boolean.TRUE.equals(sessionSlots.get(i).getAppointment().getIsCABBooking()) && !Status_Reason.CANCELLED.equals(sessionSlots.get(i).getAppointment().getApptStatus()))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnBlockSessionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if ( !ConfigFlag.DOM.ALLOW_BLOCK_SESSION_WITH_CAB_APPTS.getValue() && chooseAndBookAppInSession(form.getLocalContext().getSelectedSession()))
		{
			engine.showMessage("Session cannot be Blocked as there are C&B appointments linked.");
			return;
		}
		
		form.getLocalContext().setContextMenuActioned(BLOCK_SESSION);
		engine.open(form.getForms().Scheduling.ReasonTextDialog);
		
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearTabs();
		form.lyrTabs().showtabClinicView();
		updateControlsState();

	}

	private void clearTabs()
	{
		form.lyrTabs().tabClinicView().grdSessions().getRows().clear();

		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getColumns().clear();
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getRows().clear();

		form.lyrTabs().tabExtendedView().pnlSessionInfo().setValue(" ");
		form.lyrTabs().tabExtendedView().htmSession().setHTML(" ");
		form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().clear();
		form.lyrTabs().tabExtendedView().chkSelectAll().setValue(Boolean.FALSE);

		form.getLocalContext().setSelectedTab(null);
		form.getLocalContext().setSelectedSession(null);
		form.getLocalContext().setFixedSlotsSelected(null);
		form.getLocalContext().setFlexibleSlotsSelected(null);
		form.getLocalContext().setNoneOrBookedAppointmentsOnly(null);
		
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	private void clearSearchCriteria()
	{
		form.cmbHospital().setValue(null);
		form.cmbLocation().setValue(null);
		form.qmbProfile().clear();
		form.cmbService().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.ccListOwner().clear();
		form.lblListOwners().setValue("");
		form.cmbListType().setValue(null);	//wdev-19419
		//WDEV-20479 form.ccConsultant().setValue(null);	//wdev-19419

		form.getGlobalContext().Scheduling.setSessionManagementSearchCriteria(null);
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearTabs();

		form.lyrTabs().showtabClinicView();

		if (!validateSearchCriteria())
		{
			updateControlsState();
			return;
		}

		populateSearchCriteriaFromScreen();

		doSearch();
	}

	private void doSearch()
	{

		SessionManagementVoCollection sessions = domain.listSessions(form.getGlobalContext().Scheduling.getSessionManagementSearchCriteria());

		if (sessions == null || sessions.size() == 0)
		{
			engine.showMessage("No matching Sessions found.");
			updateControlsState();
			return;
		}

		populateClinicView(sessions);
		populateAvailabilityView(sessions);

		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().Scheduling.hideAllSessionManagementMenuItems();

		SessionSlotForSessionManagementVo fixedSlot = null;
		SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;
		
		if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof  SessionSlotForSessionManagementVo )
			fixedSlot = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof  SessionFlexibleSlotForSessionManagementVo)
			flexibleSlot = (SessionFlexibleSlotForSessionManagementVo) form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		
		
		boolean sessionSelected = form.getLocalContext().getSelectedSession() != null;
		boolean sessionBlocked = sessionSelected && Session_Status_and_Reason.BLOCKED.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		boolean sessionCancelled = sessionSelected && Session_Status_and_Reason.CANCELLED.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		boolean sessionOpen = sessionSelected && Session_Status_and_Reason.OPEN.equals(form.getLocalContext().getSelectedSession().getSessionStatus());
		
		boolean slotOpened = (fixedSlot != null && Status_Reason.SLOTOPENED.equals(fixedSlot.getStatus())) || (flexibleSlot != null && Status_Reason.SLOTOPENED.equals(flexibleSlot.getStatus()));
		boolean slotBlocked = (fixedSlot != null && Status_Reason.BLOCKED.equals(fixedSlot.getStatus())) || (flexibleSlot != null && Status_Reason.BLOCKED.equals(flexibleSlot.getStatus()));
		boolean hasFixedAppointment = fixedSlot != null && fixedSlot.getAppointment() != null ;
		boolean hasFlexibleAppointment = flexibleSlot != null && flexibleSlot.getAppointment() != null;
		boolean isChooseAndBookAppt = (hasFixedAppointment && Boolean.TRUE.equals(fixedSlot.getAppointment().getIsCABBooking())) || (hasFlexibleAppointment && Boolean.TRUE.equals(flexibleSlot.getAppointment().getIsCABBooking()));
		//boolean apptCancelled = hasAppointment && Status_Reason.CANCELLED.equals(slot.getAppointment().getApptStatus());
		boolean apptBooked = (hasFixedAppointment && Status_Reason.BOOKED.equals(fixedSlot.getAppointment().getApptStatus())) || (hasFlexibleAppointment && Status_Reason.BOOKED.equals(flexibleSlot.getAppointment().getApptStatus()));
		boolean apptReqRebook = (hasFixedAppointment && Boolean.TRUE.equals(fixedSlot.getAppointment().getRequiresRebook())) || (hasFlexibleAppointment && Boolean.TRUE.equals(flexibleSlot.getAppointment().getRequiresRebook()));
		boolean theatreAppt = (hasFixedAppointment && fixedSlot.getAppointment().getTheatreBooking() != null) || (hasFlexibleAppointment && flexibleSlot.getAppointment().getTheatreBooking() != null);
		boolean canMarkAsDoNotMove = apptBooked && ( (fixedSlot != null && !Boolean.TRUE.equals(fixedSlot.getAppointment().getDoNotMove())) || (flexibleSlot != null && !Boolean.TRUE.equals(flexibleSlot.getAppointment().getDoNotMove())) );
		
		ReferralApptStatus statusLookup = null;
		
		if (fixedSlot != null && fixedSlot.getCatsReferral() != null && fixedSlot.getCatsReferral().getCurrentStatus() != null)
			statusLookup = fixedSlot.getCatsReferral().getCurrentStatus().getReferralStatus();
		
		boolean referralWasAccepted = statusLookup != null && (statusLookup.equals(ReferralApptStatus.REFERRAL_ACCEPTED) 
		|| statusLookup.equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED) 
		|| statusLookup.equals(ReferralApptStatus.ACTIVE_MONITORING) 
		|| statusLookup.equals(ReferralApptStatus.DISCHARGED) 
		|| statusLookup.equals(ReferralApptStatus.APPOINTMENTBOOKED));

		boolean icpCompleted = fixedSlot != null && domain.isReferralICPCompleted(fixedSlot.getCatsReferral());
		boolean slotsSelected = (form.getLocalContext().getFixedSlotsSelected() != null && form.getLocalContext().getFixedSlotsSelected().size() > 0) 
							|| (form.getLocalContext().getFlexibleSlotsSelected() != null && form.getLocalContext().getFlexibleSlotsSelected().size() > 0) ;
		
		//form.getContextMenus().Scheduling.getSessionManagementREMOVE_SLOTItem().setVisible(false);
		//form.getContextMenus().Scheduling.getSessionManagementREOPENItem().setVisible(false);
		form.getContextMenus().Scheduling.getSessionManagementADD_SLOTItem().setVisible(sessionSelected);
		form.getContextMenus().Scheduling.getSessionManagementBLOCK_SLOTItem().setVisible(slotOpened);
		form.getContextMenus().Scheduling.getSessionManagementUNBLOCKItem().setVisible(slotBlocked);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_SLOTItem().setVisible(slotOpened);
		
		
		form.getContextMenus().Scheduling.getSessionManagementBLOCK_SELECTED_SLOTSItem().setVisible(slotsSelected);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_SELECTED_SLOTSItem().setVisible(slotsSelected);

		form.getContextMenus().Scheduling.getSessionManagementADD_COMMENTSItem().setVisible((hasFixedAppointment || hasFlexibleAppointment) && !isChooseAndBookAppt);
		form.getContextMenus().Scheduling.getSessionManagementCANCEL_APPOINTMENTItem().setVisible(!isChooseAndBookAppt && apptBooked);
		form.getContextMenus().Scheduling.getSessionManagementDO_NOT_MOVEItem().setVisible(!isChooseAndBookAppt && canMarkAsDoNotMove);
		
		form.getContextMenus().Scheduling.getSessionManagementREBOOK_APPOINTMENTItem().setVisible(!isChooseAndBookAppt && !theatreAppt && !icpCompleted && apptReqRebook && referralWasAccepted);
		
		form.getContextMenus().Scheduling.getSessionManagementADD_SLOT_COMMENTItem().setVisible(fixedSlot != null || flexibleSlot != null);

		form.lnkreturnToList().setEnabled(form.getLocalContext().getSelectedTab() != null);

		form.lyrTabs().tabExtendedView().btnBlockSession().setEnabled(sessionOpen);
		form.lyrTabs().tabExtendedView().btnCancelSession().setEnabled(sessionOpen);
		form.lyrTabs().tabExtendedView().btnMoveSession().setEnabled(sessionSelected && Boolean.TRUE.equals(form.getLocalContext().getNoneOrBookedAppointmentsOnly()) && form.getLocalContext().getSelectedSession().getSessionDate() != null && form.getLocalContext().getSelectedSession().getSessionDate().isGreaterOrEqualThan(new Date()));
		form.lyrTabs().tabExtendedView().btnSessionComments().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnAddSlot().setEnabled(sessionSelected);
		form.lyrTabs().tabExtendedView().btnReOpen().setEnabled(sessionBlocked || sessionCancelled);
		
		form.lyrTabs().tabExtendedView().setHeaderEnabled(sessionSelected);
		form.lyrTabs().tabAvailabilityView().setHeaderVisible(false);
		
		//WDEV-20588
		form.lyrTabs().tabCancelledAppointments().setHeaderVisible(sessionCancelled);
		form.getContextMenus().Scheduling.getCancelledApptsSessionManREBOOK_APPOINTMENTItem().setVisible(form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getValue() != null);
		
		//WDEV-22944
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setVisible(form.getLocalContext().getSelectedSession()!=null && (form.getLocalContext().getSelectedSession().getSessionCommentIsNotNull() || (form.getLocalContext().getSelectedSession().getSessionMoveIsNotNull() && form.getLocalContext().getSelectedSession().getSessionMove().size()>0))); 
		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setEnabled(false);
		
		//WDEV-23634
		boolean showOutpatientDashboardButton = ConfigFlag.GEN.OUTPATIENT_DASHBOARD_URL.getValue() != null && ConfigFlag.GEN.OUTPATIENT_DASHBOARD_URL.getValue().length() > 0;
		form.btnOutpatientDashboard().setVisible(showOutpatientDashboardButton);
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			listOfErrors.add("Date From cannot be greater than Date To.");

		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	private void populateSearchCriteriaFromScreen()
	{
		SessionManagementSearchCriteriaVo searchCriteria = new SessionManagementSearchCriteriaVo();

		searchCriteria.setHospital(form.cmbHospital().getValue());
		searchCriteria.setLocation(form.cmbLocation().getValue());
		searchCriteria.setProfile(form.qmbProfile().getValue());
		searchCriteria.setService(form.cmbService().getValue());
		searchCriteria.setDateFrom(form.dteFrom().getValue());
		searchCriteria.setDateTo(form.dteTo().getValue());
		searchCriteria.setListType(form.cmbListType().getValue());					//wdev-19419
		//WDEV-20479 searchCriteria.setConsultant((HcpLiteVo) form.ccConsultant().getValue());	//wdev-19419

		if (form.ccListOwner().getValue() != null)
		{
			HcpLiteVoCollection hcpCollection = new HcpLiteVoCollection();
			hcpCollection.add(form.ccListOwner().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccListOwner().getValue() : null);
			searchCriteria.setListOwners(hcpCollection);
		}
		else if (form.getGlobalContext().Scheduling.getSelectedHCPs() != null && form.getGlobalContext().Scheduling.getSelectedHCPs().size() > 0)
		{
			searchCriteria.setListOwners(form.getGlobalContext().Scheduling.getSelectedHCPs());
		}
		
		//wdev-19419
		searchCriteria.setListType(form.cmbListType().getValue());
		//WDEV-20479 searchCriteria.setConsultant((HcpLiteVo) form.ccConsultant().getValue());
		//---------
		
		form.getGlobalContext().Scheduling.setSessionManagementSearchCriteria(searchCriteria);
		
	}

	private void populateClinicView(SessionManagementVoCollection sessions)
	{

		form.lyrTabs().tabClinicView().grdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

		for (SessionManagementVo session : sessions)
		{
			grdSessionsRow newRow = form.lyrTabs().tabClinicView().grdSessions().getRows().newRow();

			if (session == null)
				continue;

			newRow.setColSessionDate(session.getSessionDate() != null ? session.getSessionDate().toString() : "");

			newRow.setColSessionName(session.getName() != null ? session.getName() : "");
			newRow.setTooltipForColSessionName(newRow.getColSessionName());

			newRow.setColStartTime(session.getStartTm() != null ? session.getStartTm().toString() : "");
			newRow.setColEndTime(session.getEndTm() != null ? session.getEndTm().toString() : "");

			newRow.setColService(session.getService() != null && session.getService().getServiceName() != null ? session.getService().getServiceName() : "");
			newRow.setTooltipForColService(newRow.getColService());

			newRow.setColLocation(session.getSchLocation() != null && session.getSchLocation().getName() != null ? session.getSchLocation().getName() : "");
			newRow.setTooltipForColLocation(newRow.getColLocation());

			newRow.setColStatus(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? session.getSessionStatus().getText() : "");
			newRow.setTooltipForColStatus(null);
			String cancelBlockReason = !Session_Status_and_Reason.OPEN.equals(session.getSessionStatus()) ? getCancelBlockSessionReasonTooltip(session) : " ";
			newRow.setTooltipForColStatus(newRow.getColStatus() + cancelBlockReason);//WDEV-21851
			
			//wdev-19419
			newRow.setColListType(session.getListTypeIsNotNull() ? session.getListType().getIItemText():"");
			newRow.setTooltipForColListType(session.getListTypeIsNotNull() ? session.getListType().getIItemText():"");
			
			//newRow.setColConsultant(session.getResponsibleHCPIsNotNull() ? session.getResponsibleHCP().getIHcpName():"");
			//newRow.setTooltipForColConsultant(session.getResponsibleHCPIsNotNull() ? session.getResponsibleHCP().getIHcpName():"");
			
			//WDEV-20479
			if(session.getListOwners() != null)
			{
				Session_ListOwnerVoCollection listOwners =  session.getListOwners();
				StringBuilder listOwn = new StringBuilder();
				for (int j = 0; j < listOwners.size(); j++)
				{
					if(Boolean.TRUE.equals(listOwners.get(j).getListOwner()))
					{
						listOwn.append(listOwners.get(j).getHcpIsNotNull() ? listOwners.get(j).getHcp().getIHcpName(): "");
						listOwn.append(", ");
					}
				}
				
				if(listOwn != null && listOwn.length() > 1)
				{
					String ownersList = listOwn.toString();
					ownersList = ownersList.substring(0, ownersList.length() - 2);
					newRow.setColListOwners(ownersList);
					newRow.setTooltipForColListOwners(ownersList);
				}
				
			}
			
			//---------

			newRow.setValue(session);
		}

	}

	private void populateAvailabilityView(SessionManagementVoCollection sessions)
	{
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getColumns().clear();
		form.lyrTabs().tabAvailabilityView().dyngrdSessions().getRows().clear();

		if (sessions == null || sessions.size() == 0)
			return;

	}

	@Override
	protected void onImbAddListOwnersClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.HcpMultipleSelectDialog);
	}

	@Override
	protected void onQmbProfileTextSubmited(String value) throws PresentationLogicException
	{
		populateProfiles(value);

	}

	private void populateProfiles(String value)
	{
		form.qmbProfile().clear();

		if (value == null || value.length() == 0)
			return;

		ProfileLiteVoCollection profiles = domain.listProfiles(value);

		if (profiles == null || profiles.size() == 0)
			return;

		for (ProfileLiteVo profile : profiles)
		{
			if (profile == null)
				continue;

			form.qmbProfile().newRow(profile, profile.getName());
		}

		if (profiles.size() == 1)
		{
			form.qmbProfile().setValue(profiles.get(0));
		}
		else
		{
			form.qmbProfile().showOpened();
		}

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		
		BookingAppointmentForSessionManagementVo gridAppt = null;
		SessionSlotForSessionManagementVo fixedSlot = null;
		SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;
		
		if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
			fixedSlot = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
			flexibleSlot = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		
		switch (menuItemID)
		{
			
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_SLOT:
				addSessionSlot();
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.BLOCK_SLOT:
				form.getLocalContext().setContextMenuActioned(BLOCK_SLOT);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.UNBLOCK:
				if (fixedSlot != null)
					updateFixedSlotStatus(Status_Reason.SLOTOPENED);
				else if (flexibleSlot != null)
					updateFlexibleSlotStatus(Status_Reason.SLOTOPENED);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_SLOT:
				form.getLocalContext().setContextMenuActioned(CANCEL_SLOT);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.BLOCK_SELECTED_SLOTS:
				form.getLocalContext().setContextMenuActioned(BLOCK_SELECTED_SLOTS);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_SELECTED_SLOTS:
				form.getLocalContext().setContextMenuActioned(CANCEL_SELECTED_SLOTS);
				engine.open(form.getForms().Scheduling.ReasonTextDialog);
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.CANCEL_APPOINTMENT:
				
				form.getLocalContext().setCancelSessionActioned(false);
				
				if (fixedSlot != null)
					gridAppt = ((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment();
				else if (flexibleSlot != null)
					gridAppt = ((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment();
				
				Booking_AppointmentVo voAppt = domain.getBookingAppointment(gridAppt);
				cancelAppointment(voAppt, gridAppt);
				
				break;	
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.REBOOK_APPOINTMENT:
				
				form.getLocalContext().setCancelSessionActioned(false);
				
				if (fixedSlot != null)
					gridAppt = ((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment();
				else if (flexibleSlot != null)
					gridAppt = ((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment();
				
				
				voAppt = domain.getBookingAppointment(gridAppt);
				rebookAppt(voAppt, gridAppt);
				
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.DO_NOT_MOVE:
				
				markAppointmentAsDoNotMove(fixedSlot != null ? fixedSlot.getAppointment() : flexibleSlot.getAppointment());
				
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_COMMENTS:
				
				form.getLocalContext().setContextMenuActioned(ADD_APPOINTMENT_COMMENTS);
				form.getGlobalContext().Core.setCommentDialogString(null);
				
				if (fixedSlot != null && fixedSlot.getAppointment() != null)
				{
					form.getGlobalContext().Core.setCommentDialogString(fixedSlot.getAppointment().getComments());
				}
				else if (flexibleSlot != null && flexibleSlot.getAppointment() != null)
				{
					form.getGlobalContext().Core.setCommentDialogString(flexibleSlot.getAppointment().getComments());
				}
				
				form.getGlobalContext().Core.setCommentDialogTitle("Appointment Comment");
				engine.open(form.getForms().Core.CommentDialog, new Object[] { Boolean.TRUE });
				
				break;
				
			case GenForm.ContextMenus.SchedulingNamespace.SessionManagement.ADD_SLOT_COMMENT:
				form.getLocalContext().setContextMenuActioned(ADD_SLOT_COMMENT);
				form.getGlobalContext().Core.setCommentDialogString(null);
				
				form.getGlobalContext().Core.setCommentDialogString(fixedSlot != null ? fixedSlot.getComment() : flexibleSlot.getComment());
		
				form.getGlobalContext().Core.setCommentDialogTitle("Slot Comment");
				engine.open(form.getForms().Core.CommentDialog, new Object[] {Boolean.TRUE});
				break;
				
			//WDEV-20588	
			case GenForm.ContextMenus.SchedulingNamespace.CancelledApptsSessionMan.REBOOK_APPOINTMENT:
				
				rebookCancelledAppointment((BookingAppointmentForSessionManagementVo)form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getValue());
				
				break;
		}
	}

	//WDEV-20588
	private void rebookCancelledAppointment(BookingAppointmentForSessionManagementVo appt) 
	{
		
		Booking_AppointmentVo updatedAppointment = domain.getBookingAppointment(appt);
		
		if (appt.getVersion_Booking_Appointment() != updatedAppointment.getVersion_Booking_Appointment())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateCancelledAppts(domain.getCancelledAppointmentsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
			return;
		}
		
		form.getGlobalContext().Core.setPatientShort(updatedAppointment.getPatient());
		form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralForAppointment(updatedAppointment));
		
		form.getGlobalContext().Scheduling.setBookingAppointment(updatedAppointment);
		form.getGlobalContext().Scheduling.setBookingService(updatedAppointment.getSessionIsNotNull() ? updatedAppointment.getSession().getService() : null);
		form.getGlobalContext().Scheduling.setBookingActivity(updatedAppointment.getActivityIsNotNull() ? updatedAppointment.getActivity() : null);
		
		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
	}

	private void addAppointmentComments(BookingAppointmentForSessionManagementVo appointment)
	{
		if (appointment == null)
			return;
		
		appointment.setComments(form.getGlobalContext().Core.getCommentDialogString());
		
		String[] arrErrors = appointment.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.saveAppointment(appointment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		updateScreenForRecord(null);
		
	}

	private void markAppointmentAsDoNotMove(BookingAppointmentForSessionManagementVo appointment)
	{
		if (appointment == null)
			return;
		
		appointment.setDoNotMove(Boolean.TRUE);
		
		String[] arrErrors = appointment.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			domain.saveAppointment(appointment);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		updateScreenForRecord(null);
		
	}

	private void updateFixedSlotStatus(Status_Reason status)
	{
		int repeats = 0;

		do
		{
			try
			{
				SessionManagementVo session = form.getLocalContext().getSelectedSession();

				SessionVo voSession = domain.getSessionVo(session);

				if (voSession == null)
					return;

				if (session.getVersion_Sch_Session() != voSession.getVersion_Sch_Session())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					updateScreenForRecord(null);
					return;
				}

				SessionSlotForSessionManagementVo slot = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue();

				int remainingSlots = voSession.getRemainingSlots();
				remainingSlots -= 1;

				if (remainingSlots < 0)
					remainingSlots = 0;

				voSession.setRemainingSlots(remainingSlots);

				if (voSession.getSessionSlots() != null)
				{
					for (int i = 0; i < voSession.getSessionSlots().size(); i++)
					{
						if (voSession.getSessionSlots().get(i) == null || voSession.getSessionSlots().get(i).getID_Session_Slot() == null)
							continue;

						if (voSession.getSessionSlots().get(i).getID_Session_Slot().equals(slot.getID_Session_Slot()))
						{
							SessionSlotVo slotToUpdate = voSession.getSessionSlots().get(i);

							if (status != null)
							{
								slotToUpdate.setStatus(status);
								slotToUpdate.setStatusReason(status);

								if (form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement() != null)
								{
									slotToUpdate.setCancelBlockReason(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getReason());
									slotToUpdate.setCancelBlockComment(form.getGlobalContext().Scheduling.getCancelBlockReasonForSessionManagement().getComment());
								}
								form.getGlobalContext().Scheduling.setCancelBlockReasonForSessionManagement(null);//WDEV-21851
								SessionSlotStatusVoCollection voCollStatusHistory = slotToUpdate.getStatusReasonHistory();

								//update slot status history
								if(voCollStatusHistory == null)
									voCollStatusHistory = new SessionSlotStatusVoCollection();

								SessionSlotStatusVo voSlotStatus = new SessionSlotStatusVo();
								voSlotStatus.setDateTime(new DateTime());
								voSlotStatus.setStatus(status);
								voSlotStatus.setStatusReason(status);

								voCollStatusHistory.add(voSlotStatus);
								slotToUpdate.setStatusReasonHistory(voCollStatusHistory);
							}
							if (form.getLocalContext().getContextMenuActionedIsNotNull() && form.getLocalContext().getContextMenuActioned() == ADD_SLOT_COMMENT)
							{
								slotToUpdate.setComment(form.getGlobalContext().Core.getCommentDialogString());
							}

							break;
						}
					}
				}

				String[] arrErrors = voSession.validate();

				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				voSession = domain.saveSession(voSession, true);
				updateScreenForRecord(null);
				
				return;
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				updateScreenForRecord(null);
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}

	private void cancelAppointment(Booking_AppointmentVo voAppt, BookingAppointmentForSessionManagementVo gridAppt) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		SessionSlotForSessionManagementVo fixedSlot = null;
		SessionFlexibleSlotForSessionManagementVo flexibleSlot = null;
		
		if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionSlotForSessionManagementVo)
			fixedSlot = (SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		else if (form.lyrTabs().tabExtendedView().dyngrdSlots().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
			flexibleSlot = (SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getValue();
		
		if (voAppt != null && Status_Reason.BOOKED.equals(voAppt.getApptStatus()) && !isTheatreAppt)
		{
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt, null);
			
			if(voServiceAndActivity != null)
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
				form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				
				PatientShort patientShort = null;
				
				if (fixedSlot != null)
					patientShort = domain.getPatientShort(((SessionSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment().getPatient());
				else if (flexibleSlot != null)
					patientShort = domain.getPatientShort(((SessionFlexibleSlotForSessionManagementVo)form.lyrTabs().tabExtendedView().dyngrdSlots().getSelectedRow().getValue()).getAppointment().getPatient());
				
				form.getGlobalContext().Core.setPatientShort(patientShort);
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
		}
		else if (voAppt != null && voAppt.getApptStatusIsNotNull() && gridAppt != null && gridAppt.getApptStatusIsNotNull()
				&& ! voAppt.getApptStatus().equals(gridAppt.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			updateScreenForRecord(null);	
		}
	}
	
	@Override
	protected void onGrdSessionsSelectionChanged() throws PresentationLogicException
	{
		boolean isFixedSession = form.lyrTabs().tabClinicView().grdSessions().getValue() != null && Boolean.TRUE.equals(form.lyrTabs().tabClinicView().grdSessions().getValue().getIsFixed());//WDEV-20588
		boolean cancelledSession = form.lyrTabs().tabClinicView().grdSessions().getValue() != null && Session_Status_and_Reason.CANCELLED.equals(form.lyrTabs().tabClinicView().grdSessions().getValue().getSessionStatus());
		
		createDynamicGridSlots(isFixedSession);
		
		if (isFixedSession)
		{
			populateExtendedViewWithFixedSlots(domain.getFixedSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		}
		else
		{
			populateExtendedViewWithFlexibleSlots(domain.getFlexibleSlotsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		}
		
		//WDEV-20588
		if (cancelledSession)
		{
			initializeCancelledApptGrid();
			populateCancelledAppts(domain.getCancelledAppointmentsForSession(form.lyrTabs().tabClinicView().grdSessions().getValue()));
		}
		
		updateControlsState();
	}

	private void populateExtendedViewWithFixedSlots(SessionSlotForSessionManagementVoCollection sessionSlots)
	{
		form.lyrTabs().showtabExtendedView();

		
		form.getLocalContext().setSelectedSession(form.lyrTabs().tabClinicView().grdSessions().getValue());
		form.getLocalContext().setSelectedTab(ClinicView);
		
		SessionManagementVo selectedSession = form.lyrTabs().tabClinicView().grdSessions().getValue();
		Session_Status_and_Reason sessionStatus =selectedSession!= null ? selectedSession.getSessionStatus():null;
		Boolean isSessionCancelledOrBlocked = !Session_Status_and_Reason.OPEN.equals(sessionStatus);
		
		populateExtendedViewSessionLabel();

		form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().clear();
		form.lyrTabs().tabExtendedView().chkSelectAll().setValue(Boolean.FALSE);
		form.getLocalContext().setFixedSlotsSelected(null);
		form.getLocalContext().setFlexibleSlotsSelected(null);
		form.getLocalContext().setNoneOrBookedAppointmentsOnly(Boolean.TRUE);

		if (sessionSlots == null || sessionSlots.size() == 0)
			return;

		for (int i = 0; i < sessionSlots.size(); i++)
		{
			SessionSlotForSessionManagementVo slot = sessionSlots.get(i);
			
			boolean setRedText = SchedulingPriority.URGENT.equals(slot.getPriority());
			
			String cancelTooltip = getCancellationTooltip(slot.getAppointment());
			String formatedCancelTooltip = (cancelTooltip.length() > 0 ? "<br>" : "") + cancelTooltip;
			
			DynamicGridRow newDynamicRow = form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().newRow();
			//wdev-19496
			DynamicGridCell cellActivity = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITYIMAGE), DynamicCellType.IMAGE);
			
			if( slot.getActivity() != null )
			{
				ActivityWithImageLiteVo tempVo = domain.getActivityWithImage(slot.getActivity());
				
				cellActivity.setValue( tempVo != null && tempVo.getActivityImageIsNotNull() ? engine.getRegisteredImage(tempVo.getActivityImage().getID_AppImage().intValue()) : null);
				//cellActivity.setTooltip(slot.getActivity() != null ? slot.getActivity().getName() + formatedCancelTooltip : cancelTooltip);
				cellActivity.setReadOnly(true);
			}
			//---------------
			
			cellActivity = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.HTMLVIEW);
			
			String activity = "";
			
			if (slot.getActivity() != null)
			{
				if (setRedText)
					activity = "<font color = red >" +  slot.getActivity().getName()  + "</font>";
				else
					activity = slot.getActivity().getName();
				
			}
			
			cellActivity.setValue(activity);
			cellActivity.setTooltip(slot.getActivity() != null ? slot.getActivity().getName() + formatedCancelTooltip : cancelTooltip);
			cellActivity.setReadOnly(true);

			DynamicGridCell cellPriority = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PRIORITY), DynamicCellType.IMAGE);
			cellPriority.setValue(slot.getPriority() != null ? slot.getPriority().getImage() : null);
			cellPriority.setTooltip(slot.getPriority() != null ? slot.getPriority().getText() : "");
			cellPriority.setReadOnly(true);
			
			DynamicGridCell cellCBAppt = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CB_APPT), DynamicCellType.IMAGE);
			cellCBAppt.setReadOnly(true);
			
			DynamicGridCell cellStartTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.HTMLVIEW);
			
			String startTime = "";
			
			if (slot.getStartTm() != null)
			{
				if (setRedText)
					startTime = "<font color = red >" +  slot.getStartTm().toString()  + "</font>";
				else
					startTime = slot.getStartTm().toString();
				
			}
			
			cellStartTime.setValue(startTime);
			cellStartTime.setReadOnly(true);

			Time endTime = null;

			if (slot.getStartTm() != null && slot.getDuration() != null)
			{
				endTime = slot.getStartTm();
				endTime.addMinutes(slot.getDuration());
			}

			DynamicGridCell cellEndTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_END_TIME), DynamicCellType.HTMLVIEW);
			
			String endTimeString = "";
			
			if (endTime != null)
			{
				if (setRedText)
					endTimeString = "<font color = red >" +  endTime.toString()  + "</font>";
				else
					endTimeString = endTime.toString();
				
			}
			
			cellEndTime.setValue(endTimeString);
			cellEndTime.setReadOnly(true);
			
			StringBuffer functionsForFixedSlots = new StringBuffer();
				
			if (slot.getFunctions() != null)
			{
				for (int j = 0; j < slot.getFunctions().size(); j++)
				{
					ServiceFunctionLiteVo function = slot.getFunctions().get(j);

					if (function == null)
						continue;
						
					if (functionsForFixedSlots.length() > 0)
						functionsForFixedSlots.append(", ");

					functionsForFixedSlots.append(function.getFunction() != null ? function.getFunction().getText() : "");
				}
			}
			
			DynamicGridCell cellFunctions = newDynamicRow.getCells().newCell(getColumnById(COLUMN_FUNCTIONS), DynamicCellType.HTMLVIEW);
			
			String functionsString = "";
			
			if (setRedText)
				functionsString = "<font color = red >" +  functionsForFixedSlots.toString()  + "</font>";
			else
				functionsString = functionsForFixedSlots.toString();
				
			
			cellFunctions.setValue(functionsString);
			cellFunctions.setTooltip(functionsForFixedSlots.toString());
			cellFunctions.setReadOnly(true);
			
			DynamicGridCell cellPatient_Identifier = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT_IDENTIFIER), DynamicCellType.HTMLVIEW);
			cellPatient_Identifier.setReadOnly(true);
			
			DynamicGridCell cellPatient = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT), DynamicCellType.HTMLVIEW);
			cellPatient.setReadOnly(true);
			
			//WDEV-23054
			DynamicGridCell cellApptStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_STATUS), DynamicCellType.HTMLVIEW);
			String apptStatus = "";
			if (slot.getAppointment() != null
					&& slot.getAppointment().getApptStatus() != null)
			{
				if (setRedText)
					apptStatus = "<font color = red >" +  slot.getAppointment().getApptStatus().getText() + "</font>";
				else
					apptStatus = slot.getAppointment().getApptStatus().getText();
			}
			cellApptStatus.setValue(apptStatus);
			cellApptStatus.setTooltip(null);
			if (apptStatus != "")
			{
				apptStatus = slot.getAppointment().getApptStatus().getText(); //No colour
				cellApptStatus.setTooltip(apptStatus);
			}
			else
				cellApptStatus.setTooltip("");
			cellApptStatus.setReadOnly(true); //WDEV-23054
			
			DynamicGridCell cellDoNotMove = newDynamicRow.getCells().newCell(getColumnById(COLUMN_DO_NOT_MOVE), DynamicCellType.IMAGE);
			cellDoNotMove.setReadOnly(true);
			
			DynamicGridCell cellRTT = newDynamicRow.getCells().newCell(getColumnById(COLUMN_RTT), DynamicCellType.HTMLVIEW);
			cellRTT.setReadOnly(true);
			
			//WDEV-23054
//			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.HTMLVIEW);
			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_STATUS), DynamicCellType.HTMLVIEW); //WDEV-23054
			
			String status = "";
			String cancelBlockSpecificSlotReason ="";
			if (slot.getStatus() != null);
			{
				if (setRedText)
					status = "<font color = red >" +  slot.getStatus().getText()  + "</font>";
				else
					status = slot.getStatus().getText();
				
				if(Status_Reason.BLOCKED.equals(slot.getStatus()) || Status_Reason.CANCELLED.equals(slot.getStatus()))
				{

					CancelAppointmentReason cancellationReason = isSessionCancelledOrBlocked ? selectedSession.getCancellationReason():  slot.getCancelBlockReason();
					String comment = isSessionCancelledOrBlocked ? selectedSession.getComment(): slot.getCancelBlockComment(); ;

					cancelBlockSpecificSlotReason =getCancelBlockSpecificSlotReason(cancellationReason,comment);
				}						
			}
			
			cellStatus.setValue(status);
			cellStatus.setTooltip(null);
			cellStatus.setTooltip(slot.getStatus() != null ? slot.getStatus().getText() + formatedCancelTooltip + cancelBlockSpecificSlotReason: cancelTooltip);//WDEV-21851
			cellStatus.setReadOnly(true);
			
			DynamicGridCell cellSlotOwner = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_OWNER), DynamicCellType.HTMLVIEW);
			
			String slotOwner = "";
			
			if (slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null)
			{
				if (setRedText)
					slotOwner = "<font color = red >" +  slot.getSlotResp().getHcp().getName().toString()  + "</font>";
				else
					slotOwner = slot.getSlotResp().getHcp().getName().toString();
				
			}
			
			cellSlotOwner.setValue(slotOwner);
			cellSlotOwner.setTooltip(slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null ? slot.getSlotResp().getHcp().getName().toString() + formatedCancelTooltip : cancelTooltip);
			cellSlotOwner.setReadOnly(true);
			
			DynamicGridCell cellSlotComments = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_COMMENT), DynamicCellType.IMAGE);
			
			if (slot.getComment() != null)
			{
				cellSlotComments.setValue(form.getImages().Core.Comment16);
				cellSlotComments.setTooltip("Slot Comment: <b>" + slot.getComment() + "</b>");
				cellSlotComments.setReadOnly(true);				
			}
			
			//WDEV-19543
			DynamicGridCell cellLinkedAppt = newDynamicRow.getCells().newCell(getColumnById(COLUMN_LINKED_APPOINTMENTS), DynamicCellType.IMAGE);
			
			if (slot.getAppointment()!=null && slot.getAppointment().getLinkedAppointmentsIsNotNull() &&  slot.getAppointment().getLinkedAppointments().size()>0)
			{
				cellLinkedAppt.setValue(form.getImages().Admin.link);
				cellLinkedAppt.setTooltip("This appointment has one or more linked appointments");
				cellLinkedAppt.setReadOnly(true);				
			}
			
			DynamicGridCell cellSelect = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SELECT), DynamicCellType.BOOL);
			cellSelect.setReadOnly(!Status_Reason.SLOTOPENED.equals(slot.getStatus()));
			cellSelect.setAutoPostBack(true);
			
			if (!Status_Reason.SLOTOPENED.equals(slot.getStatus()))
			{
				cellSelect.setBackColor(Color.LightGray);
				cellSelect.setTooltip("Not Selectable");
			}
			
			if (slot.getAppointment() != null)
			{
				
				CatsReferralForSessionManagementVo referral = domain.getCatsReferralForAppointment(slot.getAppointment());
				
				String rttString = "";
				
				if (referral != null && referral.getReferralDetails() != null && referral.getReferralDetails().getEnd18WW() != null)
				{
					if (setRedText)
						rttString = "<font color = red >" +  referral.getReferralDetails().getEnd18WW().toString()  + "</font>";
					else
						rttString = referral.getReferralDetails().getEnd18WW().toString();
					
				}
				
				cellRTT.setValue(rttString);
				
				slot.setCatsReferral(referral);
				
				if (slot.getActivity() != null && Boolean.TRUE.equals(slot.getActivity().getFirstAppointment()))
					cellRTT.setTooltip(slot.getAppointment().getFirstApptKPIDate() != null ? "First Appointment KPI Breach Date: <b>" + slot.getAppointment().getFirstApptKPIDate() + "</b>" + formatedCancelTooltip : cancelTooltip);

				String patient = "";
				String patientIdentifier = "";//WDEV-21165
				
				if (slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null)
				{

					patientIdentifier = slot.getAppointment().getPatient().getDisplayId()!= null && slot.getAppointment().getPatient().getDisplayId().getValueIsNotNull()
										? slot.getAppointment().getPatient().getDisplayId().getValue().toString():"";
					
					if (setRedText)
					{
						patient = "<font color = red >" +  slot.getAppointment().getPatient().getName().toString()  + "</font>";
						patientIdentifier =patientIdentifier.length()>0 ? "<font color = red >" + patientIdentifier + "</font>":"";
					}
					else
						patient = slot.getAppointment().getPatient().getName().toString();

				}
				//WDEV-21165
				cellPatient_Identifier.setValue(patientIdentifier);
				cellPatient_Identifier.setTooltip(patientIdentifier.length()>0 ? patientIdentifier+ formatedCancelTooltip : cancelTooltip );
				
				cellPatient.setValue(patient);
				cellPatient.setTooltip(slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null ? slot.getAppointment().getPatient().getName().toString() + formatedCancelTooltip : cancelTooltip);

				if (Boolean.TRUE.equals(slot.getAppointment().getIsCABBooking()))
				{
					cellCBAppt.setValue(form.getImages().OCRR.LetterC);
					cellCBAppt.setTooltip("C&B Appointment");
				}
				
				if (Boolean.TRUE.equals(slot.getAppointment().getDoNotMove()))
				{
					cellDoNotMove.setValue(form.getImages().CcoSched.Abnormal);
					cellDoNotMove.setTooltip("Appointment marked as <b>Do Not Move</b>");
				}
				
				if (!Status_Reason.BOOKED.equals(slot.getAppointment().getApptStatus()))
					form.getLocalContext().setNoneOrBookedAppointmentsOnly(Boolean.FALSE);
			}
				
			newDynamicRow.setValue(slot);
		}
	}

	private void populateExtendedViewWithFlexibleSlots(SessionFlexibleSlotForSessionManagementVoCollection sessionSlots)
	{
		form.lyrTabs().showtabExtendedView();

		form.getLocalContext().setSelectedSession(form.lyrTabs().tabClinicView().grdSessions().getValue());
		form.getLocalContext().setSelectedTab(ClinicView);
		
		SessionManagementVo selectedSession = form.lyrTabs().tabClinicView().grdSessions().getValue();
		Session_Status_and_Reason sessionStatus =selectedSession!= null ? selectedSession.getSessionStatus():null;
		Boolean isSessionCancelledOrBlocked = !Session_Status_and_Reason.OPEN.equals(sessionStatus);

		populateExtendedViewSessionLabel();

		form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().clear();
		form.lyrTabs().tabExtendedView().chkSelectAll().setValue(Boolean.FALSE);
		form.getLocalContext().setFixedSlotsSelected(null);
		form.getLocalContext().setFlexibleSlotsSelected(null);
		form.getLocalContext().setNoneOrBookedAppointmentsOnly(Boolean.TRUE);

		StringBuffer activitiesForFlexibleSlots = new StringBuffer(); 
		
		if (form.getLocalContext().getSelectedSession() != null && form.getLocalContext().getSelectedSession().getSessionActivities() != null)
		{
			for (int i = 0; i < form.getLocalContext().getSelectedSession().getSessionActivities().size(); i++)
			{
				SessionActivityLiteVo activity = form.getLocalContext().getSelectedSession().getSessionActivities().get(i);
				
				if (activity == null)
					return;
				
				if (Boolean.TRUE.equals(activity.getIsActive()))
				{
					if (activitiesForFlexibleSlots.length() > 0)
						activitiesForFlexibleSlots.append(", ");
					
					activitiesForFlexibleSlots.append(activity.getActivity() != null ? activity.getActivity().getName() : "");
				}
			}
		}
		
		if (sessionSlots == null || sessionSlots.size() == 0)
			return;

		for (int i = 0; i < sessionSlots.size(); i++)
		{
			SessionFlexibleSlotForSessionManagementVo slot = sessionSlots.get(i);
			
			boolean setRedText = SchedulingPriority.URGENT.equals(slot.getPriority());
			
			String cancelTooltip = getCancellationTooltip(slot.getAppointment());
			String formatedCancelTooltip = (cancelTooltip.length() > 0 ? "<br>" : "") + cancelTooltip;
			
			DynamicGridRow newDynamicRow = form.lyrTabs().tabExtendedView().dyngrdSlots().getRows().newRow();

			DynamicGridCell cellActivity = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.HTMLVIEW);
			
			String activityString = "";
			
			if (setRedText)
				activityString = "<font color = red >" +  activitiesForFlexibleSlots.toString()  + "</font>";
			else
				activityString = activitiesForFlexibleSlots.toString();
			
			cellActivity.setValue(activityString);
			cellActivity.setTooltip(activitiesForFlexibleSlots.toString());
			cellActivity.setReadOnly(true);
			
			DynamicGridCell cellPriority = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PRIORITY), DynamicCellType.IMAGE);
			
			cellPriority.setValue(slot.getPriority() != null ? slot.getPriority().getImage() : null);
			cellPriority.setTooltip(slot.getPriority() != null ? slot.getPriority().getText() : "");
			cellPriority.setReadOnly(true);
			
			DynamicGridCell cellCBAppt = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CB_APPT), DynamicCellType.IMAGE);
			cellCBAppt.setReadOnly(true);
			
			DynamicGridCell cellStartTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.HTMLVIEW);
			
			String startTime = "";
			
			if (slot.getStartTime() != null)
			{
				if (setRedText)
					startTime = "<font color = red >" +  slot.getStartTime().toString()  + "</font>";
				else
					startTime = slot.getStartTime().toString();
				
			}
			
			cellStartTime.setValue(startTime);
			cellStartTime.setReadOnly(true);

			Time endTime = null;

			if (slot.getStartTime() != null && slot.getDuration() != null)
			{
				endTime = slot.getStartTime();
				endTime.addMinutes(slot.getDuration());
			}

			DynamicGridCell cellEndTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_END_TIME), DynamicCellType.HTMLVIEW);
			
			String endTimeString = "";
			
			if (endTime != null)
			{
				if (setRedText)
					endTimeString = "<font color = red >" +  endTime.toString()  + "</font>";
				else
					endTimeString = endTime.toString();
				
			}
			
			cellEndTime.setValue(endTimeString);
			cellEndTime.setReadOnly(true);
			
			DynamicGridCell cellPatient_Identifier = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT_IDENTIFIER), DynamicCellType.HTMLVIEW);
			cellPatient_Identifier.setReadOnly(true);
			
			DynamicGridCell cellPatient = newDynamicRow.getCells().newCell(getColumnById(COLUMN_PATIENT), DynamicCellType.HTMLVIEW);
			cellPatient.setReadOnly(true);
			
			DynamicGridCell cellDoNotMove = newDynamicRow.getCells().newCell(getColumnById(COLUMN_DO_NOT_MOVE), DynamicCellType.IMAGE);
			cellDoNotMove.setReadOnly(true);
			
			DynamicGridCell cellRTT = newDynamicRow.getCells().newCell(getColumnById(COLUMN_RTT), DynamicCellType.HTMLVIEW);
			cellRTT.setReadOnly(true);
			
			//WDEV-23054
//			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.HTMLVIEW);
			DynamicGridCell cellSlotStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_STATUS), DynamicCellType.HTMLVIEW); //WDEV-23054
			
			String status = "";
			String cancelBlockSpecificSlotReason = "";
			if (slot.getStatus() != null)
			{
				if (setRedText)
					status = "<font color = red >" +  slot.getStatus().getText()  + "</font>";
				else
					status = slot.getStatus().getText();
				
				if(Status_Reason.BLOCKED.equals(slot.getStatus()) || Status_Reason.CANCELLED.equals(slot.getStatus()))
				{

					CancelAppointmentReason cancellationReason = isSessionCancelledOrBlocked ? selectedSession.getCancellationReason():  slot.getCancelBlockReason();
					String comment = isSessionCancelledOrBlocked ? selectedSession.getComment(): slot.getCancelBlockComment(); ;

					cancelBlockSpecificSlotReason =getCancelBlockSpecificSlotReason(cancellationReason,comment);
				}
			}
			
			//WDEV-23054
//			cellStatus.setValue(status);
//			cellStatus.setTooltip(null);
//			cellStatus.setTooltip(slot.getStatus() != null ? slot.getStatus().getText() + formatedCancelTooltip + cancelBlockSpecificSlotReason: cancelTooltip);
//			cellStatus.setReadOnly(true);
			cellSlotStatus.setValue(status);
			cellSlotStatus.setTooltip(null);
			cellSlotStatus.setTooltip(slot.getStatus() != null ? slot.getStatus().getText() + formatedCancelTooltip + cancelBlockSpecificSlotReason: cancelTooltip);
			cellSlotStatus.setReadOnly(true); //WDEV-23054
			
			DynamicGridCell cellSlotOwner = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_OWNER), DynamicCellType.HTMLVIEW);
			
			String slotOwner = "";
			
			if (slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null)
			{
				if (setRedText)
					slotOwner = "<font color = red >" +  slot.getSlotResp().getHcp().getName().toString()  + "</font>";
				else
					slotOwner = slot.getSlotResp().getHcp().getName().toString();
				
			}
			
			cellSlotOwner.setValue(slotOwner);
			cellSlotOwner.setTooltip(slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null ? slot.getSlotResp().getHcp().getName().toString() + formatedCancelTooltip : cancelTooltip);
			cellSlotOwner.setReadOnly(true);
			
			DynamicGridCell cellSlotComments = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SLOT_COMMENT), DynamicCellType.IMAGE);
			
			if (slot.getComment() != null)
			{
				cellSlotComments.setValue(form.getImages().Core.Comment16);
				cellSlotComments.setTooltip("Slot Comment: <b>" + slot.getComment() + "</b>");
				cellSlotComments.setReadOnly(true);				
			}
			
			//WDEV-19543
			DynamicGridCell cellLinkedAppt = newDynamicRow.getCells().newCell(getColumnById(COLUMN_LINKED_APPOINTMENTS), DynamicCellType.IMAGE);
			
			if (slot.getAppointment()!=null && slot.getAppointment().getLinkedAppointmentsIsNotNull() &&  slot.getAppointment().getLinkedAppointments().size()>0)
			{
				cellLinkedAppt.setValue(form.getImages().Admin.link);
				cellLinkedAppt.setTooltip("This appointment has one or more linked appointments");
				cellLinkedAppt.setReadOnly(true);				
			}
			
			DynamicGridCell cellSelect = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SELECT), DynamicCellType.BOOL);
			cellSelect.setReadOnly(!Status_Reason.SLOTOPENED.equals(slot.getStatus()));
			cellSelect.setAutoPostBack(true);
			
			if (!Status_Reason.SLOTOPENED.equals(slot.getStatus()))
			{
				cellSelect.setBackColor(Color.LightGray);
				cellSelect.setTooltip("Not Selectable");
			}
			
			if (slot.getAppointment() != null)
			{
				
				CatsReferralForSessionManagementVo referral = domain.getCatsReferralForAppointment(slot.getAppointment());
				
				String rttString = "";
				
				if (referral != null && referral.getReferralDetails() != null && referral.getReferralDetails().getEnd18WW() != null)
				{
					if (setRedText)
						rttString = "<font color = red >" +  referral.getReferralDetails().getEnd18WW().toString()  + "</font>";
					else
						rttString = referral.getReferralDetails().getEnd18WW().toString();
					
				}
				
				cellRTT.setValue(rttString);
				
				slot.setCatsReferral(referral);
				
				//if (slot.getActivity() != null && Boolean.TRUE.equals(slot.getActivity().getFirstAppointment()))
				//	cellRTT.setTooltip(slot.getAppointment().getFirstApptKPIDate() != null ? "First Appointment KPI Breach Date: <b>" + slot.getAppointment().getFirstApptKPIDate() + "</b>" + formatedCancelTooltip : cancelTooltip);

				String patient = "";
				String patientIdentifier = "";
				
				if (slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null)
				{
					patientIdentifier = slot.getAppointment().getPatient().getDisplayId()!= null && slot.getAppointment().getPatient().getDisplayId().getValueIsNotNull()
					? slot.getAppointment().getPatient().getDisplayId().getValue().toString():"";
					if (setRedText)
					{
						patient = "<font color = red >" +  slot.getAppointment().getPatient().getName().toString()  + "</font>";
						patientIdentifier =patientIdentifier.length()>0 ? "<font color = red >" + patientIdentifier + "</font>":"";
					}
					else
						patient = slot.getAppointment().getPatient().getName().toString();
					
				}
				
				//WDEV-21165
				cellPatient_Identifier.setValue(patientIdentifier);
				cellPatient_Identifier.setTooltip(patientIdentifier.length()>0 ? patientIdentifier+ formatedCancelTooltip : cancelTooltip );
				
				
				cellPatient.setValue(patient);
				cellPatient.setTooltip(slot.getAppointment().getPatient() != null && slot.getAppointment().getPatient().getName() != null ? slot.getAppointment().getPatient().getName().toString() + formatedCancelTooltip : cancelTooltip);

				//WDEV-23054
				DynamicGridCell cellApptStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_STATUS), DynamicCellType.HTMLVIEW);
				String apptStatus = "";
				if (slot.getAppointment() != null
						&& slot.getAppointment().getApptStatus() != null)
				{
					if (setRedText)
						apptStatus = "<font color = red >" +  slot.getAppointment().getApptStatus().getText() + "</font>";
					else
						apptStatus = slot.getAppointment().getApptStatus().getText();
				}
				cellApptStatus.setValue(apptStatus);
				cellApptStatus.setTooltip(null);
				if (apptStatus != "")
				{
					apptStatus = slot.getAppointment().getApptStatus().getText(); //No colour
					cellApptStatus.setTooltip(apptStatus);
				}
				else
					cellApptStatus.setTooltip("");
				cellApptStatus.setReadOnly(true); //WDEV-23054
				
				if (Boolean.TRUE.equals(slot.getAppointment().getIsCABBooking()))
				{
					cellCBAppt.setValue(form.getImages().OCRR.LetterC);
					cellCBAppt.setTooltip("C&B Appointment");
				}
				
				if (Boolean.TRUE.equals(slot.getAppointment().getDoNotMove()))
				{
					cellDoNotMove.setValue(form.getImages().CcoSched.Abnormal);
					cellDoNotMove.setTooltip("Appointment marked as <b>Do Not Move</b>");
				}
				
				if (!Status_Reason.BOOKED.equals(slot.getAppointment().getApptStatus()))
					form.getLocalContext().setNoneOrBookedAppointmentsOnly(Boolean.FALSE);
			}

			if (SchedulingPriority.URGENT.equals(slot.getPriority()))
				newDynamicRow.setTextColor(Color.Red);
			
			newDynamicRow.setValue(slot);
		}
		
	}
	
	//WDEV-20588
	private void populateCancelledAppts(BookingAppointmentForSessionManagementVoCollection appointments)
	{
		
		if (appointments == null || appointments.size() == 0)
			return;

		for (int i = 0; i < appointments.size(); i++)
		{
			BookingAppointmentForSessionManagementVo appt = appointments.get(i);
			DynamicGridRow nDynamicRow = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getRows().newRow();
			
			DynamicGridCell cellStartTime = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_START_TIME), DynamicCellType.HTMLVIEW);
			
			if (appt.getApptStartTime() != null)
				cellStartTime.setValue(appt.getApptStartTime().toString());
			
			cellStartTime.setReadOnly(true);
			
			DynamicGridCell cellEndTime = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_END_TIME), DynamicCellType.HTMLVIEW);
			
			if (appt.getApptEndTime() != null)
				cellEndTime .setValue(appt.getApptEndTime().toString());
			
			cellEndTime .setReadOnly(true);
			
			DynamicGridCell cellPatientIdentifier = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_PATIENT_IDENTIFIER), DynamicCellType.HTMLVIEW);
	
			if (appt.getPatient().getDisplayId() != null && appt.getPatient().getDisplayId().getValue() != null)//WDEV-21165
				cellPatientIdentifier.setValue(appt.getPatient().getDisplayId().getValue().toString());
			appt.getPatient().getPrimaryIdValueUsed();
			
			cellPatientIdentifier.setReadOnly(true);
			
			DynamicGridCell cellPatient = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_PATIENT), DynamicCellType.HTMLVIEW);
			
			if (appt.getPatient().getName() != null)
				cellPatient.setValue(appt.getPatient().getName().toString());
			
			cellPatient.setReadOnly(true);
			
			DynamicGridCell cellStatus = nDynamicRow.getCells().newCell(getCancelledAppointmentsColumnById(COLUMN_CAN_STATUS), DynamicCellType.HTMLVIEW);
			
			if(appt.getApptStatus() != null)
				cellStatus.setValue(appt.getApptStatus().getText());
			
			cellStatus.setReadOnly(true);
			
			nDynamicRow.setValue(appt);
		}	
		
	}
	
		
	private String getCancellationTooltip(BookingAppointmentForSessionManagementVo appointment)
	{
		if(appointment == null)
			return "";
		
		StringBuffer tooltip = new StringBuffer();
		
		if(appointment.getNumProviderCancellations() != null && appointment.getNumProviderCancellations() > 0)
		{
			tooltip.append("Number Of Provider Cancellations = ");
			tooltip.append(appointment.getNumProviderCancellations());
		}
		if(appointment.getNumPatientCancellations() != null && appointment.getNumPatientCancellations() > 0)
		{
			if(tooltip.length() > 0)
				tooltip.append("<br>");
			
			tooltip.append("Number Of Patient Cancellations = ");
			tooltip.append(appointment.getNumPatientCancellations());
		}
		
		return tooltip.toString();
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.lyrTabs().tabExtendedView().dyngrdSlots().getColumns().getByIdentifier(identifier);
	}
	
	//WDEV-20588
	private DynamicGridColumn getCancelledAppointmentsColumnById(String identifier)
	{
		return form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().getByIdentifier(identifier);
	}
	
	private void populateExtendedViewSessionLabel()
	{

		if (form.getLocalContext().getSelectedSession() != null)
		{
			SessionManagementVo session = form.getLocalContext().getSelectedSession();

			StringBuffer sessionInfo = new StringBuffer();

			sessionInfo.append("<font size = 2>");
			sessionInfo.append(session.getName() != null ? "Session: <b>" + session.getName() + (Boolean.TRUE.equals(form.getLocalContext().getSelectedSession().getWasSessionMoved()) ? " (MOVED) </b>" : "</b>"): "");

			if (session.getSessionDate() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE");
				sessionInfo.append("&nbsp;&nbsp;&nbsp;&nbsp;<b>" + dateFormat.format(session.getSessionDate().getDate()) + "</b>");
				sessionInfo.append(" - <b>" + session.getSessionDate() + "</b>");
			}

			sessionInfo.append(session.getStartTm() != null ? "&nbsp;&nbsp;&nbsp;&nbsp;<b>" + session.getStartTm() + "</b>" : "");
			sessionInfo.append(session.getEndTm() != null ? " - <b>" + session.getEndTm() + "</b>" : "");

			sessionInfo.append("<br>");
			sessionInfo.append(session.getService() != null && session.getService().getServiceName() != null ? "Service: <b>" + session.getService().getServiceName() + "</b>" : "");
			sessionInfo.append(session.getSchLocation() != null && session.getSchLocation().getName() != null ? "&nbsp;&nbsp;&nbsp; Location: <b>" + session.getSchLocation().getName() + "</b>" : "");
			sessionInfo.append(session.getSessionStatus() != null && session.getSessionStatus().getText() != null ? "&nbsp;&nbsp;&nbsp; Status: <b>" + session.getSessionStatus().getText() + "</b>" : "");
			
			sessionInfo.append("</font>");
			
			form.lyrTabs().tabExtendedView().htmSession().setHTML(sessionInfo.toString());
		}

		form.lyrTabs().tabExtendedView().imbSessionMoveDetails().setTooltip(getTooltipForSessionMoveDetailsButton(form.getLocalContext().getSelectedSession())); //WDEV-22944
	}

	//WDEV-22944
	private String getTooltipForSessionMoveDetailsButton(SessionManagementVo selectedSession)
	{
		String strTooltip = "";
		if (selectedSession==null)
		{
			return strTooltip;
		}
		
		strTooltip += selectedSession.getSessionCommentIsNotNull() ? "<b>Session Comment: </b>" + selectedSession.getSessionComment() : "";
		if (strTooltip.length()>0)
		{
			strTooltip+="<br>";
		}
		
		//SessionMoveDetails
		for  (int i=0; selectedSession.getSessionMove()!=null && i<selectedSession.getSessionMove().size(); i++)
		{
			strTooltip +="---------------------------------";
			SessionMoveVo sessionMoveItem = selectedSession.getSessionMove().get(i);
			
			strTooltip += sessionMoveItem.getMoveDateIsNotNull() ? "<br><b>Moved Date: </b>" +  sessionMoveItem.getMoveDate() : "";
			strTooltip += sessionMoveItem.getSystemInformationIsNotNull() && sessionMoveItem.getSystemInformation().getCreationUser()!=null ? "<br><b>Moved By: </b>" +  sessionMoveItem.getSystemInformation().getCreationUser().toString() : "";
			strTooltip += sessionMoveItem.getReasonIsNotNull() ? "<br><b>Moved Reason: </b>" +  sessionMoveItem.getReason() : "";
			strTooltip += sessionMoveItem.getCommentIsNotNull() ? "<br><b>Moved Comment: </b>" +  sessionMoveItem.getComment() : "";
			strTooltip+="<br>";
		}
		
		return strTooltip;
	}

	@Override
	protected void onDyngrdSessionsCellButtonClicked(DynamicGridCell cell)
	{
		populateExtendedViewWithFixedSlots((SessionSlotForSessionManagementVoCollection) cell.getValue());

	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		populateLocationCombo();

	}

	@Override
	protected void onLnkreturnToListClick() throws PresentationLogicException
	{
		if (ClinicView == form.getLocalContext().getSelectedTab())
		{
			form.lyrTabs().showtabClinicView();
		}
		else if (AvailabilityView == form.getLocalContext().getSelectedTab())
		{
			form.lyrTabs().showtabAvailabilityView();
		}
		
		form.lyrTabs().tabClinicView().grdSessions().setValue(null);
		form.getLocalContext().setSelectedSession(null);
		updateControlsState();

	}

	@Override
	protected void onCcListOwnerValueChanged() throws PresentationLogicException
	{
		form.lblListOwners().setValue("");
		form.getGlobalContext().Scheduling.setSelectedHCPs(null);

	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getCancelAppConfirmationMessageBoxID() != null && form.getLocalContext().getCancelAppConfirmationMessageBoxID().equals(messageBoxId))//WDEV-19779
		{
			if (DialogResult.YES.equals(result))
			{
				cancelSession(true, domain.getSessionVo(form.getLocalContext().getSelectedSession()));
			}
			updateScreenForRecord(null);

		}
		
		if (form.getLocalContext().getMoveSessionConfirmationMessageBoxID() != null && form.getLocalContext().getMoveSessionConfirmationMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			engine.open(form.getForms().Scheduling.MoveSessionDialog , new Object[] {domain.getSessionShortVo(form.getLocalContext().getSelectedSession())});
		}
	}

	@Override
	protected void onBtnReOpenClick() throws PresentationLogicException
	{
		updateSessionStatus(form.getLocalContext().getSelectedSession(), Session_Status_and_Reason.OPEN);
		//updateScreenForRecord(null);		//wdev20003
		
	}

	@Override
	protected void onChkSelectAllValueChanged() throws PresentationLogicException
	{
		DynamicGridRowCollection rows = form.lyrTabs().tabExtendedView().dyngrdSlots().getRows();
		
		if (rows == null || rows.size() == 0)
			return;
		
		for (int i = 0 ; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
				
			if (row.getValue() instanceof SessionSlotForSessionManagementVo && Status_Reason.SLOTOPENED.equals(((SessionSlotForSessionManagementVo)row.getValue()).getStatus()))
			{
				row.getCells().get(getColumnById(COLUMN_SELECT)).setValue(form.lyrTabs().tabExtendedView().chkSelectAll().getValue());
				
				if (form.lyrTabs().tabExtendedView().chkSelectAll().getValue())
				{
					if (form.getLocalContext().getFixedSlotsSelected() == null)
						form.getLocalContext().setFixedSlotsSelected(new SessionSlotForSessionManagementVoCollection());
				
					form.getLocalContext().getFixedSlotsSelected().add((SessionSlotForSessionManagementVo)row.getValue());
				}
				else
					form.getLocalContext().setFixedSlotsSelected(null);
			}
			else if (row.getValue() instanceof SessionFlexibleSlotForSessionManagementVo && Status_Reason.SLOTOPENED.equals(((SessionFlexibleSlotForSessionManagementVo)row.getValue()).getStatus()))
			{
				row.getCells().get(getColumnById(COLUMN_SELECT)).setValue(form.lyrTabs().tabExtendedView().chkSelectAll().getValue());
				
				if (form.lyrTabs().tabExtendedView().chkSelectAll().getValue())
				{
					if (form.getLocalContext().getFlexibleSlotsSelected() == null)
						form.getLocalContext().setFlexibleSlotsSelected(new SessionFlexibleSlotForSessionManagementVoCollection());
				
					form.getLocalContext().getFlexibleSlotsSelected().add((SessionFlexibleSlotForSessionManagementVo)row.getValue());
				}
				else
					form.getLocalContext().setFlexibleSlotsSelected(null);
			}
		}
		
		updateControlsState();
		
	}

	@Override
	protected void onDyngrdSlotsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
		
	}

	@Override
	protected void onDyngrdSlotsCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getRow().getValue() instanceof SessionSlotForSessionManagementVo)
		{
			if (form.getLocalContext().getFixedSlotsSelected() == null)
				form.getLocalContext().setFixedSlotsSelected(new SessionSlotForSessionManagementVoCollection());

			if (Boolean.TRUE.equals(cell.getValue()))
			{
				form.getLocalContext().getFixedSlotsSelected().add((SessionSlotForSessionManagementVo) cell.getRow().getValue());
			}
			else
				form.getLocalContext().getFixedSlotsSelected().remove((SessionSlotForSessionManagementVo) cell.getRow().getValue());
		}
		else if (cell.getRow().getValue() instanceof SessionFlexibleSlotForSessionManagementVo)
		{
			if (form.getLocalContext().getFlexibleSlotsSelected() == null)
				form.getLocalContext().setFlexibleSlotsSelected(new SessionFlexibleSlotForSessionManagementVoCollection());

			if (Boolean.TRUE.equals(cell.getValue()))
			{
				form.getLocalContext().getFlexibleSlotsSelected().add((SessionFlexibleSlotForSessionManagementVo) cell.getRow().getValue());
			}
			else
				form.getLocalContext().getFlexibleSlotsSelected().remove((SessionFlexibleSlotForSessionManagementVo) cell.getRow().getValue());
		}
		
		updateControlsState();
		
	}
	
	//WDEV-20588
	private void initializeCancelledApptGrid()
	{
		form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().clear();
		form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getRows().clear();
		
		DynamicGridColumn column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("Start Time", COLUMN_CAN_START_TIME);
		
		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("End Time", COLUMN_CAN_END_TIME);
		
		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false); 	
		
		//WDEV-21165
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn(dispIdType.getText(), COLUMN_CAN_PATIENT_IDENTIFIER);
		
		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("Patient", COLUMN_CAN_PATIENT);
		
		column.setWidth(125);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrTabs().tabCancelledAppointments().dynCancelledAppts().getColumns().newColumn("Status", COLUMN_CAN_STATUS);
		
		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);

		
	}

	@Override
	protected void onDynCancelledApptsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		updateControlsState();
		
	}

	//WDEV-23634
	@Override
	protected void onBtnOutpatientDashboardClick() throws PresentationLogicException 
	{
		engine.openDashboard(ConfigFlag.GEN.OUTPATIENT_DASHBOARD_URL.getValue(), null);
	}
}
