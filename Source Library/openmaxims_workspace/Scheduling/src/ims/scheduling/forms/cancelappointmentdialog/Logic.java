//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3084.20071)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.cancelappointmentdialog;

import ims.RefMan.vo.CatsReferralforElectiveListDetailsVo;
import ims.RefMan.vo.PatientElectiveListForCancelAppointmentVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.scheduling.forms.cancelappointmentdialog.GenForm.GroupRebookingRequiredEnumeration;
import ims.scheduling.forms.cancelappointmentdialog.GenForm.grdLinkedApptsRow;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVo;
import ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// WDEV-17897 if boolean parameter passed, check its value, if true
		// this is for cancel session so we don't want cancelled by patient option
		boolean cancelSession=false;
		boolean theatreAppointment = false;
		
		if (args != null && args.length > 0)
		{
			Object value = args[0];
			if (value instanceof Boolean)
				cancelSession=(Boolean) value;
			
			if(args.length > 1)
			{
				Object arg1 = args[1];
				if (arg1 instanceof Boolean)
					theatreAppointment=(Boolean) arg1;
			}
			if( args.length > 2)	//wdev-18713
			{
				Object arg2 = args[2];
				if( arg2 instanceof Boolean)
				{
					form.getLocalContext().setDisableRebook((Boolean) arg2);
				}
			}
		}
		if(form.getGlobalContext().Scheduling.getBookingAppointmentRefIsNotNull())//WDEV-22396
			form.getLocalContext().setTCIForReferralBooking(domain.getLinkedTCI( form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		
		Booking_AppointmentVo voBookingAppt = form.getGlobalContext().Scheduling.getBookingAppointmentRef()!=null ? domain.getBookingAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()) : null; //WDEV-22778
		
		initialize(cancelSession, theatreAppointment, voBookingAppt!=null ? voBookingAppt.getApptStatus() : null); //WDEV-22778
		loadCancellationTypes(cancelSession);
		form.getGlobalContext().Scheduling.setApptCancelStatus(null);
		
		//WDEV-19543
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);
		
		if (!Boolean.TRUE.equals(cancelSession))
		{	
    		populateLinkedAppointmentsGrid(voBookingAppt);
		}
		
		//WDEV-19440
		if (Boolean.FALSE.equals(theatreAppointment) && Boolean.FALSE.equals(cancelSession) && form.getGlobalContext().Scheduling.getBookingAppointmentRefIsNotNull() && domain.isAppointmentMarkedAsDoNotMove(form.getGlobalContext().Scheduling.getBookingAppointmentRef()))
		{
			engine.showMessage("The appointment that you are canceling is marked as 'Do Not Move'!");
		}
		
		form.getLocalContext().setIsTheatreAppointment(theatreAppointment);
		
		//WDEV-20053
		form.grdLinkedAppts().setVisible(!Boolean.TRUE.equals(cancelSession));
		form.lblSelectLinkedAppt().setVisible(!Boolean.TRUE.equals(cancelSession));
		form.lblSelectAll().setVisible(!Boolean.TRUE.equals(cancelSession));
		form.chkSelectAll().setVisible(!Boolean.TRUE.equals(cancelSession));
		form.grdLinkedAppts().setReadOnly(false);
		form.chkSelectAll().setEnabled(form.grdLinkedAppts().getRows().size()>0);
		
		//WDEV-20450
		if(Boolean.TRUE.equals(theatreAppointment))
		{
			form.lblSelectLinkedAppt().setVisible(false);
			form.lblSelectAll().setVisible(false);
			form.grdLinkedAppts().setVisible(false);
			form.chkSelectAll().setVisible(false);
		}
	}
	
	//WDEV-19543
	private void populateLinkedAppointmentsGrid(Booking_AppointmentVo voBookingAppt)
	{
		form.grdLinkedAppts().getRows().clear();
		
		if (voBookingAppt==null || voBookingAppt.getLinkedAppointments()==null || voBookingAppt.getLinkedAppointments().size()==0)
			return;
		
		for (int i=0;i<voBookingAppt.getLinkedAppointments().size();i++)
		{
			addRow(voBookingAppt.getLinkedAppointments().get(i));
		}
	}
	
	//WDEV-19543 //WDEV-20053
	private void addRow(BookingAppointmentForLinkedAppointmentsVo voAppt)
	{
		if (voAppt==null || (voAppt!=null && !Status_Reason.BOOKED.equals(voAppt.getApptStatus())))
			return;
		
		grdLinkedApptsRow row = form.grdLinkedAppts().getRows().newRow();
		
		String dateTimeStr = "";
		if(voAppt.getAppointmentDateIsNotNull())
			dateTimeStr += voAppt.getAppointmentDate().toString() + " ";
		if(voAppt.getApptStartTimeIsNotNull())
			dateTimeStr += voAppt.getApptStartTime().toString();
		
		row.setColDateTime(dateTimeStr);
		row.setTooltipForColDateTime(dateTimeStr);
		
		row.setColService(voAppt.getSessionIsNotNull() && voAppt.getSession().getServiceIsNotNull() ? voAppt.getSession().getService().getServiceName() : null);
		row.setTooltipForColService(voAppt.getSessionIsNotNull() && voAppt.getSession().getServiceIsNotNull() ? voAppt.getSession().getService().getServiceName() : null);
		
		row.setColClinic(voAppt.getSessionIsNotNull() && voAppt.getSession().getSchLocationIsNotNull() ? voAppt.getSession().getSchLocation().getName() : null);
		row.setTooltipForColClinic(voAppt.getSessionIsNotNull() && voAppt.getSession().getSchLocationIsNotNull() ? voAppt.getSession().getSchLocation().getName() : null);
	
		row.setColStatus(voAppt.getApptStatusIsNotNull() ? voAppt.getApptStatus().toString() : null);
		row.setTooltipForColStatus(voAppt.getApptStatusIsNotNull() ? voAppt.getApptStatus().toString() : null);
		
		row.setValue(voAppt);

	}
	
	private void initialize(boolean cancelSession, boolean theatreAppointment, Status_Reason apptStatus)  //WDEV-22778
	{
		//WDEV-17929 hide label and checkbox for rebooking when cancelling a session
		//WDEV-7495 dont allow rebooking if its a C&B Appt
		boolean isCnBAppointment = Boolean.TRUE.equals(form.getGlobalContext().ChooseAndBook.getisCABAppt());

		form.lblRebookingRequred().setVisible(!cancelSession && !isCnBAppointment);
		form.GroupRebookingRequired().setVisible(GroupRebookingRequiredEnumeration.rdoYes, !cancelSession && !isCnBAppointment);
		form.GroupRebookingRequired().setVisible(GroupRebookingRequiredEnumeration.rdoNo, !cancelSession && !isCnBAppointment);
		
		form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoYes, !isCnBAppointment);
		form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoNo, !isCnBAppointment);
		form.txtRebookingMandatory().setVisible(!cancelSession && !isCnBAppointment);
		
		if (cancelSession || isCnBAppointment)
		{
			form.getLocalContext().setDisableRebook(Boolean.TRUE);
//			form.GroupRebookingRequired().setValue(GroupRebookingRequiredEnumeration.rdoNo);
		}
		
		if(form.getGlobalContext().RefMan.getCatsReferralStatusIsNotNull())
			if(form.getGlobalContext().RefMan.getCatsReferralStatus().getReferralStatusIsNotNull()
					&& (form.getGlobalContext().RefMan.getCatsReferralStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER)
						|| form.getGlobalContext().RefMan.getCatsReferralStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE)) )
			{
				form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoYes, false);
				form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoNo, false);
				form.getLocalContext().setDisableRebook(Boolean.TRUE);
				form.txtRebookingMandatory().setVisible(false);
//				form.GroupRebookingRequired().setValue(GroupRebookingRequiredEnumeration.rdoNo);
			}
		
		if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue() && isReferralICPCompleted())
		{
			form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoYes, false);
			form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoNo, false);
			form.txtRebookingMandatory().setVisible(false);
			form.getLocalContext().setDisableRebook(Boolean.TRUE);
//			form.GroupRebookingRequired().setValue(GroupRebookingRequiredEnumeration.rdoNo);
		}
		Boolean hasElectiveList =  Boolean.TRUE.equals(form.getLocalContext().getTCIForReferralBookingIsNotNull());//WDEV-22396
		boolean isElective = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue();
		boolean showTciControls = isElective && theatreAppointment && hasElectiveList && (!Status_Reason.ADMITTED.equals(apptStatus) && !Status_Reason.DISCHARGED.equals(apptStatus)); //WDEV-22778
		
		form.lblCancelTCI().setVisible(showTciControls);//WDEV-18249
		form.chkCancelTCI().setVisible(showTciControls);//WDEV-18249
		form.chkCancelTCI().setValue(false);//WDEV-22772
		
		if (theatreAppointment && form.GroupRebookingRequired().isVisible(GroupRebookingRequiredEnumeration.rdoYes) && form.GroupRebookingRequired().isEnabled(GroupRebookingRequiredEnumeration.rdoYes))
			form.GroupRebookingRequired().setValue(GroupRebookingRequiredEnumeration.rdoYes);
			
		form.chkCancelledForNonMedicalReason().setVisible(showTciControls); //WDEV-22928
		form.lblNonMedicalReason().setVisible(showTciControls); //WDEV-22928
		form.chkCancelledForNonMedicalReason().setEnabled(false);

		//wdev-18419 //WDEV-22845 // WDEV-22982
//		CatsReferralforElectiveListDetailsVo tempVo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
//		if (tempVo != null && tempVo.getJourneyIsNotNull() && tempVo.getJourney().getCurrentClockIsNotNull())
//		{
//			PatientElectiveListForCancelAppointmentVo pateleVo = domain.getPatientElectiveList(tempVo);
//				
//			form.chkCancelledForNonMedicalReason().setVisible(pateleVo != null && pateleVo.getTCIDetailsIsNotNull() && isElective &&theatreAppointment);
//			form.lblNonMedicalReason().setVisible(pateleVo != null && pateleVo.getTCIDetailsIsNotNull() && isElective &&theatreAppointment);				
//		}		
		//---------
		
		//wdev-18713
		form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoYes, !Boolean.TRUE.equals(form.getLocalContext().getDisableRebook()));
		form.GroupRebookingRequired().setEnabled(GroupRebookingRequiredEnumeration.rdoNo, !Boolean.TRUE.equals(form.getLocalContext().getDisableRebook()));
		form.txtRebookingMandatory().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getDisableRebook()));
		//----------
		
		form.getLocalContext().setCancelSession(cancelSession);
		
		if(form.getGlobalContext().Scheduling.getBookingAppointmentRef() != null)
		{
			form.getLocalContext().setIsFirstAppointment(domain.isFirstAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		}
	}
	
	private boolean isReferralICPCompleted()
	{
		Boolean referralICPCompleted = domain.isReferralICPCompleted(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
		return referralICPCompleted!=null && referralICPCompleted.booleanValue();
	}

	private void loadCancellationTypes(boolean cancelSession)
	{
		form.cmbCancellationType().newRow(Status_Reason.HOSPITALCANCELLED, Status_Reason.HOSPITALCANCELLED.getText());
		
		if (cancelSession)
		{
			form.cmbCancellationType().setValue(Status_Reason.HOSPITALCANCELLED);  // only one value so default it in
			loadCancellationReasons();
		}
		else
			form.cmbCancellationType().newRow(Status_Reason.PATIENTCANCELLED, Status_Reason.PATIENTCANCELLED.getText());  // Not cancel session, add the other cancellation type
	}

	private void loadCancellationReasons()
	{
		form.cmbCancellationReason().clear();
		form.chkCancelledForNonMedicalReason().setValue(null);
		CancellationTypeReasonVoCollection collReasons = new CancellationTypeReasonVoCollection();
		if(form.cmbCancellationType().getValue() != null)
		{
			Status_Reason type = form.cmbCancellationType().getValue();
			if(type.equals(Status_Reason.PATIENTCANCELLED))
			{
				if(form.getLocalContext().getPatientCancelledReasons() == null)
				{
					//WDEV-20595
					collReasons = domain.listCancellationReasonByType(Status_Reason.PATIENTCANCELLED, form.getLocalContext().getCancelSession(), form.getLocalContext().getIsTheatreAppointment());
					form.getLocalContext().setPatientCancelledReasons(collReasons);
				}
				else
					collReasons = form.getLocalContext().getPatientCancelledReasons();		
			}
			else if(type.equals(Status_Reason.HOSPITALCANCELLED))
			{
				if(form.getLocalContext().getHospitalCancelledReasons() == null)
				{
					collReasons = domain.listCancellationReasonByType(Status_Reason.HOSPITALCANCELLED, form.getLocalContext().getCancelSession(), form.getLocalContext().getIsTheatreAppointment());
					form.getLocalContext().setHospitalCancelledReasons(collReasons);
				}
				else
					collReasons = form.getLocalContext().getHospitalCancelledReasons();	
			}
		}
		
		if(collReasons != null)
		{
			for(int i=0;i<collReasons.size();i++)
				form.cmbCancellationReason().newRow(collReasons.get(i), collReasons.get(i).getCancellationReason().getText());
			
			if (collReasons.size() == 1)
				form.cmbCancellationReason().setValue(collReasons.get(0));
		}
	}

	protected void onCmbCancellationTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadCancellationReasons();
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onBtnOKClick() throws PresentationLogicException
	{
		
		String[] errors = validateUIRules();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
		voApptStatus.setComment(form.txtComment().getValue());
		voApptStatus.setStatus(Status_Reason.CANCELLED);
		voApptStatus.setStatusReason(form.cmbCancellationType().getValue());
		voApptStatus.setCancellationReason(form.cmbCancellationReason().getValue() != null ? form.cmbCancellationReason().getValue().getCancellationReason() : null);
		voApptStatus.setRebookSelected(GroupRebookingRequiredEnumeration.rdoYes.equals(form.GroupRebookingRequired().getValue()));
		
		voApptStatus.setCancelTCI(form.chkCancelTCI().getValue());
		//WDEV-19445
		voApptStatus.setStatusChangeDateTime(new DateTime()); 
		voApptStatus.setCancelledForNonMedicalReason(form.chkCancelledForNonMedicalReason().getValue());	//wdev-18419
		if (form.chkCancelTCI().getValue() && form.chkCancelledForNonMedicalReason().getValue() && form.getLocalContext().getTCIForReferralBookingIsNotNull())//WDEV-22396
			voApptStatus.setTCIDate(form.getLocalContext().getTCIForReferralBooking().getTCIDate());
		
		//WDEV-19445 -- ends here
		
		String[] arrErrors = validateUI(voApptStatus);
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		form.getGlobalContext().Scheduling.setApptCancelStatus(voApptStatus);
		
		if(!Boolean.TRUE.equals(form.getLocalContext().getCancelSession()) && Boolean.TRUE.equals(form.getLocalContext().getIsFirstAppointment()) && form.getGlobalContext().Scheduling.getBookingAppointmentRef() != null)
		{
			if(Status_Reason.HOSPITALCANCELLED.equals(form.cmbCancellationType().getValue()))
			{
				Integer numProviderCancellations = domain.hasMoreThanOneProviderCancellation(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
    			if(numProviderCancellations != null && numProviderCancellations.intValue() > 0)
    			{
    				form.getLocalContext().setMoreThanOneProviderCancellationsMsgBoxId(engine.showMessage("Selected appointment already has " + numProviderCancellations.intValue() + " Provider Cancellations. Do you want to cancel this appointment with Provider Cancellation?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
    				return;
    			}
			}
		}		
		//WDEV-19543
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(getSelectedAppointments());
		
		engine.close(DialogResult.OK);
	}

	//WDEV-19543
	private BookingAppointmentForLinkedAppointmentsVoCollection getSelectedAppointments()
	{
		BookingAppointmentForLinkedAppointmentsVoCollection collSelecteAppt = new BookingAppointmentForLinkedAppointmentsVoCollection();
    	for (int i=0;i<form.grdLinkedAppts().getRows().size();i++)
    	{
    		if (Boolean.TRUE.equals(form.grdLinkedAppts().getRows().get(i).getColSelect()))
    			collSelecteAppt.add(form.grdLinkedAppts().getRows().get(i).getValue());
    	}
    	
    	return collSelecteAppt;
	}
	
	private String[] validateUIRules()
	{
		ArrayList<String> errorsList = new ArrayList<String>();

		if (!Boolean.TRUE.equals(form.getLocalContext().getDisableRebook()) && GroupRebookingRequiredEnumeration.None.equals(form.GroupRebookingRequired().getValue()))
		{
			errorsList.add("Please select if rebooking is necessary.");
		}

		return errorsList.toArray(new String[errorsList.size()]);
	}

	private String[] validateUI(Appointment_StatusVo voApptStatus)
	{
		if(voApptStatus == null)
			throw new CodingRuntimeException("voApptStatus is null in method validateUI");
		
		ArrayList<String> errors = new ArrayList<String>();
		
		if(voApptStatus.getStatusReason() == null)
			errors.add("Cancellation Type is mandatory");
		if(voApptStatus.getCancellationReason() == null)
			errors.add("Reason is mandatory");
		
		String[] arrStrErrors = (String[])errors.toArray(new String[0]);
		return  arrStrErrors.length > 0 ? arrStrErrors : null;
	}

	//wdev-18419 //WDEV-19445
	protected void onChkCancelTCIValueChanged() throws PresentationLogicException
	{
		if	(!form.chkCancelTCI().getValue())
						form.chkCancelledForNonMedicalReason().setValue(null);		
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if((form.getLocalContext().getMoreThanOneProviderCancellationsMsgBoxId() != null && form.getLocalContext().getMoreThanOneProviderCancellationsMsgBoxId().intValue() == messageBoxId))
		{
			if(DialogResult.YES.equals(result))
			{
				engine.close(DialogResult.OK);
			}
			else
			{
				form.getGlobalContext().Scheduling.setApptCancelStatus(null);
			}
		}
	}

	//WDEV-19543
	@Override
	protected void onChkSelectAllValueChanged() throws PresentationLogicException
	{
		for (int i=0;i<form.grdLinkedAppts().getRows().size(); i++ )
		{
			form.grdLinkedAppts().getRows().get(i).setColSelect(form.chkSelectAll().getValue());
		}
	}

	@Override
	protected void onCmbCancellationReasonValueChanged() throws PresentationLogicException
	{
		boolean nonMedicalReasonSelected = form.cmbCancellationReason().getValue() != null && Boolean.TRUE.equals(form.cmbCancellationReason().getValue().getIsNonMedicalReason());
		//if (Boolean.TRUE.equals(form.getLocalContext().getIsTheatreAppointment()))
		form.chkCancelledForNonMedicalReason().setValue(nonMedicalReasonSelected ? new Boolean(nonMedicalReasonSelected) : null);		
	}
}
