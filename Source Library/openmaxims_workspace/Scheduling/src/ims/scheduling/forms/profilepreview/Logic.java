//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5308.16958)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.profilepreview;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Time;
import ims.scheduling.forms.profilepreview.GenForm.grdActivitiesRow;
import ims.scheduling.vo.ProfileForPreviewVo;
import ims.scheduling.vo.SessionActivityLiteVo;
import ims.scheduling.vo.SessionForSlotsPreviewVo;
import ims.scheduling.vo.SessionParentChildSlotForPreviewVo;
import ims.scheduling.vo.SessionSlotForPreviewVo;
import ims.scheduling.vo.SessionTheatreTCISlotForPreviewVo;
import ims.scheduling.vo.lookups.SchProfileType;
import ims.scheduling.vo.lookups.SchedulingPriority;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String COLUMN_START_TIME          = "0";
	private static final String COLUMN_END_TIME            = "1";
	private static final String COLUMN_TCI_TIME            = "2";
	private static final String COLUMN_DURATION            = "3";
	private static final String COLUMN_ACTIVITY            = "4";
	private static final String COLUMN_PRIORITY            = "5";
	private static final String COLUMN_FUNCTIONS           = "6";
	private static final String COLUMN_SLOT_OWNER          = "7";
	private static final String COLUMN_SLOT_TYPE           = "8";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		form.btnClose().setImage(form.getImages().Core.Remove);
		form.grdActivities().setVisible(false);
	}

	private void open() throws PresentationLogicException
	{
		ProfileForPreviewVo profile = domain.getProfileForPreview(form.getGlobalContext().Scheduling.getProfile());

		showProfileTab(profile);

		form.lblProfileName().setValue(profile.getName() != null ? profile.getName() : "-");
		form.lblLocationName().setValue(profile.getSchLocation() != null && profile.getSchLocation().getName() != null ? profile.getSchLocation().getName() : "-");
		form.lblServiceName().setValue(profile.getService() != null && profile.getService().getServiceName() != null ? profile.getService().getServiceName() : "-");

		Date fromDate = new Date();
		Date toDate = new Date();

		form.dteFrom().setValue(fromDate);
		form.dteTo().setValue(toDate.addDay(28));

		if (form.lyrProfiles().tabFixedSlots().isHeaderVisible())
		{
			initialiseFixedSlotsGrid();
			populateFixedSlotsGrid();

		}
		else if (form.lyrProfiles().tabFlexibleSlots().isHeaderVisible())
		{
			initialiseFlexibleSlotsGrid();
			populateFlexibleSlotsGrid();

		}
		else if (form.lyrProfiles().tabTheatreSlots().isHeaderVisible())
		{
			initialiseTheatreSlotsGrid();
			populateTheatreSlotsGrid();

		}

	}

	private void initialiseTheatreSlotsGrid()
	{
		form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getColumns().clear();
		form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().setSelectable(false);

		DynamicGridColumn column = null;

		if (ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
		{
			column = form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getColumns().newColumn("Start Time", COLUMN_START_TIME);

			column.setWidth(80);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(false);

			column = form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getColumns().newColumn("Duration", COLUMN_DURATION);

			column.setWidth(80);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(false);
		}
		else if (ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
		{
			column = form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getColumns().newColumn("TCI Time", COLUMN_TCI_TIME);

			column.setWidth(80);
			column.setAlignment(Alignment.LEFT);
			column.setReadOnly(true);
			column.setCanGrow(false);
		}

	}

	private void populateTheatreSlotsGrid() throws PresentationLogicException
	{
		form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getRows().clear();

		SessionForSlotsPreviewVo session = null;

		try
		{
			session = domain.getSessionForProfilePreview(form.getGlobalContext().Scheduling.getProfile(), form.dteFrom().getValue().copy(), form.dteTo().getValue().copy());
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException("DomainInterfaceException occurred generating sessions - " + e.getMessage(), e);
		}

		form.getLocalContext().setGeneratedSession(session);
		
		if (session == null)
		{
			engine.showMessage("No Sessions will be generated for this date interval.");
			initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), null);
			return;
		}

		initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), session.getDatesGeneratedFor());
		
		if (ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("Fixed"))
		{
			populateTheatreFixedSlots(session);
		}
		else if (ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
		{
			populateTheatreTCISlots(session);
		}
	}

	private void populateTheatreTCISlots(SessionForSlotsPreviewVo session)
	{
		
		if (session == null || session.getTheatreSlots() == null || session.getTheatreSlots().size() == 0)
			return;

		session.getTheatreSlots().sort(new TheatreTCISlotsComparator(SortOrder.ASCENDING));

		for (int j = 0; j < session.getTheatreSlots().size(); j++)
		{

			SessionTheatreTCISlotForPreviewVo slot = session.getTheatreSlots().get(j);

			DynamicGridRow row = form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getRows().newRow();

			DynamicGridCell cellStartTime = row.getCells().newCell(getColumnById(COLUMN_TCI_TIME), DynamicCellType.STRING);
			cellStartTime.setValue(slot.getToComeInTime() != null ? slot.getToComeInTime().toString() : "");
			cellStartTime.setReadOnly(true);

		}

	}

	private void populateTheatreFixedSlots(SessionForSlotsPreviewVo session)
	{
		
		if (session == null || session.getParentChildSlots() == null || session.getParentChildSlots().size() == 0)
			return;

		session.getParentChildSlots().sort(new FlexibleSlotsComparator(SortOrder.ASCENDING));

		for (int j = 0; j < session.getParentChildSlots().size(); j++)
		{

			SessionParentChildSlotForPreviewVo slot = session.getParentChildSlots().get(j);

			DynamicGridRow row = form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getRows().newRow();

			DynamicGridCell cellStartTime = row.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.STRING);
			cellStartTime.setValue(slot.getStartTime() != null ? slot.getStartTime().toString() : "");
			cellStartTime.setReadOnly(true);

			DynamicGridCell cellDuration = row.getCells().newCell(getColumnById(COLUMN_DURATION), DynamicCellType.STRING);
			cellDuration.setValue(slot.getDuration() != null ? slot.getDuration().toString() : "");
			cellDuration.setReadOnly(true);

		}
	}

	private void initialiseFlexibleSlotsGrid()
	{
		form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().clear();
		form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().setSelectable(false);
		form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().setHeaderHeight(40);

		DynamicGridColumn column = form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().newColumn("Start\nTime", COLUMN_START_TIME);

		column.setWidth(45);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().newColumn("End\nTime", COLUMN_END_TIME);

		column.setWidth(45);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().newColumn("Activity", COLUMN_ACTIVITY);

		column.setWidth(60);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().newColumn("Priority", COLUMN_PRIORITY);

		column.setWidth(80);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true); 
		
		column = form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().newColumn("Slot Owner", COLUMN_SLOT_OWNER);

		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		

	}

	private void populateFlexibleSlotsGrid() throws PresentationLogicException
	{
		form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getRows().clear();
		form.grdActivities().getRows().clear();

		SessionForSlotsPreviewVo session = null;

		try
		{
			session = domain.getSessionForProfilePreview(form.getGlobalContext().Scheduling.getProfile(), form.dteFrom().getValue().copy(), form.dteTo().getValue().copy());
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException("DomainInterfaceException occurred generating sessions - " + e.getMessage(), e);
		}

		form.getLocalContext().setGeneratedSession(session);
		
		if (session == null)
		{
			engine.showMessage("No Sessions will be generated for this date interval.");
			initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), null);
			return;
		}

		initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), session.getDatesGeneratedFor());
		
		//populate session activities
		if (session.getSessionActivities() != null)
		{
			for (int x = 0; x < session.getSessionActivities().size(); x++)
			{
				SessionActivityLiteVo activity = session.getSessionActivities().get(x);

				if (activity == null)
					continue;

				if (Boolean.TRUE.equals(activity.getIsActive()) && activity.getActivity() != null )
				{
					grdActivitiesRow row = form.grdActivities().getRows().newRow(); 
					
					row.setColActivities(activity.getActivity().getName());
				}
			}
		}
		
		if (session.getParentChildSlots() == null || session.getParentChildSlots().size() == 0)
			return;

		session.getParentChildSlots().sort(new FlexibleSlotsComparator(SortOrder.ASCENDING));

		//populate slot details
		for (int j = 0; j < session.getParentChildSlots().size(); j++)
		{

			SessionParentChildSlotForPreviewVo slot = session.getParentChildSlots().get(j);

			DynamicGridRow row = form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getRows().newRow();

			DynamicGridCell cellStartTime = row.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.STRING);
			cellStartTime.setValue(slot.getStartTime() != null ? slot.getStartTime().toString() : "");
			cellStartTime.setReadOnly(true);

			DynamicGridCell cellEndTime = row.getCells().newCell(getColumnById(COLUMN_END_TIME), DynamicCellType.STRING);
			cellEndTime.setReadOnly(true);

			if (slot.getDuration() != null && slot.getStartTime() != null)
			{
				Time endTime = slot.getStartTime().copy();
				endTime.addMinutes(slot.getDuration());

				cellEndTime.setValue(endTime.toString());
			}

			if (slot.getPriority() != null)
			{
				DynamicGridCell cellPriority = row.getCells().newCell(getColumnById(COLUMN_PRIORITY), DynamicCellType.ENUMERATION);
				cellPriority.getItems().newItem(slot.getPriority(), slot.getPriority().getText(), slot.getPriority().getImage());
				cellPriority.setValue(slot.getPriority());
				cellPriority.setTooltip(slot.getPriority().getText());
				cellPriority.setReadOnly(true);
			}
			
			if (SchedulingPriority.URGENT.equals(slot.getPriority()))
			{
				row.setTextColor(Color.Red);
			}
			
			DynamicGridCell cellActivity = row.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.STRING);
			cellActivity.setValue("Open");
			cellActivity.setTooltip("Open");
			cellActivity.setReadOnly(true);
			
			DynamicGridCell cellSlotResponsable = row.getCells().newCell(getColumnById(COLUMN_SLOT_OWNER), DynamicCellType.STRING);
			cellSlotResponsable.setValue(slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null ? slot.getSlotResp().getHcp().getName().toString() : "");
			cellSlotResponsable.setTooltip(cellSlotResponsable.getValue().toString());
			cellActivity.setReadOnly(true);
			
		}

	}

	private void populateFixedSlotsGrid() throws PresentationLogicException
	{
		form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getRows().clear();

		SessionForSlotsPreviewVo session = null;

		try
		{
			session = domain.getSessionForProfilePreview(form.getGlobalContext().Scheduling.getProfile(), form.dteFrom().getValue().copy(), form.dteTo().getValue().copy());
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException("DomainInterfaceException occurred generating sessions - " + e.getMessage(), e);
		}

		form.getLocalContext().setGeneratedSession(session);
		
		if (session == null)
		{
			engine.showMessage("No Sessions will be generated for this date interval.");
			initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), null);
			return;
		}
		
		initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), session.getDatesGeneratedFor());
		
		if (session.getSessionSlots() == null || session.getSessionSlots().size() == 0)
			return;

		session.getSessionSlots().sort(new FixedSlotsComparator(SortOrder.ASCENDING));
		
		StringBuffer functionsForFixedSlots = new StringBuffer();
		
		for (int i = 0; i < session.getSessionSlots().size(); i++)
		{

			functionsForFixedSlots.delete(0, functionsForFixedSlots.length());
			SessionSlotForPreviewVo slot = session.getSessionSlots().get(i);
			
			if (slot.getFunctions() != null)
			{
				for (int j = 0; j < slot.getFunctions().size(); j++)
				{
					ServiceFunctionLiteVo function = slot.getFunctions().get(j);

					if (function == null)
						continue;
					
					if (functionsForFixedSlots.length() > 0)
						functionsForFixedSlots.append(", ");

					functionsForFixedSlots.append(function.getFunction() != null ? function.getFunction().getText() : "");
				}
			}

			DynamicGridRow row = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getRows().newRow();

			DynamicGridCell cellStartTime = row.getCells().newCell(getColumnById(COLUMN_START_TIME), DynamicCellType.STRING);
			cellStartTime.setValue(slot.getStartTm() != null ? slot.getStartTm().toString() : "");
			cellStartTime.setReadOnly(true);

			DynamicGridCell cellEndTime = row.getCells().newCell(getColumnById(COLUMN_END_TIME), DynamicCellType.STRING);
			cellEndTime.setReadOnly(true);

			if (slot.getDuration() != null && slot.getStartTm() != null)
			{
				Time endTime = slot.getStartTm().copy();
				endTime.addMinutes(slot.getDuration());

				cellEndTime.setValue(endTime.toString());
			}

			if (slot.getPriority() != null)
			{
				DynamicGridCell cellPriority = row.getCells().newCell(getColumnById(COLUMN_PRIORITY), DynamicCellType.ENUMERATION);
				cellPriority.getItems().newItem(slot.getPriority(), slot.getPriority().getText(), slot.getPriority().getImage());
				cellPriority.setValue(slot.getPriority());
				cellPriority.setTooltip(slot.getPriority().getText());
				cellPriority.setReadOnly(true);
			}
			
			if (SchedulingPriority.URGENT.equals(slot.getPriority()))
			{
				row.setTextColor(Color.Red);
			}
			
			DynamicGridCell cellActivity = row.getCells().newCell(getColumnById(COLUMN_ACTIVITY), DynamicCellType.STRING);
			cellActivity.setValue(slot.getActivity() != null ? slot.getActivity().getName() : "");
			cellActivity.setTooltip(slot.getActivity() != null ? slot.getActivity().getName() : "");
			cellActivity.setReadOnly(true);
			
			DynamicGridCell cellSlotResponsable = row.getCells().newCell(getColumnById(COLUMN_SLOT_OWNER), DynamicCellType.STRING);
			cellSlotResponsable.setValue(slot.getSlotResp() != null && slot.getSlotResp().getHcp() != null && slot.getSlotResp().getHcp().getName() != null ? slot.getSlotResp().getHcp().getName().toString() : "");
			cellSlotResponsable.setTooltip(cellSlotResponsable.getValue().toString());
			cellActivity.setReadOnly(true);
			
			DynamicGridCell cellFunctions = row.getCells().newCell(getColumnById(COLUMN_FUNCTIONS), DynamicCellType.STRING);
			cellFunctions.setValue(functionsForFixedSlots.toString());
			cellFunctions.setTooltip(functionsForFixedSlots.toString());
			cellFunctions.setReadOnly(true);
			
			DynamicGridCell cellSlotType = row.getCells().newCell(getColumnById(COLUMN_SLOT_TYPE), DynamicCellType.STRING);
			cellSlotType.setValue(slot.getDirectAccessSlot() != null ? slot.getDirectAccessSlot().getText() : "");
			cellSlotType.setTooltip(slot.getDirectAccessSlot() != null ? slot.getDirectAccessSlot().getText() : "");
			cellSlotType.setReadOnly(true);
			
		}
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		if (form.lyrProfiles().tabFixedSlots().isHeaderVisible())
			return form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().getByIdentifier(identifier);
		else if (form.lyrProfiles().tabFlexibleSlots().isHeaderVisible())
			return form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getColumns().getByIdentifier(identifier);
		else
			return form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getColumns().getByIdentifier(identifier);
	}

	private void showProfileTab(ProfileForPreviewVo profile)
	{
		if (profile == null)
			return;

		boolean isFixedProfile = Boolean.TRUE.equals(profile.getIsFixed());
		boolean isTheatreProfile = SchProfileType.THEATRE.equals(profile.getProfileType());

		form.lyrProfiles().tabFixedSlots().setHeaderVisible(isFixedProfile && !isTheatreProfile);
		form.lyrProfiles().tabFlexibleSlots().setHeaderVisible(!isFixedProfile && !isTheatreProfile);
		form.lyrProfiles().tabTheatreSlots().setHeaderVisible(isTheatreProfile);

		if (isFixedProfile && !isTheatreProfile)
		{
			form.lyrProfiles().showtabFixedSlots();
		}

		if (!isFixedProfile && !isTheatreProfile)
		{
			form.lyrProfiles().showtabFlexibleSlots();
		}

		form.grdActivities().setVisible(!isFixedProfile && !isTheatreProfile);
		
		if (isTheatreProfile)
		{
			form.lyrProfiles().showtabTheatreSlots();
		}

	}

	private void initialiseFixedSlotsGrid()
	{
		form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().clear();
		form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().setSelectable(false);
		form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().setHeaderHeight(40);

		DynamicGridColumn column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("Start\nTime", COLUMN_START_TIME);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);

		column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("End\nTime", COLUMN_END_TIME);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		
		column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("Functions", COLUMN_FUNCTIONS);

		column.setWidth(110);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("Activity", COLUMN_ACTIVITY);

		column.setWidth(110);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("Priority", COLUMN_PRIORITY);

		column.setWidth(75);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("Slot Owner", COLUMN_SLOT_OWNER);

		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		
		column = form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getColumns().newColumn("Slot\nType", COLUMN_SLOT_TYPE);

		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);

	}

	private void initialiseCalendar(Date fromDate, Date toDate, Date[] datesGenerated)
	{
		clearBookingCalendar();
		
		while (datesGenerated == null && fromDate.isLessOrEqualThan(toDate))
		{
			form.bookingCalendarFixed().addNoSessionDates(new Date(fromDate));
			fromDate.addDay(1);
		}
		
		while (datesGenerated != null && fromDate.isLessOrEqualThan(toDate))
		{
			boolean dateFound = false;
			
			for (int i = 0; i < datesGenerated.length; i++)
			{
				if (datesGenerated[i] != null && datesGenerated[i].equals(fromDate))
				{
					form.bookingCalendarFixed().setBackColor(new Date(fromDate), Color.Green);
					dateFound = true;
					break;
				}
			}
			
			if (!dateFound)
			{
				form.bookingCalendarFixed().addNoSessionDates(new Date(fromDate));
			}
			
			fromDate.addDay(1);
		}

		form.bookingCalendarFixed().setEnabled(true);

	}

	private void clearBookingCalendar()
	{
		form.bookingCalendarFixed().clearBookedChecks();
		form.bookingCalendarFixed().clearChecks();
		form.bookingCalendarFixed().clearPercentages();
		form.bookingCalendarFixed().clearNoSessionDates();
		form.bookingCalendarFixed().clearNoSlotDates();
		form.bookingCalendarFixed().clearBackColors();
		form.bookingCalendarFixed().setChecksReadOnly(true);
		form.bookingCalendarFixed().setSelectedDay(null);

	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBookingCalendarFixedMonthSelected(Date date) throws PresentationLogicException
	{
		clearBookingCalendar();
		initialiseCalendar(form.dteFrom().getValue().copy(), form.dteTo().getValue().copy(), form.getLocalContext().getGeneratedSession() != null ? form.getLocalContext().getGeneratedSession().getDatesGeneratedFor() : null);
	}

	@Override
	protected void onDteToValueChanged() throws PresentationLogicException
	{
		if (!validateUiRules())
		{
			clearBookingCalendar();

			form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getRows().clear();
			form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getRows().clear();
			form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getRows().clear();

			return;
		}

		if (form.lyrProfiles().tabFixedSlots().isHeaderVisible())
			populateFixedSlotsGrid();
		else if (form.lyrProfiles().tabFlexibleSlots().isHeaderVisible())
			populateFlexibleSlotsGrid();
		else if (form.lyrProfiles().tabTheatreSlots().isHeaderVisible())
			populateTheatreSlotsGrid();

	}

	private boolean validateUiRules()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		if (form.dteFrom().getValue() == null)
		{
			uiErrors.add("From Date is mandatory.");
		}

		if (form.dteTo().getValue() == null)
		{
			uiErrors.add("To Date is mandatory.");
		}

		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			uiErrors.add("From Date cannot be greater than To Date.");
		}

		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);

		if (uiResults != null && uiResults.length > 0)
		{
			engine.showErrors(uiResults);
			return false;
		}

		return true;
	}

	@Override
	protected void onDtefromValueChanged() throws PresentationLogicException
	{
		if (!validateUiRules())
		{
			clearBookingCalendar();

			form.lyrProfiles().tabFixedSlots().dyngrdFixedSlots().getRows().clear();
			form.lyrProfiles().tabFlexibleSlots().dyngrdFlexibleSlots().getRows().clear();
			form.lyrProfiles().tabTheatreSlots().dyngrdTheatreSlots().getRows().clear();

			return;
		}

		if (form.lyrProfiles().tabFixedSlots().isHeaderVisible())
			populateFixedSlotsGrid();
		else if (form.lyrProfiles().tabFlexibleSlots().isHeaderVisible())
			populateFlexibleSlotsGrid();
		else if (form.lyrProfiles().tabTheatreSlots().isHeaderVisible())
			populateTheatreSlotsGrid();

	}

	public class FixedSlotsComparator implements Comparator<SessionSlotForPreviewVo>
	{
		private int direction = 1;

		public FixedSlotsComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public FixedSlotsComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
		}

		public int compare(SessionSlotForPreviewVo ob1, SessionSlotForPreviewVo ob2)
		{

			Time time1 = ob1.getStartTm();
			Time time2 = ob2.getStartTm();

			if (time1 != null)
				return time1.compareTo(time2) * direction;

			if (time2 != null)
				return (-1) * direction;

			return 0;
		}
	}

	public class FlexibleSlotsComparator implements Comparator<SessionParentChildSlotForPreviewVo>
	{
		private int direction = 1;

		public FlexibleSlotsComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public FlexibleSlotsComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
		}

		public int compare(SessionParentChildSlotForPreviewVo ob1, SessionParentChildSlotForPreviewVo ob2)
		{

			Time time1 = ob1.getStartTime();
			Time time2 = ob2.getStartTime();

			if (time1 != null)
				return time1.compareTo(time2) * direction;

			if (time2 != null)
				return (-1) * direction;

			return 0;
		}
	}

	public class TheatreTCISlotsComparator implements Comparator<SessionTheatreTCISlotForPreviewVo>
	{
		private int direction = 1;

		public TheatreTCISlotsComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public TheatreTCISlotsComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
		}

		public int compare(SessionTheatreTCISlotForPreviewVo ob1, SessionTheatreTCISlotForPreviewVo ob2)
		{

			Time time1 = ob1.getToComeInTime();
			Time time2 = ob2.getToComeInTime();

			if (time1 != null)
				return time1.compareTo(time2) * direction;

			if (time2 != null)
				return (-1) * direction;

			return 0;
		}
	}
}
