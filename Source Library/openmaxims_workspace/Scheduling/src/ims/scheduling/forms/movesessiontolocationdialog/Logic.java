//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.movesessiontolocationdialog;

import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.lookups.SchProfileType;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof SessionShortVo)
			{
				form.getLocalContext().setSelectedSession((SessionShortVo) args[0]);
			}
		}
		
		open();
		
	}
	
	private void open()
	{
		
		SessionShortVo voSession = form.getLocalContext().getSelectedSession();
		
		if(voSession != null)
		{
			
			form.getLocalContext().setSessionHospital(domain.getHospitalForCurrentLocation(voSession.getSchLocation()));
			
			form.lblHospitalvalue().setValue(form.getLocalContext().getSessionHospital() != null ? form.getLocalContext().getSessionHospital().getName() : "");
			form.qmbLocation().newRow(voSession.getSchLocation(), voSession.getSchLocation().getName());
			form.qmbLocation().setValue(voSession.getSchLocation());
		}
		
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		String[] arrErrors = validateUiRules();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		} 
		
		try
		{
			domain.moveSessionToLocation(form.getLocalContext().getSelectedSession(), form.qmbLocation().getValue());
		}
		catch (StaleObjectException e)
		{
			form.getLocalContext().setSelectedSession(domain.getSession(form.getLocalContext().getSelectedSession()));
			open();
			return;
		}
		
		engine.close(DialogResult.OK);
	}

	private String[] validateUiRules()
	{
		List<String> errors = new ArrayList<String>();

		boolean differentLocationSelected = form.qmbLocation().getValue() != null && form.getLocalContext().getSelectedSession() != null && form.getLocalContext().getSelectedSession().getSchLocation() != null && !form.qmbLocation().getValue().getID_Location().equals(form.getLocalContext().getSelectedSession().getSchLocation().getID_Location());

		
		if (!differentLocationSelected)
			errors.add("Please select a different Location.");
		
		if (form.qmbLocation().getValue() == null)
			errors.add("Location is mandatory.");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	@Override
	protected void onQmbLocationTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateLocations(value);
	}

	private void populateLocations(String value)
	{
		form.qmbLocation().clear();

		if (value == null || value.length() == 0)
			return;

		LocShortMappingsVoCollection locations = null;
		
		if (form.getLocalContext().getSelectedSession() != null && SchProfileType.THEATRE.equals(form.getLocalContext().getSelectedSession().getSessionProfileType()))
			locations = domain.listActiveTheatreLocationsForHospital(form.getLocalContext().getSessionHospital(), value);
		
		if (locations == null || locations.size() == 0)
			return;

		for (LocShortMappingsVo location : locations)
		{
			if (location == null)
				continue;

			form.qmbLocation().newRow(location, location.getName());
		}

		if (locations.size() == 1)
		{
			form.qmbLocation().setValue(locations.get(0));
		}
		else
		{
			form.qmbLocation().showOpened();
		}
		
	}
	
}
