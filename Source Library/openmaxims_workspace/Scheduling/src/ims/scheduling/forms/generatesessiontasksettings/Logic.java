//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.generatesessiontasksettings;

import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IDynamicFormDataOperations;
import ims.scheduling.forms.generatesessiontasksettings.GenForm.grdSummaryRow;
import ims.scheduling.vo.ProfileGenerationSettingsVo;
import ims.scheduling.vo.ProfileSessionsGeneratedCountVo;

public class Logic extends BaseLogic implements IDynamicFormDataOperations
{
	private static final long serialVersionUID = 1L;

	@Override
	public void saveData() throws Exception
	{
		ProfileGenerationSettingsVo record  = getData();
		
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
			throw new Exception("Validation Errors");
		
		domain.saveConfiguration(record);
		
	}

	@Override
	public String[] validateData()
	{
		return getData().validate();
	}
	
	public void loadData() 
	{
		ProfileGenerationSettingsVo record = domain.getConfiguration(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		form.getLocalContext().setSelectedRecord(record);
		populateScreenFromData(form.getLocalContext().getSelectedRecord());
	}

	private void populateScreenFromData(ProfileGenerationSettingsVo record)
	{
		clear();
		
		if(record == null)
			return;
		
		populateSummaryGrid(record);
		
	}
	public ProfileGenerationSettingsVo getData() 
	{
		ProfileGenerationSettingsVo record = populateJobData(form.getLocalContext().getSelectedRecord());
		
		return record;
	}

	private ProfileGenerationSettingsVo populateJobData(ProfileGenerationSettingsVo selectedRecord)
	{
		if (selectedRecord == null)
			selectedRecord = new ProfileGenerationSettingsVo();
		selectedRecord.setConfiguredJob(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		
		return selectedRecord;
	}

	private void populateSummaryGrid(ProfileGenerationSettingsVo record)
	{
		if (record.getSessionsCount() == null)
			return;
		
		for (int i=0; i<record.getSessionsCount().size();i++)
		{
			ProfileSessionsGeneratedCountVo countVo = record.getSessionsCount().get(i);
			if (countVo == null)
				continue;
			grdSummaryRow newRow = form.grdSummary().getRows().newRow();
			newRow.setColProfile(countVo.getProfileIsNotNull() ? countVo.getProfile().getName() : null);
			newRow.setColNoOfSessions(countVo.getNumberOfSessionsGeneratedIsNotNull() ? countVo.getNumberOfSessionsGenerated().toString() : null);
			if (countVo.getErrorMessageIsNotNull())
			{
				newRow.setColError(form.getImages().Core.Error24);
				newRow.setCellColErrorTooltip(countVo.getErrorMessage());
			}
			newRow.setValue(countVo);			
		}		
	}
	private void clear()
	{
		form.grdSummary().getRows().clear();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		loadData();		
	}
}
