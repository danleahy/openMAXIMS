//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.theatregroup;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.forms.theatregroup.GenForm.grdTheatreGroupsRow;
import ims.scheduling.forms.theatregroup.GenForm.grdTheatreLocationsRow;
import ims.scheduling.vo.TheatreGroupVo;
import ims.scheduling.vo.TheatreGroupVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		boolean isEditMode = FormMode.EDIT.equals(form.getMode());
		
		form.btnNew().setVisible(!isEditMode);
		form.btnEdit().setVisible(!isEditMode && form.grdTheatreGroups().getValue()!=null);
		
		form.getContextMenus().Scheduling.getTheatreGroupMenuEDIT_THEATRE_GROUPItem().setVisible(!isEditMode && form.grdTheatreGroups().getValue()!=null);
		form.getContextMenus().Scheduling.getTheatreGroupMenuNEW_THEATRE_GROUPItem().setVisible(!isEditMode);
		
		form.txtTheatreGroup().setEnabled(isEditMode);
		form.cmbHospital().setEnabled(isEditMode);
		form.chkActive().setEnabled(isEditMode);
		
		form.grdTheatreLocations().setReadOnly(!isEditMode);
		form.grdTheatreLocations().setEnabled(isEditMode);
		form.btnAdd().setEnabled(isEditMode && form.cmbHospital().getValue()!=null);
		form.btnRemove().setEnabled(isEditMode && form.grdTheatreLocations().getSelectedRow()!=null);
		
		form.grdTheatreGroups().setEnabled(!isEditMode);
		form.grdTheatreGroups().setReadOnly(!isEditMode);
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkActiveOnly().setValue(true);
		populateHospitalCombo();
		open();
	}
	
	private void populateHospitalCombo()
	{
		LocationLiteVoCollection voCollHosp = domain.listActiveHospitals();
		form.cmbHospital().clear();
		
		for (int i = 0; voCollHosp!=null && i < voCollHosp.size(); i++)
		{
			form.cmbHospital().newRow(voCollHosp.get(i), voCollHosp.get(i).getName());
		}
	}
	
	@Override
	protected void onBtnRemoveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdTheatreLocations().removeSelectedRow();
		updateControlsState();
	}
	
	@Override
	protected void onBtnAddClick() throws ims.framework.exceptions.PresentationLogicException
	{
		grdTheatreLocationsRow row = form.grdTheatreLocations().getRows().newRow(true);
		row.setReadOnly(false);
		updateControlsState();
	}
	
	@Override
	protected void onGrdTheatreLocationsSelectionChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onGrdTheatreLocationsGridQueryComboBoxTextSubmited(int column, GenForm.grdTheatreLocationsRow row, String text) throws ims.framework.exceptions.PresentationLogicException
	{
		row.setValue(null);
		row.getColTheatreLocation().setValue(null);
		row.getColTheatreLocation().clear();
		
		LocShortVoCollection collTheatreLoc = domain.listTheatreLocations(form.cmbHospital().getValue(), text, form.getLocalContext().getSelectedRecord());
		
		if( collTheatreLoc == null)
			return;
		LocationLiteVoCollection  collTheatreLocFromGrid= getTheatreLocFromGrid();
		collTheatreLoc = removeAddedLocations(collTheatreLoc, collTheatreLocFromGrid);
		
		for (LocShortVo theatreLocation : collTheatreLoc)
		{
			row.getColTheatreLocation().newRow(theatreLocation, theatreLocation.getName());
		}
		
		if (collTheatreLoc.size() == 1)
		{
			row.getColTheatreLocation().setValue(collTheatreLoc.get(0));
		}
		else
		{
			row.getColTheatreLocation().showOpened();
		}
	}
	
	private LocationLiteVoCollection getTheatreLocFromGrid()
	{
		if (form.grdTheatreLocations().getRows().size()==0)
			return null;
		
		LocationLiteVoCollection collLoc=new LocationLiteVoCollection();
		
		for (int i=0;i<form.grdTheatreLocations().getRows().size();i++)
		{
			if (form.grdTheatreLocations().getRows().get(i).getColTheatreLocation().getValue()!=null && form.grdTheatreLocations().getRows().get(i).getColTheatreLocation().getValue() instanceof LocationLiteVo)
			{
				collLoc.add((LocationLiteVo)form.grdTheatreLocations().getRows().get(i).getColTheatreLocation().getValue());
			}
		}
		
		return collLoc;
	}

	private LocShortVoCollection removeAddedLocations(LocShortVoCollection collTheatreLocFromDb, LocationLiteVoCollection collTheatreLocFormGrid)
	{
		for (int i=0; i<collTheatreLocFormGrid.size();i++)
		{
			for (int j=0;collTheatreLocFromDb!=null && j<collTheatreLocFromDb.size();j++)
			{
				if (collTheatreLocFormGrid.get(i).getID_Location().equals(collTheatreLocFromDb.get(j).getID_Location()))
				{
					collTheatreLocFromDb.remove(collTheatreLocFromDb.get(j));
					break;
				}
			}
		}
		
		return collTheatreLocFromDb;
		
	}

	@Override
	protected void onGrdTheatreGroupsSelectionChanged()
	{
		form.getLocalContext().setSelectedRecord(form.grdTheatreGroups().getValue());
		populateInstanceControls(form.getLocalContext().getSelectedRecord());
		updateControlsState();
	}
	
	private void populateInstanceControls(TheatreGroupVo theatreGroup)
	{
		clearInstanceControls();
		
		if (theatreGroup==null)
			return;
		
		form.txtTheatreGroup().setValue(theatreGroup.getTheatreGroupName());
		form.cmbHospital().setValue(theatreGroup.getHospital());
		form.chkActive().setValue(theatreGroup.getIsActive());
		
		for (int i=0; theatreGroup.getTheatreLocations()!=null && i<theatreGroup.getTheatreLocations().size();i++)
		{
			LocationLiteVo theatreLocation = theatreGroup.getTheatreLocations().get(i);
			
			grdTheatreLocationsRow row = form.grdTheatreLocations().getRows().newRow();
			row.getColTheatreLocation().newRow(theatreLocation, theatreLocation.getName());
			row.getColTheatreLocation().setValue(theatreLocation);
			row.setValue(theatreLocation);
		}
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance()
	{
		form.getLocalContext().setSelectedRecord(null);
		form.grdTheatreGroups().setValue(null);
		clearInstanceControls();
		form.chkActive().setValue(true);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
		}
	}
	
	private boolean save()
	{
		TheatreGroupVo theatreGroupToSave=populateDataFromScreen(form.getLocalContext().getSelectedRecord());
		
		String[] errors = theatreGroupToSave.validate();
		
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.save(theatreGroupToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		return true;
	}

	private TheatreGroupVo populateDataFromScreen(TheatreGroupVo theatreGroupToSave)
	{
		if (theatreGroupToSave == null)
			theatreGroupToSave = new TheatreGroupVo();
		else
			theatreGroupToSave = (TheatreGroupVo)theatreGroupToSave.clone();
		
		theatreGroupToSave.setTheatreGroupName(form.txtTheatreGroup().getValue());
		theatreGroupToSave.setHospital(form.cmbHospital().getValue());
		theatreGroupToSave.setIsActive(form.chkActive().getValue());
		theatreGroupToSave.setTheatreLocations(getTheatreLocFromGrid());
		
		return theatreGroupToSave;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onChkAllValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkAll().setValue(true);
		form.chkActiveOnly().setValue(false);
		form.getLocalContext().setSelectedRecord(null);
		
		open();
	}
	
	private void open()
	{
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData()
	{
		populateTheatreGropuGrid();
		populateInstanceControls(form.grdTheatreGroups().getValue());
	}

	private void clearInstanceControls()
	{
		form.txtTheatreGroup().setValue(null);
		form.cmbHospital().setValue(null);
		form.chkActive().setValue(null);
		form.grdTheatreLocations().getRows().clear();
	}

	private void populateTheatreGropuGrid()
	{
		form.grdTheatreGroups().getRows().clear();
		
		TheatreGroupVoCollection collTheatreGroups = domain.listTheatreGroups(form.chkActiveOnly().getValue());
		
		if (collTheatreGroups==null || collTheatreGroups.size()==0)
			return;
		
		for (TheatreGroupVo theatreGroupItem : collTheatreGroups)
		{
			if (theatreGroupItem==null)
				continue;
			
			grdTheatreGroupsRow rowParent = form.grdTheatreGroups().getRows().newRow();
			
			rowParent.setValue(theatreGroupItem);
			rowParent.setColTheatreGroupLocations(theatreGroupItem.getTheatreGroupName());
			rowParent.setTooltipForColTheatreGroupLocations(theatreGroupItem.getTheatreGroupName());
			rowParent.setColHospital(theatreGroupItem.getHospital().getName());
			rowParent.setTooltipForColHospital(theatreGroupItem.getHospital().getName());
			rowParent.setColActive(theatreGroupItem.getIsActive() ? "Y" : "N");
			
			rowParent.setExpanded(true);
			
			for (int i=0; theatreGroupItem.getTheatreLocations()!=null && i<theatreGroupItem.getTheatreLocations().size(); i++ )
			{
				grdTheatreGroupsRow rowChild = rowParent.getRows().newRow();
				rowChild.setColTheatreGroupLocations(theatreGroupItem.getTheatreLocations().get(i).getName());	
				rowChild.setTooltipForColTheatreGroupLocations(theatreGroupItem.getTheatreLocations().get(i).getName());
			}
		}
		
		form.grdTheatreGroups().setValue(form.getLocalContext().getSelectedRecord());
	}

	@Override
	protected void onChkActiveOnlyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkActiveOnly().setValue(true);
		form.chkAll().setValue(false);
		form.getLocalContext().setSelectedRecord(null);
		open();
	}
	
	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getSelectedRecordIsNotNull() && !form.getLocalContext().getSelectedRecord().equals(form.cmbHospital().getValue()))
		{
			form.grdTheatreLocations().getRows().clear();
		}
		
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.TheatreGroupMenu.NEW_THEATRE_GROUP:
				 newInstance();
			break;

			case GenForm.ContextMenus.SchedulingNamespace.TheatreGroupMenu.EDIT_THEATRE_GROUP:
				 form.setMode(FormMode.EDIT);
			break;
		}
	}
}
