//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.profilemaintenance;

import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ServiceFunctionCollection;
import ims.framework.Control;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.forms.profilemaintenance.GenForm.ContextMenus;
import ims.scheduling.forms.profilemaintenance.GenForm.grdProfilesRow;
import ims.scheduling.vo.ProfileForProfileRippleVo;
import ims.scheduling.vo.ProfileShortVo;
import ims.scheduling.vo.ProfileShortVoCollection;
import ims.scheduling.vo.Profile_SlotGenericVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		initialise();
	}
	
	private void initialise()
	{
		populateCmbService();
		populateCmbHospital();
		form.ccListOwner().initialize(MosType.HCP);
	}
	
	private void populateCmbHospital()
	{
		LocationLiteVoCollection voCollHosp = domain.listActiveHospitalsLite();
		form.cmbHospFilter().clear();

		for (int i = 0; i < voCollHosp.size(); i++)
		{
			form.cmbHospFilter().newRow(voCollHosp.get(i), voCollHosp.get(i).getName());
		}
	}
	
	private void populateCmbService()
	{
		ServiceVoCollection voCollServices = domain.listServices();
		form.cmbFilterSpecialty().clear();

		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.cmbFilterSpecialty().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		searchProfiles(false);
	}
	
	@Override
	protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.cmbFilterSpecialty().setValue(null);
		form.cmbHospFilter().setValue(null);
		form.txtName().setValue(null);
		form.ccListOwner().clear();
		form.grdProfiles().getRows().clear();
		form.getLocalContext().setSelectedRecord(null);//WDEV-21641
		
		updateControlState();
	}
	
	private void updateControlState()
	{
		boolean isRowSelected = form.grdProfiles().getValue()!=null;
		
		form.getContextMenus().Scheduling.hideAllProfileMaintenanceMenuItems();
		form.getContextMenus().Scheduling.getProfileMaintenanceADD_SLOTItem().setVisible(isRowSelected && Boolean.TRUE.equals(form.grdProfiles().getValue().getIsFixed()));
		form.getContextMenus().Scheduling.getProfileMaintenanceINACTIVATE_SLOTItem().setVisible(isRowSelected && Boolean.TRUE.equals(form.grdProfiles().getValue().getIsFixed()));
		form.getContextMenus().Scheduling.getProfileMaintenanceUPDATE_LISTOWNERSItem().setVisible(isRowSelected);
		form.getContextMenus().Scheduling.getProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem().setVisible(isRowSelected);
		form.getContextMenus().Scheduling.getProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem().setVisible(isRowSelected); //WDEV-23638
	}

	@Override
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchProfiles(true);
		
		if (form.grdProfiles().getRows().size() == 0)
			engine.showMessage("No matching Profiles found.");
	}
	
	private void searchProfiles(boolean fromBtn)
	{
		form.grdProfiles().getRows().clear();
		form.grdProfiles().setValue(null); //WDEV-21641
		if (fromBtn)
		{	
			form.getLocalContext().setSelectedRecord(null);//WDEV-21641
		}
		
		ProfileShortVoCollection coll = domain.listProfiles(form.txtName().getValue(),(ServiceVo) form.cmbFilterSpecialty().getValue(),form.cmbHospFilter().getValue(), form.ccListOwner().getValue(), true, true);	
		if (coll == null || coll.size() == 0)
		{
			form.grdProfiles().setValue(form.getLocalContext().getSelectedRecord()); //WDEV-21641
			updateControlState(); //WDEV-21641
			return;
		}
		
		for (int i = 0; i < coll.size(); i++)
		{
			ProfileShortVo profile = coll.get(i);
			addRow(profile);
			
		}
		
		form.grdProfiles().setValue(form.getLocalContext().getSelectedRecord()); //WDEV-21641

		updateControlState(); //WDEV-21641
	}

	private void addRow(ProfileShortVo profile)
	{
		if (profile==null)
			return;
		
		grdProfilesRow row;
		row = form.grdProfiles().getRows().newRow();
		row.setValue(profile);
		
		row.setcolEndDate(profile.getEffToIsNotNull() ? profile.getEffTo().toString() : null);
		row.setCellcolEndDateTooltip(profile.getEffToIsNotNull() ? profile.getEffTo().toString() : null);
		row.setcolStartDate(profile.getEffFrmIsNotNull() ? profile.getEffFrm().toString() : null);
		row.setCellcolStartDateTooltip(profile.getEffFrmIsNotNull() ? profile.getEffFrm().toString() : null);
		row.setcolProfileDescription(profile.getDescription());
		row.setCellcolProfileDescriptionTooltip(profile.getDescription());
		row.setcolSpeciality(profile.getServiceIsNotNull() ? profile.getService().getServiceName() : null);
		row.setCellcolSpecialityTooltip(profile.getServiceIsNotNull() ? profile.getService().getServiceName() : null);
		row.setColLastGenerationDate(profile.getLastGenDateIsNotNull() ? profile.getLastGenDate().toString() : null);
		row.setCellColLastGenerationDateTooltip(profile.getLastGenDateIsNotNull() ? profile.getLastGenDate().toString() : null);
	}

	@Override
	protected void onGrdProfilesSelectionChanged()
	{
		form.getLocalContext().setSelectedRecord(form.grdProfiles().getValue());//WDEV-21641
		updateControlState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setProfileForProfileRippleVo(domain.getProfileForProfileRipple(form.grdProfiles().getValue()));
		switch (menuItemID)
		{
			case ContextMenus.SchedulingNamespace.ProfileMaintenance.UPDATE_PROFILE_START_AND_END_TIMES:
				engine.open(form.getForms().Scheduling.UpdateProfileTimes);
			break;

			case ContextMenus.SchedulingNamespace.ProfileMaintenance.UPDATE_LISTOWNERS:
				engine.open(form.getForms().Scheduling.UpdateProfileListOwners);
			break;

			//WDEV-23638
			case ContextMenus.SchedulingNamespace.ProfileMaintenance.UPDATE_PROFILE_NAME_AND_DESCRIPTIOM:
				engine.open(form.getForms().Scheduling.UpdateProfileNameDescription);
			break; 
			
			case ContextMenus.SchedulingNamespace.ProfileMaintenance.INACTIVATE_SLOT:
				engine.open(form.getForms().Scheduling.InactivateProfileSlots);
			break;
			
			case ContextMenus.SchedulingNamespace.ProfileMaintenance.ADD_SLOT:
				form.getGlobalContext().Scheduling.setProfileSlotGeneric(new Profile_SlotGenericVo());
				ServiceFunctionCollection collServiceFunctions = getServiceFunctionsFromProfile(form.getGlobalContext().Scheduling.getProfileForProfileRippleVo());
				form.getGlobalContext().Scheduling.setServiceFunctions(collServiceFunctions != null && collServiceFunctions.size() > 0 ? collServiceFunctions : null);
				openSlotsDialog(form.getGlobalContext().Scheduling.getProfileForProfileRippleVo());
				
			break;
		}
	}
	
	private ims.core.vo.lookups.ServiceFunctionCollection getServiceFunctionsFromProfile(ProfileForProfileRippleVo profile)
	{
		if (profile==null)
		{
			return null;
		}
		
		ServiceFunctionLiteVoCollection voCollServiceFunctions = domain.listServiceFunctionByService(profile.getService());
		ims.core.vo.lookups.ServiceFunctionCollection tempColl = new ServiceFunctionCollection();
		ServiceFunctionCollection collFunctions = profile.getFunction();
		
		for(int i = 0; collFunctions!=null && i < collFunctions.size();i++)
		{
				if( isFunctionInCollection(voCollServiceFunctions,collFunctions.get(i)) == true)			 
						tempColl.add(collFunctions.get(i));			
		}
		
		if( tempColl != null && tempColl.size() == 0)
			tempColl = null;
		
		return tempColl;
	}
	
    private boolean isFunctionInCollection(ServiceFunctionLiteVoCollection voCollServiceFunctions, ims.core.vo.lookups.ServiceFunction tempLkp)
    {
    	if( voCollServiceFunctions == null || voCollServiceFunctions.size() == 0 || tempLkp == null)
    		return false;
    	
    	for(ServiceFunctionLiteVo tempVo : voCollServiceFunctions)
    	{
    		if( tempVo != null && tempVo.getFunctionIsNotNull())
    		{
    			if( tempVo.getFunction().equals(tempLkp))
    				return true;
    		}
    	}
    	
    	return false;
    }
		
	private void openSlotsDialog(ProfileForProfileRippleVo selectedProfile)
	{
		
		form.getGlobalContext().Scheduling.setProfileService(selectedProfile.getService());
		form.getGlobalContext().Scheduling.setProfileStartTime(selectedProfile.getStartTm());
		form.getGlobalContext().Scheduling.setProfileEndTime(selectedProfile.getEndTm());
		form.getGlobalContext().Scheduling.setListOwnerCollection(selectedProfile.getListOwners());
		form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(selectedProfile.getDirectoryOfServices());

		boolean isFlexibleProfile = Boolean.FALSE.equals(selectedProfile.getIsFixed());
		engine.open(form.getForms().Scheduling.ProfilesSlotGeneric,new Object[] {selectedProfile.getHospital(),isFlexibleProfile, selectedProfile.getHasChooseBookActivity()});	
	}
}
