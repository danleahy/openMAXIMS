//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.profilemaintenance;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbHospFilterComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFilterSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceShortVo getValue()
		{
			return (ims.core.vo.ServiceShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdProfilesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProfilesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolSpecialityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolSpecialityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolSpecialityOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolSpeciality()
		{
			return (String)super.row.get(0);
		}
		public void setcolSpeciality(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolSpecialityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolProfileDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolProfileDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolProfileDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolProfileDescription()
		{
			return (String)super.row.get(1);
		}
		public void setcolProfileDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolProfileDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolStartDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolStartDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolStartDate()
		{
			return (String)super.row.get(2);
		}
		public void setcolStartDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolStartDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolEndDateReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolEndDateOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolEndDate()
		{
			return (String)super.row.get(3);
		}
		public void setcolEndDate(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolEndDateTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColLastGenerationDateReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColLastGenerationDateReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColLastGenerationDateOpened()
		{
			super.row.showOpened(4);
		}
		public String getColLastGenerationDate()
		{
			return (String)super.row.get(4);
		}
		public void setColLastGenerationDate(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColLastGenerationDateTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.scheduling.vo.ProfileShortVo getValue()
		{
			return (ims.scheduling.vo.ProfileShortVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProfilesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProfilesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProfilesRow get(int index)
		{
			return new grdProfilesRow(super.collection.get(index));
		}
		public grdProfilesRow newRow()
		{
			return new grdProfilesRow(super.collection.newRow());
		}
		public grdProfilesRow newRow(boolean autoSelect)
		{
			return new grdProfilesRow(super.collection.newRow(autoSelect));
		}
		public grdProfilesRow newRowAt(int index)
		{
			return new grdProfilesRow(super.collection.newRowAt(index));
		}
		public grdProfilesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProfilesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProfilesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.ProfileShortVoCollection getValues()
		{
			ims.scheduling.vo.ProfileShortVoCollection listOfValues = new ims.scheduling.vo.ProfileShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.ProfileShortVo getValue()
		{
			return (ims.scheduling.vo.ProfileShortVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdProfilesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProfilesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProfilesRowCollection getRows()
		{
			return new grdProfilesRowCollection(super.grid.getRows());
		}
		public grdProfilesRow getRowByValue(ims.scheduling.vo.ProfileShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProfilesRow(row);
		}
		public void setcolSpecialityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolSpecialityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolProfileDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolProfileDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColLastGenerationDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColLastGenerationDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(70);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuProfileMaintenance = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem = factory.createMenuItem(startControlID.intValue() + 1, "Update Profile Start and End Times", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6400001)))
			contextMenus.Scheduling.contextMenuProfileMaintenance.add(contextMenus.Scheduling.contextMenuProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem);
		contextMenus.Scheduling.contextMenuProfileMaintenanceUPDATE_LISTOWNERSItem = factory.createMenuItem(startControlID.intValue() + 2, "Add/Update List Owner(s)", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6400002)))
			contextMenus.Scheduling.contextMenuProfileMaintenance.add(contextMenus.Scheduling.contextMenuProfileMaintenanceUPDATE_LISTOWNERSItem);
		contextMenus.Scheduling.contextMenuProfileMaintenanceINACTIVATE_SLOTItem = factory.createMenuItem(startControlID.intValue() + 3, "Inactivate Slot", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6400003)))
			contextMenus.Scheduling.contextMenuProfileMaintenance.add(contextMenus.Scheduling.contextMenuProfileMaintenanceINACTIVATE_SLOTItem);
		contextMenus.Scheduling.contextMenuProfileMaintenanceADD_SLOTItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Slot ", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6400004)))
			contextMenus.Scheduling.contextMenuProfileMaintenance.add(contextMenus.Scheduling.contextMenuProfileMaintenanceADD_SLOTItem);
		contextMenus.Scheduling.contextMenuProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem = factory.createMenuItem(startControlID.intValue() + 5, "Update Profile Name and Description", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6400005)))
			contextMenus.Scheduling.contextMenuProfileMaintenance.add(contextMenus.Scheduling.contextMenuProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuProfileMaintenance);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 480, 41, 288, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccListOwnerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(480), new Integer(41), new Integer(288), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccListOwnerForm, instance1 } );
		ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccListOwnerForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccListOwnerControl);
		Menu[] menus1 = m_ccListOwnerForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 411, 43, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 15, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 411, 15, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 68, 13, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 480, 13, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospFilterTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospFilterTemp);
		cmbHospFilterComboBox cmbHospFilter = (cmbHospFilterComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospFilterComboBox.class, m_cmbHospFilterTemp);
		super.addComboBox(cmbHospFilter);
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 68, 41, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFilterSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFilterSpecialtyTemp);
		cmbFilterSpecialtyComboBox cmbFilterSpecialty = (cmbFilterSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFilterSpecialtyComboBox.class, m_cmbFilterSpecialtyTemp);
		super.addComboBox(cmbFilterSpecialty);

		// Grid Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdProfilesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuProfileMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.FALSE});
		addControl(m_grdProfilesTemp);
		grdProfilesGrid grdProfiles = (grdProfilesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProfilesGrid.class, m_grdProfilesTemp);
		grdProfiles.addStringColumn("Service", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("Profile Description", 0, 0, 330, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("Start Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("End Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProfiles.addStringColumn("Last Generation Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProfiles);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 800, 7, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 764, 7, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for profiles matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccListOwner()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccListOwnerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccListOwnerVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccListOwnerVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccListOwnerEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccListOwnerEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(5);
	}
	public cmbHospFilterComboBox cmbHospFilter()
	{
		return (cmbHospFilterComboBox)super.getComboBox(0);
	}
	public cmbFilterSpecialtyComboBox cmbFilterSpecialty()
	{
		return (cmbFilterSpecialtyComboBox)super.getComboBox(1);
	}
	public grdProfilesGrid grdProfiles()
	{
		return (grdProfilesGrid)super.getGrid(0);
	}
	public ImageButton btnClear()
	{
		return (ImageButton)super.getControl(9);
	}
	public ImageButton btnSearch()
	{
		return (ImageButton)super.getControl(10);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				ProfilesSlotGeneric = new LocalFormName(114154);
				InactivateProfileSlots = new LocalFormName(114137);
				UpdateProfileListOwners = new LocalFormName(114136);
				UpdateProfileTimes = new LocalFormName(114135);
				UpdateProfileNameDescription = new LocalFormName(114141);
			}
			public final FormName ProfilesSlotGeneric;
			public final FormName InactivateProfileSlots;
			public final FormName UpdateProfileListOwners;
			public final FormName UpdateProfileTimes;
			public final FormName UpdateProfileNameDescription;
		}

		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Copy = new ImageHelper(102222, "Images/Core/Copy.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Add;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Copy;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentProfile = new ims.framework.ContextVariable("CurrentProfile", prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier + "");
			cxl_profilesList = new ims.framework.ContextVariable("profilesList", prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__profilesList_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
		}
		
		public boolean getCurrentProfileIsNotNull()
		{
			return !cxl_CurrentProfile.getValueIsNull(context);
		}
		public ims.scheduling.vo.ProfileForProfileRippleVo getCurrentProfile()
		{
			return (ims.scheduling.vo.ProfileForProfileRippleVo)cxl_CurrentProfile.getValue(context);
		}
		public void setCurrentProfile(ims.scheduling.vo.ProfileForProfileRippleVo value)
		{
			cxl_CurrentProfile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentProfile = null;
		public boolean getprofilesListIsNotNull()
		{
			return !cxl_profilesList.getValueIsNull(context);
		}
		public ims.scheduling.vo.ProfileShortVoCollection getprofilesList()
		{
			return (ims.scheduling.vo.ProfileShortVoCollection)cxl_profilesList.getValue(context);
		}
		public void setprofilesList(ims.scheduling.vo.ProfileShortVoCollection value)
		{
			cxl_profilesList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_profilesList = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.scheduling.vo.ProfileShortVo getSelectedRecord()
		{
			return (ims.scheduling.vo.ProfileShortVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.scheduling.vo.ProfileShortVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ProfileMaintenance implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int UPDATE_PROFILE_START_AND_END_TIMES = 1;
				public static final int UPDATE_LISTOWNERS = 2;
				public static final int INACTIVATE_SLOT = 3;
				public static final int ADD_SLOT = 4;
				public static final int UPDATE_PROFILE_NAME_AND_DESCRIPTIOM = 5;
			}
			public void disableAllProfileMaintenanceMenuItems()
			{
				this.contextMenuProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem.setEnabled(false);
				this.contextMenuProfileMaintenanceUPDATE_LISTOWNERSItem.setEnabled(false);
				this.contextMenuProfileMaintenanceINACTIVATE_SLOTItem.setEnabled(false);
				this.contextMenuProfileMaintenanceADD_SLOTItem.setEnabled(false);
				this.contextMenuProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem.setEnabled(false);
			}
			public void hideAllProfileMaintenanceMenuItems()
			{
				this.contextMenuProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem.setVisible(false);
				this.contextMenuProfileMaintenanceUPDATE_LISTOWNERSItem.setVisible(false);
				this.contextMenuProfileMaintenanceINACTIVATE_SLOTItem.setVisible(false);
				this.contextMenuProfileMaintenanceADD_SLOTItem.setVisible(false);
				this.contextMenuProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem.setVisible(false);
			}
			private Menu contextMenuProfileMaintenance;
			public ReadOnlyMenuItem getProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem()
			{
				return this.contextMenuProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem;
			}
			private MenuItem contextMenuProfileMaintenanceUPDATE_PROFILE_START_AND_END_TIMESItem;
			public ReadOnlyMenuItem getProfileMaintenanceUPDATE_LISTOWNERSItem()
			{
				return this.contextMenuProfileMaintenanceUPDATE_LISTOWNERSItem;
			}
			private MenuItem contextMenuProfileMaintenanceUPDATE_LISTOWNERSItem;
			public ReadOnlyMenuItem getProfileMaintenanceINACTIVATE_SLOTItem()
			{
				return this.contextMenuProfileMaintenanceINACTIVATE_SLOTItem;
			}
			private MenuItem contextMenuProfileMaintenanceINACTIVATE_SLOTItem;
			public ReadOnlyMenuItem getProfileMaintenanceADD_SLOTItem()
			{
				return this.contextMenuProfileMaintenanceADD_SLOTItem;
			}
			private MenuItem contextMenuProfileMaintenanceADD_SLOTItem;
			public ReadOnlyMenuItem getProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem()
			{
				return this.contextMenuProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem;
			}
			private MenuItem contextMenuProfileMaintenanceUPDATE_PROFILE_NAME_AND_DESCRIPTIOMItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[204];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-ID", "ID_Sch_Profile");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-DESCRIPTION", "Description");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-PRFCATEGORY", "PrfCategory");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-PRFTYPE", "Prftype");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-EFFFRM", "EffFrm");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-EFFTO", "EffTo");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-ISACTIVE", "IsActive");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-LASTACTUALGENDATE", "LastActualGenDate");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-LASTGENDATE", "LastGenDate");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-AUTOGENERATEPERIOD", "AutoGeneratePeriod");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-READYTOGENERATE", "ReadyToGenerate");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-ISFIXED", "IsFixed");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-SCHLOCATION", "SchLocation");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-STARTTM", "StartTm");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-ENDTM", "EndTm");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-PROFILETYPE", "ProfileType");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileForProfileRippleVo", "BO-1005100001-HASCHOOSEBOOKACTIVITY", "HasChooseBookActivity");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-ID", "ID_Profile_Slot");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-STARTTM", "StartTm");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-DURATION", "Duration");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-PRIORITY", "Priority");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-NUMBERSLOTSREQ", "NumberSlotsReq");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-NOOFINSTANCES", "NoOfInstances");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-DEALLOCNOOFDAYS", "DeallocNoOfDays");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-ISACTIVE", "IsActive");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-DIRECTACCESSSLOT", "Type");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileSlotGeneric", "BO-1055100000-ENDTIME", "EndTime");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ProfileService", "BO-1003100032-ID", "ID_Service");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ID", "ID_Sch_Profile");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-NAME", "Name");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-DESCRIPTION", "Description");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-PRFCATEGORY", "PrfCategory");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-PRFTYPE", "Prftype");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-EFFFRM", "EffFrm");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-EFFTO", "EffTo");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISACTIVE", "IsActive");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-LASTACTUALGENDATE", "LastActualGenDate");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-LASTGENDATE", "LastGenDate");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-AUTOGENERATEPERIOD", "AutoGeneratePeriod");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-READYTOGENERATE", "ReadyToGenerate");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ISFIXED", "IsFixed");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-SCHLOCATION", "SchLocation");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-STARTTM", "StartTm");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-ENDTM", "EndTm");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-PROFILETYPE", "ProfileType");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__CurrentProfile_" + componentIdentifier, "BO-1005100001-HASCHOOSEBOOKACTIVITY", "HasChooseBookActivity");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-ID", "ID_Sch_Profile");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-NAME", "Name");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-DESCRIPTION", "Description");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-PRFCATEGORY", "PrfCategory");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-PRFTYPE", "Prftype");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-EFFFRM", "EffFrm");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-EFFTO", "EffTo");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-ISACTIVE", "IsActive");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-LASTACTUALGENDATE", "LastActualGenDate");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-LASTGENDATE", "LastGenDate");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-AUTOGENERATEPERIOD", "AutoGeneratePeriod");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-READYTOGENERATE", "ReadyToGenerate");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ProfileMaintenance.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1005100001-ISFIXED", "IsFixed");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
