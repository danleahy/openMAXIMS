//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3324.26668)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.appointmentoutcomedialog;


import ims.admin.vo.AppointmentOutcomeConfigVo;
import ims.admin.vo.AppointmentOutcomeConfigVoCollection;
import ims.admin.vo.AppointmentOutcomeReasonVo;
import ims.admin.vo.AppointmentOutcomeReasonVoCollection;
import ims.admin.vo.MenuActionVo;
import ims.admin.vo.enums.CommitMode;
import ims.RefMan.vo.CatsReferralForRequestServiceVo;
import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.CatsReferralParentVo;
import ims.RefMan.vo.InterProviderTransferOutVo;
import ims.RefMan.vo.LinkedCatsReferralForOutcomeVoCollection;
import ims.RefMan.vo.PatientDiagnosisForAppointmentOutcomeVo;
import ims.RefMan.vo.PatientDiagnosisForAppointmentOutcomeVoCollection;
import ims.RefMan.vo.PatientElectiveListAddLaterVo;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.enums.ReferralAppointmentOutcomeAction;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.pathways.configuration.vo.RTTStatusPointRefVo;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.scheduling.domain.impl.AppointmentOutcomeDialogImpl;
import ims.scheduling.forms.appointmentoutcomedialog.GenForm.grdDiagnosisRow;
import ims.scheduling.forms.appointmentoutcomedialog.GenForm.grdProceduresRow;
import ims.scheduling.vo.AppointmentOutcomeActionVo;
import ims.scheduling.vo.AppointmentOutcomeActionVoCollection;
import ims.scheduling.vo.Appointment_StatusForAppointmentOutcomeVo;
import ims.scheduling.vo.Appointment_StatusForAppointmentOutcomeVoCollection;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.enums.AppointmentOutcomeAction;
import ims.scheduling.vo.enums.AppointmentOutcomeDialogUserAction;
import ims.scheduling.vo.lookups.AppointmentAction;
import ims.scheduling.vo.lookups.ApptOutcome;
import ims.scheduling.vo.lookups.OutcomeAction;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String MESSAGE_UNDO_OUTCOME_NOT_LAST_CLOCK_IMPACT = "The Clock and the RTT Status for Patient Journey were not rolled back as clock state and RTT Status have been changed since the Appointment Outcome was recorded.";

	private static final String RIE_WARNING_MESSAGE = "Are you sure you wish to record in error this appointment outcome and all associated actions (Please ensure you review all appointments and elective list entries if you proceed) ?";
	private static final String UNDO_WARNING_MESSAGE = "Are you sure you wish to undo the appointment outcome and retain the current appointment outcome actions (Please ensure you review all appointments and elective list entries if you proceed) ?";
	
	private static final int RIE_OUTCOME_ACTIONS = 6410001;
	private static final int UNDO_OUTOMCE_RETAIN_ACTION = 6410002;


	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Load selected appointment 
		form.getLocalContext().setAppointment(domain.getBookingAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));	
		
		// wdev-19933
		form.getLocalContext().setChildCatsReferralForTransferOfCare(domain.getChildReferralForTransferOfCareVo(form.getGlobalContext().RefMan.getCatsReferral()));

		// Initialized the form
		initialise(args, form.getLocalContext().getAppointment());
		
		// Present the screen to user
		open(form.getLocalContext().getFormMode());
	}

	

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state based on CUSTOM Form Mode
		updateControlsState(form.getLocalContext().getFormMode());
	}

	

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// DIALOG CLOSED - RefMan.ElectiveListAddLaterDialog 
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getForms().RefMan.ElectiveListAddLaterDialog.equals(formName))
		{
			CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferral(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
			
			if (catsReferral != null)
			{
				form.lblReferralUrgencyShownHere().setValue(catsReferral.getUrgency() != null ? catsReferral.getUrgency().getText() : null);
			}
			
			if (DialogResult.OK.equals(result))
			{
				PatientElectiveListAddLaterVo electiveListLater = form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo();
				if (electiveListLater == null)
					return;
				
				if (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(electiveListLater.getElectiveAdmissionType())
						|| ElectiveAdmissionType.BOOKED_TYPE12.equals(electiveListLater.getElectiveAdmissionType()))
				{
					addAction(AppointmentAction.WAITING_LIST_ACTION, electiveListLater);
				}
				else if (ElectiveAdmissionType.PLANNED_TYPE13.equals(electiveListLater.getElectiveAdmissionType()))
				{
					addAction(AppointmentAction.PLANNED_LIST_ACTION, electiveListLater);
				}
			}
			else if (DialogResult.CONFIRM.equals(result))
			{
				PatientElectiveListAddLaterVo electiveListLater = form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo();
				
				if (electiveListLater == null)
					return;
				
				if (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(electiveListLater.getElectiveAdmissionType())
						|| ElectiveAdmissionType.BOOKED_TYPE12.equals(electiveListLater.getElectiveAdmissionType()))
				{
					removeAction(AppointmentAction.WAITING_LIST_ACTION);
				}
				
				if (ElectiveAdmissionType.PLANNED_TYPE13.equals(electiveListLater.getElectiveAdmissionType()))
				{
					removeAction(AppointmentAction.PLANNED_LIST_ACTION);
				}
			}
			else if( DialogResult.ABORT.equals(result))			//wdev-21151 - case for RIE button from Waiting List Card dialog 
			{
				open(form.getLocalContext().getFormMode());
			}
		}
		
		// DIALOG CLOSED - Scheduling.FutureAppointmentDetails
		else if(form.getForms().Scheduling.FutureAppointmentDetails.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				FutureAppointmentDetailsVo futureAppointment = form.getGlobalContext().Scheduling.getFutureAppointmentDetails();
				addAction(AppointmentAction.BOOK_APPT_ACTION, futureAppointment);
			}
			else if (DialogResult.CONFIRM.equals(result))
			{
				removeAction(AppointmentAction.BOOK_APPT_ACTION);
			}
		}
		
		// DIALOG CLOSED - RefMan.CatsReferralRequestServiceDlg
		else if (form.getForms().RefMan.CatsReferralRequestServiceDlg.equals(formName))
		{
			if (result.equals(DialogResult.OK))
			{
				LinkedCatsReferralForOutcomeVoCollection serviceRequests = form.getGlobalContext().RefMan.getReferralServiceRequests();
				// TEST: If all the request for service for appointment were RIE this should remove the action
				if (serviceRequests == null || serviceRequests.size() == 0)
				{
					removeAction(AppointmentAction.REQUEST_FOR_SERVICE_ACTION);
					updateControlsState(form.getLocalContext().getFormMode());
					return;
				}

				addAction(AppointmentAction.REQUEST_FOR_SERVICE_ACTION, serviceRequests);
			}
		}
		
		else if (form.getForms().RefMan.AppointmentOutcomeProcedureDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome() != null 
					&& Boolean.TRUE.equals(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome().getIsPrimary()))
			{
				uncheckPreviousPrimary();
			}
			
			if(Boolean.TRUE.equals(form.getLocalContext().getEditProcedure()))
			{
				addPatientProcedureRow(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome(), form.grdProcedures().getSelectedRow());
			}
			else
			{
				if(!procedureAlreadyExist(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome()))//WDEV-21340
					addPatientProcedureRow(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome(), null);
				else
					engine.showMessage("Procedure has already been recorded for this outcome.");
			}
		}
		else if (form.getForms().RefMan.AppointmentOutcomeDiagnosisDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getEditDiagnosis()))
			{
				addPatientDiagnosisRow(form.getGlobalContext().RefMan.getSelectedOutcomePatientDiagnosis(), form.grdDiagnosis().getSelectedRow());
			}
			else
			{
				addPatientDiagnosisRow(form.getGlobalContext().RefMan.getSelectedOutcomePatientDiagnosis(), null);
			}
		}
		else if (form.getForms().RefMan.AppointmentOutcomeDiagnosisSelectionDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			addSelectedPatientDiagnosis();
		}
		//WDEV-19574
		else if (form.getForms().RefMan.AppointmentOutcomeProcedureSelectionDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			addSelectedPatientProcedures();
		}
		else if (form.getForms().RefMan.TransferOfCare.equals(formName) ) //WDEV-21195
		{
			if (result.equals(DialogResult.OK))
			{
				CatsReferralForRequestServiceVo childcatsReferral = form.getGlobalContext().RefMan.getChildCatsReferral();
				if (childcatsReferral == null)
				{
					form.getLocalContext().setParentCatsReferral(null);
					return;
				}
				addAction(AppointmentAction.TRANSFER_OF_CARE, childcatsReferral);//WDEV-20799
									
				form.getGlobalContext().RefMan.setChildCatsReferral(null);			
			}
			else if (DialogResult.CONFIRM.equals(result))
			{
				CatsReferralForRequestServiceVo childcatsReferral = form.getGlobalContext().RefMan.getChildCatsReferral();
				
				if (childcatsReferral == null)
					return;
				
				removeAction(AppointmentAction.TRANSFER_OF_CARE);
				form.getGlobalContext().RefMan.setChildCatsReferral(null);
				
				
			}
			else if (result.equals(DialogResult.CANCEL) && form.getLocalContext().getAppointment()==null)
			{
				
				form.getGlobalContext().RefMan.setChildCatsReferral(null);
				//form.getLocalContext().setParentCatsReferral(null);
			}
			
			form.getLocalContext().setParentCatsReferral(domain.getParentCatsReferrall(form.getLocalContext().getAppointment()));			
		}
		//WDEV-20903
		else if (form.getForms().Scheduling.InterProviderTransferOutDialog.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				InterProviderTransferOutVo interProviderTransferOut = form.getGlobalContext().Scheduling.getInterProviderTransferOut();
				addAction(AppointmentAction.TRANSFER_ACTION, interProviderTransferOut);		//wdev-19930 //WDEV-20799
			}
			else if (DialogResult.CONFIRM.equals(result))
			{
				removeAction(AppointmentAction.TRANSFER_ACTION);
			}
		}
		
		updateControlsState(form.getLocalContext().getFormMode());
	}
	
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		// RIE Appointment Outcome and associated actions
		if (form.getLocalContext().getMessageBox_RIE_Confirmation() != null && form.getLocalContext().getMessageBox_RIE_Confirmation().equals(messageBoxId))
		{
			// Clear local context marker
			form.getLocalContext().setMessageBox_RIE_Confirmation(null);

			// If user confirmed and the RIE operation was successful then close the AppointmentOutcomeDialog
			if (DialogResult.YES.equals(result) && performRIE_AppointmentOutcomeAndAssociatedActions())
			{
				engine.close(DialogResult.OK);
				return;
			}
		}
		// UNDO Appointment Outcome, retain associated actions
		else if (form.getLocalContext().getMessageBox_UndoOutcome_Confirmation() != null && form.getLocalContext().getMessageBox_UndoOutcome_Confirmation().equals(messageBoxId))
		{
			// Clear local context marker
			form.getLocalContext().setMessageBox_UndoOutcome_Confirmation(null);
			
			// If user confirmed and the Undo Outcome operation was successful then close the AppointmentOutcomeDialog
			if (DialogResult.YES.equals(result))
			{
				  performUndo_AppointmentOutcomeAndAssociatedActions();
			}
		}
		// DNA the appointment
		else if (form.getLocalContext().getMessageBox_DNA_Confimation() != null && form.getLocalContext().getMessageBox_DNA_Confimation().equals(messageBoxId))
		{
			// Clear local context marker
			form.getLocalContext().setMessageBox_DNA_Confimation(null);
			
			// If user chooses to proceed & DNA operation completes successful then close the AppointmentOutcomeDialog
			// User also has the option to CANCEL the operation in which case do nothing
			if ((DialogResult.YES.equals(result) || DialogResult.NO.equals(result)) &&  saveAppointmentOutcomeDNA_NotSeen(DialogResult.YES.equals(result)))
			{
				engine.close(DialogResult.OK);
				return;
			}
		}
	}


	@Override
	protected void onBtnMarkSeenClick() throws PresentationLogicException
	{
		form.getLocalContext().setFormMode(AppointmentOutcomeAction.SEEN);
		form.lblApptStatusText().setValue(Status_Reason.SEEN.getText());
		form.timSeen().setValue(new Time());
		
		CatsReferralParentVo parentCatsReferral = form.getLocalContext().getParentCatsReferral();
		RTTStatusPointRefVo rttStatusPoint = parentCatsReferral != null && parentCatsReferral.getCurrentRTTStatus() != null ? parentCatsReferral.getCurrentRTTStatus().getRTTStatus() : null;
		bindAppointmentOutcomes(Status_Reason.SEEN, rttStatusPoint);
		
		//WDEV-20717
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		if (hcpUser != null)
		{
			form.qmbSeenBy().newRow(hcpUser, hcpUser.getIMosName());
			form.qmbSeenBy().setValue(hcpUser);
		}
		
		//form.ccSeenBy().setValue(getHcpForAppointmentClinic(form.getLocalContext().getAppointment())); //WDEV-20164 NPE fixed
		updateControlsState(form.getLocalContext().getFormMode());
	}

	
	@Override
	protected void onBtnMarkNotSeenClick() throws PresentationLogicException
	{
		form.getLocalContext().setFormMode(AppointmentOutcomeAction.NOT_SEEN);
		form.lblApptStatusText().setValue(Status_Reason.NOT_SEEN.getText());
		
		CatsReferralParentVo parentCatsReferral = form.getLocalContext().getParentCatsReferral();
		RTTStatusPointRefVo rttStatusPoint = parentCatsReferral != null && parentCatsReferral.getCurrentRTTStatus() != null ? parentCatsReferral.getCurrentRTTStatus().getRTTStatus() : null;
		bindAppointmentOutcomes(Status_Reason.NOT_SEEN, rttStatusPoint);
		
		updateControlsState(form.getLocalContext().getFormMode());
	}

	
	@Override
	protected void onBtnMarkDNAClick() throws PresentationLogicException
	{
		form.getLocalContext().setFormMode(AppointmentOutcomeAction.DNA);
		form.lblApptStatusText().setValue(Status_Reason.DNA.getText());
		
		CatsReferralParentVo parentCatsReferral = form.getLocalContext().getParentCatsReferral();
		RTTStatusPointRefVo rttStatusPoint = parentCatsReferral != null && parentCatsReferral.getCurrentRTTStatus() != null ? parentCatsReferral.getCurrentRTTStatus().getRTTStatus() : null;
		bindAppointmentOutcomes(Status_Reason.DNA, rttStatusPoint);
		
		updateControlsState(form.getLocalContext().getFormMode());
	}	
	
	
	@Override
	protected void onCmbOutcomeValueChanged() throws PresentationLogicException
	{
		updateOutcomeSelection(form.cmbOutcome().getValue());
		
		updateControlsState(form.getLocalContext().getFormMode());
	}

	
	@Override
	protected void onGrdProceduresSelectionChanged() throws PresentationLogicException
	{
		updateControlsState(form.getLocalContext().getFormMode());
	}

	
	@Override
	protected void onGrdDiagnosisSelectionChanged() throws PresentationLogicException
	{
		updateControlsState(form.getLocalContext().getFormMode());
	}


	@Override
	protected void onBtnRIEOutcomeActionsClick() throws PresentationLogicException
	{
		form.getLocalContext().setMessageBox_RIE_Confirmation(engine.showMessage(RIE_WARNING_MESSAGE, "Warning", MessageButtons.YESNO, MessageIcon.WARNING)); 
	}


	@Override
	protected void onBtnUndoOutcomeRetainActionsClick() throws PresentationLogicException
	{
		form.getLocalContext().setMessageBox_UndoOutcome_Confirmation(engine.showMessage(UNDO_WARNING_MESSAGE, "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
	}
	
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}

	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.SELECT:
				selectProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.ADD:
				addProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.EDIT:
				editProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.REMOVE:
				form.grdProcedures().removeSelectedRow();
				updateControlsState(form.getLocalContext().getFormMode());
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.SELECT:
				selectDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.ADD:
				addDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.EDIT:
				editDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeDiagnosisMenu.REMOVE:
				form.grdDiagnosis().removeSelectedRow();
				updateControlsState(form.getLocalContext().getFormMode());
			break;
		}
	}

	
	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form events - Outcome Actions buttons
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------

    	@Override
    	protected void onBtnWaitingListClick() throws PresentationLogicException
    	{
    		PatientElectiveListAddLaterVo patientElectiveList = getPatientElectiveListAddLater(AppointmentAction.WAITING_LIST_ACTION);
    		ElectiveListAddLaterDlgOpenMode electiveListOpenMode = getElectiveListMode(patientElectiveList, form.getLocalContext().getFormMode());
    		
    		Object[] electiveListOpenParameters = new Object[] {
    																ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
    																form.getLocalContext().getAppointment(),
    																patientElectiveList,
    																electiveListOpenMode
    															};
    		
    		
			engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, electiveListOpenParameters, "Waiting List Details"); 	//WDEV-19634,wdev-20561
    	}



		@Override
    	protected void onBtnPlannedListClick() throws PresentationLogicException
    	{
    		PatientElectiveListAddLaterVo patientElectiveList = getPatientElectiveListAddLater(AppointmentAction.PLANNED_LIST_ACTION);
    		ElectiveListAddLaterDlgOpenMode electiveListOpenMode = getElectiveListMode(patientElectiveList, form.getLocalContext().getFormMode());
    		
    		Object[] electiveListOpenParameters = new Object[] {
    																ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
    																form.getLocalContext().getAppointment(),
    																patientElectiveList,
    																electiveListOpenMode
    															};
    		
			engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, electiveListOpenParameters, "Planned List Details"); 	//WDEV-19634,wdev-20561
    	}
    	
    	
    	@Override
    	protected void onBtnFutureApptClick() throws PresentationLogicException
    	{
    		form.getGlobalContext().Scheduling.setFutureAppointmentDetails(getFutureAppointmentDetails(AppointmentAction.BOOK_APPT_ACTION));
    		//WDEV-23051
    		Boolean openInReadOnlyMode = AppointmentOutcomeAction.VIEW.equals(form.getLocalContext().getFormMode()) || AppointmentOutcomeAction.VIEW_READ_ONLY.equals(form.getLocalContext().getFormMode());
    		engine.open(form.getForms().Scheduling.FutureAppointmentDetails, new Object[] { ims.scheduling.forms.futureappointmentdetails.Logic.SHOW_RIE_BUTTON, openInReadOnlyMode }); //WDEV-23051
    	}

    	
    	@Override
    	protected void onBtnTransferToProviderClick() throws PresentationLogicException
    	{
    		form.getGlobalContext().Scheduling.setInterProviderTransferOut(getIPTOut(AppointmentAction.TRANSFER_ACTION));
    		//WDEV-23051
    		Boolean openInReadOnlyMode = AppointmentOutcomeAction.VIEW.equals(form.getLocalContext().getFormMode()) || AppointmentOutcomeAction.VIEW_READ_ONLY.equals(form.getLocalContext().getFormMode());
    		engine.open(form.getForms().Scheduling.InterProviderTransferOutDialog, 
    				new Object[] {form.getLocalContext().getAppointment() != null ? form.getLocalContext().getAppointment().getSession() : null,
    								ims.scheduling.forms.interprovidertransferoutdialog.Logic.SHOW_RIE_BUTTON, openInReadOnlyMode });
    	}

    	
    	@Override
    	protected void onBtnRequestForServiceClick() throws PresentationLogicException
    	{
    		BookingAppointmentOutcomeVo appointmentOutcome = form.getLocalContext().getAppointment();
    		CatsReferralParentVo parentReferral = domain.getParentCatsReferrall(form.getGlobalContext().RefMan.getCatsReferral());

    		LinkedCatsReferralForOutcomeVoCollection requestForServiceCatsReferral = getRequestForServiceCatsReferral(AppointmentAction.REQUEST_FOR_SERVICE_ACTION);
    		form.getGlobalContext().RefMan.setReferralServiceRequests(requestForServiceCatsReferral);
    		
    		form.getLocalContext().setParentCatsReferral(parentReferral);
    		Boolean openInReadOnlyMode = AppointmentOutcomeAction.VIEW.equals(form.getLocalContext().getFormMode()) || AppointmentOutcomeAction.VIEW_READ_ONLY.equals(form.getLocalContext().getFormMode());
    		
			Object[] paramsRequestForService = new Object[] 
    		                                   {
    												parentReferral,												// Parent Cats Referral
    												appointmentOutcome,											// Appointment
    												CommitMode.COMMIT_TO_GLOBAL_CONTEXT,						// Indicate the Request For Service dialog to commit into a Global Context rather than database
    												openInReadOnlyMode											// Indicate dialog to open in Read-Only mode
    											};
			
    		engine.open(form.getForms().RefMan.CatsReferralRequestServiceDlg, paramsRequestForService, "Request For Service", false);
    	}

    	
    	
    	private InterProviderTransferOutVo getIPTOut(AppointmentAction action)
		{
    		if (action == null)
    			return null;
    		
    		BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
    		
    		if (appointment == null || appointment.getOutcomeActions() == null)
    			return null;
    		
    		for (AppointmentOutcomeActionVo appointmentOutcomeAction : appointment.getOutcomeActions())
    		{
    			if (action.equals(appointmentOutcomeAction.getAppointmentAction()))
    				return appointmentOutcomeAction.getInterProviderTransfer();
    		}
    		
    		return null;
		}



    	/**
    	 *	Function used to return the associated Requests For Service for Appointment Outcome
    	 * @param action
    	 * @return
    	 */
    	private LinkedCatsReferralForOutcomeVoCollection getRequestForServiceCatsReferral(AppointmentAction action)
		{
    		if (action == null)
				return null;
			
			BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
			
			if (appointment == null || appointment.getOutcomeActions() == null)
				return null;
			
			for (AppointmentOutcomeActionVo outcomeAction : appointment.getOutcomeActions())
    		{
				if (action.equals(outcomeAction.getAppointmentAction()) && !Boolean.TRUE.equals(outcomeAction.getRemove()))
				{
					return outcomeAction.getRequestsForService();
				}
    		}
			
			return null;
		}
    	//--- end of wdev-19930
    	

		private PatientElectiveListAddLaterVo getPatientElectiveListAddLater(AppointmentAction action)
		{
			if (action == null)
				return null;
			
			BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
			
			if (appointment == null || appointment.getOutcomeActions() == null)
				return null;
			
			for (AppointmentOutcomeActionVo appointmentOutcomeActionVo : appointment.getOutcomeActions())
    		{
				if (AppointmentAction.WAITING_LIST_ACTION.equals(action) && action.equals(appointmentOutcomeActionVo.getAppointmentAction()))
    				return appointmentOutcomeActionVo.getWaitingListAction();
				
				if (AppointmentAction.PLANNED_LIST_ACTION.equals(action) && action.equals(appointmentOutcomeActionVo.getAppointmentAction()))
					return appointmentOutcomeActionVo.getPlannedListAction();
    		}
			
			return null;
		}
		
		
    	private FutureAppointmentDetailsVo getFutureAppointmentDetails(AppointmentAction action)
		{
    		if (action == null)
    			return null;
    		
    		BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
    		
    		if (appointment == null || appointment.getOutcomeActions() == null)
    			return null;
    		
    		for (AppointmentOutcomeActionVo appointmentOutcomeAction : appointment.getOutcomeActions())
    		{
    			if (action.equals(appointmentOutcomeAction.getAppointmentAction()))
    				return appointmentOutcomeAction.getFutureAppointment();
    		}
    		
    		return null;
		}


		
    //---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form initialization functions
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize the form.
	 * <li><b>1</b>	-	Initialize components on the dialog</li>
	 * <li><b>2</b>	-	Analyze the parameters passed on opening the dialogs and the appointment and decide the AppointmentOutcomeAction. 
	 * 					Based on the Appointment Outcome Action decided the form will allow user to chose a new AppointmetnOutcome (DNA, NOT SEEN, SEEN)
	 * 					or will allow entering the AppointmentOutcome record for a chosen outcome action.</li>
	 * <li><b>3</b> -	Read the Appointment Outcome Configuration record. This record holds the configuration for what AppointmentOutcomes are available
	 * 					for each appointment status.</li>
	 * <li><b>4</b> -	Retrieve the CATS Referral and Care Context records that correspond to the Booking Appointment, if they are available. These records
	 * 					could be used further in the logic
	 * <li><b>5</b> -	Set the visuals for the AppointOutcomeStatus and the AppointmentOutcomeActions buttons
	 * @param args - These are the arguments passed when opening the <b>AppointmentOutcomeDialog</b>
	 * @param appointment - The BookingAppointment record of which the outcome will be recorded
	 */
	private void initialise(Object[] args, BookingAppointmentOutcomeVo appointment)
	{
		// Get the AppointmentOutcomeAction parameter
		if (args != null && args.length >= 2 && args[1] instanceof AppointmentOutcomeAction)
			form.getLocalContext().setFormMode((AppointmentOutcomeAction) args[1]);
		// Set the appropriate AppointmentOutcomeAction
		// If one was passed by parameter, then that action will have priority
		form.getLocalContext().setFormMode(initializeAppointmentOutcomeAction(appointment, form.getLocalContext().getFormMode()));
		
		// Read Appointment Outcome configuration
		if (appointment != null)
			form.getLocalContext().setAppointmentOutcomeConfig(domain.getAppointmentOutcomeConfigByApptOutcomeLookup(appointment.getOutcome()));
		
		// Get CATS Referral record if there is one - will be needed for RTT Status and RTT Breech date
		if(form.getGlobalContext().RefMan.getCatsReferral() == null)
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		// Get Care Context record
		if(form.getGlobalContext().Core.getCurrentCareContext() == null)
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));

		// If the current clock is active - then remove the option DECISION_TO_TREAT_ACTIVE_MONITORING from AppointmentOutcome as an option
		Boolean isCurrentClockActive = domain.isCurrentPathwayClockActive(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
		if(Boolean.TRUE.equals(isCurrentClockActive))
		{
			form.cmbOutcome().removeRow(ApptOutcome.DECISIONTREATACTIVEMONITORING);
		}
		
		//WDEV-18083
		form.getGlobalContext().RefMan.setPatientElectiveList(null);
	
		// Initialize form UI - cosmetics
		setUpImageControls();
		setOutcomeActionButtonsAppeareance();
		setAppointmentStatusButtonsAppeareance();
		
		// Set User Access Denied actions
		form.getLocalContext().setDeniedActions(getDeniedActionsForCurrentUser());
		
		// Default in today date and time in the Appointment Outcome Date
		form.dtimAppointmentOutcome().setValue(new DateTime());
	}


	/**
	 * Determine the mode the form is required to work
	 * @param appointment - Appointment record
	 * @param appointmentOutcomeAction - Specific Appointment Outcome mode for the form
	 * @return
	 */
	private AppointmentOutcomeAction initializeAppointmentOutcomeAction(BookingAppointmentOutcomeVo appointment, AppointmentOutcomeAction appointmentOutcomeAction)
	{
		// If a specific mode was specified, use it
		if (appointmentOutcomeAction != null)
			return appointmentOutcomeAction;
		
		if (appointment != null)
		{
			if (Status_Reason.BOOKED.equals(appointment.getApptStatus()) || Status_Reason.ARRIVAL.equals(appointment.getApptStatus()))
				return AppointmentOutcomeAction.RECORD;
		
			if (appointment != null && appointment.getOutcome() != null)
				return AppointmentOutcomeAction.VIEW;
		}
		
		if (Status_Reason.DNA.equals(appointment.getApptStatus()))
			return AppointmentOutcomeAction.DNA;
		
		if (Status_Reason.SEEN.equals(appointment.getApptStatus()))
			return AppointmentOutcomeAction.SEEN;
		
		if (Status_Reason.NOT_SEEN.equals(appointment.getApptStatus()))
			return AppointmentOutcomeAction.NOT_SEEN;
		
		return AppointmentOutcomeAction.RECORD;
	}

	
	private void setUpImageControls()
	{
		form.imgWaitingListRecorded().setValue(form.getImages().Core.OK24);
		form.imgPlannedListRecorded().setValue(form.getImages().Core.OK24);
		form.imgFutureAppointmentRecorded().setValue(form.getImages().Core.OK24);
		form.imgTransferToProvider().setValue(form.getImages().Core.OK24);
		form.imgRequestForService().setValue(form.getImages().Core.OK24);
		form.imgTransferOfCare().setValue(form.getImages().Core.OK24);
	}


	private void setAppointmentStatusButtonsAppeareance()
	{
		form.btnMarkDNA().setImage(form.getImages().RefMan.Close48);
		form.btnMarkDNA().setText("DNA");
		
		form.btnMarkNotSeen().setImage(form.getImages().RefMan.ConsultationStop);
		form.btnMarkNotSeen().setText("Not Seen");

		form.btnMarkSeen().setImage(form.getImages().RefMan.Consultation48);
		form.btnMarkSeen().setText("Seen");
	}

	
	private void setOutcomeActionButtonsAppeareance()
	{
		form.btnWaitingList().setImage(form.getImages().RefMan.WaitingList32);
		form.btnWaitingList().setText(" Waiting List Details");

		form.btnPlannedList().setImage(form.getImages().RefMan.PlannedList32);
		form.btnPlannedList().setText(" Planned List Details");

		form.btnFutureAppt().setImage(form.getImages().RefMan.FutureAppointment32);
		form.btnFutureAppt().setText(" Future Appointment Details");
		
		form.btnTransferToProvider().setImage(form.getImages().RefMan.InterProviderTransfer32);
		form.btnTransferToProvider().setText(" Inter Provider Transfer   ");
		
		form.btnRequestForService().setImage(form.getImages().RefMan.ChangeService32);
		form.btnRequestForService().setText(" Request For Service");
		
		form.btnTransferOfCare().setImage(form.getImages().RefMan.Transfer32);
		form.btnTransferOfCare().setText(" Transfer of Care");
	}

	
	private List<AppointmentOutcomeDialogUserAction> getDeniedActionsForCurrentUser()
	{
		IAppRole role = engine.getLoggedInRole();
		
		if (role == null)
			return null;

		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if (currentForm == null || currentForm.getMenuActions() == null)
			return null;


		List<AppointmentOutcomeDialogUserAction> deniedActions = new ArrayList<AppointmentOutcomeDialogUserAction>();
		
		for (MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if (menuAction == null)
				continue;
			
			if (!role.hasMenuActionRight(currentForm, menuAction))
			{
				AppointmentOutcomeDialogUserAction mappedAction = getMappedAction(menuAction);
				
				if (mappedAction != null)
				{
					deniedActions.add(mappedAction);
				}
			}
		}
		
		return deniedActions;
	}
	
	
	private AppointmentOutcomeDialogUserAction getMappedAction(MenuActionVo menuAction)
	{
		if (menuAction == null || menuAction.getID_MenuAction() == null)
			return null;
		
		if (RIE_OUTCOME_ACTIONS == menuAction.getID_MenuAction())
			return AppointmentOutcomeDialogUserAction.RIE_OUTCOME_ACTIONS;
			
		if (UNDO_OUTOMCE_RETAIN_ACTION == menuAction.getID_MenuAction())
			return AppointmentOutcomeDialogUserAction.UNDO_OUTCOME_RETAIN_ACTIONS;
			
		return null;
	}

	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	public void open(AppointmentOutcomeAction appointmentOutcomeAction) //WDEV-18083
	{
		form.getLocalContext().setFormMode(appointmentOutcomeAction);

		clearScreen();
		
		// Refresh appointment record
		// This is in case a StaleObjectException occurs
		form.getLocalContext().setAppointment(domain.getBookingAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		form.getLocalContext().setParentCatsReferral(domain.getParentCatsReferrall(form.getLocalContext().getAppointment()));

		populateScreenFromData(form.getLocalContext().getAppointment());
		
		form.setMode(FormMode.EDIT);
	}
	

	private boolean save()
	{
		if (form.getLocalContext().getFormMode() == null
				&& AppointmentOutcomeAction.DNA.equals(form.getLocalContext().getFormMode())
				&& Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
				&& domain.hasTCI(form.getLocalContext().getAppointment()))
		{
			form.getLocalContext().setMessageBox_DNA_Confimation(engine.showMessage("You are about to mark this record as DNA. Is a new TCI required?", "Warning", MessageButtons.YESNOCANCEL));
			return false;
		}
		
		if (AppointmentOutcomeAction.DNA.equals(form.getLocalContext().getFormMode())
				|| AppointmentOutcomeAction.NOT_SEEN.equals(form.getLocalContext().getFormMode()))
			return saveAppointmentOutcomeDNA_NotSeen(false);
		
		BookingAppointmentOutcomeVo voOutcome = populateDataFromScreen(form.getLocalContext().getAppointment(), form.getLocalContext().getFormMode());
		

		String[] errors = voOutcome.validate(validateUIRules(validateSeenControls()));//WDEV-19196
		if(errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		try
		{	
			//WDEV-18553 - previous form parameter removed from domain interface method
			domain.saveBookingAppointment(voOutcome, form.getGlobalContext().RefMan.getPatientElectiveList(), ((form.chkFirstDefinitiveTreatment().getValue() && form.getLocalContext().getAppointmentOutcomeConfig() != null) ? form.getLocalContext().getAppointmentOutcomeConfig().getFirstDefinitiveTreatmentEvent() : null), AppointmentOutcomeAction.SEEN.equals(form.getLocalContext().getFormMode()), form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getFormMode());	//WDEV-18083 //WDEV-19196,wdev-19930
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(form.getLocalContext().getFormMode());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		form.getGlobalContext().RefMan.setReferralServiceRequests(null); //WDEV-22786
		return true;
	}
	
	
	private String[] validateUIRules(String[] errors)
	{
		ArrayList<String> errorList = new ArrayList<String>();

		// Add errors from parameter
		if (errors != null)
		{
			for (String error : errors)
				errorList.add(error);
		}
		
		// Validate Appointment Outcome Date
		if (form.dtimAppointmentOutcome().getValue() == null)
		{
			errorList.add("Appointment Outcome Date is mandatory.");
		}
		
		//WDEV-21616
		if (form.dtimAppointmentOutcome().getValue() != null && form.dtimAppointmentOutcome().getValue().getDate().isGreaterThan((new DateTime()).getDate()))
		{
			errorList.add("Appointment Outcome Date should not be in the future.");
		}
		
		// Return list of errors as an array
		return errorList.toArray(new String[errorList.size()]);
	}
	
	private String[] validateUIRules()
	{
		return validateUIRules(null);
	}



	private boolean saveAppointmentOutcomeDNA_NotSeen(boolean requiresNewTCI)
	{
		try
		{
			BookingAppointmentOutcomeVo outcome = populateDataFromScreen(form.getLocalContext().getAppointment(), form.getLocalContext().getFormMode());
			
			String[] errors = outcome.validate(validateUIRules());
			if (errors != null)
			{
				engine.showErrors("Validation Errors", errors);
				return false;
			}

			domain.saveBookingAppointment(outcome, form.getGlobalContext().RefMan.getPatientElectiveList(), null, false, form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getFormMode());	//wdev-19930

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}


	//WDEV-19196
	private String[] validateSeenControls()
	{
		ArrayList<String> seenControlsErrors = new ArrayList<String>();
		boolean hasCurrentlySeenStatus = form.getLocalContext().getAppointment() != null && Status_Reason.SEEN.equals(form.getLocalContext().getFormMode());
		
		if (AppointmentOutcomeAction.SEEN.equals(form.getLocalContext().getFormMode()) || hasCurrentlySeenStatus)
			{		
				if (form.timSeen().getValue() == null)
					seenControlsErrors.add("'Time Seen' is mandatory.");
				if (form.qmbSeenBy().getValue() == null)
					seenControlsErrors.add("'Seen By' is mandatory.");
			}
		
		return seenControlsErrors.size() > 0 ? seenControlsErrors.toArray(new String[seenControlsErrors.size()]) : null;
	}

	
	private BookingAppointmentOutcomeVo populateDataFromScreen(BookingAppointmentOutcomeVo appointment, AppointmentOutcomeAction appointmentOutcomeAction)
	{
		if (appointment == null)
			return null;
		
		appointment = (BookingAppointmentOutcomeVo) appointment.clone();
		
		// Update the status of the Booking Appointment
		if (AppointmentOutcomeAction.DNA.equals(appointmentOutcomeAction)
				&& !Status_Reason.DNA.equals(appointment.getApptStatus()))
		{
			updateAppointmentStatus(appointment, Status_Reason.DNA);
		}
		else if (AppointmentOutcomeAction.NOT_SEEN.equals(appointmentOutcomeAction)
				&& !Status_Reason.NOT_SEEN.equals(appointment.getApptStatus()))
		{
			updateAppointmentStatus(appointment, Status_Reason.NOT_SEEN);
		}
		else if (AppointmentOutcomeAction.SEEN.equals(appointmentOutcomeAction)
				&& !Status_Reason.SEEN.equals(appointment.getApptStatus()))
		{
			updateAppointmentStatus(appointment, Status_Reason.SEEN);
		}
		
		appointment.setSeenTime(form.timSeen().getValue());
		appointment.setSeenBy(form.qmbSeenBy().getValue());

		appointment.setOutcome(form.cmbOutcome().getValue());
		appointment.setOutcomeReason(form.cmbOutcomeReason().getValue());
		appointment.setOutcomeDateTime(form.dtimAppointmentOutcome().getValue());

		appointment.setWasFirstDefinitiveTreatment(form.chkFirstDefinitiveTreatment().getValue());
		
		appointment.setOutpatientDiagnoses(getPatientDiagnosis());
		appointment.setOutpatientProcedures(getPatientProcedures());
		appointment.setOutcomeComments(form.txtComments().getValue());
		
		return appointment;
	}


	// Function used to update the status of the appointment
	private void updateAppointmentStatus(BookingAppointmentOutcomeVo appointment, Status_Reason status)
	{
		// If the appointment passed is null, then terminate the function
		if (appointment == null)
			return;
		
		appointment.setApptStatus(status);
		appointment.setApptStatusReason(null);

		// Create a new status record
		Appointment_StatusForAppointmentOutcomeVo newStatus = new Appointment_StatusForAppointmentOutcomeVo();
		newStatus.setStatus(status);
		newStatus.setStatusReason(null);
		newStatus.setStatusChangeDateTime(new DateTime());
		newStatus.setApptDate(appointment.getAppointmentDate());
		newStatus.setApptTime(appointment.getApptStartTime());
		newStatus.setSession(appointment.getSessionIsNotNull() ? appointment.getSession() : null); //WDEV-23185
		
		// In the unlikely case the appointment doesn't have a status history collection,
		// instantiate a new collection for status history
		if (appointment.getApptStatusHistory() == null)
		{
			appointment.setApptStatusHistory(new Appointment_StatusForAppointmentOutcomeVoCollection());
		}

		appointment.setCurrentStatusRecord(newStatus);
		appointment.getApptStatusHistory().add(newStatus);
		
		// Set the marker to indicate the Appointment Status was set from the Appointment Outcome process
		appointment.setStatusSavedFromOutcome(Boolean.TRUE);
	}
	
	
	private PatientProcedureForAppointmentOutcomeVoCollection getPatientProcedures()
	{
		if (form.grdProcedures().getRows().size() == 0)
			return null;
		
		PatientProcedureForAppointmentOutcomeVoCollection procedures = new PatientProcedureForAppointmentOutcomeVoCollection();
		
		for (int i = 0; i < form.grdProcedures().getRows().size(); i++)
		{
			procedures.add(form.grdProcedures().getRows().get(i).getValue());
		}
		
		return procedures;
	}
	
	private PatientDiagnosisForAppointmentOutcomeVoCollection getPatientDiagnosis()
	{
		if(form.grdDiagnosis().getRows().size() == 0)
			return null;
		
		PatientDiagnosisForAppointmentOutcomeVoCollection diagnosis = new PatientDiagnosisForAppointmentOutcomeVoCollection();
		
		for (int i = 0; i < form.grdDiagnosis().getRows().size(); i++)
		{
			diagnosis.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		
		return diagnosis;
	}

	
	
	//WDEV-19196
	private boolean wasAppointmentSeen(BookingAppointmentOutcomeVo appointment)
	{
		if (appointment == null)
			return false;

		if (Status_Reason.SEEN.equals(appointment.getApptStatus()))
			return true;

		if (appointment.getCurrentStatusRecord() != null && Status_Reason.SEEN.equals(appointment.getCurrentStatusRecord().getStatus()))
			return true;

		if (appointment.getApptStatusHistory() == null)
			return false;

		for (Appointment_StatusForAppointmentOutcomeVo apptStatus : appointment.getApptStatusHistory())
		{
			if (apptStatus == null)
				continue;

			if (Status_Reason.SEEN.equals(apptStatus.getStatus()))
				return true;
		}

		return false;
	}
	
	
	private void populateScreenFromData(BookingAppointmentOutcomeVo appointment)
	{
		clearScreen();

		if (appointment == null)
			return;

		// Populate Appointment Activity
		form.lblActivity().setValue(appointment.getActivity() != null && appointment.getActivity().getName() != null ? appointment.getActivity().getName() : null);
		// Populate Appointment Status - it will be updated if dialog will be actioned towards DNA, NOT SEEN or SEEN outcome
		form.lblApptStatusText().setValue(appointment.getApptStatus() != null ? appointment.getApptStatus().getText() : null);
		
		CatsReferralParentVo parentCatsReferral = form.getLocalContext().getParentCatsReferral();
		RTTStatusPointRefVo rttStatusPoint = parentCatsReferral != null && parentCatsReferral.getCurrentRTTStatus() != 
		null ? parentCatsReferral.getCurrentRTTStatus().getRTTStatus() : null;

		// Populate AppointmentOutcome & AppointmentOutcomeReason combo-boxes
		if (AppointmentOutcomeAction.DNA.equals(form.getLocalContext().getFormMode()))
		{
			form.lblApptStatusText().setValue(Status_Reason.DNA.getText());
			bindAppointmentOutcomes(Status_Reason.DNA, rttStatusPoint);
		}
		else if (AppointmentOutcomeAction.SEEN.equals(form.getLocalContext().getFormMode()))
		{
			form.lblApptStatusText().setValue(Status_Reason.SEEN.getText());
			bindAppointmentOutcomes(Status_Reason.SEEN, rttStatusPoint);
		}
		else if (AppointmentOutcomeAction.NOT_SEEN.equals(form.getLocalContext().getFormMode()))
		{
			form.lblApptStatusText().setValue(Status_Reason.NOT_SEEN.getText());
			bindAppointmentOutcomes(Status_Reason.NOT_SEEN, rttStatusPoint);
		}
		else if (AppointmentOutcomeAction.VIEW.equals(form.getLocalContext().getFormMode())
					|| AppointmentOutcomeAction.VIEW_READ_ONLY.equals(form.getLocalContext().getFormMode())
					|| AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(form.getLocalContext().getFormMode()))
		{
			bindAppointmentOutcomes(appointment.getApptStatus(), rttStatusPoint);
			form.cmbOutcome().setValue(appointment.getOutcome());
			updateOutcomeSelection(appointment.getOutcome());
			form.cmbOutcomeReason().setValue(appointment.getOutcomeReason());
		}
		else if (AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(form.getLocalContext().getFormMode()))
		{
			PathwayRTTStatusVo initialRTTStatus = domain.getRTTStatus(appointment.getRTTClockImpact().getInitialRTTStatus());
			bindAppointmentOutcomes(appointment.getApptStatus(), (initialRTTStatus != null ? initialRTTStatus.getRTTStatus() : null));
			form.cmbOutcome().setValue(appointment.getOutcome());
			updateOutcomeSelection(appointment.getOutcome());
			form.cmbOutcomeReason().setValue(appointment.getOutcomeReason());
		}

		// Populate Current RTT Status & RTT Breach Date for associated CATS Referral record (if one exists)
		CatsReferralForSessionManagementVo catsReferral = domain.getCatsReferral(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
		
		if (catsReferral != null && catsReferral.getReferralDetails() != null)
		{
			form.lblReferralUrgencyShownHere().setValue(catsReferral.getUrgency() != null ? catsReferral.getUrgency().getText() : null);
			
			if (catsReferral.getCurrentRTTStatus() != null && catsReferral.getCurrentRTTStatus().getRTTStatus() != null)
			{
				form.txtRTTStatusValue().setValue(catsReferral.getCurrentRTTStatus().getRTTStatus().getDescription());
				form.txtRTTStatusValue().setTooltip(catsReferral.getCurrentRTTStatus().getRTTStatus().getDescription());
			}
			form.dteRTT().setValue(catsReferral.getReferralDetails().getEnd18WW());
		}
		
		// Populate the Appointment Outcome date & time, if there isn't one, then default current date & time
		if (appointment.getOutcome() != null)
			form.dtimAppointmentOutcome().setValue(appointment.getOutcomeDateTime());
		else
			form.dtimAppointmentOutcome().setValue(new DateTime());
		
		// If the Appointment was marked as SEEN, populate seen details
		boolean isSeenAppt = wasAppointmentSeen(appointment);
		form.timSeen().setValue(isSeenAppt ? appointment.getSeenTime() : null);
		
		if (isSeenAppt && appointment.getSeenBy() != null)
		{	
			form.qmbSeenBy().newRow(appointment.getSeenBy(), appointment.getSeenBy().getIMosName());
		}
		
		form.qmbSeenBy().setValue(isSeenAppt ? appointment.getSeenBy() : null);
		
		// Populate First Definitive Treatment marker
		form.chkFirstDefinitiveTreatment().setValue(appointment.getWasFirstDefinitiveTreatment());

		// Populate Procedures & Diagnosis & Comment
		populateDiagnosisGrid(appointment.getOutpatientDiagnoses());
		populateProcedureGrid(appointment.getOutpatientProcedures());
		form.txtComments().setValue(appointment.getOutcomeComments());
	}
	
	
	private void clearScreen()
	{
		form.lblApptStatusText().setValue(null);
		form.lblActivity().setValue(null);
		form.cmbOutcome().setValue(null);
		form.cmbOutcomeReason().setValue(null);
		form.txtRTTStatusValue().setValue(null);
		form.txtRTTStatusValue().setTooltip("");
		form.dteRTT().setValue(null);
		form.dtimAppointmentOutcome().setValue(null);
		form.chkFirstDefinitiveTreatment().setValue(null);
		
		//WDEV-19196
		form.qmbSeenBy().clear();
		form.timSeen().setValue(null);
		
		form.grdProcedures().getRows().clear();
		form.grdDiagnosis().getRows().clear();
		
		form.txtComments().setValue(null);
	}
	
	
	private void populateProcedureGrid(PatientProcedureForAppointmentOutcomeVoCollection procedures)
	{
		form.grdProcedures().getRows().clear();
		
		if(procedures == null)
			return;
		
		for(PatientProcedureForAppointmentOutcomeVo proc : procedures)
		{
			addPatientProcedureRow(proc, null);
		}
	}
	
	private void addPatientProcedureRow(PatientProcedureForAppointmentOutcomeVo patientProcedure, grdProceduresRow row)
	{
		if(patientProcedure == null)
			return;
			
		if(row == null)
			row = form.grdProcedures().getRows().newRow();
		
		row.setColDate(patientProcedure.getProcDate() != null ? patientProcedure.getProcDate().toDate() : null);
		row.setColProcedureName(patientProcedure.getProcedure() != null ? patientProcedure.getProcedure().getProcedureName() : patientProcedure.getProcedureDescription());
		row.setColLaterality(patientProcedure.getProcLaterality() != null ? patientProcedure.getProcLaterality().getText() : null);
		row.setColSite(patientProcedure.getSiteText());
		row.setColPerformedBy(patientProcedure.getPeformedBy() !=null ? patientProcedure.getPeformedBy().getIHcpName() : null);
		row.setColPrimary(Boolean.TRUE.equals(patientProcedure.getIsPrimary()));
		
		row.setValue(patientProcedure);
	}


	private Boolean procedureAlreadyExist(PatientProcedureForAppointmentOutcomeVo patientProcedure)
	{
		
		if(form.grdProcedures().getRows()!= null && form.grdProcedures().getRows().size()==0 || patientProcedure != null && !patientProcedure.getProcedureIsNotNull() && !patientProcedure.getProcLateralityIsNotNull())
			return false;
		
		for(int i=0;i<form.grdProcedures().getRows().size();i++)
		{
			PatientProcedureForAppointmentOutcomeVo gridValue = (PatientProcedureForAppointmentOutcomeVo)form.grdProcedures().getRows().get(i).getValue();
			
			if(gridValue.getProcedureIsNotNull() && gridValue.getProcedure().equals(patientProcedure.getProcedure()))
			{
				if(gridValue.getProcLateralityIsNotNull() && gridValue.getProcLaterality().equals(patientProcedure.getProcLaterality()))
					return true;

				else if(!patientProcedure.getProcLateralityIsNotNull() && !gridValue.getProcLateralityIsNotNull())
					return true;
			}

		}
		return false;
	}

	private void populateDiagnosisGrid(PatientDiagnosisForAppointmentOutcomeVoCollection patientDiagnosisForAppointmentOutcomeVoCollection)
	{
		form.grdDiagnosis().getRows().clear();
		
		if(patientDiagnosisForAppointmentOutcomeVoCollection == null)
			return;
		
		for(PatientDiagnosisForAppointmentOutcomeVo diag : patientDiagnosisForAppointmentOutcomeVoCollection)
		{
			addPatientDiagnosisRow(diag, null);
		}
	}
	
	private void addPatientDiagnosisRow(PatientDiagnosisForAppointmentOutcomeVo diag, grdDiagnosisRow row)
	{
		if(diag == null)
			return;
		
		if(row == null)
			row = form.grdDiagnosis().getRows().newRow();
		
		row.setColDiagnosis(diag.getDiagnosisDescription());
		row.setValue(diag);
	}

	
	private void addSelectedPatientProcedures()
	{
		if(form.getGlobalContext().RefMan.getSelectedProceduresApptOutcomeList() == null)
			return;
		
		form.grdProcedures().getRows().clear();
		
		for(PatientProcedureForAppointmentOutcomeVo procedure : form.getGlobalContext().RefMan.getSelectedProceduresApptOutcomeList())
		{
			if(form.grdProcedures().getRowByValue(procedure) ==  null)
				addPatientProcedureRow(procedure, null);
		}
		
	}

	private void addSelectedPatientDiagnosis()
	{
		if (form.getGlobalContext().RefMan.getSelectedDiagnosisApptOutcomeList() == null)
			return;

		for (PatientDiagnosisForAppointmentOutcomeVo diagnosis : form.getGlobalContext().RefMan.getSelectedDiagnosisApptOutcomeList())
		{
			if (form.grdDiagnosis().getRowByValue(diagnosis) == null)
				addPatientDiagnosisRow(diagnosis, null);
		}

		if (form.grdDiagnosis().getRows().size() > 0)
		{
			for (int i = form.grdDiagnosis().getRows().size() - 1; i >= 0; i--)
			{
				if (form.grdDiagnosis().getRows().get(i).getValue() == null || form.grdDiagnosis().getRows().get(i).getValue().getID_PatientDiagnosis() == null)
					continue;

				if (!form.getGlobalContext().RefMan.getSelectedDiagnosisApptOutcomeList().contains(form.grdDiagnosis().getRows().get(i).getValue()))
					form.grdDiagnosis().getRows().remove(i);
			}
		}
	}

	private void uncheckPreviousPrimary()
	{
		for(int i=0; i<form.grdProcedures().getRows().size(); i++)
		{
			form.grdProcedures().getRows().get(i).getValue().setIsPrimary(null);
			form.grdProcedures().getRows().get(i).setColPrimary(false);
		}
	}

	
	private void selectProcedure()
	{
		form.getGlobalContext().RefMan.setSelectedProceduresApptOutcomeList(getPatientProcedures());
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureSelectionDialog);
		
	}

	private void editDiagnosis()
	{
		form.getLocalContext().setEditDiagnosis(true);
		
		form.getGlobalContext().RefMan.setSelectedOutcomePatientDiagnosis(form.grdDiagnosis().getValue());
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeDiagnosisDialog);
	}

	private void addDiagnosis()
	{
		form.getLocalContext().setEditDiagnosis(false);
		form.getGlobalContext().RefMan.setSelectedOutcomePatientDiagnosis(null);
		engine.open(form.getForms().RefMan.AppointmentOutcomeDiagnosisDialog);
	}

	private void selectDiagnosis()
	{
		//WDEV-18496
		form.getGlobalContext().RefMan.setSelectedDiagnosisApptOutcomeList(getPatientDiagnosisAdded());
		engine.open(form.getForms().RefMan.AppointmentOutcomeDiagnosisSelectionDialog);
	}
	

	//WDEV-18496
	private PatientDiagnosisForAppointmentOutcomeVoCollection getPatientDiagnosisAdded()
	{
		if(form.grdDiagnosis().getRows().size() == 0)
			return null;
		
		PatientDiagnosisForAppointmentOutcomeVoCollection diagnosis = new PatientDiagnosisForAppointmentOutcomeVoCollection();
		
		for(int i=0; i<form.grdDiagnosis().getRows().size(); i++)
		{
			if(form.grdDiagnosis().getRows().get(i).getValue() == null)
				continue;
			
			diagnosis.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		
		return diagnosis;
	}
	

	private void editProcedure()
	{
		form.getLocalContext().setEditProcedure(true);
		
		form.getGlobalContext().RefMan.setPatientProcedureForAppointmentOutcome(form.grdProcedures().getValue());
		
		Specialty specialty = null;
		
		if(form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getSession() != null && form.getLocalContext().getAppointment().getSession().getService() != null)
		{
			specialty = form.getLocalContext().getAppointment().getSession().getService().getSpecialty();
		}
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureDialog, new Object[] {specialty, form.getLocalContext().getAppointment().getSeenBy(), form.getLocalContext().getAppointment().getAppointmentDate()});
	}
	
	
	private void addProcedure()
	{
		form.getLocalContext().setEditProcedure(false);
		
		form.getGlobalContext().RefMan.setPatientProcedureForAppointmentOutcome(null);
		
		Specialty specialty = null;
		
		if(form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getSession() != null && form.getLocalContext().getAppointment().getSession().getService() != null)
		{
			specialty = form.getLocalContext().getAppointment().getSession().getService().getSpecialty();
		}
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureDialog, new Object[] {specialty, form.getLocalContext().getAppointment().getSeenBy(), form.getLocalContext().getAppointment().getAppointmentDate()});
	}
	
	
	/**
	 *	Function used to update screen controls 
	 * @param formMode 
	 */
	private void updateControlsState(AppointmentOutcomeAction formMode)
	{
		form.getContextMenus().Scheduling.hideAllAppointmentOutcomeDialogMenuItems();
		
		BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
		CatsReferralParentVo referral = form.getLocalContext().getParentCatsReferral();
		
		boolean hasOutcome	= appointment != null && appointment.getOutcome() != null;

		boolean isBooked	= appointment != null && Status_Reason.BOOKED.equals(appointment.getApptStatus());
		boolean isArrived	= appointment != null && Status_Reason.ARRIVAL.equals(appointment.getApptStatus());
		boolean isSeen		= appointment != null && Status_Reason.SEEN.equals(appointment.getApptStatus());

		boolean isCatsRefTransferred = referral != null && referral.getCurrentStatus() != null && ReferralApptStatus.TRANSFERRED.equals(referral.getCurrentStatus().getReferralStatus());
		boolean undoOutcome = AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(formMode) || AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(formMode);
		
		// Mark 'DNA', 'Seen', 'Not Seen' buttons state
		form.btnMarkDNA().setEnabled(!isCatsRefTransferred || undoOutcome);		//wdev-20812
		form.btnMarkDNA().setVisible(FormMode.EDIT.equals(form.getMode()) && isBooked && AppointmentOutcomeAction.RECORD.equals(formMode));

		form.btnMarkSeen().setEnabled(!isCatsRefTransferred || undoOutcome);		//wdev-20812
		form.btnMarkSeen().setVisible(FormMode.EDIT.equals(form.getMode()) && isArrived && AppointmentOutcomeAction.RECORD.equals(formMode));
		
		form.btnMarkNotSeen().setEnabled(!isCatsRefTransferred || undoOutcome); 	//wdev-20812	
		form.btnMarkNotSeen().setVisible(FormMode.EDIT.equals(form.getMode()) && isArrived && AppointmentOutcomeAction.RECORD.equals(formMode));

		
		
		//--------------------------------------------------------------------------------------------------------------------------------------------------------
		//	'Outcome Details' container controls state
		
		// 'Outcome' label & combo-box state
		form.lblApptOutcome().setVisible(hasOutcome || !AppointmentOutcomeAction.RECORD.equals(formMode)
													|| !AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(formMode)
													|| !AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(formMode));
		
		form.cmbOutcome().setVisible(hasOutcome || !AppointmentOutcomeAction.RECORD.equals(formMode)
												|| !AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(formMode)
												|| !AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(formMode));
		form.cmbOutcome().setEnabled(!AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode) && (!isCatsRefTransferred || undoOutcome));		//wdev-20812
		
		// 'Outcome Reason' label & combo-box state
		form.lblOutcomeReason().setVisible(form.cmbOutcome().getValue() != null);
		form.cmbOutcomeReason().setVisible(form.cmbOutcome().getValue() != null);
		form.cmbOutcomeReason().setEnabled(!AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode) && (!isCatsRefTransferred || undoOutcome));	//wdev-20812
		
		
		form.dtimAppointmentOutcome().setVisible(true);
		form.dtimAppointmentOutcome().setEnabled(!AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode) && (!isCatsRefTransferred || undoOutcome));	//wdev-20812
		
		// 'Time Seen' & 'Seen By' controls state
		boolean showSeenControls = (isArrived && AppointmentOutcomeAction.SEEN.equals(formMode)) || wasAppointmentSeen(appointment);
		boolean seenControlsEnabled = FormMode.EDIT.equals(form.getMode()) && (isArrived && AppointmentOutcomeAction.SEEN.equals(formMode));

		form.lblTimeSeen().setVisible(showSeenControls);
		form.timSeen().setVisible(showSeenControls);
		form.timSeen().setEnabled(seenControlsEnabled && (!isCatsRefTransferred || undoOutcome));	//wdev-20812
		form.timSeen().setRequired(FormMode.EDIT.equals(form.getMode()) && AppointmentOutcomeAction.SEEN.equals(formMode));
		
		form.lblSeenBy().setVisible(showSeenControls);
		form.qmbSeenBy().setVisible(showSeenControls);
		form.qmbSeenBy().setEnabled(seenControlsEnabled && (!isCatsRefTransferred || undoOutcome));	//wdev-20812
		form.qmbSeenBy().setRequired(FormMode.EDIT.equals(form.getMode()) && AppointmentOutcomeAction.SEEN.equals(formMode));

		// 'First definitive treatment' check-box state
		form.chkFirstDefinitiveTreatment().setVisible(form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getShowFirstDefinitiveTreatment()));
		form.chkFirstDefinitiveTreatment().setEnabled(!AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode) && (!isCatsRefTransferred || undoOutcome));	//wdev-20812
		
		//
		//--------------------------------------------------------------------------------------------------------------------------------------------------------


		
		// Procedure context menus
		
		boolean showDiagnosisProceduresOptions = AppointmentOutcomeAction.SEEN.equals(formMode)
													|| (isSeen && AppointmentOutcomeAction.VIEW.equals(formMode) && (!isCatsRefTransferred || undoOutcome));
		
		
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuSELECTItem().setVisible(showDiagnosisProceduresOptions);
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuADDItem().setVisible(showDiagnosisProceduresOptions);
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuEDITItem().setVisible(showDiagnosisProceduresOptions && form.grdProcedures().getValue() != null);
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuREMOVEItem().setVisible(showDiagnosisProceduresOptions && form.grdProcedures().getValue() != null);
		
		
		// Diagnosis context menus
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuSELECTItem().setVisible(showDiagnosisProceduresOptions);
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuADDItem().setVisible(showDiagnosisProceduresOptions);
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuEDITItem().setVisible(showDiagnosisProceduresOptions && form.grdDiagnosis().getValue() != null);
		form.getContextMenus().RefMan.getAppointmentOutcomeDiagnosisMenuREMOVEItem().setVisible(showDiagnosisProceduresOptions && form.grdDiagnosis().getValue() != null);
		
		
		// Comments text box
		if (FormMode.EDIT.equals(form.getMode()))		// Keep this line to avoid exception being thrown
			form.txtComments().setEnabled(!AppointmentOutcomeAction.RECORD.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode));
		
		
		//--------------------------------------------------------------------------------------------------------------------------------------------------------
		//	'Outcome Actions' buttons state
		//WDEV-19851
		
		boolean hasReferralAssociated = form.getGlobalContext().RefMan.getCatsReferralIsNotNull(); //WDEV-20268 
		boolean canAddToWaitingList = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() 
												&& form.getLocalContext().getAppointmentOutcomeConfig() != null 
												&& Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanAddtoWaitingList());
		
		form.btnWaitingList().setEnabled(hasReferralAssociated && ((canAddToWaitingList && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.WAITING_LIST_ACTION)));
		form.btnWaitingList().setVisible(hasReferralAssociated && ((canAddToWaitingList && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.WAITING_LIST_ACTION)));
		form.imgWaitingListRecorded().setVisible(hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.WAITING_LIST_ACTION));
		
		boolean canAddToPlannedList = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()
										&& form.getLocalContext().getAppointmentOutcomeConfig() != null 
										&& Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanAddtoPlannedList());
		
		
		form.btnPlannedList().setEnabled(hasReferralAssociated && ((canAddToPlannedList && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.PLANNED_LIST_ACTION)));
		form.btnPlannedList().setVisible(hasReferralAssociated && ((canAddToPlannedList && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.PLANNED_LIST_ACTION)));
		form.imgPlannedListRecorded().setVisible(hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.PLANNED_LIST_ACTION));
		
		
		boolean canAddFutureAppointment = !Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentSaved())  
												&& form.getLocalContext().getAppointmentOutcomeConfig() != null 
												&& Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanMakeAppointment());
		
		form.btnFutureAppt().setEnabled((canAddFutureAppointment && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.BOOK_APPT_ACTION));
		form.btnFutureAppt().setVisible((canAddFutureAppointment && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.BOOK_APPT_ACTION));
		form.imgFutureAppointmentRecorded().setVisible(hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.BOOK_APPT_ACTION));
		

		
		boolean canTransferToOtherProvider = form.getLocalContext().getAppointmentOutcomeConfig() != null && Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanTransfer());
		
		form.btnTransferToProvider().setEnabled(hasReferralAssociated && ((canTransferToOtherProvider && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
												|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.TRANSFER_ACTION)));
		form.btnTransferToProvider().setVisible(hasReferralAssociated && ((canTransferToOtherProvider && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
												|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.TRANSFER_ACTION)));
		form.imgTransferToProvider().setVisible(hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.TRANSFER_ACTION));
	
		
		//wdev-19933
		
		boolean isChildCatsReferralFromReferralDetailsForm = form.getLocalContext().getChildCatsReferralForTransferOfCareIsNotNull() && isChildCatsReferralForTransferOfcareOnAoutcomeActions(form.getLocalContext().getAppointment()) == false;
		
		
		//wdev-19930
		boolean canAddRequestForService = form.getLocalContext().getAppointmentOutcomeConfig() != null 
										&& Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanAddRequestForService());

		form.btnRequestForService().setEnabled(hasReferralAssociated  && isChildCatsReferralFromReferralDetailsForm == false && ((canAddRequestForService && !AppointmentOutcomeAction.VIEW.equals(form.getLocalContext().getFormMode()) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.REQUEST_FOR_SERVICE_ACTION)));
		form.btnRequestForService().setVisible(hasReferralAssociated && ((canAddRequestForService && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.REQUEST_FOR_SERVICE_ACTION)));
		form.imgRequestForService().setVisible(hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.REQUEST_FOR_SERVICE_ACTION));
				
		//wdev-19933
	
		boolean canTransferOfCare = form.getLocalContext().getAppointmentOutcomeConfig() != null 
										&& Boolean.TRUE.equals(form.getLocalContext().getAppointmentOutcomeConfig().getCanTransferOfCare());

		form.btnTransferOfCare().setEnabled(hasReferralAssociated && isChildCatsReferralFromReferralDetailsForm == false && ((canTransferOfCare && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.TRANSFER_OF_CARE)));
		form.btnTransferOfCare().setVisible(hasReferralAssociated && ((canTransferOfCare && !AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode))
													|| hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.TRANSFER_OF_CARE)));
		form.imgTransferOfCare().setVisible(hasRecordedOutcomeAction(form.getLocalContext().getAppointment(), AppointmentAction.TRANSFER_OF_CARE));

		
		
		//---------------
		
		//
		//--------------------------------------------------------------------------------------------------------------------------------------------------------
		
		boolean hasRoleRight = engine.hasRight(AppRight.CAN_UNDO_APPOINTMENT_OUTCOME);

		form.btnRIEOutcomeActions().setEnabled(!isDeniedAction(AppointmentOutcomeDialogUserAction.RIE_OUTCOME_ACTIONS));
		form.btnRIEOutcomeActions().setVisible(AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode) /* && hasRoleRight */);
		
		form.btnUndoOutcomeRetainActions().setEnabled(!isDeniedAction(AppointmentOutcomeDialogUserAction.UNDO_OUTCOME_RETAIN_ACTIONS));
		form.btnUndoOutcomeRetainActions().setVisible(AppointmentOutcomeAction.VIEW.equals(formMode) && !AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode) /* && hasRoleRight */);
		
		// SAVE text box
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnSave().setVisible(!AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode));
			form.btnSave().setEnabled(FormMode.EDIT.equals(form.getMode()) && !AppointmentOutcomeAction.RECORD.equals(formMode) && (!isCatsRefTransferred || undoOutcome));		//wdev-20812
			
			form.btnCancel().setVisible(!AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode));
			form.btnCancel().setEnabled(!AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(formMode) && !AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(formMode));
			
			form.btnClose().setVisible(AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode));
			form.btnClose().setEnabled(AppointmentOutcomeAction.VIEW_READ_ONLY.equals(formMode));
		}
	}
	
	
	private boolean isDeniedAction(AppointmentOutcomeDialogUserAction action)
	{
		if (action == null)
			return false;
		
		if (form.getLocalContext().getDeniedActions() == null)
			return false;
		
		for (int i = 0; i < form.getLocalContext().getDeniedActions().size(); i++)
		{
			if (action.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}
	
	
	//wdev-19933
	private boolean isChildCatsReferralForTransferOfcareOnAoutcomeActions(BookingAppointmentOutcomeVo record) 
	{
		if( record == null || record.getOutcomeActions() == null || record.getOutcomeActions().size() == 0)
			return false;

		for (AppointmentOutcomeActionVo action : record.getOutcomeActions())
		{
			if (action.getTransferOfCare() != null)
				return true;
		}

		return false;
	}

	
	private boolean hasRecordedOutcomeAction(BookingAppointmentOutcomeVo appointment, AppointmentAction action)
	{
		if (appointment == null || action == null)
			return false;
		
		AppointmentOutcomeActionVoCollection outcomeActions = appointment.getOutcomeActions();
		
		if (outcomeActions == null)
			return false;
		
		for (AppointmentOutcomeActionVo outcomeAction : outcomeActions)
		{
			if (action.equals(outcomeAction.getAppointmentAction()) && !Boolean.TRUE.equals(outcomeAction.getRemove()))
				return true;
		}

		return false;
	}


	private void updateOutcomeSelection(ApptOutcome oucome)
	{
		form.getLocalContext().setAppointmentOutcomeConfig(domain.getAppointmentOutcomeConfigByApptOutcomeLookup(oucome));
		
		initializeAppointmentOutcomeConfigControls();
	}
	
	
	private void initializeAppointmentOutcomeConfigControls()
	{
		if(form.getLocalContext().getAppointmentOutcomeConfig() == null)
			return;
		
		bindAppointmentOutcomeReasonCombo(form.getLocalContext().getAppointmentOutcomeConfig().getAppointmentOutcomeReasons());
	}

	
	private void bindAppointmentOutcomeReasonCombo(AppointmentOutcomeReasonVoCollection appointmentOutcomeReasons)
	{
		form.cmbOutcomeReason().clear();
		
		if(appointmentOutcomeReasons == null)
			return;
		
		for(AppointmentOutcomeReasonVo reason : appointmentOutcomeReasons)
		{
			if(reason == null || reason.getIsActive() == null || Boolean.FALSE.equals(reason.getIsActive()))
				continue;
			
			form.cmbOutcomeReason().newRow(reason.getAppointmentOutcomeReason(), reason.getAppointmentOutcomeReason().getText());
		}
	}



	/**
	 * Function used to remove an Outcome Action (with associated data) from Appointment Outcome Actions collection
	 * @param actionType - Type of Outcome Action to be removed (cannot be null)
	 */
	private void removeAction(AppointmentAction actionType)
	{
		// IF no appointment is selected at this point (that would be a gross logical error, but we can manage)
		// OR if the appointment doesn't have an appointment outcome actions collection (this would also be a logical error, but again we can manage)
		// then terminate the function
		if (form.getLocalContext().getAppointment() == null || form.getLocalContext().getAppointment().getOutcomeActions() == null)
			return;
		
		// Check the 'actionType' parameter
		// This parameter has to have a value to be possible for an action to be removed
		if (actionType == null)
			throw new CodingRuntimeException("INVALID PARAMETER VALUE - Parameter 'actionType' cannot be null in function removeAction().");
		
		// Alias for Appointment Outcome Actions collection
		AppointmentOutcomeActionVoCollection outcomeActions = form.getLocalContext().getAppointment().getOutcomeActions();
		
		
		// Iterate backwards the Appointment Outcome Actions collection 
		// and remove (mark for removal) the appointment outcome actions
		for (int i = outcomeActions.size() - 1; i >= 0; i--)
		{
			// Alias for Outcome Action iteration record
			AppointmentOutcomeActionVo outcomeAction = outcomeActions.get(i);
			

			// If the action type matches Outcome Action type begin removal process
			if (actionType.equals(outcomeAction.getAppointmentAction()))	// TEST: Additional condition necessary 'outcomeAction.getRemove() is false'
			{
				// If the Outcome Action was saved - then mark it for removal
				// and remove it when committing Appointment Outcome record
				if (outcomeAction.getID_AppointmentOutcomeAction() != null)
				{
					outcomeAction.setRemove(true);
				}
				else	// Otherwise simply remove it from Appointment Outcome Actions collection
				{
					outcomeActions.remove(outcomeAction);
				}
			}
		}
	}

	
	/**
	 * Function used to add an Outcome Action (with associated data) to Appointment Outcome Actions collection
	 * @param actionType - Type of Outcome Action to be added (cannot be null)
	 * @param actionData - Data to associate with Outcome Action
	 */
	private void addAction(AppointmentAction actionType, Object actionData)
	{
		if (form.getLocalContext().getAppointment() == null)
			throw new CodingRuntimeException("LOGICAL ERROR - An appointment should have been selected at this point");
		
		// Check outcome actions collection (create a new Appointment Outcome Actions collection if one does not exit yet)
		if (form.getLocalContext().getAppointment().getOutcomeActions() == null)
		{
			form.getLocalContext().getAppointment().setOutcomeActions(new AppointmentOutcomeActionVoCollection());
		}
		// Alias for Appointment Outcome actions
		AppointmentOutcomeActionVoCollection outcomeActions = form.getLocalContext().getAppointment().getOutcomeActions();
		

		// Find the action to update, or if no action can be found create a new action
		AppointmentOutcomeActionVo outcomeAction = getOrCreateAppointmentAction(outcomeActions, actionType);
		
		// Add data to Outcome Action (if data was present it will update it)
		// based on the type of action
		if (AppointmentAction.WAITING_LIST_ACTION.equals(actionType))
		{
			outcomeAction.setWaitingListAction((PatientElectiveListAddLaterVo) actionData);
		}
		else if (AppointmentAction.PLANNED_LIST_ACTION.equals(actionType))
		{
			outcomeAction.setPlannedListAction((PatientElectiveListAddLaterVo) actionData);
		}
		else if (AppointmentAction.BOOK_APPT_ACTION.equals(actionType))
		{
			outcomeAction.setFutureAppointment((FutureAppointmentDetailsVo) actionData);
		}
		else if (AppointmentAction.TRANSFER_ACTION.equals(actionType))
		{
			outcomeAction.setInterProviderTransfer((InterProviderTransferOutVo) actionData);
		}
		else if (AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(actionType))
		{
			outcomeAction.setRequestsForService((LinkedCatsReferralForOutcomeVoCollection) actionData);
		}
		else if (AppointmentAction.TRANSFER_OF_CARE.equals(actionType))
		{
			outcomeAction.setTransferOfCare((CatsReferralForRequestServiceVo) actionData);
		}
	}


	/**
	 * Function used to find the appropriate Appointment Outcome Action, or if one is not found create a new one
	 * @param outcomeActions
	 * @param actionType
	 * @return
	 */
	private AppointmentOutcomeActionVo getOrCreateAppointmentAction(AppointmentOutcomeActionVoCollection outcomeActions, AppointmentAction actionType)
	{
		// Because of the reference mechanism in JAVA the Appointment Outcome Actions collection cannot be created in this function.
		// It must exist prior to calling this function and it's value must be passed to this function
		if (outcomeActions == null)
			throw new CodingRuntimeException("LOGICAL ERROR - The Appointment Outcome Action collection cannot be create in function getOrCreateAppointmentAction(). It must exist previous and it's value passed as a parameter");
		
		// Check the 'actionType' parameter
		// This parameter has to have a value to be possible for an action to be found
		if (actionType == null)
			throw new CodingRuntimeException("INVALID PARAMETER VALUE - Parameter 'actionType' cannot be null in function getOrCreateAppointmentAction().");
		

		// Iterate the Appointment Outcome Actions collection to find the appropriate action
		for (AppointmentOutcomeActionVo outcomeAction : outcomeActions)
		{
			// If an action is found - clear the remove flag
			if (actionType.equals(outcomeAction.getAppointmentAction()))
			{
				outcomeAction.setRemove(false);
				return outcomeAction;
			}
		}
		
		// If no Appointment Outcome Action was found at this point - create a brand new one
		AppointmentOutcomeActionVo outcomeAction = new AppointmentOutcomeActionVo();
		outcomeAction.setAppointmentAction(actionType);
		outcomeAction.setRemove(false);
		outcomeAction.setOutcomeOfAction(OutcomeAction.DO_LATER);
		// Add created action to Appointment Outcome Action
		outcomeActions.add(outcomeAction);
		
		// Return the appointment outcome action
		return outcomeAction;
	}


//	private boolean wasDO_LATERAlreadyAdded(AppointmentAction apptAction, OutcomeAction outcomeAction)
//	{
//		if(form.getLocalContext().getAppointment() == null || form.getLocalContext().getAppointment().getOutcomeActions() == null)
//			return false;
//		
//		if(!OutcomeAction.DO_LATER.equals(outcomeAction))
//			return false;
//		
//		for(AppointmentOutcomeActionVo action : form.getLocalContext().getAppointment().getOutcomeActions())
//		{
//			if(action == null)
//				continue;
//			
//			if(!OutcomeAction.DO_LATER.equals(action.getOutcomeOfAction()))
//				continue;
//			
//			if(AppointmentAction.WAITING_LIST_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.WAITING_LIST_ACTION.equals(apptAction))
//				return true;
//			
//			if(AppointmentAction.PLANNED_LIST_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.PLANNED_LIST_ACTION.equals(apptAction))
//				return true;
//			
//			if(AppointmentAction.BOOKED_LIST_ACTION.equals(action.getAppointmentAction()) && AppointmentAction.BOOKED_LIST_ACTION.equals(apptAction))
//				return true;
//		}
//		
//		return false;
//	}

	
	/**
	 * Function used to populate the 'Appointment Outcomes' configured for the selected appointment status (DNA, Not Seen, Seen)
	 * @param status
	 * @param rttStatusPoint 
	 */
	private void bindAppointmentOutcomes(Status_Reason status, RTTStatusPointRefVo rttStatusPoint)
	{
		// TEST: WDEV-20332 - Check if the appointment outcome values retrieved now correspond to the initial issue and configuration
		AppointmentOutcomeConfigVoCollection appointmentOutcomes = domain.listAppointmentOutcomeByAppointmentStatusAndRTTSTatus(status, rttStatusPoint);
		
		form.cmbOutcome().clear();
		
		if (appointmentOutcomes == null)
		{
			updateOutcomeSelection(null);
			return;
		}
		
		for (AppointmentOutcomeConfigVo outcome : appointmentOutcomes)
		{
			form.cmbOutcome().newRow(outcome.getAppointmentOutcome(), outcome.getAppointmentOutcome().getText());
		}
		
		if (appointmentOutcomes.size() == 1)
		{
			form.cmbOutcome().setValue(appointmentOutcomes.get(0).getAppointmentOutcome());
			updateOutcomeSelection(form.cmbOutcome().getValue());
		}
	}


	private boolean performRIE_AppointmentOutcomeAndAssociatedActions()
	{
		try
		{
			Integer returnCode = domain.markAsRIE_OutcomeAndActions(form.getLocalContext().getAppointment());	 	
			
			if (AppointmentOutcomeDialogImpl.UNDO_OUTCOME_SUCCESS_NOT_LAST_IMPACT.equals(returnCode))
				engine.showMessage(MESSAGE_UNDO_OUTCOME_NOT_LAST_CLOCK_IMPACT);
			
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			open(form.getLocalContext().getFormMode());
			return false;
		}
	}
	
	
	private boolean performUndo_AppointmentOutcomeAndAssociatedActions()
	{
		try
		{
			// Undo the appointment Outcome (THE RTT CLOCK IMPACT)
			Integer returnCode = domain.undoAppointmentOutcome(form.getLocalContext().getAppointment());
			
			if (AppointmentOutcomeDialogImpl.UNDO_OUTCOME_SUCCESS_NOT_LAST_IMPACT.equals(returnCode))
			{
				open(AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT);
				engine.showMessage(MESSAGE_UNDO_OUTCOME_NOT_LAST_CLOCK_IMPACT);
				return true;
			}
			
			open(AppointmentOutcomeAction.EDIT_RTT_IMPACT);
			
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			open(form.getLocalContext().getFormMode());
			return false;
		}
	}
	


	//wdev-19933
	protected void onBtnTransferOfCareClick() throws PresentationLogicException
	{
		CatsReferralForRequestServiceVo requestForServiceCatsReferral = getTransferOfCareReferral(AppointmentAction.TRANSFER_OF_CARE);
		form.getGlobalContext().RefMan.setChildCatsReferral(requestForServiceCatsReferral);
		CatsReferralParentVo parentCatsRef = domain.getParentCatsReferrall(form.getGlobalContext().RefMan.getCatsReferral());
		form.getLocalContext().setParentCatsReferral(parentCatsRef);
		Boolean openInReadOnlyMode = AppointmentOutcomeAction.VIEW.equals(form.getLocalContext().getFormMode()) || AppointmentOutcomeAction.VIEW_READ_ONLY.equals(form.getLocalContext().getFormMode());
		
		engine.open(form.getForms().RefMan.TransferOfCare, new Object[] {parentCatsRef,openInReadOnlyMode,form.getLocalContext().getAppointment(),ReferralAppointmentOutcomeAction.TRANSFER_OF_CARE},"Transfer of Care"); //WDEV-21195 
		
	}


	


	private CatsReferralForRequestServiceVo getTransferOfCareReferral(AppointmentAction action)
	{
			if (action == null)
				return null;
			
			BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
			
			if (appointment == null || appointment.getOutcomeActions() == null)
				return null;
			
			for (AppointmentOutcomeActionVo outcomeAction : appointment.getOutcomeActions())
    		{
				if (action.equals(outcomeAction.getAppointmentAction()) && !Boolean.TRUE.equals(outcomeAction.getRemove()))
				{
					return outcomeAction.getTransferOfCare();
				}
    		}
			
			return null;
	}



	@Override
	protected void onQmbSeenByTextSubmited(String value) throws PresentationLogicException
	{
		
		BookingAppointmentOutcomeVo appointment = form.getLocalContext().getAppointment();
		
		if (appointment == null)
			return;
		
		HcpLiteVoCollection hcps = domain.getListOwnersForSession(value, appointment.getSession());
		
		form.qmbSeenBy().clear();
		
		if(hcps == null)
			 return;
		
		for(int i=0; i < hcps.size(); i++)
		{
			form.qmbSeenBy().newRow(hcps.get(i), hcps.get(i).getIMosName());
		}
		
		if(hcps.size() == 1)
		{
			form.qmbSeenBy().setValue(hcps.get(0));
		}
		else if(hcps.size() > 1)
		{
			form.qmbSeenBy().showOpened();
		}
		
	}

	private ElectiveListAddLaterDlgOpenMode getElectiveListMode(PatientElectiveListAddLaterVo patientElectiveList, AppointmentOutcomeAction customFormMode)
	{
		if (AppointmentOutcomeAction.VIEW.equals(customFormMode) || AppointmentOutcomeAction.VIEW_READ_ONLY.equals(customFormMode))
			return ElectiveListAddLaterDlgOpenMode.READ_ONLY;
		
		if (AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(customFormMode) || AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(customFormMode))
		{
			if (patientElectiveList != null)
				return ElectiveListAddLaterDlgOpenMode.UNDOOUTCOME;
		}
		
		return ElectiveListAddLaterDlgOpenMode.EDIT;
	}

	
	//WDEV-21241 //WDEV-22914
	protected void onBtnPacsClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().OCRR.CentricityWebPACSViewer, true, true);
	}
}
