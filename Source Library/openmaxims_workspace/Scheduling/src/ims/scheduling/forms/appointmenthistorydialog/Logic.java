//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3600.21204)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.appointmenthistorydialog;

import ims.framework.enumerations.DialogResult;
import ims.scheduling.forms.appointmenthistorydialog.GenForm.grdHistoryRow;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentShortVo;
import ims.scheduling.vo.SessionLitWithProfileVo;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int CLINIC_LENGTH = 49;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
	}

	private void initialise(Object[] args)
	{
		if (args != null && args.length == 1)
		{
			if (args[0] instanceof Appointment_StatusVoCollection)
			{
				populatApptHistoryGrid((Appointment_StatusVoCollection) args[0]);
				Appointment_StatusVoCollection tempColl = (Appointment_StatusVoCollection) args[0]; //wdev-17771
				if( tempColl != null && tempColl.size() > 0)
					populateLabels(domain.getBookingAppointmentByAppStatusfromHistory(tempColl.get(0)));
				
			}
		}

	}

	//wdev-17771
	private void clearLabels()
	{
		form.lblDAppointmentDateAndTime().setValue(null);
		form.lblDClinic().setValue(null);
		form.lblDService().setValue(null);
		form.lblDCurrentStaus().setValue(null);
		form.lblDCancellationType().setValue(null);
	}
	//WDEV-21755
	private void setClinicLabelValue(String clinic) 
	{
		form.lblDClinic().setValue(null);
		form.lblDClinic().setTooltip(null);
		
		if(clinic == null || clinic.length() == 0)
			return;
		
		form.lblDClinic().setValue(clinic.length() > CLINIC_LENGTH ? clinic.substring(0, CLINIC_LENGTH) + "..." : clinic);
		form.lblDClinic().setTooltip(clinic);
	}
	//WDEV-21755 ends here
	
	private void populateLabels( Booking_AppointmentShortVo appt)
	{
		clearLabels();
		if( appt == null )
			return;
		String sdate = appt.getAppointmentDateIsNotNull() ? appt.getAppointmentDate().toString():"";
		String stime = appt.getApptStartTimeIsNotNull() ? appt.getApptStartTime().toString():"";
		form.lblDAppointmentDateAndTime().setValue(sdate+" "+stime);
		SessionLitWithProfileVo tempvo = domain.getSessionwithProfile(appt.getSession());

		setClinicLabelValue(tempvo != null && tempvo.getSch_Profile() != null ? tempvo.getSch_Profile().getName() : null); //WDEV-21755

		form.lblDService().setValue(appt.getSessionIsNotNull() && appt.getSession().getServiceIsNotNull() ? appt.getSession().getService().getServiceName():"");
		form.lblDCurrentStaus().setValue(appt.getApptStatusIsNotNull() ? appt.getApptStatus().toString():"");
		
		if( form.grdHistory().getRows().size() > 0 && form.grdHistory().getRows().get(form.grdHistory().getRows().size() - 1).getValue() instanceof Appointment_StatusVo )
		{
			Appointment_StatusVo tempstatus = (Appointment_StatusVo) form.grdHistory().getRows().get(form.grdHistory().getRows().size() - 1).getValue();
			if( tempstatus.getStatusIsNotNull() && Status_Reason.CANCELLED.equals(tempstatus.getStatus()))
				form.lblDCancellationType().setValue(appt.getApptStatusReasIsNotNull()  ? appt.getApptStatusReas().toString():"");
		}
		
	}
	private void populatApptHistoryGrid(Appointment_StatusVoCollection collection)
	{
		Appointment_StatusVoCollection clone = (Appointment_StatusVoCollection) collection.clone();
		
		while (clone.size() > 0)
		{
			Appointment_StatusVo vo = getVoWithLowestId(clone);
			clone.remove(vo);
			
			grdHistoryRow row = form.grdHistory().getRows().newRow();
			
			String apptDateTime = "";
			
			if (vo.getApptDate() != null)
			{
				apptDateTime += vo.getApptDate().toString() + " ";
			}
			
			if (vo.getApptTime() != null)
			{
				apptDateTime += vo.getApptTime().toString();
			}
			
			row.setColApptDateTime(apptDateTime);
			row.setColStatusDateTime(vo.getStatusChangeDateTime() != null ? vo.getStatusChangeDateTime().toString() : "");
			
			//----------
			if (vo.getStatusIsNotNull())
				row.setColStatus(vo.getStatus().getText());
			
			if (vo.getCancellationReasonIsNotNull())
			{
				row.setColReason(vo.getCancellationReason().toString());
				row.setCellColReasonTooltip(vo.getCancellationReason().toString());
			}
			
			if (vo.getCommentIsNotNull()) //WDEV-15458
			{
				row.setColComment(vo.getComment().toString());
				row.setCellColCommentTooltip(vo.getComment().toString());//wdev-17771
			}
			
			if( vo.getSysInformationIsNotNull() && vo.getSysInformation().getCreationUser() != null) //wdev-17771
				row.setColumnRecordingUser(vo.getSysInformation().getCreationUser().toString());
			
			if (Boolean.TRUE.equals(vo.getWasLetterPrinted()))
			{
				row.setColPrinted(form.getImages().Core.Print16);
				row.setCellColPrintedTooltip("Letter Printed");
			}
			
			row.setValue(vo); //wdev-17771
			
		}

	}

	private Appointment_StatusVo getVoWithLowestId(Appointment_StatusVoCollection collection)
	{
		for (int i = 0; i < collection.size(); i++)
		{
			if (isLowestId(collection.get(i).getID_Appointment_Status(), collection))
				return collection.get(i);
		}
		return null;
	}

	private boolean isLowestId(Integer appointment_Status, Appointment_StatusVoCollection collection)
	{
		for (int i = 0; i < collection.size(); i++)
		{
			if (appointment_Status > collection.get(i).getID_Appointment_Status())
				return false;
		}
		return true;
	}

	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
