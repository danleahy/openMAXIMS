//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3110.16630)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.printappointment;

import ims.admin.vo.ReportListVo;
import ims.admin.vo.ReportListVoCollection;
import ims.admin.vo.ReportTemplateLiteVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportsCategoryListVo;
import ims.admin.vo.ReportsCategoryListVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

import java.io.File;
import java.security.SecureRandom;
import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final String	COLUMN_NAME			= "0";
	
	private static final int PREVIEW_REPORT = 1;
	private static final int PRINT_REPORT = 2;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		ReportTemplateLiteVoCollection templates = domain.getTemplates(form.getGlobalContext().Scheduling.getAppointmentIds());		
		createDynamicGridColumns();
		populateReportsGrid(templates);
		
		form.ccPrinters().initialize(domain.getCurrentLocation(), PrinterScope.DEFAULT, false); //WDEV-19381
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Object value = form.dyngrdReports().getValue();
		
		if(value == null || !(value instanceof ReportTemplateLiteVo))
		{
			engine.showMessage("Please select a template !");
			return;
		}		
		
		printReport((ReportTemplateLiteVo)value, PREVIEW_REPORT);//WDEV-19381
		
		//WDEV-23016
		//engine.close(DialogResult.OK);
	}
	
	private boolean printReport(ReportTemplateLiteVo voTemplate,int action) //WDEV-19381
	{
		form.getLocalContext().setSelectedReportTemplate(domain.getReportTemplateVo(voTemplate));
		
		ArrayList ids = form.getGlobalContext().Scheduling.getAppointmentIds();

		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		String[] obj = null;
		try
		{
			obj = domain.getReportAndTemplate(voTemplate.getReport().getBoId(), voTemplate.getID_TemplateBo());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("Error retrieving report template !\r\n" + e.getMessage());
			return false;
		}

		if (obj == null || obj.length == 0)
		{
			engine.showMessage("I could not get the report and template !");
			return false;
		}

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		for(int i=0;i<ids.size();i++)
		{
			client.addSeed(new SeedValue("APPT_ID", ids.get(i), Integer.class));
			client.addSeed(new SeedValue("Booking_Appointment_id", ids.get(i), Integer.class));
		}
		
		PatientShort ps = form.getGlobalContext().Core.getPatientShort();
		if (ps != null)
		{
			client.addSeed(new SeedValue("PID", ps.getID_Patient(), Integer.class));
		}
		
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return false;
		}

		//WDEV-19381
		if(action == PREVIEW_REPORT)
		{
			engine.openUrl(resultUrl);
		}
		else if(action == PRINT_REPORT)
		{
			return createReport(client, voTemplate, urlReportServer, action);
		}
		
		return true;
	}
	
	private void populateReportsGrid(ReportTemplateLiteVoCollection templates)
	{
		if (templates == null ||
				(templates != null &&
						templates.size() == 0))
			return;
		
		ReportListVoCollection coll = new ReportListVoCollection();
		for (int i = 0; i < templates.size(); i++)
		{
			ReportTemplateLiteVo rep = templates.get(i);
			if (rep != null &&
				rep.getReportIsNotNull())
			{
					coll.add(domain.getReport(rep.getReport()));
			}			
		}
		
		populateReports(coll);
	}

	private void addCategory(DynamicGridRow rowParent, ReportsCategoryListVo voCategory)
	{
		if (voCategory == null)
			return;

		DynamicGridRow categoryRow = null;
		if (rowParent == null)
			categoryRow = form.dyngrdReports().getRows().newRow();
		else
			categoryRow = rowParent.getRows().newRow();

		categoryRow.setValue(voCategory);
		categoryRow.setSelectable(false);
		categoryRow.setCollapsedImage(form.getImages().Core.ReportCategory);
		categoryRow.setExpandedImage(form.getImages().Core.ReportCategory);

		DynamicGridCell cellName = createCell(categoryRow, getColumn(COLUMN_NAME));
		cellName.setValue(voCategory.getName());

		if (voCategory.getSubCategoriesIsNotNull() && voCategory.getSubCategories().size() > 0)
		{
			categoryRow.setExpanded(true);
			addSubcategories(categoryRow, voCategory.getSubCategories());
		}
	}

	private void addSubcategories(DynamicGridRow rowParent, ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		for (int i = 0; i < voReportsCategoryColl.size(); i++)
		{
			addCategory(rowParent, voReportsCategoryColl.get(i));
		}
	}

	private void populateReports(ReportListVoCollection coll)
	{
		if (coll == null)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			ReportListVo voReportList = coll.get(i);
			DynamicGridRow row = getReportRow(form.dyngrdReports().getRows(), voReportList);
			addReport(row, voReportList);
		}
	}
	
	private void createDynamicGridColumns()
	{
		DynamicGridColumn columnName = form.dyngrdReports().getColumns().newColumn("Name", COLUMN_NAME);
		columnName.setWidth(-1);
	}
	
	private DynamicGridColumn getColumn(String identifier)
	{
		return form.dyngrdReports().getColumns().getByIdentifier(identifier);
	}
	
	private DynamicGridRow getReportRow(DynamicGridRowCollection parentRows, ReportListVo voReportList)
	{
		if (parentRows == null)
			return null;

		for (int i = 0; i < parentRows.size(); i++)
		{
			DynamicGridRow dynamicGridRow = parentRows.get(i);
			Object value = dynamicGridRow.getValue();
			if (value instanceof ReportsCategoryListVo)
			{
				ReportsCategoryListVo voReportsCategory = (ReportsCategoryListVo) value;
				if (voReportsCategory.getReports().indexOf(voReportList) >= 0)
				{
					return dynamicGridRow;
				}
			}

			if (dynamicGridRow.getRows() != null && dynamicGridRow.getRows().size() > 0)
			{
				DynamicGridRow row = getReportRow(dynamicGridRow.getRows(), voReportList);
				if (row != null)
					return row;
			}
		}

		return null;
	}
	
	private void addReport(DynamicGridRow rowParent, ReportListVo voReportList)
	{
		DynamicGridRow reportRow = null;
		
		if(voReportList.getTemplatesIsNotNull() && voReportList.getTemplates().size() == 0)
			return;
		
		if (rowParent == null)
			reportRow = form.dyngrdReports().getRows().newRow();
		else
			reportRow = rowParent.getRows().newRow();

		reportRow.setValue(voReportList);
		reportRow.setSelectable(false);
		reportRow.setCollapsedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpandedImage(form.getImages().Core.ReportDesigner);

		DynamicGridCell cellName = createCell(reportRow, getColumn(COLUMN_NAME));
		cellName.setValue(voReportList.getReportName());

		if(voReportList.getImsIdIsNotNull() && voReportList.getImsId().intValue() > 0)
		{
			reportRow.setTextColor(Color.Blue);
		}
		
		addTemplates(voReportList, reportRow);
	}

	private void addTemplates(ReportListVo voReportList, DynamicGridRow reportRow)
	{
		for (int i = 0; voReportList.getTemplatesIsNotNull() && i < voReportList.getTemplates().size(); i++)
		{
			if(voReportList.getTemplates().get(i) != null && !Boolean.TRUE.equals(voReportList.getTemplates().get(i).getIsActive()))//WDEV-23494
				continue;
			ReportTemplateLiteVo reportTemplateLiteVo = voReportList.getTemplates().get(i);

			DynamicGridRow templateRow = reportRow.getRows().newRow();
			templateRow.setValue(reportTemplateLiteVo);
			templateRow.setCollapsedImage(form.getImages().Core.TemplateReport);
			templateRow.setExpandedImage(form.getImages().Core.TemplateReport);
			DynamicGridCell cellTemplateName = createCell(templateRow, getColumn(COLUMN_NAME));
			cellTemplateName.setValue(reportTemplateLiteVo.getName());
			
			if(voReportList.getImsIdIsNotNull() && voReportList.getImsId().intValue() > 0)
			{
				templateRow.setTextColor(Color.Blue);
			}
			
		}
	}
	
	private DynamicGridCell createCell(DynamicGridRow row, DynamicGridColumn column)
	{
		DynamicGridCell cell = row.getCells().get(column);
		if (cell == null)
		{
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);
		}

		return cell;
	}
	
	// WDEV-16553 
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);		
	}
	
	//WDEV-19381
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		if(form.ccPrinters().getSelectedPrinter() == null)
		{
			engine.showMessage("Please select a printer !");
			return;
		}

		Object value = form.dyngrdReports().getValue();
		
		if(value == null || !(value instanceof ReportTemplateLiteVo))
		{
			engine.showMessage("Please select a template !");
			return;
		}		
		
		if(printReport((ReportTemplateLiteVo)value,PRINT_REPORT))
		{
			if (savePatientDocument())
				engine.close(DialogResult.OK);
		}
		
		
	}
	
	//WDEV-19381
	private boolean savePatientDocument() 
	{
		
		if (form.getLocalContext().getServerDocument()==null)
			return false;
		
		ReportTemplateVo template = form.getLocalContext().getSelectedReportTemplate();
		PatientDocumentVo patientDocumentToSave = null;
		
		if (form.chkStoreCopy().getValue())
		{
			patientDocumentToSave = populatePatientDocumentVo(form.getLocalContext().getServerDocument(),template.getReport());
    		
    		// Validate Patient Assessment and Patient Document records
    		String[] errors = patientDocumentToSave.validate();
    		if (errors != null && errors.length > 0)
    		{
    			engine.showErrors(errors);
    			return false;
    		}
		}
		try
		{
			domain.savePatientDocument(patientDocumentToSave, form.getGlobalContext().Scheduling.getAppointmentIds());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			
			StringBuilder path = new StringBuilder();
			
			path.append(ConfigFlag.GEN.PDF_STORE_PATH.getValue());
			
			if(!(path.toString().endsWith("/") || path.toString().endsWith("\\")))
				path.append("/");
			
			path.append(patientDocumentToSave.getServerDocument().getFileName());
			
			// Attempt to delete uploaded document if stale occurs
			File file = new File(path.toString());
			
			if (file.exists() && file.canWrite())
				file.delete();
			
			return false;
		}
		
		return true;
	}
	
	//WDEV-19381
	private PatientDocumentVo populatePatientDocumentVo(ServerDocumentVo serverDocument, ReportVo reportVo)
	{
		if (serverDocument==null)
			return null;

		// Create Patient Document VO
		PatientDocumentVo patientDocument = new PatientDocumentVo();

		patientDocument.setPatient(form.getGlobalContext().Core.getPatientShort());

		patientDocument.setEpisodeofCare(form.getGlobalContext().Core.getCurrentCareContext()!=null ? form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare() : null);
		patientDocument.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
		if (reportVo!=null)
		{
			patientDocument.setName(reportVo.getReportName());
		}
		
		patientDocument.setServerDocument(serverDocument);
		patientDocument.setCreationType(DocumentCreationType.GENERATED);
	
		patientDocument.setCategory(DocumentCategory.ADHOC_DOCUMENT);
	
		patientDocument.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		
		patientDocument.setRecordingUser(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		patientDocument.setRecordingDateTime(new DateTime());
		patientDocument.setAuthoringHCP(domain.getHcpLiteUser() instanceof HcpLiteVo ? (HcpRefVo)domain.getHcpLiteUser() : null);
		patientDocument.setAuthoringDateTime(new DateTime());
		
		// Create a new PatientDocumentStatusVo
		PatientDocumentStatusVo status = new PatientDocumentStatusVo();
		status.setCorrespondenceStatus(DocumentStatus.COMPLETED);
		status.setRecordingUser(patientDocument.getRecordingUser());
		status.setRecordingDateTime(patientDocument.getRecordingDateTime());

		patientDocument.setCurrentDocumentStatus(status);
		patientDocument.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
		patientDocument.getDocumentStatusHistory().add(status);
		
		patientDocument.setDocumentDate(form.getGlobalContext().Core.getCurrentCareContext() != null && form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime()!=null ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate() : patientDocument.getRecordingDateTime().getDate());
		patientDocument.setResponsibleHCP(form.getGlobalContext().Core.getCurrentCareContext() != null  && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP() : null);
		patientDocument.setSpecialty(form.getGlobalContext().Core.getCurrentCareContext() != null  && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getSpecialty() : null);
		
		return patientDocument;
	}
	
	private boolean createReport(QueryBuilderClient client, ReportTemplateLiteVo voTemplate, String urlReportServer, int action)
	{
		try
		{
			byte[] reportContent = null;
			
			ReportTemplateVo reportTemplateVo = form.getLocalContext().getSelectedReportTemplate();
			
			if(form.ccPrinters().getSelectedPrinter() == null || action == PREVIEW_REPORT) //WDEV-23493
				reportContent = client.buildReport(reportTemplateVo.getReport().getReportXml(), reportTemplateVo.getTemplateXml(), urlReportServer, "PDF", "",1);
			else
				reportContent = client.buildReport(reportTemplateVo.getReport().getReportXml(), reportTemplateVo.getTemplateXml(), urlReportServer, "PDF", form.ccPrinters().getSelectedPrinter().getIPrinterName(),1);
			
			String fileName = generateName() + ".pdf";
			engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), reportContent, fileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/");//WDEV-15470
			
			String path = null;// client.buildReportAndUpload(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, printerName, 1);
			
			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();
			
			if(fileName != null && fileName.length() > 0)
				path = year + "/" + month + "/" + day + "/" + fileName;//WDEV-15470

			// Create Server document VO if uploads succeeds
			ServerDocumentVo document = new ServerDocumentVo();
			document.setFileName(path);
			document.setFileType(FileType.PDF);
			
			form.getLocalContext().setServerDocument(document);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return false;
		} 
		return true;
	}
	
	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
	
	
	
}
