//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3040.26452)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.patientappointmentmanagement;

import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.patientappointmentmanagement.GenForm.grdApptsRow;
import ims.scheduling.forms.patientappointmentmanagement.GenForm.grdPatientsRow;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.Booking_AppointmentShortVo;
import ims.scheduling.vo.Booking_AppointmentShortVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.LateTimeArrivalRecordVo;
import ims.scheduling.vo.PatientAppointmentManagementSearchCriteriaVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final int UNDO_ARRIVAL_IND = 1;	//wdev-12090
	private static final int UNDO_DNA_IND = 2;		//wdev-12090

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		//WDEV-19389 
		if (form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteriaIsNotNull())
		{
			setSearchCriteria(form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria());
			patientSearch(true);
		}
		else
			form.getGlobalContext().Core.setPatientShort(null);
		
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);//WDEV-19543
	}

	private void initialize()
	{
		form.dteAppt().setValue(new Date());
		form.getLocalContext().setselectedPatient(null);
		form.lblDisplayPatId().setValue((PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText()) + ":");
		form.grdPatients().setHospitalNumberCaption((PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText()));
				
		clearContexts();
	}
	
	private PatientAppointmentManagementSearchCriteriaVo getSearchCriteria()
	{
		PatientAppointmentManagementSearchCriteriaVo searchCriteria = new PatientAppointmentManagementSearchCriteriaVo();
		
		searchCriteria.setIDValue(form.txtDisplayId().getValue());
		searchCriteria.setSurname(form.txtSurname().getValue());
		searchCriteria.setForename(form.txtName().getValue());
		searchCriteria.setDOB(form.pdtDate().getValue());
		
		return searchCriteria;
	}
	
	private PatientAppointmentManagementSearchCriteriaVo updateSearchCriteria(PatientAppointmentManagementSearchCriteriaVo shortSearchCriteria)
	{
		if (shortSearchCriteria == null)
			return null;
		shortSearchCriteria.setPatient(form.grdPatients().getValue());
		shortSearchCriteria.setDate(form.dteAppt().getValue());
		
		return shortSearchCriteria;
	}
	
	private void setSearchCriteria(PatientAppointmentManagementSearchCriteriaVo patientAppointmentManagementSearchCriteriaVo) 
	{
		form.txtDisplayId().setValue(patientAppointmentManagementSearchCriteriaVo.getIDValue());
		form.txtSurname().setValue(patientAppointmentManagementSearchCriteriaVo.getSurname());
		form.txtName().setValue(patientAppointmentManagementSearchCriteriaVo.getForename());
		form.pdtDate().setValue(patientAppointmentManagementSearchCriteriaVo.getDOB());
	}

	private void setPatientSearchCriteria(Boolean selectPatient, PatientAppointmentManagementSearchCriteriaVo patientAppointmentManagementSearchCriteriaVo)
	{
		if (selectPatient && patientAppointmentManagementSearchCriteriaVo != null &&
			patientAppointmentManagementSearchCriteriaVo.getPatientIsNotNull() &&
			( (form.getGlobalContext().Core.getPatientShortIsNotNull() && 
			   form.getGlobalContext().Core.getPatientShort().equals(patientAppointmentManagementSearchCriteriaVo.getPatient())) || 
			 !form.getGlobalContext().Core.getPatientShortIsNotNull() ))
		{
				form.grdPatients().setValue(form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria().getPatient());
				form.dteAppt().setValue(patientAppointmentManagementSearchCriteriaVo.getDate());
				try
				{
					onGrdPatientsSelectionChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}
		}	
		else
		{
			form.getGlobalContext().Core.setPatientShort(null);
		}
	}

	protected void onGrdApptsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setWardAttendance(form.grdAppts().getValue().getIsWardAttendance());
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().Scheduling.hideAllPatientAppointmentManagementMenuItems();
		
		if(form.grdPatients().getValue() == null)
			return;
		
		
		//wdev-20812
		boolean isCatsRefTransferred = false;
		if( form.grdAppts().getValue() != null )
		{
			CatsReferralListVo voReferralR = domain.getCatsReferralForAppointment(form.grdAppts().getValue());
			if( voReferralR != null && voReferralR.getCurrentStatusIsNotNull() && voReferralR.getCurrentStatus().getReferralStatusIsNotNull() )
			{
				if( ReferralApptStatus.TRANSFERRED.equals(voReferralR.getCurrentStatus().getReferralStatus()))
					isCatsRefTransferred = true;
			}
		}
		
		Booking_AppointmentShortVo voAppt = form.grdAppts().getValue();
		
		//WDEV8891
		form.getContextMenus().Scheduling.getPatientAppointmentManagementCANCELLEDItem().setVisible(form.getMode().equals(FormMode.VIEW) && voAppt != null  && voAppt.getApptStatusIsNotNull()  && voAppt.getApptStatus().equals(Status_Reason.BOOKED) && !isCatsRefTransferred);	//wdev-20812
		
		boolean isApptSelected = voAppt != null;	
		Status_Reason currentApptStatus = voAppt != null ? voAppt.getApptStatus() : null;		
		//WDEV10883
		form.getContextMenus().Scheduling.getPatientAppointmentManagementUNDO_ARRIVALItem().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& voAppt != null  && voAppt.getApptStatusIsNotNull()  && voAppt.getApptStatus().equals(Status_Reason.ARRIVAL) && !isCatsRefTransferred);	//wdev=20812
		
		//wdev-12090
		form.getContextMenus().Scheduling.getPatientAppointmentManagementUNDO_DNAItem().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& voAppt != null  && voAppt.getApptStatusIsNotNull()  && voAppt.getApptStatus().equals(Status_Reason.DNA) && (voAppt.getIsCABBooking().equals(Boolean.FALSE) || !voAppt.getIsCABBookingIsNotNull()) && !isCatsRefTransferred);	//wdev-20812
		//----------

		
		
		if(currentApptStatus != null 
			&& voAppt.getAppointmentDateIsNotNull() //wdev-6529
			&& voAppt.getAppointmentDate().isLessOrEqualThan(new Date())) //wdev-6529
		{
			form.getContextMenus().Scheduling.getPatientAppointmentManagementATTENDEDItem().setVisible(form.getMode().equals(FormMode.VIEW) && isApptSelected && currentApptStatus.equals(Status_Reason.BOOKED) && !isCatsRefTransferred);	//wdev-20812
			form.getContextMenus().Scheduling.getPatientAppointmentManagementSEENItem().setVisible(form.getMode().equals(FormMode.VIEW) && isApptSelected && currentApptStatus.equals(Status_Reason.ARRIVAL) && !isCatsRefTransferred);		//wdev-20812
			
			boolean hasElectiveList = voAppt != null && voAppt.getElectiveList() != null;
			
			form.getContextMenus().Scheduling.getPatientAppointmentManagementOUTCOMEItem().setVisible(form.getMode().equals(FormMode.VIEW) && isApptSelected  &&(!currentApptStatus.equals(Status_Reason.DNA)) && ((currentApptStatus.equals(Status_Reason.SEEN) ||  currentApptStatus.equals(Status_Reason.ARRIVAL)) || (voAppt.getApptStatusHistoryIsNotNull() && voAppt.getApptStatusHistory().containsAny(new Status_Reason[]{Status_Reason.ARRIVAL, Status_Reason.SEEN}) && !Status_Reason.BOOKED.equals(currentApptStatus) && !Status_Reason.CANCELLED.equals(currentApptStatus))) && !hasElectiveList);///WDEV-12940		//WDEV-1464
			
			Boolean showDna = false;
			if(currentApptStatus.equals(Status_Reason.BOOKED))
			{
				if(voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().isLessThan(new Date()))
					showDna = false;
				//if day is the same include the time in the check
				else if(voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().equals(new Date()))
				{
					if(voAppt.getApptStartTimeIsNotNull() && voAppt.getApptStartTime().isLessThan(new Time()))
						showDna = false;
				}
			}
//			form.getContextMenus().Scheduling.getPatientAppointmentManagementDNAItem().setVisible(form.getMode().equals(FormMode.VIEW) && isApptSelected && showDna);
			form.getContextMenus().Scheduling.getPatientAppointmentManagementDNAItem().setVisible(false);
		}
	}

	protected void onGrdPatientsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setselectedPatient(form.grdPatients().getSelectedRow().getValue());
		form.getGlobalContext().Core.setPatientShort(form.grdPatients().getSelectedRow().getValue());
		listAppointmentsForPatientAndDate();
		clearInstanceControls();
		form.getGlobalContext().Scheduling.setPatientAppointmentManagementSearchCriteria(updateSearchCriteria(form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria())); //WDEV-19389 
		updateContextMenuState();
	}

	private void listAppointmentsForPatientAndDate()
	{
		Date dteAppt = null;
		if(form.getLocalContext().getDateApptIsNotNull())
			dteAppt = form.getLocalContext().getDateAppt();
		else
			dteAppt = form.dteAppt().getValue();
		Booking_AppointmentShortVoCollection voCollBookingAppointment = domain.listBookingAppointmentByPatientAndDate(form.getLocalContext().getselectedPatient(), dteAppt);
		populateApptsGrid(voCollBookingAppointment);
	}

	private void populateApptsGrid(Booking_AppointmentShortVoCollection voCollBookingAppointment)
	{
		form.grdAppts().getRows().clear();
		if(voCollBookingAppointment != null)
		{
			for(int i=0;i<voCollBookingAppointment.size();i++)
			{
				Booking_AppointmentShortVo voBooking = voCollBookingAppointment.get(i);
				grdApptsRow row = form.grdAppts().getRows().newRow();
				
				String cancelTooltip = getCancellationTooltip(voBooking);
				
				if(voBooking.getSessionIsNotNull())
					row.setClinicName(voBooking.getSession().getName());
				
				if(voBooking.getSeenByIsNotNull())
					row.setConsultant(voBooking.getSeenBy().toString());
				
				if(voBooking.getSessionIsNotNull())
					row.setClinicName(voBooking.getSession().getName());
				
				if(voBooking.getApptStartTimeIsNotNull())
					row.setAppointmentTime(voBooking.getApptStartTime().toString());
				
				if(voBooking.getApptStatusIsNotNull())
				{
					row.setStatus(voBooking.getApptStatus().toString());
					row.setBooking(voBooking.getApptStatus().getImage());
				}
				
				StringBuffer tooltip = new StringBuffer();
				
				if(cancelTooltip != null)
					tooltip.append(cancelTooltip);
				
				if(voBooking.getOutcomeIsNotNull())
					tooltip.append((tooltip.length() > 0 ? "<br>" : "") + "Outcome : " + voBooking.getOutcome().getText());
				
				row.setTooltip(tooltip.toString());
				
				row.setValue(voBooking);
			}
		}
		
	}
	
	private String getCancellationTooltip(Booking_AppointmentShortVo voAppt)
	{
		if(voAppt == null)
			return null;
		
		StringBuffer tooltip = new StringBuffer();
		
		if(voAppt.getNumProviderCancellations() != null && voAppt.getNumProviderCancellations() > 0)
		{
			tooltip.append("Number Of Provider Cancellations = ");
			tooltip.append(voAppt.getNumProviderCancellations());
		}
		if(voAppt.getNumPatientCancellations() != null && voAppt.getNumPatientCancellations() > 0)
		{
			if(tooltip.length() > 0)
				tooltip.append("<br>");
			
			tooltip.append("Number Of Patient Cancellations = ");
			tooltip.append(voAppt.getNumPatientCancellations());
		}
		
		return tooltip.toString();
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtDisplayId().setValue(null);
		clearSearchCriteriaFields();
		clearGridsAndInstanceControls();
		form.dteAppt().setValue(new Date());
		form.getLocalContext().setselectedPatient(null);
		form.getGlobalContext().Core.setPatientShort(null); // WDEV-18127 
		form.getGlobalContext().Scheduling.setPatientAppointmentManagementSearchCriteria(null); //WDEV-19389 
	}

	private void clearGridsAndInstanceControls()
	{
		form.grdPatients().getRows().clear();
		form.lblTotal().setValue("Total : 0");//WDEV-12990
		form.grdAppts().getRows().clear();
		clearInstanceControls();
	}

	private void clearInstanceControls()
	{
		updateContextMenuState();
		form.timTime().setValue(null);
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (patientSearch(false))
			form.getGlobalContext().Scheduling.setPatientAppointmentManagementSearchCriteria(getSearchCriteria());
	}

	private boolean patientSearch(Boolean selectPatient)
	{
		//WDEV-19389 
		if (validateSearchCriteria())
		{
			populateGridWithPatients(search());
			setPatientSearchCriteria(selectPatient, form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria());
		}
		else
			return false;
		
		updateContextMenuState();
		return true;
	}

	private PatientShortCollection search()
	{
		form.grdAppts().getRows().clear();
		form.getLocalContext().setselectedPatient(null);
		
		
		form.grdPatients().getRows().clear();
		form.lblTotal().setValue("Total : " + form.grdPatients().getRows().size());//WDEV-12990
		PatientFilter voFilter = getPatientFilterDetails();
		PatientShortCollection voCollPatientShort = null;

		try
		{
			voCollPatientShort = domain.searchPatients(voFilter);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return null;
		}

		if (voCollPatientShort.size() == 0)
		{
			engine.showMessage("No patients found");
			return null;
		}

		return voCollPatientShort;
	}

	private boolean validateSearchCriteria()
	{
		if (form.txtDisplayId().getValue() != null && form.txtDisplayId().getValue().length() > 0)
			clearSearchCriteriaFields();
		else
		{

			// If it is a local search strip out the non-alpha except % chars
			// before validation
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL")) && (form.txtSurname().getValue() == null || form.txtSurname().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Surname search string");
				return false;
			}
			else if (form.txtSurname().getValue() == null || form.txtSurname().getValue().length() == 0)
			{
				engine.showMessage("Please enter a Surname search string");
				return false;
			}

			// Mandatory Search on forname
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL")) && (ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) && (form.txtName().getValue() == null || form.txtName().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Forename search string");
				return false;
			}

			else if ((ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) && (form.txtName().getValue() == null || form.txtName().getValue().length() == 0))
			{
				engine.showMessage("Please enter a valid Forename search string");
				return false;
			}
		}

		return true;
	}

	private void populateGridWithPatients(PatientShortCollection voCollPatientShort)
	{
		if (voCollPatientShort == null)
			return;

		for (int i = 0; i < voCollPatientShort.size(); i++)
		{
			PatientShort voPatShort = voCollPatientShort.get(i);
			grdPatientsRow row = form.grdPatients().getRows().newRow();

			if (voPatShort.getName() != null)
			{
				if (voPatShort.getName().getSurnameIsNotNull())
				{
					row.setSurname(voPatShort.getName().getSurname());
					row.setTooltipForSurname(voPatShort.getName().getSurname());
				}
				if (voPatShort.getName().getForenameIsNotNull())
				{
					row.setName(voPatShort.getName().getForename());
					row.setTooltipForName(voPatShort.getName().getForename());
				}
			}

			if (voPatShort.getDisplayId() != null)
			{
				row.setHospitalNumber(voPatShort.getDisplayId().getValue());
				row.setTooltipForHospitalNumber(voPatShort.getDisplayId().getValue());
			}
			
			if (voPatShort.getDob() != null)
				row.setDOB(voPatShort.getDob().toString(DateFormat.STANDARD));

			row.setValue(voPatShort);

			if (voPatShort.getAssociatedPatientIsNotNull())
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());

			if (voPatShort.getIsDead().booleanValue())
				row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
		}
		form.lblTotal().setValue("Total : " + form.grdPatients().getRows().size());
	}

	private PatientFilter getPatientFilterDetails()
	{
		PatientFilter voPatFilter = new PatientFilter();

		if (form.txtDisplayId().getValue() != null && form.txtDisplayId().getValue().length() > 0)
		{
			PatientId pid = new PatientId();
			pid.setType(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
			pid.setValue(form.txtDisplayId().getValue());
			voPatFilter.setPersId(pid);
		}
		else
		{
			voPatFilter.setForename(form.txtName().getValue());
			voPatFilter.setSurname(form.txtSurname().getValue());
			voPatFilter.setDob(form.pdtDate().getValue());
		}

		return voPatFilter;
	}

	private void clearSearchCriteriaFields()
	{
		form.txtSurname().setValue(null);
		form.txtName().setValue(null);
		form.pdtDate().setValue(null);
	}

	protected void onImbNextDateClick() throws PresentationLogicException
	{
		Date date = form.dteAppt().getValue().copy();
		date.addDay(1);
		form.dteAppt().setValue(date);	
		form.getLocalContext().setDateAppt(null);
		if(form.grdPatients().getValue() != null)
		{
			listAppointmentsForPatientAndDate();
			clearInstanceControls();
			form.getGlobalContext().Scheduling.setPatientAppointmentManagementSearchCriteria(updateSearchCriteria(form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria())); //WDEV-19389
		}
	}

	protected void onImbPrevDateClick() throws PresentationLogicException
	{
		Date date = form.dteAppt().getValue().copy();
		date.addDay(-1);
		form.dteAppt().setValue(date);
		form.getLocalContext().setDateAppt(null);
		if(form.grdPatients().getValue() != null)
		{
			listAppointmentsForPatientAndDate();
			clearInstanceControls();
			form.getGlobalContext().Scheduling.setPatientAppointmentManagementSearchCriteria(updateSearchCriteria(form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria())); //WDEV-19389
		}	
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.ATTENDED:
				form.getLocalContext().setNewStatus(Status_Reason.ARRIVAL);
				
				//WDEV-11770
				form.getLocalContext().setTrackingStatus(AppointmentTrackingStatus.PATIENT_ARRIVED);
				
				Booking_AppointmentShortVo selectedAppt = form.grdAppts().getValue();
				Date appointmentDate =  selectedAppt.getAppointmentDate()!= null ? selectedAppt.getAppointmentDate(): new Date();
				Time apptStartTime = selectedAppt.getApptStartTime()!= null ? selectedAppt.getApptStartTime(): new Time();
				DateTime apptDataTime = new DateTime(appointmentDate, apptStartTime);
				DateTime nowDateTime = new DateTime();
				
				if(nowDateTime.isGreaterThan(apptDataTime))
				{
					engine.open(form.getForms().Scheduling.AppointmentArrivalDialog,new Object[]{apptDataTime});
					break;
				}
				form.setMode(FormMode.EDIT);
				form.timTime().setValue(new Time());
				break;
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.SEEN:
				form.getLocalContext().setNewStatus(Status_Reason.SEEN);
				
				//WDEV-11770
				form.getLocalContext().setTrackingStatus(AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
				
				form.setMode(FormMode.EDIT);
				form.timTime().setValue(new Time());
				break;
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.CANCELLED:
				
				Booking_AppointmentShortVo voAppt = form.grdAppts().getValue();
				
				if(voAppt != null)
				{
					SessionServiceAndSlotActivityVo voServiceAndActivity = null;
					//flexible appointment cancel WDEV-7766
					boolean flexible = false;
					if(voAppt.getSessionIsNotNull() && voAppt.getSession().getIsFixedIsNotNull() && !voAppt.getSession().getIsFixed())
						flexible = true;
					//wdev-11902
					CatsReferralListVo voReferral = domain.getCatsReferralForAppointment(form.grdAppts().getValue());
					form.getGlobalContext().RefMan.setCatsReferralStatus(voReferral != null ? voReferral.getCurrentStatus() : null);	//wdev-12335
					form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
					voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt, flexible);
					
					//WDEV-12284 start
					if (voServiceAndActivity != null)
					{	
						form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
						form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
					}
					
					form.getGlobalContext().Scheduling.setBookingSession(voAppt.getSession());
					form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
					engine.open(form.getForms().Scheduling.CancelAppointmentDialog);

				}
				break;
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.DNA:
				
				//WDEV-20579
				if (Boolean.TRUE.equals(form.grdAppts().getValue().getIsWardAttendance()))
				{
					form.getLocalContext().setTrackingStatus(null);
					form.getLocalContext().setNewStatus(Status_Reason.DNA);
					
					if(save())
						open();
				}
				else
					recordAppointmentOutcome(form.grdAppts().getValue());
				
				break;
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.OUTCOME:
				
				CatsReferralListVo voReferralR = domain.getCatsReferralForAppointment(form.grdAppts().getValue());	//wdev-19930,wdev-19933
				form.getGlobalContext().RefMan.setCatsReferral(voReferralR);										//wdev-19930,wdev-19933
				recordAppointmentOutcome(form.grdAppts().getValue());
				break;
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.UNDO_ARRIVAL:
				undoArrival();
				break;
			
			case GenForm.ContextMenus.SchedulingNamespace.PatientAppointmentManagement.UNDO_DNA:        //wdev-12090
				undoDNA(); 																				//wdev-12090
			default:
		}
		
	}

	private void recordAppointmentOutcome(Booking_AppointmentShortVo appointment)
	{
		if (appointment != null)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(appointment);
			
			//WDEV-20579
			if (Boolean.TRUE.equals(appointment.getIsWardAttendance()))
			{
				if (appointment.getWardAttendanceOutcome() != null)
					engine.open(form.getForms().Core.WardAttenderDetailsDialog, new Object[] {FormMode.VIEW});
				else
					engine.open(form.getForms().Core.WardAttenderDetailsDialog, new Object[] {FormMode.EDIT});
			}
			else if (appointment.getOutcome() != null)
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.VIEW});
			else
				engine.open(form.getForms().Scheduling.AppointmentOutcomeDialog, new Object[] {FormMode.EDIT});
		}
	}	
	
	//wdev-12090
	private void undoDNA()
	{
		form.getLocalContext().setMessageBoxId(UNDO_DNA_IND);
		engine.showMessage("Are you sure you want to Undo this DNA?", "Undo DNA", MessageButtons.YESNO);
	}
	//-------
	private void undoArrival() 
	{
		form.getLocalContext().setMessageBoxId(UNDO_ARRIVAL_IND);	//wdev-12090
		engine.showMessage("Are you sure you want to Undo this Arrival?", "Undo Arrival", MessageButtons.YESNO); //wdev-12090
		//form.getLocalContext().setMessageBoxId(engine.showMessage("Are you sure you want to Undo this Arrival?", "Undo Arrival", MessageButtons.YESNO));
		
	}

	private boolean save()
	{
		int repeats = 0;
		do
		{
			try
			{
				if(form.grdAppts().getValue() == null)
					throw new CodingRuntimeException("No Appointment selected to manage");

				if(form.getLocalContext().getNewStatus() == null)
					throw new CodingRuntimeException("NewStatus not set in method saveBookingAppointmentWithNewStatus");

				Booking_AppointmentShortVo voAppt = form.grdAppts().getValue();
				LateTimeArrivalRecordVo lateArrivalRecord = form.getGlobalContext().Scheduling.getLateArrivalRecord();//WDEV-20888
				Status_Reason status = form.getLocalContext().getNewStatus();
				if(status.equals(Status_Reason.SEEN))
				{	
					//WDEV-18480
					voAppt.setSeenBy((HcpLiteVo) domain.getHcpLiteUser());
					voAppt.setSeenTime(form.timTime().getValue());
				}	
				else if(status.equals(Status_Reason.ARRIVAL))
					if(lateArrivalRecord != null)
						voAppt.setArrivalTime(lateArrivalRecord.getArrivalTime());
					else
						voAppt.setArrivalTime(form.timTime().getValue());

				voAppt.setApptStatus(status);
				Appointment_StatusVo voStatus = new Appointment_StatusVo();


				if(lateArrivalRecord != null)//WDEV-20888
				{
					voStatus.setCareProfessionalNotReadyToSee(lateArrivalRecord.getCareProfessionalNotReadyToSee());
					voStatus.setCareProfessionalReadyToSee(lateArrivalRecord.getCareProfessionalReadyToSee());
					voStatus.setCouldnotbeseen(lateArrivalRecord.getCouldNotBeSeen());
					form.getGlobalContext().Scheduling.setLateArrivalRecord(null);
				}
				voStatus.setApptDate(voAppt.getAppointmentDate());
				voStatus.setApptTime(voAppt.getApptStartTime());
				voStatus.setStatusChangeDateTime(new DateTime());
				voStatus.setStatus(form.getLocalContext().getNewStatus());

				Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
				if(voCollStatusHistory == null)
					voCollStatusHistory =  new Appointment_StatusVoCollection();

				voCollStatusHistory.add(voStatus);
				voAppt.setCurrentStatusRecord(voStatus); // wdev-6034
				voAppt.setApptStatusHistory(voCollStatusHistory);

				//WDEV-11770
				populateAppointmentWithTrackingStatus(voAppt, form.getLocalContext().getTrackingStatus());

				String[] arrErrors = voAppt.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return false;
				}	

				domain.saveBookingAppt(voAppt, false,false);

				form.getLocalContext().setDateAppt(form.dteAppt().getValue());

				return true;
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();	//WDEV-11780
				//clearGridsAndInstanceControls();	//WDEV-11780
				return false;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		return false;
	}

	//WDEV-11770 - starts here
	private void populateAppointmentWithTrackingStatus(Booking_AppointmentShortVo voAppt, AppointmentTrackingStatus trackingStatus) 
	{
		if(voAppt == null || trackingStatus == null)
			return;
		
		Appt_Tracking_Status_HistoryVoCollection trackingCollection = voAppt.getApptTrackingStatusHistory();
		
		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();
		
		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(voAppt.getAppointmentDate());
		newTrackingStatus.setApptTime(voAppt.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());
		
		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);
		
		trackingCollection.add(newTrackingStatus);
		voAppt.setApptTrackingStatusHistory(trackingCollection);
	}
	//WDEV-11770 - ends here

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getLocalContext().setDateAppt(form.dteAppt().getValue());
		open();
		
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	private void open()
	{
		clearContexts();
		form.setMode(FormMode.VIEW);
		form.grdAppts().setValue(null);
		form.getLocalContext().setNewStatus(null);
		updateContextMenuState();
		clearInstanceControls();
		if(form.getLocalContext().getDateAppt()==null)
			form.dteAppt().setValue(new Date());
		listAppointmentsForPatientAndDate();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.AppointmentArrivalDialog) && result.equals(DialogResult.OK))
		{
			if(save())
				open();
		}
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(!cancelAppt())
					return;
				
				CatsReferralListVo voReferral = domain.getCatsReferralForAppointment(form.grdAppts().getValue());
				if (voReferral!=null) //WDEV-19560
				{
					try
    				{
    					domain.updateCatsReferralAdditionalInvStatus(voReferral, form.getGlobalContext().Scheduling.getBookingAppointment());
    					
    				}
    				catch (StaleObjectException e)
    				{
    					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    					return;
    				}
				}	
				//open book appointment
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
				{
					form.getGlobalContext().Core.setPatientShort(form.grdPatients().getValue());
					
					if(ConfigFlag.UI.BOOKAPPT_UI_TYPE.getValue().equals("CARE_UK") && voReferral!=null) //WDEV-19560
					{
						form.getGlobalContext().RefMan.setCatsReferral(voReferral);
						form.getGlobalContext().RefMan.setReferralContractTypeForPatient(voReferral.getContractIsNotNull() ? voReferral.getContract().getContractType() : null );//wdev-12682

						engine.open(form.getForms().RefMan.BookAppointment);
					}
					else
						engine.open(form.getForms().Scheduling.BookAppointment);
				}
				else
					open();
			}
			if(result.equals(DialogResult.CANCEL))
			{
				onBtnCancelClick();
			}
		}
		else if(formName.equals(form.getForms().Scheduling.AppointmentOutcomeDialog) || formName.equals(form.getForms().Core.WardAttenderDetailsDialog))
		{
			if(result.equals(DialogResult.OK))
				open();
		}
	}
	
	private void clearContexts()
	{
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(null);
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingSession(null);
		
		//WDEV-11770
		form.getLocalContext().setTrackingStatus(null);
	}

	private boolean cancelAppt() 
	{
		int repeats = 0;

		do
		{
			try
			{
				Booking_AppointmentShortVo voAppt = form.grdAppts().getValue();
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					//appt status and status history
					voAppt.setApptStatus(Status_Reason.CANCELLED);
					voAppt.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());

					Appointment_StatusVo voStatus = new Appointment_StatusVo();
					voStatus.setApptDate(voAppt.getAppointmentDate());
					voStatus.setApptTime(voAppt.getApptStartTime());
					voStatus.setStatusChangeDateTime(new DateTime());
					voStatus.setStatus(Status_Reason.CANCELLED);
					if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
					{
						voStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
						voStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment()); //WDEV-15458
						if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
							voAppt.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());

						if(Status_Reason.HOSPITALCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
						{
							int numProviderCancellations = 0;

							if(voAppt.getNumProviderCancellations() != null)
							{
								numProviderCancellations = voAppt.getNumProviderCancellations();
							}
							numProviderCancellations += 1;

							voAppt.setNumProviderCancellations(numProviderCancellations);
						}

						if(Status_Reason.PATIENTCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
						{
							int numPatientCancellations = 0;

							if(voAppt.getNumPatientCancellations() != null)
							{
								numPatientCancellations = voAppt.getNumPatientCancellations();
							}
							numPatientCancellations += 1;

							voAppt.setNumPatientCancellations(numPatientCancellations);
						}
					}
					Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
					if(voCollStatusHistory == null)
						voCollStatusHistory =  new Appointment_StatusVoCollection();

					voCollStatusHistory.add(voStatus);
					voAppt.setCurrentStatusRecord(voStatus); // wdev-6034
					voAppt.setApptStatusHistory(voCollStatusHistory);	
				}

				voAppt.setLinkedApptsToBeCancelled(form.getGlobalContext().RefMan.getLinkedAppointmentsCollection());//WDEV-19543

				String[] arrErrors = voAppt.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return false;
				}	

				Booking_AppointmentVo voApptFull = null;
				voApptFull = domain.saveBookingAppt(voAppt, false,false);

				form.getGlobalContext().Scheduling.setBookingAppointment(voApptFull);
				form.getLocalContext().setDateAppt(form.dteAppt().getValue());
				return true;
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				//clearGridsAndInstanceControls();	//WDEV-11780
				open();	//WDEV-11780
				return false;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);

		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
		return false;
	}

	protected void onDteApptValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setDateAppt(null);
		if(form.getLocalContext().getselectedPatient() != null)
		{
			listAppointmentsForPatientAndDate();
			clearInstanceControls();
			form.getGlobalContext().Scheduling.setPatientAppointmentManagementSearchCriteria(updateSearchCriteria(form.getGlobalContext().Scheduling.getPatientAppointmentManagementSearchCriteria())); //WDEV-19389 
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateContextMenuState();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (form.getLocalContext().getMessageBoxIdIsNotNull()
			&& form.getLocalContext().getMessageBoxId().equals(UNDO_ARRIVAL_IND)	//wdev-12090
			&& result.equals(DialogResult.YES))
		{
			undoAppointmentArrival();
		}
		//wdev-12090
		else if(form.getLocalContext().getMessageBoxIdIsNotNull()
				&& form.getLocalContext().getMessageBoxId().equals(UNDO_DNA_IND)
				&& result.equals(DialogResult.YES))
		{
			undoAppointmentDNA();
		}
		form.getLocalContext().setMessageBoxId(null);
		//---------------------------------------
			
		
	}

	private void undoAppointmentArrival() 
	{
		int repeats = 0;

		do
		{
			try
			{
				Booking_AppointmentShortVo voAppt = form.grdAppts().getValue();

				//appt status and status history
				voAppt.setApptStatus(Status_Reason.BOOKED);
				voAppt.setApptStatusReas(Status_Reason.DATA_CORRECTED);	//WDEV-12341
				voAppt.setArrivalTime(null);

				//WDEV-12341 - starts here
				Appointment_StatusVo voCorrectedStatus = new Appointment_StatusVo();
				voCorrectedStatus.setApptDate(voAppt.getAppointmentDate());
				voCorrectedStatus.setApptTime(voAppt.getApptStartTime());
				voCorrectedStatus.setStatusChangeDateTime(new DateTime());
				voCorrectedStatus.setStatus(Status_Reason.BOOKED);
				voCorrectedStatus.setStatusReason(Status_Reason.DATA_CORRECTED);
				//WDEV-12341 - ends here

				Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
				if(voCollStatusHistory == null)
					voCollStatusHistory =  new Appointment_StatusVoCollection();

				voCollStatusHistory.add(voCorrectedStatus);		//WDEV-12341
				voAppt.setCurrentStatusRecord(voCorrectedStatus);
				voAppt.setApptStatusHistory(voCollStatusHistory);	

				voAppt.setOutcome(null);//WDEV-12940
				voAppt.setOutcomeComments(null);//WDEV-12940


				//WDEV-12942if(!voAppt.getApptTrackingStatusHistoryIsNotNull())											//wdev-12364
				//	voAppt.setApptTrackingStatusHistory(new Appt_Tracking_Status_HistoryVoCollection());	//WDEV-11770

				//WDEV-17987
				populateAppointmentWithTrackingStatus(voAppt, AppointmentTrackingStatus.UNDO_ARRIVAL);

				String[] arrErrors = voAppt.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}	

				Booking_AppointmentVo voApptFull = null;
				voApptFull = domain.saveBookingAppt(voAppt, true,false);

				form.getGlobalContext().Scheduling.setBookingAppointment(voApptFull);
				form.getLocalContext().setDateAppt(form.dteAppt().getValue());
				open();
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}
	
	
	//wdev-12090
	private void undoAppointmentDNA() 
	{
		int repeats = 0;

		do
		{
			try
			{
				Booking_AppointmentShortVo voAppt = form.grdAppts().getValue();
				Booking_AppointmentVo  voApptFull = domain.getBookingAppointmet(voAppt);
				if(voApptFull == null)
				{
					engine.showErrors(new String[]{"Appointment Invalid."});
					return;
				}
				//wdev-12340
				if(voAppt != null && voAppt.getVersion_Booking_Appointment() !=  voApptFull.getVersion_Booking_Appointment())
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					form.getGlobalContext().Scheduling.setBookingAppointment(voApptFull);
					form.getLocalContext().setDateAppt(form.dteAppt().getValue());
					open();
					return;
				}
				//------------------
				//appt status and history
				voApptFull.setApptStatus(Status_Reason.BOOKED);
				voApptFull.setApptStatusReas(Status_Reason.DATA_CORRECTED);
				voApptFull.setRequiresRebook(Boolean.FALSE);
				voApptFull.setArrivalTime(null);

				Appointment_StatusVo voStatus = new Appointment_StatusVo();
				voStatus.setApptDate(voAppt.getAppointmentDate());
				voStatus.setApptTime(voAppt.getApptStartTime());
				voStatus.setStatusChangeDateTime(new DateTime());
				voStatus.setStatus(Status_Reason.BOOKED);
				voStatus.setStatusReason(Status_Reason.DATA_CORRECTED);

				Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
				if(voCollStatusHistory == null)
					voCollStatusHistory =  new Appointment_StatusVoCollection();

				voCollStatusHistory.add(voStatus);
				voApptFull.setCurrentStatusRecord(voStatus); 
				voApptFull.setApptStatusHistory(voCollStatusHistory);	

				if(voApptFull.getSessionSlotIsNotNull())
					voApptFull.getSessionSlot().setStatus(Status_Reason.APPOINTMENT_BOOKED);

				//WDEV-11770
				voApptFull.setApptTrackingStatusHistory(new Appt_Tracking_Status_HistoryVoCollection());
				//WDEV-18401
				boolean isDNARecProcessableforRTT = form.getLocalContext().getMessageBoxIdIsNotNull() && form.getLocalContext().getMessageBoxId().equals(UNDO_DNA_IND) && ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && voApptFull.getActivityIsNotNull() && voApptFull.getActivity().getFirstAppointment();
				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}	

				voApptFull = domain.saveBookingApptFull(voApptFull,isDNARecProcessableforRTT); //WDEV-18401  new argument passed to domain

				form.getGlobalContext().Scheduling.setBookingAppointment(voApptFull);
				form.getLocalContext().setDateAppt(form.dteAppt().getValue());
				open();
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}
}
