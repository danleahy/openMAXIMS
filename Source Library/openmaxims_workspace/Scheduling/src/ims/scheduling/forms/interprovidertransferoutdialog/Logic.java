//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.interprovidertransferoutdialog;

import ims.RefMan.vo.InterProviderTransferOutVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.scheduling.vo.Sch_SessionRefVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	public static final Integer SHOW_RIE_BUTTON = 1;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		Sch_SessionRefVo session = null;

		if (args != null && args.length > 0 && args[0] instanceof Sch_SessionRefVo)
		{
			session = (Sch_SessionRefVo) args[0];
		}
		
		if (args != null && args.length > 1 && SHOW_RIE_BUTTON.equals(args[1]))
		{
			form.getLocalContext().setShow_RIE_Button(SHOW_RIE_BUTTON);
		}
		
		//WDEV-23051
		if (args != null && args.length > 1 && args[2] instanceof Boolean)
		{
			form.getLocalContext().setShow_RIE_Button(null);
		}
		

		initialise(session);
		open();
	}

	private void initialise(Sch_SessionRefVo session)
	{
		form.dteRequested().setValue(new Date());

		populateReferringClinician(domain.getListOwnersForSession(session));

	}

	private void open()
	{
		InterProviderTransferOutVo interProviderTransfer = form.getGlobalContext().Scheduling.getInterProviderTransferOut() != null ? (InterProviderTransferOutVo) form.getGlobalContext().Scheduling.getInterProviderTransferOut().clone() : null;

		form.getLocalContext().setInterProviderTransferOut(interProviderTransfer);

		populateScreenFromData(interProviderTransfer);

		form.setMode((interProviderTransfer == null || interProviderTransfer.getID_InterProviderTransferOut() == null) ? FormMode.EDIT : FormMode.VIEW);
	}

	private void populateScreenFromData(InterProviderTransferOutVo interProviderTransfer)
	{
		if (interProviderTransfer == null)
			return;

		form.dteRequested().setValue(interProviderTransfer.getRequestedDate());
		form.cmbReferringClinician().setValue(interProviderTransfer.getReferringClinican());
		form.cmbIptToOrganisation().setValue(interProviderTransfer.getIPTOrganisation());
		form.txtIptToService().setValue(interProviderTransfer.getIPTService());
		form.txtIptToClinician().setValue(interProviderTransfer.getIPTClinician());
		form.txtComments().setValue(interProviderTransfer.getIPTComments());

	}

	private void populateReferringClinician(HcpLiteVoCollection listOwners)
	{
		form.cmbReferringClinician().clear();

		if (listOwners == null || listOwners.size() == 0)
		{
			return;
		}

		for (int i = 0; i < listOwners.size(); i++)
		{
			HcpLiteVo listOwner = listOwners.get(i);

			if (listOwner == null)
				continue;

			form.cmbReferringClinician().newRow(listOwners.get(i), listOwners.get(i).getIHcpName());
		}

		if (listOwners.size() == 1)
			form.cmbReferringClinician().setValue(listOwners.get(0));

	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		InterProviderTransferOutVo interProviderTransfer = populateDataFromScreen(form.getLocalContext().getInterProviderTransferOut());

		String[] errors = interProviderTransfer.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}

		form.getGlobalContext().Scheduling.setInterProviderTransferOut(interProviderTransfer);

		engine.close(DialogResult.OK);

	}

	private InterProviderTransferOutVo populateDataFromScreen(InterProviderTransferOutVo interProviderTransferOut)
	{
		if (interProviderTransferOut == null)
			interProviderTransferOut = new InterProviderTransferOutVo();

		interProviderTransferOut.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		interProviderTransferOut.setPatient(form.getGlobalContext().Core.getPatientShort());

		interProviderTransferOut.setRequestedDate(form.dteRequested().getValue());
		interProviderTransferOut.setReferringClinican(form.cmbReferringClinician().getValue());
		interProviderTransferOut.setIPTOrganisation(form.cmbIptToOrganisation().getValue());
		interProviderTransferOut.setIPTService(form.txtIptToService().getValue());
		interProviderTransferOut.setIPTClinician(form.txtIptToClinician().getValue());
		interProviderTransferOut.setIPTComments(form.txtComments().getValue());

		return interProviderTransferOut;
	}

	private String[] validateUiRules()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		if (form.dteRequested().getValue() == null)
		{
			uiErrors.add("Date Requested is mandatory.");
		}

		if (form.cmbReferringClinician().getValue() == null)
		{
			uiErrors.add("Referring Clinician is mandatory.");
		}

		if (form.cmbIptToOrganisation().getValue() == null)
		{
			uiErrors.add("IPT to Organisation is mandatory.");
		}

		if (form.txtIptToService().getValue() == null)
		{
			uiErrors.add("IPT to Service is mandatory.");
		}

		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);

		return uiResults;

	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);

	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Core.RieConfirmationDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			engine.close(DialogResult.CONFIRM);
		}
	}

	@Override
	protected void onBtnRIEClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.btnRIE().setVisible(FormMode.VIEW.equals(form.getMode()) && SHOW_RIE_BUTTON.equals(form.getLocalContext().getShow_RIE_Button()));
	}

}
