//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Michael Noonan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.outcomesummarydialog;

import ims.admin.vo.AppointmentOutcomeConfigVo;
import ims.admin.vo.AppointmentOutcomeConfigVoCollection;
import ims.admin.vo.AppointmentOutcomeReasonVo;
import ims.admin.vo.AppointmentOutcomeReasonVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.pathways.vo.PathwaysRTTClockImpactRefVo;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;
import ims.scheduling.vo.lookups.ApptOutcome;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int LIST_OWNER_STRING_MAX_LENGHT = 28;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null
				&& args[0] != null
				&& args[0] instanceof PathwaysRTTClockImpactRefVo)
		{
			PathwaysRTTClockImpactRefVo clockImpactRef = (PathwaysRTTClockImpactRefVo)args[0];
			
			BookingAppointmentOutcomeVo appointment = domain.getOutcomeDetails(clockImpactRef);
			form.getLocalContext().setBookingAppointment(appointment);
			if(appointment!=null)
			{
				if(appointment.getActivityIsNotNull())
					form.lblActivity().setValue(appointment.getActivity() != null && appointment.getActivity().getName() != null ? appointment.getActivity().getName() : null);
				form.dtimAppointmentOutcome().setValue(appointment.getOutcomeDateTime());
				
				form.lblApptStatusText().setValue(appointment.getApptStatus() != null ? appointment.getApptStatus().getText() : null);
				
				if (appointment.getSeenBy() != null)
				{
					form.lblSeenByValue().setValue(appointment.getSeenBy().toString());
				}
				
				HcpLiteVoCollection listOwners = domain.listSessionListOwners(appointment.getSession());
				String displayListOwners = getListOwnersListDisplayString(listOwners);
				
				form.lblListOwnerValue().setValue(displayListOwners.substring(0, (displayListOwners.length() - 1 > LIST_OWNER_STRING_MAX_LENGHT ? LIST_OWNER_STRING_MAX_LENGHT : displayListOwners.length() - 1)));
				form.lblListOwnerValue().setTooltip(displayListOwners);


				form.cmbOutcome().setValue(appointment.getOutcome());
				
				bindAppointmentOutcomes(appointment.getApptStatus());
				form.cmbOutcome().setValue(appointment.getOutcome());
				updateOutcomeSelection(appointment.getOutcome());
				form.cmbOutcomeReason().setValue(appointment.getOutcomeReason());
			}
		}
		
		updateControlsState();
	}

	
	private String getListOwnersListDisplayString(HcpLiteVoCollection listOwners)
	{
		if (listOwners == null || listOwners.size() == 0)
			return "-";
		
		StringBuffer displayString = new StringBuffer();
		
		for (int i = 0; i < listOwners.size(); i++)
		{
			displayString.append(listOwners.get(i).toString());
			
			if (i < listOwners.size() - 1)
				displayString.append(", ");
		}
		
		return displayString.toString();
	}

	
	private void updateControlsState()
	{
		form.lblSeenBy().setVisible(form.getLocalContext().getBookingAppointment() != null && form.getLocalContext().getBookingAppointment().getSeenBy() != null);
		form.lblSeenByValue().setVisible(form.getLocalContext().getBookingAppointment() != null && form.getLocalContext().getBookingAppointment().getSeenBy() != null);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		BookingAppointmentOutcomeVo appointment = form.getLocalContext().getBookingAppointment();
		appointment.setOutcome(form.cmbOutcome().getValue());
		appointment.setOutcomeReason(form.cmbOutcomeReason().getValue());
		try {
			domain.saveAppointmentOutome(appointment);
		} catch (StaleObjectException e) {
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	
	@Override
	protected void onCmbOutcomeValueChanged() throws PresentationLogicException
	{
		updateOutcomeSelection(form.cmbOutcome().getValue());
	}
	
	private void bindAppointmentOutcomes(Status_Reason status)
	{
		AppointmentOutcomeConfigVoCollection appointmentOutcomes = domain.listAppointmentOutcomeByAppointmentStatus(status);
		
		form.cmbOutcome().clear();
		
		if (appointmentOutcomes == null)
		{
			updateOutcomeSelection(null);
			return;
		}
		
		for (AppointmentOutcomeConfigVo outcome : appointmentOutcomes)
		{
			form.cmbOutcome().newRow(outcome.getAppointmentOutcome(), outcome.getAppointmentOutcome().getText());
		}
		
		if (appointmentOutcomes.size() == 1)
		{
			form.cmbOutcome().setValue(appointmentOutcomes.get(0).getAppointmentOutcome());
			updateOutcomeSelection(form.cmbOutcome().getValue());
		}
	}
	
	private void updateOutcomeSelection(ApptOutcome oucome)
	{
		initializeAppointmentOutcomeConfigControls(oucome);
	}
	
	
	private void initializeAppointmentOutcomeConfigControls(ApptOutcome oucome)
	{
		bindAppointmentOutcomeReasonCombo(domain.getAppointmentOutcomeConfigByApptOutcomeLookup(oucome).getAppointmentOutcomeReasons());
	}
	
	
	private void bindAppointmentOutcomeReasonCombo(AppointmentOutcomeReasonVoCollection appointmentOutcomeReasons)
	{
		form.cmbOutcomeReason().clear();
		
		if(appointmentOutcomeReasons == null)
			return;
		
		for(AppointmentOutcomeReasonVo reason : appointmentOutcomeReasons)
		{
			if(reason == null || reason.getIsActive() == null || Boolean.FALSE.equals(reason.getIsActive()))
				continue;
			
			form.cmbOutcomeReason().newRow(reason.getAppointmentOutcomeReason(), reason.getAppointmentOutcomeReason().getText());
		}
	}
	
}
