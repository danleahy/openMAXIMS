//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3111.36466)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.sessionslotdialog;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.place.vo.ActivityRefVo;
import ims.core.vo.ActivityVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.ServiceFunctionVo;
import ims.core.vo.ServiceFunctionVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.sessionslotdialog.GenForm.grdDosRow;
import ims.scheduling.forms.sessionslotdialog.GenForm.grdServiceFunctionsRow;
import ims.scheduling.forms.sessionslotdialog.GenForm.grdSlotsRow;
import ims.scheduling.forms.sessionslotdialog.GenForm.grdSlotsRowCollection;
import ims.scheduling.helper.Uuid;
import ims.scheduling.vo.DirectoryOfServiceSessionSlotVo;
import ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection;
import ims.scheduling.vo.DirectoryOfServiceVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.lookups.SchedCABSlotType;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-7606 //WDEV-22973 
		if(args != null)
		{
			if(args.length >= 1 && args[0] instanceof SessionShortVo)
				form.getLocalContext().setSelectedSession((SessionShortVo)args[0]);
			if (args.length >= 1 && Boolean.TRUE.equals(args[0]))
				form.getLocalContext().setRebookingAppointmentMode((Boolean)args[0]);
			else if (args.length > 1 && args[1] instanceof Boolean)
				form.getLocalContext().setRebookingAppointmentMode((Boolean)args[1]);
			if (args.length > 2 && args[2] instanceof CatsReferralRefVo)
			{
				form.getLocalContext().setSelectedApptSessionReferralRef((CatsReferralRefVo) args[2]);
			}
		}
		
		initialise();
		loadActivities();
		loadListOwners();
		populateScreenFromData(form.getGlobalContext().Scheduling.getSessionSlot());
		
		//WDEV-22827
		if (form.getLocalContext().getSelectedSession()!= null && form.getLocalContext().getSelectedSession().getService() != null)
			listServiceFunctions(form.getLocalContext().getSelectedSession());
		
		if (form.getGlobalContext().Scheduling.getSessionSlot() != null)
		{
			addSlotToGrid(form.getGlobalContext().Scheduling.getSessionSlot());
			form.setMode(FormMode.VIEW);
		}
		else
			form.setMode(FormMode.EDIT);
	}
	
	//WDEV-22827
	private void listServiceFunctions(SessionShortVo session)
	{
		ServiceFunctionVoCollection voCollServiceFunctions = domain.listServiceFunctionByService(session);
		if( voCollServiceFunctions != null && voCollServiceFunctions.size() > 0)
		{
			populateServiceFunctionGrid(voCollServiceFunctions);
		}		
	}
	
	private void populateServiceFunctionGrid(ServiceFunctionVoCollection voCollServiceFunctions)
	{
		form.grdServiceFunctions().getRows().clear();
		if( voCollServiceFunctions == null || voCollServiceFunctions.size() == 0)
			return;
		for( int i = 0; i < voCollServiceFunctions.size();i++ )
		{
			voCollServiceFunctions.sort();
			ServiceFunctionVo tempVo = voCollServiceFunctions.get(i); 
			if( tempVo != null )
			{
				ims.scheduling.forms.sessionslotdialog.GenForm.grdServiceFunctionsRow row = form.grdServiceFunctions().getRows().newRow();
				row.setColFunctions(tempVo.getFunction().getText());
				row.setSelectable(false);
				row.setColSelect(false);
				row.setValue(tempVo);	
			}
		}
	}
	//end WDEV-22827

	private void loadListOwners()
	{
		form.cmbSlotResponsiblity().clear();
		//wdev-12428		
		SessionShortVo selectedSession = form.cmbSession().getValue();
		if(selectedSession != null && selectedSession.getListOwners() != null)
		{
			selectedSession.getListOwners().sort();
			for (Session_ListOwnerVo voListOwner : selectedSession.getListOwners())
				form.cmbSlotResponsiblity().newRow(voListOwner, voListOwner.toString());	
		}
		else if (form.getGlobalContext().Scheduling.getSelectedSessionListOwnersIsNotNull()) //wdev-13080
		{
			for (Session_ListOwnerVo voListOwner : form.getGlobalContext().Scheduling.getSelectedSessionListOwners())
				form.cmbSlotResponsiblity().newRow(voListOwner, voListOwner.toString());	
		}

	}

	private void initialise()
	{
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
		{
			boolean bSelectedSession = false;
			for(SessionShortVo voSession : form.getGlobalContext().RefMan.getSelectedSessions())
			{
				form.cmbSession().newRow(voSession, voSession.getName());
				if (form.getLocalContext().getSelectedSession() != null && voSession.getID_Sch_Session().equals(form.getLocalContext().getSelectedSession().getID_Sch_Session()))
					bSelectedSession = true;
			}
			
			if(form.cmbSession().getValues().size() == 1 || bSelectedSession)
				form.cmbSession().setValue(bSelectedSession ? form.getLocalContext().getSelectedSession() : form.getGlobalContext().RefMan.getSelectedSessions().get(0));	
			form.cmbActivity().setFocus();
		}
		else
		{
			form.cmbActivity().setFocus();	//wdev-11038
		}
		
	}

	private void loadActivities()
	{
		CatsReferralRefVo catsReferralRef = form.getLocalContext().getSelectedApptSessionReferralRef();
		ServiceRefVo  serviceRef = form.getLocalContext().getSelectedSessionIsNotNull() ? form.getLocalContext().getSelectedSession().getService() : null;
		ActivityVoCollection activities = domain.listActivities(catsReferralRef, serviceRef);	
		if (activities == null)
			return;
		for (int i=0; i< activities.size(); i++)
			form.cmbActivity().newRow(activities.get(i),activities.get(i).getName());
		if (activities.size() == 1)
			form.cmbActivity().setValue(activities.get(0));		
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SessionSlotVo voSessionSlot = populateDataFromScreen();
		
		if(voSessionSlot.getID_Session_Slot() == null)
			voSessionSlot.setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voSessionSlot.validate(getUIValidationErrors()); 
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		addSlotToGrid(voSessionSlot);
		getSlotsToAdd();
		
		form.setMode(FormMode.VIEW);	
	}
	
	private void addSlotToGrid(SessionSlotVo voSessionSlot)
	{
		grdSlotsRow row = null;
		
		if (form.getLocalContext().getSelectedSlot() != null)
			row = form.grdSlots().getSelectedRow();
		else
			row = form.grdSlots().getRows().newRow();
		
		row.setColSession(voSessionSlot.getSession() != null ? voSessionSlot.getSession().getName() :"");
		row.setTooltipForColSession(row.getColSession());
		
		row.setColActivity(voSessionSlot.getActivity() != null ? voSessionSlot.getActivity().getName() :"");
		row.setTooltipForColActivity(row.getColActivity());
		
		row.setColPriority(voSessionSlot.getPriority() != null ? voSessionSlot.getPriority().getText() :"");
		row.setTooltipForColPriority(row.getColPriority());
		
		row.setColType(voSessionSlot.getDirectAccessSlot() != null ? voSessionSlot.getDirectAccessSlot().getText() :"");
		
		row.setColOwner(voSessionSlot.getSlotResp() != null ? voSessionSlot.getSlotResp().toString() : "");
		row.setTooltipForColOwner(row.getColOwner());
		
		row.setColStartTime(voSessionSlot.getStartTm() != null ? voSessionSlot.getStartTm().toString() : "");
		row.setColDuration(voSessionSlot.getDuration() != null ? voSessionSlot.getDuration().toString() : "");
		
		row.setValue(voSessionSlot);
		
		form.grdSlots().setValue(voSessionSlot);
		form.getLocalContext().setSelectedSlot(voSessionSlot);
		
	}

	@Override
	protected SessionSlotVo populateDataFromScreen()
	{
		SessionSlotVo voSlot = form.getGlobalContext().Scheduling.getSessionSlot();
		voSlot = super.populateDataFromScreen(voSlot);
		
		if(form.cmbSession().getValue() != null)
		{
			voSlot.setSession(form.cmbSession().getValue());
			form.getGlobalContext().RefMan.setSelectedSession(form.cmbSession().getValue());
		}
		else
			voSlot.setSession(form.getLocalContext().getSelectedSession());
		
		if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			DirectoryOfServiceSessionSlotVoCollection voCollDosSlot = voSlot.getDirectoryOfServices();
			if(voCollDosSlot == null)
				voCollDosSlot = new DirectoryOfServiceSessionSlotVoCollection();
			else
				voCollDosSlot.clear();
			
			//if changing here please also modify SlotGenerationUtils.copySlotDirectoryOfServices to same effect (dlaffan)
			for(int i=0;i<form.grdDos().getRows().size();i++)
			{
				grdDosRow row = form.grdDos().getRows().get(i);
				if(row.getColSelect())
				{
					DirectoryOfServiceSessionSlotVo voDosSlot = row.getValue();
					voDosSlot.setSlot(voSlot);
					voDosSlot.setDirectoryOfService(row.getColDOS());
					voDosSlot.setIsPublished(false);
					voDosSlot.setUSRN(Uuid.generateUUID());
					voCollDosSlot.add(voDosSlot);
				}
			}
			if(form.getLocalContext().getSelectedSession() != null)
				voSlot.setSessDateTime(new DateTime(form.getLocalContext().getSelectedSession().getSessionDate()));
			else if(form.cmbSession().getValue() != null)
				voSlot.setSessDateTime(new DateTime(form.cmbSession().getValue().getSessionDate()));
			
			voSlot.setDirectoryOfServices(voCollDosSlot);
			
		}
		
		//WDEV-22827
		 ServiceFunctionVoCollection functions = new ServiceFunctionVoCollection();
	
		for (int i=0; i<form.grdServiceFunctions().getRows().size(); i++)
		{
			ims.scheduling.forms.sessionslotdialog.GenForm.grdServiceFunctionsRow row = form.grdServiceFunctions().getRows().get(i);
			if (row.getColSelect())
			{
				ServiceFunctionVo voServFunc = row.getValue();
				functions.add(voServFunc);
			}
		}
		if (functions.size() > 0)
			voSlot.setFunctions(functions);
		//end WDEV-22827
		
		voSlot.setComment(form.txtComment().getValue());
		return voSlot;
	}

	@Override
	protected void populateScreenFromData(SessionSlotVo value)
	{
		super.populateScreenFromData(value);
		
		if(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"))
		{
			form.grdDos().getRows().clear();
			
			//load available Dos's
			if(form.getGlobalContext().Scheduling.getDirectoryofServicesCollectionIsNotNull())
			{
				for(DirectoryOfServiceVo voDos : form.getGlobalContext().Scheduling.getDirectoryofServicesCollection()) 
				{
					grdDosRow row = form.grdDos().getRows().newRow();
					row.setColDOS(voDos);
					row.setSelectable(false);
					row.setColSelect(false);
					row.setValue(new DirectoryOfServiceSessionSlotVo());
				}
			}
		}
		
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
		{
			form.cmbSlotType().setValue(SchedCABSlotType.LOCAL);

			if (value != null && value.getSession() != null)
				form.cmbSession().setValue((SessionShortVo) value.getSession());
		}

		ActivityRefVo activity = form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull() ? form.getGlobalContext().Scheduling.getBookingAppointment().getActivity() : form.getGlobalContext().Scheduling.getBookingActivity();

		if (activity != null)
		{
			defaultActivity(form.cmbActivity().getValues(), activity);
		}

		if (value != null)
			form.txtComment().setValue(value.getComment());
	}

	private String[] getUIValidationErrors()
	{
		List<String> errors = new ArrayList<String>();
				
		//called from book appointment to add slot on the fly
				
		if(form.cmbSlotType().getValue() == null)
			errors.add("Type is mandatory");
		
		if(form.cmbActivity().getValue() == null)
			errors.add("Activity is mandatory");
		
		if(form.cmbPriority().getValue() == null)
			errors.add("Priority is mandatory");
		
		if(form.timStart().getValue() == null)
			errors.add("Start Time is mandatory");
		
		//wdev-12073, 	WDEV-11638
		SessionShortVo tempvo = null;
		if(form.getGlobalContext().RefMan.getSelectedSessionsIsNotNull())
		{
			tempvo = form.cmbSession().getValue();
		}
		else if(form.getLocalContext().getSelectedSessionIsNotNull())
		{
			tempvo = form.getLocalContext().getSelectedSession();
		}
		
		if(form.intDuration().getValue() == null)
			errors.add("Duration is mandatory");
		else
		{
			if(tempvo != null)
			{
				if(tempvo.getStartTmIsNotNull() && tempvo.getEndTmIsNotNull())
				{
					if(form.intDuration().getValue() > (tempvo.getEndTm().getTotalMinutes()- tempvo.getStartTm().getTotalMinutes()))
						errors.add("Duration cannot be greater than session's length.");
				}
			}
			//--------
		}
		
		//	WDEV-11638 - start time
		if(tempvo != null && form.timStart().getValue() != null)
		{
			if(tempvo.getStartTmIsNotNull() && tempvo.getStartTm().isGreaterThan(form.timStart().getValue()))
			{
				errors.add("Slot Start Time cannot be earlier than Session Start Time."); //WDEV-18762
			}
			
			if(tempvo.getEndTmIsNotNull())
			{
				if(tempvo.getEndTm().isLessThan(form.timStart().getValue()))
				{
					errors.add("Slot Start Time cannot be later than Session End Time."); //WDEV-18762
				}
				else if(form.intDuration().getValue() != null)
				{
					Time slotDuration = (Time) form.timStart().getValue().clone();
					slotDuration.addMinutes(form.intDuration().getValue());
					
					if(tempvo.getEndTm().isLessThan(slotDuration))
					{
						errors.add("Slot End Time cannot be later than Session End Time."); //WDEV-18762
					}
				}
			}
		}
		//	WDEV-11638 - end time

		if(errors.size() == 0)
		{
			if(slotGoesIntoNextDay())
				errors.add("Slot End Time continues into the next day - action not allowed. Please revise Duration and/or Start Time");
		}
			
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private boolean slotGoesIntoNextDay()
	{
		int totalminutes = form.timStart().getValue().getTotalMinutes();
		if(totalminutes + form.intDuration().getValue() > 1440)
			return true;
		
		return false;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdSlots().getRows().size() == 0)
		{
			engine.close(DialogResult.CANCEL);
		}
		else
		{
			clearFields();
			
			if (form.getLocalContext().getSelectedSlot() !=  null)
			{
				populateScreenFromData(form.getLocalContext().getSelectedSlot());
			}
			
			form.setMode(FormMode.VIEW);
		}
	}

	//wdev-12428
	protected void onCmbSessionValueChanged() throws PresentationLogicException 
	{		
		loadListOwners();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}

	private void updateControlsState()
	{
		form.lblSlotType().setVisible(form.getGlobalContext().RefMan.getSelectedSessions() == null);
		form.cmbSlotType().setVisible(form.getGlobalContext().RefMan.getSelectedSessions() == null);
		form.cmbSlotType().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lblSession().setVisible(false);
		form.cmbSession().setVisible(false);
		form.cmbSession().setEnabled(false);
		
		form.grdDos().setVisible(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"));
		form.lblDos().setVisible(ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Choose and Book"));
		form.grdDos().setReadOnly(FormMode.VIEW.equals(form.getMode()));
		
		
		form.grdServiceFunctions().setReadOnly(FormMode.VIEW.equals(form.getMode()));//WDEV-22827
		
		form.cmbActivity().setEnabled(FormMode.EDIT.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getRebookingAppointmentMode()));
		
		form.btnEdit().setEnabled(form.grdSlots().getSelectedRow() != null && form.grdSlots().getSelectedRow().getValue().getID_Session_Slot() == null);
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.lblFunctions().setVisible(form.getLocalContext().getSelectedSession() != null && form.getLocalContext().getSelectedSession().getService() != null);
		form.grdServiceFunctions().setVisible(form.getLocalContext().getSelectedSession() != null && form.getLocalContext().getSelectedSession().getService() != null);
		form.grdServiceFunctions().setReadOnly(FormMode.VIEW.equals(form.getMode()));
		
		int hasServiceFunctions = form.grdServiceFunctions().getRows().size();
		form.lblFunctions().setVisible(hasServiceFunctions > 0);
		form.grdServiceFunctions().setVisible(hasServiceFunctions > 0);
		
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
	}

	@Override
	protected void onBtnAddClick() throws PresentationLogicException
	{
		clearFields();
		form.grdSlots().setValue(null);
		form.getLocalContext().setSelectedSlot(null);
		form.getGlobalContext().Scheduling.setSessionSlot(null);		 
		populateScreenFromData(null);
		form.setMode(FormMode.EDIT);
	}

	private void defaultActivity(ArrayList values, ActivityRefVo activityToDefault)
	{
		if (values == null || activityToDefault == null)
			return;
		for (int i=0;i<values.size();i++)
		{
			if (activityToDefault != null && ((ActivityVo)values.get(i)).getID_Activity().equals(activityToDefault.getID_Activity()))
			{
				form.cmbActivity().setValue((ActivityVo)values.get(i));
				break;
			}
		}
	}

	private void clearFields()
	{		
		form.cmbActivity().setValue(null);
		form.cmbPriority().setValue(null);
		form.cmbSlotType().setValue(null);
		form.grdDos().getRows().clear();
		form.grdServiceFunctions().getRows().clear();//WDEV-22827
		form.cmbSlotResponsiblity().setValue(null);
		form.txtComment().setValue(null);
		form.timStart().setValue(null);
		form.intDuration().setValue(null);
		
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		getSlotsToAdd();
		engine.close(DialogResult.OK);

	}

	private void getSlotsToAdd()
	{
		grdSlotsRowCollection rows = form.grdSlots().getRows();

		SessionSlotVoCollection slotsColl = new SessionSlotVoCollection();

		for (int i = 0; i < rows.size(); i++)
		{
			if (rows.get(i).getValue() != null && rows.get(i).getValue().getID_Session_Slot() == null)
				slotsColl.add(rows.get(i).getValue());
		}

		form.getGlobalContext().Scheduling.setSessionSlots(slotsColl);
	}

	@Override
	protected void onGrdSlotsSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedSlot(form.grdSlots().getValue());
		populateScreenFromData(form.getLocalContext().getSelectedSlot());
		updateControlsState();
		
	}

	@Override
	protected void onGrdServiceFunctionsGridCheckBoxClicked(int column, grdServiceFunctionsRow row, boolean isChecked) throws PresentationLogicException
	{
		if(isChecked)
		{
    		for (int i = 0 ; i < form.grdServiceFunctions().getRows().size(); i++)
    		{
    			form.grdServiceFunctions().getRows().get(i).setColSelect(false);
    		}
    		
    		row.setColSelect(true);
		}
		
	}
}
