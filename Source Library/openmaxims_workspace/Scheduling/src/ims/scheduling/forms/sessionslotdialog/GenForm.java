//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.sessionslotdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSlotResponsiblityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.Session_ListOwnerVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.Session_ListOwnerVo getValue()
		{
			return (ims.scheduling.vo.Session_ListOwnerVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.Session_ListOwnerVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSlotTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.SchedCABSlotType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.SchedCABSlotType getValue()
		{
			return (ims.scheduling.vo.lookups.SchedCABSlotType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.SchedCABSlotType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSessionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActivityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ActivityVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ActivityVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ActivityVo getValue()
		{
			return (ims.core.vo.ActivityVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ActivityVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.SchedulingPriority getValue()
		{
			return (ims.scheduling.vo.lookups.SchedulingPriority)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdServiceFunctionsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdServiceFunctionsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColFunctionsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColFunctionsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColFunctionsOpened()
		{
			super.row.showOpened(0);
		}
		public String getColFunctions()
		{
			return (String)super.row.get(0);
		}
		public void setColFunctions(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColFunctionsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.ServiceFunctionVo getValue()
		{
			return (ims.core.vo.ServiceFunctionVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.ServiceFunctionVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdServiceFunctionsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdServiceFunctionsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdServiceFunctionsRow get(int index)
		{
			return new grdServiceFunctionsRow(super.collection.get(index));
		}
		public grdServiceFunctionsRow newRow()
		{
			return new grdServiceFunctionsRow(super.collection.newRow());
		}
		public grdServiceFunctionsRow newRow(boolean autoSelect)
		{
			return new grdServiceFunctionsRow(super.collection.newRow(autoSelect));
		}
		public grdServiceFunctionsRow newRowAt(int index)
		{
			return new grdServiceFunctionsRow(super.collection.newRowAt(index));
		}
		public grdServiceFunctionsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdServiceFunctionsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdServiceFunctionsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.ServiceFunctionVoCollection getValues()
		{
			ims.core.vo.ServiceFunctionVoCollection listOfValues = new ims.core.vo.ServiceFunctionVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.ServiceFunctionVo getValue()
		{
			return (ims.core.vo.ServiceFunctionVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.ServiceFunctionVo value)
		{
			super.grid.setValue(value);
		}
		public grdServiceFunctionsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdServiceFunctionsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdServiceFunctionsRowCollection getRows()
		{
			return new grdServiceFunctionsRowCollection(super.grid.getRows());
		}
		public grdServiceFunctionsRow getRowByValue(ims.core.vo.ServiceFunctionVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdServiceFunctionsRow(row);
		}
		public void setColFunctionsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColFunctionsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdSlotsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSlotsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColSessionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColSessionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColSessionOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColSession(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColSession()
		{
			return (String)super.row.get(0);
		}
		public void setColSession(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColSessionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColActivityReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColActivityReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColActivityOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColActivity(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColActivity()
		{
			return (String)super.row.get(1);
		}
		public void setColActivity(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColActivityTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColPriorityReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColPriorityReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColPriorityOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColPriority(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColPriority()
		{
			return (String)super.row.get(2);
		}
		public void setColPriority(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColPriorityTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColTypeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColTypeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColType(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColType()
		{
			return (String)super.row.get(3);
		}
		public void setColType(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColTypeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColOwnerReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColOwnerReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColOwnerOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColOwner(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColOwner()
		{
			return (String)super.row.get(4);
		}
		public void setColOwner(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColOwnerTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColStartTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColStartTimeReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColStartTimeOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColStartTime(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColStartTime()
		{
			return (String)super.row.get(5);
		}
		public void setColStartTime(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColStartTimeTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColDurationReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColDurationOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColDuration(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColDuration()
		{
			return (String)super.row.get(6);
		}
		public void setColDuration(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColDurationTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.scheduling.vo.SessionSlotVo getValue()
		{
			return (ims.scheduling.vo.SessionSlotVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionSlotVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSlotsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSlotsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSlotsRow get(int index)
		{
			return new grdSlotsRow(super.collection.get(index));
		}
		public grdSlotsRow newRow()
		{
			return new grdSlotsRow(super.collection.newRow());
		}
		public grdSlotsRow newRow(boolean autoSelect)
		{
			return new grdSlotsRow(super.collection.newRow(autoSelect));
		}
		public grdSlotsRow newRowAt(int index)
		{
			return new grdSlotsRow(super.collection.newRowAt(index));
		}
		public grdSlotsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSlotsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSlotsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.scheduling.vo.SessionSlotVoCollection getValues()
		{
			ims.scheduling.vo.SessionSlotVoCollection listOfValues = new ims.scheduling.vo.SessionSlotVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.SessionSlotVo getValue()
		{
			return (ims.scheduling.vo.SessionSlotVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionSlotVo value)
		{
			super.grid.setValue(value);
		}
		public grdSlotsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSlotsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSlotsRowCollection getRows()
		{
			return new grdSlotsRowCollection(super.grid.getRows());
		}
		public grdSlotsRow getRowByValue(ims.scheduling.vo.SessionSlotVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSlotsRow(row);
		}
		public void setColSessionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColSessionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColActivityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColActivityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColPriorityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColPriorityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColOwnerHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColOwnerHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColStartTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColStartTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	public static class grdDosRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDosRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDOSReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDOSReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDOSOpened()
		{
			super.row.showOpened(0);
		}
		public ims.scheduling.vo.DirectoryOfServiceLiteVo getColDOS()
		{
			return (ims.scheduling.vo.DirectoryOfServiceLiteVo)super.row.get(0);
		}
		public void setColDOS(ims.scheduling.vo.DirectoryOfServiceLiteVo value)
		{
			super.row.set(0, value);
		}
		public void setCellColDOSTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.scheduling.vo.DirectoryOfServiceSessionSlotVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceSessionSlotVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceSessionSlotVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDosRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDosRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDosRow get(int index)
		{
			return new grdDosRow(super.collection.get(index));
		}
		public grdDosRow newRow()
		{
			return new grdDosRow(super.collection.newRow());
		}
		public grdDosRow newRow(boolean autoSelect)
		{
			return new grdDosRow(super.collection.newRow(autoSelect));
		}
		public grdDosRow newRowAt(int index)
		{
			return new grdDosRow(super.collection.newRowAt(index));
		}
		public grdDosRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDosRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDosGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection getValues()
		{
			ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection listOfValues = new ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.DirectoryOfServiceSessionSlotVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceSessionSlotVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceSessionSlotVo value)
		{
			super.grid.setValue(value);
		}
		public grdDosRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDosRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDosRowCollection getRows()
		{
			return new grdDosRowCollection(super.grid.getRows());
		}
		public grdDosRow getRowByValue(ims.scheduling.vo.DirectoryOfServiceSessionSlotVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDosRow(row);
		}
		public void setColDOSHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDOSHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(488, 560);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 488, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Session Slot", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 228, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Type/Function:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 334, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Slot Comment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 431, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Slots Added:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 311, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 118, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 141, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Directory of Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Session:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 405, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 380, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 68, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Activity:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 93, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 397, 534, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 99, 534, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 534, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 315, 534, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 397, 534, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 136, 334, 336, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 136, 309, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSlotResponsiblityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSlotResponsiblityTemp);
		cmbSlotResponsiblityComboBox cmbSlotResponsiblity = (cmbSlotResponsiblityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSlotResponsiblityComboBox.class, m_cmbSlotResponsiblityTemp);
		super.addComboBox(cmbSlotResponsiblity);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 136, 116, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSlotTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSlotTypeTemp);
		cmbSlotTypeComboBox cmbSlotType = (cmbSlotTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSlotTypeComboBox.class, m_cmbSlotTypeTemp);
		super.addComboBox(cmbSlotType);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 136, 41, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSessionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSessionTemp);
		cmbSessionComboBox cmbSession = (cmbSessionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessionComboBox.class, m_cmbSessionTemp);
		super.addComboBox(cmbSession);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 136, 66, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbActivityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActivityTemp);
		cmbActivityComboBox cmbActivity = (cmbActivityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActivityComboBox.class, m_cmbActivityTemp);
		super.addComboBox(cmbActivity);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 136, 91, 336, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);

		// Grid Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 136, 228, 336, 76, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdServiceFunctionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdServiceFunctionsTemp);
		grdServiceFunctionsGrid grdServiceFunctions = (grdServiceFunctionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServiceFunctionsGrid.class, m_grdServiceFunctionsTemp);
		grdServiceFunctions.addStringColumn("Function", 0, 0, 270, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdServiceFunctions.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdServiceFunctions);
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 447, 456, 80, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(44), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSlotsTemp);
		grdSlotsGrid grdSlots = (grdSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotsGrid.class, m_grdSlotsTemp);
		grdSlots.addStringColumn("Session", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Activity", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Priority", 0, 0, 54, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Type", 0, 0, 45, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Owner", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Start\nTime", 0, 0, 40, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Duration", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSlots);
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 136, 141, 336, 83, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdDosTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDosTemp);
		grdDosGrid grdDos = (grdDosGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDosGrid.class, m_grdDosTemp);
		grdDos.addStringColumn("Directory of Service", 0, 0, 270, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDos.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdDos);

		// Time Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 136, 378, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 136, 403, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(3)}));
	}


	public Label lblFunctions()
	{
		return (Label)super.getControl(1);
	}
	public Label lbl5()
	{
		return (Label)super.getControl(4);
	}
	public Label lblSlotType()
	{
		return (Label)super.getControl(5);
	}
	public Label lblDos()
	{
		return (Label)super.getControl(6);
	}
	public Label lblSession()
	{
		return (Label)super.getControl(7);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(12);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(13);
	}
	public Button btnAdd()
	{
		return (Button)super.getControl(14);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(15);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(16);
	}
	public TextBox txtComment()
	{
		return (TextBox)super.getControl(17);
	}
	public cmbSlotResponsiblityComboBox cmbSlotResponsiblity()
	{
		return (cmbSlotResponsiblityComboBox)super.getComboBox(0);
	}
	public cmbSlotTypeComboBox cmbSlotType()
	{
		return (cmbSlotTypeComboBox)super.getComboBox(1);
	}
	public cmbSessionComboBox cmbSession()
	{
		return (cmbSessionComboBox)super.getComboBox(2);
	}
	public cmbActivityComboBox cmbActivity()
	{
		return (cmbActivityComboBox)super.getComboBox(3);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(4);
	}
	public grdServiceFunctionsGrid grdServiceFunctions()
	{
		return (grdServiceFunctionsGrid)super.getGrid(0);
	}
	public grdSlotsGrid grdSlots()
	{
		return (grdSlotsGrid)super.getGrid(1);
	}
	public grdDosGrid grdDos()
	{
		return (grdDosGrid)super.getGrid(2);
	}
	public TimeControl timStart()
	{
		return (TimeControl)super.getControl(26);
	}
	public IntBox intDuration()
	{
		return (IntBox)super.getControl(27);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedSession = new ims.framework.ContextVariable("SelectedSession", prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier + "");
			cxl_RebookingAppointmentMode = new ims.framework.ContextVariable("RebookingAppointmentMode", prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__RebookingAppointmentMode_" + componentIdentifier + "");
			cxl_SelectedSlot = new ims.framework.ContextVariable("SelectedSlot", prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier + "");
			cxl_SelectedApptSessionReferralRef = new ims.framework.ContextVariable("SelectedApptSessionReferralRef", prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedApptSessionReferralRef_" + componentIdentifier + "");
		}
		
		public boolean getSelectedSessionIsNotNull()
		{
			return !cxl_SelectedSession.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVo getSelectedSession()
		{
			return (ims.scheduling.vo.SessionShortVo)cxl_SelectedSession.getValue(context);
		}
		public void setSelectedSession(ims.scheduling.vo.SessionShortVo value)
		{
			cxl_SelectedSession.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSession = null;
		public boolean getRebookingAppointmentModeIsNotNull()
		{
			return !cxl_RebookingAppointmentMode.getValueIsNull(context);
		}
		public Boolean getRebookingAppointmentMode()
		{
			return (Boolean)cxl_RebookingAppointmentMode.getValue(context);
		}
		public void setRebookingAppointmentMode(Boolean value)
		{
			cxl_RebookingAppointmentMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RebookingAppointmentMode = null;
		public boolean getSelectedSlotIsNotNull()
		{
			return !cxl_SelectedSlot.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionSlotVo getSelectedSlot()
		{
			return (ims.scheduling.vo.SessionSlotVo)cxl_SelectedSlot.getValue(context);
		}
		public void setSelectedSlot(ims.scheduling.vo.SessionSlotVo value)
		{
			cxl_SelectedSlot.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSlot = null;
		public boolean getSelectedApptSessionReferralRefIsNotNull()
		{
			return !cxl_SelectedApptSessionReferralRef.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getSelectedApptSessionReferralRef()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cxl_SelectedApptSessionReferralRef.getValue(context);
		}
		public void setSelectedApptSessionReferralRef(ims.RefMan.vo.CatsReferralRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedApptSessionReferralRef' RefVo context variable.");
			if(value == null)
				cxl_SelectedApptSessionReferralRef.setValue(context, null);
			else
				cxl_SelectedApptSessionReferralRef.setValue(context, new ims.RefMan.vo.CatsReferralRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedApptSessionReferralRef = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[268];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-REMAININGSLOTS", "RemainingSlots");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-TOTALSLOTS", "TotalSlots");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISFIXED", "IsFixed");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-STARTTM", "StartTm");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ENDTM", "EndTm");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-MAXCONTINUOUSAVAILABLEMINS", "MaxContinuousAvailableMins");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CONSMEDIATYPE", "ConsMediaType");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONSTATUS", "SessionStatus");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONCOMMENT", "SessionComment");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-LISTTYPE", "ListType");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-DESCRIPTION", "Description");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISACTIVE", "IsActive");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-PASCLINIC", "PASClinic");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CANCELLATIONREASON", "CancellationReason");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-COMMENT", "Comment");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-WASSESSIONMOVED", "WasSessionMoved");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CASENOTEFOLDERNOTREQUIRED", "CaseNoteFolderNotRequired");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONPROFILETYPE", "SessionProfileType");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-LETTERREQUIRED", "LetterRequired");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SAFETYBRIEFDELAYREASON", "SafetyBriefDelayReason");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-ID", "ID_Session_Slot");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-STARTTM", "StartTm");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-DURATION", "Duration");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-PRIORITY", "Priority");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-ISACTIVE", "IsActive");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-DIRECTACCESSSLOT", "DirectAccessSlot");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-DEALLOCDATE", "DeallocDate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-STATUS", "Status");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-STATUSREASON", "StatusReason");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-SESSDATETIME", "SessDateTime");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-CANCELBLOCKREASON", "CancelBlockReason");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-CANCELBLOCKCOMMENT", "CancelBlockComment");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-COMMENT", "Comment");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-WASBLOCKEDCABSLOT", "WasBlockedCABSlot");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPROVIDERCANCELLATIONS", "NumProviderCancellations");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASPRINTED", "WasPrinted");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-NUMPATIENTCANCELLATIONS", "NumPatientCancellations");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTAPPTKPIDATE", "FirstApptKPIDate");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-RTTBREACHKPIDATE", "RTTBreachKPIDate");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REASONFORBREACHINGFIRSTAPPTKPI", "ReasonForBreachingFirstApptKPI");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTSFORBREACHINGFIRSTAPPTKPI", "CommentsForBreachingFirstApptKPI");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DATE28DAYRULEBREACH", "Date28DayRuleBreach");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DONOTMOVE", "DoNotMove");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHREASON", "Day28BreachReason");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-DAY28BREACHCOMMENT", "Day28BreachComment");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISFLEXIBLEAPPOINTMENT", "IsFlexibleAppointment");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISWARDATTENDANCE", "IsWardAttendance");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-FIRSTCONSULTATIONACTIVITY", "FirstConsultationActivity");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ELECTIVELIST", "ElectiveList");
			fields[222] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATIENTCATEGORY", "PatientCategory");
			fields[223] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTBOOKEDONSAMEDAY", "ApptBookedOnSameDay");
			fields[224] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASAPPTCOMMUNICATED", "WasApptCommunicated");
			fields[225] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISDISPLACED", "IsDisplaced");
			fields[226] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMEDATETIME", "OutcomeDateTime");
			fields[227] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-ID", "ID_Sch_Session");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-NAME", "Name");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-REMAININGSLOTS", "RemainingSlots");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-TOTALSLOTS", "TotalSlots");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-ISFIXED", "IsFixed");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-STARTTM", "StartTm");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-ENDTM", "EndTm");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-MAXCONTINUOUSAVAILABLEMINS", "MaxContinuousAvailableMins");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-CONSMEDIATYPE", "ConsMediaType");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-SESSIONSTATUS", "SessionStatus");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-SESSIONCOMMENT", "SessionComment");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-LISTTYPE", "ListType");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-DESCRIPTION", "Description");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-ISACTIVE", "IsActive");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-PASCLINIC", "PASClinic");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-CANCELLATIONREASON", "CancellationReason");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-COMMENT", "Comment");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-WASSESSIONMOVED", "WasSessionMoved");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-CASENOTEFOLDERNOTREQUIRED", "CaseNoteFolderNotRequired");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-SESSIONPROFILETYPE", "SessionProfileType");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-LETTERREQUIRED", "LetterRequired");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSession_" + componentIdentifier, "BO-1055100010-SAFETYBRIEFDELAYREASON", "SafetyBriefDelayReason");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-ID", "ID_Session_Slot");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-STARTTM", "StartTm");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-DURATION", "Duration");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-PRIORITY", "Priority");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-ISACTIVE", "IsActive");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-DIRECTACCESSSLOT", "DirectAccessSlot");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-DEALLOCDATE", "DeallocDate");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-STATUS", "Status");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-STATUSREASON", "StatusReason");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-SESSDATETIME", "SessDateTime");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-CANCELBLOCKREASON", "CancelBlockReason");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-CANCELBLOCKCOMMENT", "CancelBlockComment");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-COMMENT", "Comment");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSlot_" + componentIdentifier, "BO-1055100016-WASBLOCKEDCABSLOT", "WasBlockedCABSlot");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedApptSessionReferralRef_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
