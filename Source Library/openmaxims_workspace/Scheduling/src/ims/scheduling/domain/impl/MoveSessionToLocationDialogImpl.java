//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.domain.LocShortMappingsVoAssembler;
import ims.core.vo.domain.LocShortVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.base.impl.BaseMoveSessionToLocationDialogImpl;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.domain.SessionShortVoAssembler;

public class MoveSessionToLocationDialogImpl extends BaseMoveSessionToLocationDialogImpl
{

	private static final long serialVersionUID = 1L;

	public LocShortMappingsVoCollection listActiveTheatreLocationsForHospital(LocationRefVo location, String name)
	{
		if (location == null)
			return null;
		
		OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveLocationsForHospitalByName(location,new int[]{LocationType.THEATRE.getID(),LocationType.PROCEDURE_ROOM.getID()}, name);
	}

	public void moveSessionToLocation(SessionShortVo session, LocShortVo location) throws ims.domain.exceptions.StaleObjectException
	{
		if (session == null)
			throw new CodingRuntimeException("session cannot be null in method moveSessionToDate");

		Sch_Session doSession = SessionShortVoAssembler.extractSch_Session(getDomainFactory(), session);
		Location doLocation = LocShortVoAssembler.extractLocation(getDomainFactory(), location);
		
		Boolean sessionRequiresCaseNoteLocation = doSession.isCaseNoteFolderNotRequired() == null || Boolean.FALSE.equals(doSession.isCaseNoteFolderNotRequired());
		
		if (doLocation != null)
		{
			doSession.setSchLocation(doLocation);
			doSession.setLocationMovedDateTime(new java.util.Date());
			
			if (sessionRequiresCaseNoteLocation)
				doSession.setCaseNoteFolderLocation(Boolean.TRUE.equals(doLocation.isCaseNoteFolderLocation()) ? doLocation : null); 			
		}	
		
		getDomainFactory().save(doSession);
	}

	public LocationLiteVo getHospitalForCurrentLocation(LocationRefVo location)
	{
		if (location == null || location.getID_Location() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location) factory.getDomainObject(Location.class, location.getID_Location());

		return getHospital(doLocation);
	}

	private LocationLiteVo getHospital(Location doLocation)
	{
		if (doLocation instanceof LocSite && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
		{
			return LocShortMappingsVoAssembler.create((LocSite) doLocation);
		}

		while (doLocation.getParentLocation() != null)
		{
			doLocation = doLocation.getParentLocation();

			if (doLocation instanceof LocSite && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			{
				return LocShortMappingsVoAssembler.create((LocSite) doLocation);
			}
		}

		return null;
	}
	
	public SessionShortVo getSession(Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			throw new CodingRuntimeException("session is null or id not provided in method getSession");
		
		return SessionShortVoAssembler.create((Sch_Session) getDomainFactory().getDomainObject(session));
	}
}
