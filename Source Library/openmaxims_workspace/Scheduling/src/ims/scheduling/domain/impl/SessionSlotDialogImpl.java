//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3111.36466)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.ServiceFunctionVoCollection;
import ims.core.vo.domain.ActivityVoAssembler;
import ims.core.vo.domain.ServiceFunctionVoAssembler;
import ims.core.vo.lookups.ActivityType;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.ProfilesSlotGeneric;
import ims.scheduling.domain.base.impl.BaseSessionSlotDialogImpl;
import ims.scheduling.vo.SessionShortVo;

import java.util.List;

public class SessionSlotDialogImpl extends BaseSessionSlotDialogImpl
{
	private static final long serialVersionUID = 1L;
	
	/**
	* listActivities
	*/	
	//WDEV-22973 
	public ActivityVoCollection listActivities(CatsReferralRefVo catsReferralRef, ServiceRefVo serviceRef)
	{
		if (catsReferralRef != null && serviceRef != null)
		{	
			DomainFactory factory = getDomainFactory();
			String query = null;

			Long noConsultationActivityRequiredForReferral = factory.countWithHQL("select count(cats.id) from CatsReferral as cats where cats.id = :CatsReferralId and (cats.consultationActivityRequired = 0 or cats.consultationActivityRequired is null) ", new String[] {"CatsReferralId"}, new Object[] {catsReferralRef.getID_CatsReferral()});

			if (noConsultationActivityRequiredForReferral == null || noConsultationActivityRequiredForReferral == 0) //WDEV-22672
			{
				Long appointmentsCount = factory.countWithHQL("select count(appts.id) from CatsReferral as cats right join cats.appointments as appts where appts.theatreBooking is null and cats.id = :CatsReferralId", new String[] {"CatsReferralId"}, new Object[] {catsReferralRef.getID_CatsReferral()});
				query = "select act from ServiceActivity as servActivity left join servActivity.activity as act left join servActivity.service as serv where serv.id = :serviceID and act.activityType.id = :actType and servActivity.isActive = :isActive" + ((appointmentsCount == null || appointmentsCount == 0) ? " and (act.firstAppointment = 1 or act.diagnostic = 1)" : "") + " order by act.name asc";			}
			else
			{
				query = "select act from ServiceActivity as servActivity left join servActivity.activity as act left join servActivity.service as serv where serv.id = :serviceID and act.activityType.id = :actType and servActivity.isActive = :isActive order by act.name asc";
			}

			if(query != null && query.length() > 0)
			{
				List<?> results = factory.find(query, new String[]{"serviceID", "actType", "isActive"}, new Object[]{serviceRef.getID_Service(), ActivityType.APPOINTMENTTYPES.getId(), Boolean.TRUE});
				if (results == null || results.isEmpty())
					return null;
				return ActivityVoAssembler.createActivityVoCollectionFromActivity(results);
			}		

		}
		ProfilesSlotGeneric impl = (ProfilesSlotGeneric) getDomainImpl(ProfilesSlotGenericImpl.class);
		return impl.listActivities();

	}
	
	//WDEV-22827 //WDEV-22931
	public ServiceFunctionVoCollection listServiceFunctionByService(SessionShortVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			throw new CodingRuntimeException("session parameter is null or id not provided in method listServiceFunctionByService");
		
		DomainFactory factory = getDomainFactory();
		List <?> servFuncs = factory.find("select funct from ServiceFunction as funct left join funct.function as f left join funct.service as serv where funct.isActive = :ACTIVE AND serv.id = :SERVICE_ID AND f.id IN (select l2_1.id from Sch_Session as s1_1 left join s1_1.sch_Profile as s2_1 left join s2_1.function as l1_1 left join l1_1.instance as l2_1 where s1_1.id = :SESSION_ID) ", new String[]{"ACTIVE", "SERVICE_ID", "SESSION_ID"}, new Object[]{Boolean.TRUE, session.getService().getID_Service(), session.getID_Sch_Session()});
		
		if (servFuncs == null || servFuncs.isEmpty())
			return null;
		
		return  ServiceFunctionVoAssembler.createServiceFunctionVoCollectionFromServiceFunction(servFuncs);
	}

}
