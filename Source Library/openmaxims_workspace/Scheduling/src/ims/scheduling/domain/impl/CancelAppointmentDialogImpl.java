//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3085.19074)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralforElectiveListDetailsVo;
import ims.RefMan.vo.PatientElectiveListForCancelAppointmentVo;
import ims.RefMan.vo.TCIForReferralBookingVo;
import ims.RefMan.vo.domain.CatsReferralforElectiveListDetailsVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListForCancelAppointmentVoAssembler;
import ims.RefMan.vo.domain.TCIForReferralBookingVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.base.impl.BaseCancelAppointmentDialogImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.domain.CancellationTypeReasonVoAssembler;
import ims.scheduling.vo.lookups.CancelAppointmentReasonCollection;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.Iterator;
import java.util.List;

public class CancelAppointmentDialogImpl extends BaseCancelAppointmentDialogImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* listCancellationReasonByType
	*/
	public CancellationTypeReasonVoCollection listCancellationReasonByType(Status_Reason type, Boolean cancelSession, Boolean isTheatreAppointment)
	{
		if(type == null)
			throw new CodingRuntimeException("type is null in method listCancellationReasonByType");
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "select cr from CancellationTypeReason as cr where cr.cancellationType = :cancelType";
		
		//WDEV-20595
		if (Boolean.TRUE.equals(isTheatreAppointment)) //Theatre Appointment
		{
			hql += " and cr.tCITheatre = 1 ";
		}
		else if (!(Boolean.TRUE.equals(cancelSession))) //Outpatient or Ward Attenders appointment
		{
			hql += " and cr.outpatients = 1 ";
		}
		
		List cancelReasons = factory.find(hql, new String[]{"cancelType"}, new Object[]{getDomLookup(type)});
		
		if (cancelReasons == null || cancelReasons.isEmpty())
			return null;
		return  CancellationTypeReasonVoAssembler.createCancellationTypeReasonVoCollectionFromCancellationTypeReason(cancelReasons);
	}

	private CancelAppointmentReasonCollection createLookupCollection(List cancelReasons)
	{
		CancelAppointmentReasonCollection collReasons = new CancelAppointmentReasonCollection();
		Iterator it = cancelReasons.iterator();
		while(it.hasNext())
		{
			LookupInstance doReasonInst = (LookupInstance) it.next();
			ims.framework.utils.ImagePath img = null;
			ims.framework.utils.Color color = null;		
			img = null;
			if (doReasonInst.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(doReasonInst.getImage().getImageId(), doReasonInst.getImage().getImagePath());
			}
			color = doReasonInst.getColor();
			if (color != null) 
				color.getValue();

			ims.scheduling.vo.lookups.CancelAppointmentReason cancelReasonInst = new ims.scheduling.vo.lookups.CancelAppointmentReason(doReasonInst.getId(),doReasonInst.getText(), doReasonInst.isActive(), null, img, color);
			collReasons.add(cancelReasonInst);
		}

		return collReasons;
	}

	public Boolean isReferralICPCompleted(Booking_AppointmentRefVo bookingAppt)
	{
		if (bookingAppt==null || !bookingAppt.getID_Booking_AppointmentIsNotNull())
			return false;
		String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.appointments as apps where (apps.id = :bookId and patICP.completedDateTime is not null )";
		long count = getDomainFactory().countWithHQL(hql,new String[]{"bookId"},new Object[]{bookingAppt.getID_Booking_Appointment()});
		return count > 0;
	}

	//wdev-18419
	public CatsReferralforElectiveListDetailsVo getCatsReferral(CatsReferralRefVo catsRef)
	{
		if( catsRef == null )
			return null;
		DomainFactory factory = getDomainFactory();
		
		CatsReferral domCatsReferral = (CatsReferral)factory.getDomainObject(CatsReferral.class, catsRef.getID_CatsReferral());
		return CatsReferralforElectiveListDetailsVoAssembler.create(domCatsReferral);
	}

	//wdev-18419
	public PatientElectiveListForCancelAppointmentVo getPatientElectiveList(CatsReferralforElectiveListDetailsVo catsReferral)
	{
		if( catsReferral == null || !catsReferral.getJourneyIsNotNull() || !catsReferral.getJourney().getCurrentClockIsNotNull())
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String patientElectiveListQuery = "select electiveList from PatientElectiveList as electiveList left join electiveList.referral as cats left join electiveList.pathwayClock as pc where cats.id = :CatsId and pc.id = :PathwayClock";
		List<?> electiveList = factory.find(patientElectiveListQuery, new String[] {"CatsId", "PathwayClock"}, new Object[] {catsReferral.getID_CatsReferral(), catsReferral.getJourney().getCurrentClock().getID_PathwayClock()});
		
		if( electiveList != null && electiveList.size() > 0 && electiveList.get(0) instanceof PatientElectiveList)
		{
			return PatientElectiveListForCancelAppointmentVoAssembler.create((PatientElectiveList)electiveList.get(0));	
		}
		
		return null;
	}

	public Boolean isFirstAppointment(Booking_AppointmentRefVo appointmentRef)
	{
		if(appointmentRef == null || appointmentRef.getID_Booking_Appointment() == null)
			return null;
		
		String query = "select act.firstAppointment from Booking_Appointment as ba left join ba.activity as act where ba.id = :BookinAppointmentId ";
		List list = getDomainFactory().find(query, new String[] {"BookinAppointmentId"}, new Object[] {appointmentRef.getID_Booking_Appointment()});
		
		if(list != null && list.size() > 0)
			return Boolean.TRUE.equals(list.get(0));
		
		return null;
	}

	public Integer hasMoreThanOneProviderCancellation(Booking_AppointmentRefVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Cannnot return Booking_Appointment.numProviderCancellations for a null ApptId.");
		
		String query = "select appt.numProviderCancellations from Booking_Appointment as appt where appt.id = :ApptId";
		DomainFactory factory = getDomainFactory();
		
		List<?> list = factory.find(query, new String[] {"ApptId"}, new Object[] {appt.getID_Booking_Appointment()});
		
		if(list == null || list.size() == 0)
			return null;
		
		if(list.get(0) instanceof Integer)
			return (Integer) list.get(0);
		
		return null;
	}

	public Integer hasMoreThanOnePatientCancellation(Booking_AppointmentRefVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Cannnot return Booking_Appointment.numPatientCancellations for a null ApptId.");
		
		String query = "select appt.numPatientCancellations from Booking_Appointment as appt where appt.id = :ApptId";
		DomainFactory factory = getDomainFactory();
		
		List<?> list = factory.find(query, new String[] {"ApptId"}, new Object[] {appt.getID_Booking_Appointment()});
		
		if(list == null || list.size() == 0)
			return null;
		
		if(list.get(0) instanceof Integer)
			return (Integer) list.get(0);
		
		return null;
	}

	
	//WDEV-19440
	public Boolean isAppointmentMarkedAsDoNotMove(Booking_AppointmentRefVo appRef)
	{
		if(appRef == null || appRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Cannnot return Booking_Appointment for a null ApptId.");
		
		String query = "select appt.doNotMove from Booking_Appointment as appt where appt.id = :ApptId ";
		DomainFactory factory = getDomainFactory();
		
		List<?> list = factory.find(query, new String[] {"ApptId"}, new Object[] {appRef.getID_Booking_Appointment()});
		
		if(list != null && list.size() > 0)
			return Boolean.TRUE.equals(list.get(0));
		
		return false;
	}

	//WDEV-19543
	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo bookingApptRef)
	{
		if(bookingApptRef == null || bookingApptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Cannnot return Booking_Appointment for a null ApptId.");
		
		DomainFactory factory = getDomainFactory();
		Booking_Appointment doBookAppt = (Booking_Appointment)factory.getDomainObject(Booking_Appointment.class, bookingApptRef.getID_Booking_Appointment());
		
		return Booking_AppointmentVoAssembler.create(doBookAppt);
		
	}

	//WDEV-19445
	public TCIForReferralBookingVo getLinkedTCI(Booking_AppointmentRefVo voApptRef)
	{
		if (voApptRef == null)
			throw new CodingRuntimeException("Cannot retrieve TCI for a null Booking_Appointment reference.");
		
		String hql = "select tci from TCIForPatientElectiveList as tci left join tci.appointment as appt where appt.id = :APPT_ID";
		
		DomainFactory factory = getDomainFactory();
		
		List<?> list = factory.find(hql, new String[]{"APPT_ID"}, new Object[]{voApptRef.getID_Booking_Appointment()});
		
		if (list == null || list.isEmpty() || list.get(0) == null)
			return null;
		
		return TCIForReferralBookingVoAssembler.create((TCIForPatientElectiveList) list.get(0));
		
	}

}
