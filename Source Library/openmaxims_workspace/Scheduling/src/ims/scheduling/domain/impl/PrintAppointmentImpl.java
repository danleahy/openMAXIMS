//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3110.16630)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import ims.admin.vo.ReportListVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.domain.ReportListVoAssembler;
import ims.admin.vo.domain.ReportTemplateLiteVoAssembler;
import ims.admin.vo.domain.ReportTemplateVoAssembler;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.core.admin.domain.objects.ReportBo;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.admin.vo.ReportBoRefVo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.domain.Reports;
import ims.core.domain.impl.ReportsImpl;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.base.impl.BasePrintAppointmentImpl;
import ims.scheduling.domain.objects.Appointment_Status;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Booking;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentVoCollection;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.domain.Appointment_StatusVoAssembler;
import ims.scheduling.vo.domain.Sch_BookingVoAssembler;

public class PrintAppointmentImpl extends BasePrintAppointmentImpl
{

	private static final long serialVersionUID = 1L;
	
	/**
	* getReportAndTemplate
	*/
	public String[] getReportAndTemplate(Integer nReportId, Integer nTemplateId) throws ims.domain.exceptions.DomainInterfaceException
	{
		Reports impl = (Reports) getDomainImpl(ReportsImpl.class);
		return impl.getReportAndTemplate(nReportId, nTemplateId);	
	}


	public ReportListVo getReport(ReportBoRefVo voRef)
	{
		DomainFactory factory = getDomainFactory();
		
		ReportBo dom = (ReportBo)factory.getDomainObject(ReportBo.class, voRef.getID_ReportBo());
		ReportListVo vo = ReportListVoAssembler.create(dom);
		
		return vo;
	}
	
	public ReportTemplateLiteVoCollection getTemplates(ArrayList ids)
	{
		if (ids == null)
			throw new CodingRuntimeException("Mandatory argument - ids");
					
		DomainFactory factory = getDomainFactory();	
		String hql ="select profile.id from Booking_Appointment as ba left join ba.session as sess left join sess.sch_Profile as profile where ba.id in ( ";
		
		for (int i = 0; i < ids.size(); i++)
		{
			if (i == 0 || i == ids.size())
				hql+=ids.get(0);
			else
				hql+=("," + ids.get(i));
		}
		hql += " )";		
		hql +=" and ba.isRIE is null and sess.isRIE is null and profile.isRIE is null";
		
		String finalHQL = "select pt.template from ProfileTemplate as pt left join pt.template as temp left join temp.report as report join pt.profile as prof where report.isActive =1 and temp.isActive =1 and prof.id in ( "; //WDEV-23494 //WDEV-23731 
		finalHQL += hql;
		finalHQL += " )";		
		finalHQL +=" and pt.isRIE is null and temp.isRIE is null and prof.isRIE is null";
				
		List lst = factory.find(finalHQL);
		
		return ReportTemplateLiteVoAssembler.createReportTemplateLiteVoCollectionFromTemplateBo(lst);
	}


	//WDEV-19381
	public Boolean savePatientDocument(PatientDocumentVo patientDocumentToSave, ArrayList idsArrayList) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		PatientDocument domainPatientDocument=null;
		if (patientDocumentToSave != null)
		{	
    		if (!patientDocumentToSave.isValidated())
    			throw new DomainRuntimeException("PatientDocument record not validated");
    		
    		// Save PatientDocumet record
    		domainPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, patientDocumentToSave);
    		factory.save(domainPatientDocument);
		}
		//link PatDocument to Booked Appointments
		List collAppointments=getAppointmentsByIdList(idsArrayList);
		for (int i=0; collAppointments!=null && i<collAppointments.size();i++)
		{
			Booking_Appointment doBookApp = (Booking_Appointment)collAppointments.get(i);
			
			if (domainPatientDocument!=null)
			{
				doBookApp.setBookingLetter(domainPatientDocument);	
			}
			
			doBookApp.setWasPrinted(true);
			
			//WDEV-21094
			if (doBookApp.getApptStatusHistory() != null && doBookApp.getApptStatusHistory().size() > 0)
			{
				Iterator it = doBookApp.getApptStatusHistory().iterator();
				
				while (it.hasNext())
				{
					Appointment_Status apptStatus = (Appointment_Status) it.next();
					
					if (wasLastRecordAdded(apptStatus, doBookApp.getApptStatusHistory()))
					{	
						apptStatus.setWasLetterPrinted(true);
						break;
					}
				}
			}
			
			factory.save(doBookApp);
		}
		
		return true;
	}

	private boolean wasLastRecordAdded(Appointment_Status status, Set apptStatusHistory)
	{
		Iterator it = apptStatusHistory.iterator();
		
		while (it.hasNext())
		{
			Appointment_Status statusToCompare = (Appointment_Status) it.next();
			
			if (statusToCompare.getId().intValue() >  status.getId().intValue())
			{
				return false;
			}
		}
		
		return true;
	}


	//WDEV-19381
	private List getAppointmentsByIdList(ArrayList idsArrayList)
	{
		if (idsArrayList == null)
			throw new CodingRuntimeException("Mandatory argument - ids");
					
		DomainFactory factory = getDomainFactory();	
		String hql ="select ba from Booking_Appointment as ba where ba.id in ( ";
		
		for (int i = 0; i < idsArrayList.size(); i++)
		{
			if (i == 0 || i == idsArrayList.size())
				hql+=idsArrayList.get(0);
			else
				hql+=("," + idsArrayList.get(i));
		}
		hql += " )";		
		hql +=" and (ba.isRIE is null OR ba.isRIE = 0 )";
		
		return factory.find(hql);
		
	}


	//WDEV-19381
	public ReportTemplateVo getReportTemplateVo(TemplateBoRefVo reportTemplateRef)
	{
		if (reportTemplateRef==null)
			throw new CodingRuntimeException("Cannot Get Report Template for null value");
		
		TemplateBo domReportTemplate=(TemplateBo)getDomainFactory().getDomainObject(TemplateBo.class, reportTemplateRef.getID_TemplateBo());
		
		return ReportTemplateVoAssembler.create(domReportTemplate);
	}
	
}
