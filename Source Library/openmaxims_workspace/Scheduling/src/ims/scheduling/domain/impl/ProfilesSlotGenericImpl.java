//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.35 build 2095.22336)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.domain.ActivityVoAssembler;
import ims.core.vo.domain.ServiceFunctionLiteVoAssembler;
import ims.core.vo.lookups.ActivityType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.ServiceFunctionCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.ProfileMaintenance;
import ims.scheduling.vo.DirectoryOfServiceVoCollection;
import ims.scheduling.vo.DirectoryofServiceRefVoCollection;
import ims.scheduling.vo.ProfileRippleVo;
import ims.scheduling.vo.domain.DirectoryOfServiceVoAssembler;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ProfilesSlotGenericImpl extends DomainImpl implements ims.scheduling.domain.ProfilesSlotGeneric, ims.domain.impl.Transactional
{
	/**
	* listActivities
	*/
	public ActivityVoCollection listActivities() 
	{	
		DomainFactory factory = getDomainFactory();
		// For profile Slot, we want to list
		// all activities for appointment activity type
		String hql = " from Activity act where act.activityType.id = :activityType and act.isActive = :active";
		List lst = factory.find(hql, new String[]{"activityType", "active"}, new Object[]{new Integer(ActivityType.APPOINTMENTTYPES.getId()), Boolean.TRUE});
		return (ActivityVoAssembler.createActivityVoCollectionFromActivity(lst));
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionByDOSs(DirectoryofServiceRefVoCollection dosColl)
	{
		if(dosColl == null)
			throw new CodingRuntimeException("dosColl parameter is null in method listServiceFunctionByDOSs");
		
		DomainFactory factory = getDomainFactory();
		List servFuncs = factory.find("select dos.functions from DirectoryofService as dos where dos.id in (" + getIdString(dosColl) + ")");
		return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(servFuncs);
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionByService(ServiceRefVo service)
	{
		if(service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("service parameter is null or id not provided in method listServiceFunctionByService");
		
		DomainFactory factory = getDomainFactory();
		List servFuncs = factory.find("from ServiceFunction as servFunc where servFunc.service.id = :idService",new String[]{"idService"}, new Object[]{service.getID_Service()});
		return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(servFuncs);
	}
	
	private String getIdString(DirectoryofServiceRefVoCollection dosColl)
	{
		if(dosColl == null)
			throw new CodingRuntimeException("dosColl is null in method getIdString");
			
		String idString = "";
		
		for(int i=0;i<dosColl.size();i++)
		{
			idString += dosColl.get(i).getID_DirectoryofService();
			idString += ((dosColl.size() - (i+1)) > 0 ? "," : "");
		}
		
		return idString;
	}

	//wdev-20074
	public ActivityVoCollection listActivitiesByService(ServiceRefVo serviceRef, Boolean isFlexible)
	{
		if( serviceRef == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		// For profile Slot, we want to list
		// all activities for appointment activity type
		String hql= null;
		if( Boolean.TRUE.equals(isFlexible))
		{
			hql = "select s1_1.activity from ServiceActivity as s1_1 left join s1_1.activity as a1_1 where (s1_1.isActive = 1 and a1_1.isActive = 1 and s1_1.service.id = :serviceId and s1_1.isFlexible = 1 )";	//wdev-20262
		}
		else
		{
			hql = "select s1_1.activity from ServiceActivity as s1_1 left join s1_1.activity as a1_1 where (s1_1.isActive = 1 and a1_1.isActive = 1 and s1_1.service.id = :serviceId and (s1_1.isFlexible = 0 or s1_1.isFlexible is null))"; //wdev-20262
		}
		
		List lst = factory.find(hql, new String[]{"serviceId"}, new Object[]{new Integer(serviceRef.getID_Service())});
		return (ActivityVoAssembler.createActivityVoCollectionFromActivity(lst));
	}

	//wdev-20262
	public DirectoryOfServiceVoCollection listDOS(ServiceRefVo serviceRef, ServiceFunctionCollection serviceFuntions, LocationRefVo location)
	{
		DomainFactory factory = getDomainFactory();

		if( serviceRef == null) //no filter return all
			throw new CodingRuntimeException("service parameter is null or id not provided in method listDOS");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		StringBuffer condStr = new StringBuffer();
		//String hql = " from DirectoryofService dos "; 
		
		String hql = " select dos from DirectoryofService as dos left join dos.functions as s1_1 left join s1_1.function as l1_1 ";
		
		String andStr = " ";
		
	
		
		if( serviceRef != null)
		{
			condStr.append(andStr + " dos.service.id = :serviceId");
			markers.add("serviceId");
			values.add( serviceRef.getID_Service());		
			andStr = " and ";
		}
		
		if( location != null)
		{
			//http://jira/browse/WDEV-21222 
			OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
			String locationsIds = impl.getChildLocationsIdsForLocation(location.getBoId(), null, Boolean.TRUE, Boolean.FALSE,Boolean.TRUE);
			
			condStr.append(andStr + " dos.location.id IN (");
			condStr.append(locationsIds);
			condStr.append(") ");
			andStr = " and ";
					
		}
		
		condStr.append(andStr + " dos.isActive = :isActive" );
		markers.add("isActive");
		values.add(Boolean.TRUE);		
		andStr = " and ";
		
		if( serviceFuntions != null && serviceFuntions.size() > 0)	//wdev-20262
		{
			String funcIds = new String();
			for(int g = 0;g < serviceFuntions.size();g++)
			{
				if( g > 0)
					funcIds += ",";
					
				funcIds += serviceFuntions.get(g).getId();
			}
			
			condStr.append(andStr + " l1_1.id IN (");
			
			condStr.append(funcIds);
			
			condStr.append(") ");
		}
		
		if(andStr.equals(" and "))
			hql += " where ";
		
		hql += condStr.toString();
		
		hql += " order by upper(dos.doSName) asc ";

		List<?> dosList = factory.find(hql,markers,values, 500);
		
		return DirectoryOfServiceVoAssembler.createDirectoryOfServiceVoCollectionFromDirectoryofService(dosList);
	}
	
	private List listLocations(LocationType locType, Boolean activeOnly, Boolean includeReferringHosp, Boolean includeTreatingHosp, String name)
	{
		DomainFactory factory = getDomainFactory();
		
		List locations;

		String hql = " from Location loc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		if (locType != null)
		{
			condStr.append(andStr + " loc.type = :locType");
			markers.add("locType");
			values.add(getDomLookup(locType));
			andStr = " and ";
		}
		if (activeOnly != null && activeOnly.booleanValue())
		{
			condStr.append(andStr + " loc.isActive = :active");
			markers.add("active");
			values.add(activeOnly);
			andStr = " and ";
		}
		if (includeReferringHosp != null && includeReferringHosp.booleanValue())
		{
			condStr.append(andStr + " loc.referringHospital = :referring");
			markers.add("referring");
			values.add(includeReferringHosp);
			andStr = " and ";
		}
		if (includeTreatingHosp != null && includeTreatingHosp.booleanValue())
		{
			condStr.append(andStr + " loc.treatingHosp = :treating");
			markers.add("treating");
			values.add(includeTreatingHosp);
			andStr = " and ";
		}		
		if (name != null)
		{
			condStr.append(andStr + " loc.upperName like :name");
			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";
		}
		
		//WDEV-7175 - exclude surgeries
		if(locType == null || locType != LocationType.SURGERY)
		{
			condStr.append(andStr + " loc.type <> :surgery ");
			markers.add("surgery");
			values.add(getDomLookup(LocationType.SURGERY));
			andStr = " and ";
		}
		
		//wdev-2730
		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		if (andStr.equals(" and "))
		{
			hql += " where ";
		}

		hql += condStr.toString();
		hql += " ORDER BY loc.upperName";						// WDEV-13930
		locations = factory.find(hql, markers, values);
		return locations;
	}
	//---------

	//WDEV-21166
	public ProfileRippleVo saveProfileRipple(ProfileRippleVo profileRippleToSave) throws StaleObjectException
	{
		ProfileMaintenance impl = (ProfileMaintenance) getDomainImpl(ProfileMaintenanceImpl.class);
		return impl.saveProfileRipple(profileRippleToSave);
	}

	
	//--------

	
}
