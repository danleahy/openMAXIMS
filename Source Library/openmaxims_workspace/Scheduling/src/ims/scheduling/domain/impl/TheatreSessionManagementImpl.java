//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.LocationService;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.LocationServiceImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.vo.lookups.HardCodedEvents;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ElectiveListStatus;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.domain.CatsReferralForSessionManagementVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListVoAssembler;
import ims.RefMan.vo.domain.TCIOutcomeForPatientElectiveListVoAssembler;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODStatus;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.domain.PatientCaseNotes;
import ims.core.domain.impl.PatientCaseNotesImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.domain.objects.Activity;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.ActivityRefVo;
import ims.core.vo.ActivityWithImageLiteVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientCaseNoteRequestLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.domain.ActivityWithImageLiteVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocShortMappingsVoAssembler;
import ims.core.vo.domain.MemberOfStaffShortVoAssembler;
import ims.core.vo.domain.PatientCaseNoteRequestLiteVoAssembler;
import ims.core.vo.domain.PatientListVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.CaseNoteRequestCancellationReason;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.QueueType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.hl7adtout.domain.objects.ElectiveListMessageQueue;
import ims.ocrr.vo.domain.OrderInvestigationBookingVoAssembler;
import ims.ocrr.vo.lookups.OrderMessageStatus;
import ims.pathways.configuration.domain.objects.Event;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.domain.objects.PauseDetails;
import ims.pathways.vo.EventLiteVo;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.domain.EventLiteVoAssembler;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.lookups.EventStatus;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.base.impl.BaseTheatreSessionManagementImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.PendingEmergencyTheatre;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.SessionParentChildSlot;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.BookingAppointmentForSessionManagementVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionManagementSearchCriteriaVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionTheatreFixedSlotForSessionManagementVoCollection;
import ims.scheduling.vo.SessionVo;
import ims.scheduling.vo.TheatreSessionManagementVo;
import ims.scheduling.vo.TheatreSessionManagementVoCollection;
import ims.scheduling.vo.domain.BookingAppointmentForSessionManagementVoAssembler;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.domain.ProfileLiteVoAssembler;
import ims.scheduling.vo.domain.SessionParentChildSlotVoAssembler;
import ims.scheduling.vo.domain.SessionShortVoAssembler;
import ims.scheduling.vo.domain.SessionTheatreFixedSlotForSessionManagementVoAssembler;
import ims.scheduling.vo.domain.SessionVoAssembler;
import ims.scheduling.vo.domain.TheatreSessionManagementVoAssembler;
import ims.scheduling.vo.lookups.CancelAppointmentReason;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.SchProfileType;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class TheatreSessionManagementImpl extends BaseTheatreSessionManagementImpl
{

	private static final long serialVersionUID = 1L;

	public ProfileLiteVoCollection listProfiles(String profileName)
	{
		if (profileName == null || profileName.length() == 0)
			throw new CodingRuntimeException("Cannot search on a null ProfileName");

		String query = "SELECT profile FROM Sch_Profile AS profile WHERE upper(profile.name) like :ProfileName and profile.isActive = 1 and profile.profileType.id = :THEATRE_PROFILE ORDER BY UPPER(profile.name) ASC";

		return ProfileLiteVoAssembler.createProfileLiteVoCollectionFromSch_Profile(getDomainFactory().find(query, new String[] { "ProfileName", "THEATRE_PROFILE" }, new Object[] { profileName.toUpperCase() + "%", SchProfileType.THEATRE.getID() }));
	}

	public LocationLiteVoCollection listActiveHospitals()
	{
		//http://jira/browse/WDEV-21222
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveHospitalsLite();
	}

	public LocationLiteVo getHospitalForCurrentLocation(Integer locId)
	{
		if (locId == null)
			throw new CodingRuntimeException("Cannot get the Hospital for a null Location.");

		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location) factory.getDomainObject(Location.class, locId);

		return getHospital(doLocation);
	}

	private LocationLiteVo getHospital(Location doLocation)
	{
		if (doLocation instanceof LocSite && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
		{
			return LocShortMappingsVoAssembler.create((LocSite) doLocation);
		}

		while (doLocation.getParentLocation() != null)
		{
			doLocation = doLocation.getParentLocation();

			if (doLocation instanceof LocSite && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			{
				return LocShortMappingsVoAssembler.create((LocSite) doLocation);
			}
		}

		return null;
	}

	public LocShortMappingsVoCollection listActiveLocationsForHospital(LocationLiteVo location)
	{
		
		if (location == null)
			return null;
		OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveLocationsForHospital(location,new int[]{LocationType.THEATRE.getID(),LocationType.PROCEDURE_ROOM.getID()});
	}
	
	public HcpLiteVoCollection listHcpLite(HcpFilter filter)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLite(filter);
	}

	public ServiceVoCollection listServices()
	{
		LocationService impl = (LocationService) getDomainImpl(LocationServiceImpl.class);
		return impl.listService(Boolean.TRUE);
	}

	public TheatreSessionManagementVoCollection listSessions(SessionManagementSearchCriteriaVo searchCriteria)
	{

		DomainFactory factory = getDomainFactory();

		String hql = " select sess from Sch_Session as sess ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " where ";
		StringBuffer condStr = new StringBuffer();

		if (searchCriteria != null)
		{

			if (searchCriteria.getLocation() != null)
			{
				if (LocationType.PROCEDURE_ROOM.equals(searchCriteria.getLocation().getType()))
				{
					hql += " left join sess.schLocation as location ";

					condStr.append(andStr + " location.id = :locationID ");
					markers.add("locationID");
					values.add(searchCriteria.getLocation().getID_Location());
					andStr = " and ";
				}
				else if (LocationType.THEATRE.equals(searchCriteria.getLocation().getType()))
				{
					hql += " left join sess.schLocation as location ";

					condStr.append(andStr + " (location.id = :locationID or (location.parentLocation.id = :locationID)) ");
					markers.add("locationID");
					values.add(searchCriteria.getLocation().getID_Location());
					andStr = " and ";
				} 
			}
			else if (searchCriteria.getHospital() != null)
			{
				//http://jira/browse/WDEV-21222
				OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
				String ids = impl.getChildLocationsIdsForLocation(searchCriteria.getHospital().getBoId(), null, Boolean.TRUE,Boolean.FALSE);

				
				hql += " left join sess.schLocation as location ";

				condStr.append(andStr + " location.id in ( " + ids + " ) ");
				andStr = " and ";

			}

			if (searchCriteria.getService() != null)
			{
				hql += " left join sess.service as serv ";

				condStr.append(andStr + " serv.id = :serviceID ");
				markers.add("serviceID");
				values.add(searchCriteria.getService().getID_Service());
				andStr = " and ";

			}

			if (searchCriteria.getListOwners() != null && searchCriteria.getListOwners().size() > 0)
			{
				String ownersIDs = getListOwnersIDs(searchCriteria.getListOwners());

				hql += " left join sess.listOwners as owners ";

				condStr.append(andStr + " owners.hcp.id in ( " + ownersIDs + " ) and owners.listOwner = 1 "); //WDEV-20479

				andStr = " and ";
			}

			if (searchCriteria.getProfile() != null)
			{
				hql += " left join sess.sch_Profile as profile ";

				condStr.append(andStr + " profile.id = :profileID ");
				markers.add("profileID");
				values.add(searchCriteria.getProfile().getID_Sch_Profile());
				andStr = " and ";
			}

			if (searchCriteria.getDateFrom() != null)
			{
				condStr.append(andStr + " sess.sessionDate >= :startDate ");
				markers.add("startDate");
				values.add(searchCriteria.getDateFrom().getDate());
				andStr = " and ";
			}

			if (searchCriteria.getDateTo() != null)
			{
				condStr.append(andStr + " sess.sessionDate <= :endDate ");
				markers.add("endDate");
				values.add(searchCriteria.getDateTo().getDate());
				andStr = " and ";
			}
			//wdev-19419
			if( searchCriteria.getListType() != null)
			{
				condStr.append(andStr + " sess.listType.id = :listtypeId ");
				markers.add("listtypeId");
				values.add(getDomLookup(searchCriteria.getListType()).getId());
				andStr = " and ";
			}
			/*  WDEV-20479
			if( searchCriteria.getConsultant() != null)
			{
				condStr.append(andStr + " sess.responsibleHCP.id = :respHCPId ");
				markers.add("respHCPId");
				values.add(searchCriteria.getConsultant().getID_Hcp());
				andStr = " and ";
			}
			*/
			//--------
		}
		
		condStr.append(andStr + " sess.sessionProfileType.id = :THEATRE_SESSION ");
		markers.add("THEATRE_SESSION");
		values.add(SchProfileType.THEATRE.getID());

		condStr.append(" order by sess.sessionDate asc ");

		hql += condStr.toString();

		return TheatreSessionManagementVoAssembler.createTheatreSessionManagementVoCollectionFromSch_Session(factory.find(hql, markers, values));

	}

	private String getLocationsIdsForHospital(LocationLiteVo hospital)
	{
		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location) factory.getDomainObject(Location.class, hospital.getID_Location());

		ArrayList<Location> locations = new ArrayList<Location>();
		buildLocationsList(doLocation, locations, null, null);
		
		String ids = "";
		
		for (int i = 0; i < locations.size(); i++)
		{

			if (locations.get(i) == null || locations.get(i).getId() == null)
				continue;

			if (ids == "")
				ids += locations.get(i).getId().toString();
			else
				ids += ", " + locations.get(i).getId().toString();

		}	
		
		return ids;
	}
	
	private void buildLocationsList(Location location, ArrayList<Location> listItems, LocationType type1, LocationType type2)
	{
		if ( ((type1 == null && type2 == null) || location.getType().equals(getDomLookup(type2)) || location.getType().equals(getDomLookup(type1))) && Boolean.TRUE.equals(location.isIsActive()) && Boolean.FALSE.equals(location.isIsVirtual()))
		{
			listItems.add(location);
		}

		Iterator it = location.getLocations().iterator();
		
		while (it.hasNext())
		{
			Location doLocation = (Location) it.next();
			buildLocationsList(doLocation, listItems, type1, type2);
		}
	}
	
	private String getListOwnersIDs(HcpLiteVoCollection listOwners)
	{
		String ids = "";

		for (int i = 0; i < listOwners.size(); i++)
		{

			if (listOwners.get(i) == null || listOwners.get(i).getID_Hcp() == null)
				continue;

			if (ids == "")
				ids += listOwners.get(i).getID_Hcp().toString();
			else
				ids += ", " + listOwners.get(i).getID_Hcp().toString();

		}

		return ids;
	}

	public CatsReferralForSessionManagementVo getCatsReferralForAppointment(Booking_AppointmentRefVo appointmentRef)
	{
		if (appointmentRef == null || appointmentRef.getID_Booking_Appointment() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();
		hql.append("select referral from CatsReferral as referral left join referral.appointments as appt where appt.id = :apptID");

		markers.add("apptID");
		values.add(appointmentRef.getID_Booking_Appointment());

		List list = factory.find(hql.toString(), markers, values);

		if (list == null || list.size() == 0)
			return null;

		return CatsReferralForSessionManagementVoAssembler.create((CatsReferral) list.get(0));
	}

	public SessionShortVo getSessionShortVo(Sch_SessionRefVo sessionRef)
	{
		if (sessionRef == null || sessionRef.getID_Sch_Session() == null)
			return null;

		return SessionShortVoAssembler.create((Sch_Session) getDomainFactory().getDomainObject(Sch_Session.class, sessionRef.getID_Sch_Session()));
	}

	public void cancelSession(Sch_SessionRefVo session, Appointment_StatusVo voApptCancelStatus, Boolean cancelAppointment, Boolean isFlexible) throws DomainInterfaceException, StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.cancelSession(session, voApptCancelStatus, cancelAppointment, isFlexible);

	}

	public SessionVo getSessionVo(Sch_SessionRefVo sessionRef)
	{
		if (sessionRef == null || sessionRef.getID_Sch_Session() == null)
			return null;

		return SessionVoAssembler.create((Sch_Session) getDomainFactory().getDomainObject(Sch_Session.class, sessionRef.getID_Sch_Session()));
	}

	public TheatreSessionManagementVo getSessionManagementVo(Sch_SessionRefVo sessionRef)
	{
		if (sessionRef == null || sessionRef.getID_Sch_Session() == null)
			return null;

		return TheatreSessionManagementVoAssembler.create((Sch_Session) getDomainFactory().getDomainObject(Sch_Session.class, sessionRef.getID_Sch_Session()));
	}

	public SessionVo saveSession(SessionVo session, Boolean editingSlots) throws DomainInterfaceException, StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		return impl.saveSession(session, editingSlots);
	}

	public Boolean isReferralICPCompleted(CatsReferralRefVo catsReferral)
	{
		if (!ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		{
			return false;
		}
		
		if (catsReferral == null || !catsReferral.getID_CatsReferralIsNotNull())
			return false;
		
		String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.careContext as careC," +
				" CatsReferral as cats left join cats.careContext as catsCC " +
				"where (cats.id = :catsId and patICP.completedDateTime is not null and catsCC.id = careC.id)";
		
		long count = getDomainFactory().countWithHQL(hql,new String[]{"catsId"},new Object[]{catsReferral.getID_CatsReferral()});
		
		return count > 0;
	}

	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided for method getBookingAppointment");

		Booking_AppointmentVo voAppt = Booking_AppointmentVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
		// SITE-508 get the associatedOrderInv at this point if any
		setOrderInvAppt(voAppt);

		return voAppt;
	}

	private void setOrderInvAppt(Booking_AppointmentVo voAppt)
	{
		if (voAppt == null)
			return;

		List ordInvAppts = getDomainFactory().find("from OrderInvAppt invAppt where invAppt.appointment.id = '" + voAppt.getID_Booking_Appointment() + "'");
		if (ordInvAppts != null && ordInvAppts.size() == 1)
		{
			OrderInvAppt doOrdInvAppt = (OrderInvAppt) ordInvAppts.get(0);
			voAppt.setOrderInvestigation(OrderInvestigationBookingVoAssembler.create(doOrdInvAppt.getOrderInvestigation()));
		}
	}

	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws DomainInterfaceException, StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		updateCatsReferralAdditionalInvStatus(catsReferral, null);
	}
	
	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo appt) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral, appt);
		
	}

	public void updateCatsReferralCancelStatus(CatsReferralRefVo catsReferral) throws StaleObjectException  //WDEV-19543
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralCancelStatus(catsReferral);
	}

	public PatientShort getPatientShort(PatientRefVo patientRef)
	{
		if(patientRef == null || patientRef.getID_Patient() == null)
			throw new CodingRuntimeException("Cannot get Patient on null Id.");
		
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patientRef.getID_Patient()));
	}

	public TheatreSessionManagementVo justSaveSession(TheatreSessionManagementVo sessionToSave) throws StaleObjectException
	{
		if (sessionToSave == null)
			throw new CodingRuntimeException("Cannot save null Session");

		DomainFactory factory = getDomainFactory();
		Sch_Session domainSession = TheatreSessionManagementVoAssembler.extractSch_Session(factory, sessionToSave);

		factory.save(domainSession);
		
		return TheatreSessionManagementVoAssembler.create(domainSession);
	}

	public void saveAppointment(BookingAppointmentForSessionManagementVo appointmentToSave) throws StaleObjectException
	{
		if (appointmentToSave == null)
			throw new CodingRuntimeException("Cannot save null Appointment");

		DomainFactory factory = getDomainFactory();
		Booking_Appointment domainAppointment = BookingAppointmentForSessionManagementVoAssembler.extractBooking_Appointment(factory, appointmentToSave);

		factory.save(domainAppointment);
		
	}

	//wdev-19496
	public ActivityWithImageLiteVo getActivityWithImage(ActivityRefVo activityRef)
	{
		if( activityRef == null || activityRef.getID_Activity() == null )
			throw new CodingRuntimeException("ActivityRefVo is null or id not provided in method getActivityWithImage");
		
		return ActivityWithImageLiteVoAssembler.create((Activity) getDomainFactory().getDomainObject(activityRef));
	}

	public SessionTheatreFixedSlotForSessionManagementVoCollection getTheatreFixedSlotsForSession(Sch_SessionRefVo sessionRef)
	{
		if (sessionRef == null)
		{
			throw new CodingRuntimeException("Cannot get Slots on null SessionID");
		}

		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();
		hql.append("select slots from Sch_Session as session left join session.parentChildSlots as slots where session.id = :sessionID order by slots.startTime asc");

		markers.add("sessionID");
		values.add(sessionRef.getID_Sch_Session());

		return SessionTheatreFixedSlotForSessionManagementVoAssembler.createSessionTheatreFixedSlotForSessionManagementVoCollectionFromSessionParentChildSlot(factory.find(hql.toString(), markers, values));
	}
	
	public Boolean hasSlotConflictWithSessionSlots(Sch_SessionRefVo session, SessionParentChildSlotVo slot)
	{
		if (session == null)
			return false;
		
		SessionVo voSession = getSessionVo(session);
		Boolean slotsOverlapping = false;
		
		Time startTime1 = slot.getStartTime().copy();
		startTime1.addMinutes(slot.getDuration());
		Time endTime1 = startTime1;
		
		for (SessionParentChildSlotVo voSlot : voSession.getParentChildSlots())
		{
			Time startTime2 = voSlot.getStartTime().copy();
			startTime2.addMinutes(voSlot.getDuration());
			Time endTime2 = startTime2;
			
			if (slot.getStartTime().isLessThan(endTime2) && voSlot.getStartTime().isLessThan(endTime1))
			{
				slotsOverlapping = true;
				break;
			}
		}
		
		return slotsOverlapping;
	}

	public void addTheatreFixedSlotToSession(TheatreSessionManagementVo session, SessionParentChildSlotVo slot) throws StaleObjectException
	{
		if (session == null)
			throw new CodingRuntimeException("session is null in method addSlotToSession");

		if (slot == null)
			return;
		
		DomainFactory factory = getDomainFactory();
		Sch_Session doSession = (Sch_Session) factory.getDomainObject(Sch_Session.class, session.getID_Sch_Session());
		
		SessionParentChildSlot doSlot = SessionParentChildSlotVoAssembler.extractSessionParentChildSlot(factory, slot);
		doSlot.setIsActive(Boolean.TRUE);
		doSlot.setSession(doSession);
		doSlot.setSessDateTime(session.getSessionDate().getDate());
		doSlot.setStatus(getDomLookup(Status_Reason.SLOTOPENED));
		
		doSession.getParentChildSlots().add(doSlot);
		
		factory.save(doSession);
		
	}

	public TheatreProcedureServiceAndConsultantLiteVo getTheatreServiceProcedureAndConsultant(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreServiceProcedureAndConsultant");
		
		TheatreProcedureServiceAndConsultantLiteVo voPsc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(appt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voPsc = new TheatreProcedureServiceAndConsultantLiteVo();
			voPsc.setService(voService);
			voPsc.setProcedure(voProc);
			voPsc.setConsultant(voMos);
		}
		
		return voPsc;
	}

	public BookingAppointmentTheatreVo getTheatreAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreAppointment");
		
		return BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
	}
	
	//WDEV-22953 - changed to call the same cancelTCI() method
	public void cancelTCIAndReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef, CancelAppointmentReason cancellationReason, String cancellationComments, Boolean isProviderCancellation, Boolean isPatientCancellation, Boolean cancelledForNonmedicalReason) throws StaleObjectException
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method cancelReferralEROD");
		
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("apptRef is null or id not provided in method getTheatreAppointment");

		DomainFactory factory = getDomainFactory();
		MemberOfStaff domainMOS = null;

		Object mosUser = getMosUser();

		if(mosUser instanceof MemberOfStaffShortVo)
		{
			domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
		}

		String patientElectiveListQuery = "select electiveList from PatientElectiveList as electiveList left join electiveList.referral as cats left join electiveList.electiveListStatus as currentStatus left join currentStatus.electiveListStatus as elStatus left join electiveList.tCIDetails as tci left join tci.appointment as appt where cats.id = :CatsId and appt.id = :appointmentID and elStatus.id <> :RemovedId and (electiveList.isRIE is null or electiveList.isRIE = 0)";
		PatientElectiveList patientElectiveListDO  = (PatientElectiveList) factory.findFirst(patientElectiveListQuery, new String[] {"CatsId", "appointmentID", "RemovedId"}, new Object[] {catsReferral.getID_CatsReferral(), apptRef.getID_Booking_Appointment(), WaitingListStatus.REMOVED.getID()});
		
		if (patientElectiveListDO == null)
			return;
		
		TCIForPatientElectiveList doTCIDetails = patientElectiveListDO.getTCIDetails();
		
		if (doTCIDetails != null)
		{	
			TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
			newOutcome.setChangeBy(domainMOS);
			newOutcome.setStatusDateTime(doTCIDetails.getTCIDate() != null && new Date().after(doTCIDetails.getTCIDate()) ? (doTCIDetails.getTCITime() != null ? new DateTime(new ims.framework.utils.Date(doTCIDetails.getTCIDate()), new Time(doTCIDetails.getTCITime())).getJavaDate() : doTCIDetails.getTCIDate()) : new Date());
			newOutcome.setOutcomeReason(getDomLookup(TCIStatusChangeReason.LINKEDTHEATREAPPTCANCELLED));
			newOutcome.setCancellationReason(cancellationReason != null ? getDomLookup(cancellationReason) : null);
			newOutcome.setReasonComments(cancellationComments);

			boolean cancelledForNonMedicalReason = Boolean.TRUE.equals(cancelledForNonmedicalReason);
			boolean providerCancellation =  Boolean.TRUE.equals(isProviderCancellation);
			boolean patientCancellation =   Boolean.TRUE.equals(isPatientCancellation);
			boolean cancellationOnTCIDateOrLater = (doTCIDetails.getTCIDate() != null && new ims.framework.utils.Date().isGreaterOrEqualThan(new ims.framework.utils.Date(doTCIDetails.getTCIDate())));

			if (providerCancellation)
			{	
				newOutcome.setOutcome(cancellationOnTCIDateOrLater ? getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7) : getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6));
				newOutcome.setCancelledForNonMedicalReason(cancelledForNonMedicalReason);
			}
			else if (patientCancellation)
			{	
				newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2));
			}
			//call cancel TCI to finish and commit changes
			cancelTCI(new PatientElectiveListRefVo(patientElectiveListDO.getId(), patientElectiveListDO.getVersion()), TCIOutcomeForPatientElectiveListVoAssembler.create(newOutcome), null);
		}
		else
		 throw new  StaleObjectException(patientElectiveListDO, "The TCI has been cancelled by another user. The screen will be refreshed.");	
	}			
				
	
	private void createPatientEvent(CatsReferral doCatsReferral, EventLiteVo hardCodedEvent) throws StaleObjectException
	{
		PatientPathwayJourney patientJBo = doCatsReferral != null ? doCatsReferral.getJourney() : null;

		if (patientJBo != null && hardCodedEvent != null)
		{				
				PatientEventVo patEvent = new PatientEventVo();
				patEvent.setPatient((PatientRefVo)PatientListVoAssembler.create(doCatsReferral.getPatient()));
				patEvent.setEvent(hardCodedEvent);
				patEvent.setEventDateTime(patientJBo.getCurrentClock() != null && patientJBo.getCurrentClock().getCurrentPause() != null && patientJBo.getCurrentClock().getCurrentPause().getPauseStop() != null ? new DateTime( patientJBo.getCurrentClock().getCurrentPause().getPauseStop()) : new DateTime());
				patEvent.setEventStatus(EventStatus.ACTIVE);
				patEvent.setJourney(PatientJourneyVoAssembler.create(patientJBo));
				
				HL7PathwayIf implPath = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
				try
				{
					implPath.instantiatePatientEvent(patEvent);
				}
				catch (DomainInterfaceException e)
				{throw new DomainRuntimeException("Domain Error occured in save Event " + e.getMessage(), e);}
		}		
	}
	
	public void triggerElectiveListEvent(PatientElectiveListVo patientElectiveList) throws StaleObjectException
	{	
		if(patientElectiveList != null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.ELECTIVELIST.getId()+")";

			java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				ElectiveListMessageQueue messageQueue = new ElectiveListMessageQueue();
				messageQueue.setPatientElectiveList((PatientElectiveList)factory.getDomainObject(patientElectiveList));
				messageQueue.setProviderSystem(providerSystem);
				messageQueue.setWasProcessed(Boolean.FALSE);
				messageQueue.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				messageQueue.setMsgType(getDomLookup(MsgEventType.A38));
				messageQueue.setQueueType(getDomLookup(QueueType.ELECTIVELIST));
				factory.save(messageQueue);
			}
		}
	}
	
	private EventLiteVo getHardCodedEvent(int event_Id)
	{
		StringBuilder hqlBuilder = new StringBuilder("select event from Event as event left join event.status as s where event.id = :eventID and s.id = :statusID ");
		
		List <?> list = getDomainFactory().find(hqlBuilder.toString(),new String[] {"eventID", "statusID"},new Object[] {event_Id, PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if (list == null || list.size() == 0)
			return null;
		
		return EventLiteVoAssembler.create((Event)list.get(0));	
	}
	
	private void cancelCaseNoteRequests(Integer tciId) throws StaleObjectException
	{
		PatientCaseNoteRequestLiteVoCollection requestsForCancellation = getLinkedCaseNoteOpenRequests(tciId);
		
		if (requestsForCancellation == null || requestsForCancellation.size() == 0)
			return;
		
		Object mos = getMosUser();
		
		PatientCaseNotes impl = (PatientCaseNotes) getDomainImpl(PatientCaseNotesImpl.class);
		
		for (int i = 0; i < requestsForCancellation.size(); i++)
		{
			impl.cancelRequest(requestsForCancellation.get(i), (MemberOfStaffRefVo) mos, CaseNoteRequestCancellationReason.TCI_CANCELLED); //WDEV-20989
		}
	}
	
	private PatientCaseNoteRequestLiteVoCollection getLinkedCaseNoteOpenRequests(Integer tciId)
	{
		if(tciId == null)
			   return null;
		
		List<?> list = getDomainFactory().find("select req from PatientCaseNoteRequest as req left join req.tCIDetail as tci left join req.requestStatus as status " +
				"where (tci.id = :tciID and status.id = :requestStatusID)", new String[] {"tciID", "requestStatusID"}, new Object[] {tciId, CaseNoteRequestStatus.OPEN.getID()});
		
		return PatientCaseNoteRequestLiteVoAssembler.createPatientCaseNoteRequestLiteVoCollectionFromPatientCaseNoteRequest(list);
	}
	
	private boolean isSuspensionRecordRelevant(PatientElectiveList patientElectiveListDO)
	{
		if (patientElectiveListDO == null || patientElectiveListDO.getId() == null || patientElectiveListDO.getElectiveListStatus() == null || !getDomLookup(WaitingListStatus.SUSPENDED).equals(patientElectiveListDO.getElectiveListStatus().getElectiveListStatus()))
			return false;
		if (patientElectiveListDO.getCurrentSuspensionEndDate() == null || patientElectiveListDO.getCurrentSuspensionEndDate().after(new Date()))
			return true;
		
		return false;
	}

	//WDEV-20588
	public BookingAppointmentTheatreVoCollection getCancelledAppointmentsForSession(Sch_SessionRefVo session) 
	{

		if (session == null || session.getID_Sch_Session() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		StringBuffer hql = new StringBuffer();
		hql.append("select appt from Booking_Appointment as appt left join appt.session as sess left join appt.currentStatusRecord as currentStatus left join currentStatus.status as status where sess.id = :sessionID and status.id = :statusID");

		markers.add("sessionID");
		values.add(session.getID_Sch_Session());
			
		markers.add("statusID");
		values.add(Status_Reason.CANCELLED.getId());

		return BookingAppointmentTheatreVoAssembler.createBookingAppointmentTheatreVoCollectionFromBooking_Appointment(factory.find(hql.toString(), markers, values));
		
	}

	public PatientElectiveListRefVo getPatientElectiveListForAppt(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		List electiveList = factory.find("select pel from PatientElectiveList as pel left join pel.tCIDetails as tci left join tci.appointment as appt left join pel.tCIHistory as tciHist left join tciHist.appointment as histAppt where (appt.id = :appointmentID or histAppt.id = :appointmentID)", new String[] { "appointmentID" }, new Object[] { appointment.getID_Booking_Appointment()});

		if (electiveList != null && electiveList.size() > 0 && electiveList.get(0) instanceof PatientElectiveList)
			return new PatientElectiveListRefVo(((PatientElectiveList) electiveList.get(0)).getId(), ((PatientElectiveList) electiveList.get(0)).getVersion());

		return null;
	}

	public PendingEmergencyTheatreRefVo getPendingEmergencyTheatreForAppt(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		List pet = factory.find("select pet from PendingEmergencyTheatre as pet left join pet.currentStatus as status left join pet.theatreAppointmentBooked as appt where appt.id = :appointmentID and status.id = :theatreSlotToBeBookedID )", new String[] { "appointmentID", "theatreSlotToBeBookedID" }, new Object[] { appointment.getID_Booking_Appointment(), PendingEmergencyTheatreStatus.THEATRE_SLOT_TO_BE_BOOKED.getID()});

		if (pet != null && pet.size() > 0 && pet.get(0) instanceof PendingEmergencyTheatre)
			return new PendingEmergencyTheatreRefVo(((PendingEmergencyTheatre) pet.get(0)).getId(), ((PendingEmergencyTheatre) pet.get(0)).getVersion());

		return null;
	}
	////WDEV-22953 - moved cancelTCI() to this implementation file from ReferralApptDetails
	public void cancelTCI(PatientElectiveListRefVo patientElectiveListRef,	TCIOutcomeForPatientElectiveListVo tciOutcomeVo, Booking_AppointmentRefVo theatreApptToCancel) throws StaleObjectException
	{
		if (patientElectiveListRef == null)
			throw new CodingRuntimeException("patientElectiveListRef argument cannot be null in method cancelTCI()");

		DomainFactory factory = getDomainFactory();

		PatientElectiveList domWaitingList = (PatientElectiveList) factory.getDomainObject(patientElectiveListRef);
		
	    MemberOfStaff domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
	    MemberOfStaff domainMOSFromDialog = tciOutcomeVo.getChangeBy() != null ? (MemberOfStaff) factory.getDomainObject(MemberOfStaff.class, tciOutcomeVo.getChangeBy().getID_MemberOfStaff()) : null;
	    
	    Boolean isPatientElectiveListSubjectTo28DayRule = domWaitingList.isSubjectTo28DayRule();
	    LookupInstance currentElectiveList28DayStatus = domWaitingList.getRule28DayStatus();
	    
	    boolean cancelledForNonMedicalReason = tciOutcomeVo != null && Boolean.TRUE.equals(tciOutcomeVo.getCancelledForNonMedicalReason());
		boolean providerCancellation =   tciOutcomeVo != null && AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7.equals(tciOutcomeVo.getOutcome()) || AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6.equals(tciOutcomeVo.getOutcome());
		boolean patientCancellation =   tciOutcomeVo != null && AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(tciOutcomeVo.getOutcome());
		boolean cancellationOnTCIDate =  tciOutcomeVo != null && tciOutcomeVo.getStatusDateTime() != null && domWaitingList.getTCIDetails() != null && domWaitingList.getTCIDetails().getTCIDate() != null && tciOutcomeVo.getStatusDateTime().getDate().equals(new ims.framework.utils.Date(domWaitingList.getTCIDetails().getTCIDate()));
	    
	    if(Boolean.TRUE.equals(isPatientElectiveListSubjectTo28DayRule))
	    {
	    	if(getDomLookup(Rule28DayStatus.REASONABLE_OFFER_DECLINED).equals(currentElectiveList28DayStatus) || getDomLookup(Rule28DayStatus.BREACHED).equals(currentElectiveList28DayStatus))
	    	{
	    		if(providerCancellation)
	    		{
	    			tciOutcomeVo.setOutcome(cancellationOnTCIDate ? AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7 : AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
	    		}
	    		else if(patientCancellation)
	    		{
	    			tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2);
	    		}
	    	}
	    	else if(getDomLookup(Rule28DayStatus.OFFER_ACCEPTED).equals(currentElectiveList28DayStatus))
	    	{
	    		if(cancelledForNonMedicalReason)
	    		{
	    			if(providerCancellation)
	    			{
	    				domWaitingList.setSubjectTo28DayRule(true);
	    				domWaitingList.setRule28DayStatus(getDomLookup(Rule28DayStatus.ACTIVE));
	    				domWaitingList.getTCIDetails().setRule28DayStatus(getDomLookup(Rule28DayStatus.ACTIVE));
	    				tciOutcomeVo.setOutcome(cancellationOnTCIDate ? AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7 : AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
	    				
	    			}
	    			else if(patientCancellation)
	    			{
	    				domWaitingList.setSubjectTo28DayRule(false);
	    				domWaitingList.setRule28DayStatus(getDomLookup(Rule28DayStatus.CANCELLED_BY_PATIENT));
	    				domWaitingList.setRule28DayPeriodStart(null);
	    				domWaitingList.getTCIDetails().setRule28DayStatus(getDomLookup(Rule28DayStatus.CANCELLED_BY_PATIENT));
	    				domWaitingList.getTCIDetails().setRule28DayPeriodStart(null);
	    				tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2);
	    			}
	    		}
	    		else
	    		{
	    			domWaitingList.setSubjectTo28DayRule(false);
	    			domWaitingList.setRule28DayPeriodStart(null);
	    			domWaitingList.getTCIDetails().setRule28DayPeriodStart(null);
	    			
	    			if(providerCancellation)
	    			{
	    				domWaitingList.setRule28DayStatus(getDomLookup(Rule28DayStatus.CANCELLED_FOR_CLINICAL_REASON));
	    				domWaitingList.getTCIDetails().setRule28DayStatus(getDomLookup(Rule28DayStatus.CANCELLED_FOR_CLINICAL_REASON));
	    				tciOutcomeVo.setOutcome(cancellationOnTCIDate ? AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7 : AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
	    				
	    			}
	    			else if(patientCancellation)
	    			{
	    				domWaitingList.setRule28DayStatus(getDomLookup(Rule28DayStatus.CANCELLED_BY_PATIENT));
	    				domWaitingList.getTCIDetails().setRule28DayStatus(getDomLookup(Rule28DayStatus.CANCELLED_BY_PATIENT));
	    				tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2);
	    			}
	    		}
	    	}
	    }
	    else
	    {
	    	if(cancellationOnTCIDate)
	    	{
	    		if(providerCancellation)
	    		{
    	    		if(cancelledForNonMedicalReason)
    	    		{
    	    			domWaitingList.setSubjectTo28DayRule(true);
    	    			domWaitingList.setRule28DayStatus(getDomLookup(Rule28DayStatus.ACTIVE));
    	    			domWaitingList.setRule28DayPeriodStart(domWaitingList.getTCIDetails().getTCIDate());
    	    			domWaitingList.getTCIDetails().setRule28DayStatus(getDomLookup(Rule28DayStatus.ACTIVE));
    	    			domWaitingList.getTCIDetails().setRule28DayPeriodStart(domWaitingList.getTCIDetails().getTCIDate());
    	    		}
    	    		else
    	    		{
    	    			domWaitingList.setSubjectTo28DayRule(false);
    	    			domWaitingList.setRule28DayStatus(null);
    	    			domWaitingList.setRule28DayPeriodStart(null);
    	    			domWaitingList.getTCIDetails().setRule28DayStatus(null);
    	    			domWaitingList.getTCIDetails().setRule28DayPeriodStart(null);
    	    		}
	    		
    	    		tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
	    		}
	    		else if(patientCancellation)
	    		{
	    			domWaitingList.setSubjectTo28DayRule(false);
	    			domWaitingList.setRule28DayStatus(null);
	    			domWaitingList.setRule28DayPeriodStart(null);
	    			domWaitingList.getTCIDetails().setRule28DayStatus(null);
	    			domWaitingList.getTCIDetails().setRule28DayPeriodStart(null);
	    			tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2);
	    		}
	    	}
	    	else
	    	{
	    		if(patientCancellation)
	    		{
	    			domWaitingList.setSubjectTo28DayRule(false);
	    			domWaitingList.setRule28DayStatus(null);
	    			domWaitingList.setRule28DayPeriodStart(null);
	    			domWaitingList.getTCIDetails().setRule28DayStatus(null);
	    			domWaitingList.getTCIDetails().setRule28DayPeriodStart(null);
	    			tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2);
	    		}
	    		if(providerCancellation)
	    		{
	    			tciOutcomeVo.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
	    		}
	    	}
	    	
	    }

	    ElectiveListStatus status = new ElectiveListStatus();
		status.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
		status.setAuthoringUser(domainMOS);
		status.setStatusDateTime(new Date());
		status.setStatusComment("Requires new TCI - Previous TCI given was cancelled.");
				
		if( domWaitingList.getElectiveListStatus() == null || domWaitingList.getElectiveListStatus().getElectiveListStatus() == null || (!domWaitingList.getElectiveListStatus().getElectiveListStatus().equals(getDomLookup(WaitingListStatus.REMOVED)) && !domWaitingList.getElectiveListStatus().getElectiveListStatus().equals(getDomLookup(WaitingListStatus.SUSPENDED)) && !isSuspensionRecordRelevant(domWaitingList)))
		{
			domWaitingList.setElectiveListStatus(status);
			
			if( cancelledForNonMedicalReason && providerCancellation && cancellationOnTCIDate)
			{
				domWaitingList.setWas28DayRuleApplied(true);
				
				int numberOfProviderTCICancellations = domWaitingList.getNumberOfProviderTCICancellations()!=null ? domWaitingList.getNumberOfProviderTCICancellations().intValue() : 0;
				numberOfProviderTCICancellations=numberOfProviderTCICancellations+1;
				domWaitingList.setNumberOfProviderTCICancellations(numberOfProviderTCICancellations); //WDEV-20221
			}
			
			if(domWaitingList.getElectiveListStatusHistory() == null)
				domWaitingList.setElectiveListStatusHistory(new ArrayList());
		
			domWaitingList.getElectiveListStatusHistory().add(status);
		}
	
		boolean createPatientEvent = false;
		//wdev-20597		
		if (domWaitingList.getEROD() != null
			&& tciOutcomeVo.getCancelledForNonMedicalReasonIsNotNull()
			&& tciOutcomeVo.getCancelledForNonMedicalReason()
			&& (AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7.equals(tciOutcomeVo.getOutcome()) 
				|| AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6.equals(tciOutcomeVo.getOutcome())) )
		{
			ReferralEROD doEROD = (ReferralEROD)domWaitingList.getEROD();
			doEROD.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
			doEROD.setIsActive(Boolean.FALSE);

			if(domWaitingList.getERODHistory() == null)
				domWaitingList.setERODHistory(new java.util.ArrayList());
			domWaitingList.getERODHistory().add(doEROD);
			
			domWaitingList.setEROD(null);

			// Remove the erod from the cats referral erod collection based on a match in the current clock
			//add it to the history.
			ReferralEROD doMoveErod = null;
    		for(int i=0; i < domWaitingList.getReferral().getElectiveEROD().size(); i++)
    		{
    			if(domWaitingList.getReferral().getElectiveEROD().get(i) instanceof ReferralEROD)
    			{
    				if(domWaitingList.getPathwayClock()!=null
    					&& ((ReferralEROD) domWaitingList.getReferral().getElectiveEROD().get(i)).getPathWayClock() != null 
    					&& ((ReferralEROD) domWaitingList.getReferral().getElectiveEROD().get(i)).getPathWayClock().getId().equals(domWaitingList.getPathwayClock().getId()))
    				{
    					doMoveErod = (ReferralEROD) domWaitingList.getReferral().getElectiveEROD().get(i);
    					domWaitingList.getReferral().getElectiveEROD().remove(i);
    					break;
    				}
    			}
    		}
    		    		
    		if(doMoveErod != null)
    		{
    			doMoveErod.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    		
    			if(domWaitingList.getReferral().getElectiveERODHistory() == null)
    				domWaitingList.getReferral().setElectiveERODHistory(new java.util.ArrayList());
    		
    			domWaitingList.getReferral().getElectiveERODHistory().add(doMoveErod);
    		}

			if(domWaitingList.getReferral().getJourney() != null 
					&& domWaitingList.getReferral().getJourney().getCurrentClock() != null
					&& domWaitingList.getReferral().getJourney().getCurrentClock().getCurrentPause() != null)
			{
				PauseDetails currentPause = domWaitingList.getReferral().getJourney().getCurrentClock().getCurrentPause();
				
				if(domWaitingList.getReferral().getJourney().getCurrentClock().getPauseDetails() != null)
				{
					for(int i=0; i<domWaitingList.getReferral().getJourney().getCurrentClock().getPauseDetails().size(); i++)
					{
						PauseDetails pause = (PauseDetails) domWaitingList.getReferral().getJourney().getCurrentClock().getPauseDetails().get(i);
						if(currentPause.equals(pause) && Boolean.TRUE.equals(pause.isActive()))
						{
							pause.setActive(false);
							break;
						}
					}
				}
				
				domWaitingList.getReferral().getJourney().getCurrentClock().setCurrentPause(null);
				
				if (ConfigFlag.DOM.PATHWAY_ENTITY_EVENT_FUNCTIONALITY.getValue() && domWaitingList.getReferral() != null && domWaitingList.getReferral().getJourney() != null)			
    			{
    				createPatientEvent = true;			
    			}	
			}
		}
		//wdev-20597		

		
		TCIForPatientElectiveList doTCIDetails = domWaitingList.getTCIDetails();
		cancelCaseNoteRequests(doTCIDetails.getId());
		domWaitingList.setTCIDetails(null);
	
		TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
		
		newOutcome.setOutcome(getDomLookup(tciOutcomeVo.getOutcome()));
		newOutcome.setOutcomeReason(tciOutcomeVo.getOutcomeReasonIsNotNull() ? getDomLookup(tciOutcomeVo.getOutcomeReason()) : null);
		newOutcome.setChangeBy(domainMOSFromDialog);
		newOutcome.setStatusDateTime(tciOutcomeVo.getStatusDateTime().getJavaDate());
		newOutcome.setReasonComments(tciOutcomeVo.getReasonComments()); //WDEV-19929
		newOutcome.setCancellationReason(getDomLookup(tciOutcomeVo.getCancellationReason()));
		newOutcome.setCancelledForNonMedicalReason(tciOutcomeVo.getCancelledForNonMedicalReason());
			
		doTCIDetails.setCurrentOutcome(newOutcome);
		
		if(doTCIDetails.getOutcomeHistory() == null)
			doTCIDetails.setOutcomeHistory(new ArrayList());
		
		doTCIDetails.getOutcomeHistory().add(newOutcome);
		
		if(domWaitingList.getTCIHistory() == null)
			domWaitingList.setTCIHistory(new ArrayList());
		
		domWaitingList.getTCIHistory().add(doTCIDetails);
		
		if(theatreApptToCancel != null && theatreApptToCancel.getID_Booking_Appointment() != null)
		{
			domWaitingList.setTheatreAppointment((Booking_Appointment) factory.getDomainObject(Booking_Appointment.class, theatreApptToCancel.getID_Booking_Appointment()));
		}
		
		factory.save(domWaitingList);
		
		if(createPatientEvent)
		{
			EventLiteVo hardCodedEvent = getHardCodedEvent(HardCodedEvents.PATHWAYUNPAUSED.getID());
			createPatientEvent(domWaitingList.getReferral(), hardCodedEvent);	    
		}
		
		//WDEV-19704 Trigger Hl7 message
		if(domWaitingList != null)
		{
			PatientElectiveListVo patientElectiveList = PatientElectiveListVoAssembler.create(domWaitingList);
			triggerElectiveListEvent(patientElectiveList);
		}		
	}
}
