//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.domain.DomainFactory;
import ims.scheduling.domain.base.impl.BaseDosSpecialtySelectionImpl;
import ims.scheduling.vo.DirectoryOfServiceVoCollection;
import ims.scheduling.vo.domain.DirectoryOfServiceVoAssembler;

import java.util.ArrayList;

public class DosSpecialtySelectionImpl extends BaseDosSpecialtySelectionImpl
{

	private static final long serialVersionUID = 1L;

	public ServiceShortVoCollection getDosServicesForSpecialtyAndLocation(ServiceShortVo service, LocationRefVo location)
	{

		if (service == null || location == null || service.getSpecialty() == null)
			return null;

		DomainFactory factory = getDomainFactory();

		String ids = getLocationsIdsForHospital(location);

		String hql = " select serv from DirectoryofService as dos left join dos.service as serv left join serv.specialty as spec left join dos.location as loc " +
					 "where dos.isActive = 1 and spec.id = :specialtyID and loc.id in ( " + ids + " ) and serv.id <> :serviceID";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		markers.add("serviceID");
		values.add(service.getID_Service());

		markers.add("specialtyID");
		values.add(service.getSpecialty().getID());

		return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(factory.find(hql, markers, values));
	}

	private String getLocationsIdsForHospital(LocationRefVo hospital)
	{
		//http://jira/browse/WDEV-21222
		OrganisationAndLocation impl =(OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.getChildLocationsIdsForLocation(hospital.getBoId(), null, Boolean.TRUE, null, null, Boolean.TRUE); //WDEV-23481
	}


	public DirectoryOfServiceVoCollection getDosForServiceAndLocation(ServiceShortVo profileService, LocationRefVo location, ServiceShortVo selectedService)
	{
		if (location == null || (selectedService == null && (profileService == null || profileService.getSpecialty() == null)))
			return null;

		DomainFactory factory = getDomainFactory();

		String ids = getLocationsIdsForHospital(location);

		String hql = " select dos from DirectoryofService as dos left join dos.service as serv left join serv.specialty as spec left join dos.location as loc" +
					 " where dos.isActive = 1 and serv.id <> :profileServiceID and loc.id in ( " + ids + " ) ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		markers.add("profileServiceID");
		values.add(profileService.getID_Service());

		if (selectedService != null)
		{
			hql += " and serv.id = :selectedServiceID";
			markers.add("selectedServiceID");
			values.add(selectedService.getID_Service());
		}
		else
		{
			hql += " and spec.id = :specialtyID";
			markers.add("specialtyID");
			values.add(profileService.getSpecialty().getID());
		}

		return DirectoryOfServiceVoAssembler.createDirectoryOfServiceVoCollectionFromDirectoryofService(factory.find(hql, markers, values));
	}

}
