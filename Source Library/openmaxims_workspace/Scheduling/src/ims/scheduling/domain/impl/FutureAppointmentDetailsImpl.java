//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import ims.admin.domain.ServiceConfiguration;
import ims.admin.domain.impl.ServiceConfigurationImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.clinical.vo.domain.catsReferralLiteVoAssembler;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.domain.objects.ServiceFunction;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.ServiceDiagnosticsVo;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.ServiceTriageActionVo;
import ims.core.vo.domain.ServiceFunctionLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.DomainFactory;
import ims.scheduling.domain.base.impl.BaseFutureAppointmentDetailsImpl;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.ServiceAndFunctionForFutureApptsVo;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class FutureAppointmentDetailsImpl extends BaseFutureAppointmentDetailsImpl
{
	private static final long serialVersionUID = 1L;

	public ServiceLiteVoCollection getServices()
	{
		DomainFactory factory = getDomainFactory();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		String hql = "from Service service where service.isActive = :isActive and service.canBeScheduled = :canBeScheduled and service.serviceCategory.id != :serviceCategoryID " ;
				
		markers.add("isActive");
		values.add(Boolean.TRUE);

		markers.add("canBeScheduled");
		values.add(Boolean.TRUE);
		
		markers.add("serviceCategoryID");
		values.add(ServiceCategory.RADIOLOGY_MODALITY.getID());
		
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(factory.find(hql, markers, values));
	}

	public ServiceTriageActionVo getServiceTriageActions(ServiceRefVo service)
	{
		ServiceConfiguration impl = (ServiceConfiguration) getDomainImpl(ServiceConfigurationImpl.class);
		return impl.getServiceTriageAction(service);
	}

	public ServiceFunctionLiteVoCollection listServiceFunctions(ServiceRefVo service)
	{
		if(service == null || service.getID_Service() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String hql = "select servfunc from ServiceFunction servfunc where servfunc.service.id = :serviceid and servfunc.isActive = 1 order by UPPER(servfunc.function.text) asc";
	
		List servFuncList = factory.find(hql, new String[]{"serviceid"}, new Object[]{service.getID_Service()});
		return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(servFuncList);
	}

	public ServiceAndFunctionForFutureApptsVo getServiceAndFunctionForAppt(Booking_AppointmentRefVo appointment)
	{
		if(appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
	
		ServiceAndFunctionForFutureApptsVo voServiceAndSlot = null;
		
		String hql = "select serviceFunc, session.service from Booking_Appointment as appt left join appt.session as session left join appt.serviceFunction as serviceFunc where (appt.id = :idAppt)";
		List items = getDomainFactory().find(hql, new String[]{"idAppt"}, new Object[]{appointment.getID_Booking_Appointment()});
		
		if(items != null && items.size() > 0)
		{
			Iterator it = items.iterator();	
			
			if(it.hasNext())
			{
				Object[] item = (Object[]) it.next();
				ServiceFunction doServiceFunction = (ServiceFunction) item[0];
				Service doService = (Service) item[1];
				
				ServiceLiteVo service = ServiceLiteVoAssembler.create(doService);
				ServiceFunctionLiteVo serviceFunct = ServiceFunctionLiteVoAssembler.create(doServiceFunction);
				
				voServiceAndSlot = new ServiceAndFunctionForFutureApptsVo();
				voServiceAndSlot.setService(service);
				voServiceAndSlot.setFunction(serviceFunct);
			}
		}
	
		return voServiceAndSlot;
	}

	public ServiceDiagnosticsVo getServiceDiagnostics(ServiceRefVo service)
	{
		ServiceConfiguration impl = (ServiceConfiguration) getDomainImpl(ServiceConfigurationImpl.class);
		return impl.getServiceDiagnostics(service);
	}

	public CatsReferralRefVo getCatsReferralForAppointment(Booking_AppointmentRefVo appointment)
	{
		if(appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		String hql = "select referral from CatsReferral as referral left join referral.appointments as appt where (appt.id = :idAppt)";
		List items = getDomainFactory().find(hql, new String[]{"idAppt"}, new Object[]{appointment.getID_Booking_Appointment()});
		
		if(items != null && items.size() > 0)
		{
			return catsReferralLiteVoAssembler.create((CatsReferral) items.get(0));
		}
	
		return null;
	}
	//WDEV-21210
	public ServiceAndFunctionForFutureApptsVo getCatsReferralServiceAndfunction (CatsReferralRefVo catsReferralRef)
	{
		if(catsReferralRef == null || catsReferralRef.getID_CatsReferral() == null)
			return null;
	
		ServiceAndFunctionForFutureApptsVo voServiceAndSlot = null;
		
		String hql = "select srv, func from CatsReferral as cats left join cats.referralDetails as det left join det.service as srv left join det.function as func where (cats.id = :idRef)";
		List<?> items = getDomainFactory().find(hql, new String[]{"idRef"}, new Object[]{catsReferralRef.getID_CatsReferral()});
		
		if(items != null && items.size() > 0)
		{
			Iterator it = items.iterator();	
			
			if(it.hasNext())
			{
				Object[] item = (Object[]) it.next();
				Service doService = (Service) item[0];
				ServiceFunction doServiceFunction = (ServiceFunction) item[1];
				
				ServiceLiteVo service = ServiceLiteVoAssembler.create(doService);
				ServiceFunctionLiteVo serviceFunct = ServiceFunctionLiteVoAssembler.create(doServiceFunction);
				
				voServiceAndSlot = new ServiceAndFunctionForFutureApptsVo();
				voServiceAndSlot.setService(service);
				voServiceAndSlot.setFunction(serviceFunct);
			}			
		}
		return voServiceAndSlot;
	}

	public Boolean checkIfUserIsResponsibleHcpAndLinkedWithService(HcpRefVo hcp, ServiceRefVo service)
	{
		if(hcp == null || hcp.getID_Hcp() == null || service == null || service.getID_Service() == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		String query = "select hcp.id from Hcp as hcp left join hcp.serviceFunction as sf where hcp.id = :HCPId and sf.service.id = :ServiceID and hcp.isHCPaResponsibleHCP = 1";
		
		List<?> listHCP = factory.find(query, new String[] {"HCPId", "ServiceID"}, new Object[] {hcp.getID_Hcp(), service.getID_Service()});
		
		if(listHCP != null && listHCP.size() > 0)
			return true;
		
		return false;
	}
}
