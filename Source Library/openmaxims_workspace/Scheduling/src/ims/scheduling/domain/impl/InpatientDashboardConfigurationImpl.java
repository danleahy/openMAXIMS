//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import ims.core.admin.domain.objects.InpatientDashboardConfig;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.base.impl.BaseInpatientDashboardConfigurationImpl;
import ims.scheduling.vo.InpatientDashboardConfigVo;
import ims.scheduling.vo.InpatientDashboardConfigVoCollection;
import ims.scheduling.vo.domain.InpatientDashboardConfigVoAssembler;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class InpatientDashboardConfigurationImpl extends BaseInpatientDashboardConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	
	public InpatientDashboardConfigVo save(InpatientDashboardConfigVo wardDept) throws ims.domain.exceptions.StaleObjectException
	{
		if (wardDept == null )
		{
			throw new CodingRuntimeException("Cannot save null WardDept ");
		}
		
		DomainFactory factory = getDomainFactory();
		
		InpatientDashboardConfig doWardDept = InpatientDashboardConfigVoAssembler.extractInpatientDashboardConfig(factory, wardDept);
		
		factory.save(doWardDept);
		
		return InpatientDashboardConfigVoAssembler.create(doWardDept);
	}

	public InpatientDashboardConfigVoCollection listWardDepts(Boolean active)
	{
		DomainFactory factory = getDomainFactory();
		String hql = "from InpatientDashboardConfig as inpDash ";
		
		if (Boolean.TRUE.equals(active))
		{
			hql += " where inpDash.isActive = 1 ";
		}
		
		hql +=" order by inpDash.sequenceNo asc ";
		
		List list = factory.find(hql);
		
		return InpatientDashboardConfigVoAssembler.createInpatientDashboardConfigVoCollectionFromInpatientDashboardConfig(list);
	}

	public LocationLiteVoCollection listWards(String name)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " from Location loc where loc.isActive = 1 and loc.type.id = :locTypeID  and loc.id not in " +
				"(select wardloc.id from InpatientDashboardConfig as inpDash left join inpDash.wardLocations as wardloc ) ";
		
		StringBuffer condStr = new StringBuffer();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		markers.add("locTypeID");
		values.add(LocationType.WARD.getID());	
			
		if (name != null)
		{
			condStr.append(" and loc.upperName like :name ");
			markers.add("name");
			values.add(name.toUpperCase() + "%");
		}
		
		condStr.append(" and loc.isVirtual = :isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		hql += condStr.toString();
		hql += " ORDER BY loc.upperName";						
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(factory.find(hql, markers, values));
		
	}

	
	public Integer countSavedRecords()
	{
		DomainFactory factory = getDomainFactory();
		String hql = "select count(inpDash.id) from InpatientDashboardConfig as inpDash ";
		
		List list = factory.find(hql);
		
		if (list != null && list.size() > 0)
			return ((Long) list.get(0)).intValue();
		
		return 0;
	}

	public InpatientDashboardConfigVo switchSequenceNumber(InpatientDashboardConfigVo firstRecord, InpatientDashboardConfigVo secondRecord) throws StaleObjectException
	{
		if (firstRecord == null || secondRecord == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		Integer firstSequenceNumber = firstRecord.getSequenceNo();
		Integer secondSequenceNumber = secondRecord.getSequenceNo();
		
		firstRecord.setSequenceNo(secondSequenceNumber);
		secondRecord.setSequenceNo(firstSequenceNumber);
		
		InpatientDashboardConfig doFirstRecord = InpatientDashboardConfigVoAssembler.extractInpatientDashboardConfig(factory, firstRecord);
		factory.save(doFirstRecord);
		
		InpatientDashboardConfig doSecondRecord = InpatientDashboardConfigVoAssembler.extractInpatientDashboardConfig(factory, secondRecord);
		factory.save(doSecondRecord);
		
		return InpatientDashboardConfigVoAssembler.create(doFirstRecord);
	}
}
