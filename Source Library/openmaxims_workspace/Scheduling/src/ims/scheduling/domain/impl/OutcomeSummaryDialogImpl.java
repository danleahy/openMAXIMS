//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Michael Noonan using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import java.util.ArrayList;

import ims.admin.vo.AppointmentOutcomeConfigVo;
import ims.admin.vo.AppointmentOutcomeConfigVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.pathways.vo.PathwaysRTTClockImpactRefVo;
import ims.scheduling.domain.AppointmentOutcomeDialog;
import ims.scheduling.domain.base.impl.BaseOutcomeSummaryDialogImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionListOwnerLiteVoCollection;
import ims.scheduling.vo.domain.BookingAppointmentOutcomeVoAssembler;
import ims.scheduling.vo.domain.SessionListOwnerLiteVoAssembler;
import ims.scheduling.vo.lookups.ApptOutcome;
import ims.scheduling.vo.lookups.Status_Reason;

public class OutcomeSummaryDialogImpl extends BaseOutcomeSummaryDialogImpl
{

	private static final long serialVersionUID = 1L;

	
	public BookingAppointmentOutcomeVo getOutcomeDetails(PathwaysRTTClockImpactRefVo clockImpactRef)
	{
		DomainFactory factory = getDomainFactory();
		String hql = "select b1_1	from Booking_Appointment as b1_1 left join b1_1.rTTClockImpact as p1_1	where (b1_1.rTTClockImpact.id = :clockImpactId)"; 
		Booking_Appointment appt = (Booking_Appointment) factory.findFirst(hql,new String[]{"clockImpactId"},new Object[]{clockImpactRef.getBoId()});
		return BookingAppointmentOutcomeVoAssembler.create(appt);
	}

	
	public void saveAppointmentOutome(BookingAppointmentOutcomeVo appointment) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		Booking_Appointment appt = BookingAppointmentOutcomeVoAssembler.extractBooking_Appointment(factory, appointment);
		factory.save(appt);
	}


	public AppointmentOutcomeConfigVoCollection listAppointmentOutcomeByAppointmentStatus(Status_Reason status)
	{
		AppointmentOutcomeDialog impl = (AppointmentOutcomeDialog)getDomainImpl(AppointmentOutcomeDialogImpl.class);
		return impl.listAppointmentOutcomeByAppointmentStatus(status);
	}


	public AppointmentOutcomeConfigVo getAppointmentOutcomeConfigByApptOutcomeLookup(ApptOutcome apptOutcomeLookup)
	{
		AppointmentOutcomeDialog impl = (AppointmentOutcomeDialog)getDomainImpl(AppointmentOutcomeDialogImpl.class);
		return impl.getAppointmentOutcomeConfigByApptOutcomeLookup(apptOutcomeLookup);
	}


	public HcpLiteVoCollection listSessionListOwners(Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			return null;
		
		String query = "SELECT hcp FROM Sch_Session AS session LEFT JOIN session.listOwners AS listOwner LEFT JOIN listOwner.hcp AS hcp WHERE session.id = :SESSION AND listOwner.listOwner = 1";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("SESSION");
		paramValues.add(session.getID_Sch_Session());
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query, paramNames, paramValues));
	}
}
