//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5527.24259)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.scheduling.domain.impl;

import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.Profiles;
import ims.scheduling.domain.base.impl.BaseUpdateProfileListOwnersImpl;
import ims.scheduling.domain.objects.ProfileRipple;
import ims.scheduling.domain.objects.Profile_ListOwner;
import ims.scheduling.domain.objects.Profile_Slot;
import ims.scheduling.vo.Sch_ProfileRefVo;
import ims.scheduling.vo.domain.ProfileRippleVoAssembler;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class UpdateProfileListOwnersImpl extends BaseUpdateProfileListOwnersImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpLiteVoCollection listHcpLiteByServiceFunction( ims.core.vo.HcpFilter filter, ims.core.clinical.vo.ServiceRefVo serviceRef, ims.core.vo.lookups.ServiceFunctionCollection functions)
	{
		Profiles impl = (Profiles) getDomainImpl(ProfilesImpl.class);
		return impl.listHcpLiteBySerbiceFunction(filter, serviceRef, functions);
	}

	public ims.core.vo.ServiceFunctionLiteVoCollection listServiceFunctionByService(ims.core.clinical.vo.ServiceRefVo serviceRef)
	{
		Profiles impl = (Profiles) getDomainImpl(ProfilesImpl.class);
		return impl.listServiceFunctionByService(serviceRef);
	}

	public ims.scheduling.vo.ProfileRippleVo save(ims.scheduling.vo.ProfileRippleVo profileRippleToSave) throws ims.domain.exceptions.StaleObjectException
	{
		if (profileRippleToSave == null)
			throw new CodingRuntimeException("Cannot save null record.");
		
		if (!profileRippleToSave.isValidated())
			throw new CodingRuntimeException("Record not validated.");
		
		DomainFactory domainFactory = getDomainFactory();
		
		//WDEV-23971 - start
		Set newList = new HashSet();
		ProfileRipple domProfileRipple = ProfileRippleVoAssembler.extractProfileRipple(domainFactory, profileRippleToSave);
		
		if (profileRippleToSave.getListOwnersIsNotNull())
		{
			Iterator it = domProfileRipple.getListOwners().iterator();
			while (it.hasNext())
			{
				Profile_ListOwner sessLo =(Profile_ListOwner) it.next(); 
				newList.add(sessLo);
			}
		}
		
			updateRelevantProfileSlots(profileRippleToSave, newList);
		domProfileRipple.getProfile().getListOwners().clear();
		if (newList.size() > 0)
		{	
			domProfileRipple.getProfile().getListOwners().addAll(newList);
		}
		//WDEV-23971 -- ends here
		
		domainFactory.save(domProfileRipple);	
		return ProfileRippleVoAssembler.create(domProfileRipple);
	}
		
	/**WDEV-23971 new logic for updating slots
	 * 
	 */
	@SuppressWarnings("unchecked")
	private void updateRelevantProfileSlots(ims.scheduling.vo.ProfileRippleVo profileRippleToSave, Set newListToRipple)
	{		
		Set<Profile_Slot> profileSlotsList = getProfileSlotsWithSlotResp(profileRippleToSave.getProfile().toSch_ProfileRefVo());
		if (profileSlotsList == null)
			return;

		Iterator<Profile_Slot> itSlots = profileSlotsList.iterator();
		boolean hasListOwnForRipple = newListToRipple.size() > 0;
			
		while (itSlots.hasNext())
		{
			Profile_Slot profSlot = (Profile_Slot) itSlots.next();
			boolean slotUpdated = false;			
				
			if (hasListOwnForRipple)
			{
				Iterator<Profile_ListOwner> newListIterator = newListToRipple.iterator();
				while (newListIterator.hasNext())
				{	
					Profile_ListOwner sessLo = (Profile_ListOwner) newListIterator.next();
					if (sessLo == null || !profSlot.getSlotResp().getId().equals(sessLo.getId()))
						continue;
						
					if (Boolean.TRUE.equals(sessLo.isListOwner()))
					{
						profSlot.getSlotResp().setHCP(sessLo.getHCP());
						profSlot.getSlotResp().setListOwner(sessLo.isListOwner());
						profSlot.getSlotResp().setAttendingClinician(sessLo.isAttendingClinician());
						slotUpdated = true;
						break;
					}					
				}
			}
			if (!slotUpdated)
			{				
				if (!hasListOwnForRipple)
				{	
					profSlot.setSlotResp(null);
				}	
				else
				{
					Set<Profile_ListOwner> listOwnersSet = getListOwners(newListToRipple);
					if (!listOwnersSet.contains(profSlot.getSlotResp()))
					{	
						if (listOwnersSet.size() == 1)
						{	
							profSlot.setSlotResp ((Profile_ListOwner) listOwnersSet.iterator().next());
						}	
						else
						{
							profSlot.setSlotResp(null);
						}
					}
				}	
			}				
		}
	}	

	private Set getListOwners(Set newList)
	{
		if (newList == null || newList.size() == 0)
			return null;
			
		Iterator newListIterator = newList.iterator();
		HashSet listOwnerList = new HashSet();
		while (newListIterator.hasNext())
		{	
			Profile_ListOwner sessLo = (Profile_ListOwner) newListIterator.next();
			if (sessLo != null && Boolean.TRUE.equals(sessLo.isListOwner()))
				listOwnerList.add(sessLo);			
		}
		return listOwnerList;
	}

	private Set getProfileSlotsWithSlotResp(Sch_ProfileRefVo sch_ProfileRefVo)
	{
		if (sch_ProfileRefVo == null || sch_ProfileRefVo.getID_Sch_Profile() == null)
			return null;
			
		List<?> lst = getDomainFactory().find("select pslot from Sch_Profile as prof left join prof.profileSlots as pslot left join pslot.slotResp as slotresp where prof.id = :PROFILE_ID AND prof.isActive = :ACTIVE AND pslot.isActive = :ACTIVE and slotresp is not null", new String[]{"PROFILE_ID", "ACTIVE"}, new Object[]{sch_ProfileRefVo.getID_Sch_Profile(),Boolean.TRUE});
		if (lst == null || lst.isEmpty())
			return null;
			
		return new HashSet(lst);		 
	}
	// WDEV-23971 * ends here

	private Set updateRelevantProfileSlots(ims.scheduling.vo.ProfileRippleVo profileRippleToSave,	Profile_ListOwner sessLo)
	{
		Set profileSlotsList = getProfileSlotsWithSlotResp(profileRippleToSave.getProfile().toSch_ProfileRefVo(), sessLo);
		if (profileSlotsList == null)
			return null;
		
		Iterator itSlots = profileSlotsList.iterator();
		
		while (itSlots.hasNext())
		{
			Profile_Slot profSlot = (Profile_Slot) itSlots.next();
			profSlot.getSlotResp().setHCP(sessLo.getHCP());
			profSlot.getSlotResp().setListOwner(sessLo.isListOwner());
			profSlot.getSlotResp().setAttendingClinician(sessLo.isAttendingClinician());
		}
		return profileSlotsList;
	}

	private Set getProfileSlotsWithSlotResp(Sch_ProfileRefVo sch_ProfileRefVo, Profile_ListOwner sessLo)
	{
		if (sessLo == null || sessLo.getId() == null)
			return null;
		List<?> lst = getDomainFactory().find("select pslot from Sch_Profile as prof left join prof.profileSlots as pslot left join pslot.slotResp as slotresp where slotresp.id = :SLOT_RESP and prof.id = :PROFILE_ID", new String[]{"SLOT_RESP", "PROFILE_ID"}, new Object[]{sessLo.getId(),sch_ProfileRefVo.getID_Sch_Profile()});
		if (lst == null || lst.isEmpty())
			return null;
		return new HashSet(lst);
	}
}
