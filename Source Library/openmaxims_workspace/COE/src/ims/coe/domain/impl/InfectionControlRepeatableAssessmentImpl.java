//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.60 build 2865.28611)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.coe.domain.impl;

import ims.coe.assessmenttools.domain.objects.InfectionControlRepeatableAssessment;
import ims.coe.domain.AssessInfectionControl;
import ims.coe.domain.base.impl.BaseInfectionControlRepeatableAssessmentImpl;
import ims.coe.vo.InfectionControlComponentVo;
import ims.coe.vo.InfectionControlRepeatableAssessmentVo;
import ims.coe.vo.domain.InfectionControlRepeatableAssessmentVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.Reports;
import ims.core.domain.impl.ReportsImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.nursing.vo.AssessmentComponent;
import ims.nursing.vo.AssessmentComponentCollection;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.domain.AssessmentComponentAssembler;

import java.util.List;
public class InfectionControlRepeatableAssessmentImpl extends BaseInfectionControlRepeatableAssessmentImpl
{

	private static final long	serialVersionUID	= 1L;

	/**
	 * get InfectionControlRepeatableAssessmentVo
	 */
	public ims.coe.vo.InfectionControlRepeatableAssessmentVoCollection listInfectionControlByCareContext(CareContextRefVo careContext)
	{
		if (careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext id is null in method listInfectionControlByCareContext");

		return InfectionControlRepeatableAssessmentVoAssembler.createInfectionControlRepeatableAssessmentVoCollectionFromInfectionControlRepeatableAssessment(getDomainFactory().find("from InfectionControlRepeatableAssessment inf where inf.careContext.id = :ccId", new String[]{"ccId"}, new Object[]{careContext.getID_CareContext()}));
	}

	/**
	 * saveInfectionControl
	 */
	public ims.coe.vo.InfectionControlRepeatableAssessmentVo saveInfectionControl(ims.coe.vo.InfectionControlRepeatableAssessmentVo infectionControl) throws ims.domain.exceptions.StaleObjectException
	{
		if (!infectionControl.isValidated())
			throw new DomainRuntimeException("This has not been validated");

		DomainFactory factory = getDomainFactory();
		InfectionControlRepeatableAssessment domInfectionControlRepeatableAssessment = InfectionControlRepeatableAssessmentVoAssembler.extractInfectionControlRepeatableAssessment(factory, infectionControl);

		factory.save(domInfectionControlRepeatableAssessment);

		return InfectionControlRepeatableAssessmentVoAssembler.create(domInfectionControlRepeatableAssessment);

	}

	public InfectionControlRepeatableAssessmentVo getInfectionControllAssessment(Integer infectionControllAssessmentId)
	{
		DomainFactory factory = getDomainFactory();
		InfectionControlRepeatableAssessment infect = (InfectionControlRepeatableAssessment) factory.getDomainObject(InfectionControlRepeatableAssessment.class, infectionControllAssessmentId);
		return (InfectionControlRepeatableAssessmentVoAssembler.create(infect));
	}

	public AssessmentHeaderInfo saveInfectionWithAssessment(AssessmentHeaderInfo assessmentHeader, AssessmentComponent assessmentComponent, InfectionControlRepeatableAssessmentVo infectionControl) throws ims.domain.exceptions.StaleObjectException,DomainInterfaceException
	{
		if (!infectionControl.isValidated())
			throw new DomainRuntimeException("This has not been validated");

		InfectionControlComponentVo infConComVo = null;

		DomainFactory factory = getDomainFactory();
		InfectionControlRepeatableAssessment domInfectionControlRepeatableAssessment = InfectionControlRepeatableAssessmentVoAssembler.extractInfectionControlRepeatableAssessment(factory, infectionControl);
		factory.save(domInfectionControlRepeatableAssessment);
		if (assessmentHeader != null)
		{
			if (assessmentComponent instanceof InfectionControlComponentVo)
			{
				infConComVo = (InfectionControlComponentVo) assessmentComponent;
				infConComVo.setInfectionControlAssessment(InfectionControlRepeatableAssessmentVoAssembler.create(domInfectionControlRepeatableAssessment));
				
				
				
				return saveAssessInfectionControlComponent(assessmentHeader, infConComVo);

			}
		}
		return null;
	
	}

	private ims.nursing.vo.AssessmentHeaderInfo saveAssessInfectionControlComponent(ims.nursing.vo.AssessmentHeaderInfo assessment, ims.nursing.vo.AssessmentComponent component) throws StaleObjectException,DomainInterfaceException
	{
		AssessInfectionControl assInfCon = (AssessInfectionControl) getDomainImpl(AssessmentComponentImpl.class);

		String errors[] = component.validate();
		
		if(errors == null)
		{
		ims.nursing.vo.AssessmentHeaderInfo header = assInfCon.saveComponent(assessment, component);

		header.setCurrentComponent(assInfCon.getComponent(header.getCurrentComponent()));
		
		
		
		return header;
		}
		else throw new CodingRuntimeException(errors.toString());
		
	}

	public AssessmentComponent getInfectionComponent(InfectionControlRepeatableAssessmentVo value)
	{
		DomainFactory factory = getDomainFactory();
		
		String hql =" from InfectionControlComponent as infectionControlComponent " +
				"where infectionControlComponent.infectionControlAssessment.id = "+value.getBoId();
		
		List comps = factory.find(hql);
		
		AssessmentComponentCollection result = AssessmentComponentAssembler.createAssessmentComponentCollectionFromAssessmentComponent(comps);
		
		if(result.size() >0)
			return result.get(0);
		else
			return null;
	}

	public String[] getReportAndTemplate(Integer nReportId, Integer nTemplateId) throws DomainInterfaceException
	{
		Reports impl = (Reports) getDomainImpl(ReportsImpl.class);
		return impl.getReportAndTemplate(nReportId, nTemplateId);
	}

}
