//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ccosched.vo;


public class ClinicViewFilterVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ClinicViewFilterVo()
	{
	}
	public ClinicViewFilterVo(ims.ccosched.vo.beans.ClinicViewFilterVoBean bean)
	{
		this.clinicname = bean.getClinicName();
		this.clinicdetail = bean.getClinicDetail();
		this.date = bean.getDate() == null ? null : bean.getDate().buildDate();
		this.status = bean.getStatus();
		this.active = bean.getActive();
		this.action = bean.getAction();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ccosched.vo.beans.ClinicViewFilterVoBean bean)
	{
		this.clinicname = bean.getClinicName();
		this.clinicdetail = bean.getClinicDetail();
		this.date = bean.getDate() == null ? null : bean.getDate().buildDate();
		this.status = bean.getStatus();
		this.active = bean.getActive();
		this.action = bean.getAction();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ccosched.vo.beans.ClinicViewFilterVoBean bean = null;
		if(map != null)
			bean = (ims.ccosched.vo.beans.ClinicViewFilterVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ccosched.vo.beans.ClinicViewFilterVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getClinicNameIsNotNull()
	{
		return this.clinicname != null;
	}
	public String getClinicName()
	{
		return this.clinicname;
	}
	public static int getClinicNameMaxLength()
	{
		return 255;
	}
	public void setClinicName(String value)
	{
		this.isValidated = false;
		this.clinicname = value;
	}
	public boolean getClinicDetailIsNotNull()
	{
		return this.clinicdetail != null;
	}
	public String getClinicDetail()
	{
		return this.clinicdetail;
	}
	public static int getClinicDetailMaxLength()
	{
		return 255;
	}
	public void setClinicDetail(String value)
	{
		this.isValidated = false;
		this.clinicdetail = value;
	}
	public boolean getDateIsNotNull()
	{
		return this.date != null;
	}
	public ims.framework.utils.Date getDate()
	{
		return this.date;
	}
	public void setDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.date = value;
	}
	public boolean getStatusIsNotNull()
	{
		return this.status != null;
	}
	public String getStatus()
	{
		return this.status;
	}
	public static int getStatusMaxLength()
	{
		return 255;
	}
	public void setStatus(String value)
	{
		this.isValidated = false;
		this.status = value;
	}
	public boolean getActiveIsNotNull()
	{
		return this.active != null;
	}
	public Boolean getActive()
	{
		return this.active;
	}
	public void setActive(Boolean value)
	{
		this.isValidated = false;
		this.active = value;
	}
	public boolean getActionIsNotNull()
	{
		return this.action != null;
	}
	public String getAction()
	{
		return this.action;
	}
	public static int getActionMaxLength()
	{
		return 255;
	}
	public void setAction(String value)
	{
		this.isValidated = false;
		this.action = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof ClinicViewFilterVo))
			return false;
		ClinicViewFilterVo compareObj = (ClinicViewFilterVo)obj;
		if(this.getClinicName() == null && compareObj.getClinicName() != null)
			return false;
		if(this.getClinicName() != null && compareObj.getClinicName() == null)
			return false;
		if(this.getClinicName() != null && compareObj.getClinicName() != null)
			return this.getClinicName().equals(compareObj.getClinicName());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ClinicViewFilterVo clone = new ClinicViewFilterVo();
		
		clone.clinicname = this.clinicname;
		clone.clinicdetail = this.clinicdetail;
		if(this.date == null)
			clone.date = null;
		else
			clone.date = (ims.framework.utils.Date)this.date.clone();
		clone.status = this.status;
		clone.active = this.active;
		clone.action = this.action;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ClinicViewFilterVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ClinicViewFilterVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		ClinicViewFilterVo compareObj = (ClinicViewFilterVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getClinicName() == null && compareObj.getClinicName() != null)
				return -1;
			if(this.getClinicName() != null && compareObj.getClinicName() == null)
				return 1;
			if(this.getClinicName() != null && compareObj.getClinicName() != null)
			{
				if(caseInsensitive)
					retVal = this.getClinicName().toLowerCase().compareTo(compareObj.getClinicName().toLowerCase());
				else
					retVal = this.getClinicName().compareTo(compareObj.getClinicName());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.clinicname != null)
			count++;
		if(this.clinicdetail != null)
			count++;
		if(this.date != null)
			count++;
		if(this.status != null)
			count++;
		if(this.active != null)
			count++;
		if(this.action != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected String clinicname;
	protected String clinicdetail;
	protected ims.framework.utils.Date date;
	protected String status;
	protected Boolean active;
	protected String action;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
