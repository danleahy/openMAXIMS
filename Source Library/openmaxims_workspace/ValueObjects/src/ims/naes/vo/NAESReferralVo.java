//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.naes.vo;

/**
 * Linked to NAES.NAES Referral business object (ID: 1097100004).
 */
public class NAESReferralVo extends ims.naes.vo.NAESReferralRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public NAESReferralVo()
	{
	}
	public NAESReferralVo(Integer id, int version)
	{
		super(id, version);
	}
	public NAESReferralVo(ims.naes.vo.beans.NAESReferralVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.datereferralreceived = bean.getDateReferralReceived() == null ? null : bean.getDateReferralReceived().buildDate();
		this.dateofsurgery = bean.getDateOfSurgery() == null ? null : bean.getDateOfSurgery().buildDate();
		this.referringhospital = bean.getReferringHospital();
		this.referringdoctor = bean.getReferringDoctor();
		this.referralreason = bean.getReferralReason() == null ? null : ims.core.vo.lookups.ReasonForReferral.buildLookup(bean.getReferralReason());
		this.secondarysurgery = bean.getSecondarySurgery() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getSecondarySurgery());
		this.underlyingreason = bean.getUnderlyingReason() == null ? null : ims.naes.vo.lookups.UnderlyingReason.buildLookup(bean.getUnderlyingReason());
		this.affectedeye = bean.getAffectedEye() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getAffectedEye());
		this.implant = bean.getImplant() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getImplant());
		this.implanttype = bean.getImplantType() == null ? null : ims.naes.vo.lookups.ImplantType.buildLookup(bean.getImplantType());
		this.interpreterrequired = bean.getInterpreterRequired() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getInterpreterRequired());
		this.language = bean.getLanguage() == null ? null : ims.core.vo.lookups.Language.buildLookup(bean.getLanguage());
		this.languageifother = bean.getLanguageIfOther();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.referredby = bean.getReferredBy() == null ? null : ims.naes.vo.lookups.NAESReferredBy.buildLookup(bean.getReferredBy());
		this.sixweekkpi = bean.getSixWeekKPI() == null ? null : bean.getSixWeekKPI().buildDate();
		this.threeweekkpi = bean.getThreeWeekKPI() == null ? null : bean.getThreeWeekKPI().buildDate();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.preferredclinic = bean.getPreferredClinic();
		this.notes = bean.getNotes();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.naes.vo.beans.NAESReferralVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.datereferralreceived = bean.getDateReferralReceived() == null ? null : bean.getDateReferralReceived().buildDate();
		this.dateofsurgery = bean.getDateOfSurgery() == null ? null : bean.getDateOfSurgery().buildDate();
		this.referringhospital = bean.getReferringHospital();
		this.referringdoctor = bean.getReferringDoctor();
		this.referralreason = bean.getReferralReason() == null ? null : ims.core.vo.lookups.ReasonForReferral.buildLookup(bean.getReferralReason());
		this.secondarysurgery = bean.getSecondarySurgery() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getSecondarySurgery());
		this.underlyingreason = bean.getUnderlyingReason() == null ? null : ims.naes.vo.lookups.UnderlyingReason.buildLookup(bean.getUnderlyingReason());
		this.affectedeye = bean.getAffectedEye() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getAffectedEye());
		this.implant = bean.getImplant() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getImplant());
		this.implanttype = bean.getImplantType() == null ? null : ims.naes.vo.lookups.ImplantType.buildLookup(bean.getImplantType());
		this.interpreterrequired = bean.getInterpreterRequired() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getInterpreterRequired());
		this.language = bean.getLanguage() == null ? null : ims.core.vo.lookups.Language.buildLookup(bean.getLanguage());
		this.languageifother = bean.getLanguageIfOther();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.referredby = bean.getReferredBy() == null ? null : ims.naes.vo.lookups.NAESReferredBy.buildLookup(bean.getReferredBy());
		this.sixweekkpi = bean.getSixWeekKPI() == null ? null : bean.getSixWeekKPI().buildDate();
		this.threeweekkpi = bean.getThreeWeekKPI() == null ? null : bean.getThreeWeekKPI().buildDate();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.preferredclinic = bean.getPreferredClinic();
		this.notes = bean.getNotes();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.naes.vo.beans.NAESReferralVoBean bean = null;
		if(map != null)
			bean = (ims.naes.vo.beans.NAESReferralVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.naes.vo.beans.NAESReferralVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("DATEREFERRALRECEIVED"))
			return getDateReferralReceived();
		if(fieldName.equals("DATEOFSURGERY"))
			return getDateOfSurgery();
		if(fieldName.equals("REFERRINGHOSPITAL"))
			return getReferringHospital();
		if(fieldName.equals("REFERRINGDOCTOR"))
			return getReferringDoctor();
		if(fieldName.equals("REFERRALREASON"))
			return getReferralReason();
		if(fieldName.equals("SECONDARYSURGERY"))
			return getSecondarySurgery();
		if(fieldName.equals("UNDERLYINGREASON"))
			return getUnderlyingReason();
		if(fieldName.equals("AFFECTEDEYE"))
			return getAffectedEye();
		if(fieldName.equals("IMPLANT"))
			return getImplant();
		if(fieldName.equals("IMPLANTTYPE"))
			return getImplantType();
		if(fieldName.equals("INTERPRETERREQUIRED"))
			return getInterpreterRequired();
		if(fieldName.equals("LANGUAGE"))
			return getLanguage();
		if(fieldName.equals("LANGUAGEIFOTHER"))
			return getLanguageIfOther();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("REFERREDBY"))
			return getReferredBy();
		if(fieldName.equals("SIXWEEKKPI"))
			return getSixWeekKPI();
		if(fieldName.equals("THREEWEEKKPI"))
			return getThreeWeekKPI();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("PREFERREDCLINIC"))
			return getPreferredClinic();
		if(fieldName.equals("NOTES"))
			return getNotes();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getDateReferralReceivedIsNotNull()
	{
		return this.datereferralreceived != null;
	}
	public ims.framework.utils.Date getDateReferralReceived()
	{
		return this.datereferralreceived;
	}
	public void setDateReferralReceived(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datereferralreceived = value;
	}
	public boolean getDateOfSurgeryIsNotNull()
	{
		return this.dateofsurgery != null;
	}
	public ims.framework.utils.Date getDateOfSurgery()
	{
		return this.dateofsurgery;
	}
	public void setDateOfSurgery(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateofsurgery = value;
	}
	public boolean getReferringHospitalIsNotNull()
	{
		return this.referringhospital != null;
	}
	public String getReferringHospital()
	{
		return this.referringhospital;
	}
	public static int getReferringHospitalMaxLength()
	{
		return 50;
	}
	public void setReferringHospital(String value)
	{
		this.isValidated = false;
		this.referringhospital = value;
	}
	public boolean getReferringDoctorIsNotNull()
	{
		return this.referringdoctor != null;
	}
	public String getReferringDoctor()
	{
		return this.referringdoctor;
	}
	public static int getReferringDoctorMaxLength()
	{
		return 50;
	}
	public void setReferringDoctor(String value)
	{
		this.isValidated = false;
		this.referringdoctor = value;
	}
	public boolean getReferralReasonIsNotNull()
	{
		return this.referralreason != null;
	}
	public ims.core.vo.lookups.ReasonForReferral getReferralReason()
	{
		return this.referralreason;
	}
	public void setReferralReason(ims.core.vo.lookups.ReasonForReferral value)
	{
		this.isValidated = false;
		this.referralreason = value;
	}
	public boolean getSecondarySurgeryIsNotNull()
	{
		return this.secondarysurgery != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getSecondarySurgery()
	{
		return this.secondarysurgery;
	}
	public void setSecondarySurgery(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.secondarysurgery = value;
	}
	public boolean getUnderlyingReasonIsNotNull()
	{
		return this.underlyingreason != null;
	}
	public ims.naes.vo.lookups.UnderlyingReason getUnderlyingReason()
	{
		return this.underlyingreason;
	}
	public void setUnderlyingReason(ims.naes.vo.lookups.UnderlyingReason value)
	{
		this.isValidated = false;
		this.underlyingreason = value;
	}
	public boolean getAffectedEyeIsNotNull()
	{
		return this.affectedeye != null;
	}
	public ims.core.vo.lookups.LateralityLRB getAffectedEye()
	{
		return this.affectedeye;
	}
	public void setAffectedEye(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.affectedeye = value;
	}
	public boolean getImplantIsNotNull()
	{
		return this.implant != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getImplant()
	{
		return this.implant;
	}
	public void setImplant(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.implant = value;
	}
	public boolean getImplantTypeIsNotNull()
	{
		return this.implanttype != null;
	}
	public ims.naes.vo.lookups.ImplantType getImplantType()
	{
		return this.implanttype;
	}
	public void setImplantType(ims.naes.vo.lookups.ImplantType value)
	{
		this.isValidated = false;
		this.implanttype = value;
	}
	public boolean getInterpreterRequiredIsNotNull()
	{
		return this.interpreterrequired != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getInterpreterRequired()
	{
		return this.interpreterrequired;
	}
	public void setInterpreterRequired(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.interpreterrequired = value;
	}
	public boolean getLanguageIsNotNull()
	{
		return this.language != null;
	}
	public ims.core.vo.lookups.Language getLanguage()
	{
		return this.language;
	}
	public void setLanguage(ims.core.vo.lookups.Language value)
	{
		this.isValidated = false;
		this.language = value;
	}
	public boolean getLanguageIfOtherIsNotNull()
	{
		return this.languageifother != null;
	}
	public String getLanguageIfOther()
	{
		return this.languageifother;
	}
	public static int getLanguageIfOtherMaxLength()
	{
		return 50;
	}
	public void setLanguageIfOther(String value)
	{
		this.isValidated = false;
		this.languageifother = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getReferredByIsNotNull()
	{
		return this.referredby != null;
	}
	public ims.naes.vo.lookups.NAESReferredBy getReferredBy()
	{
		return this.referredby;
	}
	public void setReferredBy(ims.naes.vo.lookups.NAESReferredBy value)
	{
		this.isValidated = false;
		this.referredby = value;
	}
	public boolean getSixWeekKPIIsNotNull()
	{
		return this.sixweekkpi != null;
	}
	public ims.framework.utils.Date getSixWeekKPI()
	{
		return this.sixweekkpi;
	}
	public void setSixWeekKPI(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.sixweekkpi = value;
	}
	public boolean getThreeWeekKPIIsNotNull()
	{
		return this.threeweekkpi != null;
	}
	public ims.framework.utils.Date getThreeWeekKPI()
	{
		return this.threeweekkpi;
	}
	public void setThreeWeekKPI(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.threeweekkpi = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextShortVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextShortVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getPreferredClinicIsNotNull()
	{
		return this.preferredclinic != null;
	}
	public String getPreferredClinic()
	{
		return this.preferredclinic;
	}
	public static int getPreferredClinicMaxLength()
	{
		return 255;
	}
	public void setPreferredClinic(String value)
	{
		this.isValidated = false;
		this.preferredclinic = value;
	}
	public boolean getNotesIsNotNull()
	{
		return this.notes != null;
	}
	public String getNotes()
	{
		return this.notes;
	}
	public static int getNotesMaxLength()
	{
		return 1000;
	}
	public void setNotes(String value)
	{
		this.isValidated = false;
		this.notes = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.datereferralreceived == null)
			listOfErrors.add("DateReferralReceived is mandatory");
		if(this.referringhospital != null)
			if(this.referringhospital.length() > 50)
				listOfErrors.add("The length of the field [referringhospital] in the value object [ims.naes.vo.NAESReferralVo] is too big. It should be less or equal to 50");
		if(this.referringdoctor != null)
			if(this.referringdoctor.length() > 50)
				listOfErrors.add("The length of the field [referringdoctor] in the value object [ims.naes.vo.NAESReferralVo] is too big. It should be less or equal to 50");
		if(this.languageifother != null)
			if(this.languageifother.length() > 50)
				listOfErrors.add("The length of the field [languageifother] in the value object [ims.naes.vo.NAESReferralVo] is too big. It should be less or equal to 50");
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.referredby == null)
			listOfErrors.add("ReferredBy is mandatory");
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.preferredclinic != null)
			if(this.preferredclinic.length() > 255)
				listOfErrors.add("The length of the field [preferredclinic] in the value object [ims.naes.vo.NAESReferralVo] is too big. It should be less or equal to 255");
		if(this.notes != null)
			if(this.notes.length() > 1000)
				listOfErrors.add("The length of the field [notes] in the value object [ims.naes.vo.NAESReferralVo] is too big. It should be less or equal to 1000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		NAESReferralVo clone = new NAESReferralVo(this.id, this.version);
		
		if(this.datereferralreceived == null)
			clone.datereferralreceived = null;
		else
			clone.datereferralreceived = (ims.framework.utils.Date)this.datereferralreceived.clone();
		if(this.dateofsurgery == null)
			clone.dateofsurgery = null;
		else
			clone.dateofsurgery = (ims.framework.utils.Date)this.dateofsurgery.clone();
		clone.referringhospital = this.referringhospital;
		clone.referringdoctor = this.referringdoctor;
		if(this.referralreason == null)
			clone.referralreason = null;
		else
			clone.referralreason = (ims.core.vo.lookups.ReasonForReferral)this.referralreason.clone();
		if(this.secondarysurgery == null)
			clone.secondarysurgery = null;
		else
			clone.secondarysurgery = (ims.core.vo.lookups.YesNoUnknown)this.secondarysurgery.clone();
		if(this.underlyingreason == null)
			clone.underlyingreason = null;
		else
			clone.underlyingreason = (ims.naes.vo.lookups.UnderlyingReason)this.underlyingreason.clone();
		if(this.affectedeye == null)
			clone.affectedeye = null;
		else
			clone.affectedeye = (ims.core.vo.lookups.LateralityLRB)this.affectedeye.clone();
		if(this.implant == null)
			clone.implant = null;
		else
			clone.implant = (ims.core.vo.lookups.YesNoUnknown)this.implant.clone();
		if(this.implanttype == null)
			clone.implanttype = null;
		else
			clone.implanttype = (ims.naes.vo.lookups.ImplantType)this.implanttype.clone();
		if(this.interpreterrequired == null)
			clone.interpreterrequired = null;
		else
			clone.interpreterrequired = (ims.core.vo.lookups.YesNoUnknown)this.interpreterrequired.clone();
		if(this.language == null)
			clone.language = null;
		else
			clone.language = (ims.core.vo.lookups.Language)this.language.clone();
		clone.languageifother = this.languageifother;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		if(this.referredby == null)
			clone.referredby = null;
		else
			clone.referredby = (ims.naes.vo.lookups.NAESReferredBy)this.referredby.clone();
		if(this.sixweekkpi == null)
			clone.sixweekkpi = null;
		else
			clone.sixweekkpi = (ims.framework.utils.Date)this.sixweekkpi.clone();
		if(this.threeweekkpi == null)
			clone.threeweekkpi = null;
		else
			clone.threeweekkpi = (ims.framework.utils.Date)this.threeweekkpi.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextShortVo)this.carecontext.clone();
		clone.preferredclinic = this.preferredclinic;
		clone.notes = this.notes;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(NAESReferralVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A NAESReferralVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((NAESReferralVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((NAESReferralVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.datereferralreceived != null)
			count++;
		if(this.dateofsurgery != null)
			count++;
		if(this.referringhospital != null)
			count++;
		if(this.referringdoctor != null)
			count++;
		if(this.referralreason != null)
			count++;
		if(this.secondarysurgery != null)
			count++;
		if(this.underlyingreason != null)
			count++;
		if(this.affectedeye != null)
			count++;
		if(this.implant != null)
			count++;
		if(this.implanttype != null)
			count++;
		if(this.interpreterrequired != null)
			count++;
		if(this.language != null)
			count++;
		if(this.languageifother != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.referredby != null)
			count++;
		if(this.sixweekkpi != null)
			count++;
		if(this.threeweekkpi != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.preferredclinic != null)
			count++;
		if(this.notes != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 20;
	}
	protected ims.framework.utils.Date datereferralreceived;
	protected ims.framework.utils.Date dateofsurgery;
	protected String referringhospital;
	protected String referringdoctor;
	protected ims.core.vo.lookups.ReasonForReferral referralreason;
	protected ims.core.vo.lookups.YesNoUnknown secondarysurgery;
	protected ims.naes.vo.lookups.UnderlyingReason underlyingreason;
	protected ims.core.vo.lookups.LateralityLRB affectedeye;
	protected ims.core.vo.lookups.YesNoUnknown implant;
	protected ims.naes.vo.lookups.ImplantType implanttype;
	protected ims.core.vo.lookups.YesNoUnknown interpreterrequired;
	protected ims.core.vo.lookups.Language language;
	protected String languageifother;
	protected ims.core.vo.PatientShort patient;
	protected ims.naes.vo.lookups.NAESReferredBy referredby;
	protected ims.framework.utils.Date sixweekkpi;
	protected ims.framework.utils.Date threeweekkpi;
	protected ims.core.vo.CareContextShortVo carecontext;
	protected String preferredclinic;
	protected String notes;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
