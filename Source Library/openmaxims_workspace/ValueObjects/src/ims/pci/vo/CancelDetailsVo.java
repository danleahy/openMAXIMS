//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pci.vo;


public class CancelDetailsVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CancelDetailsVo()
	{
	}
	public CancelDetailsVo(ims.pci.vo.beans.CancelDetailsVoBean bean)
	{
		this.cancelledby = bean.getCancelledBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getCancelledBy().getId()), bean.getCancelledBy().getVersion());
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.pci.vo.lookups.VaccineCancellationReason.buildLookup(bean.getCancellationReason());
		this.cancellationdatetime = bean.getCancellationDateTime() == null ? null : bean.getCancellationDateTime().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.pci.vo.beans.CancelDetailsVoBean bean)
	{
		this.cancelledby = bean.getCancelledBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getCancelledBy().getId()), bean.getCancelledBy().getVersion());
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.pci.vo.lookups.VaccineCancellationReason.buildLookup(bean.getCancellationReason());
		this.cancellationdatetime = bean.getCancellationDateTime() == null ? null : bean.getCancellationDateTime().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.pci.vo.beans.CancelDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.pci.vo.beans.CancelDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.pci.vo.beans.CancelDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getCancelledByIsNotNull()
	{
		return this.cancelledby != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getCancelledBy()
	{
		return this.cancelledby;
	}
	public void setCancelledBy(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.cancelledby = value;
	}
	public boolean getCancellationReasonIsNotNull()
	{
		return this.cancellationreason != null;
	}
	public ims.pci.vo.lookups.VaccineCancellationReason getCancellationReason()
	{
		return this.cancellationreason;
	}
	public void setCancellationReason(ims.pci.vo.lookups.VaccineCancellationReason value)
	{
		this.isValidated = false;
		this.cancellationreason = value;
	}
	public boolean getCancellationDateTimeIsNotNull()
	{
		return this.cancellationdatetime != null;
	}
	public ims.framework.utils.DateTime getCancellationDateTime()
	{
		return this.cancellationdatetime;
	}
	public void setCancellationDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.cancellationdatetime = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof CancelDetailsVo))
			return false;
		CancelDetailsVo compareObj = (CancelDetailsVo)obj;
		if(this.getCancelledBy() == null && compareObj.getCancelledBy() != null)
			return false;
		if(this.getCancelledBy() != null && compareObj.getCancelledBy() == null)
			return false;
		if(this.getCancelledBy() != null && compareObj.getCancelledBy() != null)
			if(!this.getCancelledBy().equals(compareObj.getCancelledBy()))
				return false;
		if(this.getCancellationReason() == null && compareObj.getCancellationReason() != null)
			return false;
		if(this.getCancellationReason() != null && compareObj.getCancellationReason() == null)
			return false;
		if(this.getCancellationReason() != null && compareObj.getCancellationReason() != null)
			if(!this.getCancellationReason().equals(compareObj.getCancellationReason()))
				return false;
		if(this.getCancellationDateTime() == null && compareObj.getCancellationDateTime() != null)
			return false;
		if(this.getCancellationDateTime() != null && compareObj.getCancellationDateTime() == null)
			return false;
		if(this.getCancellationDateTime() != null && compareObj.getCancellationDateTime() != null)
			return this.getCancellationDateTime().equals(compareObj.getCancellationDateTime());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.cancelledby == null)
			listOfErrors.add("Cancelled By is mandatory");
		if(this.cancellationreason == null)
			listOfErrors.add("Cancellation Reason is mandatory");
		if(this.cancellationdatetime == null)
			listOfErrors.add("Cancellation Date is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CancelDetailsVo clone = new CancelDetailsVo();
		
		clone.cancelledby = this.cancelledby;
		if(this.cancellationreason == null)
			clone.cancellationreason = null;
		else
			clone.cancellationreason = (ims.pci.vo.lookups.VaccineCancellationReason)this.cancellationreason.clone();
		if(this.cancellationdatetime == null)
			clone.cancellationdatetime = null;
		else
			clone.cancellationdatetime = (ims.framework.utils.DateTime)this.cancellationdatetime.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CancelDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CancelDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		CancelDetailsVo compareObj = (CancelDetailsVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getCancelledBy() == null && compareObj.getCancelledBy() != null)
				return -1;
			if(this.getCancelledBy() != null && compareObj.getCancelledBy() == null)
				return 1;
			if(this.getCancelledBy() != null && compareObj.getCancelledBy() != null)
				retVal = this.getCancelledBy().compareTo(compareObj.getCancelledBy());
		}
		if (retVal == 0)
		{
			if(this.getCancellationReason() == null && compareObj.getCancellationReason() != null)
				return -1;
			if(this.getCancellationReason() != null && compareObj.getCancellationReason() == null)
				return 1;
			if(this.getCancellationReason() != null && compareObj.getCancellationReason() != null)
				retVal = this.getCancellationReason().compareTo(compareObj.getCancellationReason());
		}
		if (retVal == 0)
		{
			if(this.getCancellationDateTime() == null && compareObj.getCancellationDateTime() != null)
				return -1;
			if(this.getCancellationDateTime() != null && compareObj.getCancellationDateTime() == null)
				return 1;
			if(this.getCancellationDateTime() != null && compareObj.getCancellationDateTime() != null)
				retVal = this.getCancellationDateTime().compareTo(compareObj.getCancellationDateTime());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.cancelledby != null)
			count++;
		if(this.cancellationreason != null)
			count++;
		if(this.cancellationdatetime != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 3;
	}
	protected ims.core.resource.people.vo.MemberOfStaffRefVo cancelledby;
	protected ims.pci.vo.lookups.VaccineCancellationReason cancellationreason;
	protected ims.framework.utils.DateTime cancellationdatetime;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
