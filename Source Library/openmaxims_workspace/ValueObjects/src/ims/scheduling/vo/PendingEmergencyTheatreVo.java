//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.PendingEmergencyTheatre business object (ID: 1090100024).
 */
public class PendingEmergencyTheatreVo extends ims.scheduling.vo.PendingEmergencyTheatreRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PendingEmergencyTheatreVo()
	{
	}
	public PendingEmergencyTheatreVo(Integer id, int version)
	{
		super(id, version);
	}
	public PendingEmergencyTheatreVo(ims.scheduling.vo.beans.PendingEmergencyTheatreVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.currentstatus = bean.getCurrentStatus() == null ? null : ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus.buildLookup(bean.getCurrentStatus());
		this.wasinpatientwhenaddedtolist = bean.getWasInpatientWhenAddedToList();
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo();
		this.urgencycategory = bean.getUrgencyCategory() == null ? null : ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory.buildLookup(bean.getUrgencyCategory());
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo();
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.proceduredetails = bean.getProcedureDetails();
		this.isendoscopyprocedure = bean.getIsEndoscopyProcedure();
		this.surgerytimemins = bean.getSurgeryTimeMins();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.currentlocationofpatient = bean.getCurrentLocationOfPatient() == null ? null : ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation.buildLookup(bean.getCurrentLocationOfPatient());
		this.expectedhospital = bean.getExpectedHospital() == null ? null : bean.getExpectedHospital().buildVo();
		this.expectedward = bean.getExpectedWard() == null ? null : bean.getExpectedWard().buildVo();
		this.expecteddatetime = bean.getExpectedDateTime() == null ? null : bean.getExpectedDateTime().buildDateTime();
		this.theatreappointmentbooked = bean.getTheatreAppointmentBooked() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointmentBooked().getId()), bean.getTheatreAppointmentBooked().getVersion());
		this.removedby = bean.getRemovedBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getRemovedBy().getId()), bean.getRemovedBy().getVersion());
		this.removalreason = bean.getRemovalReason() == null ? null : ims.scheduling.vo.lookups.PendingEmergencyTheatreRemovalReason.buildLookup(bean.getRemovalReason());
		this.removaldatetime = bean.getRemovalDateTime() == null ? null : bean.getRemovalDateTime().buildDateTime();
		this.isendoscopysecondprocedure = bean.getIsEndoscopySecondProcedure();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.PendingEmergencyTheatreVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.currentstatus = bean.getCurrentStatus() == null ? null : ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus.buildLookup(bean.getCurrentStatus());
		this.wasinpatientwhenaddedtolist = bean.getWasInpatientWhenAddedToList();
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo(map);
		this.urgencycategory = bean.getUrgencyCategory() == null ? null : ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory.buildLookup(bean.getUrgencyCategory());
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo(map);
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo(map);
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.proceduredetails = bean.getProcedureDetails();
		this.isendoscopyprocedure = bean.getIsEndoscopyProcedure();
		this.surgerytimemins = bean.getSurgeryTimeMins();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.currentlocationofpatient = bean.getCurrentLocationOfPatient() == null ? null : ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation.buildLookup(bean.getCurrentLocationOfPatient());
		this.expectedhospital = bean.getExpectedHospital() == null ? null : bean.getExpectedHospital().buildVo(map);
		this.expectedward = bean.getExpectedWard() == null ? null : bean.getExpectedWard().buildVo(map);
		this.expecteddatetime = bean.getExpectedDateTime() == null ? null : bean.getExpectedDateTime().buildDateTime();
		this.theatreappointmentbooked = bean.getTheatreAppointmentBooked() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointmentBooked().getId()), bean.getTheatreAppointmentBooked().getVersion());
		this.removedby = bean.getRemovedBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getRemovedBy().getId()), bean.getRemovedBy().getVersion());
		this.removalreason = bean.getRemovalReason() == null ? null : ims.scheduling.vo.lookups.PendingEmergencyTheatreRemovalReason.buildLookup(bean.getRemovalReason());
		this.removaldatetime = bean.getRemovalDateTime() == null ? null : bean.getRemovalDateTime().buildDateTime();
		this.isendoscopysecondprocedure = bean.getIsEndoscopySecondProcedure();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.PendingEmergencyTheatreVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.PendingEmergencyTheatreVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.PendingEmergencyTheatreVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("CATSREFERRAL"))
			return getCatsReferral();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("WASINPATIENTWHENADDEDTOLIST"))
			return getWasInpatientWhenAddedToList();
		if(fieldName.equals("RESPONSIBLEHCP"))
			return getResponsibleHCP();
		if(fieldName.equals("URGENCYCATEGORY"))
			return getUrgencyCategory();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("PRIMARYPROCEDURE"))
			return getPrimaryProcedure();
		if(fieldName.equals("PROCLATERALITY"))
			return getProcLaterality();
		if(fieldName.equals("SECONDARYPROCEDURE"))
			return getSecondaryProcedure();
		if(fieldName.equals("SECONDARYPROCLATERALITY"))
			return getSecondaryProcLaterality();
		if(fieldName.equals("PROCEDUREDETAILS"))
			return getProcedureDetails();
		if(fieldName.equals("ISENDOSCOPYPROCEDURE"))
			return getIsEndoscopyProcedure();
		if(fieldName.equals("SURGERYTIMEMINS"))
			return getSurgeryTimeMins();
		if(fieldName.equals("THEATRETYPE"))
			return getTheatreType();
		if(fieldName.equals("CURRENTLOCATIONOFPATIENT"))
			return getCurrentLocationOfPatient();
		if(fieldName.equals("EXPECTEDHOSPITAL"))
			return getExpectedHospital();
		if(fieldName.equals("EXPECTEDWARD"))
			return getExpectedWard();
		if(fieldName.equals("EXPECTEDDATETIME"))
			return getExpectedDateTime();
		if(fieldName.equals("THEATREAPPOINTMENTBOOKED"))
			return getTheatreAppointmentBooked();
		if(fieldName.equals("REMOVEDBY"))
			return getRemovedBy();
		if(fieldName.equals("REMOVALREASON"))
			return getRemovalReason();
		if(fieldName.equals("REMOVALDATETIME"))
			return getRemovalDateTime();
		if(fieldName.equals("ISENDOSCOPYSECONDPROCEDURE"))
			return getIsEndoscopySecondProcedure();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getCatsReferralIsNotNull()
	{
		return this.catsreferral != null;
	}
	public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
	{
		return this.catsreferral;
	}
	public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
	{
		this.isValidated = false;
		this.catsreferral = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getWasInpatientWhenAddedToListIsNotNull()
	{
		return this.wasinpatientwhenaddedtolist != null;
	}
	public Boolean getWasInpatientWhenAddedToList()
	{
		return this.wasinpatientwhenaddedtolist;
	}
	public void setWasInpatientWhenAddedToList(Boolean value)
	{
		this.isValidated = false;
		this.wasinpatientwhenaddedtolist = value;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.vo.Hcp getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.vo.Hcp value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean getUrgencyCategoryIsNotNull()
	{
		return this.urgencycategory != null;
	}
	public ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory getUrgencyCategory()
	{
		return this.urgencycategory;
	}
	public void setUrgencyCategory(ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory value)
	{
		this.isValidated = false;
		this.urgencycategory = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceLiteVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getPrimaryProcedureIsNotNull()
	{
		return this.primaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getPrimaryProcedure()
	{
		return this.primaryprocedure;
	}
	public void setPrimaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.primaryprocedure = value;
	}
	public boolean getProcLateralityIsNotNull()
	{
		return this.proclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getProcLaterality()
	{
		return this.proclaterality;
	}
	public void setProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.proclaterality = value;
	}
	public boolean getSecondaryProcedureIsNotNull()
	{
		return this.secondaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getSecondaryProcedure()
	{
		return this.secondaryprocedure;
	}
	public void setSecondaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.secondaryprocedure = value;
	}
	public boolean getSecondaryProcLateralityIsNotNull()
	{
		return this.secondaryproclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getSecondaryProcLaterality()
	{
		return this.secondaryproclaterality;
	}
	public void setSecondaryProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.secondaryproclaterality = value;
	}
	public boolean getProcedureDetailsIsNotNull()
	{
		return this.proceduredetails != null;
	}
	public String getProcedureDetails()
	{
		return this.proceduredetails;
	}
	public static int getProcedureDetailsMaxLength()
	{
		return 255;
	}
	public void setProcedureDetails(String value)
	{
		this.isValidated = false;
		this.proceduredetails = value;
	}
	public boolean getIsEndoscopyProcedureIsNotNull()
	{
		return this.isendoscopyprocedure != null;
	}
	public Boolean getIsEndoscopyProcedure()
	{
		return this.isendoscopyprocedure;
	}
	public void setIsEndoscopyProcedure(Boolean value)
	{
		this.isValidated = false;
		this.isendoscopyprocedure = value;
	}
	public boolean getSurgeryTimeMinsIsNotNull()
	{
		return this.surgerytimemins != null;
	}
	public Integer getSurgeryTimeMins()
	{
		return this.surgerytimemins;
	}
	public void setSurgeryTimeMins(Integer value)
	{
		this.isValidated = false;
		this.surgerytimemins = value;
	}
	public boolean getTheatreTypeIsNotNull()
	{
		return this.theatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getTheatreType()
	{
		return this.theatretype;
	}
	public void setTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.theatretype = value;
	}
	public boolean getCurrentLocationOfPatientIsNotNull()
	{
		return this.currentlocationofpatient != null;
	}
	public ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation getCurrentLocationOfPatient()
	{
		return this.currentlocationofpatient;
	}
	public void setCurrentLocationOfPatient(ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation value)
	{
		this.isValidated = false;
		this.currentlocationofpatient = value;
	}
	public boolean getExpectedHospitalIsNotNull()
	{
		return this.expectedhospital != null;
	}
	public ims.core.vo.LocationLiteVo getExpectedHospital()
	{
		return this.expectedhospital;
	}
	public void setExpectedHospital(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.expectedhospital = value;
	}
	public boolean getExpectedWardIsNotNull()
	{
		return this.expectedward != null;
	}
	public ims.core.vo.LocationLiteVo getExpectedWard()
	{
		return this.expectedward;
	}
	public void setExpectedWard(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.expectedward = value;
	}
	public boolean getExpectedDateTimeIsNotNull()
	{
		return this.expecteddatetime != null;
	}
	public ims.framework.utils.DateTime getExpectedDateTime()
	{
		return this.expecteddatetime;
	}
	public void setExpectedDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.expecteddatetime = value;
	}
	public boolean getTheatreAppointmentBookedIsNotNull()
	{
		return this.theatreappointmentbooked != null;
	}
	public ims.scheduling.vo.Booking_AppointmentRefVo getTheatreAppointmentBooked()
	{
		return this.theatreappointmentbooked;
	}
	public void setTheatreAppointmentBooked(ims.scheduling.vo.Booking_AppointmentRefVo value)
	{
		this.isValidated = false;
		this.theatreappointmentbooked = value;
	}
	public boolean getRemovedByIsNotNull()
	{
		return this.removedby != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getRemovedBy()
	{
		return this.removedby;
	}
	public void setRemovedBy(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.removedby = value;
	}
	public boolean getRemovalReasonIsNotNull()
	{
		return this.removalreason != null;
	}
	public ims.scheduling.vo.lookups.PendingEmergencyTheatreRemovalReason getRemovalReason()
	{
		return this.removalreason;
	}
	public void setRemovalReason(ims.scheduling.vo.lookups.PendingEmergencyTheatreRemovalReason value)
	{
		this.isValidated = false;
		this.removalreason = value;
	}
	public boolean getRemovalDateTimeIsNotNull()
	{
		return this.removaldatetime != null;
	}
	public ims.framework.utils.DateTime getRemovalDateTime()
	{
		return this.removaldatetime;
	}
	public void setRemovalDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.removaldatetime = value;
	}
	public boolean getIsEndoscopySecondProcedureIsNotNull()
	{
		return this.isendoscopysecondprocedure != null;
	}
	public Boolean getIsEndoscopySecondProcedure()
	{
		return this.isendoscopysecondprocedure;
	}
	public void setIsEndoscopySecondProcedure(Boolean value)
	{
		this.isValidated = false;
		this.isendoscopysecondprocedure = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.catsreferral == null)
			listOfErrors.add("Cats Referral is mandatory");
		if(this.currentstatus == null)
			listOfErrors.add("CurrentStatus is mandatory");
		if(this.wasinpatientwhenaddedtolist == null)
			listOfErrors.add("wasInpatientWhenAddedToList is mandatory");
		if(this.responsiblehcp == null)
			listOfErrors.add("Responsible HCP is mandatory");
		if(this.urgencycategory == null)
			listOfErrors.add("Urgency Category is mandatory");
		if(this.service == null)
			listOfErrors.add("Service is mandatory");
		if(this.primaryprocedure == null)
			listOfErrors.add("Primary Procedure is mandatory");
		if(this.proceduredetails != null)
			if(this.proceduredetails.length() > 255)
				listOfErrors.add("The length of the field [proceduredetails] in the value object [ims.scheduling.vo.PendingEmergencyTheatreVo] is too big. It should be less or equal to 255");
		if(this.isendoscopyprocedure == null)
			listOfErrors.add("isEndoscopyProcedure is mandatory");
		if(this.surgerytimemins == null)
			listOfErrors.add("Surgery Time is mandatory");
		if(this.isendoscopysecondprocedure == null)
			listOfErrors.add("isEndoscopySecondProcedure is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PendingEmergencyTheatreVo clone = new PendingEmergencyTheatreVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.catsreferral = this.catsreferral;
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus)this.currentstatus.clone();
		clone.wasinpatientwhenaddedtolist = this.wasinpatientwhenaddedtolist;
		if(this.responsiblehcp == null)
			clone.responsiblehcp = null;
		else
			clone.responsiblehcp = (ims.core.vo.Hcp)this.responsiblehcp.clone();
		if(this.urgencycategory == null)
			clone.urgencycategory = null;
		else
			clone.urgencycategory = (ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)this.urgencycategory.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		if(this.primaryprocedure == null)
			clone.primaryprocedure = null;
		else
			clone.primaryprocedure = (ims.core.vo.ProcedureLiteVo)this.primaryprocedure.clone();
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		if(this.secondaryprocedure == null)
			clone.secondaryprocedure = null;
		else
			clone.secondaryprocedure = (ims.core.vo.ProcedureLiteVo)this.secondaryprocedure.clone();
		if(this.secondaryproclaterality == null)
			clone.secondaryproclaterality = null;
		else
			clone.secondaryproclaterality = (ims.core.vo.lookups.LateralityLRB)this.secondaryproclaterality.clone();
		clone.proceduredetails = this.proceduredetails;
		clone.isendoscopyprocedure = this.isendoscopyprocedure;
		clone.surgerytimemins = this.surgerytimemins;
		if(this.theatretype == null)
			clone.theatretype = null;
		else
			clone.theatretype = (ims.scheduling.vo.lookups.TheatreType)this.theatretype.clone();
		if(this.currentlocationofpatient == null)
			clone.currentlocationofpatient = null;
		else
			clone.currentlocationofpatient = (ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation)this.currentlocationofpatient.clone();
		if(this.expectedhospital == null)
			clone.expectedhospital = null;
		else
			clone.expectedhospital = (ims.core.vo.LocationLiteVo)this.expectedhospital.clone();
		if(this.expectedward == null)
			clone.expectedward = null;
		else
			clone.expectedward = (ims.core.vo.LocationLiteVo)this.expectedward.clone();
		if(this.expecteddatetime == null)
			clone.expecteddatetime = null;
		else
			clone.expecteddatetime = (ims.framework.utils.DateTime)this.expecteddatetime.clone();
		clone.theatreappointmentbooked = this.theatreappointmentbooked;
		clone.removedby = this.removedby;
		if(this.removalreason == null)
			clone.removalreason = null;
		else
			clone.removalreason = (ims.scheduling.vo.lookups.PendingEmergencyTheatreRemovalReason)this.removalreason.clone();
		if(this.removaldatetime == null)
			clone.removaldatetime = null;
		else
			clone.removaldatetime = (ims.framework.utils.DateTime)this.removaldatetime.clone();
		clone.isendoscopysecondprocedure = this.isendoscopysecondprocedure;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PendingEmergencyTheatreVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PendingEmergencyTheatreVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PendingEmergencyTheatreVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PendingEmergencyTheatreVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.catsreferral != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.wasinpatientwhenaddedtolist != null)
			count++;
		if(this.responsiblehcp != null)
			count++;
		if(this.urgencycategory != null)
			count++;
		if(this.service != null)
			count++;
		if(this.primaryprocedure != null)
			count++;
		if(this.proclaterality != null)
			count++;
		if(this.secondaryprocedure != null)
			count++;
		if(this.secondaryproclaterality != null)
			count++;
		if(this.proceduredetails != null)
			count++;
		if(this.isendoscopyprocedure != null)
			count++;
		if(this.surgerytimemins != null)
			count++;
		if(this.theatretype != null)
			count++;
		if(this.currentlocationofpatient != null)
			count++;
		if(this.expectedhospital != null)
			count++;
		if(this.expectedward != null)
			count++;
		if(this.expecteddatetime != null)
			count++;
		if(this.theatreappointmentbooked != null)
			count++;
		if(this.removedby != null)
			count++;
		if(this.removalreason != null)
			count++;
		if(this.removaldatetime != null)
			count++;
		if(this.isendoscopysecondprocedure != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 24;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.RefMan.vo.CatsReferralRefVo catsreferral;
	protected ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus currentstatus;
	protected Boolean wasinpatientwhenaddedtolist;
	protected ims.core.vo.Hcp responsiblehcp;
	protected ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory urgencycategory;
	protected ims.core.vo.ServiceLiteVo service;
	protected ims.core.vo.ProcedureLiteVo primaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB proclaterality;
	protected ims.core.vo.ProcedureLiteVo secondaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB secondaryproclaterality;
	protected String proceduredetails;
	protected Boolean isendoscopyprocedure;
	protected Integer surgerytimemins;
	protected ims.scheduling.vo.lookups.TheatreType theatretype;
	protected ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation currentlocationofpatient;
	protected ims.core.vo.LocationLiteVo expectedhospital;
	protected ims.core.vo.LocationLiteVo expectedward;
	protected ims.framework.utils.DateTime expecteddatetime;
	protected ims.scheduling.vo.Booking_AppointmentRefVo theatreappointmentbooked;
	protected ims.core.resource.people.vo.MemberOfStaffRefVo removedby;
	protected ims.scheduling.vo.lookups.PendingEmergencyTheatreRemovalReason removalreason;
	protected ims.framework.utils.DateTime removaldatetime;
	protected Boolean isendoscopysecondprocedure;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
