//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Booking_Appointment business object (ID: 1055100007).
 */
public class Booking_AppointmentVo extends ims.scheduling.vo.Booking_AppointmentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public Booking_AppointmentVo()
	{
	}
	public Booking_AppointmentVo(Integer id, int version)
	{
		super(id, version);
	}
	public Booking_AppointmentVo(ims.scheduling.vo.beans.Booking_AppointmentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.apptendtime = bean.getApptEndTime() == null ? null : bean.getApptEndTime().buildTime();
		this.apptstatus = bean.getApptStatus() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatus());
		this.apptstatusreas = bean.getApptStatusReas() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatusReas());
		this.apptstatushistory = ims.scheduling.vo.Appointment_StatusVoCollection.buildFromBeanCollection(bean.getApptStatusHistory());
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo();
		this.sessionslot = bean.getSessionSlot() == null ? null : bean.getSessionSlot().buildVo();
		this.priority = bean.getPriority() == null ? null : ims.scheduling.vo.lookups.SchedulingPriority.buildLookup(bean.getPriority());
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo();
		this.iscabbooking = bean.getIsCABBooking();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.requiresrebook = bean.getRequiresRebook();
		this.earliestoffereddate = bean.getEarliestOfferedDate() == null ? null : bean.getEarliestOfferedDate().buildDate();
		this.journey = bean.getJourney() == null ? null : bean.getJourney().buildVo();
		this.event = bean.getEvent() == null ? null : bean.getEvent().buildVo();
		this.orderinvestigation = bean.getOrderInvestigation() == null ? null : bean.getOrderInvestigation().buildVo();
		this.currentstatusrecord = bean.getCurrentStatusRecord() == null ? null : bean.getCurrentStatusRecord().buildVo();
		this.transporttype = bean.getTransportType() == null ? null : ims.scheduling.vo.lookups.ApptTransportType.buildLookup(bean.getTransportType());
		this.istransportrequired = bean.getIsTransportRequired();
		this.istransportbooked = bean.getIsTransportBooked();
		this.outcome = bean.getOutcome() == null ? null : ims.scheduling.vo.lookups.ApptOutcome.buildLookup(bean.getOutcome());
		this.comments = bean.getComments();
		this.theatrebooking = bean.getTheatreBooking() == null ? null : bean.getTheatreBooking().buildVo();
		this.arrivaltime = bean.getArrivalTime() == null ? null : bean.getArrivalTime().buildTime();
		this.seentime = bean.getSeenTime() == null ? null : bean.getSeenTime().buildTime();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.appttrackingstatushistory = ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection.buildFromBeanCollection(bean.getApptTrackingStatusHistory());
		this.dummycolour = bean.getDummyColour() == null ? null : bean.getDummyColour().buildColor();
		this.wasreviewed = bean.getWasReviewed();
		this.seenby = bean.getSeenBy() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getSeenBy().getId()), bean.getSeenBy().getVersion());
		this.outcomecomments = bean.getOutcomeComments();
		this.pathwayclock = bean.getPathwayClock() == null ? null : new ims.pathways.vo.PathwayClockRefVo(new Integer(bean.getPathwayClock().getId()), bean.getPathwayClock().getVersion());
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
		this.category = bean.getCategory() == null ? null : ims.RefMan.vo.lookups.CatsReferralCategory.buildLookup(bean.getCategory());
		this.numprovidercancellations = bean.getNumProviderCancellations();
		this.wasprinted = bean.getWasPrinted();
		this.bookingletter = bean.getBookingLetter() == null ? null : bean.getBookingLetter().buildVo();
		this.numpatientcancellations = bean.getNumPatientCancellations();
		this.firstapptkpidate = bean.getFirstApptKPIDate() == null ? null : bean.getFirstApptKPIDate().buildDate();
		this.rttbreachkpidate = bean.getRTTBreachKPIDate() == null ? null : bean.getRTTBreachKPIDate().buildDate();
		this.reasonforbreachingfirstapptkpi = bean.getReasonForBreachingFirstApptKPI() == null ? null : ims.core.vo.lookups.ReasonForBreachingFirstApptKPI.buildLookup(bean.getReasonForBreachingFirstApptKPI());
		this.commentsforbreachingfirstapptkpi = bean.getCommentsForBreachingFirstApptKPI();
		this.date28dayrulebreach = bean.getDate28DayRuleBreach() == null ? null : bean.getDate28DayRuleBreach().buildDate();
		this.donotmove = bean.getDoNotMove();
		this.linkedappointments = ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection.buildFromBeanCollection(bean.getLinkedAppointments());
		this.linkedapptstobecancelled = ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection.buildFromBeanCollection(bean.getLinkedApptsToBeCancelled());
		this.day28breachreason = bean.getDay28BreachReason() == null ? null : ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason.buildLookup(bean.getDay28BreachReason());
		this.day28breachcomment = bean.getDay28BreachComment();
		this.parentchildslot = bean.getParentChildSlot() == null ? null : bean.getParentChildSlot().buildVo();
		this.isflexibleappointment = bean.getIsFlexibleAppointment();
		this.iswardattendance = bean.getIsWardAttendance();
		this.servicefunction = bean.getServiceFunction() == null ? null : bean.getServiceFunction().buildVo();
		this.firstconsultationactivity = bean.getFirstConsultationActivity();
		this.electivelist = bean.getElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getElectiveList().getId()), bean.getElectiveList().getVersion());
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientCategory());
		this.apptbookedonsameday = bean.getApptBookedOnSameDay();
		this.wasapptcommunicated = bean.getWasApptCommunicated();
		this.isdisplaced = bean.getIsDisplaced();
		this.listownerbooked = bean.getListOwnerBooked() == null ? null : bean.getListOwnerBooked().buildVo();
		this.outcomedatetime = bean.getOutcomeDateTime() == null ? null : bean.getOutcomeDateTime().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.Booking_AppointmentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.apptendtime = bean.getApptEndTime() == null ? null : bean.getApptEndTime().buildTime();
		this.apptstatus = bean.getApptStatus() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatus());
		this.apptstatusreas = bean.getApptStatusReas() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatusReas());
		this.apptstatushistory = ims.scheduling.vo.Appointment_StatusVoCollection.buildFromBeanCollection(bean.getApptStatusHistory());
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo(map);
		this.sessionslot = bean.getSessionSlot() == null ? null : bean.getSessionSlot().buildVo(map);
		this.priority = bean.getPriority() == null ? null : ims.scheduling.vo.lookups.SchedulingPriority.buildLookup(bean.getPriority());
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo(map);
		this.iscabbooking = bean.getIsCABBooking();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.requiresrebook = bean.getRequiresRebook();
		this.earliestoffereddate = bean.getEarliestOfferedDate() == null ? null : bean.getEarliestOfferedDate().buildDate();
		this.journey = bean.getJourney() == null ? null : bean.getJourney().buildVo(map);
		this.event = bean.getEvent() == null ? null : bean.getEvent().buildVo(map);
		this.orderinvestigation = bean.getOrderInvestigation() == null ? null : bean.getOrderInvestigation().buildVo(map);
		this.currentstatusrecord = bean.getCurrentStatusRecord() == null ? null : bean.getCurrentStatusRecord().buildVo(map);
		this.transporttype = bean.getTransportType() == null ? null : ims.scheduling.vo.lookups.ApptTransportType.buildLookup(bean.getTransportType());
		this.istransportrequired = bean.getIsTransportRequired();
		this.istransportbooked = bean.getIsTransportBooked();
		this.outcome = bean.getOutcome() == null ? null : ims.scheduling.vo.lookups.ApptOutcome.buildLookup(bean.getOutcome());
		this.comments = bean.getComments();
		this.theatrebooking = bean.getTheatreBooking() == null ? null : bean.getTheatreBooking().buildVo(map);
		this.arrivaltime = bean.getArrivalTime() == null ? null : bean.getArrivalTime().buildTime();
		this.seentime = bean.getSeenTime() == null ? null : bean.getSeenTime().buildTime();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.appttrackingstatushistory = ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection.buildFromBeanCollection(bean.getApptTrackingStatusHistory());
		this.dummycolour = bean.getDummyColour() == null ? null : bean.getDummyColour().buildColor();
		this.wasreviewed = bean.getWasReviewed();
		this.seenby = bean.getSeenBy() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getSeenBy().getId()), bean.getSeenBy().getVersion());
		this.outcomecomments = bean.getOutcomeComments();
		this.pathwayclock = bean.getPathwayClock() == null ? null : new ims.pathways.vo.PathwayClockRefVo(new Integer(bean.getPathwayClock().getId()), bean.getPathwayClock().getVersion());
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
		this.category = bean.getCategory() == null ? null : ims.RefMan.vo.lookups.CatsReferralCategory.buildLookup(bean.getCategory());
		this.numprovidercancellations = bean.getNumProviderCancellations();
		this.wasprinted = bean.getWasPrinted();
		this.bookingletter = bean.getBookingLetter() == null ? null : bean.getBookingLetter().buildVo(map);
		this.numpatientcancellations = bean.getNumPatientCancellations();
		this.firstapptkpidate = bean.getFirstApptKPIDate() == null ? null : bean.getFirstApptKPIDate().buildDate();
		this.rttbreachkpidate = bean.getRTTBreachKPIDate() == null ? null : bean.getRTTBreachKPIDate().buildDate();
		this.reasonforbreachingfirstapptkpi = bean.getReasonForBreachingFirstApptKPI() == null ? null : ims.core.vo.lookups.ReasonForBreachingFirstApptKPI.buildLookup(bean.getReasonForBreachingFirstApptKPI());
		this.commentsforbreachingfirstapptkpi = bean.getCommentsForBreachingFirstApptKPI();
		this.date28dayrulebreach = bean.getDate28DayRuleBreach() == null ? null : bean.getDate28DayRuleBreach().buildDate();
		this.donotmove = bean.getDoNotMove();
		this.linkedappointments = ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection.buildFromBeanCollection(bean.getLinkedAppointments());
		this.linkedapptstobecancelled = ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection.buildFromBeanCollection(bean.getLinkedApptsToBeCancelled());
		this.day28breachreason = bean.getDay28BreachReason() == null ? null : ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason.buildLookup(bean.getDay28BreachReason());
		this.day28breachcomment = bean.getDay28BreachComment();
		this.parentchildslot = bean.getParentChildSlot() == null ? null : bean.getParentChildSlot().buildVo(map);
		this.isflexibleappointment = bean.getIsFlexibleAppointment();
		this.iswardattendance = bean.getIsWardAttendance();
		this.servicefunction = bean.getServiceFunction() == null ? null : bean.getServiceFunction().buildVo(map);
		this.firstconsultationactivity = bean.getFirstConsultationActivity();
		this.electivelist = bean.getElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getElectiveList().getId()), bean.getElectiveList().getVersion());
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientCategory());
		this.apptbookedonsameday = bean.getApptBookedOnSameDay();
		this.wasapptcommunicated = bean.getWasApptCommunicated();
		this.isdisplaced = bean.getIsDisplaced();
		this.listownerbooked = bean.getListOwnerBooked() == null ? null : bean.getListOwnerBooked().buildVo(map);
		this.outcomedatetime = bean.getOutcomeDateTime() == null ? null : bean.getOutcomeDateTime().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.Booking_AppointmentVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.Booking_AppointmentVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.Booking_AppointmentVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("APPOINTMENTDATE"))
			return getAppointmentDate();
		if(fieldName.equals("APPTSTARTTIME"))
			return getApptStartTime();
		if(fieldName.equals("APPTENDTIME"))
			return getApptEndTime();
		if(fieldName.equals("APPTSTATUS"))
			return getApptStatus();
		if(fieldName.equals("APPTSTATUSREAS"))
			return getApptStatusReas();
		if(fieldName.equals("APPTSTATUSHISTORY"))
			return getApptStatusHistory();
		if(fieldName.equals("SESSION"))
			return getSession();
		if(fieldName.equals("SESSIONSLOT"))
			return getSessionSlot();
		if(fieldName.equals("PRIORITY"))
			return getPriority();
		if(fieldName.equals("ACTIVITY"))
			return getActivity();
		if(fieldName.equals("ISCABBOOKING"))
			return getIsCABBooking();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("REQUIRESREBOOK"))
			return getRequiresRebook();
		if(fieldName.equals("EARLIESTOFFEREDDATE"))
			return getEarliestOfferedDate();
		if(fieldName.equals("JOURNEY"))
			return getJourney();
		if(fieldName.equals("EVENT"))
			return getEvent();
		if(fieldName.equals("ORDERINVESTIGATION"))
			return getOrderInvestigation();
		if(fieldName.equals("CURRENTSTATUSRECORD"))
			return getCurrentStatusRecord();
		if(fieldName.equals("TRANSPORTTYPE"))
			return getTransportType();
		if(fieldName.equals("ISTRANSPORTREQUIRED"))
			return getIsTransportRequired();
		if(fieldName.equals("ISTRANSPORTBOOKED"))
			return getIsTransportBooked();
		if(fieldName.equals("OUTCOME"))
			return getOutcome();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("THEATREBOOKING"))
			return getTheatreBooking();
		if(fieldName.equals("ARRIVALTIME"))
			return getArrivalTime();
		if(fieldName.equals("SEENTIME"))
			return getSeenTime();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("APPTTRACKINGSTATUSHISTORY"))
			return getApptTrackingStatusHistory();
		if(fieldName.equals("DUMMYCOLOUR"))
			return getDummyColour();
		if(fieldName.equals("WASREVIEWED"))
			return getWasReviewed();
		if(fieldName.equals("SEENBY"))
			return getSeenBy();
		if(fieldName.equals("OUTCOMECOMMENTS"))
			return getOutcomeComments();
		if(fieldName.equals("PATHWAYCLOCK"))
			return getPathwayClock();
		if(fieldName.equals("CONSMEDIATYPE"))
			return getConsMediaType();
		if(fieldName.equals("CATEGORY"))
			return getCategory();
		if(fieldName.equals("NUMPROVIDERCANCELLATIONS"))
			return getNumProviderCancellations();
		if(fieldName.equals("WASPRINTED"))
			return getWasPrinted();
		if(fieldName.equals("BOOKINGLETTER"))
			return getBookingLetter();
		if(fieldName.equals("NUMPATIENTCANCELLATIONS"))
			return getNumPatientCancellations();
		if(fieldName.equals("FIRSTAPPTKPIDATE"))
			return getFirstApptKPIDate();
		if(fieldName.equals("RTTBREACHKPIDATE"))
			return getRTTBreachKPIDate();
		if(fieldName.equals("REASONFORBREACHINGFIRSTAPPTKPI"))
			return getReasonForBreachingFirstApptKPI();
		if(fieldName.equals("COMMENTSFORBREACHINGFIRSTAPPTKPI"))
			return getCommentsForBreachingFirstApptKPI();
		if(fieldName.equals("DATE28DAYRULEBREACH"))
			return getDate28DayRuleBreach();
		if(fieldName.equals("DONOTMOVE"))
			return getDoNotMove();
		if(fieldName.equals("LINKEDAPPOINTMENTS"))
			return getLinkedAppointments();
		if(fieldName.equals("LINKEDAPPTSTOBECANCELLED"))
			return getLinkedApptsToBeCancelled();
		if(fieldName.equals("DAY28BREACHREASON"))
			return getDay28BreachReason();
		if(fieldName.equals("DAY28BREACHCOMMENT"))
			return getDay28BreachComment();
		if(fieldName.equals("PARENTCHILDSLOT"))
			return getParentChildSlot();
		if(fieldName.equals("ISFLEXIBLEAPPOINTMENT"))
			return getIsFlexibleAppointment();
		if(fieldName.equals("ISWARDATTENDANCE"))
			return getIsWardAttendance();
		if(fieldName.equals("SERVICEFUNCTION"))
			return getServiceFunction();
		if(fieldName.equals("FIRSTCONSULTATIONACTIVITY"))
			return getFirstConsultationActivity();
		if(fieldName.equals("ELECTIVELIST"))
			return getElectiveList();
		if(fieldName.equals("PATIENTCATEGORY"))
			return getPatientCategory();
		if(fieldName.equals("APPTBOOKEDONSAMEDAY"))
			return getApptBookedOnSameDay();
		if(fieldName.equals("WASAPPTCOMMUNICATED"))
			return getWasApptCommunicated();
		if(fieldName.equals("ISDISPLACED"))
			return getIsDisplaced();
		if(fieldName.equals("LISTOWNERBOOKED"))
			return getListOwnerBooked();
		if(fieldName.equals("OUTCOMEDATETIME"))
			return getOutcomeDateTime();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAppointmentDateIsNotNull()
	{
		return this.appointmentdate != null;
	}
	public ims.framework.utils.Date getAppointmentDate()
	{
		return this.appointmentdate;
	}
	public void setAppointmentDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.appointmentdate = value;
	}
	public boolean getApptStartTimeIsNotNull()
	{
		return this.apptstarttime != null;
	}
	public ims.framework.utils.Time getApptStartTime()
	{
		return this.apptstarttime;
	}
	public void setApptStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.apptstarttime = value;
	}
	public boolean getApptEndTimeIsNotNull()
	{
		return this.apptendtime != null;
	}
	public ims.framework.utils.Time getApptEndTime()
	{
		return this.apptendtime;
	}
	public void setApptEndTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.apptendtime = value;
	}
	public boolean getApptStatusIsNotNull()
	{
		return this.apptstatus != null;
	}
	public ims.scheduling.vo.lookups.Status_Reason getApptStatus()
	{
		return this.apptstatus;
	}
	public void setApptStatus(ims.scheduling.vo.lookups.Status_Reason value)
	{
		this.isValidated = false;
		this.apptstatus = value;
	}
	public boolean getApptStatusReasIsNotNull()
	{
		return this.apptstatusreas != null;
	}
	public ims.scheduling.vo.lookups.Status_Reason getApptStatusReas()
	{
		return this.apptstatusreas;
	}
	public void setApptStatusReas(ims.scheduling.vo.lookups.Status_Reason value)
	{
		this.isValidated = false;
		this.apptstatusreas = value;
	}
	public boolean getApptStatusHistoryIsNotNull()
	{
		return this.apptstatushistory != null;
	}
	public ims.scheduling.vo.Appointment_StatusVoCollection getApptStatusHistory()
	{
		return this.apptstatushistory;
	}
	public void setApptStatusHistory(ims.scheduling.vo.Appointment_StatusVoCollection value)
	{
		this.isValidated = false;
		this.apptstatushistory = value;
	}
	public boolean getSessionIsNotNull()
	{
		return this.session != null;
	}
	public ims.scheduling.vo.SessionIntermediateVo getSession()
	{
		return this.session;
	}
	public void setSession(ims.scheduling.vo.SessionIntermediateVo value)
	{
		this.isValidated = false;
		this.session = value;
	}
	public boolean getSessionSlotIsNotNull()
	{
		return this.sessionslot != null;
	}
	public ims.scheduling.vo.SessionSlotVo getSessionSlot()
	{
		return this.sessionslot;
	}
	public void setSessionSlot(ims.scheduling.vo.SessionSlotVo value)
	{
		this.isValidated = false;
		this.sessionslot = value;
	}
	public boolean getPriorityIsNotNull()
	{
		return this.priority != null;
	}
	public ims.scheduling.vo.lookups.SchedulingPriority getPriority()
	{
		return this.priority;
	}
	public void setPriority(ims.scheduling.vo.lookups.SchedulingPriority value)
	{
		this.isValidated = false;
		this.priority = value;
	}
	public boolean getActivityIsNotNull()
	{
		return this.activity != null;
	}
	public ims.core.vo.ActivitySchedVo getActivity()
	{
		return this.activity;
	}
	public void setActivity(ims.core.vo.ActivitySchedVo value)
	{
		this.isValidated = false;
		this.activity = value;
	}
	public boolean getIsCABBookingIsNotNull()
	{
		return this.iscabbooking != null;
	}
	public Boolean getIsCABBooking()
	{
		return this.iscabbooking;
	}
	public void setIsCABBooking(Boolean value)
	{
		this.isValidated = false;
		this.iscabbooking = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getRequiresRebookIsNotNull()
	{
		return this.requiresrebook != null;
	}
	public Boolean getRequiresRebook()
	{
		return this.requiresrebook;
	}
	public void setRequiresRebook(Boolean value)
	{
		this.isValidated = false;
		this.requiresrebook = value;
	}
	public boolean getEarliestOfferedDateIsNotNull()
	{
		return this.earliestoffereddate != null;
	}
	public ims.framework.utils.Date getEarliestOfferedDate()
	{
		return this.earliestoffereddate;
	}
	public void setEarliestOfferedDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.earliestoffereddate = value;
	}
	public boolean getJourneyIsNotNull()
	{
		return this.journey != null;
	}
	public ims.pathways.vo.PatientJourneyVo getJourney()
	{
		return this.journey;
	}
	public void setJourney(ims.pathways.vo.PatientJourneyVo value)
	{
		this.isValidated = false;
		this.journey = value;
	}
	public boolean getEventIsNotNull()
	{
		return this.event != null;
	}
	public ims.pathways.vo.EventLiteVo getEvent()
	{
		return this.event;
	}
	public void setEvent(ims.pathways.vo.EventLiteVo value)
	{
		this.isValidated = false;
		this.event = value;
	}
	public boolean getOrderInvestigationIsNotNull()
	{
		return this.orderinvestigation != null;
	}
	public ims.ocrr.vo.OrderInvestigationBookingVo getOrderInvestigation()
	{
		return this.orderinvestigation;
	}
	public void setOrderInvestigation(ims.ocrr.vo.OrderInvestigationBookingVo value)
	{
		this.isValidated = false;
		this.orderinvestigation = value;
	}
	public boolean getCurrentStatusRecordIsNotNull()
	{
		return this.currentstatusrecord != null;
	}
	public ims.scheduling.vo.Appointment_StatusVo getCurrentStatusRecord()
	{
		return this.currentstatusrecord;
	}
	public void setCurrentStatusRecord(ims.scheduling.vo.Appointment_StatusVo value)
	{
		this.isValidated = false;
		this.currentstatusrecord = value;
	}
	public boolean getTransportTypeIsNotNull()
	{
		return this.transporttype != null;
	}
	public ims.scheduling.vo.lookups.ApptTransportType getTransportType()
	{
		return this.transporttype;
	}
	public void setTransportType(ims.scheduling.vo.lookups.ApptTransportType value)
	{
		this.isValidated = false;
		this.transporttype = value;
	}
	public boolean getIsTransportRequiredIsNotNull()
	{
		return this.istransportrequired != null;
	}
	public Boolean getIsTransportRequired()
	{
		return this.istransportrequired;
	}
	public void setIsTransportRequired(Boolean value)
	{
		this.isValidated = false;
		this.istransportrequired = value;
	}
	public boolean getIsTransportBookedIsNotNull()
	{
		return this.istransportbooked != null;
	}
	public Boolean getIsTransportBooked()
	{
		return this.istransportbooked;
	}
	public void setIsTransportBooked(Boolean value)
	{
		this.isValidated = false;
		this.istransportbooked = value;
	}
	public boolean getOutcomeIsNotNull()
	{
		return this.outcome != null;
	}
	public ims.scheduling.vo.lookups.ApptOutcome getOutcome()
	{
		return this.outcome;
	}
	public void setOutcome(ims.scheduling.vo.lookups.ApptOutcome value)
	{
		this.isValidated = false;
		this.outcome = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 500;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getTheatreBookingIsNotNull()
	{
		return this.theatrebooking != null;
	}
	public ims.scheduling.vo.TheatreBookingLiteVo getTheatreBooking()
	{
		return this.theatrebooking;
	}
	public void setTheatreBooking(ims.scheduling.vo.TheatreBookingLiteVo value)
	{
		this.isValidated = false;
		this.theatrebooking = value;
	}
	public boolean getArrivalTimeIsNotNull()
	{
		return this.arrivaltime != null;
	}
	public ims.framework.utils.Time getArrivalTime()
	{
		return this.arrivaltime;
	}
	public void setArrivalTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.arrivaltime = value;
	}
	public boolean getSeenTimeIsNotNull()
	{
		return this.seentime != null;
	}
	public ims.framework.utils.Time getSeenTime()
	{
		return this.seentime;
	}
	public void setSeenTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.seentime = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getApptTrackingStatusHistoryIsNotNull()
	{
		return this.appttrackingstatushistory != null;
	}
	public ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection getApptTrackingStatusHistory()
	{
		return this.appttrackingstatushistory;
	}
	public void setApptTrackingStatusHistory(ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection value)
	{
		this.isValidated = false;
		this.appttrackingstatushistory = value;
	}
	public boolean getDummyColourIsNotNull()
	{
		return this.dummycolour != null;
	}
	public ims.framework.utils.Color getDummyColour()
	{
		return this.dummycolour;
	}
	public void setDummyColour(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.dummycolour = value;
	}
	public boolean getWasReviewedIsNotNull()
	{
		return this.wasreviewed != null;
	}
	public Boolean getWasReviewed()
	{
		return this.wasreviewed;
	}
	public void setWasReviewed(Boolean value)
	{
		this.isValidated = false;
		this.wasreviewed = value;
	}
	public boolean getSeenByIsNotNull()
	{
		return this.seenby != null;
	}
	public ims.core.resource.people.vo.HcpRefVo getSeenBy()
	{
		return this.seenby;
	}
	public void setSeenBy(ims.core.resource.people.vo.HcpRefVo value)
	{
		this.isValidated = false;
		this.seenby = value;
	}
	public boolean getOutcomeCommentsIsNotNull()
	{
		return this.outcomecomments != null;
	}
	public String getOutcomeComments()
	{
		return this.outcomecomments;
	}
	public static int getOutcomeCommentsMaxLength()
	{
		return 500;
	}
	public void setOutcomeComments(String value)
	{
		this.isValidated = false;
		this.outcomecomments = value;
	}
	public boolean getPathwayClockIsNotNull()
	{
		return this.pathwayclock != null;
	}
	public ims.pathways.vo.PathwayClockRefVo getPathwayClock()
	{
		return this.pathwayclock;
	}
	public void setPathwayClock(ims.pathways.vo.PathwayClockRefVo value)
	{
		this.isValidated = false;
		this.pathwayclock = value;
	}
	public boolean getConsMediaTypeIsNotNull()
	{
		return this.consmediatype != null;
	}
	public ims.scheduling.vo.lookups.ConsultationMediaType getConsMediaType()
	{
		return this.consmediatype;
	}
	public void setConsMediaType(ims.scheduling.vo.lookups.ConsultationMediaType value)
	{
		this.isValidated = false;
		this.consmediatype = value;
	}
	public boolean getCategoryIsNotNull()
	{
		return this.category != null;
	}
	public ims.RefMan.vo.lookups.CatsReferralCategory getCategory()
	{
		return this.category;
	}
	public void setCategory(ims.RefMan.vo.lookups.CatsReferralCategory value)
	{
		this.isValidated = false;
		this.category = value;
	}
	public boolean getNumProviderCancellationsIsNotNull()
	{
		return this.numprovidercancellations != null;
	}
	public Integer getNumProviderCancellations()
	{
		return this.numprovidercancellations;
	}
	public void setNumProviderCancellations(Integer value)
	{
		this.isValidated = false;
		this.numprovidercancellations = value;
	}
	public boolean getWasPrintedIsNotNull()
	{
		return this.wasprinted != null;
	}
	public Boolean getWasPrinted()
	{
		return this.wasprinted;
	}
	public void setWasPrinted(Boolean value)
	{
		this.isValidated = false;
		this.wasprinted = value;
	}
	public boolean getBookingLetterIsNotNull()
	{
		return this.bookingletter != null;
	}
	public ims.core.vo.PatientDocumentLiteVo getBookingLetter()
	{
		return this.bookingletter;
	}
	public void setBookingLetter(ims.core.vo.PatientDocumentLiteVo value)
	{
		this.isValidated = false;
		this.bookingletter = value;
	}
	public boolean getNumPatientCancellationsIsNotNull()
	{
		return this.numpatientcancellations != null;
	}
	public Integer getNumPatientCancellations()
	{
		return this.numpatientcancellations;
	}
	public void setNumPatientCancellations(Integer value)
	{
		this.isValidated = false;
		this.numpatientcancellations = value;
	}
	public boolean getFirstApptKPIDateIsNotNull()
	{
		return this.firstapptkpidate != null;
	}
	public ims.framework.utils.Date getFirstApptKPIDate()
	{
		return this.firstapptkpidate;
	}
	public void setFirstApptKPIDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.firstapptkpidate = value;
	}
	public boolean getRTTBreachKPIDateIsNotNull()
	{
		return this.rttbreachkpidate != null;
	}
	public ims.framework.utils.Date getRTTBreachKPIDate()
	{
		return this.rttbreachkpidate;
	}
	public void setRTTBreachKPIDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.rttbreachkpidate = value;
	}
	public boolean getReasonForBreachingFirstApptKPIIsNotNull()
	{
		return this.reasonforbreachingfirstapptkpi != null;
	}
	public ims.core.vo.lookups.ReasonForBreachingFirstApptKPI getReasonForBreachingFirstApptKPI()
	{
		return this.reasonforbreachingfirstapptkpi;
	}
	public void setReasonForBreachingFirstApptKPI(ims.core.vo.lookups.ReasonForBreachingFirstApptKPI value)
	{
		this.isValidated = false;
		this.reasonforbreachingfirstapptkpi = value;
	}
	public boolean getCommentsForBreachingFirstApptKPIIsNotNull()
	{
		return this.commentsforbreachingfirstapptkpi != null;
	}
	public String getCommentsForBreachingFirstApptKPI()
	{
		return this.commentsforbreachingfirstapptkpi;
	}
	public static int getCommentsForBreachingFirstApptKPIMaxLength()
	{
		return 1000;
	}
	public void setCommentsForBreachingFirstApptKPI(String value)
	{
		this.isValidated = false;
		this.commentsforbreachingfirstapptkpi = value;
	}
	public boolean getDate28DayRuleBreachIsNotNull()
	{
		return this.date28dayrulebreach != null;
	}
	public ims.framework.utils.Date getDate28DayRuleBreach()
	{
		return this.date28dayrulebreach;
	}
	public void setDate28DayRuleBreach(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.date28dayrulebreach = value;
	}
	public boolean getDoNotMoveIsNotNull()
	{
		return this.donotmove != null;
	}
	public Boolean getDoNotMove()
	{
		return this.donotmove;
	}
	public void setDoNotMove(Boolean value)
	{
		this.isValidated = false;
		this.donotmove = value;
	}
	public boolean getLinkedAppointmentsIsNotNull()
	{
		return this.linkedappointments != null;
	}
	public ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection getLinkedAppointments()
	{
		return this.linkedappointments;
	}
	public void setLinkedAppointments(ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection value)
	{
		this.isValidated = false;
		this.linkedappointments = value;
	}
	public boolean getLinkedApptsToBeCancelledIsNotNull()
	{
		return this.linkedapptstobecancelled != null;
	}
	public ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection getLinkedApptsToBeCancelled()
	{
		return this.linkedapptstobecancelled;
	}
	public void setLinkedApptsToBeCancelled(ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection value)
	{
		this.isValidated = false;
		this.linkedapptstobecancelled = value;
	}
	public boolean getDay28BreachReasonIsNotNull()
	{
		return this.day28breachreason != null;
	}
	public ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason getDay28BreachReason()
	{
		return this.day28breachreason;
	}
	public void setDay28BreachReason(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
	{
		this.isValidated = false;
		this.day28breachreason = value;
	}
	public boolean getDay28BreachCommentIsNotNull()
	{
		return this.day28breachcomment != null;
	}
	public String getDay28BreachComment()
	{
		return this.day28breachcomment;
	}
	public static int getDay28BreachCommentMaxLength()
	{
		return 255;
	}
	public void setDay28BreachComment(String value)
	{
		this.isValidated = false;
		this.day28breachcomment = value;
	}
	public boolean getParentChildSlotIsNotNull()
	{
		return this.parentchildslot != null;
	}
	public ims.scheduling.vo.SessionParentChildSlotForBookingVo getParentChildSlot()
	{
		return this.parentchildslot;
	}
	public void setParentChildSlot(ims.scheduling.vo.SessionParentChildSlotForBookingVo value)
	{
		this.isValidated = false;
		this.parentchildslot = value;
	}
	public boolean getIsFlexibleAppointmentIsNotNull()
	{
		return this.isflexibleappointment != null;
	}
	public Boolean getIsFlexibleAppointment()
	{
		return this.isflexibleappointment;
	}
	public void setIsFlexibleAppointment(Boolean value)
	{
		this.isValidated = false;
		this.isflexibleappointment = value;
	}
	public boolean getIsWardAttendanceIsNotNull()
	{
		return this.iswardattendance != null;
	}
	public Boolean getIsWardAttendance()
	{
		return this.iswardattendance;
	}
	public void setIsWardAttendance(Boolean value)
	{
		this.isValidated = false;
		this.iswardattendance = value;
	}
	public boolean getServiceFunctionIsNotNull()
	{
		return this.servicefunction != null;
	}
	public ims.core.vo.ServiceFunctionLiteVo getServiceFunction()
	{
		return this.servicefunction;
	}
	public void setServiceFunction(ims.core.vo.ServiceFunctionLiteVo value)
	{
		this.isValidated = false;
		this.servicefunction = value;
	}
	public boolean getFirstConsultationActivityIsNotNull()
	{
		return this.firstconsultationactivity != null;
	}
	public Boolean getFirstConsultationActivity()
	{
		return this.firstconsultationactivity;
	}
	public void setFirstConsultationActivity(Boolean value)
	{
		this.isValidated = false;
		this.firstconsultationactivity = value;
	}
	public boolean getElectiveListIsNotNull()
	{
		return this.electivelist != null;
	}
	public ims.RefMan.vo.PatientElectiveListRefVo getElectiveList()
	{
		return this.electivelist;
	}
	public void setElectiveList(ims.RefMan.vo.PatientElectiveListRefVo value)
	{
		this.isValidated = false;
		this.electivelist = value;
	}
	public boolean getPatientCategoryIsNotNull()
	{
		return this.patientcategory != null;
	}
	public ims.core.vo.lookups.PatientStatus getPatientCategory()
	{
		return this.patientcategory;
	}
	public void setPatientCategory(ims.core.vo.lookups.PatientStatus value)
	{
		this.isValidated = false;
		this.patientcategory = value;
	}
	public boolean getApptBookedOnSameDayIsNotNull()
	{
		return this.apptbookedonsameday != null;
	}
	public Boolean getApptBookedOnSameDay()
	{
		return this.apptbookedonsameday;
	}
	public void setApptBookedOnSameDay(Boolean value)
	{
		this.isValidated = false;
		this.apptbookedonsameday = value;
	}
	public boolean getWasApptCommunicatedIsNotNull()
	{
		return this.wasapptcommunicated != null;
	}
	public Boolean getWasApptCommunicated()
	{
		return this.wasapptcommunicated;
	}
	public void setWasApptCommunicated(Boolean value)
	{
		this.isValidated = false;
		this.wasapptcommunicated = value;
	}
	public boolean getIsDisplacedIsNotNull()
	{
		return this.isdisplaced != null;
	}
	public Boolean getIsDisplaced()
	{
		return this.isdisplaced;
	}
	public void setIsDisplaced(Boolean value)
	{
		this.isValidated = false;
		this.isdisplaced = value;
	}
	public boolean getListOwnerBookedIsNotNull()
	{
		return this.listownerbooked != null;
	}
	public ims.core.vo.HcpLiteVo getListOwnerBooked()
	{
		return this.listownerbooked;
	}
	public void setListOwnerBooked(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.listownerbooked = value;
	}
	public boolean getOutcomeDateTimeIsNotNull()
	{
		return this.outcomedatetime != null;
	}
	public ims.framework.utils.DateTime getOutcomeDateTime()
	{
		return this.outcomedatetime;
	}
	public void setOutcomeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.outcomedatetime = value;
	}
	/**
	* CalculateEndTime
	*/
	public static ims.framework.utils.Time calculateEndTime(ims.framework.utils.Time startTime, int duration)
	{
	
		int hour = startTime.getHour();
		int minute = startTime.getMinute();
		int fromValue = (hour *60) + minute;
			  
		int newValue = fromValue + duration;
		int newHour = newValue / 60;
		if( newHour >= 24)
		    newHour = 0;
		int newMinute = newValue % 60;
		String newMinStr = String.valueOf(newMinute);
		if (newMinute < 10)
		  	newMinStr = "0" + newMinStr;
		String newHourStr = String.valueOf(newHour);
		if (newHour < 10)
			newHourStr = "0" + newHourStr;
		return (new ims.framework.utils.Time(new String() + newHourStr + ":" + newMinStr));
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.apptstatushistory != null)
		{
			if(!this.apptstatushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.session != null)
		{
			if(!this.session.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.sessionslot != null)
		{
			if(!this.sessionslot.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.activity != null)
		{
			if(!this.activity.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.journey != null)
		{
			if(!this.journey.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.event != null)
		{
			if(!this.event.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.orderinvestigation != null)
		{
			if(!this.orderinvestigation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatusrecord != null)
		{
			if(!this.currentstatusrecord.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.appttrackingstatushistory != null)
		{
			if(!this.appttrackingstatushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.parentchildslot != null)
		{
			if(!this.parentchildslot.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.apptstatushistory != null)
		{
			String[] listOfOtherErrors = this.apptstatushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.session != null)
		{
			String[] listOfOtherErrors = this.session.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.sessionslot != null)
		{
			String[] listOfOtherErrors = this.sessionslot.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.activity != null)
		{
			String[] listOfOtherErrors = this.activity.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.journey != null)
		{
			String[] listOfOtherErrors = this.journey.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.event != null)
		{
			String[] listOfOtherErrors = this.event.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.orderinvestigation != null)
		{
			String[] listOfOtherErrors = this.orderinvestigation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentstatusrecord != null)
		{
			String[] listOfOtherErrors = this.currentstatusrecord.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.comments != null)
			if(this.comments.length() > 500)
				listOfErrors.add("The length of the field [comments] in the value object [ims.scheduling.vo.Booking_AppointmentVo] is too big. It should be less or equal to 500");
		if(this.appttrackingstatushistory != null)
		{
			String[] listOfOtherErrors = this.appttrackingstatushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.outcomecomments != null)
			if(this.outcomecomments.length() > 500)
				listOfErrors.add("The length of the field [outcomecomments] in the value object [ims.scheduling.vo.Booking_AppointmentVo] is too big. It should be less or equal to 500");
		if(this.commentsforbreachingfirstapptkpi != null)
			if(this.commentsforbreachingfirstapptkpi.length() > 1000)
				listOfErrors.add("The length of the field [commentsforbreachingfirstapptkpi] in the value object [ims.scheduling.vo.Booking_AppointmentVo] is too big. It should be less or equal to 1000");
		if(this.day28breachcomment != null)
			if(this.day28breachcomment.length() > 255)
				listOfErrors.add("The length of the field [day28breachcomment] in the value object [ims.scheduling.vo.Booking_AppointmentVo] is too big. It should be less or equal to 255");
		if(this.parentchildslot != null)
		{
			String[] listOfOtherErrors = this.parentchildslot.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		Booking_AppointmentVo clone = new Booking_AppointmentVo(this.id, this.version);
		
		if(this.appointmentdate == null)
			clone.appointmentdate = null;
		else
			clone.appointmentdate = (ims.framework.utils.Date)this.appointmentdate.clone();
		if(this.apptstarttime == null)
			clone.apptstarttime = null;
		else
			clone.apptstarttime = (ims.framework.utils.Time)this.apptstarttime.clone();
		if(this.apptendtime == null)
			clone.apptendtime = null;
		else
			clone.apptendtime = (ims.framework.utils.Time)this.apptendtime.clone();
		if(this.apptstatus == null)
			clone.apptstatus = null;
		else
			clone.apptstatus = (ims.scheduling.vo.lookups.Status_Reason)this.apptstatus.clone();
		if(this.apptstatusreas == null)
			clone.apptstatusreas = null;
		else
			clone.apptstatusreas = (ims.scheduling.vo.lookups.Status_Reason)this.apptstatusreas.clone();
		if(this.apptstatushistory == null)
			clone.apptstatushistory = null;
		else
			clone.apptstatushistory = (ims.scheduling.vo.Appointment_StatusVoCollection)this.apptstatushistory.clone();
		if(this.session == null)
			clone.session = null;
		else
			clone.session = (ims.scheduling.vo.SessionIntermediateVo)this.session.clone();
		if(this.sessionslot == null)
			clone.sessionslot = null;
		else
			clone.sessionslot = (ims.scheduling.vo.SessionSlotVo)this.sessionslot.clone();
		if(this.priority == null)
			clone.priority = null;
		else
			clone.priority = (ims.scheduling.vo.lookups.SchedulingPriority)this.priority.clone();
		if(this.activity == null)
			clone.activity = null;
		else
			clone.activity = (ims.core.vo.ActivitySchedVo)this.activity.clone();
		clone.iscabbooking = this.iscabbooking;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		clone.requiresrebook = this.requiresrebook;
		if(this.earliestoffereddate == null)
			clone.earliestoffereddate = null;
		else
			clone.earliestoffereddate = (ims.framework.utils.Date)this.earliestoffereddate.clone();
		if(this.journey == null)
			clone.journey = null;
		else
			clone.journey = (ims.pathways.vo.PatientJourneyVo)this.journey.clone();
		if(this.event == null)
			clone.event = null;
		else
			clone.event = (ims.pathways.vo.EventLiteVo)this.event.clone();
		if(this.orderinvestigation == null)
			clone.orderinvestigation = null;
		else
			clone.orderinvestigation = (ims.ocrr.vo.OrderInvestigationBookingVo)this.orderinvestigation.clone();
		if(this.currentstatusrecord == null)
			clone.currentstatusrecord = null;
		else
			clone.currentstatusrecord = (ims.scheduling.vo.Appointment_StatusVo)this.currentstatusrecord.clone();
		if(this.transporttype == null)
			clone.transporttype = null;
		else
			clone.transporttype = (ims.scheduling.vo.lookups.ApptTransportType)this.transporttype.clone();
		clone.istransportrequired = this.istransportrequired;
		clone.istransportbooked = this.istransportbooked;
		if(this.outcome == null)
			clone.outcome = null;
		else
			clone.outcome = (ims.scheduling.vo.lookups.ApptOutcome)this.outcome.clone();
		clone.comments = this.comments;
		if(this.theatrebooking == null)
			clone.theatrebooking = null;
		else
			clone.theatrebooking = (ims.scheduling.vo.TheatreBookingLiteVo)this.theatrebooking.clone();
		if(this.arrivaltime == null)
			clone.arrivaltime = null;
		else
			clone.arrivaltime = (ims.framework.utils.Time)this.arrivaltime.clone();
		if(this.seentime == null)
			clone.seentime = null;
		else
			clone.seentime = (ims.framework.utils.Time)this.seentime.clone();
		clone.carecontext = this.carecontext;
		if(this.appttrackingstatushistory == null)
			clone.appttrackingstatushistory = null;
		else
			clone.appttrackingstatushistory = (ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection)this.appttrackingstatushistory.clone();
		if(this.dummycolour == null)
			clone.dummycolour = null;
		else
			clone.dummycolour = (ims.framework.utils.Color)this.dummycolour.clone();
		clone.wasreviewed = this.wasreviewed;
		clone.seenby = this.seenby;
		clone.outcomecomments = this.outcomecomments;
		clone.pathwayclock = this.pathwayclock;
		if(this.consmediatype == null)
			clone.consmediatype = null;
		else
			clone.consmediatype = (ims.scheduling.vo.lookups.ConsultationMediaType)this.consmediatype.clone();
		if(this.category == null)
			clone.category = null;
		else
			clone.category = (ims.RefMan.vo.lookups.CatsReferralCategory)this.category.clone();
		clone.numprovidercancellations = this.numprovidercancellations;
		clone.wasprinted = this.wasprinted;
		if(this.bookingletter == null)
			clone.bookingletter = null;
		else
			clone.bookingletter = (ims.core.vo.PatientDocumentLiteVo)this.bookingletter.clone();
		clone.numpatientcancellations = this.numpatientcancellations;
		if(this.firstapptkpidate == null)
			clone.firstapptkpidate = null;
		else
			clone.firstapptkpidate = (ims.framework.utils.Date)this.firstapptkpidate.clone();
		if(this.rttbreachkpidate == null)
			clone.rttbreachkpidate = null;
		else
			clone.rttbreachkpidate = (ims.framework.utils.Date)this.rttbreachkpidate.clone();
		if(this.reasonforbreachingfirstapptkpi == null)
			clone.reasonforbreachingfirstapptkpi = null;
		else
			clone.reasonforbreachingfirstapptkpi = (ims.core.vo.lookups.ReasonForBreachingFirstApptKPI)this.reasonforbreachingfirstapptkpi.clone();
		clone.commentsforbreachingfirstapptkpi = this.commentsforbreachingfirstapptkpi;
		if(this.date28dayrulebreach == null)
			clone.date28dayrulebreach = null;
		else
			clone.date28dayrulebreach = (ims.framework.utils.Date)this.date28dayrulebreach.clone();
		clone.donotmove = this.donotmove;
		if(this.linkedappointments == null)
			clone.linkedappointments = null;
		else
			clone.linkedappointments = (ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection)this.linkedappointments.clone();
		if(this.linkedapptstobecancelled == null)
			clone.linkedapptstobecancelled = null;
		else
			clone.linkedapptstobecancelled = (ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection)this.linkedapptstobecancelled.clone();
		if(this.day28breachreason == null)
			clone.day28breachreason = null;
		else
			clone.day28breachreason = (ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason)this.day28breachreason.clone();
		clone.day28breachcomment = this.day28breachcomment;
		if(this.parentchildslot == null)
			clone.parentchildslot = null;
		else
			clone.parentchildslot = (ims.scheduling.vo.SessionParentChildSlotForBookingVo)this.parentchildslot.clone();
		clone.isflexibleappointment = this.isflexibleappointment;
		clone.iswardattendance = this.iswardattendance;
		if(this.servicefunction == null)
			clone.servicefunction = null;
		else
			clone.servicefunction = (ims.core.vo.ServiceFunctionLiteVo)this.servicefunction.clone();
		clone.firstconsultationactivity = this.firstconsultationactivity;
		clone.electivelist = this.electivelist;
		if(this.patientcategory == null)
			clone.patientcategory = null;
		else
			clone.patientcategory = (ims.core.vo.lookups.PatientStatus)this.patientcategory.clone();
		clone.apptbookedonsameday = this.apptbookedonsameday;
		clone.wasapptcommunicated = this.wasapptcommunicated;
		clone.isdisplaced = this.isdisplaced;
		if(this.listownerbooked == null)
			clone.listownerbooked = null;
		else
			clone.listownerbooked = (ims.core.vo.HcpLiteVo)this.listownerbooked.clone();
		if(this.outcomedatetime == null)
			clone.outcomedatetime = null;
		else
			clone.outcomedatetime = (ims.framework.utils.DateTime)this.outcomedatetime.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(Booking_AppointmentVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A Booking_AppointmentVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		Booking_AppointmentVo compareObj = (Booking_AppointmentVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getAppointmentDate() == null && compareObj.getAppointmentDate() != null)
				return -1;
			if(this.getAppointmentDate() != null && compareObj.getAppointmentDate() == null)
				return 1;
			if(this.getAppointmentDate() != null && compareObj.getAppointmentDate() != null)
				retVal = this.getAppointmentDate().compareTo(compareObj.getAppointmentDate());
		}
		if (retVal == 0)
		{
			if(this.getApptStartTime() == null && compareObj.getApptStartTime() != null)
				return -1;
			if(this.getApptStartTime() != null && compareObj.getApptStartTime() == null)
				return 1;
			if(this.getApptStartTime() != null && compareObj.getApptStartTime() != null)
				retVal = this.getApptStartTime().compareTo(compareObj.getApptStartTime());
		}
		if (retVal == 0)
		{
			if(this.getApptEndTime() == null && compareObj.getApptEndTime() != null)
				return -1;
			if(this.getApptEndTime() != null && compareObj.getApptEndTime() == null)
				return 1;
			if(this.getApptEndTime() != null && compareObj.getApptEndTime() != null)
				retVal = this.getApptEndTime().compareTo(compareObj.getApptEndTime());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentdate != null)
			count++;
		if(this.apptstarttime != null)
			count++;
		if(this.apptendtime != null)
			count++;
		if(this.apptstatus != null)
			count++;
		if(this.apptstatusreas != null)
			count++;
		if(this.apptstatushistory != null)
			count++;
		if(this.session != null)
			count++;
		if(this.sessionslot != null)
			count++;
		if(this.priority != null)
			count++;
		if(this.activity != null)
			count++;
		if(this.iscabbooking != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.requiresrebook != null)
			count++;
		if(this.earliestoffereddate != null)
			count++;
		if(this.journey != null)
			count++;
		if(this.event != null)
			count++;
		if(this.orderinvestigation != null)
			count++;
		if(this.currentstatusrecord != null)
			count++;
		if(this.transporttype != null)
			count++;
		if(this.istransportrequired != null)
			count++;
		if(this.istransportbooked != null)
			count++;
		if(this.outcome != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.theatrebooking != null)
			count++;
		if(this.arrivaltime != null)
			count++;
		if(this.seentime != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.appttrackingstatushistory != null)
			count++;
		if(this.dummycolour != null)
			count++;
		if(this.wasreviewed != null)
			count++;
		if(this.seenby != null)
			count++;
		if(this.outcomecomments != null)
			count++;
		if(this.pathwayclock != null)
			count++;
		if(this.consmediatype != null)
			count++;
		if(this.category != null)
			count++;
		if(this.numprovidercancellations != null)
			count++;
		if(this.wasprinted != null)
			count++;
		if(this.bookingletter != null)
			count++;
		if(this.numpatientcancellations != null)
			count++;
		if(this.firstapptkpidate != null)
			count++;
		if(this.rttbreachkpidate != null)
			count++;
		if(this.reasonforbreachingfirstapptkpi != null)
			count++;
		if(this.commentsforbreachingfirstapptkpi != null)
			count++;
		if(this.date28dayrulebreach != null)
			count++;
		if(this.donotmove != null)
			count++;
		if(this.linkedappointments != null)
			count++;
		if(this.linkedapptstobecancelled != null)
			count++;
		if(this.day28breachreason != null)
			count++;
		if(this.day28breachcomment != null)
			count++;
		if(this.parentchildslot != null)
			count++;
		if(this.isflexibleappointment != null)
			count++;
		if(this.iswardattendance != null)
			count++;
		if(this.servicefunction != null)
			count++;
		if(this.firstconsultationactivity != null)
			count++;
		if(this.electivelist != null)
			count++;
		if(this.patientcategory != null)
			count++;
		if(this.apptbookedonsameday != null)
			count++;
		if(this.wasapptcommunicated != null)
			count++;
		if(this.isdisplaced != null)
			count++;
		if(this.listownerbooked != null)
			count++;
		if(this.outcomedatetime != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 61;
	}
	protected ims.framework.utils.Date appointmentdate;
	protected ims.framework.utils.Time apptstarttime;
	protected ims.framework.utils.Time apptendtime;
	protected ims.scheduling.vo.lookups.Status_Reason apptstatus;
	protected ims.scheduling.vo.lookups.Status_Reason apptstatusreas;
	protected ims.scheduling.vo.Appointment_StatusVoCollection apptstatushistory;
	protected ims.scheduling.vo.SessionIntermediateVo session;
	protected ims.scheduling.vo.SessionSlotVo sessionslot;
	protected ims.scheduling.vo.lookups.SchedulingPriority priority;
	protected ims.core.vo.ActivitySchedVo activity;
	protected Boolean iscabbooking;
	protected ims.core.vo.PatientShort patient;
	protected Boolean requiresrebook;
	protected ims.framework.utils.Date earliestoffereddate;
	protected ims.pathways.vo.PatientJourneyVo journey;
	protected ims.pathways.vo.EventLiteVo event;
	protected ims.ocrr.vo.OrderInvestigationBookingVo orderinvestigation;
	protected ims.scheduling.vo.Appointment_StatusVo currentstatusrecord;
	protected ims.scheduling.vo.lookups.ApptTransportType transporttype;
	protected Boolean istransportrequired;
	protected Boolean istransportbooked;
	protected ims.scheduling.vo.lookups.ApptOutcome outcome;
	protected String comments;
	protected ims.scheduling.vo.TheatreBookingLiteVo theatrebooking;
	protected ims.framework.utils.Time arrivaltime;
	protected ims.framework.utils.Time seentime;
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	protected ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection appttrackingstatushistory;
	protected ims.framework.utils.Color dummycolour;
	protected Boolean wasreviewed;
	protected ims.core.resource.people.vo.HcpRefVo seenby;
	protected String outcomecomments;
	protected ims.pathways.vo.PathwayClockRefVo pathwayclock;
	protected ims.scheduling.vo.lookups.ConsultationMediaType consmediatype;
	protected ims.RefMan.vo.lookups.CatsReferralCategory category;
	protected Integer numprovidercancellations;
	protected Boolean wasprinted;
	protected ims.core.vo.PatientDocumentLiteVo bookingletter;
	protected Integer numpatientcancellations;
	protected ims.framework.utils.Date firstapptkpidate;
	protected ims.framework.utils.Date rttbreachkpidate;
	protected ims.core.vo.lookups.ReasonForBreachingFirstApptKPI reasonforbreachingfirstapptkpi;
	protected String commentsforbreachingfirstapptkpi;
	protected ims.framework.utils.Date date28dayrulebreach;
	protected Boolean donotmove;
	protected ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection linkedappointments;
	protected ims.scheduling.vo.BookingAppointmentForLinkedAppointmentsVoCollection linkedapptstobecancelled;
	protected ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason day28breachreason;
	protected String day28breachcomment;
	protected ims.scheduling.vo.SessionParentChildSlotForBookingVo parentchildslot;
	protected Boolean isflexibleappointment;
	protected Boolean iswardattendance;
	protected ims.core.vo.ServiceFunctionLiteVo servicefunction;
	protected Boolean firstconsultationactivity;
	protected ims.RefMan.vo.PatientElectiveListRefVo electivelist;
	protected ims.core.vo.lookups.PatientStatus patientcategory;
	protected Boolean apptbookedonsameday;
	protected Boolean wasapptcommunicated;
	protected Boolean isdisplaced;
	protected ims.core.vo.HcpLiteVo listownerbooked;
	protected ims.framework.utils.DateTime outcomedatetime;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
