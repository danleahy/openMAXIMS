//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.ProfileParentChildSlot business object (ID: 1090100018).
 */
public class ProfileParentChildSlotVo extends ims.scheduling.vo.ProfileParentChildSlotRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ProfileParentChildSlotVo()
	{
	}
	public ProfileParentChildSlotVo(Integer id, int version)
	{
		super(id, version);
	}
	public ProfileParentChildSlotVo(ims.scheduling.vo.beans.ProfileParentChildSlotVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.starttime = bean.getStartTime() == null ? null : bean.getStartTime().buildTime();
		this.noofinstances = bean.getNoOfInstances();
		this.isactive = bean.getIsActive();
		this.duration = bean.getDuration();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.priority = bean.getPriority() == null ? null : ims.scheduling.vo.lookups.SchedulingPriority.buildLookup(bean.getPriority());
		this.slotresp = bean.getSlotResp() == null ? null : bean.getSlotResp().buildVo();
		this.numberslotsreq = bean.getNumberSlotsReq();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.ProfileParentChildSlotVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.starttime = bean.getStartTime() == null ? null : bean.getStartTime().buildTime();
		this.noofinstances = bean.getNoOfInstances();
		this.isactive = bean.getIsActive();
		this.duration = bean.getDuration();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.priority = bean.getPriority() == null ? null : ims.scheduling.vo.lookups.SchedulingPriority.buildLookup(bean.getPriority());
		this.slotresp = bean.getSlotResp() == null ? null : bean.getSlotResp().buildVo(map);
		this.numberslotsreq = bean.getNumberSlotsReq();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.ProfileParentChildSlotVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.ProfileParentChildSlotVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.ProfileParentChildSlotVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("STARTTIME"))
			return getStartTime();
		if(fieldName.equals("NOOFINSTANCES"))
			return getNoOfInstances();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("DURATION"))
			return getDuration();
		if(fieldName.equals("ENDTM"))
			return getEndTm();
		if(fieldName.equals("PRIORITY"))
			return getPriority();
		if(fieldName.equals("SLOTRESP"))
			return getSlotResp();
		if(fieldName.equals("NUMBERSLOTSREQ"))
			return getNumberSlotsReq();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getStartTimeIsNotNull()
	{
		return this.starttime != null;
	}
	public ims.framework.utils.Time getStartTime()
	{
		return this.starttime;
	}
	public void setStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttime = value;
	}
	public boolean getNoOfInstancesIsNotNull()
	{
		return this.noofinstances != null;
	}
	public Integer getNoOfInstances()
	{
		return this.noofinstances;
	}
	public void setNoOfInstances(Integer value)
	{
		this.isValidated = false;
		this.noofinstances = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getDurationIsNotNull()
	{
		return this.duration != null;
	}
	public Integer getDuration()
	{
		return this.duration;
	}
	public void setDuration(Integer value)
	{
		this.isValidated = false;
		this.duration = value;
	}
	public boolean getEndTmIsNotNull()
	{
		return this.endtm != null;
	}
	public ims.framework.utils.Time getEndTm()
	{
		return this.endtm;
	}
	public void setEndTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.endtm = value;
	}
	public boolean getPriorityIsNotNull()
	{
		return this.priority != null;
	}
	public ims.scheduling.vo.lookups.SchedulingPriority getPriority()
	{
		return this.priority;
	}
	public void setPriority(ims.scheduling.vo.lookups.SchedulingPriority value)
	{
		this.isValidated = false;
		this.priority = value;
	}
	public boolean getSlotRespIsNotNull()
	{
		return this.slotresp != null;
	}
	public ims.scheduling.vo.Profile_ListOwnerVo getSlotResp()
	{
		return this.slotresp;
	}
	public void setSlotResp(ims.scheduling.vo.Profile_ListOwnerVo value)
	{
		this.isValidated = false;
		this.slotresp = value;
	}
	public boolean getNumberSlotsReqIsNotNull()
	{
		return this.numberslotsreq != null;
	}
	public Integer getNumberSlotsReq()
	{
		return this.numberslotsreq;
	}
	public void setNumberSlotsReq(Integer value)
	{
		this.isValidated = false;
		this.numberslotsreq = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.slotresp != null)
		{
			if(!this.slotresp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.starttime == null)
			listOfErrors.add("StartTime is mandatory");
		if(this.noofinstances == null)
			listOfErrors.add("NoOfInstances is mandatory");
		if(this.isactive == null)
			listOfErrors.add("isActive is mandatory");
		if(this.duration == null)
			listOfErrors.add("Duration is mandatory");
		if(this.endtm == null)
			listOfErrors.add("EndTm is mandatory");
		if(this.slotresp != null)
		{
			String[] listOfOtherErrors = this.slotresp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ProfileParentChildSlotVo clone = new ProfileParentChildSlotVo(this.id, this.version);
		
		if(this.starttime == null)
			clone.starttime = null;
		else
			clone.starttime = (ims.framework.utils.Time)this.starttime.clone();
		clone.noofinstances = this.noofinstances;
		clone.isactive = this.isactive;
		clone.duration = this.duration;
		if(this.endtm == null)
			clone.endtm = null;
		else
			clone.endtm = (ims.framework.utils.Time)this.endtm.clone();
		if(this.priority == null)
			clone.priority = null;
		else
			clone.priority = (ims.scheduling.vo.lookups.SchedulingPriority)this.priority.clone();
		if(this.slotresp == null)
			clone.slotresp = null;
		else
			clone.slotresp = (ims.scheduling.vo.Profile_ListOwnerVo)this.slotresp.clone();
		clone.numberslotsreq = this.numberslotsreq;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ProfileParentChildSlotVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ProfileParentChildSlotVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ProfileParentChildSlotVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ProfileParentChildSlotVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.starttime != null)
			count++;
		if(this.noofinstances != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.duration != null)
			count++;
		if(this.endtm != null)
			count++;
		if(this.priority != null)
			count++;
		if(this.slotresp != null)
			count++;
		if(this.numberslotsreq != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.framework.utils.Time starttime;
	protected Integer noofinstances;
	protected Boolean isactive;
	protected Integer duration;
	protected ims.framework.utils.Time endtm;
	protected ims.scheduling.vo.lookups.SchedulingPriority priority;
	protected ims.scheduling.vo.Profile_ListOwnerVo slotresp;
	protected Integer numberslotsreq;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
