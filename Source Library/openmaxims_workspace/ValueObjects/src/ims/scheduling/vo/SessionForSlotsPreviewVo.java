//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Sch_Session business object (ID: 1055100010).
 */
public class SessionForSlotsPreviewVo extends ims.scheduling.vo.Sch_SessionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SessionForSlotsPreviewVo()
	{
	}
	public SessionForSlotsPreviewVo(Integer id, int version)
	{
		super(id, version);
	}
	public SessionForSlotsPreviewVo(ims.scheduling.vo.beans.SessionForSlotsPreviewVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.isfixed = bean.getIsFixed();
		this.sessiontype = bean.getSessionType() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getSessionType());
		this.sessionslots = ims.scheduling.vo.SessionSlotForPreviewVoCollection.buildFromBeanCollection(bean.getSessionSlots());
		this.theatreslots = ims.scheduling.vo.SessionTheatreTCISlotForPreviewVoCollection.buildFromBeanCollection(bean.getTheatreSlots());
		this.parentchildslots = ims.scheduling.vo.SessionParentChildSlotForPreviewVoCollection.buildFromBeanCollection(bean.getParentChildSlots());
		this.slottype = bean.getSlotType() == null ? null : ims.scheduling.vo.lookups.SlotType.buildLookup(bean.getSlotType());
		this.sessionactivities = ims.scheduling.vo.SessionActivityLiteVoCollection.buildFromBeanCollection(bean.getSessionActivities());
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.theatreproceduresremaining = bean.getTheatreProceduresRemaining() == null ? null : bean.getTheatreProceduresRemaining().buildVo();
		this.datesgeneratedfor = ims.framework.utils.beans.DateBean.buildDateArray(bean.getDatesGeneratedFor());
		this.sessionprofiletype = bean.getSessionProfileType() == null ? null : ims.scheduling.vo.lookups.SchProfileType.buildLookup(bean.getSessionProfileType());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.SessionForSlotsPreviewVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.isfixed = bean.getIsFixed();
		this.sessiontype = bean.getSessionType() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getSessionType());
		this.sessionslots = ims.scheduling.vo.SessionSlotForPreviewVoCollection.buildFromBeanCollection(bean.getSessionSlots());
		this.theatreslots = ims.scheduling.vo.SessionTheatreTCISlotForPreviewVoCollection.buildFromBeanCollection(bean.getTheatreSlots());
		this.parentchildslots = ims.scheduling.vo.SessionParentChildSlotForPreviewVoCollection.buildFromBeanCollection(bean.getParentChildSlots());
		this.slottype = bean.getSlotType() == null ? null : ims.scheduling.vo.lookups.SlotType.buildLookup(bean.getSlotType());
		this.sessionactivities = ims.scheduling.vo.SessionActivityLiteVoCollection.buildFromBeanCollection(bean.getSessionActivities());
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.theatreproceduresremaining = bean.getTheatreProceduresRemaining() == null ? null : bean.getTheatreProceduresRemaining().buildVo(map);
		this.datesgeneratedfor = ims.framework.utils.beans.DateBean.buildDateArray(bean.getDatesGeneratedFor());
		this.sessionprofiletype = bean.getSessionProfileType() == null ? null : ims.scheduling.vo.lookups.SchProfileType.buildLookup(bean.getSessionProfileType());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.SessionForSlotsPreviewVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.SessionForSlotsPreviewVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.SessionForSlotsPreviewVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("ISFIXED"))
			return getIsFixed();
		if(fieldName.equals("SESSIONTYPE"))
			return getSessionType();
		if(fieldName.equals("SESSIONSLOTS"))
			return getSessionSlots();
		if(fieldName.equals("THEATRESLOTS"))
			return getTheatreSlots();
		if(fieldName.equals("PARENTCHILDSLOTS"))
			return getParentChildSlots();
		if(fieldName.equals("SLOTTYPE"))
			return getSlotType();
		if(fieldName.equals("SESSIONACTIVITIES"))
			return getSessionActivities();
		if(fieldName.equals("SESSIONDATE"))
			return getSessionDate();
		if(fieldName.equals("THEATREPROCEDURESREMAINING"))
			return getTheatreProceduresRemaining();
		if(fieldName.equals("DATESGENERATEDFOR"))
			return getDatesGeneratedFor();
		if(fieldName.equals("SESSIONPROFILETYPE"))
			return getSessionProfileType();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 100;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getIsFixedIsNotNull()
	{
		return this.isfixed != null;
	}
	public Boolean getIsFixed()
	{
		return this.isfixed;
	}
	public void setIsFixed(Boolean value)
	{
		this.isValidated = false;
		this.isfixed = value;
	}
	public boolean getSessionTypeIsNotNull()
	{
		return this.sessiontype != null;
	}
	public ims.scheduling.vo.lookups.Sched_Profile_Type getSessionType()
	{
		return this.sessiontype;
	}
	public void setSessionType(ims.scheduling.vo.lookups.Sched_Profile_Type value)
	{
		this.isValidated = false;
		this.sessiontype = value;
	}
	public boolean getSessionSlotsIsNotNull()
	{
		return this.sessionslots != null;
	}
	public ims.scheduling.vo.SessionSlotForPreviewVoCollection getSessionSlots()
	{
		return this.sessionslots;
	}
	public void setSessionSlots(ims.scheduling.vo.SessionSlotForPreviewVoCollection value)
	{
		this.isValidated = false;
		this.sessionslots = value;
	}
	public boolean getTheatreSlotsIsNotNull()
	{
		return this.theatreslots != null;
	}
	public ims.scheduling.vo.SessionTheatreTCISlotForPreviewVoCollection getTheatreSlots()
	{
		return this.theatreslots;
	}
	public void setTheatreSlots(ims.scheduling.vo.SessionTheatreTCISlotForPreviewVoCollection value)
	{
		this.isValidated = false;
		this.theatreslots = value;
	}
	public boolean getParentChildSlotsIsNotNull()
	{
		return this.parentchildslots != null;
	}
	public ims.scheduling.vo.SessionParentChildSlotForPreviewVoCollection getParentChildSlots()
	{
		return this.parentchildslots;
	}
	public void setParentChildSlots(ims.scheduling.vo.SessionParentChildSlotForPreviewVoCollection value)
	{
		this.isValidated = false;
		this.parentchildslots = value;
	}
	public boolean getSlotTypeIsNotNull()
	{
		return this.slottype != null;
	}
	public ims.scheduling.vo.lookups.SlotType getSlotType()
	{
		return this.slottype;
	}
	public void setSlotType(ims.scheduling.vo.lookups.SlotType value)
	{
		this.isValidated = false;
		this.slottype = value;
	}
	public boolean getSessionActivitiesIsNotNull()
	{
		return this.sessionactivities != null;
	}
	public ims.scheduling.vo.SessionActivityLiteVoCollection getSessionActivities()
	{
		return this.sessionactivities;
	}
	public void setSessionActivities(ims.scheduling.vo.SessionActivityLiteVoCollection value)
	{
		this.isValidated = false;
		this.sessionactivities = value;
	}
	public boolean getSessionDateIsNotNull()
	{
		return this.sessiondate != null;
	}
	public ims.framework.utils.Date getSessionDate()
	{
		return this.sessiondate;
	}
	public void setSessionDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.sessiondate = value;
	}
	public boolean getTheatreProceduresRemainingIsNotNull()
	{
		return this.theatreproceduresremaining != null;
	}
	public ims.scheduling.vo.SessionTheatreProceduresForSlotsPreviewVo getTheatreProceduresRemaining()
	{
		return this.theatreproceduresremaining;
	}
	public void setTheatreProceduresRemaining(ims.scheduling.vo.SessionTheatreProceduresForSlotsPreviewVo value)
	{
		this.isValidated = false;
		this.theatreproceduresremaining = value;
	}
	public boolean getDatesGeneratedForIsNotNull()
	{
		return this.datesgeneratedfor != null;
	}
	public ims.framework.utils.Date[] getDatesGeneratedFor()
	{
		return this.datesgeneratedfor;
	}
	public void setDatesGeneratedFor(ims.framework.utils.Date[] value)
	{
		this.isValidated = false;
		this.datesgeneratedfor = value;
	}
	public boolean getSessionProfileTypeIsNotNull()
	{
		return this.sessionprofiletype != null;
	}
	public ims.scheduling.vo.lookups.SchProfileType getSessionProfileType()
	{
		return this.sessionprofiletype;
	}
	public void setSessionProfileType(ims.scheduling.vo.lookups.SchProfileType value)
	{
		this.isValidated = false;
		this.sessionprofiletype = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name != null)
			if(this.name.length() > 100)
				listOfErrors.add("The length of the field [name] in the value object [ims.scheduling.vo.SessionForSlotsPreviewVo] is too big. It should be less or equal to 100");
		if(this.sessionprofiletype == null)
			listOfErrors.add("SessionProfileType is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SessionForSlotsPreviewVo clone = new SessionForSlotsPreviewVo(this.id, this.version);
		
		clone.name = this.name;
		clone.isfixed = this.isfixed;
		if(this.sessiontype == null)
			clone.sessiontype = null;
		else
			clone.sessiontype = (ims.scheduling.vo.lookups.Sched_Profile_Type)this.sessiontype.clone();
		if(this.sessionslots == null)
			clone.sessionslots = null;
		else
			clone.sessionslots = (ims.scheduling.vo.SessionSlotForPreviewVoCollection)this.sessionslots.clone();
		if(this.theatreslots == null)
			clone.theatreslots = null;
		else
			clone.theatreslots = (ims.scheduling.vo.SessionTheatreTCISlotForPreviewVoCollection)this.theatreslots.clone();
		if(this.parentchildslots == null)
			clone.parentchildslots = null;
		else
			clone.parentchildslots = (ims.scheduling.vo.SessionParentChildSlotForPreviewVoCollection)this.parentchildslots.clone();
		if(this.slottype == null)
			clone.slottype = null;
		else
			clone.slottype = (ims.scheduling.vo.lookups.SlotType)this.slottype.clone();
		if(this.sessionactivities == null)
			clone.sessionactivities = null;
		else
			clone.sessionactivities = (ims.scheduling.vo.SessionActivityLiteVoCollection)this.sessionactivities.clone();
		if(this.sessiondate == null)
			clone.sessiondate = null;
		else
			clone.sessiondate = (ims.framework.utils.Date)this.sessiondate.clone();
		if(this.theatreproceduresremaining == null)
			clone.theatreproceduresremaining = null;
		else
			clone.theatreproceduresremaining = (ims.scheduling.vo.SessionTheatreProceduresForSlotsPreviewVo)this.theatreproceduresremaining.clone();
		if(this.datesgeneratedfor == null)
			clone.datesgeneratedfor = null;
		else
			clone.datesgeneratedfor = (ims.framework.utils.Date[])this.datesgeneratedfor.clone();
		if(this.sessionprofiletype == null)
			clone.sessionprofiletype = null;
		else
			clone.sessionprofiletype = (ims.scheduling.vo.lookups.SchProfileType)this.sessionprofiletype.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SessionForSlotsPreviewVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SessionForSlotsPreviewVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((SessionForSlotsPreviewVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((SessionForSlotsPreviewVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.name != null)
			count++;
		if(this.isfixed != null)
			count++;
		if(this.sessiontype != null)
			count++;
		if(this.sessionslots != null)
			count++;
		if(this.theatreslots != null)
			count++;
		if(this.parentchildslots != null)
			count++;
		if(this.slottype != null)
			count++;
		if(this.sessionactivities != null)
			count++;
		if(this.sessiondate != null)
			count++;
		if(this.theatreproceduresremaining != null)
			count++;
		if(this.datesgeneratedfor != null)
			count++;
		if(this.sessionprofiletype != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 12;
	}
	protected String name;
	protected Boolean isfixed;
	protected ims.scheduling.vo.lookups.Sched_Profile_Type sessiontype;
	protected ims.scheduling.vo.SessionSlotForPreviewVoCollection sessionslots;
	protected ims.scheduling.vo.SessionTheatreTCISlotForPreviewVoCollection theatreslots;
	protected ims.scheduling.vo.SessionParentChildSlotForPreviewVoCollection parentchildslots;
	protected ims.scheduling.vo.lookups.SlotType slottype;
	protected ims.scheduling.vo.SessionActivityLiteVoCollection sessionactivities;
	protected ims.framework.utils.Date sessiondate;
	protected ims.scheduling.vo.SessionTheatreProceduresForSlotsPreviewVo theatreproceduresremaining;
	protected ims.framework.utils.Date[] datesgeneratedfor;
	protected ims.scheduling.vo.lookups.SchProfileType sessionprofiletype;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
