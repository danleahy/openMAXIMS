//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo.beans;

public class BookingAppointmentForDisplacedAppointmentVoBean extends ims.vo.ValueObjectBean
{
	public BookingAppointmentForDisplacedAppointmentVoBean()
	{
	}
	public BookingAppointmentForDisplacedAppointmentVoBean(ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo vo)
	{
		this.id = vo.getBoId();
		this.version = vo.getBoVersion();
		this.appointmentdate = vo.getAppointmentDate() == null ? null : (ims.framework.utils.beans.DateBean)vo.getAppointmentDate().getBean();
		this.apptstarttime = vo.getApptStartTime() == null ? null : (ims.framework.utils.beans.TimeBean)vo.getApptStartTime().getBean();
		this.apptendtime = vo.getApptEndTime() == null ? null : (ims.framework.utils.beans.TimeBean)vo.getApptEndTime().getBean();
		this.activity = vo.getActivity() == null ? null : (ims.core.vo.beans.ActivityLiteVoBean)vo.getActivity().getBean();
		this.patient = vo.getPatient() == null ? null : (ims.core.vo.beans.PatientLiteVoBean)vo.getPatient().getBean();
		if(vo.getLinkedAppointments() != null)
		{
			this.linkedappointments = new ims.vo.RefVoBean[vo.getLinkedAppointments().size()];
			for(int linkedappointments_i = 0; linkedappointments_i < vo.getLinkedAppointments().size(); linkedappointments_i++)
			{
				this.linkedappointments[linkedappointments_i] = new ims.vo.RefVoBean(vo.getLinkedAppointments().get(linkedappointments_i).getBoId(),vo.getLinkedAppointments().get(linkedappointments_i).getBoVersion());
			}
		}
		this.isdisplaced = vo.getIsDisplaced();
		this.servicefunction = vo.getServiceFunction() == null ? null : (ims.core.vo.beans.ServiceFunctionVoBean)vo.getServiceFunction().getBean();
		this.rttbreachkpidate = vo.getRTTBreachKPIDate() == null ? null : (ims.framework.utils.beans.DateBean)vo.getRTTBreachKPIDate().getBean();
		this.iscabbooking = vo.getIsCABBooking();
		this.currentstatusrecord = vo.getCurrentStatusRecord() == null ? null : (ims.scheduling.vo.beans.AppointmentStatusForDisplacedApptsVoBean)vo.getCurrentStatusRecord().getBean();
		this.sessionslot = vo.getSessionSlot() == null ? null : (ims.scheduling.vo.beans.SessionSlotForDisplacedAppointmentsVoBean)vo.getSessionSlot().getBean();
	}

	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo vo)
	{
		this.id = vo.getBoId();
		this.version = vo.getBoVersion();
		this.appointmentdate = vo.getAppointmentDate() == null ? null : (ims.framework.utils.beans.DateBean)vo.getAppointmentDate().getBean();
		this.apptstarttime = vo.getApptStartTime() == null ? null : (ims.framework.utils.beans.TimeBean)vo.getApptStartTime().getBean();
		this.apptendtime = vo.getApptEndTime() == null ? null : (ims.framework.utils.beans.TimeBean)vo.getApptEndTime().getBean();
		this.activity = vo.getActivity() == null ? null : (ims.core.vo.beans.ActivityLiteVoBean)vo.getActivity().getBean(map);
		this.patient = vo.getPatient() == null ? null : (ims.core.vo.beans.PatientLiteVoBean)vo.getPatient().getBean(map);
		if(vo.getLinkedAppointments() != null)
		{
			this.linkedappointments = new ims.vo.RefVoBean[vo.getLinkedAppointments().size()];
			for(int linkedappointments_i = 0; linkedappointments_i < vo.getLinkedAppointments().size(); linkedappointments_i++)
			{
				this.linkedappointments[linkedappointments_i] = new ims.vo.RefVoBean(vo.getLinkedAppointments().get(linkedappointments_i).getBoId(),vo.getLinkedAppointments().get(linkedappointments_i).getBoVersion());
			}
		}
		this.isdisplaced = vo.getIsDisplaced();
		this.servicefunction = vo.getServiceFunction() == null ? null : (ims.core.vo.beans.ServiceFunctionVoBean)vo.getServiceFunction().getBean(map);
		this.rttbreachkpidate = vo.getRTTBreachKPIDate() == null ? null : (ims.framework.utils.beans.DateBean)vo.getRTTBreachKPIDate().getBean();
		this.iscabbooking = vo.getIsCABBooking();
		this.currentstatusrecord = vo.getCurrentStatusRecord() == null ? null : (ims.scheduling.vo.beans.AppointmentStatusForDisplacedApptsVoBean)vo.getCurrentStatusRecord().getBean(map);
		this.sessionslot = vo.getSessionSlot() == null ? null : (ims.scheduling.vo.beans.SessionSlotForDisplacedAppointmentsVoBean)vo.getSessionSlot().getBean(map);
	}

	public ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo buildVo()
	{
		return this.buildVo(new ims.vo.ValueObjectBeanMap());
	}

	public ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo buildVo(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo vo = null;
		if(map != null)
			vo = (ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo)map.getValueObject(this);
		if(vo == null)
		{
			vo = new ims.scheduling.vo.BookingAppointmentForDisplacedAppointmentVo();
			map.addValueObject(this, vo);
			vo.populate(map, this);
		}
		return vo;
	}

	public Integer getId()
	{
		return this.id;
	}
	public void setId(Integer value)
	{
		this.id = value;
	}
	public int getVersion()
	{
		return this.version;
	}
	public void setVersion(int value)
	{
		this.version = value;
	}
	public ims.framework.utils.beans.DateBean getAppointmentDate()
	{
		return this.appointmentdate;
	}
	public void setAppointmentDate(ims.framework.utils.beans.DateBean value)
	{
		this.appointmentdate = value;
	}
	public ims.framework.utils.beans.TimeBean getApptStartTime()
	{
		return this.apptstarttime;
	}
	public void setApptStartTime(ims.framework.utils.beans.TimeBean value)
	{
		this.apptstarttime = value;
	}
	public ims.framework.utils.beans.TimeBean getApptEndTime()
	{
		return this.apptendtime;
	}
	public void setApptEndTime(ims.framework.utils.beans.TimeBean value)
	{
		this.apptendtime = value;
	}
	public ims.core.vo.beans.ActivityLiteVoBean getActivity()
	{
		return this.activity;
	}
	public void setActivity(ims.core.vo.beans.ActivityLiteVoBean value)
	{
		this.activity = value;
	}
	public ims.core.vo.beans.PatientLiteVoBean getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.beans.PatientLiteVoBean value)
	{
		this.patient = value;
	}
	public ims.vo.RefVoBean[] getLinkedAppointments()
	{
		return this.linkedappointments;
	}
	public void setLinkedAppointments(ims.vo.RefVoBean[] value)
	{
		this.linkedappointments = value;
	}
	public Boolean getIsDisplaced()
	{
		return this.isdisplaced;
	}
	public void setIsDisplaced(Boolean value)
	{
		this.isdisplaced = value;
	}
	public ims.core.vo.beans.ServiceFunctionVoBean getServiceFunction()
	{
		return this.servicefunction;
	}
	public void setServiceFunction(ims.core.vo.beans.ServiceFunctionVoBean value)
	{
		this.servicefunction = value;
	}
	public ims.framework.utils.beans.DateBean getRTTBreachKPIDate()
	{
		return this.rttbreachkpidate;
	}
	public void setRTTBreachKPIDate(ims.framework.utils.beans.DateBean value)
	{
		this.rttbreachkpidate = value;
	}
	public Boolean getIsCABBooking()
	{
		return this.iscabbooking;
	}
	public void setIsCABBooking(Boolean value)
	{
		this.iscabbooking = value;
	}
	public ims.scheduling.vo.beans.AppointmentStatusForDisplacedApptsVoBean getCurrentStatusRecord()
	{
		return this.currentstatusrecord;
	}
	public void setCurrentStatusRecord(ims.scheduling.vo.beans.AppointmentStatusForDisplacedApptsVoBean value)
	{
		this.currentstatusrecord = value;
	}
	public ims.scheduling.vo.beans.SessionSlotForDisplacedAppointmentsVoBean getSessionSlot()
	{
		return this.sessionslot;
	}
	public void setSessionSlot(ims.scheduling.vo.beans.SessionSlotForDisplacedAppointmentsVoBean value)
	{
		this.sessionslot = value;
	}

	private Integer id;
	private int version;
	private ims.framework.utils.beans.DateBean appointmentdate;
	private ims.framework.utils.beans.TimeBean apptstarttime;
	private ims.framework.utils.beans.TimeBean apptendtime;
	private ims.core.vo.beans.ActivityLiteVoBean activity;
	private ims.core.vo.beans.PatientLiteVoBean patient;
	private ims.vo.RefVoBean[] linkedappointments;
	private Boolean isdisplaced;
	private ims.core.vo.beans.ServiceFunctionVoBean servicefunction;
	private ims.framework.utils.beans.DateBean rttbreachkpidate;
	private Boolean iscabbooking;
	private ims.scheduling.vo.beans.AppointmentStatusForDisplacedApptsVoBean currentstatusrecord;
	private ims.scheduling.vo.beans.SessionSlotForDisplacedAppointmentsVoBean sessionslot;
}
