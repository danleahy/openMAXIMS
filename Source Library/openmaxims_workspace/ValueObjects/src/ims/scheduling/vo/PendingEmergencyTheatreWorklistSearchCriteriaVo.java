//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;


public class PendingEmergencyTheatreWorklistSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PendingEmergencyTheatreWorklistSearchCriteriaVo()
	{
	}
	public PendingEmergencyTheatreWorklistSearchCriteriaVo(ims.scheduling.vo.beans.PendingEmergencyTheatreWorklistSearchCriteriaVoBean bean)
	{
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo();
		this.urgencycategory = bean.getUrgencyCategory() == null ? null : ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory.buildLookup(bean.getUrgencyCategory());
		this.inpatientsonly = bean.getInpatientsOnly();
		this.notcurrentlyaninpatient = bean.getNotCurrentlyAnInpatient();
		this.expectedhospital = bean.getExpectedHospital() == null ? null : bean.getExpectedHospital().buildVo();
		this.expectedward = bean.getExpectedWard() == null ? null : bean.getExpectedWard().buildVo();
		this.expecteddate = bean.getExpectedDate() == null ? null : bean.getExpectedDate().buildDate();
		this.excludeendoscopyprocedures = bean.getExcludeEndoscopyProcedures();
		this.listonlyendoscopyprocedures = bean.getListOnlyEndoscopyProcedures();
		this.services = ims.core.vo.ServiceShortVoCollection.buildFromBeanCollection(bean.getServices());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.PendingEmergencyTheatreWorklistSearchCriteriaVoBean bean)
	{
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo(map);
		this.urgencycategory = bean.getUrgencyCategory() == null ? null : ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory.buildLookup(bean.getUrgencyCategory());
		this.inpatientsonly = bean.getInpatientsOnly();
		this.notcurrentlyaninpatient = bean.getNotCurrentlyAnInpatient();
		this.expectedhospital = bean.getExpectedHospital() == null ? null : bean.getExpectedHospital().buildVo(map);
		this.expectedward = bean.getExpectedWard() == null ? null : bean.getExpectedWard().buildVo(map);
		this.expecteddate = bean.getExpectedDate() == null ? null : bean.getExpectedDate().buildDate();
		this.excludeendoscopyprocedures = bean.getExcludeEndoscopyProcedures();
		this.listonlyendoscopyprocedures = bean.getListOnlyEndoscopyProcedures();
		this.services = ims.core.vo.ServiceShortVoCollection.buildFromBeanCollection(bean.getServices());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.PendingEmergencyTheatreWorklistSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.PendingEmergencyTheatreWorklistSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.PendingEmergencyTheatreWorklistSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.vo.Hcp getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.vo.Hcp value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean getUrgencyCategoryIsNotNull()
	{
		return this.urgencycategory != null;
	}
	public ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory getUrgencyCategory()
	{
		return this.urgencycategory;
	}
	public void setUrgencyCategory(ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory value)
	{
		this.isValidated = false;
		this.urgencycategory = value;
	}
	public boolean getInpatientsOnlyIsNotNull()
	{
		return this.inpatientsonly != null;
	}
	public Boolean getInpatientsOnly()
	{
		return this.inpatientsonly;
	}
	public void setInpatientsOnly(Boolean value)
	{
		this.isValidated = false;
		this.inpatientsonly = value;
	}
	public boolean getNotCurrentlyAnInpatientIsNotNull()
	{
		return this.notcurrentlyaninpatient != null;
	}
	public Boolean getNotCurrentlyAnInpatient()
	{
		return this.notcurrentlyaninpatient;
	}
	public void setNotCurrentlyAnInpatient(Boolean value)
	{
		this.isValidated = false;
		this.notcurrentlyaninpatient = value;
	}
	public boolean getExpectedHospitalIsNotNull()
	{
		return this.expectedhospital != null;
	}
	public ims.core.vo.LocationLiteVo getExpectedHospital()
	{
		return this.expectedhospital;
	}
	public void setExpectedHospital(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.expectedhospital = value;
	}
	public boolean getExpectedWardIsNotNull()
	{
		return this.expectedward != null;
	}
	public ims.core.vo.LocationLiteVo getExpectedWard()
	{
		return this.expectedward;
	}
	public void setExpectedWard(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.expectedward = value;
	}
	public boolean getExpectedDateIsNotNull()
	{
		return this.expecteddate != null;
	}
	public ims.framework.utils.Date getExpectedDate()
	{
		return this.expecteddate;
	}
	public void setExpectedDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.expecteddate = value;
	}
	public boolean getExcludeEndoscopyProceduresIsNotNull()
	{
		return this.excludeendoscopyprocedures != null;
	}
	public Boolean getExcludeEndoscopyProcedures()
	{
		return this.excludeendoscopyprocedures;
	}
	public void setExcludeEndoscopyProcedures(Boolean value)
	{
		this.isValidated = false;
		this.excludeendoscopyprocedures = value;
	}
	public boolean getListOnlyEndoscopyProceduresIsNotNull()
	{
		return this.listonlyendoscopyprocedures != null;
	}
	public Boolean getListOnlyEndoscopyProcedures()
	{
		return this.listonlyendoscopyprocedures;
	}
	public void setListOnlyEndoscopyProcedures(Boolean value)
	{
		this.isValidated = false;
		this.listonlyendoscopyprocedures = value;
	}
	public boolean getServicesIsNotNull()
	{
		return this.services != null;
	}
	public ims.core.vo.ServiceShortVoCollection getServices()
	{
		return this.services;
	}
	public void setServices(ims.core.vo.ServiceShortVoCollection value)
	{
		this.isValidated = false;
		this.services = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof PendingEmergencyTheatreWorklistSearchCriteriaVo))
			return false;
		PendingEmergencyTheatreWorklistSearchCriteriaVo compareObj = (PendingEmergencyTheatreWorklistSearchCriteriaVo)obj;
		if(this.getResponsibleHCP() == null && compareObj.getResponsibleHCP() != null)
			return false;
		if(this.getResponsibleHCP() != null && compareObj.getResponsibleHCP() == null)
			return false;
		if(this.getResponsibleHCP() != null && compareObj.getResponsibleHCP() != null)
			if(!this.getResponsibleHCP().equals(compareObj.getResponsibleHCP()))
				return false;
		if(this.getUrgencyCategory() == null && compareObj.getUrgencyCategory() != null)
			return false;
		if(this.getUrgencyCategory() != null && compareObj.getUrgencyCategory() == null)
			return false;
		if(this.getUrgencyCategory() != null && compareObj.getUrgencyCategory() != null)
			if(!this.getUrgencyCategory().equals(compareObj.getUrgencyCategory()))
				return false;
		if(this.getInpatientsOnly() == null && compareObj.getInpatientsOnly() != null)
			return false;
		if(this.getInpatientsOnly() != null && compareObj.getInpatientsOnly() == null)
			return false;
		if(this.getInpatientsOnly() != null && compareObj.getInpatientsOnly() != null)
			if(!this.getInpatientsOnly().equals(compareObj.getInpatientsOnly()))
				return false;
		if(this.getNotCurrentlyAnInpatient() == null && compareObj.getNotCurrentlyAnInpatient() != null)
			return false;
		if(this.getNotCurrentlyAnInpatient() != null && compareObj.getNotCurrentlyAnInpatient() == null)
			return false;
		if(this.getNotCurrentlyAnInpatient() != null && compareObj.getNotCurrentlyAnInpatient() != null)
			if(!this.getNotCurrentlyAnInpatient().equals(compareObj.getNotCurrentlyAnInpatient()))
				return false;
		if(this.getExpectedHospital() == null && compareObj.getExpectedHospital() != null)
			return false;
		if(this.getExpectedHospital() != null && compareObj.getExpectedHospital() == null)
			return false;
		if(this.getExpectedHospital() != null && compareObj.getExpectedHospital() != null)
			if(!this.getExpectedHospital().equals(compareObj.getExpectedHospital()))
				return false;
		if(this.getExpectedWard() == null && compareObj.getExpectedWard() != null)
			return false;
		if(this.getExpectedWard() != null && compareObj.getExpectedWard() == null)
			return false;
		if(this.getExpectedWard() != null && compareObj.getExpectedWard() != null)
			if(!this.getExpectedWard().equals(compareObj.getExpectedWard()))
				return false;
		if(this.getExpectedDate() == null && compareObj.getExpectedDate() != null)
			return false;
		if(this.getExpectedDate() != null && compareObj.getExpectedDate() == null)
			return false;
		if(this.getExpectedDate() != null && compareObj.getExpectedDate() != null)
			if(!this.getExpectedDate().equals(compareObj.getExpectedDate()))
				return false;
		if(this.getExcludeEndoscopyProcedures() == null && compareObj.getExcludeEndoscopyProcedures() != null)
			return false;
		if(this.getExcludeEndoscopyProcedures() != null && compareObj.getExcludeEndoscopyProcedures() == null)
			return false;
		if(this.getExcludeEndoscopyProcedures() != null && compareObj.getExcludeEndoscopyProcedures() != null)
			if(!this.getExcludeEndoscopyProcedures().equals(compareObj.getExcludeEndoscopyProcedures()))
				return false;
		if(this.getListOnlyEndoscopyProcedures() == null && compareObj.getListOnlyEndoscopyProcedures() != null)
			return false;
		if(this.getListOnlyEndoscopyProcedures() != null && compareObj.getListOnlyEndoscopyProcedures() == null)
			return false;
		if(this.getListOnlyEndoscopyProcedures() != null && compareObj.getListOnlyEndoscopyProcedures() != null)
			if(!this.getListOnlyEndoscopyProcedures().equals(compareObj.getListOnlyEndoscopyProcedures()))
				return false;
		if(this.getServices() == null && compareObj.getServices() != null)
			return false;
		if(this.getServices() != null && compareObj.getServices() == null)
			return false;
		if(this.getServices() != null && compareObj.getServices() != null)
			return this.getServices().equals(compareObj.getServices());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PendingEmergencyTheatreWorklistSearchCriteriaVo clone = new PendingEmergencyTheatreWorklistSearchCriteriaVo();
		
		if(this.responsiblehcp == null)
			clone.responsiblehcp = null;
		else
			clone.responsiblehcp = (ims.core.vo.Hcp)this.responsiblehcp.clone();
		if(this.urgencycategory == null)
			clone.urgencycategory = null;
		else
			clone.urgencycategory = (ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)this.urgencycategory.clone();
		clone.inpatientsonly = this.inpatientsonly;
		clone.notcurrentlyaninpatient = this.notcurrentlyaninpatient;
		if(this.expectedhospital == null)
			clone.expectedhospital = null;
		else
			clone.expectedhospital = (ims.core.vo.LocationLiteVo)this.expectedhospital.clone();
		if(this.expectedward == null)
			clone.expectedward = null;
		else
			clone.expectedward = (ims.core.vo.LocationLiteVo)this.expectedward.clone();
		if(this.expecteddate == null)
			clone.expecteddate = null;
		else
			clone.expecteddate = (ims.framework.utils.Date)this.expecteddate.clone();
		clone.excludeendoscopyprocedures = this.excludeendoscopyprocedures;
		clone.listonlyendoscopyprocedures = this.listonlyendoscopyprocedures;
		if(this.services == null)
			clone.services = null;
		else
			clone.services = (ims.core.vo.ServiceShortVoCollection)this.services.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PendingEmergencyTheatreWorklistSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PendingEmergencyTheatreWorklistSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PendingEmergencyTheatreWorklistSearchCriteriaVo compareObj = (PendingEmergencyTheatreWorklistSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getResponsibleHCP() == null && compareObj.getResponsibleHCP() != null)
				return -1;
			if(this.getResponsibleHCP() != null && compareObj.getResponsibleHCP() == null)
				return 1;
			if(this.getResponsibleHCP() != null && compareObj.getResponsibleHCP() != null)
				retVal = this.getResponsibleHCP().compareTo(compareObj.getResponsibleHCP());
		}
		if (retVal == 0)
		{
			if(this.getUrgencyCategory() == null && compareObj.getUrgencyCategory() != null)
				return -1;
			if(this.getUrgencyCategory() != null && compareObj.getUrgencyCategory() == null)
				return 1;
			if(this.getUrgencyCategory() != null && compareObj.getUrgencyCategory() != null)
				retVal = this.getUrgencyCategory().compareTo(compareObj.getUrgencyCategory());
		}
		if (retVal == 0)
		{
			if(this.getInpatientsOnly() == null && compareObj.getInpatientsOnly() != null)
				return -1;
			if(this.getInpatientsOnly() != null && compareObj.getInpatientsOnly() == null)
				return 1;
			if(this.getInpatientsOnly() != null && compareObj.getInpatientsOnly() != null)
				retVal = this.getInpatientsOnly().compareTo(compareObj.getInpatientsOnly());
		}
		if (retVal == 0)
		{
			if(this.getNotCurrentlyAnInpatient() == null && compareObj.getNotCurrentlyAnInpatient() != null)
				return -1;
			if(this.getNotCurrentlyAnInpatient() != null && compareObj.getNotCurrentlyAnInpatient() == null)
				return 1;
			if(this.getNotCurrentlyAnInpatient() != null && compareObj.getNotCurrentlyAnInpatient() != null)
				retVal = this.getNotCurrentlyAnInpatient().compareTo(compareObj.getNotCurrentlyAnInpatient());
		}
		if (retVal == 0)
		{
			if(this.getExpectedHospital() == null && compareObj.getExpectedHospital() != null)
				return -1;
			if(this.getExpectedHospital() != null && compareObj.getExpectedHospital() == null)
				return 1;
			if(this.getExpectedHospital() != null && compareObj.getExpectedHospital() != null)
				retVal = this.getExpectedHospital().compareTo(compareObj.getExpectedHospital());
		}
		if (retVal == 0)
		{
			if(this.getExpectedWard() == null && compareObj.getExpectedWard() != null)
				return -1;
			if(this.getExpectedWard() != null && compareObj.getExpectedWard() == null)
				return 1;
			if(this.getExpectedWard() != null && compareObj.getExpectedWard() != null)
				retVal = this.getExpectedWard().compareTo(compareObj.getExpectedWard());
		}
		if (retVal == 0)
		{
			if(this.getExpectedDate() == null && compareObj.getExpectedDate() != null)
				return -1;
			if(this.getExpectedDate() != null && compareObj.getExpectedDate() == null)
				return 1;
			if(this.getExpectedDate() != null && compareObj.getExpectedDate() != null)
				retVal = this.getExpectedDate().compareTo(compareObj.getExpectedDate());
		}
		if (retVal == 0)
		{
			if(this.getExpectedDate() == null && compareObj.getExpectedDate() != null)
				return -1;
			if(this.getExpectedDate() != null && compareObj.getExpectedDate() == null)
				return 1;
			if(this.getExpectedDate() != null && compareObj.getExpectedDate() != null)
				retVal = this.getExpectedDate().compareTo(compareObj.getExpectedDate());
		}
		if (retVal == 0)
		{
			if(this.getExcludeEndoscopyProcedures() == null && compareObj.getExcludeEndoscopyProcedures() != null)
				return -1;
			if(this.getExcludeEndoscopyProcedures() != null && compareObj.getExcludeEndoscopyProcedures() == null)
				return 1;
			if(this.getExcludeEndoscopyProcedures() != null && compareObj.getExcludeEndoscopyProcedures() != null)
				retVal = this.getExcludeEndoscopyProcedures().compareTo(compareObj.getExcludeEndoscopyProcedures());
		}
		if (retVal == 0)
		{
			if(this.getListOnlyEndoscopyProcedures() == null && compareObj.getListOnlyEndoscopyProcedures() != null)
				return -1;
			if(this.getListOnlyEndoscopyProcedures() != null && compareObj.getListOnlyEndoscopyProcedures() == null)
				return 1;
			if(this.getListOnlyEndoscopyProcedures() != null && compareObj.getListOnlyEndoscopyProcedures() != null)
				retVal = this.getListOnlyEndoscopyProcedures().compareTo(compareObj.getListOnlyEndoscopyProcedures());
		}
		if (retVal == 0)
		{
			if(this.getServices() == null && compareObj.getServices() != null)
				return -1;
			if(this.getServices() != null && compareObj.getServices() == null)
				return 1;
			if(this.getServices() != null && compareObj.getServices() != null)
				retVal = this.getServices().compareTo(compareObj.getServices());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.responsiblehcp != null)
			count++;
		if(this.urgencycategory != null)
			count++;
		if(this.inpatientsonly != null)
			count++;
		if(this.notcurrentlyaninpatient != null)
			count++;
		if(this.expectedhospital != null)
			count++;
		if(this.expectedward != null)
			count++;
		if(this.expecteddate != null)
			count++;
		if(this.excludeendoscopyprocedures != null)
			count++;
		if(this.listonlyendoscopyprocedures != null)
			count++;
		if(this.services != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.core.vo.Hcp responsiblehcp;
	protected ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory urgencycategory;
	protected Boolean inpatientsonly;
	protected Boolean notcurrentlyaninpatient;
	protected ims.core.vo.LocationLiteVo expectedhospital;
	protected ims.core.vo.LocationLiteVo expectedward;
	protected ims.framework.utils.Date expecteddate;
	protected Boolean excludeendoscopyprocedures;
	protected Boolean listonlyendoscopyprocedures;
	protected ims.core.vo.ServiceShortVoCollection services;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
