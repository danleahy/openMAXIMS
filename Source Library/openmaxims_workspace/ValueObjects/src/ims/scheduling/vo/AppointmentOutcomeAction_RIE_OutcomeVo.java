//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.AppointmentOutcomeAction business object (ID: 1090100020).
 */
public class AppointmentOutcomeAction_RIE_OutcomeVo extends ims.scheduling.vo.AppointmentOutcomeActionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AppointmentOutcomeAction_RIE_OutcomeVo()
	{
	}
	public AppointmentOutcomeAction_RIE_OutcomeVo(Integer id, int version)
	{
		super(id, version);
	}
	public AppointmentOutcomeAction_RIE_OutcomeVo(ims.scheduling.vo.beans.AppointmentOutcomeAction_RIE_OutcomeVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentaction = bean.getAppointmentAction() == null ? null : ims.scheduling.vo.lookups.AppointmentAction.buildLookup(bean.getAppointmentAction());
		this.outcomeofaction = bean.getOutcomeOfAction() == null ? null : ims.scheduling.vo.lookups.OutcomeAction.buildLookup(bean.getOutcomeOfAction());
		this.patientelectivelist = bean.getPatientElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getPatientElectiveList().getId()), bean.getPatientElectiveList().getVersion());
		this.futureappointmentdetail = bean.getFutureAppointmentDetail() == null ? null : new ims.scheduling.vo.FutureAppointmentDetailsRefVo(new Integer(bean.getFutureAppointmentDetail().getId()), bean.getFutureAppointmentDetail().getVersion());
		this.iptout = bean.getIPTOUT() == null ? null : new ims.RefMan.vo.InterProviderTransferOutRefVo(new Integer(bean.getIPTOUT().getId()), bean.getIPTOUT().getVersion());
		if(bean.getLinkedRequestForService() != null)
		{
			this.linkedrequestforservice = new ims.RefMan.vo.LinkedCatsReferralRefVoCollection();
			for(int linkedrequestforservice_i = 0; linkedrequestforservice_i < bean.getLinkedRequestForService().length; linkedrequestforservice_i++)
			{
				this.linkedrequestforservice.add(new ims.RefMan.vo.LinkedCatsReferralRefVo(new Integer(bean.getLinkedRequestForService()[linkedrequestforservice_i].getId()), bean.getLinkedRequestForService()[linkedrequestforservice_i].getVersion()));
			}
		}
		this.linkedtransferofcare = bean.getLinkedTransferOfCare() == null ? null : new ims.RefMan.vo.LinkedCatsReferralRefVo(new Integer(bean.getLinkedTransferOfCare().getId()), bean.getLinkedTransferOfCare().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.AppointmentOutcomeAction_RIE_OutcomeVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentaction = bean.getAppointmentAction() == null ? null : ims.scheduling.vo.lookups.AppointmentAction.buildLookup(bean.getAppointmentAction());
		this.outcomeofaction = bean.getOutcomeOfAction() == null ? null : ims.scheduling.vo.lookups.OutcomeAction.buildLookup(bean.getOutcomeOfAction());
		this.patientelectivelist = bean.getPatientElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getPatientElectiveList().getId()), bean.getPatientElectiveList().getVersion());
		this.futureappointmentdetail = bean.getFutureAppointmentDetail() == null ? null : new ims.scheduling.vo.FutureAppointmentDetailsRefVo(new Integer(bean.getFutureAppointmentDetail().getId()), bean.getFutureAppointmentDetail().getVersion());
		this.iptout = bean.getIPTOUT() == null ? null : new ims.RefMan.vo.InterProviderTransferOutRefVo(new Integer(bean.getIPTOUT().getId()), bean.getIPTOUT().getVersion());
		if(bean.getLinkedRequestForService() != null)
		{
			this.linkedrequestforservice = new ims.RefMan.vo.LinkedCatsReferralRefVoCollection();
			for(int linkedrequestforservice_i = 0; linkedrequestforservice_i < bean.getLinkedRequestForService().length; linkedrequestforservice_i++)
			{
				this.linkedrequestforservice.add(new ims.RefMan.vo.LinkedCatsReferralRefVo(new Integer(bean.getLinkedRequestForService()[linkedrequestforservice_i].getId()), bean.getLinkedRequestForService()[linkedrequestforservice_i].getVersion()));
			}
		}
		this.linkedtransferofcare = bean.getLinkedTransferOfCare() == null ? null : new ims.RefMan.vo.LinkedCatsReferralRefVo(new Integer(bean.getLinkedTransferOfCare().getId()), bean.getLinkedTransferOfCare().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.AppointmentOutcomeAction_RIE_OutcomeVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.AppointmentOutcomeAction_RIE_OutcomeVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.AppointmentOutcomeAction_RIE_OutcomeVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("APPOINTMENTACTION"))
			return getAppointmentAction();
		if(fieldName.equals("OUTCOMEOFACTION"))
			return getOutcomeOfAction();
		if(fieldName.equals("PATIENTELECTIVELIST"))
			return getPatientElectiveList();
		if(fieldName.equals("FUTUREAPPOINTMENTDETAIL"))
			return getFutureAppointmentDetail();
		if(fieldName.equals("IPTOUT"))
			return getIPTOUT();
		if(fieldName.equals("LINKEDREQUESTFORSERVICE"))
			return getLinkedRequestForService();
		if(fieldName.equals("LINKEDTRANSFEROFCARE"))
			return getLinkedTransferOfCare();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAppointmentActionIsNotNull()
	{
		return this.appointmentaction != null;
	}
	public ims.scheduling.vo.lookups.AppointmentAction getAppointmentAction()
	{
		return this.appointmentaction;
	}
	public void setAppointmentAction(ims.scheduling.vo.lookups.AppointmentAction value)
	{
		this.isValidated = false;
		this.appointmentaction = value;
	}
	public boolean getOutcomeOfActionIsNotNull()
	{
		return this.outcomeofaction != null;
	}
	public ims.scheduling.vo.lookups.OutcomeAction getOutcomeOfAction()
	{
		return this.outcomeofaction;
	}
	public void setOutcomeOfAction(ims.scheduling.vo.lookups.OutcomeAction value)
	{
		this.isValidated = false;
		this.outcomeofaction = value;
	}
	public boolean getPatientElectiveListIsNotNull()
	{
		return this.patientelectivelist != null;
	}
	public ims.RefMan.vo.PatientElectiveListRefVo getPatientElectiveList()
	{
		return this.patientelectivelist;
	}
	public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListRefVo value)
	{
		this.isValidated = false;
		this.patientelectivelist = value;
	}
	public boolean getFutureAppointmentDetailIsNotNull()
	{
		return this.futureappointmentdetail != null;
	}
	public ims.scheduling.vo.FutureAppointmentDetailsRefVo getFutureAppointmentDetail()
	{
		return this.futureappointmentdetail;
	}
	public void setFutureAppointmentDetail(ims.scheduling.vo.FutureAppointmentDetailsRefVo value)
	{
		this.isValidated = false;
		this.futureappointmentdetail = value;
	}
	public boolean getIPTOUTIsNotNull()
	{
		return this.iptout != null;
	}
	public ims.RefMan.vo.InterProviderTransferOutRefVo getIPTOUT()
	{
		return this.iptout;
	}
	public void setIPTOUT(ims.RefMan.vo.InterProviderTransferOutRefVo value)
	{
		this.isValidated = false;
		this.iptout = value;
	}
	public boolean getLinkedRequestForServiceIsNotNull()
	{
		return this.linkedrequestforservice != null;
	}
	public ims.RefMan.vo.LinkedCatsReferralRefVoCollection getLinkedRequestForService()
	{
		return this.linkedrequestforservice;
	}
	public void setLinkedRequestForService(ims.RefMan.vo.LinkedCatsReferralRefVoCollection value)
	{
		this.isValidated = false;
		this.linkedrequestforservice = value;
	}
	public boolean getLinkedTransferOfCareIsNotNull()
	{
		return this.linkedtransferofcare != null;
	}
	public ims.RefMan.vo.LinkedCatsReferralRefVo getLinkedTransferOfCare()
	{
		return this.linkedtransferofcare;
	}
	public void setLinkedTransferOfCare(ims.RefMan.vo.LinkedCatsReferralRefVo value)
	{
		this.isValidated = false;
		this.linkedtransferofcare = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AppointmentOutcomeAction_RIE_OutcomeVo clone = new AppointmentOutcomeAction_RIE_OutcomeVo(this.id, this.version);
		
		if(this.appointmentaction == null)
			clone.appointmentaction = null;
		else
			clone.appointmentaction = (ims.scheduling.vo.lookups.AppointmentAction)this.appointmentaction.clone();
		if(this.outcomeofaction == null)
			clone.outcomeofaction = null;
		else
			clone.outcomeofaction = (ims.scheduling.vo.lookups.OutcomeAction)this.outcomeofaction.clone();
		clone.patientelectivelist = this.patientelectivelist;
		clone.futureappointmentdetail = this.futureappointmentdetail;
		clone.iptout = this.iptout;
		clone.linkedrequestforservice = this.linkedrequestforservice;
		clone.linkedtransferofcare = this.linkedtransferofcare;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AppointmentOutcomeAction_RIE_OutcomeVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AppointmentOutcomeAction_RIE_OutcomeVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AppointmentOutcomeAction_RIE_OutcomeVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AppointmentOutcomeAction_RIE_OutcomeVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentaction != null)
			count++;
		if(this.outcomeofaction != null)
			count++;
		if(this.patientelectivelist != null)
			count++;
		if(this.futureappointmentdetail != null)
			count++;
		if(this.iptout != null)
			count++;
		if(this.linkedrequestforservice != null)
			count++;
		if(this.linkedtransferofcare != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.scheduling.vo.lookups.AppointmentAction appointmentaction;
	protected ims.scheduling.vo.lookups.OutcomeAction outcomeofaction;
	protected ims.RefMan.vo.PatientElectiveListRefVo patientelectivelist;
	protected ims.scheduling.vo.FutureAppointmentDetailsRefVo futureappointmentdetail;
	protected ims.RefMan.vo.InterProviderTransferOutRefVo iptout;
	protected ims.RefMan.vo.LinkedCatsReferralRefVoCollection linkedrequestforservice;
	protected ims.RefMan.vo.LinkedCatsReferralRefVo linkedtransferofcare;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
