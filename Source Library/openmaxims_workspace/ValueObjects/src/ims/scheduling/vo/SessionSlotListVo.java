//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Session_Slot business object (ID: 1055100016).
 */
public class SessionSlotListVo extends ims.scheduling.vo.Session_SlotRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SessionSlotListVo()
	{
	}
	public SessionSlotListVo(Integer id, int version)
	{
		super(id, version);
	}
	public SessionSlotListVo(ims.scheduling.vo.beans.SessionSlotListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo();
		this.priority = bean.getPriority() == null ? null : ims.scheduling.vo.lookups.SchedulingPriority.buildLookup(bean.getPriority());
		this.comment = bean.getComment();
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo();
		this.functions = ims.core.vo.ServiceFunctionLiteVoCollection.buildFromBeanCollection(bean.getFunctions());
		this.directaccessslot = bean.getDirectAccessSlot() == null ? null : ims.scheduling.vo.lookups.SchedCABSlotType.buildLookup(bean.getDirectAccessSlot());
		this.duration = bean.getDuration();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.SessionSlotListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo(map);
		this.priority = bean.getPriority() == null ? null : ims.scheduling.vo.lookups.SchedulingPriority.buildLookup(bean.getPriority());
		this.comment = bean.getComment();
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo(map);
		this.functions = ims.core.vo.ServiceFunctionLiteVoCollection.buildFromBeanCollection(bean.getFunctions());
		this.directaccessslot = bean.getDirectAccessSlot() == null ? null : ims.scheduling.vo.lookups.SchedCABSlotType.buildLookup(bean.getDirectAccessSlot());
		this.duration = bean.getDuration();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.SessionSlotListVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.SessionSlotListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.SessionSlotListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("STARTTM"))
			return getStartTm();
		if(fieldName.equals("SESSION"))
			return getSession();
		if(fieldName.equals("PRIORITY"))
			return getPriority();
		if(fieldName.equals("COMMENT"))
			return getComment();
		if(fieldName.equals("ACTIVITY"))
			return getActivity();
		if(fieldName.equals("FUNCTIONS"))
			return getFunctions();
		if(fieldName.equals("DIRECTACCESSSLOT"))
			return getDirectAccessSlot();
		if(fieldName.equals("DURATION"))
			return getDuration();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getStartTmIsNotNull()
	{
		return this.starttm != null;
	}
	public ims.framework.utils.Time getStartTm()
	{
		return this.starttm;
	}
	public void setStartTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttm = value;
	}
	public boolean getSessionIsNotNull()
	{
		return this.session != null;
	}
	public ims.scheduling.vo.SessionListVo getSession()
	{
		return this.session;
	}
	public void setSession(ims.scheduling.vo.SessionListVo value)
	{
		this.isValidated = false;
		this.session = value;
	}
	public boolean getPriorityIsNotNull()
	{
		return this.priority != null;
	}
	public ims.scheduling.vo.lookups.SchedulingPriority getPriority()
	{
		return this.priority;
	}
	public void setPriority(ims.scheduling.vo.lookups.SchedulingPriority value)
	{
		this.isValidated = false;
		this.priority = value;
	}
	public boolean getCommentIsNotNull()
	{
		return this.comment != null;
	}
	public String getComment()
	{
		return this.comment;
	}
	public static int getCommentMaxLength()
	{
		return 500;
	}
	public void setComment(String value)
	{
		this.isValidated = false;
		this.comment = value;
	}
	public boolean getActivityIsNotNull()
	{
		return this.activity != null;
	}
	public ims.core.vo.ActivityForSessionManagementVo getActivity()
	{
		return this.activity;
	}
	public void setActivity(ims.core.vo.ActivityForSessionManagementVo value)
	{
		this.isValidated = false;
		this.activity = value;
	}
	public boolean getFunctionsIsNotNull()
	{
		return this.functions != null;
	}
	public ims.core.vo.ServiceFunctionLiteVoCollection getFunctions()
	{
		return this.functions;
	}
	public void setFunctions(ims.core.vo.ServiceFunctionLiteVoCollection value)
	{
		this.isValidated = false;
		this.functions = value;
	}
	public boolean getDirectAccessSlotIsNotNull()
	{
		return this.directaccessslot != null;
	}
	public ims.scheduling.vo.lookups.SchedCABSlotType getDirectAccessSlot()
	{
		return this.directaccessslot;
	}
	public void setDirectAccessSlot(ims.scheduling.vo.lookups.SchedCABSlotType value)
	{
		this.isValidated = false;
		this.directaccessslot = value;
	}
	public boolean getDurationIsNotNull()
	{
		return this.duration != null;
	}
	public Integer getDuration()
	{
		return this.duration;
	}
	public void setDuration(Integer value)
	{
		this.isValidated = false;
		this.duration = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.comment != null)
			if(this.comment.length() > 500)
				listOfErrors.add("The length of the field [comment] in the value object [ims.scheduling.vo.SessionSlotListVo] is too big. It should be less or equal to 500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SessionSlotListVo clone = new SessionSlotListVo(this.id, this.version);
		
		if(this.starttm == null)
			clone.starttm = null;
		else
			clone.starttm = (ims.framework.utils.Time)this.starttm.clone();
		if(this.session == null)
			clone.session = null;
		else
			clone.session = (ims.scheduling.vo.SessionListVo)this.session.clone();
		if(this.priority == null)
			clone.priority = null;
		else
			clone.priority = (ims.scheduling.vo.lookups.SchedulingPriority)this.priority.clone();
		clone.comment = this.comment;
		if(this.activity == null)
			clone.activity = null;
		else
			clone.activity = (ims.core.vo.ActivityForSessionManagementVo)this.activity.clone();
		if(this.functions == null)
			clone.functions = null;
		else
			clone.functions = (ims.core.vo.ServiceFunctionLiteVoCollection)this.functions.clone();
		if(this.directaccessslot == null)
			clone.directaccessslot = null;
		else
			clone.directaccessslot = (ims.scheduling.vo.lookups.SchedCABSlotType)this.directaccessslot.clone();
		clone.duration = this.duration;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SessionSlotListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SessionSlotListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((SessionSlotListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((SessionSlotListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.starttm != null)
			count++;
		if(this.session != null)
			count++;
		if(this.priority != null)
			count++;
		if(this.comment != null)
			count++;
		if(this.activity != null)
			count++;
		if(this.functions != null)
			count++;
		if(this.directaccessslot != null)
			count++;
		if(this.duration != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.framework.utils.Time starttm;
	protected ims.scheduling.vo.SessionListVo session;
	protected ims.scheduling.vo.lookups.SchedulingPriority priority;
	protected String comment;
	protected ims.core.vo.ActivityForSessionManagementVo activity;
	protected ims.core.vo.ServiceFunctionLiteVoCollection functions;
	protected ims.scheduling.vo.lookups.SchedCABSlotType directaccessslot;
	protected Integer duration;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
