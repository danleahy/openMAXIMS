//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.ProfileRipple business object (ID: 1090100026).
 */
public class ProfileRippleVo extends ims.scheduling.vo.ProfileRippleRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ProfileRippleVo()
	{
	}
	public ProfileRippleVo(Integer id, int version)
	{
		super(id, version);
	}
	public ProfileRippleVo(ims.scheduling.vo.beans.ProfileRippleVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.datetimerequested = bean.getDateTimeRequested() == null ? null : bean.getDateTimeRequested().buildDateTime();
		this.effectivefromdate = bean.getEffectiveFromDate() == null ? null : bean.getEffectiveFromDate().buildDate();
		this.starttime = bean.getStartTime() == null ? null : bean.getStartTime().buildTime();
		this.endtime = bean.getEndTime() == null ? null : bean.getEndTime().buildTime();
		this.listowners = ims.scheduling.vo.Profile_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.inactiveslots = ims.scheduling.vo.Profile_SlotGenericVoCollection.buildFromBeanCollection(bean.getInactiveSlots());
		this.newslots = ims.scheduling.vo.Profile_SlotGenericVoCollection.buildFromBeanCollection(bean.getNewSlots());
		this.datetimeactivated = bean.getDateTimeActivated() == null ? null : bean.getDateTimeActivated().buildDateTime();
		this.numberofsessions = bean.getNumberOfSessions();
		this.profile = bean.getProfile() == null ? null : bean.getProfile().buildVo();
		this.active = bean.getActive();
		this.details = bean.getDetails();
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.scheduling.vo.lookups.CancelAppointmentReason.buildLookup(bean.getCancellationReason());
		this.name = bean.getName();
		this.description = bean.getDescription();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.ProfileRippleVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.datetimerequested = bean.getDateTimeRequested() == null ? null : bean.getDateTimeRequested().buildDateTime();
		this.effectivefromdate = bean.getEffectiveFromDate() == null ? null : bean.getEffectiveFromDate().buildDate();
		this.starttime = bean.getStartTime() == null ? null : bean.getStartTime().buildTime();
		this.endtime = bean.getEndTime() == null ? null : bean.getEndTime().buildTime();
		this.listowners = ims.scheduling.vo.Profile_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.inactiveslots = ims.scheduling.vo.Profile_SlotGenericVoCollection.buildFromBeanCollection(bean.getInactiveSlots());
		this.newslots = ims.scheduling.vo.Profile_SlotGenericVoCollection.buildFromBeanCollection(bean.getNewSlots());
		this.datetimeactivated = bean.getDateTimeActivated() == null ? null : bean.getDateTimeActivated().buildDateTime();
		this.numberofsessions = bean.getNumberOfSessions();
		this.profile = bean.getProfile() == null ? null : bean.getProfile().buildVo(map);
		this.active = bean.getActive();
		this.details = bean.getDetails();
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.scheduling.vo.lookups.CancelAppointmentReason.buildLookup(bean.getCancellationReason());
		this.name = bean.getName();
		this.description = bean.getDescription();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.ProfileRippleVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.ProfileRippleVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.ProfileRippleVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("DATETIMEREQUESTED"))
			return getDateTimeRequested();
		if(fieldName.equals("EFFECTIVEFROMDATE"))
			return getEffectiveFromDate();
		if(fieldName.equals("STARTTIME"))
			return getStartTime();
		if(fieldName.equals("ENDTIME"))
			return getEndTime();
		if(fieldName.equals("LISTOWNERS"))
			return getListOwners();
		if(fieldName.equals("INACTIVESLOTS"))
			return getInactiveSlots();
		if(fieldName.equals("NEWSLOTS"))
			return getNewSlots();
		if(fieldName.equals("DATETIMEACTIVATED"))
			return getDateTimeActivated();
		if(fieldName.equals("NUMBEROFSESSIONS"))
			return getNumberOfSessions();
		if(fieldName.equals("PROFILE"))
			return getProfile();
		if(fieldName.equals("ACTIVE"))
			return getActive();
		if(fieldName.equals("DETAILS"))
			return getDetails();
		if(fieldName.equals("CANCELLATIONREASON"))
			return getCancellationReason();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("DESCRIPTION"))
			return getDescription();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getDateTimeRequestedIsNotNull()
	{
		return this.datetimerequested != null;
	}
	public ims.framework.utils.DateTime getDateTimeRequested()
	{
		return this.datetimerequested;
	}
	public void setDateTimeRequested(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.datetimerequested = value;
	}
	public boolean getEffectiveFromDateIsNotNull()
	{
		return this.effectivefromdate != null;
	}
	public ims.framework.utils.Date getEffectiveFromDate()
	{
		return this.effectivefromdate;
	}
	public void setEffectiveFromDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.effectivefromdate = value;
	}
	public boolean getStartTimeIsNotNull()
	{
		return this.starttime != null;
	}
	public ims.framework.utils.Time getStartTime()
	{
		return this.starttime;
	}
	public void setStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttime = value;
	}
	public boolean getEndTimeIsNotNull()
	{
		return this.endtime != null;
	}
	public ims.framework.utils.Time getEndTime()
	{
		return this.endtime;
	}
	public void setEndTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.endtime = value;
	}
	public boolean getListOwnersIsNotNull()
	{
		return this.listowners != null;
	}
	public ims.scheduling.vo.Profile_ListOwnerVoCollection getListOwners()
	{
		return this.listowners;
	}
	public void setListOwners(ims.scheduling.vo.Profile_ListOwnerVoCollection value)
	{
		this.isValidated = false;
		this.listowners = value;
	}
	public boolean getInactiveSlotsIsNotNull()
	{
		return this.inactiveslots != null;
	}
	public ims.scheduling.vo.Profile_SlotGenericVoCollection getInactiveSlots()
	{
		return this.inactiveslots;
	}
	public void setInactiveSlots(ims.scheduling.vo.Profile_SlotGenericVoCollection value)
	{
		this.isValidated = false;
		this.inactiveslots = value;
	}
	public boolean getNewSlotsIsNotNull()
	{
		return this.newslots != null;
	}
	public ims.scheduling.vo.Profile_SlotGenericVoCollection getNewSlots()
	{
		return this.newslots;
	}
	public void setNewSlots(ims.scheduling.vo.Profile_SlotGenericVoCollection value)
	{
		this.isValidated = false;
		this.newslots = value;
	}
	public boolean getDateTimeActivatedIsNotNull()
	{
		return this.datetimeactivated != null;
	}
	public ims.framework.utils.DateTime getDateTimeActivated()
	{
		return this.datetimeactivated;
	}
	public void setDateTimeActivated(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.datetimeactivated = value;
	}
	public boolean getNumberOfSessionsIsNotNull()
	{
		return this.numberofsessions != null;
	}
	public Integer getNumberOfSessions()
	{
		return this.numberofsessions;
	}
	public void setNumberOfSessions(Integer value)
	{
		this.isValidated = false;
		this.numberofsessions = value;
	}
	public boolean getProfileIsNotNull()
	{
		return this.profile != null;
	}
	public ims.scheduling.vo.ProfileForProfileRippleVo getProfile()
	{
		return this.profile;
	}
	public void setProfile(ims.scheduling.vo.ProfileForProfileRippleVo value)
	{
		this.isValidated = false;
		this.profile = value;
	}
	public boolean getActiveIsNotNull()
	{
		return this.active != null;
	}
	public Boolean getActive()
	{
		return this.active;
	}
	public void setActive(Boolean value)
	{
		this.isValidated = false;
		this.active = value;
	}
	public boolean getDetailsIsNotNull()
	{
		return this.details != null;
	}
	public String getDetails()
	{
		return this.details;
	}
	public static int getDetailsMaxLength()
	{
		return 2000;
	}
	public void setDetails(String value)
	{
		this.isValidated = false;
		this.details = value;
	}
	public boolean getCancellationReasonIsNotNull()
	{
		return this.cancellationreason != null;
	}
	public ims.scheduling.vo.lookups.CancelAppointmentReason getCancellationReason()
	{
		return this.cancellationreason;
	}
	public void setCancellationReason(ims.scheduling.vo.lookups.CancelAppointmentReason value)
	{
		this.isValidated = false;
		this.cancellationreason = value;
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 100;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getDescriptionIsNotNull()
	{
		return this.description != null;
	}
	public String getDescription()
	{
		return this.description;
	}
	public static int getDescriptionMaxLength()
	{
		return 255;
	}
	public void setDescription(String value)
	{
		this.isValidated = false;
		this.description = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.listowners != null)
		{
			if(!this.listowners.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.inactiveslots != null)
		{
			if(!this.inactiveslots.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.newslots != null)
		{
			if(!this.newslots.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.profile != null)
		{
			if(!this.profile.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.datetimerequested == null)
			listOfErrors.add("Date Time Requested is mandatory");
		if(this.effectivefromdate == null)
			listOfErrors.add("'Effective From Date' is mandatory");
		if(this.listowners != null)
		{
			String[] listOfOtherErrors = this.listowners.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.inactiveslots != null)
		{
			String[] listOfOtherErrors = this.inactiveslots.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.newslots != null)
		{
			String[] listOfOtherErrors = this.newslots.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.profile == null)
			listOfErrors.add("Profile is mandatory");
		if(this.profile != null)
		{
			String[] listOfOtherErrors = this.profile.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.active == null)
			listOfErrors.add("Active is mandatory");
		if(this.details != null)
			if(this.details.length() > 2000)
				listOfErrors.add("The length of the field [details] in the value object [ims.scheduling.vo.ProfileRippleVo] is too big. It should be less or equal to 2000");
		if(this.name != null)
			if(this.name.length() > 100)
				listOfErrors.add("The length of the field [name] in the value object [ims.scheduling.vo.ProfileRippleVo] is too big. It should be less or equal to 100");
		if(this.description != null)
			if(this.description.length() > 255)
				listOfErrors.add("The length of the field [description] in the value object [ims.scheduling.vo.ProfileRippleVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ProfileRippleVo clone = new ProfileRippleVo(this.id, this.version);
		
		if(this.datetimerequested == null)
			clone.datetimerequested = null;
		else
			clone.datetimerequested = (ims.framework.utils.DateTime)this.datetimerequested.clone();
		if(this.effectivefromdate == null)
			clone.effectivefromdate = null;
		else
			clone.effectivefromdate = (ims.framework.utils.Date)this.effectivefromdate.clone();
		if(this.starttime == null)
			clone.starttime = null;
		else
			clone.starttime = (ims.framework.utils.Time)this.starttime.clone();
		if(this.endtime == null)
			clone.endtime = null;
		else
			clone.endtime = (ims.framework.utils.Time)this.endtime.clone();
		if(this.listowners == null)
			clone.listowners = null;
		else
			clone.listowners = (ims.scheduling.vo.Profile_ListOwnerVoCollection)this.listowners.clone();
		if(this.inactiveslots == null)
			clone.inactiveslots = null;
		else
			clone.inactiveslots = (ims.scheduling.vo.Profile_SlotGenericVoCollection)this.inactiveslots.clone();
		if(this.newslots == null)
			clone.newslots = null;
		else
			clone.newslots = (ims.scheduling.vo.Profile_SlotGenericVoCollection)this.newslots.clone();
		if(this.datetimeactivated == null)
			clone.datetimeactivated = null;
		else
			clone.datetimeactivated = (ims.framework.utils.DateTime)this.datetimeactivated.clone();
		clone.numberofsessions = this.numberofsessions;
		if(this.profile == null)
			clone.profile = null;
		else
			clone.profile = (ims.scheduling.vo.ProfileForProfileRippleVo)this.profile.clone();
		clone.active = this.active;
		clone.details = this.details;
		if(this.cancellationreason == null)
			clone.cancellationreason = null;
		else
			clone.cancellationreason = (ims.scheduling.vo.lookups.CancelAppointmentReason)this.cancellationreason.clone();
		clone.name = this.name;
		clone.description = this.description;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ProfileRippleVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ProfileRippleVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ProfileRippleVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ProfileRippleVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.datetimerequested != null)
			count++;
		if(this.effectivefromdate != null)
			count++;
		if(this.starttime != null)
			count++;
		if(this.endtime != null)
			count++;
		if(this.listowners != null)
			count++;
		if(this.inactiveslots != null)
			count++;
		if(this.newslots != null)
			count++;
		if(this.datetimeactivated != null)
			count++;
		if(this.numberofsessions != null)
			count++;
		if(this.profile != null)
			count++;
		if(this.active != null)
			count++;
		if(this.details != null)
			count++;
		if(this.cancellationreason != null)
			count++;
		if(this.name != null)
			count++;
		if(this.description != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 15;
	}
	protected ims.framework.utils.DateTime datetimerequested;
	protected ims.framework.utils.Date effectivefromdate;
	protected ims.framework.utils.Time starttime;
	protected ims.framework.utils.Time endtime;
	protected ims.scheduling.vo.Profile_ListOwnerVoCollection listowners;
	protected ims.scheduling.vo.Profile_SlotGenericVoCollection inactiveslots;
	protected ims.scheduling.vo.Profile_SlotGenericVoCollection newslots;
	protected ims.framework.utils.DateTime datetimeactivated;
	protected Integer numberofsessions;
	protected ims.scheduling.vo.ProfileForProfileRippleVo profile;
	protected Boolean active;
	protected String details;
	protected ims.scheduling.vo.lookups.CancelAppointmentReason cancellationreason;
	protected String name;
	protected String description;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
