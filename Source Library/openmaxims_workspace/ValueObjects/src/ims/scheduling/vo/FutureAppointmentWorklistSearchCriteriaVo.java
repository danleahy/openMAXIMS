//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;


public class FutureAppointmentWorklistSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public FutureAppointmentWorklistSearchCriteriaVo()
	{
	}
	public FutureAppointmentWorklistSearchCriteriaVo(ims.scheduling.vo.beans.FutureAppointmentWorklistSearchCriteriaVoBean bean)
	{
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.function = bean.getFunction() == null ? null : bean.getFunction().buildVo();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.consultant = bean.getConsultant();
		this.associatespecialist = bean.getAssociateSpecialist();
		this.spr = bean.getSPR();
		this.anydoctortosee = bean.getAnyDoctorToSee();
		this.otherhcp = bean.getOtherHCP();
		this.hcp = bean.getHCP() == null ? null : ims.core.vo.lookups.OtherHCP.buildLookup(bean.getHCP());
		this.delayedappointmentbookings = bean.getDelayedAppointmentBookings();
		this.delayedby = bean.getDelayedBy();
		this.delayedbytype = bean.getDelayedByType() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getDelayedByType());
		this.timeonlist = bean.getTimeOnList();
		this.timeonlisttype = bean.getTimeOnlistType() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getTimeOnlistType());
		this.status = bean.getStatus() == null ? null : ims.scheduling.vo.lookups.FutureAppointmentStatus.buildLookup(bean.getStatus());
		this.namedconsultant = bean.getNamedConsultant() == null ? null : bean.getNamedConsultant().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.FutureAppointmentWorklistSearchCriteriaVoBean bean)
	{
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.function = bean.getFunction() == null ? null : bean.getFunction().buildVo(map);
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.consultant = bean.getConsultant();
		this.associatespecialist = bean.getAssociateSpecialist();
		this.spr = bean.getSPR();
		this.anydoctortosee = bean.getAnyDoctorToSee();
		this.otherhcp = bean.getOtherHCP();
		this.hcp = bean.getHCP() == null ? null : ims.core.vo.lookups.OtherHCP.buildLookup(bean.getHCP());
		this.delayedappointmentbookings = bean.getDelayedAppointmentBookings();
		this.delayedby = bean.getDelayedBy();
		this.delayedbytype = bean.getDelayedByType() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getDelayedByType());
		this.timeonlist = bean.getTimeOnList();
		this.timeonlisttype = bean.getTimeOnlistType() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getTimeOnlistType());
		this.status = bean.getStatus() == null ? null : ims.scheduling.vo.lookups.FutureAppointmentStatus.buildLookup(bean.getStatus());
		this.namedconsultant = bean.getNamedConsultant() == null ? null : bean.getNamedConsultant().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.FutureAppointmentWorklistSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.FutureAppointmentWorklistSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.FutureAppointmentWorklistSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceLiteVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getFunctionIsNotNull()
	{
		return this.function != null;
	}
	public ims.core.vo.ServiceFunctionLiteVo getFunction()
	{
		return this.function;
	}
	public void setFunction(ims.core.vo.ServiceFunctionLiteVo value)
	{
		this.isValidated = false;
		this.function = value;
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getEndDateIsNotNull()
	{
		return this.enddate != null;
	}
	public ims.framework.utils.Date getEndDate()
	{
		return this.enddate;
	}
	public void setEndDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.enddate = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public Boolean getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(Boolean value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getAssociateSpecialistIsNotNull()
	{
		return this.associatespecialist != null;
	}
	public Boolean getAssociateSpecialist()
	{
		return this.associatespecialist;
	}
	public void setAssociateSpecialist(Boolean value)
	{
		this.isValidated = false;
		this.associatespecialist = value;
	}
	public boolean getSPRIsNotNull()
	{
		return this.spr != null;
	}
	public Boolean getSPR()
	{
		return this.spr;
	}
	public void setSPR(Boolean value)
	{
		this.isValidated = false;
		this.spr = value;
	}
	public boolean getAnyDoctorToSeeIsNotNull()
	{
		return this.anydoctortosee != null;
	}
	public Boolean getAnyDoctorToSee()
	{
		return this.anydoctortosee;
	}
	public void setAnyDoctorToSee(Boolean value)
	{
		this.isValidated = false;
		this.anydoctortosee = value;
	}
	public boolean getOtherHCPIsNotNull()
	{
		return this.otherhcp != null;
	}
	public Boolean getOtherHCP()
	{
		return this.otherhcp;
	}
	public void setOtherHCP(Boolean value)
	{
		this.isValidated = false;
		this.otherhcp = value;
	}
	public boolean getHCPIsNotNull()
	{
		return this.hcp != null;
	}
	public ims.core.vo.lookups.OtherHCP getHCP()
	{
		return this.hcp;
	}
	public void setHCP(ims.core.vo.lookups.OtherHCP value)
	{
		this.isValidated = false;
		this.hcp = value;
	}
	public boolean getDelayedAppointmentBookingsIsNotNull()
	{
		return this.delayedappointmentbookings != null;
	}
	public Boolean getDelayedAppointmentBookings()
	{
		return this.delayedappointmentbookings;
	}
	public void setDelayedAppointmentBookings(Boolean value)
	{
		this.isValidated = false;
		this.delayedappointmentbookings = value;
	}
	public boolean getDelayedByIsNotNull()
	{
		return this.delayedby != null;
	}
	public Integer getDelayedBy()
	{
		return this.delayedby;
	}
	public void setDelayedBy(Integer value)
	{
		this.isValidated = false;
		this.delayedby = value;
	}
	public boolean getDelayedByTypeIsNotNull()
	{
		return this.delayedbytype != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getDelayedByType()
	{
		return this.delayedbytype;
	}
	public void setDelayedByType(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.delayedbytype = value;
	}
	public boolean getTimeOnListIsNotNull()
	{
		return this.timeonlist != null;
	}
	public Integer getTimeOnList()
	{
		return this.timeonlist;
	}
	public void setTimeOnList(Integer value)
	{
		this.isValidated = false;
		this.timeonlist = value;
	}
	public boolean getTimeOnlistTypeIsNotNull()
	{
		return this.timeonlisttype != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getTimeOnlistType()
	{
		return this.timeonlisttype;
	}
	public void setTimeOnlistType(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.timeonlisttype = value;
	}
	public boolean getStatusIsNotNull()
	{
		return this.status != null;
	}
	public ims.scheduling.vo.lookups.FutureAppointmentStatus getStatus()
	{
		return this.status;
	}
	public void setStatus(ims.scheduling.vo.lookups.FutureAppointmentStatus value)
	{
		this.isValidated = false;
		this.status = value;
	}
	public boolean getNamedConsultantIsNotNull()
	{
		return this.namedconsultant != null;
	}
	public ims.core.vo.HcpLiteVo getNamedConsultant()
	{
		return this.namedconsultant;
	}
	public void setNamedConsultant(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.namedconsultant = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof FutureAppointmentWorklistSearchCriteriaVo))
			return false;
		FutureAppointmentWorklistSearchCriteriaVo compareObj = (FutureAppointmentWorklistSearchCriteriaVo)obj;
		if(this.getService() == null && compareObj.getService() != null)
			return false;
		if(this.getService() != null && compareObj.getService() == null)
			return false;
		if(this.getService() != null && compareObj.getService() != null)
			if(!this.getService().equals(compareObj.getService()))
				return false;
		if(this.getFunction() == null && compareObj.getFunction() != null)
			return false;
		if(this.getFunction() != null && compareObj.getFunction() == null)
			return false;
		if(this.getFunction() != null && compareObj.getFunction() != null)
			if(!this.getFunction().equals(compareObj.getFunction()))
				return false;
		if(this.getStartDate() == null && compareObj.getStartDate() != null)
			return false;
		if(this.getStartDate() != null && compareObj.getStartDate() == null)
			return false;
		if(this.getStartDate() != null && compareObj.getStartDate() != null)
			if(!this.getStartDate().equals(compareObj.getStartDate()))
				return false;
		if(this.getEndDate() == null && compareObj.getEndDate() != null)
			return false;
		if(this.getEndDate() != null && compareObj.getEndDate() == null)
			return false;
		if(this.getEndDate() != null && compareObj.getEndDate() != null)
			if(!this.getEndDate().equals(compareObj.getEndDate()))
				return false;
		if(this.getConsultant() == null && compareObj.getConsultant() != null)
			return false;
		if(this.getConsultant() != null && compareObj.getConsultant() == null)
			return false;
		if(this.getConsultant() != null && compareObj.getConsultant() != null)
			if(!this.getConsultant().equals(compareObj.getConsultant()))
				return false;
		if(this.getAssociateSpecialist() == null && compareObj.getAssociateSpecialist() != null)
			return false;
		if(this.getAssociateSpecialist() != null && compareObj.getAssociateSpecialist() == null)
			return false;
		if(this.getAssociateSpecialist() != null && compareObj.getAssociateSpecialist() != null)
			if(!this.getAssociateSpecialist().equals(compareObj.getAssociateSpecialist()))
				return false;
		if(this.getSPR() == null && compareObj.getSPR() != null)
			return false;
		if(this.getSPR() != null && compareObj.getSPR() == null)
			return false;
		if(this.getSPR() != null && compareObj.getSPR() != null)
			if(!this.getSPR().equals(compareObj.getSPR()))
				return false;
		if(this.getAnyDoctorToSee() == null && compareObj.getAnyDoctorToSee() != null)
			return false;
		if(this.getAnyDoctorToSee() != null && compareObj.getAnyDoctorToSee() == null)
			return false;
		if(this.getAnyDoctorToSee() != null && compareObj.getAnyDoctorToSee() != null)
			if(!this.getAnyDoctorToSee().equals(compareObj.getAnyDoctorToSee()))
				return false;
		if(this.getOtherHCP() == null && compareObj.getOtherHCP() != null)
			return false;
		if(this.getOtherHCP() != null && compareObj.getOtherHCP() == null)
			return false;
		if(this.getOtherHCP() != null && compareObj.getOtherHCP() != null)
			if(!this.getOtherHCP().equals(compareObj.getOtherHCP()))
				return false;
		if(this.getHCP() == null && compareObj.getHCP() != null)
			return false;
		if(this.getHCP() != null && compareObj.getHCP() == null)
			return false;
		if(this.getHCP() != null && compareObj.getHCP() != null)
			if(!this.getHCP().equals(compareObj.getHCP()))
				return false;
		if(this.getDelayedAppointmentBookings() == null && compareObj.getDelayedAppointmentBookings() != null)
			return false;
		if(this.getDelayedAppointmentBookings() != null && compareObj.getDelayedAppointmentBookings() == null)
			return false;
		if(this.getDelayedAppointmentBookings() != null && compareObj.getDelayedAppointmentBookings() != null)
			if(!this.getDelayedAppointmentBookings().equals(compareObj.getDelayedAppointmentBookings()))
				return false;
		if(this.getDelayedBy() == null && compareObj.getDelayedBy() != null)
			return false;
		if(this.getDelayedBy() != null && compareObj.getDelayedBy() == null)
			return false;
		if(this.getDelayedBy() != null && compareObj.getDelayedBy() != null)
			if(!this.getDelayedBy().equals(compareObj.getDelayedBy()))
				return false;
		if(this.getDelayedByType() == null && compareObj.getDelayedByType() != null)
			return false;
		if(this.getDelayedByType() != null && compareObj.getDelayedByType() == null)
			return false;
		if(this.getDelayedByType() != null && compareObj.getDelayedByType() != null)
			if(!this.getDelayedByType().equals(compareObj.getDelayedByType()))
				return false;
		if(this.getTimeOnList() == null && compareObj.getTimeOnList() != null)
			return false;
		if(this.getTimeOnList() != null && compareObj.getTimeOnList() == null)
			return false;
		if(this.getTimeOnList() != null && compareObj.getTimeOnList() != null)
			if(!this.getTimeOnList().equals(compareObj.getTimeOnList()))
				return false;
		if(this.getTimeOnlistType() == null && compareObj.getTimeOnlistType() != null)
			return false;
		if(this.getTimeOnlistType() != null && compareObj.getTimeOnlistType() == null)
			return false;
		if(this.getTimeOnlistType() != null && compareObj.getTimeOnlistType() != null)
			return this.getTimeOnlistType().equals(compareObj.getTimeOnlistType());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		FutureAppointmentWorklistSearchCriteriaVo clone = new FutureAppointmentWorklistSearchCriteriaVo();
		
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		if(this.function == null)
			clone.function = null;
		else
			clone.function = (ims.core.vo.ServiceFunctionLiteVo)this.function.clone();
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		if(this.enddate == null)
			clone.enddate = null;
		else
			clone.enddate = (ims.framework.utils.Date)this.enddate.clone();
		clone.consultant = this.consultant;
		clone.associatespecialist = this.associatespecialist;
		clone.spr = this.spr;
		clone.anydoctortosee = this.anydoctortosee;
		clone.otherhcp = this.otherhcp;
		if(this.hcp == null)
			clone.hcp = null;
		else
			clone.hcp = (ims.core.vo.lookups.OtherHCP)this.hcp.clone();
		clone.delayedappointmentbookings = this.delayedappointmentbookings;
		clone.delayedby = this.delayedby;
		if(this.delayedbytype == null)
			clone.delayedbytype = null;
		else
			clone.delayedbytype = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.delayedbytype.clone();
		clone.timeonlist = this.timeonlist;
		if(this.timeonlisttype == null)
			clone.timeonlisttype = null;
		else
			clone.timeonlisttype = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.timeonlisttype.clone();
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.scheduling.vo.lookups.FutureAppointmentStatus)this.status.clone();
		if(this.namedconsultant == null)
			clone.namedconsultant = null;
		else
			clone.namedconsultant = (ims.core.vo.HcpLiteVo)this.namedconsultant.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(FutureAppointmentWorklistSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A FutureAppointmentWorklistSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		FutureAppointmentWorklistSearchCriteriaVo compareObj = (FutureAppointmentWorklistSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getService() == null && compareObj.getService() != null)
				return -1;
			if(this.getService() != null && compareObj.getService() == null)
				return 1;
			if(this.getService() != null && compareObj.getService() != null)
				retVal = this.getService().compareTo(compareObj.getService());
		}
		if (retVal == 0)
		{
			if(this.getFunction() == null && compareObj.getFunction() != null)
				return -1;
			if(this.getFunction() != null && compareObj.getFunction() == null)
				return 1;
			if(this.getFunction() != null && compareObj.getFunction() != null)
				retVal = this.getFunction().compareTo(compareObj.getFunction());
		}
		if (retVal == 0)
		{
			if(this.getStartDate() == null && compareObj.getStartDate() != null)
				return -1;
			if(this.getStartDate() != null && compareObj.getStartDate() == null)
				return 1;
			if(this.getStartDate() != null && compareObj.getStartDate() != null)
				retVal = this.getStartDate().compareTo(compareObj.getStartDate());
		}
		if (retVal == 0)
		{
			if(this.getEndDate() == null && compareObj.getEndDate() != null)
				return -1;
			if(this.getEndDate() != null && compareObj.getEndDate() == null)
				return 1;
			if(this.getEndDate() != null && compareObj.getEndDate() != null)
				retVal = this.getEndDate().compareTo(compareObj.getEndDate());
		}
		if (retVal == 0)
		{
			if(this.getConsultant() == null && compareObj.getConsultant() != null)
				return -1;
			if(this.getConsultant() != null && compareObj.getConsultant() == null)
				return 1;
			if(this.getConsultant() != null && compareObj.getConsultant() != null)
				retVal = this.getConsultant().compareTo(compareObj.getConsultant());
		}
		if (retVal == 0)
		{
			if(this.getAssociateSpecialist() == null && compareObj.getAssociateSpecialist() != null)
				return -1;
			if(this.getAssociateSpecialist() != null && compareObj.getAssociateSpecialist() == null)
				return 1;
			if(this.getAssociateSpecialist() != null && compareObj.getAssociateSpecialist() != null)
				retVal = this.getAssociateSpecialist().compareTo(compareObj.getAssociateSpecialist());
		}
		if (retVal == 0)
		{
			if(this.getSPR() == null && compareObj.getSPR() != null)
				return -1;
			if(this.getSPR() != null && compareObj.getSPR() == null)
				return 1;
			if(this.getSPR() != null && compareObj.getSPR() != null)
				retVal = this.getSPR().compareTo(compareObj.getSPR());
		}
		if (retVal == 0)
		{
			if(this.getAnyDoctorToSee() == null && compareObj.getAnyDoctorToSee() != null)
				return -1;
			if(this.getAnyDoctorToSee() != null && compareObj.getAnyDoctorToSee() == null)
				return 1;
			if(this.getAnyDoctorToSee() != null && compareObj.getAnyDoctorToSee() != null)
				retVal = this.getAnyDoctorToSee().compareTo(compareObj.getAnyDoctorToSee());
		}
		if (retVal == 0)
		{
			if(this.getOtherHCP() == null && compareObj.getOtherHCP() != null)
				return -1;
			if(this.getOtherHCP() != null && compareObj.getOtherHCP() == null)
				return 1;
			if(this.getOtherHCP() != null && compareObj.getOtherHCP() != null)
				retVal = this.getOtherHCP().compareTo(compareObj.getOtherHCP());
		}
		if (retVal == 0)
		{
			if(this.getHCP() == null && compareObj.getHCP() != null)
				return -1;
			if(this.getHCP() != null && compareObj.getHCP() == null)
				return 1;
			if(this.getHCP() != null && compareObj.getHCP() != null)
				retVal = this.getHCP().compareTo(compareObj.getHCP());
		}
		if (retVal == 0)
		{
			if(this.getDelayedAppointmentBookings() == null && compareObj.getDelayedAppointmentBookings() != null)
				return -1;
			if(this.getDelayedAppointmentBookings() != null && compareObj.getDelayedAppointmentBookings() == null)
				return 1;
			if(this.getDelayedAppointmentBookings() != null && compareObj.getDelayedAppointmentBookings() != null)
				retVal = this.getDelayedAppointmentBookings().compareTo(compareObj.getDelayedAppointmentBookings());
		}
		if (retVal == 0)
		{
			if(this.getDelayedBy() == null && compareObj.getDelayedBy() != null)
				return -1;
			if(this.getDelayedBy() != null && compareObj.getDelayedBy() == null)
				return 1;
			if(this.getDelayedBy() != null && compareObj.getDelayedBy() != null)
				retVal = this.getDelayedBy().compareTo(compareObj.getDelayedBy());
		}
		if (retVal == 0)
		{
			if(this.getDelayedByType() == null && compareObj.getDelayedByType() != null)
				return -1;
			if(this.getDelayedByType() != null && compareObj.getDelayedByType() == null)
				return 1;
			if(this.getDelayedByType() != null && compareObj.getDelayedByType() != null)
				retVal = this.getDelayedByType().compareTo(compareObj.getDelayedByType());
		}
		if (retVal == 0)
		{
			if(this.getTimeOnList() == null && compareObj.getTimeOnList() != null)
				return -1;
			if(this.getTimeOnList() != null && compareObj.getTimeOnList() == null)
				return 1;
			if(this.getTimeOnList() != null && compareObj.getTimeOnList() != null)
				retVal = this.getTimeOnList().compareTo(compareObj.getTimeOnList());
		}
		if (retVal == 0)
		{
			if(this.getTimeOnlistType() == null && compareObj.getTimeOnlistType() != null)
				return -1;
			if(this.getTimeOnlistType() != null && compareObj.getTimeOnlistType() == null)
				return 1;
			if(this.getTimeOnlistType() != null && compareObj.getTimeOnlistType() != null)
				retVal = this.getTimeOnlistType().compareTo(compareObj.getTimeOnlistType());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.service != null)
			count++;
		if(this.function != null)
			count++;
		if(this.startdate != null)
			count++;
		if(this.enddate != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.associatespecialist != null)
			count++;
		if(this.spr != null)
			count++;
		if(this.anydoctortosee != null)
			count++;
		if(this.otherhcp != null)
			count++;
		if(this.hcp != null)
			count++;
		if(this.delayedappointmentbookings != null)
			count++;
		if(this.delayedby != null)
			count++;
		if(this.delayedbytype != null)
			count++;
		if(this.timeonlist != null)
			count++;
		if(this.timeonlisttype != null)
			count++;
		if(this.status != null)
			count++;
		if(this.namedconsultant != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 17;
	}
	protected ims.core.vo.ServiceLiteVo service;
	protected ims.core.vo.ServiceFunctionLiteVo function;
	protected ims.framework.utils.Date startdate;
	protected ims.framework.utils.Date enddate;
	protected Boolean consultant;
	protected Boolean associatespecialist;
	protected Boolean spr;
	protected Boolean anydoctortosee;
	protected Boolean otherhcp;
	protected ims.core.vo.lookups.OtherHCP hcp;
	protected Boolean delayedappointmentbookings;
	protected Integer delayedby;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths delayedbytype;
	protected Integer timeonlist;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths timeonlisttype;
	protected ims.scheduling.vo.lookups.FutureAppointmentStatus status;
	protected ims.core.vo.HcpLiteVo namedconsultant;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
