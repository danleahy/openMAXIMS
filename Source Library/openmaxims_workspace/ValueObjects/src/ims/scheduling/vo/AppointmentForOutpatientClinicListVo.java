//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Booking_Appointment business object (ID: 1055100007).
 */
public class AppointmentForOutpatientClinicListVo extends ims.scheduling.vo.Booking_AppointmentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AppointmentForOutpatientClinicListVo()
	{
	}
	public AppointmentForOutpatientClinicListVo(Integer id, int version)
	{
		super(id, version);
	}
	public AppointmentForOutpatientClinicListVo(ims.scheduling.vo.beans.AppointmentForOutpatientClinicListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.apptstatus = bean.getApptStatus() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatus());
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo();
		this.iscabbooking = bean.getIsCABBooking();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.outcome = bean.getOutcome() == null ? null : ims.scheduling.vo.lookups.ApptOutcome.buildLookup(bean.getOutcome());
		this.outcomecomments = bean.getOutcomeComments();
		this.haselectivelist = bean.getHasElectiveList();
		this.wasprinted = bean.getWasPrinted();
		this.bookingletter = bean.getBookingLetter() == null ? null : bean.getBookingLetter().buildVo();
		this.linkedappointments = ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection.buildFromBeanCollection(bean.getLinkedAppointments());
		this.electivelist = bean.getElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getElectiveList().getId()), bean.getElectiveList().getVersion());
		this.currentappttrakingstatus = bean.getCurrentApptTrakingStatus() == null ? null : bean.getCurrentApptTrakingStatus().buildVo();
		this.trackingstatuscolour = bean.getTrackingStatusColour() == null ? null : bean.getTrackingStatusColour().buildVo();
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo();
		this.bookingcomments = bean.getBookingComments();
		this.comments = bean.getComments();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.AppointmentForOutpatientClinicListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.apptstatus = bean.getApptStatus() == null ? null : ims.scheduling.vo.lookups.Status_Reason.buildLookup(bean.getApptStatus());
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo(map);
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo(map);
		this.iscabbooking = bean.getIsCABBooking();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.outcome = bean.getOutcome() == null ? null : ims.scheduling.vo.lookups.ApptOutcome.buildLookup(bean.getOutcome());
		this.outcomecomments = bean.getOutcomeComments();
		this.haselectivelist = bean.getHasElectiveList();
		this.wasprinted = bean.getWasPrinted();
		this.bookingletter = bean.getBookingLetter() == null ? null : bean.getBookingLetter().buildVo(map);
		this.linkedappointments = ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection.buildFromBeanCollection(bean.getLinkedAppointments());
		this.electivelist = bean.getElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getElectiveList().getId()), bean.getElectiveList().getVersion());
		this.currentappttrakingstatus = bean.getCurrentApptTrakingStatus() == null ? null : bean.getCurrentApptTrakingStatus().buildVo(map);
		this.trackingstatuscolour = bean.getTrackingStatusColour() == null ? null : bean.getTrackingStatusColour().buildVo(map);
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo(map);
		this.bookingcomments = bean.getBookingComments();
		this.comments = bean.getComments();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.AppointmentForOutpatientClinicListVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.AppointmentForOutpatientClinicListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.AppointmentForOutpatientClinicListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("APPOINTMENTDATE"))
			return getAppointmentDate();
		if(fieldName.equals("APPTSTARTTIME"))
			return getApptStartTime();
		if(fieldName.equals("APPTSTATUS"))
			return getApptStatus();
		if(fieldName.equals("ACTIVITY"))
			return getActivity();
		if(fieldName.equals("SESSION"))
			return getSession();
		if(fieldName.equals("ISCABBOOKING"))
			return getIsCABBooking();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("OUTCOME"))
			return getOutcome();
		if(fieldName.equals("OUTCOMECOMMENTS"))
			return getOutcomeComments();
		if(fieldName.equals("HASELECTIVELIST"))
			return getHasElectiveList();
		if(fieldName.equals("WASPRINTED"))
			return getWasPrinted();
		if(fieldName.equals("BOOKINGLETTER"))
			return getBookingLetter();
		if(fieldName.equals("LINKEDAPPOINTMENTS"))
			return getLinkedAppointments();
		if(fieldName.equals("ELECTIVELIST"))
			return getElectiveList();
		if(fieldName.equals("CURRENTAPPTTRAKINGSTATUS"))
			return getCurrentApptTrakingStatus();
		if(fieldName.equals("TRACKINGSTATUSCOLOUR"))
			return getTrackingStatusColour();
		if(fieldName.equals("REFERRAL"))
			return getReferral();
		if(fieldName.equals("BOOKINGCOMMENTS"))
			return getBookingComments();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAppointmentDateIsNotNull()
	{
		return this.appointmentdate != null;
	}
	public ims.framework.utils.Date getAppointmentDate()
	{
		return this.appointmentdate;
	}
	public void setAppointmentDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.appointmentdate = value;
	}
	public boolean getApptStartTimeIsNotNull()
	{
		return this.apptstarttime != null;
	}
	public ims.framework.utils.Time getApptStartTime()
	{
		return this.apptstarttime;
	}
	public void setApptStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.apptstarttime = value;
	}
	public boolean getApptStatusIsNotNull()
	{
		return this.apptstatus != null;
	}
	public ims.scheduling.vo.lookups.Status_Reason getApptStatus()
	{
		return this.apptstatus;
	}
	public void setApptStatus(ims.scheduling.vo.lookups.Status_Reason value)
	{
		this.isValidated = false;
		this.apptstatus = value;
	}
	public boolean getActivityIsNotNull()
	{
		return this.activity != null;
	}
	public ims.core.vo.ActivityForOutpatientClinicListVo getActivity()
	{
		return this.activity;
	}
	public void setActivity(ims.core.vo.ActivityForOutpatientClinicListVo value)
	{
		this.isValidated = false;
		this.activity = value;
	}
	public boolean getSessionIsNotNull()
	{
		return this.session != null;
	}
	public ims.scheduling.vo.SessionForOutpatientClinicListVo getSession()
	{
		return this.session;
	}
	public void setSession(ims.scheduling.vo.SessionForOutpatientClinicListVo value)
	{
		this.isValidated = false;
		this.session = value;
	}
	public boolean getIsCABBookingIsNotNull()
	{
		return this.iscabbooking != null;
	}
	public Boolean getIsCABBooking()
	{
		return this.iscabbooking;
	}
	public void setIsCABBooking(Boolean value)
	{
		this.isValidated = false;
		this.iscabbooking = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientLiteClinicListVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientLiteClinicListVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getOutcomeIsNotNull()
	{
		return this.outcome != null;
	}
	public ims.scheduling.vo.lookups.ApptOutcome getOutcome()
	{
		return this.outcome;
	}
	public void setOutcome(ims.scheduling.vo.lookups.ApptOutcome value)
	{
		this.isValidated = false;
		this.outcome = value;
	}
	public boolean getOutcomeCommentsIsNotNull()
	{
		return this.outcomecomments != null;
	}
	public String getOutcomeComments()
	{
		return this.outcomecomments;
	}
	public static int getOutcomeCommentsMaxLength()
	{
		return 500;
	}
	public void setOutcomeComments(String value)
	{
		this.isValidated = false;
		this.outcomecomments = value;
	}
	public boolean getHasElectiveListIsNotNull()
	{
		return this.haselectivelist != null;
	}
	public Boolean getHasElectiveList()
	{
		return this.haselectivelist;
	}
	public void setHasElectiveList(Boolean value)
	{
		this.isValidated = false;
		this.haselectivelist = value;
	}
	public boolean getWasPrintedIsNotNull()
	{
		return this.wasprinted != null;
	}
	public Boolean getWasPrinted()
	{
		return this.wasprinted;
	}
	public void setWasPrinted(Boolean value)
	{
		this.isValidated = false;
		this.wasprinted = value;
	}
	public boolean getBookingLetterIsNotNull()
	{
		return this.bookingletter != null;
	}
	public ims.core.vo.PatientDocumentForOutpatientClinicListVo getBookingLetter()
	{
		return this.bookingletter;
	}
	public void setBookingLetter(ims.core.vo.PatientDocumentForOutpatientClinicListVo value)
	{
		this.isValidated = false;
		this.bookingletter = value;
	}
	public boolean getLinkedAppointmentsIsNotNull()
	{
		return this.linkedappointments != null;
	}
	public ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection getLinkedAppointments()
	{
		return this.linkedappointments;
	}
	public void setLinkedAppointments(ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection value)
	{
		this.isValidated = false;
		this.linkedappointments = value;
	}
	public boolean getElectiveListIsNotNull()
	{
		return this.electivelist != null;
	}
	public ims.RefMan.vo.PatientElectiveListRefVo getElectiveList()
	{
		return this.electivelist;
	}
	public void setElectiveList(ims.RefMan.vo.PatientElectiveListRefVo value)
	{
		this.isValidated = false;
		this.electivelist = value;
	}
	public boolean getCurrentApptTrakingStatusIsNotNull()
	{
		return this.currentappttrakingstatus != null;
	}
	public ims.scheduling.vo.Appt_Tracking_Status_HistoryVo getCurrentApptTrakingStatus()
	{
		return this.currentappttrakingstatus;
	}
	public void setCurrentApptTrakingStatus(ims.scheduling.vo.Appt_Tracking_Status_HistoryVo value)
	{
		this.isValidated = false;
		this.currentappttrakingstatus = value;
	}
	public boolean getTrackingStatusColourIsNotNull()
	{
		return this.trackingstatuscolour != null;
	}
	public ims.admin.vo.AppointmentTrackingstatusColourConfigVo getTrackingStatusColour()
	{
		return this.trackingstatuscolour;
	}
	public void setTrackingStatusColour(ims.admin.vo.AppointmentTrackingstatusColourConfigVo value)
	{
		this.isValidated = false;
		this.trackingstatuscolour = value;
	}
	public boolean getReferralIsNotNull()
	{
		return this.referral != null;
	}
	public ims.RefMan.vo.CatsReferralBreachDatesVo getReferral()
	{
		return this.referral;
	}
	public void setReferral(ims.RefMan.vo.CatsReferralBreachDatesVo value)
	{
		this.isValidated = false;
		this.referral = value;
	}
	public boolean getBookingCommentsIsNotNull()
	{
		return this.bookingcomments != null;
	}
	public String getBookingComments()
	{
		return this.bookingcomments;
	}
	public static int getBookingCommentsMaxLength()
	{
		return 255;
	}
	public void setBookingComments(String value)
	{
		this.isValidated = false;
		this.bookingcomments = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 500;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.outcomecomments != null)
			if(this.outcomecomments.length() > 500)
				listOfErrors.add("The length of the field [outcomecomments] in the value object [ims.scheduling.vo.AppointmentForOutpatientClinicListVo] is too big. It should be less or equal to 500");
		if(this.comments != null)
			if(this.comments.length() > 500)
				listOfErrors.add("The length of the field [comments] in the value object [ims.scheduling.vo.AppointmentForOutpatientClinicListVo] is too big. It should be less or equal to 500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AppointmentForOutpatientClinicListVo clone = new AppointmentForOutpatientClinicListVo(this.id, this.version);
		
		if(this.appointmentdate == null)
			clone.appointmentdate = null;
		else
			clone.appointmentdate = (ims.framework.utils.Date)this.appointmentdate.clone();
		if(this.apptstarttime == null)
			clone.apptstarttime = null;
		else
			clone.apptstarttime = (ims.framework.utils.Time)this.apptstarttime.clone();
		if(this.apptstatus == null)
			clone.apptstatus = null;
		else
			clone.apptstatus = (ims.scheduling.vo.lookups.Status_Reason)this.apptstatus.clone();
		if(this.activity == null)
			clone.activity = null;
		else
			clone.activity = (ims.core.vo.ActivityForOutpatientClinicListVo)this.activity.clone();
		if(this.session == null)
			clone.session = null;
		else
			clone.session = (ims.scheduling.vo.SessionForOutpatientClinicListVo)this.session.clone();
		clone.iscabbooking = this.iscabbooking;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientLiteClinicListVo)this.patient.clone();
		if(this.outcome == null)
			clone.outcome = null;
		else
			clone.outcome = (ims.scheduling.vo.lookups.ApptOutcome)this.outcome.clone();
		clone.outcomecomments = this.outcomecomments;
		clone.haselectivelist = this.haselectivelist;
		clone.wasprinted = this.wasprinted;
		if(this.bookingletter == null)
			clone.bookingletter = null;
		else
			clone.bookingletter = (ims.core.vo.PatientDocumentForOutpatientClinicListVo)this.bookingletter.clone();
		if(this.linkedappointments == null)
			clone.linkedappointments = null;
		else
			clone.linkedappointments = (ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection)this.linkedappointments.clone();
		clone.electivelist = this.electivelist;
		if(this.currentappttrakingstatus == null)
			clone.currentappttrakingstatus = null;
		else
			clone.currentappttrakingstatus = (ims.scheduling.vo.Appt_Tracking_Status_HistoryVo)this.currentappttrakingstatus.clone();
		if(this.trackingstatuscolour == null)
			clone.trackingstatuscolour = null;
		else
			clone.trackingstatuscolour = (ims.admin.vo.AppointmentTrackingstatusColourConfigVo)this.trackingstatuscolour.clone();
		if(this.referral == null)
			clone.referral = null;
		else
			clone.referral = (ims.RefMan.vo.CatsReferralBreachDatesVo)this.referral.clone();
		clone.bookingcomments = this.bookingcomments;
		clone.comments = this.comments;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AppointmentForOutpatientClinicListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AppointmentForOutpatientClinicListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AppointmentForOutpatientClinicListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AppointmentForOutpatientClinicListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentdate != null)
			count++;
		if(this.apptstarttime != null)
			count++;
		if(this.apptstatus != null)
			count++;
		if(this.activity != null)
			count++;
		if(this.session != null)
			count++;
		if(this.iscabbooking != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.outcome != null)
			count++;
		if(this.outcomecomments != null)
			count++;
		if(this.haselectivelist != null)
			count++;
		if(this.wasprinted != null)
			count++;
		if(this.bookingletter != null)
			count++;
		if(this.linkedappointments != null)
			count++;
		if(this.electivelist != null)
			count++;
		if(this.currentappttrakingstatus != null)
			count++;
		if(this.trackingstatuscolour != null)
			count++;
		if(this.referral != null)
			count++;
		if(this.bookingcomments != null)
			count++;
		if(this.comments != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 19;
	}
	protected ims.framework.utils.Date appointmentdate;
	protected ims.framework.utils.Time apptstarttime;
	protected ims.scheduling.vo.lookups.Status_Reason apptstatus;
	protected ims.core.vo.ActivityForOutpatientClinicListVo activity;
	protected ims.scheduling.vo.SessionForOutpatientClinicListVo session;
	protected Boolean iscabbooking;
	protected ims.core.vo.PatientLiteClinicListVo patient;
	protected ims.scheduling.vo.lookups.ApptOutcome outcome;
	protected String outcomecomments;
	protected Boolean haselectivelist;
	protected Boolean wasprinted;
	protected ims.core.vo.PatientDocumentForOutpatientClinicListVo bookingletter;
	protected ims.scheduling.vo.LinkedAppointmentsForClinicListWithICPActionsVoCollection linkedappointments;
	protected ims.RefMan.vo.PatientElectiveListRefVo electivelist;
	protected ims.scheduling.vo.Appt_Tracking_Status_HistoryVo currentappttrakingstatus;
	protected ims.admin.vo.AppointmentTrackingstatusColourConfigVo trackingstatuscolour;
	protected ims.RefMan.vo.CatsReferralBreachDatesVo referral;
	protected String bookingcomments;
	protected String comments;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
