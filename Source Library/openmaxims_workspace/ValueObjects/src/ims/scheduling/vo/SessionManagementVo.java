//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Sch_Session business object (ID: 1055100010).
 */
public class SessionManagementVo extends ims.scheduling.vo.Sch_SessionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SessionManagementVo()
	{
	}
	public SessionManagementVo(Integer id, int version)
	{
		super(id, version);
	}
	public SessionManagementVo(ims.scheduling.vo.beans.SessionManagementVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.sessionstatus = bean.getSessionStatus() == null ? null : ims.scheduling.vo.lookups.Session_Status_and_Reason.buildLookup(bean.getSessionStatus());
		this.remainingslots = bean.getRemainingSlots();
		this.totalslots = bean.getTotalSlots();
		this.remainingtime = bean.getRemainingTime();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo();
		this.sessiontype = bean.getSessionType() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getSessionType());
		this.listowners = ims.scheduling.vo.Session_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.directoryofservices = ims.scheduling.vo.DirectoryOfServiceVoCollection.buildFromBeanCollection(bean.getDirectoryofServices());
		this.wassessionmoved = bean.getWasSessionMoved();
		this.listtype = bean.getListType() == null ? null : ims.scheduling.vo.lookups.ProfileListType.buildLookup(bean.getListType());
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo();
		this.sessioncomment = bean.getSessionComment();
		this.isfixed = bean.getIsFixed();
		this.sessionactivities = ims.scheduling.vo.SessionActivityLiteVoCollection.buildFromBeanCollection(bean.getSessionActivities());
		this.sessionprofiletype = bean.getSessionProfileType() == null ? null : ims.scheduling.vo.lookups.SchProfileType.buildLookup(bean.getSessionProfileType());
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.scheduling.vo.lookups.CancelAppointmentReason.buildLookup(bean.getCancellationReason());
		this.comment = bean.getComment();
		this.sessionmove = ims.scheduling.vo.SessionMoveVoCollection.buildFromBeanCollection(bean.getSessionMove());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.SessionManagementVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.sessionstatus = bean.getSessionStatus() == null ? null : ims.scheduling.vo.lookups.Session_Status_and_Reason.buildLookup(bean.getSessionStatus());
		this.remainingslots = bean.getRemainingSlots();
		this.totalslots = bean.getTotalSlots();
		this.remainingtime = bean.getRemainingTime();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo(map);
		this.sessiontype = bean.getSessionType() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getSessionType());
		this.listowners = ims.scheduling.vo.Session_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.directoryofservices = ims.scheduling.vo.DirectoryOfServiceVoCollection.buildFromBeanCollection(bean.getDirectoryofServices());
		this.wassessionmoved = bean.getWasSessionMoved();
		this.listtype = bean.getListType() == null ? null : ims.scheduling.vo.lookups.ProfileListType.buildLookup(bean.getListType());
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo(map);
		this.sessioncomment = bean.getSessionComment();
		this.isfixed = bean.getIsFixed();
		this.sessionactivities = ims.scheduling.vo.SessionActivityLiteVoCollection.buildFromBeanCollection(bean.getSessionActivities());
		this.sessionprofiletype = bean.getSessionProfileType() == null ? null : ims.scheduling.vo.lookups.SchProfileType.buildLookup(bean.getSessionProfileType());
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.scheduling.vo.lookups.CancelAppointmentReason.buildLookup(bean.getCancellationReason());
		this.comment = bean.getComment();
		this.sessionmove = ims.scheduling.vo.SessionMoveVoCollection.buildFromBeanCollection(bean.getSessionMove());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.SessionManagementVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.SessionManagementVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.SessionManagementVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("SESSIONDATE"))
			return getSessionDate();
		if(fieldName.equals("STARTTM"))
			return getStartTm();
		if(fieldName.equals("ENDTM"))
			return getEndTm();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("SESSIONSTATUS"))
			return getSessionStatus();
		if(fieldName.equals("REMAININGSLOTS"))
			return getRemainingSlots();
		if(fieldName.equals("TOTALSLOTS"))
			return getTotalSlots();
		if(fieldName.equals("REMAININGTIME"))
			return getRemainingTime();
		if(fieldName.equals("SCHLOCATION"))
			return getSchLocation();
		if(fieldName.equals("SESSIONTYPE"))
			return getSessionType();
		if(fieldName.equals("LISTOWNERS"))
			return getListOwners();
		if(fieldName.equals("DIRECTORYOFSERVICES"))
			return getDirectoryofServices();
		if(fieldName.equals("WASSESSIONMOVED"))
			return getWasSessionMoved();
		if(fieldName.equals("LISTTYPE"))
			return getListType();
		if(fieldName.equals("RESPONSIBLEHCP"))
			return getResponsibleHCP();
		if(fieldName.equals("SESSIONCOMMENT"))
			return getSessionComment();
		if(fieldName.equals("ISFIXED"))
			return getIsFixed();
		if(fieldName.equals("SESSIONACTIVITIES"))
			return getSessionActivities();
		if(fieldName.equals("SESSIONPROFILETYPE"))
			return getSessionProfileType();
		if(fieldName.equals("CANCELLATIONREASON"))
			return getCancellationReason();
		if(fieldName.equals("COMMENT"))
			return getComment();
		if(fieldName.equals("SESSIONMOVE"))
			return getSessionMove();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 100;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getSessionDateIsNotNull()
	{
		return this.sessiondate != null;
	}
	public ims.framework.utils.Date getSessionDate()
	{
		return this.sessiondate;
	}
	public void setSessionDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.sessiondate = value;
	}
	public boolean getStartTmIsNotNull()
	{
		return this.starttm != null;
	}
	public ims.framework.utils.Time getStartTm()
	{
		return this.starttm;
	}
	public void setStartTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttm = value;
	}
	public boolean getEndTmIsNotNull()
	{
		return this.endtm != null;
	}
	public ims.framework.utils.Time getEndTm()
	{
		return this.endtm;
	}
	public void setEndTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.endtm = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceShortVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceShortVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getSessionStatusIsNotNull()
	{
		return this.sessionstatus != null;
	}
	public ims.scheduling.vo.lookups.Session_Status_and_Reason getSessionStatus()
	{
		return this.sessionstatus;
	}
	public void setSessionStatus(ims.scheduling.vo.lookups.Session_Status_and_Reason value)
	{
		this.isValidated = false;
		this.sessionstatus = value;
	}
	public boolean getRemainingSlotsIsNotNull()
	{
		return this.remainingslots != null;
	}
	public Integer getRemainingSlots()
	{
		return this.remainingslots;
	}
	public void setRemainingSlots(Integer value)
	{
		this.isValidated = false;
		this.remainingslots = value;
	}
	public boolean getTotalSlotsIsNotNull()
	{
		return this.totalslots != null;
	}
	public Integer getTotalSlots()
	{
		return this.totalslots;
	}
	public void setTotalSlots(Integer value)
	{
		this.isValidated = false;
		this.totalslots = value;
	}
	public boolean getRemainingTimeIsNotNull()
	{
		return this.remainingtime != null;
	}
	public Integer getRemainingTime()
	{
		return this.remainingtime;
	}
	public void setRemainingTime(Integer value)
	{
		this.isValidated = false;
		this.remainingtime = value;
	}
	public boolean getSchLocationIsNotNull()
	{
		return this.schlocation != null;
	}
	public ims.core.vo.LocationLiteVo getSchLocation()
	{
		return this.schlocation;
	}
	public void setSchLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.schlocation = value;
	}
	public boolean getSessionTypeIsNotNull()
	{
		return this.sessiontype != null;
	}
	public ims.scheduling.vo.lookups.Sched_Profile_Type getSessionType()
	{
		return this.sessiontype;
	}
	public void setSessionType(ims.scheduling.vo.lookups.Sched_Profile_Type value)
	{
		this.isValidated = false;
		this.sessiontype = value;
	}
	public boolean getListOwnersIsNotNull()
	{
		return this.listowners != null;
	}
	public ims.scheduling.vo.Session_ListOwnerVoCollection getListOwners()
	{
		return this.listowners;
	}
	public void setListOwners(ims.scheduling.vo.Session_ListOwnerVoCollection value)
	{
		this.isValidated = false;
		this.listowners = value;
	}
	public boolean getDirectoryofServicesIsNotNull()
	{
		return this.directoryofservices != null;
	}
	public ims.scheduling.vo.DirectoryOfServiceVoCollection getDirectoryofServices()
	{
		return this.directoryofservices;
	}
	public void setDirectoryofServices(ims.scheduling.vo.DirectoryOfServiceVoCollection value)
	{
		this.isValidated = false;
		this.directoryofservices = value;
	}
	public boolean getWasSessionMovedIsNotNull()
	{
		return this.wassessionmoved != null;
	}
	public Boolean getWasSessionMoved()
	{
		return this.wassessionmoved;
	}
	public void setWasSessionMoved(Boolean value)
	{
		this.isValidated = false;
		this.wassessionmoved = value;
	}
	public boolean getListTypeIsNotNull()
	{
		return this.listtype != null;
	}
	public ims.scheduling.vo.lookups.ProfileListType getListType()
	{
		return this.listtype;
	}
	public void setListType(ims.scheduling.vo.lookups.ProfileListType value)
	{
		this.isValidated = false;
		this.listtype = value;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.vo.HcpLiteVo getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean getSessionCommentIsNotNull()
	{
		return this.sessioncomment != null;
	}
	public String getSessionComment()
	{
		return this.sessioncomment;
	}
	public static int getSessionCommentMaxLength()
	{
		return 500;
	}
	public void setSessionComment(String value)
	{
		this.isValidated = false;
		this.sessioncomment = value;
	}
	public boolean getIsFixedIsNotNull()
	{
		return this.isfixed != null;
	}
	public Boolean getIsFixed()
	{
		return this.isfixed;
	}
	public void setIsFixed(Boolean value)
	{
		this.isValidated = false;
		this.isfixed = value;
	}
	public boolean getSessionActivitiesIsNotNull()
	{
		return this.sessionactivities != null;
	}
	public ims.scheduling.vo.SessionActivityLiteVoCollection getSessionActivities()
	{
		return this.sessionactivities;
	}
	public void setSessionActivities(ims.scheduling.vo.SessionActivityLiteVoCollection value)
	{
		this.isValidated = false;
		this.sessionactivities = value;
	}
	public boolean getSessionProfileTypeIsNotNull()
	{
		return this.sessionprofiletype != null;
	}
	public ims.scheduling.vo.lookups.SchProfileType getSessionProfileType()
	{
		return this.sessionprofiletype;
	}
	public void setSessionProfileType(ims.scheduling.vo.lookups.SchProfileType value)
	{
		this.isValidated = false;
		this.sessionprofiletype = value;
	}
	public boolean getCancellationReasonIsNotNull()
	{
		return this.cancellationreason != null;
	}
	public ims.scheduling.vo.lookups.CancelAppointmentReason getCancellationReason()
	{
		return this.cancellationreason;
	}
	public void setCancellationReason(ims.scheduling.vo.lookups.CancelAppointmentReason value)
	{
		this.isValidated = false;
		this.cancellationreason = value;
	}
	public boolean getCommentIsNotNull()
	{
		return this.comment != null;
	}
	public String getComment()
	{
		return this.comment;
	}
	public static int getCommentMaxLength()
	{
		return 255;
	}
	public void setComment(String value)
	{
		this.isValidated = false;
		this.comment = value;
	}
	public boolean getSessionMoveIsNotNull()
	{
		return this.sessionmove != null;
	}
	public ims.scheduling.vo.SessionMoveVoCollection getSessionMove()
	{
		return this.sessionmove;
	}
	public void setSessionMove(ims.scheduling.vo.SessionMoveVoCollection value)
	{
		this.isValidated = false;
		this.sessionmove = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name != null)
			if(this.name.length() > 100)
				listOfErrors.add("The length of the field [name] in the value object [ims.scheduling.vo.SessionManagementVo] is too big. It should be less or equal to 100");
		if(this.remainingslots == null)
			listOfErrors.add("RemainingSlots is mandatory");
		if(this.totalslots == null)
			listOfErrors.add("TotalSlots is mandatory");
		if(this.sessioncomment != null)
			if(this.sessioncomment.length() > 500)
				listOfErrors.add("The length of the field [sessioncomment] in the value object [ims.scheduling.vo.SessionManagementVo] is too big. It should be less or equal to 500");
		if(this.sessionprofiletype == null)
			listOfErrors.add("SessionProfileType is mandatory");
		if(this.comment != null)
			if(this.comment.length() > 255)
				listOfErrors.add("The length of the field [comment] in the value object [ims.scheduling.vo.SessionManagementVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SessionManagementVo clone = new SessionManagementVo(this.id, this.version);
		
		clone.name = this.name;
		if(this.sessiondate == null)
			clone.sessiondate = null;
		else
			clone.sessiondate = (ims.framework.utils.Date)this.sessiondate.clone();
		if(this.starttm == null)
			clone.starttm = null;
		else
			clone.starttm = (ims.framework.utils.Time)this.starttm.clone();
		if(this.endtm == null)
			clone.endtm = null;
		else
			clone.endtm = (ims.framework.utils.Time)this.endtm.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceShortVo)this.service.clone();
		if(this.sessionstatus == null)
			clone.sessionstatus = null;
		else
			clone.sessionstatus = (ims.scheduling.vo.lookups.Session_Status_and_Reason)this.sessionstatus.clone();
		clone.remainingslots = this.remainingslots;
		clone.totalslots = this.totalslots;
		clone.remainingtime = this.remainingtime;
		if(this.schlocation == null)
			clone.schlocation = null;
		else
			clone.schlocation = (ims.core.vo.LocationLiteVo)this.schlocation.clone();
		if(this.sessiontype == null)
			clone.sessiontype = null;
		else
			clone.sessiontype = (ims.scheduling.vo.lookups.Sched_Profile_Type)this.sessiontype.clone();
		if(this.listowners == null)
			clone.listowners = null;
		else
			clone.listowners = (ims.scheduling.vo.Session_ListOwnerVoCollection)this.listowners.clone();
		if(this.directoryofservices == null)
			clone.directoryofservices = null;
		else
			clone.directoryofservices = (ims.scheduling.vo.DirectoryOfServiceVoCollection)this.directoryofservices.clone();
		clone.wassessionmoved = this.wassessionmoved;
		if(this.listtype == null)
			clone.listtype = null;
		else
			clone.listtype = (ims.scheduling.vo.lookups.ProfileListType)this.listtype.clone();
		if(this.responsiblehcp == null)
			clone.responsiblehcp = null;
		else
			clone.responsiblehcp = (ims.core.vo.HcpLiteVo)this.responsiblehcp.clone();
		clone.sessioncomment = this.sessioncomment;
		clone.isfixed = this.isfixed;
		if(this.sessionactivities == null)
			clone.sessionactivities = null;
		else
			clone.sessionactivities = (ims.scheduling.vo.SessionActivityLiteVoCollection)this.sessionactivities.clone();
		if(this.sessionprofiletype == null)
			clone.sessionprofiletype = null;
		else
			clone.sessionprofiletype = (ims.scheduling.vo.lookups.SchProfileType)this.sessionprofiletype.clone();
		if(this.cancellationreason == null)
			clone.cancellationreason = null;
		else
			clone.cancellationreason = (ims.scheduling.vo.lookups.CancelAppointmentReason)this.cancellationreason.clone();
		clone.comment = this.comment;
		if(this.sessionmove == null)
			clone.sessionmove = null;
		else
			clone.sessionmove = (ims.scheduling.vo.SessionMoveVoCollection)this.sessionmove.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SessionManagementVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SessionManagementVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((SessionManagementVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((SessionManagementVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.name != null)
			count++;
		if(this.sessiondate != null)
			count++;
		if(this.starttm != null)
			count++;
		if(this.endtm != null)
			count++;
		if(this.service != null)
			count++;
		if(this.sessionstatus != null)
			count++;
		if(this.remainingslots != null)
			count++;
		if(this.totalslots != null)
			count++;
		if(this.remainingtime != null)
			count++;
		if(this.schlocation != null)
			count++;
		if(this.sessiontype != null)
			count++;
		if(this.listowners != null)
			count++;
		if(this.directoryofservices != null)
			count++;
		if(this.wassessionmoved != null)
			count++;
		if(this.listtype != null)
			count++;
		if(this.responsiblehcp != null)
			count++;
		if(this.sessioncomment != null)
			count++;
		if(this.isfixed != null)
			count++;
		if(this.sessionactivities != null)
			count++;
		if(this.sessionprofiletype != null)
			count++;
		if(this.cancellationreason != null)
			count++;
		if(this.comment != null)
			count++;
		if(this.sessionmove != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 23;
	}
	protected String name;
	protected ims.framework.utils.Date sessiondate;
	protected ims.framework.utils.Time starttm;
	protected ims.framework.utils.Time endtm;
	protected ims.core.vo.ServiceShortVo service;
	protected ims.scheduling.vo.lookups.Session_Status_and_Reason sessionstatus;
	protected Integer remainingslots;
	protected Integer totalslots;
	protected Integer remainingtime;
	protected ims.core.vo.LocationLiteVo schlocation;
	protected ims.scheduling.vo.lookups.Sched_Profile_Type sessiontype;
	protected ims.scheduling.vo.Session_ListOwnerVoCollection listowners;
	protected ims.scheduling.vo.DirectoryOfServiceVoCollection directoryofservices;
	protected Boolean wassessionmoved;
	protected ims.scheduling.vo.lookups.ProfileListType listtype;
	protected ims.core.vo.HcpLiteVo responsiblehcp;
	protected String sessioncomment;
	protected Boolean isfixed;
	protected ims.scheduling.vo.SessionActivityLiteVoCollection sessionactivities;
	protected ims.scheduling.vo.lookups.SchProfileType sessionprofiletype;
	protected ims.scheduling.vo.lookups.CancelAppointmentReason cancellationreason;
	protected String comment;
	protected ims.scheduling.vo.SessionMoveVoCollection sessionmove;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
