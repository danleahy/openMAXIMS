//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.TheatreBooking business object (ID: 1090100011).
 */
public class TheatreBookingLiteVo extends ims.scheduling.vo.TheatreBookingBaseVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TheatreBookingLiteVo()
	{
	}
	public TheatreBookingLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public TheatreBookingLiteVo(ims.scheduling.vo.beans.TheatreBookingLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.tcitime = bean.getTCITime() == null ? null : ims.scheduling.vo.lookups.TCITime.buildLookup(bean.getTCITime());
		// Interface field type not supported.
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo();
		this.suitableforsurgeryprocedure = bean.getSuitableForSurgeryProcedure();
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.state = bean.getState() == null ? null : ims.scheduling.vo.lookups.AcuteTheateListBookingState.buildLookup(bean.getState());
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo();
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.TheatreBookingLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.tcitime = bean.getTCITime() == null ? null : ims.scheduling.vo.lookups.TCITime.buildLookup(bean.getTCITime());
		// Interface field type not supported.
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo(map);
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo(map);
		this.suitableforsurgeryprocedure = bean.getSuitableForSurgeryProcedure();
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.state = bean.getState() == null ? null : ims.scheduling.vo.lookups.AcuteTheateListBookingState.buildLookup(bean.getState());
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo(map);
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.TheatreBookingLiteVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.TheatreBookingLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.TheatreBookingLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PROCEDURE"))
			return getProcedure();
		if(fieldName.equals("SESSION"))
			return getSession();
		if(fieldName.equals("SUITABLEFORSURGERYPROCEDURE"))
			return getSuitableForSurgeryProcedure();
		if(fieldName.equals("ANAESTHETICTYPE"))
			return getAnaestheticType();
		if(fieldName.equals("PROCLATERALITY"))
			return getProcLaterality();
		if(fieldName.equals("STATE"))
			return getState();
		if(fieldName.equals("SECONDARYPROCEDURE"))
			return getSecondaryProcedure();
		if(fieldName.equals("SECONDARYPROCLATERALITY"))
			return getSecondaryProcLaterality();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getProcedureIsNotNull()
	{
		return this.procedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getProcedure()
	{
		return this.procedure;
	}
	public void setProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.procedure = value;
	}
	public boolean getSessionIsNotNull()
	{
		return this.session != null;
	}
	public ims.scheduling.vo.SessionTheatreVo getSession()
	{
		return this.session;
	}
	public void setSession(ims.scheduling.vo.SessionTheatreVo value)
	{
		this.isValidated = false;
		this.session = value;
	}
	public boolean getSuitableForSurgeryProcedureIsNotNull()
	{
		return this.suitableforsurgeryprocedure != null;
	}
	public String getSuitableForSurgeryProcedure()
	{
		return this.suitableforsurgeryprocedure;
	}
	public static int getSuitableForSurgeryProcedureMaxLength()
	{
		return 255;
	}
	public void setSuitableForSurgeryProcedure(String value)
	{
		this.isValidated = false;
		this.suitableforsurgeryprocedure = value;
	}
	public boolean getAnaestheticTypeIsNotNull()
	{
		return this.anaesthetictype != null;
	}
	public ims.clinical.vo.lookups.AnaestheticType getAnaestheticType()
	{
		return this.anaesthetictype;
	}
	public void setAnaestheticType(ims.clinical.vo.lookups.AnaestheticType value)
	{
		this.isValidated = false;
		this.anaesthetictype = value;
	}
	public boolean getProcLateralityIsNotNull()
	{
		return this.proclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getProcLaterality()
	{
		return this.proclaterality;
	}
	public void setProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.proclaterality = value;
	}
	public boolean getStateIsNotNull()
	{
		return this.state != null;
	}
	public ims.scheduling.vo.lookups.AcuteTheateListBookingState getState()
	{
		return this.state;
	}
	public void setState(ims.scheduling.vo.lookups.AcuteTheateListBookingState value)
	{
		this.isValidated = false;
		this.state = value;
	}
	public boolean getSecondaryProcedureIsNotNull()
	{
		return this.secondaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getSecondaryProcedure()
	{
		return this.secondaryprocedure;
	}
	public void setSecondaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.secondaryprocedure = value;
	}
	public boolean getSecondaryProcLateralityIsNotNull()
	{
		return this.secondaryproclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getSecondaryProcLaterality()
	{
		return this.secondaryproclaterality;
	}
	public void setSecondaryProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.secondaryproclaterality = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.procedure != null)
		{
			if(!this.procedure.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.procedure != null)
		{
			String[] listOfOtherErrors = this.procedure.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.suitableforsurgeryprocedure != null)
			if(this.suitableforsurgeryprocedure.length() > 255)
				listOfErrors.add("The length of the field [suitableforsurgeryprocedure] in the value object [ims.scheduling.vo.TheatreBookingLiteVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TheatreBookingLiteVo clone = new TheatreBookingLiteVo(this.id, this.version);
		
		if(this.tcitime == null)
			clone.tcitime = null;
		else
			clone.tcitime = (ims.scheduling.vo.lookups.TCITime)this.tcitime.clone();
		clone.consultant = this.consultant;
		if(this.procedure == null)
			clone.procedure = null;
		else
			clone.procedure = (ims.core.vo.ProcedureLiteVo)this.procedure.clone();
		if(this.session == null)
			clone.session = null;
		else
			clone.session = (ims.scheduling.vo.SessionTheatreVo)this.session.clone();
		clone.suitableforsurgeryprocedure = this.suitableforsurgeryprocedure;
		if(this.anaesthetictype == null)
			clone.anaesthetictype = null;
		else
			clone.anaesthetictype = (ims.clinical.vo.lookups.AnaestheticType)this.anaesthetictype.clone();
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		if(this.state == null)
			clone.state = null;
		else
			clone.state = (ims.scheduling.vo.lookups.AcuteTheateListBookingState)this.state.clone();
		if(this.secondaryprocedure == null)
			clone.secondaryprocedure = null;
		else
			clone.secondaryprocedure = (ims.core.vo.ProcedureLiteVo)this.secondaryprocedure.clone();
		if(this.secondaryproclaterality == null)
			clone.secondaryproclaterality = null;
		else
			clone.secondaryproclaterality = (ims.core.vo.lookups.LateralityLRB)this.secondaryproclaterality.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TheatreBookingLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TheatreBookingLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TheatreBookingLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TheatreBookingLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.procedure != null)
			count++;
		if(this.session != null)
			count++;
		if(this.suitableforsurgeryprocedure != null)
			count++;
		if(this.anaesthetictype != null)
			count++;
		if(this.proclaterality != null)
			count++;
		if(this.state != null)
			count++;
		if(this.secondaryprocedure != null)
			count++;
		if(this.secondaryproclaterality != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 8;
	}
	protected ims.core.vo.ProcedureLiteVo procedure;
	protected ims.scheduling.vo.SessionTheatreVo session;
	protected String suitableforsurgeryprocedure;
	protected ims.clinical.vo.lookups.AnaestheticType anaesthetictype;
	protected ims.core.vo.lookups.LateralityLRB proclaterality;
	protected ims.scheduling.vo.lookups.AcuteTheateListBookingState state;
	protected ims.core.vo.ProcedureLiteVo secondaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB secondaryproclaterality;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
