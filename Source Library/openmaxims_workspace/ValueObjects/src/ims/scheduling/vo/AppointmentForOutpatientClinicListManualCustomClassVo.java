//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Booking_Appointment business object (ID: 1055100007).
 */
public class AppointmentForOutpatientClinicListManualCustomClassVo extends ims.scheduling.vo.Booking_AppointmentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AppointmentForOutpatientClinicListManualCustomClassVo()
	{
	}
	public AppointmentForOutpatientClinicListManualCustomClassVo(Integer id, int version)
	{
		super(id, version);
	}
	public AppointmentForOutpatientClinicListManualCustomClassVo(ims.scheduling.vo.beans.AppointmentForOutpatientClinicListManualCustomClassVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.appointmentstatusid = bean.getAppointmentStatusID();
		this.appointmentstatustext = bean.getAppointmentStatusText();
		this.appointmentactivityimage = bean.getAppointmentActivityImage();
		this.appointmentactivityname = bean.getAppointmentActivityName();
		this.sessionname = bean.getSessionName();
		this.iscabbooking = bean.getIsCABBooking();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.outcometext = bean.getOutcomeText();
		this.outcomecomments = bean.getOutcomeComments();
		this.haselectivelist = bean.getHasElectiveList();
		this.wasprinted = bean.getWasPrinted();
		this.bookingletterrecordingusertitle = bean.getBookingLetterRecordingUserTitle();
		this.bookingletterrecordingusersurname = bean.getBookingLetterRecordingUserSurname();
		this.bookingletterrecordinguserforename = bean.getBookingLetterRecordingUserForename();
		this.bookingletterrecordingdatetime = bean.getBookingLetterRecordingDateTime() == null ? null : bean.getBookingLetterRecordingDateTime().buildDateTime();
		this.haslinkedappointments = bean.getHasLinkedAppointments();
		this.comments = bean.getComments();
		this.bookingcomments = bean.getBookingComments();
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo();
		this.trackingstatuschangedatetime = bean.getTrackingStatusChangeDateTime() == null ? null : bean.getTrackingStatusChangeDateTime().buildDateTime();
		this.trackingstatusid = bean.getTrackingStatusID();
		this.trackingstatustext = bean.getTrackingStatusText();
		this.electivelist = bean.getElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getElectiveList().getId()), bean.getElectiveList().getVersion());
		this.trackingstatuscolorconfig = bean.getTrackingStatusColorConfig() == null ? null : bean.getTrackingStatusColorConfig().buildVo();
		this.outcomeid = bean.getOutcomeID();
		this.servicefunction = bean.getServiceFunction();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.AppointmentForOutpatientClinicListManualCustomClassVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.appointmentdate = bean.getAppointmentDate() == null ? null : bean.getAppointmentDate().buildDate();
		this.apptstarttime = bean.getApptStartTime() == null ? null : bean.getApptStartTime().buildTime();
		this.appointmentstatusid = bean.getAppointmentStatusID();
		this.appointmentstatustext = bean.getAppointmentStatusText();
		this.appointmentactivityimage = bean.getAppointmentActivityImage();
		this.appointmentactivityname = bean.getAppointmentActivityName();
		this.sessionname = bean.getSessionName();
		this.iscabbooking = bean.getIsCABBooking();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.outcometext = bean.getOutcomeText();
		this.outcomecomments = bean.getOutcomeComments();
		this.haselectivelist = bean.getHasElectiveList();
		this.wasprinted = bean.getWasPrinted();
		this.bookingletterrecordingusertitle = bean.getBookingLetterRecordingUserTitle();
		this.bookingletterrecordingusersurname = bean.getBookingLetterRecordingUserSurname();
		this.bookingletterrecordinguserforename = bean.getBookingLetterRecordingUserForename();
		this.bookingletterrecordingdatetime = bean.getBookingLetterRecordingDateTime() == null ? null : bean.getBookingLetterRecordingDateTime().buildDateTime();
		this.haslinkedappointments = bean.getHasLinkedAppointments();
		this.comments = bean.getComments();
		this.bookingcomments = bean.getBookingComments();
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo(map);
		this.trackingstatuschangedatetime = bean.getTrackingStatusChangeDateTime() == null ? null : bean.getTrackingStatusChangeDateTime().buildDateTime();
		this.trackingstatusid = bean.getTrackingStatusID();
		this.trackingstatustext = bean.getTrackingStatusText();
		this.electivelist = bean.getElectiveList() == null ? null : new ims.RefMan.vo.PatientElectiveListRefVo(new Integer(bean.getElectiveList().getId()), bean.getElectiveList().getVersion());
		this.trackingstatuscolorconfig = bean.getTrackingStatusColorConfig() == null ? null : bean.getTrackingStatusColorConfig().buildVo(map);
		this.outcomeid = bean.getOutcomeID();
		this.servicefunction = bean.getServiceFunction();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.AppointmentForOutpatientClinicListManualCustomClassVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.AppointmentForOutpatientClinicListManualCustomClassVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.AppointmentForOutpatientClinicListManualCustomClassVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("APPOINTMENTDATE"))
			return getAppointmentDate();
		if(fieldName.equals("APPTSTARTTIME"))
			return getApptStartTime();
		if(fieldName.equals("APPOINTMENTSTATUSID"))
			return getAppointmentStatusID();
		if(fieldName.equals("APPOINTMENTSTATUSTEXT"))
			return getAppointmentStatusText();
		if(fieldName.equals("APPOINTMENTACTIVITYIMAGE"))
			return getAppointmentActivityImage();
		if(fieldName.equals("APPOINTMENTACTIVITYNAME"))
			return getAppointmentActivityName();
		if(fieldName.equals("SESSIONNAME"))
			return getSessionName();
		if(fieldName.equals("ISCABBOOKING"))
			return getIsCABBooking();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("OUTCOMETEXT"))
			return getOutcomeText();
		if(fieldName.equals("OUTCOMECOMMENTS"))
			return getOutcomeComments();
		if(fieldName.equals("HASELECTIVELIST"))
			return getHasElectiveList();
		if(fieldName.equals("WASPRINTED"))
			return getWasPrinted();
		if(fieldName.equals("BOOKINGLETTERRECORDINGUSERTITLE"))
			return getBookingLetterRecordingUserTitle();
		if(fieldName.equals("BOOKINGLETTERRECORDINGUSERSURNAME"))
			return getBookingLetterRecordingUserSurname();
		if(fieldName.equals("BOOKINGLETTERRECORDINGUSERFORENAME"))
			return getBookingLetterRecordingUserForename();
		if(fieldName.equals("BOOKINGLETTERRECORDINGDATETIME"))
			return getBookingLetterRecordingDateTime();
		if(fieldName.equals("HASLINKEDAPPOINTMENTS"))
			return getHasLinkedAppointments();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("BOOKINGCOMMENTS"))
			return getBookingComments();
		if(fieldName.equals("REFERRAL"))
			return getReferral();
		if(fieldName.equals("TRACKINGSTATUSCHANGEDATETIME"))
			return getTrackingStatusChangeDateTime();
		if(fieldName.equals("TRACKINGSTATUSID"))
			return getTrackingStatusID();
		if(fieldName.equals("TRACKINGSTATUSTEXT"))
			return getTrackingStatusText();
		if(fieldName.equals("ELECTIVELIST"))
			return getElectiveList();
		if(fieldName.equals("TRACKINGSTATUSCOLORCONFIG"))
			return getTrackingStatusColorConfig();
		if(fieldName.equals("OUTCOMEID"))
			return getOutcomeID();
		if(fieldName.equals("SERVICEFUNCTION"))
			return getServiceFunction();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAppointmentDateIsNotNull()
	{
		return this.appointmentdate != null;
	}
	public ims.framework.utils.Date getAppointmentDate()
	{
		return this.appointmentdate;
	}
	public void setAppointmentDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.appointmentdate = value;
	}
	public boolean getApptStartTimeIsNotNull()
	{
		return this.apptstarttime != null;
	}
	public ims.framework.utils.Time getApptStartTime()
	{
		return this.apptstarttime;
	}
	public void setApptStartTime(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.apptstarttime = value;
	}
	public boolean getAppointmentStatusIDIsNotNull()
	{
		return this.appointmentstatusid != null;
	}
	public Integer getAppointmentStatusID()
	{
		return this.appointmentstatusid;
	}
	public void setAppointmentStatusID(Integer value)
	{
		this.isValidated = false;
		this.appointmentstatusid = value;
	}
	public boolean getAppointmentStatusTextIsNotNull()
	{
		return this.appointmentstatustext != null;
	}
	public String getAppointmentStatusText()
	{
		return this.appointmentstatustext;
	}
	public static int getAppointmentStatusTextMaxLength()
	{
		return 255;
	}
	public void setAppointmentStatusText(String value)
	{
		this.isValidated = false;
		this.appointmentstatustext = value;
	}
	public boolean getAppointmentActivityImageIsNotNull()
	{
		return this.appointmentactivityimage != null;
	}
	public Integer getAppointmentActivityImage()
	{
		return this.appointmentactivityimage;
	}
	public void setAppointmentActivityImage(Integer value)
	{
		this.isValidated = false;
		this.appointmentactivityimage = value;
	}
	public boolean getAppointmentActivityNameIsNotNull()
	{
		return this.appointmentactivityname != null;
	}
	public String getAppointmentActivityName()
	{
		return this.appointmentactivityname;
	}
	public static int getAppointmentActivityNameMaxLength()
	{
		return 255;
	}
	public void setAppointmentActivityName(String value)
	{
		this.isValidated = false;
		this.appointmentactivityname = value;
	}
	public boolean getSessionNameIsNotNull()
	{
		return this.sessionname != null;
	}
	public String getSessionName()
	{
		return this.sessionname;
	}
	public static int getSessionNameMaxLength()
	{
		return 255;
	}
	public void setSessionName(String value)
	{
		this.isValidated = false;
		this.sessionname = value;
	}
	public boolean getIsCABBookingIsNotNull()
	{
		return this.iscabbooking != null;
	}
	public Boolean getIsCABBooking()
	{
		return this.iscabbooking;
	}
	public void setIsCABBooking(Boolean value)
	{
		this.isValidated = false;
		this.iscabbooking = value;
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientManuallyAssembledVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientManuallyAssembledVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getOutcomeTextIsNotNull()
	{
		return this.outcometext != null;
	}
	public String getOutcomeText()
	{
		return this.outcometext;
	}
	public static int getOutcomeTextMaxLength()
	{
		return 255;
	}
	public void setOutcomeText(String value)
	{
		this.isValidated = false;
		this.outcometext = value;
	}
	public boolean getOutcomeCommentsIsNotNull()
	{
		return this.outcomecomments != null;
	}
	public String getOutcomeComments()
	{
		return this.outcomecomments;
	}
	public static int getOutcomeCommentsMaxLength()
	{
		return 500;
	}
	public void setOutcomeComments(String value)
	{
		this.isValidated = false;
		this.outcomecomments = value;
	}
	public boolean getHasElectiveListIsNotNull()
	{
		return this.haselectivelist != null;
	}
	public Boolean getHasElectiveList()
	{
		return this.haselectivelist;
	}
	public void setHasElectiveList(Boolean value)
	{
		this.isValidated = false;
		this.haselectivelist = value;
	}
	public boolean getWasPrintedIsNotNull()
	{
		return this.wasprinted != null;
	}
	public Boolean getWasPrinted()
	{
		return this.wasprinted;
	}
	public void setWasPrinted(Boolean value)
	{
		this.isValidated = false;
		this.wasprinted = value;
	}
	public boolean getBookingLetterRecordingUserTitleIsNotNull()
	{
		return this.bookingletterrecordingusertitle != null;
	}
	public String getBookingLetterRecordingUserTitle()
	{
		return this.bookingletterrecordingusertitle;
	}
	public static int getBookingLetterRecordingUserTitleMaxLength()
	{
		return 255;
	}
	public void setBookingLetterRecordingUserTitle(String value)
	{
		this.isValidated = false;
		this.bookingletterrecordingusertitle = value;
	}
	public boolean getBookingLetterRecordingUserSurnameIsNotNull()
	{
		return this.bookingletterrecordingusersurname != null;
	}
	public String getBookingLetterRecordingUserSurname()
	{
		return this.bookingletterrecordingusersurname;
	}
	public static int getBookingLetterRecordingUserSurnameMaxLength()
	{
		return 255;
	}
	public void setBookingLetterRecordingUserSurname(String value)
	{
		this.isValidated = false;
		this.bookingletterrecordingusersurname = value;
	}
	public boolean getBookingLetterRecordingUserForenameIsNotNull()
	{
		return this.bookingletterrecordinguserforename != null;
	}
	public String getBookingLetterRecordingUserForename()
	{
		return this.bookingletterrecordinguserforename;
	}
	public static int getBookingLetterRecordingUserForenameMaxLength()
	{
		return 255;
	}
	public void setBookingLetterRecordingUserForename(String value)
	{
		this.isValidated = false;
		this.bookingletterrecordinguserforename = value;
	}
	public boolean getBookingLetterRecordingDateTimeIsNotNull()
	{
		return this.bookingletterrecordingdatetime != null;
	}
	public ims.framework.utils.DateTime getBookingLetterRecordingDateTime()
	{
		return this.bookingletterrecordingdatetime;
	}
	public void setBookingLetterRecordingDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.bookingletterrecordingdatetime = value;
	}
	public boolean getHasLinkedAppointmentsIsNotNull()
	{
		return this.haslinkedappointments != null;
	}
	public Boolean getHasLinkedAppointments()
	{
		return this.haslinkedappointments;
	}
	public void setHasLinkedAppointments(Boolean value)
	{
		this.isValidated = false;
		this.haslinkedappointments = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 500;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getBookingCommentsIsNotNull()
	{
		return this.bookingcomments != null;
	}
	public String getBookingComments()
	{
		return this.bookingcomments;
	}
	public static int getBookingCommentsMaxLength()
	{
		return 255;
	}
	public void setBookingComments(String value)
	{
		this.isValidated = false;
		this.bookingcomments = value;
	}
	public boolean getReferralIsNotNull()
	{
		return this.referral != null;
	}
	public ims.RefMan.vo.CatsReferralManualAssembledForAppointmentOutcomeListVo getReferral()
	{
		return this.referral;
	}
	public void setReferral(ims.RefMan.vo.CatsReferralManualAssembledForAppointmentOutcomeListVo value)
	{
		this.isValidated = false;
		this.referral = value;
	}
	public boolean getTrackingStatusChangeDateTimeIsNotNull()
	{
		return this.trackingstatuschangedatetime != null;
	}
	public ims.framework.utils.DateTime getTrackingStatusChangeDateTime()
	{
		return this.trackingstatuschangedatetime;
	}
	public void setTrackingStatusChangeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.trackingstatuschangedatetime = value;
	}
	public boolean getTrackingStatusIDIsNotNull()
	{
		return this.trackingstatusid != null;
	}
	public Integer getTrackingStatusID()
	{
		return this.trackingstatusid;
	}
	public void setTrackingStatusID(Integer value)
	{
		this.isValidated = false;
		this.trackingstatusid = value;
	}
	public boolean getTrackingStatusTextIsNotNull()
	{
		return this.trackingstatustext != null;
	}
	public String getTrackingStatusText()
	{
		return this.trackingstatustext;
	}
	public static int getTrackingStatusTextMaxLength()
	{
		return 255;
	}
	public void setTrackingStatusText(String value)
	{
		this.isValidated = false;
		this.trackingstatustext = value;
	}
	public boolean getElectiveListIsNotNull()
	{
		return this.electivelist != null;
	}
	public ims.RefMan.vo.PatientElectiveListRefVo getElectiveList()
	{
		return this.electivelist;
	}
	public void setElectiveList(ims.RefMan.vo.PatientElectiveListRefVo value)
	{
		this.isValidated = false;
		this.electivelist = value;
	}
	public boolean getTrackingStatusColorConfigIsNotNull()
	{
		return this.trackingstatuscolorconfig != null;
	}
	public ims.admin.vo.AppointmentTrackingstatusColourConfigVo getTrackingStatusColorConfig()
	{
		return this.trackingstatuscolorconfig;
	}
	public void setTrackingStatusColorConfig(ims.admin.vo.AppointmentTrackingstatusColourConfigVo value)
	{
		this.isValidated = false;
		this.trackingstatuscolorconfig = value;
	}
	public boolean getOutcomeIDIsNotNull()
	{
		return this.outcomeid != null;
	}
	public Integer getOutcomeID()
	{
		return this.outcomeid;
	}
	public void setOutcomeID(Integer value)
	{
		this.isValidated = false;
		this.outcomeid = value;
	}
	public boolean getServiceFunctionIsNotNull()
	{
		return this.servicefunction != null;
	}
	public String getServiceFunction()
	{
		return this.servicefunction;
	}
	public static int getServiceFunctionMaxLength()
	{
		return 255;
	}
	public void setServiceFunction(String value)
	{
		this.isValidated = false;
		this.servicefunction = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.outcomecomments != null)
			if(this.outcomecomments.length() > 500)
				listOfErrors.add("The length of the field [outcomecomments] in the value object [ims.scheduling.vo.AppointmentForOutpatientClinicListManualCustomClassVo] is too big. It should be less or equal to 500");
		if(this.comments != null)
			if(this.comments.length() > 500)
				listOfErrors.add("The length of the field [comments] in the value object [ims.scheduling.vo.AppointmentForOutpatientClinicListManualCustomClassVo] is too big. It should be less or equal to 500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AppointmentForOutpatientClinicListManualCustomClassVo clone = new AppointmentForOutpatientClinicListManualCustomClassVo(this.id, this.version);
		
		if(this.appointmentdate == null)
			clone.appointmentdate = null;
		else
			clone.appointmentdate = (ims.framework.utils.Date)this.appointmentdate.clone();
		if(this.apptstarttime == null)
			clone.apptstarttime = null;
		else
			clone.apptstarttime = (ims.framework.utils.Time)this.apptstarttime.clone();
		clone.appointmentstatusid = this.appointmentstatusid;
		clone.appointmentstatustext = this.appointmentstatustext;
		clone.appointmentactivityimage = this.appointmentactivityimage;
		clone.appointmentactivityname = this.appointmentactivityname;
		clone.sessionname = this.sessionname;
		clone.iscabbooking = this.iscabbooking;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientManuallyAssembledVo)this.patient.clone();
		clone.outcometext = this.outcometext;
		clone.outcomecomments = this.outcomecomments;
		clone.haselectivelist = this.haselectivelist;
		clone.wasprinted = this.wasprinted;
		clone.bookingletterrecordingusertitle = this.bookingletterrecordingusertitle;
		clone.bookingletterrecordingusersurname = this.bookingletterrecordingusersurname;
		clone.bookingletterrecordinguserforename = this.bookingletterrecordinguserforename;
		if(this.bookingletterrecordingdatetime == null)
			clone.bookingletterrecordingdatetime = null;
		else
			clone.bookingletterrecordingdatetime = (ims.framework.utils.DateTime)this.bookingletterrecordingdatetime.clone();
		clone.haslinkedappointments = this.haslinkedappointments;
		clone.comments = this.comments;
		clone.bookingcomments = this.bookingcomments;
		if(this.referral == null)
			clone.referral = null;
		else
			clone.referral = (ims.RefMan.vo.CatsReferralManualAssembledForAppointmentOutcomeListVo)this.referral.clone();
		if(this.trackingstatuschangedatetime == null)
			clone.trackingstatuschangedatetime = null;
		else
			clone.trackingstatuschangedatetime = (ims.framework.utils.DateTime)this.trackingstatuschangedatetime.clone();
		clone.trackingstatusid = this.trackingstatusid;
		clone.trackingstatustext = this.trackingstatustext;
		clone.electivelist = this.electivelist;
		if(this.trackingstatuscolorconfig == null)
			clone.trackingstatuscolorconfig = null;
		else
			clone.trackingstatuscolorconfig = (ims.admin.vo.AppointmentTrackingstatusColourConfigVo)this.trackingstatuscolorconfig.clone();
		clone.outcomeid = this.outcomeid;
		clone.servicefunction = this.servicefunction;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AppointmentForOutpatientClinicListManualCustomClassVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AppointmentForOutpatientClinicListManualCustomClassVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AppointmentForOutpatientClinicListManualCustomClassVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AppointmentForOutpatientClinicListManualCustomClassVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentdate != null)
			count++;
		if(this.apptstarttime != null)
			count++;
		if(this.appointmentstatusid != null)
			count++;
		if(this.appointmentstatustext != null)
			count++;
		if(this.appointmentactivityimage != null)
			count++;
		if(this.appointmentactivityname != null)
			count++;
		if(this.sessionname != null)
			count++;
		if(this.iscabbooking != null)
			count++;
		if(this.patient != null)
			count++;
		if(this.outcometext != null)
			count++;
		if(this.outcomecomments != null)
			count++;
		if(this.haselectivelist != null)
			count++;
		if(this.wasprinted != null)
			count++;
		if(this.bookingletterrecordingusertitle != null)
			count++;
		if(this.bookingletterrecordingusersurname != null)
			count++;
		if(this.bookingletterrecordinguserforename != null)
			count++;
		if(this.bookingletterrecordingdatetime != null)
			count++;
		if(this.haslinkedappointments != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.bookingcomments != null)
			count++;
		if(this.referral != null)
			count++;
		if(this.trackingstatuschangedatetime != null)
			count++;
		if(this.trackingstatusid != null)
			count++;
		if(this.trackingstatustext != null)
			count++;
		if(this.electivelist != null)
			count++;
		if(this.trackingstatuscolorconfig != null)
			count++;
		if(this.outcomeid != null)
			count++;
		if(this.servicefunction != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 28;
	}
	protected ims.framework.utils.Date appointmentdate;
	protected ims.framework.utils.Time apptstarttime;
	protected Integer appointmentstatusid;
	protected String appointmentstatustext;
	protected Integer appointmentactivityimage;
	protected String appointmentactivityname;
	protected String sessionname;
	protected Boolean iscabbooking;
	protected ims.core.vo.PatientManuallyAssembledVo patient;
	protected String outcometext;
	protected String outcomecomments;
	protected Boolean haselectivelist;
	protected Boolean wasprinted;
	protected String bookingletterrecordingusertitle;
	protected String bookingletterrecordingusersurname;
	protected String bookingletterrecordinguserforename;
	protected ims.framework.utils.DateTime bookingletterrecordingdatetime;
	protected Boolean haslinkedappointments;
	protected String comments;
	protected String bookingcomments;
	protected ims.RefMan.vo.CatsReferralManualAssembledForAppointmentOutcomeListVo referral;
	protected ims.framework.utils.DateTime trackingstatuschangedatetime;
	protected Integer trackingstatusid;
	protected String trackingstatustext;
	protected ims.RefMan.vo.PatientElectiveListRefVo electivelist;
	protected ims.admin.vo.AppointmentTrackingstatusColourConfigVo trackingstatuscolorconfig;
	protected Integer outcomeid;
	protected String servicefunction;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
