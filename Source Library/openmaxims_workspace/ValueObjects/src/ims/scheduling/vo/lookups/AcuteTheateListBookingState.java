//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class AcuteTheateListBookingState extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public AcuteTheateListBookingState()
	{
		super();
	}
	public AcuteTheateListBookingState(int id)
	{
		super(id, "", true);
	}
	public AcuteTheateListBookingState(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public AcuteTheateListBookingState(int id, String text, boolean active, AcuteTheateListBookingState parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public AcuteTheateListBookingState(int id, String text, boolean active, AcuteTheateListBookingState parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public AcuteTheateListBookingState(int id, String text, boolean active, AcuteTheateListBookingState parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static AcuteTheateListBookingState buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new AcuteTheateListBookingState(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (AcuteTheateListBookingState)super.getParentInstance();
	}
	public AcuteTheateListBookingState getParent()
	{
		return (AcuteTheateListBookingState)super.getParentInstance();
	}
	public void setParent(AcuteTheateListBookingState parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		AcuteTheateListBookingState[] typedChildren = new AcuteTheateListBookingState[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (AcuteTheateListBookingState)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof AcuteTheateListBookingState)
		{
			super.addChild((AcuteTheateListBookingState)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof AcuteTheateListBookingState)
		{
			super.removeChild((AcuteTheateListBookingState)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		AcuteTheateListBookingStateCollection result = new AcuteTheateListBookingStateCollection();
		result.add(SAFETY_BRIEF);
		result.add(PATIENT_SENT_FOR);
		result.add(PATIENT_ARRIVED);
		result.add(ANAESTHETIC_SIGNIN);
		result.add(ANAESTHETIC_RFS);
		result.add(TIMEOUT_COMPLETE);
		result.add(INTRA_OPERATIVE_DETAILS);
		result.add(SURGERY_START_TIME);
		result.add(SURGERY_STOP);
		result.add(PATIENT_LEFT_THEATRE);
		result.add(READY_FOR_DISCHARGE);
		result.add(TIME_OUT_OF_RECOVERY);
		result.add(INTO_RECOVERY);
		return result;
	}
	public static AcuteTheateListBookingState[] getNegativeInstances()
	{
		AcuteTheateListBookingState[] instances = new AcuteTheateListBookingState[13];
		instances[0] = SAFETY_BRIEF;
		instances[1] = PATIENT_SENT_FOR;
		instances[2] = PATIENT_ARRIVED;
		instances[3] = ANAESTHETIC_SIGNIN;
		instances[4] = ANAESTHETIC_RFS;
		instances[5] = TIMEOUT_COMPLETE;
		instances[6] = INTRA_OPERATIVE_DETAILS;
		instances[7] = SURGERY_START_TIME;
		instances[8] = SURGERY_STOP;
		instances[9] = PATIENT_LEFT_THEATRE;
		instances[10] = READY_FOR_DISCHARGE;
		instances[11] = TIME_OUT_OF_RECOVERY;
		instances[12] = INTO_RECOVERY;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[13];
		negativeInstances[0] = "SAFETY_BRIEF";
		negativeInstances[1] = "PATIENT_SENT_FOR";
		negativeInstances[2] = "PATIENT_ARRIVED";
		negativeInstances[3] = "ANAESTHETIC_SIGNIN";
		negativeInstances[4] = "ANAESTHETIC_RFS";
		negativeInstances[5] = "TIMEOUT_COMPLETE";
		negativeInstances[6] = "INTRA_OPERATIVE_DETAILS";
		negativeInstances[7] = "SURGERY_START_TIME";
		negativeInstances[8] = "SURGERY_STOP";
		negativeInstances[9] = "PATIENT_LEFT_THEATRE";
		negativeInstances[10] = "READY_FOR_DISCHARGE";
		negativeInstances[11] = "TIME_OUT_OF_RECOVERY";
		negativeInstances[12] = "INTO_RECOVERY";
		return negativeInstances;
	}
	public static AcuteTheateListBookingState getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static AcuteTheateListBookingState getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		AcuteTheateListBookingState[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1141035;
	public static final AcuteTheateListBookingState SAFETY_BRIEF = new AcuteTheateListBookingState(-3242, "Safety Brief", true, null, null, Color.DarkGray);
	public static final AcuteTheateListBookingState PATIENT_SENT_FOR = new AcuteTheateListBookingState(-3243, "Patient Sent For", true, null, null, Color.DarkOrange);
	public static final AcuteTheateListBookingState PATIENT_ARRIVED = new AcuteTheateListBookingState(-3244, "Patient Arrived", true, null, null, Color.DeepPink);
	public static final AcuteTheateListBookingState ANAESTHETIC_SIGNIN = new AcuteTheateListBookingState(-3245, "Anaesthetic Sign-In", true, null, null, Color.Peru);
	public static final AcuteTheateListBookingState ANAESTHETIC_RFS = new AcuteTheateListBookingState(-3246, "Anaesthetic Ready For Surgery", true, null, null, Color.Yellow);
	public static final AcuteTheateListBookingState TIMEOUT_COMPLETE = new AcuteTheateListBookingState(-3247, "Time Out Complete", true, null, null, Color.Green);
	public static final AcuteTheateListBookingState INTRA_OPERATIVE_DETAILS = new AcuteTheateListBookingState(-3248, "Intra-operative Details", true, null, null, Color.Gold);
	public static final AcuteTheateListBookingState SURGERY_START_TIME = new AcuteTheateListBookingState(-3249, "Surgery Start Time", true, null, null, Color.Fuchia);
	public static final AcuteTheateListBookingState SURGERY_STOP = new AcuteTheateListBookingState(-3250, "Surgery Stop", true, null, null, Color.Moccasin);
	public static final AcuteTheateListBookingState PATIENT_LEFT_THEATRE = new AcuteTheateListBookingState(-3252, "Patient Left Theatre", true, null, null, Color.Plum);
	public static final AcuteTheateListBookingState READY_FOR_DISCHARGE = new AcuteTheateListBookingState(-3253, "Ready for Discharge", true, null, null, Color.Brown);
	public static final AcuteTheateListBookingState TIME_OUT_OF_RECOVERY = new AcuteTheateListBookingState(-3254, "Time Out of Recovery", true, null, null, Color.GreenYellow);
	public static final AcuteTheateListBookingState INTO_RECOVERY = new AcuteTheateListBookingState(-3330, "Into Recovery", true, null, null, Color.LightCyan);
}
