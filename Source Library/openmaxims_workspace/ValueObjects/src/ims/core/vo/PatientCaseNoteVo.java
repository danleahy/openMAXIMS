//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.clinical.PatientCaseNote business object (ID: 1003100130).
 */
public class PatientCaseNoteVo extends ims.core.vo.PatientCaseNoteListVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientCaseNoteVo()
	{
	}
	public PatientCaseNoteVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientCaseNoteVo(ims.core.vo.beans.PatientCaseNoteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.type = bean.getType() == null ? null : ims.core.vo.lookups.CaseNoteType.buildLookup(bean.getType());
		this.currentlocation = bean.getCurrentLocation() == null ? null : bean.getCurrentLocation().buildVo();
		this.folder = bean.getFolder() == null ? null : ims.core.vo.lookups.FolderCaseNote.buildLookup(bean.getFolder());
		this.trackingid = bean.getTrackingID();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.CaseNoteStatus.buildLookup(bean.getStatus());
		if(bean.getOpenRequests() != null)
		{
			this.openrequests = new ims.core.clinical.vo.PatientCaseNoteRequestRefVoCollection();
			for(int openrequests_i = 0; openrequests_i < bean.getOpenRequests().length; openrequests_i++)
			{
				this.openrequests.add(new ims.core.clinical.vo.PatientCaseNoteRequestRefVo(new Integer(bean.getOpenRequests()[openrequests_i].getId()), bean.getOpenRequests()[openrequests_i].getVersion()));
			}
		}
		this.createdby = bean.getCreatedBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getCreatedBy().getId()), bean.getCreatedBy().getVersion());
		this.creationdate = bean.getCreationDate() == null ? null : bean.getCreationDate().buildDateTime();
		this.currentcomment = bean.getCurrentComment() == null ? null : bean.getCurrentComment().buildVo();
		this.archivedby = bean.getArchivedBy() == null ? null : bean.getArchivedBy().buildVo();
		this.archiveddate = bean.getArchivedDate() == null ? null : bean.getArchivedDate().buildDateTime();
		this.archivedcomment = bean.getArchivedComment();
		this.destroyedby = bean.getDestroyedBy() == null ? null : bean.getDestroyedBy().buildVo();
		this.destroyeddate = bean.getDestroyedDate() == null ? null : bean.getDestroyedDate().buildDateTime();
		this.destroyedcomment = bean.getDestroyedComment();
		this.mergedby = bean.getMergedBy() == null ? null : bean.getMergedBy().buildVo();
		this.mergeddate = bean.getMergedDate() == null ? null : bean.getMergedDate().buildDateTime();
		this.mergedfrom = bean.getMergedFrom() == null ? null : new ims.core.clinical.vo.PatientCaseNoteRefVo(new Integer(bean.getMergedFrom().getId()), bean.getMergedFrom().getVersion());
		this.scannedby = bean.getScannedBy() == null ? null : bean.getScannedBy().buildVo();
		this.scanneddate = bean.getScannedDate() == null ? null : bean.getScannedDate().buildDateTime();
		this.scannedcomment = bean.getScannedComment();
		this.lasttransferdate = bean.getLastTransferDate() == null ? null : bean.getLastTransferDate().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientCaseNoteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.type = bean.getType() == null ? null : ims.core.vo.lookups.CaseNoteType.buildLookup(bean.getType());
		this.currentlocation = bean.getCurrentLocation() == null ? null : bean.getCurrentLocation().buildVo(map);
		this.folder = bean.getFolder() == null ? null : ims.core.vo.lookups.FolderCaseNote.buildLookup(bean.getFolder());
		this.trackingid = bean.getTrackingID();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.CaseNoteStatus.buildLookup(bean.getStatus());
		if(bean.getOpenRequests() != null)
		{
			this.openrequests = new ims.core.clinical.vo.PatientCaseNoteRequestRefVoCollection();
			for(int openrequests_i = 0; openrequests_i < bean.getOpenRequests().length; openrequests_i++)
			{
				this.openrequests.add(new ims.core.clinical.vo.PatientCaseNoteRequestRefVo(new Integer(bean.getOpenRequests()[openrequests_i].getId()), bean.getOpenRequests()[openrequests_i].getVersion()));
			}
		}
		this.createdby = bean.getCreatedBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getCreatedBy().getId()), bean.getCreatedBy().getVersion());
		this.creationdate = bean.getCreationDate() == null ? null : bean.getCreationDate().buildDateTime();
		this.currentcomment = bean.getCurrentComment() == null ? null : bean.getCurrentComment().buildVo(map);
		this.archivedby = bean.getArchivedBy() == null ? null : bean.getArchivedBy().buildVo(map);
		this.archiveddate = bean.getArchivedDate() == null ? null : bean.getArchivedDate().buildDateTime();
		this.archivedcomment = bean.getArchivedComment();
		this.destroyedby = bean.getDestroyedBy() == null ? null : bean.getDestroyedBy().buildVo(map);
		this.destroyeddate = bean.getDestroyedDate() == null ? null : bean.getDestroyedDate().buildDateTime();
		this.destroyedcomment = bean.getDestroyedComment();
		this.mergedby = bean.getMergedBy() == null ? null : bean.getMergedBy().buildVo(map);
		this.mergeddate = bean.getMergedDate() == null ? null : bean.getMergedDate().buildDateTime();
		this.mergedfrom = bean.getMergedFrom() == null ? null : new ims.core.clinical.vo.PatientCaseNoteRefVo(new Integer(bean.getMergedFrom().getId()), bean.getMergedFrom().getVersion());
		this.scannedby = bean.getScannedBy() == null ? null : bean.getScannedBy().buildVo(map);
		this.scanneddate = bean.getScannedDate() == null ? null : bean.getScannedDate().buildDateTime();
		this.scannedcomment = bean.getScannedComment();
		this.lasttransferdate = bean.getLastTransferDate() == null ? null : bean.getLastTransferDate().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientCaseNoteVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientCaseNoteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientCaseNoteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CREATEDBY"))
			return getCreatedBy();
		if(fieldName.equals("CREATIONDATE"))
			return getCreationDate();
		if(fieldName.equals("CURRENTCOMMENT"))
			return getCurrentComment();
		if(fieldName.equals("ARCHIVEDBY"))
			return getArchivedBy();
		if(fieldName.equals("ARCHIVEDDATE"))
			return getArchivedDate();
		if(fieldName.equals("ARCHIVEDCOMMENT"))
			return getArchivedComment();
		if(fieldName.equals("DESTROYEDBY"))
			return getDestroyedBy();
		if(fieldName.equals("DESTROYEDDATE"))
			return getDestroyedDate();
		if(fieldName.equals("DESTROYEDCOMMENT"))
			return getDestroyedComment();
		if(fieldName.equals("MERGEDBY"))
			return getMergedBy();
		if(fieldName.equals("MERGEDDATE"))
			return getMergedDate();
		if(fieldName.equals("MERGEDFROM"))
			return getMergedFrom();
		if(fieldName.equals("SCANNEDBY"))
			return getScannedBy();
		if(fieldName.equals("SCANNEDDATE"))
			return getScannedDate();
		if(fieldName.equals("SCANNEDCOMMENT"))
			return getScannedComment();
		if(fieldName.equals("LASTTRANSFERDATE"))
			return getLastTransferDate();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCreatedByIsNotNull()
	{
		return this.createdby != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getCreatedBy()
	{
		return this.createdby;
	}
	public void setCreatedBy(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.createdby = value;
	}
	public boolean getCreationDateIsNotNull()
	{
		return this.creationdate != null;
	}
	public ims.framework.utils.DateTime getCreationDate()
	{
		return this.creationdate;
	}
	public void setCreationDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.creationdate = value;
	}
	public boolean getCurrentCommentIsNotNull()
	{
		return this.currentcomment != null;
	}
	public ims.core.vo.PatientCaseNoteCommentSaveVo getCurrentComment()
	{
		return this.currentcomment;
	}
	public void setCurrentComment(ims.core.vo.PatientCaseNoteCommentSaveVo value)
	{
		this.isValidated = false;
		this.currentcomment = value;
	}
	public boolean getArchivedByIsNotNull()
	{
		return this.archivedby != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getArchivedBy()
	{
		return this.archivedby;
	}
	public void setArchivedBy(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.archivedby = value;
	}
	public boolean getArchivedDateIsNotNull()
	{
		return this.archiveddate != null;
	}
	public ims.framework.utils.DateTime getArchivedDate()
	{
		return this.archiveddate;
	}
	public void setArchivedDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.archiveddate = value;
	}
	public boolean getArchivedCommentIsNotNull()
	{
		return this.archivedcomment != null;
	}
	public String getArchivedComment()
	{
		return this.archivedcomment;
	}
	public static int getArchivedCommentMaxLength()
	{
		return 2500;
	}
	public void setArchivedComment(String value)
	{
		this.isValidated = false;
		this.archivedcomment = value;
	}
	public boolean getDestroyedByIsNotNull()
	{
		return this.destroyedby != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getDestroyedBy()
	{
		return this.destroyedby;
	}
	public void setDestroyedBy(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.destroyedby = value;
	}
	public boolean getDestroyedDateIsNotNull()
	{
		return this.destroyeddate != null;
	}
	public ims.framework.utils.DateTime getDestroyedDate()
	{
		return this.destroyeddate;
	}
	public void setDestroyedDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.destroyeddate = value;
	}
	public boolean getDestroyedCommentIsNotNull()
	{
		return this.destroyedcomment != null;
	}
	public String getDestroyedComment()
	{
		return this.destroyedcomment;
	}
	public static int getDestroyedCommentMaxLength()
	{
		return 2500;
	}
	public void setDestroyedComment(String value)
	{
		this.isValidated = false;
		this.destroyedcomment = value;
	}
	public boolean getMergedByIsNotNull()
	{
		return this.mergedby != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getMergedBy()
	{
		return this.mergedby;
	}
	public void setMergedBy(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.mergedby = value;
	}
	public boolean getMergedDateIsNotNull()
	{
		return this.mergeddate != null;
	}
	public ims.framework.utils.DateTime getMergedDate()
	{
		return this.mergeddate;
	}
	public void setMergedDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.mergeddate = value;
	}
	public boolean getMergedFromIsNotNull()
	{
		return this.mergedfrom != null;
	}
	public ims.core.clinical.vo.PatientCaseNoteRefVo getMergedFrom()
	{
		return this.mergedfrom;
	}
	public void setMergedFrom(ims.core.clinical.vo.PatientCaseNoteRefVo value)
	{
		this.isValidated = false;
		this.mergedfrom = value;
	}
	public boolean getScannedByIsNotNull()
	{
		return this.scannedby != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getScannedBy()
	{
		return this.scannedby;
	}
	public void setScannedBy(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.scannedby = value;
	}
	public boolean getScannedDateIsNotNull()
	{
		return this.scanneddate != null;
	}
	public ims.framework.utils.DateTime getScannedDate()
	{
		return this.scanneddate;
	}
	public void setScannedDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.scanneddate = value;
	}
	public boolean getScannedCommentIsNotNull()
	{
		return this.scannedcomment != null;
	}
	public String getScannedComment()
	{
		return this.scannedcomment;
	}
	public static int getScannedCommentMaxLength()
	{
		return 2500;
	}
	public void setScannedComment(String value)
	{
		this.isValidated = false;
		this.scannedcomment = value;
	}
	public boolean getLastTransferDateIsNotNull()
	{
		return this.lasttransferdate != null;
	}
	public ims.framework.utils.DateTime getLastTransferDate()
	{
		return this.lasttransferdate;
	}
	public void setLastTransferDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.lasttransferdate = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.currentcomment != null)
		{
			if(!this.currentcomment.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.type == null)
			listOfErrors.add("Type is mandatory");
		if(this.currentlocation == null)
			listOfErrors.add("CurrentLocation is mandatory");
		if(this.folder == null)
			listOfErrors.add("Folder is mandatory");
		if(this.trackingid == null || this.trackingid.length() == 0)
			listOfErrors.add("TrackingID is mandatory");
		else if(this.trackingid.length() > 20)
			listOfErrors.add("The length of the field [trackingid] in the value object [ims.core.vo.PatientCaseNoteVo] is too big. It should be less or equal to 20");
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.status == null)
			listOfErrors.add("Status is mandatory");
		if(this.createdby == null)
			listOfErrors.add("CreatedBy is mandatory");
		if(this.creationdate == null)
			listOfErrors.add("CreationDate is mandatory");
		if(this.currentcomment != null)
		{
			String[] listOfOtherErrors = this.currentcomment.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.archivedcomment != null)
			if(this.archivedcomment.length() > 2500)
				listOfErrors.add("The length of the field [archivedcomment] in the value object [ims.core.vo.PatientCaseNoteVo] is too big. It should be less or equal to 2500");
		if(this.destroyedcomment != null)
			if(this.destroyedcomment.length() > 2500)
				listOfErrors.add("The length of the field [destroyedcomment] in the value object [ims.core.vo.PatientCaseNoteVo] is too big. It should be less or equal to 2500");
		if(this.scannedcomment != null)
			if(this.scannedcomment.length() > 2500)
				listOfErrors.add("The length of the field [scannedcomment] in the value object [ims.core.vo.PatientCaseNoteVo] is too big. It should be less or equal to 2500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientCaseNoteVo clone = new PatientCaseNoteVo(this.id, this.version);
		
		if(this.type == null)
			clone.type = null;
		else
			clone.type = (ims.core.vo.lookups.CaseNoteType)this.type.clone();
		if(this.currentlocation == null)
			clone.currentlocation = null;
		else
			clone.currentlocation = (ims.core.vo.LocationLiteVo)this.currentlocation.clone();
		if(this.folder == null)
			clone.folder = null;
		else
			clone.folder = (ims.core.vo.lookups.FolderCaseNote)this.folder.clone();
		clone.trackingid = this.trackingid;
		clone.patient = this.patient;
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.CaseNoteStatus)this.status.clone();
		clone.openrequests = this.openrequests;
		clone.createdby = this.createdby;
		if(this.creationdate == null)
			clone.creationdate = null;
		else
			clone.creationdate = (ims.framework.utils.DateTime)this.creationdate.clone();
		if(this.currentcomment == null)
			clone.currentcomment = null;
		else
			clone.currentcomment = (ims.core.vo.PatientCaseNoteCommentSaveVo)this.currentcomment.clone();
		if(this.archivedby == null)
			clone.archivedby = null;
		else
			clone.archivedby = (ims.core.vo.MemberOfStaffLiteVo)this.archivedby.clone();
		if(this.archiveddate == null)
			clone.archiveddate = null;
		else
			clone.archiveddate = (ims.framework.utils.DateTime)this.archiveddate.clone();
		clone.archivedcomment = this.archivedcomment;
		if(this.destroyedby == null)
			clone.destroyedby = null;
		else
			clone.destroyedby = (ims.core.vo.MemberOfStaffLiteVo)this.destroyedby.clone();
		if(this.destroyeddate == null)
			clone.destroyeddate = null;
		else
			clone.destroyeddate = (ims.framework.utils.DateTime)this.destroyeddate.clone();
		clone.destroyedcomment = this.destroyedcomment;
		if(this.mergedby == null)
			clone.mergedby = null;
		else
			clone.mergedby = (ims.core.vo.MemberOfStaffLiteVo)this.mergedby.clone();
		if(this.mergeddate == null)
			clone.mergeddate = null;
		else
			clone.mergeddate = (ims.framework.utils.DateTime)this.mergeddate.clone();
		clone.mergedfrom = this.mergedfrom;
		if(this.scannedby == null)
			clone.scannedby = null;
		else
			clone.scannedby = (ims.core.vo.MemberOfStaffLiteVo)this.scannedby.clone();
		if(this.scanneddate == null)
			clone.scanneddate = null;
		else
			clone.scanneddate = (ims.framework.utils.DateTime)this.scanneddate.clone();
		clone.scannedcomment = this.scannedcomment;
		if(this.lasttransferdate == null)
			clone.lasttransferdate = null;
		else
			clone.lasttransferdate = (ims.framework.utils.DateTime)this.lasttransferdate.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientCaseNoteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientCaseNoteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientCaseNoteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientCaseNoteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.createdby != null)
			count++;
		if(this.creationdate != null)
			count++;
		if(this.currentcomment != null)
			count++;
		if(this.archivedby != null)
			count++;
		if(this.archiveddate != null)
			count++;
		if(this.archivedcomment != null)
			count++;
		if(this.destroyedby != null)
			count++;
		if(this.destroyeddate != null)
			count++;
		if(this.destroyedcomment != null)
			count++;
		if(this.mergedby != null)
			count++;
		if(this.mergeddate != null)
			count++;
		if(this.mergedfrom != null)
			count++;
		if(this.scannedby != null)
			count++;
		if(this.scanneddate != null)
			count++;
		if(this.scannedcomment != null)
			count++;
		if(this.lasttransferdate != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 16;
	}
	protected ims.core.resource.people.vo.MemberOfStaffRefVo createdby;
	protected ims.framework.utils.DateTime creationdate;
	protected ims.core.vo.PatientCaseNoteCommentSaveVo currentcomment;
	protected ims.core.vo.MemberOfStaffLiteVo archivedby;
	protected ims.framework.utils.DateTime archiveddate;
	protected String archivedcomment;
	protected ims.core.vo.MemberOfStaffLiteVo destroyedby;
	protected ims.framework.utils.DateTime destroyeddate;
	protected String destroyedcomment;
	protected ims.core.vo.MemberOfStaffLiteVo mergedby;
	protected ims.framework.utils.DateTime mergeddate;
	protected ims.core.clinical.vo.PatientCaseNoteRefVo mergedfrom;
	protected ims.core.vo.MemberOfStaffLiteVo scannedby;
	protected ims.framework.utils.DateTime scanneddate;
	protected String scannedcomment;
	protected ims.framework.utils.DateTime lasttransferdate;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
