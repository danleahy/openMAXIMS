//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.Consultant Stay business object (ID: 1014100005).
 */
public class ConsultantStayVo extends ims.core.vo.ConsultantStayLiteVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ConsultantStayVo()
	{
	}
	public ConsultantStayVo(Integer id, int version)
	{
		super(id, version);
	}
	public ConsultantStayVo(ims.core.vo.beans.ConsultantStayVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.transferdatetime = bean.getTransferDateTime() == null ? null : bean.getTransferDateTime().buildDateTime();
		this.enddatetime = bean.getEndDateTime() == null ? null : bean.getEndDateTime().buildDateTime();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.patientstatus = bean.getPatientStatus() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientStatus());
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.codingstatus = bean.getCodingStatus() == null ? null : ims.core.vo.lookups.CodingStatus.buildLookup(bean.getCodingStatus());
		if(bean.getCodingComment() != null)
		{
			this.codingcomment = new ims.clinical.vo.CodingCommentRefVoCollection();
			for(int codingcomment_i = 0; codingcomment_i < bean.getCodingComment().length; codingcomment_i++)
			{
				this.codingcomment.add(new ims.clinical.vo.CodingCommentRefVo(new Integer(bean.getCodingComment()[codingcomment_i].getId()), bean.getCodingComment()[codingcomment_i].getVersion()));
			}
		}
		this.histologystatus = bean.getHistologyStatus() == null ? null : ims.clinical.vo.lookups.HistologyStatus.buildLookup(bean.getHistologyStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.ConsultantStayVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.transferdatetime = bean.getTransferDateTime() == null ? null : bean.getTransferDateTime().buildDateTime();
		this.enddatetime = bean.getEndDateTime() == null ? null : bean.getEndDateTime().buildDateTime();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.patientstatus = bean.getPatientStatus() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientStatus());
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.codingstatus = bean.getCodingStatus() == null ? null : ims.core.vo.lookups.CodingStatus.buildLookup(bean.getCodingStatus());
		if(bean.getCodingComment() != null)
		{
			this.codingcomment = new ims.clinical.vo.CodingCommentRefVoCollection();
			for(int codingcomment_i = 0; codingcomment_i < bean.getCodingComment().length; codingcomment_i++)
			{
				this.codingcomment.add(new ims.clinical.vo.CodingCommentRefVo(new Integer(bean.getCodingComment()[codingcomment_i].getId()), bean.getCodingComment()[codingcomment_i].getVersion()));
			}
		}
		this.histologystatus = bean.getHistologyStatus() == null ? null : ims.clinical.vo.lookups.HistologyStatus.buildLookup(bean.getHistologyStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.ConsultantStayVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.ConsultantStayVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.ConsultantStayVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CODINGSTATUS"))
			return getCodingStatus();
		if(fieldName.equals("CODINGCOMMENT"))
			return getCodingComment();
		if(fieldName.equals("HISTOLOGYSTATUS"))
			return getHistologyStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCodingStatusIsNotNull()
	{
		return this.codingstatus != null;
	}
	public ims.core.vo.lookups.CodingStatus getCodingStatus()
	{
		return this.codingstatus;
	}
	public void setCodingStatus(ims.core.vo.lookups.CodingStatus value)
	{
		this.isValidated = false;
		this.codingstatus = value;
	}
	public boolean getCodingCommentIsNotNull()
	{
		return this.codingcomment != null;
	}
	public ims.clinical.vo.CodingCommentRefVoCollection getCodingComment()
	{
		return this.codingcomment;
	}
	public void setCodingComment(ims.clinical.vo.CodingCommentRefVoCollection value)
	{
		this.isValidated = false;
		this.codingcomment = value;
	}
	public boolean getHistologyStatusIsNotNull()
	{
		return this.histologystatus != null;
	}
	public ims.clinical.vo.lookups.HistologyStatus getHistologyStatus()
	{
		return this.histologystatus;
	}
	public void setHistologyStatus(ims.clinical.vo.lookups.HistologyStatus value)
	{
		this.isValidated = false;
		this.histologystatus = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ConsultantStayVo clone = new ConsultantStayVo(this.id, this.version);
		
		if(this.transferdatetime == null)
			clone.transferdatetime = null;
		else
			clone.transferdatetime = (ims.framework.utils.DateTime)this.transferdatetime.clone();
		if(this.enddatetime == null)
			clone.enddatetime = null;
		else
			clone.enddatetime = (ims.framework.utils.DateTime)this.enddatetime.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		if(this.patientstatus == null)
			clone.patientstatus = null;
		else
			clone.patientstatus = (ims.core.vo.lookups.PatientStatus)this.patientstatus.clone();
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.MedicVo)this.consultant.clone();
		if(this.codingstatus == null)
			clone.codingstatus = null;
		else
			clone.codingstatus = (ims.core.vo.lookups.CodingStatus)this.codingstatus.clone();
		clone.codingcomment = this.codingcomment;
		if(this.histologystatus == null)
			clone.histologystatus = null;
		else
			clone.histologystatus = (ims.clinical.vo.lookups.HistologyStatus)this.histologystatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ConsultantStayVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ConsultantStayVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ConsultantStayVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ConsultantStayVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.codingstatus != null)
			count++;
		if(this.codingcomment != null)
			count++;
		if(this.histologystatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 3;
	}
	protected ims.core.vo.lookups.CodingStatus codingstatus;
	protected ims.clinical.vo.CodingCommentRefVoCollection codingcomment;
	protected ims.clinical.vo.lookups.HistologyStatus histologystatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
