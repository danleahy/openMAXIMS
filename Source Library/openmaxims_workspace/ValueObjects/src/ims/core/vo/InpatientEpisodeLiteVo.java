//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.Inpatient Episode business object (ID: 1014100000).
 */
public class InpatientEpisodeLiteVo extends ims.core.admin.pas.vo.InpatientEpisodeRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InpatientEpisodeLiteVo()
	{
	}
	public InpatientEpisodeLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public InpatientEpisodeLiteVo(ims.core.vo.beans.InpatientEpisodeLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDateTime();
		this.isconfirmeddischarge = bean.getIsConfirmedDischarge();
		if(bean.getWardStays() != null)
		{
			this.wardstays = new ims.core.admin.pas.vo.WardStayRefVoCollection();
			for(int wardstays_i = 0; wardstays_i < bean.getWardStays().length; wardstays_i++)
			{
				this.wardstays.add(new ims.core.admin.pas.vo.WardStayRefVo(new Integer(bean.getWardStays()[wardstays_i].getId()), bean.getWardStays()[wardstays_i].getVersion()));
			}
		}
		if(bean.getConsultantStays() != null)
		{
			this.consultantstays = new ims.core.admin.pas.vo.ConsultantStayRefVoCollection();
			for(int consultantstays_i = 0; consultantstays_i < bean.getConsultantStays().length; consultantstays_i++)
			{
				this.consultantstays.add(new ims.core.admin.pas.vo.ConsultantStayRefVo(new Integer(bean.getConsultantStays()[consultantstays_i].getId()), bean.getConsultantStays()[consultantstays_i].getVersion()));
			}
		}
		this.confirmeddischargedatetime = bean.getConfirmedDischargeDateTime() == null ? null : bean.getConfirmedDischargeDateTime().buildDateTime();
		this.ismaternityinpatient = bean.getIsMaternityInpatient();
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo();
		this.dischargereadydate = bean.getDischargeReadyDate() == null ? null : bean.getDischargeReadyDate().buildDate();
		this.isonhomeleave = bean.getIsOnHomeLeave();
		this.expecteddateofreturn = bean.getExpectedDateOfReturn() == null ? null : bean.getExpectedDateOfReturn().buildDate();
		this.expectedtimeofreturn = bean.getExpectedTimeOfReturn() == null ? null : bean.getExpectedTimeOfReturn().buildTime();
		this.vacatedbednumber = bean.getVacatedBedNumber();
		this.dateonhomeleave = bean.getDateOnHomeLeave() == null ? null : bean.getDateOnHomeLeave().buildDate();
		this.vteassessmentstatus = bean.getVTEAssessmentStatus() == null ? null : ims.clinical.vo.lookups.VTEAsessmentStatus.buildLookup(bean.getVTEAssessmentStatus());
		this.vteriskassessment = bean.getVTERiskAssessment() == null ? null : new ims.core.clinical.vo.VTERiskAssessmentRefVo(new Integer(bean.getVTERiskAssessment().getId()), bean.getVTERiskAssessment().getVersion());
		this.vteassessmentstatusreason = bean.getVTEAssessmentStatusReason() == null ? null : ims.clinical.vo.lookups.VTEAssessmentStatusReason.buildLookup(bean.getVTEAssessmentStatusReason());
		this.reasondelayeddischarge = ims.core.vo.ReasonForDelayedDischargeVoCollection.buildFromBeanCollection(bean.getReasonDelayedDischarge());
		this.extendedlengthofstayreason = bean.getExtendedLengthOfStayReason() == null ? null : ims.core.vo.lookups.ExtendedLengthOfStayReason.buildLookup(bean.getExtendedLengthOfStayReason());
		this.medicallyfitfordischarge = bean.getMedicallyFitForDischarge() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getMedicallyFitForDischarge());
		this.patientrequirestransport = bean.getPatientRequiresTransport();
		this.transportdetails = bean.getTransportDetails() == null ? null : bean.getTransportDetails().buildVo();
		this.abletogodischargelounge = bean.getAbleToGoDischargeLounge();
		this.reasoncannotgodischargelounge = bean.getReasonCannotGoDischargeLounge() == null ? null : ims.core.vo.lookups.ReasonCannotGoDischargeLounge.buildLookup(bean.getReasonCannotGoDischargeLounge());
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.timeonhomeleave = bean.getTimeOnHomeLeave() == null ? null : bean.getTimeOnHomeLeave().buildTime();
		this.healthylodgerdetails = bean.getHealthyLodgerDetails() == null ? null : bean.getHealthyLodgerDetails().buildVo();
		this.latestsecsscore = bean.getLatestSECSScore() == null ? null : bean.getLatestSECSScore().buildVo();
		this.currenttrackingmovement = bean.getCurrentTrackingMovement() == null ? null : bean.getCurrentTrackingMovement().buildVo();
		this.isreadytoleave = bean.getIsReadyToLeave();
		this.readytoleavedecisiondatetime = bean.getReadyToLeaveDecisionDateTime() == null ? null : bean.getReadyToLeaveDecisionDateTime().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.InpatientEpisodeLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDateTime();
		this.isconfirmeddischarge = bean.getIsConfirmedDischarge();
		if(bean.getWardStays() != null)
		{
			this.wardstays = new ims.core.admin.pas.vo.WardStayRefVoCollection();
			for(int wardstays_i = 0; wardstays_i < bean.getWardStays().length; wardstays_i++)
			{
				this.wardstays.add(new ims.core.admin.pas.vo.WardStayRefVo(new Integer(bean.getWardStays()[wardstays_i].getId()), bean.getWardStays()[wardstays_i].getVersion()));
			}
		}
		if(bean.getConsultantStays() != null)
		{
			this.consultantstays = new ims.core.admin.pas.vo.ConsultantStayRefVoCollection();
			for(int consultantstays_i = 0; consultantstays_i < bean.getConsultantStays().length; consultantstays_i++)
			{
				this.consultantstays.add(new ims.core.admin.pas.vo.ConsultantStayRefVo(new Integer(bean.getConsultantStays()[consultantstays_i].getId()), bean.getConsultantStays()[consultantstays_i].getVersion()));
			}
		}
		this.confirmeddischargedatetime = bean.getConfirmedDischargeDateTime() == null ? null : bean.getConfirmedDischargeDateTime().buildDateTime();
		this.ismaternityinpatient = bean.getIsMaternityInpatient();
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo(map);
		this.dischargereadydate = bean.getDischargeReadyDate() == null ? null : bean.getDischargeReadyDate().buildDate();
		this.isonhomeleave = bean.getIsOnHomeLeave();
		this.expecteddateofreturn = bean.getExpectedDateOfReturn() == null ? null : bean.getExpectedDateOfReturn().buildDate();
		this.expectedtimeofreturn = bean.getExpectedTimeOfReturn() == null ? null : bean.getExpectedTimeOfReturn().buildTime();
		this.vacatedbednumber = bean.getVacatedBedNumber();
		this.dateonhomeleave = bean.getDateOnHomeLeave() == null ? null : bean.getDateOnHomeLeave().buildDate();
		this.vteassessmentstatus = bean.getVTEAssessmentStatus() == null ? null : ims.clinical.vo.lookups.VTEAsessmentStatus.buildLookup(bean.getVTEAssessmentStatus());
		this.vteriskassessment = bean.getVTERiskAssessment() == null ? null : new ims.core.clinical.vo.VTERiskAssessmentRefVo(new Integer(bean.getVTERiskAssessment().getId()), bean.getVTERiskAssessment().getVersion());
		this.vteassessmentstatusreason = bean.getVTEAssessmentStatusReason() == null ? null : ims.clinical.vo.lookups.VTEAssessmentStatusReason.buildLookup(bean.getVTEAssessmentStatusReason());
		this.reasondelayeddischarge = ims.core.vo.ReasonForDelayedDischargeVoCollection.buildFromBeanCollection(bean.getReasonDelayedDischarge());
		this.extendedlengthofstayreason = bean.getExtendedLengthOfStayReason() == null ? null : ims.core.vo.lookups.ExtendedLengthOfStayReason.buildLookup(bean.getExtendedLengthOfStayReason());
		this.medicallyfitfordischarge = bean.getMedicallyFitForDischarge() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getMedicallyFitForDischarge());
		this.patientrequirestransport = bean.getPatientRequiresTransport();
		this.transportdetails = bean.getTransportDetails() == null ? null : bean.getTransportDetails().buildVo(map);
		this.abletogodischargelounge = bean.getAbleToGoDischargeLounge();
		this.reasoncannotgodischargelounge = bean.getReasonCannotGoDischargeLounge() == null ? null : ims.core.vo.lookups.ReasonCannotGoDischargeLounge.buildLookup(bean.getReasonCannotGoDischargeLounge());
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.timeonhomeleave = bean.getTimeOnHomeLeave() == null ? null : bean.getTimeOnHomeLeave().buildTime();
		this.healthylodgerdetails = bean.getHealthyLodgerDetails() == null ? null : bean.getHealthyLodgerDetails().buildVo(map);
		this.latestsecsscore = bean.getLatestSECSScore() == null ? null : bean.getLatestSECSScore().buildVo(map);
		this.currenttrackingmovement = bean.getCurrentTrackingMovement() == null ? null : bean.getCurrentTrackingMovement().buildVo(map);
		this.isreadytoleave = bean.getIsReadyToLeave();
		this.readytoleavedecisiondatetime = bean.getReadyToLeaveDecisionDateTime() == null ? null : bean.getReadyToLeaveDecisionDateTime().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.InpatientEpisodeLiteVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.InpatientEpisodeLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.InpatientEpisodeLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("ESTDISCHARGEDATE"))
			return getEstDischargeDate();
		if(fieldName.equals("ISCONFIRMEDDISCHARGE"))
			return getIsConfirmedDischarge();
		if(fieldName.equals("WARDSTAYS"))
			return getWardStays();
		if(fieldName.equals("CONSULTANTSTAYS"))
			return getConsultantStays();
		if(fieldName.equals("CONFIRMEDDISCHARGEDATETIME"))
			return getConfirmedDischargeDateTime();
		if(fieldName.equals("ISMATERNITYINPATIENT"))
			return getIsMaternityInpatient();
		if(fieldName.equals("BED"))
			return getBed();
		if(fieldName.equals("DISCHARGEREADYDATE"))
			return getDischargeReadyDate();
		if(fieldName.equals("ISONHOMELEAVE"))
			return getIsOnHomeLeave();
		if(fieldName.equals("EXPECTEDDATEOFRETURN"))
			return getExpectedDateOfReturn();
		if(fieldName.equals("EXPECTEDTIMEOFRETURN"))
			return getExpectedTimeOfReturn();
		if(fieldName.equals("VACATEDBEDNUMBER"))
			return getVacatedBedNumber();
		if(fieldName.equals("DATEONHOMELEAVE"))
			return getDateOnHomeLeave();
		if(fieldName.equals("VTEASSESSMENTSTATUS"))
			return getVTEAssessmentStatus();
		if(fieldName.equals("VTERISKASSESSMENT"))
			return getVTERiskAssessment();
		if(fieldName.equals("VTEASSESSMENTSTATUSREASON"))
			return getVTEAssessmentStatusReason();
		if(fieldName.equals("REASONDELAYEDDISCHARGE"))
			return getReasonDelayedDischarge();
		if(fieldName.equals("EXTENDEDLENGTHOFSTAYREASON"))
			return getExtendedLengthOfStayReason();
		if(fieldName.equals("MEDICALLYFITFORDISCHARGE"))
			return getMedicallyFitForDischarge();
		if(fieldName.equals("PATIENTREQUIRESTRANSPORT"))
			return getPatientRequiresTransport();
		if(fieldName.equals("TRANSPORTDETAILS"))
			return getTransportDetails();
		if(fieldName.equals("ABLETOGODISCHARGELOUNGE"))
			return getAbleToGoDischargeLounge();
		if(fieldName.equals("REASONCANNOTGODISCHARGELOUNGE"))
			return getReasonCannotGoDischargeLounge();
		if(fieldName.equals("ADMISSIONDATETIME"))
			return getAdmissionDateTime();
		if(fieldName.equals("TIMEONHOMELEAVE"))
			return getTimeOnHomeLeave();
		if(fieldName.equals("HEALTHYLODGERDETAILS"))
			return getHealthyLodgerDetails();
		if(fieldName.equals("LATESTSECSSCORE"))
			return getLatestSECSScore();
		if(fieldName.equals("CURRENTTRACKINGMOVEMENT"))
			return getCurrentTrackingMovement();
		if(fieldName.equals("ISREADYTOLEAVE"))
			return getIsReadyToLeave();
		if(fieldName.equals("READYTOLEAVEDECISIONDATETIME"))
			return getReadyToLeaveDecisionDateTime();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.vo.PasEventADTVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.vo.PasEventADTVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getEstDischargeDateIsNotNull()
	{
		return this.estdischargedate != null;
	}
	public ims.framework.utils.DateTime getEstDischargeDate()
	{
		return this.estdischargedate;
	}
	public void setEstDischargeDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.estdischargedate = value;
	}
	public boolean getIsConfirmedDischargeIsNotNull()
	{
		return this.isconfirmeddischarge != null;
	}
	public Boolean getIsConfirmedDischarge()
	{
		return this.isconfirmeddischarge;
	}
	public void setIsConfirmedDischarge(Boolean value)
	{
		this.isValidated = false;
		this.isconfirmeddischarge = value;
	}
	public boolean getWardStaysIsNotNull()
	{
		return this.wardstays != null;
	}
	public ims.core.admin.pas.vo.WardStayRefVoCollection getWardStays()
	{
		return this.wardstays;
	}
	public void setWardStays(ims.core.admin.pas.vo.WardStayRefVoCollection value)
	{
		this.isValidated = false;
		this.wardstays = value;
	}
	public boolean getConsultantStaysIsNotNull()
	{
		return this.consultantstays != null;
	}
	public ims.core.admin.pas.vo.ConsultantStayRefVoCollection getConsultantStays()
	{
		return this.consultantstays;
	}
	public void setConsultantStays(ims.core.admin.pas.vo.ConsultantStayRefVoCollection value)
	{
		this.isValidated = false;
		this.consultantstays = value;
	}
	public boolean getConfirmedDischargeDateTimeIsNotNull()
	{
		return this.confirmeddischargedatetime != null;
	}
	public ims.framework.utils.DateTime getConfirmedDischargeDateTime()
	{
		return this.confirmeddischargedatetime;
	}
	public void setConfirmedDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.confirmeddischargedatetime = value;
	}
	public boolean getIsMaternityInpatientIsNotNull()
	{
		return this.ismaternityinpatient != null;
	}
	public Boolean getIsMaternityInpatient()
	{
		return this.ismaternityinpatient;
	}
	public void setIsMaternityInpatient(Boolean value)
	{
		this.isValidated = false;
		this.ismaternityinpatient = value;
	}
	public boolean getBedIsNotNull()
	{
		return this.bed != null;
	}
	public ims.core.vo.BedSpaceStateBayOnlyVo getBed()
	{
		return this.bed;
	}
	public void setBed(ims.core.vo.BedSpaceStateBayOnlyVo value)
	{
		this.isValidated = false;
		this.bed = value;
	}
	public boolean getDischargeReadyDateIsNotNull()
	{
		return this.dischargereadydate != null;
	}
	public ims.framework.utils.Date getDischargeReadyDate()
	{
		return this.dischargereadydate;
	}
	public void setDischargeReadyDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dischargereadydate = value;
	}
	public boolean getIsOnHomeLeaveIsNotNull()
	{
		return this.isonhomeleave != null;
	}
	public Boolean getIsOnHomeLeave()
	{
		return this.isonhomeleave;
	}
	public void setIsOnHomeLeave(Boolean value)
	{
		this.isValidated = false;
		this.isonhomeleave = value;
	}
	public boolean getExpectedDateOfReturnIsNotNull()
	{
		return this.expecteddateofreturn != null;
	}
	public ims.framework.utils.Date getExpectedDateOfReturn()
	{
		return this.expecteddateofreturn;
	}
	public void setExpectedDateOfReturn(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.expecteddateofreturn = value;
	}
	public boolean getExpectedTimeOfReturnIsNotNull()
	{
		return this.expectedtimeofreturn != null;
	}
	public ims.framework.utils.Time getExpectedTimeOfReturn()
	{
		return this.expectedtimeofreturn;
	}
	public void setExpectedTimeOfReturn(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.expectedtimeofreturn = value;
	}
	public boolean getVacatedBedNumberIsNotNull()
	{
		return this.vacatedbednumber != null;
	}
	public String getVacatedBedNumber()
	{
		return this.vacatedbednumber;
	}
	public static int getVacatedBedNumberMaxLength()
	{
		return 255;
	}
	public void setVacatedBedNumber(String value)
	{
		this.isValidated = false;
		this.vacatedbednumber = value;
	}
	public boolean getDateOnHomeLeaveIsNotNull()
	{
		return this.dateonhomeleave != null;
	}
	public ims.framework.utils.Date getDateOnHomeLeave()
	{
		return this.dateonhomeleave;
	}
	public void setDateOnHomeLeave(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateonhomeleave = value;
	}
	public boolean getVTEAssessmentStatusIsNotNull()
	{
		return this.vteassessmentstatus != null;
	}
	public ims.clinical.vo.lookups.VTEAsessmentStatus getVTEAssessmentStatus()
	{
		return this.vteassessmentstatus;
	}
	public void setVTEAssessmentStatus(ims.clinical.vo.lookups.VTEAsessmentStatus value)
	{
		this.isValidated = false;
		this.vteassessmentstatus = value;
	}
	public boolean getVTERiskAssessmentIsNotNull()
	{
		return this.vteriskassessment != null;
	}
	public ims.core.clinical.vo.VTERiskAssessmentRefVo getVTERiskAssessment()
	{
		return this.vteriskassessment;
	}
	public void setVTERiskAssessment(ims.core.clinical.vo.VTERiskAssessmentRefVo value)
	{
		this.isValidated = false;
		this.vteriskassessment = value;
	}
	public boolean getVTEAssessmentStatusReasonIsNotNull()
	{
		return this.vteassessmentstatusreason != null;
	}
	public ims.clinical.vo.lookups.VTEAssessmentStatusReason getVTEAssessmentStatusReason()
	{
		return this.vteassessmentstatusreason;
	}
	public void setVTEAssessmentStatusReason(ims.clinical.vo.lookups.VTEAssessmentStatusReason value)
	{
		this.isValidated = false;
		this.vteassessmentstatusreason = value;
	}
	public boolean getReasonDelayedDischargeIsNotNull()
	{
		return this.reasondelayeddischarge != null;
	}
	public ims.core.vo.ReasonForDelayedDischargeVoCollection getReasonDelayedDischarge()
	{
		return this.reasondelayeddischarge;
	}
	public void setReasonDelayedDischarge(ims.core.vo.ReasonForDelayedDischargeVoCollection value)
	{
		this.isValidated = false;
		this.reasondelayeddischarge = value;
	}
	public boolean getExtendedLengthOfStayReasonIsNotNull()
	{
		return this.extendedlengthofstayreason != null;
	}
	public ims.core.vo.lookups.ExtendedLengthOfStayReason getExtendedLengthOfStayReason()
	{
		return this.extendedlengthofstayreason;
	}
	public void setExtendedLengthOfStayReason(ims.core.vo.lookups.ExtendedLengthOfStayReason value)
	{
		this.isValidated = false;
		this.extendedlengthofstayreason = value;
	}
	public boolean getMedicallyFitForDischargeIsNotNull()
	{
		return this.medicallyfitfordischarge != null;
	}
	public ims.core.vo.lookups.YesNo getMedicallyFitForDischarge()
	{
		return this.medicallyfitfordischarge;
	}
	public void setMedicallyFitForDischarge(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.medicallyfitfordischarge = value;
	}
	public boolean getPatientRequiresTransportIsNotNull()
	{
		return this.patientrequirestransport != null;
	}
	public Boolean getPatientRequiresTransport()
	{
		return this.patientrequirestransport;
	}
	public void setPatientRequiresTransport(Boolean value)
	{
		this.isValidated = false;
		this.patientrequirestransport = value;
	}
	public boolean getTransportDetailsIsNotNull()
	{
		return this.transportdetails != null;
	}
	public ims.core.vo.PatientTransportRequirementsVo getTransportDetails()
	{
		return this.transportdetails;
	}
	public void setTransportDetails(ims.core.vo.PatientTransportRequirementsVo value)
	{
		this.isValidated = false;
		this.transportdetails = value;
	}
	public boolean getAbleToGoDischargeLoungeIsNotNull()
	{
		return this.abletogodischargelounge != null;
	}
	public Boolean getAbleToGoDischargeLounge()
	{
		return this.abletogodischargelounge;
	}
	public void setAbleToGoDischargeLounge(Boolean value)
	{
		this.isValidated = false;
		this.abletogodischargelounge = value;
	}
	public boolean getReasonCannotGoDischargeLoungeIsNotNull()
	{
		return this.reasoncannotgodischargelounge != null;
	}
	public ims.core.vo.lookups.ReasonCannotGoDischargeLounge getReasonCannotGoDischargeLounge()
	{
		return this.reasoncannotgodischargelounge;
	}
	public void setReasonCannotGoDischargeLounge(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value)
	{
		this.isValidated = false;
		this.reasoncannotgodischargelounge = value;
	}
	public boolean getAdmissionDateTimeIsNotNull()
	{
		return this.admissiondatetime != null;
	}
	public ims.framework.utils.DateTime getAdmissionDateTime()
	{
		return this.admissiondatetime;
	}
	public void setAdmissionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admissiondatetime = value;
	}
	public boolean getTimeOnHomeLeaveIsNotNull()
	{
		return this.timeonhomeleave != null;
	}
	public ims.framework.utils.Time getTimeOnHomeLeave()
	{
		return this.timeonhomeleave;
	}
	public void setTimeOnHomeLeave(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.timeonhomeleave = value;
	}
	public boolean getHealthyLodgerDetailsIsNotNull()
	{
		return this.healthylodgerdetails != null;
	}
	public ims.core.vo.HealthyLodgerVo getHealthyLodgerDetails()
	{
		return this.healthylodgerdetails;
	}
	public void setHealthyLodgerDetails(ims.core.vo.HealthyLodgerVo value)
	{
		this.isValidated = false;
		this.healthylodgerdetails = value;
	}
	public boolean getLatestSECSScoreIsNotNull()
	{
		return this.latestsecsscore != null;
	}
	public ims.clinical.vo.PatientSECSLiteVo getLatestSECSScore()
	{
		return this.latestsecsscore;
	}
	public void setLatestSECSScore(ims.clinical.vo.PatientSECSLiteVo value)
	{
		this.isValidated = false;
		this.latestsecsscore = value;
	}
	public boolean getCurrentTrackingMovementIsNotNull()
	{
		return this.currenttrackingmovement != null;
	}
	public ims.core.vo.TrackingMovementVo getCurrentTrackingMovement()
	{
		return this.currenttrackingmovement;
	}
	public void setCurrentTrackingMovement(ims.core.vo.TrackingMovementVo value)
	{
		this.isValidated = false;
		this.currenttrackingmovement = value;
	}
	public boolean getIsReadyToLeaveIsNotNull()
	{
		return this.isreadytoleave != null;
	}
	public Boolean getIsReadyToLeave()
	{
		return this.isreadytoleave;
	}
	public void setIsReadyToLeave(Boolean value)
	{
		this.isValidated = false;
		this.isreadytoleave = value;
	}
	public boolean getReadyToLeaveDecisionDateTimeIsNotNull()
	{
		return this.readytoleavedecisiondatetime != null;
	}
	public ims.framework.utils.DateTime getReadyToLeaveDecisionDateTime()
	{
		return this.readytoleavedecisiondatetime;
	}
	public void setReadyToLeaveDecisionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.readytoleavedecisiondatetime = value;
	}
	/**
	* isDischargeDueWithin24Hrs
	*/
	public boolean isDischargeDueWithin24Hrs()
	{
		if (this.confirmeddischargedatetime == null && this.estdischargedate == null)
			return false;
				
		ims.framework.utils.DateTime nowPlus24Hrs = new ims.framework.utils.DateTime();
		nowPlus24Hrs.addHours(24);
				
		if ((this.confirmeddischargedatetime != null && this.confirmeddischargedatetime.isLessOrEqualThan(nowPlus24Hrs)) ||(this.estdischargedate != null && this.estdischargedate.isLessOrEqualThan(nowPlus24Hrs)))
			return true;
	
		return false;
	}
	
	/**
	* getPatientString
	*/
		/**
		* getPatientString
		*/
		public String getPatientString()
		{
			String strPatient = "";
			
			if(this.getPasEventIsNotNull() && this.getPasEvent().getPatientIsNotNull())
			{
				 if(this.getPasEvent().getPatient().getNameIsNotNull())
					 strPatient += this.getPasEvent().getPatient().getName().toShortForm();
				 
				 PatientId patId = this.getPasEvent().getPatient().getDisplayId();
				 if(patId != null)
					 strPatient += " - " + patId.getValue();		
			}
			return strPatient;
		}
	/**
	* InpatientEpisodeLiteVoBedNumberComparator  (class definition) - numeric aware comparator for textual bed numbers
	*/
	public static final class InpatientEpisodeLiteVoBedNumberComparator implements java.util.Comparator<InpatientEpisodeLiteVo>
	{
		private int order = 1;
		private final java.util.regex.Pattern SPLIT_PATTERN = java.util.regex.Pattern.compile("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)");
	
		public InpatientEpisodeLiteVoBedNumberComparator()
		{
			order = 1;
		}
		public InpatientEpisodeLiteVoBedNumberComparator(ims.framework.enumerations.SortOrder order)
		{
			this.order = ims.framework.enumerations.SortOrder.DESCENDING.equals(order) ? -1:1;
		}
	
		public int compare(InpatientEpisodeLiteVo inpatientEpisode1, InpatientEpisodeLiteVo inpatientEpisode2)
		{
			// If neither Inpatient Episode has a Bed Space State recorded then they are equal in order
			if (inpatientEpisode1.getBed() == null && inpatientEpisode2.getBed() == null)
				return 0;
			
			// If one of the Inpatient Episode records doesn't have a Bed Space recorded it comes last in sort order 
			if (inpatientEpisode1.getBed() == null)
				return -1 * order;
			
			if (inpatientEpisode2.getBed() == null)
				return order;
	
			
			// Set order for Bays (The Inpatient Episode with Bays comes before the one without Bay in sort order) 
			if (inpatientEpisode1.getBed().getBay() != null && inpatientEpisode2.getBed().getBay() == null)
				return order;
			
			if (inpatientEpisode1.getBed().getBay() == null && inpatientEpisode2.getBed().getBay() != null)
				return -1 * order;
			
	
			// If the Bay name is the same or if the Bays are missing - check bed number for sort order
			if ((inpatientEpisode1.getBed().getBay() == null && inpatientEpisode2.getBed().getBay() == null) 
					|| inpatientEpisode1.getBed().getBay().getName().toLowerCase().equals(inpatientEpisode2.getBed().getBay().getName().toLowerCase()))
			{
				// If neither Inpatient Episode has a Bed Space recorded or both Bed Spaces don't have have bed numbers, then they are equal in sort order
				if ((inpatientEpisode1.getBed().getBedSpace() == null || inpatientEpisode1.getBed().getBedSpace().getBedNumber() == null) 
						&& (inpatientEpisode2.getBed().getBedSpace() == null || inpatientEpisode2.getBed().getBedSpace().getBedNumber() == null))
					
					return 0;
	
				// Set order for Bed Space (The Inpatient Episode with Bed Space comes before the one without Bed Space in sort order)
				if ((inpatientEpisode1.getBed().getBedSpace() != null && inpatientEpisode1.getBed().getBedSpace().getBedNumber() != null) && (inpatientEpisode2.getBed().getBedSpace() == null || inpatientEpisode2.getBed().getBedSpace().getBedNumber() == null))
					return order;
				
				if ((inpatientEpisode1.getBed().getBedSpace() == null || inpatientEpisode1.getBed().getBedSpace().getBedNumber() == null) && (inpatientEpisode2.getBed().getBedSpace() != null && inpatientEpisode2.getBed().getBedSpace().getBedNumber() != null))
					return -1 * order;
	
				
				if (inpatientEpisode1.getBed().getBedSpace().getBedNumber().trim().length() == 0 && inpatientEpisode2.getBed().getBedSpace().getBedNumber().trim().length() == 0)
					return 0;
				
				String bedNumber1 = inpatientEpisode1.getBed().getBedSpace().getBedNumber().trim().replace("-", "").replace(" ", "");
				String bedNumber2 = inpatientEpisode2.getBed().getBedSpace().getBedNumber().trim().replace("-", "").replace(" ", "");
				
				return order * compareNumberAwareString(bedNumber1, bedNumber2);
			}
			
			return order * inpatientEpisode1.getBed().getBay().getName().toLowerCase().compareTo(inpatientEpisode2.getBed().getBay().getName().toLowerCase());
			
		}
		
		
		private int compareNumberAwareString(String bedSpace1, String bedSpace2)
		{
			// Split the Bed Number string into tokens of letters and numbers
			String[] bedSpace1Tokens = SPLIT_PATTERN.split(bedSpace1);
			String[] bedSpace2Tokens = SPLIT_PATTERN.split(bedSpace2);
	
			// Iterate the minimum number of tokens from splits and compare them
			for (int i = 0; i < bedSpace1Tokens.length && i < bedSpace2Tokens.length; i++)
			{
				// Compare tokens that are both composed of letters
				if (!isNumberParsable(bedSpace1Tokens[i]) && !isNumberParsable(bedSpace2Tokens[i]))
				{
					int comparedResult = bedSpace1Tokens[i].toLowerCase().compareTo(bedSpace2Tokens[i].toLowerCase());
					
					// If the tokens are not equal then we can make a decision on the sort order
					if (comparedResult != 0)
						return comparedResult;
				}
	
				// Compare tokens that are both composed of numbers
				if (isNumberParsable(bedSpace1Tokens[i]) && isNumberParsable(bedSpace2Tokens[i]))
				{
					Integer bedSpace1Number = Integer.parseInt(bedSpace1Tokens[i]);
					Integer bedSpace2Number = Integer.parseInt(bedSpace2Tokens[i]);
				
					int comparedResult = bedSpace1Number.compareTo(bedSpace2Number);
					
					// If the tokens are not equal then we can make a decision on the sort order
					if (comparedResult != 0)
						return comparedResult; 	// Return the opposite of the result as the bigger number is 
				}
				
				// If the tokens are not composed by letter or by numbers both, then numbers come before letters
				if (isNumberParsable(bedSpace1Tokens[i]) && !isNumberParsable(bedSpace2Tokens[i]))
					return 1;
				
				if (!isNumberParsable(bedSpace1Tokens[i]) && isNumberParsable(bedSpace2Tokens[i]))
					return -1;
			}
			
			// Shorter split comes first in sort order and wins
			if (bedSpace1Tokens.length > bedSpace2Tokens.length)
				return -1;
			
			if (bedSpace1Tokens.length < bedSpace2Tokens.length)
				return 1;
			
			// At this point the strings are equal
			return 0;
		}
		
		
		private boolean isNumberParsable(String input)
		{
		    boolean parsable = true;
		    try
		    {
		        Integer.parseInt(input);
		    }
		    catch(NumberFormatException e)
		    {
		        parsable = false;
		    }
		    return parsable;
		}					
	}
	
	/**
	* getBedNumberComparator -  retrieves a new instance of static class InpatientEpisodeLiteVoBedNumberComparator
	*/
	public static InpatientEpisodeLiteVoBedNumberComparator getBedNumberComparator(ims.framework.enumerations.SortOrder sortOrder)
	{
		return new InpatientEpisodeLiteVo.InpatientEpisodeLiteVoBedNumberComparator(sortOrder);
	}
	
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pasevent != null)
		{
			if(!this.pasevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.reasondelayeddischarge != null)
		{
			if(!this.reasondelayeddischarge.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.transportdetails != null)
		{
			if(!this.transportdetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pasevent != null)
		{
			String[] listOfOtherErrors = this.pasevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.vacatedbednumber != null)
			if(this.vacatedbednumber.length() > 255)
				listOfErrors.add("The length of the field [vacatedbednumber] in the value object [ims.core.vo.InpatientEpisodeLiteVo] is too big. It should be less or equal to 255");
		if(this.reasondelayeddischarge != null)
		{
			String[] listOfOtherErrors = this.reasondelayeddischarge.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.transportdetails != null)
		{
			String[] listOfOtherErrors = this.transportdetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InpatientEpisodeLiteVo clone = new InpatientEpisodeLiteVo(this.id, this.version);
		
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventADTVo)this.pasevent.clone();
		if(this.estdischargedate == null)
			clone.estdischargedate = null;
		else
			clone.estdischargedate = (ims.framework.utils.DateTime)this.estdischargedate.clone();
		clone.isconfirmeddischarge = this.isconfirmeddischarge;
		clone.wardstays = this.wardstays;
		clone.consultantstays = this.consultantstays;
		if(this.confirmeddischargedatetime == null)
			clone.confirmeddischargedatetime = null;
		else
			clone.confirmeddischargedatetime = (ims.framework.utils.DateTime)this.confirmeddischargedatetime.clone();
		clone.ismaternityinpatient = this.ismaternityinpatient;
		if(this.bed == null)
			clone.bed = null;
		else
			clone.bed = (ims.core.vo.BedSpaceStateBayOnlyVo)this.bed.clone();
		if(this.dischargereadydate == null)
			clone.dischargereadydate = null;
		else
			clone.dischargereadydate = (ims.framework.utils.Date)this.dischargereadydate.clone();
		clone.isonhomeleave = this.isonhomeleave;
		if(this.expecteddateofreturn == null)
			clone.expecteddateofreturn = null;
		else
			clone.expecteddateofreturn = (ims.framework.utils.Date)this.expecteddateofreturn.clone();
		if(this.expectedtimeofreturn == null)
			clone.expectedtimeofreturn = null;
		else
			clone.expectedtimeofreturn = (ims.framework.utils.Time)this.expectedtimeofreturn.clone();
		clone.vacatedbednumber = this.vacatedbednumber;
		if(this.dateonhomeleave == null)
			clone.dateonhomeleave = null;
		else
			clone.dateonhomeleave = (ims.framework.utils.Date)this.dateonhomeleave.clone();
		if(this.vteassessmentstatus == null)
			clone.vteassessmentstatus = null;
		else
			clone.vteassessmentstatus = (ims.clinical.vo.lookups.VTEAsessmentStatus)this.vteassessmentstatus.clone();
		clone.vteriskassessment = this.vteriskassessment;
		if(this.vteassessmentstatusreason == null)
			clone.vteassessmentstatusreason = null;
		else
			clone.vteassessmentstatusreason = (ims.clinical.vo.lookups.VTEAssessmentStatusReason)this.vteassessmentstatusreason.clone();
		if(this.reasondelayeddischarge == null)
			clone.reasondelayeddischarge = null;
		else
			clone.reasondelayeddischarge = (ims.core.vo.ReasonForDelayedDischargeVoCollection)this.reasondelayeddischarge.clone();
		if(this.extendedlengthofstayreason == null)
			clone.extendedlengthofstayreason = null;
		else
			clone.extendedlengthofstayreason = (ims.core.vo.lookups.ExtendedLengthOfStayReason)this.extendedlengthofstayreason.clone();
		if(this.medicallyfitfordischarge == null)
			clone.medicallyfitfordischarge = null;
		else
			clone.medicallyfitfordischarge = (ims.core.vo.lookups.YesNo)this.medicallyfitfordischarge.clone();
		clone.patientrequirestransport = this.patientrequirestransport;
		if(this.transportdetails == null)
			clone.transportdetails = null;
		else
			clone.transportdetails = (ims.core.vo.PatientTransportRequirementsVo)this.transportdetails.clone();
		clone.abletogodischargelounge = this.abletogodischargelounge;
		if(this.reasoncannotgodischargelounge == null)
			clone.reasoncannotgodischargelounge = null;
		else
			clone.reasoncannotgodischargelounge = (ims.core.vo.lookups.ReasonCannotGoDischargeLounge)this.reasoncannotgodischargelounge.clone();
		if(this.admissiondatetime == null)
			clone.admissiondatetime = null;
		else
			clone.admissiondatetime = (ims.framework.utils.DateTime)this.admissiondatetime.clone();
		if(this.timeonhomeleave == null)
			clone.timeonhomeleave = null;
		else
			clone.timeonhomeleave = (ims.framework.utils.Time)this.timeonhomeleave.clone();
		if(this.healthylodgerdetails == null)
			clone.healthylodgerdetails = null;
		else
			clone.healthylodgerdetails = (ims.core.vo.HealthyLodgerVo)this.healthylodgerdetails.clone();
		if(this.latestsecsscore == null)
			clone.latestsecsscore = null;
		else
			clone.latestsecsscore = (ims.clinical.vo.PatientSECSLiteVo)this.latestsecsscore.clone();
		if(this.currenttrackingmovement == null)
			clone.currenttrackingmovement = null;
		else
			clone.currenttrackingmovement = (ims.core.vo.TrackingMovementVo)this.currenttrackingmovement.clone();
		clone.isreadytoleave = this.isreadytoleave;
		if(this.readytoleavedecisiondatetime == null)
			clone.readytoleavedecisiondatetime = null;
		else
			clone.readytoleavedecisiondatetime = (ims.framework.utils.DateTime)this.readytoleavedecisiondatetime.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InpatientEpisodeLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InpatientEpisodeLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((InpatientEpisodeLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((InpatientEpisodeLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pasevent != null)
			count++;
		if(this.estdischargedate != null)
			count++;
		if(this.isconfirmeddischarge != null)
			count++;
		if(this.wardstays != null)
			count++;
		if(this.consultantstays != null)
			count++;
		if(this.confirmeddischargedatetime != null)
			count++;
		if(this.ismaternityinpatient != null)
			count++;
		if(this.bed != null)
			count++;
		if(this.dischargereadydate != null)
			count++;
		if(this.isonhomeleave != null)
			count++;
		if(this.expecteddateofreturn != null)
			count++;
		if(this.expectedtimeofreturn != null)
			count++;
		if(this.vacatedbednumber != null)
			count++;
		if(this.dateonhomeleave != null)
			count++;
		if(this.vteassessmentstatus != null)
			count++;
		if(this.vteriskassessment != null)
			count++;
		if(this.vteassessmentstatusreason != null)
			count++;
		if(this.reasondelayeddischarge != null)
			count++;
		if(this.extendedlengthofstayreason != null)
			count++;
		if(this.medicallyfitfordischarge != null)
			count++;
		if(this.patientrequirestransport != null)
			count++;
		if(this.transportdetails != null)
			count++;
		if(this.abletogodischargelounge != null)
			count++;
		if(this.reasoncannotgodischargelounge != null)
			count++;
		if(this.admissiondatetime != null)
			count++;
		if(this.timeonhomeleave != null)
			count++;
		if(this.healthylodgerdetails != null)
			count++;
		if(this.latestsecsscore != null)
			count++;
		if(this.currenttrackingmovement != null)
			count++;
		if(this.isreadytoleave != null)
			count++;
		if(this.readytoleavedecisiondatetime != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 31;
	}
	protected ims.core.vo.PasEventADTVo pasevent;
	protected ims.framework.utils.DateTime estdischargedate;
	protected Boolean isconfirmeddischarge;
	protected ims.core.admin.pas.vo.WardStayRefVoCollection wardstays;
	protected ims.core.admin.pas.vo.ConsultantStayRefVoCollection consultantstays;
	protected ims.framework.utils.DateTime confirmeddischargedatetime;
	protected Boolean ismaternityinpatient;
	protected ims.core.vo.BedSpaceStateBayOnlyVo bed;
	protected ims.framework.utils.Date dischargereadydate;
	protected Boolean isonhomeleave;
	protected ims.framework.utils.Date expecteddateofreturn;
	protected ims.framework.utils.Time expectedtimeofreturn;
	protected String vacatedbednumber;
	protected ims.framework.utils.Date dateonhomeleave;
	protected ims.clinical.vo.lookups.VTEAsessmentStatus vteassessmentstatus;
	protected ims.core.clinical.vo.VTERiskAssessmentRefVo vteriskassessment;
	protected ims.clinical.vo.lookups.VTEAssessmentStatusReason vteassessmentstatusreason;
	protected ims.core.vo.ReasonForDelayedDischargeVoCollection reasondelayeddischarge;
	protected ims.core.vo.lookups.ExtendedLengthOfStayReason extendedlengthofstayreason;
	protected ims.core.vo.lookups.YesNo medicallyfitfordischarge;
	protected Boolean patientrequirestransport;
	protected ims.core.vo.PatientTransportRequirementsVo transportdetails;
	protected Boolean abletogodischargelounge;
	protected ims.core.vo.lookups.ReasonCannotGoDischargeLounge reasoncannotgodischargelounge;
	protected ims.framework.utils.DateTime admissiondatetime;
	protected ims.framework.utils.Time timeonhomeleave;
	protected ims.core.vo.HealthyLodgerVo healthylodgerdetails;
	protected ims.clinical.vo.PatientSECSLiteVo latestsecsscore;
	protected ims.core.vo.TrackingMovementVo currenttrackingmovement;
	protected Boolean isreadytoleave;
	protected ims.framework.utils.DateTime readytoleavedecisiondatetime;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
