//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.cds.CDSElectiveList business object (ID: 1104100007).
 */
public class CDSElectiveListVo extends ims.core.cds.vo.CDSElectiveListRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CDSElectiveListVo()
	{
	}
	public CDSElectiveListVo(Integer id, int version)
	{
		super(id, version);
	}
	public CDSElectiveListVo(ims.core.vo.beans.CDSElectiveListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.cdsapplicabledate = bean.getCDSApplicableDate() == null ? null : bean.getCDSApplicableDate().buildDateTime();
		this.cdssenderorgcode = bean.getCDSSenderOrgCode();
		this.ubrn = bean.getUBRN();
		this.pathwayidentifier = bean.getPathwayIdentifier();
		this.pathwayorgcode = bean.getPathwayOrgCode();
		this.referraltotreatmentstatus = bean.getReferralToTreatmentStatus();
		this.waittimemeasuretype = bean.getWaitTimeMeasureType();
		this.rttstartdate = bean.getRTTStartDate() == null ? null : bean.getRTTStartDate().buildDate();
		this.rttenddate = bean.getRTTEndDate() == null ? null : bean.getRTTEndDate().buildDate();
		this.localpatientidentifier = bean.getLocalPatientIdentifier();
		this.ccgorgcode = bean.getCCGOrgCode();
		this.withheldidentityreason = bean.getWithHeldIdentityReason();
		this.patidorgcode = bean.getPatIdOrgCode();
		this.nhsnumber = bean.getNHSNumber();
		this.nhsnumberstatusind = bean.getNHSNumberStatusInd();
		this.patientname = bean.getPatientName();
		this.patientaddress = bean.getPatientAddress();
		this.postcode = bean.getPostCode();
		this.pctorgcode = bean.getPCTOrgCode();
		this.dateofbirth = bean.getDateOfBirth() == null ? null : bean.getDateOfBirth().buildDate();
		this.persongender = bean.getPersonGender();
		this.carersupportind = bean.getCarerSupportInd();
		this.commserialnumber = bean.getCommSerialNumber();
		this.nhsservagreelinenum = bean.getNHSServAgreeLineNum();
		this.providerrefnum = bean.getProviderRefNum();
		this.commissionerreferencenum = bean.getCommissionerReferenceNum();
		this.orgcodeprovider = bean.getOrgCodeProvider();
		this.orgcodecommissioner = bean.getOrgCodeCommissioner();
		this.nhsservagreechangedate = bean.getNHSServAgreeChangeDate() == null ? null : bean.getNHSServAgreeChangeDate().buildDate();
		this.electivelistid = bean.getElectiveListID();
		this.admincategory = bean.getAdminCategory();
		this.countsuspendeddays = bean.getCountSuspendedDays();
		this.elestatus = bean.getELEStatus();
		this.eletype = bean.getELEType();
		this.intendedmanagement = bean.getIntendedManagement();
		this.intendedprocedure = bean.getIntendedProcedure();
		this.prioritytypecode = bean.getPriorityTypeCode();
		this.patientclassification = bean.getPatientClassification();
		this.decidedtoadmitdate = bean.getDecidedToAdmitDate() == null ? null : bean.getDecidedToAdmitDate().buildDate();
		this.ageatcdsactivity = bean.getAgeAtCDSActivity();
		this.admissionmethod = bean.getAdmissionMethod();
		this.overseasvisitorstatus = bean.getOverseasVisitorStatus();
		this.guarenteedadmissiondate = bean.getGuarenteedAdmissionDate() == null ? null : bean.getGuarenteedAdmissionDate().buildDate();
		this.lastdnacancelleddate = bean.getLastDNACancelledDate() == null ? null : bean.getLastDNACancelledDate().buildDate();
		this.lastrevieweddate = bean.getLastReviewedDate() == null ? null : bean.getLastReviewedDate().buildDate();
		this.consultantcode = bean.getConsultantCode();
		this.specialtycode = bean.getSpecialtyCode();
		this.treatmentfunccode = bean.getTreatmentFuncCode();
		this.localsubspecialtycode = bean.getLocalSubSpecialtyCode();
		this.procedurescheme = bean.getProcedureScheme();
		this.procedure = bean.getProcedure();
		this.proceduredate = bean.getProcedureDate() == null ? null : bean.getProcedureDate().buildDate();
		this.profregistrationcode = bean.getProfRegistrationCode();
		this.profregistrationid = bean.getProfRegistrationID();
		this.patientgpcode = bean.getPatientGPCode();
		this.patientgppractice = bean.getPatientGPPractice();
		this.referrercode = bean.getReferrerCode();
		this.referrerpractice = bean.getReferrerPractice();
		this.outcomecode = bean.getOutcomeCode();
		this.datetcioffered = bean.getDateTCIOffered() == null ? null : bean.getDateTCIOffered().buildDate();
		this.erodate = bean.getERODate() == null ? null : bean.getERODate().buildDate();
		this.origdecisiontoadmitdate = bean.getOrigDecisionToAdmitDate() == null ? null : bean.getOrigDecisionToAdmitDate().buildDate();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.removalreason = bean.getRemovalReason();
		this.removaldate = bean.getRemovalDate() == null ? null : bean.getRemovalDate().buildDate();
		this.episodestartdate = bean.getEpisodeStartDate() == null ? null : bean.getEpisodeStartDate().buildDate();
		if(bean.getOPCSProcedureGroup() != null)
		{
			this.opcsproceduregroup = new ims.core.cds.vo.CDSProcedureDetailsRefVoCollection();
			for(int opcsproceduregroup_i = 0; opcsproceduregroup_i < bean.getOPCSProcedureGroup().length; opcsproceduregroup_i++)
			{
				this.opcsproceduregroup.add(new ims.core.cds.vo.CDSProcedureDetailsRefVo(new Integer(bean.getOPCSProcedureGroup()[opcsproceduregroup_i].getId()), bean.getOPCSProcedureGroup()[opcsproceduregroup_i].getVersion()));
			}
		}
		this.readproceduregroup = bean.getREADProcedureGroup() == null ? null : new ims.core.cds.vo.CDSProcedureDetailsRefVo(new Integer(bean.getREADProcedureGroup().getId()), bean.getREADProcedureGroup().getVersion());
		this.locationgroup = bean.getLocationGroup() == null ? null : new ims.core.cds.vo.CDSWaitingListLocGroupRefVo(new Integer(bean.getLocationGroup().getId()), bean.getLocationGroup().getVersion());
		this.carecontextid = bean.getCareContextId();
		this.hrgcode = bean.getHRGCode();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.CDSElectiveListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.cdsapplicabledate = bean.getCDSApplicableDate() == null ? null : bean.getCDSApplicableDate().buildDateTime();
		this.cdssenderorgcode = bean.getCDSSenderOrgCode();
		this.ubrn = bean.getUBRN();
		this.pathwayidentifier = bean.getPathwayIdentifier();
		this.pathwayorgcode = bean.getPathwayOrgCode();
		this.referraltotreatmentstatus = bean.getReferralToTreatmentStatus();
		this.waittimemeasuretype = bean.getWaitTimeMeasureType();
		this.rttstartdate = bean.getRTTStartDate() == null ? null : bean.getRTTStartDate().buildDate();
		this.rttenddate = bean.getRTTEndDate() == null ? null : bean.getRTTEndDate().buildDate();
		this.localpatientidentifier = bean.getLocalPatientIdentifier();
		this.ccgorgcode = bean.getCCGOrgCode();
		this.withheldidentityreason = bean.getWithHeldIdentityReason();
		this.patidorgcode = bean.getPatIdOrgCode();
		this.nhsnumber = bean.getNHSNumber();
		this.nhsnumberstatusind = bean.getNHSNumberStatusInd();
		this.patientname = bean.getPatientName();
		this.patientaddress = bean.getPatientAddress();
		this.postcode = bean.getPostCode();
		this.pctorgcode = bean.getPCTOrgCode();
		this.dateofbirth = bean.getDateOfBirth() == null ? null : bean.getDateOfBirth().buildDate();
		this.persongender = bean.getPersonGender();
		this.carersupportind = bean.getCarerSupportInd();
		this.commserialnumber = bean.getCommSerialNumber();
		this.nhsservagreelinenum = bean.getNHSServAgreeLineNum();
		this.providerrefnum = bean.getProviderRefNum();
		this.commissionerreferencenum = bean.getCommissionerReferenceNum();
		this.orgcodeprovider = bean.getOrgCodeProvider();
		this.orgcodecommissioner = bean.getOrgCodeCommissioner();
		this.nhsservagreechangedate = bean.getNHSServAgreeChangeDate() == null ? null : bean.getNHSServAgreeChangeDate().buildDate();
		this.electivelistid = bean.getElectiveListID();
		this.admincategory = bean.getAdminCategory();
		this.countsuspendeddays = bean.getCountSuspendedDays();
		this.elestatus = bean.getELEStatus();
		this.eletype = bean.getELEType();
		this.intendedmanagement = bean.getIntendedManagement();
		this.intendedprocedure = bean.getIntendedProcedure();
		this.prioritytypecode = bean.getPriorityTypeCode();
		this.patientclassification = bean.getPatientClassification();
		this.decidedtoadmitdate = bean.getDecidedToAdmitDate() == null ? null : bean.getDecidedToAdmitDate().buildDate();
		this.ageatcdsactivity = bean.getAgeAtCDSActivity();
		this.admissionmethod = bean.getAdmissionMethod();
		this.overseasvisitorstatus = bean.getOverseasVisitorStatus();
		this.guarenteedadmissiondate = bean.getGuarenteedAdmissionDate() == null ? null : bean.getGuarenteedAdmissionDate().buildDate();
		this.lastdnacancelleddate = bean.getLastDNACancelledDate() == null ? null : bean.getLastDNACancelledDate().buildDate();
		this.lastrevieweddate = bean.getLastReviewedDate() == null ? null : bean.getLastReviewedDate().buildDate();
		this.consultantcode = bean.getConsultantCode();
		this.specialtycode = bean.getSpecialtyCode();
		this.treatmentfunccode = bean.getTreatmentFuncCode();
		this.localsubspecialtycode = bean.getLocalSubSpecialtyCode();
		this.procedurescheme = bean.getProcedureScheme();
		this.procedure = bean.getProcedure();
		this.proceduredate = bean.getProcedureDate() == null ? null : bean.getProcedureDate().buildDate();
		this.profregistrationcode = bean.getProfRegistrationCode();
		this.profregistrationid = bean.getProfRegistrationID();
		this.patientgpcode = bean.getPatientGPCode();
		this.patientgppractice = bean.getPatientGPPractice();
		this.referrercode = bean.getReferrerCode();
		this.referrerpractice = bean.getReferrerPractice();
		this.outcomecode = bean.getOutcomeCode();
		this.datetcioffered = bean.getDateTCIOffered() == null ? null : bean.getDateTCIOffered().buildDate();
		this.erodate = bean.getERODate() == null ? null : bean.getERODate().buildDate();
		this.origdecisiontoadmitdate = bean.getOrigDecisionToAdmitDate() == null ? null : bean.getOrigDecisionToAdmitDate().buildDate();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.removalreason = bean.getRemovalReason();
		this.removaldate = bean.getRemovalDate() == null ? null : bean.getRemovalDate().buildDate();
		this.episodestartdate = bean.getEpisodeStartDate() == null ? null : bean.getEpisodeStartDate().buildDate();
		if(bean.getOPCSProcedureGroup() != null)
		{
			this.opcsproceduregroup = new ims.core.cds.vo.CDSProcedureDetailsRefVoCollection();
			for(int opcsproceduregroup_i = 0; opcsproceduregroup_i < bean.getOPCSProcedureGroup().length; opcsproceduregroup_i++)
			{
				this.opcsproceduregroup.add(new ims.core.cds.vo.CDSProcedureDetailsRefVo(new Integer(bean.getOPCSProcedureGroup()[opcsproceduregroup_i].getId()), bean.getOPCSProcedureGroup()[opcsproceduregroup_i].getVersion()));
			}
		}
		this.readproceduregroup = bean.getREADProcedureGroup() == null ? null : new ims.core.cds.vo.CDSProcedureDetailsRefVo(new Integer(bean.getREADProcedureGroup().getId()), bean.getREADProcedureGroup().getVersion());
		this.locationgroup = bean.getLocationGroup() == null ? null : new ims.core.cds.vo.CDSWaitingListLocGroupRefVo(new Integer(bean.getLocationGroup().getId()), bean.getLocationGroup().getVersion());
		this.carecontextid = bean.getCareContextId();
		this.hrgcode = bean.getHRGCode();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.CDSElectiveListVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.CDSElectiveListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.CDSElectiveListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CDSAPPLICABLEDATE"))
			return getCDSApplicableDate();
		if(fieldName.equals("CDSSENDERORGCODE"))
			return getCDSSenderOrgCode();
		if(fieldName.equals("UBRN"))
			return getUBRN();
		if(fieldName.equals("PATHWAYIDENTIFIER"))
			return getPathwayIdentifier();
		if(fieldName.equals("PATHWAYORGCODE"))
			return getPathwayOrgCode();
		if(fieldName.equals("REFERRALTOTREATMENTSTATUS"))
			return getReferralToTreatmentStatus();
		if(fieldName.equals("WAITTIMEMEASURETYPE"))
			return getWaitTimeMeasureType();
		if(fieldName.equals("RTTSTARTDATE"))
			return getRTTStartDate();
		if(fieldName.equals("RTTENDDATE"))
			return getRTTEndDate();
		if(fieldName.equals("LOCALPATIENTIDENTIFIER"))
			return getLocalPatientIdentifier();
		if(fieldName.equals("CCGORGCODE"))
			return getCCGOrgCode();
		if(fieldName.equals("WITHHELDIDENTITYREASON"))
			return getWithHeldIdentityReason();
		if(fieldName.equals("PATIDORGCODE"))
			return getPatIdOrgCode();
		if(fieldName.equals("NHSNUMBER"))
			return getNHSNumber();
		if(fieldName.equals("NHSNUMBERSTATUSIND"))
			return getNHSNumberStatusInd();
		if(fieldName.equals("PATIENTNAME"))
			return getPatientName();
		if(fieldName.equals("PATIENTADDRESS"))
			return getPatientAddress();
		if(fieldName.equals("POSTCODE"))
			return getPostCode();
		if(fieldName.equals("PCTORGCODE"))
			return getPCTOrgCode();
		if(fieldName.equals("DATEOFBIRTH"))
			return getDateOfBirth();
		if(fieldName.equals("PERSONGENDER"))
			return getPersonGender();
		if(fieldName.equals("CARERSUPPORTIND"))
			return getCarerSupportInd();
		if(fieldName.equals("COMMSERIALNUMBER"))
			return getCommSerialNumber();
		if(fieldName.equals("NHSSERVAGREELINENUM"))
			return getNHSServAgreeLineNum();
		if(fieldName.equals("PROVIDERREFNUM"))
			return getProviderRefNum();
		if(fieldName.equals("COMMISSIONERREFERENCENUM"))
			return getCommissionerReferenceNum();
		if(fieldName.equals("ORGCODEPROVIDER"))
			return getOrgCodeProvider();
		if(fieldName.equals("ORGCODECOMMISSIONER"))
			return getOrgCodeCommissioner();
		if(fieldName.equals("NHSSERVAGREECHANGEDATE"))
			return getNHSServAgreeChangeDate();
		if(fieldName.equals("ELECTIVELISTID"))
			return getElectiveListID();
		if(fieldName.equals("ADMINCATEGORY"))
			return getAdminCategory();
		if(fieldName.equals("COUNTSUSPENDEDDAYS"))
			return getCountSuspendedDays();
		if(fieldName.equals("ELESTATUS"))
			return getELEStatus();
		if(fieldName.equals("ELETYPE"))
			return getELEType();
		if(fieldName.equals("INTENDEDMANAGEMENT"))
			return getIntendedManagement();
		if(fieldName.equals("INTENDEDPROCEDURE"))
			return getIntendedProcedure();
		if(fieldName.equals("PRIORITYTYPECODE"))
			return getPriorityTypeCode();
		if(fieldName.equals("PATIENTCLASSIFICATION"))
			return getPatientClassification();
		if(fieldName.equals("DECIDEDTOADMITDATE"))
			return getDecidedToAdmitDate();
		if(fieldName.equals("AGEATCDSACTIVITY"))
			return getAgeAtCDSActivity();
		if(fieldName.equals("ADMISSIONMETHOD"))
			return getAdmissionMethod();
		if(fieldName.equals("OVERSEASVISITORSTATUS"))
			return getOverseasVisitorStatus();
		if(fieldName.equals("GUARENTEEDADMISSIONDATE"))
			return getGuarenteedAdmissionDate();
		if(fieldName.equals("LASTDNACANCELLEDDATE"))
			return getLastDNACancelledDate();
		if(fieldName.equals("LASTREVIEWEDDATE"))
			return getLastReviewedDate();
		if(fieldName.equals("CONSULTANTCODE"))
			return getConsultantCode();
		if(fieldName.equals("SPECIALTYCODE"))
			return getSpecialtyCode();
		if(fieldName.equals("TREATMENTFUNCCODE"))
			return getTreatmentFuncCode();
		if(fieldName.equals("LOCALSUBSPECIALTYCODE"))
			return getLocalSubSpecialtyCode();
		if(fieldName.equals("PROCEDURESCHEME"))
			return getProcedureScheme();
		if(fieldName.equals("PROCEDURE"))
			return getProcedure();
		if(fieldName.equals("PROCEDUREDATE"))
			return getProcedureDate();
		if(fieldName.equals("PROFREGISTRATIONCODE"))
			return getProfRegistrationCode();
		if(fieldName.equals("PROFREGISTRATIONID"))
			return getProfRegistrationID();
		if(fieldName.equals("PATIENTGPCODE"))
			return getPatientGPCode();
		if(fieldName.equals("PATIENTGPPRACTICE"))
			return getPatientGPPractice();
		if(fieldName.equals("REFERRERCODE"))
			return getReferrerCode();
		if(fieldName.equals("REFERRERPRACTICE"))
			return getReferrerPractice();
		if(fieldName.equals("OUTCOMECODE"))
			return getOutcomeCode();
		if(fieldName.equals("DATETCIOFFERED"))
			return getDateTCIOffered();
		if(fieldName.equals("ERODATE"))
			return getERODate();
		if(fieldName.equals("ORIGDECISIONTOADMITDATE"))
			return getOrigDecisionToAdmitDate();
		if(fieldName.equals("STARTDATE"))
			return getStartDate();
		if(fieldName.equals("REMOVALREASON"))
			return getRemovalReason();
		if(fieldName.equals("REMOVALDATE"))
			return getRemovalDate();
		if(fieldName.equals("EPISODESTARTDATE"))
			return getEpisodeStartDate();
		if(fieldName.equals("OPCSPROCEDUREGROUP"))
			return getOPCSProcedureGroup();
		if(fieldName.equals("READPROCEDUREGROUP"))
			return getREADProcedureGroup();
		if(fieldName.equals("LOCATIONGROUP"))
			return getLocationGroup();
		if(fieldName.equals("CARECONTEXTID"))
			return getCareContextId();
		if(fieldName.equals("HRGCODE"))
			return getHRGCode();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCDSApplicableDateIsNotNull()
	{
		return this.cdsapplicabledate != null;
	}
	public ims.framework.utils.DateTime getCDSApplicableDate()
	{
		return this.cdsapplicabledate;
	}
	public void setCDSApplicableDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.cdsapplicabledate = value;
	}
	public boolean getCDSSenderOrgCodeIsNotNull()
	{
		return this.cdssenderorgcode != null;
	}
	public String getCDSSenderOrgCode()
	{
		return this.cdssenderorgcode;
	}
	public static int getCDSSenderOrgCodeMaxLength()
	{
		return 5;
	}
	public void setCDSSenderOrgCode(String value)
	{
		this.isValidated = false;
		this.cdssenderorgcode = value;
	}
	public boolean getUBRNIsNotNull()
	{
		return this.ubrn != null;
	}
	public String getUBRN()
	{
		return this.ubrn;
	}
	public static int getUBRNMaxLength()
	{
		return 12;
	}
	public void setUBRN(String value)
	{
		this.isValidated = false;
		this.ubrn = value;
	}
	public boolean getPathwayIdentifierIsNotNull()
	{
		return this.pathwayidentifier != null;
	}
	public String getPathwayIdentifier()
	{
		return this.pathwayidentifier;
	}
	public static int getPathwayIdentifierMaxLength()
	{
		return 20;
	}
	public void setPathwayIdentifier(String value)
	{
		this.isValidated = false;
		this.pathwayidentifier = value;
	}
	public boolean getPathwayOrgCodeIsNotNull()
	{
		return this.pathwayorgcode != null;
	}
	public String getPathwayOrgCode()
	{
		return this.pathwayorgcode;
	}
	public static int getPathwayOrgCodeMaxLength()
	{
		return 3;
	}
	public void setPathwayOrgCode(String value)
	{
		this.isValidated = false;
		this.pathwayorgcode = value;
	}
	public boolean getReferralToTreatmentStatusIsNotNull()
	{
		return this.referraltotreatmentstatus != null;
	}
	public String getReferralToTreatmentStatus()
	{
		return this.referraltotreatmentstatus;
	}
	public static int getReferralToTreatmentStatusMaxLength()
	{
		return 2;
	}
	public void setReferralToTreatmentStatus(String value)
	{
		this.isValidated = false;
		this.referraltotreatmentstatus = value;
	}
	public boolean getWaitTimeMeasureTypeIsNotNull()
	{
		return this.waittimemeasuretype != null;
	}
	public String getWaitTimeMeasureType()
	{
		return this.waittimemeasuretype;
	}
	public static int getWaitTimeMeasureTypeMaxLength()
	{
		return 2;
	}
	public void setWaitTimeMeasureType(String value)
	{
		this.isValidated = false;
		this.waittimemeasuretype = value;
	}
	public boolean getRTTStartDateIsNotNull()
	{
		return this.rttstartdate != null;
	}
	public ims.framework.utils.Date getRTTStartDate()
	{
		return this.rttstartdate;
	}
	public void setRTTStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.rttstartdate = value;
	}
	public boolean getRTTEndDateIsNotNull()
	{
		return this.rttenddate != null;
	}
	public ims.framework.utils.Date getRTTEndDate()
	{
		return this.rttenddate;
	}
	public void setRTTEndDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.rttenddate = value;
	}
	public boolean getLocalPatientIdentifierIsNotNull()
	{
		return this.localpatientidentifier != null;
	}
	public String getLocalPatientIdentifier()
	{
		return this.localpatientidentifier;
	}
	public static int getLocalPatientIdentifierMaxLength()
	{
		return 10;
	}
	public void setLocalPatientIdentifier(String value)
	{
		this.isValidated = false;
		this.localpatientidentifier = value;
	}
	public boolean getCCGOrgCodeIsNotNull()
	{
		return this.ccgorgcode != null;
	}
	public String getCCGOrgCode()
	{
		return this.ccgorgcode;
	}
	public static int getCCGOrgCodeMaxLength()
	{
		return 3;
	}
	public void setCCGOrgCode(String value)
	{
		this.isValidated = false;
		this.ccgorgcode = value;
	}
	public boolean getWithHeldIdentityReasonIsNotNull()
	{
		return this.withheldidentityreason != null;
	}
	public String getWithHeldIdentityReason()
	{
		return this.withheldidentityreason;
	}
	public static int getWithHeldIdentityReasonMaxLength()
	{
		return 2;
	}
	public void setWithHeldIdentityReason(String value)
	{
		this.isValidated = false;
		this.withheldidentityreason = value;
	}
	public boolean getPatIdOrgCodeIsNotNull()
	{
		return this.patidorgcode != null;
	}
	public String getPatIdOrgCode()
	{
		return this.patidorgcode;
	}
	public static int getPatIdOrgCodeMaxLength()
	{
		return 5;
	}
	public void setPatIdOrgCode(String value)
	{
		this.isValidated = false;
		this.patidorgcode = value;
	}
	public boolean getNHSNumberIsNotNull()
	{
		return this.nhsnumber != null;
	}
	public String getNHSNumber()
	{
		return this.nhsnumber;
	}
	public static int getNHSNumberMaxLength()
	{
		return 17;
	}
	public void setNHSNumber(String value)
	{
		this.isValidated = false;
		this.nhsnumber = value;
	}
	public boolean getNHSNumberStatusIndIsNotNull()
	{
		return this.nhsnumberstatusind != null;
	}
	public String getNHSNumberStatusInd()
	{
		return this.nhsnumberstatusind;
	}
	public static int getNHSNumberStatusIndMaxLength()
	{
		return 2;
	}
	public void setNHSNumberStatusInd(String value)
	{
		this.isValidated = false;
		this.nhsnumberstatusind = value;
	}
	public boolean getPatientNameIsNotNull()
	{
		return this.patientname != null;
	}
	public String getPatientName()
	{
		return this.patientname;
	}
	public static int getPatientNameMaxLength()
	{
		return 70;
	}
	public void setPatientName(String value)
	{
		this.isValidated = false;
		this.patientname = value;
	}
	public boolean getPatientAddressIsNotNull()
	{
		return this.patientaddress != null;
	}
	public String getPatientAddress()
	{
		return this.patientaddress;
	}
	public static int getPatientAddressMaxLength()
	{
		return 175;
	}
	public void setPatientAddress(String value)
	{
		this.isValidated = false;
		this.patientaddress = value;
	}
	public boolean getPostCodeIsNotNull()
	{
		return this.postcode != null;
	}
	public String getPostCode()
	{
		return this.postcode;
	}
	public static int getPostCodeMaxLength()
	{
		return 8;
	}
	public void setPostCode(String value)
	{
		this.isValidated = false;
		this.postcode = value;
	}
	public boolean getPCTOrgCodeIsNotNull()
	{
		return this.pctorgcode != null;
	}
	public String getPCTOrgCode()
	{
		return this.pctorgcode;
	}
	public static int getPCTOrgCodeMaxLength()
	{
		return 3;
	}
	public void setPCTOrgCode(String value)
	{
		this.isValidated = false;
		this.pctorgcode = value;
	}
	public boolean getDateOfBirthIsNotNull()
	{
		return this.dateofbirth != null;
	}
	public ims.framework.utils.Date getDateOfBirth()
	{
		return this.dateofbirth;
	}
	public void setDateOfBirth(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateofbirth = value;
	}
	public boolean getPersonGenderIsNotNull()
	{
		return this.persongender != null;
	}
	public String getPersonGender()
	{
		return this.persongender;
	}
	public static int getPersonGenderMaxLength()
	{
		return 1;
	}
	public void setPersonGender(String value)
	{
		this.isValidated = false;
		this.persongender = value;
	}
	public boolean getCarerSupportIndIsNotNull()
	{
		return this.carersupportind != null;
	}
	public String getCarerSupportInd()
	{
		return this.carersupportind;
	}
	public static int getCarerSupportIndMaxLength()
	{
		return 2;
	}
	public void setCarerSupportInd(String value)
	{
		this.isValidated = false;
		this.carersupportind = value;
	}
	public boolean getCommSerialNumberIsNotNull()
	{
		return this.commserialnumber != null;
	}
	public String getCommSerialNumber()
	{
		return this.commserialnumber;
	}
	public static int getCommSerialNumberMaxLength()
	{
		return 6;
	}
	public void setCommSerialNumber(String value)
	{
		this.isValidated = false;
		this.commserialnumber = value;
	}
	public boolean getNHSServAgreeLineNumIsNotNull()
	{
		return this.nhsservagreelinenum != null;
	}
	public String getNHSServAgreeLineNum()
	{
		return this.nhsservagreelinenum;
	}
	public static int getNHSServAgreeLineNumMaxLength()
	{
		return 10;
	}
	public void setNHSServAgreeLineNum(String value)
	{
		this.isValidated = false;
		this.nhsservagreelinenum = value;
	}
	public boolean getProviderRefNumIsNotNull()
	{
		return this.providerrefnum != null;
	}
	public String getProviderRefNum()
	{
		return this.providerrefnum;
	}
	public static int getProviderRefNumMaxLength()
	{
		return 17;
	}
	public void setProviderRefNum(String value)
	{
		this.isValidated = false;
		this.providerrefnum = value;
	}
	public boolean getCommissionerReferenceNumIsNotNull()
	{
		return this.commissionerreferencenum != null;
	}
	public String getCommissionerReferenceNum()
	{
		return this.commissionerreferencenum;
	}
	public static int getCommissionerReferenceNumMaxLength()
	{
		return 17;
	}
	public void setCommissionerReferenceNum(String value)
	{
		this.isValidated = false;
		this.commissionerreferencenum = value;
	}
	public boolean getOrgCodeProviderIsNotNull()
	{
		return this.orgcodeprovider != null;
	}
	public String getOrgCodeProvider()
	{
		return this.orgcodeprovider;
	}
	public static int getOrgCodeProviderMaxLength()
	{
		return 5;
	}
	public void setOrgCodeProvider(String value)
	{
		this.isValidated = false;
		this.orgcodeprovider = value;
	}
	public boolean getOrgCodeCommissionerIsNotNull()
	{
		return this.orgcodecommissioner != null;
	}
	public String getOrgCodeCommissioner()
	{
		return this.orgcodecommissioner;
	}
	public static int getOrgCodeCommissionerMaxLength()
	{
		return 5;
	}
	public void setOrgCodeCommissioner(String value)
	{
		this.isValidated = false;
		this.orgcodecommissioner = value;
	}
	public boolean getNHSServAgreeChangeDateIsNotNull()
	{
		return this.nhsservagreechangedate != null;
	}
	public ims.framework.utils.Date getNHSServAgreeChangeDate()
	{
		return this.nhsservagreechangedate;
	}
	public void setNHSServAgreeChangeDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.nhsservagreechangedate = value;
	}
	public boolean getElectiveListIDIsNotNull()
	{
		return this.electivelistid != null;
	}
	public String getElectiveListID()
	{
		return this.electivelistid;
	}
	public static int getElectiveListIDMaxLength()
	{
		return 12;
	}
	public void setElectiveListID(String value)
	{
		this.isValidated = false;
		this.electivelistid = value;
	}
	public boolean getAdminCategoryIsNotNull()
	{
		return this.admincategory != null;
	}
	public String getAdminCategory()
	{
		return this.admincategory;
	}
	public static int getAdminCategoryMaxLength()
	{
		return 2;
	}
	public void setAdminCategory(String value)
	{
		this.isValidated = false;
		this.admincategory = value;
	}
	public boolean getCountSuspendedDaysIsNotNull()
	{
		return this.countsuspendeddays != null;
	}
	public Integer getCountSuspendedDays()
	{
		return this.countsuspendeddays;
	}
	public void setCountSuspendedDays(Integer value)
	{
		this.isValidated = false;
		this.countsuspendeddays = value;
	}
	public boolean getELEStatusIsNotNull()
	{
		return this.elestatus != null;
	}
	public String getELEStatus()
	{
		return this.elestatus;
	}
	public static int getELEStatusMaxLength()
	{
		return 2;
	}
	public void setELEStatus(String value)
	{
		this.isValidated = false;
		this.elestatus = value;
	}
	public boolean getELETypeIsNotNull()
	{
		return this.eletype != null;
	}
	public String getELEType()
	{
		return this.eletype;
	}
	public static int getELETypeMaxLength()
	{
		return 2;
	}
	public void setELEType(String value)
	{
		this.isValidated = false;
		this.eletype = value;
	}
	public boolean getIntendedManagementIsNotNull()
	{
		return this.intendedmanagement != null;
	}
	public String getIntendedManagement()
	{
		return this.intendedmanagement;
	}
	public static int getIntendedManagementMaxLength()
	{
		return 1;
	}
	public void setIntendedManagement(String value)
	{
		this.isValidated = false;
		this.intendedmanagement = value;
	}
	public boolean getIntendedProcedureIsNotNull()
	{
		return this.intendedprocedure != null;
	}
	public String getIntendedProcedure()
	{
		return this.intendedprocedure;
	}
	public static int getIntendedProcedureMaxLength()
	{
		return 1;
	}
	public void setIntendedProcedure(String value)
	{
		this.isValidated = false;
		this.intendedprocedure = value;
	}
	public boolean getPriorityTypeCodeIsNotNull()
	{
		return this.prioritytypecode != null;
	}
	public String getPriorityTypeCode()
	{
		return this.prioritytypecode;
	}
	public static int getPriorityTypeCodeMaxLength()
	{
		return 1;
	}
	public void setPriorityTypeCode(String value)
	{
		this.isValidated = false;
		this.prioritytypecode = value;
	}
	public boolean getPatientClassificationIsNotNull()
	{
		return this.patientclassification != null;
	}
	public String getPatientClassification()
	{
		return this.patientclassification;
	}
	public static int getPatientClassificationMaxLength()
	{
		return 1;
	}
	public void setPatientClassification(String value)
	{
		this.isValidated = false;
		this.patientclassification = value;
	}
	public boolean getDecidedToAdmitDateIsNotNull()
	{
		return this.decidedtoadmitdate != null;
	}
	public ims.framework.utils.Date getDecidedToAdmitDate()
	{
		return this.decidedtoadmitdate;
	}
	public void setDecidedToAdmitDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.decidedtoadmitdate = value;
	}
	public boolean getAgeAtCDSActivityIsNotNull()
	{
		return this.ageatcdsactivity != null;
	}
	public Integer getAgeAtCDSActivity()
	{
		return this.ageatcdsactivity;
	}
	public void setAgeAtCDSActivity(Integer value)
	{
		this.isValidated = false;
		this.ageatcdsactivity = value;
	}
	public boolean getAdmissionMethodIsNotNull()
	{
		return this.admissionmethod != null;
	}
	public String getAdmissionMethod()
	{
		return this.admissionmethod;
	}
	public static int getAdmissionMethodMaxLength()
	{
		return 2;
	}
	public void setAdmissionMethod(String value)
	{
		this.isValidated = false;
		this.admissionmethod = value;
	}
	public boolean getOverseasVisitorStatusIsNotNull()
	{
		return this.overseasvisitorstatus != null;
	}
	public String getOverseasVisitorStatus()
	{
		return this.overseasvisitorstatus;
	}
	public static int getOverseasVisitorStatusMaxLength()
	{
		return 1;
	}
	public void setOverseasVisitorStatus(String value)
	{
		this.isValidated = false;
		this.overseasvisitorstatus = value;
	}
	public boolean getGuarenteedAdmissionDateIsNotNull()
	{
		return this.guarenteedadmissiondate != null;
	}
	public ims.framework.utils.Date getGuarenteedAdmissionDate()
	{
		return this.guarenteedadmissiondate;
	}
	public void setGuarenteedAdmissionDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.guarenteedadmissiondate = value;
	}
	public boolean getLastDNACancelledDateIsNotNull()
	{
		return this.lastdnacancelleddate != null;
	}
	public ims.framework.utils.Date getLastDNACancelledDate()
	{
		return this.lastdnacancelleddate;
	}
	public void setLastDNACancelledDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.lastdnacancelleddate = value;
	}
	public boolean getLastReviewedDateIsNotNull()
	{
		return this.lastrevieweddate != null;
	}
	public ims.framework.utils.Date getLastReviewedDate()
	{
		return this.lastrevieweddate;
	}
	public void setLastReviewedDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.lastrevieweddate = value;
	}
	public boolean getConsultantCodeIsNotNull()
	{
		return this.consultantcode != null;
	}
	public String getConsultantCode()
	{
		return this.consultantcode;
	}
	public static int getConsultantCodeMaxLength()
	{
		return 8;
	}
	public void setConsultantCode(String value)
	{
		this.isValidated = false;
		this.consultantcode = value;
	}
	public boolean getSpecialtyCodeIsNotNull()
	{
		return this.specialtycode != null;
	}
	public String getSpecialtyCode()
	{
		return this.specialtycode;
	}
	public static int getSpecialtyCodeMaxLength()
	{
		return 3;
	}
	public void setSpecialtyCode(String value)
	{
		this.isValidated = false;
		this.specialtycode = value;
	}
	public boolean getTreatmentFuncCodeIsNotNull()
	{
		return this.treatmentfunccode != null;
	}
	public String getTreatmentFuncCode()
	{
		return this.treatmentfunccode;
	}
	public static int getTreatmentFuncCodeMaxLength()
	{
		return 3;
	}
	public void setTreatmentFuncCode(String value)
	{
		this.isValidated = false;
		this.treatmentfunccode = value;
	}
	public boolean getLocalSubSpecialtyCodeIsNotNull()
	{
		return this.localsubspecialtycode != null;
	}
	public String getLocalSubSpecialtyCode()
	{
		return this.localsubspecialtycode;
	}
	public static int getLocalSubSpecialtyCodeMaxLength()
	{
		return 8;
	}
	public void setLocalSubSpecialtyCode(String value)
	{
		this.isValidated = false;
		this.localsubspecialtycode = value;
	}
	public boolean getProcedureSchemeIsNotNull()
	{
		return this.procedurescheme != null;
	}
	public String getProcedureScheme()
	{
		return this.procedurescheme;
	}
	public static int getProcedureSchemeMaxLength()
	{
		return 2;
	}
	public void setProcedureScheme(String value)
	{
		this.isValidated = false;
		this.procedurescheme = value;
	}
	public boolean getProcedureIsNotNull()
	{
		return this.procedure != null;
	}
	public String getProcedure()
	{
		return this.procedure;
	}
	public static int getProcedureMaxLength()
	{
		return 4;
	}
	public void setProcedure(String value)
	{
		this.isValidated = false;
		this.procedure = value;
	}
	public boolean getProcedureDateIsNotNull()
	{
		return this.proceduredate != null;
	}
	public ims.framework.utils.Date getProcedureDate()
	{
		return this.proceduredate;
	}
	public void setProcedureDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.proceduredate = value;
	}
	public boolean getProfRegistrationCodeIsNotNull()
	{
		return this.profregistrationcode != null;
	}
	public String getProfRegistrationCode()
	{
		return this.profregistrationcode;
	}
	public static int getProfRegistrationCodeMaxLength()
	{
		return 2;
	}
	public void setProfRegistrationCode(String value)
	{
		this.isValidated = false;
		this.profregistrationcode = value;
	}
	public boolean getProfRegistrationIDIsNotNull()
	{
		return this.profregistrationid != null;
	}
	public String getProfRegistrationID()
	{
		return this.profregistrationid;
	}
	public static int getProfRegistrationIDMaxLength()
	{
		return 12;
	}
	public void setProfRegistrationID(String value)
	{
		this.isValidated = false;
		this.profregistrationid = value;
	}
	public boolean getPatientGPCodeIsNotNull()
	{
		return this.patientgpcode != null;
	}
	public String getPatientGPCode()
	{
		return this.patientgpcode;
	}
	public static int getPatientGPCodeMaxLength()
	{
		return 8;
	}
	public void setPatientGPCode(String value)
	{
		this.isValidated = false;
		this.patientgpcode = value;
	}
	public boolean getPatientGPPracticeIsNotNull()
	{
		return this.patientgppractice != null;
	}
	public String getPatientGPPractice()
	{
		return this.patientgppractice;
	}
	public static int getPatientGPPracticeMaxLength()
	{
		return 6;
	}
	public void setPatientGPPractice(String value)
	{
		this.isValidated = false;
		this.patientgppractice = value;
	}
	public boolean getReferrerCodeIsNotNull()
	{
		return this.referrercode != null;
	}
	public String getReferrerCode()
	{
		return this.referrercode;
	}
	public static int getReferrerCodeMaxLength()
	{
		return 8;
	}
	public void setReferrerCode(String value)
	{
		this.isValidated = false;
		this.referrercode = value;
	}
	public boolean getReferrerPracticeIsNotNull()
	{
		return this.referrerpractice != null;
	}
	public String getReferrerPractice()
	{
		return this.referrerpractice;
	}
	public static int getReferrerPracticeMaxLength()
	{
		return 6;
	}
	public void setReferrerPractice(String value)
	{
		this.isValidated = false;
		this.referrerpractice = value;
	}
	public boolean getOutcomeCodeIsNotNull()
	{
		return this.outcomecode != null;
	}
	public String getOutcomeCode()
	{
		return this.outcomecode;
	}
	public static int getOutcomeCodeMaxLength()
	{
		return 1;
	}
	public void setOutcomeCode(String value)
	{
		this.isValidated = false;
		this.outcomecode = value;
	}
	public boolean getDateTCIOfferedIsNotNull()
	{
		return this.datetcioffered != null;
	}
	public ims.framework.utils.Date getDateTCIOffered()
	{
		return this.datetcioffered;
	}
	public void setDateTCIOffered(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datetcioffered = value;
	}
	public boolean getERODateIsNotNull()
	{
		return this.erodate != null;
	}
	public ims.framework.utils.Date getERODate()
	{
		return this.erodate;
	}
	public void setERODate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.erodate = value;
	}
	public boolean getOrigDecisionToAdmitDateIsNotNull()
	{
		return this.origdecisiontoadmitdate != null;
	}
	public ims.framework.utils.Date getOrigDecisionToAdmitDate()
	{
		return this.origdecisiontoadmitdate;
	}
	public void setOrigDecisionToAdmitDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.origdecisiontoadmitdate = value;
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getRemovalReasonIsNotNull()
	{
		return this.removalreason != null;
	}
	public String getRemovalReason()
	{
		return this.removalreason;
	}
	public static int getRemovalReasonMaxLength()
	{
		return 1;
	}
	public void setRemovalReason(String value)
	{
		this.isValidated = false;
		this.removalreason = value;
	}
	public boolean getRemovalDateIsNotNull()
	{
		return this.removaldate != null;
	}
	public ims.framework.utils.Date getRemovalDate()
	{
		return this.removaldate;
	}
	public void setRemovalDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.removaldate = value;
	}
	public boolean getEpisodeStartDateIsNotNull()
	{
		return this.episodestartdate != null;
	}
	public ims.framework.utils.Date getEpisodeStartDate()
	{
		return this.episodestartdate;
	}
	public void setEpisodeStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.episodestartdate = value;
	}
	public boolean getOPCSProcedureGroupIsNotNull()
	{
		return this.opcsproceduregroup != null;
	}
	public ims.core.cds.vo.CDSProcedureDetailsRefVoCollection getOPCSProcedureGroup()
	{
		return this.opcsproceduregroup;
	}
	public void setOPCSProcedureGroup(ims.core.cds.vo.CDSProcedureDetailsRefVoCollection value)
	{
		this.isValidated = false;
		this.opcsproceduregroup = value;
	}
	public boolean getREADProcedureGroupIsNotNull()
	{
		return this.readproceduregroup != null;
	}
	public ims.core.cds.vo.CDSProcedureDetailsRefVo getREADProcedureGroup()
	{
		return this.readproceduregroup;
	}
	public void setREADProcedureGroup(ims.core.cds.vo.CDSProcedureDetailsRefVo value)
	{
		this.isValidated = false;
		this.readproceduregroup = value;
	}
	public boolean getLocationGroupIsNotNull()
	{
		return this.locationgroup != null;
	}
	public ims.core.cds.vo.CDSWaitingListLocGroupRefVo getLocationGroup()
	{
		return this.locationgroup;
	}
	public void setLocationGroup(ims.core.cds.vo.CDSWaitingListLocGroupRefVo value)
	{
		this.isValidated = false;
		this.locationgroup = value;
	}
	public boolean getCareContextIdIsNotNull()
	{
		return this.carecontextid != null;
	}
	public Integer getCareContextId()
	{
		return this.carecontextid;
	}
	public void setCareContextId(Integer value)
	{
		this.isValidated = false;
		this.carecontextid = value;
	}
	public boolean getHRGCodeIsNotNull()
	{
		return this.hrgcode != null;
	}
	public String getHRGCode()
	{
		return this.hrgcode;
	}
	public static int getHRGCodeMaxLength()
	{
		return 25;
	}
	public void setHRGCode(String value)
	{
		this.isValidated = false;
		this.hrgcode = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.cdsapplicabledate == null)
			listOfErrors.add("CDSApplicableDate is mandatory");
		if(this.cdssenderorgcode == null || this.cdssenderorgcode.length() == 0)
			listOfErrors.add("CDSSenderOrgCode is mandatory");
		else if(this.cdssenderorgcode.length() > 5)
			listOfErrors.add("The length of the field [cdssenderorgcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 5");
		if(this.ubrn != null)
			if(this.ubrn.length() > 12)
				listOfErrors.add("The length of the field [ubrn] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 12");
		if(this.pathwayidentifier != null)
			if(this.pathwayidentifier.length() > 20)
				listOfErrors.add("The length of the field [pathwayidentifier] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 20");
		if(this.pathwayorgcode != null)
			if(this.pathwayorgcode.length() > 3)
				listOfErrors.add("The length of the field [pathwayorgcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 3");
		if(this.referraltotreatmentstatus != null)
			if(this.referraltotreatmentstatus.length() > 2)
				listOfErrors.add("The length of the field [referraltotreatmentstatus] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.waittimemeasuretype != null)
			if(this.waittimemeasuretype.length() > 2)
				listOfErrors.add("The length of the field [waittimemeasuretype] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.localpatientidentifier == null || this.localpatientidentifier.length() == 0)
			listOfErrors.add("LocalPatientIdentifier is mandatory");
		else if(this.localpatientidentifier.length() > 10)
			listOfErrors.add("The length of the field [localpatientidentifier] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 10");
		if(this.ccgorgcode != null)
			if(this.ccgorgcode.length() > 3)
				listOfErrors.add("The length of the field [ccgorgcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 3");
		if(this.withheldidentityreason != null)
			if(this.withheldidentityreason.length() > 2)
				listOfErrors.add("The length of the field [withheldidentityreason] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.patidorgcode != null)
			if(this.patidorgcode.length() > 5)
				listOfErrors.add("The length of the field [patidorgcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 5");
		if(this.nhsnumber != null)
			if(this.nhsnumber.length() > 17)
				listOfErrors.add("The length of the field [nhsnumber] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 17");
		if(this.nhsnumberstatusind != null)
			if(this.nhsnumberstatusind.length() > 2)
				listOfErrors.add("The length of the field [nhsnumberstatusind] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.patientname != null)
			if(this.patientname.length() > 70)
				listOfErrors.add("The length of the field [patientname] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 70");
		if(this.patientaddress != null)
			if(this.patientaddress.length() > 175)
				listOfErrors.add("The length of the field [patientaddress] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 175");
		if(this.postcode != null)
			if(this.postcode.length() > 8)
				listOfErrors.add("The length of the field [postcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 8");
		if(this.pctorgcode != null)
			if(this.pctorgcode.length() > 3)
				listOfErrors.add("The length of the field [pctorgcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 3");
		if(this.persongender != null)
			if(this.persongender.length() > 1)
				listOfErrors.add("The length of the field [persongender] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.carersupportind != null)
			if(this.carersupportind.length() > 2)
				listOfErrors.add("The length of the field [carersupportind] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.commserialnumber != null)
			if(this.commserialnumber.length() > 6)
				listOfErrors.add("The length of the field [commserialnumber] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 6");
		if(this.nhsservagreelinenum != null)
			if(this.nhsservagreelinenum.length() > 10)
				listOfErrors.add("The length of the field [nhsservagreelinenum] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 10");
		if(this.providerrefnum != null)
			if(this.providerrefnum.length() > 17)
				listOfErrors.add("The length of the field [providerrefnum] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 17");
		if(this.commissionerreferencenum != null)
			if(this.commissionerreferencenum.length() > 17)
				listOfErrors.add("The length of the field [commissionerreferencenum] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 17");
		if(this.orgcodeprovider != null)
			if(this.orgcodeprovider.length() > 5)
				listOfErrors.add("The length of the field [orgcodeprovider] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 5");
		if(this.orgcodecommissioner != null)
			if(this.orgcodecommissioner.length() > 5)
				listOfErrors.add("The length of the field [orgcodecommissioner] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 5");
		if(this.electivelistid != null)
			if(this.electivelistid.length() > 12)
				listOfErrors.add("The length of the field [electivelistid] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 12");
		if(this.admincategory != null)
			if(this.admincategory.length() > 2)
				listOfErrors.add("The length of the field [admincategory] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.elestatus != null)
			if(this.elestatus.length() > 2)
				listOfErrors.add("The length of the field [elestatus] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.eletype != null)
			if(this.eletype.length() > 2)
				listOfErrors.add("The length of the field [eletype] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.intendedmanagement != null)
			if(this.intendedmanagement.length() > 1)
				listOfErrors.add("The length of the field [intendedmanagement] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.intendedprocedure != null)
			if(this.intendedprocedure.length() > 1)
				listOfErrors.add("The length of the field [intendedprocedure] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.prioritytypecode != null)
			if(this.prioritytypecode.length() > 1)
				listOfErrors.add("The length of the field [prioritytypecode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.patientclassification != null)
			if(this.patientclassification.length() > 1)
				listOfErrors.add("The length of the field [patientclassification] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.admissionmethod != null)
			if(this.admissionmethod.length() > 2)
				listOfErrors.add("The length of the field [admissionmethod] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.overseasvisitorstatus != null)
			if(this.overseasvisitorstatus.length() > 1)
				listOfErrors.add("The length of the field [overseasvisitorstatus] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.consultantcode != null)
			if(this.consultantcode.length() > 8)
				listOfErrors.add("The length of the field [consultantcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 8");
		if(this.specialtycode != null)
			if(this.specialtycode.length() > 3)
				listOfErrors.add("The length of the field [specialtycode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 3");
		if(this.treatmentfunccode != null)
			if(this.treatmentfunccode.length() > 3)
				listOfErrors.add("The length of the field [treatmentfunccode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 3");
		if(this.localsubspecialtycode != null)
			if(this.localsubspecialtycode.length() > 8)
				listOfErrors.add("The length of the field [localsubspecialtycode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 8");
		if(this.procedurescheme != null)
			if(this.procedurescheme.length() > 2)
				listOfErrors.add("The length of the field [procedurescheme] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.procedure != null)
			if(this.procedure.length() > 4)
				listOfErrors.add("The length of the field [procedure] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 4");
		if(this.profregistrationcode != null)
			if(this.profregistrationcode.length() > 2)
				listOfErrors.add("The length of the field [profregistrationcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 2");
		if(this.profregistrationid != null)
			if(this.profregistrationid.length() > 12)
				listOfErrors.add("The length of the field [profregistrationid] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 12");
		if(this.patientgpcode != null)
			if(this.patientgpcode.length() > 8)
				listOfErrors.add("The length of the field [patientgpcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 8");
		if(this.patientgppractice != null)
			if(this.patientgppractice.length() > 6)
				listOfErrors.add("The length of the field [patientgppractice] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 6");
		if(this.referrercode != null)
			if(this.referrercode.length() > 8)
				listOfErrors.add("The length of the field [referrercode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 8");
		if(this.referrerpractice != null)
			if(this.referrerpractice.length() > 6)
				listOfErrors.add("The length of the field [referrerpractice] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 6");
		if(this.outcomecode != null)
			if(this.outcomecode.length() > 1)
				listOfErrors.add("The length of the field [outcomecode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.removalreason != null)
			if(this.removalreason.length() > 1)
				listOfErrors.add("The length of the field [removalreason] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 1");
		if(this.hrgcode != null)
			if(this.hrgcode.length() > 25)
				listOfErrors.add("The length of the field [hrgcode] in the value object [ims.core.vo.CDSElectiveListVo] is too big. It should be less or equal to 25");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CDSElectiveListVo clone = new CDSElectiveListVo(this.id, this.version);
		
		if(this.cdsapplicabledate == null)
			clone.cdsapplicabledate = null;
		else
			clone.cdsapplicabledate = (ims.framework.utils.DateTime)this.cdsapplicabledate.clone();
		clone.cdssenderorgcode = this.cdssenderorgcode;
		clone.ubrn = this.ubrn;
		clone.pathwayidentifier = this.pathwayidentifier;
		clone.pathwayorgcode = this.pathwayorgcode;
		clone.referraltotreatmentstatus = this.referraltotreatmentstatus;
		clone.waittimemeasuretype = this.waittimemeasuretype;
		if(this.rttstartdate == null)
			clone.rttstartdate = null;
		else
			clone.rttstartdate = (ims.framework.utils.Date)this.rttstartdate.clone();
		if(this.rttenddate == null)
			clone.rttenddate = null;
		else
			clone.rttenddate = (ims.framework.utils.Date)this.rttenddate.clone();
		clone.localpatientidentifier = this.localpatientidentifier;
		clone.ccgorgcode = this.ccgorgcode;
		clone.withheldidentityreason = this.withheldidentityreason;
		clone.patidorgcode = this.patidorgcode;
		clone.nhsnumber = this.nhsnumber;
		clone.nhsnumberstatusind = this.nhsnumberstatusind;
		clone.patientname = this.patientname;
		clone.patientaddress = this.patientaddress;
		clone.postcode = this.postcode;
		clone.pctorgcode = this.pctorgcode;
		if(this.dateofbirth == null)
			clone.dateofbirth = null;
		else
			clone.dateofbirth = (ims.framework.utils.Date)this.dateofbirth.clone();
		clone.persongender = this.persongender;
		clone.carersupportind = this.carersupportind;
		clone.commserialnumber = this.commserialnumber;
		clone.nhsservagreelinenum = this.nhsservagreelinenum;
		clone.providerrefnum = this.providerrefnum;
		clone.commissionerreferencenum = this.commissionerreferencenum;
		clone.orgcodeprovider = this.orgcodeprovider;
		clone.orgcodecommissioner = this.orgcodecommissioner;
		if(this.nhsservagreechangedate == null)
			clone.nhsservagreechangedate = null;
		else
			clone.nhsservagreechangedate = (ims.framework.utils.Date)this.nhsservagreechangedate.clone();
		clone.electivelistid = this.electivelistid;
		clone.admincategory = this.admincategory;
		clone.countsuspendeddays = this.countsuspendeddays;
		clone.elestatus = this.elestatus;
		clone.eletype = this.eletype;
		clone.intendedmanagement = this.intendedmanagement;
		clone.intendedprocedure = this.intendedprocedure;
		clone.prioritytypecode = this.prioritytypecode;
		clone.patientclassification = this.patientclassification;
		if(this.decidedtoadmitdate == null)
			clone.decidedtoadmitdate = null;
		else
			clone.decidedtoadmitdate = (ims.framework.utils.Date)this.decidedtoadmitdate.clone();
		clone.ageatcdsactivity = this.ageatcdsactivity;
		clone.admissionmethod = this.admissionmethod;
		clone.overseasvisitorstatus = this.overseasvisitorstatus;
		if(this.guarenteedadmissiondate == null)
			clone.guarenteedadmissiondate = null;
		else
			clone.guarenteedadmissiondate = (ims.framework.utils.Date)this.guarenteedadmissiondate.clone();
		if(this.lastdnacancelleddate == null)
			clone.lastdnacancelleddate = null;
		else
			clone.lastdnacancelleddate = (ims.framework.utils.Date)this.lastdnacancelleddate.clone();
		if(this.lastrevieweddate == null)
			clone.lastrevieweddate = null;
		else
			clone.lastrevieweddate = (ims.framework.utils.Date)this.lastrevieweddate.clone();
		clone.consultantcode = this.consultantcode;
		clone.specialtycode = this.specialtycode;
		clone.treatmentfunccode = this.treatmentfunccode;
		clone.localsubspecialtycode = this.localsubspecialtycode;
		clone.procedurescheme = this.procedurescheme;
		clone.procedure = this.procedure;
		if(this.proceduredate == null)
			clone.proceduredate = null;
		else
			clone.proceduredate = (ims.framework.utils.Date)this.proceduredate.clone();
		clone.profregistrationcode = this.profregistrationcode;
		clone.profregistrationid = this.profregistrationid;
		clone.patientgpcode = this.patientgpcode;
		clone.patientgppractice = this.patientgppractice;
		clone.referrercode = this.referrercode;
		clone.referrerpractice = this.referrerpractice;
		clone.outcomecode = this.outcomecode;
		if(this.datetcioffered == null)
			clone.datetcioffered = null;
		else
			clone.datetcioffered = (ims.framework.utils.Date)this.datetcioffered.clone();
		if(this.erodate == null)
			clone.erodate = null;
		else
			clone.erodate = (ims.framework.utils.Date)this.erodate.clone();
		if(this.origdecisiontoadmitdate == null)
			clone.origdecisiontoadmitdate = null;
		else
			clone.origdecisiontoadmitdate = (ims.framework.utils.Date)this.origdecisiontoadmitdate.clone();
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		clone.removalreason = this.removalreason;
		if(this.removaldate == null)
			clone.removaldate = null;
		else
			clone.removaldate = (ims.framework.utils.Date)this.removaldate.clone();
		if(this.episodestartdate == null)
			clone.episodestartdate = null;
		else
			clone.episodestartdate = (ims.framework.utils.Date)this.episodestartdate.clone();
		clone.opcsproceduregroup = this.opcsproceduregroup;
		clone.readproceduregroup = this.readproceduregroup;
		clone.locationgroup = this.locationgroup;
		clone.carecontextid = this.carecontextid;
		clone.hrgcode = this.hrgcode;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CDSElectiveListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CDSElectiveListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CDSElectiveListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CDSElectiveListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.cdsapplicabledate != null)
			count++;
		if(this.cdssenderorgcode != null)
			count++;
		if(this.ubrn != null)
			count++;
		if(this.pathwayidentifier != null)
			count++;
		if(this.pathwayorgcode != null)
			count++;
		if(this.referraltotreatmentstatus != null)
			count++;
		if(this.waittimemeasuretype != null)
			count++;
		if(this.rttstartdate != null)
			count++;
		if(this.rttenddate != null)
			count++;
		if(this.localpatientidentifier != null)
			count++;
		if(this.ccgorgcode != null)
			count++;
		if(this.withheldidentityreason != null)
			count++;
		if(this.patidorgcode != null)
			count++;
		if(this.nhsnumber != null)
			count++;
		if(this.nhsnumberstatusind != null)
			count++;
		if(this.patientname != null)
			count++;
		if(this.patientaddress != null)
			count++;
		if(this.postcode != null)
			count++;
		if(this.pctorgcode != null)
			count++;
		if(this.dateofbirth != null)
			count++;
		if(this.persongender != null)
			count++;
		if(this.carersupportind != null)
			count++;
		if(this.commserialnumber != null)
			count++;
		if(this.nhsservagreelinenum != null)
			count++;
		if(this.providerrefnum != null)
			count++;
		if(this.commissionerreferencenum != null)
			count++;
		if(this.orgcodeprovider != null)
			count++;
		if(this.orgcodecommissioner != null)
			count++;
		if(this.nhsservagreechangedate != null)
			count++;
		if(this.electivelistid != null)
			count++;
		if(this.admincategory != null)
			count++;
		if(this.countsuspendeddays != null)
			count++;
		if(this.elestatus != null)
			count++;
		if(this.eletype != null)
			count++;
		if(this.intendedmanagement != null)
			count++;
		if(this.intendedprocedure != null)
			count++;
		if(this.prioritytypecode != null)
			count++;
		if(this.patientclassification != null)
			count++;
		if(this.decidedtoadmitdate != null)
			count++;
		if(this.ageatcdsactivity != null)
			count++;
		if(this.admissionmethod != null)
			count++;
		if(this.overseasvisitorstatus != null)
			count++;
		if(this.guarenteedadmissiondate != null)
			count++;
		if(this.lastdnacancelleddate != null)
			count++;
		if(this.lastrevieweddate != null)
			count++;
		if(this.consultantcode != null)
			count++;
		if(this.specialtycode != null)
			count++;
		if(this.treatmentfunccode != null)
			count++;
		if(this.localsubspecialtycode != null)
			count++;
		if(this.procedurescheme != null)
			count++;
		if(this.procedure != null)
			count++;
		if(this.proceduredate != null)
			count++;
		if(this.profregistrationcode != null)
			count++;
		if(this.profregistrationid != null)
			count++;
		if(this.patientgpcode != null)
			count++;
		if(this.patientgppractice != null)
			count++;
		if(this.referrercode != null)
			count++;
		if(this.referrerpractice != null)
			count++;
		if(this.outcomecode != null)
			count++;
		if(this.datetcioffered != null)
			count++;
		if(this.erodate != null)
			count++;
		if(this.origdecisiontoadmitdate != null)
			count++;
		if(this.startdate != null)
			count++;
		if(this.removalreason != null)
			count++;
		if(this.removaldate != null)
			count++;
		if(this.episodestartdate != null)
			count++;
		if(this.opcsproceduregroup != null)
			count++;
		if(this.readproceduregroup != null)
			count++;
		if(this.locationgroup != null)
			count++;
		if(this.carecontextid != null)
			count++;
		if(this.hrgcode != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 71;
	}
	protected ims.framework.utils.DateTime cdsapplicabledate;
	protected String cdssenderorgcode;
	protected String ubrn;
	protected String pathwayidentifier;
	protected String pathwayorgcode;
	protected String referraltotreatmentstatus;
	protected String waittimemeasuretype;
	protected ims.framework.utils.Date rttstartdate;
	protected ims.framework.utils.Date rttenddate;
	protected String localpatientidentifier;
	protected String ccgorgcode;
	protected String withheldidentityreason;
	protected String patidorgcode;
	protected String nhsnumber;
	protected String nhsnumberstatusind;
	protected String patientname;
	protected String patientaddress;
	protected String postcode;
	protected String pctorgcode;
	protected ims.framework.utils.Date dateofbirth;
	protected String persongender;
	protected String carersupportind;
	protected String commserialnumber;
	protected String nhsservagreelinenum;
	protected String providerrefnum;
	protected String commissionerreferencenum;
	protected String orgcodeprovider;
	protected String orgcodecommissioner;
	protected ims.framework.utils.Date nhsservagreechangedate;
	protected String electivelistid;
	protected String admincategory;
	protected Integer countsuspendeddays;
	protected String elestatus;
	protected String eletype;
	protected String intendedmanagement;
	protected String intendedprocedure;
	protected String prioritytypecode;
	protected String patientclassification;
	protected ims.framework.utils.Date decidedtoadmitdate;
	protected Integer ageatcdsactivity;
	protected String admissionmethod;
	protected String overseasvisitorstatus;
	protected ims.framework.utils.Date guarenteedadmissiondate;
	protected ims.framework.utils.Date lastdnacancelleddate;
	protected ims.framework.utils.Date lastrevieweddate;
	protected String consultantcode;
	protected String specialtycode;
	protected String treatmentfunccode;
	protected String localsubspecialtycode;
	protected String procedurescheme;
	protected String procedure;
	protected ims.framework.utils.Date proceduredate;
	protected String profregistrationcode;
	protected String profregistrationid;
	protected String patientgpcode;
	protected String patientgppractice;
	protected String referrercode;
	protected String referrerpractice;
	protected String outcomecode;
	protected ims.framework.utils.Date datetcioffered;
	protected ims.framework.utils.Date erodate;
	protected ims.framework.utils.Date origdecisiontoadmitdate;
	protected ims.framework.utils.Date startdate;
	protected String removalreason;
	protected ims.framework.utils.Date removaldate;
	protected ims.framework.utils.Date episodestartdate;
	protected ims.core.cds.vo.CDSProcedureDetailsRefVoCollection opcsproceduregroup;
	protected ims.core.cds.vo.CDSProcedureDetailsRefVo readproceduregroup;
	protected ims.core.cds.vo.CDSWaitingListLocGroupRefVo locationgroup;
	protected Integer carecontextid;
	protected String hrgcode;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
