//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.layout.BayConfig business object (ID: 1095100004).
 */
public class BayConfigForWardViewVo extends ims.core.vo.BayConfigVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public BayConfigForWardViewVo()
	{
	}
	public BayConfigForWardViewVo(Integer id, int version)
	{
		super(id, version);
	}
	public BayConfigForWardViewVo(ims.core.vo.beans.BayConfigForWardViewVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.bay = bean.getBay() == null ? null : bean.getBay().buildVo();
		this.isactive = bean.getIsActive();
		this.male = bean.getMale();
		this.female = bean.getFemale();
		this.paediatric = bean.getPaediatric();
		this.numofbeds = bean.getNumOfBeds();
		this.numofoccupiedbeds = bean.getNumOfOccupiedBeds();
		this.openingtime = bean.getOpeningTime() == null ? null : bean.getOpeningTime().buildTime();
		this.closingtime = bean.getClosingTime() == null ? null : bean.getClosingTime().buildTime();
		this.weekdaysonly = bean.getWeekdaysOnly();
		this.bayavailabilitystatus = bean.getBayAvailabilityStatus() == null ? null : ims.core.vo.lookups.WardBayStatus.buildLookup(bean.getBayAvailabilityStatus());
		this.reopenoutofhours = ims.core.vo.ReopenBayOutOfHoursVoCollection.buildFromBeanCollection(bean.getReOpenOutOfHours());
		this.temporarybaygender = bean.getTemporaryBayGender() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getTemporaryBayGender());
		this.floorbedspacelayout = bean.getFloorBedSpaceLayout() == null ? null : bean.getFloorBedSpaceLayout().buildVo();
		this.dependency = bean.getDependency() == null ? null : ims.core.vo.lookups.BayDependencyLevel.buildLookup(bean.getDependency());
		this.closingdetails = ims.core.vo.WardBayClosingDetailsVoCollection.buildFromBeanCollection(bean.getClosingDetails());
		this.blockingdetails = ims.core.vo.WardBayBlockingDetailsVoCollection.buildFromBeanCollection(bean.getBlockingDetails());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.BayConfigForWardViewVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.bay = bean.getBay() == null ? null : bean.getBay().buildVo(map);
		this.isactive = bean.getIsActive();
		this.male = bean.getMale();
		this.female = bean.getFemale();
		this.paediatric = bean.getPaediatric();
		this.numofbeds = bean.getNumOfBeds();
		this.numofoccupiedbeds = bean.getNumOfOccupiedBeds();
		this.openingtime = bean.getOpeningTime() == null ? null : bean.getOpeningTime().buildTime();
		this.closingtime = bean.getClosingTime() == null ? null : bean.getClosingTime().buildTime();
		this.weekdaysonly = bean.getWeekdaysOnly();
		this.bayavailabilitystatus = bean.getBayAvailabilityStatus() == null ? null : ims.core.vo.lookups.WardBayStatus.buildLookup(bean.getBayAvailabilityStatus());
		this.reopenoutofhours = ims.core.vo.ReopenBayOutOfHoursVoCollection.buildFromBeanCollection(bean.getReOpenOutOfHours());
		this.temporarybaygender = bean.getTemporaryBayGender() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getTemporaryBayGender());
		this.floorbedspacelayout = bean.getFloorBedSpaceLayout() == null ? null : bean.getFloorBedSpaceLayout().buildVo(map);
		this.dependency = bean.getDependency() == null ? null : ims.core.vo.lookups.BayDependencyLevel.buildLookup(bean.getDependency());
		this.closingdetails = ims.core.vo.WardBayClosingDetailsVoCollection.buildFromBeanCollection(bean.getClosingDetails());
		this.blockingdetails = ims.core.vo.WardBayBlockingDetailsVoCollection.buildFromBeanCollection(bean.getBlockingDetails());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.BayConfigForWardViewVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.BayConfigForWardViewVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.BayConfigForWardViewVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CLOSINGDETAILS"))
			return getClosingDetails();
		if(fieldName.equals("BLOCKINGDETAILS"))
			return getBlockingDetails();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getClosingDetailsIsNotNull()
	{
		return this.closingdetails != null;
	}
	public ims.core.vo.WardBayClosingDetailsVoCollection getClosingDetails()
	{
		return this.closingdetails;
	}
	public void setClosingDetails(ims.core.vo.WardBayClosingDetailsVoCollection value)
	{
		this.isValidated = false;
		this.closingdetails = value;
	}
	public boolean getBlockingDetailsIsNotNull()
	{
		return this.blockingdetails != null;
	}
	public ims.core.vo.WardBayBlockingDetailsVoCollection getBlockingDetails()
	{
		return this.blockingdetails;
	}
	public void setBlockingDetails(ims.core.vo.WardBayBlockingDetailsVoCollection value)
	{
		this.isValidated = false;
		this.blockingdetails = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.bay != null)
		{
			if(!this.bay.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.reopenoutofhours != null)
		{
			if(!this.reopenoutofhours.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.closingdetails != null)
		{
			if(!this.closingdetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.blockingdetails != null)
		{
			if(!this.blockingdetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.bay == null)
			listOfErrors.add("Bay is mandatory");
		if(this.bay != null)
		{
			String[] listOfOtherErrors = this.bay.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.isactive == null)
			listOfErrors.add("isActive is mandatory");
		if(this.reopenoutofhours != null)
		{
			String[] listOfOtherErrors = this.reopenoutofhours.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.floorbedspacelayout == null)
			listOfErrors.add("Bed Space Layout is mandatory");
		if(this.closingdetails != null)
		{
			String[] listOfOtherErrors = this.closingdetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.blockingdetails != null)
		{
			String[] listOfOtherErrors = this.blockingdetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		BayConfigForWardViewVo clone = new BayConfigForWardViewVo(this.id, this.version);
		
		if(this.bay == null)
			clone.bay = null;
		else
			clone.bay = (ims.core.vo.LocationLiteVo)this.bay.clone();
		clone.isactive = this.isactive;
		clone.male = this.male;
		clone.female = this.female;
		clone.paediatric = this.paediatric;
		clone.numofbeds = this.numofbeds;
		clone.numofoccupiedbeds = this.numofoccupiedbeds;
		if(this.openingtime == null)
			clone.openingtime = null;
		else
			clone.openingtime = (ims.framework.utils.Time)this.openingtime.clone();
		if(this.closingtime == null)
			clone.closingtime = null;
		else
			clone.closingtime = (ims.framework.utils.Time)this.closingtime.clone();
		clone.weekdaysonly = this.weekdaysonly;
		if(this.bayavailabilitystatus == null)
			clone.bayavailabilitystatus = null;
		else
			clone.bayavailabilitystatus = (ims.core.vo.lookups.WardBayStatus)this.bayavailabilitystatus.clone();
		if(this.reopenoutofhours == null)
			clone.reopenoutofhours = null;
		else
			clone.reopenoutofhours = (ims.core.vo.ReopenBayOutOfHoursVoCollection)this.reopenoutofhours.clone();
		if(this.temporarybaygender == null)
			clone.temporarybaygender = null;
		else
			clone.temporarybaygender = (ims.core.vo.lookups.Sex)this.temporarybaygender.clone();
		if(this.floorbedspacelayout == null)
			clone.floorbedspacelayout = null;
		else
			clone.floorbedspacelayout = (ims.core.vo.FloorBedSpaceLayoutLiteVo)this.floorbedspacelayout.clone();
		if(this.dependency == null)
			clone.dependency = null;
		else
			clone.dependency = (ims.core.vo.lookups.BayDependencyLevel)this.dependency.clone();
		if(this.closingdetails == null)
			clone.closingdetails = null;
		else
			clone.closingdetails = (ims.core.vo.WardBayClosingDetailsVoCollection)this.closingdetails.clone();
		if(this.blockingdetails == null)
			clone.blockingdetails = null;
		else
			clone.blockingdetails = (ims.core.vo.WardBayBlockingDetailsVoCollection)this.blockingdetails.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(BayConfigForWardViewVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A BayConfigForWardViewVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		BayConfigForWardViewVo compareObj = (BayConfigForWardViewVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getBay() == null && compareObj.getBay() != null)
				return -1;
			if(this.getBay() != null && compareObj.getBay() == null)
				return 1;
			if(this.getBay() != null && compareObj.getBay() != null)
				retVal = this.getBay().compareTo(compareObj.getBay());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.closingdetails != null)
			count++;
		if(this.blockingdetails != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 2;
	}
	protected ims.core.vo.WardBayClosingDetailsVoCollection closingdetails;
	protected ims.core.vo.WardBayBlockingDetailsVoCollection blockingdetails;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
