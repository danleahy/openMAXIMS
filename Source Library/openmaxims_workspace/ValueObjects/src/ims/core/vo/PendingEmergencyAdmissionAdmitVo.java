//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.PendingEmergencyAdmission business object (ID: 1014100011).
 */
public class PendingEmergencyAdmissionAdmitVo extends ims.core.admin.pas.vo.PendingEmergencyAdmissionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PendingEmergencyAdmissionAdmitVo()
	{
	}
	public PendingEmergencyAdmissionAdmitVo(Integer id, int version)
	{
		super(id, version);
	}
	public PendingEmergencyAdmissionAdmitVo(ims.core.vo.beans.PendingEmergencyAdmissionAdmitVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.allocatedward = bean.getAllocatedWard() == null ? null : bean.getAllocatedWard().buildVo();
		this.admissionstatus = bean.getAdmissionStatus() == null ? null : ims.core.vo.lookups.EmergencyAdmissionStatus.buildLookup(bean.getAdmissionStatus());
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.dtadatetime = bean.getDTADateTime() == null ? null : bean.getDTADateTime().buildDateTime();
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo();
		this.bedtyperequested = bean.getBedTypeRequested() == null ? null : ims.core.vo.lookups.BedTypeRequested.buildLookup(bean.getBedTypeRequested());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PendingEmergencyAdmissionAdmitVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.allocatedward = bean.getAllocatedWard() == null ? null : bean.getAllocatedWard().buildVo(map);
		this.admissionstatus = bean.getAdmissionStatus() == null ? null : ims.core.vo.lookups.EmergencyAdmissionStatus.buildLookup(bean.getAdmissionStatus());
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.dtadatetime = bean.getDTADateTime() == null ? null : bean.getDTADateTime().buildDateTime();
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo(map);
		this.bedtyperequested = bean.getBedTypeRequested() == null ? null : ims.core.vo.lookups.BedTypeRequested.buildLookup(bean.getBedTypeRequested());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PendingEmergencyAdmissionAdmitVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PendingEmergencyAdmissionAdmitVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PendingEmergencyAdmissionAdmitVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("ALLOCATEDWARD"))
			return getAllocatedWard();
		if(fieldName.equals("ADMISSIONSTATUS"))
			return getAdmissionStatus();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("DTADATETIME"))
			return getDTADateTime();
		if(fieldName.equals("HOSPITAL"))
			return getHospital();
		if(fieldName.equals("BEDTYPEREQUESTED"))
			return getBedTypeRequested();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.vo.PasEventAdmitVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.vo.PasEventAdmitVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getAllocatedWardIsNotNull()
	{
		return this.allocatedward != null;
	}
	public ims.core.vo.LocationLiteVo getAllocatedWard()
	{
		return this.allocatedward;
	}
	public void setAllocatedWard(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.allocatedward = value;
	}
	public boolean getAdmissionStatusIsNotNull()
	{
		return this.admissionstatus != null;
	}
	public ims.core.vo.lookups.EmergencyAdmissionStatus getAdmissionStatus()
	{
		return this.admissionstatus;
	}
	public void setAdmissionStatus(ims.core.vo.lookups.EmergencyAdmissionStatus value)
	{
		this.isValidated = false;
		this.admissionstatus = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceLiteVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getDTADateTimeIsNotNull()
	{
		return this.dtadatetime != null;
	}
	public ims.framework.utils.DateTime getDTADateTime()
	{
		return this.dtadatetime;
	}
	public void setDTADateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dtadatetime = value;
	}
	public boolean getHospitalIsNotNull()
	{
		return this.hospital != null;
	}
	public ims.core.vo.LocationLiteVo getHospital()
	{
		return this.hospital;
	}
	public void setHospital(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.hospital = value;
	}
	public boolean getBedTypeRequestedIsNotNull()
	{
		return this.bedtyperequested != null;
	}
	public ims.core.vo.lookups.BedTypeRequested getBedTypeRequested()
	{
		return this.bedtyperequested;
	}
	public void setBedTypeRequested(ims.core.vo.lookups.BedTypeRequested value)
	{
		this.isValidated = false;
		this.bedtyperequested = value;
	}
	/**
	* getPatientString
	*/
		/**
		* getPatientString
		*/
		public String getPatientString()
		{
			String strPatient = "";
			
			if(this.getPasEventIsNotNull() && this.getPasEvent().getPatientIsNotNull())
			{
				 if(this.getPasEvent().getPatient().getNameIsNotNull())
					 strPatient += this.getPasEvent().getPatient().getName().toShortForm();
				 
				 PatientId patId = this.getPasEvent().getPatient().getDisplayId();
				 if(patId != null)
					 strPatient += " (" + patId.getValue() + ")";	
			}
			return strPatient;
		}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pasevent != null)
		{
			if(!this.pasevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pasevent != null)
		{
			String[] listOfOtherErrors = this.pasevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PendingEmergencyAdmissionAdmitVo clone = new PendingEmergencyAdmissionAdmitVo(this.id, this.version);
		
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventAdmitVo)this.pasevent.clone();
		if(this.allocatedward == null)
			clone.allocatedward = null;
		else
			clone.allocatedward = (ims.core.vo.LocationLiteVo)this.allocatedward.clone();
		if(this.admissionstatus == null)
			clone.admissionstatus = null;
		else
			clone.admissionstatus = (ims.core.vo.lookups.EmergencyAdmissionStatus)this.admissionstatus.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.dtadatetime == null)
			clone.dtadatetime = null;
		else
			clone.dtadatetime = (ims.framework.utils.DateTime)this.dtadatetime.clone();
		if(this.hospital == null)
			clone.hospital = null;
		else
			clone.hospital = (ims.core.vo.LocationLiteVo)this.hospital.clone();
		if(this.bedtyperequested == null)
			clone.bedtyperequested = null;
		else
			clone.bedtyperequested = (ims.core.vo.lookups.BedTypeRequested)this.bedtyperequested.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PendingEmergencyAdmissionAdmitVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PendingEmergencyAdmissionAdmitVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PendingEmergencyAdmissionAdmitVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PendingEmergencyAdmissionAdmitVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pasevent != null)
			count++;
		if(this.allocatedward != null)
			count++;
		if(this.admissionstatus != null)
			count++;
		if(this.service != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.dtadatetime != null)
			count++;
		if(this.hospital != null)
			count++;
		if(this.bedtyperequested != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.PasEventAdmitVo pasevent;
	protected ims.core.vo.LocationLiteVo allocatedward;
	protected ims.core.vo.lookups.EmergencyAdmissionStatus admissionstatus;
	protected ims.core.vo.ServiceLiteVo service;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.framework.utils.DateTime dtadatetime;
	protected ims.core.vo.LocationLiteVo hospital;
	protected ims.core.vo.lookups.BedTypeRequested bedtyperequested;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
