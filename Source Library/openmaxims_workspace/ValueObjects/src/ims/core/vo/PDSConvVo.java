//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to choose_book.PDSConv business object (ID: 1069100016).
 */
public class PDSConvVo extends ims.choose_book.vo.PDSConvRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PDSConvVo()
	{
	}
	public PDSConvVo(Integer id, int version)
	{
		super(id, version);
	}
	public PDSConvVo(ims.core.vo.beans.PDSConvVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.cid = bean.getCid() == null ? null : new ims.choose_book.vo.ConvIdRefVo(new Integer(bean.getCid().getId()), bean.getCid().getVersion());
		this.current = bean.getCurrent() == null ? null : new ims.choose_book.vo.SeqPointRefVo(new Integer(bean.getCurrent().getId()), bean.getCurrent().getVersion());
		if(bean.getPoints() != null)
		{
			this.points = new ims.choose_book.vo.ConvPointRefVoCollection();
			for(int points_i = 0; points_i < bean.getPoints().length; points_i++)
			{
				this.points.add(new ims.choose_book.vo.ConvPointRefVo(new Integer(bean.getPoints()[points_i].getId()), bean.getPoints()[points_i].getVersion()));
			}
		}
		if(bean.getMsgUids() != null)
		{
			this.msguids = new ims.choose_book.vo.ConvUidRefVoCollection();
			for(int msguids_i = 0; msguids_i < bean.getMsgUids().length; msguids_i++)
			{
				this.msguids.add(new ims.choose_book.vo.ConvUidRefVo(new Integer(bean.getMsgUids()[msguids_i].getId()), bean.getMsgUids()[msguids_i].getVersion()));
			}
		}
		this.dummy = bean.getDummy();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PDSConvVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.cid = bean.getCid() == null ? null : new ims.choose_book.vo.ConvIdRefVo(new Integer(bean.getCid().getId()), bean.getCid().getVersion());
		this.current = bean.getCurrent() == null ? null : new ims.choose_book.vo.SeqPointRefVo(new Integer(bean.getCurrent().getId()), bean.getCurrent().getVersion());
		if(bean.getPoints() != null)
		{
			this.points = new ims.choose_book.vo.ConvPointRefVoCollection();
			for(int points_i = 0; points_i < bean.getPoints().length; points_i++)
			{
				this.points.add(new ims.choose_book.vo.ConvPointRefVo(new Integer(bean.getPoints()[points_i].getId()), bean.getPoints()[points_i].getVersion()));
			}
		}
		if(bean.getMsgUids() != null)
		{
			this.msguids = new ims.choose_book.vo.ConvUidRefVoCollection();
			for(int msguids_i = 0; msguids_i < bean.getMsgUids().length; msguids_i++)
			{
				this.msguids.add(new ims.choose_book.vo.ConvUidRefVo(new Integer(bean.getMsgUids()[msguids_i].getId()), bean.getMsgUids()[msguids_i].getVersion()));
			}
		}
		this.dummy = bean.getDummy();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PDSConvVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PDSConvVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PDSConvVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CID"))
			return getCid();
		if(fieldName.equals("CURRENT"))
			return getCurrent();
		if(fieldName.equals("POINTS"))
			return getPoints();
		if(fieldName.equals("MSGUIDS"))
			return getMsgUids();
		if(fieldName.equals("DUMMY"))
			return getDummy();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCidIsNotNull()
	{
		return this.cid != null;
	}
	public ims.choose_book.vo.ConvIdRefVo getCid()
	{
		return this.cid;
	}
	public void setCid(ims.choose_book.vo.ConvIdRefVo value)
	{
		this.isValidated = false;
		this.cid = value;
	}
	public boolean getCurrentIsNotNull()
	{
		return this.current != null;
	}
	public ims.choose_book.vo.SeqPointRefVo getCurrent()
	{
		return this.current;
	}
	public void setCurrent(ims.choose_book.vo.SeqPointRefVo value)
	{
		this.isValidated = false;
		this.current = value;
	}
	public boolean getPointsIsNotNull()
	{
		return this.points != null;
	}
	public ims.choose_book.vo.ConvPointRefVoCollection getPoints()
	{
		return this.points;
	}
	public void setPoints(ims.choose_book.vo.ConvPointRefVoCollection value)
	{
		this.isValidated = false;
		this.points = value;
	}
	public boolean getMsgUidsIsNotNull()
	{
		return this.msguids != null;
	}
	public ims.choose_book.vo.ConvUidRefVoCollection getMsgUids()
	{
		return this.msguids;
	}
	public void setMsgUids(ims.choose_book.vo.ConvUidRefVoCollection value)
	{
		this.isValidated = false;
		this.msguids = value;
	}
	public boolean getDummyIsNotNull()
	{
		return this.dummy != null;
	}
	public Boolean getDummy()
	{
		return this.dummy;
	}
	public void setDummy(Boolean value)
	{
		this.isValidated = false;
		this.dummy = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.cid == null)
			listOfErrors.add("cid is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PDSConvVo clone = new PDSConvVo(this.id, this.version);
		
		clone.cid = this.cid;
		clone.current = this.current;
		clone.points = this.points;
		clone.msguids = this.msguids;
		clone.dummy = this.dummy;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PDSConvVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PDSConvVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PDSConvVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PDSConvVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.cid != null)
			count++;
		if(this.current != null)
			count++;
		if(this.points != null)
			count++;
		if(this.msguids != null)
			count++;
		if(this.dummy != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.choose_book.vo.ConvIdRefVo cid;
	protected ims.choose_book.vo.SeqPointRefVo current;
	protected ims.choose_book.vo.ConvPointRefVoCollection points;
	protected ims.choose_book.vo.ConvUidRefVoCollection msguids;
	protected Boolean dummy;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
