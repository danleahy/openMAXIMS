//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.BayTimesAdmissionBreach business object (ID: 1014100025).
 */
public class BayTimesAdmissionBreachedVo extends ims.core.admin.pas.vo.BayTimesAdmissionBreachRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public BayTimesAdmissionBreachedVo()
	{
	}
	public BayTimesAdmissionBreachedVo(Integer id, int version)
	{
		super(id, version);
	}
	public BayTimesAdmissionBreachedVo(ims.core.vo.beans.BayTimesAdmissionBreachedVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.ward = bean.getWard() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getWard().getId()), bean.getWard().getVersion());
		this.bay = bean.getBay() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getBay().getId()), bean.getBay().getVersion());
		this.memberofstaff = bean.getMemberOfStaff() == null ? null : bean.getMemberOfStaff().buildVo();
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.reasonforadmissionoutofopeninghours = bean.getReasonForAdmissionOutOfOpeningHours() == null ? null : ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours.buildLookup(bean.getReasonForAdmissionOutOfOpeningHours());
		this.reasonforadmissionoutofopeninghourscomment = bean.getReasonForAdmissionOutOfOpeningHoursComment();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.BayTimesAdmissionBreachedVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.ward = bean.getWard() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getWard().getId()), bean.getWard().getVersion());
		this.bay = bean.getBay() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getBay().getId()), bean.getBay().getVersion());
		this.memberofstaff = bean.getMemberOfStaff() == null ? null : bean.getMemberOfStaff().buildVo(map);
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.reasonforadmissionoutofopeninghours = bean.getReasonForAdmissionOutOfOpeningHours() == null ? null : ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours.buildLookup(bean.getReasonForAdmissionOutOfOpeningHours());
		this.reasonforadmissionoutofopeninghourscomment = bean.getReasonForAdmissionOutOfOpeningHoursComment();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.BayTimesAdmissionBreachedVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.BayTimesAdmissionBreachedVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.BayTimesAdmissionBreachedVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("WARD"))
			return getWard();
		if(fieldName.equals("BAY"))
			return getBay();
		if(fieldName.equals("MEMBEROFSTAFF"))
			return getMemberOfStaff();
		if(fieldName.equals("ADMISSIONDATETIME"))
			return getAdmissionDateTime();
		if(fieldName.equals("REASONFORADMISSIONOUTOFOPENINGHOURS"))
			return getReasonForAdmissionOutOfOpeningHours();
		if(fieldName.equals("REASONFORADMISSIONOUTOFOPENINGHOURSCOMMENT"))
			return getReasonForAdmissionOutOfOpeningHoursComment();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getWardIsNotNull()
	{
		return this.ward != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getWard()
	{
		return this.ward;
	}
	public void setWard(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.ward = value;
	}
	public boolean getBayIsNotNull()
	{
		return this.bay != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getBay()
	{
		return this.bay;
	}
	public void setBay(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.bay = value;
	}
	public boolean getMemberOfStaffIsNotNull()
	{
		return this.memberofstaff != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getMemberOfStaff()
	{
		return this.memberofstaff;
	}
	public void setMemberOfStaff(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.memberofstaff = value;
	}
	public boolean getAdmissionDateTimeIsNotNull()
	{
		return this.admissiondatetime != null;
	}
	public ims.framework.utils.DateTime getAdmissionDateTime()
	{
		return this.admissiondatetime;
	}
	public void setAdmissionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admissiondatetime = value;
	}
	public boolean getReasonForAdmissionOutOfOpeningHoursIsNotNull()
	{
		return this.reasonforadmissionoutofopeninghours != null;
	}
	public ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours getReasonForAdmissionOutOfOpeningHours()
	{
		return this.reasonforadmissionoutofopeninghours;
	}
	public void setReasonForAdmissionOutOfOpeningHours(ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours value)
	{
		this.isValidated = false;
		this.reasonforadmissionoutofopeninghours = value;
	}
	public boolean getReasonForAdmissionOutOfOpeningHoursCommentIsNotNull()
	{
		return this.reasonforadmissionoutofopeninghourscomment != null;
	}
	public String getReasonForAdmissionOutOfOpeningHoursComment()
	{
		return this.reasonforadmissionoutofopeninghourscomment;
	}
	public static int getReasonForAdmissionOutOfOpeningHoursCommentMaxLength()
	{
		return 250;
	}
	public void setReasonForAdmissionOutOfOpeningHoursComment(String value)
	{
		this.isValidated = false;
		this.reasonforadmissionoutofopeninghourscomment = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.memberofstaff == null)
			listOfErrors.add("MemberOfStaff is mandatory");
		if(this.admissiondatetime == null)
			listOfErrors.add("AdmissionDateTime is mandatory");
		if(this.reasonforadmissionoutofopeninghourscomment != null)
			if(this.reasonforadmissionoutofopeninghourscomment.length() > 250)
				listOfErrors.add("The length of the field [reasonforadmissionoutofopeninghourscomment] in the value object [ims.core.vo.BayTimesAdmissionBreachedVo] is too big. It should be less or equal to 250");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		BayTimesAdmissionBreachedVo clone = new BayTimesAdmissionBreachedVo(this.id, this.version);
		
		clone.ward = this.ward;
		clone.bay = this.bay;
		if(this.memberofstaff == null)
			clone.memberofstaff = null;
		else
			clone.memberofstaff = (ims.core.vo.MemberOfStaffLiteVo)this.memberofstaff.clone();
		if(this.admissiondatetime == null)
			clone.admissiondatetime = null;
		else
			clone.admissiondatetime = (ims.framework.utils.DateTime)this.admissiondatetime.clone();
		if(this.reasonforadmissionoutofopeninghours == null)
			clone.reasonforadmissionoutofopeninghours = null;
		else
			clone.reasonforadmissionoutofopeninghours = (ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours)this.reasonforadmissionoutofopeninghours.clone();
		clone.reasonforadmissionoutofopeninghourscomment = this.reasonforadmissionoutofopeninghourscomment;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(BayTimesAdmissionBreachedVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A BayTimesAdmissionBreachedVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((BayTimesAdmissionBreachedVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((BayTimesAdmissionBreachedVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.ward != null)
			count++;
		if(this.bay != null)
			count++;
		if(this.memberofstaff != null)
			count++;
		if(this.admissiondatetime != null)
			count++;
		if(this.reasonforadmissionoutofopeninghours != null)
			count++;
		if(this.reasonforadmissionoutofopeninghourscomment != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.resource.place.vo.LocationRefVo ward;
	protected ims.core.resource.place.vo.LocationRefVo bay;
	protected ims.core.vo.MemberOfStaffLiteVo memberofstaff;
	protected ims.framework.utils.DateTime admissiondatetime;
	protected ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours reasonforadmissionoutofopeninghours;
	protected String reasonforadmissionoutofopeninghourscomment;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
