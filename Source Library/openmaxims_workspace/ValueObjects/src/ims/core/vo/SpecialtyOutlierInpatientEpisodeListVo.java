//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.Inpatient Episode business object (ID: 1014100000).
 */
public class SpecialtyOutlierInpatientEpisodeListVo extends ims.core.admin.pas.vo.InpatientEpisodeRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SpecialtyOutlierInpatientEpisodeListVo()
	{
	}
	public SpecialtyOutlierInpatientEpisodeListVo(Integer id, int version)
	{
		super(id, version);
	}
	public SpecialtyOutlierInpatientEpisodeListVo(ims.core.vo.beans.SpecialtyOutlierInpatientEpisodeListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDateTime();
		this.comments = bean.getComments();
		this.wardtype = bean.getWardType() == null ? null : ims.core.vo.lookups.WardType.buildLookup(bean.getWardType());
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo();
		this.isconfirmeddischarge = bean.getIsConfirmedDischarge();
		this.confirmeddischargedatetime = bean.getConfirmedDischargeDateTime() == null ? null : bean.getConfirmedDischargeDateTime().buildDateTime();
		this.isonhomeleave = bean.getIsOnHomeLeave();
		this.expecteddateofreturn = bean.getExpectedDateOfReturn() == null ? null : bean.getExpectedDateOfReturn().buildDate();
		this.expectedtimeofreturn = bean.getExpectedTimeOfReturn() == null ? null : bean.getExpectedTimeOfReturn().buildTime();
		this.activealerts = bean.getActiveAlerts();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.dateonhomeleave = bean.getDateOnHomeLeave() == null ? null : bean.getDateOnHomeLeave().buildDate();
		this.timeonhomeleave = bean.getTimeOnHomeLeave() == null ? null : bean.getTimeOnHomeLeave().buildTime();
		if(bean.getHomeLeaves() != null)
		{
			this.homeleaves = new ims.core.admin.pas.vo.HomeLeaveRefVoCollection();
			for(int homeleaves_i = 0; homeleaves_i < bean.getHomeLeaves().length; homeleaves_i++)
			{
				this.homeleaves.add(new ims.core.admin.pas.vo.HomeLeaveRefVo(new Integer(bean.getHomeLeaves()[homeleaves_i].getId()), bean.getHomeLeaves()[homeleaves_i].getVersion()));
			}
		}
		this.currenttrackingmovement = bean.getCurrentTrackingMovement() == null ? null : bean.getCurrentTrackingMovement().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.SpecialtyOutlierInpatientEpisodeListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDateTime();
		this.comments = bean.getComments();
		this.wardtype = bean.getWardType() == null ? null : ims.core.vo.lookups.WardType.buildLookup(bean.getWardType());
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo(map);
		this.isconfirmeddischarge = bean.getIsConfirmedDischarge();
		this.confirmeddischargedatetime = bean.getConfirmedDischargeDateTime() == null ? null : bean.getConfirmedDischargeDateTime().buildDateTime();
		this.isonhomeleave = bean.getIsOnHomeLeave();
		this.expecteddateofreturn = bean.getExpectedDateOfReturn() == null ? null : bean.getExpectedDateOfReturn().buildDate();
		this.expectedtimeofreturn = bean.getExpectedTimeOfReturn() == null ? null : bean.getExpectedTimeOfReturn().buildTime();
		this.activealerts = bean.getActiveAlerts();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.dateonhomeleave = bean.getDateOnHomeLeave() == null ? null : bean.getDateOnHomeLeave().buildDate();
		this.timeonhomeleave = bean.getTimeOnHomeLeave() == null ? null : bean.getTimeOnHomeLeave().buildTime();
		if(bean.getHomeLeaves() != null)
		{
			this.homeleaves = new ims.core.admin.pas.vo.HomeLeaveRefVoCollection();
			for(int homeleaves_i = 0; homeleaves_i < bean.getHomeLeaves().length; homeleaves_i++)
			{
				this.homeleaves.add(new ims.core.admin.pas.vo.HomeLeaveRefVo(new Integer(bean.getHomeLeaves()[homeleaves_i].getId()), bean.getHomeLeaves()[homeleaves_i].getVersion()));
			}
		}
		this.currenttrackingmovement = bean.getCurrentTrackingMovement() == null ? null : bean.getCurrentTrackingMovement().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.SpecialtyOutlierInpatientEpisodeListVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.SpecialtyOutlierInpatientEpisodeListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.SpecialtyOutlierInpatientEpisodeListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ESTDISCHARGEDATE"))
			return getEstDischargeDate();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("WARDTYPE"))
			return getWardType();
		if(fieldName.equals("BED"))
			return getBed();
		if(fieldName.equals("ISCONFIRMEDDISCHARGE"))
			return getIsConfirmedDischarge();
		if(fieldName.equals("CONFIRMEDDISCHARGEDATETIME"))
			return getConfirmedDischargeDateTime();
		if(fieldName.equals("ISONHOMELEAVE"))
			return getIsOnHomeLeave();
		if(fieldName.equals("EXPECTEDDATEOFRETURN"))
			return getExpectedDateOfReturn();
		if(fieldName.equals("EXPECTEDTIMEOFRETURN"))
			return getExpectedTimeOfReturn();
		if(fieldName.equals("ACTIVEALERTS"))
			return getActiveAlerts();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("DATEONHOMELEAVE"))
			return getDateOnHomeLeave();
		if(fieldName.equals("TIMEONHOMELEAVE"))
			return getTimeOnHomeLeave();
		if(fieldName.equals("HOMELEAVES"))
			return getHomeLeaves();
		if(fieldName.equals("CURRENTTRACKINGMOVEMENT"))
			return getCurrentTrackingMovement();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getEstDischargeDateIsNotNull()
	{
		return this.estdischargedate != null;
	}
	public ims.framework.utils.DateTime getEstDischargeDate()
	{
		return this.estdischargedate;
	}
	public void setEstDischargeDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.estdischargedate = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 1500;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getWardTypeIsNotNull()
	{
		return this.wardtype != null;
	}
	public ims.core.vo.lookups.WardType getWardType()
	{
		return this.wardtype;
	}
	public void setWardType(ims.core.vo.lookups.WardType value)
	{
		this.isValidated = false;
		this.wardtype = value;
	}
	public boolean getBedIsNotNull()
	{
		return this.bed != null;
	}
	public ims.core.vo.BedSpaceStateLiteVo getBed()
	{
		return this.bed;
	}
	public void setBed(ims.core.vo.BedSpaceStateLiteVo value)
	{
		this.isValidated = false;
		this.bed = value;
	}
	public boolean getIsConfirmedDischargeIsNotNull()
	{
		return this.isconfirmeddischarge != null;
	}
	public Boolean getIsConfirmedDischarge()
	{
		return this.isconfirmeddischarge;
	}
	public void setIsConfirmedDischarge(Boolean value)
	{
		this.isValidated = false;
		this.isconfirmeddischarge = value;
	}
	public boolean getConfirmedDischargeDateTimeIsNotNull()
	{
		return this.confirmeddischargedatetime != null;
	}
	public ims.framework.utils.DateTime getConfirmedDischargeDateTime()
	{
		return this.confirmeddischargedatetime;
	}
	public void setConfirmedDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.confirmeddischargedatetime = value;
	}
	public boolean getIsOnHomeLeaveIsNotNull()
	{
		return this.isonhomeleave != null;
	}
	public Boolean getIsOnHomeLeave()
	{
		return this.isonhomeleave;
	}
	public void setIsOnHomeLeave(Boolean value)
	{
		this.isValidated = false;
		this.isonhomeleave = value;
	}
	public boolean getExpectedDateOfReturnIsNotNull()
	{
		return this.expecteddateofreturn != null;
	}
	public ims.framework.utils.Date getExpectedDateOfReturn()
	{
		return this.expecteddateofreturn;
	}
	public void setExpectedDateOfReturn(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.expecteddateofreturn = value;
	}
	public boolean getExpectedTimeOfReturnIsNotNull()
	{
		return this.expectedtimeofreturn != null;
	}
	public ims.framework.utils.Time getExpectedTimeOfReturn()
	{
		return this.expectedtimeofreturn;
	}
	public void setExpectedTimeOfReturn(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.expectedtimeofreturn = value;
	}
	public boolean getActiveAlertsIsNotNull()
	{
		return this.activealerts != null;
	}
	public Boolean getActiveAlerts()
	{
		return this.activealerts;
	}
	public void setActiveAlerts(Boolean value)
	{
		this.isValidated = false;
		this.activealerts = value;
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.vo.PasEventForSTHKListVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.vo.PasEventForSTHKListVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getDateOnHomeLeaveIsNotNull()
	{
		return this.dateonhomeleave != null;
	}
	public ims.framework.utils.Date getDateOnHomeLeave()
	{
		return this.dateonhomeleave;
	}
	public void setDateOnHomeLeave(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateonhomeleave = value;
	}
	public boolean getTimeOnHomeLeaveIsNotNull()
	{
		return this.timeonhomeleave != null;
	}
	public ims.framework.utils.Time getTimeOnHomeLeave()
	{
		return this.timeonhomeleave;
	}
	public void setTimeOnHomeLeave(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.timeonhomeleave = value;
	}
	public boolean getHomeLeavesIsNotNull()
	{
		return this.homeleaves != null;
	}
	public ims.core.admin.pas.vo.HomeLeaveRefVoCollection getHomeLeaves()
	{
		return this.homeleaves;
	}
	public void setHomeLeaves(ims.core.admin.pas.vo.HomeLeaveRefVoCollection value)
	{
		this.isValidated = false;
		this.homeleaves = value;
	}
	public boolean getCurrentTrackingMovementIsNotNull()
	{
		return this.currenttrackingmovement != null;
	}
	public ims.core.vo.TrackingMovementLiteVo getCurrentTrackingMovement()
	{
		return this.currenttrackingmovement;
	}
	public void setCurrentTrackingMovement(ims.core.vo.TrackingMovementLiteVo value)
	{
		this.isValidated = false;
		this.currenttrackingmovement = value;
	}
	/**
	* isDischargeDueWithin24Hrs()
	*/
	public boolean isDischargeDueWithin24Hrs()
	{
		if (this.confirmeddischargedatetime == null && this.estdischargedate == null)
			return false;
				
		ims.framework.utils.DateTime nowPlus24Hrs = new ims.framework.utils.DateTime();
		nowPlus24Hrs.addHours(24);
				
		if ((this.confirmeddischargedatetime != null && this.confirmeddischargedatetime.isLessOrEqualThan(nowPlus24Hrs)) ||(this.estdischargedate != null && this.estdischargedate.isLessOrEqualThan(nowPlus24Hrs)))
			return true;
				
		return false;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.comments != null)
			if(this.comments.length() > 1500)
				listOfErrors.add("The length of the field [comments] in the value object [ims.core.vo.SpecialtyOutlierInpatientEpisodeListVo] is too big. It should be less or equal to 1500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SpecialtyOutlierInpatientEpisodeListVo clone = new SpecialtyOutlierInpatientEpisodeListVo(this.id, this.version);
		
		if(this.estdischargedate == null)
			clone.estdischargedate = null;
		else
			clone.estdischargedate = (ims.framework.utils.DateTime)this.estdischargedate.clone();
		clone.comments = this.comments;
		if(this.wardtype == null)
			clone.wardtype = null;
		else
			clone.wardtype = (ims.core.vo.lookups.WardType)this.wardtype.clone();
		if(this.bed == null)
			clone.bed = null;
		else
			clone.bed = (ims.core.vo.BedSpaceStateLiteVo)this.bed.clone();
		clone.isconfirmeddischarge = this.isconfirmeddischarge;
		if(this.confirmeddischargedatetime == null)
			clone.confirmeddischargedatetime = null;
		else
			clone.confirmeddischargedatetime = (ims.framework.utils.DateTime)this.confirmeddischargedatetime.clone();
		clone.isonhomeleave = this.isonhomeleave;
		if(this.expecteddateofreturn == null)
			clone.expecteddateofreturn = null;
		else
			clone.expecteddateofreturn = (ims.framework.utils.Date)this.expecteddateofreturn.clone();
		if(this.expectedtimeofreturn == null)
			clone.expectedtimeofreturn = null;
		else
			clone.expectedtimeofreturn = (ims.framework.utils.Time)this.expectedtimeofreturn.clone();
		clone.activealerts = this.activealerts;
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventForSTHKListVo)this.pasevent.clone();
		if(this.dateonhomeleave == null)
			clone.dateonhomeleave = null;
		else
			clone.dateonhomeleave = (ims.framework.utils.Date)this.dateonhomeleave.clone();
		if(this.timeonhomeleave == null)
			clone.timeonhomeleave = null;
		else
			clone.timeonhomeleave = (ims.framework.utils.Time)this.timeonhomeleave.clone();
		clone.homeleaves = this.homeleaves;
		if(this.currenttrackingmovement == null)
			clone.currenttrackingmovement = null;
		else
			clone.currenttrackingmovement = (ims.core.vo.TrackingMovementLiteVo)this.currenttrackingmovement.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SpecialtyOutlierInpatientEpisodeListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SpecialtyOutlierInpatientEpisodeListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((SpecialtyOutlierInpatientEpisodeListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((SpecialtyOutlierInpatientEpisodeListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.estdischargedate != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.wardtype != null)
			count++;
		if(this.bed != null)
			count++;
		if(this.isconfirmeddischarge != null)
			count++;
		if(this.confirmeddischargedatetime != null)
			count++;
		if(this.isonhomeleave != null)
			count++;
		if(this.expecteddateofreturn != null)
			count++;
		if(this.expectedtimeofreturn != null)
			count++;
		if(this.activealerts != null)
			count++;
		if(this.pasevent != null)
			count++;
		if(this.dateonhomeleave != null)
			count++;
		if(this.timeonhomeleave != null)
			count++;
		if(this.homeleaves != null)
			count++;
		if(this.currenttrackingmovement != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 15;
	}
	protected ims.framework.utils.DateTime estdischargedate;
	protected String comments;
	protected ims.core.vo.lookups.WardType wardtype;
	protected ims.core.vo.BedSpaceStateLiteVo bed;
	protected Boolean isconfirmeddischarge;
	protected ims.framework.utils.DateTime confirmeddischargedatetime;
	protected Boolean isonhomeleave;
	protected ims.framework.utils.Date expecteddateofreturn;
	protected ims.framework.utils.Time expectedtimeofreturn;
	protected Boolean activealerts;
	protected ims.core.vo.PasEventForSTHKListVo pasevent;
	protected ims.framework.utils.Date dateonhomeleave;
	protected ims.framework.utils.Time timeonhomeleave;
	protected ims.core.admin.pas.vo.HomeLeaveRefVoCollection homeleaves;
	protected ims.core.vo.TrackingMovementLiteVo currenttrackingmovement;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
