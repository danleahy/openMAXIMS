//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.AdmissionDetail business object (ID: 1014100008).
 */
public class AdmissionDetailShortVo extends ims.core.admin.pas.vo.AdmissionDetailRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AdmissionDetailShortVo()
	{
	}
	public AdmissionDetailShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public AdmissionDetailShortVo(ims.core.vo.beans.AdmissionDetailShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo();
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.anticipatedstay = bean.getAnticipatedStay();
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDateTime();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo();
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo();
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.wardtype = bean.getWardType() == null ? null : ims.core.vo.lookups.WardType.buildLookup(bean.getWardType());
		this.sourceofadmission = bean.getSourceOfAdmission() == null ? null : ims.core.vo.lookups.SourceOfAdmission.buildLookup(bean.getSourceOfAdmission());
		this.methodofadmission = bean.getMethodOfAdmission() == null ? null : ims.core.vo.lookups.MethodOfAdmission.buildLookup(bean.getMethodOfAdmission());
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientCategory());
		this.sourceofemergencyreferral = bean.getSourceOfEmergencyReferral() == null ? null : ims.core.vo.lookups.SourceOfEmergencyReferral.buildLookup(bean.getSourceOfEmergencyReferral());
		this.ischaplainrequired = bean.getIsChaplainRequired();
		this.reasonforadmission = bean.getReasonForAdmission();
		this.referringconsultant = bean.getReferringConsultant() == null ? null : bean.getReferringConsultant().buildVo();
		this.selfadmitpatient = bean.getSelfAdmitPatient();
		this.updatecfl = bean.getUpdateCFL();
		this.casefoldercomments = bean.getCaseFolderComments();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.AdmissionDetailShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pasevent = bean.getPasEvent() == null ? null : bean.getPasEvent().buildVo(map);
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.anticipatedstay = bean.getAnticipatedStay();
		this.estdischargedate = bean.getEstDischargeDate() == null ? null : bean.getEstDischargeDate().buildDateTime();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo(map);
		this.bed = bean.getBed() == null ? null : bean.getBed().buildVo(map);
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.wardtype = bean.getWardType() == null ? null : ims.core.vo.lookups.WardType.buildLookup(bean.getWardType());
		this.sourceofadmission = bean.getSourceOfAdmission() == null ? null : ims.core.vo.lookups.SourceOfAdmission.buildLookup(bean.getSourceOfAdmission());
		this.methodofadmission = bean.getMethodOfAdmission() == null ? null : ims.core.vo.lookups.MethodOfAdmission.buildLookup(bean.getMethodOfAdmission());
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientCategory());
		this.sourceofemergencyreferral = bean.getSourceOfEmergencyReferral() == null ? null : ims.core.vo.lookups.SourceOfEmergencyReferral.buildLookup(bean.getSourceOfEmergencyReferral());
		this.ischaplainrequired = bean.getIsChaplainRequired();
		this.reasonforadmission = bean.getReasonForAdmission();
		this.referringconsultant = bean.getReferringConsultant() == null ? null : bean.getReferringConsultant().buildVo(map);
		this.selfadmitpatient = bean.getSelfAdmitPatient();
		this.updatecfl = bean.getUpdateCFL();
		this.casefoldercomments = bean.getCaseFolderComments();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.AdmissionDetailShortVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.AdmissionDetailShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.AdmissionDetailShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("ADMISSIONDATETIME"))
			return getAdmissionDateTime();
		if(fieldName.equals("ANTICIPATEDSTAY"))
			return getAnticipatedStay();
		if(fieldName.equals("ESTDISCHARGEDATE"))
			return getEstDischargeDate();
		if(fieldName.equals("WARD"))
			return getWard();
		if(fieldName.equals("BED"))
			return getBed();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("CONSULTANT"))
			return getConsultant();
		if(fieldName.equals("WARDTYPE"))
			return getWardType();
		if(fieldName.equals("SOURCEOFADMISSION"))
			return getSourceOfAdmission();
		if(fieldName.equals("METHODOFADMISSION"))
			return getMethodOfAdmission();
		if(fieldName.equals("PATIENTCATEGORY"))
			return getPatientCategory();
		if(fieldName.equals("SOURCEOFEMERGENCYREFERRAL"))
			return getSourceOfEmergencyReferral();
		if(fieldName.equals("ISCHAPLAINREQUIRED"))
			return getIsChaplainRequired();
		if(fieldName.equals("REASONFORADMISSION"))
			return getReasonForAdmission();
		if(fieldName.equals("REFERRINGCONSULTANT"))
			return getReferringConsultant();
		if(fieldName.equals("SELFADMITPATIENT"))
			return getSelfAdmitPatient();
		if(fieldName.equals("UPDATECFL"))
			return getUpdateCFL();
		if(fieldName.equals("CASEFOLDERCOMMENTS"))
			return getCaseFolderComments();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.vo.PasEventShortAdmitVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.vo.PasEventShortAdmitVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getAdmissionDateTimeIsNotNull()
	{
		return this.admissiondatetime != null;
	}
	public ims.framework.utils.DateTime getAdmissionDateTime()
	{
		return this.admissiondatetime;
	}
	public void setAdmissionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admissiondatetime = value;
	}
	public boolean getAnticipatedStayIsNotNull()
	{
		return this.anticipatedstay != null;
	}
	public Integer getAnticipatedStay()
	{
		return this.anticipatedstay;
	}
	public void setAnticipatedStay(Integer value)
	{
		this.isValidated = false;
		this.anticipatedstay = value;
	}
	public boolean getEstDischargeDateIsNotNull()
	{
		return this.estdischargedate != null;
	}
	public ims.framework.utils.DateTime getEstDischargeDate()
	{
		return this.estdischargedate;
	}
	public void setEstDischargeDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.estdischargedate = value;
	}
	public boolean getWardIsNotNull()
	{
		return this.ward != null;
	}
	public ims.core.vo.LocationLiteVo getWard()
	{
		return this.ward;
	}
	public void setWard(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.ward = value;
	}
	public boolean getBedIsNotNull()
	{
		return this.bed != null;
	}
	public ims.core.vo.BedSpaceLiteVo getBed()
	{
		return this.bed;
	}
	public void setBed(ims.core.vo.BedSpaceLiteVo value)
	{
		this.isValidated = false;
		this.bed = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceLiteVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public ims.core.vo.MedicLiteVo getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(ims.core.vo.MedicLiteVo value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getWardTypeIsNotNull()
	{
		return this.wardtype != null;
	}
	public ims.core.vo.lookups.WardType getWardType()
	{
		return this.wardtype;
	}
	public void setWardType(ims.core.vo.lookups.WardType value)
	{
		this.isValidated = false;
		this.wardtype = value;
	}
	public boolean getSourceOfAdmissionIsNotNull()
	{
		return this.sourceofadmission != null;
	}
	public ims.core.vo.lookups.SourceOfAdmission getSourceOfAdmission()
	{
		return this.sourceofadmission;
	}
	public void setSourceOfAdmission(ims.core.vo.lookups.SourceOfAdmission value)
	{
		this.isValidated = false;
		this.sourceofadmission = value;
	}
	public boolean getMethodOfAdmissionIsNotNull()
	{
		return this.methodofadmission != null;
	}
	public ims.core.vo.lookups.MethodOfAdmission getMethodOfAdmission()
	{
		return this.methodofadmission;
	}
	public void setMethodOfAdmission(ims.core.vo.lookups.MethodOfAdmission value)
	{
		this.isValidated = false;
		this.methodofadmission = value;
	}
	public boolean getPatientCategoryIsNotNull()
	{
		return this.patientcategory != null;
	}
	public ims.core.vo.lookups.PatientStatus getPatientCategory()
	{
		return this.patientcategory;
	}
	public void setPatientCategory(ims.core.vo.lookups.PatientStatus value)
	{
		this.isValidated = false;
		this.patientcategory = value;
	}
	public boolean getSourceOfEmergencyReferralIsNotNull()
	{
		return this.sourceofemergencyreferral != null;
	}
	public ims.core.vo.lookups.SourceOfEmergencyReferral getSourceOfEmergencyReferral()
	{
		return this.sourceofemergencyreferral;
	}
	public void setSourceOfEmergencyReferral(ims.core.vo.lookups.SourceOfEmergencyReferral value)
	{
		this.isValidated = false;
		this.sourceofemergencyreferral = value;
	}
	public boolean getIsChaplainRequiredIsNotNull()
	{
		return this.ischaplainrequired != null;
	}
	public Boolean getIsChaplainRequired()
	{
		return this.ischaplainrequired;
	}
	public void setIsChaplainRequired(Boolean value)
	{
		this.isValidated = false;
		this.ischaplainrequired = value;
	}
	public boolean getReasonForAdmissionIsNotNull()
	{
		return this.reasonforadmission != null;
	}
	public String getReasonForAdmission()
	{
		return this.reasonforadmission;
	}
	public static int getReasonForAdmissionMaxLength()
	{
		return 255;
	}
	public void setReasonForAdmission(String value)
	{
		this.isValidated = false;
		this.reasonforadmission = value;
	}
	public boolean getReferringConsultantIsNotNull()
	{
		return this.referringconsultant != null;
	}
	public ims.core.vo.MedicLiteVo getReferringConsultant()
	{
		return this.referringconsultant;
	}
	public void setReferringConsultant(ims.core.vo.MedicLiteVo value)
	{
		this.isValidated = false;
		this.referringconsultant = value;
	}
	public boolean getSelfAdmitPatientIsNotNull()
	{
		return this.selfadmitpatient != null;
	}
	public Boolean getSelfAdmitPatient()
	{
		return this.selfadmitpatient;
	}
	public void setSelfAdmitPatient(Boolean value)
	{
		this.isValidated = false;
		this.selfadmitpatient = value;
	}
	public boolean getUpdateCFLIsNotNull()
	{
		return this.updatecfl != null;
	}
	public Boolean getUpdateCFL()
	{
		return this.updatecfl;
	}
	public void setUpdateCFL(Boolean value)
	{
		this.isValidated = false;
		this.updatecfl = value;
	}
	public boolean getCaseFolderCommentsIsNotNull()
	{
		return this.casefoldercomments != null;
	}
	public String getCaseFolderComments()
	{
		return this.casefoldercomments;
	}
	public static int getCaseFolderCommentsMaxLength()
	{
		return 1000;
	}
	public void setCaseFolderComments(String value)
	{
		this.isValidated = false;
		this.casefoldercomments = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pasevent != null)
		{
			if(!this.pasevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pasevent == null)
			listOfErrors.add("pasEvent is mandatory");
		if(this.pasevent != null)
		{
			String[] listOfOtherErrors = this.pasevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.admissiondatetime == null)
			listOfErrors.add("Admission Date Time is mandatory");
		if(this.ward == null)
			listOfErrors.add("Ward is mandatory");
		if(this.service == null)
			listOfErrors.add("Service is mandatory");
		if(this.specialty == null)
			listOfErrors.add("Specialty is mandatory");
		if(this.consultant == null)
			listOfErrors.add("Consultant is mandatory");
		if(this.sourceofadmission == null)
			listOfErrors.add("Source Of Admission is mandatory");
		if(this.methodofadmission == null)
			listOfErrors.add("Method Of Admission is mandatory");
		if(this.patientcategory == null)
			listOfErrors.add("Patient Category is mandatory");
		if(this.reasonforadmission != null)
			if(this.reasonforadmission.length() > 255)
				listOfErrors.add("The length of the field [reasonforadmission] in the value object [ims.core.vo.AdmissionDetailShortVo] is too big. It should be less or equal to 255");
		if(this.casefoldercomments != null)
			if(this.casefoldercomments.length() > 1000)
				listOfErrors.add("The length of the field [casefoldercomments] in the value object [ims.core.vo.AdmissionDetailShortVo] is too big. It should be less or equal to 1000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AdmissionDetailShortVo clone = new AdmissionDetailShortVo(this.id, this.version);
		
		if(this.pasevent == null)
			clone.pasevent = null;
		else
			clone.pasevent = (ims.core.vo.PasEventShortAdmitVo)this.pasevent.clone();
		if(this.admissiondatetime == null)
			clone.admissiondatetime = null;
		else
			clone.admissiondatetime = (ims.framework.utils.DateTime)this.admissiondatetime.clone();
		clone.anticipatedstay = this.anticipatedstay;
		if(this.estdischargedate == null)
			clone.estdischargedate = null;
		else
			clone.estdischargedate = (ims.framework.utils.DateTime)this.estdischargedate.clone();
		if(this.ward == null)
			clone.ward = null;
		else
			clone.ward = (ims.core.vo.LocationLiteVo)this.ward.clone();
		if(this.bed == null)
			clone.bed = null;
		else
			clone.bed = (ims.core.vo.BedSpaceLiteVo)this.bed.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.MedicLiteVo)this.consultant.clone();
		if(this.wardtype == null)
			clone.wardtype = null;
		else
			clone.wardtype = (ims.core.vo.lookups.WardType)this.wardtype.clone();
		if(this.sourceofadmission == null)
			clone.sourceofadmission = null;
		else
			clone.sourceofadmission = (ims.core.vo.lookups.SourceOfAdmission)this.sourceofadmission.clone();
		if(this.methodofadmission == null)
			clone.methodofadmission = null;
		else
			clone.methodofadmission = (ims.core.vo.lookups.MethodOfAdmission)this.methodofadmission.clone();
		if(this.patientcategory == null)
			clone.patientcategory = null;
		else
			clone.patientcategory = (ims.core.vo.lookups.PatientStatus)this.patientcategory.clone();
		if(this.sourceofemergencyreferral == null)
			clone.sourceofemergencyreferral = null;
		else
			clone.sourceofemergencyreferral = (ims.core.vo.lookups.SourceOfEmergencyReferral)this.sourceofemergencyreferral.clone();
		clone.ischaplainrequired = this.ischaplainrequired;
		clone.reasonforadmission = this.reasonforadmission;
		if(this.referringconsultant == null)
			clone.referringconsultant = null;
		else
			clone.referringconsultant = (ims.core.vo.MedicLiteVo)this.referringconsultant.clone();
		clone.selfadmitpatient = this.selfadmitpatient;
		clone.updatecfl = this.updatecfl;
		clone.casefoldercomments = this.casefoldercomments;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AdmissionDetailShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AdmissionDetailShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AdmissionDetailShortVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AdmissionDetailShortVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pasevent != null)
			count++;
		if(this.admissiondatetime != null)
			count++;
		if(this.anticipatedstay != null)
			count++;
		if(this.estdischargedate != null)
			count++;
		if(this.ward != null)
			count++;
		if(this.bed != null)
			count++;
		if(this.service != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.wardtype != null)
			count++;
		if(this.sourceofadmission != null)
			count++;
		if(this.methodofadmission != null)
			count++;
		if(this.patientcategory != null)
			count++;
		if(this.sourceofemergencyreferral != null)
			count++;
		if(this.ischaplainrequired != null)
			count++;
		if(this.reasonforadmission != null)
			count++;
		if(this.referringconsultant != null)
			count++;
		if(this.selfadmitpatient != null)
			count++;
		if(this.updatecfl != null)
			count++;
		if(this.casefoldercomments != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 20;
	}
	protected ims.core.vo.PasEventShortAdmitVo pasevent;
	protected ims.framework.utils.DateTime admissiondatetime;
	protected Integer anticipatedstay;
	protected ims.framework.utils.DateTime estdischargedate;
	protected ims.core.vo.LocationLiteVo ward;
	protected ims.core.vo.BedSpaceLiteVo bed;
	protected ims.core.vo.ServiceLiteVo service;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.core.vo.MedicLiteVo consultant;
	protected ims.core.vo.lookups.WardType wardtype;
	protected ims.core.vo.lookups.SourceOfAdmission sourceofadmission;
	protected ims.core.vo.lookups.MethodOfAdmission methodofadmission;
	protected ims.core.vo.lookups.PatientStatus patientcategory;
	protected ims.core.vo.lookups.SourceOfEmergencyReferral sourceofemergencyreferral;
	protected Boolean ischaplainrequired;
	protected String reasonforadmission;
	protected ims.core.vo.MedicLiteVo referringconsultant;
	protected Boolean selfadmitpatient;
	protected Boolean updatecfl;
	protected String casefoldercomments;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
