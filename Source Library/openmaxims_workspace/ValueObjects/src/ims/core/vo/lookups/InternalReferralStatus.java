//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class InternalReferralStatus extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public InternalReferralStatus()
	{
		super();
	}
	public InternalReferralStatus(int id)
	{
		super(id, "", true);
	}
	public InternalReferralStatus(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public InternalReferralStatus(int id, String text, boolean active, InternalReferralStatus parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public InternalReferralStatus(int id, String text, boolean active, InternalReferralStatus parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public InternalReferralStatus(int id, String text, boolean active, InternalReferralStatus parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static InternalReferralStatus buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new InternalReferralStatus(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (InternalReferralStatus)super.getParentInstance();
	}
	public InternalReferralStatus getParent()
	{
		return (InternalReferralStatus)super.getParentInstance();
	}
	public void setParent(InternalReferralStatus parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		InternalReferralStatus[] typedChildren = new InternalReferralStatus[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (InternalReferralStatus)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof InternalReferralStatus)
		{
			super.addChild((InternalReferralStatus)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof InternalReferralStatus)
		{
			super.removeChild((InternalReferralStatus)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		InternalReferralStatusCollection result = new InternalReferralStatusCollection();
		result.add(AWAITING_REFERRAL_LETTER);
		result.add(AWAITING_AUTHORISATION);
		result.add(AWAITING_ACCEPTANCE);
		result.add(REQUIRES_FURTHER_INFORMATION);
		result.add(SECOND_OPINION_REQUIRED);
		result.add(ACCEPTED);
		result.add(COMPLETED);
		result.add(REJECTED);
		result.add(INAPPROPRIATE_REFERRAL);
		result.add(ABANDONED);
		return result;
	}
	public static InternalReferralStatus[] getNegativeInstances()
	{
		InternalReferralStatus[] instances = new InternalReferralStatus[10];
		instances[0] = AWAITING_REFERRAL_LETTER;
		instances[1] = AWAITING_AUTHORISATION;
		instances[2] = AWAITING_ACCEPTANCE;
		instances[3] = REQUIRES_FURTHER_INFORMATION;
		instances[4] = SECOND_OPINION_REQUIRED;
		instances[5] = ACCEPTED;
		instances[6] = COMPLETED;
		instances[7] = REJECTED;
		instances[8] = INAPPROPRIATE_REFERRAL;
		instances[9] = ABANDONED;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[10];
		negativeInstances[0] = "AWAITING_REFERRAL_LETTER";
		negativeInstances[1] = "AWAITING_AUTHORISATION";
		negativeInstances[2] = "AWAITING_ACCEPTANCE";
		negativeInstances[3] = "REQUIRES_FURTHER_INFORMATION";
		negativeInstances[4] = "SECOND_OPINION_REQUIRED";
		negativeInstances[5] = "ACCEPTED";
		negativeInstances[6] = "COMPLETED";
		negativeInstances[7] = "REJECTED";
		negativeInstances[8] = "INAPPROPRIATE_REFERRAL";
		negativeInstances[9] = "ABANDONED";
		return negativeInstances;
	}
	public static InternalReferralStatus getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static InternalReferralStatus getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		InternalReferralStatus[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1021303;
	public static final InternalReferralStatus AWAITING_REFERRAL_LETTER = new InternalReferralStatus(-2701, "Awaiting Clinical Details", true, null, null, Color.Default);
	public static final InternalReferralStatus AWAITING_AUTHORISATION = new InternalReferralStatus(-2702, "Awaiting Authorisation", true, null, null, Color.Default);
	public static final InternalReferralStatus AWAITING_ACCEPTANCE = new InternalReferralStatus(-2703, "Awaiting Acceptance", true, null, null, Color.Default);
	public static final InternalReferralStatus REQUIRES_FURTHER_INFORMATION = new InternalReferralStatus(-2704, "Requires Further Information", true, null, null, Color.Default);
	public static final InternalReferralStatus SECOND_OPINION_REQUIRED = new InternalReferralStatus(-2705, "Second Opinion Required", true, null, null, Color.Default);
	public static final InternalReferralStatus ACCEPTED = new InternalReferralStatus(-2707, "Accepted", true, null, null, Color.Default);
	public static final InternalReferralStatus COMPLETED = new InternalReferralStatus(-2708, "Completed", true, null, null, Color.Default);
	public static final InternalReferralStatus REJECTED = new InternalReferralStatus(-2709, "Rejected", true, null, null, Color.Default);
	public static final InternalReferralStatus INAPPROPRIATE_REFERRAL = new InternalReferralStatus(-2717, "Inappropriate Referral", true, null, null, Color.Default);
	public static final InternalReferralStatus ABANDONED = new InternalReferralStatus(-2740, "ABANDONED", true, null, null, Color.Default);
}
