//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.PAS Event business object (ID: 1014100003).
 */
public class ifInpatientEpisodeVo extends ims.core.admin.pas.vo.PASEventRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ifInpatientEpisodeVo()
	{
	}
	public ifInpatientEpisodeVo(Integer id, int version)
	{
		super(id, version);
	}
	public ifInpatientEpisodeVo(ims.core.vo.beans.ifInpatientEpisodeVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.paseventid = bean.getPasEventId();
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.sourceofreferral = bean.getSourceOfReferral() == null ? null : ims.core.vo.lookups.SourceOfReferral.buildLookup(bean.getSourceOfReferral());
		this.isvip = bean.getIsVip();
		this.referringgp = bean.getReferringGP() == null ? null : bean.getReferringGP().buildVo();
		this.eventtype = bean.getEventType() == null ? null : ims.core.vo.lookups.PasEventType.buildLookup(bean.getEventType());
		this.pasepisodeid = bean.getPasEpisodeId();
		this.episodefinancialclass = bean.getEpisodeFinancialClass() == null ? null : ims.ocrr.vo.lookups.OrderCategory.buildLookup(bean.getEpisodeFinancialClass());
		this.attendinghcp = bean.getAttendingHCP() == null ? null : bean.getAttendingHCP().buildVo();
		this.pointofcare = bean.getPointOfCare();
		this.bedno = bean.getBedNo();
		this.facility = bean.getFacility();
		this.locationdescription = bean.getLocationDescription();
		this.hospitalservice = bean.getHospitalService();
		this.admitsource = bean.getAdmitSource() == null ? null : ims.core.vo.lookups.SourceOfAdmission.buildLookup(bean.getAdmitSource());
		this.patienttype = bean.getPatientType() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientType());
		this.ischaplainrequired = bean.getIsChaplainRequired();
		this.tcitype = bean.getTCIType() == null ? null : ims.core.vo.lookups.TCIType.buildLookup(bean.getTCIType());
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.wardtype = bean.getWardType() == null ? null : ims.core.vo.lookups.WardType.buildLookup(bean.getWardType());
		this.admissionreason = bean.getAdmissionReason();
		this.dischargedisposition = bean.getDischargeDisposition() == null ? null : ims.core.vo.lookups.DischargeReason.buildLookup(bean.getDischargeDisposition());
		this.dischargedestination = bean.getDischargeDestination() == null ? null : ims.coe.vo.lookups.DischargeDestination.buildLookup(bean.getDischargeDestination());
		this.dischargedatetime = bean.getDischargeDateTime() == null ? null : bean.getDischargeDateTime().buildDateTime();
		this.expectedloareturndatetime = bean.getExpectedLOAReturnDateTime() == null ? null : bean.getExpectedLOAReturnDateTime().buildDateTime();
		this.priorpointofcare = bean.getPriorPointOfCare();
		this.priorbedno = bean.getPriorBedNo();
		this.priorfacilty = bean.getPriorFacilty();
		this.priorlocationdescription = bean.getPriorLocationDescription();
		this.preadmissionnumber = bean.getPreadmissionNumber();
		this.datetimeonhomeleave = bean.getDateTimeOnHomeLeave() == null ? null : bean.getDateTimeOnHomeLeave().buildDateTime();
		this.methodofadmission = bean.getMethodOfAdmission() == null ? null : ims.core.vo.lookups.MethodOfAdmission.buildLookup(bean.getMethodOfAdmission());
		this.wardlocation = bean.getWardLocation() == null ? null : bean.getWardLocation().buildVo();
		this.priorwardlocation = bean.getPriorWardLocation() == null ? null : bean.getPriorWardLocation().buildVo();
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.pendingtransfer = bean.getPendingTransfer() == null ? null : bean.getPendingTransfer().buildVo();
		this.estlengthofstay = bean.getEstLengthOfStay();
		this.bedspacestatebay = bean.getBedSpaceStateBay() == null ? null : bean.getBedSpaceStateBay().buildVo();
		this.expecteddischargedatetime = bean.getExpectedDischargeDateTime() == null ? null : bean.getExpectedDischargeDateTime().buildDateTime();
		this.methodofdischarge = bean.getMethodOfDischarge() == null ? null : ims.core.vo.lookups.MethodOfDischarge.buildLookup(bean.getMethodOfDischarge());
		this.currentwardstayadmissiondatetime = bean.getCurrentWardStayAdmissionDateTime() == null ? null : bean.getCurrentWardStayAdmissionDateTime().buildDateTime();
		this.priortransferreason = bean.getPriorTransferReason() == null ? null : ims.core.vo.lookups.TransferReason.buildLookup(bean.getPriorTransferReason());
		this.sourceofemergencyreferral = bean.getSourceOfEmergencyReferral() == null ? null : ims.core.vo.lookups.SourceOfEmergencyReferral.buildLookup(bean.getSourceOfEmergencyReferral());
		this.admissioneventdatetime = bean.getAdmissionEventDateTime() == null ? null : bean.getAdmissionEventDateTime().buildDateTime();
		this.dischargeeventdatetime = bean.getDischargeEventDateTime() == null ? null : bean.getDischargeEventDateTime().buildDateTime();
		this.transfereventdatetime = bean.getTransferEventDateTime() == null ? null : bean.getTransferEventDateTime().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.ifInpatientEpisodeVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.paseventid = bean.getPasEventId();
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.sourceofreferral = bean.getSourceOfReferral() == null ? null : ims.core.vo.lookups.SourceOfReferral.buildLookup(bean.getSourceOfReferral());
		this.isvip = bean.getIsVip();
		this.referringgp = bean.getReferringGP() == null ? null : bean.getReferringGP().buildVo(map);
		this.eventtype = bean.getEventType() == null ? null : ims.core.vo.lookups.PasEventType.buildLookup(bean.getEventType());
		this.pasepisodeid = bean.getPasEpisodeId();
		this.episodefinancialclass = bean.getEpisodeFinancialClass() == null ? null : ims.ocrr.vo.lookups.OrderCategory.buildLookup(bean.getEpisodeFinancialClass());
		this.attendinghcp = bean.getAttendingHCP() == null ? null : bean.getAttendingHCP().buildVo(map);
		this.pointofcare = bean.getPointOfCare();
		this.bedno = bean.getBedNo();
		this.facility = bean.getFacility();
		this.locationdescription = bean.getLocationDescription();
		this.hospitalservice = bean.getHospitalService();
		this.admitsource = bean.getAdmitSource() == null ? null : ims.core.vo.lookups.SourceOfAdmission.buildLookup(bean.getAdmitSource());
		this.patienttype = bean.getPatientType() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientType());
		this.ischaplainrequired = bean.getIsChaplainRequired();
		this.tcitype = bean.getTCIType() == null ? null : ims.core.vo.lookups.TCIType.buildLookup(bean.getTCIType());
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.wardtype = bean.getWardType() == null ? null : ims.core.vo.lookups.WardType.buildLookup(bean.getWardType());
		this.admissionreason = bean.getAdmissionReason();
		this.dischargedisposition = bean.getDischargeDisposition() == null ? null : ims.core.vo.lookups.DischargeReason.buildLookup(bean.getDischargeDisposition());
		this.dischargedestination = bean.getDischargeDestination() == null ? null : ims.coe.vo.lookups.DischargeDestination.buildLookup(bean.getDischargeDestination());
		this.dischargedatetime = bean.getDischargeDateTime() == null ? null : bean.getDischargeDateTime().buildDateTime();
		this.expectedloareturndatetime = bean.getExpectedLOAReturnDateTime() == null ? null : bean.getExpectedLOAReturnDateTime().buildDateTime();
		this.priorpointofcare = bean.getPriorPointOfCare();
		this.priorbedno = bean.getPriorBedNo();
		this.priorfacilty = bean.getPriorFacilty();
		this.priorlocationdescription = bean.getPriorLocationDescription();
		this.preadmissionnumber = bean.getPreadmissionNumber();
		this.datetimeonhomeleave = bean.getDateTimeOnHomeLeave() == null ? null : bean.getDateTimeOnHomeLeave().buildDateTime();
		this.methodofadmission = bean.getMethodOfAdmission() == null ? null : ims.core.vo.lookups.MethodOfAdmission.buildLookup(bean.getMethodOfAdmission());
		this.wardlocation = bean.getWardLocation() == null ? null : bean.getWardLocation().buildVo(map);
		this.priorwardlocation = bean.getPriorWardLocation() == null ? null : bean.getPriorWardLocation().buildVo(map);
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.pendingtransfer = bean.getPendingTransfer() == null ? null : bean.getPendingTransfer().buildVo(map);
		this.estlengthofstay = bean.getEstLengthOfStay();
		this.bedspacestatebay = bean.getBedSpaceStateBay() == null ? null : bean.getBedSpaceStateBay().buildVo(map);
		this.expecteddischargedatetime = bean.getExpectedDischargeDateTime() == null ? null : bean.getExpectedDischargeDateTime().buildDateTime();
		this.methodofdischarge = bean.getMethodOfDischarge() == null ? null : ims.core.vo.lookups.MethodOfDischarge.buildLookup(bean.getMethodOfDischarge());
		this.currentwardstayadmissiondatetime = bean.getCurrentWardStayAdmissionDateTime() == null ? null : bean.getCurrentWardStayAdmissionDateTime().buildDateTime();
		this.priortransferreason = bean.getPriorTransferReason() == null ? null : ims.core.vo.lookups.TransferReason.buildLookup(bean.getPriorTransferReason());
		this.sourceofemergencyreferral = bean.getSourceOfEmergencyReferral() == null ? null : ims.core.vo.lookups.SourceOfEmergencyReferral.buildLookup(bean.getSourceOfEmergencyReferral());
		this.admissioneventdatetime = bean.getAdmissionEventDateTime() == null ? null : bean.getAdmissionEventDateTime().buildDateTime();
		this.dischargeeventdatetime = bean.getDischargeEventDateTime() == null ? null : bean.getDischargeEventDateTime().buildDateTime();
		this.transfereventdatetime = bean.getTransferEventDateTime() == null ? null : bean.getTransferEventDateTime().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.ifInpatientEpisodeVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.ifInpatientEpisodeVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.ifInpatientEpisodeVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("PASEVENTID"))
			return getPasEventId();
		if(fieldName.equals("CONSULTANT"))
			return getConsultant();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("SOURCEOFREFERRAL"))
			return getSourceOfReferral();
		if(fieldName.equals("ISVIP"))
			return getIsVip();
		if(fieldName.equals("REFERRINGGP"))
			return getReferringGP();
		if(fieldName.equals("EVENTTYPE"))
			return getEventType();
		if(fieldName.equals("PASEPISODEID"))
			return getPasEpisodeId();
		if(fieldName.equals("EPISODEFINANCIALCLASS"))
			return getEpisodeFinancialClass();
		if(fieldName.equals("ATTENDINGHCP"))
			return getAttendingHCP();
		if(fieldName.equals("POINTOFCARE"))
			return getPointOfCare();
		if(fieldName.equals("BEDNO"))
			return getBedNo();
		if(fieldName.equals("FACILITY"))
			return getFacility();
		if(fieldName.equals("LOCATIONDESCRIPTION"))
			return getLocationDescription();
		if(fieldName.equals("HOSPITALSERVICE"))
			return getHospitalService();
		if(fieldName.equals("ADMITSOURCE"))
			return getAdmitSource();
		if(fieldName.equals("PATIENTTYPE"))
			return getPatientType();
		if(fieldName.equals("ISCHAPLAINREQUIRED"))
			return getIsChaplainRequired();
		if(fieldName.equals("TCITYPE"))
			return getTCIType();
		if(fieldName.equals("ADMISSIONDATETIME"))
			return getAdmissionDateTime();
		if(fieldName.equals("WARDTYPE"))
			return getWardType();
		if(fieldName.equals("ADMISSIONREASON"))
			return getAdmissionReason();
		if(fieldName.equals("DISCHARGEDISPOSITION"))
			return getDischargeDisposition();
		if(fieldName.equals("DISCHARGEDESTINATION"))
			return getDischargeDestination();
		if(fieldName.equals("DISCHARGEDATETIME"))
			return getDischargeDateTime();
		if(fieldName.equals("EXPECTEDLOARETURNDATETIME"))
			return getExpectedLOAReturnDateTime();
		if(fieldName.equals("PRIORPOINTOFCARE"))
			return getPriorPointOfCare();
		if(fieldName.equals("PRIORBEDNO"))
			return getPriorBedNo();
		if(fieldName.equals("PRIORFACILTY"))
			return getPriorFacilty();
		if(fieldName.equals("PRIORLOCATIONDESCRIPTION"))
			return getPriorLocationDescription();
		if(fieldName.equals("PREADMISSIONNUMBER"))
			return getPreadmissionNumber();
		if(fieldName.equals("DATETIMEONHOMELEAVE"))
			return getDateTimeOnHomeLeave();
		if(fieldName.equals("METHODOFADMISSION"))
			return getMethodOfAdmission();
		if(fieldName.equals("WARDLOCATION"))
			return getWardLocation();
		if(fieldName.equals("PRIORWARDLOCATION"))
			return getPriorWardLocation();
		if(fieldName.equals("ELECTIVEADMISSIONTYPE"))
			return getElectiveAdmissionType();
		if(fieldName.equals("PENDINGTRANSFER"))
			return getPendingTransfer();
		if(fieldName.equals("ESTLENGTHOFSTAY"))
			return getEstLengthOfStay();
		if(fieldName.equals("BEDSPACESTATEBAY"))
			return getBedSpaceStateBay();
		if(fieldName.equals("EXPECTEDDISCHARGEDATETIME"))
			return getExpectedDischargeDateTime();
		if(fieldName.equals("METHODOFDISCHARGE"))
			return getMethodOfDischarge();
		if(fieldName.equals("CURRENTWARDSTAYADMISSIONDATETIME"))
			return getCurrentWardStayAdmissionDateTime();
		if(fieldName.equals("PRIORTRANSFERREASON"))
			return getPriorTransferReason();
		if(fieldName.equals("SOURCEOFEMERGENCYREFERRAL"))
			return getSourceOfEmergencyReferral();
		if(fieldName.equals("ADMISSIONEVENTDATETIME"))
			return getAdmissionEventDateTime();
		if(fieldName.equals("DISCHARGEEVENTDATETIME"))
			return getDischargeEventDateTime();
		if(fieldName.equals("TRANSFEREVENTDATETIME"))
			return getTransferEventDateTime();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.Patient getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.Patient value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getPasEventIdIsNotNull()
	{
		return this.paseventid != null;
	}
	public String getPasEventId()
	{
		return this.paseventid;
	}
	public static int getPasEventIdMaxLength()
	{
		return 100;
	}
	public void setPasEventId(String value)
	{
		this.isValidated = false;
		this.paseventid = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public ims.core.vo.MedicWithMappingsLiteVo getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(ims.core.vo.MedicWithMappingsLiteVo value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getSourceOfReferralIsNotNull()
	{
		return this.sourceofreferral != null;
	}
	public ims.core.vo.lookups.SourceOfReferral getSourceOfReferral()
	{
		return this.sourceofreferral;
	}
	public void setSourceOfReferral(ims.core.vo.lookups.SourceOfReferral value)
	{
		this.isValidated = false;
		this.sourceofreferral = value;
	}
	public boolean getIsVipIsNotNull()
	{
		return this.isvip != null;
	}
	public Boolean getIsVip()
	{
		return this.isvip;
	}
	public void setIsVip(Boolean value)
	{
		this.isValidated = false;
		this.isvip = value;
	}
	public boolean getReferringGPIsNotNull()
	{
		return this.referringgp != null;
	}
	public ims.core.vo.GpLiteVo getReferringGP()
	{
		return this.referringgp;
	}
	public void setReferringGP(ims.core.vo.GpLiteVo value)
	{
		this.isValidated = false;
		this.referringgp = value;
	}
	public boolean getEventTypeIsNotNull()
	{
		return this.eventtype != null;
	}
	public ims.core.vo.lookups.PasEventType getEventType()
	{
		return this.eventtype;
	}
	public void setEventType(ims.core.vo.lookups.PasEventType value)
	{
		this.isValidated = false;
		this.eventtype = value;
	}
	public boolean getPasEpisodeIdIsNotNull()
	{
		return this.pasepisodeid != null;
	}
	public String getPasEpisodeId()
	{
		return this.pasepisodeid;
	}
	public static int getPasEpisodeIdMaxLength()
	{
		return 100;
	}
	public void setPasEpisodeId(String value)
	{
		this.isValidated = false;
		this.pasepisodeid = value;
	}
	public boolean getEpisodeFinancialClassIsNotNull()
	{
		return this.episodefinancialclass != null;
	}
	public ims.ocrr.vo.lookups.OrderCategory getEpisodeFinancialClass()
	{
		return this.episodefinancialclass;
	}
	public void setEpisodeFinancialClass(ims.ocrr.vo.lookups.OrderCategory value)
	{
		this.isValidated = false;
		this.episodefinancialclass = value;
	}
	public boolean getAttendingHCPIsNotNull()
	{
		return this.attendinghcp != null;
	}
	public ims.core.vo.Hcp getAttendingHCP()
	{
		return this.attendinghcp;
	}
	public void setAttendingHCP(ims.core.vo.Hcp value)
	{
		this.isValidated = false;
		this.attendinghcp = value;
	}
	public boolean getPointOfCareIsNotNull()
	{
		return this.pointofcare != null;
	}
	public String getPointOfCare()
	{
		return this.pointofcare;
	}
	public static int getPointOfCareMaxLength()
	{
		return 255;
	}
	public void setPointOfCare(String value)
	{
		this.isValidated = false;
		this.pointofcare = value;
	}
	public boolean getBedNoIsNotNull()
	{
		return this.bedno != null;
	}
	public String getBedNo()
	{
		return this.bedno;
	}
	public static int getBedNoMaxLength()
	{
		return 255;
	}
	public void setBedNo(String value)
	{
		this.isValidated = false;
		this.bedno = value;
	}
	public boolean getFacilityIsNotNull()
	{
		return this.facility != null;
	}
	public String getFacility()
	{
		return this.facility;
	}
	public static int getFacilityMaxLength()
	{
		return 255;
	}
	public void setFacility(String value)
	{
		this.isValidated = false;
		this.facility = value;
	}
	public boolean getLocationDescriptionIsNotNull()
	{
		return this.locationdescription != null;
	}
	public String getLocationDescription()
	{
		return this.locationdescription;
	}
	public static int getLocationDescriptionMaxLength()
	{
		return 255;
	}
	public void setLocationDescription(String value)
	{
		this.isValidated = false;
		this.locationdescription = value;
	}
	public boolean getHospitalServiceIsNotNull()
	{
		return this.hospitalservice != null;
	}
	public String getHospitalService()
	{
		return this.hospitalservice;
	}
	public static int getHospitalServiceMaxLength()
	{
		return 255;
	}
	public void setHospitalService(String value)
	{
		this.isValidated = false;
		this.hospitalservice = value;
	}
	public boolean getAdmitSourceIsNotNull()
	{
		return this.admitsource != null;
	}
	public ims.core.vo.lookups.SourceOfAdmission getAdmitSource()
	{
		return this.admitsource;
	}
	public void setAdmitSource(ims.core.vo.lookups.SourceOfAdmission value)
	{
		this.isValidated = false;
		this.admitsource = value;
	}
	public boolean getPatientTypeIsNotNull()
	{
		return this.patienttype != null;
	}
	public ims.core.vo.lookups.PatientStatus getPatientType()
	{
		return this.patienttype;
	}
	public void setPatientType(ims.core.vo.lookups.PatientStatus value)
	{
		this.isValidated = false;
		this.patienttype = value;
	}
	public boolean getIsChaplainRequiredIsNotNull()
	{
		return this.ischaplainrequired != null;
	}
	public Boolean getIsChaplainRequired()
	{
		return this.ischaplainrequired;
	}
	public void setIsChaplainRequired(Boolean value)
	{
		this.isValidated = false;
		this.ischaplainrequired = value;
	}
	public boolean getTCITypeIsNotNull()
	{
		return this.tcitype != null;
	}
	public ims.core.vo.lookups.TCIType getTCIType()
	{
		return this.tcitype;
	}
	public void setTCIType(ims.core.vo.lookups.TCIType value)
	{
		this.isValidated = false;
		this.tcitype = value;
	}
	public boolean getAdmissionDateTimeIsNotNull()
	{
		return this.admissiondatetime != null;
	}
	public ims.framework.utils.DateTime getAdmissionDateTime()
	{
		return this.admissiondatetime;
	}
	public void setAdmissionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admissiondatetime = value;
	}
	public boolean getWardTypeIsNotNull()
	{
		return this.wardtype != null;
	}
	public ims.core.vo.lookups.WardType getWardType()
	{
		return this.wardtype;
	}
	public void setWardType(ims.core.vo.lookups.WardType value)
	{
		this.isValidated = false;
		this.wardtype = value;
	}
	public boolean getAdmissionReasonIsNotNull()
	{
		return this.admissionreason != null;
	}
	public String getAdmissionReason()
	{
		return this.admissionreason;
	}
	public static int getAdmissionReasonMaxLength()
	{
		return 255;
	}
	public void setAdmissionReason(String value)
	{
		this.isValidated = false;
		this.admissionreason = value;
	}
	public boolean getDischargeDispositionIsNotNull()
	{
		return this.dischargedisposition != null;
	}
	public ims.core.vo.lookups.DischargeReason getDischargeDisposition()
	{
		return this.dischargedisposition;
	}
	public void setDischargeDisposition(ims.core.vo.lookups.DischargeReason value)
	{
		this.isValidated = false;
		this.dischargedisposition = value;
	}
	public boolean getDischargeDestinationIsNotNull()
	{
		return this.dischargedestination != null;
	}
	public ims.coe.vo.lookups.DischargeDestination getDischargeDestination()
	{
		return this.dischargedestination;
	}
	public void setDischargeDestination(ims.coe.vo.lookups.DischargeDestination value)
	{
		this.isValidated = false;
		this.dischargedestination = value;
	}
	public boolean getDischargeDateTimeIsNotNull()
	{
		return this.dischargedatetime != null;
	}
	public ims.framework.utils.DateTime getDischargeDateTime()
	{
		return this.dischargedatetime;
	}
	public void setDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dischargedatetime = value;
	}
	public boolean getExpectedLOAReturnDateTimeIsNotNull()
	{
		return this.expectedloareturndatetime != null;
	}
	public ims.framework.utils.DateTime getExpectedLOAReturnDateTime()
	{
		return this.expectedloareturndatetime;
	}
	public void setExpectedLOAReturnDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.expectedloareturndatetime = value;
	}
	public boolean getPriorPointOfCareIsNotNull()
	{
		return this.priorpointofcare != null;
	}
	public String getPriorPointOfCare()
	{
		return this.priorpointofcare;
	}
	public static int getPriorPointOfCareMaxLength()
	{
		return 255;
	}
	public void setPriorPointOfCare(String value)
	{
		this.isValidated = false;
		this.priorpointofcare = value;
	}
	public boolean getPriorBedNoIsNotNull()
	{
		return this.priorbedno != null;
	}
	public String getPriorBedNo()
	{
		return this.priorbedno;
	}
	public static int getPriorBedNoMaxLength()
	{
		return 255;
	}
	public void setPriorBedNo(String value)
	{
		this.isValidated = false;
		this.priorbedno = value;
	}
	public boolean getPriorFaciltyIsNotNull()
	{
		return this.priorfacilty != null;
	}
	public String getPriorFacilty()
	{
		return this.priorfacilty;
	}
	public static int getPriorFaciltyMaxLength()
	{
		return 255;
	}
	public void setPriorFacilty(String value)
	{
		this.isValidated = false;
		this.priorfacilty = value;
	}
	public boolean getPriorLocationDescriptionIsNotNull()
	{
		return this.priorlocationdescription != null;
	}
	public String getPriorLocationDescription()
	{
		return this.priorlocationdescription;
	}
	public static int getPriorLocationDescriptionMaxLength()
	{
		return 255;
	}
	public void setPriorLocationDescription(String value)
	{
		this.isValidated = false;
		this.priorlocationdescription = value;
	}
	public boolean getPreadmissionNumberIsNotNull()
	{
		return this.preadmissionnumber != null;
	}
	public String getPreadmissionNumber()
	{
		return this.preadmissionnumber;
	}
	public static int getPreadmissionNumberMaxLength()
	{
		return 255;
	}
	public void setPreadmissionNumber(String value)
	{
		this.isValidated = false;
		this.preadmissionnumber = value;
	}
	public boolean getDateTimeOnHomeLeaveIsNotNull()
	{
		return this.datetimeonhomeleave != null;
	}
	public ims.framework.utils.DateTime getDateTimeOnHomeLeave()
	{
		return this.datetimeonhomeleave;
	}
	public void setDateTimeOnHomeLeave(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.datetimeonhomeleave = value;
	}
	public boolean getMethodOfAdmissionIsNotNull()
	{
		return this.methodofadmission != null;
	}
	public ims.core.vo.lookups.MethodOfAdmission getMethodOfAdmission()
	{
		return this.methodofadmission;
	}
	public void setMethodOfAdmission(ims.core.vo.lookups.MethodOfAdmission value)
	{
		this.isValidated = false;
		this.methodofadmission = value;
	}
	public boolean getWardLocationIsNotNull()
	{
		return this.wardlocation != null;
	}
	public ims.core.vo.LocMostVo getWardLocation()
	{
		return this.wardlocation;
	}
	public void setWardLocation(ims.core.vo.LocMostVo value)
	{
		this.isValidated = false;
		this.wardlocation = value;
	}
	public boolean getPriorWardLocationIsNotNull()
	{
		return this.priorwardlocation != null;
	}
	public ims.core.vo.LocMostVo getPriorWardLocation()
	{
		return this.priorwardlocation;
	}
	public void setPriorWardLocation(ims.core.vo.LocMostVo value)
	{
		this.isValidated = false;
		this.priorwardlocation = value;
	}
	public boolean getElectiveAdmissionTypeIsNotNull()
	{
		return this.electiveadmissiontype != null;
	}
	public ims.RefMan.vo.lookups.ElectiveAdmissionType getElectiveAdmissionType()
	{
		return this.electiveadmissiontype;
	}
	public void setElectiveAdmissionType(ims.RefMan.vo.lookups.ElectiveAdmissionType value)
	{
		this.isValidated = false;
		this.electiveadmissiontype = value;
	}
	public boolean getPendingTransferIsNotNull()
	{
		return this.pendingtransfer != null;
	}
	public ims.core.vo.ifPendingTransferVo getPendingTransfer()
	{
		return this.pendingtransfer;
	}
	public void setPendingTransfer(ims.core.vo.ifPendingTransferVo value)
	{
		this.isValidated = false;
		this.pendingtransfer = value;
	}
	public boolean getEstLengthOfStayIsNotNull()
	{
		return this.estlengthofstay != null;
	}
	public Integer getEstLengthOfStay()
	{
		return this.estlengthofstay;
	}
	public void setEstLengthOfStay(Integer value)
	{
		this.isValidated = false;
		this.estlengthofstay = value;
	}
	public boolean getBedSpaceStateBayIsNotNull()
	{
		return this.bedspacestatebay != null;
	}
	public ims.core.vo.LocShortMappingsVo getBedSpaceStateBay()
	{
		return this.bedspacestatebay;
	}
	public void setBedSpaceStateBay(ims.core.vo.LocShortMappingsVo value)
	{
		this.isValidated = false;
		this.bedspacestatebay = value;
	}
	public boolean getExpectedDischargeDateTimeIsNotNull()
	{
		return this.expecteddischargedatetime != null;
	}
	public ims.framework.utils.DateTime getExpectedDischargeDateTime()
	{
		return this.expecteddischargedatetime;
	}
	public void setExpectedDischargeDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.expecteddischargedatetime = value;
	}
	public boolean getMethodOfDischargeIsNotNull()
	{
		return this.methodofdischarge != null;
	}
	public ims.core.vo.lookups.MethodOfDischarge getMethodOfDischarge()
	{
		return this.methodofdischarge;
	}
	public void setMethodOfDischarge(ims.core.vo.lookups.MethodOfDischarge value)
	{
		this.isValidated = false;
		this.methodofdischarge = value;
	}
	public boolean getCurrentWardStayAdmissionDateTimeIsNotNull()
	{
		return this.currentwardstayadmissiondatetime != null;
	}
	public ims.framework.utils.DateTime getCurrentWardStayAdmissionDateTime()
	{
		return this.currentwardstayadmissiondatetime;
	}
	public void setCurrentWardStayAdmissionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.currentwardstayadmissiondatetime = value;
	}
	public boolean getPriorTransferReasonIsNotNull()
	{
		return this.priortransferreason != null;
	}
	public ims.core.vo.lookups.TransferReason getPriorTransferReason()
	{
		return this.priortransferreason;
	}
	public void setPriorTransferReason(ims.core.vo.lookups.TransferReason value)
	{
		this.isValidated = false;
		this.priortransferreason = value;
	}
	public boolean getSourceOfEmergencyReferralIsNotNull()
	{
		return this.sourceofemergencyreferral != null;
	}
	public ims.core.vo.lookups.SourceOfEmergencyReferral getSourceOfEmergencyReferral()
	{
		return this.sourceofemergencyreferral;
	}
	public void setSourceOfEmergencyReferral(ims.core.vo.lookups.SourceOfEmergencyReferral value)
	{
		this.isValidated = false;
		this.sourceofemergencyreferral = value;
	}
	public boolean getAdmissionEventDateTimeIsNotNull()
	{
		return this.admissioneventdatetime != null;
	}
	public ims.framework.utils.DateTime getAdmissionEventDateTime()
	{
		return this.admissioneventdatetime;
	}
	public void setAdmissionEventDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admissioneventdatetime = value;
	}
	public boolean getDischargeEventDateTimeIsNotNull()
	{
		return this.dischargeeventdatetime != null;
	}
	public ims.framework.utils.DateTime getDischargeEventDateTime()
	{
		return this.dischargeeventdatetime;
	}
	public void setDischargeEventDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dischargeeventdatetime = value;
	}
	public boolean getTransferEventDateTimeIsNotNull()
	{
		return this.transfereventdatetime != null;
	}
	public ims.framework.utils.DateTime getTransferEventDateTime()
	{
		return this.transfereventdatetime;
	}
	public void setTransferEventDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.transfereventdatetime = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("patient is mandatory");
		if(this.paseventid != null)
			if(this.paseventid.length() > 100)
				listOfErrors.add("The length of the field [paseventid] in the value object [ims.core.vo.ifInpatientEpisodeVo] is too big. It should be less or equal to 100");
		if(this.pasepisodeid != null)
			if(this.pasepisodeid.length() > 100)
				listOfErrors.add("The length of the field [pasepisodeid] in the value object [ims.core.vo.ifInpatientEpisodeVo] is too big. It should be less or equal to 100");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ifInpatientEpisodeVo clone = new ifInpatientEpisodeVo(this.id, this.version);
		
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.Patient)this.patient.clone();
		clone.paseventid = this.paseventid;
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.MedicWithMappingsLiteVo)this.consultant.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.sourceofreferral == null)
			clone.sourceofreferral = null;
		else
			clone.sourceofreferral = (ims.core.vo.lookups.SourceOfReferral)this.sourceofreferral.clone();
		clone.isvip = this.isvip;
		if(this.referringgp == null)
			clone.referringgp = null;
		else
			clone.referringgp = (ims.core.vo.GpLiteVo)this.referringgp.clone();
		if(this.eventtype == null)
			clone.eventtype = null;
		else
			clone.eventtype = (ims.core.vo.lookups.PasEventType)this.eventtype.clone();
		clone.pasepisodeid = this.pasepisodeid;
		if(this.episodefinancialclass == null)
			clone.episodefinancialclass = null;
		else
			clone.episodefinancialclass = (ims.ocrr.vo.lookups.OrderCategory)this.episodefinancialclass.clone();
		if(this.attendinghcp == null)
			clone.attendinghcp = null;
		else
			clone.attendinghcp = (ims.core.vo.Hcp)this.attendinghcp.clone();
		clone.pointofcare = this.pointofcare;
		clone.bedno = this.bedno;
		clone.facility = this.facility;
		clone.locationdescription = this.locationdescription;
		clone.hospitalservice = this.hospitalservice;
		if(this.admitsource == null)
			clone.admitsource = null;
		else
			clone.admitsource = (ims.core.vo.lookups.SourceOfAdmission)this.admitsource.clone();
		if(this.patienttype == null)
			clone.patienttype = null;
		else
			clone.patienttype = (ims.core.vo.lookups.PatientStatus)this.patienttype.clone();
		clone.ischaplainrequired = this.ischaplainrequired;
		if(this.tcitype == null)
			clone.tcitype = null;
		else
			clone.tcitype = (ims.core.vo.lookups.TCIType)this.tcitype.clone();
		if(this.admissiondatetime == null)
			clone.admissiondatetime = null;
		else
			clone.admissiondatetime = (ims.framework.utils.DateTime)this.admissiondatetime.clone();
		if(this.wardtype == null)
			clone.wardtype = null;
		else
			clone.wardtype = (ims.core.vo.lookups.WardType)this.wardtype.clone();
		clone.admissionreason = this.admissionreason;
		if(this.dischargedisposition == null)
			clone.dischargedisposition = null;
		else
			clone.dischargedisposition = (ims.core.vo.lookups.DischargeReason)this.dischargedisposition.clone();
		if(this.dischargedestination == null)
			clone.dischargedestination = null;
		else
			clone.dischargedestination = (ims.coe.vo.lookups.DischargeDestination)this.dischargedestination.clone();
		if(this.dischargedatetime == null)
			clone.dischargedatetime = null;
		else
			clone.dischargedatetime = (ims.framework.utils.DateTime)this.dischargedatetime.clone();
		if(this.expectedloareturndatetime == null)
			clone.expectedloareturndatetime = null;
		else
			clone.expectedloareturndatetime = (ims.framework.utils.DateTime)this.expectedloareturndatetime.clone();
		clone.priorpointofcare = this.priorpointofcare;
		clone.priorbedno = this.priorbedno;
		clone.priorfacilty = this.priorfacilty;
		clone.priorlocationdescription = this.priorlocationdescription;
		clone.preadmissionnumber = this.preadmissionnumber;
		if(this.datetimeonhomeleave == null)
			clone.datetimeonhomeleave = null;
		else
			clone.datetimeonhomeleave = (ims.framework.utils.DateTime)this.datetimeonhomeleave.clone();
		if(this.methodofadmission == null)
			clone.methodofadmission = null;
		else
			clone.methodofadmission = (ims.core.vo.lookups.MethodOfAdmission)this.methodofadmission.clone();
		if(this.wardlocation == null)
			clone.wardlocation = null;
		else
			clone.wardlocation = (ims.core.vo.LocMostVo)this.wardlocation.clone();
		if(this.priorwardlocation == null)
			clone.priorwardlocation = null;
		else
			clone.priorwardlocation = (ims.core.vo.LocMostVo)this.priorwardlocation.clone();
		if(this.electiveadmissiontype == null)
			clone.electiveadmissiontype = null;
		else
			clone.electiveadmissiontype = (ims.RefMan.vo.lookups.ElectiveAdmissionType)this.electiveadmissiontype.clone();
		if(this.pendingtransfer == null)
			clone.pendingtransfer = null;
		else
			clone.pendingtransfer = (ims.core.vo.ifPendingTransferVo)this.pendingtransfer.clone();
		clone.estlengthofstay = this.estlengthofstay;
		if(this.bedspacestatebay == null)
			clone.bedspacestatebay = null;
		else
			clone.bedspacestatebay = (ims.core.vo.LocShortMappingsVo)this.bedspacestatebay.clone();
		if(this.expecteddischargedatetime == null)
			clone.expecteddischargedatetime = null;
		else
			clone.expecteddischargedatetime = (ims.framework.utils.DateTime)this.expecteddischargedatetime.clone();
		if(this.methodofdischarge == null)
			clone.methodofdischarge = null;
		else
			clone.methodofdischarge = (ims.core.vo.lookups.MethodOfDischarge)this.methodofdischarge.clone();
		if(this.currentwardstayadmissiondatetime == null)
			clone.currentwardstayadmissiondatetime = null;
		else
			clone.currentwardstayadmissiondatetime = (ims.framework.utils.DateTime)this.currentwardstayadmissiondatetime.clone();
		if(this.priortransferreason == null)
			clone.priortransferreason = null;
		else
			clone.priortransferreason = (ims.core.vo.lookups.TransferReason)this.priortransferreason.clone();
		if(this.sourceofemergencyreferral == null)
			clone.sourceofemergencyreferral = null;
		else
			clone.sourceofemergencyreferral = (ims.core.vo.lookups.SourceOfEmergencyReferral)this.sourceofemergencyreferral.clone();
		if(this.admissioneventdatetime == null)
			clone.admissioneventdatetime = null;
		else
			clone.admissioneventdatetime = (ims.framework.utils.DateTime)this.admissioneventdatetime.clone();
		if(this.dischargeeventdatetime == null)
			clone.dischargeeventdatetime = null;
		else
			clone.dischargeeventdatetime = (ims.framework.utils.DateTime)this.dischargeeventdatetime.clone();
		if(this.transfereventdatetime == null)
			clone.transfereventdatetime = null;
		else
			clone.transfereventdatetime = (ims.framework.utils.DateTime)this.transfereventdatetime.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ifInpatientEpisodeVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ifInpatientEpisodeVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ifInpatientEpisodeVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ifInpatientEpisodeVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.paseventid != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.sourceofreferral != null)
			count++;
		if(this.isvip != null)
			count++;
		if(this.referringgp != null)
			count++;
		if(this.eventtype != null)
			count++;
		if(this.pasepisodeid != null)
			count++;
		if(this.episodefinancialclass != null)
			count++;
		if(this.attendinghcp != null)
			count++;
		if(this.pointofcare != null)
			count++;
		if(this.bedno != null)
			count++;
		if(this.facility != null)
			count++;
		if(this.locationdescription != null)
			count++;
		if(this.hospitalservice != null)
			count++;
		if(this.admitsource != null)
			count++;
		if(this.patienttype != null)
			count++;
		if(this.ischaplainrequired != null)
			count++;
		if(this.tcitype != null)
			count++;
		if(this.admissiondatetime != null)
			count++;
		if(this.wardtype != null)
			count++;
		if(this.admissionreason != null)
			count++;
		if(this.dischargedisposition != null)
			count++;
		if(this.dischargedestination != null)
			count++;
		if(this.dischargedatetime != null)
			count++;
		if(this.expectedloareturndatetime != null)
			count++;
		if(this.priorpointofcare != null)
			count++;
		if(this.priorbedno != null)
			count++;
		if(this.priorfacilty != null)
			count++;
		if(this.priorlocationdescription != null)
			count++;
		if(this.preadmissionnumber != null)
			count++;
		if(this.datetimeonhomeleave != null)
			count++;
		if(this.methodofadmission != null)
			count++;
		if(this.wardlocation != null)
			count++;
		if(this.priorwardlocation != null)
			count++;
		if(this.electiveadmissiontype != null)
			count++;
		if(this.pendingtransfer != null)
			count++;
		if(this.estlengthofstay != null)
			count++;
		if(this.bedspacestatebay != null)
			count++;
		if(this.expecteddischargedatetime != null)
			count++;
		if(this.methodofdischarge != null)
			count++;
		if(this.currentwardstayadmissiondatetime != null)
			count++;
		if(this.priortransferreason != null)
			count++;
		if(this.sourceofemergencyreferral != null)
			count++;
		if(this.admissioneventdatetime != null)
			count++;
		if(this.dischargeeventdatetime != null)
			count++;
		if(this.transfereventdatetime != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 48;
	}
	protected ims.core.vo.Patient patient;
	protected String paseventid;
	protected ims.core.vo.MedicWithMappingsLiteVo consultant;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.core.vo.lookups.SourceOfReferral sourceofreferral;
	protected Boolean isvip;
	protected ims.core.vo.GpLiteVo referringgp;
	protected ims.core.vo.lookups.PasEventType eventtype;
	protected String pasepisodeid;
	protected ims.ocrr.vo.lookups.OrderCategory episodefinancialclass;
	protected ims.core.vo.Hcp attendinghcp;
	protected String pointofcare;
	protected String bedno;
	protected String facility;
	protected String locationdescription;
	protected String hospitalservice;
	protected ims.core.vo.lookups.SourceOfAdmission admitsource;
	protected ims.core.vo.lookups.PatientStatus patienttype;
	protected Boolean ischaplainrequired;
	protected ims.core.vo.lookups.TCIType tcitype;
	protected ims.framework.utils.DateTime admissiondatetime;
	protected ims.core.vo.lookups.WardType wardtype;
	protected String admissionreason;
	protected ims.core.vo.lookups.DischargeReason dischargedisposition;
	protected ims.coe.vo.lookups.DischargeDestination dischargedestination;
	protected ims.framework.utils.DateTime dischargedatetime;
	protected ims.framework.utils.DateTime expectedloareturndatetime;
	protected String priorpointofcare;
	protected String priorbedno;
	protected String priorfacilty;
	protected String priorlocationdescription;
	protected String preadmissionnumber;
	protected ims.framework.utils.DateTime datetimeonhomeleave;
	protected ims.core.vo.lookups.MethodOfAdmission methodofadmission;
	protected ims.core.vo.LocMostVo wardlocation;
	protected ims.core.vo.LocMostVo priorwardlocation;
	protected ims.RefMan.vo.lookups.ElectiveAdmissionType electiveadmissiontype;
	protected ims.core.vo.ifPendingTransferVo pendingtransfer;
	protected Integer estlengthofstay;
	protected ims.core.vo.LocShortMappingsVo bedspacestatebay;
	protected ims.framework.utils.DateTime expecteddischargedatetime;
	protected ims.core.vo.lookups.MethodOfDischarge methodofdischarge;
	protected ims.framework.utils.DateTime currentwardstayadmissiondatetime;
	protected ims.core.vo.lookups.TransferReason priortransferreason;
	protected ims.core.vo.lookups.SourceOfEmergencyReferral sourceofemergencyreferral;
	protected ims.framework.utils.DateTime admissioneventdatetime;
	protected ims.framework.utils.DateTime dischargeeventdatetime;
	protected ims.framework.utils.DateTime transfereventdatetime;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
