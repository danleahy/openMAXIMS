//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.patient.PDSBatchTraceRequest business object (ID: 1001100020).
 */
public class PDSBatchTraceRequestVo extends ims.core.patient.vo.PDSBatchTraceRequestRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PDSBatchTraceRequestVo()
	{
	}
	public PDSBatchTraceRequestVo(Integer id, int version)
	{
		super(id, version);
	}
	public PDSBatchTraceRequestVo(ims.core.vo.beans.PDSBatchTraceRequestVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.sdsroleprofileid = bean.getSDSRoleProfileId();
		this.sdsuserid = bean.getSDSUserId();
		this.pdsack = bean.getPDSAck() == null ? null : ims.core.vo.lookups.PDSRequestAckStatus.buildLookup(bean.getPDSAck());
		this.pdsackdetailtype = bean.getPDSAckDetailType() == null ? null : ims.core.vo.lookups.PDSAckDetailType.buildLookup(bean.getPDSAckDetailType());
		this.active = bean.getActive();
		this.comment = bean.getComment();
		this.requesttype = bean.getRequestType() == null ? null : ims.core.vo.lookups.PDSAsyncRequestType.buildLookup(bean.getRequestType());
		this.requestdate = bean.getRequestDate() == null ? null : bean.getRequestDate().buildDateTime();
		this.pdsackexception = bean.getPDSAckException();
		this.retrycount = bean.getRetryCount();
		this.convid = bean.getConvId() == null ? null : new ims.choose_book.vo.PDSConvRefVo(new Integer(bean.getConvId().getId()), bean.getConvId().getVersion());
		this.sdsjobrolecode = bean.getSDSJobRoleCode();
		this.pdsbatchtraceitems = ims.core.vo.PDSBatchTraceItemsVoCollection.buildFromBeanCollection(bean.getPDSBatchTraceItems());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PDSBatchTraceRequestVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.sdsroleprofileid = bean.getSDSRoleProfileId();
		this.sdsuserid = bean.getSDSUserId();
		this.pdsack = bean.getPDSAck() == null ? null : ims.core.vo.lookups.PDSRequestAckStatus.buildLookup(bean.getPDSAck());
		this.pdsackdetailtype = bean.getPDSAckDetailType() == null ? null : ims.core.vo.lookups.PDSAckDetailType.buildLookup(bean.getPDSAckDetailType());
		this.active = bean.getActive();
		this.comment = bean.getComment();
		this.requesttype = bean.getRequestType() == null ? null : ims.core.vo.lookups.PDSAsyncRequestType.buildLookup(bean.getRequestType());
		this.requestdate = bean.getRequestDate() == null ? null : bean.getRequestDate().buildDateTime();
		this.pdsackexception = bean.getPDSAckException();
		this.retrycount = bean.getRetryCount();
		this.convid = bean.getConvId() == null ? null : new ims.choose_book.vo.PDSConvRefVo(new Integer(bean.getConvId().getId()), bean.getConvId().getVersion());
		this.sdsjobrolecode = bean.getSDSJobRoleCode();
		this.pdsbatchtraceitems = ims.core.vo.PDSBatchTraceItemsVoCollection.buildFromBeanCollection(bean.getPDSBatchTraceItems());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PDSBatchTraceRequestVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PDSBatchTraceRequestVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PDSBatchTraceRequestVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("SDSROLEPROFILEID"))
			return getSDSRoleProfileId();
		if(fieldName.equals("SDSUSERID"))
			return getSDSUserId();
		if(fieldName.equals("PDSACK"))
			return getPDSAck();
		if(fieldName.equals("PDSACKDETAILTYPE"))
			return getPDSAckDetailType();
		if(fieldName.equals("ACTIVE"))
			return getActive();
		if(fieldName.equals("COMMENT"))
			return getComment();
		if(fieldName.equals("REQUESTTYPE"))
			return getRequestType();
		if(fieldName.equals("REQUESTDATE"))
			return getRequestDate();
		if(fieldName.equals("PDSACKEXCEPTION"))
			return getPDSAckException();
		if(fieldName.equals("RETRYCOUNT"))
			return getRetryCount();
		if(fieldName.equals("CONVID"))
			return getConvId();
		if(fieldName.equals("SDSJOBROLECODE"))
			return getSDSJobRoleCode();
		if(fieldName.equals("PDSBATCHTRACEITEMS"))
			return getPDSBatchTraceItems();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getSDSRoleProfileIdIsNotNull()
	{
		return this.sdsroleprofileid != null;
	}
	public String getSDSRoleProfileId()
	{
		return this.sdsroleprofileid;
	}
	public static int getSDSRoleProfileIdMaxLength()
	{
		return 50;
	}
	public void setSDSRoleProfileId(String value)
	{
		this.isValidated = false;
		this.sdsroleprofileid = value;
	}
	public boolean getSDSUserIdIsNotNull()
	{
		return this.sdsuserid != null;
	}
	public String getSDSUserId()
	{
		return this.sdsuserid;
	}
	public static int getSDSUserIdMaxLength()
	{
		return 50;
	}
	public void setSDSUserId(String value)
	{
		this.isValidated = false;
		this.sdsuserid = value;
	}
	public boolean getPDSAckIsNotNull()
	{
		return this.pdsack != null;
	}
	public ims.core.vo.lookups.PDSRequestAckStatus getPDSAck()
	{
		return this.pdsack;
	}
	public void setPDSAck(ims.core.vo.lookups.PDSRequestAckStatus value)
	{
		this.isValidated = false;
		this.pdsack = value;
	}
	public boolean getPDSAckDetailTypeIsNotNull()
	{
		return this.pdsackdetailtype != null;
	}
	public ims.core.vo.lookups.PDSAckDetailType getPDSAckDetailType()
	{
		return this.pdsackdetailtype;
	}
	public void setPDSAckDetailType(ims.core.vo.lookups.PDSAckDetailType value)
	{
		this.isValidated = false;
		this.pdsackdetailtype = value;
	}
	public boolean getActiveIsNotNull()
	{
		return this.active != null;
	}
	public Boolean getActive()
	{
		return this.active;
	}
	public void setActive(Boolean value)
	{
		this.isValidated = false;
		this.active = value;
	}
	public boolean getCommentIsNotNull()
	{
		return this.comment != null;
	}
	public String getComment()
	{
		return this.comment;
	}
	public static int getCommentMaxLength()
	{
		return 200;
	}
	public void setComment(String value)
	{
		this.isValidated = false;
		this.comment = value;
	}
	public boolean getRequestTypeIsNotNull()
	{
		return this.requesttype != null;
	}
	public ims.core.vo.lookups.PDSAsyncRequestType getRequestType()
	{
		return this.requesttype;
	}
	public void setRequestType(ims.core.vo.lookups.PDSAsyncRequestType value)
	{
		this.isValidated = false;
		this.requesttype = value;
	}
	public boolean getRequestDateIsNotNull()
	{
		return this.requestdate != null;
	}
	public ims.framework.utils.DateTime getRequestDate()
	{
		return this.requestdate;
	}
	public void setRequestDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.requestdate = value;
	}
	public boolean getPDSAckExceptionIsNotNull()
	{
		return this.pdsackexception != null;
	}
	public String getPDSAckException()
	{
		return this.pdsackexception;
	}
	public static int getPDSAckExceptionMaxLength()
	{
		return 200;
	}
	public void setPDSAckException(String value)
	{
		this.isValidated = false;
		this.pdsackexception = value;
	}
	public boolean getRetryCountIsNotNull()
	{
		return this.retrycount != null;
	}
	public Integer getRetryCount()
	{
		return this.retrycount;
	}
	public void setRetryCount(Integer value)
	{
		this.isValidated = false;
		this.retrycount = value;
	}
	public boolean getConvIdIsNotNull()
	{
		return this.convid != null;
	}
	public ims.choose_book.vo.PDSConvRefVo getConvId()
	{
		return this.convid;
	}
	public void setConvId(ims.choose_book.vo.PDSConvRefVo value)
	{
		this.isValidated = false;
		this.convid = value;
	}
	public boolean getSDSJobRoleCodeIsNotNull()
	{
		return this.sdsjobrolecode != null;
	}
	public String getSDSJobRoleCode()
	{
		return this.sdsjobrolecode;
	}
	public static int getSDSJobRoleCodeMaxLength()
	{
		return 20;
	}
	public void setSDSJobRoleCode(String value)
	{
		this.isValidated = false;
		this.sdsjobrolecode = value;
	}
	public boolean getPDSBatchTraceItemsIsNotNull()
	{
		return this.pdsbatchtraceitems != null;
	}
	public ims.core.vo.PDSBatchTraceItemsVoCollection getPDSBatchTraceItems()
	{
		return this.pdsbatchtraceitems;
	}
	public void setPDSBatchTraceItems(ims.core.vo.PDSBatchTraceItemsVoCollection value)
	{
		this.isValidated = false;
		this.pdsbatchtraceitems = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.sdsroleprofileid != null)
			if(this.sdsroleprofileid.length() > 50)
				listOfErrors.add("The length of the field [sdsroleprofileid] in the value object [ims.core.vo.PDSBatchTraceRequestVo] is too big. It should be less or equal to 50");
		if(this.sdsuserid != null)
			if(this.sdsuserid.length() > 50)
				listOfErrors.add("The length of the field [sdsuserid] in the value object [ims.core.vo.PDSBatchTraceRequestVo] is too big. It should be less or equal to 50");
		if(this.comment != null)
			if(this.comment.length() > 200)
				listOfErrors.add("The length of the field [comment] in the value object [ims.core.vo.PDSBatchTraceRequestVo] is too big. It should be less or equal to 200");
		if(this.requesttype == null)
			listOfErrors.add("requestType is mandatory");
		if(this.requestdate == null)
			listOfErrors.add("requestDate is mandatory");
		if(this.pdsackexception != null)
			if(this.pdsackexception.length() > 200)
				listOfErrors.add("The length of the field [pdsackexception] in the value object [ims.core.vo.PDSBatchTraceRequestVo] is too big. It should be less or equal to 200");
		if(this.sdsjobrolecode != null)
			if(this.sdsjobrolecode.length() > 20)
				listOfErrors.add("The length of the field [sdsjobrolecode] in the value object [ims.core.vo.PDSBatchTraceRequestVo] is too big. It should be less or equal to 20");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PDSBatchTraceRequestVo clone = new PDSBatchTraceRequestVo(this.id, this.version);
		
		clone.sdsroleprofileid = this.sdsroleprofileid;
		clone.sdsuserid = this.sdsuserid;
		if(this.pdsack == null)
			clone.pdsack = null;
		else
			clone.pdsack = (ims.core.vo.lookups.PDSRequestAckStatus)this.pdsack.clone();
		if(this.pdsackdetailtype == null)
			clone.pdsackdetailtype = null;
		else
			clone.pdsackdetailtype = (ims.core.vo.lookups.PDSAckDetailType)this.pdsackdetailtype.clone();
		clone.active = this.active;
		clone.comment = this.comment;
		if(this.requesttype == null)
			clone.requesttype = null;
		else
			clone.requesttype = (ims.core.vo.lookups.PDSAsyncRequestType)this.requesttype.clone();
		if(this.requestdate == null)
			clone.requestdate = null;
		else
			clone.requestdate = (ims.framework.utils.DateTime)this.requestdate.clone();
		clone.pdsackexception = this.pdsackexception;
		clone.retrycount = this.retrycount;
		clone.convid = this.convid;
		clone.sdsjobrolecode = this.sdsjobrolecode;
		if(this.pdsbatchtraceitems == null)
			clone.pdsbatchtraceitems = null;
		else
			clone.pdsbatchtraceitems = (ims.core.vo.PDSBatchTraceItemsVoCollection)this.pdsbatchtraceitems.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PDSBatchTraceRequestVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PDSBatchTraceRequestVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PDSBatchTraceRequestVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PDSBatchTraceRequestVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.sdsroleprofileid != null)
			count++;
		if(this.sdsuserid != null)
			count++;
		if(this.pdsack != null)
			count++;
		if(this.pdsackdetailtype != null)
			count++;
		if(this.active != null)
			count++;
		if(this.comment != null)
			count++;
		if(this.requesttype != null)
			count++;
		if(this.requestdate != null)
			count++;
		if(this.pdsackexception != null)
			count++;
		if(this.retrycount != null)
			count++;
		if(this.convid != null)
			count++;
		if(this.sdsjobrolecode != null)
			count++;
		if(this.pdsbatchtraceitems != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 13;
	}
	protected String sdsroleprofileid;
	protected String sdsuserid;
	protected ims.core.vo.lookups.PDSRequestAckStatus pdsack;
	protected ims.core.vo.lookups.PDSAckDetailType pdsackdetailtype;
	protected Boolean active;
	protected String comment;
	protected ims.core.vo.lookups.PDSAsyncRequestType requesttype;
	protected ims.framework.utils.DateTime requestdate;
	protected String pdsackexception;
	protected Integer retrycount;
	protected ims.choose_book.vo.PDSConvRefVo convid;
	protected String sdsjobrolecode;
	protected ims.core.vo.PDSBatchTraceItemsVoCollection pdsbatchtraceitems;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
