//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.admin.pas.PendingNoEDEmergencyAdmit business object (ID: 1014100027).
 */
public class PendingEmergencyNonEDAdmissionListVo extends ims.core.admin.pas.vo.PendingNoEDEmergencyAdmitRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PendingEmergencyNonEDAdmissionListVo()
	{
	}
	public PendingEmergencyNonEDAdmissionListVo(Integer id, int version)
	{
		super(id, version);
	}
	public PendingEmergencyNonEDAdmissionListVo(ims.core.vo.beans.PendingEmergencyNonEDAdmissionListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.type = bean.getType() == null ? null : ims.core.vo.lookups.PendingEmergencyAdmissionType.buildLookup(bean.getType());
		this.category = bean.getCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getCategory());
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo();
		this.sourceofreferral = bean.getSourceOfReferral() == null ? null : ims.core.vo.lookups.SourceOfReferral.buildLookup(bean.getSourceOfReferral());
		this.sourceofemergencyreferral = bean.getSourceOfEmergencyReferral() == null ? null : ims.core.vo.lookups.SourceOfEmergencyReferral.buildLookup(bean.getSourceOfEmergencyReferral());
		this.admissiondetail = bean.getAdmissionDetail() == null ? null : new ims.core.admin.pas.vo.AdmissionDetailRefVo(new Integer(bean.getAdmissionDetail().getId()), bean.getAdmissionDetail().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PendingEmergencyNonEDAdmissionListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.type = bean.getType() == null ? null : ims.core.vo.lookups.PendingEmergencyAdmissionType.buildLookup(bean.getType());
		this.category = bean.getCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getCategory());
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo(map);
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo(map);
		this.sourceofreferral = bean.getSourceOfReferral() == null ? null : ims.core.vo.lookups.SourceOfReferral.buildLookup(bean.getSourceOfReferral());
		this.sourceofemergencyreferral = bean.getSourceOfEmergencyReferral() == null ? null : ims.core.vo.lookups.SourceOfEmergencyReferral.buildLookup(bean.getSourceOfEmergencyReferral());
		this.admissiondetail = bean.getAdmissionDetail() == null ? null : new ims.core.admin.pas.vo.AdmissionDetailRefVo(new Integer(bean.getAdmissionDetail().getId()), bean.getAdmissionDetail().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PendingEmergencyNonEDAdmissionListVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PendingEmergencyNonEDAdmissionListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PendingEmergencyNonEDAdmissionListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TYPE"))
			return getType();
		if(fieldName.equals("CATEGORY"))
			return getCategory();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("HOSPITAL"))
			return getHospital();
		if(fieldName.equals("WARD"))
			return getWard();
		if(fieldName.equals("SOURCEOFREFERRAL"))
			return getSourceOfReferral();
		if(fieldName.equals("SOURCEOFEMERGENCYREFERRAL"))
			return getSourceOfEmergencyReferral();
		if(fieldName.equals("ADMISSIONDETAIL"))
			return getAdmissionDetail();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTypeIsNotNull()
	{
		return this.type != null;
	}
	public ims.core.vo.lookups.PendingEmergencyAdmissionType getType()
	{
		return this.type;
	}
	public void setType(ims.core.vo.lookups.PendingEmergencyAdmissionType value)
	{
		this.isValidated = false;
		this.type = value;
	}
	public boolean getCategoryIsNotNull()
	{
		return this.category != null;
	}
	public ims.core.vo.lookups.PatientStatus getCategory()
	{
		return this.category;
	}
	public void setCategory(ims.core.vo.lookups.PatientStatus value)
	{
		this.isValidated = false;
		this.category = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceLiteVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getHospitalIsNotNull()
	{
		return this.hospital != null;
	}
	public ims.core.vo.LocationLiteVo getHospital()
	{
		return this.hospital;
	}
	public void setHospital(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.hospital = value;
	}
	public boolean getWardIsNotNull()
	{
		return this.ward != null;
	}
	public ims.core.vo.LocationLiteVo getWard()
	{
		return this.ward;
	}
	public void setWard(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.ward = value;
	}
	public boolean getSourceOfReferralIsNotNull()
	{
		return this.sourceofreferral != null;
	}
	public ims.core.vo.lookups.SourceOfReferral getSourceOfReferral()
	{
		return this.sourceofreferral;
	}
	public void setSourceOfReferral(ims.core.vo.lookups.SourceOfReferral value)
	{
		this.isValidated = false;
		this.sourceofreferral = value;
	}
	public boolean getSourceOfEmergencyReferralIsNotNull()
	{
		return this.sourceofemergencyreferral != null;
	}
	public ims.core.vo.lookups.SourceOfEmergencyReferral getSourceOfEmergencyReferral()
	{
		return this.sourceofemergencyreferral;
	}
	public void setSourceOfEmergencyReferral(ims.core.vo.lookups.SourceOfEmergencyReferral value)
	{
		this.isValidated = false;
		this.sourceofemergencyreferral = value;
	}
	public boolean getAdmissionDetailIsNotNull()
	{
		return this.admissiondetail != null;
	}
	public ims.core.admin.pas.vo.AdmissionDetailRefVo getAdmissionDetail()
	{
		return this.admissiondetail;
	}
	public void setAdmissionDetail(ims.core.admin.pas.vo.AdmissionDetailRefVo value)
	{
		this.isValidated = false;
		this.admissiondetail = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.type == null)
			listOfErrors.add("Type is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PendingEmergencyNonEDAdmissionListVo clone = new PendingEmergencyNonEDAdmissionListVo(this.id, this.version);
		
		if(this.type == null)
			clone.type = null;
		else
			clone.type = (ims.core.vo.lookups.PendingEmergencyAdmissionType)this.type.clone();
		if(this.category == null)
			clone.category = null;
		else
			clone.category = (ims.core.vo.lookups.PatientStatus)this.category.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		if(this.hospital == null)
			clone.hospital = null;
		else
			clone.hospital = (ims.core.vo.LocationLiteVo)this.hospital.clone();
		if(this.ward == null)
			clone.ward = null;
		else
			clone.ward = (ims.core.vo.LocationLiteVo)this.ward.clone();
		if(this.sourceofreferral == null)
			clone.sourceofreferral = null;
		else
			clone.sourceofreferral = (ims.core.vo.lookups.SourceOfReferral)this.sourceofreferral.clone();
		if(this.sourceofemergencyreferral == null)
			clone.sourceofemergencyreferral = null;
		else
			clone.sourceofemergencyreferral = (ims.core.vo.lookups.SourceOfEmergencyReferral)this.sourceofemergencyreferral.clone();
		clone.admissiondetail = this.admissiondetail;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PendingEmergencyNonEDAdmissionListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PendingEmergencyNonEDAdmissionListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PendingEmergencyNonEDAdmissionListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PendingEmergencyNonEDAdmissionListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.type != null)
			count++;
		if(this.category != null)
			count++;
		if(this.service != null)
			count++;
		if(this.hospital != null)
			count++;
		if(this.ward != null)
			count++;
		if(this.sourceofreferral != null)
			count++;
		if(this.sourceofemergencyreferral != null)
			count++;
		if(this.admissiondetail != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.lookups.PendingEmergencyAdmissionType type;
	protected ims.core.vo.lookups.PatientStatus category;
	protected ims.core.vo.ServiceLiteVo service;
	protected ims.core.vo.LocationLiteVo hospital;
	protected ims.core.vo.LocationLiteVo ward;
	protected ims.core.vo.lookups.SourceOfReferral sourceofreferral;
	protected ims.core.vo.lookups.SourceOfEmergencyReferral sourceofemergencyreferral;
	protected ims.core.admin.pas.vo.AdmissionDetailRefVo admissiondetail;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
