//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;


public class PhlebotomyWorklistSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PhlebotomyWorklistSearchCriteriaVo()
	{
	}
	public PhlebotomyWorklistSearchCriteriaVo(ims.ocrr.vo.beans.PhlebotomyWorklistSearchCriteriaVoBean bean)
	{
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo();
		this.fromdate = bean.getFromDate() == null ? null : bean.getFromDate().buildDate();
		this.round = bean.getRound() == null ? null : bean.getRound().buildVo();
		this.wardtext = bean.getWardText();
		this.wardlist = ims.admin.vo.SelectItemVoCollection.buildFromBeanCollection(bean.getWardList());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.PhlebotomyWorklistSearchCriteriaVoBean bean)
	{
		this.location = bean.getLocation() == null ? null : bean.getLocation().buildVo(map);
		this.fromdate = bean.getFromDate() == null ? null : bean.getFromDate().buildDate();
		this.round = bean.getRound() == null ? null : bean.getRound().buildVo(map);
		this.wardtext = bean.getWardText();
		this.wardlist = ims.admin.vo.SelectItemVoCollection.buildFromBeanCollection(bean.getWardList());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.PhlebotomyWorklistSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.PhlebotomyWorklistSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.PhlebotomyWorklistSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getLocationIsNotNull()
	{
		return this.location != null;
	}
	public ims.core.vo.LocationLiteVo getLocation()
	{
		return this.location;
	}
	public void setLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.location = value;
	}
	public boolean getFromDateIsNotNull()
	{
		return this.fromdate != null;
	}
	public ims.framework.utils.Date getFromDate()
	{
		return this.fromdate;
	}
	public void setFromDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.fromdate = value;
	}
	public boolean getRoundIsNotNull()
	{
		return this.round != null;
	}
	public ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo getRound()
	{
		return this.round;
	}
	public void setRound(ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo value)
	{
		this.isValidated = false;
		this.round = value;
	}
	public boolean getWardTextIsNotNull()
	{
		return this.wardtext != null;
	}
	public String getWardText()
	{
		return this.wardtext;
	}
	public static int getWardTextMaxLength()
	{
		return 255;
	}
	public void setWardText(String value)
	{
		this.isValidated = false;
		this.wardtext = value;
	}
	public boolean getWardListIsNotNull()
	{
		return this.wardlist != null;
	}
	public ims.admin.vo.SelectItemVoCollection getWardList()
	{
		return this.wardlist;
	}
	public void setWardList(ims.admin.vo.SelectItemVoCollection value)
	{
		this.isValidated = false;
		this.wardlist = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.location != null)
		{
			if(!this.location.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.round != null)
		{
			if(!this.round.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.wardlist != null)
		{
			if(!this.wardlist.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.location != null)
		{
			String[] listOfOtherErrors = this.location.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.round != null)
		{
			String[] listOfOtherErrors = this.round.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.wardlist != null)
		{
			String[] listOfOtherErrors = this.wardlist.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PhlebotomyWorklistSearchCriteriaVo clone = new PhlebotomyWorklistSearchCriteriaVo();
		
		if(this.location == null)
			clone.location = null;
		else
			clone.location = (ims.core.vo.LocationLiteVo)this.location.clone();
		if(this.fromdate == null)
			clone.fromdate = null;
		else
			clone.fromdate = (ims.framework.utils.Date)this.fromdate.clone();
		if(this.round == null)
			clone.round = null;
		else
			clone.round = (ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo)this.round.clone();
		clone.wardtext = this.wardtext;
		if(this.wardlist == null)
			clone.wardlist = null;
		else
			clone.wardlist = (ims.admin.vo.SelectItemVoCollection)this.wardlist.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PhlebotomyWorklistSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PhlebotomyWorklistSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PhlebotomyWorklistSearchCriteriaVo compareObj = (PhlebotomyWorklistSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getLocation() == null && compareObj.getLocation() != null)
				return -1;
			if(this.getLocation() != null && compareObj.getLocation() == null)
				return 1;
			if(this.getLocation() != null && compareObj.getLocation() != null)
				retVal = this.getLocation().compareTo(compareObj.getLocation());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.location != null)
			count++;
		if(this.fromdate != null)
			count++;
		if(this.round != null)
			count++;
		if(this.wardtext != null)
			count++;
		if(this.wardlist != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.core.vo.LocationLiteVo location;
	protected ims.framework.utils.Date fromdate;
	protected ims.ocrr.vo.SpecimenCollectionListConfigDetailsVo round;
	protected String wardtext;
	protected ims.admin.vo.SelectItemVoCollection wardlist;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
