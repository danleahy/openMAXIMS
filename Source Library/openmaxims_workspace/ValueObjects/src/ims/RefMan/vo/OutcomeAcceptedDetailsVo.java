//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.OutcomeAcceptedDetails business object (ID: 1096100078).
 */
public class OutcomeAcceptedDetailsVo extends ims.RefMan.vo.OutcomeAcceptedDetailsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OutcomeAcceptedDetailsVo()
	{
	}
	public OutcomeAcceptedDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public OutcomeAcceptedDetailsVo(ims.RefMan.vo.beans.OutcomeAcceptedDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.actionrequired = bean.getActionRequired() == null ? null : ims.RefMan.vo.lookups.AcceptedActionsRequired.buildLookup(bean.getActionRequired());
		this.opa = bean.getOPA() == null ? null : bean.getOPA().buildVo();
		this.comments = bean.getComments();
		this.linkedopa = bean.getLinkedOPA() == null ? null : bean.getLinkedOPA().buildVo();
		this.linkeddiagnostics = ims.RefMan.vo.LinkedDiagnosticVoCollection.buildFromBeanCollection(bean.getLinkedDiagnostics());
		this.waitinglist = bean.getWaitingList() == null ? null : bean.getWaitingList().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.OutcomeAcceptedDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.actionrequired = bean.getActionRequired() == null ? null : ims.RefMan.vo.lookups.AcceptedActionsRequired.buildLookup(bean.getActionRequired());
		this.opa = bean.getOPA() == null ? null : bean.getOPA().buildVo(map);
		this.comments = bean.getComments();
		this.linkedopa = bean.getLinkedOPA() == null ? null : bean.getLinkedOPA().buildVo(map);
		this.linkeddiagnostics = ims.RefMan.vo.LinkedDiagnosticVoCollection.buildFromBeanCollection(bean.getLinkedDiagnostics());
		this.waitinglist = bean.getWaitingList() == null ? null : bean.getWaitingList().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.OutcomeAcceptedDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.OutcomeAcceptedDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.OutcomeAcceptedDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ACTIONREQUIRED"))
			return getActionRequired();
		if(fieldName.equals("OPA"))
			return getOPA();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("LINKEDOPA"))
			return getLinkedOPA();
		if(fieldName.equals("LINKEDDIAGNOSTICS"))
			return getLinkedDiagnostics();
		if(fieldName.equals("WAITINGLIST"))
			return getWaitingList();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getActionRequiredIsNotNull()
	{
		return this.actionrequired != null;
	}
	public ims.RefMan.vo.lookups.AcceptedActionsRequired getActionRequired()
	{
		return this.actionrequired;
	}
	public void setActionRequired(ims.RefMan.vo.lookups.AcceptedActionsRequired value)
	{
		this.isValidated = false;
		this.actionrequired = value;
	}
	public boolean getOPAIsNotNull()
	{
		return this.opa != null;
	}
	public ims.RefMan.vo.OPAVo getOPA()
	{
		return this.opa;
	}
	public void setOPA(ims.RefMan.vo.OPAVo value)
	{
		this.isValidated = false;
		this.opa = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 5000;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getLinkedOPAIsNotNull()
	{
		return this.linkedopa != null;
	}
	public ims.scheduling.vo.FutureAppointmentDetailsVo getLinkedOPA()
	{
		return this.linkedopa;
	}
	public void setLinkedOPA(ims.scheduling.vo.FutureAppointmentDetailsVo value)
	{
		this.isValidated = false;
		this.linkedopa = value;
	}
	public boolean getLinkedDiagnosticsIsNotNull()
	{
		return this.linkeddiagnostics != null;
	}
	public ims.RefMan.vo.LinkedDiagnosticVoCollection getLinkedDiagnostics()
	{
		return this.linkeddiagnostics;
	}
	public void setLinkedDiagnostics(ims.RefMan.vo.LinkedDiagnosticVoCollection value)
	{
		this.isValidated = false;
		this.linkeddiagnostics = value;
	}
	public boolean getWaitingListIsNotNull()
	{
		return this.waitinglist != null;
	}
	public ims.RefMan.vo.PatientElectiveListAddLaterVo getWaitingList()
	{
		return this.waitinglist;
	}
	public void setWaitingList(ims.RefMan.vo.PatientElectiveListAddLaterVo value)
	{
		this.isValidated = false;
		this.waitinglist = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.opa != null)
		{
			if(!this.opa.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.linkedopa != null)
		{
			if(!this.linkedopa.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.linkeddiagnostics != null)
		{
			if(!this.linkeddiagnostics.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.waitinglist != null)
		{
			if(!this.waitinglist.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.actionrequired == null)
			listOfErrors.add("Action Required is mandatory");
		if(this.opa != null)
		{
			String[] listOfOtherErrors = this.opa.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.linkedopa != null)
		{
			String[] listOfOtherErrors = this.linkedopa.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.linkeddiagnostics != null)
		{
			String[] listOfOtherErrors = this.linkeddiagnostics.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.waitinglist != null)
		{
			String[] listOfOtherErrors = this.waitinglist.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OutcomeAcceptedDetailsVo clone = new OutcomeAcceptedDetailsVo(this.id, this.version);
		
		if(this.actionrequired == null)
			clone.actionrequired = null;
		else
			clone.actionrequired = (ims.RefMan.vo.lookups.AcceptedActionsRequired)this.actionrequired.clone();
		if(this.opa == null)
			clone.opa = null;
		else
			clone.opa = (ims.RefMan.vo.OPAVo)this.opa.clone();
		clone.comments = this.comments;
		if(this.linkedopa == null)
			clone.linkedopa = null;
		else
			clone.linkedopa = (ims.scheduling.vo.FutureAppointmentDetailsVo)this.linkedopa.clone();
		if(this.linkeddiagnostics == null)
			clone.linkeddiagnostics = null;
		else
			clone.linkeddiagnostics = (ims.RefMan.vo.LinkedDiagnosticVoCollection)this.linkeddiagnostics.clone();
		if(this.waitinglist == null)
			clone.waitinglist = null;
		else
			clone.waitinglist = (ims.RefMan.vo.PatientElectiveListAddLaterVo)this.waitinglist.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OutcomeAcceptedDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OutcomeAcceptedDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((OutcomeAcceptedDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((OutcomeAcceptedDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.actionrequired != null)
			count++;
		if(this.opa != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.linkedopa != null)
			count++;
		if(this.linkeddiagnostics != null)
			count++;
		if(this.waitinglist != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.RefMan.vo.lookups.AcceptedActionsRequired actionrequired;
	protected ims.RefMan.vo.OPAVo opa;
	protected String comments;
	protected ims.scheduling.vo.FutureAppointmentDetailsVo linkedopa;
	protected ims.RefMan.vo.LinkedDiagnosticVoCollection linkeddiagnostics;
	protected ims.RefMan.vo.PatientElectiveListAddLaterVo waitinglist;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
