//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;


public class BookEmergencyTheatreSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public BookEmergencyTheatreSearchCriteriaVo()
	{
	}
	public BookEmergencyTheatreSearchCriteriaVo(ims.RefMan.vo.beans.BookEmergencyTheatreSearchCriteriaVoBean bean)
	{
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.hospital = bean.getHospital() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getHospital().getId()), bean.getHospital().getVersion());
		this.timerequired = bean.getTimeRequired();
		this.service = bean.getService() == null ? null : new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getService().getId()), bean.getService().getVersion());
		this.allowoverbook = bean.getAllowOverBook();
		// Interface field type not supported.
		this.primaryprocedurelaterality = bean.getPrimaryProcedureLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getPrimaryProcedureLaterality());
		// Interface field type not supported.
		this.secondaryprocedurelaterality = bean.getSecondaryProcedureLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcedureLaterality());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.BookEmergencyTheatreSearchCriteriaVoBean bean)
	{
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.hospital = bean.getHospital() == null ? null : new ims.core.resource.place.vo.LocationRefVo(new Integer(bean.getHospital().getId()), bean.getHospital().getVersion());
		this.timerequired = bean.getTimeRequired();
		this.service = bean.getService() == null ? null : new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getService().getId()), bean.getService().getVersion());
		this.allowoverbook = bean.getAllowOverBook();
		// Interface field type not supported.
		this.primaryprocedurelaterality = bean.getPrimaryProcedureLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getPrimaryProcedureLaterality());
		// Interface field type not supported.
		this.secondaryprocedurelaterality = bean.getSecondaryProcedureLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcedureLaterality());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.BookEmergencyTheatreSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.BookEmergencyTheatreSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.BookEmergencyTheatreSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getDateFromIsNotNull()
	{
		return this.datefrom != null;
	}
	public ims.framework.utils.Date getDateFrom()
	{
		return this.datefrom;
	}
	public void setDateFrom(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datefrom = value;
	}
	public boolean getDateToIsNotNull()
	{
		return this.dateto != null;
	}
	public ims.framework.utils.Date getDateTo()
	{
		return this.dateto;
	}
	public void setDateTo(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateto = value;
	}
	public boolean getTheatreTypeIsNotNull()
	{
		return this.theatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getTheatreType()
	{
		return this.theatretype;
	}
	public void setTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.theatretype = value;
	}
	public boolean getHospitalIsNotNull()
	{
		return this.hospital != null;
	}
	public ims.core.resource.place.vo.LocationRefVo getHospital()
	{
		return this.hospital;
	}
	public void setHospital(ims.core.resource.place.vo.LocationRefVo value)
	{
		this.isValidated = false;
		this.hospital = value;
	}
	public boolean getTimeRequiredIsNotNull()
	{
		return this.timerequired != null;
	}
	public Integer getTimeRequired()
	{
		return this.timerequired;
	}
	public void setTimeRequired(Integer value)
	{
		this.isValidated = false;
		this.timerequired = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.clinical.vo.ServiceRefVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.clinical.vo.ServiceRefVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getAllowOverBookIsNotNull()
	{
		return this.allowoverbook != null;
	}
	public Boolean getAllowOverBook()
	{
		return this.allowoverbook;
	}
	public void setAllowOverBook(Boolean value)
	{
		this.isValidated = false;
		this.allowoverbook = value;
	}
	public boolean getPrimaryProcedureIsNotNull()
	{
		return this.primaryprocedure != null;
	}
	public ims.vo.interfaces.IGenericItem getPrimaryProcedure()
	{
		return this.primaryprocedure;
	}
	public void setPrimaryProcedure(ims.vo.interfaces.IGenericItem value)
	{
		this.isValidated = false;
		this.primaryprocedure = value;
	}
	public boolean getPrimaryProcedureLateralityIsNotNull()
	{
		return this.primaryprocedurelaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getPrimaryProcedureLaterality()
	{
		return this.primaryprocedurelaterality;
	}
	public void setPrimaryProcedureLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.primaryprocedurelaterality = value;
	}
	public boolean getSecondaryProcedureIsNotNull()
	{
		return this.secondaryprocedure != null;
	}
	public ims.vo.interfaces.IGenericItem getSecondaryProcedure()
	{
		return this.secondaryprocedure;
	}
	public void setSecondaryProcedure(ims.vo.interfaces.IGenericItem value)
	{
		this.isValidated = false;
		this.secondaryprocedure = value;
	}
	public boolean getSecondaryProcedureLateralityIsNotNull()
	{
		return this.secondaryprocedurelaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getSecondaryProcedureLaterality()
	{
		return this.secondaryprocedurelaterality;
	}
	public void setSecondaryProcedureLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.secondaryprocedurelaterality = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof BookEmergencyTheatreSearchCriteriaVo))
			return false;
		BookEmergencyTheatreSearchCriteriaVo compareObj = (BookEmergencyTheatreSearchCriteriaVo)obj;
		if(this.getDateFrom() == null && compareObj.getDateFrom() != null)
			return false;
		if(this.getDateFrom() != null && compareObj.getDateFrom() == null)
			return false;
		if(this.getDateFrom() != null && compareObj.getDateFrom() != null)
			if(!this.getDateFrom().equals(compareObj.getDateFrom()))
				return false;
		if(this.getDateTo() == null && compareObj.getDateTo() != null)
			return false;
		if(this.getDateTo() != null && compareObj.getDateTo() == null)
			return false;
		if(this.getDateTo() != null && compareObj.getDateTo() != null)
			if(!this.getDateTo().equals(compareObj.getDateTo()))
				return false;
		if(this.getTheatreType() == null && compareObj.getTheatreType() != null)
			return false;
		if(this.getTheatreType() != null && compareObj.getTheatreType() == null)
			return false;
		if(this.getTheatreType() != null && compareObj.getTheatreType() != null)
			if(!this.getTheatreType().equals(compareObj.getTheatreType()))
				return false;
		if(this.getHospital() == null && compareObj.getHospital() != null)
			return false;
		if(this.getHospital() != null && compareObj.getHospital() == null)
			return false;
		if(this.getHospital() != null && compareObj.getHospital() != null)
			if(!this.getHospital().equals(compareObj.getHospital()))
				return false;
		if(this.getTimeRequired() == null && compareObj.getTimeRequired() != null)
			return false;
		if(this.getTimeRequired() != null && compareObj.getTimeRequired() == null)
			return false;
		if(this.getTimeRequired() != null && compareObj.getTimeRequired() != null)
			if(!this.getTimeRequired().equals(compareObj.getTimeRequired()))
				return false;
		if(this.getService() == null && compareObj.getService() != null)
			return false;
		if(this.getService() != null && compareObj.getService() == null)
			return false;
		if(this.getService() != null && compareObj.getService() != null)
			return this.getService().equals(compareObj.getService());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		BookEmergencyTheatreSearchCriteriaVo clone = new BookEmergencyTheatreSearchCriteriaVo();
		
		if(this.datefrom == null)
			clone.datefrom = null;
		else
			clone.datefrom = (ims.framework.utils.Date)this.datefrom.clone();
		if(this.dateto == null)
			clone.dateto = null;
		else
			clone.dateto = (ims.framework.utils.Date)this.dateto.clone();
		if(this.theatretype == null)
			clone.theatretype = null;
		else
			clone.theatretype = (ims.scheduling.vo.lookups.TheatreType)this.theatretype.clone();
		clone.hospital = this.hospital;
		clone.timerequired = this.timerequired;
		clone.service = this.service;
		clone.allowoverbook = this.allowoverbook;
		clone.primaryprocedure = this.primaryprocedure;
		if(this.primaryprocedurelaterality == null)
			clone.primaryprocedurelaterality = null;
		else
			clone.primaryprocedurelaterality = (ims.core.vo.lookups.LateralityLRB)this.primaryprocedurelaterality.clone();
		clone.secondaryprocedure = this.secondaryprocedure;
		if(this.secondaryprocedurelaterality == null)
			clone.secondaryprocedurelaterality = null;
		else
			clone.secondaryprocedurelaterality = (ims.core.vo.lookups.LateralityLRB)this.secondaryprocedurelaterality.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(BookEmergencyTheatreSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A BookEmergencyTheatreSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		BookEmergencyTheatreSearchCriteriaVo compareObj = (BookEmergencyTheatreSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getDateFrom() == null && compareObj.getDateFrom() != null)
				return -1;
			if(this.getDateFrom() != null && compareObj.getDateFrom() == null)
				return 1;
			if(this.getDateFrom() != null && compareObj.getDateFrom() != null)
				retVal = this.getDateFrom().compareTo(compareObj.getDateFrom());
		}
		if (retVal == 0)
		{
			if(this.getDateTo() == null && compareObj.getDateTo() != null)
				return -1;
			if(this.getDateTo() != null && compareObj.getDateTo() == null)
				return 1;
			if(this.getDateTo() != null && compareObj.getDateTo() != null)
				retVal = this.getDateTo().compareTo(compareObj.getDateTo());
		}
		if (retVal == 0)
		{
			if(this.getTheatreType() == null && compareObj.getTheatreType() != null)
				return -1;
			if(this.getTheatreType() != null && compareObj.getTheatreType() == null)
				return 1;
			if(this.getTheatreType() != null && compareObj.getTheatreType() != null)
				retVal = this.getTheatreType().compareTo(compareObj.getTheatreType());
		}
		if (retVal == 0)
		{
			if(this.getHospital() == null && compareObj.getHospital() != null)
				return -1;
			if(this.getHospital() != null && compareObj.getHospital() == null)
				return 1;
			if(this.getHospital() != null && compareObj.getHospital() != null)
				retVal = this.getHospital().compareTo(compareObj.getHospital());
		}
		if (retVal == 0)
		{
			if(this.getTimeRequired() == null && compareObj.getTimeRequired() != null)
				return -1;
			if(this.getTimeRequired() != null && compareObj.getTimeRequired() == null)
				return 1;
			if(this.getTimeRequired() != null && compareObj.getTimeRequired() != null)
				retVal = this.getTimeRequired().compareTo(compareObj.getTimeRequired());
		}
		if (retVal == 0)
		{
			if(this.getService() == null && compareObj.getService() != null)
				return -1;
			if(this.getService() != null && compareObj.getService() == null)
				return 1;
			if(this.getService() != null && compareObj.getService() != null)
				retVal = this.getService().compareTo(compareObj.getService());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.datefrom != null)
			count++;
		if(this.dateto != null)
			count++;
		if(this.theatretype != null)
			count++;
		if(this.hospital != null)
			count++;
		if(this.timerequired != null)
			count++;
		if(this.service != null)
			count++;
		if(this.allowoverbook != null)
			count++;
		if(this.primaryprocedure != null)
			count++;
		if(this.primaryprocedurelaterality != null)
			count++;
		if(this.secondaryprocedure != null)
			count++;
		if(this.secondaryprocedurelaterality != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 11;
	}
	protected ims.framework.utils.Date datefrom;
	protected ims.framework.utils.Date dateto;
	protected ims.scheduling.vo.lookups.TheatreType theatretype;
	protected ims.core.resource.place.vo.LocationRefVo hospital;
	protected Integer timerequired;
	protected ims.core.clinical.vo.ServiceRefVo service;
	protected Boolean allowoverbook;
	protected ims.vo.interfaces.IGenericItem primaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB primaryprocedurelaterality;
	protected ims.vo.interfaces.IGenericItem secondaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB secondaryprocedurelaterality;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
