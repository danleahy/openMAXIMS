//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.CatsReferral business object (ID: 1004100035).
 */
public class CatsReferralForReferralTriageVo extends ims.RefMan.vo.CatsReferralRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CatsReferralForReferralTriageVo()
	{
	}
	public CatsReferralForReferralTriageVo(Integer id, int version)
	{
		super(id, version);
	}
	public CatsReferralForReferralTriageVo(ims.RefMan.vo.beans.CatsReferralForReferralTriageVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.referraldocuments = ims.RefMan.vo.PatientDocumentForReferralTriageVoCollection.buildFromBeanCollection(bean.getReferralDocuments());
		this.referraldetails = bean.getReferralDetails() == null ? null : bean.getReferralDetails().buildVo();
		this.iscab = bean.getIsCAB();
		this.urgency = bean.getUrgency() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getUrgency());
		this.triagedatetime = bean.getTriageDateTime() == null ? null : bean.getTriageDateTime().buildDateTime();
		this.isacceptedoncab = bean.getIsAcceptedOnCAB();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.statushistory = ims.RefMan.vo.CatsReferralStatusVoCollection.buildFromBeanCollection(bean.getStatusHistory());
		this.triageoutcome = bean.getTriageOutcome() == null ? null : bean.getTriageOutcome().buildVo();
		this.rejectreferraldetail = bean.getRejectReferralDetail() == null ? null : bean.getRejectReferralDetail().buildVo();
		this.awaitingclinicalinfo = bean.getAwaitingClinicalInfo() == null ? null : bean.getAwaitingClinicalInfo().buildVo();
		this.appointments = ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection.buildFromBeanCollection(bean.getAppointments());
		this.isawaitingclinicalinfo = bean.getIsAwaitingClinicalInfo();
		this.consultationactivityrequired = bean.getConsultationActivityRequired();
		this.pathwayid = bean.getPathwayID();
		this.rttclockimpact = bean.getRTTClockImpact();
		this.contract = bean.getContract() == null ? null : new ims.core.configuration.vo.ContractConfigRefVo(new Integer(bean.getContract().getId()), bean.getContract().getVersion());
		this.changecbappointment = bean.getChangeCBAppointment();
		this.redirectcab = bean.getRedirectCAB();
		this.changecabopaanddirecttolist = bean.getChangeCABOPAandDirectToList();
		this.cabopaanddirecttolist = bean.getCABOPAandDirectToList();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.CatsReferralForReferralTriageVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.referraldocuments = ims.RefMan.vo.PatientDocumentForReferralTriageVoCollection.buildFromBeanCollection(bean.getReferralDocuments());
		this.referraldetails = bean.getReferralDetails() == null ? null : bean.getReferralDetails().buildVo(map);
		this.iscab = bean.getIsCAB();
		this.urgency = bean.getUrgency() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getUrgency());
		this.triagedatetime = bean.getTriageDateTime() == null ? null : bean.getTriageDateTime().buildDateTime();
		this.isacceptedoncab = bean.getIsAcceptedOnCAB();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.statushistory = ims.RefMan.vo.CatsReferralStatusVoCollection.buildFromBeanCollection(bean.getStatusHistory());
		this.triageoutcome = bean.getTriageOutcome() == null ? null : bean.getTriageOutcome().buildVo(map);
		this.rejectreferraldetail = bean.getRejectReferralDetail() == null ? null : bean.getRejectReferralDetail().buildVo(map);
		this.awaitingclinicalinfo = bean.getAwaitingClinicalInfo() == null ? null : bean.getAwaitingClinicalInfo().buildVo(map);
		this.appointments = ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection.buildFromBeanCollection(bean.getAppointments());
		this.isawaitingclinicalinfo = bean.getIsAwaitingClinicalInfo();
		this.consultationactivityrequired = bean.getConsultationActivityRequired();
		this.pathwayid = bean.getPathwayID();
		this.rttclockimpact = bean.getRTTClockImpact();
		this.contract = bean.getContract() == null ? null : new ims.core.configuration.vo.ContractConfigRefVo(new Integer(bean.getContract().getId()), bean.getContract().getVersion());
		this.changecbappointment = bean.getChangeCBAppointment();
		this.redirectcab = bean.getRedirectCAB();
		this.changecabopaanddirecttolist = bean.getChangeCABOPAandDirectToList();
		this.cabopaanddirecttolist = bean.getCABOPAandDirectToList();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.CatsReferralForReferralTriageVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.CatsReferralForReferralTriageVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.CatsReferralForReferralTriageVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("REFERRALDOCUMENTS"))
			return getReferralDocuments();
		if(fieldName.equals("REFERRALDETAILS"))
			return getReferralDetails();
		if(fieldName.equals("ISCAB"))
			return getIsCAB();
		if(fieldName.equals("URGENCY"))
			return getUrgency();
		if(fieldName.equals("TRIAGEDATETIME"))
			return getTriageDateTime();
		if(fieldName.equals("ISACCEPTEDONCAB"))
			return getIsAcceptedOnCAB();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("STATUSHISTORY"))
			return getStatusHistory();
		if(fieldName.equals("TRIAGEOUTCOME"))
			return getTriageOutcome();
		if(fieldName.equals("REJECTREFERRALDETAIL"))
			return getRejectReferralDetail();
		if(fieldName.equals("AWAITINGCLINICALINFO"))
			return getAwaitingClinicalInfo();
		if(fieldName.equals("APPOINTMENTS"))
			return getAppointments();
		if(fieldName.equals("ISAWAITINGCLINICALINFO"))
			return getIsAwaitingClinicalInfo();
		if(fieldName.equals("CONSULTATIONACTIVITYREQUIRED"))
			return getConsultationActivityRequired();
		if(fieldName.equals("PATHWAYID"))
			return getPathwayID();
		if(fieldName.equals("RTTCLOCKIMPACT"))
			return getRTTClockImpact();
		if(fieldName.equals("CONTRACT"))
			return getContract();
		if(fieldName.equals("CHANGECBAPPOINTMENT"))
			return getChangeCBAppointment();
		if(fieldName.equals("REDIRECTCAB"))
			return getRedirectCAB();
		if(fieldName.equals("CHANGECABOPAANDDIRECTTOLIST"))
			return getChangeCABOPAandDirectToList();
		if(fieldName.equals("CABOPAANDDIRECTTOLIST"))
			return getCABOPAandDirectToList();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getReferralDocumentsIsNotNull()
	{
		return this.referraldocuments != null;
	}
	public ims.RefMan.vo.PatientDocumentForReferralTriageVoCollection getReferralDocuments()
	{
		return this.referraldocuments;
	}
	public void setReferralDocuments(ims.RefMan.vo.PatientDocumentForReferralTriageVoCollection value)
	{
		this.isValidated = false;
		this.referraldocuments = value;
	}
	public boolean getReferralDetailsIsNotNull()
	{
		return this.referraldetails != null;
	}
	public ims.RefMan.vo.ReferralDetailsForReferralTriageVo getReferralDetails()
	{
		return this.referraldetails;
	}
	public void setReferralDetails(ims.RefMan.vo.ReferralDetailsForReferralTriageVo value)
	{
		this.isValidated = false;
		this.referraldetails = value;
	}
	public boolean getIsCABIsNotNull()
	{
		return this.iscab != null;
	}
	public Boolean getIsCAB()
	{
		return this.iscab;
	}
	public void setIsCAB(Boolean value)
	{
		this.isValidated = false;
		this.iscab = value;
	}
	public boolean getUrgencyIsNotNull()
	{
		return this.urgency != null;
	}
	public ims.RefMan.vo.lookups.ReferralUrgency getUrgency()
	{
		return this.urgency;
	}
	public void setUrgency(ims.RefMan.vo.lookups.ReferralUrgency value)
	{
		this.isValidated = false;
		this.urgency = value;
	}
	public boolean getTriageDateTimeIsNotNull()
	{
		return this.triagedatetime != null;
	}
	public ims.framework.utils.DateTime getTriageDateTime()
	{
		return this.triagedatetime;
	}
	public void setTriageDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.triagedatetime = value;
	}
	public boolean getIsAcceptedOnCABIsNotNull()
	{
		return this.isacceptedoncab != null;
	}
	public Boolean getIsAcceptedOnCAB()
	{
		return this.isacceptedoncab;
	}
	public void setIsAcceptedOnCAB(Boolean value)
	{
		this.isValidated = false;
		this.isacceptedoncab = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.RefMan.vo.CatsReferralStatusVo getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.RefMan.vo.CatsReferralStatusVo value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getStatusHistoryIsNotNull()
	{
		return this.statushistory != null;
	}
	public ims.RefMan.vo.CatsReferralStatusVoCollection getStatusHistory()
	{
		return this.statushistory;
	}
	public void setStatusHistory(ims.RefMan.vo.CatsReferralStatusVoCollection value)
	{
		this.isValidated = false;
		this.statushistory = value;
	}
	public boolean getTriageOutcomeIsNotNull()
	{
		return this.triageoutcome != null;
	}
	public ims.RefMan.vo.TriageOutcomeVo getTriageOutcome()
	{
		return this.triageoutcome;
	}
	public void setTriageOutcome(ims.RefMan.vo.TriageOutcomeVo value)
	{
		this.isValidated = false;
		this.triageoutcome = value;
	}
	public boolean getRejectReferralDetailIsNotNull()
	{
		return this.rejectreferraldetail != null;
	}
	public ims.RefMan.vo.RejectReferralVo getRejectReferralDetail()
	{
		return this.rejectreferraldetail;
	}
	public void setRejectReferralDetail(ims.RefMan.vo.RejectReferralVo value)
	{
		this.isValidated = false;
		this.rejectreferraldetail = value;
	}
	public boolean getAwaitingClinicalInfoIsNotNull()
	{
		return this.awaitingclinicalinfo != null;
	}
	public ims.RefMan.vo.AwaitingClinicalInfoVo getAwaitingClinicalInfo()
	{
		return this.awaitingclinicalinfo;
	}
	public void setAwaitingClinicalInfo(ims.RefMan.vo.AwaitingClinicalInfoVo value)
	{
		this.isValidated = false;
		this.awaitingclinicalinfo = value;
	}
	public boolean getAppointmentsIsNotNull()
	{
		return this.appointments != null;
	}
	public ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection getAppointments()
	{
		return this.appointments;
	}
	public void setAppointments(ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection value)
	{
		this.isValidated = false;
		this.appointments = value;
	}
	public boolean getIsAwaitingClinicalInfoIsNotNull()
	{
		return this.isawaitingclinicalinfo != null;
	}
	public Boolean getIsAwaitingClinicalInfo()
	{
		return this.isawaitingclinicalinfo;
	}
	public void setIsAwaitingClinicalInfo(Boolean value)
	{
		this.isValidated = false;
		this.isawaitingclinicalinfo = value;
	}
	public boolean getConsultationActivityRequiredIsNotNull()
	{
		return this.consultationactivityrequired != null;
	}
	public Boolean getConsultationActivityRequired()
	{
		return this.consultationactivityrequired;
	}
	public void setConsultationActivityRequired(Boolean value)
	{
		this.isValidated = false;
		this.consultationactivityrequired = value;
	}
	public boolean getPathwayIDIsNotNull()
	{
		return this.pathwayid != null;
	}
	public String getPathwayID()
	{
		return this.pathwayid;
	}
	public static int getPathwayIDMaxLength()
	{
		return 20;
	}
	public void setPathwayID(String value)
	{
		this.isValidated = false;
		this.pathwayid = value;
	}
	public boolean getRTTClockImpactIsNotNull()
	{
		return this.rttclockimpact != null;
	}
	public Boolean getRTTClockImpact()
	{
		return this.rttclockimpact;
	}
	public void setRTTClockImpact(Boolean value)
	{
		this.isValidated = false;
		this.rttclockimpact = value;
	}
	public boolean getContractIsNotNull()
	{
		return this.contract != null;
	}
	public ims.core.configuration.vo.ContractConfigRefVo getContract()
	{
		return this.contract;
	}
	public void setContract(ims.core.configuration.vo.ContractConfigRefVo value)
	{
		this.isValidated = false;
		this.contract = value;
	}
	public boolean getChangeCBAppointmentIsNotNull()
	{
		return this.changecbappointment != null;
	}
	public Boolean getChangeCBAppointment()
	{
		return this.changecbappointment;
	}
	public void setChangeCBAppointment(Boolean value)
	{
		this.isValidated = false;
		this.changecbappointment = value;
	}
	public boolean getRedirectCABIsNotNull()
	{
		return this.redirectcab != null;
	}
	public Boolean getRedirectCAB()
	{
		return this.redirectcab;
	}
	public void setRedirectCAB(Boolean value)
	{
		this.isValidated = false;
		this.redirectcab = value;
	}
	public boolean getChangeCABOPAandDirectToListIsNotNull()
	{
		return this.changecabopaanddirecttolist != null;
	}
	public Boolean getChangeCABOPAandDirectToList()
	{
		return this.changecabopaanddirecttolist;
	}
	public void setChangeCABOPAandDirectToList(Boolean value)
	{
		this.isValidated = false;
		this.changecabopaanddirecttolist = value;
	}
	public boolean getCABOPAandDirectToListIsNotNull()
	{
		return this.cabopaanddirecttolist != null;
	}
	public Boolean getCABOPAandDirectToList()
	{
		return this.cabopaanddirecttolist;
	}
	public void setCABOPAandDirectToList(Boolean value)
	{
		this.isValidated = false;
		this.cabopaanddirecttolist = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.referraldetails != null)
		{
			if(!this.referraldetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.statushistory != null)
		{
			if(!this.statushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.triageoutcome != null)
		{
			if(!this.triageoutcome.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.rejectreferraldetail != null)
		{
			if(!this.rejectreferraldetail.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.awaitingclinicalinfo != null)
		{
			if(!this.awaitingclinicalinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.referraldetails != null)
		{
			String[] listOfOtherErrors = this.referraldetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.statushistory != null)
		{
			String[] listOfOtherErrors = this.statushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.triageoutcome != null)
		{
			String[] listOfOtherErrors = this.triageoutcome.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.rejectreferraldetail != null)
		{
			String[] listOfOtherErrors = this.rejectreferraldetail.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.awaitingclinicalinfo != null)
		{
			String[] listOfOtherErrors = this.awaitingclinicalinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.pathwayid != null)
			if(this.pathwayid.length() > 20)
				listOfErrors.add("The length of the field [pathwayid] in the value object [ims.RefMan.vo.CatsReferralForReferralTriageVo] is too big. It should be less or equal to 20");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CatsReferralForReferralTriageVo clone = new CatsReferralForReferralTriageVo(this.id, this.version);
		
		clone.patient = this.patient;
		if(this.referraldocuments == null)
			clone.referraldocuments = null;
		else
			clone.referraldocuments = (ims.RefMan.vo.PatientDocumentForReferralTriageVoCollection)this.referraldocuments.clone();
		if(this.referraldetails == null)
			clone.referraldetails = null;
		else
			clone.referraldetails = (ims.RefMan.vo.ReferralDetailsForReferralTriageVo)this.referraldetails.clone();
		clone.iscab = this.iscab;
		if(this.urgency == null)
			clone.urgency = null;
		else
			clone.urgency = (ims.RefMan.vo.lookups.ReferralUrgency)this.urgency.clone();
		if(this.triagedatetime == null)
			clone.triagedatetime = null;
		else
			clone.triagedatetime = (ims.framework.utils.DateTime)this.triagedatetime.clone();
		clone.isacceptedoncab = this.isacceptedoncab;
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.RefMan.vo.CatsReferralStatusVo)this.currentstatus.clone();
		if(this.statushistory == null)
			clone.statushistory = null;
		else
			clone.statushistory = (ims.RefMan.vo.CatsReferralStatusVoCollection)this.statushistory.clone();
		if(this.triageoutcome == null)
			clone.triageoutcome = null;
		else
			clone.triageoutcome = (ims.RefMan.vo.TriageOutcomeVo)this.triageoutcome.clone();
		if(this.rejectreferraldetail == null)
			clone.rejectreferraldetail = null;
		else
			clone.rejectreferraldetail = (ims.RefMan.vo.RejectReferralVo)this.rejectreferraldetail.clone();
		if(this.awaitingclinicalinfo == null)
			clone.awaitingclinicalinfo = null;
		else
			clone.awaitingclinicalinfo = (ims.RefMan.vo.AwaitingClinicalInfoVo)this.awaitingclinicalinfo.clone();
		if(this.appointments == null)
			clone.appointments = null;
		else
			clone.appointments = (ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection)this.appointments.clone();
		clone.isawaitingclinicalinfo = this.isawaitingclinicalinfo;
		clone.consultationactivityrequired = this.consultationactivityrequired;
		clone.pathwayid = this.pathwayid;
		clone.rttclockimpact = this.rttclockimpact;
		clone.contract = this.contract;
		clone.changecbappointment = this.changecbappointment;
		clone.redirectcab = this.redirectcab;
		clone.changecabopaanddirecttolist = this.changecabopaanddirecttolist;
		clone.cabopaanddirecttolist = this.cabopaanddirecttolist;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CatsReferralForReferralTriageVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CatsReferralForReferralTriageVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CatsReferralForReferralTriageVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CatsReferralForReferralTriageVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.referraldocuments != null)
			count++;
		if(this.referraldetails != null)
			count++;
		if(this.iscab != null)
			count++;
		if(this.urgency != null)
			count++;
		if(this.triagedatetime != null)
			count++;
		if(this.isacceptedoncab != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.statushistory != null)
			count++;
		if(this.triageoutcome != null)
			count++;
		if(this.rejectreferraldetail != null)
			count++;
		if(this.awaitingclinicalinfo != null)
			count++;
		if(this.appointments != null)
			count++;
		if(this.isawaitingclinicalinfo != null)
			count++;
		if(this.consultationactivityrequired != null)
			count++;
		if(this.pathwayid != null)
			count++;
		if(this.rttclockimpact != null)
			count++;
		if(this.contract != null)
			count++;
		if(this.changecbappointment != null)
			count++;
		if(this.redirectcab != null)
			count++;
		if(this.changecabopaanddirecttolist != null)
			count++;
		if(this.cabopaanddirecttolist != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 22;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.RefMan.vo.PatientDocumentForReferralTriageVoCollection referraldocuments;
	protected ims.RefMan.vo.ReferralDetailsForReferralTriageVo referraldetails;
	protected Boolean iscab;
	protected ims.RefMan.vo.lookups.ReferralUrgency urgency;
	protected ims.framework.utils.DateTime triagedatetime;
	protected Boolean isacceptedoncab;
	protected ims.RefMan.vo.CatsReferralStatusVo currentstatus;
	protected ims.RefMan.vo.CatsReferralStatusVoCollection statushistory;
	protected ims.RefMan.vo.TriageOutcomeVo triageoutcome;
	protected ims.RefMan.vo.RejectReferralVo rejectreferraldetail;
	protected ims.RefMan.vo.AwaitingClinicalInfoVo awaitingclinicalinfo;
	protected ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection appointments;
	protected Boolean isawaitingclinicalinfo;
	protected Boolean consultationactivityrequired;
	protected String pathwayid;
	protected Boolean rttclockimpact;
	protected ims.core.configuration.vo.ContractConfigRefVo contract;
	protected Boolean changecbappointment;
	protected Boolean redirectcab;
	protected Boolean changecabopaanddirecttolist;
	protected Boolean cabopaanddirecttolist;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
