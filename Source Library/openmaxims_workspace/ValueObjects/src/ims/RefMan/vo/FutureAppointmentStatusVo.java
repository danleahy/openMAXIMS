//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to Scheduling.FutureAppointmentStatus business object (ID: 1090100025).
 */
public class FutureAppointmentStatusVo extends ims.scheduling.vo.FutureAppointmentStatusRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public FutureAppointmentStatusVo()
	{
	}
	public FutureAppointmentStatusVo(Integer id, int version)
	{
		super(id, version);
	}
	public FutureAppointmentStatusVo(ims.RefMan.vo.beans.FutureAppointmentStatusVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pendingstatus = bean.getPendingStatus() == null ? null : ims.scheduling.vo.lookups.FutureAppointmentStatus.buildLookup(bean.getPendingStatus());
		this.authoringuser = bean.getAuthoringUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getAuthoringUser().getId()), bean.getAuthoringUser().getVersion());
		this.statusdatetime = bean.getStatusDateTime() == null ? null : bean.getStatusDateTime().buildDateTime();
		this.statuscomment = bean.getStatusComment();
		this.removalreason = bean.getRemovalReason() == null ? null : ims.scheduling.vo.lookups.FutureApptRemovalReason.buildLookup(bean.getRemovalReason());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.FutureAppointmentStatusVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.pendingstatus = bean.getPendingStatus() == null ? null : ims.scheduling.vo.lookups.FutureAppointmentStatus.buildLookup(bean.getPendingStatus());
		this.authoringuser = bean.getAuthoringUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getAuthoringUser().getId()), bean.getAuthoringUser().getVersion());
		this.statusdatetime = bean.getStatusDateTime() == null ? null : bean.getStatusDateTime().buildDateTime();
		this.statuscomment = bean.getStatusComment();
		this.removalreason = bean.getRemovalReason() == null ? null : ims.scheduling.vo.lookups.FutureApptRemovalReason.buildLookup(bean.getRemovalReason());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.FutureAppointmentStatusVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.FutureAppointmentStatusVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.FutureAppointmentStatusVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PENDINGSTATUS"))
			return getPendingStatus();
		if(fieldName.equals("AUTHORINGUSER"))
			return getAuthoringUser();
		if(fieldName.equals("STATUSDATETIME"))
			return getStatusDateTime();
		if(fieldName.equals("STATUSCOMMENT"))
			return getStatusComment();
		if(fieldName.equals("REMOVALREASON"))
			return getRemovalReason();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPendingStatusIsNotNull()
	{
		return this.pendingstatus != null;
	}
	public ims.scheduling.vo.lookups.FutureAppointmentStatus getPendingStatus()
	{
		return this.pendingstatus;
	}
	public void setPendingStatus(ims.scheduling.vo.lookups.FutureAppointmentStatus value)
	{
		this.isValidated = false;
		this.pendingstatus = value;
	}
	public boolean getAuthoringUserIsNotNull()
	{
		return this.authoringuser != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getAuthoringUser()
	{
		return this.authoringuser;
	}
	public void setAuthoringUser(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.authoringuser = value;
	}
	public boolean getStatusDateTimeIsNotNull()
	{
		return this.statusdatetime != null;
	}
	public ims.framework.utils.DateTime getStatusDateTime()
	{
		return this.statusdatetime;
	}
	public void setStatusDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.statusdatetime = value;
	}
	public boolean getStatusCommentIsNotNull()
	{
		return this.statuscomment != null;
	}
	public String getStatusComment()
	{
		return this.statuscomment;
	}
	public static int getStatusCommentMaxLength()
	{
		return 1500;
	}
	public void setStatusComment(String value)
	{
		this.isValidated = false;
		this.statuscomment = value;
	}
	public boolean getRemovalReasonIsNotNull()
	{
		return this.removalreason != null;
	}
	public ims.scheduling.vo.lookups.FutureApptRemovalReason getRemovalReason()
	{
		return this.removalreason;
	}
	public void setRemovalReason(ims.scheduling.vo.lookups.FutureApptRemovalReason value)
	{
		this.isValidated = false;
		this.removalreason = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pendingstatus == null)
			listOfErrors.add("PendingStatus is mandatory");
		if(this.statusdatetime == null)
			listOfErrors.add("StatusDateTime is mandatory");
		if(this.statuscomment != null)
			if(this.statuscomment.length() > 1500)
				listOfErrors.add("The length of the field [statuscomment] in the value object [ims.RefMan.vo.FutureAppointmentStatusVo] is too big. It should be less or equal to 1500");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		FutureAppointmentStatusVo clone = new FutureAppointmentStatusVo(this.id, this.version);
		
		if(this.pendingstatus == null)
			clone.pendingstatus = null;
		else
			clone.pendingstatus = (ims.scheduling.vo.lookups.FutureAppointmentStatus)this.pendingstatus.clone();
		clone.authoringuser = this.authoringuser;
		if(this.statusdatetime == null)
			clone.statusdatetime = null;
		else
			clone.statusdatetime = (ims.framework.utils.DateTime)this.statusdatetime.clone();
		clone.statuscomment = this.statuscomment;
		if(this.removalreason == null)
			clone.removalreason = null;
		else
			clone.removalreason = (ims.scheduling.vo.lookups.FutureApptRemovalReason)this.removalreason.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(FutureAppointmentStatusVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A FutureAppointmentStatusVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((FutureAppointmentStatusVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((FutureAppointmentStatusVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.pendingstatus != null)
			count++;
		if(this.authoringuser != null)
			count++;
		if(this.statusdatetime != null)
			count++;
		if(this.statuscomment != null)
			count++;
		if(this.removalreason != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.scheduling.vo.lookups.FutureAppointmentStatus pendingstatus;
	protected ims.core.resource.people.vo.MemberOfStaffRefVo authoringuser;
	protected ims.framework.utils.DateTime statusdatetime;
	protected String statuscomment;
	protected ims.scheduling.vo.lookups.FutureApptRemovalReason removalreason;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
