//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.PatientElectiveList business object (ID: 1014100020).
 */
public class PatientElectiveListDetailsVo extends ims.RefMan.vo.PatientElectiveListRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientElectiveListDetailsVo()
	{
	}
	public PatientElectiveListDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientElectiveListDetailsVo(ims.RefMan.vo.beans.PatientElectiveListDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo();
		this.dateonlist = bean.getDateOnList() == null ? null : bean.getDateOnList().buildDate();
		this.erod = bean.getEROD() == null ? null : bean.getEROD().buildVo();
		this.erodhistory = ims.RefMan.vo.ReferralERODDetailsVoCollection.buildFromBeanCollection(bean.getERODHistory());
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.electiveliststatus = bean.getElectiveListStatus() == null ? null : bean.getElectiveListStatus().buildVo();
		this.tcidetails = bean.getTCIDetails() == null ? null : bean.getTCIDetails().buildVo();
		this.tcihistory = ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection.buildFromBeanCollection(bean.getTCIHistory());
		this.admissiontype = bean.getAdmissionType() == null ? null : ims.RefMan.vo.lookups.WaitingCardAdmissionType.buildLookup(bean.getAdmissionType());
		this.electivelistreason = bean.getElectiveListReason() == null ? null : ims.emergency.vo.lookups.ElectiveListReason.buildLookup(bean.getElectiveListReason());
		this.tobeplannedin = bean.getToBePlannedIn();
		this.tobeplannedinunit = bean.getToBePlannedInUnit() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getToBePlannedInUnit());
		this.planneddate = bean.getPlannedDate() == null ? null : bean.getPlannedDate().buildDate();
		this.waspossibledategiven = bean.getWasPossibleDateGiven();
		this.dategiventopatient = bean.getDateGivenToPatient() == null ? null : bean.getDateGivenToPatient().buildDate();
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.proceduredescription = bean.getProcedureDescription();
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo();
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.priority = bean.getPriority() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getPriority());
		this.electivelist = bean.getElectiveList() == null ? null : bean.getElectiveList().buildVo();
		this.anticipatedprocedurelength = bean.getAnticipatedProcedureLength();
		this.requiredtheatretype = bean.getRequiredTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getRequiredTheatreType());
		this.criticalcarebedrequired = bean.getCriticalCareBedRequired();
		this.anaesthesisriskassessmentrequest = bean.getAnaesthesisRiskAssessmentRequest();
		this.followperioperativeguidelines = bean.getFollowPeriOperativeguidelines() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getFollowPeriOperativeguidelines());
		this.periopnoreasoncomments = bean.getPeriOpNoReasonComments();
		this.proceduredtobecarriedby = bean.getProceduredToBeCarriedBy() == null ? null : ims.RefMan.vo.lookups.ProcedureExecutant.buildLookup(bean.getProceduredToBeCarriedBy());
		this.procedurecarriedoutby = bean.getProcedureCarriedOutBy() == null ? null : bean.getProcedureCarriedOutBy().buildVo();
		this.preassessmentrequired = bean.getPreAssessmentRequired();
		this.interpretatorrequired = bean.getInterpretatorRequired();
		this.language = bean.getLanguage() == null ? null : ims.core.vo.lookups.Language.buildLookup(bean.getLanguage());
		this.transportrequired = bean.getTransportRequired();
		this.transport = bean.getTransport() == null ? null : ims.scheduling.vo.lookups.ApptTransportType.buildLookup(bean.getTransport());
		this.specialrequirements = bean.getSpecialRequirements();
		this.specialrequirementsdetails = bean.getSpecialRequirementsDetails();
		this.comments = bean.getComments();
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo();
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.suspectedgibleed = bean.getSuspectedGIBleed();
		this.points = bean.getPoints();
		this.suitablefortraining = bean.getSuitableforTraining();
		this.generalanaesthetic = bean.getGeneralAnaesthetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getGeneralAnaesthetic());
		this.cannursecarryoutprocedure = bean.getCanNurseCarryOutProcedure();
		this.medicationshouldbestoppedoralbowelprep = bean.getMedicationShouldBeStoppedOralBowelPrep();
		this.druginformation = bean.getDrugInformation();
		this.haspacemakerdefib = bean.getHasPacemakerDefib();
		this.renalfunctionassessment = bean.getRenalFunctionAssessment() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getRenalFunctionAssessment());
		this.aretherekeytherapeutic = bean.getAreThereKeyTherapeutic();
		this.cognitivecomments = bean.getCognitiveComments();
		this.detailsfornongaendoprocedure = bean.getDetailsForNonGAEndoProcedure();
		this.currentsuspensionenddate = bean.getCurrentSuspensionEndDate() == null ? null : bean.getCurrentSuspensionEndDate().buildDateTime();
		this.was28dayruleapplied = bean.getWas28DayRuleApplied();
		this.notes = ims.RefMan.vo.PatientElectiveListNotesVoCollection.buildFromBeanCollection(bean.getNotes());
		this.tcicancelledbyprovider = bean.getTCICancelledByProvider();
		this.numberofprovidertcicancellations = bean.getNumberOfProviderTCICancellations();
		this.electiveliststatushistory = ims.RefMan.vo.ElectiveListStatusVoCollection.buildFromBeanCollection(bean.getElectiveListStatusHistory());
		this.preassessmentoutcome = bean.getPreAssessmentOutcome() == null ? null : bean.getPreAssessmentOutcome().buildVo();
		this.fitforsurgery = bean.getFitForSurgery() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getFitForSurgery());
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.availableatshortnotice = bean.getAvailableAtShortNotice();
		this.preoperativeovernightstayrequired = bean.getPreOperativeOvernightStayRequired();
		this.noofpreoperativenights = bean.getNoOfPreOperativeNights();
		this.anticipatedstay = bean.getAnticipatedStay();
		this.patientreceivinganticoagulanttherapy = bean.getPatientReceivingAnticoagulantTherapy() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPatientReceivingAnticoagulantTherapy());
		this.availableatshortnoticeperiod = bean.getAvailableAtShortNoticePeriod();
		this.subjectto28dayrule = bean.getSubjectTo28DayRule();
		this.rule28daystatus = bean.getRule28DayStatus() == null ? null : ims.scheduling.vo.lookups.Rule28DayStatus.buildLookup(bean.getRule28DayStatus());
		this.rule28dayperiodstart = bean.getRule28DayPeriodStart() == null ? null : bean.getRule28DayPeriodStart().buildDate();
		if(bean.getAdmissions() != null)
		{
			this.admissions = new ims.core.admin.pas.vo.AdmissionDetailRefVoCollection();
			for(int admissions_i = 0; admissions_i < bean.getAdmissions().length; admissions_i++)
			{
				this.admissions.add(new ims.core.admin.pas.vo.AdmissionDetailRefVo(new Integer(bean.getAdmissions()[admissions_i].getId()), bean.getAdmissions()[admissions_i].getVersion()));
			}
		}
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : bean.getTheatreAppointment().buildVo();
		this.systeminformation = bean.getSystemInformation() == null ? null : bean.getSystemInformation().buildSystemInformation();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo();
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientCategory());
		this.vettinghcp = bean.getVettingHCP() == null ? null : bean.getVettingHCP().buildVo();
		this.authoringinfo = bean.getAuthoringInfo() == null ? null : bean.getAuthoringInfo().buildVo();
		this.requiresvetting = bean.getRequiresVetting();
		this.recordinguser = bean.getRecordingUser() == null ? null : bean.getRecordingUser().buildVo();
		this.precolonoscopyassessmentrequired = bean.getPreColonoscopyAssessmentRequired() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPreColonoscopyAssessmentRequired());
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PatientElectiveListDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo(map);
		this.dateonlist = bean.getDateOnList() == null ? null : bean.getDateOnList().buildDate();
		this.erod = bean.getEROD() == null ? null : bean.getEROD().buildVo(map);
		this.erodhistory = ims.RefMan.vo.ReferralERODDetailsVoCollection.buildFromBeanCollection(bean.getERODHistory());
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.electiveliststatus = bean.getElectiveListStatus() == null ? null : bean.getElectiveListStatus().buildVo(map);
		this.tcidetails = bean.getTCIDetails() == null ? null : bean.getTCIDetails().buildVo(map);
		this.tcihistory = ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection.buildFromBeanCollection(bean.getTCIHistory());
		this.admissiontype = bean.getAdmissionType() == null ? null : ims.RefMan.vo.lookups.WaitingCardAdmissionType.buildLookup(bean.getAdmissionType());
		this.electivelistreason = bean.getElectiveListReason() == null ? null : ims.emergency.vo.lookups.ElectiveListReason.buildLookup(bean.getElectiveListReason());
		this.tobeplannedin = bean.getToBePlannedIn();
		this.tobeplannedinunit = bean.getToBePlannedInUnit() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getToBePlannedInUnit());
		this.planneddate = bean.getPlannedDate() == null ? null : bean.getPlannedDate().buildDate();
		this.waspossibledategiven = bean.getWasPossibleDateGiven();
		this.dategiventopatient = bean.getDateGivenToPatient() == null ? null : bean.getDateGivenToPatient().buildDate();
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo(map);
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.proceduredescription = bean.getProcedureDescription();
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo(map);
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.priority = bean.getPriority() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getPriority());
		this.electivelist = bean.getElectiveList() == null ? null : bean.getElectiveList().buildVo(map);
		this.anticipatedprocedurelength = bean.getAnticipatedProcedureLength();
		this.requiredtheatretype = bean.getRequiredTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getRequiredTheatreType());
		this.criticalcarebedrequired = bean.getCriticalCareBedRequired();
		this.anaesthesisriskassessmentrequest = bean.getAnaesthesisRiskAssessmentRequest();
		this.followperioperativeguidelines = bean.getFollowPeriOperativeguidelines() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getFollowPeriOperativeguidelines());
		this.periopnoreasoncomments = bean.getPeriOpNoReasonComments();
		this.proceduredtobecarriedby = bean.getProceduredToBeCarriedBy() == null ? null : ims.RefMan.vo.lookups.ProcedureExecutant.buildLookup(bean.getProceduredToBeCarriedBy());
		this.procedurecarriedoutby = bean.getProcedureCarriedOutBy() == null ? null : bean.getProcedureCarriedOutBy().buildVo(map);
		this.preassessmentrequired = bean.getPreAssessmentRequired();
		this.interpretatorrequired = bean.getInterpretatorRequired();
		this.language = bean.getLanguage() == null ? null : ims.core.vo.lookups.Language.buildLookup(bean.getLanguage());
		this.transportrequired = bean.getTransportRequired();
		this.transport = bean.getTransport() == null ? null : ims.scheduling.vo.lookups.ApptTransportType.buildLookup(bean.getTransport());
		this.specialrequirements = bean.getSpecialRequirements();
		this.specialrequirementsdetails = bean.getSpecialRequirementsDetails();
		this.comments = bean.getComments();
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo(map);
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.suspectedgibleed = bean.getSuspectedGIBleed();
		this.points = bean.getPoints();
		this.suitablefortraining = bean.getSuitableforTraining();
		this.generalanaesthetic = bean.getGeneralAnaesthetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getGeneralAnaesthetic());
		this.cannursecarryoutprocedure = bean.getCanNurseCarryOutProcedure();
		this.medicationshouldbestoppedoralbowelprep = bean.getMedicationShouldBeStoppedOralBowelPrep();
		this.druginformation = bean.getDrugInformation();
		this.haspacemakerdefib = bean.getHasPacemakerDefib();
		this.renalfunctionassessment = bean.getRenalFunctionAssessment() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getRenalFunctionAssessment());
		this.aretherekeytherapeutic = bean.getAreThereKeyTherapeutic();
		this.cognitivecomments = bean.getCognitiveComments();
		this.detailsfornongaendoprocedure = bean.getDetailsForNonGAEndoProcedure();
		this.currentsuspensionenddate = bean.getCurrentSuspensionEndDate() == null ? null : bean.getCurrentSuspensionEndDate().buildDateTime();
		this.was28dayruleapplied = bean.getWas28DayRuleApplied();
		this.notes = ims.RefMan.vo.PatientElectiveListNotesVoCollection.buildFromBeanCollection(bean.getNotes());
		this.tcicancelledbyprovider = bean.getTCICancelledByProvider();
		this.numberofprovidertcicancellations = bean.getNumberOfProviderTCICancellations();
		this.electiveliststatushistory = ims.RefMan.vo.ElectiveListStatusVoCollection.buildFromBeanCollection(bean.getElectiveListStatusHistory());
		this.preassessmentoutcome = bean.getPreAssessmentOutcome() == null ? null : bean.getPreAssessmentOutcome().buildVo(map);
		this.fitforsurgery = bean.getFitForSurgery() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getFitForSurgery());
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.availableatshortnotice = bean.getAvailableAtShortNotice();
		this.preoperativeovernightstayrequired = bean.getPreOperativeOvernightStayRequired();
		this.noofpreoperativenights = bean.getNoOfPreOperativeNights();
		this.anticipatedstay = bean.getAnticipatedStay();
		this.patientreceivinganticoagulanttherapy = bean.getPatientReceivingAnticoagulantTherapy() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPatientReceivingAnticoagulantTherapy());
		this.availableatshortnoticeperiod = bean.getAvailableAtShortNoticePeriod();
		this.subjectto28dayrule = bean.getSubjectTo28DayRule();
		this.rule28daystatus = bean.getRule28DayStatus() == null ? null : ims.scheduling.vo.lookups.Rule28DayStatus.buildLookup(bean.getRule28DayStatus());
		this.rule28dayperiodstart = bean.getRule28DayPeriodStart() == null ? null : bean.getRule28DayPeriodStart().buildDate();
		if(bean.getAdmissions() != null)
		{
			this.admissions = new ims.core.admin.pas.vo.AdmissionDetailRefVoCollection();
			for(int admissions_i = 0; admissions_i < bean.getAdmissions().length; admissions_i++)
			{
				this.admissions.add(new ims.core.admin.pas.vo.AdmissionDetailRefVo(new Integer(bean.getAdmissions()[admissions_i].getId()), bean.getAdmissions()[admissions_i].getVersion()));
			}
		}
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : bean.getTheatreAppointment().buildVo(map);
		this.systeminformation = bean.getSystemInformation() == null ? null : bean.getSystemInformation().buildSystemInformation();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo(map);
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.core.vo.lookups.PatientStatus.buildLookup(bean.getPatientCategory());
		this.vettinghcp = bean.getVettingHCP() == null ? null : bean.getVettingHCP().buildVo(map);
		this.authoringinfo = bean.getAuthoringInfo() == null ? null : bean.getAuthoringInfo().buildVo(map);
		this.requiresvetting = bean.getRequiresVetting();
		this.recordinguser = bean.getRecordingUser() == null ? null : bean.getRecordingUser().buildVo(map);
		this.precolonoscopyassessmentrequired = bean.getPreColonoscopyAssessmentRequired() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPreColonoscopyAssessmentRequired());
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PatientElectiveListDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PatientElectiveListDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PatientElectiveListDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("REFERRAL"))
			return getReferral();
		if(fieldName.equals("DATEONLIST"))
			return getDateOnList();
		if(fieldName.equals("EROD"))
			return getEROD();
		if(fieldName.equals("ERODHISTORY"))
			return getERODHistory();
		if(fieldName.equals("ELECTIVEADMISSIONTYPE"))
			return getElectiveAdmissionType();
		if(fieldName.equals("ELECTIVELISTSTATUS"))
			return getElectiveListStatus();
		if(fieldName.equals("TCIDETAILS"))
			return getTCIDetails();
		if(fieldName.equals("TCIHISTORY"))
			return getTCIHistory();
		if(fieldName.equals("ADMISSIONTYPE"))
			return getAdmissionType();
		if(fieldName.equals("ELECTIVELISTREASON"))
			return getElectiveListReason();
		if(fieldName.equals("TOBEPLANNEDIN"))
			return getToBePlannedIn();
		if(fieldName.equals("TOBEPLANNEDINUNIT"))
			return getToBePlannedInUnit();
		if(fieldName.equals("PLANNEDDATE"))
			return getPlannedDate();
		if(fieldName.equals("WASPOSSIBLEDATEGIVEN"))
			return getWasPossibleDateGiven();
		if(fieldName.equals("DATEGIVENTOPATIENT"))
			return getDateGivenToPatient();
		if(fieldName.equals("PRIMARYPROCEDURE"))
			return getPrimaryProcedure();
		if(fieldName.equals("PROCLATERALITY"))
			return getProcLaterality();
		if(fieldName.equals("PROCEDUREDESCRIPTION"))
			return getProcedureDescription();
		if(fieldName.equals("SECONDARYPROCEDURE"))
			return getSecondaryProcedure();
		if(fieldName.equals("SECONDARYPROCLATERALITY"))
			return getSecondaryProcLaterality();
		if(fieldName.equals("PRIORITY"))
			return getPriority();
		if(fieldName.equals("ELECTIVELIST"))
			return getElectiveList();
		if(fieldName.equals("ANTICIPATEDPROCEDURELENGTH"))
			return getAnticipatedProcedureLength();
		if(fieldName.equals("REQUIREDTHEATRETYPE"))
			return getRequiredTheatreType();
		if(fieldName.equals("CRITICALCAREBEDREQUIRED"))
			return getCriticalCareBedRequired();
		if(fieldName.equals("ANAESTHESISRISKASSESSMENTREQUEST"))
			return getAnaesthesisRiskAssessmentRequest();
		if(fieldName.equals("FOLLOWPERIOPERATIVEGUIDELINES"))
			return getFollowPeriOperativeguidelines();
		if(fieldName.equals("PERIOPNOREASONCOMMENTS"))
			return getPeriOpNoReasonComments();
		if(fieldName.equals("PROCEDUREDTOBECARRIEDBY"))
			return getProceduredToBeCarriedBy();
		if(fieldName.equals("PROCEDURECARRIEDOUTBY"))
			return getProcedureCarriedOutBy();
		if(fieldName.equals("PREASSESSMENTREQUIRED"))
			return getPreAssessmentRequired();
		if(fieldName.equals("INTERPRETATORREQUIRED"))
			return getInterpretatorRequired();
		if(fieldName.equals("LANGUAGE"))
			return getLanguage();
		if(fieldName.equals("TRANSPORTREQUIRED"))
			return getTransportRequired();
		if(fieldName.equals("TRANSPORT"))
			return getTransport();
		if(fieldName.equals("SPECIALREQUIREMENTS"))
			return getSpecialRequirements();
		if(fieldName.equals("SPECIALREQUIREMENTSDETAILS"))
			return getSpecialRequirementsDetails();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("HOSPITAL"))
			return getHospital();
		if(fieldName.equals("CONSULTANT"))
			return getConsultant();
		if(fieldName.equals("SUSPECTEDGIBLEED"))
			return getSuspectedGIBleed();
		if(fieldName.equals("POINTS"))
			return getPoints();
		if(fieldName.equals("SUITABLEFORTRAINING"))
			return getSuitableforTraining();
		if(fieldName.equals("GENERALANAESTHETIC"))
			return getGeneralAnaesthetic();
		if(fieldName.equals("CANNURSECARRYOUTPROCEDURE"))
			return getCanNurseCarryOutProcedure();
		if(fieldName.equals("MEDICATIONSHOULDBESTOPPEDORALBOWELPREP"))
			return getMedicationShouldBeStoppedOralBowelPrep();
		if(fieldName.equals("DRUGINFORMATION"))
			return getDrugInformation();
		if(fieldName.equals("HASPACEMAKERDEFIB"))
			return getHasPacemakerDefib();
		if(fieldName.equals("RENALFUNCTIONASSESSMENT"))
			return getRenalFunctionAssessment();
		if(fieldName.equals("ARETHEREKEYTHERAPEUTIC"))
			return getAreThereKeyTherapeutic();
		if(fieldName.equals("COGNITIVECOMMENTS"))
			return getCognitiveComments();
		if(fieldName.equals("DETAILSFORNONGAENDOPROCEDURE"))
			return getDetailsForNonGAEndoProcedure();
		if(fieldName.equals("CURRENTSUSPENSIONENDDATE"))
			return getCurrentSuspensionEndDate();
		if(fieldName.equals("WAS28DAYRULEAPPLIED"))
			return getWas28DayRuleApplied();
		if(fieldName.equals("NOTES"))
			return getNotes();
		if(fieldName.equals("TCICANCELLEDBYPROVIDER"))
			return getTCICancelledByProvider();
		if(fieldName.equals("NUMBEROFPROVIDERTCICANCELLATIONS"))
			return getNumberOfProviderTCICancellations();
		if(fieldName.equals("ELECTIVELISTSTATUSHISTORY"))
			return getElectiveListStatusHistory();
		if(fieldName.equals("PREASSESSMENTOUTCOME"))
			return getPreAssessmentOutcome();
		if(fieldName.equals("FITFORSURGERY"))
			return getFitForSurgery();
		if(fieldName.equals("ANAESTHETICTYPE"))
			return getAnaestheticType();
		if(fieldName.equals("AVAILABLEATSHORTNOTICE"))
			return getAvailableAtShortNotice();
		if(fieldName.equals("PREOPERATIVEOVERNIGHTSTAYREQUIRED"))
			return getPreOperativeOvernightStayRequired();
		if(fieldName.equals("NOOFPREOPERATIVENIGHTS"))
			return getNoOfPreOperativeNights();
		if(fieldName.equals("ANTICIPATEDSTAY"))
			return getAnticipatedStay();
		if(fieldName.equals("PATIENTRECEIVINGANTICOAGULANTTHERAPY"))
			return getPatientReceivingAnticoagulantTherapy();
		if(fieldName.equals("AVAILABLEATSHORTNOTICEPERIOD"))
			return getAvailableAtShortNoticePeriod();
		if(fieldName.equals("SUBJECTTO28DAYRULE"))
			return getSubjectTo28DayRule();
		if(fieldName.equals("RULE28DAYSTATUS"))
			return getRule28DayStatus();
		if(fieldName.equals("RULE28DAYPERIODSTART"))
			return getRule28DayPeriodStart();
		if(fieldName.equals("ADMISSIONS"))
			return getAdmissions();
		if(fieldName.equals("THEATREAPPOINTMENT"))
			return getTheatreAppointment();
		if(fieldName.equals("SYSTEMINFORMATION"))
			return getSystemInformation();
		if(fieldName.equals("WARD"))
			return getWard();
		if(fieldName.equals("PATIENTCATEGORY"))
			return getPatientCategory();
		if(fieldName.equals("VETTINGHCP"))
			return getVettingHCP();
		if(fieldName.equals("AUTHORINGINFO"))
			return getAuthoringInfo();
		if(fieldName.equals("REQUIRESVETTING"))
			return getRequiresVetting();
		if(fieldName.equals("RECORDINGUSER"))
			return getRecordingUser();
		if(fieldName.equals("PRECOLONOSCOPYASSESSMENTREQUIRED"))
			return getPreColonoscopyAssessmentRequired();
		if(fieldName.equals("RESPONSIBLEHCP"))
			return getResponsibleHCP();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getReferralIsNotNull()
	{
		return this.referral != null;
	}
	public ims.RefMan.vo.CatsReferralforElectiveListDetailsVo getReferral()
	{
		return this.referral;
	}
	public void setReferral(ims.RefMan.vo.CatsReferralforElectiveListDetailsVo value)
	{
		this.isValidated = false;
		this.referral = value;
	}
	public boolean getDateOnListIsNotNull()
	{
		return this.dateonlist != null;
	}
	public ims.framework.utils.Date getDateOnList()
	{
		return this.dateonlist;
	}
	public void setDateOnList(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateonlist = value;
	}
	public boolean getERODIsNotNull()
	{
		return this.erod != null;
	}
	public ims.RefMan.vo.ReferralERODDetailsVo getEROD()
	{
		return this.erod;
	}
	public void setEROD(ims.RefMan.vo.ReferralERODDetailsVo value)
	{
		this.isValidated = false;
		this.erod = value;
	}
	public boolean getERODHistoryIsNotNull()
	{
		return this.erodhistory != null;
	}
	public ims.RefMan.vo.ReferralERODDetailsVoCollection getERODHistory()
	{
		return this.erodhistory;
	}
	public void setERODHistory(ims.RefMan.vo.ReferralERODDetailsVoCollection value)
	{
		this.isValidated = false;
		this.erodhistory = value;
	}
	public boolean getElectiveAdmissionTypeIsNotNull()
	{
		return this.electiveadmissiontype != null;
	}
	public ims.RefMan.vo.lookups.ElectiveAdmissionType getElectiveAdmissionType()
	{
		return this.electiveadmissiontype;
	}
	public void setElectiveAdmissionType(ims.RefMan.vo.lookups.ElectiveAdmissionType value)
	{
		this.isValidated = false;
		this.electiveadmissiontype = value;
	}
	public boolean getElectiveListStatusIsNotNull()
	{
		return this.electiveliststatus != null;
	}
	public ims.RefMan.vo.ElectiveListStatusVo getElectiveListStatus()
	{
		return this.electiveliststatus;
	}
	public void setElectiveListStatus(ims.RefMan.vo.ElectiveListStatusVo value)
	{
		this.isValidated = false;
		this.electiveliststatus = value;
	}
	public boolean getTCIDetailsIsNotNull()
	{
		return this.tcidetails != null;
	}
	public ims.RefMan.vo.TCIForPatientElectiveListDetailsVo getTCIDetails()
	{
		return this.tcidetails;
	}
	public void setTCIDetails(ims.RefMan.vo.TCIForPatientElectiveListDetailsVo value)
	{
		this.isValidated = false;
		this.tcidetails = value;
	}
	public boolean getTCIHistoryIsNotNull()
	{
		return this.tcihistory != null;
	}
	public ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection getTCIHistory()
	{
		return this.tcihistory;
	}
	public void setTCIHistory(ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection value)
	{
		this.isValidated = false;
		this.tcihistory = value;
	}
	public boolean getAdmissionTypeIsNotNull()
	{
		return this.admissiontype != null;
	}
	public ims.RefMan.vo.lookups.WaitingCardAdmissionType getAdmissionType()
	{
		return this.admissiontype;
	}
	public void setAdmissionType(ims.RefMan.vo.lookups.WaitingCardAdmissionType value)
	{
		this.isValidated = false;
		this.admissiontype = value;
	}
	public boolean getElectiveListReasonIsNotNull()
	{
		return this.electivelistreason != null;
	}
	public ims.emergency.vo.lookups.ElectiveListReason getElectiveListReason()
	{
		return this.electivelistreason;
	}
	public void setElectiveListReason(ims.emergency.vo.lookups.ElectiveListReason value)
	{
		this.isValidated = false;
		this.electivelistreason = value;
	}
	public boolean getToBePlannedInIsNotNull()
	{
		return this.tobeplannedin != null;
	}
	public Integer getToBePlannedIn()
	{
		return this.tobeplannedin;
	}
	public void setToBePlannedIn(Integer value)
	{
		this.isValidated = false;
		this.tobeplannedin = value;
	}
	public boolean getToBePlannedInUnitIsNotNull()
	{
		return this.tobeplannedinunit != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getToBePlannedInUnit()
	{
		return this.tobeplannedinunit;
	}
	public void setToBePlannedInUnit(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.tobeplannedinunit = value;
	}
	public boolean getPlannedDateIsNotNull()
	{
		return this.planneddate != null;
	}
	public ims.framework.utils.Date getPlannedDate()
	{
		return this.planneddate;
	}
	public void setPlannedDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.planneddate = value;
	}
	public boolean getWasPossibleDateGivenIsNotNull()
	{
		return this.waspossibledategiven != null;
	}
	public Boolean getWasPossibleDateGiven()
	{
		return this.waspossibledategiven;
	}
	public void setWasPossibleDateGiven(Boolean value)
	{
		this.isValidated = false;
		this.waspossibledategiven = value;
	}
	public boolean getDateGivenToPatientIsNotNull()
	{
		return this.dategiventopatient != null;
	}
	public ims.framework.utils.Date getDateGivenToPatient()
	{
		return this.dategiventopatient;
	}
	public void setDateGivenToPatient(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dategiventopatient = value;
	}
	public boolean getPrimaryProcedureIsNotNull()
	{
		return this.primaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getPrimaryProcedure()
	{
		return this.primaryprocedure;
	}
	public void setPrimaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.primaryprocedure = value;
	}
	public boolean getProcLateralityIsNotNull()
	{
		return this.proclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getProcLaterality()
	{
		return this.proclaterality;
	}
	public void setProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.proclaterality = value;
	}
	public boolean getProcedureDescriptionIsNotNull()
	{
		return this.proceduredescription != null;
	}
	public String getProcedureDescription()
	{
		return this.proceduredescription;
	}
	public static int getProcedureDescriptionMaxLength()
	{
		return 255;
	}
	public void setProcedureDescription(String value)
	{
		this.isValidated = false;
		this.proceduredescription = value;
	}
	public boolean getSecondaryProcedureIsNotNull()
	{
		return this.secondaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getSecondaryProcedure()
	{
		return this.secondaryprocedure;
	}
	public void setSecondaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.secondaryprocedure = value;
	}
	public boolean getSecondaryProcLateralityIsNotNull()
	{
		return this.secondaryproclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getSecondaryProcLaterality()
	{
		return this.secondaryproclaterality;
	}
	public void setSecondaryProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.secondaryproclaterality = value;
	}
	public boolean getPriorityIsNotNull()
	{
		return this.priority != null;
	}
	public ims.RefMan.vo.lookups.ReferralUrgency getPriority()
	{
		return this.priority;
	}
	public void setPriority(ims.RefMan.vo.lookups.ReferralUrgency value)
	{
		this.isValidated = false;
		this.priority = value;
	}
	public boolean getElectiveListIsNotNull()
	{
		return this.electivelist != null;
	}
	public ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo getElectiveList()
	{
		return this.electivelist;
	}
	public void setElectiveList(ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo value)
	{
		this.isValidated = false;
		this.electivelist = value;
	}
	public boolean getAnticipatedProcedureLengthIsNotNull()
	{
		return this.anticipatedprocedurelength != null;
	}
	public Integer getAnticipatedProcedureLength()
	{
		return this.anticipatedprocedurelength;
	}
	public void setAnticipatedProcedureLength(Integer value)
	{
		this.isValidated = false;
		this.anticipatedprocedurelength = value;
	}
	public boolean getRequiredTheatreTypeIsNotNull()
	{
		return this.requiredtheatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getRequiredTheatreType()
	{
		return this.requiredtheatretype;
	}
	public void setRequiredTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.requiredtheatretype = value;
	}
	public boolean getCriticalCareBedRequiredIsNotNull()
	{
		return this.criticalcarebedrequired != null;
	}
	public Boolean getCriticalCareBedRequired()
	{
		return this.criticalcarebedrequired;
	}
	public void setCriticalCareBedRequired(Boolean value)
	{
		this.isValidated = false;
		this.criticalcarebedrequired = value;
	}
	public boolean getAnaesthesisRiskAssessmentRequestIsNotNull()
	{
		return this.anaesthesisriskassessmentrequest != null;
	}
	public Boolean getAnaesthesisRiskAssessmentRequest()
	{
		return this.anaesthesisriskassessmentrequest;
	}
	public void setAnaesthesisRiskAssessmentRequest(Boolean value)
	{
		this.isValidated = false;
		this.anaesthesisriskassessmentrequest = value;
	}
	public boolean getFollowPeriOperativeguidelinesIsNotNull()
	{
		return this.followperioperativeguidelines != null;
	}
	public ims.core.vo.lookups.YesNo getFollowPeriOperativeguidelines()
	{
		return this.followperioperativeguidelines;
	}
	public void setFollowPeriOperativeguidelines(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.followperioperativeguidelines = value;
	}
	public boolean getPeriOpNoReasonCommentsIsNotNull()
	{
		return this.periopnoreasoncomments != null;
	}
	public String getPeriOpNoReasonComments()
	{
		return this.periopnoreasoncomments;
	}
	public static int getPeriOpNoReasonCommentsMaxLength()
	{
		return 500;
	}
	public void setPeriOpNoReasonComments(String value)
	{
		this.isValidated = false;
		this.periopnoreasoncomments = value;
	}
	public boolean getProceduredToBeCarriedByIsNotNull()
	{
		return this.proceduredtobecarriedby != null;
	}
	public ims.RefMan.vo.lookups.ProcedureExecutant getProceduredToBeCarriedBy()
	{
		return this.proceduredtobecarriedby;
	}
	public void setProceduredToBeCarriedBy(ims.RefMan.vo.lookups.ProcedureExecutant value)
	{
		this.isValidated = false;
		this.proceduredtobecarriedby = value;
	}
	public boolean getProcedureCarriedOutByIsNotNull()
	{
		return this.procedurecarriedoutby != null;
	}
	public ims.core.vo.HcpLiteVo getProcedureCarriedOutBy()
	{
		return this.procedurecarriedoutby;
	}
	public void setProcedureCarriedOutBy(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.procedurecarriedoutby = value;
	}
	public boolean getPreAssessmentRequiredIsNotNull()
	{
		return this.preassessmentrequired != null;
	}
	public Boolean getPreAssessmentRequired()
	{
		return this.preassessmentrequired;
	}
	public void setPreAssessmentRequired(Boolean value)
	{
		this.isValidated = false;
		this.preassessmentrequired = value;
	}
	public boolean getInterpretatorRequiredIsNotNull()
	{
		return this.interpretatorrequired != null;
	}
	public Boolean getInterpretatorRequired()
	{
		return this.interpretatorrequired;
	}
	public void setInterpretatorRequired(Boolean value)
	{
		this.isValidated = false;
		this.interpretatorrequired = value;
	}
	public boolean getLanguageIsNotNull()
	{
		return this.language != null;
	}
	public ims.core.vo.lookups.Language getLanguage()
	{
		return this.language;
	}
	public void setLanguage(ims.core.vo.lookups.Language value)
	{
		this.isValidated = false;
		this.language = value;
	}
	public boolean getTransportRequiredIsNotNull()
	{
		return this.transportrequired != null;
	}
	public Boolean getTransportRequired()
	{
		return this.transportrequired;
	}
	public void setTransportRequired(Boolean value)
	{
		this.isValidated = false;
		this.transportrequired = value;
	}
	public boolean getTransportIsNotNull()
	{
		return this.transport != null;
	}
	public ims.scheduling.vo.lookups.ApptTransportType getTransport()
	{
		return this.transport;
	}
	public void setTransport(ims.scheduling.vo.lookups.ApptTransportType value)
	{
		this.isValidated = false;
		this.transport = value;
	}
	public boolean getSpecialRequirementsIsNotNull()
	{
		return this.specialrequirements != null;
	}
	public Boolean getSpecialRequirements()
	{
		return this.specialrequirements;
	}
	public void setSpecialRequirements(Boolean value)
	{
		this.isValidated = false;
		this.specialrequirements = value;
	}
	public boolean getSpecialRequirementsDetailsIsNotNull()
	{
		return this.specialrequirementsdetails != null;
	}
	public String getSpecialRequirementsDetails()
	{
		return this.specialrequirementsdetails;
	}
	public static int getSpecialRequirementsDetailsMaxLength()
	{
		return 1000;
	}
	public void setSpecialRequirementsDetails(String value)
	{
		this.isValidated = false;
		this.specialrequirementsdetails = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 255;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getHospitalIsNotNull()
	{
		return this.hospital != null;
	}
	public ims.core.vo.LocationLiteVo getHospital()
	{
		return this.hospital;
	}
	public void setHospital(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.hospital = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public ims.core.vo.HcpLiteVo getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getSuspectedGIBleedIsNotNull()
	{
		return this.suspectedgibleed != null;
	}
	public Boolean getSuspectedGIBleed()
	{
		return this.suspectedgibleed;
	}
	public void setSuspectedGIBleed(Boolean value)
	{
		this.isValidated = false;
		this.suspectedgibleed = value;
	}
	public boolean getPointsIsNotNull()
	{
		return this.points != null;
	}
	public Integer getPoints()
	{
		return this.points;
	}
	public void setPoints(Integer value)
	{
		this.isValidated = false;
		this.points = value;
	}
	public boolean getSuitableforTrainingIsNotNull()
	{
		return this.suitablefortraining != null;
	}
	public Boolean getSuitableforTraining()
	{
		return this.suitablefortraining;
	}
	public void setSuitableforTraining(Boolean value)
	{
		this.isValidated = false;
		this.suitablefortraining = value;
	}
	public boolean getGeneralAnaestheticIsNotNull()
	{
		return this.generalanaesthetic != null;
	}
	public ims.core.vo.lookups.YesNo getGeneralAnaesthetic()
	{
		return this.generalanaesthetic;
	}
	public void setGeneralAnaesthetic(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.generalanaesthetic = value;
	}
	public boolean getCanNurseCarryOutProcedureIsNotNull()
	{
		return this.cannursecarryoutprocedure != null;
	}
	public Boolean getCanNurseCarryOutProcedure()
	{
		return this.cannursecarryoutprocedure;
	}
	public void setCanNurseCarryOutProcedure(Boolean value)
	{
		this.isValidated = false;
		this.cannursecarryoutprocedure = value;
	}
	public boolean getMedicationShouldBeStoppedOralBowelPrepIsNotNull()
	{
		return this.medicationshouldbestoppedoralbowelprep != null;
	}
	public Boolean getMedicationShouldBeStoppedOralBowelPrep()
	{
		return this.medicationshouldbestoppedoralbowelprep;
	}
	public void setMedicationShouldBeStoppedOralBowelPrep(Boolean value)
	{
		this.isValidated = false;
		this.medicationshouldbestoppedoralbowelprep = value;
	}
	public boolean getDrugInformationIsNotNull()
	{
		return this.druginformation != null;
	}
	public String getDrugInformation()
	{
		return this.druginformation;
	}
	public static int getDrugInformationMaxLength()
	{
		return 1000;
	}
	public void setDrugInformation(String value)
	{
		this.isValidated = false;
		this.druginformation = value;
	}
	public boolean getHasPacemakerDefibIsNotNull()
	{
		return this.haspacemakerdefib != null;
	}
	public Boolean getHasPacemakerDefib()
	{
		return this.haspacemakerdefib;
	}
	public void setHasPacemakerDefib(Boolean value)
	{
		this.isValidated = false;
		this.haspacemakerdefib = value;
	}
	public boolean getRenalFunctionAssessmentIsNotNull()
	{
		return this.renalfunctionassessment != null;
	}
	public ims.core.vo.lookups.YesNo getRenalFunctionAssessment()
	{
		return this.renalfunctionassessment;
	}
	public void setRenalFunctionAssessment(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.renalfunctionassessment = value;
	}
	public boolean getAreThereKeyTherapeuticIsNotNull()
	{
		return this.aretherekeytherapeutic != null;
	}
	public Boolean getAreThereKeyTherapeutic()
	{
		return this.aretherekeytherapeutic;
	}
	public void setAreThereKeyTherapeutic(Boolean value)
	{
		this.isValidated = false;
		this.aretherekeytherapeutic = value;
	}
	public boolean getCognitiveCommentsIsNotNull()
	{
		return this.cognitivecomments != null;
	}
	public String getCognitiveComments()
	{
		return this.cognitivecomments;
	}
	public static int getCognitiveCommentsMaxLength()
	{
		return 500;
	}
	public void setCognitiveComments(String value)
	{
		this.isValidated = false;
		this.cognitivecomments = value;
	}
	public boolean getDetailsForNonGAEndoProcedureIsNotNull()
	{
		return this.detailsfornongaendoprocedure != null;
	}
	public String getDetailsForNonGAEndoProcedure()
	{
		return this.detailsfornongaendoprocedure;
	}
	public static int getDetailsForNonGAEndoProcedureMaxLength()
	{
		return 500;
	}
	public void setDetailsForNonGAEndoProcedure(String value)
	{
		this.isValidated = false;
		this.detailsfornongaendoprocedure = value;
	}
	public boolean getCurrentSuspensionEndDateIsNotNull()
	{
		return this.currentsuspensionenddate != null;
	}
	public ims.framework.utils.DateTime getCurrentSuspensionEndDate()
	{
		return this.currentsuspensionenddate;
	}
	public void setCurrentSuspensionEndDate(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.currentsuspensionenddate = value;
	}
	public boolean getWas28DayRuleAppliedIsNotNull()
	{
		return this.was28dayruleapplied != null;
	}
	public Boolean getWas28DayRuleApplied()
	{
		return this.was28dayruleapplied;
	}
	public void setWas28DayRuleApplied(Boolean value)
	{
		this.isValidated = false;
		this.was28dayruleapplied = value;
	}
	public boolean getNotesIsNotNull()
	{
		return this.notes != null;
	}
	public ims.RefMan.vo.PatientElectiveListNotesVoCollection getNotes()
	{
		return this.notes;
	}
	public void setNotes(ims.RefMan.vo.PatientElectiveListNotesVoCollection value)
	{
		this.isValidated = false;
		this.notes = value;
	}
	public boolean getTCICancelledByProviderIsNotNull()
	{
		return this.tcicancelledbyprovider != null;
	}
	public Boolean getTCICancelledByProvider()
	{
		return this.tcicancelledbyprovider;
	}
	public void setTCICancelledByProvider(Boolean value)
	{
		this.isValidated = false;
		this.tcicancelledbyprovider = value;
	}
	public boolean getNumberOfProviderTCICancellationsIsNotNull()
	{
		return this.numberofprovidertcicancellations != null;
	}
	public Integer getNumberOfProviderTCICancellations()
	{
		return this.numberofprovidertcicancellations;
	}
	public void setNumberOfProviderTCICancellations(Integer value)
	{
		this.isValidated = false;
		this.numberofprovidertcicancellations = value;
	}
	public boolean getElectiveListStatusHistoryIsNotNull()
	{
		return this.electiveliststatushistory != null;
	}
	public ims.RefMan.vo.ElectiveListStatusVoCollection getElectiveListStatusHistory()
	{
		return this.electiveliststatushistory;
	}
	public void setElectiveListStatusHistory(ims.RefMan.vo.ElectiveListStatusVoCollection value)
	{
		this.isValidated = false;
		this.electiveliststatushistory = value;
	}
	public boolean getPreAssessmentOutcomeIsNotNull()
	{
		return this.preassessmentoutcome != null;
	}
	public ims.RefMan.vo.PreAssessmentOutcomeForElectiveListDetailsVo getPreAssessmentOutcome()
	{
		return this.preassessmentoutcome;
	}
	public void setPreAssessmentOutcome(ims.RefMan.vo.PreAssessmentOutcomeForElectiveListDetailsVo value)
	{
		this.isValidated = false;
		this.preassessmentoutcome = value;
	}
	public boolean getFitForSurgeryIsNotNull()
	{
		return this.fitforsurgery != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getFitForSurgery()
	{
		return this.fitforsurgery;
	}
	public void setFitForSurgery(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.fitforsurgery = value;
	}
	public boolean getAnaestheticTypeIsNotNull()
	{
		return this.anaesthetictype != null;
	}
	public ims.clinical.vo.lookups.AnaestheticType getAnaestheticType()
	{
		return this.anaesthetictype;
	}
	public void setAnaestheticType(ims.clinical.vo.lookups.AnaestheticType value)
	{
		this.isValidated = false;
		this.anaesthetictype = value;
	}
	public boolean getAvailableAtShortNoticeIsNotNull()
	{
		return this.availableatshortnotice != null;
	}
	public Boolean getAvailableAtShortNotice()
	{
		return this.availableatshortnotice;
	}
	public void setAvailableAtShortNotice(Boolean value)
	{
		this.isValidated = false;
		this.availableatshortnotice = value;
	}
	public boolean getPreOperativeOvernightStayRequiredIsNotNull()
	{
		return this.preoperativeovernightstayrequired != null;
	}
	public Boolean getPreOperativeOvernightStayRequired()
	{
		return this.preoperativeovernightstayrequired;
	}
	public void setPreOperativeOvernightStayRequired(Boolean value)
	{
		this.isValidated = false;
		this.preoperativeovernightstayrequired = value;
	}
	public boolean getNoOfPreOperativeNightsIsNotNull()
	{
		return this.noofpreoperativenights != null;
	}
	public Integer getNoOfPreOperativeNights()
	{
		return this.noofpreoperativenights;
	}
	public void setNoOfPreOperativeNights(Integer value)
	{
		this.isValidated = false;
		this.noofpreoperativenights = value;
	}
	public boolean getAnticipatedStayIsNotNull()
	{
		return this.anticipatedstay != null;
	}
	public Integer getAnticipatedStay()
	{
		return this.anticipatedstay;
	}
	public void setAnticipatedStay(Integer value)
	{
		this.isValidated = false;
		this.anticipatedstay = value;
	}
	public boolean getPatientReceivingAnticoagulantTherapyIsNotNull()
	{
		return this.patientreceivinganticoagulanttherapy != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getPatientReceivingAnticoagulantTherapy()
	{
		return this.patientreceivinganticoagulanttherapy;
	}
	public void setPatientReceivingAnticoagulantTherapy(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.patientreceivinganticoagulanttherapy = value;
	}
	public boolean getAvailableAtShortNoticePeriodIsNotNull()
	{
		return this.availableatshortnoticeperiod != null;
	}
	public Integer getAvailableAtShortNoticePeriod()
	{
		return this.availableatshortnoticeperiod;
	}
	public void setAvailableAtShortNoticePeriod(Integer value)
	{
		this.isValidated = false;
		this.availableatshortnoticeperiod = value;
	}
	public boolean getSubjectTo28DayRuleIsNotNull()
	{
		return this.subjectto28dayrule != null;
	}
	public Boolean getSubjectTo28DayRule()
	{
		return this.subjectto28dayrule;
	}
	public void setSubjectTo28DayRule(Boolean value)
	{
		this.isValidated = false;
		this.subjectto28dayrule = value;
	}
	public boolean getRule28DayStatusIsNotNull()
	{
		return this.rule28daystatus != null;
	}
	public ims.scheduling.vo.lookups.Rule28DayStatus getRule28DayStatus()
	{
		return this.rule28daystatus;
	}
	public void setRule28DayStatus(ims.scheduling.vo.lookups.Rule28DayStatus value)
	{
		this.isValidated = false;
		this.rule28daystatus = value;
	}
	public boolean getRule28DayPeriodStartIsNotNull()
	{
		return this.rule28dayperiodstart != null;
	}
	public ims.framework.utils.Date getRule28DayPeriodStart()
	{
		return this.rule28dayperiodstart;
	}
	public void setRule28DayPeriodStart(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.rule28dayperiodstart = value;
	}
	public boolean getAdmissionsIsNotNull()
	{
		return this.admissions != null;
	}
	public ims.core.admin.pas.vo.AdmissionDetailRefVoCollection getAdmissions()
	{
		return this.admissions;
	}
	public void setAdmissions(ims.core.admin.pas.vo.AdmissionDetailRefVoCollection value)
	{
		this.isValidated = false;
		this.admissions = value;
	}
	public boolean getTheatreAppointmentIsNotNull()
	{
		return this.theatreappointment != null;
	}
	public ims.scheduling.vo.Booking_AppointmentLiteVo getTheatreAppointment()
	{
		return this.theatreappointment;
	}
	public void setTheatreAppointment(ims.scheduling.vo.Booking_AppointmentLiteVo value)
	{
		this.isValidated = false;
		this.theatreappointment = value;
	}
	public boolean getSystemInformationIsNotNull()
	{
		return this.systeminformation != null;
	}
	public ims.vo.SystemInformation getSystemInformation()
	{
		return this.systeminformation;
	}
	public void setSystemInformation(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.systeminformation = value;
	}
	public boolean getWardIsNotNull()
	{
		return this.ward != null;
	}
	public ims.core.vo.LocationLiteVo getWard()
	{
		return this.ward;
	}
	public void setWard(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.ward = value;
	}
	public boolean getPatientCategoryIsNotNull()
	{
		return this.patientcategory != null;
	}
	public ims.core.vo.lookups.PatientStatus getPatientCategory()
	{
		return this.patientcategory;
	}
	public void setPatientCategory(ims.core.vo.lookups.PatientStatus value)
	{
		this.isValidated = false;
		this.patientcategory = value;
	}
	public boolean getVettingHCPIsNotNull()
	{
		return this.vettinghcp != null;
	}
	public ims.core.vo.HcpLiteVo getVettingHCP()
	{
		return this.vettinghcp;
	}
	public void setVettingHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.vettinghcp = value;
	}
	public boolean getAuthoringInfoIsNotNull()
	{
		return this.authoringinfo != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInfo()
	{
		return this.authoringinfo;
	}
	public void setAuthoringInfo(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinfo = value;
	}
	public boolean getRequiresVettingIsNotNull()
	{
		return this.requiresvetting != null;
	}
	public Boolean getRequiresVetting()
	{
		return this.requiresvetting;
	}
	public void setRequiresVetting(Boolean value)
	{
		this.isValidated = false;
		this.requiresvetting = value;
	}
	public boolean getRecordingUserIsNotNull()
	{
		return this.recordinguser != null;
	}
	public ims.RefMan.vo.RecordingUserInformationForWLCVo getRecordingUser()
	{
		return this.recordinguser;
	}
	public void setRecordingUser(ims.RefMan.vo.RecordingUserInformationForWLCVo value)
	{
		this.isValidated = false;
		this.recordinguser = value;
	}
	public boolean getPreColonoscopyAssessmentRequiredIsNotNull()
	{
		return this.precolonoscopyassessmentrequired != null;
	}
	public ims.core.vo.lookups.YesNo getPreColonoscopyAssessmentRequired()
	{
		return this.precolonoscopyassessmentrequired;
	}
	public void setPreColonoscopyAssessmentRequired(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.precolonoscopyassessmentrequired = value;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.vo.HcpLiteVo getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.erod != null)
		{
			if(!this.erod.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.erodhistory != null)
		{
			if(!this.erodhistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.electiveliststatus != null)
		{
			if(!this.electiveliststatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.tcidetails != null)
		{
			if(!this.tcidetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.notes != null)
		{
			if(!this.notes.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.electiveliststatushistory != null)
		{
			if(!this.electiveliststatushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.theatreappointment != null)
		{
			if(!this.theatreappointment.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinfo != null)
		{
			if(!this.authoringinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.recordinguser != null)
		{
			if(!this.recordinguser.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.referral == null)
			listOfErrors.add("Referral is mandatory");
		if(this.dateonlist == null)
			listOfErrors.add("DateOnList is mandatory");
		if(this.erod != null)
		{
			String[] listOfOtherErrors = this.erod.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.erodhistory != null)
		{
			String[] listOfOtherErrors = this.erodhistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.electiveadmissiontype == null)
			listOfErrors.add("ElectiveAdmissionType is mandatory");
		if(this.electiveliststatus == null)
			listOfErrors.add("ElectiveListStatus is mandatory");
		if(this.electiveliststatus != null)
		{
			String[] listOfOtherErrors = this.electiveliststatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.tcidetails != null)
		{
			String[] listOfOtherErrors = this.tcidetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.electivelistreason == null)
			listOfErrors.add("ElectiveListReason is mandatory");
		if(this.proceduredescription != null)
			if(this.proceduredescription.length() > 255)
				listOfErrors.add("The length of the field [proceduredescription] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 255");
		if(this.periopnoreasoncomments != null)
			if(this.periopnoreasoncomments.length() > 500)
				listOfErrors.add("The length of the field [periopnoreasoncomments] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 500");
		if(this.specialrequirementsdetails != null)
			if(this.specialrequirementsdetails.length() > 1000)
				listOfErrors.add("The length of the field [specialrequirementsdetails] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 1000");
		if(this.comments != null)
			if(this.comments.length() > 255)
				listOfErrors.add("The length of the field [comments] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 255");
		if(this.druginformation != null)
			if(this.druginformation.length() > 1000)
				listOfErrors.add("The length of the field [druginformation] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 1000");
		if(this.cognitivecomments != null)
			if(this.cognitivecomments.length() > 500)
				listOfErrors.add("The length of the field [cognitivecomments] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 500");
		if(this.detailsfornongaendoprocedure != null)
			if(this.detailsfornongaendoprocedure.length() > 500)
				listOfErrors.add("The length of the field [detailsfornongaendoprocedure] in the value object [ims.RefMan.vo.PatientElectiveListDetailsVo] is too big. It should be less or equal to 500");
		if(this.notes != null)
		{
			String[] listOfOtherErrors = this.notes.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.electiveliststatushistory != null)
		{
			String[] listOfOtherErrors = this.electiveliststatushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.theatreappointment != null)
		{
			String[] listOfOtherErrors = this.theatreappointment.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringinfo != null)
		{
			String[] listOfOtherErrors = this.authoringinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.recordinguser != null)
		{
			String[] listOfOtherErrors = this.recordinguser.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientElectiveListDetailsVo clone = new PatientElectiveListDetailsVo(this.id, this.version);
		
		clone.patient = this.patient;
		if(this.referral == null)
			clone.referral = null;
		else
			clone.referral = (ims.RefMan.vo.CatsReferralforElectiveListDetailsVo)this.referral.clone();
		if(this.dateonlist == null)
			clone.dateonlist = null;
		else
			clone.dateonlist = (ims.framework.utils.Date)this.dateonlist.clone();
		if(this.erod == null)
			clone.erod = null;
		else
			clone.erod = (ims.RefMan.vo.ReferralERODDetailsVo)this.erod.clone();
		if(this.erodhistory == null)
			clone.erodhistory = null;
		else
			clone.erodhistory = (ims.RefMan.vo.ReferralERODDetailsVoCollection)this.erodhistory.clone();
		if(this.electiveadmissiontype == null)
			clone.electiveadmissiontype = null;
		else
			clone.electiveadmissiontype = (ims.RefMan.vo.lookups.ElectiveAdmissionType)this.electiveadmissiontype.clone();
		if(this.electiveliststatus == null)
			clone.electiveliststatus = null;
		else
			clone.electiveliststatus = (ims.RefMan.vo.ElectiveListStatusVo)this.electiveliststatus.clone();
		if(this.tcidetails == null)
			clone.tcidetails = null;
		else
			clone.tcidetails = (ims.RefMan.vo.TCIForPatientElectiveListDetailsVo)this.tcidetails.clone();
		if(this.tcihistory == null)
			clone.tcihistory = null;
		else
			clone.tcihistory = (ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection)this.tcihistory.clone();
		if(this.admissiontype == null)
			clone.admissiontype = null;
		else
			clone.admissiontype = (ims.RefMan.vo.lookups.WaitingCardAdmissionType)this.admissiontype.clone();
		if(this.electivelistreason == null)
			clone.electivelistreason = null;
		else
			clone.electivelistreason = (ims.emergency.vo.lookups.ElectiveListReason)this.electivelistreason.clone();
		clone.tobeplannedin = this.tobeplannedin;
		if(this.tobeplannedinunit == null)
			clone.tobeplannedinunit = null;
		else
			clone.tobeplannedinunit = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.tobeplannedinunit.clone();
		if(this.planneddate == null)
			clone.planneddate = null;
		else
			clone.planneddate = (ims.framework.utils.Date)this.planneddate.clone();
		clone.waspossibledategiven = this.waspossibledategiven;
		if(this.dategiventopatient == null)
			clone.dategiventopatient = null;
		else
			clone.dategiventopatient = (ims.framework.utils.Date)this.dategiventopatient.clone();
		if(this.primaryprocedure == null)
			clone.primaryprocedure = null;
		else
			clone.primaryprocedure = (ims.core.vo.ProcedureLiteVo)this.primaryprocedure.clone();
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		clone.proceduredescription = this.proceduredescription;
		if(this.secondaryprocedure == null)
			clone.secondaryprocedure = null;
		else
			clone.secondaryprocedure = (ims.core.vo.ProcedureLiteVo)this.secondaryprocedure.clone();
		if(this.secondaryproclaterality == null)
			clone.secondaryproclaterality = null;
		else
			clone.secondaryproclaterality = (ims.core.vo.lookups.LateralityLRB)this.secondaryproclaterality.clone();
		if(this.priority == null)
			clone.priority = null;
		else
			clone.priority = (ims.RefMan.vo.lookups.ReferralUrgency)this.priority.clone();
		if(this.electivelist == null)
			clone.electivelist = null;
		else
			clone.electivelist = (ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo)this.electivelist.clone();
		clone.anticipatedprocedurelength = this.anticipatedprocedurelength;
		if(this.requiredtheatretype == null)
			clone.requiredtheatretype = null;
		else
			clone.requiredtheatretype = (ims.scheduling.vo.lookups.TheatreType)this.requiredtheatretype.clone();
		clone.criticalcarebedrequired = this.criticalcarebedrequired;
		clone.anaesthesisriskassessmentrequest = this.anaesthesisriskassessmentrequest;
		if(this.followperioperativeguidelines == null)
			clone.followperioperativeguidelines = null;
		else
			clone.followperioperativeguidelines = (ims.core.vo.lookups.YesNo)this.followperioperativeguidelines.clone();
		clone.periopnoreasoncomments = this.periopnoreasoncomments;
		if(this.proceduredtobecarriedby == null)
			clone.proceduredtobecarriedby = null;
		else
			clone.proceduredtobecarriedby = (ims.RefMan.vo.lookups.ProcedureExecutant)this.proceduredtobecarriedby.clone();
		if(this.procedurecarriedoutby == null)
			clone.procedurecarriedoutby = null;
		else
			clone.procedurecarriedoutby = (ims.core.vo.HcpLiteVo)this.procedurecarriedoutby.clone();
		clone.preassessmentrequired = this.preassessmentrequired;
		clone.interpretatorrequired = this.interpretatorrequired;
		if(this.language == null)
			clone.language = null;
		else
			clone.language = (ims.core.vo.lookups.Language)this.language.clone();
		clone.transportrequired = this.transportrequired;
		if(this.transport == null)
			clone.transport = null;
		else
			clone.transport = (ims.scheduling.vo.lookups.ApptTransportType)this.transport.clone();
		clone.specialrequirements = this.specialrequirements;
		clone.specialrequirementsdetails = this.specialrequirementsdetails;
		clone.comments = this.comments;
		if(this.hospital == null)
			clone.hospital = null;
		else
			clone.hospital = (ims.core.vo.LocationLiteVo)this.hospital.clone();
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.HcpLiteVo)this.consultant.clone();
		clone.suspectedgibleed = this.suspectedgibleed;
		clone.points = this.points;
		clone.suitablefortraining = this.suitablefortraining;
		if(this.generalanaesthetic == null)
			clone.generalanaesthetic = null;
		else
			clone.generalanaesthetic = (ims.core.vo.lookups.YesNo)this.generalanaesthetic.clone();
		clone.cannursecarryoutprocedure = this.cannursecarryoutprocedure;
		clone.medicationshouldbestoppedoralbowelprep = this.medicationshouldbestoppedoralbowelprep;
		clone.druginformation = this.druginformation;
		clone.haspacemakerdefib = this.haspacemakerdefib;
		if(this.renalfunctionassessment == null)
			clone.renalfunctionassessment = null;
		else
			clone.renalfunctionassessment = (ims.core.vo.lookups.YesNo)this.renalfunctionassessment.clone();
		clone.aretherekeytherapeutic = this.aretherekeytherapeutic;
		clone.cognitivecomments = this.cognitivecomments;
		clone.detailsfornongaendoprocedure = this.detailsfornongaendoprocedure;
		if(this.currentsuspensionenddate == null)
			clone.currentsuspensionenddate = null;
		else
			clone.currentsuspensionenddate = (ims.framework.utils.DateTime)this.currentsuspensionenddate.clone();
		clone.was28dayruleapplied = this.was28dayruleapplied;
		if(this.notes == null)
			clone.notes = null;
		else
			clone.notes = (ims.RefMan.vo.PatientElectiveListNotesVoCollection)this.notes.clone();
		clone.tcicancelledbyprovider = this.tcicancelledbyprovider;
		clone.numberofprovidertcicancellations = this.numberofprovidertcicancellations;
		if(this.electiveliststatushistory == null)
			clone.electiveliststatushistory = null;
		else
			clone.electiveliststatushistory = (ims.RefMan.vo.ElectiveListStatusVoCollection)this.electiveliststatushistory.clone();
		if(this.preassessmentoutcome == null)
			clone.preassessmentoutcome = null;
		else
			clone.preassessmentoutcome = (ims.RefMan.vo.PreAssessmentOutcomeForElectiveListDetailsVo)this.preassessmentoutcome.clone();
		if(this.fitforsurgery == null)
			clone.fitforsurgery = null;
		else
			clone.fitforsurgery = (ims.core.vo.lookups.YesNoUnknown)this.fitforsurgery.clone();
		if(this.anaesthetictype == null)
			clone.anaesthetictype = null;
		else
			clone.anaesthetictype = (ims.clinical.vo.lookups.AnaestheticType)this.anaesthetictype.clone();
		clone.availableatshortnotice = this.availableatshortnotice;
		clone.preoperativeovernightstayrequired = this.preoperativeovernightstayrequired;
		clone.noofpreoperativenights = this.noofpreoperativenights;
		clone.anticipatedstay = this.anticipatedstay;
		if(this.patientreceivinganticoagulanttherapy == null)
			clone.patientreceivinganticoagulanttherapy = null;
		else
			clone.patientreceivinganticoagulanttherapy = (ims.core.vo.lookups.YesNoUnknown)this.patientreceivinganticoagulanttherapy.clone();
		clone.availableatshortnoticeperiod = this.availableatshortnoticeperiod;
		clone.subjectto28dayrule = this.subjectto28dayrule;
		if(this.rule28daystatus == null)
			clone.rule28daystatus = null;
		else
			clone.rule28daystatus = (ims.scheduling.vo.lookups.Rule28DayStatus)this.rule28daystatus.clone();
		if(this.rule28dayperiodstart == null)
			clone.rule28dayperiodstart = null;
		else
			clone.rule28dayperiodstart = (ims.framework.utils.Date)this.rule28dayperiodstart.clone();
		clone.admissions = this.admissions;
		if(this.theatreappointment == null)
			clone.theatreappointment = null;
		else
			clone.theatreappointment = (ims.scheduling.vo.Booking_AppointmentLiteVo)this.theatreappointment.clone();
		if(this.systeminformation == null)
			clone.systeminformation = null;
		else
			clone.systeminformation = (ims.vo.SystemInformation)this.systeminformation.clone();
		if(this.ward == null)
			clone.ward = null;
		else
			clone.ward = (ims.core.vo.LocationLiteVo)this.ward.clone();
		if(this.patientcategory == null)
			clone.patientcategory = null;
		else
			clone.patientcategory = (ims.core.vo.lookups.PatientStatus)this.patientcategory.clone();
		if(this.vettinghcp == null)
			clone.vettinghcp = null;
		else
			clone.vettinghcp = (ims.core.vo.HcpLiteVo)this.vettinghcp.clone();
		if(this.authoringinfo == null)
			clone.authoringinfo = null;
		else
			clone.authoringinfo = (ims.core.vo.AuthoringInformationVo)this.authoringinfo.clone();
		clone.requiresvetting = this.requiresvetting;
		if(this.recordinguser == null)
			clone.recordinguser = null;
		else
			clone.recordinguser = (ims.RefMan.vo.RecordingUserInformationForWLCVo)this.recordinguser.clone();
		if(this.precolonoscopyassessmentrequired == null)
			clone.precolonoscopyassessmentrequired = null;
		else
			clone.precolonoscopyassessmentrequired = (ims.core.vo.lookups.YesNo)this.precolonoscopyassessmentrequired.clone();
		if(this.responsiblehcp == null)
			clone.responsiblehcp = null;
		else
			clone.responsiblehcp = (ims.core.vo.HcpLiteVo)this.responsiblehcp.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientElectiveListDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientElectiveListDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientElectiveListDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientElectiveListDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.referral != null)
			count++;
		if(this.dateonlist != null)
			count++;
		if(this.erod != null)
			count++;
		if(this.erodhistory != null)
			count++;
		if(this.electiveadmissiontype != null)
			count++;
		if(this.electiveliststatus != null)
			count++;
		if(this.tcidetails != null)
			count++;
		if(this.tcihistory != null)
			count++;
		if(this.admissiontype != null)
			count++;
		if(this.electivelistreason != null)
			count++;
		if(this.tobeplannedin != null)
			count++;
		if(this.tobeplannedinunit != null)
			count++;
		if(this.planneddate != null)
			count++;
		if(this.waspossibledategiven != null)
			count++;
		if(this.dategiventopatient != null)
			count++;
		if(this.primaryprocedure != null)
			count++;
		if(this.proclaterality != null)
			count++;
		if(this.proceduredescription != null)
			count++;
		if(this.secondaryprocedure != null)
			count++;
		if(this.secondaryproclaterality != null)
			count++;
		if(this.priority != null)
			count++;
		if(this.electivelist != null)
			count++;
		if(this.anticipatedprocedurelength != null)
			count++;
		if(this.requiredtheatretype != null)
			count++;
		if(this.criticalcarebedrequired != null)
			count++;
		if(this.anaesthesisriskassessmentrequest != null)
			count++;
		if(this.followperioperativeguidelines != null)
			count++;
		if(this.periopnoreasoncomments != null)
			count++;
		if(this.proceduredtobecarriedby != null)
			count++;
		if(this.procedurecarriedoutby != null)
			count++;
		if(this.preassessmentrequired != null)
			count++;
		if(this.interpretatorrequired != null)
			count++;
		if(this.language != null)
			count++;
		if(this.transportrequired != null)
			count++;
		if(this.transport != null)
			count++;
		if(this.specialrequirements != null)
			count++;
		if(this.specialrequirementsdetails != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.hospital != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.suspectedgibleed != null)
			count++;
		if(this.points != null)
			count++;
		if(this.suitablefortraining != null)
			count++;
		if(this.generalanaesthetic != null)
			count++;
		if(this.cannursecarryoutprocedure != null)
			count++;
		if(this.medicationshouldbestoppedoralbowelprep != null)
			count++;
		if(this.druginformation != null)
			count++;
		if(this.haspacemakerdefib != null)
			count++;
		if(this.renalfunctionassessment != null)
			count++;
		if(this.aretherekeytherapeutic != null)
			count++;
		if(this.cognitivecomments != null)
			count++;
		if(this.detailsfornongaendoprocedure != null)
			count++;
		if(this.currentsuspensionenddate != null)
			count++;
		if(this.was28dayruleapplied != null)
			count++;
		if(this.notes != null)
			count++;
		if(this.tcicancelledbyprovider != null)
			count++;
		if(this.numberofprovidertcicancellations != null)
			count++;
		if(this.electiveliststatushistory != null)
			count++;
		if(this.preassessmentoutcome != null)
			count++;
		if(this.fitforsurgery != null)
			count++;
		if(this.anaesthetictype != null)
			count++;
		if(this.availableatshortnotice != null)
			count++;
		if(this.preoperativeovernightstayrequired != null)
			count++;
		if(this.noofpreoperativenights != null)
			count++;
		if(this.anticipatedstay != null)
			count++;
		if(this.patientreceivinganticoagulanttherapy != null)
			count++;
		if(this.availableatshortnoticeperiod != null)
			count++;
		if(this.subjectto28dayrule != null)
			count++;
		if(this.rule28daystatus != null)
			count++;
		if(this.rule28dayperiodstart != null)
			count++;
		if(this.admissions != null)
			count++;
		if(this.theatreappointment != null)
			count++;
		if(this.systeminformation != null)
			count++;
		if(this.ward != null)
			count++;
		if(this.patientcategory != null)
			count++;
		if(this.vettinghcp != null)
			count++;
		if(this.authoringinfo != null)
			count++;
		if(this.requiresvetting != null)
			count++;
		if(this.recordinguser != null)
			count++;
		if(this.precolonoscopyassessmentrequired != null)
			count++;
		if(this.responsiblehcp != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 82;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.RefMan.vo.CatsReferralforElectiveListDetailsVo referral;
	protected ims.framework.utils.Date dateonlist;
	protected ims.RefMan.vo.ReferralERODDetailsVo erod;
	protected ims.RefMan.vo.ReferralERODDetailsVoCollection erodhistory;
	protected ims.RefMan.vo.lookups.ElectiveAdmissionType electiveadmissiontype;
	protected ims.RefMan.vo.ElectiveListStatusVo electiveliststatus;
	protected ims.RefMan.vo.TCIForPatientElectiveListDetailsVo tcidetails;
	protected ims.RefMan.vo.TCIForPatientElectiveListDetailsVoCollection tcihistory;
	protected ims.RefMan.vo.lookups.WaitingCardAdmissionType admissiontype;
	protected ims.emergency.vo.lookups.ElectiveListReason electivelistreason;
	protected Integer tobeplannedin;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths tobeplannedinunit;
	protected ims.framework.utils.Date planneddate;
	protected Boolean waspossibledategiven;
	protected ims.framework.utils.Date dategiventopatient;
	protected ims.core.vo.ProcedureLiteVo primaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB proclaterality;
	protected String proceduredescription;
	protected ims.core.vo.ProcedureLiteVo secondaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB secondaryproclaterality;
	protected ims.RefMan.vo.lookups.ReferralUrgency priority;
	protected ims.admin.vo.ElectiveListConfigForElectiveListDetailsVo electivelist;
	protected Integer anticipatedprocedurelength;
	protected ims.scheduling.vo.lookups.TheatreType requiredtheatretype;
	protected Boolean criticalcarebedrequired;
	protected Boolean anaesthesisriskassessmentrequest;
	protected ims.core.vo.lookups.YesNo followperioperativeguidelines;
	protected String periopnoreasoncomments;
	protected ims.RefMan.vo.lookups.ProcedureExecutant proceduredtobecarriedby;
	protected ims.core.vo.HcpLiteVo procedurecarriedoutby;
	protected Boolean preassessmentrequired;
	protected Boolean interpretatorrequired;
	protected ims.core.vo.lookups.Language language;
	protected Boolean transportrequired;
	protected ims.scheduling.vo.lookups.ApptTransportType transport;
	protected Boolean specialrequirements;
	protected String specialrequirementsdetails;
	protected String comments;
	protected ims.core.vo.LocationLiteVo hospital;
	protected ims.core.vo.HcpLiteVo consultant;
	protected Boolean suspectedgibleed;
	protected Integer points;
	protected Boolean suitablefortraining;
	protected ims.core.vo.lookups.YesNo generalanaesthetic;
	protected Boolean cannursecarryoutprocedure;
	protected Boolean medicationshouldbestoppedoralbowelprep;
	protected String druginformation;
	protected Boolean haspacemakerdefib;
	protected ims.core.vo.lookups.YesNo renalfunctionassessment;
	protected Boolean aretherekeytherapeutic;
	protected String cognitivecomments;
	protected String detailsfornongaendoprocedure;
	protected ims.framework.utils.DateTime currentsuspensionenddate;
	protected Boolean was28dayruleapplied;
	protected ims.RefMan.vo.PatientElectiveListNotesVoCollection notes;
	protected Boolean tcicancelledbyprovider;
	protected Integer numberofprovidertcicancellations;
	protected ims.RefMan.vo.ElectiveListStatusVoCollection electiveliststatushistory;
	protected ims.RefMan.vo.PreAssessmentOutcomeForElectiveListDetailsVo preassessmentoutcome;
	protected ims.core.vo.lookups.YesNoUnknown fitforsurgery;
	protected ims.clinical.vo.lookups.AnaestheticType anaesthetictype;
	protected Boolean availableatshortnotice;
	protected Boolean preoperativeovernightstayrequired;
	protected Integer noofpreoperativenights;
	protected Integer anticipatedstay;
	protected ims.core.vo.lookups.YesNoUnknown patientreceivinganticoagulanttherapy;
	protected Integer availableatshortnoticeperiod;
	protected Boolean subjectto28dayrule;
	protected ims.scheduling.vo.lookups.Rule28DayStatus rule28daystatus;
	protected ims.framework.utils.Date rule28dayperiodstart;
	protected ims.core.admin.pas.vo.AdmissionDetailRefVoCollection admissions;
	protected ims.scheduling.vo.Booking_AppointmentLiteVo theatreappointment;
	protected ims.vo.SystemInformation systeminformation;
	protected ims.core.vo.LocationLiteVo ward;
	protected ims.core.vo.lookups.PatientStatus patientcategory;
	protected ims.core.vo.HcpLiteVo vettinghcp;
	protected ims.core.vo.AuthoringInformationVo authoringinfo;
	protected Boolean requiresvetting;
	protected ims.RefMan.vo.RecordingUserInformationForWLCVo recordinguser;
	protected ims.core.vo.lookups.YesNo precolonoscopyassessmentrequired;
	protected ims.core.vo.HcpLiteVo responsiblehcp;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
