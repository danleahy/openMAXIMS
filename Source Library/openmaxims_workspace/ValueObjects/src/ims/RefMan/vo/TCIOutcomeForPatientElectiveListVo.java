//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.TCIOutcomeForPatientElectiveList business object (ID: 1096100068).
 */
public class TCIOutcomeForPatientElectiveListVo extends ims.RefMan.vo.TCIOutcomeForPatientElectiveListRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TCIOutcomeForPatientElectiveListVo()
	{
	}
	public TCIOutcomeForPatientElectiveListVo(Integer id, int version)
	{
		super(id, version);
	}
	public TCIOutcomeForPatientElectiveListVo(ims.RefMan.vo.beans.TCIOutcomeForPatientElectiveListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.outcome = bean.getOutcome() == null ? null : ims.RefMan.vo.lookups.AdmissionOfferOutcome.buildLookup(bean.getOutcome());
		this.changeby = bean.getChangeBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getChangeBy().getId()), bean.getChangeBy().getVersion());
		this.statusdatetime = bean.getStatusDateTime() == null ? null : bean.getStatusDateTime().buildDateTime();
		this.outcomereason = bean.getOutcomeReason() == null ? null : ims.RefMan.vo.lookups.TCIStatusChangeReason.buildLookup(bean.getOutcomeReason());
		this.cancelledfornonmedicalreason = bean.getCancelledForNonMedicalReason();
		this.canceltheatreappointment = bean.getCancelTheatreAppointment();
		this.tciid = bean.getTciId();
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.scheduling.vo.lookups.CancelAppointmentReason.buildLookup(bean.getCancellationReason());
		this.reasoncomments = bean.getReasonComments();
		this.tcihasfuturetheatreappt = bean.getTciHasFutureTheatreAppt();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.TCIOutcomeForPatientElectiveListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.outcome = bean.getOutcome() == null ? null : ims.RefMan.vo.lookups.AdmissionOfferOutcome.buildLookup(bean.getOutcome());
		this.changeby = bean.getChangeBy() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getChangeBy().getId()), bean.getChangeBy().getVersion());
		this.statusdatetime = bean.getStatusDateTime() == null ? null : bean.getStatusDateTime().buildDateTime();
		this.outcomereason = bean.getOutcomeReason() == null ? null : ims.RefMan.vo.lookups.TCIStatusChangeReason.buildLookup(bean.getOutcomeReason());
		this.cancelledfornonmedicalreason = bean.getCancelledForNonMedicalReason();
		this.canceltheatreappointment = bean.getCancelTheatreAppointment();
		this.tciid = bean.getTciId();
		this.cancellationreason = bean.getCancellationReason() == null ? null : ims.scheduling.vo.lookups.CancelAppointmentReason.buildLookup(bean.getCancellationReason());
		this.reasoncomments = bean.getReasonComments();
		this.tcihasfuturetheatreappt = bean.getTciHasFutureTheatreAppt();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.TCIOutcomeForPatientElectiveListVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.TCIOutcomeForPatientElectiveListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.TCIOutcomeForPatientElectiveListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("OUTCOME"))
			return getOutcome();
		if(fieldName.equals("CHANGEBY"))
			return getChangeBy();
		if(fieldName.equals("STATUSDATETIME"))
			return getStatusDateTime();
		if(fieldName.equals("OUTCOMEREASON"))
			return getOutcomeReason();
		if(fieldName.equals("CANCELLEDFORNONMEDICALREASON"))
			return getCancelledForNonMedicalReason();
		if(fieldName.equals("CANCELTHEATREAPPOINTMENT"))
			return getCancelTheatreAppointment();
		if(fieldName.equals("TCIID"))
			return getTciId();
		if(fieldName.equals("CANCELLATIONREASON"))
			return getCancellationReason();
		if(fieldName.equals("REASONCOMMENTS"))
			return getReasonComments();
		if(fieldName.equals("TCIHASFUTURETHEATREAPPT"))
			return getTciHasFutureTheatreAppt();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getOutcomeIsNotNull()
	{
		return this.outcome != null;
	}
	public ims.RefMan.vo.lookups.AdmissionOfferOutcome getOutcome()
	{
		return this.outcome;
	}
	public void setOutcome(ims.RefMan.vo.lookups.AdmissionOfferOutcome value)
	{
		this.isValidated = false;
		this.outcome = value;
	}
	public boolean getChangeByIsNotNull()
	{
		return this.changeby != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getChangeBy()
	{
		return this.changeby;
	}
	public void setChangeBy(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.changeby = value;
	}
	public boolean getStatusDateTimeIsNotNull()
	{
		return this.statusdatetime != null;
	}
	public ims.framework.utils.DateTime getStatusDateTime()
	{
		return this.statusdatetime;
	}
	public void setStatusDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.statusdatetime = value;
	}
	public boolean getOutcomeReasonIsNotNull()
	{
		return this.outcomereason != null;
	}
	public ims.RefMan.vo.lookups.TCIStatusChangeReason getOutcomeReason()
	{
		return this.outcomereason;
	}
	public void setOutcomeReason(ims.RefMan.vo.lookups.TCIStatusChangeReason value)
	{
		this.isValidated = false;
		this.outcomereason = value;
	}
	public boolean getCancelledForNonMedicalReasonIsNotNull()
	{
		return this.cancelledfornonmedicalreason != null;
	}
	public Boolean getCancelledForNonMedicalReason()
	{
		return this.cancelledfornonmedicalreason;
	}
	public void setCancelledForNonMedicalReason(Boolean value)
	{
		this.isValidated = false;
		this.cancelledfornonmedicalreason = value;
	}
	public boolean getCancelTheatreAppointmentIsNotNull()
	{
		return this.canceltheatreappointment != null;
	}
	public Boolean getCancelTheatreAppointment()
	{
		return this.canceltheatreappointment;
	}
	public void setCancelTheatreAppointment(Boolean value)
	{
		this.isValidated = false;
		this.canceltheatreappointment = value;
	}
	public boolean getTciIdIsNotNull()
	{
		return this.tciid != null;
	}
	public Integer getTciId()
	{
		return this.tciid;
	}
	public void setTciId(Integer value)
	{
		this.isValidated = false;
		this.tciid = value;
	}
	public boolean getCancellationReasonIsNotNull()
	{
		return this.cancellationreason != null;
	}
	public ims.scheduling.vo.lookups.CancelAppointmentReason getCancellationReason()
	{
		return this.cancellationreason;
	}
	public void setCancellationReason(ims.scheduling.vo.lookups.CancelAppointmentReason value)
	{
		this.isValidated = false;
		this.cancellationreason = value;
	}
	public boolean getReasonCommentsIsNotNull()
	{
		return this.reasoncomments != null;
	}
	public String getReasonComments()
	{
		return this.reasoncomments;
	}
	public static int getReasonCommentsMaxLength()
	{
		return 255;
	}
	public void setReasonComments(String value)
	{
		this.isValidated = false;
		this.reasoncomments = value;
	}
	public boolean getTciHasFutureTheatreApptIsNotNull()
	{
		return this.tcihasfuturetheatreappt != null;
	}
	public Boolean getTciHasFutureTheatreAppt()
	{
		return this.tcihasfuturetheatreappt;
	}
	public void setTciHasFutureTheatreAppt(Boolean value)
	{
		this.isValidated = false;
		this.tcihasfuturetheatreappt = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.outcome == null)
			listOfErrors.add("Outcome is mandatory");
		if(this.statusdatetime == null)
			listOfErrors.add("StatusDateTime is mandatory");
		if(this.reasoncomments != null)
			if(this.reasoncomments.length() > 255)
				listOfErrors.add("The length of the field [reasoncomments] in the value object [ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TCIOutcomeForPatientElectiveListVo clone = new TCIOutcomeForPatientElectiveListVo(this.id, this.version);
		
		if(this.outcome == null)
			clone.outcome = null;
		else
			clone.outcome = (ims.RefMan.vo.lookups.AdmissionOfferOutcome)this.outcome.clone();
		clone.changeby = this.changeby;
		if(this.statusdatetime == null)
			clone.statusdatetime = null;
		else
			clone.statusdatetime = (ims.framework.utils.DateTime)this.statusdatetime.clone();
		if(this.outcomereason == null)
			clone.outcomereason = null;
		else
			clone.outcomereason = (ims.RefMan.vo.lookups.TCIStatusChangeReason)this.outcomereason.clone();
		clone.cancelledfornonmedicalreason = this.cancelledfornonmedicalreason;
		clone.canceltheatreappointment = this.canceltheatreappointment;
		clone.tciid = this.tciid;
		if(this.cancellationreason == null)
			clone.cancellationreason = null;
		else
			clone.cancellationreason = (ims.scheduling.vo.lookups.CancelAppointmentReason)this.cancellationreason.clone();
		clone.reasoncomments = this.reasoncomments;
		clone.tcihasfuturetheatreappt = this.tcihasfuturetheatreappt;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TCIOutcomeForPatientElectiveListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TCIOutcomeForPatientElectiveListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TCIOutcomeForPatientElectiveListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TCIOutcomeForPatientElectiveListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.outcome != null)
			count++;
		if(this.changeby != null)
			count++;
		if(this.statusdatetime != null)
			count++;
		if(this.outcomereason != null)
			count++;
		if(this.cancelledfornonmedicalreason != null)
			count++;
		if(this.canceltheatreappointment != null)
			count++;
		if(this.tciid != null)
			count++;
		if(this.cancellationreason != null)
			count++;
		if(this.reasoncomments != null)
			count++;
		if(this.tcihasfuturetheatreappt != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.RefMan.vo.lookups.AdmissionOfferOutcome outcome;
	protected ims.core.resource.people.vo.MemberOfStaffRefVo changeby;
	protected ims.framework.utils.DateTime statusdatetime;
	protected ims.RefMan.vo.lookups.TCIStatusChangeReason outcomereason;
	protected Boolean cancelledfornonmedicalreason;
	protected Boolean canceltheatreappointment;
	protected Integer tciid;
	protected ims.scheduling.vo.lookups.CancelAppointmentReason cancellationreason;
	protected String reasoncomments;
	protected Boolean tcihasfuturetheatreappt;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
