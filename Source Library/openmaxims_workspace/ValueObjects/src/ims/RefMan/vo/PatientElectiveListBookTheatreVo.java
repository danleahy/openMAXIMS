//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.PatientElectiveList business object (ID: 1014100020).
 */
public class PatientElectiveListBookTheatreVo extends ims.RefMan.vo.PatientElectiveListRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientElectiveListBookTheatreVo()
	{
	}
	public PatientElectiveListBookTheatreVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientElectiveListBookTheatreVo(ims.RefMan.vo.beans.PatientElectiveListBookTheatreVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.electivelist = bean.getElectiveList() == null ? null : bean.getElectiveList().buildVo();
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo();
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.proceduredescription = bean.getProcedureDescription();
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo();
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.anticipatedprocedurelength = bean.getAnticipatedProcedureLength();
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.proceduredtobecarriedby = bean.getProceduredToBeCarriedBy() == null ? null : ims.RefMan.vo.lookups.ProcedureExecutant.buildLookup(bean.getProceduredToBeCarriedBy());
		this.procedurecarriedoutby = bean.getProcedureCarriedOutBy() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getProcedureCarriedOutBy().getId()), bean.getProcedureCarriedOutBy().getVersion());
		this.preassessmentoutcome = bean.getPreAssessmentOutcome() == null ? null : bean.getPreAssessmentOutcome().buildVo();
		this.admissiontype = bean.getAdmissionType() == null ? null : ims.RefMan.vo.lookups.WaitingCardAdmissionType.buildLookup(bean.getAdmissionType());
		this.requiredtheatretype = bean.getRequiredTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getRequiredTheatreType());
		this.generalanaesthetic = bean.getGeneralAnaesthetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getGeneralAnaesthetic());
		this.multiservicecase = bean.getMultiServiceCase();
		this.tcidetails = bean.getTCIDetails() == null ? null : bean.getTCIDetails().buildVo();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : bean.getTheatreAppointment().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PatientElectiveListBookTheatreVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.electivelist = bean.getElectiveList() == null ? null : bean.getElectiveList().buildVo(map);
		this.hospital = bean.getHospital() == null ? null : bean.getHospital().buildVo(map);
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo(map);
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.proceduredescription = bean.getProcedureDescription();
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : bean.getSecondaryProcedure().buildVo(map);
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.anticipatedprocedurelength = bean.getAnticipatedProcedureLength();
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.proceduredtobecarriedby = bean.getProceduredToBeCarriedBy() == null ? null : ims.RefMan.vo.lookups.ProcedureExecutant.buildLookup(bean.getProceduredToBeCarriedBy());
		this.procedurecarriedoutby = bean.getProcedureCarriedOutBy() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getProcedureCarriedOutBy().getId()), bean.getProcedureCarriedOutBy().getVersion());
		this.preassessmentoutcome = bean.getPreAssessmentOutcome() == null ? null : bean.getPreAssessmentOutcome().buildVo(map);
		this.admissiontype = bean.getAdmissionType() == null ? null : ims.RefMan.vo.lookups.WaitingCardAdmissionType.buildLookup(bean.getAdmissionType());
		this.requiredtheatretype = bean.getRequiredTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getRequiredTheatreType());
		this.generalanaesthetic = bean.getGeneralAnaesthetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getGeneralAnaesthetic());
		this.multiservicecase = bean.getMultiServiceCase();
		this.tcidetails = bean.getTCIDetails() == null ? null : bean.getTCIDetails().buildVo(map);
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : bean.getTheatreAppointment().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PatientElectiveListBookTheatreVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PatientElectiveListBookTheatreVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PatientElectiveListBookTheatreVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ELECTIVELIST"))
			return getElectiveList();
		if(fieldName.equals("HOSPITAL"))
			return getHospital();
		if(fieldName.equals("PRIMARYPROCEDURE"))
			return getPrimaryProcedure();
		if(fieldName.equals("PROCLATERALITY"))
			return getProcLaterality();
		if(fieldName.equals("PROCEDUREDESCRIPTION"))
			return getProcedureDescription();
		if(fieldName.equals("SECONDARYPROCEDURE"))
			return getSecondaryProcedure();
		if(fieldName.equals("SECONDARYPROCLATERALITY"))
			return getSecondaryProcLaterality();
		if(fieldName.equals("ANTICIPATEDPROCEDURELENGTH"))
			return getAnticipatedProcedureLength();
		if(fieldName.equals("ANAESTHETICTYPE"))
			return getAnaestheticType();
		if(fieldName.equals("ELECTIVEADMISSIONTYPE"))
			return getElectiveAdmissionType();
		if(fieldName.equals("PROCEDUREDTOBECARRIEDBY"))
			return getProceduredToBeCarriedBy();
		if(fieldName.equals("PROCEDURECARRIEDOUTBY"))
			return getProcedureCarriedOutBy();
		if(fieldName.equals("PREASSESSMENTOUTCOME"))
			return getPreAssessmentOutcome();
		if(fieldName.equals("ADMISSIONTYPE"))
			return getAdmissionType();
		if(fieldName.equals("REQUIREDTHEATRETYPE"))
			return getRequiredTheatreType();
		if(fieldName.equals("GENERALANAESTHETIC"))
			return getGeneralAnaesthetic();
		if(fieldName.equals("MULTISERVICECASE"))
			return getMultiServiceCase();
		if(fieldName.equals("TCIDETAILS"))
			return getTCIDetails();
		if(fieldName.equals("THEATREAPPOINTMENT"))
			return getTheatreAppointment();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getElectiveListIsNotNull()
	{
		return this.electivelist != null;
	}
	public ims.RefMan.vo.ElectiveListConfigurationBookTheatreVo getElectiveList()
	{
		return this.electivelist;
	}
	public void setElectiveList(ims.RefMan.vo.ElectiveListConfigurationBookTheatreVo value)
	{
		this.isValidated = false;
		this.electivelist = value;
	}
	public boolean getHospitalIsNotNull()
	{
		return this.hospital != null;
	}
	public ims.core.vo.LocationLiteVo getHospital()
	{
		return this.hospital;
	}
	public void setHospital(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.hospital = value;
	}
	public boolean getPrimaryProcedureIsNotNull()
	{
		return this.primaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getPrimaryProcedure()
	{
		return this.primaryprocedure;
	}
	public void setPrimaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.primaryprocedure = value;
	}
	public boolean getProcLateralityIsNotNull()
	{
		return this.proclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getProcLaterality()
	{
		return this.proclaterality;
	}
	public void setProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.proclaterality = value;
	}
	public boolean getProcedureDescriptionIsNotNull()
	{
		return this.proceduredescription != null;
	}
	public String getProcedureDescription()
	{
		return this.proceduredescription;
	}
	public static int getProcedureDescriptionMaxLength()
	{
		return 255;
	}
	public void setProcedureDescription(String value)
	{
		this.isValidated = false;
		this.proceduredescription = value;
	}
	public boolean getSecondaryProcedureIsNotNull()
	{
		return this.secondaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getSecondaryProcedure()
	{
		return this.secondaryprocedure;
	}
	public void setSecondaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.secondaryprocedure = value;
	}
	public boolean getSecondaryProcLateralityIsNotNull()
	{
		return this.secondaryproclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getSecondaryProcLaterality()
	{
		return this.secondaryproclaterality;
	}
	public void setSecondaryProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.secondaryproclaterality = value;
	}
	public boolean getAnticipatedProcedureLengthIsNotNull()
	{
		return this.anticipatedprocedurelength != null;
	}
	public Integer getAnticipatedProcedureLength()
	{
		return this.anticipatedprocedurelength;
	}
	public void setAnticipatedProcedureLength(Integer value)
	{
		this.isValidated = false;
		this.anticipatedprocedurelength = value;
	}
	public boolean getAnaestheticTypeIsNotNull()
	{
		return this.anaesthetictype != null;
	}
	public ims.clinical.vo.lookups.AnaestheticType getAnaestheticType()
	{
		return this.anaesthetictype;
	}
	public void setAnaestheticType(ims.clinical.vo.lookups.AnaestheticType value)
	{
		this.isValidated = false;
		this.anaesthetictype = value;
	}
	public boolean getElectiveAdmissionTypeIsNotNull()
	{
		return this.electiveadmissiontype != null;
	}
	public ims.RefMan.vo.lookups.ElectiveAdmissionType getElectiveAdmissionType()
	{
		return this.electiveadmissiontype;
	}
	public void setElectiveAdmissionType(ims.RefMan.vo.lookups.ElectiveAdmissionType value)
	{
		this.isValidated = false;
		this.electiveadmissiontype = value;
	}
	public boolean getProceduredToBeCarriedByIsNotNull()
	{
		return this.proceduredtobecarriedby != null;
	}
	public ims.RefMan.vo.lookups.ProcedureExecutant getProceduredToBeCarriedBy()
	{
		return this.proceduredtobecarriedby;
	}
	public void setProceduredToBeCarriedBy(ims.RefMan.vo.lookups.ProcedureExecutant value)
	{
		this.isValidated = false;
		this.proceduredtobecarriedby = value;
	}
	public boolean getProcedureCarriedOutByIsNotNull()
	{
		return this.procedurecarriedoutby != null;
	}
	public ims.core.resource.people.vo.HcpRefVo getProcedureCarriedOutBy()
	{
		return this.procedurecarriedoutby;
	}
	public void setProcedureCarriedOutBy(ims.core.resource.people.vo.HcpRefVo value)
	{
		this.isValidated = false;
		this.procedurecarriedoutby = value;
	}
	public boolean getPreAssessmentOutcomeIsNotNull()
	{
		return this.preassessmentoutcome != null;
	}
	public ims.RefMan.vo.PreAssessmentOutcomeBookTheatreVo getPreAssessmentOutcome()
	{
		return this.preassessmentoutcome;
	}
	public void setPreAssessmentOutcome(ims.RefMan.vo.PreAssessmentOutcomeBookTheatreVo value)
	{
		this.isValidated = false;
		this.preassessmentoutcome = value;
	}
	public boolean getAdmissionTypeIsNotNull()
	{
		return this.admissiontype != null;
	}
	public ims.RefMan.vo.lookups.WaitingCardAdmissionType getAdmissionType()
	{
		return this.admissiontype;
	}
	public void setAdmissionType(ims.RefMan.vo.lookups.WaitingCardAdmissionType value)
	{
		this.isValidated = false;
		this.admissiontype = value;
	}
	public boolean getRequiredTheatreTypeIsNotNull()
	{
		return this.requiredtheatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getRequiredTheatreType()
	{
		return this.requiredtheatretype;
	}
	public void setRequiredTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.requiredtheatretype = value;
	}
	public boolean getGeneralAnaestheticIsNotNull()
	{
		return this.generalanaesthetic != null;
	}
	public ims.core.vo.lookups.YesNo getGeneralAnaesthetic()
	{
		return this.generalanaesthetic;
	}
	public void setGeneralAnaesthetic(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.generalanaesthetic = value;
	}
	public boolean getMultiServiceCaseIsNotNull()
	{
		return this.multiservicecase != null;
	}
	public Boolean getMultiServiceCase()
	{
		return this.multiservicecase;
	}
	public void setMultiServiceCase(Boolean value)
	{
		this.isValidated = false;
		this.multiservicecase = value;
	}
	public boolean getTCIDetailsIsNotNull()
	{
		return this.tcidetails != null;
	}
	public ims.RefMan.vo.ElectiveTCIForReferralDetailsVo getTCIDetails()
	{
		return this.tcidetails;
	}
	public void setTCIDetails(ims.RefMan.vo.ElectiveTCIForReferralDetailsVo value)
	{
		this.isValidated = false;
		this.tcidetails = value;
	}
	public boolean getTheatreAppointmentIsNotNull()
	{
		return this.theatreappointment != null;
	}
	public ims.scheduling.vo.Booking_AppointmentLiteVo getTheatreAppointment()
	{
		return this.theatreappointment;
	}
	public void setTheatreAppointment(ims.scheduling.vo.Booking_AppointmentLiteVo value)
	{
		this.isValidated = false;
		this.theatreappointment = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.electivelist != null)
		{
			if(!this.electivelist.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.electivelist != null)
		{
			String[] listOfOtherErrors = this.electivelist.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.proceduredescription != null)
			if(this.proceduredescription.length() > 255)
				listOfErrors.add("The length of the field [proceduredescription] in the value object [ims.RefMan.vo.PatientElectiveListBookTheatreVo] is too big. It should be less or equal to 255");
		if(this.electiveadmissiontype == null)
			listOfErrors.add("ElectiveAdmissionType is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientElectiveListBookTheatreVo clone = new PatientElectiveListBookTheatreVo(this.id, this.version);
		
		if(this.electivelist == null)
			clone.electivelist = null;
		else
			clone.electivelist = (ims.RefMan.vo.ElectiveListConfigurationBookTheatreVo)this.electivelist.clone();
		if(this.hospital == null)
			clone.hospital = null;
		else
			clone.hospital = (ims.core.vo.LocationLiteVo)this.hospital.clone();
		if(this.primaryprocedure == null)
			clone.primaryprocedure = null;
		else
			clone.primaryprocedure = (ims.core.vo.ProcedureLiteVo)this.primaryprocedure.clone();
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		clone.proceduredescription = this.proceduredescription;
		if(this.secondaryprocedure == null)
			clone.secondaryprocedure = null;
		else
			clone.secondaryprocedure = (ims.core.vo.ProcedureLiteVo)this.secondaryprocedure.clone();
		if(this.secondaryproclaterality == null)
			clone.secondaryproclaterality = null;
		else
			clone.secondaryproclaterality = (ims.core.vo.lookups.LateralityLRB)this.secondaryproclaterality.clone();
		clone.anticipatedprocedurelength = this.anticipatedprocedurelength;
		if(this.anaesthetictype == null)
			clone.anaesthetictype = null;
		else
			clone.anaesthetictype = (ims.clinical.vo.lookups.AnaestheticType)this.anaesthetictype.clone();
		if(this.electiveadmissiontype == null)
			clone.electiveadmissiontype = null;
		else
			clone.electiveadmissiontype = (ims.RefMan.vo.lookups.ElectiveAdmissionType)this.electiveadmissiontype.clone();
		if(this.proceduredtobecarriedby == null)
			clone.proceduredtobecarriedby = null;
		else
			clone.proceduredtobecarriedby = (ims.RefMan.vo.lookups.ProcedureExecutant)this.proceduredtobecarriedby.clone();
		clone.procedurecarriedoutby = this.procedurecarriedoutby;
		if(this.preassessmentoutcome == null)
			clone.preassessmentoutcome = null;
		else
			clone.preassessmentoutcome = (ims.RefMan.vo.PreAssessmentOutcomeBookTheatreVo)this.preassessmentoutcome.clone();
		if(this.admissiontype == null)
			clone.admissiontype = null;
		else
			clone.admissiontype = (ims.RefMan.vo.lookups.WaitingCardAdmissionType)this.admissiontype.clone();
		if(this.requiredtheatretype == null)
			clone.requiredtheatretype = null;
		else
			clone.requiredtheatretype = (ims.scheduling.vo.lookups.TheatreType)this.requiredtheatretype.clone();
		if(this.generalanaesthetic == null)
			clone.generalanaesthetic = null;
		else
			clone.generalanaesthetic = (ims.core.vo.lookups.YesNo)this.generalanaesthetic.clone();
		clone.multiservicecase = this.multiservicecase;
		if(this.tcidetails == null)
			clone.tcidetails = null;
		else
			clone.tcidetails = (ims.RefMan.vo.ElectiveTCIForReferralDetailsVo)this.tcidetails.clone();
		if(this.theatreappointment == null)
			clone.theatreappointment = null;
		else
			clone.theatreappointment = (ims.scheduling.vo.Booking_AppointmentLiteVo)this.theatreappointment.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientElectiveListBookTheatreVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientElectiveListBookTheatreVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientElectiveListBookTheatreVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientElectiveListBookTheatreVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.electivelist != null)
			count++;
		if(this.hospital != null)
			count++;
		if(this.primaryprocedure != null)
			count++;
		if(this.proclaterality != null)
			count++;
		if(this.proceduredescription != null)
			count++;
		if(this.secondaryprocedure != null)
			count++;
		if(this.secondaryproclaterality != null)
			count++;
		if(this.anticipatedprocedurelength != null)
			count++;
		if(this.anaesthetictype != null)
			count++;
		if(this.electiveadmissiontype != null)
			count++;
		if(this.proceduredtobecarriedby != null)
			count++;
		if(this.procedurecarriedoutby != null)
			count++;
		if(this.preassessmentoutcome != null)
			count++;
		if(this.admissiontype != null)
			count++;
		if(this.requiredtheatretype != null)
			count++;
		if(this.generalanaesthetic != null)
			count++;
		if(this.multiservicecase != null)
			count++;
		if(this.tcidetails != null)
			count++;
		if(this.theatreappointment != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 19;
	}
	protected ims.RefMan.vo.ElectiveListConfigurationBookTheatreVo electivelist;
	protected ims.core.vo.LocationLiteVo hospital;
	protected ims.core.vo.ProcedureLiteVo primaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB proclaterality;
	protected String proceduredescription;
	protected ims.core.vo.ProcedureLiteVo secondaryprocedure;
	protected ims.core.vo.lookups.LateralityLRB secondaryproclaterality;
	protected Integer anticipatedprocedurelength;
	protected ims.clinical.vo.lookups.AnaestheticType anaesthetictype;
	protected ims.RefMan.vo.lookups.ElectiveAdmissionType electiveadmissiontype;
	protected ims.RefMan.vo.lookups.ProcedureExecutant proceduredtobecarriedby;
	protected ims.core.resource.people.vo.HcpRefVo procedurecarriedoutby;
	protected ims.RefMan.vo.PreAssessmentOutcomeBookTheatreVo preassessmentoutcome;
	protected ims.RefMan.vo.lookups.WaitingCardAdmissionType admissiontype;
	protected ims.scheduling.vo.lookups.TheatreType requiredtheatretype;
	protected ims.core.vo.lookups.YesNo generalanaesthetic;
	protected Boolean multiservicecase;
	protected ims.RefMan.vo.ElectiveTCIForReferralDetailsVo tcidetails;
	protected ims.scheduling.vo.Booking_AppointmentLiteVo theatreappointment;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
