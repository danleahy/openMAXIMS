//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.PatientElectiveList business object (ID: 1014100020).
 */
public class PatientElectiveListShortVo extends ims.RefMan.vo.PatientElectiveListRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientElectiveListShortVo()
	{
	}
	public PatientElectiveListShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientElectiveListShortVo(ims.RefMan.vo.beans.PatientElectiveListShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.electivelist = bean.getElectiveList() == null ? null : bean.getElectiveList().buildVo();
		this.electiveliststatus = bean.getElectiveListStatus() == null ? null : bean.getElectiveListStatus().buildVo();
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo();
		this.dateonlist = bean.getDateOnList() == null ? null : bean.getDateOnList().buildDate();
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo();
		this.priority = bean.getPriority() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getPriority());
		this.tcidetails = bean.getTCIDetails() == null ? null : bean.getTCIDetails().buildVo();
		this.creatingappointment = bean.getCreatingAppointment() == null ? null : bean.getCreatingAppointment().buildVo();
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo();
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.erod = bean.getEROD() == null ? null : new ims.RefMan.vo.ReferralERODRefVo(new Integer(bean.getEROD().getId()), bean.getEROD().getVersion());
		this.subjectto28dayrule = bean.getSubjectTo28DayRule();
		this.rule28daystatus = bean.getRule28DayStatus() == null ? null : ims.scheduling.vo.lookups.Rule28DayStatus.buildLookup(bean.getRule28DayStatus());
		this.rule28dayperiodstart = bean.getRule28DayPeriodStart() == null ? null : bean.getRule28DayPeriodStart().buildDate();
		this.preassessmentrequired = bean.getPreAssessmentRequired();
		this.admissiontype = bean.getAdmissionType() == null ? null : ims.RefMan.vo.lookups.WaitingCardAdmissionType.buildLookup(bean.getAdmissionType());
		this.fitforsurgery = bean.getFitForSurgery() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getFitForSurgery());
		this.requiresvetting = bean.getRequiresVetting();
		this.precolonoscopyassessmentrequired = bean.getPreColonoscopyAssessmentRequired() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPreColonoscopyAssessmentRequired());
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PatientElectiveListShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.electivelist = bean.getElectiveList() == null ? null : bean.getElectiveList().buildVo(map);
		this.electiveliststatus = bean.getElectiveListStatus() == null ? null : bean.getElectiveListStatus().buildVo(map);
		this.consultant = bean.getConsultant() == null ? null : bean.getConsultant().buildVo(map);
		this.dateonlist = bean.getDateOnList() == null ? null : bean.getDateOnList().buildDate();
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo(map);
		this.priority = bean.getPriority() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getPriority());
		this.tcidetails = bean.getTCIDetails() == null ? null : bean.getTCIDetails().buildVo(map);
		this.creatingappointment = bean.getCreatingAppointment() == null ? null : bean.getCreatingAppointment().buildVo(map);
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : bean.getPrimaryProcedure().buildVo(map);
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.erod = bean.getEROD() == null ? null : new ims.RefMan.vo.ReferralERODRefVo(new Integer(bean.getEROD().getId()), bean.getEROD().getVersion());
		this.subjectto28dayrule = bean.getSubjectTo28DayRule();
		this.rule28daystatus = bean.getRule28DayStatus() == null ? null : ims.scheduling.vo.lookups.Rule28DayStatus.buildLookup(bean.getRule28DayStatus());
		this.rule28dayperiodstart = bean.getRule28DayPeriodStart() == null ? null : bean.getRule28DayPeriodStart().buildDate();
		this.preassessmentrequired = bean.getPreAssessmentRequired();
		this.admissiontype = bean.getAdmissionType() == null ? null : ims.RefMan.vo.lookups.WaitingCardAdmissionType.buildLookup(bean.getAdmissionType());
		this.fitforsurgery = bean.getFitForSurgery() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getFitForSurgery());
		this.requiresvetting = bean.getRequiresVetting();
		this.precolonoscopyassessmentrequired = bean.getPreColonoscopyAssessmentRequired() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPreColonoscopyAssessmentRequired());
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PatientElectiveListShortVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PatientElectiveListShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PatientElectiveListShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("ELECTIVELIST"))
			return getElectiveList();
		if(fieldName.equals("ELECTIVELISTSTATUS"))
			return getElectiveListStatus();
		if(fieldName.equals("CONSULTANT"))
			return getConsultant();
		if(fieldName.equals("DATEONLIST"))
			return getDateOnList();
		if(fieldName.equals("REFERRAL"))
			return getReferral();
		if(fieldName.equals("PRIORITY"))
			return getPriority();
		if(fieldName.equals("TCIDETAILS"))
			return getTCIDetails();
		if(fieldName.equals("CREATINGAPPOINTMENT"))
			return getCreatingAppointment();
		if(fieldName.equals("PRIMARYPROCEDURE"))
			return getPrimaryProcedure();
		if(fieldName.equals("ELECTIVEADMISSIONTYPE"))
			return getElectiveAdmissionType();
		if(fieldName.equals("EROD"))
			return getEROD();
		if(fieldName.equals("SUBJECTTO28DAYRULE"))
			return getSubjectTo28DayRule();
		if(fieldName.equals("RULE28DAYSTATUS"))
			return getRule28DayStatus();
		if(fieldName.equals("RULE28DAYPERIODSTART"))
			return getRule28DayPeriodStart();
		if(fieldName.equals("PREASSESSMENTREQUIRED"))
			return getPreAssessmentRequired();
		if(fieldName.equals("ADMISSIONTYPE"))
			return getAdmissionType();
		if(fieldName.equals("FITFORSURGERY"))
			return getFitForSurgery();
		if(fieldName.equals("REQUIRESVETTING"))
			return getRequiresVetting();
		if(fieldName.equals("PRECOLONOSCOPYASSESSMENTREQUIRED"))
			return getPreColonoscopyAssessmentRequired();
		if(fieldName.equals("RESPONSIBLEHCP"))
			return getResponsibleHCP();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientLite_IdentifiersVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientLite_IdentifiersVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getElectiveListIsNotNull()
	{
		return this.electivelist != null;
	}
	public ims.admin.vo.ElectiveListConfigShortVo getElectiveList()
	{
		return this.electivelist;
	}
	public void setElectiveList(ims.admin.vo.ElectiveListConfigShortVo value)
	{
		this.isValidated = false;
		this.electivelist = value;
	}
	public boolean getElectiveListStatusIsNotNull()
	{
		return this.electiveliststatus != null;
	}
	public ims.RefMan.vo.ElectiveListStatusLiteVo getElectiveListStatus()
	{
		return this.electiveliststatus;
	}
	public void setElectiveListStatus(ims.RefMan.vo.ElectiveListStatusLiteVo value)
	{
		this.isValidated = false;
		this.electiveliststatus = value;
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public ims.core.vo.HcpLiteVo getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getDateOnListIsNotNull()
	{
		return this.dateonlist != null;
	}
	public ims.framework.utils.Date getDateOnList()
	{
		return this.dateonlist;
	}
	public void setDateOnList(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateonlist = value;
	}
	public boolean getReferralIsNotNull()
	{
		return this.referral != null;
	}
	public ims.RefMan.vo.CatsReferralWithRTTDateVo getReferral()
	{
		return this.referral;
	}
	public void setReferral(ims.RefMan.vo.CatsReferralWithRTTDateVo value)
	{
		this.isValidated = false;
		this.referral = value;
	}
	public boolean getPriorityIsNotNull()
	{
		return this.priority != null;
	}
	public ims.RefMan.vo.lookups.ReferralUrgency getPriority()
	{
		return this.priority;
	}
	public void setPriority(ims.RefMan.vo.lookups.ReferralUrgency value)
	{
		this.isValidated = false;
		this.priority = value;
	}
	public boolean getTCIDetailsIsNotNull()
	{
		return this.tcidetails != null;
	}
	public ims.RefMan.vo.TCIDetailsLiteVo getTCIDetails()
	{
		return this.tcidetails;
	}
	public void setTCIDetails(ims.RefMan.vo.TCIDetailsLiteVo value)
	{
		this.isValidated = false;
		this.tcidetails = value;
	}
	public boolean getCreatingAppointmentIsNotNull()
	{
		return this.creatingappointment != null;
	}
	public ims.RefMan.vo.Booking_AppointmentOutcomeForElectiveListVo getCreatingAppointment()
	{
		return this.creatingappointment;
	}
	public void setCreatingAppointment(ims.RefMan.vo.Booking_AppointmentOutcomeForElectiveListVo value)
	{
		this.isValidated = false;
		this.creatingappointment = value;
	}
	public boolean getPrimaryProcedureIsNotNull()
	{
		return this.primaryprocedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getPrimaryProcedure()
	{
		return this.primaryprocedure;
	}
	public void setPrimaryProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.primaryprocedure = value;
	}
	public boolean getElectiveAdmissionTypeIsNotNull()
	{
		return this.electiveadmissiontype != null;
	}
	public ims.RefMan.vo.lookups.ElectiveAdmissionType getElectiveAdmissionType()
	{
		return this.electiveadmissiontype;
	}
	public void setElectiveAdmissionType(ims.RefMan.vo.lookups.ElectiveAdmissionType value)
	{
		this.isValidated = false;
		this.electiveadmissiontype = value;
	}
	public boolean getERODIsNotNull()
	{
		return this.erod != null;
	}
	public ims.RefMan.vo.ReferralERODRefVo getEROD()
	{
		return this.erod;
	}
	public void setEROD(ims.RefMan.vo.ReferralERODRefVo value)
	{
		this.isValidated = false;
		this.erod = value;
	}
	public boolean getSubjectTo28DayRuleIsNotNull()
	{
		return this.subjectto28dayrule != null;
	}
	public Boolean getSubjectTo28DayRule()
	{
		return this.subjectto28dayrule;
	}
	public void setSubjectTo28DayRule(Boolean value)
	{
		this.isValidated = false;
		this.subjectto28dayrule = value;
	}
	public boolean getRule28DayStatusIsNotNull()
	{
		return this.rule28daystatus != null;
	}
	public ims.scheduling.vo.lookups.Rule28DayStatus getRule28DayStatus()
	{
		return this.rule28daystatus;
	}
	public void setRule28DayStatus(ims.scheduling.vo.lookups.Rule28DayStatus value)
	{
		this.isValidated = false;
		this.rule28daystatus = value;
	}
	public boolean getRule28DayPeriodStartIsNotNull()
	{
		return this.rule28dayperiodstart != null;
	}
	public ims.framework.utils.Date getRule28DayPeriodStart()
	{
		return this.rule28dayperiodstart;
	}
	public void setRule28DayPeriodStart(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.rule28dayperiodstart = value;
	}
	public boolean getPreAssessmentRequiredIsNotNull()
	{
		return this.preassessmentrequired != null;
	}
	public Boolean getPreAssessmentRequired()
	{
		return this.preassessmentrequired;
	}
	public void setPreAssessmentRequired(Boolean value)
	{
		this.isValidated = false;
		this.preassessmentrequired = value;
	}
	public boolean getAdmissionTypeIsNotNull()
	{
		return this.admissiontype != null;
	}
	public ims.RefMan.vo.lookups.WaitingCardAdmissionType getAdmissionType()
	{
		return this.admissiontype;
	}
	public void setAdmissionType(ims.RefMan.vo.lookups.WaitingCardAdmissionType value)
	{
		this.isValidated = false;
		this.admissiontype = value;
	}
	public boolean getFitForSurgeryIsNotNull()
	{
		return this.fitforsurgery != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getFitForSurgery()
	{
		return this.fitforsurgery;
	}
	public void setFitForSurgery(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.fitforsurgery = value;
	}
	public boolean getRequiresVettingIsNotNull()
	{
		return this.requiresvetting != null;
	}
	public Boolean getRequiresVetting()
	{
		return this.requiresvetting;
	}
	public void setRequiresVetting(Boolean value)
	{
		this.isValidated = false;
		this.requiresvetting = value;
	}
	public boolean getPreColonoscopyAssessmentRequiredIsNotNull()
	{
		return this.precolonoscopyassessmentrequired != null;
	}
	public ims.core.vo.lookups.YesNo getPreColonoscopyAssessmentRequired()
	{
		return this.precolonoscopyassessmentrequired;
	}
	public void setPreColonoscopyAssessmentRequired(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.precolonoscopyassessmentrequired = value;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.vo.HcpLiteVo getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.patient != null)
		{
			if(!this.patient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.electivelist != null)
		{
			if(!this.electivelist.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.electiveliststatus != null)
		{
			if(!this.electiveliststatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.consultant != null)
		{
			if(!this.consultant.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.referral != null)
		{
			if(!this.referral.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.patient != null)
		{
			String[] listOfOtherErrors = this.patient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.electivelist != null)
		{
			String[] listOfOtherErrors = this.electivelist.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.electiveliststatus == null)
			listOfErrors.add("ElectiveListStatus is mandatory");
		if(this.electiveliststatus != null)
		{
			String[] listOfOtherErrors = this.electiveliststatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.consultant != null)
		{
			String[] listOfOtherErrors = this.consultant.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.dateonlist == null)
			listOfErrors.add("DateOnList is mandatory");
		if(this.referral == null)
			listOfErrors.add("Referral is mandatory");
		if(this.referral != null)
		{
			String[] listOfOtherErrors = this.referral.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.electiveadmissiontype == null)
			listOfErrors.add("ElectiveAdmissionType is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientElectiveListShortVo clone = new PatientElectiveListShortVo(this.id, this.version);
		
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientLite_IdentifiersVo)this.patient.clone();
		if(this.electivelist == null)
			clone.electivelist = null;
		else
			clone.electivelist = (ims.admin.vo.ElectiveListConfigShortVo)this.electivelist.clone();
		if(this.electiveliststatus == null)
			clone.electiveliststatus = null;
		else
			clone.electiveliststatus = (ims.RefMan.vo.ElectiveListStatusLiteVo)this.electiveliststatus.clone();
		if(this.consultant == null)
			clone.consultant = null;
		else
			clone.consultant = (ims.core.vo.HcpLiteVo)this.consultant.clone();
		if(this.dateonlist == null)
			clone.dateonlist = null;
		else
			clone.dateonlist = (ims.framework.utils.Date)this.dateonlist.clone();
		if(this.referral == null)
			clone.referral = null;
		else
			clone.referral = (ims.RefMan.vo.CatsReferralWithRTTDateVo)this.referral.clone();
		if(this.priority == null)
			clone.priority = null;
		else
			clone.priority = (ims.RefMan.vo.lookups.ReferralUrgency)this.priority.clone();
		if(this.tcidetails == null)
			clone.tcidetails = null;
		else
			clone.tcidetails = (ims.RefMan.vo.TCIDetailsLiteVo)this.tcidetails.clone();
		if(this.creatingappointment == null)
			clone.creatingappointment = null;
		else
			clone.creatingappointment = (ims.RefMan.vo.Booking_AppointmentOutcomeForElectiveListVo)this.creatingappointment.clone();
		if(this.primaryprocedure == null)
			clone.primaryprocedure = null;
		else
			clone.primaryprocedure = (ims.core.vo.ProcedureLiteVo)this.primaryprocedure.clone();
		if(this.electiveadmissiontype == null)
			clone.electiveadmissiontype = null;
		else
			clone.electiveadmissiontype = (ims.RefMan.vo.lookups.ElectiveAdmissionType)this.electiveadmissiontype.clone();
		clone.erod = this.erod;
		clone.subjectto28dayrule = this.subjectto28dayrule;
		if(this.rule28daystatus == null)
			clone.rule28daystatus = null;
		else
			clone.rule28daystatus = (ims.scheduling.vo.lookups.Rule28DayStatus)this.rule28daystatus.clone();
		if(this.rule28dayperiodstart == null)
			clone.rule28dayperiodstart = null;
		else
			clone.rule28dayperiodstart = (ims.framework.utils.Date)this.rule28dayperiodstart.clone();
		clone.preassessmentrequired = this.preassessmentrequired;
		if(this.admissiontype == null)
			clone.admissiontype = null;
		else
			clone.admissiontype = (ims.RefMan.vo.lookups.WaitingCardAdmissionType)this.admissiontype.clone();
		if(this.fitforsurgery == null)
			clone.fitforsurgery = null;
		else
			clone.fitforsurgery = (ims.core.vo.lookups.YesNoUnknown)this.fitforsurgery.clone();
		clone.requiresvetting = this.requiresvetting;
		if(this.precolonoscopyassessmentrequired == null)
			clone.precolonoscopyassessmentrequired = null;
		else
			clone.precolonoscopyassessmentrequired = (ims.core.vo.lookups.YesNo)this.precolonoscopyassessmentrequired.clone();
		if(this.responsiblehcp == null)
			clone.responsiblehcp = null;
		else
			clone.responsiblehcp = (ims.core.vo.HcpLiteVo)this.responsiblehcp.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientElectiveListShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientElectiveListShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientElectiveListShortVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientElectiveListShortVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.electivelist != null)
			count++;
		if(this.electiveliststatus != null)
			count++;
		if(this.consultant != null)
			count++;
		if(this.dateonlist != null)
			count++;
		if(this.referral != null)
			count++;
		if(this.priority != null)
			count++;
		if(this.tcidetails != null)
			count++;
		if(this.creatingappointment != null)
			count++;
		if(this.primaryprocedure != null)
			count++;
		if(this.electiveadmissiontype != null)
			count++;
		if(this.erod != null)
			count++;
		if(this.subjectto28dayrule != null)
			count++;
		if(this.rule28daystatus != null)
			count++;
		if(this.rule28dayperiodstart != null)
			count++;
		if(this.preassessmentrequired != null)
			count++;
		if(this.admissiontype != null)
			count++;
		if(this.fitforsurgery != null)
			count++;
		if(this.requiresvetting != null)
			count++;
		if(this.precolonoscopyassessmentrequired != null)
			count++;
		if(this.responsiblehcp != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 21;
	}
	protected ims.core.vo.PatientLite_IdentifiersVo patient;
	protected ims.admin.vo.ElectiveListConfigShortVo electivelist;
	protected ims.RefMan.vo.ElectiveListStatusLiteVo electiveliststatus;
	protected ims.core.vo.HcpLiteVo consultant;
	protected ims.framework.utils.Date dateonlist;
	protected ims.RefMan.vo.CatsReferralWithRTTDateVo referral;
	protected ims.RefMan.vo.lookups.ReferralUrgency priority;
	protected ims.RefMan.vo.TCIDetailsLiteVo tcidetails;
	protected ims.RefMan.vo.Booking_AppointmentOutcomeForElectiveListVo creatingappointment;
	protected ims.core.vo.ProcedureLiteVo primaryprocedure;
	protected ims.RefMan.vo.lookups.ElectiveAdmissionType electiveadmissiontype;
	protected ims.RefMan.vo.ReferralERODRefVo erod;
	protected Boolean subjectto28dayrule;
	protected ims.scheduling.vo.lookups.Rule28DayStatus rule28daystatus;
	protected ims.framework.utils.Date rule28dayperiodstart;
	protected Boolean preassessmentrequired;
	protected ims.RefMan.vo.lookups.WaitingCardAdmissionType admissiontype;
	protected ims.core.vo.lookups.YesNoUnknown fitforsurgery;
	protected Boolean requiresvetting;
	protected ims.core.vo.lookups.YesNo precolonoscopyassessmentrequired;
	protected ims.core.vo.HcpLiteVo responsiblehcp;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
