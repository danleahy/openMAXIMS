//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;


public class EndoscopyVettingWorklistSearchCritVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public EndoscopyVettingWorklistSearchCritVo()
	{
	}
	public EndoscopyVettingWorklistSearchCritVo(ims.RefMan.vo.beans.EndoscopyVettingWorklistSearchCritVoBean bean)
	{
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.urgency = bean.getUrgency() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getUrgency());
		this.proceduretype = bean.getProcedureType() == null ? null : ims.core.vo.lookups.ProcedureEndoscopyType.buildLookup(bean.getProcedureType());
		this.generalanaesthetic = bean.getGeneralAnaesthetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getGeneralAnaesthetic());
		this.rttbreachdatein = bean.getRTTBreachDateIn();
		this.rttbreachdateunits = bean.getRTTBReachDateUnits() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getRTTBReachDateUnits());
		this.includepatientsbreached = bean.getIncludePatientsBreached();
		this.planneddateint = bean.getPlannedDateInt();
		this.planedateunits = bean.getPlaneDateUnits() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getPlaneDateUnits());
		this.includepastplanneddates = bean.getIncludePastPlannedDates();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.EndoscopyVettingWorklistSearchCritVoBean bean)
	{
		this.electiveadmissiontype = bean.getElectiveAdmissionType() == null ? null : ims.RefMan.vo.lookups.ElectiveAdmissionType.buildLookup(bean.getElectiveAdmissionType());
		this.urgency = bean.getUrgency() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getUrgency());
		this.proceduretype = bean.getProcedureType() == null ? null : ims.core.vo.lookups.ProcedureEndoscopyType.buildLookup(bean.getProcedureType());
		this.generalanaesthetic = bean.getGeneralAnaesthetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getGeneralAnaesthetic());
		this.rttbreachdatein = bean.getRTTBreachDateIn();
		this.rttbreachdateunits = bean.getRTTBReachDateUnits() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getRTTBReachDateUnits());
		this.includepatientsbreached = bean.getIncludePatientsBreached();
		this.planneddateint = bean.getPlannedDateInt();
		this.planedateunits = bean.getPlaneDateUnits() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getPlaneDateUnits());
		this.includepastplanneddates = bean.getIncludePastPlannedDates();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.EndoscopyVettingWorklistSearchCritVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.EndoscopyVettingWorklistSearchCritVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.EndoscopyVettingWorklistSearchCritVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getElectiveAdmissionTypeIsNotNull()
	{
		return this.electiveadmissiontype != null;
	}
	public ims.RefMan.vo.lookups.ElectiveAdmissionType getElectiveAdmissionType()
	{
		return this.electiveadmissiontype;
	}
	public void setElectiveAdmissionType(ims.RefMan.vo.lookups.ElectiveAdmissionType value)
	{
		this.isValidated = false;
		this.electiveadmissiontype = value;
	}
	public boolean getUrgencyIsNotNull()
	{
		return this.urgency != null;
	}
	public ims.RefMan.vo.lookups.ReferralUrgency getUrgency()
	{
		return this.urgency;
	}
	public void setUrgency(ims.RefMan.vo.lookups.ReferralUrgency value)
	{
		this.isValidated = false;
		this.urgency = value;
	}
	public boolean getProcedureTypeIsNotNull()
	{
		return this.proceduretype != null;
	}
	public ims.core.vo.lookups.ProcedureEndoscopyType getProcedureType()
	{
		return this.proceduretype;
	}
	public void setProcedureType(ims.core.vo.lookups.ProcedureEndoscopyType value)
	{
		this.isValidated = false;
		this.proceduretype = value;
	}
	public boolean getGeneralAnaestheticIsNotNull()
	{
		return this.generalanaesthetic != null;
	}
	public ims.core.vo.lookups.YesNo getGeneralAnaesthetic()
	{
		return this.generalanaesthetic;
	}
	public void setGeneralAnaesthetic(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.generalanaesthetic = value;
	}
	public boolean getRTTBreachDateInIsNotNull()
	{
		return this.rttbreachdatein != null;
	}
	public Integer getRTTBreachDateIn()
	{
		return this.rttbreachdatein;
	}
	public void setRTTBreachDateIn(Integer value)
	{
		this.isValidated = false;
		this.rttbreachdatein = value;
	}
	public boolean getRTTBReachDateUnitsIsNotNull()
	{
		return this.rttbreachdateunits != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getRTTBReachDateUnits()
	{
		return this.rttbreachdateunits;
	}
	public void setRTTBReachDateUnits(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.rttbreachdateunits = value;
	}
	public boolean getIncludePatientsBreachedIsNotNull()
	{
		return this.includepatientsbreached != null;
	}
	public Boolean getIncludePatientsBreached()
	{
		return this.includepatientsbreached;
	}
	public void setIncludePatientsBreached(Boolean value)
	{
		this.isValidated = false;
		this.includepatientsbreached = value;
	}
	public boolean getPlannedDateIntIsNotNull()
	{
		return this.planneddateint != null;
	}
	public Integer getPlannedDateInt()
	{
		return this.planneddateint;
	}
	public void setPlannedDateInt(Integer value)
	{
		this.isValidated = false;
		this.planneddateint = value;
	}
	public boolean getPlaneDateUnitsIsNotNull()
	{
		return this.planedateunits != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getPlaneDateUnits()
	{
		return this.planedateunits;
	}
	public void setPlaneDateUnits(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.planedateunits = value;
	}
	public boolean getIncludePastPlannedDatesIsNotNull()
	{
		return this.includepastplanneddates != null;
	}
	public Boolean getIncludePastPlannedDates()
	{
		return this.includepastplanneddates;
	}
	public void setIncludePastPlannedDates(Boolean value)
	{
		this.isValidated = false;
		this.includepastplanneddates = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof EndoscopyVettingWorklistSearchCritVo))
			return false;
		EndoscopyVettingWorklistSearchCritVo compareObj = (EndoscopyVettingWorklistSearchCritVo)obj;
		if(this.getElectiveAdmissionType() == null && compareObj.getElectiveAdmissionType() != null)
			return false;
		if(this.getElectiveAdmissionType() != null && compareObj.getElectiveAdmissionType() == null)
			return false;
		if(this.getElectiveAdmissionType() != null && compareObj.getElectiveAdmissionType() != null)
			return this.getElectiveAdmissionType().equals(compareObj.getElectiveAdmissionType());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		EndoscopyVettingWorklistSearchCritVo clone = new EndoscopyVettingWorklistSearchCritVo();
		
		if(this.electiveadmissiontype == null)
			clone.electiveadmissiontype = null;
		else
			clone.electiveadmissiontype = (ims.RefMan.vo.lookups.ElectiveAdmissionType)this.electiveadmissiontype.clone();
		if(this.urgency == null)
			clone.urgency = null;
		else
			clone.urgency = (ims.RefMan.vo.lookups.ReferralUrgency)this.urgency.clone();
		if(this.proceduretype == null)
			clone.proceduretype = null;
		else
			clone.proceduretype = (ims.core.vo.lookups.ProcedureEndoscopyType)this.proceduretype.clone();
		if(this.generalanaesthetic == null)
			clone.generalanaesthetic = null;
		else
			clone.generalanaesthetic = (ims.core.vo.lookups.YesNo)this.generalanaesthetic.clone();
		clone.rttbreachdatein = this.rttbreachdatein;
		if(this.rttbreachdateunits == null)
			clone.rttbreachdateunits = null;
		else
			clone.rttbreachdateunits = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.rttbreachdateunits.clone();
		clone.includepatientsbreached = this.includepatientsbreached;
		clone.planneddateint = this.planneddateint;
		if(this.planedateunits == null)
			clone.planedateunits = null;
		else
			clone.planedateunits = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.planedateunits.clone();
		clone.includepastplanneddates = this.includepastplanneddates;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(EndoscopyVettingWorklistSearchCritVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A EndoscopyVettingWorklistSearchCritVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		EndoscopyVettingWorklistSearchCritVo compareObj = (EndoscopyVettingWorklistSearchCritVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getElectiveAdmissionType() == null && compareObj.getElectiveAdmissionType() != null)
				return -1;
			if(this.getElectiveAdmissionType() != null && compareObj.getElectiveAdmissionType() == null)
				return 1;
			if(this.getElectiveAdmissionType() != null && compareObj.getElectiveAdmissionType() != null)
				retVal = this.getElectiveAdmissionType().compareTo(compareObj.getElectiveAdmissionType());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.electiveadmissiontype != null)
			count++;
		if(this.urgency != null)
			count++;
		if(this.proceduretype != null)
			count++;
		if(this.generalanaesthetic != null)
			count++;
		if(this.rttbreachdatein != null)
			count++;
		if(this.rttbreachdateunits != null)
			count++;
		if(this.includepatientsbreached != null)
			count++;
		if(this.planneddateint != null)
			count++;
		if(this.planedateunits != null)
			count++;
		if(this.includepastplanneddates != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.RefMan.vo.lookups.ElectiveAdmissionType electiveadmissiontype;
	protected ims.RefMan.vo.lookups.ReferralUrgency urgency;
	protected ims.core.vo.lookups.ProcedureEndoscopyType proceduretype;
	protected ims.core.vo.lookups.YesNo generalanaesthetic;
	protected Integer rttbreachdatein;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths rttbreachdateunits;
	protected Boolean includepatientsbreached;
	protected Integer planneddateint;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths planedateunits;
	protected Boolean includepastplanneddates;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
