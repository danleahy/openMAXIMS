//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.RedirectReferralDetails business object (ID: 1096100081).
 */
public class RedirectReferralDetailsVo extends ims.RefMan.vo.RedirectReferralDetailsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public RedirectReferralDetailsVo()
	{
	}
	public RedirectReferralDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public RedirectReferralDetailsVo(ims.RefMan.vo.beans.RedirectReferralDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.redirectservice = bean.getRedirectService() == null ? null : bean.getRedirectService().buildVo();
		this.redirectreason = bean.getRedirectReason() == null ? null : ims.RefMan.vo.lookups.RedirectReason.buildLookup(bean.getRedirectReason());
		this.redirectcomment = bean.getRedirectComment();
		this.authoringuser = bean.getAuthoringUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getAuthoringUser().getId()), bean.getAuthoringUser().getVersion());
		this.redirectdatetime = bean.getRedirectDateTime() == null ? null : bean.getRedirectDateTime().buildDateTime();
		this.redirecthcp = bean.getRedirectHCP() == null ? null : bean.getRedirectHCP().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.RedirectReferralDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.redirectservice = bean.getRedirectService() == null ? null : bean.getRedirectService().buildVo(map);
		this.redirectreason = bean.getRedirectReason() == null ? null : ims.RefMan.vo.lookups.RedirectReason.buildLookup(bean.getRedirectReason());
		this.redirectcomment = bean.getRedirectComment();
		this.authoringuser = bean.getAuthoringUser() == null ? null : new ims.core.resource.people.vo.MemberOfStaffRefVo(new Integer(bean.getAuthoringUser().getId()), bean.getAuthoringUser().getVersion());
		this.redirectdatetime = bean.getRedirectDateTime() == null ? null : bean.getRedirectDateTime().buildDateTime();
		this.redirecthcp = bean.getRedirectHCP() == null ? null : bean.getRedirectHCP().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.RedirectReferralDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.RedirectReferralDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.RedirectReferralDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("REDIRECTSERVICE"))
			return getRedirectService();
		if(fieldName.equals("REDIRECTREASON"))
			return getRedirectReason();
		if(fieldName.equals("REDIRECTCOMMENT"))
			return getRedirectComment();
		if(fieldName.equals("AUTHORINGUSER"))
			return getAuthoringUser();
		if(fieldName.equals("REDIRECTDATETIME"))
			return getRedirectDateTime();
		if(fieldName.equals("REDIRECTHCP"))
			return getRedirectHCP();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getRedirectServiceIsNotNull()
	{
		return this.redirectservice != null;
	}
	public ims.core.vo.ServiceLiteVo getRedirectService()
	{
		return this.redirectservice;
	}
	public void setRedirectService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.redirectservice = value;
	}
	public boolean getRedirectReasonIsNotNull()
	{
		return this.redirectreason != null;
	}
	public ims.RefMan.vo.lookups.RedirectReason getRedirectReason()
	{
		return this.redirectreason;
	}
	public void setRedirectReason(ims.RefMan.vo.lookups.RedirectReason value)
	{
		this.isValidated = false;
		this.redirectreason = value;
	}
	public boolean getRedirectCommentIsNotNull()
	{
		return this.redirectcomment != null;
	}
	public String getRedirectComment()
	{
		return this.redirectcomment;
	}
	public static int getRedirectCommentMaxLength()
	{
		return 5000;
	}
	public void setRedirectComment(String value)
	{
		this.isValidated = false;
		this.redirectcomment = value;
	}
	public boolean getAuthoringUserIsNotNull()
	{
		return this.authoringuser != null;
	}
	public ims.core.resource.people.vo.MemberOfStaffRefVo getAuthoringUser()
	{
		return this.authoringuser;
	}
	public void setAuthoringUser(ims.core.resource.people.vo.MemberOfStaffRefVo value)
	{
		this.isValidated = false;
		this.authoringuser = value;
	}
	public boolean getRedirectDateTimeIsNotNull()
	{
		return this.redirectdatetime != null;
	}
	public ims.framework.utils.DateTime getRedirectDateTime()
	{
		return this.redirectdatetime;
	}
	public void setRedirectDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.redirectdatetime = value;
	}
	public boolean getRedirectHCPIsNotNull()
	{
		return this.redirecthcp != null;
	}
	public ims.core.vo.HcpLiteVo getRedirectHCP()
	{
		return this.redirecthcp;
	}
	public void setRedirectHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.redirecthcp = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.redirectservice == null)
			listOfErrors.add("Redirect to Service is mandatory");
		if(this.authoringuser == null)
			listOfErrors.add("AuthoringUser is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		RedirectReferralDetailsVo clone = new RedirectReferralDetailsVo(this.id, this.version);
		
		if(this.redirectservice == null)
			clone.redirectservice = null;
		else
			clone.redirectservice = (ims.core.vo.ServiceLiteVo)this.redirectservice.clone();
		if(this.redirectreason == null)
			clone.redirectreason = null;
		else
			clone.redirectreason = (ims.RefMan.vo.lookups.RedirectReason)this.redirectreason.clone();
		clone.redirectcomment = this.redirectcomment;
		clone.authoringuser = this.authoringuser;
		if(this.redirectdatetime == null)
			clone.redirectdatetime = null;
		else
			clone.redirectdatetime = (ims.framework.utils.DateTime)this.redirectdatetime.clone();
		if(this.redirecthcp == null)
			clone.redirecthcp = null;
		else
			clone.redirecthcp = (ims.core.vo.HcpLiteVo)this.redirecthcp.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(RedirectReferralDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A RedirectReferralDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((RedirectReferralDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((RedirectReferralDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.redirectservice != null)
			count++;
		if(this.redirectreason != null)
			count++;
		if(this.redirectcomment != null)
			count++;
		if(this.authoringuser != null)
			count++;
		if(this.redirectdatetime != null)
			count++;
		if(this.redirecthcp != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.vo.ServiceLiteVo redirectservice;
	protected ims.RefMan.vo.lookups.RedirectReason redirectreason;
	protected String redirectcomment;
	protected ims.core.resource.people.vo.MemberOfStaffRefVo authoringuser;
	protected ims.framework.utils.DateTime redirectdatetime;
	protected ims.core.vo.HcpLiteVo redirecthcp;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
