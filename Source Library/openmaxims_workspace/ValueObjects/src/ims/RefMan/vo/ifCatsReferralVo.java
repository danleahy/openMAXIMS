//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.CatsReferral business object (ID: 1004100035).
 */
public class ifCatsReferralVo extends ims.RefMan.vo.CatsReferralVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ifCatsReferralVo()
	{
	}
	public ifCatsReferralVo(Integer id, int version)
	{
		super(id, version);
	}
	public ifCatsReferralVo(ims.RefMan.vo.beans.ifCatsReferralVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.icabreferral = bean.getICABReferral() == null ? null : bean.getICABReferral().buildVo();
		this.referraldetails = bean.getReferralDetails() == null ? null : bean.getReferralDetails().buildVo();
		this.investigationorders = ims.ocrr.vo.OcsOrderVoCollection.buildFromBeanCollection(bean.getInvestigationOrders());
		this.appointments = ims.scheduling.vo.Booking_AppointmentVoCollection.buildFromBeanCollection(bean.getAppointments());
		this.hasdocuments = bean.getHasDocuments();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.statushistory = ims.RefMan.vo.CatsReferralStatusVoCollection.buildFromBeanCollection(bean.getStatusHistory());
		this.callattempts = ims.RefMan.vo.AppointmentCallAttemptsVoCollection.buildFromBeanCollection(bean.getCallAttempts());
		this.consultationappt = bean.getConsultationAppt() == null ? null : bean.getConsultationAppt().buildVo();
		this.issuitableforsurgery = bean.getIsSuitableForSurgery();
		this.isfitforsurgery = bean.getIsFitForSurgery();
		this.hastheatreappt = bean.getHasTheatreAppt();
		this.isawaitingclinicalinfo = bean.getIsAwaitingClinicalInfo();
		this.hasrejectedinv = bean.getHasRejectedInv();
		this.consultationactivityrequired = bean.getConsultationActivityRequired();
		this.hasdnaornotseenactivity = bean.getHasDNAorNotSeenActivity();
		this.hasrebookingsubsequentactivity = bean.getHasRebookingSubsequentActivity();
		this.redirectcab = bean.getRedirectCAB();
		this.urgency = bean.getUrgency() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getUrgency());
		this.cancertype = bean.getCancerType() == null ? null : ims.RefMan.vo.lookups.CancerType.buildLookup(bean.getCancerType());
		this.rttstatusnationalcode = bean.getRTTStatusNationalCode();
		this.referrertype = bean.getReferrerType() == null ? null : ims.core.vo.lookups.SourceOfReferral.buildLookup(bean.getReferrerType());
		this.referringpracticeccgcode = bean.getReferringPracticeCCGCode();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.ifCatsReferralVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.icabreferral = bean.getICABReferral() == null ? null : bean.getICABReferral().buildVo(map);
		this.referraldetails = bean.getReferralDetails() == null ? null : bean.getReferralDetails().buildVo(map);
		this.investigationorders = ims.ocrr.vo.OcsOrderVoCollection.buildFromBeanCollection(bean.getInvestigationOrders());
		this.appointments = ims.scheduling.vo.Booking_AppointmentVoCollection.buildFromBeanCollection(bean.getAppointments());
		this.hasdocuments = bean.getHasDocuments();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.statushistory = ims.RefMan.vo.CatsReferralStatusVoCollection.buildFromBeanCollection(bean.getStatusHistory());
		this.callattempts = ims.RefMan.vo.AppointmentCallAttemptsVoCollection.buildFromBeanCollection(bean.getCallAttempts());
		this.consultationappt = bean.getConsultationAppt() == null ? null : bean.getConsultationAppt().buildVo(map);
		this.issuitableforsurgery = bean.getIsSuitableForSurgery();
		this.isfitforsurgery = bean.getIsFitForSurgery();
		this.hastheatreappt = bean.getHasTheatreAppt();
		this.isawaitingclinicalinfo = bean.getIsAwaitingClinicalInfo();
		this.hasrejectedinv = bean.getHasRejectedInv();
		this.consultationactivityrequired = bean.getConsultationActivityRequired();
		this.hasdnaornotseenactivity = bean.getHasDNAorNotSeenActivity();
		this.hasrebookingsubsequentactivity = bean.getHasRebookingSubsequentActivity();
		this.redirectcab = bean.getRedirectCAB();
		this.urgency = bean.getUrgency() == null ? null : ims.RefMan.vo.lookups.ReferralUrgency.buildLookup(bean.getUrgency());
		this.cancertype = bean.getCancerType() == null ? null : ims.RefMan.vo.lookups.CancerType.buildLookup(bean.getCancerType());
		this.rttstatusnationalcode = bean.getRTTStatusNationalCode();
		this.referrertype = bean.getReferrerType() == null ? null : ims.core.vo.lookups.SourceOfReferral.buildLookup(bean.getReferrerType());
		this.referringpracticeccgcode = bean.getReferringPracticeCCGCode();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.ifCatsReferralVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.ifCatsReferralVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.ifCatsReferralVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("URGENCY"))
			return getUrgency();
		if(fieldName.equals("CANCERTYPE"))
			return getCancerType();
		if(fieldName.equals("RTTSTATUSNATIONALCODE"))
			return getRTTStatusNationalCode();
		if(fieldName.equals("REFERRERTYPE"))
			return getReferrerType();
		if(fieldName.equals("REFERRINGPRACTICECCGCODE"))
			return getReferringPracticeCCGCode();
		if(fieldName.equals("SYSINFO"))
			return getSysInfo();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getUrgencyIsNotNull()
	{
		return this.urgency != null;
	}
	public ims.RefMan.vo.lookups.ReferralUrgency getUrgency()
	{
		return this.urgency;
	}
	public void setUrgency(ims.RefMan.vo.lookups.ReferralUrgency value)
	{
		this.isValidated = false;
		this.urgency = value;
	}
	public boolean getCancerTypeIsNotNull()
	{
		return this.cancertype != null;
	}
	public ims.RefMan.vo.lookups.CancerType getCancerType()
	{
		return this.cancertype;
	}
	public void setCancerType(ims.RefMan.vo.lookups.CancerType value)
	{
		this.isValidated = false;
		this.cancertype = value;
	}
	public boolean getRTTStatusNationalCodeIsNotNull()
	{
		return this.rttstatusnationalcode != null;
	}
	public String getRTTStatusNationalCode()
	{
		return this.rttstatusnationalcode;
	}
	public static int getRTTStatusNationalCodeMaxLength()
	{
		return 255;
	}
	public void setRTTStatusNationalCode(String value)
	{
		this.isValidated = false;
		this.rttstatusnationalcode = value;
	}
	public boolean getReferrerTypeIsNotNull()
	{
		return this.referrertype != null;
	}
	public ims.core.vo.lookups.SourceOfReferral getReferrerType()
	{
		return this.referrertype;
	}
	public void setReferrerType(ims.core.vo.lookups.SourceOfReferral value)
	{
		this.isValidated = false;
		this.referrertype = value;
	}
	public boolean getReferringPracticeCCGCodeIsNotNull()
	{
		return this.referringpracticeccgcode != null;
	}
	public String getReferringPracticeCCGCode()
	{
		return this.referringpracticeccgcode;
	}
	public static int getReferringPracticeCCGCodeMaxLength()
	{
		return 255;
	}
	public void setReferringPracticeCCGCode(String value)
	{
		this.isValidated = false;
		this.referringpracticeccgcode = value;
	}
	public boolean getSysInfoIsNotNull()
	{
		return this.sysinfo != null;
	}
	public ims.vo.SystemInformation getSysInfo()
	{
		return this.sysinfo;
	}
	public void setSysInfo(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.sysinfo = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.icabreferral != null)
		{
			if(!this.icabreferral.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.referraldetails != null)
		{
			if(!this.referraldetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.investigationorders != null)
		{
			if(!this.investigationorders.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.appointments != null)
		{
			if(!this.appointments.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.statushistory != null)
		{
			if(!this.statushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.callattempts != null)
		{
			if(!this.callattempts.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.consultationappt != null)
		{
			if(!this.consultationappt.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.icabreferral != null)
		{
			String[] listOfOtherErrors = this.icabreferral.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.referraldetails != null)
		{
			String[] listOfOtherErrors = this.referraldetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.investigationorders != null)
		{
			String[] listOfOtherErrors = this.investigationorders.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.appointments != null)
		{
			String[] listOfOtherErrors = this.appointments.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.statushistory != null)
		{
			String[] listOfOtherErrors = this.statushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.callattempts != null)
		{
			String[] listOfOtherErrors = this.callattempts.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.consultationappt != null)
		{
			String[] listOfOtherErrors = this.consultationappt.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ifCatsReferralVo clone = new ifCatsReferralVo(this.id, this.version);
		
		clone.patient = this.patient;
		if(this.icabreferral == null)
			clone.icabreferral = null;
		else
			clone.icabreferral = (ims.core.vo.ICABReferralVo)this.icabreferral.clone();
		if(this.referraldetails == null)
			clone.referraldetails = null;
		else
			clone.referraldetails = (ims.clinical.vo.ReferralLetterDetailsVo)this.referraldetails.clone();
		if(this.investigationorders == null)
			clone.investigationorders = null;
		else
			clone.investigationorders = (ims.ocrr.vo.OcsOrderVoCollection)this.investigationorders.clone();
		if(this.appointments == null)
			clone.appointments = null;
		else
			clone.appointments = (ims.scheduling.vo.Booking_AppointmentVoCollection)this.appointments.clone();
		clone.hasdocuments = this.hasdocuments;
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.RefMan.vo.CatsReferralStatusVo)this.currentstatus.clone();
		if(this.statushistory == null)
			clone.statushistory = null;
		else
			clone.statushistory = (ims.RefMan.vo.CatsReferralStatusVoCollection)this.statushistory.clone();
		if(this.callattempts == null)
			clone.callattempts = null;
		else
			clone.callattempts = (ims.RefMan.vo.AppointmentCallAttemptsVoCollection)this.callattempts.clone();
		if(this.consultationappt == null)
			clone.consultationappt = null;
		else
			clone.consultationappt = (ims.scheduling.vo.Booking_AppointmentVo)this.consultationappt.clone();
		clone.issuitableforsurgery = this.issuitableforsurgery;
		clone.isfitforsurgery = this.isfitforsurgery;
		clone.hastheatreappt = this.hastheatreappt;
		clone.isawaitingclinicalinfo = this.isawaitingclinicalinfo;
		clone.hasrejectedinv = this.hasrejectedinv;
		clone.consultationactivityrequired = this.consultationactivityrequired;
		clone.hasdnaornotseenactivity = this.hasdnaornotseenactivity;
		clone.hasrebookingsubsequentactivity = this.hasrebookingsubsequentactivity;
		clone.redirectcab = this.redirectcab;
		if(this.urgency == null)
			clone.urgency = null;
		else
			clone.urgency = (ims.RefMan.vo.lookups.ReferralUrgency)this.urgency.clone();
		if(this.cancertype == null)
			clone.cancertype = null;
		else
			clone.cancertype = (ims.RefMan.vo.lookups.CancerType)this.cancertype.clone();
		clone.rttstatusnationalcode = this.rttstatusnationalcode;
		if(this.referrertype == null)
			clone.referrertype = null;
		else
			clone.referrertype = (ims.core.vo.lookups.SourceOfReferral)this.referrertype.clone();
		clone.referringpracticeccgcode = this.referringpracticeccgcode;
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ifCatsReferralVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ifCatsReferralVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ifCatsReferralVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ifCatsReferralVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.urgency != null)
			count++;
		if(this.cancertype != null)
			count++;
		if(this.rttstatusnationalcode != null)
			count++;
		if(this.referrertype != null)
			count++;
		if(this.referringpracticeccgcode != null)
			count++;
		if(this.sysinfo != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 6;
	}
	protected ims.RefMan.vo.lookups.ReferralUrgency urgency;
	protected ims.RefMan.vo.lookups.CancerType cancertype;
	protected String rttstatusnationalcode;
	protected ims.core.vo.lookups.SourceOfReferral referrertype;
	protected String referringpracticeccgcode;
	protected ims.vo.SystemInformation sysinfo;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
