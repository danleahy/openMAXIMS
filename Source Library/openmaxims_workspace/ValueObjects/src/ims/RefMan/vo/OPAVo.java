//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.OPA business object (ID: 1096100079).
 */
public class OPAVo extends ims.RefMan.vo.OPARefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OPAVo()
	{
	}
	public OPAVo(Integer id, int version)
	{
		super(id, version);
	}
	public OPAVo(ims.RefMan.vo.beans.OPAVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.consultant = bean.getConsultant();
		this.spr = bean.getSPR();
		this.associatespecialist = bean.getAssociateSpecialist();
		this.anydoctortosee = bean.getAnyDoctorToSee();
		this.otherhcp = bean.getOtherHCP();
		this.otherhcpvalue = bean.getOtherHCPValue() == null ? null : ims.core.vo.lookups.OtherHCP.buildLookup(bean.getOtherHCPValue());
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.namedconsultant = bean.getNamedConsultant();
		this.namedconsultantvalue = bean.getNamedConsultantValue() == null ? null : bean.getNamedConsultantValue().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.OPAVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.consultant = bean.getConsultant();
		this.spr = bean.getSPR();
		this.associatespecialist = bean.getAssociateSpecialist();
		this.anydoctortosee = bean.getAnyDoctorToSee();
		this.otherhcp = bean.getOtherHCP();
		this.otherhcpvalue = bean.getOtherHCPValue() == null ? null : ims.core.vo.lookups.OtherHCP.buildLookup(bean.getOtherHCPValue());
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.namedconsultant = bean.getNamedConsultant();
		this.namedconsultantvalue = bean.getNamedConsultantValue() == null ? null : bean.getNamedConsultantValue().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.OPAVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.OPAVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.OPAVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CONSULTANT"))
			return getConsultant();
		if(fieldName.equals("SPR"))
			return getSPR();
		if(fieldName.equals("ASSOCIATESPECIALIST"))
			return getAssociateSpecialist();
		if(fieldName.equals("ANYDOCTORTOSEE"))
			return getAnyDoctorToSee();
		if(fieldName.equals("OTHERHCP"))
			return getOtherHCP();
		if(fieldName.equals("OTHERHCPVALUE"))
			return getOtherHCPValue();
		if(fieldName.equals("CATSREFERRAL"))
			return getCatsReferral();
		if(fieldName.equals("NAMEDCONSULTANT"))
			return getNamedConsultant();
		if(fieldName.equals("NAMEDCONSULTANTVALUE"))
			return getNamedConsultantValue();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getConsultantIsNotNull()
	{
		return this.consultant != null;
	}
	public Boolean getConsultant()
	{
		return this.consultant;
	}
	public void setConsultant(Boolean value)
	{
		this.isValidated = false;
		this.consultant = value;
	}
	public boolean getSPRIsNotNull()
	{
		return this.spr != null;
	}
	public Boolean getSPR()
	{
		return this.spr;
	}
	public void setSPR(Boolean value)
	{
		this.isValidated = false;
		this.spr = value;
	}
	public boolean getAssociateSpecialistIsNotNull()
	{
		return this.associatespecialist != null;
	}
	public Boolean getAssociateSpecialist()
	{
		return this.associatespecialist;
	}
	public void setAssociateSpecialist(Boolean value)
	{
		this.isValidated = false;
		this.associatespecialist = value;
	}
	public boolean getAnyDoctorToSeeIsNotNull()
	{
		return this.anydoctortosee != null;
	}
	public Boolean getAnyDoctorToSee()
	{
		return this.anydoctortosee;
	}
	public void setAnyDoctorToSee(Boolean value)
	{
		this.isValidated = false;
		this.anydoctortosee = value;
	}
	public boolean getOtherHCPIsNotNull()
	{
		return this.otherhcp != null;
	}
	public Boolean getOtherHCP()
	{
		return this.otherhcp;
	}
	public void setOtherHCP(Boolean value)
	{
		this.isValidated = false;
		this.otherhcp = value;
	}
	public boolean getOtherHCPValueIsNotNull()
	{
		return this.otherhcpvalue != null;
	}
	public ims.core.vo.lookups.OtherHCP getOtherHCPValue()
	{
		return this.otherhcpvalue;
	}
	public void setOtherHCPValue(ims.core.vo.lookups.OtherHCP value)
	{
		this.isValidated = false;
		this.otherhcpvalue = value;
	}
	public boolean getCatsReferralIsNotNull()
	{
		return this.catsreferral != null;
	}
	public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
	{
		return this.catsreferral;
	}
	public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
	{
		this.isValidated = false;
		this.catsreferral = value;
	}
	public boolean getNamedConsultantIsNotNull()
	{
		return this.namedconsultant != null;
	}
	public Boolean getNamedConsultant()
	{
		return this.namedconsultant;
	}
	public void setNamedConsultant(Boolean value)
	{
		this.isValidated = false;
		this.namedconsultant = value;
	}
	public boolean getNamedConsultantValueIsNotNull()
	{
		return this.namedconsultantvalue != null;
	}
	public ims.core.vo.HcpLiteVo getNamedConsultantValue()
	{
		return this.namedconsultantvalue;
	}
	public void setNamedConsultantValue(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.namedconsultantvalue = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.catsreferral == null)
			listOfErrors.add("CatsReferral is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OPAVo clone = new OPAVo(this.id, this.version);
		
		clone.consultant = this.consultant;
		clone.spr = this.spr;
		clone.associatespecialist = this.associatespecialist;
		clone.anydoctortosee = this.anydoctortosee;
		clone.otherhcp = this.otherhcp;
		if(this.otherhcpvalue == null)
			clone.otherhcpvalue = null;
		else
			clone.otherhcpvalue = (ims.core.vo.lookups.OtherHCP)this.otherhcpvalue.clone();
		clone.catsreferral = this.catsreferral;
		clone.namedconsultant = this.namedconsultant;
		if(this.namedconsultantvalue == null)
			clone.namedconsultantvalue = null;
		else
			clone.namedconsultantvalue = (ims.core.vo.HcpLiteVo)this.namedconsultantvalue.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OPAVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OPAVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((OPAVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((OPAVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.consultant != null)
			count++;
		if(this.spr != null)
			count++;
		if(this.associatespecialist != null)
			count++;
		if(this.anydoctortosee != null)
			count++;
		if(this.otherhcp != null)
			count++;
		if(this.otherhcpvalue != null)
			count++;
		if(this.catsreferral != null)
			count++;
		if(this.namedconsultant != null)
			count++;
		if(this.namedconsultantvalue != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 9;
	}
	protected Boolean consultant;
	protected Boolean spr;
	protected Boolean associatespecialist;
	protected Boolean anydoctortosee;
	protected Boolean otherhcp;
	protected ims.core.vo.lookups.OtherHCP otherhcpvalue;
	protected ims.RefMan.vo.CatsReferralRefVo catsreferral;
	protected Boolean namedconsultant;
	protected ims.core.vo.HcpLiteVo namedconsultantvalue;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
