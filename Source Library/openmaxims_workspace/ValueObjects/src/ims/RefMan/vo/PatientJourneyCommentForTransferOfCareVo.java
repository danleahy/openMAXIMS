//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to Pathways.PatientJourneyComment business object (ID: 1088100012).
 */
public class PatientJourneyCommentForTransferOfCareVo extends ims.pathways.vo.PatientJourneyCommentLiteVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientJourneyCommentForTransferOfCareVo()
	{
	}
	public PatientJourneyCommentForTransferOfCareVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientJourneyCommentForTransferOfCareVo(ims.RefMan.vo.beans.PatientJourneyCommentForTransferOfCareVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.recordinginfo = bean.getRecordingInfo() == null ? null : bean.getRecordingInfo().buildVo();
		this.comment = bean.getComment();
		this.commentlevel = bean.getCommentLevel() == null ? null : ims.pathways.vo.lookups.CommentLevel.buildLookup(bean.getCommentLevel());
		this.corrected = bean.getCorrected();
		this.correctioncomments = bean.getCorrectionComments();
		this.correctedauthoringinformation = bean.getCorrectedAuthoringInformation() == null ? null : bean.getCorrectedAuthoringInformation().buildVo();
		this.linkedevent = bean.getLinkedEvent() == null ? null : bean.getLinkedEvent().buildVo();
		this.linkedtarget = bean.getLinkedTarget() == null ? null : bean.getLinkedTarget().buildVo();
		this.reasonnovalidationdate = bean.getReasonNoValidationDate();
		this.reasonnovalidation = bean.getReasonNoValidation() == null ? null : ims.pathways.vo.lookups.NoValidationReason.buildLookup(bean.getReasonNoValidation());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PatientJourneyCommentForTransferOfCareVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.recordinginfo = bean.getRecordingInfo() == null ? null : bean.getRecordingInfo().buildVo(map);
		this.comment = bean.getComment();
		this.commentlevel = bean.getCommentLevel() == null ? null : ims.pathways.vo.lookups.CommentLevel.buildLookup(bean.getCommentLevel());
		this.corrected = bean.getCorrected();
		this.correctioncomments = bean.getCorrectionComments();
		this.correctedauthoringinformation = bean.getCorrectedAuthoringInformation() == null ? null : bean.getCorrectedAuthoringInformation().buildVo(map);
		this.linkedevent = bean.getLinkedEvent() == null ? null : bean.getLinkedEvent().buildVo(map);
		this.linkedtarget = bean.getLinkedTarget() == null ? null : bean.getLinkedTarget().buildVo(map);
		this.reasonnovalidationdate = bean.getReasonNoValidationDate();
		this.reasonnovalidation = bean.getReasonNoValidation() == null ? null : ims.pathways.vo.lookups.NoValidationReason.buildLookup(bean.getReasonNoValidation());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PatientJourneyCommentForTransferOfCareVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PatientJourneyCommentForTransferOfCareVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PatientJourneyCommentForTransferOfCareVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("LINKEDEVENT"))
			return getLinkedEvent();
		if(fieldName.equals("LINKEDTARGET"))
			return getLinkedTarget();
		if(fieldName.equals("REASONNOVALIDATIONDATE"))
			return getReasonNoValidationDate();
		if(fieldName.equals("REASONNOVALIDATION"))
			return getReasonNoValidation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getLinkedEventIsNotNull()
	{
		return this.linkedevent != null;
	}
	public ims.RefMan.vo.PatientEventForTransferOfCareVo getLinkedEvent()
	{
		return this.linkedevent;
	}
	public void setLinkedEvent(ims.RefMan.vo.PatientEventForTransferOfCareVo value)
	{
		this.isValidated = false;
		this.linkedevent = value;
	}
	public boolean getLinkedTargetIsNotNull()
	{
		return this.linkedtarget != null;
	}
	public ims.RefMan.vo.PatientJournayTargetForTransferOfCareVo getLinkedTarget()
	{
		return this.linkedtarget;
	}
	public void setLinkedTarget(ims.RefMan.vo.PatientJournayTargetForTransferOfCareVo value)
	{
		this.isValidated = false;
		this.linkedtarget = value;
	}
	public boolean getReasonNoValidationDateIsNotNull()
	{
		return this.reasonnovalidationdate != null;
	}
	public String getReasonNoValidationDate()
	{
		return this.reasonnovalidationdate;
	}
	public static int getReasonNoValidationDateMaxLength()
	{
		return 255;
	}
	public void setReasonNoValidationDate(String value)
	{
		this.isValidated = false;
		this.reasonnovalidationdate = value;
	}
	public boolean getReasonNoValidationIsNotNull()
	{
		return this.reasonnovalidation != null;
	}
	public ims.pathways.vo.lookups.NoValidationReason getReasonNoValidation()
	{
		return this.reasonnovalidation;
	}
	public void setReasonNoValidation(ims.pathways.vo.lookups.NoValidationReason value)
	{
		this.isValidated = false;
		this.reasonnovalidation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.recordinginfo != null)
		{
			if(!this.recordinginfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.correctedauthoringinformation != null)
		{
			if(!this.correctedauthoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.linkedevent != null)
		{
			if(!this.linkedevent.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.linkedtarget != null)
		{
			if(!this.linkedtarget.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.recordinginfo == null)
			listOfErrors.add("RecordingInfo is mandatory");
		if(this.recordinginfo != null)
		{
			String[] listOfOtherErrors = this.recordinginfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.comment != null)
			if(this.comment.length() > 3000)
				listOfErrors.add("The length of the field [comment] in the value object [ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVo] is too big. It should be less or equal to 3000");
		if(this.commentlevel == null)
			listOfErrors.add("CommentLevel is mandatory");
		if(this.correctioncomments != null)
			if(this.correctioncomments.length() > 250)
				listOfErrors.add("The length of the field [correctioncomments] in the value object [ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVo] is too big. It should be less or equal to 250");
		if(this.correctedauthoringinformation != null)
		{
			String[] listOfOtherErrors = this.correctedauthoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.linkedevent != null)
		{
			String[] listOfOtherErrors = this.linkedevent.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.linkedtarget != null)
		{
			String[] listOfOtherErrors = this.linkedtarget.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.reasonnovalidationdate != null)
			if(this.reasonnovalidationdate.length() > 255)
				listOfErrors.add("The length of the field [reasonnovalidationdate] in the value object [ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientJourneyCommentForTransferOfCareVo clone = new PatientJourneyCommentForTransferOfCareVo(this.id, this.version);
		
		if(this.recordinginfo == null)
			clone.recordinginfo = null;
		else
			clone.recordinginfo = (ims.core.vo.RecordingUserInformationVo)this.recordinginfo.clone();
		clone.comment = this.comment;
		if(this.commentlevel == null)
			clone.commentlevel = null;
		else
			clone.commentlevel = (ims.pathways.vo.lookups.CommentLevel)this.commentlevel.clone();
		clone.corrected = this.corrected;
		clone.correctioncomments = this.correctioncomments;
		if(this.correctedauthoringinformation == null)
			clone.correctedauthoringinformation = null;
		else
			clone.correctedauthoringinformation = (ims.core.vo.AuthoringInformationVo)this.correctedauthoringinformation.clone();
		if(this.linkedevent == null)
			clone.linkedevent = null;
		else
			clone.linkedevent = (ims.RefMan.vo.PatientEventForTransferOfCareVo)this.linkedevent.clone();
		if(this.linkedtarget == null)
			clone.linkedtarget = null;
		else
			clone.linkedtarget = (ims.RefMan.vo.PatientJournayTargetForTransferOfCareVo)this.linkedtarget.clone();
		clone.reasonnovalidationdate = this.reasonnovalidationdate;
		if(this.reasonnovalidation == null)
			clone.reasonnovalidation = null;
		else
			clone.reasonnovalidation = (ims.pathways.vo.lookups.NoValidationReason)this.reasonnovalidation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientJourneyCommentForTransferOfCareVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientJourneyCommentForTransferOfCareVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientJourneyCommentForTransferOfCareVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientJourneyCommentForTransferOfCareVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.linkedevent != null)
			count++;
		if(this.linkedtarget != null)
			count++;
		if(this.reasonnovalidationdate != null)
			count++;
		if(this.reasonnovalidation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 4;
	}
	protected ims.RefMan.vo.PatientEventForTransferOfCareVo linkedevent;
	protected ims.RefMan.vo.PatientJournayTargetForTransferOfCareVo linkedtarget;
	protected String reasonnovalidationdate;
	protected ims.pathways.vo.lookups.NoValidationReason reasonnovalidation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
