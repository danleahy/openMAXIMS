//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;


public class AdmissionDetailsWithConsultantAndWardStayVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AdmissionDetailsWithConsultantAndWardStayVo()
	{
	}
	public AdmissionDetailsWithConsultantAndWardStayVo(ims.RefMan.vo.beans.AdmissionDetailsWithConsultantAndWardStayVoBean bean)
	{
		this.admissiondetail = bean.getAdmissionDetail() == null ? null : bean.getAdmissionDetail().buildVo();
		this.inpatientepisode = bean.getInpatientEpisode() == null ? null : bean.getInpatientEpisode().buildVo();
		this.dischargeepisode = bean.getDischargeEpisode() == null ? null : bean.getDischargeEpisode().buildVo();
		this.appointment = ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection.buildFromBeanCollection(bean.getAppointment());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.AdmissionDetailsWithConsultantAndWardStayVoBean bean)
	{
		this.admissiondetail = bean.getAdmissionDetail() == null ? null : bean.getAdmissionDetail().buildVo(map);
		this.inpatientepisode = bean.getInpatientEpisode() == null ? null : bean.getInpatientEpisode().buildVo(map);
		this.dischargeepisode = bean.getDischargeEpisode() == null ? null : bean.getDischargeEpisode().buildVo(map);
		this.appointment = ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection.buildFromBeanCollection(bean.getAppointment());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.AdmissionDetailsWithConsultantAndWardStayVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.AdmissionDetailsWithConsultantAndWardStayVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.AdmissionDetailsWithConsultantAndWardStayVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getAdmissionDetailIsNotNull()
	{
		return this.admissiondetail != null;
	}
	public ims.RefMan.vo.AdmissionDetailForPatientCodingListVo getAdmissionDetail()
	{
		return this.admissiondetail;
	}
	public void setAdmissionDetail(ims.RefMan.vo.AdmissionDetailForPatientCodingListVo value)
	{
		this.isValidated = false;
		this.admissiondetail = value;
	}
	public boolean getInpatientEpisodeIsNotNull()
	{
		return this.inpatientepisode != null;
	}
	public ims.RefMan.vo.InpatientEpisodeForPatientCodingListShortVo getInpatientEpisode()
	{
		return this.inpatientepisode;
	}
	public void setInpatientEpisode(ims.RefMan.vo.InpatientEpisodeForPatientCodingListShortVo value)
	{
		this.isValidated = false;
		this.inpatientepisode = value;
	}
	public boolean getDischargeEpisodeIsNotNull()
	{
		return this.dischargeepisode != null;
	}
	public ims.RefMan.vo.DischargeEpisodeForPatientCodingListShortVo getDischargeEpisode()
	{
		return this.dischargeepisode;
	}
	public void setDischargeEpisode(ims.RefMan.vo.DischargeEpisodeForPatientCodingListShortVo value)
	{
		this.isValidated = false;
		this.dischargeepisode = value;
	}
	public boolean getAppointmentIsNotNull()
	{
		return this.appointment != null;
	}
	public ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection getAppointment()
	{
		return this.appointment;
	}
	public void setAppointment(ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection value)
	{
		this.isValidated = false;
		this.appointment = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof AdmissionDetailsWithConsultantAndWardStayVo))
			return false;
		AdmissionDetailsWithConsultantAndWardStayVo compareObj = (AdmissionDetailsWithConsultantAndWardStayVo)obj;
		if(this.getAdmissionDetail() == null && compareObj.getAdmissionDetail() != null)
			return false;
		if(this.getAdmissionDetail() != null && compareObj.getAdmissionDetail() == null)
			return false;
		if(this.getAdmissionDetail() != null && compareObj.getAdmissionDetail() != null)
			return this.getAdmissionDetail().equals(compareObj.getAdmissionDetail());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AdmissionDetailsWithConsultantAndWardStayVo clone = new AdmissionDetailsWithConsultantAndWardStayVo();
		
		if(this.admissiondetail == null)
			clone.admissiondetail = null;
		else
			clone.admissiondetail = (ims.RefMan.vo.AdmissionDetailForPatientCodingListVo)this.admissiondetail.clone();
		if(this.inpatientepisode == null)
			clone.inpatientepisode = null;
		else
			clone.inpatientepisode = (ims.RefMan.vo.InpatientEpisodeForPatientCodingListShortVo)this.inpatientepisode.clone();
		if(this.dischargeepisode == null)
			clone.dischargeepisode = null;
		else
			clone.dischargeepisode = (ims.RefMan.vo.DischargeEpisodeForPatientCodingListShortVo)this.dischargeepisode.clone();
		if(this.appointment == null)
			clone.appointment = null;
		else
			clone.appointment = (ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection)this.appointment.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AdmissionDetailsWithConsultantAndWardStayVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AdmissionDetailsWithConsultantAndWardStayVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AdmissionDetailsWithConsultantAndWardStayVo compareObj = (AdmissionDetailsWithConsultantAndWardStayVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getAdmissionDetail() == null && compareObj.getAdmissionDetail() != null)
				return -1;
			if(this.getAdmissionDetail() != null && compareObj.getAdmissionDetail() == null)
				return 1;
			if(this.getAdmissionDetail() != null && compareObj.getAdmissionDetail() != null)
				retVal = this.getAdmissionDetail().compareTo(compareObj.getAdmissionDetail());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.admissiondetail != null)
			count++;
		if(this.inpatientepisode != null)
			count++;
		if(this.dischargeepisode != null)
			count++;
		if(this.appointment != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected ims.RefMan.vo.AdmissionDetailForPatientCodingListVo admissiondetail;
	protected ims.RefMan.vo.InpatientEpisodeForPatientCodingListShortVo inpatientepisode;
	protected ims.RefMan.vo.DischargeEpisodeForPatientCodingListShortVo dischargeepisode;
	protected ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection appointment;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
