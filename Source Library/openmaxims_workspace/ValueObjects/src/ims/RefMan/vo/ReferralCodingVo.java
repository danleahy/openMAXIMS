//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.ReferralCoding business object (ID: 1096100037).
 */
public class ReferralCodingVo extends ims.RefMan.vo.ReferralCodingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ReferralCodingVo()
	{
	}
	public ReferralCodingVo(Integer id, int version)
	{
		super(id, version);
	}
	public ReferralCodingVo(ims.RefMan.vo.beans.ReferralCodingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.codingitems = ims.RefMan.vo.ReferralCodingItemVoCollection.buildFromBeanCollection(bean.getCodingItems());
		this.authoringmos = bean.getAuthoringMOS() == null ? null : bean.getAuthoringMOS().buildVo();
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.pasevent = bean.getPasEvent() == null ? null : new ims.core.admin.pas.vo.PASEventRefVo(new Integer(bean.getPasEvent().getId()), bean.getPasEvent().getVersion());
		this.comments = bean.getComments();
		this.appointment = bean.getAppointment() == null ? null : bean.getAppointment().buildVo();
		this.active = bean.getActive();
		this.stagingcodeexport = ims.RefMan.vo.StageCodeExportVoCollection.buildFromBeanCollection(bean.getStagingCodeExport());
		this.fce = bean.getFCE() == null ? null : bean.getFCE().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.ReferralCodingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.catsreferral = bean.getCatsReferral() == null ? null : new ims.RefMan.vo.CatsReferralRefVo(new Integer(bean.getCatsReferral().getId()), bean.getCatsReferral().getVersion());
		this.codingitems = ims.RefMan.vo.ReferralCodingItemVoCollection.buildFromBeanCollection(bean.getCodingItems());
		this.authoringmos = bean.getAuthoringMOS() == null ? null : bean.getAuthoringMOS().buildVo(map);
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.pasevent = bean.getPasEvent() == null ? null : new ims.core.admin.pas.vo.PASEventRefVo(new Integer(bean.getPasEvent().getId()), bean.getPasEvent().getVersion());
		this.comments = bean.getComments();
		this.appointment = bean.getAppointment() == null ? null : bean.getAppointment().buildVo(map);
		this.active = bean.getActive();
		this.stagingcodeexport = ims.RefMan.vo.StageCodeExportVoCollection.buildFromBeanCollection(bean.getStagingCodeExport());
		this.fce = bean.getFCE() == null ? null : bean.getFCE().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.ReferralCodingVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.ReferralCodingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.ReferralCodingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CATSREFERRAL"))
			return getCatsReferral();
		if(fieldName.equals("CODINGITEMS"))
			return getCodingItems();
		if(fieldName.equals("AUTHORINGMOS"))
			return getAuthoringMOS();
		if(fieldName.equals("AUTHORINGDATETIME"))
			return getAuthoringDateTime();
		if(fieldName.equals("PASEVENT"))
			return getPasEvent();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("APPOINTMENT"))
			return getAppointment();
		if(fieldName.equals("ACTIVE"))
			return getActive();
		if(fieldName.equals("STAGINGCODEEXPORT"))
			return getStagingCodeExport();
		if(fieldName.equals("FCE"))
			return getFCE();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCatsReferralIsNotNull()
	{
		return this.catsreferral != null;
	}
	public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
	{
		return this.catsreferral;
	}
	public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
	{
		this.isValidated = false;
		this.catsreferral = value;
	}
	public boolean getCodingItemsIsNotNull()
	{
		return this.codingitems != null;
	}
	public ims.RefMan.vo.ReferralCodingItemVoCollection getCodingItems()
	{
		return this.codingitems;
	}
	public void setCodingItems(ims.RefMan.vo.ReferralCodingItemVoCollection value)
	{
		this.isValidated = false;
		this.codingitems = value;
	}
	public boolean getAuthoringMOSIsNotNull()
	{
		return this.authoringmos != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getAuthoringMOS()
	{
		return this.authoringmos;
	}
	public void setAuthoringMOS(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.authoringmos = value;
	}
	public boolean getAuthoringDateTimeIsNotNull()
	{
		return this.authoringdatetime != null;
	}
	public ims.framework.utils.DateTime getAuthoringDateTime()
	{
		return this.authoringdatetime;
	}
	public void setAuthoringDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.authoringdatetime = value;
	}
	public boolean getPasEventIsNotNull()
	{
		return this.pasevent != null;
	}
	public ims.core.admin.pas.vo.PASEventRefVo getPasEvent()
	{
		return this.pasevent;
	}
	public void setPasEvent(ims.core.admin.pas.vo.PASEventRefVo value)
	{
		this.isValidated = false;
		this.pasevent = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 1000;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getAppointmentIsNotNull()
	{
		return this.appointment != null;
	}
	public ims.scheduling.vo.BookingAppointmentOutpatientCodingVo getAppointment()
	{
		return this.appointment;
	}
	public void setAppointment(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value)
	{
		this.isValidated = false;
		this.appointment = value;
	}
	public boolean getActiveIsNotNull()
	{
		return this.active != null;
	}
	public Boolean getActive()
	{
		return this.active;
	}
	public void setActive(Boolean value)
	{
		this.isValidated = false;
		this.active = value;
	}
	public boolean getStagingCodeExportIsNotNull()
	{
		return this.stagingcodeexport != null;
	}
	public ims.RefMan.vo.StageCodeExportVoCollection getStagingCodeExport()
	{
		return this.stagingcodeexport;
	}
	public void setStagingCodeExport(ims.RefMan.vo.StageCodeExportVoCollection value)
	{
		this.isValidated = false;
		this.stagingcodeexport = value;
	}
	public boolean getFCEIsNotNull()
	{
		return this.fce != null;
	}
	public ims.core.vo.ConsultantStayVo getFCE()
	{
		return this.fce;
	}
	public void setFCE(ims.core.vo.ConsultantStayVo value)
	{
		this.isValidated = false;
		this.fce = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.codingitems != null)
		{
			if(!this.codingitems.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.fce != null)
		{
			if(!this.fce.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.catsreferral == null)
			listOfErrors.add("CatsReferral is mandatory");
		if(this.codingitems != null)
		{
			String[] listOfOtherErrors = this.codingitems.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringmos == null)
			listOfErrors.add("AuthoringMOS is mandatory");
		if(this.authoringdatetime == null)
			listOfErrors.add("AuthoringDateTime is mandatory");
		if(this.comments != null)
			if(this.comments.length() > 1000)
				listOfErrors.add("The length of the field [comments] in the value object [ims.RefMan.vo.ReferralCodingVo] is too big. It should be less or equal to 1000");
		if(this.fce != null)
		{
			String[] listOfOtherErrors = this.fce.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ReferralCodingVo clone = new ReferralCodingVo(this.id, this.version);
		
		clone.catsreferral = this.catsreferral;
		if(this.codingitems == null)
			clone.codingitems = null;
		else
			clone.codingitems = (ims.RefMan.vo.ReferralCodingItemVoCollection)this.codingitems.clone();
		if(this.authoringmos == null)
			clone.authoringmos = null;
		else
			clone.authoringmos = (ims.core.vo.MemberOfStaffLiteVo)this.authoringmos.clone();
		if(this.authoringdatetime == null)
			clone.authoringdatetime = null;
		else
			clone.authoringdatetime = (ims.framework.utils.DateTime)this.authoringdatetime.clone();
		clone.pasevent = this.pasevent;
		clone.comments = this.comments;
		if(this.appointment == null)
			clone.appointment = null;
		else
			clone.appointment = (ims.scheduling.vo.BookingAppointmentOutpatientCodingVo)this.appointment.clone();
		clone.active = this.active;
		if(this.stagingcodeexport == null)
			clone.stagingcodeexport = null;
		else
			clone.stagingcodeexport = (ims.RefMan.vo.StageCodeExportVoCollection)this.stagingcodeexport.clone();
		if(this.fce == null)
			clone.fce = null;
		else
			clone.fce = (ims.core.vo.ConsultantStayVo)this.fce.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ReferralCodingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ReferralCodingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ReferralCodingVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ReferralCodingVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.catsreferral != null)
			count++;
		if(this.codingitems != null)
			count++;
		if(this.authoringmos != null)
			count++;
		if(this.authoringdatetime != null)
			count++;
		if(this.pasevent != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.appointment != null)
			count++;
		if(this.active != null)
			count++;
		if(this.stagingcodeexport != null)
			count++;
		if(this.fce != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.RefMan.vo.CatsReferralRefVo catsreferral;
	protected ims.RefMan.vo.ReferralCodingItemVoCollection codingitems;
	protected ims.core.vo.MemberOfStaffLiteVo authoringmos;
	protected ims.framework.utils.DateTime authoringdatetime;
	protected ims.core.admin.pas.vo.PASEventRefVo pasevent;
	protected String comments;
	protected ims.scheduling.vo.BookingAppointmentOutpatientCodingVo appointment;
	protected Boolean active;
	protected ims.RefMan.vo.StageCodeExportVoCollection stagingcodeexport;
	protected ims.core.vo.ConsultantStayVo fce;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
