//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.CancerTypeConfig business object (ID: 1096100071).
 */
public class CancerTypeConfigVo extends ims.RefMan.vo.CancerTypeConfigRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CancerTypeConfigVo()
	{
	}
	public CancerTypeConfigVo(Integer id, int version)
	{
		super(id, version);
	}
	public CancerTypeConfigVo(ims.RefMan.vo.beans.CancerTypeConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.canceritemconfig = ims.RefMan.vo.CancerTypeItemConfigVoCollection.buildFromBeanCollection(bean.getCancerItemConfig());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.CancerTypeConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.canceritemconfig = ims.RefMan.vo.CancerTypeItemConfigVoCollection.buildFromBeanCollection(bean.getCancerItemConfig());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.CancerTypeConfigVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.CancerTypeConfigVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.CancerTypeConfigVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CANCERITEMCONFIG"))
			return getCancerItemConfig();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCancerItemConfigIsNotNull()
	{
		return this.canceritemconfig != null;
	}
	public ims.RefMan.vo.CancerTypeItemConfigVoCollection getCancerItemConfig()
	{
		return this.canceritemconfig;
	}
	public void setCancerItemConfig(ims.RefMan.vo.CancerTypeItemConfigVoCollection value)
	{
		this.isValidated = false;
		this.canceritemconfig = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.canceritemconfig != null)
		{
			if(!this.canceritemconfig.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.canceritemconfig == null || this.canceritemconfig.size() == 0)
			listOfErrors.add("CancerItemConfig are mandatory");
		if(this.canceritemconfig != null)
		{
			String[] listOfOtherErrors = this.canceritemconfig.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CancerTypeConfigVo clone = new CancerTypeConfigVo(this.id, this.version);
		
		if(this.canceritemconfig == null)
			clone.canceritemconfig = null;
		else
			clone.canceritemconfig = (ims.RefMan.vo.CancerTypeItemConfigVoCollection)this.canceritemconfig.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CancerTypeConfigVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CancerTypeConfigVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CancerTypeConfigVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CancerTypeConfigVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.canceritemconfig != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 1;
	}
	protected ims.RefMan.vo.CancerTypeItemConfigVoCollection canceritemconfig;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
