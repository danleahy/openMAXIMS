//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.PreAssessmentOutcome business object (ID: 1096100083).
 */
public class PreAssessmentOutcomeVo extends ims.RefMan.vo.PreAssessmentOutcomeRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PreAssessmentOutcomeVo()
	{
	}
	public PreAssessmentOutcomeVo(Integer id, int version)
	{
		super(id, version);
	}
	public PreAssessmentOutcomeVo(ims.RefMan.vo.beans.PreAssessmentOutcomeVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.recordinginformation = bean.getRecordingInformation() == null ? null : bean.getRecordingInformation().buildVo();
		this.lastupdatinginformation = bean.getLastUpdatingInformation() == null ? null : bean.getLastUpdatingInformation().buildVo();
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : new ims.core.clinical.vo.ProcedureRefVo(new Integer(bean.getPrimaryProcedure().getId()), bean.getPrimaryProcedure().getVersion());
		this.proceduredescription = bean.getProcedureDescription();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : new ims.core.clinical.vo.ProcedureRefVo(new Integer(bean.getSecondaryProcedure().getId()), bean.getSecondaryProcedure().getVersion());
		this.secondarydescription = bean.getSecondaryDescription();
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.metrics = bean.getMetrics() == null ? null : bean.getMetrics().buildVo();
		this.patientdiabetic = bean.getPatientDiabetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPatientDiabetic());
		this.pacemakerdefib = bean.getPaceMakerDefib() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPaceMakerDefib());
		this.pacemakertype = bean.getPaceMakerType() == null ? null : ims.clinical.vo.lookups.PacemakerDefibrillatorType.buildLookup(bean.getPaceMakerType());
		this.datelastcheckpacemaker = bean.getDateLastCheckPacemaker() == null ? null : bean.getDateLastCheckPacemaker().buildDate();
		this.receivinganticoag = bean.getReceivingAntiCoag() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getReceivingAntiCoag());
		this.therapyaction = bean.getTherapyAction() == null ? null : ims.clinical.vo.lookups.AntiCoagTherapyAction.buildLookup(bean.getTherapyAction());
		this.mobilityconsideration = bean.getMobilityConsideration();
		this.mobilitycomment = bean.getMobilityComment();
		this.electricbedneeded = bean.getElectricBedNeeded();
		this.shortnotice = bean.getShortNotice();
		this.noticeperiodvalue = bean.getNoticePeriodValue();
		this.noticeperiodtype = bean.getNoticePeriodType() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getNoticePeriodType());
		this.preopovernight = bean.getPreOpOvernight();
		this.nights = bean.getNights();
		this.postopstay = bean.getPostOpStay();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.postopcomments = bean.getPostOpComments();
		this.senioranaestrequired = bean.getSeniorAnaestRequired();
		this.senioranaestcomments = bean.getSeniorAnaestComments();
		this.criticalcarebedrequired = bean.getCriticalCareBedRequired();
		this.hducriticalcarebed = bean.getHduCriticalCareBed();
		this.itucriticalcarebed = bean.getItuCriticalCareBed();
		this.anaesthetichazards = ims.core.vo.PatientAlertLiteVoCollection.buildFromBeanCollection(bean.getAnaestheticHazards());
		this.waitingfordetails = ims.RefMan.vo.PreAssessmentInformationVoCollection.buildFromBeanCollection(bean.getWaitingForDetails());
		this.detailsoutstanding = bean.getDetailsOutstanding();
		this.crossmatchrequired = bean.getCrossmatchRequired();
		this.crossmatchcomments = bean.getCrossmatchComments();
		this.fittoproceed = bean.getFitToProceed();
		this.generalcomments = bean.getGeneralComments();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PreAssessmentOutcomeVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.recordinginformation = bean.getRecordingInformation() == null ? null : bean.getRecordingInformation().buildVo(map);
		this.lastupdatinginformation = bean.getLastUpdatingInformation() == null ? null : bean.getLastUpdatingInformation().buildVo(map);
		this.primaryprocedure = bean.getPrimaryProcedure() == null ? null : new ims.core.clinical.vo.ProcedureRefVo(new Integer(bean.getPrimaryProcedure().getId()), bean.getPrimaryProcedure().getVersion());
		this.proceduredescription = bean.getProcedureDescription();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
		this.anaesthetictype = bean.getAnaestheticType() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticType());
		this.secondaryprocedure = bean.getSecondaryProcedure() == null ? null : new ims.core.clinical.vo.ProcedureRefVo(new Integer(bean.getSecondaryProcedure().getId()), bean.getSecondaryProcedure().getVersion());
		this.secondarydescription = bean.getSecondaryDescription();
		this.secondaryproclaterality = bean.getSecondaryProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getSecondaryProcLaterality());
		this.metrics = bean.getMetrics() == null ? null : bean.getMetrics().buildVo(map);
		this.patientdiabetic = bean.getPatientDiabetic() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPatientDiabetic());
		this.pacemakerdefib = bean.getPaceMakerDefib() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPaceMakerDefib());
		this.pacemakertype = bean.getPaceMakerType() == null ? null : ims.clinical.vo.lookups.PacemakerDefibrillatorType.buildLookup(bean.getPaceMakerType());
		this.datelastcheckpacemaker = bean.getDateLastCheckPacemaker() == null ? null : bean.getDateLastCheckPacemaker().buildDate();
		this.receivinganticoag = bean.getReceivingAntiCoag() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getReceivingAntiCoag());
		this.therapyaction = bean.getTherapyAction() == null ? null : ims.clinical.vo.lookups.AntiCoagTherapyAction.buildLookup(bean.getTherapyAction());
		this.mobilityconsideration = bean.getMobilityConsideration();
		this.mobilitycomment = bean.getMobilityComment();
		this.electricbedneeded = bean.getElectricBedNeeded();
		this.shortnotice = bean.getShortNotice();
		this.noticeperiodvalue = bean.getNoticePeriodValue();
		this.noticeperiodtype = bean.getNoticePeriodType() == null ? null : ims.core.vo.lookups.TimeUnitsSecondsToMonths.buildLookup(bean.getNoticePeriodType());
		this.preopovernight = bean.getPreOpOvernight();
		this.nights = bean.getNights();
		this.postopstay = bean.getPostOpStay();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.postopcomments = bean.getPostOpComments();
		this.senioranaestrequired = bean.getSeniorAnaestRequired();
		this.senioranaestcomments = bean.getSeniorAnaestComments();
		this.criticalcarebedrequired = bean.getCriticalCareBedRequired();
		this.hducriticalcarebed = bean.getHduCriticalCareBed();
		this.itucriticalcarebed = bean.getItuCriticalCareBed();
		this.anaesthetichazards = ims.core.vo.PatientAlertLiteVoCollection.buildFromBeanCollection(bean.getAnaestheticHazards());
		this.waitingfordetails = ims.RefMan.vo.PreAssessmentInformationVoCollection.buildFromBeanCollection(bean.getWaitingForDetails());
		this.detailsoutstanding = bean.getDetailsOutstanding();
		this.crossmatchrequired = bean.getCrossmatchRequired();
		this.crossmatchcomments = bean.getCrossmatchComments();
		this.fittoproceed = bean.getFitToProceed();
		this.generalcomments = bean.getGeneralComments();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PreAssessmentOutcomeVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PreAssessmentOutcomeVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PreAssessmentOutcomeVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("RECORDINGINFORMATION"))
			return getRecordingInformation();
		if(fieldName.equals("LASTUPDATINGINFORMATION"))
			return getLastUpdatingInformation();
		if(fieldName.equals("PRIMARYPROCEDURE"))
			return getPrimaryProcedure();
		if(fieldName.equals("PROCEDUREDESCRIPTION"))
			return getProcedureDescription();
		if(fieldName.equals("PROCLATERALITY"))
			return getProcLaterality();
		if(fieldName.equals("ANAESTHETICTYPE"))
			return getAnaestheticType();
		if(fieldName.equals("SECONDARYPROCEDURE"))
			return getSecondaryProcedure();
		if(fieldName.equals("SECONDARYDESCRIPTION"))
			return getSecondaryDescription();
		if(fieldName.equals("SECONDARYPROCLATERALITY"))
			return getSecondaryProcLaterality();
		if(fieldName.equals("METRICS"))
			return getMetrics();
		if(fieldName.equals("PATIENTDIABETIC"))
			return getPatientDiabetic();
		if(fieldName.equals("PACEMAKERDEFIB"))
			return getPaceMakerDefib();
		if(fieldName.equals("PACEMAKERTYPE"))
			return getPaceMakerType();
		if(fieldName.equals("DATELASTCHECKPACEMAKER"))
			return getDateLastCheckPacemaker();
		if(fieldName.equals("RECEIVINGANTICOAG"))
			return getReceivingAntiCoag();
		if(fieldName.equals("THERAPYACTION"))
			return getTherapyAction();
		if(fieldName.equals("MOBILITYCONSIDERATION"))
			return getMobilityConsideration();
		if(fieldName.equals("MOBILITYCOMMENT"))
			return getMobilityComment();
		if(fieldName.equals("ELECTRICBEDNEEDED"))
			return getElectricBedNeeded();
		if(fieldName.equals("SHORTNOTICE"))
			return getShortNotice();
		if(fieldName.equals("NOTICEPERIODVALUE"))
			return getNoticePeriodValue();
		if(fieldName.equals("NOTICEPERIODTYPE"))
			return getNoticePeriodType();
		if(fieldName.equals("PREOPOVERNIGHT"))
			return getPreOpOvernight();
		if(fieldName.equals("NIGHTS"))
			return getNights();
		if(fieldName.equals("POSTOPSTAY"))
			return getPostOpStay();
		if(fieldName.equals("THEATRETYPE"))
			return getTheatreType();
		if(fieldName.equals("POSTOPCOMMENTS"))
			return getPostOpComments();
		if(fieldName.equals("SENIORANAESTREQUIRED"))
			return getSeniorAnaestRequired();
		if(fieldName.equals("SENIORANAESTCOMMENTS"))
			return getSeniorAnaestComments();
		if(fieldName.equals("CRITICALCAREBEDREQUIRED"))
			return getCriticalCareBedRequired();
		if(fieldName.equals("HDUCRITICALCAREBED"))
			return getHduCriticalCareBed();
		if(fieldName.equals("ITUCRITICALCAREBED"))
			return getItuCriticalCareBed();
		if(fieldName.equals("ANAESTHETICHAZARDS"))
			return getAnaestheticHazards();
		if(fieldName.equals("WAITINGFORDETAILS"))
			return getWaitingForDetails();
		if(fieldName.equals("DETAILSOUTSTANDING"))
			return getDetailsOutstanding();
		if(fieldName.equals("CROSSMATCHREQUIRED"))
			return getCrossmatchRequired();
		if(fieldName.equals("CROSSMATCHCOMMENTS"))
			return getCrossmatchComments();
		if(fieldName.equals("FITTOPROCEED"))
			return getFitToProceed();
		if(fieldName.equals("GENERALCOMMENTS"))
			return getGeneralComments();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getRecordingInformationIsNotNull()
	{
		return this.recordinginformation != null;
	}
	public ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo getRecordingInformation()
	{
		return this.recordinginformation;
	}
	public void setRecordingInformation(ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo value)
	{
		this.isValidated = false;
		this.recordinginformation = value;
	}
	public boolean getLastUpdatingInformationIsNotNull()
	{
		return this.lastupdatinginformation != null;
	}
	public ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo getLastUpdatingInformation()
	{
		return this.lastupdatinginformation;
	}
	public void setLastUpdatingInformation(ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo value)
	{
		this.isValidated = false;
		this.lastupdatinginformation = value;
	}
	public boolean getPrimaryProcedureIsNotNull()
	{
		return this.primaryprocedure != null;
	}
	public ims.core.clinical.vo.ProcedureRefVo getPrimaryProcedure()
	{
		return this.primaryprocedure;
	}
	public void setPrimaryProcedure(ims.core.clinical.vo.ProcedureRefVo value)
	{
		this.isValidated = false;
		this.primaryprocedure = value;
	}
	public boolean getProcedureDescriptionIsNotNull()
	{
		return this.proceduredescription != null;
	}
	public String getProcedureDescription()
	{
		return this.proceduredescription;
	}
	public static int getProcedureDescriptionMaxLength()
	{
		return 255;
	}
	public void setProcedureDescription(String value)
	{
		this.isValidated = false;
		this.proceduredescription = value;
	}
	public boolean getProcLateralityIsNotNull()
	{
		return this.proclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getProcLaterality()
	{
		return this.proclaterality;
	}
	public void setProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.proclaterality = value;
	}
	public boolean getAnaestheticTypeIsNotNull()
	{
		return this.anaesthetictype != null;
	}
	public ims.clinical.vo.lookups.AnaestheticType getAnaestheticType()
	{
		return this.anaesthetictype;
	}
	public void setAnaestheticType(ims.clinical.vo.lookups.AnaestheticType value)
	{
		this.isValidated = false;
		this.anaesthetictype = value;
	}
	public boolean getSecondaryProcedureIsNotNull()
	{
		return this.secondaryprocedure != null;
	}
	public ims.core.clinical.vo.ProcedureRefVo getSecondaryProcedure()
	{
		return this.secondaryprocedure;
	}
	public void setSecondaryProcedure(ims.core.clinical.vo.ProcedureRefVo value)
	{
		this.isValidated = false;
		this.secondaryprocedure = value;
	}
	public boolean getSecondaryDescriptionIsNotNull()
	{
		return this.secondarydescription != null;
	}
	public String getSecondaryDescription()
	{
		return this.secondarydescription;
	}
	public static int getSecondaryDescriptionMaxLength()
	{
		return 255;
	}
	public void setSecondaryDescription(String value)
	{
		this.isValidated = false;
		this.secondarydescription = value;
	}
	public boolean getSecondaryProcLateralityIsNotNull()
	{
		return this.secondaryproclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getSecondaryProcLaterality()
	{
		return this.secondaryproclaterality;
	}
	public void setSecondaryProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.secondaryproclaterality = value;
	}
	public boolean getMetricsIsNotNull()
	{
		return this.metrics != null;
	}
	public ims.RefMan.vo.VSMetricsForPreassesOutcVo getMetrics()
	{
		return this.metrics;
	}
	public void setMetrics(ims.RefMan.vo.VSMetricsForPreassesOutcVo value)
	{
		this.isValidated = false;
		this.metrics = value;
	}
	public boolean getPatientDiabeticIsNotNull()
	{
		return this.patientdiabetic != null;
	}
	public ims.core.vo.lookups.YesNo getPatientDiabetic()
	{
		return this.patientdiabetic;
	}
	public void setPatientDiabetic(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.patientdiabetic = value;
	}
	public boolean getPaceMakerDefibIsNotNull()
	{
		return this.pacemakerdefib != null;
	}
	public ims.core.vo.lookups.YesNo getPaceMakerDefib()
	{
		return this.pacemakerdefib;
	}
	public void setPaceMakerDefib(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.pacemakerdefib = value;
	}
	public boolean getPaceMakerTypeIsNotNull()
	{
		return this.pacemakertype != null;
	}
	public ims.clinical.vo.lookups.PacemakerDefibrillatorType getPaceMakerType()
	{
		return this.pacemakertype;
	}
	public void setPaceMakerType(ims.clinical.vo.lookups.PacemakerDefibrillatorType value)
	{
		this.isValidated = false;
		this.pacemakertype = value;
	}
	public boolean getDateLastCheckPacemakerIsNotNull()
	{
		return this.datelastcheckpacemaker != null;
	}
	public ims.framework.utils.Date getDateLastCheckPacemaker()
	{
		return this.datelastcheckpacemaker;
	}
	public void setDateLastCheckPacemaker(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datelastcheckpacemaker = value;
	}
	public boolean getReceivingAntiCoagIsNotNull()
	{
		return this.receivinganticoag != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getReceivingAntiCoag()
	{
		return this.receivinganticoag;
	}
	public void setReceivingAntiCoag(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.receivinganticoag = value;
	}
	public boolean getTherapyActionIsNotNull()
	{
		return this.therapyaction != null;
	}
	public ims.clinical.vo.lookups.AntiCoagTherapyAction getTherapyAction()
	{
		return this.therapyaction;
	}
	public void setTherapyAction(ims.clinical.vo.lookups.AntiCoagTherapyAction value)
	{
		this.isValidated = false;
		this.therapyaction = value;
	}
	public boolean getMobilityConsiderationIsNotNull()
	{
		return this.mobilityconsideration != null;
	}
	public Boolean getMobilityConsideration()
	{
		return this.mobilityconsideration;
	}
	public void setMobilityConsideration(Boolean value)
	{
		this.isValidated = false;
		this.mobilityconsideration = value;
	}
	public boolean getMobilityCommentIsNotNull()
	{
		return this.mobilitycomment != null;
	}
	public String getMobilityComment()
	{
		return this.mobilitycomment;
	}
	public static int getMobilityCommentMaxLength()
	{
		return 2000;
	}
	public void setMobilityComment(String value)
	{
		this.isValidated = false;
		this.mobilitycomment = value;
	}
	public boolean getElectricBedNeededIsNotNull()
	{
		return this.electricbedneeded != null;
	}
	public Boolean getElectricBedNeeded()
	{
		return this.electricbedneeded;
	}
	public void setElectricBedNeeded(Boolean value)
	{
		this.isValidated = false;
		this.electricbedneeded = value;
	}
	public boolean getShortNoticeIsNotNull()
	{
		return this.shortnotice != null;
	}
	public Boolean getShortNotice()
	{
		return this.shortnotice;
	}
	public void setShortNotice(Boolean value)
	{
		this.isValidated = false;
		this.shortnotice = value;
	}
	public boolean getNoticePeriodValueIsNotNull()
	{
		return this.noticeperiodvalue != null;
	}
	public Integer getNoticePeriodValue()
	{
		return this.noticeperiodvalue;
	}
	public void setNoticePeriodValue(Integer value)
	{
		this.isValidated = false;
		this.noticeperiodvalue = value;
	}
	public boolean getNoticePeriodTypeIsNotNull()
	{
		return this.noticeperiodtype != null;
	}
	public ims.core.vo.lookups.TimeUnitsSecondsToMonths getNoticePeriodType()
	{
		return this.noticeperiodtype;
	}
	public void setNoticePeriodType(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
	{
		this.isValidated = false;
		this.noticeperiodtype = value;
	}
	public boolean getPreOpOvernightIsNotNull()
	{
		return this.preopovernight != null;
	}
	public Boolean getPreOpOvernight()
	{
		return this.preopovernight;
	}
	public void setPreOpOvernight(Boolean value)
	{
		this.isValidated = false;
		this.preopovernight = value;
	}
	public boolean getNightsIsNotNull()
	{
		return this.nights != null;
	}
	public Integer getNights()
	{
		return this.nights;
	}
	public void setNights(Integer value)
	{
		this.isValidated = false;
		this.nights = value;
	}
	public boolean getPostOpStayIsNotNull()
	{
		return this.postopstay != null;
	}
	public Integer getPostOpStay()
	{
		return this.postopstay;
	}
	public void setPostOpStay(Integer value)
	{
		this.isValidated = false;
		this.postopstay = value;
	}
	public boolean getTheatreTypeIsNotNull()
	{
		return this.theatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getTheatreType()
	{
		return this.theatretype;
	}
	public void setTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.theatretype = value;
	}
	public boolean getPostOpCommentsIsNotNull()
	{
		return this.postopcomments != null;
	}
	public String getPostOpComments()
	{
		return this.postopcomments;
	}
	public static int getPostOpCommentsMaxLength()
	{
		return 2000;
	}
	public void setPostOpComments(String value)
	{
		this.isValidated = false;
		this.postopcomments = value;
	}
	public boolean getSeniorAnaestRequiredIsNotNull()
	{
		return this.senioranaestrequired != null;
	}
	public Boolean getSeniorAnaestRequired()
	{
		return this.senioranaestrequired;
	}
	public void setSeniorAnaestRequired(Boolean value)
	{
		this.isValidated = false;
		this.senioranaestrequired = value;
	}
	public boolean getSeniorAnaestCommentsIsNotNull()
	{
		return this.senioranaestcomments != null;
	}
	public String getSeniorAnaestComments()
	{
		return this.senioranaestcomments;
	}
	public static int getSeniorAnaestCommentsMaxLength()
	{
		return 2000;
	}
	public void setSeniorAnaestComments(String value)
	{
		this.isValidated = false;
		this.senioranaestcomments = value;
	}
	public boolean getCriticalCareBedRequiredIsNotNull()
	{
		return this.criticalcarebedrequired != null;
	}
	public Boolean getCriticalCareBedRequired()
	{
		return this.criticalcarebedrequired;
	}
	public void setCriticalCareBedRequired(Boolean value)
	{
		this.isValidated = false;
		this.criticalcarebedrequired = value;
	}
	public boolean getHduCriticalCareBedIsNotNull()
	{
		return this.hducriticalcarebed != null;
	}
	public Boolean getHduCriticalCareBed()
	{
		return this.hducriticalcarebed;
	}
	public void setHduCriticalCareBed(Boolean value)
	{
		this.isValidated = false;
		this.hducriticalcarebed = value;
	}
	public boolean getItuCriticalCareBedIsNotNull()
	{
		return this.itucriticalcarebed != null;
	}
	public Boolean getItuCriticalCareBed()
	{
		return this.itucriticalcarebed;
	}
	public void setItuCriticalCareBed(Boolean value)
	{
		this.isValidated = false;
		this.itucriticalcarebed = value;
	}
	public boolean getAnaestheticHazardsIsNotNull()
	{
		return this.anaesthetichazards != null;
	}
	public ims.core.vo.PatientAlertLiteVoCollection getAnaestheticHazards()
	{
		return this.anaesthetichazards;
	}
	public void setAnaestheticHazards(ims.core.vo.PatientAlertLiteVoCollection value)
	{
		this.isValidated = false;
		this.anaesthetichazards = value;
	}
	public boolean getWaitingForDetailsIsNotNull()
	{
		return this.waitingfordetails != null;
	}
	public ims.RefMan.vo.PreAssessmentInformationVoCollection getWaitingForDetails()
	{
		return this.waitingfordetails;
	}
	public void setWaitingForDetails(ims.RefMan.vo.PreAssessmentInformationVoCollection value)
	{
		this.isValidated = false;
		this.waitingfordetails = value;
	}
	public boolean getDetailsOutstandingIsNotNull()
	{
		return this.detailsoutstanding != null;
	}
	public Boolean getDetailsOutstanding()
	{
		return this.detailsoutstanding;
	}
	public void setDetailsOutstanding(Boolean value)
	{
		this.isValidated = false;
		this.detailsoutstanding = value;
	}
	public boolean getCrossmatchRequiredIsNotNull()
	{
		return this.crossmatchrequired != null;
	}
	public Boolean getCrossmatchRequired()
	{
		return this.crossmatchrequired;
	}
	public void setCrossmatchRequired(Boolean value)
	{
		this.isValidated = false;
		this.crossmatchrequired = value;
	}
	public boolean getCrossmatchCommentsIsNotNull()
	{
		return this.crossmatchcomments != null;
	}
	public String getCrossmatchComments()
	{
		return this.crossmatchcomments;
	}
	public static int getCrossmatchCommentsMaxLength()
	{
		return 2000;
	}
	public void setCrossmatchComments(String value)
	{
		this.isValidated = false;
		this.crossmatchcomments = value;
	}
	public boolean getFitToProceedIsNotNull()
	{
		return this.fittoproceed != null;
	}
	public Boolean getFitToProceed()
	{
		return this.fittoproceed;
	}
	public void setFitToProceed(Boolean value)
	{
		this.isValidated = false;
		this.fittoproceed = value;
	}
	public boolean getGeneralCommentsIsNotNull()
	{
		return this.generalcomments != null;
	}
	public String getGeneralComments()
	{
		return this.generalcomments;
	}
	public static int getGeneralCommentsMaxLength()
	{
		return 2000;
	}
	public void setGeneralComments(String value)
	{
		this.isValidated = false;
		this.generalcomments = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.recordinginformation != null)
		{
			if(!this.recordinginformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.lastupdatinginformation != null)
		{
			if(!this.lastupdatinginformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.metrics != null)
		{
			if(!this.metrics.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.anaesthetichazards != null)
		{
			if(!this.anaesthetichazards.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.waitingfordetails != null)
		{
			if(!this.waitingfordetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.recordinginformation == null)
			listOfErrors.add("recordingInformation is mandatory");
		if(this.recordinginformation != null)
		{
			String[] listOfOtherErrors = this.recordinginformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.lastupdatinginformation != null)
		{
			String[] listOfOtherErrors = this.lastupdatinginformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.proceduredescription != null)
			if(this.proceduredescription.length() > 255)
				listOfErrors.add("The length of the field [proceduredescription] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 255");
		if(this.secondarydescription != null)
			if(this.secondarydescription.length() > 255)
				listOfErrors.add("The length of the field [secondarydescription] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 255");
		if(this.metrics != null)
		{
			String[] listOfOtherErrors = this.metrics.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patientdiabetic == null)
			listOfErrors.add("Patient Diabetic is mandatory");
		if(this.mobilitycomment != null)
			if(this.mobilitycomment.length() > 2000)
				listOfErrors.add("The length of the field [mobilitycomment] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 2000");
		if(this.postopcomments != null)
			if(this.postopcomments.length() > 2000)
				listOfErrors.add("The length of the field [postopcomments] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 2000");
		if(this.senioranaestcomments != null)
			if(this.senioranaestcomments.length() > 2000)
				listOfErrors.add("The length of the field [senioranaestcomments] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 2000");
		if(this.anaesthetichazards != null)
		{
			String[] listOfOtherErrors = this.anaesthetichazards.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.waitingfordetails != null)
		{
			String[] listOfOtherErrors = this.waitingfordetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.crossmatchcomments != null)
			if(this.crossmatchcomments.length() > 2000)
				listOfErrors.add("The length of the field [crossmatchcomments] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 2000");
		if(this.generalcomments != null)
			if(this.generalcomments.length() > 2000)
				listOfErrors.add("The length of the field [generalcomments] in the value object [ims.RefMan.vo.PreAssessmentOutcomeVo] is too big. It should be less or equal to 2000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PreAssessmentOutcomeVo clone = new PreAssessmentOutcomeVo(this.id, this.version);
		
		if(this.recordinginformation == null)
			clone.recordinginformation = null;
		else
			clone.recordinginformation = (ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo)this.recordinginformation.clone();
		if(this.lastupdatinginformation == null)
			clone.lastupdatinginformation = null;
		else
			clone.lastupdatinginformation = (ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo)this.lastupdatinginformation.clone();
		clone.primaryprocedure = this.primaryprocedure;
		clone.proceduredescription = this.proceduredescription;
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		if(this.anaesthetictype == null)
			clone.anaesthetictype = null;
		else
			clone.anaesthetictype = (ims.clinical.vo.lookups.AnaestheticType)this.anaesthetictype.clone();
		clone.secondaryprocedure = this.secondaryprocedure;
		clone.secondarydescription = this.secondarydescription;
		if(this.secondaryproclaterality == null)
			clone.secondaryproclaterality = null;
		else
			clone.secondaryproclaterality = (ims.core.vo.lookups.LateralityLRB)this.secondaryproclaterality.clone();
		if(this.metrics == null)
			clone.metrics = null;
		else
			clone.metrics = (ims.RefMan.vo.VSMetricsForPreassesOutcVo)this.metrics.clone();
		if(this.patientdiabetic == null)
			clone.patientdiabetic = null;
		else
			clone.patientdiabetic = (ims.core.vo.lookups.YesNo)this.patientdiabetic.clone();
		if(this.pacemakerdefib == null)
			clone.pacemakerdefib = null;
		else
			clone.pacemakerdefib = (ims.core.vo.lookups.YesNo)this.pacemakerdefib.clone();
		if(this.pacemakertype == null)
			clone.pacemakertype = null;
		else
			clone.pacemakertype = (ims.clinical.vo.lookups.PacemakerDefibrillatorType)this.pacemakertype.clone();
		if(this.datelastcheckpacemaker == null)
			clone.datelastcheckpacemaker = null;
		else
			clone.datelastcheckpacemaker = (ims.framework.utils.Date)this.datelastcheckpacemaker.clone();
		if(this.receivinganticoag == null)
			clone.receivinganticoag = null;
		else
			clone.receivinganticoag = (ims.core.vo.lookups.YesNoUnknown)this.receivinganticoag.clone();
		if(this.therapyaction == null)
			clone.therapyaction = null;
		else
			clone.therapyaction = (ims.clinical.vo.lookups.AntiCoagTherapyAction)this.therapyaction.clone();
		clone.mobilityconsideration = this.mobilityconsideration;
		clone.mobilitycomment = this.mobilitycomment;
		clone.electricbedneeded = this.electricbedneeded;
		clone.shortnotice = this.shortnotice;
		clone.noticeperiodvalue = this.noticeperiodvalue;
		if(this.noticeperiodtype == null)
			clone.noticeperiodtype = null;
		else
			clone.noticeperiodtype = (ims.core.vo.lookups.TimeUnitsSecondsToMonths)this.noticeperiodtype.clone();
		clone.preopovernight = this.preopovernight;
		clone.nights = this.nights;
		clone.postopstay = this.postopstay;
		if(this.theatretype == null)
			clone.theatretype = null;
		else
			clone.theatretype = (ims.scheduling.vo.lookups.TheatreType)this.theatretype.clone();
		clone.postopcomments = this.postopcomments;
		clone.senioranaestrequired = this.senioranaestrequired;
		clone.senioranaestcomments = this.senioranaestcomments;
		clone.criticalcarebedrequired = this.criticalcarebedrequired;
		clone.hducriticalcarebed = this.hducriticalcarebed;
		clone.itucriticalcarebed = this.itucriticalcarebed;
		if(this.anaesthetichazards == null)
			clone.anaesthetichazards = null;
		else
			clone.anaesthetichazards = (ims.core.vo.PatientAlertLiteVoCollection)this.anaesthetichazards.clone();
		if(this.waitingfordetails == null)
			clone.waitingfordetails = null;
		else
			clone.waitingfordetails = (ims.RefMan.vo.PreAssessmentInformationVoCollection)this.waitingfordetails.clone();
		clone.detailsoutstanding = this.detailsoutstanding;
		clone.crossmatchrequired = this.crossmatchrequired;
		clone.crossmatchcomments = this.crossmatchcomments;
		clone.fittoproceed = this.fittoproceed;
		clone.generalcomments = this.generalcomments;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PreAssessmentOutcomeVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PreAssessmentOutcomeVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PreAssessmentOutcomeVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PreAssessmentOutcomeVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.recordinginformation != null)
			count++;
		if(this.lastupdatinginformation != null)
			count++;
		if(this.primaryprocedure != null)
			count++;
		if(this.proceduredescription != null)
			count++;
		if(this.proclaterality != null)
			count++;
		if(this.anaesthetictype != null)
			count++;
		if(this.secondaryprocedure != null)
			count++;
		if(this.secondarydescription != null)
			count++;
		if(this.secondaryproclaterality != null)
			count++;
		if(this.metrics != null)
			count++;
		if(this.patientdiabetic != null)
			count++;
		if(this.pacemakerdefib != null)
			count++;
		if(this.pacemakertype != null)
			count++;
		if(this.datelastcheckpacemaker != null)
			count++;
		if(this.receivinganticoag != null)
			count++;
		if(this.therapyaction != null)
			count++;
		if(this.mobilityconsideration != null)
			count++;
		if(this.mobilitycomment != null)
			count++;
		if(this.electricbedneeded != null)
			count++;
		if(this.shortnotice != null)
			count++;
		if(this.noticeperiodvalue != null)
			count++;
		if(this.noticeperiodtype != null)
			count++;
		if(this.preopovernight != null)
			count++;
		if(this.nights != null)
			count++;
		if(this.postopstay != null)
			count++;
		if(this.theatretype != null)
			count++;
		if(this.postopcomments != null)
			count++;
		if(this.senioranaestrequired != null)
			count++;
		if(this.senioranaestcomments != null)
			count++;
		if(this.criticalcarebedrequired != null)
			count++;
		if(this.hducriticalcarebed != null)
			count++;
		if(this.itucriticalcarebed != null)
			count++;
		if(this.anaesthetichazards != null)
			count++;
		if(this.waitingfordetails != null)
			count++;
		if(this.detailsoutstanding != null)
			count++;
		if(this.crossmatchrequired != null)
			count++;
		if(this.crossmatchcomments != null)
			count++;
		if(this.fittoproceed != null)
			count++;
		if(this.generalcomments != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 39;
	}
	protected ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo recordinginformation;
	protected ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo lastupdatinginformation;
	protected ims.core.clinical.vo.ProcedureRefVo primaryprocedure;
	protected String proceduredescription;
	protected ims.core.vo.lookups.LateralityLRB proclaterality;
	protected ims.clinical.vo.lookups.AnaestheticType anaesthetictype;
	protected ims.core.clinical.vo.ProcedureRefVo secondaryprocedure;
	protected String secondarydescription;
	protected ims.core.vo.lookups.LateralityLRB secondaryproclaterality;
	protected ims.RefMan.vo.VSMetricsForPreassesOutcVo metrics;
	protected ims.core.vo.lookups.YesNo patientdiabetic;
	protected ims.core.vo.lookups.YesNo pacemakerdefib;
	protected ims.clinical.vo.lookups.PacemakerDefibrillatorType pacemakertype;
	protected ims.framework.utils.Date datelastcheckpacemaker;
	protected ims.core.vo.lookups.YesNoUnknown receivinganticoag;
	protected ims.clinical.vo.lookups.AntiCoagTherapyAction therapyaction;
	protected Boolean mobilityconsideration;
	protected String mobilitycomment;
	protected Boolean electricbedneeded;
	protected Boolean shortnotice;
	protected Integer noticeperiodvalue;
	protected ims.core.vo.lookups.TimeUnitsSecondsToMonths noticeperiodtype;
	protected Boolean preopovernight;
	protected Integer nights;
	protected Integer postopstay;
	protected ims.scheduling.vo.lookups.TheatreType theatretype;
	protected String postopcomments;
	protected Boolean senioranaestrequired;
	protected String senioranaestcomments;
	protected Boolean criticalcarebedrequired;
	protected Boolean hducriticalcarebed;
	protected Boolean itucriticalcarebed;
	protected ims.core.vo.PatientAlertLiteVoCollection anaesthetichazards;
	protected ims.RefMan.vo.PreAssessmentInformationVoCollection waitingfordetails;
	protected Boolean detailsoutstanding;
	protected Boolean crossmatchrequired;
	protected String crossmatchcomments;
	protected Boolean fittoproceed;
	protected String generalcomments;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
