//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to Pathways.PatientPathwayJourney business object (ID: 1088100000).
 */
public class PatientPathwayJourneyForTransferOfCareVo extends ims.pathways.vo.PatientPathwayJourneyRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientPathwayJourneyForTransferOfCareVo()
	{
	}
	public PatientPathwayJourneyForTransferOfCareVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientPathwayJourneyForTransferOfCareVo(ims.RefMan.vo.beans.PatientPathwayJourneyForTransferOfCareVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.pathway = bean.getPathway() == null ? null : new ims.pathways.configuration.vo.PathwayRefVo(new Integer(bean.getPathway().getId()), bean.getPathway().getVersion());
		this.patienttargets = ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection.buildFromBeanCollection(bean.getPatientTargets());
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.statushistory = ims.pathways.vo.PatientJourneyStatusVoCollection.buildFromBeanCollection(bean.getStatusHistory());
		this.endedondate = bean.getEndedOnDate() == null ? null : bean.getEndedOnDate().buildDate();
		this.currentclock = bean.getCurrentClock() == null ? null : bean.getCurrentClock().buildVo();
		this.clockhistory = ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection.buildFromBeanCollection(bean.getClockHistory());
		this.extreferralkey = bean.getExtReferralKey();
		this.pathwayhistory = ims.pathways.vo.PathwayHistoryVoCollection.buildFromBeanCollection(bean.getPathwayHistory());
		this.responsibleconsultant = bean.getResponsibleConsultant() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getResponsibleConsultant().getId()), bean.getResponsibleConsultant().getVersion());
		this.iscancerpathway = bean.getIsCancerPathway();
		this.cancerpathwaydate = bean.getCancerPathwayDate() == null ? null : bean.getCancerPathwayDate().buildDate();
		this.linkedcomments = ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection.buildFromBeanCollection(bean.getLinkedComments());
		this.lastvalidationdate = bean.getLastValidationDate() == null ? null : bean.getLastValidationDate().buildDate();
		this.nextvalidationdate = bean.getNextValidationDate() == null ? null : bean.getNextValidationDate().buildDate();
		this.patientjourneybreachreason = ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection.buildFromBeanCollection(bean.getPatientJourneyBreachReason());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.PatientPathwayJourneyForTransferOfCareVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.pathway = bean.getPathway() == null ? null : new ims.pathways.configuration.vo.PathwayRefVo(new Integer(bean.getPathway().getId()), bean.getPathway().getVersion());
		this.patienttargets = ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection.buildFromBeanCollection(bean.getPatientTargets());
		this.referral = bean.getReferral() == null ? null : bean.getReferral().buildVo(map);
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.statushistory = ims.pathways.vo.PatientJourneyStatusVoCollection.buildFromBeanCollection(bean.getStatusHistory());
		this.endedondate = bean.getEndedOnDate() == null ? null : bean.getEndedOnDate().buildDate();
		this.currentclock = bean.getCurrentClock() == null ? null : bean.getCurrentClock().buildVo(map);
		this.clockhistory = ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection.buildFromBeanCollection(bean.getClockHistory());
		this.extreferralkey = bean.getExtReferralKey();
		this.pathwayhistory = ims.pathways.vo.PathwayHistoryVoCollection.buildFromBeanCollection(bean.getPathwayHistory());
		this.responsibleconsultant = bean.getResponsibleConsultant() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getResponsibleConsultant().getId()), bean.getResponsibleConsultant().getVersion());
		this.iscancerpathway = bean.getIsCancerPathway();
		this.cancerpathwaydate = bean.getCancerPathwayDate() == null ? null : bean.getCancerPathwayDate().buildDate();
		this.linkedcomments = ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection.buildFromBeanCollection(bean.getLinkedComments());
		this.lastvalidationdate = bean.getLastValidationDate() == null ? null : bean.getLastValidationDate().buildDate();
		this.nextvalidationdate = bean.getNextValidationDate() == null ? null : bean.getNextValidationDate().buildDate();
		this.patientjourneybreachreason = ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection.buildFromBeanCollection(bean.getPatientJourneyBreachReason());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.PatientPathwayJourneyForTransferOfCareVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.PatientPathwayJourneyForTransferOfCareVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.PatientPathwayJourneyForTransferOfCareVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("PATHWAY"))
			return getPathway();
		if(fieldName.equals("PATIENTTARGETS"))
			return getPatientTargets();
		if(fieldName.equals("REFERRAL"))
			return getReferral();
		if(fieldName.equals("STARTDATE"))
			return getStartDate();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("STATUSHISTORY"))
			return getStatusHistory();
		if(fieldName.equals("ENDEDONDATE"))
			return getEndedOnDate();
		if(fieldName.equals("CURRENTCLOCK"))
			return getCurrentClock();
		if(fieldName.equals("CLOCKHISTORY"))
			return getClockHistory();
		if(fieldName.equals("EXTREFERRALKEY"))
			return getExtReferralKey();
		if(fieldName.equals("PATHWAYHISTORY"))
			return getPathwayHistory();
		if(fieldName.equals("RESPONSIBLECONSULTANT"))
			return getResponsibleConsultant();
		if(fieldName.equals("ISCANCERPATHWAY"))
			return getIsCancerPathway();
		if(fieldName.equals("CANCERPATHWAYDATE"))
			return getCancerPathwayDate();
		if(fieldName.equals("LINKEDCOMMENTS"))
			return getLinkedComments();
		if(fieldName.equals("LASTVALIDATIONDATE"))
			return getLastValidationDate();
		if(fieldName.equals("NEXTVALIDATIONDATE"))
			return getNextValidationDate();
		if(fieldName.equals("PATIENTJOURNEYBREACHREASON"))
			return getPatientJourneyBreachReason();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getPathwayIsNotNull()
	{
		return this.pathway != null;
	}
	public ims.pathways.configuration.vo.PathwayRefVo getPathway()
	{
		return this.pathway;
	}
	public void setPathway(ims.pathways.configuration.vo.PathwayRefVo value)
	{
		this.isValidated = false;
		this.pathway = value;
	}
	public boolean getPatientTargetsIsNotNull()
	{
		return this.patienttargets != null;
	}
	public ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection getPatientTargets()
	{
		return this.patienttargets;
	}
	public void setPatientTargets(ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection value)
	{
		this.isValidated = false;
		this.patienttargets = value;
	}
	public boolean getReferralIsNotNull()
	{
		return this.referral != null;
	}
	public ims.RefMan.vo.ReferralForTransferOfCareVo getReferral()
	{
		return this.referral;
	}
	public void setReferral(ims.RefMan.vo.ReferralForTransferOfCareVo value)
	{
		this.isValidated = false;
		this.referral = value;
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.pathways.vo.PatientJourneyStatusVo getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.pathways.vo.PatientJourneyStatusVo value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getStatusHistoryIsNotNull()
	{
		return this.statushistory != null;
	}
	public ims.pathways.vo.PatientJourneyStatusVoCollection getStatusHistory()
	{
		return this.statushistory;
	}
	public void setStatusHistory(ims.pathways.vo.PatientJourneyStatusVoCollection value)
	{
		this.isValidated = false;
		this.statushistory = value;
	}
	public boolean getEndedOnDateIsNotNull()
	{
		return this.endedondate != null;
	}
	public ims.framework.utils.Date getEndedOnDate()
	{
		return this.endedondate;
	}
	public void setEndedOnDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.endedondate = value;
	}
	public boolean getCurrentClockIsNotNull()
	{
		return this.currentclock != null;
	}
	public ims.RefMan.vo.PathwayClockForTransferOfCareVo getCurrentClock()
	{
		return this.currentclock;
	}
	public void setCurrentClock(ims.RefMan.vo.PathwayClockForTransferOfCareVo value)
	{
		this.isValidated = false;
		this.currentclock = value;
	}
	public boolean getClockHistoryIsNotNull()
	{
		return this.clockhistory != null;
	}
	public ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection getClockHistory()
	{
		return this.clockhistory;
	}
	public void setClockHistory(ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection value)
	{
		this.isValidated = false;
		this.clockhistory = value;
	}
	public boolean getExtReferralKeyIsNotNull()
	{
		return this.extreferralkey != null;
	}
	public String getExtReferralKey()
	{
		return this.extreferralkey;
	}
	public static int getExtReferralKeyMaxLength()
	{
		return 255;
	}
	public void setExtReferralKey(String value)
	{
		this.isValidated = false;
		this.extreferralkey = value;
	}
	public boolean getPathwayHistoryIsNotNull()
	{
		return this.pathwayhistory != null;
	}
	public ims.pathways.vo.PathwayHistoryVoCollection getPathwayHistory()
	{
		return this.pathwayhistory;
	}
	public void setPathwayHistory(ims.pathways.vo.PathwayHistoryVoCollection value)
	{
		this.isValidated = false;
		this.pathwayhistory = value;
	}
	public boolean getResponsibleConsultantIsNotNull()
	{
		return this.responsibleconsultant != null;
	}
	public ims.core.resource.people.vo.HcpRefVo getResponsibleConsultant()
	{
		return this.responsibleconsultant;
	}
	public void setResponsibleConsultant(ims.core.resource.people.vo.HcpRefVo value)
	{
		this.isValidated = false;
		this.responsibleconsultant = value;
	}
	public boolean getIsCancerPathwayIsNotNull()
	{
		return this.iscancerpathway != null;
	}
	public Boolean getIsCancerPathway()
	{
		return this.iscancerpathway;
	}
	public void setIsCancerPathway(Boolean value)
	{
		this.isValidated = false;
		this.iscancerpathway = value;
	}
	public boolean getCancerPathwayDateIsNotNull()
	{
		return this.cancerpathwaydate != null;
	}
	public ims.framework.utils.Date getCancerPathwayDate()
	{
		return this.cancerpathwaydate;
	}
	public void setCancerPathwayDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.cancerpathwaydate = value;
	}
	public boolean getLinkedCommentsIsNotNull()
	{
		return this.linkedcomments != null;
	}
	public ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection getLinkedComments()
	{
		return this.linkedcomments;
	}
	public void setLinkedComments(ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection value)
	{
		this.isValidated = false;
		this.linkedcomments = value;
	}
	public boolean getLastValidationDateIsNotNull()
	{
		return this.lastvalidationdate != null;
	}
	public ims.framework.utils.Date getLastValidationDate()
	{
		return this.lastvalidationdate;
	}
	public void setLastValidationDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.lastvalidationdate = value;
	}
	public boolean getNextValidationDateIsNotNull()
	{
		return this.nextvalidationdate != null;
	}
	public ims.framework.utils.Date getNextValidationDate()
	{
		return this.nextvalidationdate;
	}
	public void setNextValidationDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.nextvalidationdate = value;
	}
	public boolean getPatientJourneyBreachReasonIsNotNull()
	{
		return this.patientjourneybreachreason != null;
	}
	public ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection getPatientJourneyBreachReason()
	{
		return this.patientjourneybreachreason;
	}
	public void setPatientJourneyBreachReason(ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection value)
	{
		this.isValidated = false;
		this.patientjourneybreachreason = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.patienttargets != null)
		{
			if(!this.patienttargets.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.referral != null)
		{
			if(!this.referral.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.statushistory != null)
		{
			if(!this.statushistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentclock != null)
		{
			if(!this.currentclock.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.clockhistory != null)
		{
			if(!this.clockhistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.pathwayhistory != null)
		{
			if(!this.pathwayhistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.linkedcomments != null)
		{
			if(!this.linkedcomments.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patientjourneybreachreason != null)
		{
			if(!this.patientjourneybreachreason.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.pathway == null)
			listOfErrors.add("Pathway is mandatory");
		if(this.patienttargets == null || this.patienttargets.size() == 0)
			listOfErrors.add("PatientTargets are mandatory");
		if(this.patienttargets != null)
		{
			String[] listOfOtherErrors = this.patienttargets.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.referral != null)
		{
			String[] listOfOtherErrors = this.referral.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.startdate == null)
			listOfErrors.add("StartDate is mandatory");
		if(this.currentstatus == null)
			listOfErrors.add("CurrentStatus is mandatory");
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.statushistory == null || this.statushistory.size() == 0)
			listOfErrors.add("StatusHistory are mandatory");
		if(this.statushistory != null)
		{
			String[] listOfOtherErrors = this.statushistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentclock != null)
		{
			String[] listOfOtherErrors = this.currentclock.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.clockhistory != null)
		{
			String[] listOfOtherErrors = this.clockhistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.extreferralkey == null || this.extreferralkey.length() == 0)
			listOfErrors.add("ExtReferralKey is mandatory");
		else if(this.extreferralkey.length() > 255)
			listOfErrors.add("The length of the field [extreferralkey] in the value object [ims.RefMan.vo.PatientPathwayJourneyForTransferOfCareVo] is too big. It should be less or equal to 255");
		if(this.pathwayhistory != null)
		{
			String[] listOfOtherErrors = this.pathwayhistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.linkedcomments != null)
		{
			String[] listOfOtherErrors = this.linkedcomments.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patientjourneybreachreason != null)
		{
			String[] listOfOtherErrors = this.patientjourneybreachreason.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientPathwayJourneyForTransferOfCareVo clone = new PatientPathwayJourneyForTransferOfCareVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.pathway = this.pathway;
		if(this.patienttargets == null)
			clone.patienttargets = null;
		else
			clone.patienttargets = (ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection)this.patienttargets.clone();
		if(this.referral == null)
			clone.referral = null;
		else
			clone.referral = (ims.RefMan.vo.ReferralForTransferOfCareVo)this.referral.clone();
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.pathways.vo.PatientJourneyStatusVo)this.currentstatus.clone();
		if(this.statushistory == null)
			clone.statushistory = null;
		else
			clone.statushistory = (ims.pathways.vo.PatientJourneyStatusVoCollection)this.statushistory.clone();
		if(this.endedondate == null)
			clone.endedondate = null;
		else
			clone.endedondate = (ims.framework.utils.Date)this.endedondate.clone();
		if(this.currentclock == null)
			clone.currentclock = null;
		else
			clone.currentclock = (ims.RefMan.vo.PathwayClockForTransferOfCareVo)this.currentclock.clone();
		if(this.clockhistory == null)
			clone.clockhistory = null;
		else
			clone.clockhistory = (ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection)this.clockhistory.clone();
		clone.extreferralkey = this.extreferralkey;
		if(this.pathwayhistory == null)
			clone.pathwayhistory = null;
		else
			clone.pathwayhistory = (ims.pathways.vo.PathwayHistoryVoCollection)this.pathwayhistory.clone();
		clone.responsibleconsultant = this.responsibleconsultant;
		clone.iscancerpathway = this.iscancerpathway;
		if(this.cancerpathwaydate == null)
			clone.cancerpathwaydate = null;
		else
			clone.cancerpathwaydate = (ims.framework.utils.Date)this.cancerpathwaydate.clone();
		if(this.linkedcomments == null)
			clone.linkedcomments = null;
		else
			clone.linkedcomments = (ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection)this.linkedcomments.clone();
		if(this.lastvalidationdate == null)
			clone.lastvalidationdate = null;
		else
			clone.lastvalidationdate = (ims.framework.utils.Date)this.lastvalidationdate.clone();
		if(this.nextvalidationdate == null)
			clone.nextvalidationdate = null;
		else
			clone.nextvalidationdate = (ims.framework.utils.Date)this.nextvalidationdate.clone();
		if(this.patientjourneybreachreason == null)
			clone.patientjourneybreachreason = null;
		else
			clone.patientjourneybreachreason = (ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection)this.patientjourneybreachreason.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientPathwayJourneyForTransferOfCareVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientPathwayJourneyForTransferOfCareVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientPathwayJourneyForTransferOfCareVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientPathwayJourneyForTransferOfCareVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.pathway != null)
			count++;
		if(this.patienttargets != null)
			count++;
		if(this.referral != null)
			count++;
		if(this.startdate != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.statushistory != null)
			count++;
		if(this.endedondate != null)
			count++;
		if(this.currentclock != null)
			count++;
		if(this.clockhistory != null)
			count++;
		if(this.extreferralkey != null)
			count++;
		if(this.pathwayhistory != null)
			count++;
		if(this.responsibleconsultant != null)
			count++;
		if(this.iscancerpathway != null)
			count++;
		if(this.cancerpathwaydate != null)
			count++;
		if(this.linkedcomments != null)
			count++;
		if(this.lastvalidationdate != null)
			count++;
		if(this.nextvalidationdate != null)
			count++;
		if(this.patientjourneybreachreason != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 19;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.pathways.configuration.vo.PathwayRefVo pathway;
	protected ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection patienttargets;
	protected ims.RefMan.vo.ReferralForTransferOfCareVo referral;
	protected ims.framework.utils.Date startdate;
	protected ims.pathways.vo.PatientJourneyStatusVo currentstatus;
	protected ims.pathways.vo.PatientJourneyStatusVoCollection statushistory;
	protected ims.framework.utils.Date endedondate;
	protected ims.RefMan.vo.PathwayClockForTransferOfCareVo currentclock;
	protected ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection clockhistory;
	protected String extreferralkey;
	protected ims.pathways.vo.PathwayHistoryVoCollection pathwayhistory;
	protected ims.core.resource.people.vo.HcpRefVo responsibleconsultant;
	protected Boolean iscancerpathway;
	protected ims.framework.utils.Date cancerpathwaydate;
	protected ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection linkedcomments;
	protected ims.framework.utils.Date lastvalidationdate;
	protected ims.framework.utils.Date nextvalidationdate;
	protected ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection patientjourneybreachreason;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
