//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.vo.beans;

public class EASPhaseVoBean extends ims.vo.ValueObjectBean
{
	public EASPhaseVoBean()
	{
	}
	public EASPhaseVoBean(ims.eas.vo.EASPhaseVo vo)
	{
		this.id = vo.getBoId();
		this.version = vo.getBoVersion();
		this.phasename = vo.getPhaseName() == null ? null : (ims.vo.LookupInstanceBean)vo.getPhaseName().getBean();
		this.dose = vo.getDose();
		this.fractions = vo.getFractions();
		this.days = vo.getDays();
		this.energy = vo.getEnergy();
		this.units = vo.getUnits() == null ? null : (ims.vo.LookupInstanceBean)vo.getUnits().getBean();
		this.modality = vo.getModality() == null ? null : (ims.vo.LookupInstanceBean)vo.getModality().getBean();
		this.preferred = vo.getPreferred();
		this.provisional = vo.getProvisional();
		this.selected = vo.getSelected();
	}

	public void populate(ims.vo.ValueObjectBeanMap map, ims.eas.vo.EASPhaseVo vo)
	{
		this.id = vo.getBoId();
		this.version = vo.getBoVersion();
		this.phasename = vo.getPhaseName() == null ? null : (ims.vo.LookupInstanceBean)vo.getPhaseName().getBean();
		this.dose = vo.getDose();
		this.fractions = vo.getFractions();
		this.days = vo.getDays();
		this.energy = vo.getEnergy();
		this.units = vo.getUnits() == null ? null : (ims.vo.LookupInstanceBean)vo.getUnits().getBean();
		this.modality = vo.getModality() == null ? null : (ims.vo.LookupInstanceBean)vo.getModality().getBean();
		this.preferred = vo.getPreferred();
		this.provisional = vo.getProvisional();
		this.selected = vo.getSelected();
	}

	public ims.eas.vo.EASPhaseVo buildVo()
	{
		return this.buildVo(new ims.vo.ValueObjectBeanMap());
	}

	public ims.eas.vo.EASPhaseVo buildVo(ims.vo.ValueObjectBeanMap map)
	{
		ims.eas.vo.EASPhaseVo vo = null;
		if(map != null)
			vo = (ims.eas.vo.EASPhaseVo)map.getValueObject(this);
		if(vo == null)
		{
			vo = new ims.eas.vo.EASPhaseVo();
			map.addValueObject(this, vo);
			vo.populate(map, this);
		}
		return vo;
	}

	public Integer getId()
	{
		return this.id;
	}
	public void setId(Integer value)
	{
		this.id = value;
	}
	public int getVersion()
	{
		return this.version;
	}
	public void setVersion(int value)
	{
		this.version = value;
	}
	public ims.vo.LookupInstanceBean getPhaseName()
	{
		return this.phasename;
	}
	public void setPhaseName(ims.vo.LookupInstanceBean value)
	{
		this.phasename = value;
	}
	public Float getDose()
	{
		return this.dose;
	}
	public void setDose(Float value)
	{
		this.dose = value;
	}
	public Integer getFractions()
	{
		return this.fractions;
	}
	public void setFractions(Integer value)
	{
		this.fractions = value;
	}
	public Integer getDays()
	{
		return this.days;
	}
	public void setDays(Integer value)
	{
		this.days = value;
	}
	public Float getEnergy()
	{
		return this.energy;
	}
	public void setEnergy(Float value)
	{
		this.energy = value;
	}
	public ims.vo.LookupInstanceBean getUnits()
	{
		return this.units;
	}
	public void setUnits(ims.vo.LookupInstanceBean value)
	{
		this.units = value;
	}
	public ims.vo.LookupInstanceBean getModality()
	{
		return this.modality;
	}
	public void setModality(ims.vo.LookupInstanceBean value)
	{
		this.modality = value;
	}
	public Boolean getPreferred()
	{
		return this.preferred;
	}
	public void setPreferred(Boolean value)
	{
		this.preferred = value;
	}
	public Boolean getProvisional()
	{
		return this.provisional;
	}
	public void setProvisional(Boolean value)
	{
		this.provisional = value;
	}
	public Boolean getSelected()
	{
		return this.selected;
	}
	public void setSelected(Boolean value)
	{
		this.selected = value;
	}

	private Integer id;
	private int version;
	private ims.vo.LookupInstanceBean phasename;
	private Float dose;
	private Integer fractions;
	private Integer days;
	private Float energy;
	private ims.vo.LookupInstanceBean units;
	private ims.vo.LookupInstanceBean modality;
	private Boolean preferred;
	private Boolean provisional;
	private Boolean selected;
}
