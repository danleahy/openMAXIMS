//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.vo;

/**
 * Linked to EAS.Configuration.Protocol business object (ID: 1114100003).
 */
public class ProtocolVo extends ims.eas.vo.ProtocolLiteVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ProtocolVo()
	{
	}
	public ProtocolVo(Integer id, int version)
	{
		super(id, version);
	}
	public ProtocolVo(ims.eas.vo.beans.ProtocolVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.protocolname = bean.getProtocolName();
		this.primarytumour = bean.getPrimaryTumour() == null ? null : bean.getPrimaryTumour().buildVo();
		this.treatmentsite = bean.getTreatmentSite() == null ? null : bean.getTreatmentSite().buildVo();
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
		this.phases = ims.eas.vo.ProtocolPhaseVoCollection.buildFromBeanCollection(bean.getPhases());
		this.recordingmos = bean.getRecordingMOS() == null ? null : bean.getRecordingMOS().buildVo();
		this.recordingdatetime = bean.getRecordingDateTime() == null ? null : bean.getRecordingDateTime().buildDateTime();
		this.conssessrequired = bean.getConsSessRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getConsSessRequired());
		this.conssessdefault = bean.getConsSessDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getConsSessDefault());
		this.planctrequired = bean.getPlanCTRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getPlanCTRequired());
		this.planctdefault = bean.getPlanCTDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPlanCTDefault());
		this.appropcccl = bean.getAppropCCCL() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getAppropCCCL());
		this.mricoregrequired = bean.getMRICoRegRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getMRICoRegRequired());
		this.mridefault = bean.getMRIDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getMRIDefault());
		this.dentistrequired = bean.getDentistRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getDentistRequired());
		this.dentistdefault = bean.getDentistDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getDentistDefault());
		this.pegrequired = bean.getPegRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getPegRequired());
		this.pegdefault = bean.getPEGDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPEGDefault());
		this.petctdefault = bean.getPetCTDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPetCTDefault());
		this.simlrequired = bean.getSimlRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getSimlRequired());
		this.simulationdefault = bean.getSimulationDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSimulationDefault());
		this.petctrequired = bean.getPetCTRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getPetCTRequired());
		this.ivcontrastrequired = bean.getIVContrastRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getIVContrastRequired());
		this.ivcontrastlist = ims.eas.vo.lookups.IVContrastCollection.buildFromBeanCollection(bean.getIVContrastList());
		this.ivcontrastdefault = bean.getIVContrastDefault() == null ? null : ims.eas.vo.lookups.IVContrast.buildLookup(bean.getIVContrastDefault());
		this.oralcontrastrequired = bean.getOralContrastRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getOralContrastRequired());
		this.oralcontrastlist = ims.eas.vo.lookups.OralContrastCollection.buildFromBeanCollection(bean.getOralContrastList());
		this.oralcontrastdefault = bean.getOralContrastDefault() == null ? null : ims.eas.vo.lookups.OralContrast.buildLookup(bean.getOralContrastDefault());
		this.gatingoptsrequired = bean.getGatingOptsRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getGatingOptsRequired());
		this.gatingoptslist = ims.eas.vo.lookups.GatingOptionsCollection.buildFromBeanCollection(bean.getGatingOptsList());
		this.gatingoptsdefault = bean.getGatingOptsDefault() == null ? null : ims.eas.vo.lookups.GatingOptions.buildLookup(bean.getGatingOptsDefault());
		this.imrtrequired = bean.getIMRTRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getIMRTRequired());
		this.imrtlist = ims.eas.vo.lookups.IMRTCollection.buildFromBeanCollection(bean.getIMRTList());
		this.imrtdefault = bean.getIMRTDefault() == null ? null : ims.eas.vo.lookups.IMRT.buildLookup(bean.getIMRTDefault());
		this.immobtyperequired = bean.getImmobTypeRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getImmobTypeRequired());
		this.immobtypelist = ims.eas.vo.lookups.ImmobilisationTypeCollection.buildFromBeanCollection(bean.getImmobTypeList());
		this.immobtypedefault = bean.getImmobTypeDefault() == null ? null : ims.eas.vo.lookups.ImmobilisationType.buildLookup(bean.getImmobTypeDefault());
		this.mouldroomrequired = bean.getMouldRoomRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getMouldRoomRequired());
		this.mouldroomlist = ims.eas.vo.lookups.MouldRoomActivityCollection.buildFromBeanCollection(bean.getMouldRoomList());
		this.mouldroomdefault = bean.getMouldRoomDefault() == null ? null : ims.eas.vo.lookups.MouldRoomActivity.buildLookup(bean.getMouldRoomDefault());
		this.clintrialprotocol = bean.getClinTrialProtocol();
		this.clinicaltrial = bean.getClinicalTrial() == null ? null : ims.oncology.vo.lookups.ClinicalTrialName.buildLookup(bean.getClinicalTrial());
		this.action = bean.getAction() == null ? null : ims.eas.vo.lookups.ProtocolActions.buildLookup(bean.getAction());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.eas.vo.beans.ProtocolVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.protocolname = bean.getProtocolName();
		this.primarytumour = bean.getPrimaryTumour() == null ? null : bean.getPrimaryTumour().buildVo(map);
		this.treatmentsite = bean.getTreatmentSite() == null ? null : bean.getTreatmentSite().buildVo(map);
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
		this.phases = ims.eas.vo.ProtocolPhaseVoCollection.buildFromBeanCollection(bean.getPhases());
		this.recordingmos = bean.getRecordingMOS() == null ? null : bean.getRecordingMOS().buildVo(map);
		this.recordingdatetime = bean.getRecordingDateTime() == null ? null : bean.getRecordingDateTime().buildDateTime();
		this.conssessrequired = bean.getConsSessRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getConsSessRequired());
		this.conssessdefault = bean.getConsSessDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getConsSessDefault());
		this.planctrequired = bean.getPlanCTRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getPlanCTRequired());
		this.planctdefault = bean.getPlanCTDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPlanCTDefault());
		this.appropcccl = bean.getAppropCCCL() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getAppropCCCL());
		this.mricoregrequired = bean.getMRICoRegRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getMRICoRegRequired());
		this.mridefault = bean.getMRIDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getMRIDefault());
		this.dentistrequired = bean.getDentistRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getDentistRequired());
		this.dentistdefault = bean.getDentistDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getDentistDefault());
		this.pegrequired = bean.getPegRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getPegRequired());
		this.pegdefault = bean.getPEGDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPEGDefault());
		this.petctdefault = bean.getPetCTDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getPetCTDefault());
		this.simlrequired = bean.getSimlRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getSimlRequired());
		this.simulationdefault = bean.getSimulationDefault() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSimulationDefault());
		this.petctrequired = bean.getPetCTRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getPetCTRequired());
		this.ivcontrastrequired = bean.getIVContrastRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getIVContrastRequired());
		this.ivcontrastlist = ims.eas.vo.lookups.IVContrastCollection.buildFromBeanCollection(bean.getIVContrastList());
		this.ivcontrastdefault = bean.getIVContrastDefault() == null ? null : ims.eas.vo.lookups.IVContrast.buildLookup(bean.getIVContrastDefault());
		this.oralcontrastrequired = bean.getOralContrastRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getOralContrastRequired());
		this.oralcontrastlist = ims.eas.vo.lookups.OralContrastCollection.buildFromBeanCollection(bean.getOralContrastList());
		this.oralcontrastdefault = bean.getOralContrastDefault() == null ? null : ims.eas.vo.lookups.OralContrast.buildLookup(bean.getOralContrastDefault());
		this.gatingoptsrequired = bean.getGatingOptsRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getGatingOptsRequired());
		this.gatingoptslist = ims.eas.vo.lookups.GatingOptionsCollection.buildFromBeanCollection(bean.getGatingOptsList());
		this.gatingoptsdefault = bean.getGatingOptsDefault() == null ? null : ims.eas.vo.lookups.GatingOptions.buildLookup(bean.getGatingOptsDefault());
		this.imrtrequired = bean.getIMRTRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getIMRTRequired());
		this.imrtlist = ims.eas.vo.lookups.IMRTCollection.buildFromBeanCollection(bean.getIMRTList());
		this.imrtdefault = bean.getIMRTDefault() == null ? null : ims.eas.vo.lookups.IMRT.buildLookup(bean.getIMRTDefault());
		this.immobtyperequired = bean.getImmobTypeRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getImmobTypeRequired());
		this.immobtypelist = ims.eas.vo.lookups.ImmobilisationTypeCollection.buildFromBeanCollection(bean.getImmobTypeList());
		this.immobtypedefault = bean.getImmobTypeDefault() == null ? null : ims.eas.vo.lookups.ImmobilisationType.buildLookup(bean.getImmobTypeDefault());
		this.mouldroomrequired = bean.getMouldRoomRequired() == null ? null : ims.eas.vo.lookups.OptionsRequired.buildLookup(bean.getMouldRoomRequired());
		this.mouldroomlist = ims.eas.vo.lookups.MouldRoomActivityCollection.buildFromBeanCollection(bean.getMouldRoomList());
		this.mouldroomdefault = bean.getMouldRoomDefault() == null ? null : ims.eas.vo.lookups.MouldRoomActivity.buildLookup(bean.getMouldRoomDefault());
		this.clintrialprotocol = bean.getClinTrialProtocol();
		this.clinicaltrial = bean.getClinicalTrial() == null ? null : ims.oncology.vo.lookups.ClinicalTrialName.buildLookup(bean.getClinicalTrial());
		this.action = bean.getAction() == null ? null : ims.eas.vo.lookups.ProtocolActions.buildLookup(bean.getAction());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.eas.vo.beans.ProtocolVoBean bean = null;
		if(map != null)
			bean = (ims.eas.vo.beans.ProtocolVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.eas.vo.beans.ProtocolVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("RECORDINGMOS"))
			return getRecordingMOS();
		if(fieldName.equals("RECORDINGDATETIME"))
			return getRecordingDateTime();
		if(fieldName.equals("CONSSESSREQUIRED"))
			return getConsSessRequired();
		if(fieldName.equals("CONSSESSDEFAULT"))
			return getConsSessDefault();
		if(fieldName.equals("PLANCTREQUIRED"))
			return getPlanCTRequired();
		if(fieldName.equals("PLANCTDEFAULT"))
			return getPlanCTDefault();
		if(fieldName.equals("APPROPCCCL"))
			return getAppropCCCL();
		if(fieldName.equals("MRICOREGREQUIRED"))
			return getMRICoRegRequired();
		if(fieldName.equals("MRIDEFAULT"))
			return getMRIDefault();
		if(fieldName.equals("DENTISTREQUIRED"))
			return getDentistRequired();
		if(fieldName.equals("DENTISTDEFAULT"))
			return getDentistDefault();
		if(fieldName.equals("PEGREQUIRED"))
			return getPegRequired();
		if(fieldName.equals("PEGDEFAULT"))
			return getPEGDefault();
		if(fieldName.equals("PETCTDEFAULT"))
			return getPetCTDefault();
		if(fieldName.equals("SIMLREQUIRED"))
			return getSimlRequired();
		if(fieldName.equals("SIMULATIONDEFAULT"))
			return getSimulationDefault();
		if(fieldName.equals("PETCTREQUIRED"))
			return getPetCTRequired();
		if(fieldName.equals("IVCONTRASTREQUIRED"))
			return getIVContrastRequired();
		if(fieldName.equals("IVCONTRASTLIST"))
			return getIVContrastList();
		if(fieldName.equals("IVCONTRASTDEFAULT"))
			return getIVContrastDefault();
		if(fieldName.equals("ORALCONTRASTREQUIRED"))
			return getOralContrastRequired();
		if(fieldName.equals("ORALCONTRASTLIST"))
			return getOralContrastList();
		if(fieldName.equals("ORALCONTRASTDEFAULT"))
			return getOralContrastDefault();
		if(fieldName.equals("GATINGOPTSREQUIRED"))
			return getGatingOptsRequired();
		if(fieldName.equals("GATINGOPTSLIST"))
			return getGatingOptsList();
		if(fieldName.equals("GATINGOPTSDEFAULT"))
			return getGatingOptsDefault();
		if(fieldName.equals("IMRTREQUIRED"))
			return getIMRTRequired();
		if(fieldName.equals("IMRTLIST"))
			return getIMRTList();
		if(fieldName.equals("IMRTDEFAULT"))
			return getIMRTDefault();
		if(fieldName.equals("IMMOBTYPEREQUIRED"))
			return getImmobTypeRequired();
		if(fieldName.equals("IMMOBTYPELIST"))
			return getImmobTypeList();
		if(fieldName.equals("IMMOBTYPEDEFAULT"))
			return getImmobTypeDefault();
		if(fieldName.equals("MOULDROOMREQUIRED"))
			return getMouldRoomRequired();
		if(fieldName.equals("MOULDROOMLIST"))
			return getMouldRoomList();
		if(fieldName.equals("MOULDROOMDEFAULT"))
			return getMouldRoomDefault();
		if(fieldName.equals("CLINTRIALPROTOCOL"))
			return getClinTrialProtocol();
		if(fieldName.equals("CLINICALTRIAL"))
			return getClinicalTrial();
		if(fieldName.equals("ACTION"))
			return getAction();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getRecordingMOSIsNotNull()
	{
		return this.recordingmos != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getRecordingMOS()
	{
		return this.recordingmos;
	}
	public void setRecordingMOS(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.recordingmos = value;
	}
	public boolean getRecordingDateTimeIsNotNull()
	{
		return this.recordingdatetime != null;
	}
	public ims.framework.utils.DateTime getRecordingDateTime()
	{
		return this.recordingdatetime;
	}
	public void setRecordingDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.recordingdatetime = value;
	}
	public boolean getConsSessRequiredIsNotNull()
	{
		return this.conssessrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getConsSessRequired()
	{
		return this.conssessrequired;
	}
	public void setConsSessRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.conssessrequired = value;
	}
	public boolean getConsSessDefaultIsNotNull()
	{
		return this.conssessdefault != null;
	}
	public ims.core.vo.lookups.YesNo getConsSessDefault()
	{
		return this.conssessdefault;
	}
	public void setConsSessDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.conssessdefault = value;
	}
	public boolean getPlanCTRequiredIsNotNull()
	{
		return this.planctrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getPlanCTRequired()
	{
		return this.planctrequired;
	}
	public void setPlanCTRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.planctrequired = value;
	}
	public boolean getPlanCTDefaultIsNotNull()
	{
		return this.planctdefault != null;
	}
	public ims.core.vo.lookups.YesNo getPlanCTDefault()
	{
		return this.planctdefault;
	}
	public void setPlanCTDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.planctdefault = value;
	}
	public boolean getAppropCCCLIsNotNull()
	{
		return this.appropcccl != null;
	}
	public ims.core.vo.lookups.YesNo getAppropCCCL()
	{
		return this.appropcccl;
	}
	public void setAppropCCCL(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.appropcccl = value;
	}
	public boolean getMRICoRegRequiredIsNotNull()
	{
		return this.mricoregrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getMRICoRegRequired()
	{
		return this.mricoregrequired;
	}
	public void setMRICoRegRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.mricoregrequired = value;
	}
	public boolean getMRIDefaultIsNotNull()
	{
		return this.mridefault != null;
	}
	public ims.core.vo.lookups.YesNo getMRIDefault()
	{
		return this.mridefault;
	}
	public void setMRIDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.mridefault = value;
	}
	public boolean getDentistRequiredIsNotNull()
	{
		return this.dentistrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getDentistRequired()
	{
		return this.dentistrequired;
	}
	public void setDentistRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.dentistrequired = value;
	}
	public boolean getDentistDefaultIsNotNull()
	{
		return this.dentistdefault != null;
	}
	public ims.core.vo.lookups.YesNo getDentistDefault()
	{
		return this.dentistdefault;
	}
	public void setDentistDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.dentistdefault = value;
	}
	public boolean getPegRequiredIsNotNull()
	{
		return this.pegrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getPegRequired()
	{
		return this.pegrequired;
	}
	public void setPegRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.pegrequired = value;
	}
	public boolean getPEGDefaultIsNotNull()
	{
		return this.pegdefault != null;
	}
	public ims.core.vo.lookups.YesNo getPEGDefault()
	{
		return this.pegdefault;
	}
	public void setPEGDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.pegdefault = value;
	}
	public boolean getPetCTDefaultIsNotNull()
	{
		return this.petctdefault != null;
	}
	public ims.core.vo.lookups.YesNo getPetCTDefault()
	{
		return this.petctdefault;
	}
	public void setPetCTDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.petctdefault = value;
	}
	public boolean getSimlRequiredIsNotNull()
	{
		return this.simlrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getSimlRequired()
	{
		return this.simlrequired;
	}
	public void setSimlRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.simlrequired = value;
	}
	public boolean getSimulationDefaultIsNotNull()
	{
		return this.simulationdefault != null;
	}
	public ims.core.vo.lookups.YesNo getSimulationDefault()
	{
		return this.simulationdefault;
	}
	public void setSimulationDefault(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.simulationdefault = value;
	}
	public boolean getPetCTRequiredIsNotNull()
	{
		return this.petctrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getPetCTRequired()
	{
		return this.petctrequired;
	}
	public void setPetCTRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.petctrequired = value;
	}
	public boolean getIVContrastRequiredIsNotNull()
	{
		return this.ivcontrastrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getIVContrastRequired()
	{
		return this.ivcontrastrequired;
	}
	public void setIVContrastRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.ivcontrastrequired = value;
	}
	public boolean getIVContrastListIsNotNull()
	{
		return this.ivcontrastlist != null;
	}
	public ims.eas.vo.lookups.IVContrastCollection getIVContrastList()
	{
		return this.ivcontrastlist;
	}
	public void setIVContrastList(ims.eas.vo.lookups.IVContrastCollection value)
	{
		this.isValidated = false;
		this.ivcontrastlist = value;
	}
	public boolean getIVContrastDefaultIsNotNull()
	{
		return this.ivcontrastdefault != null;
	}
	public ims.eas.vo.lookups.IVContrast getIVContrastDefault()
	{
		return this.ivcontrastdefault;
	}
	public void setIVContrastDefault(ims.eas.vo.lookups.IVContrast value)
	{
		this.isValidated = false;
		this.ivcontrastdefault = value;
	}
	public boolean getOralContrastRequiredIsNotNull()
	{
		return this.oralcontrastrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getOralContrastRequired()
	{
		return this.oralcontrastrequired;
	}
	public void setOralContrastRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.oralcontrastrequired = value;
	}
	public boolean getOralContrastListIsNotNull()
	{
		return this.oralcontrastlist != null;
	}
	public ims.eas.vo.lookups.OralContrastCollection getOralContrastList()
	{
		return this.oralcontrastlist;
	}
	public void setOralContrastList(ims.eas.vo.lookups.OralContrastCollection value)
	{
		this.isValidated = false;
		this.oralcontrastlist = value;
	}
	public boolean getOralContrastDefaultIsNotNull()
	{
		return this.oralcontrastdefault != null;
	}
	public ims.eas.vo.lookups.OralContrast getOralContrastDefault()
	{
		return this.oralcontrastdefault;
	}
	public void setOralContrastDefault(ims.eas.vo.lookups.OralContrast value)
	{
		this.isValidated = false;
		this.oralcontrastdefault = value;
	}
	public boolean getGatingOptsRequiredIsNotNull()
	{
		return this.gatingoptsrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getGatingOptsRequired()
	{
		return this.gatingoptsrequired;
	}
	public void setGatingOptsRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.gatingoptsrequired = value;
	}
	public boolean getGatingOptsListIsNotNull()
	{
		return this.gatingoptslist != null;
	}
	public ims.eas.vo.lookups.GatingOptionsCollection getGatingOptsList()
	{
		return this.gatingoptslist;
	}
	public void setGatingOptsList(ims.eas.vo.lookups.GatingOptionsCollection value)
	{
		this.isValidated = false;
		this.gatingoptslist = value;
	}
	public boolean getGatingOptsDefaultIsNotNull()
	{
		return this.gatingoptsdefault != null;
	}
	public ims.eas.vo.lookups.GatingOptions getGatingOptsDefault()
	{
		return this.gatingoptsdefault;
	}
	public void setGatingOptsDefault(ims.eas.vo.lookups.GatingOptions value)
	{
		this.isValidated = false;
		this.gatingoptsdefault = value;
	}
	public boolean getIMRTRequiredIsNotNull()
	{
		return this.imrtrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getIMRTRequired()
	{
		return this.imrtrequired;
	}
	public void setIMRTRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.imrtrequired = value;
	}
	public boolean getIMRTListIsNotNull()
	{
		return this.imrtlist != null;
	}
	public ims.eas.vo.lookups.IMRTCollection getIMRTList()
	{
		return this.imrtlist;
	}
	public void setIMRTList(ims.eas.vo.lookups.IMRTCollection value)
	{
		this.isValidated = false;
		this.imrtlist = value;
	}
	public boolean getIMRTDefaultIsNotNull()
	{
		return this.imrtdefault != null;
	}
	public ims.eas.vo.lookups.IMRT getIMRTDefault()
	{
		return this.imrtdefault;
	}
	public void setIMRTDefault(ims.eas.vo.lookups.IMRT value)
	{
		this.isValidated = false;
		this.imrtdefault = value;
	}
	public boolean getImmobTypeRequiredIsNotNull()
	{
		return this.immobtyperequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getImmobTypeRequired()
	{
		return this.immobtyperequired;
	}
	public void setImmobTypeRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.immobtyperequired = value;
	}
	public boolean getImmobTypeListIsNotNull()
	{
		return this.immobtypelist != null;
	}
	public ims.eas.vo.lookups.ImmobilisationTypeCollection getImmobTypeList()
	{
		return this.immobtypelist;
	}
	public void setImmobTypeList(ims.eas.vo.lookups.ImmobilisationTypeCollection value)
	{
		this.isValidated = false;
		this.immobtypelist = value;
	}
	public boolean getImmobTypeDefaultIsNotNull()
	{
		return this.immobtypedefault != null;
	}
	public ims.eas.vo.lookups.ImmobilisationType getImmobTypeDefault()
	{
		return this.immobtypedefault;
	}
	public void setImmobTypeDefault(ims.eas.vo.lookups.ImmobilisationType value)
	{
		this.isValidated = false;
		this.immobtypedefault = value;
	}
	public boolean getMouldRoomRequiredIsNotNull()
	{
		return this.mouldroomrequired != null;
	}
	public ims.eas.vo.lookups.OptionsRequired getMouldRoomRequired()
	{
		return this.mouldroomrequired;
	}
	public void setMouldRoomRequired(ims.eas.vo.lookups.OptionsRequired value)
	{
		this.isValidated = false;
		this.mouldroomrequired = value;
	}
	public boolean getMouldRoomListIsNotNull()
	{
		return this.mouldroomlist != null;
	}
	public ims.eas.vo.lookups.MouldRoomActivityCollection getMouldRoomList()
	{
		return this.mouldroomlist;
	}
	public void setMouldRoomList(ims.eas.vo.lookups.MouldRoomActivityCollection value)
	{
		this.isValidated = false;
		this.mouldroomlist = value;
	}
	public boolean getMouldRoomDefaultIsNotNull()
	{
		return this.mouldroomdefault != null;
	}
	public ims.eas.vo.lookups.MouldRoomActivity getMouldRoomDefault()
	{
		return this.mouldroomdefault;
	}
	public void setMouldRoomDefault(ims.eas.vo.lookups.MouldRoomActivity value)
	{
		this.isValidated = false;
		this.mouldroomdefault = value;
	}
	public boolean getClinTrialProtocolIsNotNull()
	{
		return this.clintrialprotocol != null;
	}
	public Boolean getClinTrialProtocol()
	{
		return this.clintrialprotocol;
	}
	public void setClinTrialProtocol(Boolean value)
	{
		this.isValidated = false;
		this.clintrialprotocol = value;
	}
	public boolean getClinicalTrialIsNotNull()
	{
		return this.clinicaltrial != null;
	}
	public ims.oncology.vo.lookups.ClinicalTrialName getClinicalTrial()
	{
		return this.clinicaltrial;
	}
	public void setClinicalTrial(ims.oncology.vo.lookups.ClinicalTrialName value)
	{
		this.isValidated = false;
		this.clinicaltrial = value;
	}
	public boolean getActionIsNotNull()
	{
		return this.action != null;
	}
	public ims.eas.vo.lookups.ProtocolActions getAction()
	{
		return this.action;
	}
	public void setAction(ims.eas.vo.lookups.ProtocolActions value)
	{
		this.isValidated = false;
		this.action = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.phases != null)
		{
			if(!this.phases.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.protocolname == null || this.protocolname.length() == 0)
			listOfErrors.add("ProtocolName is mandatory");
		else if(this.protocolname.length() > 70)
			listOfErrors.add("The length of the field [protocolname] in the value object [ims.eas.vo.ProtocolVo] is too big. It should be less or equal to 70");
		if(this.primarytumour == null)
			listOfErrors.add("PrimaryTumour is mandatory");
		if(this.treatmentsite == null)
			listOfErrors.add("TreatmentSite is mandatory");
		if(this.status == null)
			listOfErrors.add("Status is mandatory");
		if(this.phases == null || this.phases.size() == 0)
			listOfErrors.add("Phases are mandatory");
		if(this.phases != null)
		{
			String[] listOfOtherErrors = this.phases.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.recordingmos == null)
			listOfErrors.add("RecordingMOS is mandatory");
		if(this.recordingdatetime == null)
			listOfErrors.add("RecordingDateTime is mandatory");
		if(this.conssessrequired == null)
			listOfErrors.add("ConsSessRequired is mandatory");
		if(this.planctrequired == null)
			listOfErrors.add("PlanCTRequired is mandatory");
		if(this.appropcccl == null)
			listOfErrors.add("AppropCCCL is mandatory");
		if(this.mricoregrequired == null)
			listOfErrors.add("MRICoRegRequired is mandatory");
		if(this.dentistrequired == null)
			listOfErrors.add("DentistRequired is mandatory");
		if(this.pegrequired == null)
			listOfErrors.add("PegRequired is mandatory");
		if(this.simlrequired == null)
			listOfErrors.add("SimlRequired is mandatory");
		if(this.petctrequired == null)
			listOfErrors.add("PetCTRequired is mandatory");
		if(this.ivcontrastrequired == null)
			listOfErrors.add("IVContrastRequired is mandatory");
		if(this.oralcontrastrequired == null)
			listOfErrors.add("OralContrastRequired is mandatory");
		if(this.gatingoptsrequired == null)
			listOfErrors.add("GatingOptsRequired is mandatory");
		if(this.imrtrequired == null)
			listOfErrors.add("IMRTRequired is mandatory");
		if(this.immobtyperequired == null)
			listOfErrors.add("ImmobTypeRequired is mandatory");
		if(this.mouldroomrequired == null)
			listOfErrors.add("MouldRoomRequired is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ProtocolVo clone = new ProtocolVo(this.id, this.version);
		
		clone.protocolname = this.protocolname;
		if(this.primarytumour == null)
			clone.primarytumour = null;
		else
			clone.primarytumour = (ims.eas.vo.PrimaryTumourNameVo)this.primarytumour.clone();
		if(this.treatmentsite == null)
			clone.treatmentsite = null;
		else
			clone.treatmentsite = (ims.eas.vo.TreatmentSiteNameVo)this.treatmentsite.clone();
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)this.status.clone();
		if(this.phases == null)
			clone.phases = null;
		else
			clone.phases = (ims.eas.vo.ProtocolPhaseVoCollection)this.phases.clone();
		if(this.recordingmos == null)
			clone.recordingmos = null;
		else
			clone.recordingmos = (ims.core.vo.MemberOfStaffLiteVo)this.recordingmos.clone();
		if(this.recordingdatetime == null)
			clone.recordingdatetime = null;
		else
			clone.recordingdatetime = (ims.framework.utils.DateTime)this.recordingdatetime.clone();
		if(this.conssessrequired == null)
			clone.conssessrequired = null;
		else
			clone.conssessrequired = (ims.eas.vo.lookups.OptionsRequired)this.conssessrequired.clone();
		if(this.conssessdefault == null)
			clone.conssessdefault = null;
		else
			clone.conssessdefault = (ims.core.vo.lookups.YesNo)this.conssessdefault.clone();
		if(this.planctrequired == null)
			clone.planctrequired = null;
		else
			clone.planctrequired = (ims.eas.vo.lookups.OptionsRequired)this.planctrequired.clone();
		if(this.planctdefault == null)
			clone.planctdefault = null;
		else
			clone.planctdefault = (ims.core.vo.lookups.YesNo)this.planctdefault.clone();
		if(this.appropcccl == null)
			clone.appropcccl = null;
		else
			clone.appropcccl = (ims.core.vo.lookups.YesNo)this.appropcccl.clone();
		if(this.mricoregrequired == null)
			clone.mricoregrequired = null;
		else
			clone.mricoregrequired = (ims.eas.vo.lookups.OptionsRequired)this.mricoregrequired.clone();
		if(this.mridefault == null)
			clone.mridefault = null;
		else
			clone.mridefault = (ims.core.vo.lookups.YesNo)this.mridefault.clone();
		if(this.dentistrequired == null)
			clone.dentistrequired = null;
		else
			clone.dentistrequired = (ims.eas.vo.lookups.OptionsRequired)this.dentistrequired.clone();
		if(this.dentistdefault == null)
			clone.dentistdefault = null;
		else
			clone.dentistdefault = (ims.core.vo.lookups.YesNo)this.dentistdefault.clone();
		if(this.pegrequired == null)
			clone.pegrequired = null;
		else
			clone.pegrequired = (ims.eas.vo.lookups.OptionsRequired)this.pegrequired.clone();
		if(this.pegdefault == null)
			clone.pegdefault = null;
		else
			clone.pegdefault = (ims.core.vo.lookups.YesNo)this.pegdefault.clone();
		if(this.petctdefault == null)
			clone.petctdefault = null;
		else
			clone.petctdefault = (ims.core.vo.lookups.YesNo)this.petctdefault.clone();
		if(this.simlrequired == null)
			clone.simlrequired = null;
		else
			clone.simlrequired = (ims.eas.vo.lookups.OptionsRequired)this.simlrequired.clone();
		if(this.simulationdefault == null)
			clone.simulationdefault = null;
		else
			clone.simulationdefault = (ims.core.vo.lookups.YesNo)this.simulationdefault.clone();
		if(this.petctrequired == null)
			clone.petctrequired = null;
		else
			clone.petctrequired = (ims.eas.vo.lookups.OptionsRequired)this.petctrequired.clone();
		if(this.ivcontrastrequired == null)
			clone.ivcontrastrequired = null;
		else
			clone.ivcontrastrequired = (ims.eas.vo.lookups.OptionsRequired)this.ivcontrastrequired.clone();
		if(this.ivcontrastlist == null)
			clone.ivcontrastlist = null;
		else
			clone.ivcontrastlist = (ims.eas.vo.lookups.IVContrastCollection)this.ivcontrastlist.clone();
		if(this.ivcontrastdefault == null)
			clone.ivcontrastdefault = null;
		else
			clone.ivcontrastdefault = (ims.eas.vo.lookups.IVContrast)this.ivcontrastdefault.clone();
		if(this.oralcontrastrequired == null)
			clone.oralcontrastrequired = null;
		else
			clone.oralcontrastrequired = (ims.eas.vo.lookups.OptionsRequired)this.oralcontrastrequired.clone();
		if(this.oralcontrastlist == null)
			clone.oralcontrastlist = null;
		else
			clone.oralcontrastlist = (ims.eas.vo.lookups.OralContrastCollection)this.oralcontrastlist.clone();
		if(this.oralcontrastdefault == null)
			clone.oralcontrastdefault = null;
		else
			clone.oralcontrastdefault = (ims.eas.vo.lookups.OralContrast)this.oralcontrastdefault.clone();
		if(this.gatingoptsrequired == null)
			clone.gatingoptsrequired = null;
		else
			clone.gatingoptsrequired = (ims.eas.vo.lookups.OptionsRequired)this.gatingoptsrequired.clone();
		if(this.gatingoptslist == null)
			clone.gatingoptslist = null;
		else
			clone.gatingoptslist = (ims.eas.vo.lookups.GatingOptionsCollection)this.gatingoptslist.clone();
		if(this.gatingoptsdefault == null)
			clone.gatingoptsdefault = null;
		else
			clone.gatingoptsdefault = (ims.eas.vo.lookups.GatingOptions)this.gatingoptsdefault.clone();
		if(this.imrtrequired == null)
			clone.imrtrequired = null;
		else
			clone.imrtrequired = (ims.eas.vo.lookups.OptionsRequired)this.imrtrequired.clone();
		if(this.imrtlist == null)
			clone.imrtlist = null;
		else
			clone.imrtlist = (ims.eas.vo.lookups.IMRTCollection)this.imrtlist.clone();
		if(this.imrtdefault == null)
			clone.imrtdefault = null;
		else
			clone.imrtdefault = (ims.eas.vo.lookups.IMRT)this.imrtdefault.clone();
		if(this.immobtyperequired == null)
			clone.immobtyperequired = null;
		else
			clone.immobtyperequired = (ims.eas.vo.lookups.OptionsRequired)this.immobtyperequired.clone();
		if(this.immobtypelist == null)
			clone.immobtypelist = null;
		else
			clone.immobtypelist = (ims.eas.vo.lookups.ImmobilisationTypeCollection)this.immobtypelist.clone();
		if(this.immobtypedefault == null)
			clone.immobtypedefault = null;
		else
			clone.immobtypedefault = (ims.eas.vo.lookups.ImmobilisationType)this.immobtypedefault.clone();
		if(this.mouldroomrequired == null)
			clone.mouldroomrequired = null;
		else
			clone.mouldroomrequired = (ims.eas.vo.lookups.OptionsRequired)this.mouldroomrequired.clone();
		if(this.mouldroomlist == null)
			clone.mouldroomlist = null;
		else
			clone.mouldroomlist = (ims.eas.vo.lookups.MouldRoomActivityCollection)this.mouldroomlist.clone();
		if(this.mouldroomdefault == null)
			clone.mouldroomdefault = null;
		else
			clone.mouldroomdefault = (ims.eas.vo.lookups.MouldRoomActivity)this.mouldroomdefault.clone();
		clone.clintrialprotocol = this.clintrialprotocol;
		if(this.clinicaltrial == null)
			clone.clinicaltrial = null;
		else
			clone.clinicaltrial = (ims.oncology.vo.lookups.ClinicalTrialName)this.clinicaltrial.clone();
		if(this.action == null)
			clone.action = null;
		else
			clone.action = (ims.eas.vo.lookups.ProtocolActions)this.action.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ProtocolVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ProtocolVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ProtocolVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ProtocolVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.recordingmos != null)
			count++;
		if(this.recordingdatetime != null)
			count++;
		if(this.conssessrequired != null)
			count++;
		if(this.conssessdefault != null)
			count++;
		if(this.planctrequired != null)
			count++;
		if(this.planctdefault != null)
			count++;
		if(this.appropcccl != null)
			count++;
		if(this.mricoregrequired != null)
			count++;
		if(this.mridefault != null)
			count++;
		if(this.dentistrequired != null)
			count++;
		if(this.dentistdefault != null)
			count++;
		if(this.pegrequired != null)
			count++;
		if(this.pegdefault != null)
			count++;
		if(this.petctdefault != null)
			count++;
		if(this.simlrequired != null)
			count++;
		if(this.simulationdefault != null)
			count++;
		if(this.petctrequired != null)
			count++;
		if(this.ivcontrastrequired != null)
			count++;
		if(this.ivcontrastlist != null)
			count++;
		if(this.ivcontrastdefault != null)
			count++;
		if(this.oralcontrastrequired != null)
			count++;
		if(this.oralcontrastlist != null)
			count++;
		if(this.oralcontrastdefault != null)
			count++;
		if(this.gatingoptsrequired != null)
			count++;
		if(this.gatingoptslist != null)
			count++;
		if(this.gatingoptsdefault != null)
			count++;
		if(this.imrtrequired != null)
			count++;
		if(this.imrtlist != null)
			count++;
		if(this.imrtdefault != null)
			count++;
		if(this.immobtyperequired != null)
			count++;
		if(this.immobtypelist != null)
			count++;
		if(this.immobtypedefault != null)
			count++;
		if(this.mouldroomrequired != null)
			count++;
		if(this.mouldroomlist != null)
			count++;
		if(this.mouldroomdefault != null)
			count++;
		if(this.clintrialprotocol != null)
			count++;
		if(this.clinicaltrial != null)
			count++;
		if(this.action != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 38;
	}
	protected ims.core.vo.MemberOfStaffLiteVo recordingmos;
	protected ims.framework.utils.DateTime recordingdatetime;
	protected ims.eas.vo.lookups.OptionsRequired conssessrequired;
	protected ims.core.vo.lookups.YesNo conssessdefault;
	protected ims.eas.vo.lookups.OptionsRequired planctrequired;
	protected ims.core.vo.lookups.YesNo planctdefault;
	protected ims.core.vo.lookups.YesNo appropcccl;
	protected ims.eas.vo.lookups.OptionsRequired mricoregrequired;
	protected ims.core.vo.lookups.YesNo mridefault;
	protected ims.eas.vo.lookups.OptionsRequired dentistrequired;
	protected ims.core.vo.lookups.YesNo dentistdefault;
	protected ims.eas.vo.lookups.OptionsRequired pegrequired;
	protected ims.core.vo.lookups.YesNo pegdefault;
	protected ims.core.vo.lookups.YesNo petctdefault;
	protected ims.eas.vo.lookups.OptionsRequired simlrequired;
	protected ims.core.vo.lookups.YesNo simulationdefault;
	protected ims.eas.vo.lookups.OptionsRequired petctrequired;
	protected ims.eas.vo.lookups.OptionsRequired ivcontrastrequired;
	protected ims.eas.vo.lookups.IVContrastCollection ivcontrastlist;
	protected ims.eas.vo.lookups.IVContrast ivcontrastdefault;
	protected ims.eas.vo.lookups.OptionsRequired oralcontrastrequired;
	protected ims.eas.vo.lookups.OralContrastCollection oralcontrastlist;
	protected ims.eas.vo.lookups.OralContrast oralcontrastdefault;
	protected ims.eas.vo.lookups.OptionsRequired gatingoptsrequired;
	protected ims.eas.vo.lookups.GatingOptionsCollection gatingoptslist;
	protected ims.eas.vo.lookups.GatingOptions gatingoptsdefault;
	protected ims.eas.vo.lookups.OptionsRequired imrtrequired;
	protected ims.eas.vo.lookups.IMRTCollection imrtlist;
	protected ims.eas.vo.lookups.IMRT imrtdefault;
	protected ims.eas.vo.lookups.OptionsRequired immobtyperequired;
	protected ims.eas.vo.lookups.ImmobilisationTypeCollection immobtypelist;
	protected ims.eas.vo.lookups.ImmobilisationType immobtypedefault;
	protected ims.eas.vo.lookups.OptionsRequired mouldroomrequired;
	protected ims.eas.vo.lookups.MouldRoomActivityCollection mouldroomlist;
	protected ims.eas.vo.lookups.MouldRoomActivity mouldroomdefault;
	protected Boolean clintrialprotocol;
	protected ims.oncology.vo.lookups.ClinicalTrialName clinicaltrial;
	protected ims.eas.vo.lookups.ProtocolActions action;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
