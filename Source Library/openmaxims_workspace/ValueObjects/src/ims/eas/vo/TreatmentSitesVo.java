//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.vo;

/**
 * Linked to EAS.Configuration.TreatmentSites business object (ID: 1114100000).
 */
public class TreatmentSitesVo extends ims.eas.configuration.vo.TreatmentSitesRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TreatmentSitesVo()
	{
	}
	public TreatmentSitesVo(Integer id, int version)
	{
		super(id, version);
	}
	public TreatmentSitesVo(ims.eas.vo.beans.TreatmentSitesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.treatmentsite = bean.getTreatmentSite() == null ? null : ims.eas.vo.lookups.TreatmentSites.buildLookup(bean.getTreatmentSite());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
		this.assessment = bean.getAssessment() == null ? null : bean.getAssessment().buildVo();
		this.scanlimits = ims.eas.vo.lookups.ScanLimitsCollection.buildFromBeanCollection(bean.getScanLimits());
		this.defaultscanlimit = bean.getDefaultScanLimit() == null ? null : ims.eas.vo.lookups.ScanLimits.buildLookup(bean.getDefaultScanLimit());
		this.laterality = bean.getLaterality();
		this.systeminformation = bean.getSystemInformation() == null ? null : bean.getSystemInformation().buildSystemInformation();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.eas.vo.beans.TreatmentSitesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.treatmentsite = bean.getTreatmentSite() == null ? null : ims.eas.vo.lookups.TreatmentSites.buildLookup(bean.getTreatmentSite());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
		this.assessment = bean.getAssessment() == null ? null : bean.getAssessment().buildVo(map);
		this.scanlimits = ims.eas.vo.lookups.ScanLimitsCollection.buildFromBeanCollection(bean.getScanLimits());
		this.defaultscanlimit = bean.getDefaultScanLimit() == null ? null : ims.eas.vo.lookups.ScanLimits.buildLookup(bean.getDefaultScanLimit());
		this.laterality = bean.getLaterality();
		this.systeminformation = bean.getSystemInformation() == null ? null : bean.getSystemInformation().buildSystemInformation();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.eas.vo.beans.TreatmentSitesVoBean bean = null;
		if(map != null)
			bean = (ims.eas.vo.beans.TreatmentSitesVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.eas.vo.beans.TreatmentSitesVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TREATMENTSITE"))
			return getTreatmentSite();
		if(fieldName.equals("STATUS"))
			return getStatus();
		if(fieldName.equals("ASSESSMENT"))
			return getAssessment();
		if(fieldName.equals("SCANLIMITS"))
			return getScanLimits();
		if(fieldName.equals("DEFAULTSCANLIMIT"))
			return getDefaultScanLimit();
		if(fieldName.equals("LATERALITY"))
			return getLaterality();
		if(fieldName.equals("SYSTEMINFORMATION"))
			return getSystemInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTreatmentSiteIsNotNull()
	{
		return this.treatmentsite != null;
	}
	public ims.eas.vo.lookups.TreatmentSites getTreatmentSite()
	{
		return this.treatmentsite;
	}
	public void setTreatmentSite(ims.eas.vo.lookups.TreatmentSites value)
	{
		this.isValidated = false;
		this.treatmentsite = value;
	}
	public boolean getStatusIsNotNull()
	{
		return this.status != null;
	}
	public ims.core.vo.lookups.PreActiveActiveInactiveStatus getStatus()
	{
		return this.status;
	}
	public void setStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
	{
		this.isValidated = false;
		this.status = value;
	}
	public boolean getAssessmentIsNotNull()
	{
		return this.assessment != null;
	}
	public ims.assessment.vo.GraphicAssessmentLiteVo getAssessment()
	{
		return this.assessment;
	}
	public void setAssessment(ims.assessment.vo.GraphicAssessmentLiteVo value)
	{
		this.isValidated = false;
		this.assessment = value;
	}
	public boolean getScanLimitsIsNotNull()
	{
		return this.scanlimits != null;
	}
	public ims.eas.vo.lookups.ScanLimitsCollection getScanLimits()
	{
		return this.scanlimits;
	}
	public void setScanLimits(ims.eas.vo.lookups.ScanLimitsCollection value)
	{
		this.isValidated = false;
		this.scanlimits = value;
	}
	public boolean getDefaultScanLimitIsNotNull()
	{
		return this.defaultscanlimit != null;
	}
	public ims.eas.vo.lookups.ScanLimits getDefaultScanLimit()
	{
		return this.defaultscanlimit;
	}
	public void setDefaultScanLimit(ims.eas.vo.lookups.ScanLimits value)
	{
		this.isValidated = false;
		this.defaultscanlimit = value;
	}
	public boolean getLateralityIsNotNull()
	{
		return this.laterality != null;
	}
	public Boolean getLaterality()
	{
		return this.laterality;
	}
	public void setLaterality(Boolean value)
	{
		this.isValidated = false;
		this.laterality = value;
	}
	public boolean getSystemInformationIsNotNull()
	{
		return this.systeminformation != null;
	}
	public ims.vo.SystemInformation getSystemInformation()
	{
		return this.systeminformation;
	}
	public void setSystemInformation(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.systeminformation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.treatmentsite == null)
			listOfErrors.add("Treatment Site is mandatory.");
		if(this.status == null)
			listOfErrors.add("Status is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TreatmentSitesVo clone = new TreatmentSitesVo(this.id, this.version);
		
		if(this.treatmentsite == null)
			clone.treatmentsite = null;
		else
			clone.treatmentsite = (ims.eas.vo.lookups.TreatmentSites)this.treatmentsite.clone();
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)this.status.clone();
		if(this.assessment == null)
			clone.assessment = null;
		else
			clone.assessment = (ims.assessment.vo.GraphicAssessmentLiteVo)this.assessment.clone();
		if(this.scanlimits == null)
			clone.scanlimits = null;
		else
			clone.scanlimits = (ims.eas.vo.lookups.ScanLimitsCollection)this.scanlimits.clone();
		if(this.defaultscanlimit == null)
			clone.defaultscanlimit = null;
		else
			clone.defaultscanlimit = (ims.eas.vo.lookups.ScanLimits)this.defaultscanlimit.clone();
		clone.laterality = this.laterality;
		if(this.systeminformation == null)
			clone.systeminformation = null;
		else
			clone.systeminformation = (ims.vo.SystemInformation)this.systeminformation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TreatmentSitesVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TreatmentSitesVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TreatmentSitesVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TreatmentSitesVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.treatmentsite != null)
			count++;
		if(this.status != null)
			count++;
		if(this.assessment != null)
			count++;
		if(this.scanlimits != null)
			count++;
		if(this.defaultscanlimit != null)
			count++;
		if(this.laterality != null)
			count++;
		if(this.systeminformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.eas.vo.lookups.TreatmentSites treatmentsite;
	protected ims.core.vo.lookups.PreActiveActiveInactiveStatus status;
	protected ims.assessment.vo.GraphicAssessmentLiteVo assessment;
	protected ims.eas.vo.lookups.ScanLimitsCollection scanlimits;
	protected ims.eas.vo.lookups.ScanLimits defaultscanlimit;
	protected Boolean laterality;
	protected ims.vo.SystemInformation systeminformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
