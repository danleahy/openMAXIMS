//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to core.clinical.EDClinicDetails business object (ID: 1086100055).
 */
public class EDClinicDetailsVo extends ims.core.clinical.vo.EDClinicDetailsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public EDClinicDetailsVo()
	{
	}
	public EDClinicDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public EDClinicDetailsVo(ims.emergency.vo.beans.EDClinicDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.reasonforreferral = bean.getReasonForReferral();
		this.physicaldocumentstobesent = bean.getPhysicalDocumentsToBeSent();
		this.comment = bean.getComment();
		this.specialty = bean.getSpecialty() == null ? null : bean.getSpecialty().buildVo();
		this.edclinicappt = bean.getEDClinicAppt() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getEDClinicAppt().getId()), bean.getEDClinicAppt().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.EDClinicDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.reasonforreferral = bean.getReasonForReferral();
		this.physicaldocumentstobesent = bean.getPhysicalDocumentsToBeSent();
		this.comment = bean.getComment();
		this.specialty = bean.getSpecialty() == null ? null : bean.getSpecialty().buildVo(map);
		this.edclinicappt = bean.getEDClinicAppt() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getEDClinicAppt().getId()), bean.getEDClinicAppt().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.EDClinicDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.EDClinicDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.EDClinicDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("REASONFORREFERRAL"))
			return getReasonForReferral();
		if(fieldName.equals("PHYSICALDOCUMENTSTOBESENT"))
			return getPhysicalDocumentsToBeSent();
		if(fieldName.equals("COMMENT"))
			return getComment();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("EDCLINICAPPT"))
			return getEDClinicAppt();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.core.admin.vo.CareContextRefVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getReasonForReferralIsNotNull()
	{
		return this.reasonforreferral != null;
	}
	public String getReasonForReferral()
	{
		return this.reasonforreferral;
	}
	public static int getReasonForReferralMaxLength()
	{
		return 1000;
	}
	public void setReasonForReferral(String value)
	{
		this.isValidated = false;
		this.reasonforreferral = value;
	}
	public boolean getPhysicalDocumentsToBeSentIsNotNull()
	{
		return this.physicaldocumentstobesent != null;
	}
	public Boolean getPhysicalDocumentsToBeSent()
	{
		return this.physicaldocumentstobesent;
	}
	public void setPhysicalDocumentsToBeSent(Boolean value)
	{
		this.isValidated = false;
		this.physicaldocumentstobesent = value;
	}
	public boolean getCommentIsNotNull()
	{
		return this.comment != null;
	}
	public String getComment()
	{
		return this.comment;
	}
	public static int getCommentMaxLength()
	{
		return 1000;
	}
	public void setComment(String value)
	{
		this.isValidated = false;
		this.comment = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.ServiceShortVo getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.ServiceShortVo value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getEDClinicApptIsNotNull()
	{
		return this.edclinicappt != null;
	}
	public ims.scheduling.vo.Booking_AppointmentRefVo getEDClinicAppt()
	{
		return this.edclinicappt;
	}
	public void setEDClinicAppt(ims.scheduling.vo.Booking_AppointmentRefVo value)
	{
		this.isValidated = false;
		this.edclinicappt = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.reasonforreferral != null)
			if(this.reasonforreferral.length() > 1000)
				listOfErrors.add("The length of the field [reasonforreferral] in the value object [ims.emergency.vo.EDClinicDetailsVo] is too big. It should be less or equal to 1000");
		if(this.comment != null)
			if(this.comment.length() > 1000)
				listOfErrors.add("The length of the field [comment] in the value object [ims.emergency.vo.EDClinicDetailsVo] is too big. It should be less or equal to 1000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		EDClinicDetailsVo clone = new EDClinicDetailsVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.episode = this.episode;
		clone.attendance = this.attendance;
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.reasonforreferral = this.reasonforreferral;
		clone.physicaldocumentstobesent = this.physicaldocumentstobesent;
		clone.comment = this.comment;
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.ServiceShortVo)this.specialty.clone();
		clone.edclinicappt = this.edclinicappt;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(EDClinicDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A EDClinicDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((EDClinicDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((EDClinicDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		if(this.reasonforreferral != null)
			count++;
		if(this.physicaldocumentstobesent != null)
			count++;
		if(this.comment != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.edclinicappt != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 9;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episode;
	protected ims.core.admin.vo.CareContextRefVo attendance;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected String reasonforreferral;
	protected Boolean physicaldocumentstobesent;
	protected String comment;
	protected ims.core.vo.ServiceShortVo specialty;
	protected ims.scheduling.vo.Booking_AppointmentRefVo edclinicappt;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
