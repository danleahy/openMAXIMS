//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.PatientWhiteboardRecord business object (ID: 1086100045).
 */
public class PatientWhiteboardRecordVo extends ims.emergency.vo.PatientWhiteboardRecordRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientWhiteboardRecordVo()
	{
	}
	public PatientWhiteboardRecordVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientWhiteboardRecordVo(ims.emergency.vo.beans.PatientWhiteboardRecordVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.clinicalnote = bean.getClinicalNote() == null ? null : bean.getClinicalNote().buildVo();
		this.currentactions = ims.emergency.vo.PatientWhiteboardActionsVoCollection.buildFromBeanCollection(bean.getCurrentActions());
		this.actionhistory = ims.emergency.vo.PatientWhiteboardActionsVoCollection.buildFromBeanCollection(bean.getActionHistory());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.PatientWhiteboardRecordVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.clinicalnote = bean.getClinicalNote() == null ? null : bean.getClinicalNote().buildVo(map);
		this.currentactions = ims.emergency.vo.PatientWhiteboardActionsVoCollection.buildFromBeanCollection(bean.getCurrentActions());
		this.actionhistory = ims.emergency.vo.PatientWhiteboardActionsVoCollection.buildFromBeanCollection(bean.getActionHistory());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.PatientWhiteboardRecordVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.PatientWhiteboardRecordVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.PatientWhiteboardRecordVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("CLINICALNOTE"))
			return getClinicalNote();
		if(fieldName.equals("CURRENTACTIONS"))
			return getCurrentActions();
		if(fieldName.equals("ACTIONHISTORY"))
			return getActionHistory();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.core.admin.vo.CareContextRefVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getClinicalNoteIsNotNull()
	{
		return this.clinicalnote != null;
	}
	public ims.emergency.vo.AttendanceClinicalNotesForWhiteBoardVo getClinicalNote()
	{
		return this.clinicalnote;
	}
	public void setClinicalNote(ims.emergency.vo.AttendanceClinicalNotesForWhiteBoardVo value)
	{
		this.isValidated = false;
		this.clinicalnote = value;
	}
	public boolean getCurrentActionsIsNotNull()
	{
		return this.currentactions != null;
	}
	public ims.emergency.vo.PatientWhiteboardActionsVoCollection getCurrentActions()
	{
		return this.currentactions;
	}
	public void setCurrentActions(ims.emergency.vo.PatientWhiteboardActionsVoCollection value)
	{
		this.isValidated = false;
		this.currentactions = value;
	}
	public boolean getActionHistoryIsNotNull()
	{
		return this.actionhistory != null;
	}
	public ims.emergency.vo.PatientWhiteboardActionsVoCollection getActionHistory()
	{
		return this.actionhistory;
	}
	public void setActionHistory(ims.emergency.vo.PatientWhiteboardActionsVoCollection value)
	{
		this.isValidated = false;
		this.actionhistory = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.clinicalnote != null)
		{
			if(!this.clinicalnote.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentactions != null)
		{
			if(!this.currentactions.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.actionhistory != null)
		{
			if(!this.actionhistory.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.clinicalnote != null)
		{
			String[] listOfOtherErrors = this.clinicalnote.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentactions != null)
		{
			String[] listOfOtherErrors = this.currentactions.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.actionhistory != null)
		{
			String[] listOfOtherErrors = this.actionhistory.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientWhiteboardRecordVo clone = new PatientWhiteboardRecordVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.episode = this.episode;
		clone.attendance = this.attendance;
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.clinicalnote == null)
			clone.clinicalnote = null;
		else
			clone.clinicalnote = (ims.emergency.vo.AttendanceClinicalNotesForWhiteBoardVo)this.clinicalnote.clone();
		if(this.currentactions == null)
			clone.currentactions = null;
		else
			clone.currentactions = (ims.emergency.vo.PatientWhiteboardActionsVoCollection)this.currentactions.clone();
		if(this.actionhistory == null)
			clone.actionhistory = null;
		else
			clone.actionhistory = (ims.emergency.vo.PatientWhiteboardActionsVoCollection)this.actionhistory.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientWhiteboardRecordVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientWhiteboardRecordVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientWhiteboardRecordVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientWhiteboardRecordVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		if(this.clinicalnote != null)
			count++;
		if(this.currentactions != null)
			count++;
		if(this.actionhistory != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episode;
	protected ims.core.admin.vo.CareContextRefVo attendance;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected ims.emergency.vo.AttendanceClinicalNotesForWhiteBoardVo clinicalnote;
	protected ims.emergency.vo.PatientWhiteboardActionsVoCollection currentactions;
	protected ims.emergency.vo.PatientWhiteboardActionsVoCollection actionhistory;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
