//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.InvestigationAttendenceDetail business object (ID: 1086100020).
 */
public class InvestigationAttendenceDetailVo extends ims.emergency.vo.InvestigationAttendenceDetailRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InvestigationAttendenceDetailVo()
	{
	}
	public InvestigationAttendenceDetailVo(Integer id, int version)
	{
		super(id, version);
	}
	public InvestigationAttendenceDetailVo(ims.emergency.vo.beans.InvestigationAttendenceDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.attendenceinvestigation = bean.getAttendenceInvestigation() == null ? null : ims.emergency.vo.lookups.AttendenceInvestigation.buildLookup(bean.getAttendenceInvestigation());
		this.active = bean.getActive();
		this.addedduringcoding = bean.getAddedDuringCoding();
		this.ocsinvestigation = bean.getOCSInvestigation() == null ? null : bean.getOCSInvestigation().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.InvestigationAttendenceDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.attendenceinvestigation = bean.getAttendenceInvestigation() == null ? null : ims.emergency.vo.lookups.AttendenceInvestigation.buildLookup(bean.getAttendenceInvestigation());
		this.active = bean.getActive();
		this.addedduringcoding = bean.getAddedDuringCoding();
		this.ocsinvestigation = bean.getOCSInvestigation() == null ? null : bean.getOCSInvestigation().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.InvestigationAttendenceDetailVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.InvestigationAttendenceDetailVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.InvestigationAttendenceDetailVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("ATTENDENCEINVESTIGATION"))
			return getAttendenceInvestigation();
		if(fieldName.equals("ACTIVE"))
			return getActive();
		if(fieldName.equals("ADDEDDURINGCODING"))
			return getAddedDuringCoding();
		if(fieldName.equals("OCSINVESTIGATION"))
			return getOCSInvestigation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getAttendenceInvestigationIsNotNull()
	{
		return this.attendenceinvestigation != null;
	}
	public ims.emergency.vo.lookups.AttendenceInvestigation getAttendenceInvestigation()
	{
		return this.attendenceinvestigation;
	}
	public void setAttendenceInvestigation(ims.emergency.vo.lookups.AttendenceInvestigation value)
	{
		this.isValidated = false;
		this.attendenceinvestigation = value;
	}
	public boolean getActiveIsNotNull()
	{
		return this.active != null;
	}
	public Boolean getActive()
	{
		return this.active;
	}
	public void setActive(Boolean value)
	{
		this.isValidated = false;
		this.active = value;
	}
	public boolean getAddedDuringCodingIsNotNull()
	{
		return this.addedduringcoding != null;
	}
	public Boolean getAddedDuringCoding()
	{
		return this.addedduringcoding;
	}
	public void setAddedDuringCoding(Boolean value)
	{
		this.isValidated = false;
		this.addedduringcoding = value;
	}
	public boolean getOCSInvestigationIsNotNull()
	{
		return this.ocsinvestigation != null;
	}
	public ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVo getOCSInvestigation()
	{
		return this.ocsinvestigation;
	}
	public void setOCSInvestigation(ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVo value)
	{
		this.isValidated = false;
		this.ocsinvestigation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.active == null)
			listOfErrors.add("Active is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InvestigationAttendenceDetailVo clone = new InvestigationAttendenceDetailVo(this.id, this.version);
		
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.attendenceinvestigation == null)
			clone.attendenceinvestigation = null;
		else
			clone.attendenceinvestigation = (ims.emergency.vo.lookups.AttendenceInvestigation)this.attendenceinvestigation.clone();
		clone.active = this.active;
		clone.addedduringcoding = this.addedduringcoding;
		if(this.ocsinvestigation == null)
			clone.ocsinvestigation = null;
		else
			clone.ocsinvestigation = (ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVo)this.ocsinvestigation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InvestigationAttendenceDetailVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InvestigationAttendenceDetailVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((InvestigationAttendenceDetailVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((InvestigationAttendenceDetailVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.authoringinformation != null)
			count++;
		if(this.attendenceinvestigation != null)
			count++;
		if(this.active != null)
			count++;
		if(this.addedduringcoding != null)
			count++;
		if(this.ocsinvestigation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected ims.emergency.vo.lookups.AttendenceInvestigation attendenceinvestigation;
	protected Boolean active;
	protected Boolean addedduringcoding;
	protected ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVo ocsinvestigation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
