//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to core.admin.EmergencyAttendance business object (ID: 1004100025).
 */
public class AmbulanceDetailsVo extends ims.core.admin.vo.EmergencyAttendanceRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AmbulanceDetailsVo()
	{
	}
	public AmbulanceDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public AmbulanceDetailsVo(ims.emergency.vo.beans.AmbulanceDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.ambulancearrivaldatetime = bean.getAmbulanceArrivalDateTime() == null ? null : bean.getAmbulanceArrivalDateTime().buildDateTime();
		this.ambulancejobno = bean.getAmbulanceJobNo();
		this.ambulancehandoverdatetime = bean.getAmbulanceHandoverDateTime() == null ? null : bean.getAmbulanceHandoverDateTime().buildDateTime();
		this.ambulancedelayreason = bean.getAmbulanceDelayReason() == null ? null : ims.emergency.vo.lookups.AmbulanceDelayReason.buildLookup(bean.getAmbulanceDelayReason());
		this.ambulancedelayreasoncomment = bean.getAmbulanceDelayReasonComment();
		this.arrivaldatetime = bean.getArrivalDateTime() == null ? null : bean.getArrivalDateTime().buildDateTime();
		this.registrationdatetime = bean.getRegistrationDateTime() == null ? null : bean.getRegistrationDateTime().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.AmbulanceDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.ambulancearrivaldatetime = bean.getAmbulanceArrivalDateTime() == null ? null : bean.getAmbulanceArrivalDateTime().buildDateTime();
		this.ambulancejobno = bean.getAmbulanceJobNo();
		this.ambulancehandoverdatetime = bean.getAmbulanceHandoverDateTime() == null ? null : bean.getAmbulanceHandoverDateTime().buildDateTime();
		this.ambulancedelayreason = bean.getAmbulanceDelayReason() == null ? null : ims.emergency.vo.lookups.AmbulanceDelayReason.buildLookup(bean.getAmbulanceDelayReason());
		this.ambulancedelayreasoncomment = bean.getAmbulanceDelayReasonComment();
		this.arrivaldatetime = bean.getArrivalDateTime() == null ? null : bean.getArrivalDateTime().buildDateTime();
		this.registrationdatetime = bean.getRegistrationDateTime() == null ? null : bean.getRegistrationDateTime().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.AmbulanceDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.AmbulanceDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.AmbulanceDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AMBULANCEARRIVALDATETIME"))
			return getAmbulanceArrivalDateTime();
		if(fieldName.equals("AMBULANCEJOBNO"))
			return getAmbulanceJobNo();
		if(fieldName.equals("AMBULANCEHANDOVERDATETIME"))
			return getAmbulanceHandoverDateTime();
		if(fieldName.equals("AMBULANCEDELAYREASON"))
			return getAmbulanceDelayReason();
		if(fieldName.equals("AMBULANCEDELAYREASONCOMMENT"))
			return getAmbulanceDelayReasonComment();
		if(fieldName.equals("ARRIVALDATETIME"))
			return getArrivalDateTime();
		if(fieldName.equals("REGISTRATIONDATETIME"))
			return getRegistrationDateTime();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAmbulanceArrivalDateTimeIsNotNull()
	{
		return this.ambulancearrivaldatetime != null;
	}
	public ims.framework.utils.DateTime getAmbulanceArrivalDateTime()
	{
		return this.ambulancearrivaldatetime;
	}
	public void setAmbulanceArrivalDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.ambulancearrivaldatetime = value;
	}
	public boolean getAmbulanceJobNoIsNotNull()
	{
		return this.ambulancejobno != null;
	}
	public String getAmbulanceJobNo()
	{
		return this.ambulancejobno;
	}
	public static int getAmbulanceJobNoMaxLength()
	{
		return 25;
	}
	public void setAmbulanceJobNo(String value)
	{
		this.isValidated = false;
		this.ambulancejobno = value;
	}
	public boolean getAmbulanceHandoverDateTimeIsNotNull()
	{
		return this.ambulancehandoverdatetime != null;
	}
	public ims.framework.utils.DateTime getAmbulanceHandoverDateTime()
	{
		return this.ambulancehandoverdatetime;
	}
	public void setAmbulanceHandoverDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.ambulancehandoverdatetime = value;
	}
	public boolean getAmbulanceDelayReasonIsNotNull()
	{
		return this.ambulancedelayreason != null;
	}
	public ims.emergency.vo.lookups.AmbulanceDelayReason getAmbulanceDelayReason()
	{
		return this.ambulancedelayreason;
	}
	public void setAmbulanceDelayReason(ims.emergency.vo.lookups.AmbulanceDelayReason value)
	{
		this.isValidated = false;
		this.ambulancedelayreason = value;
	}
	public boolean getAmbulanceDelayReasonCommentIsNotNull()
	{
		return this.ambulancedelayreasoncomment != null;
	}
	public String getAmbulanceDelayReasonComment()
	{
		return this.ambulancedelayreasoncomment;
	}
	public static int getAmbulanceDelayReasonCommentMaxLength()
	{
		return 5000;
	}
	public void setAmbulanceDelayReasonComment(String value)
	{
		this.isValidated = false;
		this.ambulancedelayreasoncomment = value;
	}
	public boolean getArrivalDateTimeIsNotNull()
	{
		return this.arrivaldatetime != null;
	}
	public ims.framework.utils.DateTime getArrivalDateTime()
	{
		return this.arrivaldatetime;
	}
	public void setArrivalDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.arrivaldatetime = value;
	}
	public boolean getRegistrationDateTimeIsNotNull()
	{
		return this.registrationdatetime != null;
	}
	public ims.framework.utils.DateTime getRegistrationDateTime()
	{
		return this.registrationdatetime;
	}
	public void setRegistrationDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.registrationdatetime = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.ambulancejobno != null)
			if(this.ambulancejobno.length() > 25)
				listOfErrors.add("The length of the field [ambulancejobno] in the value object [ims.emergency.vo.AmbulanceDetailsVo] is too big. It should be less or equal to 25");
		if(this.arrivaldatetime == null)
			listOfErrors.add("ArrivalDateTime is mandatory");
		if(this.registrationdatetime == null)
			listOfErrors.add("RegistrationDateTime is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AmbulanceDetailsVo clone = new AmbulanceDetailsVo(this.id, this.version);
		
		if(this.ambulancearrivaldatetime == null)
			clone.ambulancearrivaldatetime = null;
		else
			clone.ambulancearrivaldatetime = (ims.framework.utils.DateTime)this.ambulancearrivaldatetime.clone();
		clone.ambulancejobno = this.ambulancejobno;
		if(this.ambulancehandoverdatetime == null)
			clone.ambulancehandoverdatetime = null;
		else
			clone.ambulancehandoverdatetime = (ims.framework.utils.DateTime)this.ambulancehandoverdatetime.clone();
		if(this.ambulancedelayreason == null)
			clone.ambulancedelayreason = null;
		else
			clone.ambulancedelayreason = (ims.emergency.vo.lookups.AmbulanceDelayReason)this.ambulancedelayreason.clone();
		clone.ambulancedelayreasoncomment = this.ambulancedelayreasoncomment;
		if(this.arrivaldatetime == null)
			clone.arrivaldatetime = null;
		else
			clone.arrivaldatetime = (ims.framework.utils.DateTime)this.arrivaldatetime.clone();
		if(this.registrationdatetime == null)
			clone.registrationdatetime = null;
		else
			clone.registrationdatetime = (ims.framework.utils.DateTime)this.registrationdatetime.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AmbulanceDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AmbulanceDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AmbulanceDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AmbulanceDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.ambulancearrivaldatetime != null)
			count++;
		if(this.ambulancejobno != null)
			count++;
		if(this.ambulancehandoverdatetime != null)
			count++;
		if(this.ambulancedelayreason != null)
			count++;
		if(this.ambulancedelayreasoncomment != null)
			count++;
		if(this.arrivaldatetime != null)
			count++;
		if(this.registrationdatetime != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.framework.utils.DateTime ambulancearrivaldatetime;
	protected String ambulancejobno;
	protected ims.framework.utils.DateTime ambulancehandoverdatetime;
	protected ims.emergency.vo.lookups.AmbulanceDelayReason ambulancedelayreason;
	protected String ambulancedelayreasoncomment;
	protected ims.framework.utils.DateTime arrivaldatetime;
	protected ims.framework.utils.DateTime registrationdatetime;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
