//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;


public class AttendanceListSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AttendanceListSearchCriteriaVo()
	{
	}
	public AttendanceListSearchCriteriaVo(ims.emergency.vo.beans.AttendanceListSearchCriteriaVoBean bean)
	{
		this.surname = bean.getSurname();
		this.forename = bean.getForename();
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.emergency.vo.lookups.PatientCategory.buildLookup(bean.getPatientCategory());
		this.presentingproblem = bean.getPresentingProblem() == null ? null : bean.getPresentingProblem().buildVo();
		this.includedischarged = bean.getIncludeDischarged();
		this.includeuncoded = bean.getIncludeUncoded();
		this.includerequiresdischargedocumentationreview = bean.getIncludeRequiresDischargeDocumentationReview();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.AttendanceListSearchCriteriaVoBean bean)
	{
		this.surname = bean.getSurname();
		this.forename = bean.getForename();
		this.patientcategory = bean.getPatientCategory() == null ? null : ims.emergency.vo.lookups.PatientCategory.buildLookup(bean.getPatientCategory());
		this.presentingproblem = bean.getPresentingProblem() == null ? null : bean.getPresentingProblem().buildVo(map);
		this.includedischarged = bean.getIncludeDischarged();
		this.includeuncoded = bean.getIncludeUncoded();
		this.includerequiresdischargedocumentationreview = bean.getIncludeRequiresDischargeDocumentationReview();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.AttendanceListSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.AttendanceListSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.AttendanceListSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getSurnameIsNotNull()
	{
		return this.surname != null;
	}
	public String getSurname()
	{
		return this.surname;
	}
	public static int getSurnameMaxLength()
	{
		return 255;
	}
	public void setSurname(String value)
	{
		this.isValidated = false;
		this.surname = value;
	}
	public boolean getForenameIsNotNull()
	{
		return this.forename != null;
	}
	public String getForename()
	{
		return this.forename;
	}
	public static int getForenameMaxLength()
	{
		return 255;
	}
	public void setForename(String value)
	{
		this.isValidated = false;
		this.forename = value;
	}
	public boolean getPatientCategoryIsNotNull()
	{
		return this.patientcategory != null;
	}
	public ims.emergency.vo.lookups.PatientCategory getPatientCategory()
	{
		return this.patientcategory;
	}
	public void setPatientCategory(ims.emergency.vo.lookups.PatientCategory value)
	{
		this.isValidated = false;
		this.patientcategory = value;
	}
	public boolean getPresentingProblemIsNotNull()
	{
		return this.presentingproblem != null;
	}
	public ims.clinical.vo.ClinicalProblemShortVo getPresentingProblem()
	{
		return this.presentingproblem;
	}
	public void setPresentingProblem(ims.clinical.vo.ClinicalProblemShortVo value)
	{
		this.isValidated = false;
		this.presentingproblem = value;
	}
	public boolean getIncludeDischargedIsNotNull()
	{
		return this.includedischarged != null;
	}
	public Boolean getIncludeDischarged()
	{
		return this.includedischarged;
	}
	public void setIncludeDischarged(Boolean value)
	{
		this.isValidated = false;
		this.includedischarged = value;
	}
	public boolean getIncludeUncodedIsNotNull()
	{
		return this.includeuncoded != null;
	}
	public Boolean getIncludeUncoded()
	{
		return this.includeuncoded;
	}
	public void setIncludeUncoded(Boolean value)
	{
		this.isValidated = false;
		this.includeuncoded = value;
	}
	public boolean getIncludeRequiresDischargeDocumentationReviewIsNotNull()
	{
		return this.includerequiresdischargedocumentationreview != null;
	}
	public Boolean getIncludeRequiresDischargeDocumentationReview()
	{
		return this.includerequiresdischargedocumentationreview;
	}
	public void setIncludeRequiresDischargeDocumentationReview(Boolean value)
	{
		this.isValidated = false;
		this.includerequiresdischargedocumentationreview = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AttendanceListSearchCriteriaVo clone = new AttendanceListSearchCriteriaVo();
		
		clone.surname = this.surname;
		clone.forename = this.forename;
		if(this.patientcategory == null)
			clone.patientcategory = null;
		else
			clone.patientcategory = (ims.emergency.vo.lookups.PatientCategory)this.patientcategory.clone();
		if(this.presentingproblem == null)
			clone.presentingproblem = null;
		else
			clone.presentingproblem = (ims.clinical.vo.ClinicalProblemShortVo)this.presentingproblem.clone();
		clone.includedischarged = this.includedischarged;
		clone.includeuncoded = this.includeuncoded;
		clone.includerequiresdischargedocumentationreview = this.includerequiresdischargedocumentationreview;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AttendanceListSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AttendanceListSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AttendanceListSearchCriteriaVo compareObj = (AttendanceListSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getPresentingProblem() == null && compareObj.getPresentingProblem() != null)
				return -1;
			if(this.getPresentingProblem() != null && compareObj.getPresentingProblem() == null)
				return 1;
			if(this.getPresentingProblem() != null && compareObj.getPresentingProblem() != null)
				retVal = this.getPresentingProblem().compareTo(compareObj.getPresentingProblem());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.surname != null)
			count++;
		if(this.forename != null)
			count++;
		if(this.patientcategory != null)
			count++;
		if(this.presentingproblem != null)
			count++;
		if(this.includedischarged != null)
			count++;
		if(this.includeuncoded != null)
			count++;
		if(this.includerequiresdischargedocumentationreview != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected String surname;
	protected String forename;
	protected ims.emergency.vo.lookups.PatientCategory patientcategory;
	protected ims.clinical.vo.ClinicalProblemShortVo presentingproblem;
	protected Boolean includedischarged;
	protected Boolean includeuncoded;
	protected Boolean includerequiresdischargedocumentationreview;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
