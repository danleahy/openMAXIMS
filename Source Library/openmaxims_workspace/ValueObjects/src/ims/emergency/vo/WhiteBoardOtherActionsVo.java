//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.Configuration.WhiteBoardOtherActions business object (ID: 1087100024).
 */
public class WhiteBoardOtherActionsVo extends ims.emergency.configuration.vo.WhiteBoardOtherActionsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public WhiteBoardOtherActionsVo()
	{
	}
	public WhiteBoardOtherActionsVo(Integer id, int version)
	{
		super(id, version);
	}
	public WhiteBoardOtherActionsVo(ims.emergency.vo.beans.WhiteBoardOtherActionsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.otheractiontype = bean.getOtherActionType() == null ? null : ims.emergency.vo.lookups.WhiteboardOtherActionType.buildLookup(bean.getOtherActionType());
		this.otheractiontooltip = bean.getOtherActionTooltip();
		this.actionicon = bean.getActionIcon() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getActionIcon().getId()), bean.getActionIcon().getVersion());
		this.requiredicon = bean.getRequiredIcon() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getRequiredIcon().getId()), bean.getRequiredIcon().getVersion());
		this.completeicon = bean.getCompleteIcon() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getCompleteIcon().getId()), bean.getCompleteIcon().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.WhiteBoardOtherActionsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.otheractiontype = bean.getOtherActionType() == null ? null : ims.emergency.vo.lookups.WhiteboardOtherActionType.buildLookup(bean.getOtherActionType());
		this.otheractiontooltip = bean.getOtherActionTooltip();
		this.actionicon = bean.getActionIcon() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getActionIcon().getId()), bean.getActionIcon().getVersion());
		this.requiredicon = bean.getRequiredIcon() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getRequiredIcon().getId()), bean.getRequiredIcon().getVersion());
		this.completeicon = bean.getCompleteIcon() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getCompleteIcon().getId()), bean.getCompleteIcon().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.WhiteBoardOtherActionsVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.WhiteBoardOtherActionsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.WhiteBoardOtherActionsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("OTHERACTIONTYPE"))
			return getOtherActionType();
		if(fieldName.equals("OTHERACTIONTOOLTIP"))
			return getOtherActionTooltip();
		if(fieldName.equals("ACTIONICON"))
			return getActionIcon();
		if(fieldName.equals("REQUIREDICON"))
			return getRequiredIcon();
		if(fieldName.equals("COMPLETEICON"))
			return getCompleteIcon();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getOtherActionTypeIsNotNull()
	{
		return this.otheractiontype != null;
	}
	public ims.emergency.vo.lookups.WhiteboardOtherActionType getOtherActionType()
	{
		return this.otheractiontype;
	}
	public void setOtherActionType(ims.emergency.vo.lookups.WhiteboardOtherActionType value)
	{
		this.isValidated = false;
		this.otheractiontype = value;
	}
	public boolean getOtherActionTooltipIsNotNull()
	{
		return this.otheractiontooltip != null;
	}
	public String getOtherActionTooltip()
	{
		return this.otheractiontooltip;
	}
	public static int getOtherActionTooltipMaxLength()
	{
		return 255;
	}
	public void setOtherActionTooltip(String value)
	{
		this.isValidated = false;
		this.otheractiontooltip = value;
	}
	public boolean getActionIconIsNotNull()
	{
		return this.actionicon != null;
	}
	public ims.core.configuration.vo.AppImageRefVo getActionIcon()
	{
		return this.actionicon;
	}
	public void setActionIcon(ims.core.configuration.vo.AppImageRefVo value)
	{
		this.isValidated = false;
		this.actionicon = value;
	}
	public boolean getRequiredIconIsNotNull()
	{
		return this.requiredicon != null;
	}
	public ims.core.configuration.vo.AppImageRefVo getRequiredIcon()
	{
		return this.requiredicon;
	}
	public void setRequiredIcon(ims.core.configuration.vo.AppImageRefVo value)
	{
		this.isValidated = false;
		this.requiredicon = value;
	}
	public boolean getCompleteIconIsNotNull()
	{
		return this.completeicon != null;
	}
	public ims.core.configuration.vo.AppImageRefVo getCompleteIcon()
	{
		return this.completeicon;
	}
	public void setCompleteIcon(ims.core.configuration.vo.AppImageRefVo value)
	{
		this.isValidated = false;
		this.completeicon = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.otheractiontype == null)
			listOfErrors.add("'Type' is mandatory!");
		if(this.otheractiontooltip == null || this.otheractiontooltip.length() == 0)
			listOfErrors.add("'Tooltip' is mandatory!");
		else if(this.otheractiontooltip.length() > 255)
			listOfErrors.add("The length of the field [otheractiontooltip] in the value object [ims.emergency.vo.WhiteBoardOtherActionsVo] is too big. It should be less or equal to 255");
		if(this.actionicon == null)
			listOfErrors.add("'Action Icon' is mandatory!");
		if(this.requiredicon == null)
			listOfErrors.add("'Required Icon' is mandatory!");
		if(this.completeicon == null)
			listOfErrors.add("'Complete Icon' is mandatory!");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		WhiteBoardOtherActionsVo clone = new WhiteBoardOtherActionsVo(this.id, this.version);
		
		if(this.otheractiontype == null)
			clone.otheractiontype = null;
		else
			clone.otheractiontype = (ims.emergency.vo.lookups.WhiteboardOtherActionType)this.otheractiontype.clone();
		clone.otheractiontooltip = this.otheractiontooltip;
		clone.actionicon = this.actionicon;
		clone.requiredicon = this.requiredicon;
		clone.completeicon = this.completeicon;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(WhiteBoardOtherActionsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A WhiteBoardOtherActionsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((WhiteBoardOtherActionsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((WhiteBoardOtherActionsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.otheractiontype != null)
			count++;
		if(this.otheractiontooltip != null)
			count++;
		if(this.actionicon != null)
			count++;
		if(this.requiredicon != null)
			count++;
		if(this.completeicon != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.emergency.vo.lookups.WhiteboardOtherActionType otheractiontype;
	protected String otheractiontooltip;
	protected ims.core.configuration.vo.AppImageRefVo actionicon;
	protected ims.core.configuration.vo.AppImageRefVo requiredicon;
	protected ims.core.configuration.vo.AppImageRefVo completeicon;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
