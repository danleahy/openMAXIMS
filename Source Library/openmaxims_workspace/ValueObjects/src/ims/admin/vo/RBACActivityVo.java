//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.vo;

/**
 * Linked to core.admin.RBACActivity business object (ID: 1004100072).
 */
public class RBACActivityVo extends ims.core.admin.vo.RBACActivityRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public RBACActivityVo()
	{
	}
	public RBACActivityVo(Integer id, int version)
	{
		super(id, version);
	}
	public RBACActivityVo(ims.admin.vo.beans.RBACActivityVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.activitycode = bean.getActivityCode();
		this.activitydescription = bean.getActivityDescription();
		if(bean.getParentActivities() != null)
		{
			this.parentactivities = new ims.core.admin.vo.RBACActivityRefVoCollection();
			for(int parentactivities_i = 0; parentactivities_i < bean.getParentActivities().length; parentactivities_i++)
			{
				this.parentactivities.add(new ims.core.admin.vo.RBACActivityRefVo(new Integer(bean.getParentActivities()[parentactivities_i].getId()), bean.getParentActivities()[parentactivities_i].getVersion()));
			}
		}
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.admin.vo.beans.RBACActivityVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.activitycode = bean.getActivityCode();
		this.activitydescription = bean.getActivityDescription();
		if(bean.getParentActivities() != null)
		{
			this.parentactivities = new ims.core.admin.vo.RBACActivityRefVoCollection();
			for(int parentactivities_i = 0; parentactivities_i < bean.getParentActivities().length; parentactivities_i++)
			{
				this.parentactivities.add(new ims.core.admin.vo.RBACActivityRefVo(new Integer(bean.getParentActivities()[parentactivities_i].getId()), bean.getParentActivities()[parentactivities_i].getVersion()));
			}
		}
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.admin.vo.beans.RBACActivityVoBean bean = null;
		if(map != null)
			bean = (ims.admin.vo.beans.RBACActivityVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.admin.vo.beans.RBACActivityVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ACTIVITYCODE"))
			return getActivityCode();
		if(fieldName.equals("ACTIVITYDESCRIPTION"))
			return getActivityDescription();
		if(fieldName.equals("PARENTACTIVITIES"))
			return getParentActivities();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getActivityCodeIsNotNull()
	{
		return this.activitycode != null;
	}
	public String getActivityCode()
	{
		return this.activitycode;
	}
	public static int getActivityCodeMaxLength()
	{
		return 100;
	}
	public void setActivityCode(String value)
	{
		this.isValidated = false;
		this.activitycode = value;
	}
	public boolean getActivityDescriptionIsNotNull()
	{
		return this.activitydescription != null;
	}
	public String getActivityDescription()
	{
		return this.activitydescription;
	}
	public static int getActivityDescriptionMaxLength()
	{
		return 100;
	}
	public void setActivityDescription(String value)
	{
		this.isValidated = false;
		this.activitydescription = value;
	}
	public boolean getParentActivitiesIsNotNull()
	{
		return this.parentactivities != null;
	}
	public ims.core.admin.vo.RBACActivityRefVoCollection getParentActivities()
	{
		return this.parentactivities;
	}
	public void setParentActivities(ims.core.admin.vo.RBACActivityRefVoCollection value)
	{
		this.isValidated = false;
		this.parentactivities = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.activitycode != null)
			if(this.activitycode.length() > 100)
				listOfErrors.add("The length of the field [activitycode] in the value object [ims.admin.vo.RBACActivityVo] is too big. It should be less or equal to 100");
		if(this.activitydescription != null)
			if(this.activitydescription.length() > 100)
				listOfErrors.add("The length of the field [activitydescription] in the value object [ims.admin.vo.RBACActivityVo] is too big. It should be less or equal to 100");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		RBACActivityVo clone = new RBACActivityVo(this.id, this.version);
		
		clone.activitycode = this.activitycode;
		clone.activitydescription = this.activitydescription;
		clone.parentactivities = this.parentactivities;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(RBACActivityVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A RBACActivityVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((RBACActivityVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((RBACActivityVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.activitycode != null)
			count++;
		if(this.activitydescription != null)
			count++;
		if(this.parentactivities != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 3;
	}
	protected String activitycode;
	protected String activitydescription;
	protected ims.core.admin.vo.RBACActivityRefVoCollection parentactivities;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
