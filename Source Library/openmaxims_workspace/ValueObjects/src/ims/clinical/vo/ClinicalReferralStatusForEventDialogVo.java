//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.ClinicalReferralStatus business object (ID: 1072100113).
 */
public class ClinicalReferralStatusForEventDialogVo extends ims.clinical.vo.ClinicalReferralStatusRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ClinicalReferralStatusForEventDialogVo()
	{
	}
	public ClinicalReferralStatusForEventDialogVo(Integer id, int version)
	{
		super(id, version);
	}
	public ClinicalReferralStatusForEventDialogVo(ims.clinical.vo.beans.ClinicalReferralStatusForEventDialogVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.referralstatus = bean.getReferralStatus() == null ? null : ims.core.vo.lookups.InternalReferralStatus.buildLookup(bean.getReferralStatus());
		this.recordinginfo = bean.getRecordingInfo() == null ? null : bean.getRecordingInfo().buildVo();
		this.rejectionreason = bean.getRejectionReason() == null ? null : ims.RefMan.vo.lookups.RejectionReason.buildLookup(bean.getRejectionReason());
		this.rejectionreasontext = bean.getRejectionReasonText();
		this.internalreferralstatuschangereason = bean.getInternalReferralStatusChangeReason() == null ? null : ims.clinical.vo.lookups.InternalReferralStatusChangeReason.buildLookup(bean.getInternalReferralStatusChangeReason());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.ClinicalReferralStatusForEventDialogVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.referralstatus = bean.getReferralStatus() == null ? null : ims.core.vo.lookups.InternalReferralStatus.buildLookup(bean.getReferralStatus());
		this.recordinginfo = bean.getRecordingInfo() == null ? null : bean.getRecordingInfo().buildVo(map);
		this.rejectionreason = bean.getRejectionReason() == null ? null : ims.RefMan.vo.lookups.RejectionReason.buildLookup(bean.getRejectionReason());
		this.rejectionreasontext = bean.getRejectionReasonText();
		this.internalreferralstatuschangereason = bean.getInternalReferralStatusChangeReason() == null ? null : ims.clinical.vo.lookups.InternalReferralStatusChangeReason.buildLookup(bean.getInternalReferralStatusChangeReason());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.ClinicalReferralStatusForEventDialogVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.ClinicalReferralStatusForEventDialogVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.ClinicalReferralStatusForEventDialogVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("REFERRALSTATUS"))
			return getReferralStatus();
		if(fieldName.equals("RECORDINGINFO"))
			return getRecordingInfo();
		if(fieldName.equals("REJECTIONREASON"))
			return getRejectionReason();
		if(fieldName.equals("REJECTIONREASONTEXT"))
			return getRejectionReasonText();
		if(fieldName.equals("INTERNALREFERRALSTATUSCHANGEREASON"))
			return getInternalReferralStatusChangeReason();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getReferralStatusIsNotNull()
	{
		return this.referralstatus != null;
	}
	public ims.core.vo.lookups.InternalReferralStatus getReferralStatus()
	{
		return this.referralstatus;
	}
	public void setReferralStatus(ims.core.vo.lookups.InternalReferralStatus value)
	{
		this.isValidated = false;
		this.referralstatus = value;
	}
	public boolean getRecordingInfoIsNotNull()
	{
		return this.recordinginfo != null;
	}
	public ims.core.vo.RecordingUserInformationVo getRecordingInfo()
	{
		return this.recordinginfo;
	}
	public void setRecordingInfo(ims.core.vo.RecordingUserInformationVo value)
	{
		this.isValidated = false;
		this.recordinginfo = value;
	}
	public boolean getRejectionReasonIsNotNull()
	{
		return this.rejectionreason != null;
	}
	public ims.RefMan.vo.lookups.RejectionReason getRejectionReason()
	{
		return this.rejectionreason;
	}
	public void setRejectionReason(ims.RefMan.vo.lookups.RejectionReason value)
	{
		this.isValidated = false;
		this.rejectionreason = value;
	}
	public boolean getRejectionReasonTextIsNotNull()
	{
		return this.rejectionreasontext != null;
	}
	public String getRejectionReasonText()
	{
		return this.rejectionreasontext;
	}
	public static int getRejectionReasonTextMaxLength()
	{
		return 1000;
	}
	public void setRejectionReasonText(String value)
	{
		this.isValidated = false;
		this.rejectionreasontext = value;
	}
	public boolean getInternalReferralStatusChangeReasonIsNotNull()
	{
		return this.internalreferralstatuschangereason != null;
	}
	public ims.clinical.vo.lookups.InternalReferralStatusChangeReason getInternalReferralStatusChangeReason()
	{
		return this.internalreferralstatuschangereason;
	}
	public void setInternalReferralStatusChangeReason(ims.clinical.vo.lookups.InternalReferralStatusChangeReason value)
	{
		this.isValidated = false;
		this.internalreferralstatuschangereason = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.recordinginfo != null)
		{
			if(!this.recordinginfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.referralstatus == null)
			listOfErrors.add("ReferralStatus is mandatory");
		if(this.recordinginfo == null)
			listOfErrors.add("RecordingInfo is mandatory");
		if(this.recordinginfo != null)
		{
			String[] listOfOtherErrors = this.recordinginfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.rejectionreasontext != null)
			if(this.rejectionreasontext.length() > 1000)
				listOfErrors.add("The length of the field [rejectionreasontext] in the value object [ims.clinical.vo.ClinicalReferralStatusForEventDialogVo] is too big. It should be less or equal to 1000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ClinicalReferralStatusForEventDialogVo clone = new ClinicalReferralStatusForEventDialogVo(this.id, this.version);
		
		if(this.referralstatus == null)
			clone.referralstatus = null;
		else
			clone.referralstatus = (ims.core.vo.lookups.InternalReferralStatus)this.referralstatus.clone();
		if(this.recordinginfo == null)
			clone.recordinginfo = null;
		else
			clone.recordinginfo = (ims.core.vo.RecordingUserInformationVo)this.recordinginfo.clone();
		if(this.rejectionreason == null)
			clone.rejectionreason = null;
		else
			clone.rejectionreason = (ims.RefMan.vo.lookups.RejectionReason)this.rejectionreason.clone();
		clone.rejectionreasontext = this.rejectionreasontext;
		if(this.internalreferralstatuschangereason == null)
			clone.internalreferralstatuschangereason = null;
		else
			clone.internalreferralstatuschangereason = (ims.clinical.vo.lookups.InternalReferralStatusChangeReason)this.internalreferralstatuschangereason.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ClinicalReferralStatusForEventDialogVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ClinicalReferralStatusForEventDialogVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ClinicalReferralStatusForEventDialogVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ClinicalReferralStatusForEventDialogVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.referralstatus != null)
			count++;
		if(this.recordinginfo != null)
			count++;
		if(this.rejectionreason != null)
			count++;
		if(this.rejectionreasontext != null)
			count++;
		if(this.internalreferralstatuschangereason != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.core.vo.lookups.InternalReferralStatus referralstatus;
	protected ims.core.vo.RecordingUserInformationVo recordinginfo;
	protected ims.RefMan.vo.lookups.RejectionReason rejectionreason;
	protected String rejectionreasontext;
	protected ims.clinical.vo.lookups.InternalReferralStatusChangeReason internalreferralstatuschangereason;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
