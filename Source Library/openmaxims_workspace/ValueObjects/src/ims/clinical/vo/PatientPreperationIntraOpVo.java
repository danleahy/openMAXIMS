//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.PatientPreperationIntraOp business object (ID: 1072100136).
 */
public class PatientPreperationIntraOpVo extends ims.clinical.vo.PatientPreperationIntraOpRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientPreperationIntraOpVo()
	{
	}
	public PatientPreperationIntraOpVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientPreperationIntraOpVo(ims.clinical.vo.beans.PatientPreperationIntraOpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointment().getId()), bean.getTheatreAppointment().getVersion());
		this.patientpreparation = ims.clinical.vo.lookups.PatientPreparationIntraOpCollection.buildFromBeanCollection(bean.getPatientPreparation());
		this.otherdetails = bean.getOtherDetails();
		this.skinintegritymaintained = bean.getSkinIntegrityMaintained() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSkinIntegrityMaintained());
		this.patienttransfertooperatingtablevia = bean.getPatientTransferToOperatingTableVia() == null ? null : ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.buildLookup(bean.getPatientTransferToOperatingTableVia());
		this.patienttransferfromoperatingtablevia1 = bean.getPatientTransferFromOperatingTableVia1() == null ? null : ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.buildLookup(bean.getPatientTransferFromOperatingTableVia1());
		this.bodyposition = bean.getBodyPosition() == null ? null : ims.clinical.vo.lookups.BodyPositionIntraOp.buildLookup(bean.getBodyPosition());
		this.leftarmposition = bean.getLeftArmPosition() == null ? null : ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.buildLookup(bean.getLeftArmPosition());
		this.rightarmposition = bean.getRightArmPosition() == null ? null : ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.buildLookup(bean.getRightArmPosition());
		this.leftlegposition = bean.getLeftLegPosition() == null ? null : ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.buildLookup(bean.getLeftLegPosition());
		this.rightlegposition = bean.getRightLegPosition() == null ? null : ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.buildLookup(bean.getRightLegPosition());
		this.waspatientwarmed = bean.getWasPatientWarmed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getWasPatientWarmed());
		this.fluidwarmerused = bean.getFluidWarmerUsed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getFluidWarmerUsed());
		this.warmingblanketused = bean.getWarmingBlanketUsed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getWarmingBlanketUsed());
		this.positioningdevices = ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection.buildFromBeanCollection(bean.getPositioningDevices());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.PatientPreperationIntraOpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointment().getId()), bean.getTheatreAppointment().getVersion());
		this.patientpreparation = ims.clinical.vo.lookups.PatientPreparationIntraOpCollection.buildFromBeanCollection(bean.getPatientPreparation());
		this.otherdetails = bean.getOtherDetails();
		this.skinintegritymaintained = bean.getSkinIntegrityMaintained() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSkinIntegrityMaintained());
		this.patienttransfertooperatingtablevia = bean.getPatientTransferToOperatingTableVia() == null ? null : ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.buildLookup(bean.getPatientTransferToOperatingTableVia());
		this.patienttransferfromoperatingtablevia1 = bean.getPatientTransferFromOperatingTableVia1() == null ? null : ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp.buildLookup(bean.getPatientTransferFromOperatingTableVia1());
		this.bodyposition = bean.getBodyPosition() == null ? null : ims.clinical.vo.lookups.BodyPositionIntraOp.buildLookup(bean.getBodyPosition());
		this.leftarmposition = bean.getLeftArmPosition() == null ? null : ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.buildLookup(bean.getLeftArmPosition());
		this.rightarmposition = bean.getRightArmPosition() == null ? null : ims.clinical.vo.lookups.LeftRightArmPositionIntraOp.buildLookup(bean.getRightArmPosition());
		this.leftlegposition = bean.getLeftLegPosition() == null ? null : ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.buildLookup(bean.getLeftLegPosition());
		this.rightlegposition = bean.getRightLegPosition() == null ? null : ims.clinical.vo.lookups.LeftRightLegPositionIntraOp.buildLookup(bean.getRightLegPosition());
		this.waspatientwarmed = bean.getWasPatientWarmed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getWasPatientWarmed());
		this.fluidwarmerused = bean.getFluidWarmerUsed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getFluidWarmerUsed());
		this.warmingblanketused = bean.getWarmingBlanketUsed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getWarmingBlanketUsed());
		this.positioningdevices = ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection.buildFromBeanCollection(bean.getPositioningDevices());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.PatientPreperationIntraOpVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.PatientPreperationIntraOpVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.PatientPreperationIntraOpVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("THEATREAPPOINTMENT"))
			return getTheatreAppointment();
		if(fieldName.equals("PATIENTPREPARATION"))
			return getPatientPreparation();
		if(fieldName.equals("OTHERDETAILS"))
			return getOtherDetails();
		if(fieldName.equals("SKININTEGRITYMAINTAINED"))
			return getSkinIntegrityMaintained();
		if(fieldName.equals("PATIENTTRANSFERTOOPERATINGTABLEVIA"))
			return getPatientTransferToOperatingTableVia();
		if(fieldName.equals("PATIENTTRANSFERFROMOPERATINGTABLEVIA1"))
			return getPatientTransferFromOperatingTableVia1();
		if(fieldName.equals("BODYPOSITION"))
			return getBodyPosition();
		if(fieldName.equals("LEFTARMPOSITION"))
			return getLeftArmPosition();
		if(fieldName.equals("RIGHTARMPOSITION"))
			return getRightArmPosition();
		if(fieldName.equals("LEFTLEGPOSITION"))
			return getLeftLegPosition();
		if(fieldName.equals("RIGHTLEGPOSITION"))
			return getRightLegPosition();
		if(fieldName.equals("WASPATIENTWARMED"))
			return getWasPatientWarmed();
		if(fieldName.equals("FLUIDWARMERUSED"))
			return getFluidWarmerUsed();
		if(fieldName.equals("WARMINGBLANKETUSED"))
			return getWarmingBlanketUsed();
		if(fieldName.equals("POSITIONINGDEVICES"))
			return getPositioningDevices();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTheatreAppointmentIsNotNull()
	{
		return this.theatreappointment != null;
	}
	public ims.scheduling.vo.Booking_AppointmentRefVo getTheatreAppointment()
	{
		return this.theatreappointment;
	}
	public void setTheatreAppointment(ims.scheduling.vo.Booking_AppointmentRefVo value)
	{
		this.isValidated = false;
		this.theatreappointment = value;
	}
	public boolean getPatientPreparationIsNotNull()
	{
		return this.patientpreparation != null;
	}
	public ims.clinical.vo.lookups.PatientPreparationIntraOpCollection getPatientPreparation()
	{
		return this.patientpreparation;
	}
	public void setPatientPreparation(ims.clinical.vo.lookups.PatientPreparationIntraOpCollection value)
	{
		this.isValidated = false;
		this.patientpreparation = value;
	}
	public boolean getOtherDetailsIsNotNull()
	{
		return this.otherdetails != null;
	}
	public String getOtherDetails()
	{
		return this.otherdetails;
	}
	public static int getOtherDetailsMaxLength()
	{
		return 1000;
	}
	public void setOtherDetails(String value)
	{
		this.isValidated = false;
		this.otherdetails = value;
	}
	public boolean getSkinIntegrityMaintainedIsNotNull()
	{
		return this.skinintegritymaintained != null;
	}
	public ims.core.vo.lookups.YesNo getSkinIntegrityMaintained()
	{
		return this.skinintegritymaintained;
	}
	public void setSkinIntegrityMaintained(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.skinintegritymaintained = value;
	}
	public boolean getPatientTransferToOperatingTableViaIsNotNull()
	{
		return this.patienttransfertooperatingtablevia != null;
	}
	public ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp getPatientTransferToOperatingTableVia()
	{
		return this.patienttransfertooperatingtablevia;
	}
	public void setPatientTransferToOperatingTableVia(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value)
	{
		this.isValidated = false;
		this.patienttransfertooperatingtablevia = value;
	}
	public boolean getPatientTransferFromOperatingTableVia1IsNotNull()
	{
		return this.patienttransferfromoperatingtablevia1 != null;
	}
	public ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp getPatientTransferFromOperatingTableVia1()
	{
		return this.patienttransferfromoperatingtablevia1;
	}
	public void setPatientTransferFromOperatingTableVia1(ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp value)
	{
		this.isValidated = false;
		this.patienttransferfromoperatingtablevia1 = value;
	}
	public boolean getBodyPositionIsNotNull()
	{
		return this.bodyposition != null;
	}
	public ims.clinical.vo.lookups.BodyPositionIntraOp getBodyPosition()
	{
		return this.bodyposition;
	}
	public void setBodyPosition(ims.clinical.vo.lookups.BodyPositionIntraOp value)
	{
		this.isValidated = false;
		this.bodyposition = value;
	}
	public boolean getLeftArmPositionIsNotNull()
	{
		return this.leftarmposition != null;
	}
	public ims.clinical.vo.lookups.LeftRightArmPositionIntraOp getLeftArmPosition()
	{
		return this.leftarmposition;
	}
	public void setLeftArmPosition(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value)
	{
		this.isValidated = false;
		this.leftarmposition = value;
	}
	public boolean getRightArmPositionIsNotNull()
	{
		return this.rightarmposition != null;
	}
	public ims.clinical.vo.lookups.LeftRightArmPositionIntraOp getRightArmPosition()
	{
		return this.rightarmposition;
	}
	public void setRightArmPosition(ims.clinical.vo.lookups.LeftRightArmPositionIntraOp value)
	{
		this.isValidated = false;
		this.rightarmposition = value;
	}
	public boolean getLeftLegPositionIsNotNull()
	{
		return this.leftlegposition != null;
	}
	public ims.clinical.vo.lookups.LeftRightLegPositionIntraOp getLeftLegPosition()
	{
		return this.leftlegposition;
	}
	public void setLeftLegPosition(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value)
	{
		this.isValidated = false;
		this.leftlegposition = value;
	}
	public boolean getRightLegPositionIsNotNull()
	{
		return this.rightlegposition != null;
	}
	public ims.clinical.vo.lookups.LeftRightLegPositionIntraOp getRightLegPosition()
	{
		return this.rightlegposition;
	}
	public void setRightLegPosition(ims.clinical.vo.lookups.LeftRightLegPositionIntraOp value)
	{
		this.isValidated = false;
		this.rightlegposition = value;
	}
	public boolean getWasPatientWarmedIsNotNull()
	{
		return this.waspatientwarmed != null;
	}
	public ims.core.vo.lookups.YesNo getWasPatientWarmed()
	{
		return this.waspatientwarmed;
	}
	public void setWasPatientWarmed(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.waspatientwarmed = value;
	}
	public boolean getFluidWarmerUsedIsNotNull()
	{
		return this.fluidwarmerused != null;
	}
	public ims.core.vo.lookups.YesNo getFluidWarmerUsed()
	{
		return this.fluidwarmerused;
	}
	public void setFluidWarmerUsed(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.fluidwarmerused = value;
	}
	public boolean getWarmingBlanketUsedIsNotNull()
	{
		return this.warmingblanketused != null;
	}
	public ims.core.vo.lookups.YesNo getWarmingBlanketUsed()
	{
		return this.warmingblanketused;
	}
	public void setWarmingBlanketUsed(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.warmingblanketused = value;
	}
	public boolean getPositioningDevicesIsNotNull()
	{
		return this.positioningdevices != null;
	}
	public ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection getPositioningDevices()
	{
		return this.positioningdevices;
	}
	public void setPositioningDevices(ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection value)
	{
		this.isValidated = false;
		this.positioningdevices = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.theatreappointment == null)
			listOfErrors.add("TheatreAppointment is mandatory");
		if(this.otherdetails != null)
			if(this.otherdetails.length() > 1000)
				listOfErrors.add("The length of the field [otherdetails] in the value object [ims.clinical.vo.PatientPreperationIntraOpVo] is too big. It should be less or equal to 1000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientPreperationIntraOpVo clone = new PatientPreperationIntraOpVo(this.id, this.version);
		
		clone.theatreappointment = this.theatreappointment;
		if(this.patientpreparation == null)
			clone.patientpreparation = null;
		else
			clone.patientpreparation = (ims.clinical.vo.lookups.PatientPreparationIntraOpCollection)this.patientpreparation.clone();
		clone.otherdetails = this.otherdetails;
		if(this.skinintegritymaintained == null)
			clone.skinintegritymaintained = null;
		else
			clone.skinintegritymaintained = (ims.core.vo.lookups.YesNo)this.skinintegritymaintained.clone();
		if(this.patienttransfertooperatingtablevia == null)
			clone.patienttransfertooperatingtablevia = null;
		else
			clone.patienttransfertooperatingtablevia = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)this.patienttransfertooperatingtablevia.clone();
		if(this.patienttransferfromoperatingtablevia1 == null)
			clone.patienttransferfromoperatingtablevia1 = null;
		else
			clone.patienttransferfromoperatingtablevia1 = (ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp)this.patienttransferfromoperatingtablevia1.clone();
		if(this.bodyposition == null)
			clone.bodyposition = null;
		else
			clone.bodyposition = (ims.clinical.vo.lookups.BodyPositionIntraOp)this.bodyposition.clone();
		if(this.leftarmposition == null)
			clone.leftarmposition = null;
		else
			clone.leftarmposition = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)this.leftarmposition.clone();
		if(this.rightarmposition == null)
			clone.rightarmposition = null;
		else
			clone.rightarmposition = (ims.clinical.vo.lookups.LeftRightArmPositionIntraOp)this.rightarmposition.clone();
		if(this.leftlegposition == null)
			clone.leftlegposition = null;
		else
			clone.leftlegposition = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)this.leftlegposition.clone();
		if(this.rightlegposition == null)
			clone.rightlegposition = null;
		else
			clone.rightlegposition = (ims.clinical.vo.lookups.LeftRightLegPositionIntraOp)this.rightlegposition.clone();
		if(this.waspatientwarmed == null)
			clone.waspatientwarmed = null;
		else
			clone.waspatientwarmed = (ims.core.vo.lookups.YesNo)this.waspatientwarmed.clone();
		if(this.fluidwarmerused == null)
			clone.fluidwarmerused = null;
		else
			clone.fluidwarmerused = (ims.core.vo.lookups.YesNo)this.fluidwarmerused.clone();
		if(this.warmingblanketused == null)
			clone.warmingblanketused = null;
		else
			clone.warmingblanketused = (ims.core.vo.lookups.YesNo)this.warmingblanketused.clone();
		if(this.positioningdevices == null)
			clone.positioningdevices = null;
		else
			clone.positioningdevices = (ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection)this.positioningdevices.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientPreperationIntraOpVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientPreperationIntraOpVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientPreperationIntraOpVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientPreperationIntraOpVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.theatreappointment != null)
			count++;
		if(this.patientpreparation != null)
			count++;
		if(this.otherdetails != null)
			count++;
		if(this.skinintegritymaintained != null)
			count++;
		if(this.patienttransfertooperatingtablevia != null)
			count++;
		if(this.patienttransferfromoperatingtablevia1 != null)
			count++;
		if(this.bodyposition != null)
			count++;
		if(this.leftarmposition != null)
			count++;
		if(this.rightarmposition != null)
			count++;
		if(this.leftlegposition != null)
			count++;
		if(this.rightlegposition != null)
			count++;
		if(this.waspatientwarmed != null)
			count++;
		if(this.fluidwarmerused != null)
			count++;
		if(this.warmingblanketused != null)
			count++;
		if(this.positioningdevices != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 15;
	}
	protected ims.scheduling.vo.Booking_AppointmentRefVo theatreappointment;
	protected ims.clinical.vo.lookups.PatientPreparationIntraOpCollection patientpreparation;
	protected String otherdetails;
	protected ims.core.vo.lookups.YesNo skinintegritymaintained;
	protected ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp patienttransfertooperatingtablevia;
	protected ims.clinical.vo.lookups.TransferToFromOperatingTableIntraOp patienttransferfromoperatingtablevia1;
	protected ims.clinical.vo.lookups.BodyPositionIntraOp bodyposition;
	protected ims.clinical.vo.lookups.LeftRightArmPositionIntraOp leftarmposition;
	protected ims.clinical.vo.lookups.LeftRightArmPositionIntraOp rightarmposition;
	protected ims.clinical.vo.lookups.LeftRightLegPositionIntraOp leftlegposition;
	protected ims.clinical.vo.lookups.LeftRightLegPositionIntraOp rightlegposition;
	protected ims.core.vo.lookups.YesNo waspatientwarmed;
	protected ims.core.vo.lookups.YesNo fluidwarmerused;
	protected ims.core.vo.lookups.YesNo warmingblanketused;
	protected ims.clinical.vo.lookups.PositioningDevicesIntraOpCollection positioningdevices;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
