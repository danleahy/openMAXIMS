//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to core.clinical.Dementia business object (ID: 1003100117).
 */
public class DementiaForRecordBrowserVo extends ims.core.clinical.vo.DementiaRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public DementiaForRecordBrowserVo()
	{
	}
	public DementiaForRecordBrowserVo(Integer id, int version)
	{
		super(id, version);
	}
	public DementiaForRecordBrowserVo(ims.clinical.vo.beans.DementiaForRecordBrowserVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.amtsscore = bean.getAMTSScore();
		this.steponefind = bean.getStepOneFind() == null ? null : new ims.core.clinical.vo.DementiaFindRefVo(new Integer(bean.getStepOneFind().getId()), bean.getStepOneFind().getVersion());
		this.steptwoassess = bean.getStepTwoAssess() == null ? null : bean.getStepTwoAssess().buildVo();
		this.isexcludedfromworklist = bean.getIsExcludedFromWorklist();
		this.dementiaconfirmed = bean.getDementiaConfirmed();
		this.deliriumconfirmed = bean.getDeliriumConfirmed();
		this.followupassessments = ims.clinical.vo.DementiaAssessAndInvestigateVoCollection.buildFromBeanCollection(bean.getFollowUpAssessments());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.DementiaForRecordBrowserVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.amtsscore = bean.getAMTSScore();
		this.steponefind = bean.getStepOneFind() == null ? null : new ims.core.clinical.vo.DementiaFindRefVo(new Integer(bean.getStepOneFind().getId()), bean.getStepOneFind().getVersion());
		this.steptwoassess = bean.getStepTwoAssess() == null ? null : bean.getStepTwoAssess().buildVo(map);
		this.isexcludedfromworklist = bean.getIsExcludedFromWorklist();
		this.dementiaconfirmed = bean.getDementiaConfirmed();
		this.deliriumconfirmed = bean.getDeliriumConfirmed();
		this.followupassessments = ims.clinical.vo.DementiaAssessAndInvestigateVoCollection.buildFromBeanCollection(bean.getFollowUpAssessments());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.DementiaForRecordBrowserVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.DementiaForRecordBrowserVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.DementiaForRecordBrowserVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("AMTSSCORE"))
			return getAMTSScore();
		if(fieldName.equals("STEPONEFIND"))
			return getStepOneFind();
		if(fieldName.equals("STEPTWOASSESS"))
			return getStepTwoAssess();
		if(fieldName.equals("ISEXCLUDEDFROMWORKLIST"))
			return getIsExcludedFromWorklist();
		if(fieldName.equals("DEMENTIACONFIRMED"))
			return getDementiaConfirmed();
		if(fieldName.equals("DELIRIUMCONFIRMED"))
			return getDeliriumConfirmed();
		if(fieldName.equals("FOLLOWUPASSESSMENTS"))
			return getFollowUpAssessments();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getAMTSScoreIsNotNull()
	{
		return this.amtsscore != null;
	}
	public Integer getAMTSScore()
	{
		return this.amtsscore;
	}
	public void setAMTSScore(Integer value)
	{
		this.isValidated = false;
		this.amtsscore = value;
	}
	public boolean getStepOneFindIsNotNull()
	{
		return this.steponefind != null;
	}
	public ims.core.clinical.vo.DementiaFindRefVo getStepOneFind()
	{
		return this.steponefind;
	}
	public void setStepOneFind(ims.core.clinical.vo.DementiaFindRefVo value)
	{
		this.isValidated = false;
		this.steponefind = value;
	}
	public boolean getStepTwoAssessIsNotNull()
	{
		return this.steptwoassess != null;
	}
	public ims.clinical.vo.DementiaAssessAndInvestigateVo getStepTwoAssess()
	{
		return this.steptwoassess;
	}
	public void setStepTwoAssess(ims.clinical.vo.DementiaAssessAndInvestigateVo value)
	{
		this.isValidated = false;
		this.steptwoassess = value;
	}
	public boolean getIsExcludedFromWorklistIsNotNull()
	{
		return this.isexcludedfromworklist != null;
	}
	public Boolean getIsExcludedFromWorklist()
	{
		return this.isexcludedfromworklist;
	}
	public void setIsExcludedFromWorklist(Boolean value)
	{
		this.isValidated = false;
		this.isexcludedfromworklist = value;
	}
	public boolean getDementiaConfirmedIsNotNull()
	{
		return this.dementiaconfirmed != null;
	}
	public Boolean getDementiaConfirmed()
	{
		return this.dementiaconfirmed;
	}
	public void setDementiaConfirmed(Boolean value)
	{
		this.isValidated = false;
		this.dementiaconfirmed = value;
	}
	public boolean getDeliriumConfirmedIsNotNull()
	{
		return this.deliriumconfirmed != null;
	}
	public Boolean getDeliriumConfirmed()
	{
		return this.deliriumconfirmed;
	}
	public void setDeliriumConfirmed(Boolean value)
	{
		this.isValidated = false;
		this.deliriumconfirmed = value;
	}
	public boolean getFollowUpAssessmentsIsNotNull()
	{
		return this.followupassessments != null;
	}
	public ims.clinical.vo.DementiaAssessAndInvestigateVoCollection getFollowUpAssessments()
	{
		return this.followupassessments;
	}
	public void setFollowUpAssessments(ims.clinical.vo.DementiaAssessAndInvestigateVoCollection value)
	{
		this.isValidated = false;
		this.followupassessments = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("patient is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		DementiaForRecordBrowserVo clone = new DementiaForRecordBrowserVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.amtsscore = this.amtsscore;
		clone.steponefind = this.steponefind;
		if(this.steptwoassess == null)
			clone.steptwoassess = null;
		else
			clone.steptwoassess = (ims.clinical.vo.DementiaAssessAndInvestigateVo)this.steptwoassess.clone();
		clone.isexcludedfromworklist = this.isexcludedfromworklist;
		clone.dementiaconfirmed = this.dementiaconfirmed;
		clone.deliriumconfirmed = this.deliriumconfirmed;
		if(this.followupassessments == null)
			clone.followupassessments = null;
		else
			clone.followupassessments = (ims.clinical.vo.DementiaAssessAndInvestigateVoCollection)this.followupassessments.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(DementiaForRecordBrowserVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A DementiaForRecordBrowserVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((DementiaForRecordBrowserVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((DementiaForRecordBrowserVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.amtsscore != null)
			count++;
		if(this.steponefind != null)
			count++;
		if(this.steptwoassess != null)
			count++;
		if(this.isexcludedfromworklist != null)
			count++;
		if(this.dementiaconfirmed != null)
			count++;
		if(this.deliriumconfirmed != null)
			count++;
		if(this.followupassessments != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected Integer amtsscore;
	protected ims.core.clinical.vo.DementiaFindRefVo steponefind;
	protected ims.clinical.vo.DementiaAssessAndInvestigateVo steptwoassess;
	protected Boolean isexcludedfromworklist;
	protected Boolean dementiaconfirmed;
	protected Boolean deliriumconfirmed;
	protected ims.clinical.vo.DementiaAssessAndInvestigateVoCollection followupassessments;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
