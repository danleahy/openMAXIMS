//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.WoundPackingIntraOp business object (ID: 1072100144).
 */
public class WoundPackingIntraOpVo extends ims.clinical.vo.WoundPackingIntraOpRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public WoundPackingIntraOpVo()
	{
	}
	public WoundPackingIntraOpVo(Integer id, int version)
	{
		super(id, version);
	}
	public WoundPackingIntraOpVo(ims.clinical.vo.beans.WoundPackingIntraOpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointment().getId()), bean.getTheatreAppointment().getVersion());
		this.patientprocedure = bean.getPatientProcedure() == null ? null : bean.getPatientProcedure().buildVo();
		this.packingsite = bean.getPackingSite();
		this.packingsitecomments = bean.getPackingSiteComments();
		this.packingtype = bean.getPackingType() == null ? null : ims.core.vo.lookups.WoundPackingType.buildLookup(bean.getPackingType());
		this.packingtypecomments = bean.getPackingTypeComments();
		this.inplaceondeparture = bean.getInPlaceOnDeparture() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getInPlaceOnDeparture());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.WoundPackingIntraOpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointment().getId()), bean.getTheatreAppointment().getVersion());
		this.patientprocedure = bean.getPatientProcedure() == null ? null : bean.getPatientProcedure().buildVo(map);
		this.packingsite = bean.getPackingSite();
		this.packingsitecomments = bean.getPackingSiteComments();
		this.packingtype = bean.getPackingType() == null ? null : ims.core.vo.lookups.WoundPackingType.buildLookup(bean.getPackingType());
		this.packingtypecomments = bean.getPackingTypeComments();
		this.inplaceondeparture = bean.getInPlaceOnDeparture() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getInPlaceOnDeparture());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.WoundPackingIntraOpVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.WoundPackingIntraOpVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.WoundPackingIntraOpVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("THEATREAPPOINTMENT"))
			return getTheatreAppointment();
		if(fieldName.equals("PATIENTPROCEDURE"))
			return getPatientProcedure();
		if(fieldName.equals("PACKINGSITE"))
			return getPackingSite();
		if(fieldName.equals("PACKINGSITECOMMENTS"))
			return getPackingSiteComments();
		if(fieldName.equals("PACKINGTYPE"))
			return getPackingType();
		if(fieldName.equals("PACKINGTYPECOMMENTS"))
			return getPackingTypeComments();
		if(fieldName.equals("INPLACEONDEPARTURE"))
			return getInPlaceOnDeparture();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTheatreAppointmentIsNotNull()
	{
		return this.theatreappointment != null;
	}
	public ims.scheduling.vo.Booking_AppointmentRefVo getTheatreAppointment()
	{
		return this.theatreappointment;
	}
	public void setTheatreAppointment(ims.scheduling.vo.Booking_AppointmentRefVo value)
	{
		this.isValidated = false;
		this.theatreappointment = value;
	}
	public boolean getPatientProcedureIsNotNull()
	{
		return this.patientprocedure != null;
	}
	public ims.core.vo.PatientProcedureMinVo getPatientProcedure()
	{
		return this.patientprocedure;
	}
	public void setPatientProcedure(ims.core.vo.PatientProcedureMinVo value)
	{
		this.isValidated = false;
		this.patientprocedure = value;
	}
	public boolean getPackingSiteIsNotNull()
	{
		return this.packingsite != null;
	}
	public String getPackingSite()
	{
		return this.packingsite;
	}
	public static int getPackingSiteMaxLength()
	{
		return 100;
	}
	public void setPackingSite(String value)
	{
		this.isValidated = false;
		this.packingsite = value;
	}
	public boolean getPackingSiteCommentsIsNotNull()
	{
		return this.packingsitecomments != null;
	}
	public String getPackingSiteComments()
	{
		return this.packingsitecomments;
	}
	public static int getPackingSiteCommentsMaxLength()
	{
		return 250;
	}
	public void setPackingSiteComments(String value)
	{
		this.isValidated = false;
		this.packingsitecomments = value;
	}
	public boolean getPackingTypeIsNotNull()
	{
		return this.packingtype != null;
	}
	public ims.core.vo.lookups.WoundPackingType getPackingType()
	{
		return this.packingtype;
	}
	public void setPackingType(ims.core.vo.lookups.WoundPackingType value)
	{
		this.isValidated = false;
		this.packingtype = value;
	}
	public boolean getPackingTypeCommentsIsNotNull()
	{
		return this.packingtypecomments != null;
	}
	public String getPackingTypeComments()
	{
		return this.packingtypecomments;
	}
	public static int getPackingTypeCommentsMaxLength()
	{
		return 250;
	}
	public void setPackingTypeComments(String value)
	{
		this.isValidated = false;
		this.packingtypecomments = value;
	}
	public boolean getInPlaceOnDepartureIsNotNull()
	{
		return this.inplaceondeparture != null;
	}
	public ims.core.vo.lookups.YesNo getInPlaceOnDeparture()
	{
		return this.inplaceondeparture;
	}
	public void setInPlaceOnDeparture(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.inplaceondeparture = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.theatreappointment == null)
			listOfErrors.add("TheatreAppointment is mandatory");
		if(this.patientprocedure == null)
			listOfErrors.add("Procedure is mandatory");
		if(this.packingsite == null || this.packingsite.length() == 0)
			listOfErrors.add("Packing Site is mandatory");
		else if(this.packingsite.length() > 100)
			listOfErrors.add("The length of the field [packingsite] in the value object [ims.clinical.vo.WoundPackingIntraOpVo] is too big. It should be less or equal to 100");
		if(this.packingsitecomments != null)
			if(this.packingsitecomments.length() > 250)
				listOfErrors.add("The length of the field [packingsitecomments] in the value object [ims.clinical.vo.WoundPackingIntraOpVo] is too big. It should be less or equal to 250");
		if(this.packingtype == null)
			listOfErrors.add("Packing Type is mandatory");
		if(this.packingtypecomments != null)
			if(this.packingtypecomments.length() > 250)
				listOfErrors.add("The length of the field [packingtypecomments] in the value object [ims.clinical.vo.WoundPackingIntraOpVo] is too big. It should be less or equal to 250");
		if(this.inplaceondeparture == null)
			listOfErrors.add("In-Place On Departure is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		WoundPackingIntraOpVo clone = new WoundPackingIntraOpVo(this.id, this.version);
		
		clone.theatreappointment = this.theatreappointment;
		if(this.patientprocedure == null)
			clone.patientprocedure = null;
		else
			clone.patientprocedure = (ims.core.vo.PatientProcedureMinVo)this.patientprocedure.clone();
		clone.packingsite = this.packingsite;
		clone.packingsitecomments = this.packingsitecomments;
		if(this.packingtype == null)
			clone.packingtype = null;
		else
			clone.packingtype = (ims.core.vo.lookups.WoundPackingType)this.packingtype.clone();
		clone.packingtypecomments = this.packingtypecomments;
		if(this.inplaceondeparture == null)
			clone.inplaceondeparture = null;
		else
			clone.inplaceondeparture = (ims.core.vo.lookups.YesNo)this.inplaceondeparture.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(WoundPackingIntraOpVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A WoundPackingIntraOpVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((WoundPackingIntraOpVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((WoundPackingIntraOpVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.theatreappointment != null)
			count++;
		if(this.patientprocedure != null)
			count++;
		if(this.packingsite != null)
			count++;
		if(this.packingsitecomments != null)
			count++;
		if(this.packingtype != null)
			count++;
		if(this.packingtypecomments != null)
			count++;
		if(this.inplaceondeparture != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.scheduling.vo.Booking_AppointmentRefVo theatreappointment;
	protected ims.core.vo.PatientProcedureMinVo patientprocedure;
	protected String packingsite;
	protected String packingsitecomments;
	protected ims.core.vo.lookups.WoundPackingType packingtype;
	protected String packingtypecomments;
	protected ims.core.vo.lookups.YesNo inplaceondeparture;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
