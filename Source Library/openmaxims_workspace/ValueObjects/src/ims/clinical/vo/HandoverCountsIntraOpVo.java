//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.HandoverCountIntraOp business object (ID: 1072100154).
 */
public class HandoverCountsIntraOpVo extends ims.clinical.vo.HandoverCountIntraOpRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public HandoverCountsIntraOpVo()
	{
	}
	public HandoverCountsIntraOpVo(Integer id, int version)
	{
		super(id, version);
	}
	public HandoverCountsIntraOpVo(ims.clinical.vo.beans.HandoverCountsIntraOpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointment().getId()), bean.getTheatreAppointment().getVersion());
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo();
		this.counttype = bean.getCountType() == null ? null : ims.clinical.vo.lookups.HandoverCountTypeIntraOp.buildLookup(bean.getCountType());
		this.countstatus = bean.getCountStatus() == null ? null : ims.clinical.vo.lookups.HandoverCountStatusIntraOp.buildLookup(bean.getCountStatus());
		this.scrubpractitioner = bean.getScrubPractitioner() == null ? null : bean.getScrubPractitioner().buildVo();
		this.circulator = bean.getCirculator() == null ? null : bean.getCirculator().buildVo();
		this.incorrectcountstatus = bean.getIncorrectCountStatus() == null ? null : ims.clinical.vo.lookups.HandoverIncorrectCountStatus.buildLookup(bean.getIncorrectCountStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.HandoverCountsIntraOpVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.theatreappointment = bean.getTheatreAppointment() == null ? null : new ims.scheduling.vo.Booking_AppointmentRefVo(new Integer(bean.getTheatreAppointment().getId()), bean.getTheatreAppointment().getVersion());
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo(map);
		this.counttype = bean.getCountType() == null ? null : ims.clinical.vo.lookups.HandoverCountTypeIntraOp.buildLookup(bean.getCountType());
		this.countstatus = bean.getCountStatus() == null ? null : ims.clinical.vo.lookups.HandoverCountStatusIntraOp.buildLookup(bean.getCountStatus());
		this.scrubpractitioner = bean.getScrubPractitioner() == null ? null : bean.getScrubPractitioner().buildVo(map);
		this.circulator = bean.getCirculator() == null ? null : bean.getCirculator().buildVo(map);
		this.incorrectcountstatus = bean.getIncorrectCountStatus() == null ? null : ims.clinical.vo.lookups.HandoverIncorrectCountStatus.buildLookup(bean.getIncorrectCountStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.HandoverCountsIntraOpVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.HandoverCountsIntraOpVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.HandoverCountsIntraOpVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("THEATREAPPOINTMENT"))
			return getTheatreAppointment();
		if(fieldName.equals("PROCEDURE"))
			return getProcedure();
		if(fieldName.equals("COUNTTYPE"))
			return getCountType();
		if(fieldName.equals("COUNTSTATUS"))
			return getCountStatus();
		if(fieldName.equals("SCRUBPRACTITIONER"))
			return getScrubPractitioner();
		if(fieldName.equals("CIRCULATOR"))
			return getCirculator();
		if(fieldName.equals("INCORRECTCOUNTSTATUS"))
			return getIncorrectCountStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTheatreAppointmentIsNotNull()
	{
		return this.theatreappointment != null;
	}
	public ims.scheduling.vo.Booking_AppointmentRefVo getTheatreAppointment()
	{
		return this.theatreappointment;
	}
	public void setTheatreAppointment(ims.scheduling.vo.Booking_AppointmentRefVo value)
	{
		this.isValidated = false;
		this.theatreappointment = value;
	}
	public boolean getProcedureIsNotNull()
	{
		return this.procedure != null;
	}
	public ims.core.vo.PatientProcedureMinVo getProcedure()
	{
		return this.procedure;
	}
	public void setProcedure(ims.core.vo.PatientProcedureMinVo value)
	{
		this.isValidated = false;
		this.procedure = value;
	}
	public boolean getCountTypeIsNotNull()
	{
		return this.counttype != null;
	}
	public ims.clinical.vo.lookups.HandoverCountTypeIntraOp getCountType()
	{
		return this.counttype;
	}
	public void setCountType(ims.clinical.vo.lookups.HandoverCountTypeIntraOp value)
	{
		this.isValidated = false;
		this.counttype = value;
	}
	public boolean getCountStatusIsNotNull()
	{
		return this.countstatus != null;
	}
	public ims.clinical.vo.lookups.HandoverCountStatusIntraOp getCountStatus()
	{
		return this.countstatus;
	}
	public void setCountStatus(ims.clinical.vo.lookups.HandoverCountStatusIntraOp value)
	{
		this.isValidated = false;
		this.countstatus = value;
	}
	public boolean getScrubPractitionerIsNotNull()
	{
		return this.scrubpractitioner != null;
	}
	public ims.core.vo.NurseLiteVo getScrubPractitioner()
	{
		return this.scrubpractitioner;
	}
	public void setScrubPractitioner(ims.core.vo.NurseLiteVo value)
	{
		this.isValidated = false;
		this.scrubpractitioner = value;
	}
	public boolean getCirculatorIsNotNull()
	{
		return this.circulator != null;
	}
	public ims.core.vo.NurseLiteVo getCirculator()
	{
		return this.circulator;
	}
	public void setCirculator(ims.core.vo.NurseLiteVo value)
	{
		this.isValidated = false;
		this.circulator = value;
	}
	public boolean getIncorrectCountStatusIsNotNull()
	{
		return this.incorrectcountstatus != null;
	}
	public ims.clinical.vo.lookups.HandoverIncorrectCountStatus getIncorrectCountStatus()
	{
		return this.incorrectcountstatus;
	}
	public void setIncorrectCountStatus(ims.clinical.vo.lookups.HandoverIncorrectCountStatus value)
	{
		this.isValidated = false;
		this.incorrectcountstatus = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.theatreappointment == null)
			listOfErrors.add("TheatreAppointment is mandatory");
		if(this.procedure == null)
			listOfErrors.add("Procedure is mandatory");
		if(this.counttype == null)
			listOfErrors.add("CountType is mandatory");
		if(this.countstatus == null)
			listOfErrors.add("CountStatus is mandatory");
		if(this.scrubpractitioner == null)
			listOfErrors.add("ScrubPractitioner is mandatory");
		if(this.circulator == null)
			listOfErrors.add("Circulator is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		HandoverCountsIntraOpVo clone = new HandoverCountsIntraOpVo(this.id, this.version);
		
		clone.theatreappointment = this.theatreappointment;
		if(this.procedure == null)
			clone.procedure = null;
		else
			clone.procedure = (ims.core.vo.PatientProcedureMinVo)this.procedure.clone();
		if(this.counttype == null)
			clone.counttype = null;
		else
			clone.counttype = (ims.clinical.vo.lookups.HandoverCountTypeIntraOp)this.counttype.clone();
		if(this.countstatus == null)
			clone.countstatus = null;
		else
			clone.countstatus = (ims.clinical.vo.lookups.HandoverCountStatusIntraOp)this.countstatus.clone();
		if(this.scrubpractitioner == null)
			clone.scrubpractitioner = null;
		else
			clone.scrubpractitioner = (ims.core.vo.NurseLiteVo)this.scrubpractitioner.clone();
		if(this.circulator == null)
			clone.circulator = null;
		else
			clone.circulator = (ims.core.vo.NurseLiteVo)this.circulator.clone();
		if(this.incorrectcountstatus == null)
			clone.incorrectcountstatus = null;
		else
			clone.incorrectcountstatus = (ims.clinical.vo.lookups.HandoverIncorrectCountStatus)this.incorrectcountstatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(HandoverCountsIntraOpVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A HandoverCountsIntraOpVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((HandoverCountsIntraOpVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((HandoverCountsIntraOpVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.theatreappointment != null)
			count++;
		if(this.procedure != null)
			count++;
		if(this.counttype != null)
			count++;
		if(this.countstatus != null)
			count++;
		if(this.scrubpractitioner != null)
			count++;
		if(this.circulator != null)
			count++;
		if(this.incorrectcountstatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.scheduling.vo.Booking_AppointmentRefVo theatreappointment;
	protected ims.core.vo.PatientProcedureMinVo procedure;
	protected ims.clinical.vo.lookups.HandoverCountTypeIntraOp counttype;
	protected ims.clinical.vo.lookups.HandoverCountStatusIntraOp countstatus;
	protected ims.core.vo.NurseLiteVo scrubpractitioner;
	protected ims.core.vo.NurseLiteVo circulator;
	protected ims.clinical.vo.lookups.HandoverIncorrectCountStatus incorrectcountstatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
