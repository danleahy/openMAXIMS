//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.admittoward;

import ims.RefMan.vo.BookAppointmentForWardAttendersVo;
import ims.RefMan.vo.BookAppointmentForWardAttendersVoCollection;
import ims.RefMan.vo.CATSReferralStatusRefVoCollection;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.ElectiveListStatusRefVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVo;
import ims.RefMan.vo.PatientElectiveListBedInfoVo;
import ims.RefMan.vo.PatientElectiveListBedInfoVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListRefVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.ccosched.vo.TCIForPatientElectiveListBedInfoDetailsVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.domain.objects.WardBayConfig;
import ims.core.admin.pas.vo.AdmissionDetailRefVoCollection;
import ims.core.admin.pas.vo.PendingEmergencyAdmissionRefVo;
import ims.core.forms.admittoward.GenForm.GroupUpdateCaseFolderEnumeration;
import ims.core.forms.admittoward.GenForm.lyrPatientLayer.tabPagePendingEmergenciesContainer.GroupPEA_WardEnumeration;
import ims.core.forms.admittoward.GenForm.lyrPatientLayer.tabPageTCIContainer.GroupTCI_WardEnumeration;
import ims.core.helper.AdmitToWardHelper;
import ims.core.layout.domain.objects.BayConfig;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.AdmissionDetailVoCollection;
import ims.core.vo.CareContextAdmitVo;
import ims.core.vo.CareContextAdmitVoCollection;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.CareContextStatusHistoryVoCollection;
import ims.core.vo.CareSpellAdmitVo;
import ims.core.vo.CareSpellStatusHistoryVo;
import ims.core.vo.CareSpellStatusHistoryVoCollection;
import ims.core.vo.CatsReferralEmergencyAdmissionVo;
import ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo;
import ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoCollection;
import ims.core.vo.ConsultantStayVo;
import ims.core.vo.EpisodeOfCareAdmitVo;
import ims.core.vo.EpisodeOfCareAdmitVoCollection;
import ims.core.vo.EpisodeOfCareStatusHistoryVo;
import ims.core.vo.EpisodeOfCareStatusHistoryVoCollection;
import ims.core.vo.GpToPracticesVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventAdmitVo;
import ims.core.vo.PatientCaseNoteTransferVo;
import ims.core.vo.PatientCaseNoteTransferVoCollection;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.PatientCaseNoteVoCollection;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientLite_IdentifiersVoCollection;
import ims.core.vo.PatientWithGPForCCGVo;
import ims.core.vo.PendingEmergencyAdmissionAdmitVo;
import ims.core.vo.ReferralDetailsEmergencyAdmissionVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.TrackingForPendingEmergencyAdmitVo;
import ims.core.vo.TrackingForPendingEmergencyAdmitVoCollection;
import ims.core.vo.WardStayVo;
import ims.core.vo.enums.AdmitToWardAdmissionType;
import ims.core.vo.enums.AdmitToWardMode;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpelltoEpisodeRelationship;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.ContactLocation;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.EpisodeOfCareStatus;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.ProblemGroupStatus;
import ims.core.vo.lookups.ReasonForAdmissionOutOfOpeningHours;
import ims.core.vo.lookups.ReasonForAdmissionToGenderSpecificBay;
import ims.core.vo.lookups.SourceOfEmergencyReferral;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IPendingAdmission;
import ims.vo.interfaces.IPendingAdmissionCollection;
import ims.vo.interfaces.IPendingAdmissionDetails;

import java.util.ArrayList;
import java.util.List;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int RULE_28_DAYS_PERIOD = 28;
	private static final String RESIDENCE_NOT_KNOWN_CCG = "Q99";//WDEV-22214
	private static final String OVERSEAS_VISITOR_CCG = "X98";//WDEV-22214
	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args == null || args.length == 0 || !(args[0] instanceof AdmitToWardMode))
			throw new ims.framework.exceptions.PresentationLogicException("Form not initialized correctly.");
		
		form.getLocalContext().setAdmitMode((AdmitToWardMode) args[0]);
		
		initialize(form.getLocalContext().getAdmitMode());
		open(form.getLocalContext().getAdmitMode());
	}	
	
	@Override
	protected void onlyrPatientTabChanged(LayerBridge tab)
	{
		clearSelection();
		if (form.lyrPatient().tabPagePatientSearch().equals(tab))
		{
			// Present Patient Search tab to the user
			presentPatientSearchTab();
		}
		else if (form.lyrPatient().tabPageWardAttenders().equals(tab))
		{
			//WDEV-22589
			if (!tab.isInitialized())
			{
				searchBtnWardAttenders();
				return;
			}
			// Present Ward Attenders tab to the user
			presentWardAttendersTab();
		}
		else if (form.lyrPatient().tabPageTCI().equals(tab))
		{
			// Present TCI tab to the user
			presentTCITab();
		}
		else if (form.lyrPatient().tabPageED().equals(tab))
		{
			// Present ED tab to the user
			presentEDTab();
		}
		else if (form.lyrPatient().tabPagePendingEmergencies().equals(tab))
		{
			// Present Pending Emergencies tab to the user
			presentPendingEmergenciesTab(true);
		}
		
		// The Patient Details tab will only be visible by itself
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	private void clearSelection()
	{
		form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().setValue(null);
		form.lyrPatient().tabPagePatientSearch().dyngrdPatients().setValue(null);//WDEV-22856
		form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().setValue(null);//WDEV-22856
		form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().setValue(null);//WDEV-22856
		form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().setValue(null);//WDEV-22856
		form.getGlobalContext().Core.setPatientShort(null);//WDEV-22856
		form.getLocalContext().setSelectedPatient(null);
	}
	
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		serviceValueChanged();

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());

	}

	private void serviceValueChanged() {
		// Update specialty
		ServiceLiteVo service = form.qmbService().getValue();
		form.cmbSpecialty().setValue(service != null ? service.getSpecialty() : null);

		// Clear consultant
		form.qmbConsultant().clear();
	}

	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		ServiceLiteVoCollection serviceColl = domain.listServices(value);
		
		// Bind service combobox to all Clinical Services
		bindServices(serviceColl);
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		// Populate consultants
		populateConsultants(domain.listConsultants(form.qmbService().getValue(), value));
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}
	
	
	@Override
	protected void onIntAnticipatedStayValueChanged() throws PresentationLogicException
	{
		// Calculate estimated discharge date time
		DateTime estimateDischargeDateTime = calculateDischargeDateTime(form.dtimAdmitDateTime().getValue(), form.intAnticipatedStay().getValue());
		form.dtimEstDischargeDateTime().setValue(estimateDischargeDateTime);
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	@Override
	protected void onCmbSourceOfEmergencyReferralValueChanged() throws PresentationLogicException
	{
		// Clear "Self Admit Patient" for values other than "Other Emergency Admission"
		if (SourceOfEmergencyReferral.OTHER_EMERGENCY_ADMISSION.equals(form.cmbSourceOfEmergencyReferral().getValue()))
		{
			form.chkSelfAdmit().setValue(false);
		}
		else
		{
			form.chkSelfAdmit().setValue(Boolean.TRUE.equals(domain.hasPatientActiveSelfAdmit(form.getLocalContext().getSelectedPatient())));
		}
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());		
	}

	@Override
	protected void onCmbSourceOfReferralValueChanged() throws PresentationLogicException
	{
		// Clear referring consultant
		form.qmbReferringConsultant().clear();
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	@Override
	protected void onQmbReferringConsultantTextSubmited(String value) throws PresentationLogicException
	{
		// Populate consultants
		populateReferringConsultants(domain.listReferringConsultants(value));
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}
	
	//WDEV-22353
	private Boolean isNotMosUser(String message)
	{
		Object mos = domain.getMosUser();
		if (mos == null)
		{
			engine.showMessage(message, "Not Allowed", MessageButtons.OK, MessageIcon.WARNING);
			return true;
		}
		return false;
	}
	
	@Override
	protected void onBtnAdmitClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-22353
		if(!isNotMosUser("Logged-in user is not associated with a Member of Staff. Admission cannot continue."))
		{
			if (form.getLocalContext().getSelectedPatient() == null)
			{
				engine.showMessage("No patient selected.");
				return;
			}

			// Check if the patient is already admitted
			if (isPatientAdmitted(form.getLocalContext().getSelectedPatient()))
			{
				return;
			}

			// Check if the patient is not dead (Dead patients cannot be admitted)
			if (!isPatientAlive(form.getLocalContext().getSelectedPatient()))
			{
				engine.showErrors(new String[] {"Deceased patient cannot be admitted"});
				return;
			}

			// Display message for patient future appointments and TCI
			if (isEmergencyAdmission())
			{
				StringBuilder message = new StringBuilder();

				if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && domain.patientHasTCIWithinNextMonth(form.getLocalContext().getSelectedPatient()))
				{
					message.append("This patient has other Elective List / TCI records within the next month!!\n");
				}

				if (domain.patientHasAppointmentsWithinNextMonth(form.getLocalContext().getSelectedPatient()))
				{
					message.append("Patient has appointments within the next month!");
				}

				if (message.length() > 0)
				{
					engine.showMessage(message.toString(), "Warning", MessageButtons.OK);
				}
			}

			// TODO Check for reason for booking outside of hours or gender breach

			// If the admit process is successful then close the dialog (with OK message)
			if (admit(form.getLocalContext().getAdmitMode(), null, null, null, null, null))
			{
				engine.close(DialogResult.OK);
			}
		}
	}

	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Patient Search event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------


	@Override
	protected void onImbPatientSearchFindClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);		

		// Perform patient search
		patientSearch(true);
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	@Override
	protected void onImbPatientSearchClearClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);
		
		// Clear Patient Search page
		clearPatientSearchPage();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}
	

	@Override
	protected void onDyngrdPatientSearchRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		// Set the Patient selection
		form.getLocalContext().setSelectedPatient((PatientLite_IdentifiersVo) row.getValue());
		// Set the Admission Data
		form.getLocalContext().setSelectedAdmissionData((PatientLite_IdentifiersVo) row.getValue());
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort((PatientLite_IdentifiersVo) row.getValue()));//WDEV-22090
		// Populate instance controls with selected pending admission (can be even a patient)
		populateInstanceControlsFromData((PatientLite_IdentifiersVo) row.getValue());
		
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getLocalContext().getSelectedPatient()));//WDEV-22803
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Ward Attenders event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------
	
	
	@Override
	protected void onImbFindWardAttendersClick() throws PresentationLogicException
	{
		searchBtnWardAttenders();
	}

	//WDEV-22589
	private void searchBtnWardAttenders()
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);		
		
		// Perform ward attenders search
		wardAttendersSearch(true);
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onImbClearWardAttendersClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);
		
		// Clear Ward Attenders page
		clearWardAttendersPage();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onDyngrd_WardAttendersRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (row.getValue() instanceof BookAppointmentForWardAttendersVo)
		{
			BookAppointmentForWardAttendersVo wardAttender = (BookAppointmentForWardAttendersVo) row.getValue();
			// Set the Patient selection
			form.getLocalContext().setSelectedPatient(wardAttender.getPatient());
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(wardAttender.getPatient()));//WDEV-22090
			// Set the Selected Admission Data
			form.getLocalContext().setSelectedAdmissionData(wardAttender);
			// Populate instance controls with selected pending admission
			populateInstanceControlsFromData(wardAttender);
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getLocalContext().getSelectedPatient()));//WDEV-22803
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page TCI event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------
	

	@Override
	protected void onDteTCI_ToValueChanged() throws PresentationLogicException
	{
		// Reset 'Today Only' check box
		form.lyrPatient().tabPageTCI().chkTCI_TodayOnly().setValue(false);

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onDteTCI_FromValueChanged() throws PresentationLogicException
	{
		// Reset 'Today Only' check box
		form.lyrPatient().tabPageTCI().chkTCI_TodayOnly().setValue(false);

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	@Override
	protected void onChkTCI_TodayOnlyValueChanged() throws PresentationLogicException
	{
		if (form.lyrPatient().tabPageTCI().chkTCI_TodayOnly().getValue() == true)
		{
    		// Set TCI dates to current day
    		form.lyrPatient().tabPageTCI().dteTCI_From().setValue(new Date());
    		form.lyrPatient().tabPageTCI().dteTCI_To().setValue(new Date());
    		
    		// Perform search
    		performTCISearch(false);
		}

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onImbFindTCIClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);		
		
		// Perform ward attenders search
		performTCISearch(true);
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onImbClearTCIClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);
		
		// Clear TCI page
		clearTCIPage();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onDyngrd_TCI_AdmissionsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (row.getValue() instanceof PatientElectiveListBedInfoVo)
		{
			// Cast row value to Patient Elective List VO
			PatientElectiveListBedInfoVo patientElective = (PatientElectiveListBedInfoVo) row.getValue();
			
			// Set the Patient selection
			form.getLocalContext().setSelectedPatient(patientElective.getPatient());
			// Get the detailed record
    		PatientElectiveListBedAdmissionVo patientElectiveDetails = domain.getPatientElectiveList(patientElective);
    		
    		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(patientElectiveDetails.getPatient()));//WDEV-22090
    		// Set the Admission Data
    		form.getLocalContext().setSelectedAdmissionData(patientElectiveDetails);
    		// Populate instance controls with selected pending admission
			populateInstanceControlsFromData(patientElectiveDetails);
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getLocalContext().getSelectedPatient()));//WDEV-22803
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	

	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page ED event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	@Override
	protected void onDyngrd_ED_Pending_AdmissionsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (row.getValue() instanceof TrackingForPendingEmergencyAdmitVo)
		{
			// Cast row value to Tracking VO
    		TrackingForPendingEmergencyAdmitVo tracking = (TrackingForPendingEmergencyAdmitVo)row.getValue();
			
    		// Set the Patient selection
			form.getLocalContext().setSelectedPatient(tracking.getPatient());
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(tracking.getPatient()));//WDEV-22090
			
    		// Set the Admission Data
    		form.getLocalContext().setSelectedAdmissionData(tracking.getAssociatedPendingEmergencyAdmission());
    		// Populate instance controls with selected pending admission
    		populateInstanceControlsFromData(tracking);
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getLocalContext().getSelectedPatient()));//WDEV-22803
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Pending Emergency Admission event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	@Override
	protected void onDyngrd_PendingEmergenciesRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (row.getValue() instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo)
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergencyAdmission = (CatsReferralPendingEmergencyNonEDAdmissionListVo) row.getValue();
			// Set the Patient selection
			form.getLocalContext().setSelectedPatient(pendingEmergencyAdmission.getPatient());
			
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(pendingEmergencyAdmission.getPatient()));//WDEV-22090
			
			// Set the Admission Data
			form.getLocalContext().setSelectedAdmissionData(pendingEmergencyAdmission);
			// Populate instance controls with selected pending admission
			populateInstanceControlsFromData(pendingEmergencyAdmission);
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getLocalContext().getSelectedPatient()));//WDEV-22803
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}

	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	/**
	 *	Function to initialize the form
	 */
	private void initialize(AdmitToWardMode admitMode)
	{
		LocationLiteVo currentWard = domain.getLocationLite(form.getGlobalContext().Core.getWardViewPatientListWard());
		
		// Initialize dynamic grids
		AdmitToWardHelper.InitializeDynamicGrids(form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions(), AdmitToWardHelper.DYNAMIC_GRID_MODE_ED);
		AdmitToWardHelper.InitializeDynamicGrids(form.lyrPatient().tabPagePatientSearch().dyngrdPatients(), AdmitToWardHelper.DYNAMIC_GRID_MODE_PATIENT_SEARCH);
		AdmitToWardHelper.InitializeDynamicGrids(form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions(), AdmitToWardHelper.DYNAMIC_GRID_MODE_TCI);
		AdmitToWardHelper.InitializeDynamicGrids(form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders(), AdmitToWardHelper.DYNAMIC_GRID_MODE_WARD_ATTENDERS);
		AdmitToWardHelper.InitializeDynamicGrids(form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies(), AdmitToWardHelper.DYNAMIC_GRID_MODE_PENDING_EMERGENCIES);

		// Default the Patient Details label for identifier to configured display value
		form.lyrPatient().tabPagePatientDetails().lblPatientIdentifierType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText() + ": ");
		
		// Default the Patient Search identifier to configured display value
		form.lyrPatient().tabPagePatientSearch().cmbPatIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		
		// Set ward attenders default values
		form.lyrPatient().tabPageWardAttenders().dteWardAttenders().setValue(new Date());
		form.lyrPatient().tabPageWardAttenders().lblWard_WardAttenders().setValue(currentWard != null ? currentWard.getName() : null);
		
		// Set TCI search default values
		form.lyrPatient().tabPageTCI().dteTCI_From().setValue(new Date());
		form.lyrPatient().tabPageTCI().dteTCI_To().setValue(new Date());
		form.lyrPatient().tabPageTCI().chkTCI_TodayOnly().setValue(true);
		form.lyrPatient().tabPageTCI().GroupTCI_Ward().setValue(GroupTCI_WardEnumeration.rdoTCI_CurrentWard);
		
		// Set PEA defaults
		form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().setValue(new Date());
		form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().setValue(new Date());
		form.lyrPatient().tabPagePendingEmergencies().chkPEATodayOnly().setValue(true);
		form.lyrPatient().tabPagePendingEmergencies().GroupPEA_Ward().setValue(GroupPEA_WardEnumeration.rdoCurrentWard);
		
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		form.btnAdmit().setImage(form.getImages().Core.ClinicalData);
	}


	/**
	 * Function used to bind services to Service combobox
	 * @param services - values to be populated
	 */
	private void bindServices(ServiceLiteVoCollection services)
	{
		form.qmbService().clear();
		//WDEV-22789
		form.cmbSpecialty().clear(); 
		form.qmbConsultant().clear();
		
		if (services == null)
		{
			form.qmbService().showOpened();
			return;
		}		
		for (ServiceLiteVo service : services)
		{
			form.qmbService().newRow(service, service.getServiceName());
		}
		if (services.size() == 1)
		{
			form.qmbService().setValue(services.get(0));
			serviceValueChanged();
		}
		else
		{
			form.qmbService().showOpened();
		}
	}
	
	
	/**
	 * 
	 * @param admitMode
	 */
	private void open(AdmitToWardMode admitMode)
	{
		if (AdmitToWardMode.STANDARD.equals(admitMode))
		{
			// Set Patient Search tab as the visible one
			form.lyrPatient().showtabPagePatientSearch();
			form.getGlobalContext().Core.setPatientShort(null);
			
			// Present Patient Search tab to the user
			presentPatientSearchTab();
		}
		else if (AdmitToWardMode.SELECTION_ADMIT.equals(admitMode))
		{
			// Set Patient Details tab as the visible one
			form.lyrPatient().showtabPagePatientDetails();
			
			// Present Patient Details tab to the user
			presentPatientDetails(form.getGlobalContext().Core.getSelectionAdmitToWard());
		}
		
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	/**
	 * 
	 * @param admitMode
	 * @param outsideHoursAdmitReason
	 * @param outsideHoursAdmitComment
	 * @param genderBreachAdmitReason
	 * @param genderBreachAdmitComment
	 * @param admittedInMixedGenderBay
	 * @return
	 */
	private boolean admit(AdmitToWardMode admitMode, ReasonForAdmissionOutOfOpeningHours outsideHoursAdmitReason, String outsideHoursAdmitComment, ReasonForAdmissionToGenderSpecificBay genderBreachAdmitReason, String genderBreachAdmitComment, Boolean admittedInMixedGenderBay)
	{
		try 	
		{
			// Step 1 - Validate UI rules, stop if errors are found
			String[] errors = validateUIRules();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			
			
			// Step 2 - Create the Admission Detail record and populate it
			
			
				// Step 2.1 - Set up the Pas Event - create a new one if needed
    			PasEventAdmitVo pasEvent = null;
    			
    				// Auxiliary Step 2.1.1 - Patient Search Page
    				if (form.getLocalContext().getSelectedAdmissionData() instanceof PatientLite_IdentifiersVo)
    				{
    					// Selected record is a patient - create the Pas Event record
    					pasEvent = createPasEvent(null, (PatientLite_IdentifiersVo) form.getLocalContext().getSelectedAdmissionData());
    				}
    				// Auxiliary Step 2.1.2 - Ward Attenders
    				else if (form.getLocalContext().getSelectedAdmissionData() instanceof BookAppointmentForWardAttendersVo)
    				{
    					// Selected record is a Ward Attenders - Booking Appointment record
    					BookAppointmentForWardAttendersVo wardAttend = updateWardAttendersForAdmision((BookAppointmentForWardAttendersVo) form.getLocalContext().getSelectedAdmissionData());
    					pasEvent = createPasEvent(null, wardAttend.getPatient());
    					form.getLocalContext().setSelectedAdmissionData(wardAttend);
    				}
    				// Auxiliary Step 2.1.3 - TCI
    				else if (form.getLocalContext().getSelectedAdmissionData() instanceof PatientElectiveListBedAdmissionVo)
    				{
    					PatientElectiveListBedAdmissionVo pendingElectiveAdmission = updatePendingElectiveAdmission((PatientElectiveListBedAdmissionVo) form.getLocalContext().getSelectedAdmissionData());
    					pasEvent = createPasEvent(null, pendingElectiveAdmission.getPatient());
    					form.getLocalContext().setSelectedAdmissionData(pendingElectiveAdmission);
    				}
    				// Auxiliary Step 2.1.4 - ED Page
    				else if (form.getLocalContext().getSelectedAdmissionData() instanceof PendingEmergencyAdmissionAdmitVo)
    				{
    					PendingEmergencyAdmissionAdmitVo pendingEmergencyAdmission = (PendingEmergencyAdmissionAdmitVo) form.getLocalContext().getSelectedAdmissionData();
						if (pendingEmergencyAdmission != null && EmergencyAdmissionStatus.DTA.equals(pendingEmergencyAdmission.getAdmissionStatus()))
    					{
    						form.getLocalContext().setSelectedAdmissionData(domain.automaticDischarge(pendingEmergencyAdmission, form.dtimAdmitDateTime().getValue(), form.qmbConsultant().getValue().toHcpLiteVo()));
    					}
						
						pasEvent = createPasEvent(pendingEmergencyAdmission.getPasEvent(), pendingEmergencyAdmission.getPasEvent().getPatient());
    				}
    				// Auxiliary Step 2.1.5 - Pending Emergency (Non-ED) Admission
    				else if (form.getLocalContext().getSelectedAdmissionData() instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo)
    				{
    					CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergencyAdmission = (CatsReferralPendingEmergencyNonEDAdmissionListVo) form.getLocalContext().getSelectedAdmissionData();

    					// Currently the record status is updated in the BedAdmissionComponentImpl
    					// Review at a later date to see how the status should be updated - in this place
    					
    					pasEvent = createPasEvent(null, pendingEmergencyAdmission.getPatient());
    					
    					form.getLocalContext().setSelectedAdmissionData(pendingEmergencyAdmission);
    				}
    				
    			
    			// Step 2.2 - Create the Admission Detail record
    			AdmissionDetailVo admissionDetails = populateDataFromInstanceControls(admitMode, pasEvent);
    			
    			// Step 2.3 - Update or create Care Spell, Episode of Care and Care Contexts
            	CareSpellAdmitVo careSpell = getCreateCareSpell(admissionDetails.getPasEvent());
    			
    			// Step 2.4 - Update or create Cats Referral record
    			CatsReferralEmergencyAdmissionVo referral = getCreateCatsReferral(admissionDetails, careSpell);
    			
    			// Step 2.5 - Create the Ward Stay record
    			WardStayVo wardStay = createWardStay(outsideHoursAdmitReason, outsideHoursAdmitComment, genderBreachAdmitReason, genderBreachAdmitComment, admittedInMixedGenderBay);
    			
    			// Step 2.6 - Create the Consultant Stay record
    			ConsultantStayVo consultantStay = createConsultantStay();
        		

    		// Step 3 - Validate records before save
    		String[] dataErrors = admissionDetails.validate();
    		dataErrors = wardStay.validate(dataErrors);
    		dataErrors = consultantStay.validate(dataErrors);

			if (form.getLocalContext().getSelectedAdmissionData() instanceof PatientElectiveListBedAdmissionVo)
    		{
    			PatientElectiveListBedAdmissionVo patientElectiveAdmission = (PatientElectiveListBedAdmissionVo) form.getLocalContext().getSelectedAdmissionData();
    			
    			if (patientElectiveAdmission.getAdmissions() == null)
    				patientElectiveAdmission.setAdmissions(new AdmissionDetailRefVoCollection());
    			patientElectiveAdmission.getAdmissions().add(admissionDetails);
    			
    			if (patientElectiveAdmission.getTCIDetails() != null)
    				patientElectiveAdmission.getTCIDetails().setAdmissionDetail(admissionDetails);
    			
    			if (patientElectiveAdmission.getReferral() != null)
    			{
    				if (patientElectiveAdmission.getReferral().getAdmissions() == null)
    					patientElectiveAdmission.getReferral().setAdmissions(new AdmissionDetailRefVoCollection());

    				patientElectiveAdmission.getReferral().getAdmissions().add(admissionDetails);
    			}
    			
    			dataErrors = patientElectiveAdmission.validate(dataErrors);
    		}
    		

    		// Step 4 - Case notes folders
			PatientCaseNoteTransferVoCollection caseNoteFolderTransfers = null;
    		if (GroupUpdateCaseFolderEnumeration.rdoCaseFolderYes.equals(form.GroupUpdateCaseFolder().getValue()))
    		{
    			PatientCaseNoteVoCollection caseNoteFolders = domain.getCaseNoteFolders(form.getLocalContext().getSelectedPatient());
    			
    			if (caseNoteFolders != null)
    			{
    				caseNoteFolderTransfers = new PatientCaseNoteTransferVoCollection();
    				
    				for (PatientCaseNoteVo caseNoteFolder : caseNoteFolders)
    				{
    					if (caseNoteFolder.getCurrentLocation() != null
    							&& !caseNoteFolder.getCurrentLocation().equals(form.cmbWard().getValue())
    							&&(CaseNoteStatus.ACTIVE.equals(caseNoteFolder.getStatus())|| CaseNoteStatus.REQUIRES_MERGING.equals(caseNoteFolder.getStatus())|| CaseNoteStatus.MARKED_AS_FOUND.equals(caseNoteFolder.getStatus())))
    					{
    						PatientCaseNoteTransferVo transfer = populatePatCaseNoteTransferFromScreen(caseNoteFolder, form.cmbWard().getValue());
    						caseNoteFolderTransfers.add(transfer);
    					}
    				}
    			}
    		}
    		
    		if (caseNoteFolderTransfers != null && caseNoteFolderTransfers.size() > 0)
    		{
    			dataErrors = caseNoteFolderTransfers.validate(dataErrors);
    		}

    		// Step 5 - Commit to data base

    			// Step 5.1 - Check for data validation errors
        		if (dataErrors != null && dataErrors.length > 0)
        		{
        			engine.showErrors(dataErrors);
        			return false;
        		}

			// Commit to data base
    		domain.saveAdmissionAndUpdateList(admissionDetails, wardStay, consultantStay, careSpell, referral, form.getLocalContext().getSelectedAdmissionData(), caseNoteFolderTransfers);
    		
    		//wdev-21464 - point 4 //WDEV-22236
    		//form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getLocalContext().getSelectedPatient()));
    		CareContextShortVo careContextShort = domain.getCareContextShort(form.getLocalContext().getSelectedPatient());
    		form.getGlobalContext().Core.setCurrentCareContext(careContextShort);
    		//------------
			
			return true;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e)
		{
			if (e.getStaleObject() instanceof ims.core.patient.domain.objects.Patient || e.getStaleObject() instanceof BedSpaceState)
			{
				if (e.getStaleObject() instanceof ims.core.patient.domain.objects.Patient)
					engine.showMessage("Patient record has been changed. The admission process has been aborted.");
				
				if (e.getStaleObject() instanceof BedSpaceState)
					engine.showMessage("The Bed record has been changed. The admission process has been aborted.");
				
				System.out.println("Stale Object" + e.getStaleObject());
				return true;
			}
			else
			{
				System.out.println("Stale Object" + e.getStaleObject());
				engine.showMessage("An error occured during the admission process. Please try again to admit the process. If it still doesn't work, abort it and start over.");
			}
			
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
	}


	/**
	 * Function used to update state of the controls
	 * @param admitToWardMode - Admit Mode
	 */
	private void updateControlsState(AdmitToWardMode admitToWardMode)
	{
		boolean selectedPatient = form.getLocalContext().getSelectedPatient() != null;

		boolean admitModeStandard = AdmitToWardMode.STANDARD.equals(admitToWardMode);
		boolean admitModeSelectedPatient = AdmitToWardMode.SELECTION_ADMIT.equals(admitToWardMode);
		
		// Show / Hide - page headers
		form.lyrPatient().tabPagePatientSearch().setHeaderVisible(admitModeStandard);
		form.lyrPatient().tabPageWardAttenders().setHeaderVisible(admitModeStandard);
		form.lyrPatient().tabPageTCI().setHeaderVisible(admitModeStandard);
		form.lyrPatient().tabPageED().setHeaderVisible(admitModeStandard);
		form.lyrPatient().tabPagePendingEmergencies().setHeaderVisible(admitModeStandard);

		form.lyrPatient().tabPagePatientDetails().setHeaderVisible(admitModeSelectedPatient);
		
		
		// Presented tab pages
		boolean pagePatientSearch		= form.lyrPatient().tabPagePatientSearch().isVisible();
		boolean pageWardAttenders		= form.lyrPatient().tabPageWardAttenders().isVisible();
//		boolean pageTCI					= form.lyrPatient().tabPageTCI().isVisible();
		boolean pageED					= form.lyrPatient().tabPageED().isVisible();
		boolean pagePendingEmergencies	= form.lyrPatient().tabPagePendingEmergencies().isVisible();
		boolean pagePatientDetails		= form.lyrPatient().tabPagePatientDetails().isVisible();
		
//		boolean admissionDataElectiveList		= form.getLocalContext().getSelectedAdmissionData() instanceof PatientElectiveListRefVo;
		boolean admissionDataEDTracking			= form.getLocalContext().getSelectedAdmissionData() instanceof PendingEmergencyAdmissionRefVo;
		boolean admissionDataEmergencyAdmission	= form.getLocalContext().getSelectedAdmissionData() instanceof CatsReferralRefVo;
		
		
		// Enable / Disable - instance controls
		form.qmbService().setEnabled(selectedPatient);
		form.qmbConsultant().setEnabled(selectedPatient);
		
		form.cmbWardType().setEnabled(selectedPatient);
		form.cmbSourceOfAdmission().setEnabled(selectedPatient);
		form.cmbPatientCategory().setEnabled(selectedPatient);
		
		form.dtimAdmitDateTime().setEnabled(selectedPatient);
		form.intAnticipatedStay().setEnabled(selectedPatient);
		form.dtimEstDischargeDateTime().setEnabled(selectedPatient);
		
		form.chkChaplain().setEnabled(selectedPatient);

		form.cmbSourceOfEmergencyReferral().setEnabled(selectedPatient);
		form.lblSourceOfEmergencyReferral().setVisible(pagePatientSearch || pageWardAttenders || pageED || pagePendingEmergencies || (pagePatientDetails && (admissionDataEDTracking || admissionDataEmergencyAdmission)));
		form.cmbSourceOfEmergencyReferral().setVisible(pagePatientSearch || pageWardAttenders || pageED || pagePendingEmergencies || (pagePatientDetails && (admissionDataEDTracking || admissionDataEmergencyAdmission)));
		
		
		form.cmbSourceOfReferral().setEnabled(selectedPatient);
		form.lblSourceOfReferral().setVisible(false);				// Hardcoded hidden - change with the condition necessary for visibility
		form.cmbSourceOfReferral().setVisible(false);				// Hardcoded hidden - change with the condition necessary for visibility 
		
		form.qmbReferringConsultant().setEnabled(selectedPatient);
		form.lblReferringConsultant().setVisible(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue()));
		form.qmbReferringConsultant().setVisible(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue()));

		form.txtReasonForAdmission().setEnabled(selectedPatient);
		form.lblReasonForAdmission().setVisible(false);
		form.txtReasonForAdmission().setVisible(false);
		
		boolean formOtherEmergency = SourceOfEmergencyReferral.OTHER_EMERGENCY_ADMISSION.equals(form.cmbSourceOfEmergencyReferral().getValue());
		form.lblSelfAdmitPatient().setVisible((pagePatientSearch || pagePendingEmergencies) && formOtherEmergency);
		form.chkSelfAdmit().setVisible((pagePatientSearch || pagePendingEmergencies) && formOtherEmergency);
		form.chkSelfAdmit().setEnabled(selectedPatient);
		
		form.GroupUpdateCaseFolder().setEnabled(selectedPatient);
		//WDEV-22803
		boolean isUpdateCasenotfolderVisible =form.getLocalContext().getSelectedPatientIsNotNull()&& Boolean.TRUE.equals(form.getLocalContext().getIsCaseNoteFolderVisible());
		form.GroupUpdateCaseFolder().setVisible(isUpdateCasenotfolderVisible);
		form.lblUpdateCaseNoteFolder().setVisible(isUpdateCasenotfolderVisible);
		//WDEV-22803 end
		
		form.lblCasefolderComments().setVisible(GroupUpdateCaseFolderEnumeration.rdoCaseFolderYes.equals(form.GroupUpdateCaseFolder().getValue()));
		form.txtCasefolderComments().setVisible(GroupUpdateCaseFolderEnumeration.rdoCaseFolderYes.equals(form.GroupUpdateCaseFolder().getValue()));
		form.chkHealthyLodger().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"));
		form.chkHealthyLodger().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && selectedPatient);
		form.lblHealthyLodger().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"));
		form.imbHealthyLodger().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull());
		form.imbHealthyLodger().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull());
		
		form.btnAdmit().setEnabled(selectedPatient);
	}

	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Patient Search presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function to present the Patient Search page to user
	 */
	private void presentPatientSearchTab()
	{
		// Select patient
		PatientLite_IdentifiersVo selectedValue = (PatientLite_IdentifiersVo) form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getValue();
		form.getLocalContext().setSelectedPatient(selectedValue);
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		
		// Populate instance controls with selected record
		populateInstanceControlsFromData(selectedValue);
	}
	
	


	/**
	 * Function used to perform Patient Search
	 * @param displayErrorMessages - If <b>true</b> then error message will be displayed, if <b>false</b> then function will run silently
	 */
	private void patientSearch(boolean displayErrorMessages)
	{
		// Clear previous results
		form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Validate search criteria
		if (validateSearchCriteria())
		{
			// Perform database query for search criteria
			PatientLite_IdentifiersVoCollection patients = null;
			if (form.lyrPatient().tabPagePatientSearch().txtPatIDValue().getValue() != null)
			{
				patients = domain.listPatients(form.lyrPatient().tabPagePatientSearch().cmbPatIDType().getValue(), form.lyrPatient().tabPagePatientSearch().txtPatIDValue().getValue());
			}
			else
			{
				patients = domain.listPatients(form.lyrPatient().tabPagePatientSearch().txtPatSurname().getValue(), form.lyrPatient().tabPagePatientSearch().txtPatForename().getValue());
			}
			
			// Display message error for zero results found
			if (displayErrorMessages && (patients == null || patients.size() == 0))
			{
				engine.showMessage("No results found.");
			}
			
			// Populate results to grid (call this function even if no results are returned)
			AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPagePatientSearch().dyngrdPatients(), AdmitToWardHelper.DYNAMIC_GRID_MODE_PATIENT_SEARCH, patients);
			form.getLocalContext().setSortOrderPatientAge(null);
			form.getLocalContext().setSortOrderPatientDOB(null);
		}
	}

	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Ward Attenders presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 * Function to present the Ward Attenders page to user
	 */
	private void presentWardAttendersTab()
	{
		// Select patient
		BookAppointmentForWardAttendersVo selectedValue = (BookAppointmentForWardAttendersVo) form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getValue();
		form.getLocalContext().setSelectedPatient(selectedValue != null ? selectedValue.getPatient() : null);
		
		// Populate instance controls with selected record
		populateInstanceControlsFromData(selectedValue);
	}

	
	/**
	 * Function used to perform Ward Attenders search
	 * @param displayErrorMessages
	 */
	private void wardAttendersSearch(boolean displayErrorMessages)
	{
		// Clear the previous results
		form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Validate search criteria
		if (validateSearchCriteria())
		{
			// Perform database query for search criteria
			BookAppointmentForWardAttendersVoCollection wardAttenders = domain.listWardAttenders(form.getGlobalContext().Core.getWardViewPatientListWard(), form.lyrPatient().tabPageWardAttenders().dteWardAttenders().getValue());

			// Display the message error for zero results found
			if (displayErrorMessages && (wardAttenders == null || wardAttenders.size() == 0))
			{
				engine.showMessage("No results found");
			}
			
			// Populate results to grid (call this function even if no results are returned)
			AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders(), AdmitToWardHelper.DYNAMIC_GRID_MODE_WARD_ATTENDERS, wardAttenders);
			
			//Reset search
			form.getLocalContext().setSortOrderWardAttenderAge(null);
			form.getLocalContext().setSortOrderWardAttenderDOB(null);			
		}
	}
	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page TCI presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	private void presentTCITab()
	{
		//WDEV-22839
		form.getLocalContext().setSelectedPatient(null);		
		
		// Perform ward attenders search
		performTCISearch(false);
		//WDEV-22839 end
	}

	
	private void performTCISearch(boolean displayErrorMessages)
	{
		// Clear the previous results
		form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Validate search criteria
		if (validateSearchCriteria())
		{
			// Perform database query for search criteria
			Date fromDate = form.lyrPatient().tabPageTCI().dteTCI_From().getValue();
			Date toDate = form.lyrPatient().tabPageTCI().dteTCI_To().getValue();
			LocationRefVo selectedWard = form.getGlobalContext().Core.getWardViewPatientListWard();
			LocationLiteVo hospital = domain.getHospitalForLocation(selectedWard);
			
			PatientElectiveListBedInfoVoCollection patientElectives = null;
			if (GroupTCI_WardEnumeration.rdoTCI_CurrentWard.equals(form.lyrPatient().tabPageTCI().GroupTCI_Ward().getValue()))
				patientElectives = domain.listPatientElectives(fromDate, toDate, selectedWard, hospital);
			else
				patientElectives = domain.listPatientElectives(fromDate, toDate, null, hospital);

			
			// Display the message error for zero results found
			if (displayErrorMessages && (patientElectives == null || patientElectives.size() == 0))
			{
				engine.showMessage("No results found.");
			}
			
			// Populate results to grid (call this function even if no results are returned)
			AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions(), AdmitToWardHelper.DYNAMIC_GRID_MODE_TCI, patientElectives);
			
			//reset search
			form.getLocalContext().setSortOrderTCIAge(null);
			form.getLocalContext().setSortOrderTCIDateTime(null);
			form.getLocalContext().setSortOrderTCIComments(null);
			form.getLocalContext().setSortOrderTCIDOB(null);
		}
	}

	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page ED presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	private void presentEDTab()
	{
		// Clear patient selection
		form.getLocalContext().setSelectedPatient(null);
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		
		// Clear previous records from grid
		form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();

		// Perform database query for search criteria
		TrackingForPendingEmergencyAdmitVoCollection pendingEDAdmissions = domain.listPendingEDAdmission(form.getGlobalContext().Core.getWardViewPatientListWard());

		// Populate results to grid (call this function even if no results are found).
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions(), AdmitToWardHelper.DYNAMIC_GRID_MODE_ED, pendingEDAdmissions);

		//reset search
		form.getLocalContext().setSortOrderEDAge(null);				
		form.getLocalContext().setSortOrderEDDOB(null);
		form.getLocalContext().setSortOrderLOS(null);
	}



	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Pending Admissions presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	private void presentPendingEmergenciesTab(boolean showErrorMessage)
	{
		// Clear patient selection
		form.getLocalContext().setSelectedPatient(null);
		
		// Clear previous records from grid
		form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();
		
		// Perform database query for search criteria
		boolean currentWardSearchMode = GroupPEA_WardEnumeration.rdoCurrentWard.equals(form.lyrPatient().tabPagePendingEmergencies().GroupPEA_Ward().getValue());
		LocationRefVo selectedViewPatientListWard = form.getGlobalContext().Core.getWardViewPatientListWard();
		LocationRefVo selectedHospital = domain.getHospitalForWard(selectedViewPatientListWard);
		
		CatsReferralPendingEmergencyNonEDAdmissionListVoCollection pendingAdmissions = currentWardSearchMode ? domain.listPendingEmergencies(form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().getValue(),form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().getValue(), selectedViewPatientListWard, selectedHospital) : domain.listPendingEmergencies(form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().getValue(),form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().getValue(), null, selectedHospital);
		if (showErrorMessage && (pendingAdmissions == null || pendingAdmissions.size() ==0))
		{
			engine.showMessage("No results found.");
			// Update controls state
			updateControlsState(form.getLocalContext().getAdmitMode());
			return;
		}			
		
		// Populate results to grid (call this function even if no results are found).
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies(), AdmitToWardHelper.DYNAMIC_GRID_MODE_PENDING_EMERGENCIES, pendingAdmissions);
		
		//reset search
		form.getLocalContext().setSortOrderPEAge(null);				
		form.getLocalContext().setSortOrderPEDOB(null);
	}

	private void clearPendingEmergencyTab()
	{
		form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().setValue(null);
		form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().setValue(null);
		form.lyrPatient().tabPagePendingEmergencies().chkPEATodayOnly().setValue(null);
		form.lyrPatient().tabPagePendingEmergencies().GroupPEA_Ward().setValue(GroupPEA_WardEnumeration.rdoCurrentWard);

		// Clear results
		form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getRows().clear();

		//reset search
		form.getLocalContext().setSortOrderPEAge(null);				
		form.getLocalContext().setSortOrderPEDOB(null);
	}

	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Page Patient Details presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	private void presentPatientDetails(IPendingAdmissionDetails selectionAdmitToWard)
	{
		if (form.getGlobalContext().Core.getSelectionAdmitToWard() != null)
		{
			// Set the selected Patient
			form.getLocalContext().setSelectedPatient(form.getGlobalContext().Core.getSelectionAdmitToWard().getPatient());
			
			// 4 - Set up the Admission Data  
			if (form.getGlobalContext().Core.getSelectionAdmitToWard() instanceof TrackingForPendingEmergencyAdmitVo)
			{
				// Cast row value to Tracking VO
	    		TrackingForPendingEmergencyAdmitVo tracking = (TrackingForPendingEmergencyAdmitVo) form.getGlobalContext().Core.getSelectionAdmitToWard();
	    		// Set the Admission Data
	    		form.getLocalContext().setSelectedAdmissionData(tracking.getAssociatedPendingEmergencyAdmission());
			}
			else
			{
				form.getLocalContext().setSelectedAdmissionData(selectionAdmitToWard);
			}
		}
		
		// Present Patient Details tab to the user
		populatePatientDetailsFromData(form.getGlobalContext().Core.getSelectionAdmitToWard());
		
		// Populate instance controls from admissions
		populateInstanceControlsFromData(form.getGlobalContext().Core.getSelectionAdmitToWard());
	}


	private void populatePatientDetailsFromData(IPendingAdmissionDetails selectionAdmitToWard)
	{
		clearPatientDetails();
		
		if (selectionAdmitToWard == null)
			return;
		
		form.lyrPatient().tabPagePatientDetails().lblPatientSurname().setValue(selectionAdmitToWard.getPatientSurname());
		form.lyrPatient().tabPagePatientDetails().lblPatientForename().setValue(selectionAdmitToWard.getPatientForename());
		form.lyrPatient().tabPagePatientDetails().lblPatientIdentifier().setValue(selectionAdmitToWard.getPatientDisplayIdentifier() != null ? selectionAdmitToWard.getPatientDisplayIdentifier().getValue() : "-");
		form.lyrPatient().tabPagePatientDetails().lblDateOfBirth().setValue(selectionAdmitToWard.getPatientDoB() != null ? selectionAdmitToWard.getPatientDoB().toString(DateFormat.STANDARD) : "-");
		form.lyrPatient().tabPagePatientDetails().lblAge().setValue(selectionAdmitToWard.getPatientAge() != null ? selectionAdmitToWard.getPatientAge().toString() : "-");
	}


	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions for the form
	//-------------------------------------------------------------------------------------------------------------------------------------
	

	/**
	 * Function to clear instance controls on form
	 */
	private void clearInstanceControls()
	{
		form.cmbWard().clear();
		form.qmbService().clear();
		form.cmbSpecialty().setValue(null);
		form.qmbConsultant().clear();
		
		form.cmbWardType().setValue(null);
		form.cmbSourceOfAdmission().setValue(null);
		form.cmbMethodOfAdmission().setValue(null);
		form.cmbPatientCategory().setValue(null);
		
		form.dtimAdmitDateTime().setValue(null);
		form.intAnticipatedStay().setValue(null);
		form.dtimEstDischargeDateTime().setValue(null);
		form.chkChaplain().setValue(null);
		
		form.cmbSourceOfEmergencyReferral().setValue(null);
		form.cmbSourceOfReferral().setValue(null);
		form.qmbConsultant().clear();
		form.txtReasonForAdmission().setValue(null);
		
		form.chkSelfAdmit().setValue(null);
		form.GroupUpdateCaseFolder().setValue(GroupUpdateCaseFolderEnumeration.None);
		form.txtCasefolderComments().setValue(null);
		
		form.chkHealthyLodger().setValue(false);
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
	}
	

	/**
	 * Function used to clear Patient Details
	 */
	private void clearPatientDetails()
	{
		form.lyrPatient().tabPagePatientDetails().lblPatientSurname().setValue("-");
		form.lyrPatient().tabPagePatientDetails().lblPatientForename().setValue("-");
		form.lyrPatient().tabPagePatientDetails().lblPatientIdentifier().setValue("-");
		form.lyrPatient().tabPagePatientDetails().lblDateOfBirth().setValue("-");
		form.lyrPatient().tabPagePatientDetails().lblAge().setValue("-");
	}


	/**
	 * Function to clear Patient Search page to user
	 */
	private void clearPatientSearchPage()
	{
		// Instead of clear, default Patient ID Type 
		form.lyrPatient().tabPagePatientSearch().cmbPatIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		
		form.lyrPatient().tabPagePatientSearch().txtPatIDValue().setValue(null);
		form.lyrPatient().tabPagePatientSearch().txtPatForename().setValue(null);
		form.lyrPatient().tabPagePatientSearch().txtPatSurname().setValue(null);
		
		form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getRows().clear();
		
		form.getLocalContext().setSortOrderPatientAge(null);
		form.getLocalContext().setSortOrderPatientDOB(null);
	}
	

	/**
	 * Function to clear Ward Attenders page to user
	 */
	private void clearWardAttendersPage()
	{
		LocationLiteVo currentWard = domain.getLocationLite(form.getGlobalContext().Core.getWardViewPatientListWard());

		// Instead of clear, default to current date and ward
		form.lyrPatient().tabPageWardAttenders().dteWardAttenders().setValue(new Date());
		form.lyrPatient().tabPageWardAttenders().lblWard_WardAttenders().setValue(currentWard != null ? currentWard.getName() : "");
		
		// Clear results
		form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getRows().clear();
		
		form.getLocalContext().setSortOrderWardAttenderAge(null);
		form.getLocalContext().setSortOrderWardAttenderDOB(null);
	}

	
	/**
	 * Function to clear TCI page to user
	 */
	private void clearTCIPage()
	{
		form.lyrPatient().tabPageTCI().dteTCI_From().setValue(null);
		form.lyrPatient().tabPageTCI().dteTCI_To().setValue(null);
		
		form.lyrPatient().tabPageTCI().chkTCI_TodayOnly().setValue(null);
		
		form.lyrPatient().tabPageTCI().GroupTCI_Ward().setValue(GroupTCI_WardEnumeration.rdoTCI_CurrentWard);
		
		// Clear results
		form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getRows().clear();
		//reset search
		form.getLocalContext().setSortOrderTCIAge(null);
		form.getLocalContext().setSortOrderTCIDateTime(null);
		form.getLocalContext().setSortOrderTCIComments(null);
		form.getLocalContext().setSortOrderTCIDOB(null);
		
	}


	/**
	 * Function used to populate instance controls with Admission Details data
	 * @param admissionDetails - admission details to be presented on screen
	 */
	private void populateInstanceControlsFromData(IPendingAdmissionDetails admissionDetails)
	{
		clearInstanceControls();
		
		if (admissionDetails == null)
			return;
		
		LocationLiteVo selectedWard = domain.getLocationLite(form.getGlobalContext().Core.getWardViewPatientListWard());
		if (selectedWard != null)
		{
			form.cmbWard().newRow(selectedWard, selectedWard.getName());
			form.cmbWard().setValue(selectedWard);
		}
		
		if (admissionDetails.getPendingAdmissionService() != null)
		{
			form.qmbService().newRow(admissionDetails.getPendingAdmissionService(), admissionDetails.getPendingAdmissionService().getServiceName());
			form.qmbService().setValue(admissionDetails.getPendingAdmissionService());
			
			form.cmbSpecialty().setValue(admissionDetails.getPendingAdmissionService().getSpecialty());
		}
		
		//WDEV-22079
		if (admissionDetails.getPendingAdmissionConsultant() != null)
		{
			MedicLiteVo medicVo = domain.getMedic(admissionDetails.getPendingAdmissionConsultant());
			if (medicVo != null)
			{	
				form.qmbConsultant().newRow(medicVo, medicVo.getIMosName());
				form.qmbConsultant().setValue(medicVo);
			}
		} 		
		
		form.cmbMethodOfAdmission().setValue(admissionDetails.getPendingAdmissionMethodOfAdmission());
		form.cmbPatientCategory().setValue(admissionDetails.getPendingAdmissionPatientCategory());
		
		form.dtimAdmitDateTime().setValue(new DateTime());
		form.intAnticipatedStay().setValue(admissionDetails.getPendingAdmissionAnticipatedStay());
		
		DateTime estimateDischargeDateTime = calculateDischargeDateTime(form.dtimAdmitDateTime().getValue(), form.intAnticipatedStay().getValue());
		form.dtimEstDischargeDateTime().setValue(estimateDischargeDateTime);

		form.cmbSourceOfEmergencyReferral().setValue(admissionDetails.getPendingAdmissionSourceOfEmergencyReferral());
		form.cmbSourceOfReferral().setValue(admissionDetails.getPendingAdmissionSourceOfReferral());
		form.txtReasonForAdmission().setValue(admissionDetails.getPendingAdmissionReasonForAdmission());
		form.qmbReferringConsultant().setValue(admissionDetails.getPendingAdmissionReferringConsultant());
		
		// Check if you need to default in "Self-Admit"
		if (SourceOfEmergencyReferral.ACCIDENT_EMERGENCY.equals(admissionDetails.getPendingAdmissionSourceOfEmergencyReferral())
				&& SourceOfEmergencyReferral.CONSULTANT_CLINIC.equals(admissionDetails.getPendingAdmissionSourceOfEmergencyReferral())
				&& SourceOfEmergencyReferral.TRANSFER_FROM_HOSPITAL_PROVIDER.equals(admissionDetails.getPendingAdmissionSourceOfEmergencyReferral()))
		{
			form.chkSelfAdmit().setValue(false);
		}
		else
		{
			form.chkSelfAdmit().setValue(Boolean.TRUE.equals(admissionDetails.getPendingAdmissionSelfAdmit()) || Boolean.TRUE.equals(domain.hasPatientActiveSelfAdmit(admissionDetails.getPatient())));
		}
	}
	

	/**
	 * Function used to retrieve values from screen and populate them into data records
	 * @param admitMode - Mode in which the dialog is opened
	 * @param pasEvent 
	 * @return
	 */
	private AdmissionDetailVo populateDataFromInstanceControls(AdmitToWardMode admitMode, PasEventAdmitVo pasEvent)
	{
		// This is an admission - so always create a new Admission Detail record
		
		//http://jira/browse/WDEV-22615
		AdmissionDetailVo admissionDetails=null; 
		if(pasEvent!=null&&pasEvent.getID_PASEventIsNotNull()) //WDEV-22615
		{
			admissionDetails=domain.getAdmissionDetail(pasEvent);
		}
		if(admissionDetails==null)
			admissionDetails= new AdmissionDetailVo();
		
		admissionDetails.setPasEvent(pasEvent);
		
		admissionDetails.setWard(form.cmbWard().getValue());
		admissionDetails.setAdmissionWard(form.cmbWard().getValue());
		
		admissionDetails.setService(form.qmbService().getValue());
		admissionDetails.setSpecialty(form.cmbSpecialty().getValue());
		admissionDetails.setConsultant(domain.getMedicFull(form.qmbConsultant().getValue()));
		
		admissionDetails.setWardType(form.cmbWardType().getValue());
		admissionDetails.setSourceOfAdmission(form.cmbSourceOfAdmission().getValue());
		admissionDetails.setMethodOfAdmission(form.cmbMethodOfAdmission().getValue());
		admissionDetails.setPatientStatus(form.cmbPatientCategory().getValue());
		
		admissionDetails.setAdmissionDateTime(form.dtimAdmitDateTime().getValue());
		admissionDetails.setAnticipatedStay(form.intAnticipatedStay().getValue());
		admissionDetails.setEstDischargeDate(form.dtimEstDischargeDateTime().getValue());
		
		admissionDetails.setSourceOfEmergencyReferral(form.cmbSourceOfEmergencyReferral().getValue());
		admissionDetails.setReasonForAdmission(form.txtReasonForAdmission().getValue());
		admissionDetails.setIsChaplainRequired(form.chkChaplain().getValue());
		//WDEV-23376
		admissionDetails.setReferringConsultant(domain.getMedicFull(form.qmbReferringConsultant().getValue()));
		
		admissionDetails.setSelfAdmitPatient(form.chkSelfAdmit().getValue());
		if (form.GroupUpdateCaseFolder().getValue() != null && !GroupUpdateCaseFolderEnumeration.None.equals(form.GroupUpdateCaseFolder().getValue()))
		{	
			admissionDetails.setUpdateCFL(GroupUpdateCaseFolderEnumeration.rdoCaseFolderYes.equals(form.GroupUpdateCaseFolder().getValue()));
		}
		admissionDetails.setCaseFolderComments(form.txtCasefolderComments().getValue());
		//WDEV-21644
		if (form.getLocalContext().getSelectedAdmissionData() instanceof BookAppointmentForWardAttendersVo)
		{
			admissionDetails.setWardAppointment((BookAppointmentForWardAttendersVo) form.getLocalContext().getSelectedAdmissionData());
		}
		//WDEV-20222
		admissionDetails.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
		
		// Return created Admission Detail record
		return admissionDetails;
	}
	
	
	/**
	 * Function used to create the Ward Stay record
	 * @param outsideHoursAdmitReason
	 * @param outsideHoursAdmitComment
	 * @param genderBreachAdmitReason
	 * @param genderBreachAdmitComment
	 * @param admittedInMixedGenderBay
	 * @return
	 */
	private WardStayVo createWardStay(	ReasonForAdmissionOutOfOpeningHours outsideHoursAdmitReason, 	String outsideHoursAdmitComment,
										ReasonForAdmissionToGenderSpecificBay genderBreachAdmitReason,	String genderBreachAdmitComment, 
										Boolean admittedInMixedGenderBay)
	{
		WardStayVo wardStay = new WardStayVo();

		wardStay.setTransferDateTime(form.dtimAdmitDateTime().getValue());
		wardStay.setTransferOutDateTime(null);

		wardStay.setWard(form.cmbWard().getValue());
		wardStay.setWardType(form.cmbWardType().getValue());
		wardStay.setBay(domain.getLocationLite(form.getGlobalContext().Core.getWardViewPatientListBay()));
		wardStay.setBedSpace(null);
		wardStay.setPatientStatus(form.cmbPatientCategory().getValue());

		wardStay.setService(form.qmbService().getValue());

		wardStay.setReasonAdmittingOutsideHours(outsideHoursAdmitReason);
		wardStay.setReasonAdmittingOutsideHoursComment(outsideHoursAdmitComment);
		wardStay.setReasonGenderBreach(genderBreachAdmitReason);
		wardStay.setReasonGenderBreachComment(genderBreachAdmitComment);
		wardStay.setAdmitedInMixedGenderBay(admittedInMixedGenderBay);

		// Return newly created Ward Stay record
		return wardStay;
	}


	/**
	 * Function used to create the Consultant Stay record
	 * @return
	 */
	private ConsultantStayVo createConsultantStay()
	{
		ConsultantStayVo consultantStay = new ConsultantStayVo();
		
		consultantStay.setConsultant(domain.getMedicFull(form.qmbConsultant().getValue()));
		
		consultantStay.setTransferDateTime(form.dtimAdmitDateTime().getValue());
		consultantStay.setEndDateTime(null);
		
		consultantStay.setService(form.qmbService().getValue());
		consultantStay.setSpecialty(form.cmbSpecialty().getValue());
		consultantStay.setPatientStatus(form.cmbPatientCategory().getValue());
		
		consultantStay.setCodingStatus(CodingStatus.UNCODED);
		
		// Return Consultant Stay
		return consultantStay;
	}

	
	/**
	 * Function to populate consultants
	 * @param consultants - values to be populated
	 */
	private void populateConsultants(MedicLiteVoCollection consultants)
	{
		form.qmbConsultant().clear();
		
		if (consultants == null)
			return;
		
		for (MedicLiteVo consultant : consultants)
		{
			form.qmbConsultant().newRow(consultant, consultant.getIMosName());
		}
		
		if (consultants.size() == 1)
			form.qmbConsultant().setValue(consultants.get(0));
		else
			form.qmbConsultant().showOpened();
	}


	/**
	 * Function to populate referring consultants
	 * @param referringConsultants - values to be populated
	 */
	private void populateReferringConsultants(MedicLiteVoCollection referringConsultants)
	{
		// Clear the referring consultants
		form.qmbReferringConsultant().clear();
		
		if (referringConsultants == null)
			return;
		
		for (MedicLiteVo consultant : referringConsultants)
		{
			form.qmbReferringConsultant().newRow(consultant, consultant.getIMosName());
		}
		
		if (referringConsultants.size() == 1)
			form.qmbConsultant().setValue(referringConsultants.get(0));
		else
			form.qmbConsultant().showOpened();
	}

	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Auxiliary logic form functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 * Function to calculate estimated discharge date time
	 * @param admissionDateTime
	 * @param anticipatedStay
	 * @return
	 */
	private DateTime calculateDischargeDateTime(DateTime admissionDateTime, Integer anticipatedStay)
	{
		if (admissionDateTime == null || anticipatedStay == null || anticipatedStay == 0) //WDEV-22714 
			return null;
		
		return ((DateTime) admissionDateTime.clone()).addDays(anticipatedStay);
	}

	
	/**
	 * Function used to validate Patient Search criteria
	 * @return
	 */
	private boolean validateSearchCriteria()
	{
		ArrayList<String> errorsList = new ArrayList<String>();
		
		
		// Validate search criteria for Patient Search Tab
		if (form.lyrPatient().tabPagePatientSearch().isVisible())
		{
			if (form.lyrPatient().tabPagePatientSearch().txtPatIDValue().getValue() != null)
			{
				if (form.lyrPatient().tabPagePatientSearch().cmbPatIDType().getValue() == null)
					errorsList.add("Patient Identifier Type is mandatory.");
			}
			else
			{
				if (form.lyrPatient().tabPagePatientSearch().txtPatSurname().getValue() == null)
					errorsList.add("Surname is mandatory.");
				
				if (Boolean.TRUE.equals(ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue())
						&& form.lyrPatient().tabPagePatientSearch().txtPatForename().getValue() == null)
					errorsList.add("Forename is mandatory.");
			}
		}
		
		// Validate search criteria for Ward Attenders tab
		if (form.lyrPatient().tabPageWardAttenders().isVisible())
		{
			if (form.lyrPatient().tabPageWardAttenders().dteWardAttenders().getValue() == null)
				errorsList.add("Date is mandatory.");
		}
		
		// Validate search criteria for TCI tab
		if (form.lyrPatient().tabPageTCI().isVisible())
		{
			if (form.lyrPatient().tabPageTCI().dteTCI_From().getValue() == null)
				errorsList.add("Date From is mandatory.");
			
			if (form.lyrPatient().tabPageTCI().dteTCI_To().getValue() == null)
				errorsList.add("Date To is mandatory.");
			
			if (form.lyrPatient().tabPageTCI().dteTCI_From().getValue() != null && form.lyrPatient().tabPageTCI().dteTCI_To().getValue() != null
					&& form.lyrPatient().tabPageTCI().dteTCI_From().getValue().isGreaterThan(form.lyrPatient().tabPageTCI().dteTCI_To().getValue()))//WDEV-20941
				errorsList.add("'From' Date cannot be later than 'To' Date.");
		}
		// Validate search criteria for Pending Emergency tab
		if (form.lyrPatient().tabPagePendingEmergencies().isVisible())
		{
			if (form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().getValue() != null && form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().getValue() != null
					&& form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().getValue().isGreaterThan(form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().getValue()))//WDEV-20941
				errorsList.add("'From' Date cannot be later than 'To' Date.");
		}
		
		if (errorsList.size() > 0)
		{
			engine.showErrors(errorsList.toArray(new String[errorsList.size()]));
			return false;
		}
		
		return true;
	}

	
	/**
	 * Function used to check if the patient was previously admitted
	 */
	private boolean isPatientAdmitted(PatientRefVo patient)
	{
		String errors = domain.checkForPatientAlreadyAdmited(patient);
		if (errors != null)
		{
			engine.showMessage(errors, "Admit Error", MessageButtons.OK, MessageIcon.ERROR);
			return true;
		}				
		
		return false;
	}
	

	/**
	 * Function used to check if the patient is alive (dead patients cannot be admitted)
	 * @param patient - Patient record to be checked if alive
	 * @return
	 */
	private boolean isPatientAlive(PatientRefVo patient)
	{
		return Boolean.TRUE.equals(domain.isPatientAlive(patient));
	}
	

	/**
	 * Function used to validate the UI rules
	 * @return List of errors found
	 */
	private String[] validateUIRules()
	{
		List<String> errors = new ArrayList<String>();
		
		if (form.cmbWard().getVisible() && form.cmbWard().isEnabled() && form.cmbWard().getValue() == null)
			errors.add("Ward is mandatory.");
		
		if (form.qmbService().getVisible() && form.qmbService().isEnabled() && form.qmbService().getValue() == null)
			errors.add("Service is mandatory.");
		
		if (form.cmbSpecialty().getVisible() && form.cmbSpecialty().isEnabled() && form.cmbSpecialty().getValue() == null)
			errors.add("Specialty is mandatory.");
		
		if (form.qmbConsultant().getVisible() && form.qmbConsultant().isEnabled() && form.qmbConsultant().getValue() == null)
			errors.add("Consultant is mandatory.");
		
		if (form.cmbSourceOfAdmission().getVisible() && form.cmbSourceOfAdmission().isEnabled() && form.cmbSourceOfAdmission().getValue() == null)
			errors.add("Source of Admission is mandatory.");
		
		if (form.cmbMethodOfAdmission().getVisible() && form.cmbMethodOfAdmission().isEnabled() && form.cmbMethodOfAdmission().getValue() == null)
			errors.add("Method of Admssion is mandatory.");
		
		if (form.cmbPatientCategory().getVisible() && form.cmbPatientCategory().isEnabled() && form.cmbPatientCategory().getValue() == null)
			errors.add("Patient Category is mandatory.");
		
		if (form.dtimAdmitDateTime().isVisible() && form.dtimAdmitDateTime().isEnabled() && form.dtimAdmitDateTime().getValue() == null)
			errors.add("Admission Date/Time is mandatory.");
				
		if (form.dtimAdmitDateTime().getValue() != null)
		{
			if (form.dtimAdmitDateTime().getValue() != null &&  form.dtimAdmitDateTime().getValue().getDate().isGreaterThan(new Date()))
			{
				errors.add("Admission Date cannot be later than today.");
			}
			if (form.dtimEstDischargeDateTime().getValue() != null && form.dtimEstDischargeDateTime().getValue().isLessThan(form.dtimAdmitDateTime().getValue()))
			{	
				errors.add("Est. Discharge Date/Time cannot be earlier than Admission Date/Time");
			}	
		}
		
		if (form.intAnticipatedStay().isVisible() && form.intAnticipatedStay().isEnabled() && form.intAnticipatedStay().getValue() == null)
			errors.add("Anticipated Stay is mandatory.");
		
		if (form.cmbSourceOfEmergencyReferral().getVisible() && form.cmbSourceOfEmergencyReferral().isEnabled() && form.cmbSourceOfEmergencyReferral().getValue() == null)
			errors.add("Source of Emergency Referral is mandatory.");
		
		if (form.cmbSourceOfReferral().getVisible() && form.cmbSourceOfReferral().isEnabled() && form.cmbSourceOfReferral().getValue() == null)
			errors.add("Source of Referral is mandatory.");
		
		if (form.qmbReferringConsultant().getVisible() && form.qmbReferringConsultant().isEnabled() && form.qmbReferringConsultant().getValue() == null)
			errors.add("Referring Consultant is mandatory.");
		
		if (form.txtReasonForAdmission().isVisible() && form.txtReasonForAdmission().isEnabled() && form.txtReasonForAdmission().getValue() == null)
			errors.add("Reason for Admission is mandatory.");
	
		return errors.size() > 0 ? errors.toArray(new String[errors.size()]) : null;
	}




	private PasEventAdmitVo createPasEvent(PasEventAdmitVo originalPasEvent, PatientLite_IdentifiersVo patient)
	{
		PasEventAdmitVo pasEvent = originalPasEvent;
		if (pasEvent == null)
			pasEvent = new PasEventAdmitVo();
		
		pasEvent.setPatient(patient);
		
		pasEvent.setEventDateTime(form.dtimAdmitDateTime().getValue());
		pasEvent.setPasEventId(patient.getID_Patient().toString() + pasEvent.getEventDateTime().toString(DateTimeFormat.ISO) + "-" + (new DateTime().toString(DateTimeFormat.ISO)));
		pasEvent.setLocation(form.cmbWard().getValue());
		pasEvent.setConsultant(form.qmbConsultant().getValue() != null ? new MedicRefVo(form.qmbConsultant().getValue().getID_Hcp(), form.qmbConsultant().getValue().getVersion_Hcp()) : null);
		pasEvent.setSpecialty(form.cmbSpecialty().getValue());
		pasEvent.setSourceOfReferral(form.cmbSourceOfReferral().getValue());
		pasEvent.setEventType(form.getLocalContext().getSelectedAdmissionData() instanceof PatientElectiveListBedAdmissionVo ? PasEventType.TCI : PasEventType.INPATIENT); //WDEV-22685
		pasEvent.setService(form.qmbService().getValue()); //WDEV-20910
		
		return pasEvent;
	}

	
	private BookAppointmentForWardAttendersVo updateWardAttendersForAdmision(BookAppointmentForWardAttendersVo wardAttend)
	{
		if (wardAttend == null)
			throw new CodingRuntimeException("Ward Attender cannot be null for admission.");
		
		wardAttend.setApptStatus(Status_Reason.ADMITTED);

		Appointment_StatusVo admittedStatus = new Appointment_StatusVo();
		admittedStatus.setStatus(Status_Reason.ADMITTED);
		admittedStatus.setStatusReason(null);
		admittedStatus.setApptDate(wardAttend.getAppointmentDate());
		admittedStatus.setApptTime(wardAttend.getApptStartTime());
		admittedStatus.setStatusChangeDateTime(new DateTime());
		
		wardAttend.setCurrentStatusRecord(admittedStatus);
		wardAttend.getApptStatusHistory().add(admittedStatus);
		return wardAttend;
	}




	private PatientCaseNoteTransferVo populatePatCaseNoteTransferFromScreen(PatientCaseNoteVo caseNoteFolder, LocationRefVo location)
	{
		if (caseNoteFolder == null)
			throw new CodingRuntimeException("Case Note Folder cannot be null when creating a Transfer");
		
		PatientCaseNoteTransferVo transfer = new PatientCaseNoteTransferVo();
		
		transfer.setPatient(caseNoteFolder.getPatient());
		transfer.setCaseNote(caseNoteFolder);

		transfer.setTransferredFromLocation(caseNoteFolder.getCurrentLocation());
		transfer.setTransferredToLocation(location);
		
		transfer.setTransferredBy((MemberOfStaffRefVo) domain.getMosUser());
		transfer.setTransferDate(new DateTime());
		
		return transfer;
	}
	
	
	
	private PatientElectiveListBedAdmissionVo updatePendingElectiveAdmission(PatientElectiveListBedAdmissionVo patientElectiveList)
	{
		if (patientElectiveList == null)
			throw new CodingRuntimeException("Patient Elective List cannot be null for admission.");
		
		// Update Patient Elective List record from data from screen
		patientElectiveList.setAnticipatedStay(form.intAnticipatedStay().getValue());
		//WDEV-22646 Consultant Not to be updated
		//patientElectiveList.setConsultant(form.qmbConsultant().getValue() != null ? form.qmbConsultant().getValue().toHcpLiteVo() : null);

		
		// Set the status for the Patient Elective List record
		ElectiveListStatusVo admissionStatus = new ElectiveListStatusVo();
		admissionStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		admissionStatus.setStatusDateTime(new DateTime());
		admissionStatus.setElectiveListStatus(WaitingListStatus.ADMITTED);
		
		patientElectiveList.setElectiveListStatus(admissionStatus);
		if (patientElectiveList.getElectiveListStatusHistory() == null)
			patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusRefVoCollection());
		patientElectiveList.getElectiveListStatusHistory().add(admissionStatus);
		
		
		// Update the TCI record from data on screen
		TCIForPatientElectiveListBedInfoDetailsVo tciDetails = patientElectiveList.getTCIDetails();
		tciDetails.setTCIWard(form.cmbWard().getValue());
		//WDEV-22646 Consultant Not to be updated
		//tciDetails.setTCIConsultant(form.qmbConsultant().getValue() != null ? form.qmbConsultant().getValue().toHcpLiteVo() : null);
		tciDetails.setIsActive(false);
		
		DateTime admissionDateTime = form.dtimAdmitDateTime().getValue();
		//WDEV-22662
		//tciDetails.setTCIDate(admissionDateTime != null ? admissionDateTime.getDate() : null);
		//tciDetails.setTCITime(admissionDateTime != null ? admissionDateTime.getTime() : null);

		// Set the outcome for the TCI record
		TCIOutcomeForPatientElectiveListVo outcome = new TCIOutcomeForPatientElectiveListVo();
		outcome.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
		outcome.setStatusDateTime(admissionDateTime);
		outcome.setOutcomeReason(null);
		outcome.setOutcome(ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()) ? AdmissionOfferOutcome.PATIENT_ADMITTED : AdmissionOfferOutcome.PATIENT_ADMITTED_COMMENCED_8);
		
		tciDetails.setCurrentOutcome(outcome);
		if (tciDetails.getOutcomeHistory() == null)
			tciDetails.setOutcomeHistory(new TCIOutcomeForPatientElectiveListRefVoCollection());
		tciDetails.getOutcomeHistory().add(outcome);
		
		if (Boolean.TRUE.equals(patientElectiveList.getSubjectTo28DayRule()) && isAdmissionDateInBreachOfRule28Days(form.dtimAdmitDateTime().getValue(), patientElectiveList))
		{
			patientElectiveList.setSubjectTo28DayRule(Boolean.FALSE);
			patientElectiveList.setRule28DayStatus(Rule28DayStatus.BREACHED);
			patientElectiveList.setRule28DayPeriodStart(null);
			
			if (patientElectiveList.getTCIDetails() != null)
			{
				patientElectiveList.getTCIDetails().setRule28DayStatus(Rule28DayStatus.BREACHED);
				patientElectiveList.getTCIDetails().setRule28DayPeriodStart(null);
			}
		}
		
		// Update the status for the Theatre Appointment
		BookingAppointmentTheatreVo theatreAppointment = tciDetails.getAppointment();
		if (theatreAppointment != null)
		{
			Appointment_StatusVo admittedStatus = new Appointment_StatusVo();
			admittedStatus.setStatus(Status_Reason.ADMITTED);
			admittedStatus.setStatusChangeDateTime(admissionDateTime);
			
			theatreAppointment.setApptStatus(Status_Reason.ADMITTED);
			theatreAppointment.setCurrentStatusRecord(admittedStatus);
			if (theatreAppointment.getApptStatusHistory() == null)
				theatreAppointment.setApptStatusHistory(new Appointment_StatusVoCollection());
			theatreAppointment.getApptStatusHistory().add(admittedStatus);
		}

		// Return updated Patient Elective List
		return patientElectiveList;
	}

	private boolean isAdmissionDateInBreachOfRule28Days(DateTime admissionDateTime, PatientElectiveListBedAdmissionVo patientElectiveList)
	{
		if (admissionDateTime == null)
			return false;
		
		if (patientElectiveList.getRule28DayPeriodStart() == null)
			return false;
		
		if (admissionDateTime.getDate().isGreaterThan(patientElectiveList.getRule28DayPeriodStart().addDay(RULE_28_DAYS_PERIOD)))
			return true;
		
		return false;
	}
	
	
	/**
	 * This function will return true if the admission id done from an emergency tab
	 * @return
	 */
	private boolean isEmergencyAdmission()
	{
		if (form.lyrPatient().tabPageED().isVisible())
			return true;
		
		if (form.lyrPatient().tabPagePendingEmergencies().isVisible())
			return true;
		
		if (form.lyrPatient().tabPagePatientSearch().isVisible())
			return true;
		
		if (form.lyrPatient().tabPageWardAttenders().isVisible())
			return true;

		// TODO: To be implemented
//		if (form.lyrPatient().tabPagePendingEmergencyTheatre())
//			return true;

		return false;
	}




	//WDEV-20222  -- start	
	@Override
	protected void onImbHealthyLodgerClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.HealthyLodgerDetails);		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.HealthyLodgerDetails))
		{
			if (form.getGlobalContext().Core.getHealthyLodgerDetails() == null)
				form.chkHealthyLodger().setValue(false);
			if (DialogResult.OK.equals(result))
				updateControlsState(form.getLocalContext().getAdmitMode());
		}		
	}

	@Override
	protected void onChkHealthyLodgerValueChanged()	throws PresentationLogicException
	{
		if (!form.chkHealthyLodger().getValue())
		{	
			form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		}
		else
		{	
			engine.open(form.getForms().Core.HealthyLodgerDetails);
		}
		updateControlsState(form.getLocalContext().getAdmitMode());		
	}


	@Override
	protected void onRadioButtonGroupPEA_WardValueChanged() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);

		// Perform ward attenders search
		if (validateSearchCriteria())
			presentPendingEmergenciesTab(true);

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());

	}


	@Override
	protected void onImbClearPEAClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);

		// Clear Pending Emergency page
		clearPendingEmergencyTab();

		// Clear instance controls
		clearInstanceControls();

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onImbFindPEAClick() throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);		
		
		if (validateSearchCriteria())
			presentPendingEmergenciesTab(true);
		
		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onChkPEATodayOnlyValueChanged()	throws PresentationLogicException
	{
		if (form.lyrPatient().tabPagePendingEmergencies().chkPEATodayOnly().getValue())
		{
    		// Set TCI dates to current day
    		form.lyrPatient().tabPagePendingEmergencies().dtePEA_From().setValue(new Date());
    		form.lyrPatient().tabPagePendingEmergencies().dtePEA_To().setValue(new Date());
    		
    		// Perform search
    		if (validateSearchCriteria())
    			presentPendingEmergenciesTab(false);
		}

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	@Override
	protected void onDtePEA_FromValueChanged()	throws PresentationLogicException 
	{
		// Reset 'Today Only' check box
		form.lyrPatient().tabPagePendingEmergencies().chkPEATodayOnly().setValue(false);

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());

	}


	@Override
	protected void onDtePEA_ToValueChanged() throws PresentationLogicException
	{
		// Reset 'Today Only' check box
		form.lyrPatient().tabPagePendingEmergencies().chkPEATodayOnly().setValue(false);

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());		
	}


	@Override
	protected void onRadioButtonGroupTCI_WardValueChanged()	throws PresentationLogicException
	{
		// Clear Patient selection
		form.getLocalContext().setSelectedPatient(null);

		// Perform ward attenders search
		performTCISearch(true);

		// Update controls state
		updateControlsState(form.getLocalContext().getAdmitMode());
	}
	
	//WDEV-20222   -- ends here


	
	private CareSpellAdmitVo getCreateCareSpell(PasEventAdmitVo pasEvent)
	{
		DateTime admisssionDateTime = form.dtimAdmitDateTime().getValue();
		Date estimatedDischargeDate = form.dtimEstDischargeDateTime().getValue() != null ? form.dtimEstDischargeDateTime().getValue().getDate() : null;
		MedicLiteVo consultant = form.qmbConsultant().getValue();
		
		if (form.lyrPatient().tabPageED().isVisible())
		{
			// Get the record to admit
			TrackingForPendingEmergencyAdmitVo pendingAdmissionED = (TrackingForPendingEmergencyAdmitVo) form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getValue();
			
			if (pendingAdmissionED == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending ED Emergency Admission should have been selected at this point.");
			
			PatientLite_IdentifiersVo patient = pendingAdmissionED.getPatient();

			// Create the Care Spell, Episode of Care and the two Care Contexts for pending admission
			CareSpellAdmitVo careSpell				= createCareSpell(patient, admisssionDateTime);
			EpisodeOfCareAdmitVo episodeOfCare		= createEpisodeOfCare(careSpell, admisssionDateTime, consultant, form.cmbSpecialty().getValue());
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextReferral	= createCareContext(episodeOfCare, ContextType.REFERRAL, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient	= createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null); 
			
			return careSpell;
		}
		else if (form.lyrPatient().tabPagePendingEmergencies().isVisible())
		{
			// Get the record to admit
			CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergencyAdmission = (CatsReferralPendingEmergencyNonEDAdmissionListVo) form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getValue();
			
			if (pendingEmergencyAdmission == null)
				throw new CodingRuntimeException("LOGIC ERROR - A Pending Emergency Admission should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the pending admission
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingEmergencyAdmission);
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			
			return careSpell;
		}
		else if (form.lyrPatient().tabPageTCI().isVisible())
		{
			// Get the record to admit
			PatientElectiveListBedInfoVo pendingElectiveTCI = (PatientElectiveListBedInfoVo) form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getValue();
			
			if (pendingElectiveTCI == null)
				throw new CodingRuntimeException("LOGIC ERROR - An Elective TCI should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the pending Elective TCI
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingElectiveTCI.getReferral());
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			
			return careSpell;
		}
		else if (form.lyrPatient().tabPageWardAttenders().isVisible())
		{
			// Get the record to admit
			BookAppointmentForWardAttendersVo pendingWardAttender = (BookAppointmentForWardAttendersVo) form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getValue();
			
			if (pendingWardAttender == null)
				throw new CodingRuntimeException("LOGIC ERROR - A Ward Attender should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the Ward Attenders
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingWardAttender);
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			
			return careSpell;
		}
		else if (form.lyrPatient().tabPagePatientSearch().isVisible())		// This is actually the Patient Search & Emergency Admit tab
		{
			// Get the Patient for emergency admission (patient search & admit)
			PatientLite_IdentifiersVo patient = (PatientLite_IdentifiersVo) form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getValue();
			
			if (patient == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Patient should have been selected at this point.");

			// Create the Care Spell, Episode of Care and the two Care Contexts for pending admission
			CareSpellAdmitVo careSpell				= createCareSpell(patient, admisssionDateTime);
			EpisodeOfCareAdmitVo episodeOfCare		= createEpisodeOfCare(careSpell, admisssionDateTime, consultant, form.cmbSpecialty().getValue());
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextReferral	= createCareContext(episodeOfCare, ContextType.REFERRAL, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient	= createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null); 

			return careSpell;
		}
		else if (form.lyrPatient().tabPagePatientDetails().isVisible())
		{
			//Patient already selected
			IPendingAdmissionDetails iPending = form.getGlobalContext().Core.getSelectionAdmitToWard();
			PatientLite_IdentifiersVo patient = domain.getPatientLite(form.getGlobalContext().Core.getSelectionAdmitToWard() != null ? domain.getPatientLite(form.getGlobalContext().Core.getSelectionAdmitToWard().getPatient()) : null);
			CareSpellAdmitVo careSpell	= null;
			
			if (patient == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Patient should have been selected at this point.");
						
			if (AdmitToWardAdmissionType.PENDING_ED.equals(form.getGlobalContext().Core.getSelectedAdmissionTypeAdmitToWard()))
			{
				// Create the Care Spell, Episode of Care and the two Care Contexts for pending admission
				careSpell				= createCareSpell(patient, admisssionDateTime);
				EpisodeOfCareAdmitVo episodeOfCare		= createEpisodeOfCare(careSpell, admisssionDateTime, consultant, form.cmbSpecialty().getValue());
				@SuppressWarnings("unused")
				CareContextAdmitVo careContextReferral	= createCareContext(episodeOfCare, ContextType.REFERRAL, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
				@SuppressWarnings("unused")
				CareContextAdmitVo careContextInpatient	= createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			}
			else if (AdmitToWardAdmissionType.PENDING_TCI.equals(form.getGlobalContext().Core.getSelectedAdmissionTypeAdmitToWard()))
			{
				// Retrieve the existing Care Spell for the pending Elective TCI
				careSpell = domain.getCareSpellForAdmission(iPending.getCatsReferral());
				// Get the relevant Episode of Care
				EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
				// Create the INPATIENT care context
				@SuppressWarnings("unused")
				CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			}
			else if (AdmitToWardAdmissionType.PENDING_EMERGENCY.equals(form.getGlobalContext().Core.getSelectedAdmissionTypeAdmitToWard()))
			{
				// Retrieve the existing Care Spell for the pending admission
				careSpell = domain.getCareSpellForAdmission(iPending.getCatsReferral());
				// Get the relevant Episode of Care
				EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
				// Create the INPATIENT care context
				@SuppressWarnings("unused")
				CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);		
			}		
			return careSpell;
		}
		// TODO: TO BE CODED
//		else if (form.lyrPatient().tabPagePendingEmergencyTheatre().isVisible())			// This is the Pending Emergency Theatre
//		{
//			// Get the record to admit
//			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrPatient().tabPagePendingEmergencyTheatre().grdPET().getValue();
//			
//			if (pendingEmergencyTheatre == null)
//				throw new CodingRuntimeException("LOGICAL ERROR - A Pending Emergency Theatre should have been selected at this point.");
//			
//			// Retrieve the existing Care Spell for the Pending Emergency Theatre
//			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingEmergencyTheatre.getCatsReferral());
//			// Get the relevant Episode of Care
//			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
//			// Create the INPATIENT care context
//			@SuppressWarnings("unused")
//			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
//			
//			return careSpell;
//		}

		// If we reach this point then the function needs to be updated for tabs added
		throw new CodingRuntimeException("LOGICAL ERROR - Was a new tab added? If so, then please provide the additional code for it.");
	}

	
	private CatsReferralEmergencyAdmissionVo getCreateCatsReferral(AdmissionDetailVo admission, CareSpellAdmitVo careSpell)
	{
		if (form.lyrPatient().tabPageED().isVisible())
		{
			TrackingForPendingEmergencyAdmitVo pendingAdmissionED = (TrackingForPendingEmergencyAdmitVo) form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getValue();
			
			if (pendingAdmissionED == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending ED Emergency Admission should have been selected at this point.");
			
			PatientLite_IdentifiersVo patient = pendingAdmissionED.getPatient();
			
			return createCatsReferral(patient, admission, careSpell);
		}
		else if (form.lyrPatient().tabPagePendingEmergencies().isVisible())
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergency = (CatsReferralPendingEmergencyNonEDAdmissionListVo) form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getValue();
			
			if (pendingEmergency == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending Emergency Admission should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingEmergency);
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		else if (form.lyrPatient().tabPageTCI().isVisible())
		{
			PatientElectiveListBedInfoVo pendingElectiveTCI = (PatientElectiveListBedInfoVo) form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getValue();
			
			if (pendingElectiveTCI == null)
				throw new CodingRuntimeException("LOGICAL ERROR - An Elective TCI should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingElectiveTCI.getReferral());
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		else if (form.lyrPatient().tabPageWardAttenders().isVisible())
		{
			BookAppointmentForWardAttendersVo pendingWardAttender = (BookAppointmentForWardAttendersVo) form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getValue();
			
			if (pendingWardAttender == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A WardAttender should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingWardAttender);
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		else if (form.lyrPatient().tabPagePatientSearch().isVisible())				// This actually is the Patient Search & Emergency Admit tab
		{
			PatientLite_IdentifiersVo patient = (PatientLite_IdentifiersVo) form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getValue();
			
			if (patient == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Patient should have been selected at this point.");
			
			return createCatsReferral(patient, admission, careSpell);
		}
		else if (form.lyrPatient().tabPagePatientDetails().isVisible())
		{
			//Patient already selected
			IPendingAdmissionDetails iPending = form.getGlobalContext().Core.getSelectionAdmitToWard();
			PatientLite_IdentifiersVo patient = domain.getPatientLite(iPending != null ? domain.getPatientLite(iPending.getPatient()) : null);
			CatsReferralEmergencyAdmissionVo referral = null;
			
			if (patient == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Patient should have been selected at this point.");
			
			if (AdmitToWardAdmissionType.PENDING_ED.equals(form.getGlobalContext().Core.getSelectedAdmissionTypeAdmitToWard()))
			{
				referral =  createCatsReferral(patient, admission, careSpell);
			}
			else if (AdmitToWardAdmissionType.PENDING_TCI.equals(form.getGlobalContext().Core.getSelectedAdmissionTypeAdmitToWard()))
			{
				referral = domain.getReferralForAdmission(iPending.getCatsReferral());
				referral.getAdmissions().add(admission);
			}
			else if (AdmitToWardAdmissionType.PENDING_EMERGENCY.equals(form.getGlobalContext().Core.getSelectedAdmissionTypeAdmitToWard()))
			{
				referral = domain.getReferralForAdmission(iPending.getCatsReferral());
				referral.getAdmissions().add(admission);				
			}
			
			return referral;
		}
		
		// TODO: TO BE CODED
//		else if (form.lyrPatient().tabPagePendingEmergencyTheatre().isVisible())					// This is the Pending Emergency Theatre tab
//		{
//			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrPatient().tabPagePendingEmergencyTheatre().grdPET().getValue();
//			
//			if (pendingEmergencyTheatre == null)
//				throw new CodingRuntimeException("LOGICAL ERROR - A Pending Emergency Theatre should have been selected at this point.");
//			
//			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingEmergencyTheatre.getCatsReferral());
//			referral.getAdmissions().add(admission);
//			
//			return referral;
//		}
		
		// If we reach this point then the function needs to be updated for tabs added
		throw new CodingRuntimeException("LOGICAL ERROR - Was a new tab added? If so, then please provide the additional code for it.");
	}

	
	/**
	 * Function used to create the CareSpell for admission
	 * @param patient
	 * @param startDateTime
	 * @return
	 */
	private CareSpellAdmitVo createCareSpell(PatientRefVo patient, DateTime startDateTime)
	{
		CareSpellAdmitVo careSpell = new CareSpellAdmitVo();

		careSpell.setPatient(patient);
		careSpell.setStartDate(startDateTime.getDate());
		careSpell.setEndDate(null);

		CareSpellStatusHistoryVo firstStatus = new CareSpellStatusHistoryVo();
		firstStatus.setStatus(ProblemGroupStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		careSpell.setCurrentStatus(firstStatus);
		careSpell.setStatusHistory(new CareSpellStatusHistoryVoCollection());
		careSpell.getStatusHistory().add(firstStatus);
		
		return careSpell;
	}


	private EpisodeOfCareAdmitVo createEpisodeOfCare(CareSpellAdmitVo careSpell, DateTime startDateTime, HcpRefVo responsibleHCP, Specialty specialty)
	{
		EpisodeOfCareAdmitVo episodeOfCare = new EpisodeOfCareAdmitVo();
		
		episodeOfCare.setStartDate(startDateTime.getDate());
		episodeOfCare.setEndDate(null);

		episodeOfCare.setCareSpell(careSpell);
		episodeOfCare.setRelationship(CareSpelltoEpisodeRelationship.PRIMARY);

		episodeOfCare.setSpecialty(specialty);
		episodeOfCare.setResponsibleHCP(responsibleHCP);		
		
		EpisodeOfCareStatusHistoryVo firstStatus = new EpisodeOfCareStatusHistoryVo();
		firstStatus.setStatus(EpisodeOfCareStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		episodeOfCare.setCurrentStatus(firstStatus);
		episodeOfCare.setStatusHistory(new EpisodeOfCareStatusHistoryVoCollection());
		episodeOfCare.getStatusHistory().add(firstStatus);
		
		if (careSpell.getEpisodes() == null) careSpell.setEpisodes(new EpisodeOfCareAdmitVoCollection());
		careSpell.getEpisodes().add(episodeOfCare);
		
		return episodeOfCare;
	}
	
	
	private CareContextAdmitVo createCareContext(EpisodeOfCareAdmitVo episodeOfCare, ContextType contextType, PasEventAdmitVo pasEvent, DateTime startDateTime, Date estimatedDischargeDate, HcpRefVo responsibleHCP, ContactLocation locationType, String bedNumber)
	{
		CareContextAdmitVo careContext = new CareContextAdmitVo();
		
		careContext.setContext(contextType);
		
		careContext.setStartDateTime(startDateTime);
		careContext.setEndDateTime(null);
		
		careContext.setResponsibleHCP(responsibleHCP);
		careContext.setEpisodeOfCare(episodeOfCare);
		
		careContext.setPasEvent(pasEvent);
		careContext.setBedNumber(bedNumber);
		careContext.setEstimatedDischargeDate(estimatedDischargeDate);
		
		CareContextStatusHistoryVo firstStatus = new CareContextStatusHistoryVo();
		firstStatus.setStatus(CareContextStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		careContext.setCurrentStatus(firstStatus);
		careContext.setStatusHistory(new CareContextStatusHistoryVoCollection());
		careContext.getStatusHistory().add(firstStatus);
		
		if (episodeOfCare.getCareContexts() == null) episodeOfCare.setCareContexts(new CareContextAdmitVoCollection());
		episodeOfCare.getCareContexts().add(careContext);
		
		return careContext;
	}

	private String getCCGCode(PatientWithGPForCCGVo patient)//WDEV-22214
	{
		if (patient == null)
			return null;
		
		if (!Boolean.TRUE.equals(ConfigFlag.DOM.GP_USE_SURGERIES.getValue()))
		{
			// 1 - Patient.Gp.practices.practice (with isDefault).PCTCode (this is a CCG so no lookup of CCGPCTPCCodes needed) 
			// 2 - Patient.Gp.practices.practice (with isDefault).Address.Postcode
			if (patient.getGp() != null && patient.getGp().getPractices() != null)
			{
				for (GpToPracticesVo gpToPractice : patient.getGp().getPractices())
				{
					if (Boolean.TRUE.equals(gpToPractice.getIsPrimaryPractice()))
					{
						// Case 1
						if (gpToPractice.getPractice() != null && gpToPractice.getPractice().getPctCode() != null)
							return gpToPractice.getPractice().getPctCode();
						
						// Case 2
						if (gpToPractice.getPractice() != null && gpToPractice.getPractice().getAddress() != null)
						{
							String codeCCG = domain.getCodeCCGFromPostalCode(gpToPractice.getPractice().getAddress().getPostCode());
							if (codeCCG != null) return codeCCG;
						}
					}
						
				}
			}
		}
			
		// 3 - Patient.gpSurgery.address.postcode
		if (patient.getGpSurgery() != null && patient.getGpSurgery().getAddress() != null)
		{
			String codeCCG = domain.getCodeCCGFromPostalCode(patient.getGpSurgery().getAddress().getPostCode());
			if (codeCCG != null) return codeCCG;
		}
		
		//4 - if overseas visitor, use designated code
		if (Boolean.TRUE.equals(patient.getOverseasVisitor())) 
			return OVERSEAS_VISITOR_CCG;
		
		// 5 -  Patient.Address.PCT(CCG) or Post code - if no post code on record use default codes for CCG // //WDEV-20585
		if (patient.getAddress() != null)
		{
			String codeCCG =  null;
			
			if (patient.getAddress().getPctCode() != null)
			{	
				codeCCG = patient.getAddress().getPctCode();
			}			
			else
			{
				codeCCG = domain.getCodeCCGFromPostalCode(patient.getAddress().getPostCode());
			}
			
			if (codeCCG != null) return codeCCG;
		}
		
		//6 - current user's organisation
		if (engine.getCurrentLocation() != null)
		{
			String codeCCG = domain.getCCGCodeForCurrentLocationOrg(engine.getCurrentLocation());
			if (codeCCG != null)
				return codeCCG;
		}
		
		return RESIDENCE_NOT_KNOWN_CCG;
	}
	private CatsReferralEmergencyAdmissionVo createCatsReferral(PatientLite_IdentifiersVo patient, AdmissionDetailVo admission, CareSpellAdmitVo careSpell)
	{
		if (careSpell == null || careSpell.getEpisodes() == null || careSpell.getEpisodes().size() < 1
				|| careSpell.getEpisodes().get(0).getCareContexts() == null)
			throw new CodingRuntimeException("Invalid care spell created.");
		
		CatsReferralEmergencyAdmissionVo referral = new CatsReferralEmergencyAdmissionVo();
		
		referral.setPatient(patient);
		
		for (CareContextAdmitVo careContext : careSpell.getEpisodes().get(0).getCareContexts())
		{
			if (ContextType.REFERRAL.equals(careContext.getContext()))
			{
				referral.setCareContext(careContext);
				referral.setEpisodeOfCare(careSpell.getEpisodes().get(0));
				break;
			}
		}
		
		//WDEV-22214
		PatientWithGPForCCGVo patientWithGP = domain.getPatientForCCG(patient);
		String codeCCG = getCCGCode(patientWithGP);
		
		CatsReferralStatusVo referralStatus = new CatsReferralStatusVo();
		referralStatus.setReferralStatus(ReferralApptStatus.REFERRAL_ACCEPTED);
		referralStatus.setStatusDateTime(new DateTime());
		referralStatus.setAuthoringUser((MemberOfStaffRefVo) domain.getMosUser());
		referral.setCurrentStatus(referralStatus);
		referral.setStatusHistory(new CATSReferralStatusRefVoCollection());
		referral.getStatusHistory().add(referralStatus);

		referral.setContract(null);
		referral.setHasAppointments(false);
		
		referral.setAdmissions(new AdmissionDetailVoCollection());
		referral.getAdmissions().add(admission);
		
			ReferralDetailsEmergencyAdmissionVo referralDetails = new ReferralDetailsEmergencyAdmissionVo();
			referralDetails.setReferrerType(form.cmbSourceOfReferral().getValue() != null ? form.cmbSourceOfReferral().getValue() : SourceOfReferral.ED);
			referralDetails.setService(admission.getService());
			referralDetails.setConsultant(domain.getHcpFromIMos(admission.getConsultant()));
			referralDetails.setAuthoringUser((MemberOfStaffRefVo) domain.getMosUser());
			referralDetails.setAuthoringDateTime(new DateTime());
			//referralDetails.setDateReferralReceived(new Date());WDEV-22688
			referralDetails.setDateOfReferral(new Date());
			referralDetails.setEnd18WW(null);
			referralDetails.setPCT(codeCCG);
		
		referral.setReferralDetails(referralDetails);
		referral.setIsEmergencyReferral(Boolean.TRUE);
		referral.setUrgency(ReferralUrgency.EMERGENCY); //WDEV-22229
		
		return referral;
	}


	private EpisodeOfCareAdmitVo getRelevantEpisodeOfCare(CareSpellAdmitVo careSpell, ContextType contextType)
	{
		// Check for Care Spell - this is mandatory
		if (careSpell == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Care Spell cannot be null at this point.");
		
		if (contextType == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Context Type is mandatory.");
		
		// Check for Care Spell to have episodes
		if (careSpell.getEpisodes() == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Care Spell is invalid. It should have the Episode of Care populated.");
		
		for (EpisodeOfCareAdmitVo episodeOfCare : careSpell.getEpisodes())
		{
			if (episodeOfCare.getCareContexts() == null)
				throw new CodingRuntimeException("LOGICAL ERROR - Care Spell is invalid. The Episode of Care should have the Care Context.");
			
			for (CareContextAdmitVo careContext : episodeOfCare.getCareContexts())
			{
				if (contextType.equals(careContext.getContext()))
					return episodeOfCare;
			}
		}
		
		// If no Episode of Care was found at this point then it's a breach in execution logic
		throw new CodingRuntimeException("LOGICAL ERROR - Care Spell is invalid. An Episode of Care with should have been found at this point");
	}

	//WDEV-21331
	@Override
	protected void onDyngrd_TCI_AdmissionsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getRows().size() < 2)
			return;
		toggleSortOrder(column.getIdentifier(),form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getID());
		PatientElectiveListBedInfoVoCollection coll = getTCIValuesFromGrid();
		Object selVal = form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getValue();
		
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_AGE))
		{		
			coll.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionAgeComparator(form.getLocalContext().getSortOrderTCIAge()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_DOB))
		{			
			coll.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionDOBComparator(form.getLocalContext().getSortOrderTCIDOB()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_TCI_DATE_TIME))
		{		
			coll.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionTCIDateTimeComparator(form.getLocalContext().getSortOrderTCIDateTime()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_TCI_COMMENTS))
		{			
			coll.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionTCICommentsComparator(form.getLocalContext().getSortOrderTCIComments()));
		}
		
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions(), AdmitToWardHelper.DYNAMIC_GRID_MODE_TCI, (IPendingAdmissionCollection)coll);
		if (selVal != null)
		{
			form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().setValue(selVal);
		}
		updateControlsState(form.getLocalContext().getAdmitMode());
	}


	private void toggleSortOrder(Object identifier, int gridID)
	{
		int pendingEDID = form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getID();				
		int patientSearchID = form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getID();				
		int tCIID = form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getID();			
		int pendingEmergID = form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getID();				
		int wardAttID = form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getID();

		switch ((Integer)identifier)
		{
		case AdmitToWardHelper.COL_TCI_DATE_TIME:
			form.getLocalContext().setSortOrderTCIAge(null);
			form.getLocalContext().setSortOrderTCIDOB(null);
			form.getLocalContext().setSortOrderTCIDateTime(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIDateTime()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			form.getLocalContext().setSortOrderTCIComments(null);
			break;
		case AdmitToWardHelper.COL_ED_LOS:
			form.getLocalContext().setSortOrderLOS(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderLOS()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			form.getLocalContext().setSortOrderEDAge(null);
			form.getLocalContext().setSortOrderEDDOB(null);
			break;

		case AdmitToWardHelper.COL_TCI_COMMENTS:
			form.getLocalContext().setSortOrderTCIComments(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIComments()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			form.getLocalContext().setSortOrderTCIDateTime(null);
			form.getLocalContext().setSortOrderTCIAge(null);
			form.getLocalContext().setSortOrderTCIDOB(null);
			break;
		case AdmitToWardHelper.COL_PATIENT_AGE:
			if (gridID == pendingEDID)
			{
				form.getLocalContext().setSortOrderEDAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEDAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderLOS(null);
				form.getLocalContext().setSortOrderEDDOB(null);
			}
			else if (gridID == patientSearchID)
			{
				form.getLocalContext().setSortOrderPatientAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPatientAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderPatientDOB(null);
			}
			else if (gridID == pendingEmergID)
			{
				form.getLocalContext().setSortOrderPEAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPEAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderPEDOB(null);
			}
			else if (gridID == tCIID)
			{
				form.getLocalContext().setSortOrderTCIAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderTCIComments(null);
				form.getLocalContext().setSortOrderTCIDateTime(null);
				form.getLocalContext().setSortOrderTCIDOB(null);
			}
			else if (gridID == wardAttID)
			{
				form.getLocalContext().setSortOrderWardAttenderAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderWardAttenderAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderWardAttenderDOB(null);
			}
			break;
		case AdmitToWardHelper.COL_PATIENT_DOB:
			if (gridID == pendingEDID)
			{
				form.getLocalContext().setSortOrderEDDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEDDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderLOS(null);
				form.getLocalContext().setSortOrderEDAge(null);
			}
			else if (gridID == patientSearchID)
			{
				form.getLocalContext().setSortOrderPatientDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPatientDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderPatientAge(null);
			}
			else if (gridID == pendingEmergID)
			{
				form.getLocalContext().setSortOrderPEDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPEDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderPEAge(null);
			}
			else if (gridID == tCIID)
			{
				form.getLocalContext().setSortOrderTCIDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderTCIAge(null);
				form.getLocalContext().setSortOrderTCIComments(null);
				form.getLocalContext().setSortOrderTCIDateTime(null);
			}
			else if (gridID == wardAttID)
			{
				form.getLocalContext().setSortOrderWardAttenderAge(null);
				form.getLocalContext().setSortOrderWardAttenderDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderWardAttenderDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			break;	
		default:
			break;
		}		
	}
	
	
	
	private PatientElectiveListBedInfoVoCollection getTCIValuesFromGrid()
	{
		PatientElectiveListBedInfoVoCollection collValues = new PatientElectiveListBedInfoVoCollection();
		
		for (int i=0;i<form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getRows().size();i++)
		{
			if (form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getRows().get(i).getValue() instanceof IPendingAdmission)
				collValues.add((PatientElectiveListBedInfoVo) form.lyrPatient().tabPageTCI().dyngrd_TCI_Admissions().getRows().get(i).getValue());
		}
		return collValues;
	}
	
	
	
	private TrackingForPendingEmergencyAdmitVoCollection getEDValuesFromGrid()
	{
		TrackingForPendingEmergencyAdmitVoCollection collValues = new TrackingForPendingEmergencyAdmitVoCollection();
		
		for (int i=0;i<form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getRows().size();i++)
		{
			if (form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getRows().get(i).getValue() instanceof IPendingAdmission)
				collValues.add((TrackingForPendingEmergencyAdmitVo) form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getRows().get(i).getValue());
		}
		return collValues;
	}
	private CatsReferralPendingEmergencyNonEDAdmissionListVoCollection getPendingEDValuesFromGrid()
	{
		CatsReferralPendingEmergencyNonEDAdmissionListVoCollection collValues = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();
		
		for (int i=0;i<form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getRows().size();i++)
		{
			if (form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getRows().get(i).getValue() instanceof IPendingAdmission)
				collValues.add((CatsReferralPendingEmergencyNonEDAdmissionListVo) form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getRows().get(i).getValue());
		}
		return collValues;
	}
	private BookAppointmentForWardAttendersVoCollection getWardAttendersValuesFromGrid()
	{
		BookAppointmentForWardAttendersVoCollection collValues = new BookAppointmentForWardAttendersVoCollection();
		
		for (int i=0;i<form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getRows().size();i++)
		{
			if (form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getRows().get(i).getValue() instanceof IPendingAdmission)
				collValues.add((BookAppointmentForWardAttendersVo) form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getRows().get(i).getValue());
		}
		return collValues;
	}
	private PatientLite_IdentifiersVoCollection getPatientValuesFromGrid()
	{
		PatientLite_IdentifiersVoCollection collValues = new PatientLite_IdentifiersVoCollection();
		
		for (int i=0;i<form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getRows().size();i++)
		{
			if (form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getRows().get(i).getValue() instanceof IPendingAdmission)
				collValues.add((PatientLite_IdentifiersVo)form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getRows().get(i).getValue());
		}
		return collValues;
	}

	@Override
	protected void onDyngrd_ED_Pending_AdmissionsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getRows().size() < 2)
			return;
		toggleSortOrder(column.getIdentifier(),form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getID());
		TrackingForPendingEmergencyAdmitVoCollection values = getEDValuesFromGrid();
		Object selVal = form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().getValue();
		
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_AGE))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionAgeComparator(form.getLocalContext().getSortOrderEDAge()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_DOB))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionDOBComparator(form.getLocalContext().getSortOrderEDDOB()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_ED_LOS))
		{
			values.sort(TrackingForPendingEmergencyAdmitVo.getLOSComparator(form.getLocalContext().getSortOrderLOS()));
		}
		
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions(), AdmitToWardHelper.DYNAMIC_GRID_MODE_ED, (IPendingAdmissionCollection)values);
		if (selVal != null)
		{
			form.lyrPatient().tabPageED().dyngrd_ED_Pending_Admissions().setValue(selVal);
		}
		updateControlsState(form.getLocalContext().getAdmitMode());		
	}

	@Override
	protected void onDyngrd_PendingEmergenciesColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getRows().size() < 2)
			return;
		toggleSortOrder(column.getIdentifier(),form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getID());
		CatsReferralPendingEmergencyNonEDAdmissionListVoCollection values = getPendingEDValuesFromGrid();
		Object selVal = form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().getValue();
		
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_AGE))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionAgeComparator(form.getLocalContext().getSortOrderPEAge()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_DOB))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionDOBComparator(form.getLocalContext().getSortOrderPEDOB()));
		}	
	
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies(), AdmitToWardHelper.DYNAMIC_GRID_MODE_PENDING_EMERGENCIES, (IPendingAdmissionCollection)values);
		if (selVal != null)
		{
			form.lyrPatient().tabPagePendingEmergencies().dyngrd_PendingEmergencies().setValue(selVal);
		}
		updateControlsState(form.getLocalContext().getAdmitMode());	
	}

	@Override
	protected void onDyngrd_WardAttendersColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getRows().size() < 2)
			return;
		toggleSortOrder(column.getIdentifier(),form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getID());
		BookAppointmentForWardAttendersVoCollection values = getWardAttendersValuesFromGrid();
		Object selVal = form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().getValue();
		
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_AGE))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionAgeComparator(form.getLocalContext().getSortOrderWardAttenderAge()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_DOB))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionDOBComparator(form.getLocalContext().getSortOrderWardAttenderDOB()));
		}	
	
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders(), AdmitToWardHelper.DYNAMIC_GRID_MODE_WARD_ATTENDERS, (IPendingAdmissionCollection)values);
		if (selVal != null)
		{
			form.lyrPatient().tabPageWardAttenders().dyngrd_WardAttenders().setValue(selVal);
		}
		updateControlsState(form.getLocalContext().getAdmitMode());	
	}

	@Override
	protected void onDyngrdPatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getRows().size() < 2)
			return;
		toggleSortOrder(column.getIdentifier(),form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getID());
		PatientLite_IdentifiersVoCollection values = getPatientValuesFromGrid();
		Object selVal = form.lyrPatient().tabPagePatientSearch().dyngrdPatients().getValue();
		
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_AGE))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionAgeComparator(form.getLocalContext().getSortOrderPatientAge()));
		}
		if (column.getIdentifier().equals(AdmitToWardHelper.COL_PATIENT_DOB))
		{
			values.sort(new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionDOBComparator(form.getLocalContext().getSortOrderPatientDOB()));
		}	
	
		AdmitToWardHelper.PopulateDynamicGrid(form.lyrPatient().tabPagePatientSearch().dyngrdPatients(), AdmitToWardHelper.DYNAMIC_GRID_MODE_PATIENT_SEARCH, (IPendingAdmissionCollection)values);
		if (selVal != null)
		{
			form.lyrPatient().tabPagePatientSearch().dyngrdPatients().setValue(selVal);
		}
		updateControlsState(form.getLocalContext().getAdmitMode());	
	}
	//WDEV-21331 --end
	

}
