//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdsgpdetailsindemographicscc;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CommChannelVo;
import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.GpToPracticesVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.OrganisationVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.PDSPatientGPVo;
import ims.core.vo.Patient;
import ims.core.vo.PersonAddress;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.enums.PatientDetailsTab;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.utils.textile.Textile;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	private static final String GP_NAME_DEMOGR 			= "DEM45";
	//------------------------------

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.GPSelection) && result.equals(DialogResult.OK))
		{
			
			Patient patient = form.getLocalContext().getPatient();
			
			if (patient == null)
				patient = new Patient();
			
			//WDEV-22036
			GpShortVo previousGP = patient.getGp();
			GpShortVo currentGP = form.getGlobalContext().Core.getGPDetails();
			
			if (previousGP != null && currentGP != null)
			{
				if (!previousGP.equals(currentGP))
					form.ccEffectiveDates().clear();
			}
			//WDEV-22036 ends here
			
			if (form.getGlobalContext().Core.getGPPracticeIsNotNull())
			{
				OrganisationWithSitesVo gpPractice = domain.getGPPractice(form.getGlobalContext().Core.getGPPractice());
				patient.setPractice(gpPractice);
				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
			}
			
			refreshGpDetails(form.getGlobalContext().Core.getGPDetails(), form.getGlobalContext().Core.getGPPracticeWithComm(), form.getGlobalContext().Core.getGPSurgery(), true/*!ConfigFlag.DOM.GP_USE_SURGERIES.getValue()*/);

			patient.setGp(form.getGlobalContext().Core.getGPDetails());
			if (form.getGlobalContext().Core.getGPSurgeryIsNotNull() && form.getGlobalContext().Core.getGPSurgery().getID_LocationIsNotNull())
				patient.setGpSurgery(form.getGlobalContext().Core.getGPSurgery());
			else
				patient.setGpSurgery(null);

			displayGp();
			
			form.getLocalContext().setPatient(patient);
			form.getLocalContext().setPatientDetailsTabAction(PatientDetailsTab.GPBUTTON);
			form.fireCustomControlValueChanged();
			
			//WDEV-21624
			//WDEV-22699
			/*if(patient.getGpIsNotNull())
			{
				//SDS lookup
				GpShortVo gp = patient.getGp();
				String sdsId = "";
				String sdsOrgId = "";
				String gpCode = "";
				
				if(gp.getCodeMappingsIsNotNull())
				{
					for(int i = 0; i < gp.getCodeMappings().size(); i++)
					{
						TaxonomyMap mapping = gp.getCodeMappings().get(i);
						
						if(TaxonomyType.SDSID.equals(mapping.getTaxonomyName()))
						{
							sdsId = mapping.getTaxonomyCode();
							//break;
						}
						
						if(TaxonomyType.NAT_GP_CODE.equals(mapping.getTaxonomyName()))
						{
							gpCode = mapping.getTaxonomyCode();
							//break;
						}

					}
				}
				
				if(patient.getPracticeIsNotNull() && patient.getPractice().getCodeMappingsIsNotNull())
				{
					for(int i = 0; i < patient.getPractice().getCodeMappings().size(); i++)
					{
						TaxonomyMap mapping = patient.getPractice().getCodeMappings().get(i);
						
						if(TaxonomyType.ICAB.equals(mapping.getTaxonomyName()))
						{
							sdsOrgId = mapping.getTaxonomyCode();
							break;
						}
					}
				}
				
				if((sdsId != null && sdsId.length() > 0) || (gpCode != null && gpCode.length() > 0) )
				{
					SdsRequestHelper sdsHelper = new SdsRequestHelper();
					SdsRequest sdsRequest = new SdsRequest();
					PdsRetrievalQueryHelper pds = new PdsRetrievalQueryHelper(domain);
					PDSConfigurationVo conf = pds.getPdsConfiguration();
					
					if(conf == null)
					{
						engine.showMessage("SDSHost and SDSPort must be configured on Patient Search Configuration screen in order to perform a GP/Practice SDS lookup.");
						return;
					}

					if(conf.getSDSHost() == null || conf.getSDSHost().length() == 0)
					{
						engine.showMessage("SDSHost must be configured on Patient Search Configuration screen in order to perform a GP/Practice SDS lookup.");
						return;
					}

					if(conf.getSDSPort() == null || conf.getSDSPort().length() == 0)
					{
						engine.showMessage("SDSPort must be configured on Patient Search Configuration screen in order to perform a GP/Practice SDS lookup.");
						return;
					}
					
					sdsRequest.setReferrerSdsId(sdsId);
					sdsRequest.setReferrerSdsOrgId(sdsOrgId);
					//WDEV-22699
					//sdsRequest.setReferrerGpCodeId(gpCode);
					
					try
					{
						sdsHelper.processSdsRequest(sdsRequest, conf.getSDSHost(), conf.getSDSPort(), true, gpCode); //WDEV-22855
					}
					catch (Exception e)
					{
			            String err = "Error processing SDS request for GP '" + gp.getName().toString()  + "': " + e.toString();

			            domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, err);
					}					
				}
				else
				{
					String err = "GP '" + gp.getName().toString()  + "' doesn't have a taxonomy mapping of type SDSID and therefore it is not possible to do a SDS lookup.";
					domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, err);
					
					if(patient.getPracticeIsNotNull() && sdsOrgId.length() == 0)
					{
						err = "Practice '" + patient.getPractice().getName()  + "' doesn't have a taxonomy mapping of type ICAB and therefore it is not possible to do a SDS lookup.";
						domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, err);
					}
				}
			}*/
		}
		else if (formName.equals(form.getForms().Admin.GPPracticeSelect) && result.equals(DialogResult.OK))
		{
			OrganisationWithSitesVo practice = form.getGlobalContext().Admin.getPractice();

			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();

			if (practice != null)
			{
				OrganisationWithSitesVo gpPractice = domain.getGPPractice(practice);
				patient.setPractice(gpPractice);
				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
				
				if(!isPds())
				{
					//remove GP if it doesn't belog to selected practice
					GpShortVo gp = form.getGlobalContext().Core.getGPDetails();
					
					if(form.txtGPName().getValue() != null && form.txtGPName().getValue().length() > 0 && gp != null)
					{
						if(gp.getPracticesIsNotNull())
						{
							boolean practiceFound = false;
							for(int i = 0; i < gp.getPractices().size(); i++)
							{
								GpToPracticesVo pr = gp.getPractices().get(i);
								
								if(pr.getPracticeIsNotNull() && gpPractice.getID_OrganisationIsNotNull() && gpPractice.getID_Organisation().equals(pr.getPractice().getID_Organisation()))
								{
									practiceFound = true;
									break;
								}
							}
							
							if(!practiceFound)
							{
								//clear the GP as it belongs to other practice
								form.getGlobalContext().Core.setGPDetails(null);
								
								if(form.getLocalContext().getPatientIsNotNull())
								{
									form.getLocalContext().getPatient().setGp(null);
								}

								form.txtGPName().setValue(null);
								form.txtGPName().setTooltip(null);
								form.imbGPSearch().setTooltip(null);	
								
								form.ccEffectiveDates().clear(); //WDEV-22036
							}
						}
					}
				}
				
				/*String sdsOrgId = "";
				if(practice.getCodeMappingsIsNotNull())
				{
					for(int i = 0; i < patient.getPractice().getCodeMappings().size(); i++)
					{
						TaxonomyMap mapping = patient.getPractice().getCodeMappings().get(i);
						
						if(TaxonomyType.ICAB.equals(mapping.getTaxonomyName()))
						{
							sdsOrgId = mapping.getTaxonomyCode();
							break;
						}
					}
				}
				
				//SDS lookup
				if(sdsOrgId != null && sdsOrgId.length() > 0)
				{
					SdsRequestHelper sdsHelper = new SdsRequestHelper();
					SdsRequest sdsRequest = new SdsRequest();
					PdsRetrievalQueryHelper pds = new PdsRetrievalQueryHelper(domain);
					PDSConfigurationVo conf = pds.getPdsConfiguration();
					
					if(conf == null)
					{
						engine.showMessage("SDSHost and SDSPort must be configured on Patient Search Configuration screen in order to perform a GP/Practice SDS lookup.");
						return;
					}

					if(conf.getSDSHost() == null || conf.getSDSHost().length() == 0)
					{
						engine.showMessage("SDSHost must be configured on Patient Search Configuration screen in order to perform a GP/Practice SDS lookup.");
						return;
					}

					if(conf.getSDSPort() == null || conf.getSDSPort().length() == 0)
					{
						engine.showMessage("SDSPort must be configured on Patient Search Configuration screen in order to perform a GP/Practice SDS lookup.");
						return;
					}
					
					sdsRequest.setReferrerSdsOrgId(sdsOrgId);
					
					try
					{
						sdsHelper.processSdsRequest(sdsRequest, conf.getSDSHost(), conf.getSDSPort(), false, null); //WDEV-22855
					}
					catch (Exception e)
					{
			            String err = "Error processing SDS request for Practice '" + practice.getName()  + "': " + e.toString();

			            domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, err);
					}					
				}
				else
				{
					String err = "Practice '" + practice.getName()  + "' doesn't have a taxonomy mapping of type ICAB and therefore it is not possible to do a SDS lookup.";
					
					domain.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, err);
				}
				*/
				
			}
			
			refreshGpDetails(form.getGlobalContext().Core.getGPDetails(), form.getGlobalContext().Core.getGPPracticeWithComm(), form.getGlobalContext().Core.getGPSurgery(), true/*!ConfigFlag.DOM.GP_USE_SURGERIES.getValue()*/);
			
			//WDEV-22720
			form.getLocalContext().setPatient(patient);
			form.fireCustomControlValueChanged();
			//WDEV-22720
			
		}
	}
	
	protected void onImbClearGPClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setGPSurgery(null);
		form.getGlobalContext().Core.setGPDetails(null);
		
		if(form.getLocalContext().getPatientIsNotNull())
		{
			form.getLocalContext().getPatient().setGp(null);
			form.getLocalContext().getPatient().setGpSurgery(null); 
		}

		clearControls();
		
		form.getLocalContext().setPatientDetailsTabAction(PatientDetailsTab.GPCLEARGPBUTTON);
		form.fireCustomControlValueChanged();
	}

	protected void onimbGPSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		/*
		if (form.getMode().equals(FormMode.VIEW))
			engine.open(form.getForms().Core.GPDetails);
		else if (form.getMode().equals(FormMode.EDIT))
		{
			if(form.getGlobalContext().Admin.getPractice() != null)
				form.getGlobalContext().Core.setFilterGpByPractice(form.getGlobalContext().Admin.getPractice());
			else if(form.getGlobalContext().Core.getGPPracticeWithComm() != null)
				form.getGlobalContext().Core.setFilterGpByPractice(form.getGlobalContext().Core.getGPPracticeWithComm());
				
			engine.open(form.getForms().Core.GPSelection);
		}
		*/
	}
	private void refreshGpDetails(GpShortVo gp, OrganisationWithSitesVo gpPractice, LocSiteShortVo gpSurgery, boolean usePractice)
	{
		if (usePractice) //WDEV-16051
		{
			form.getGlobalContext().Core.setGPDetails(gp);

			if(gpPractice != null)
			{
    			form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
    			form.txtGPPractice().setValue(gpPractice.getName());
    			form.txtGPPractice().setTooltip(gpPractice.getName());
			}

			if (gp != null)
			{
				form.txtGPName().setValue(gp.getName().toString());
				form.txtGPName().setTooltip(gp.getName().toString());
				

				// Because some of the patients may not have the field Practice saved yet in the BO, we will display the first practice - as it used to work
				if (gpPractice == null && gp.getPracticesIsNotNull() && gp.getPractices().size() > 0 && gp.getPractices().get(0) != null && gp.getPractices().get(0).getPracticeIsNotNull())
				{
					gpPractice = gp.getPractices().get(0).getPractice();
				}

				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
				form.txtGPPractice().setValue(gpPractice != null ? gpPractice.getName() : ""); //WDEV-23345
				form.txtGPPractice().setTooltip(gpPractice != null ? gpPractice.getName() : "");
			}
			else
			// wdev-12889
			{
				if (gpSurgery != null)
				{
					LocSiteVo tempVo = domain.getLocationSite(gpSurgery);
					if (tempVo != null)
					{
						OrganisationVo orgVo = tempVo.getParentOrganisation();
						if (orgVo != null)
						{
							form.txtGPPractice().setValue(orgVo.getName());
							form.txtGPPractice().setTooltip(orgVo.getName());
						}

					}
				}
			}

			form.imbGPSearch().setTooltip(getGpTooltip(gp, gpPractice, gpSurgery, usePractice));
		}
		else
		{
			form.getGlobalContext().Core.setGPDetails(gp);
			form.getGlobalContext().Core.setGPSurgery(gpSurgery);
			
			form.imbGPSearch().setTooltip(getGpTooltip(gp, gpPractice, gpSurgery, false));
			if (gpSurgery != null)
			{
				form.txtGPPractice().setValue(gpSurgery.getName());
				form.txtGPPractice().setTooltip(gpSurgery.getName());
			}
			if (gp != null)
			{
				form.txtGPName().setValue(gp.getName().toString());
				form.txtGPName().setTooltip(gp.getName().toString());
			}
		}
		
		updateGpSearchStatus();
	}
	private String getGpTooltip(GpShortVo gp, OrganisationWithSitesVo gpPractice, LocSiteShortVo gpSurgery, boolean usePractice)
	{
		if (gp == null)
		{
			return "No GP Details";
		}

		StringBuffer sbGPDetails = new StringBuffer();
		if (gp.getNameIsNotNull())
		{
			sbGPDetails.append(Textile.setBold("GP DETAILS") + "\r" + Textile.setBold("GP Name: ") + gp.getName().toString());
			form.txtGPName().setValue(gp.getName().toString());
			form.txtGPName().setTooltip(gp.getName().toString());
		}

		if (!usePractice)
		{
			LocShortVo surgery = gpSurgery;
			if (surgery != null)
			{
				if (surgery.getAddressIsNotNull() && isAddressDetailsNotNullOrEmpty(surgery.getAddress())) //WDEV-20006
				{
					//WDEV-15527
					sbGPDetails.append("\n" + Textile.setBold("Surgery Address: "));
					//WDEV-15527
					if (surgery.getAddress().getLine1IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine1());
					if (surgery.getAddress().getLine2IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine2());
					if (surgery.getAddress().getLine3IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine3());
					if (surgery.getAddress().getLine4IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine4());
					if (surgery.getAddress().getLine5IsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getLine5());
					if (surgery.getAddress().getPostCodeIsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getPostCode());
					if (surgery.getAddress().getCountyIsNotNull())
						sbGPDetails.append("\n" + surgery.getAddress().getCounty());
				}

				// WDEV-13614
				if (gp.getCommChannelsIsNotNull())
				{
					CommChannelVo gpWorkPhone = gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
					CommChannelVo gpFax = gp.getCommChannels().getCommunicationChannel(ChannelType.FAX);

					// WORK PHONE
					if (gpWorkPhone != null && gpWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Phone: ") + gpWorkPhone.toString());
					}
					else if (gpSurgery.getCommChannelsIsNotNull())
					{
						CommChannelVo surgeryWork = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

						if (surgeryWork != null && surgeryWork.getCommValueIsNotNull())
						{
							sbGPDetails.append("\n" + Textile.setBold("Surgery Phone: ") + surgeryWork.toString());
						}
					}

					// FAX NUMBER
					if (gpFax != null && gpFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Fax: ") + gpFax);
					}
					else if (gpSurgery.getCommChannelsIsNotNull())
					{
						CommChannelVo surgeryFax = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.FAX);

						if (surgeryFax != null && surgeryFax.getCommValueIsNotNull())
						{
							sbGPDetails.append("\n" + Textile.setBold("Surgery Fax: ") + surgeryFax);
						}
					}

				}
				else if (gpSurgery.getCommChannelsIsNotNull())
				{
					CommChannelVo surgeryFax = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.FAX);
					CommChannelVo surgeryWork = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

					if (surgeryWork != null && surgeryWork.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Surgery Phone: ") + surgeryWork.toString());
					}

					if (surgeryFax != null && surgeryFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Surgery Fax: ") + surgeryFax);
					}

				}
			}
		}
		else
		{
			if (gp.getPracticesIsNotNull() && gpPractice != null)
			{
				if (gpPractice.getAddressIsNotNull() && isAddressDetailsNotNullOrEmpty(gpPractice.getAddress())) //WDEV-20006
				{
					//WDEV-15527
					sbGPDetails.append("\n" + Textile.setBold("Practice Address: "));
					//WDEV-15527
					if (gpPractice.getAddress().getLine1IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine1());
					if (gpPractice.getAddress().getLine2IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine2());
					if (gpPractice.getAddress().getLine3IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine3());
					if (gpPractice.getAddress().getLine4IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine4());
					if (gpPractice.getAddress().getLine5IsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine5());
					if (gpPractice.getAddress().getPostCodeIsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getPostCode());
					if (gpPractice.getAddress().getCountyIsNotNull())
						sbGPDetails.append("\n" + gpPractice.getAddress().getCounty());
				}

				// WDEV-13614 //WDEV-16051
				if (gpPractice.getCommChannelsIsNotNull())
				{
					// WORK PHONE
					CommChannelVo gpWorkPhone = gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
					CommChannelVo practiceWorkPhone = gpPractice.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

					if (gpWorkPhone != null && gpWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Phone: ") + gpWorkPhone.toString());
					}
					else if (practiceWorkPhone != null && practiceWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Practice Phone: ") + practiceWorkPhone.toString());
					}

					// FAX NUMBER
					CommChannelVo gpFax = gp.getCommChannels().getCommunicationChannel(ChannelType.FAX);
					CommChannelVo practiceFax = gpPractice.getCommChannels().getCommunicationChannel(ChannelType.FAX);

					if (gpFax != null && gpFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Fax: ") + gpFax.getCommValue());
					}
					else if (practiceFax != null && practiceFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Practice Fax: ") + practiceFax.getCommValue());
					}
				}
			}
		}

		return new Textile().process(sbGPDetails.toString());
	}
	//WDEV-20006
	private boolean isAddressDetailsNotNullOrEmpty(PersonAddress address)
	{
		if ((address.getLine1IsNotNull() && address.getLine1().length() > 0) ||
			(address.getLine2IsNotNull() && address.getLine2().length() > 0) ||
			(address.getLine3IsNotNull() && address.getLine3().length() > 0) ||
			(address.getLine4IsNotNull() && address.getLine4().length() > 0) ||
			(address.getLine5IsNotNull() && address.getLine5().length() > 0) ||
			(address.getPostCodeIsNotNull() && address.getPostCode().length() > 0) ||
			address.getAreaOfResidenceIsNotNull() ||
			address.getCountyIsNotNull())
				return true;
		return false;
	}
	//WDEV-20006 ---- ends here.
	
	public PatientDetailsTab getAction()
	{
		return form.getLocalContext().getPatientDetailsTabAction();
	}

	
	public void setAction(PatientDetailsTab action)
	{
		form.getLocalContext().setPatientDetailsTabAction(action);	
	}
	
	public void showHideGPButton(Boolean showhide)
	{
		form.imbGPSearch().setVisible(showhide);
	}
	
	public void requiredGPName(Boolean requir)
	{
		form.txtGPName().setRequired(requir);
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		/*
		if( form.getMode().equals(FormMode.VIEW))
		{			
			if( form.getGlobalContext().Core.getGPDetails() == null)
				form.imbGPSearch().setVisible(false);
		}
		else
			form.imbGPSearch().setVisible(true);	//wdev-19472
		*/	
		
		form.ccEffectiveDates().setEnabled(form.getMode().equals(FormMode.EDIT));
		updateGpSearchStatus();
	}

	
	public void setvalue(Patient pat)
	{
		populateScreenFromData(pat);
		form.getLocalContext().setPatient(pat);
		if( form.getGlobalContext().Core.getGPDetailsIsNotNull())
		{
			displayGp();
		}
		
	}
	
	private void populateScreenFromData(Patient pat)
	{
		if( pat == null )
			return;
		
		refreshGpDetails(pat.getGp(),pat.getPractice(), pat.getGpSurgery(), true/*!ConfigFlag.DOM.GP_USE_SURGERIES.getValue()*/);
		//form.cmbHealthBoard().setValue(pat.getHealthBoard());	//wdev-19176
		
		if(pat.getPDSPatientGPIsNotNull())
		{
			form.ccEffectiveDates().setEffectiveDates(pat.getPDSPatientGP().getBeffdate(), pat.getPDSPatientGP().getBetdate());
		}
		
		form.getLocalContext().setPrevPractice(pat.getPractice());
		
		updateGpSearchStatus();
	}

	
	public Boolean validateGPDetails()
	{
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			//WDEV-13424 
			if(form.txtGPName().getValue()==null || form.txtGPName().getValue()==""){
				engine.showMessage("Please enter the Registered GP Name.");
				return false;
			}
		}
		
		return true;
	}
	
	public void initialize()
	{
		if(isPds())
		{
			form.txtGPPractice().setRequired(true);
		}
	}
	
	private void displayGp()
	{
		clearControls();

		if (form.getGlobalContext().Core.getGPDetails() == null)
			return;

		if (form.getGlobalContext().Core.getGPDetails().getNameIsNotNull())
		{
			form.txtGPName().setValue(form.getGlobalContext().Core.getGPDetails().getName().toString());
			form.txtGPName().setTooltip(form.getGlobalContext().Core.getGPDetails().getName().toString());
		}

		// WDEV-15527
		//if (!ConfigFlag.DOM.GP_USE_SURGERIES.getValue())
		{
			if (form.getGlobalContext().Core.getGPPracticeWithCommIsNotNull()) //WDEV-16051
			{
				OrganisationWithSitesVo practice = form.getGlobalContext().Core.getGPPracticeWithComm();
				displayPracticeAddress(practice);
			}

			form.lblSurgeryName().setValue("Practice Name:");
		}
		/*
		else if (form.getGlobalContext().Core.getGPSurgeryIsNotNull())
		{
			// WDEV-15527
			displaySurgeryAddress();
		}
		*/
		
		if(form.getGlobalContext().Core.getGPDetails().getCodeMappingsIsNotNull())
		{
			TaxonomyMapCollection mappings = form.getGlobalContext().Core.getGPDetails().getCodeMappings();
			
			for(int i = 0; i < mappings.size(); i++)
			{
				if(TaxonomyType.CCG.equals(mappings.get(i).getTaxonomyName()))
				{
					form.txtCCG().setValue(mappings.get(i).getTaxonomyCode());
					break;
				}
			}
		}
		
		if((form.txtCCG().getValue() == null || form.txtCCG().getValue().length() == 0) && form.getGlobalContext().Core.getGPPracticeWithCommIsNotNull())
		{
			form.txtCCG().setValue(form.getGlobalContext().Core.getGPPracticeWithComm().getPctCode());
		}
	}
	private void clearControls()
	{
		
	}

	private void displayPracticeAddress(OrganisationWithSitesVo practice)
	{
	}

	public void clearScreen()
	{
		form.txtGPName().setValue(null);
		form.txtGPName().setTooltip(null);
		form.txtGPPractice().setValue(null);
		form.txtGPPractice().setTooltip(null);
		form.ccEffectiveDates().clear();
		
		clearControls();
		
		form.getGlobalContext().Core.setGPSurgery(null);
		form.getGlobalContext().Core.setGPDetails(null);
		form.getGlobalContext().Admin.setPractice(null);
	}

	public Patient getPatientWithGPetails()
	{
		return form.getLocalContext().getPatient();
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
	}

	//wdev-19528
	public void setConfigurableFields(DemographicControlsConfigVoCollection collfields)
	{
		if( collfields == null || collfields.size() == 0)
			return;
		
		for(int i = 0; i < collfields.size(); i++ )
		{
			DemographicControlsConfigVo tempVo = collfields.get(i); 
			if( tempVo != null )
			{
				if( GP_NAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtGPName().setRequired(tempVo.getIsMandatory());
					break;
				}
			}
		}
		
	}

	//wdev-19528
	public String[] getUIErrorsForConfigurableMode(Boolean skipGP)
	{
		ArrayList<String> errors = new ArrayList<String>();

//		if( form.txtGPName().isVisible() && form.txtGPName().isRequired() && (form.txtGPName().getValue() == null || form.txtGPName().getValue() == ""))
//		{
//			errors.add("GP Name is mandatory.");
//		}
		
		
		if (form.ccEffectiveDates().getDateFrom() != null && form.ccEffectiveDates().getDateTo() != null)
		{
			if (form.ccEffectiveDates().getDateFrom().isGreaterThan(form.ccEffectiveDates().getDateTo()))
			{
				errors.add("GP Practice - Effective from is after Effective to.");
			}
		}
		
		if(isPds() && (form.txtGPPractice().getValue() == null || form.txtGPPractice().getValue().length() == 0))
		{
			errors.add("Practice is mandatory.");
		}
		
		if(!Boolean.TRUE.equals(skipGP))
		{
    		if (form.txtGPName().isVisible() && form.txtGPName().isRequired() && (form.txtGPName().getValue() == null || form.txtGPName().getValue().length() == 0))
    		{
    			errors.add("GP Name is mandatory.");
    		}
		}
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	@Override
	protected void onImbPracticeSearchClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Admin.GPPracticeSelect);
	}

	@Override
	protected void onImbGPSearchClick() throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if(form.getGlobalContext().Admin.getPractice() != null)
				form.getGlobalContext().Core.setFilterGpByPractice(form.getGlobalContext().Admin.getPractice());
			else if(form.getGlobalContext().Core.getGPPracticeWithComm() != null)
				form.getGlobalContext().Core.setFilterGpByPractice(form.getGlobalContext().Core.getGPPracticeWithComm());
			
			engine.open(form.getForms().Core.GPSelection);
		}
		else
			engine.open(form.getForms().Core.GPDetails);
	}

	@Override
	protected void onBtnGPDetailsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.PatientGpHistory);
	}

	@Override
	public Boolean validateData(java.util.ArrayList<String> errors, Boolean skipGP)
	{
		//need to clarify this as we may have practice or surgery
		/*
		if (form.getGlobalContext().Core.getGPPracticeIsNotNull() && form.getLocalContext().getPrevPracticeIsNotNull())
		{
			if (!form.getGlobalContext().Core.getGPPractice().getID_Organisation().equals(form.getLocalContext().getPrevPractice().getID_Organisation()))
			{
				engine.showErrors(new String[] {"GP Updates are allowed, only if the practice is the same."});
				return false;
			}
		}
		*/
			String[] UIErrors = getUIErrorsForConfigurableMode(skipGP);
			
			if(UIErrors != null)
			{
				if(errors != null)
				{
					for(String err: UIErrors)
					{
						errors.add(err);
					}
				}
				else
				{
					engine.showErrors(UIErrors);
				}
				
				return false;
			}
			
			return true;
	}

	@Override
	public void populateDataFromScreen(Patient patient)
	{
		if (form.getGlobalContext().Core.getGPPracticeIsNotNull())
		{
			OrganisationWithSitesVo gpPractice = domain.getGPPractice(form.getGlobalContext().Core.getGPPractice());
			patient.setPractice(gpPractice);
		}
		
		patient.setGp(form.getGlobalContext().Core.getGPDetails());
		
		if (form.getGlobalContext().Core.getGPSurgeryIsNotNull() && form.getGlobalContext().Core.getGPSurgery().getID_LocationIsNotNull())
			patient.setGpSurgery(form.getGlobalContext().Core.getGPSurgery());
		else
			patient.setGpSurgery(null);

		OrganisationWithSitesVo practice = form.getGlobalContext().Admin.getPractice();
		if (practice != null)
		{
			OrganisationWithSitesVo gpPractice = domain.getGPPractice(practice);
			patient.setPractice(gpPractice);
		}
		
		if(form.txtGPName().getValue() == null || form.txtGPName().getValue().length() == 0)
			patient.setGp(null);
		if(form.txtGPPractice().getValue() == null || form.txtGPPractice().getValue().length() == 0)
			patient.setPractice(null);

		if(patient.getPDSPatientGP() == null && 
				patient.getGp() == null &&
				patient.getPractice() == null &&
				 form.ccEffectiveDates().getDateFrom() == null &&
				 form.ccEffectiveDates().getDateTo() == null)
		{
			//nothing to change
			return;
		}
		
		if(patient.getPDSPatientGP() == null)
			patient.setPDSPatientGP(new PDSPatientGPVo());
		
		patient.getPDSPatientGP().setGp(patient.getGp());
		patient.getPDSPatientGP().setPractice(patient.getPractice());
		patient.getPDSPatientGP().setBeffdate(form.ccEffectiveDates().getDateFrom());
		patient.getPDSPatientGP().setBetdate(form.ccEffectiveDates().getDateTo());
	}

	void updateGpSearchStatus()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(isPds())
				form.imbGPSearch().setVisible(form.getGlobalContext().Admin.getPractice() != null || form.getGlobalContext().Core.getGPPracticeWithComm() != null);
			else
				form.imbGPSearch().setVisible(true);
			
			form.imbClearGp().setVisible(form.getGlobalContext().Core.getGPDetails() != null || form.getGlobalContext().Admin.getPractice() != null || form.getGlobalContext().Core.getGPPracticeWithComm() != null);
			
			if(isPds())
				form.imbPracticeSearch().setVisible(form.txtGPPractice().getValue() == null || form.txtGPPractice().getValue().length() == 0);
				//form.imbPracticeSearch().setVisible(form.getGlobalContext().Admin.getPractice() == null && form.getGlobalContext().Core.getGPPracticeWithComm() == null);
			else
				form.imbPracticeSearch().setVisible(true);
		}
		//form.btnGPDetails().setVisible(form.getGlobalContext().Core.getGPDetails() != null);
	}

	@Override
	protected void onImbClearGpClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setGPSurgery(null);
		form.getGlobalContext().Core.setGPDetails(null);
		form.getGlobalContext().Admin.setPractice(null);
		form.getGlobalContext().Core.setGPPracticeWithComm(null);
		
		if(form.getLocalContext().getPatientIsNotNull())
		{
			form.getLocalContext().getPatient().setGp(null);
			form.getLocalContext().getPatient().setGpSurgery(null);
			form.getLocalContext().getPatient().setPractice(null);
		}
				
		form.txtGPName().setValue(null);
		form.txtGPName().setTooltip(null);
		form.txtGPPractice().setValue(null);
		form.txtCCG().setValue(null);
		form.txtGPPractice().setTooltip(null);
		form.imbGPSearch().setTooltip(null);
		clearControls();
		
		//WDEV-21864
		form.ccEffectiveDates().clear();
		
		//form.imbPracticeSearch().setVisible(true);
		form.imbGPSearch().setVisible(false);
		
		form.getGlobalContext().Core.setFilterGpByPractice(null);
		
		updateGpSearchStatus();
	}
	
	private boolean isPds()
	{
		return !"None".equals(ConfigFlag.DOM.USE_PDS.getValue());
	}

	public void showHideGPDetailsButton(Boolean showHide)
	{
		form.btnGPDetails().setVisible(showHide);
	}
	
	public void setPDSMandatoryFields(Boolean mandatory)
	{
		form.txtGPName().setRequired(mandatory);
	}


}
