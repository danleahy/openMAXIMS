//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.filmtrackingtransferdialog;

import ims.core.vo.FilmPacketTransferVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo)domain.getMosUser();
		
		//WDEV-14885
		if (mos==null)
		{
			engine.close(DialogResult.CANCEL);
			engine.showMessage("Logged In User is not Member Of Staff");	
			return;
		}
		
		form.txtRecordingUser().setValue(mos != null && mos.getNameIsNotNull() ? mos.getName().toString() : "");
		form.dtimRecordingDT().setValue(new DateTime());

		form.dteDateSent().setNoFutureDates();
		
		if (form.getGlobalContext().Core.getFilmPacketTransferIsNotNull())
			populateScreenFormData(form.getGlobalContext().Core.getFilmPacketTransfer());
	}

	private void populateScreenFormData(FilmPacketTransferVo voFilm) 
	{
		form.txtTransferLocation().setValue(voFilm.getTransferLocation());
		form.dteDateSent().setValue(voFilm.getDateSent());
		form.txtComments().setValue(voFilm.getComment());
		form.dtimRecordingDT().setValue(voFilm.getRecordingDateTime());
		form.txtRecordingUser().setValue(voFilm.getRecordingUserIsNotNull() && voFilm.getRecordingUser().getNameIsNotNull() ? voFilm.getRecordingUser().getName().toString() : "");
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateSave())
		{
			FilmPacketTransferVo voFilm = form.getGlobalContext().Core.getFilmPacketTransfer();
			if (voFilm == null)
				voFilm = new FilmPacketTransferVo();
			
			voFilm.setTransferLocation(form.txtTransferLocation().getValue());
			voFilm.setDateSent(form.dteDateSent().getValue());
			voFilm.setComment(form.txtComments().getValue());
			voFilm.setRecordingDateTime(form.dtimRecordingDT().getValue());
			voFilm.setRecordingUser(new MemberOfStaffLiteVo(engine.getLoggedInUser().getMosId(),0));
			
			form.getGlobalContext().Core.setFilmPacketTransfer(voFilm);
			
			engine.close(DialogResult.OK);

		}
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private boolean validateSave() 
	{
		if (form.txtTransferLocation().getValue() == null
			|| form.dteDateSent().getValue() == null)
		{
			engine.showMessage("Please enter both a Location and a Date Sent");
			return false;
		}
		return true;
	}

}
