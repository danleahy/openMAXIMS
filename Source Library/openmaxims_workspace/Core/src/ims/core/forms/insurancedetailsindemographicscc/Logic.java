//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.insurancedetailsindemographicscc;

import java.util.ArrayList;

import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.core.vo.NationalHealthCoverVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientMedicalInsuranceVo;
import ims.core.vo.PrivateInsuranceCompanyVoCollection;
import ims.core.vo.lookups.PrivateInsurancePolicyType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	//wdev-19528
	private static final String EHIC_NUMBER_DEMOGR 			= "DEM31";
	private static final String EHIC_EXPIRY_DATE_DEMOGR 	= "DEM32";
	private static final String COUNTRY_DEMOGR 				= "DEM33";
	private static final String EHIC_INSTITUTION_DEMOGR 	= "DEM34";
	private static final String INSURER_DEMOGR 				= "DEM35";
	private static final String POLICY_NUMBER_DEMOGR 		= "DEM36";
	private static final String POLICY_TYPE_DEMOGR 			= "DEM37";
	private static final String OTHER_DEMOGR 				= "DEM38";
	private static final String RENEWAL_DATE_DEMOGR 		= "DEM39";
	private static final String MEDICAL_CARD_NO_DEMOGR 		= "DEM40";
	private static final String ELIG_FOR_MED_DEMOGR 		= "DEM41";
	private static final String EXPIRY_DATE_DEMOGR 			= "DEM42";
	private static final String PROVED_DEMOGR 				= "DEM43";
	private static final String ELIG_PROOF_DEMOGR 			= "DEM44";
	//------------

	@Override
	protected void onCmbPolicyTypeValueChanged() throws PresentationLogicException
	{
		if (!PrivateInsurancePolicyType.OTHER.equals(form.cmbPolicyType().getValue()))
			form.txtOther().setValue(null);
		
		updateControlsState();
	}

	
	public void setvalue(NationalHealthCoverVo insurance, PatientMedicalInsuranceVo patientmedicalinsurance)
	{
		form.getLocalContext().setInsuranceVo(insurance);
		form.getLocalContext().setPatientMedicalInsuranceVo(patientmedicalinsurance);
		populateScreenFromData(insurance,patientmedicalinsurance);
		
	}
	
	private void populateScreenFromData(NationalHealthCoverVo insurance, PatientMedicalInsuranceVo patientmedicalinsurance)
	{
		clearScreen();
		//populateInsuranceSchemeCombo();
		
		if( patientmedicalinsurance != null )
		{
			if( patientmedicalinsurance.getCompanyIsNotNull())
			{
    			if( form.cmbInsurer().getValues().contains(patientmedicalinsurance.getCompany()))
    				form.cmbInsurer().setValue(patientmedicalinsurance.getCompany());
    			else
    			{
    				form.cmbInsurer().newRow(patientmedicalinsurance.getCompany(), patientmedicalinsurance.getCompany().getIItemText());
    				form.cmbInsurer().setValue(patientmedicalinsurance.getCompany());
    			}
			}
			form.txtPolicyNumber().setValue(patientmedicalinsurance.getPolicyNumber());
			form.cmbPolicyType().setValue(patientmedicalinsurance.getPolicyType());
			form.txtOther().setValue(patientmedicalinsurance.getPlanOrUnits());
			form.dteRenewalDate().setValue(patientmedicalinsurance.getExpiryDate());
			
			if( !Boolean.TRUE.equals(form.getLocalContext().getIsCompanyConfigurable()))	//wdev-19528
				form.cmbInsurer().setRequired(true);		//wdev-19226
		}
		else
			if( !Boolean.TRUE.equals(form.getLocalContext().getIsCompanyConfigurable()))	//wdev-19528
				 form.cmbInsurer().setRequired(false);		//wdev-19226
		
		if( insurance != null )
		{
			form.txtMedicalCardNo().setValue(insurance.getMedicalCardNo());
			form.pdtExpiryDate().setValue(insurance.getMedicalCardExpiryDate());
			form.cmbElegibility().setValue(insurance.getHealthActCategory());
			form.cmbProved().setValue(insurance.getMedicalCardProved());
			form.txtEligibilityProof().setValue(insurance.getEligibilityProof());
			
			form.txtEHICNumber().setValue(insurance.getEHICNumber());
			form.pdtEHICExpiryDate().setValue(insurance.getEHICExpiryDate());
			form.cmbCountry().setValue(insurance.getEHICCountry());
			form.txtEHICInstitution().setValue(insurance.getEHICInstitution());
			
		}
	}
	private void populateInsuranceSchemeCombo()
	{
		form.cmbInsurer().clear();
		PrivateInsuranceCompanyVoCollection tempColl = domain.listPrivateInsuranceCompanyVo();
		if( tempColl != null && tempColl.size() > 0)
		{
			for(int  i = 0; i < tempColl.size(); i++)
			{
				form.cmbInsurer().newRow(tempColl.get(i), tempColl.get(i).getIItemText());
			}
		}
		 
		
	}
	
	// IMPORTANT!!!! If a field is added or removed from Insurance details please modify also the if statement that check if all fields are null 
	public NationalHealthCoverVo getInsuranceVo()
	{
		NationalHealthCoverVo insurance = form.getLocalContext().getInsuranceVo();
		if( insurance == null)
		{
			if( form.txtMedicalCardNo().getValue() == null && form.pdtExpiryDate().getValue() == null && form.cmbElegibility().getValue() == null && form.cmbProved().getValue() == null && form.txtEligibilityProof().getValue() == null && form.txtEHICNumber().getValue() == null && form.pdtEHICExpiryDate().getValue() == null && form.cmbCountry().getValue() == null && form.txtEHICInstitution().getValue() == null)  //wdev-19512
				return null;
			else
				insurance = new NationalHealthCoverVo();
		}
		
		insurance.setMedicalCardNo(form.txtMedicalCardNo().getValue());
		insurance.setMedicalCardExpiryDate(form.pdtExpiryDate().getValue());
		insurance.setHealthActCategory(form.cmbElegibility().getValue());
		insurance.setMedicalCardProved(form.cmbProved().getValue());
		insurance.setEligibilityProof(form.txtEligibilityProof().getValue());
		
		insurance.setEHICNumber(form.txtEHICNumber().getValue());
		insurance.setEHICExpiryDate(form.pdtEHICExpiryDate().getValue());
		insurance.setEHICCountry(form.cmbCountry().getValue());
		insurance.setEHICInstitution(form.txtEHICInstitution().getValue());
		
		return insurance;
	}

	
	public PatientMedicalInsuranceVo getPatientMedicalInsuranceVo(Patient pat)
	{
		PatientMedicalInsuranceVo tempVo = form.getLocalContext().getPatientMedicalInsuranceVo(); 
		if( tempVo == null)
		{
			if( form.cmbInsurer().getValue() != null || form.txtPolicyNumber().getValue() != null || form.cmbPolicyType().getValue() != null || form.txtOther().getValue() != null || form.dteRenewalDate().getValue() != null)
			{
				tempVo = new PatientMedicalInsuranceVo();
			}
			else
			{
				return null;
			}
		}
		tempVo.setPatient(pat);
		tempVo.setCompany(form.cmbInsurer().getValue());
		tempVo.setPolicyNumber(form.txtPolicyNumber().getValue());
		tempVo.setPolicyType(form.cmbPolicyType().getValue());
		tempVo.setPlanOrUnits(form.txtOther().getValue());
		tempVo.setExpiryDate(form.dteRenewalDate().getValue());
		
		if( !Boolean.TRUE.equals(form.getLocalContext().getIsCompanyConfigurable()))	//wdev-19528
			 form.cmbInsurer().setRequired(true);		//wdev-19226
		
		return tempVo;
	}
	
	public void clearScreen()
	{
		form.cmbInsurer().setValue(null);
		form.txtPolicyNumber().setValue(null);
		form.cmbPolicyType().setValue(null);
		form.txtOther().setValue(null);
		form.dteRenewalDate().setValue(null);
		
		form.txtMedicalCardNo().setValue(null);
		form.pdtExpiryDate().setValue(null);
		form.cmbElegibility().setValue(null);
		form.cmbProved().setValue(null);
		form.txtEligibilityProof().setValue(null);
		
		form.txtEHICNumber().setValue(null);
		form.pdtEHICExpiryDate().setValue(null);
		form.cmbCountry().setValue(null);
		form.txtEHICInstitution().setValue(null);
		
		
	}

	
	public void initialise()
	{
		form.cmbInsurer().clear();
		form.txtOther().setRequired(true);	//wdev-19528
		populateInsuranceSchemeCombo();
		form.getLocalContext().setIsCompanyConfigurable(null);	//wdev-19528
		
	}

	
	public void showHideMedicalCardPanel(Boolean showHide)
	{
		//form.pnlMedicalCard().setVisible(showHide);
		form.lblMedicalCard().setVisible(showHide);
		form.lblMedicalCarNo().setVisible(showHide);
		form.txtMedicalCardNo().setVisible(showHide);
		form.lblExpiryDate().setVisible(showHide);
		form.pdtExpiryDate().setVisible(showHide);
		form.lblEligibility().setVisible(showHide);
		form.lblcard().setVisible(showHide);
		form.cmbElegibility().setVisible(showHide);
		form.lblProved().setVisible(showHide);
		form.cmbProved().setVisible(showHide);
		form.lblEligibiltyProof().setVisible(showHide);
		form.txtEligibilityProof().setVisible(showHide);
	}
	private void updateControlsState()
	{
		form.txtMedicalCardNo().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.pdtExpiryDate().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.cmbElegibility().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.cmbProved().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.txtEligibilityProof().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.txtOther().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.txtOther().setVisible(PrivateInsurancePolicyType.OTHER.equals(form.cmbPolicyType().getValue()));
		form.lblOther().setVisible(PrivateInsurancePolicyType.OTHER.equals(form.cmbPolicyType().getValue()));
	}

	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	public Boolean validateInsuranceDetails()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (PrivateInsurancePolicyType.OTHER.equals(form.cmbPolicyType().getValue()) && form.txtOther().getValue() == null)
		{
			errors.add("Other policy type is mandatory.");
		}
			

		if( !form.getLocalContext().getInsuranceVoIsNotNull() )
		{
    		if( form.pdtEHICExpiryDate().getValue() != null && form.pdtEHICExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("EHIC Expiry Date cannot be in the past!");
    		}
    		if( form.pdtExpiryDate().getValue() != null && form.pdtExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("Expiry Date cannot be in the past!");
    		}
		}
		else
		{
			if( form.pdtEHICExpiryDate().getValue() != null && !form.pdtEHICExpiryDate().getValue().equals(form.getLocalContext().getInsuranceVo().getEHICExpiryDate()) && form.pdtEHICExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("EHIC Expiry Date cannot be in the past!");
    		}
    		if( form.pdtExpiryDate().getValue() != null && form.pdtExpiryDate().getValue().equals(form.getLocalContext().getInsuranceVo().getMedicalCardExpiryDate()) && form.pdtExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("Expiry Date cannot be in the past!");
    		}
		}
		
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			engine.showErrors(UIErrors);
			return false;
		}

		return true;
	}

	
	protected void onTxtRegistrationNumberValueChanged() throws PresentationLogicException
	{
		//form.cmbInsuranceScheme().setRequired(true);		//wdev-19226
		
	}

	
	protected void onDteRenewalDateValueChanged() throws PresentationLogicException
	{
		//form.cmbInsuranceScheme().setRequired(true);		//wdev-19226
		
	}

	
	protected void onTxtPlanTextValueChanged() throws PresentationLogicException
	{
		//form.cmbInsuranceScheme().setRequired(true);		//wdev-19226
		
	}

	//wdev-19226
	public Boolean isInsurerMandatory()
	{
		PatientMedicalInsuranceVo tempVo = form.getLocalContext().getPatientMedicalInsuranceVo(); 
		if( tempVo == null)
		{
			if( form.cmbInsurer().getValue() == null && (form.txtPolicyNumber().getValue() != null || form.cmbPolicyType().getValue() != null || form.txtOther().getValue() != null || form.dteRenewalDate().getValue() != null))
			{
				form.cmbInsurer().setRequired(true);
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			if( form.cmbInsurer().getValue() == null)
			{
				form.cmbInsurer().setRequired(true);
				return true;
			}
			else
				return false;
		}
	}


	//wdev-19528
	public void setConfigurableFields(DemographicControlsConfigVoCollection collfields)
	{
		if( collfields == null || collfields.size() == 0)
			return;
		
		form.getLocalContext().setIsCompanyConfigurable(Boolean.TRUE);
		
		for(int i = 0; i < collfields.size(); i++ )
		{
			DemographicControlsConfigVo tempVo = collfields.get(i); 
			if( tempVo != null )
			{
				if( EHIC_NUMBER_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtEHICNumber().setRequired(tempVo.getIsMandatory());
				}
				else if( EHIC_EXPIRY_DATE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.pdtEHICExpiryDate().setRequired(tempVo.getIsMandatory());
				}
				else if( COUNTRY_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbCountry().setRequired(tempVo.getIsMandatory());
				}
				else if( EHIC_INSTITUTION_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtEHICInstitution().setRequired(tempVo.getIsMandatory());
				}
				else if( INSURER_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbInsurer().setRequired(tempVo.getIsMandatory());
				}
				else if( POLICY_NUMBER_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtPolicyNumber().setRequired(tempVo.getIsMandatory());
				}
				else if( POLICY_TYPE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbPolicyType().setRequired(tempVo.getIsMandatory());
				}
				else if( OTHER_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtOther().setRequired(tempVo.getIsMandatory());
				}
				else if( RENEWAL_DATE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.dteRenewalDate().setRequired(tempVo.getIsMandatory());
				}
				else if( MEDICAL_CARD_NO_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtMedicalCardNo().setRequired(tempVo.getIsMandatory());
				}
				else if( ELIG_FOR_MED_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbElegibility().setRequired(tempVo.getIsMandatory());
				}
				else if( EXPIRY_DATE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.pdtExpiryDate().setRequired(tempVo.getIsMandatory());
				}
				else if( PROVED_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbProved().setRequired(tempVo.getIsMandatory());
				}
				else if( ELIG_PROOF_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtEligibilityProof().setRequired(tempVo.getIsMandatory());
				}

				
			}
		}
		
	}

	//wdev-19528
	public String[] getUIErrorsForConfigurableMode()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if( form.cmbInsurer().getVisible() && form.cmbInsurer().isRequired() && form.cmbInsurer().getValue() == null  )
		{
			errors.add("Insurer is mandatory.");
		}
		if( form.txtEHICNumber().isVisible() && form.txtEHICNumber().isRequired() && (form.txtEHICNumber().getValue() == null || form.txtEHICNumber().getValue() == ""))
		{
			errors.add("EHIC Number is mandatory.");
		}
		if( form.pdtEHICExpiryDate().isVisible() && form.pdtEHICExpiryDate().isRequired() &&  form.pdtEHICExpiryDate().getValue() == null)
		{
			errors.add("EHIC Expiry Date is mandatory.");
		}
		if( form.cmbCountry().getVisible() && form.cmbCountry().isRequired() &&  form.cmbCountry().getValue() == null)
		{
			errors.add("Country is mandatory.");
		}
		if( form.txtEHICInstitution().isVisible() && form.txtEHICInstitution().isRequired() && (form.txtEHICInstitution().getValue() == null || form.txtEHICInstitution().getValue() == ""))
		{
			errors.add("EHIC Institution is mandatory.");
		}
		if( form.cmbInsurer().getVisible() && form.cmbInsurer().isRequired() &&  form.cmbInsurer().getValue() == null)
		{
			errors.add("Insurer is mandatory.");
		}
		if( form.txtPolicyNumber().isVisible() && form.txtPolicyNumber().isRequired() && (form.txtPolicyNumber().getValue() == null || form.txtPolicyNumber().getValue() == ""))
		{
			errors.add("Policy Number is mandatory.");
		}
		if( form.cmbPolicyType().getVisible() && form.cmbPolicyType().isRequired() &&  form.cmbPolicyType().getValue() == null)
		{
			errors.add("Policy Type is mandatory.");
		}
		if( form.txtOther().isVisible() && form.txtOther().isRequired() && (form.txtOther().getValue() == null || form.txtOther().getValue() == ""))
		{
			errors.add("Other is mandatory.");
		}
		if( form.dteRenewalDate().isVisible() && form.dteRenewalDate().isRequired() &&  form.dteRenewalDate().getValue() == null)
		{
			errors.add("Renewal Date is mandatory.");
		}
		if( form.txtMedicalCardNo().isVisible() && form.txtMedicalCardNo().isRequired() && (form.txtMedicalCardNo().getValue() == null || form.txtMedicalCardNo().getValue() == ""))
		{
			errors.add("Medical Card No is mandatory.");
		}
		if( form.cmbElegibility().getVisible() && form.cmbElegibility().isRequired() &&  form.cmbElegibility().getValue() == null)
		{
			errors.add("Eligibility for medical card is mandatory.");
		}
		if( form.pdtExpiryDate().isVisible() && form.pdtExpiryDate().isRequired() &&  form.pdtExpiryDate().getValue() == null)
		{
			errors.add("Expiry Date is mandatory.");
		}
		if( form.cmbProved().getVisible() && form.cmbProved().isRequired() &&  form.cmbProved().getValue() == null)
		{
			errors.add("Proved is mandatory.");
		}
		if( form.txtEligibilityProof().isVisible() && form.txtEligibilityProof().isRequired() && (form.txtEligibilityProof().getValue() == null || form.txtEligibilityProof().getValue() == ""))
		{
			errors.add("Eligibility Proof is mandatory.");
		}
		
		if( !form.getLocalContext().getInsuranceVoIsNotNull() )
		{
    		if( form.pdtEHICExpiryDate().isVisible() && form.pdtEHICExpiryDate().getValue() != null && form.pdtEHICExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("EHIC Expiry Date cannot be in the past!");
    		}
    		if( form.pdtExpiryDate().isVisible() && form.pdtExpiryDate().getValue() != null && form.pdtExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("Expiry Date cannot be in the past!");
    		}
		}
		else
		{
			if( form.pdtEHICExpiryDate().isVisible() && form.pdtEHICExpiryDate().getValue() != null && !form.pdtEHICExpiryDate().getValue().equals(form.getLocalContext().getInsuranceVo().getEHICExpiryDate()) && form.pdtEHICExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("EHIC Expiry Date cannot be in the past!");
    		}
    		if( form.pdtExpiryDate().isVisible() && form.pdtExpiryDate().getValue() != null && form.pdtExpiryDate().getValue().equals(form.getLocalContext().getInsuranceVo().getMedicalCardExpiryDate()) && form.pdtExpiryDate().getValue().isLessThan(new Date()))
    		{
    			errors.add("Expiry Date cannot be in the past!");
    		}
		}
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
}
