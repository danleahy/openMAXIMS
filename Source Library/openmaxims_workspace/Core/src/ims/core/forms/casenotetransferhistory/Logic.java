//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotetransferhistory;

import ims.core.forms.casenotetransferhistory.GenForm.grdCaseNoteTransfersRow;
import ims.core.forms.casenotetransferhistory.GenForm.grdCaseNoteTransfersRowCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteRequestForTransferHistoryVo;
import ims.core.vo.PatientCaseNoteRequestForTransferHistoryVoCollection;
import ims.core.vo.PatientCaseNoteTransfersFilterVo;
import ims.core.vo.enums.MosType;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTimeFormat;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		// TODO 
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void open()
	{
		PatientCaseNoteTransfersFilterVo searchFilterVo = populateSearchFilter();
		if (searchIsValid(searchFilterVo))
			search(searchFilterVo,true);
		form.setMode(FormMode.VIEW);
		
	}

	private boolean searchIsValid(PatientCaseNoteTransfersFilterVo searchFilterVo)
	{
		clearSearchResultsAndResetLabel();
		
		if (searchFilterVo == null)
		{
			engine.showMessage("The search filter has not been initialized");
			return false;
		}
		if (searchFilterVo.validateDataRules() != null)
		{	
			StringBuilder str = new StringBuilder();
			for (int i=0;i<searchFilterVo.validateDataRules().length; i++)
			{
				str.append((searchFilterVo.validateDataRules())[i]);
			}
			engine.showMessage(str.toString(), "Invalid Search Criteria", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}
		return true;
	}
	private void search(PatientCaseNoteTransfersFilterVo searchFilterVo, boolean showNoRecordsMessage)
	{
		if (searchFilterVo == null)
			return;
		PatientCaseNoteRequestForTransferHistoryVoCollection resulList = domain.listTransfers(searchFilterVo);

		if (showNoRecordsMessage && (resulList == null || resulList.size() == 0))
		{
			engine.showMessage("No records were found.", "No Data Found",MessageButtons.OK, MessageIcon.INFORMATION);			
			return;
		}
		populateScreenFromData(resulList);	
		
	}
	private void populateScreenFromData(PatientCaseNoteRequestForTransferHistoryVoCollection list)
	{
		form.grdCaseNoteTransfers().getRows().clear();
		
		for (int i=0; i<list.size();i++)
		{
			if (list.get(i) == null)
				continue;
			addGridRow(list.get(i));
		}
		resetTotalLabel(list.size());
	}

	private void addGridRow(PatientCaseNoteRequestForTransferHistoryVo patientCaseNoteTransferVo)
	{
		if (patientCaseNoteTransferVo == null)
			return;
		
		 grdCaseNoteTransfersRow row = form.grdCaseNoteTransfers().getRows().newRow();
		
		 if (patientCaseNoteTransferVo.getCaseNoteTransfer() != null)
		 {	 
			 row.setColTransferDateTime(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferDate() != null ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferDate().toString(DateTimeFormat.STANDARD) : null);
			 row.setCellColTransferDateTimeTooltip(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferDate() != null ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferDate().toString(DateTimeFormat.STANDARD) :"");

			 row.setColTansferBy(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredByIsNotNull() ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredBy().getName().toString() : null);
			 row.setCellColTansferByTooltip(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredByIsNotNull() ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredBy().getName().toString() : null);

			 row.setColFromLocation(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredFromLocationIsNotNull() ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredFromLocation().getName() : null);
			 row.setCellColFromLocationTooltip(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredFromLocationIsNotNull() ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredFromLocation().getName() : "");

			 row.setColToLocation(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredToLocationIsNotNull() ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredToLocation().getName() : null);
			 row.setCellColToLocationTooltip(patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredToLocationIsNotNull() ? patientCaseNoteTransferVo.getCaseNoteTransfer().getTransferredToLocation().getName() :"");
			 
			 row.setColReason(patientCaseNoteTransferVo.getRequestReason() != null ? patientCaseNoteTransferVo.getRequestReason().getText() : null);
			 row.setCellColReasonTooltip(row.getColReason());
			 
			 if(patientCaseNoteTransferVo.getCaseNoteTransfer().getTansferComment() != null)
			 {
				 row.setColImage(form.getImages().Core.Comment16);
				 row.setCellColImageTooltip(patientCaseNoteTransferVo.getCaseNoteTransfer().getTansferComment().getComment());
			 }
		}
		 
		row.setColRequestedBy(patientCaseNoteTransferVo.getRequestedByIsNotNull() ? patientCaseNoteTransferVo.getRequestedBy().getName().toString() : null);
		row.setCellColRequestedByTooltip(patientCaseNoteTransferVo.getRequestedByIsNotNull() ? patientCaseNoteTransferVo.getRequestedBy().getName().toString() : "");
				
		row.setColRequestedDate(patientCaseNoteTransferVo.getRequestedDateIsNotNull() ? patientCaseNoteTransferVo.getRequestedDate().toString() : null);
		row.setCellColRequestedDateTooltip(patientCaseNoteTransferVo.getRequestedDateIsNotNull() ? patientCaseNoteTransferVo.getRequestedDate().toString():"");
		
		row.setValue(patientCaseNoteTransferVo);
	}

	private PatientCaseNoteTransfersFilterVo populateSearchFilter()
	{
		PatientCaseNoteTransfersFilterVo filterVo = new PatientCaseNoteTransfersFilterVo();
		
		filterVo.setPatientCaseNote(form.getGlobalContext().Core.getPatientCaseNoteFolderRef());
		filterVo.setRequestedBy((MemberOfStaffLiteVo) form.ccRequestedBy().getValue());
		filterVo.setTransferredBy((MemberOfStaffLiteVo) form.ccTransferredBy().getValue());
		filterVo.setLocation(form.qmbLoc().getValue());
		filterVo.setDateFrom(form.dteFrom().getValue());
		filterVo.setDateTo(form.dteTo().getValue());
		
		return filterVo;
		
	}
	private void initialize()
	{
		clearScreen();
		form.ccRequestedBy().initialize(MosType.ALL);
		form.ccTransferredBy().initialize(MosType.ALL);
		//form.ccTransferredBy().setValue(domain.getMosUser() != null ? (IMos) domain.getMosUser() : null); //WDEV-23271
		form.btnClose().setImage(form.getImages().Admin.CloseEnabled24);
		
	}
	private void clearScreen()
	{
		form.qmbLoc().clear();
		form.ccRequestedBy().clear();
		form.ccTransferredBy().clear();
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		clearSearchResultsAndResetLabel();
		
	}
	private void clearSearchResultsAndResetLabel()
	{
		grdCaseNoteTransfersRowCollection rows = form.grdCaseNoteTransfers().getRows();
		rows.clear();
		resetTotalLabel(rows.size());
	}

	private void resetTotalLabel(int rowCount) 
	{
		form.lblTotal().setValue("Total:  " + String.valueOf(rowCount) + (rowCount == 1 ? " record" : " records"));
		
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
	  	engine.close(DialogResult.OK);
	}
	@Override
	protected void onImbClearClick() throws PresentationLogicException 
	{
		clearScreen();
		
	}
	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		PatientCaseNoteTransfersFilterVo searchFilterVo = populateSearchFilter();
		if (searchIsValid(searchFilterVo))
			search(searchFilterVo,true);
		
	}
	@Override
	protected void onQmbLocTextSubmited(String value) throws PresentationLogicException
	{
		populateLocations(value);
		
	}
	private void populateLocations(String value)
	{
		if (value == null || value.length() == 0)
			return;

		form.qmbLoc().clear();

		LocationLiteVoCollection locList = domain.listCaseNoteFolderLocations(value);

		if (locList == null)
			return;

		for (int i=0;i<locList.size();i++)
		{
			if (locList.get(i) == null)
				continue;
			form.qmbLoc().newRow(locList.get(i), locList.get(i).getName());
			if (locList.size() == 1)
			{	
				form.qmbLoc().setValue(locList.get(0));
			}
			else
			{	
				form.qmbLoc().showOpened();
			}
		}		
	}
}
