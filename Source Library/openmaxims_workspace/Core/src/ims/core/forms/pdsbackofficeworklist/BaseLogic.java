//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.pdsbackofficeworklist;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.PDSBackOfficeWorklist.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.PDSBackOfficeWorklist domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbCurrentStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCurrentStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkStatus existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCurrentStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeWorkStatus)
		{
			ims.core.vo.lookups.PDSBackOfficeWorkStatus instance = (ims.core.vo.lookups.PDSBackOfficeWorkStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCurrentStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkStatus existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCurrentStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCurrentStatusLookup()
	{
		this.form.cmbCurrentStatus().clear();
		ims.core.vo.lookups.PDSBackOfficeWorkStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCurrentStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCurrentStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeWorkStatus instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCurrentStatus().setValue(instance);
	}
	protected final void defaultcmbCurrentStatusLookupValue()
	{
		this.form.cmbCurrentStatus().setValue((ims.core.vo.lookups.PDSBackOfficeWorkStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeWorkStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeWorkStatus.TYPE_ID));
	}
	protected final void oncmbDetailsAuthorityTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbDetailsAuthorityType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSRegisteringAuthorityType existingInstance = (ims.core.vo.lookups.PDSRegisteringAuthorityType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDetailsAuthorityTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSRegisteringAuthorityType)
		{
			ims.core.vo.lookups.PDSRegisteringAuthorityType instance = (ims.core.vo.lookups.PDSRegisteringAuthorityType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDetailsAuthorityTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSRegisteringAuthorityType existingInstance = (ims.core.vo.lookups.PDSRegisteringAuthorityType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbDetailsAuthorityType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDetailsAuthorityTypeLookup()
	{
		this.form.ctnDetails().cmbDetailsAuthorityType().clear();
		ims.core.vo.lookups.PDSRegisteringAuthorityTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSRegisteringAuthorityType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbDetailsAuthorityType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDetailsAuthorityTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PDSRegisteringAuthorityType instance = ims.core.vo.lookups.LookupHelper.getPDSRegisteringAuthorityTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbDetailsAuthorityType().setValue(instance);
	}
	protected final void defaultcmbDetailsAuthorityTypeLookupValue()
	{
		this.form.ctnDetails().cmbDetailsAuthorityType().setValue((ims.core.vo.lookups.PDSRegisteringAuthorityType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSRegisteringAuthorityType.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSRegisteringAuthorityType.TYPE_ID));
	}
	protected final void oncmbDetailsUpdateTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbDetailsUpdateType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSUpdateType existingInstance = (ims.core.vo.lookups.PDSUpdateType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDetailsUpdateTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSUpdateType)
		{
			ims.core.vo.lookups.PDSUpdateType instance = (ims.core.vo.lookups.PDSUpdateType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDetailsUpdateTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSUpdateType existingInstance = (ims.core.vo.lookups.PDSUpdateType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbDetailsUpdateType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDetailsUpdateTypeLookup()
	{
		this.form.ctnDetails().cmbDetailsUpdateType().clear();
		ims.core.vo.lookups.PDSUpdateTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSUpdateType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbDetailsUpdateType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDetailsUpdateTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PDSUpdateType instance = ims.core.vo.lookups.LookupHelper.getPDSUpdateTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbDetailsUpdateType().setValue(instance);
	}
	protected final void defaultcmbDetailsUpdateTypeLookupValue()
	{
		this.form.ctnDetails().cmbDetailsUpdateType().setValue((ims.core.vo.lookups.PDSUpdateType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSUpdateType.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSUpdateType.TYPE_ID));
	}
	protected final void oncmbDetailsOutcomeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbDetailsOutcome().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeOutcome existingInstance = (ims.core.vo.lookups.PDSBackOfficeOutcome)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDetailsOutcomeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeOutcome)
		{
			ims.core.vo.lookups.PDSBackOfficeOutcome instance = (ims.core.vo.lookups.PDSBackOfficeOutcome)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDetailsOutcomeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeOutcome existingInstance = (ims.core.vo.lookups.PDSBackOfficeOutcome)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbDetailsOutcome().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDetailsOutcomeLookup()
	{
		this.form.ctnDetails().cmbDetailsOutcome().clear();
		ims.core.vo.lookups.PDSBackOfficeOutcomeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeOutcome(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbDetailsOutcome().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDetailsOutcomeLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeOutcome instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeOutcomeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbDetailsOutcome().setValue(instance);
	}
	protected final void defaultcmbDetailsOutcomeLookupValue()
	{
		this.form.ctnDetails().cmbDetailsOutcome().setValue((ims.core.vo.lookups.PDSBackOfficeOutcome)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeOutcome.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeOutcome.TYPE_ID));
	}
	protected final void oncmbDetailsStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbDetailsStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkStatus existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDetailsStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeWorkStatus)
		{
			ims.core.vo.lookups.PDSBackOfficeWorkStatus instance = (ims.core.vo.lookups.PDSBackOfficeWorkStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDetailsStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkStatus existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbDetailsStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDetailsStatusLookup()
	{
		this.form.ctnDetails().cmbDetailsStatus().clear();
		ims.core.vo.lookups.PDSBackOfficeWorkStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbDetailsStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDetailsStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeWorkStatus instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbDetailsStatus().setValue(instance);
	}
	protected final void defaultcmbDetailsStatusLookupValue()
	{
		this.form.ctnDetails().cmbDetailsStatus().setValue((ims.core.vo.lookups.PDSBackOfficeWorkStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeWorkStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeWorkStatus.TYPE_ID));
	}
	protected final void oncmbDetailsPriorityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbDetailsPriority().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkPriority existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkPriority)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDetailsPriorityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeWorkPriority)
		{
			ims.core.vo.lookups.PDSBackOfficeWorkPriority instance = (ims.core.vo.lookups.PDSBackOfficeWorkPriority)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDetailsPriorityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkPriority existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkPriority)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbDetailsPriority().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDetailsPriorityLookup()
	{
		this.form.ctnDetails().cmbDetailsPriority().clear();
		ims.core.vo.lookups.PDSBackOfficeWorkPriorityCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkPriority(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbDetailsPriority().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDetailsPriorityLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeWorkPriority instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkPriorityInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbDetailsPriority().setValue(instance);
	}
	protected final void defaultcmbDetailsPriorityLookupValue()
	{
		this.form.ctnDetails().cmbDetailsPriority().setValue((ims.core.vo.lookups.PDSBackOfficeWorkPriority)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeWorkPriority.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeWorkPriority.TYPE_ID));
	}
	protected final void oncmbDetailsTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnDetails().cmbDetailsType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeType existingInstance = (ims.core.vo.lookups.PDSBackOfficeType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDetailsTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeType)
		{
			ims.core.vo.lookups.PDSBackOfficeType instance = (ims.core.vo.lookups.PDSBackOfficeType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDetailsTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeType existingInstance = (ims.core.vo.lookups.PDSBackOfficeType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnDetails().cmbDetailsType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDetailsTypeLookup()
	{
		this.form.ctnDetails().cmbDetailsType().clear();
		ims.core.vo.lookups.PDSBackOfficeTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnDetails().cmbDetailsType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDetailsTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeType instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnDetails().cmbDetailsType().setValue(instance);
	}
	protected final void defaultcmbDetailsTypeLookupValue()
	{
		this.form.ctnDetails().cmbDetailsType().setValue((ims.core.vo.lookups.PDSBackOfficeType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeType.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeType.TYPE_ID));
	}
	protected final void oncmbTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeType existingInstance = (ims.core.vo.lookups.PDSBackOfficeType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeType)
		{
			ims.core.vo.lookups.PDSBackOfficeType instance = (ims.core.vo.lookups.PDSBackOfficeType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeType existingInstance = (ims.core.vo.lookups.PDSBackOfficeType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTypeLookup()
	{
		this.form.cmbType().clear();
		ims.core.vo.lookups.PDSBackOfficeTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeType instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbType().setValue(instance);
	}
	protected final void defaultcmbTypeLookupValue()
	{
		this.form.cmbType().setValue((ims.core.vo.lookups.PDSBackOfficeType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeType.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeType.TYPE_ID));
	}
	protected final void oncmbPriorityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPriority().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkPriority existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkPriority)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPriorityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSBackOfficeWorkPriority)
		{
			ims.core.vo.lookups.PDSBackOfficeWorkPriority instance = (ims.core.vo.lookups.PDSBackOfficeWorkPriority)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPriorityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSBackOfficeWorkPriority existingInstance = (ims.core.vo.lookups.PDSBackOfficeWorkPriority)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPriority().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPriorityLookup()
	{
		this.form.cmbPriority().clear();
		ims.core.vo.lookups.PDSBackOfficeWorkPriorityCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkPriority(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPriority().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPriorityLookupValue(int id)
	{
		ims.core.vo.lookups.PDSBackOfficeWorkPriority instance = ims.core.vo.lookups.LookupHelper.getPDSBackOfficeWorkPriorityInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPriority().setValue(instance);
	}
	protected final void defaultcmbPriorityLookupValue()
	{
		this.form.cmbPriority().setValue((ims.core.vo.lookups.PDSBackOfficeWorkPriority)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSBackOfficeWorkPriority.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSBackOfficeWorkPriority.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.PDSBackOfficeWorklist domain;
}
