//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.pdsbackofficeworklist;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbCurrentStatusLookup();
	abstract protected void defaultcmbCurrentStatusLookupValue();
	abstract protected void bindcmbDetailsAuthorityTypeLookup();
	abstract protected void defaultcmbDetailsAuthorityTypeLookupValue();
	abstract protected void bindcmbDetailsUpdateTypeLookup();
	abstract protected void defaultcmbDetailsUpdateTypeLookupValue();
	abstract protected void bindcmbDetailsOutcomeLookup();
	abstract protected void defaultcmbDetailsOutcomeLookupValue();
	abstract protected void bindcmbDetailsStatusLookup();
	abstract protected void defaultcmbDetailsStatusLookupValue();
	abstract protected void bindcmbDetailsPriorityLookup();
	abstract protected void defaultcmbDetailsPriorityLookupValue();
	abstract protected void bindcmbDetailsTypeLookup();
	abstract protected void defaultcmbDetailsTypeLookupValue();
	abstract protected void bindcmbTypeLookup();
	abstract protected void defaultcmbTypeLookupValue();
	abstract protected void bindcmbPriorityLookup();
	abstract protected void defaultcmbPriorityLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewPatientClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCurrentStatusValueSet(Object value);
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDetailsAuthorityTypeValueSet(Object value);
	abstract protected void oncmbDetailsUpdateTypeValueSet(Object value);
	abstract protected void oncmbDetailsOutcomeValueSet(Object value);
	abstract protected void oncmbDetailsStatusValueSet(Object value);
	abstract protected void oncmbDetailsPriorityValueSet(Object value);
	abstract protected void oncmbDetailsTypeValueSet(Object value);
	abstract protected void onQmbUserTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSybchroniseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDynGrdResultsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDynGrdNotificationsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTypeValueSet(Object value);
	abstract protected void oncmbPriorityValueSet(Object value);

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnViewPatient().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewPatientClick();
			}
		});
		this.form.cmbCurrentStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCurrentStatusValueSet(value);
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.ctnDetails().cmbDetailsAuthorityType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDetailsAuthorityTypeValueSet(value);
			}
		});
		this.form.ctnDetails().cmbDetailsUpdateType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDetailsUpdateTypeValueSet(value);
			}
		});
		this.form.ctnDetails().cmbDetailsOutcome().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDetailsOutcomeValueSet(value);
			}
		});
		this.form.ctnDetails().cmbDetailsStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDetailsStatusValueSet(value);
			}
		});
		this.form.ctnDetails().cmbDetailsPriority().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDetailsPriorityValueSet(value);
			}
		});
		this.form.ctnDetails().cmbDetailsType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDetailsTypeValueSet(value);
			}
		});
		this.form.qmbUser().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbUserTextSubmited(value);
			}
		});
		this.form.btnSybchronise().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSybchroniseClick();
			}
		});
		this.form.dyngrdResults().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynGrdResultsRowSelectionChanged(row);
			}
		});
		this.form.dyngrdNotifications().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDynGrdNotificationsRowSelectionChanged(row);
			}
		});
		this.form.imbClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.imbSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.cmbType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTypeValueSet(value);
			}
		});
		this.form.cmbPriority().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPriorityValueSet(value);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbCurrentStatusLookup();
		bindcmbDetailsAuthorityTypeLookup();
		bindcmbDetailsUpdateTypeLookup();
		bindcmbDetailsOutcomeLookup();
		bindcmbDetailsStatusLookup();
		bindcmbDetailsPriorityLookup();
		bindcmbDetailsTypeLookup();
		bindcmbTypeLookup();
		bindcmbPriorityLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbCurrentStatusLookup();
		bindcmbDetailsAuthorityTypeLookup();
		bindcmbDetailsUpdateTypeLookup();
		bindcmbDetailsOutcomeLookup();
		bindcmbDetailsStatusLookup();
		bindcmbDetailsPriorityLookup();
		bindcmbDetailsTypeLookup();
		bindcmbTypeLookup();
		bindcmbPriorityLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbCurrentStatusLookupValue();
		defaultcmbDetailsAuthorityTypeLookupValue();
		defaultcmbDetailsUpdateTypeLookupValue();
		defaultcmbDetailsOutcomeLookupValue();
		defaultcmbDetailsStatusLookupValue();
		defaultcmbDetailsPriorityLookupValue();
		defaultcmbDetailsTypeLookupValue();
		defaultcmbTypeLookupValue();
		defaultcmbPriorityLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
