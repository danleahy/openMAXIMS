//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Silviu Checherita using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdsbackofficeworklist;

import ims.admin.vo.AppRightVo;
import ims.admin.vo.AppRightVoCollection;
import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserShortVoCollection;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.vo.NotificationVo;
import ims.core.vo.NotificationVoCollection;
import ims.core.vo.PDSBackOfficeItemVo;
import ims.core.vo.PDSBackOfficeItemVoCollection;
import ims.core.vo.PDSBackOfficeStatusVo;
import ims.core.vo.PDSGeneralUpdateRequestVo;
import ims.core.vo.PDSGeneralUpdateRequestVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.lookups.PDSBackOfficeWorkStatus;
import ims.core.vo.lookups.PDSSearchStatus;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	private static final int COL_DATE							= 1;
	private static final int COL_PRIORITY						= 2;
	private static final int COL_TYPE							= 3;
	private static final int COL_STATUS							= 4;
	private static final int COL_DESCRIPTION					= 5;

	private static final int COL_NOTIFICATION_DATE				= 1;
	private static final int COL_NOTIFICATION_USER				= 2;
	private static final int COL_NOTIFICATION_MESSAGE			= 3;
	private static final int COL_NOTIFICATION_PRIORITY			= 4;

	//------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//------------------------------------------------------------------------------------------------------------------------

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setPDSConfiguration(domain.getPDSConfiguration());
		
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			form.btnSybchronise().setPostbackRequirePdsAuthentication(true);

		if(form.getLocalContext().getPDSConfiguration() == null)
			throw new FormOpenException("Patient Search Configuration is not set.");

		initialize();
		updateControlStates();
	}
	
	
	protected void onBtnSybchroniseClick() throws ims.framework.exceptions.PresentationLogicException
	{
    	Patient initialPatient = null;
    	
    	//WDEV-22292
    	if (form.getLocalContext().getBackOfficeItemDetailsIsNotNull())
    		initialPatient = domain.getPatient(form.getLocalContext().getBackOfficeItemDetails().getPatient());
    	else if (form.getLocalContext().getPDSGeneralUpdateDetailsIsNotNull())
    		initialPatient = domain.getPatient(form.getLocalContext().getPDSGeneralUpdateDetails().getPatient());    		
    	
    	//if PDSBackOfficeItem.patient is null the code was crashing a few lines below @ initialPatient.getIsConfidential()
    	if(initialPatient == null)
    	{
    		engine.showMessage("Cannot get a patient record from current backoffice item.");
    		return;
    	}
		
		// PDS AUTHENTICATION
		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
		if(!pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
		{
			engine.showMessage(pdsAuth.getLastError());
			return;
		}
		
		if (Boolean.TRUE.equals(initialPatient.getIsConfidential()!=null && initialPatient.getIsConfidential()))
		{
			if(!pdsAuth.hasRightsFor(PdsRight.ACCESS_SENSITIVE_DATA, PdsCheck.CHECK_ACTIVITY, null))
			{
				engine.showMessage(pdsAuth.getLastError());
				return;
			}
		}
		
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		// END PDS AUTHENTICATION
		
    	PdsRequestParameters params = new PdsRequestParameters(engine.getSAMLXmlContent(), engine.getLoggedInRole());
    	
    	Patient pdsPatient = null;
    	
    	String url = ConfigFlag.GEN.PDS_SYNC_GATEWAY_URL.getValue();
        
        if(url == null || url.length() == 0)
        {
        	engine.showMessage("PDS_SYNC_GATEWAY_URL flag was not set !");
        	return;
        }
        
		form.getGlobalContext().Core.setPatientToBeSynchronized(initialPatient);
        
        PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
        
        if(initialPatient.getNhsn() != null)
        {
			//call PDS retrieval
			try
			{
				pdsPatient = helper.makeRequest(params, initialPatient.getNhsn() != null ? initialPatient.getNhsn().getIdValue() : "", PdsRetrievalQueryHelper.HistoricDataIndicator.ON);
				
				if(pdsPatient == null)
				{
					//spine returned an error
					PdsErrorVo pdsError = helper.getLastErrorDetails();
					String err = "";
					
					if(PdsQuery.NO_MATCH.equals(pdsError.getQueryResponseCode()))
					{
						engine.showMessage("This record is found to be invalid. Please treat all demographic and clinical data on the record with caution.");
					}
					else
					{
						err = "Error calling PdsRetrievalQuery, query response code: " + pdsError.getQueryResponseCode();
						engine.showMessage(err);
					}
				}
		        else
		        {
		    		form.getGlobalContext().Core.setPatientFromPDS(pdsPatient);
		    		form.getGlobalContext().Core.setPatientShort(initialPatient);
		    		engine.open(form.getForms().Core.PDSPatientSynchronisation);
		        }
			}
			catch (PdsException e)
			{
				e.printStackTrace();
				
				engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());
			}
		}
	}
	
	
	
	protected void onBtnViewPatientClick() throws PresentationLogicException 
	{
		//WDEV-22292
		if (form.getLocalContext().getBackOfficeItemDetailsIsNotNull())
			form.getGlobalContext().Core.setPatientToBeDisplayed(domain.getPatientShort(form.getLocalContext().getBackOfficeItemDetails().getPatient()));
		else if (form.getLocalContext().getPDSGeneralUpdateDetailsIsNotNull())
			form.getGlobalContext().Core.setPatientToBeDisplayed(domain.getPatientShort(form.getLocalContext().getPDSGeneralUpdateDetails().getPatient()));
		engine.open(form.getForms().Core.PDSDemographicsDialog);
	}

	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearFields();
		clearDetails();
		updateControlStates();
	}

	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setBackOfficeItemDetails(null);
		//WDEV-22292
		form.getLocalContext().setPDSGeneralUpdateDetails(null);
		clearDetails();
		form.dyngrdResults().getRows().clear();

		if (validateSearchCriteria())
			doSearch();

		updateControlStates();
	}

	
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		updateControlStates();
	}

	
	protected void onBtnSaveClick() throws PresentationLogicException 
	{	
		saveBackOfficeItem();
		form.setMode(FormMode.VIEW);
		updateControlStates();
		doSearch();
		form.dyngrdResults().setValue(form.getLocalContext().getBackOfficeItemDetails());
		form.getLocalContext().setBackOfficeItemDetails((PDSBackOfficeItemVo) form.dyngrdResults().getValue());
		populateInstanceControlsFromData(form.getLocalContext().getBackOfficeItemDetails());
	}

	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		updateControlStates();
		form.dyngrdResults().setValue(form.getLocalContext().getBackOfficeItemDetails());
		populateInstanceControlsFromData((PDSBackOfficeItemVo) form.dyngrdResults().getValue());
	}

	
	protected void onDynGrdResultsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		if(row == null)
			return;

		//WDEV-22292
		if ( row.getValue() instanceof PDSBackOfficeItemVo) 
		{
			PDSBackOfficeItemVo selectedBackOfficeItem = (PDSBackOfficeItemVo) form.dyngrdResults().getValue();
			form.getLocalContext().setBackOfficeItemDetails(selectedBackOfficeItem);
			form.getLocalContext().setPDSGeneralUpdateDetails(null);
			PatientShort ps = domain.getPatientShort(selectedBackOfficeItem.getPatient());
			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
			populateInstanceControlsFromData(selectedBackOfficeItem);
			updateControlStates();
		}
		else if ( row.getValue() instanceof PDSGeneralUpdateRequestVo)
		{
			PDSGeneralUpdateRequestVo selectedBackOfficeItem = (PDSGeneralUpdateRequestVo) form.dyngrdResults().getValue();
			form.getLocalContext().setPDSGeneralUpdateDetails(selectedBackOfficeItem);
			form.getLocalContext().setBackOfficeItemDetails(null);
			PatientShort ps = domain.getPatientShort(selectedBackOfficeItem.getPatient());
			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
			populateInstanceControlsFromData(selectedBackOfficeItem);
			updateControlStates();			
		}
		//WDEV-22292
			
	}

	//WDEV-22292
	private void populateInstanceControlsFromData(
			PDSGeneralUpdateRequestVo item) 
	{
		clearDetails();
		updateControlStates();

		if (item == null)
			return;
	}
	//WDEV-22292


	protected void onDynGrdNotificationsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		// TODO Auto-generated method stub

	}

	
	protected void onQmbUserTextSubmited(String value) throws PresentationLogicException 
	{
		if (value != null)
		{
			AppUserShortVo appuser = new AppUserShortVo();
			appuser.setUsername(value);
			AppUserShortVoCollection voColl = domain.listUsers(appuser);

			form.qmbUser().clear();
			for (AppUserShortVo appUser : voColl)
			{
				form.qmbUser().newRow(appUser, appUser.getUsername().toString());
			}
			if (voColl.size() == 1)
				form.qmbUser().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbUser().showOpened();
		}
	}

	//------------------------------------------------------------------------------------------------------------------------
	//	Form initializations functions
	//------------------------------------------------------------------------------------------------------------------------

	private void initialize()
	{	
		clearContext();
		
		Boolean requiresPds = domain.getRequiresPds(engine.getLoggedInRole().getId());
		form.getLocalContext().setRequiresPDS(requiresPds != null ? requiresPds : false);

		AppRightVoCollection pdsRights = domain.getPDSRights(engine.getLoggedInRole().getId());
		form.getLocalContext().setPDSRightsColl(pdsRights);
		form.getLocalContext().getPDSRightsColl();

		loadNotificationPriorityComboValues();

		initializeDates();
		initializeDynamicGridResults();
		initializeDynamicGridNotifications();
		updateControlStates();
	}

	private void clearContext()
	{
		form.getGlobalContext().Core.setPatientFromPDS(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		form.getGlobalContext().Core.setPatientToBeSynchronized(null);
	}
	
	private boolean hasPDSSynchRight(AppRightVoCollection coll)
	{
		if (coll == null)
			return false;

		for (AppRightVo right : coll)
		{
			if (AppRight.PDS_SYNCHRONISE_INTERACTIVE.getName().equals(right.getName()))
				return true;
		}
		return false;
	}

	private void initializeDates() 
	{
		form.dtimFrom().setValue(new DateTime(new Date(), new Time()).addDays(-1));
		form.dtimTo().setValue(new DateTime(new Date(), new Time()));
	}

	private void initializeDynamicGridResults() 
	{
		form.dyngrdResults().clear();
		form.dyngrdResults().setSelectable(true);
		form.dyngrdResults().setReadOnly(true);

		DynamicGridColumn column = form.dyngrdResults().getColumns().newColumn("Date/Time", COL_DATE);
		column.setWidth(95);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Priority", COL_PRIORITY);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Worklist Type", COL_TYPE);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Current Status", COL_STATUS);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Description", COL_DESCRIPTION);
		column.setWidth(-1);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
	}

	private void initializeDynamicGridNotifications() 
	{
		form.dyngrdNotifications().clear();
		form.dyngrdNotifications().setSelectable(true);
		form.dyngrdNotifications().setReadOnly(true);

		DynamicGridColumn column = form.dyngrdNotifications().getColumns().newColumn("Date/Time", COL_NOTIFICATION_DATE);
		column.setWidth(95);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdNotifications().getColumns().newColumn("User", COL_NOTIFICATION_USER);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdNotifications().getColumns().newColumn("Message", COL_NOTIFICATION_MESSAGE);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdNotifications().getColumns().newColumn("Priority", COL_NOTIFICATION_PRIORITY);
		column.setWidth(-1);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
	}

	private void loadNotificationPriorityComboValues()
	{
		for (int i=1;i<4;i++)
		{
			form.cmbNotificationPriority().newRow(i, Integer.toString(i));
		}
	}

	private void clearFields()
	{
		form.cmbPriority().setValue(null);
		form.cmbType().setValue(null);
		form.dtimFrom().setValue(null);
		form.dtimTo().setValue(null);
		form.chkSeen().setValue(null);
		form.cmbNotificationPriority().setValue(null);
		form.qmbUser().setValue(null);
		form.dyngrdNotifications().getRows().clear();
		form.dyngrdResults().getRows().clear();
		form.getLocalContext().setBackOfficeItemDetails(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
	}

	private void updateControlStates()
	{
		//WDEV-22292
		//variable not used
		boolean isSyncBtnVisible = getSyncEnabeled(); 
		
		boolean isNotificationAreVisible = Boolean.TRUE.equals(form.getLocalContext().getPDSConfiguration() != null && form.getLocalContext().getPDSConfiguration().getCREATE_BO_NOTIFICATIONS());

		form.chkSeen().setVisible(isNotificationAreVisible);
		form.chkSeen().setEnabled(form.getMode().equals(FormMode.VIEW));
		
		form.lblNotificationPriority().setVisible(isNotificationAreVisible);
		form.cmbNotificationPriority().setVisible(isNotificationAreVisible);
		form.cmbNotificationPriority().setEnabled(form.getMode().equals(FormMode.VIEW));
		form.lblNotificationUser().setVisible(isNotificationAreVisible);
		form.qmbUser().setVisible(isNotificationAreVisible);
		form.qmbUser().setEnabled(form.getMode().equals(FormMode.VIEW));
		form.lblActiveNotifications().setVisible(isNotificationAreVisible);
		form.dyngrdNotifications().setVisible(isNotificationAreVisible);
		form.dyngrdNotifications().setEnabled(form.getMode().equals(FormMode.VIEW));
		

		form.btnEdit().setVisible(form.getLocalContext().getBackOfficeItemDetailsIsNotNull() && FormMode.VIEW.equals(form.getMode()));
		form.ctnDetails().setCollapsed(!form.getLocalContext().getBackOfficeItemDetailsIsNotNull());
		
		if (!ConfigFlag.DOM.USE_PDS.equals("None"))
		{
			PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
			boolean saveToPDS = pdsAuth.hasRightsFor(PdsRight.PDS_RETRIEVAL, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml());
			if (saveToPDS && isSyncBtnVisible)
			{				
				form.btnSybchronise().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.dyngrdResults().getSelectedRow()!=null);				
			}
			form.btnViewPatient().setEnabled(FormMode.VIEW.equals(form.getMode())&& form.dyngrdResults().getSelectedRow()!=null);
		}
		//WDEV-22292
	}

	//WDEV-22292
	private boolean getSyncEnabeled() 
	{
		if (form.getLocalContext().getBackOfficeItemDetails() != null)
		{
			return true;			
		}
		else if (form.getLocalContext().getPDSGeneralUpdateDetails() != null)
		{
			PDSGeneralUpdateRequestVo boItem = form.getLocalContext().getPDSGeneralUpdateDetails();
			if (boItem.getStatusIsNotNull() && (boItem.getStatus().equals(PDSSearchStatus.SUBMITTED) || boItem.getStatus().equals(PDSSearchStatus.PENDING)))
				return true;			
		}
		return false;
	}
	//WDEV-22292

	private void doSearch() 
	{
		form.dyngrdResults().getRows().clear();
		form.dyngrdNotifications().getRows().clear();
		PDSBackOfficeItemVoCollection coll = new PDSBackOfficeItemVoCollection();

		String type = form.cmbType().getValue() != null ? form.cmbType().getValue().toString() : null;
		String priority = form.cmbPriority().getValue() != null ? form.cmbPriority().getValue().toString() : null;
		String status = form.cmbCurrentStatus().getValue() != null ? form.cmbCurrentStatus().getValue().toString() : null;
		DateTime dateFrom = form.dtimFrom().getValue() != null ? form.dtimFrom().getValue() : null;
		DateTime dateTo = form.dtimTo().getValue() != null ? form.dtimTo().getValue() : null;
		
		boolean notifSeen = form.chkSeen().getValue();
		Integer notifPriority = form.cmbNotificationPriority().getValue();
		String notifUser = form.qmbUser().getValue() != null ? form.qmbUser().getValue().getUsername() : null;
		boolean isNotificationAreVisible = Boolean.TRUE.equals(form.getLocalContext().getPDSConfiguration() != null && form.getLocalContext().getPDSConfiguration().getCREATE_BO_NOTIFICATIONS());
		
		String nhsNumber = form.txtNhsNumber().getValue();
		boolean chkSuperNhs = form.chkSuper().getValue();

		coll = domain.listBackOfficeItems(type, priority, status, dateFrom, dateTo, notifSeen, notifPriority, notifUser, isNotificationAreVisible,nhsNumber,chkSuperNhs);

		//WDEV-22292
		if (coll.size()>0)
		{
			populateResultsGrid(coll);
		}
		
		//list pending update for NHSNumber if specified.
		if (nhsNumber!=null)
		{
			Patient patient = domain.getPatientByIdentifier(nhsNumber, PatIdType.NHSN);
			PDSGeneralUpdateRequestVoCollection pdsGeneralUpdateColl = domain.listPendingUpdate(patient);
			//insert Row for pending update
			populateResulstGridForPendingUpdate(pdsGeneralUpdateColl);
		}
		
		if (form.dyngrdResults().getRows().size() == 0) 
		{
			engine.showMessage("No results found.");
		}	
		//WDEV-22292
		
	}

	//WDEV-22292
	private void populateResulstGridForPendingUpdate(PDSGeneralUpdateRequestVoCollection pdsGeneralUpdateColl) 
	{
		for(PDSGeneralUpdateRequestVo pendingUpdateVo : pdsGeneralUpdateColl)
		{
			DynamicGridRow row = form.dyngrdResults().getRows().newRow();
	
			if (pendingUpdateVo!=null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_DATE), DynamicCellType.DATETIME);
				cellLabel.setValue(pendingUpdateVo.getRequestDate());
			}
	
			if (pendingUpdateVo!=null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_DESCRIPTION), DynamicCellType.STRING);
				cellLabel.setValue("Patient PDS Update Pending for this patient.");
			}
	
			if (pendingUpdateVo!=null && pendingUpdateVo.getStatus()!=null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
				cellLabel.setValue(pendingUpdateVo.getStatus().getText());
			}
	
			row.setValue(pendingUpdateVo);
		}
	}
	//WDEV-22292

	private void populateInstanceControlsFromData(PDSBackOfficeItemVo item)
	{
		clearDetails();
		updateControlStates();

		if (item == null)
			return;

		form.ctnDetails().cmbDetailsType().setValue(item.getType());
		form.ctnDetails().cmbDetailsPriority().setValue(item.getPriority());
		form.ctnDetails().cmbDetailsStatus().setValue(item.getCurrentStatus());
		form.ctnDetails().cmbDetailsOutcome().setValue(item.getOutcome());
		form.ctnDetails().cmbDetailsUpdateType().setValue(item.getUpdateType());
		form.ctnDetails().cmbDetailsAuthorityType().setValue(item.getRegisteryAuthorityType());
		form.ctnDetails().txtDetailsDescription().setValue(item.getDescription());
		form.ctnDetails().txtDetailsSource().setValue(item.getSource());
		form.ctnDetails().txtDetailsNHSNo().setValue(item.getNHSNumber());
		form.ctnDetails().txtDetailsNHSNoSuperseded().setValue(item.getNHSNumberSuperseded());
		form.ctnDetails().dtimDate().setValue(item.getSystemInformation().getCreationDateTime());

	}

	private void clearDetails()
	{
		form.ctnDetails().cmbDetailsType().setValue(null);
		form.ctnDetails().cmbDetailsPriority().setValue(null);
		form.ctnDetails().cmbDetailsStatus().setValue(null);
		form.ctnDetails().cmbDetailsOutcome().setValue(null);
		form.ctnDetails().cmbDetailsUpdateType().setValue(null);
		form.ctnDetails().cmbDetailsAuthorityType().setValue(null);
		form.ctnDetails().txtDetailsDescription().setValue("");
		form.ctnDetails().txtDetailsSource().setValue("");
		form.ctnDetails().txtDetailsNHSNo().setValue("");
		form.ctnDetails().txtDetailsNHSNoSuperseded().setValue("");
		form.ctnDetails().dtimDate().setValue(null);
	}



	private PDSBackOfficeItemVo populateDataFromInstanceControls(PDSBackOfficeItemVo item)
	{
		if (item == null)
		{
			item = new PDSBackOfficeItemVo();
		}

		item.setType(form.ctnDetails().cmbDetailsType().getValue());
		item.setDescription(form.ctnDetails().txtDetailsDescription().getValue());
		item.setSource(form.ctnDetails().txtDetailsSource().getValue());
		item.setPriority(form.ctnDetails().cmbDetailsPriority().getValue());
		item.setCurrentStatus(form.ctnDetails().cmbDetailsStatus().getValue());
		item.setNHSNumber(form.ctnDetails().txtDetailsNHSNo().getValue());
		item.setNHSNumberSuperseded(form.ctnDetails().txtDetailsNHSNoSuperseded().getValue());
		item.setOutcome(form.ctnDetails().cmbDetailsOutcome().getValue());
		item.setUpdateType(form.ctnDetails().cmbDetailsUpdateType().getValue());
		item.setRegisteryAuthorityType(form.ctnDetails().cmbDetailsAuthorityType().getValue());

		if (item.getStatusHistoryIsNotNull() && item.getStatusHistory().size() > 0 && !item.getStatusHistory().get(item.getStatusHistory().size()-1).getStatus().equals(item.getCurrentStatus()))
		{
			PDSBackOfficeStatusVo statusHistory = new PDSBackOfficeStatusVo();
			statusHistory.setStatus(form.ctnDetails().cmbDetailsStatus().getValue());
			statusHistory.setUpdateDate(new DateTime());
			item.getStatusHistory().add(statusHistory);
		}

		form.getLocalContext().setBackOfficeItemDetails(item);
		return item;
	}

	private void populateResultsGrid(PDSBackOfficeItemVoCollection items)
	{
		form.dyngrdResults().getRows().clear();
		form.dyngrdNotifications().getRows().clear();

		if (items == null)
			return;

		for (PDSBackOfficeItemVo item : items)
		{
			DynamicGridRow row = form.dyngrdResults().getRows().newRow();

			if (item.getSystemInformationIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_DATE), DynamicCellType.DATETIME);
				cellLabel.setValue(item.getSystemInformation().getCreationDateTime());
			}

			if (item.getDescriptionIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_DESCRIPTION), DynamicCellType.STRING);
				cellLabel.setValue(item.getDescription());
			}

			if (item.getCurrentStatusIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
				cellLabel.setValue(item.getCurrentStatus().toString());
			}

			if (item.getPriorityIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_PRIORITY), DynamicCellType.STRING);
				cellLabel.setValue(item.getPriority().toString());
			}

			if (item.getTypeIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdResults().getColumns().getByIdentifier(COL_TYPE), DynamicCellType.STRING);
				cellLabel.setValue(item.getType().toString());
			}
			if (item.getNotificationsIsNotNull())
			{
				populateNotificationGrid(item.getNotifications());
			}
			row.setValue(item);
		}
	}

	private void populateNotificationGrid(NotificationVoCollection notifications)
	{
		for (NotificationVo notification : notifications)
		{
			DynamicGridRow row = form.dyngrdNotifications().getRows().newRow();

			if (notification.getUserIsNotNull())
			{
				if (notification.getUser().getUsernameIsNotNull()) 
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdNotifications().getColumns().getByIdentifier(COL_NOTIFICATION_USER), DynamicCellType.STRING);
					cellLabel.setValue(notification.getUser().getUsername());
				}
			}

			if (notification.getDateTimeIsNotNull()) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdNotifications().getColumns().getByIdentifier(COL_NOTIFICATION_DATE), DynamicCellType.STRING);
				cellLabel.setValue(notification.getDateTime().toString());
			}

			if (notification.getMessageIsNotNull()) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdNotifications().getColumns().getByIdentifier(COL_NOTIFICATION_MESSAGE), DynamicCellType.STRING);
				cellLabel.setValue(notification.getMessage());				
			}

			if (notification.getNotificationPriorityIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdNotifications().getColumns().getByIdentifier(COL_NOTIFICATION_PRIORITY), DynamicCellType.INT);
				cellLabel.setValue(notification.getNotificationPriority());
			}
			row.setValue(notification);
		}
	}


	private boolean saveBackOfficeItem()
	{
		PDSBackOfficeItemVo item = populateDataFromInstanceControls(form.getLocalContext().getBackOfficeItemDetails());

		String[] errors = new String[0];
		errors = item.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		else
		{
			try
			{
				form.getLocalContext().setBackOfficeItemDetails(domain.saveBackOfficeItem(item));
			}
			catch (StaleObjectException e)
			{
				e.printStackTrace();
				return false;
			}
		}
		return true;
	}

	private boolean validateSearchCriteria()
	{
		ArrayList<String> errorList = new ArrayList<String>();

		if (form.dtimFrom().getValue() != null && form.dtimTo().getValue() != null)
		{
			if (form.dtimFrom().getValue().isGreaterThan(form.dtimTo().getValue()))
			{
				errorList.add("The \"Date From\" is after the \"Date To\"");
			}
		}

		if (errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[errorList.size()]));
			return false;
		}
		return true;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result)
			throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.PDSPatientSynchronisation))
		{
			 if (result.equals(DialogResult.OK))
				 form.getLocalContext().getBackOfficeItemDetails().setCurrentStatus(PDSBackOfficeWorkStatus.COMPLETED);			
			 else
				 form.getLocalContext().getBackOfficeItemDetails().setCurrentStatus(PDSBackOfficeWorkStatus.INPROGRESS);
			 
				String[] errors = new String[0];
				errors = form.getLocalContext().getBackOfficeItemDetails().validate();

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
				}
				else
				{
					try
					{
						form.getLocalContext().setBackOfficeItemDetails(domain.saveBackOfficeItem(form.getLocalContext().getBackOfficeItemDetails()));
					}
					catch (StaleObjectException e)
					{
						engine.showMessage("Record updated by another user: - " + e.getMessage());				
					}
				}
						
				form.setMode(FormMode.VIEW);
				updateControlStates();
				doSearch();
				form.dyngrdResults().setValue(form.getLocalContext().getBackOfficeItemDetails());
				form.getLocalContext().setBackOfficeItemDetails((PDSBackOfficeItemVo) form.dyngrdResults().getValue());
				populateInstanceControlsFromData(form.getLocalContext().getBackOfficeItemDetails());			
			 
		}			
		
	}

}
