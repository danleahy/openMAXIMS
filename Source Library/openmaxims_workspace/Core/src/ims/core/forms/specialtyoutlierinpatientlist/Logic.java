//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.specialtyoutlierinpatientlist;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.wardviewpatientlist.GenForm;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.SpecialtyOutlierInpatientEpisodeListVo;
import ims.core.vo.SpecialtyOutlierInpatientEpisodeListVoCollection;
import ims.core.vo.enums.BedInfoAction;
import ims.core.vo.lookups.PatIdType;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.framework.utils.beans.ColorBean;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static class EstimateDischargeComparator implements Comparator<SpecialtyOutlierInpatientEpisodeListVo>
	{
		private int direction;

		public EstimateDischargeComparator(SortOrder sortOrderEstimatedDischage)
		{
			if (SortOrder.ASCENDING.equals(sortOrderEstimatedDischage))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after estimated discharge date
		 */
		public int compare(SpecialtyOutlierInpatientEpisodeListVo o1, SpecialtyOutlierInpatientEpisodeListVo o2)
		{
			if (o1.getEstDischargeDateIsNotNull() && o2.getEstDischargeDateIsNotNull())
			{
				return o1.getEstDischargeDate().compareTo(o2.getEstDischargeDate()) * direction;
			}
			
			if (o1.getEstDischargeDateIsNotNull() && !o2.getEstDischargeDateIsNotNull())
			{
				return direction;
			}
			
			if (o2.getEstDischargeDateIsNotNull() && !o1.getEstDischargeDateIsNotNull())
			{
				return -1 * direction;
			}
			
			return 0;
		}
	}

	
	private static class AgeComparator implements Comparator<SpecialtyOutlierInpatientEpisodeListVo>
	{
		private int direction;

		public AgeComparator(SortOrder sortOrderAge)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAge))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after age
		 */
		public int compare(SpecialtyOutlierInpatientEpisodeListVo o1, SpecialtyOutlierInpatientEpisodeListVo o2)
		{
			if (o1.getPasEventIsNotNull() && o1.getPasEvent().getPatientIsNotNull() && o1.getPasEvent().getPatient().getAgeIsNotNull()
					&& o2.getPasEventIsNotNull() && o2.getPasEvent().getPatientIsNotNull() && o2.getPasEvent().getPatient().getAgeIsNotNull())
			{
				return o1.getPasEvent().getPatient().getAge().compareTo(o2.getPasEvent().getPatient().getAge()) * direction;
			}
			
			if (o1.getPasEventIsNotNull() && o1.getPasEvent().getPatientIsNotNull() && o1.getPasEvent().getPatient().getAgeIsNotNull()
					&& (!o2.getPasEventIsNotNull() || !o2.getPasEvent().getPatientIsNotNull() || !o2.getPasEvent().getPatient().getAgeIsNotNull()) )
			{
				return direction;
			}
			
			if (o1.getPasEventIsNotNull() && o1.getPasEvent().getPatientIsNotNull() && o1.getPasEvent().getPatient().getAgeIsNotNull()
					&& (!o2.getPasEventIsNotNull() || !o2.getPasEvent().getPatientIsNotNull() || !o2.getPasEvent().getPatient().getAgeIsNotNull()) )
			{
				return -1 * direction;
			}

			return 0;
		}
	}

	private static class AlertsComparator implements Comparator<SpecialtyOutlierInpatientEpisodeListVo>
	{
		private int direction;

		public AlertsComparator(SortOrder sortOrderAlert)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAlert))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after alert image 
		 */
		public int compare(SpecialtyOutlierInpatientEpisodeListVo o1, SpecialtyOutlierInpatientEpisodeListVo o2)
		{
			if (o1.getPasEvent()!= null && o1.getPasEvent().getPatient() != null && o1.getActiveAlertsIsNotNull() &&
				o2.getPasEvent() != null && o2.getPasEvent().getPatient() != null && o2.getActiveAlertsIsNotNull())
			{
				Integer val1 = Boolean.TRUE.equals(o1.getActiveAlerts()) ? 1 : 0;
				Integer val2 = Boolean.TRUE.equals(o2.getActiveAlerts()) ? 1 : 0;
				
				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}	
			}

		return 0;
		}
	}
	class HomeLeaveImageComparator implements Comparator<SpecialtyOutlierInpatientEpisodeListVo>
	{
		private int direction;

		public HomeLeaveImageComparator(SortOrder sortOrderComments)
		{
			if (SortOrder.ASCENDING.equals(sortOrderComments))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(SpecialtyOutlierInpatientEpisodeListVo c1, SpecialtyOutlierInpatientEpisodeListVo c2)
		{
			if (Boolean.TRUE.equals(c1.getIsOnHomeLeave()) &&  (c2 == null || !Boolean.TRUE.equals(c2.getIsOnHomeLeave())))
			{
				return direction;
			}
			if ((c1 == null || !Boolean.TRUE.equals(c1.getIsOnHomeLeave())) && Boolean.TRUE.equals(c2.getIsOnHomeLeave()))
			{
				return -1 * direction;
			}

			if (Boolean.TRUE.equals(c1.getIsOnHomeLeave()) && Boolean.TRUE.equals(c2.getIsOnHomeLeave()))
			{
				Integer val1 = c1.getBedIsNotNull() ? 1 : 0;
				Integer val2 = c2.getBedIsNotNull() ? 1 : 0;

				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}	
			}
			return 0;
		}	
	}
	
	public static final Integer		COLSURNAME			= new Integer(0);
	public static final Integer		COLFORENAME			= new Integer(1);
	public static final Integer		COLHOSPNUM			= new Integer(-1);
	public static final Integer		COLAGE				= new Integer(-2);
	public static final Integer		COLSEX				= new Integer(-3);
	public static final Integer		COLBEDTYPE			= new Integer(-4);
	public static final Integer		COLALERTS			= new Integer(-5);
	public static final Integer		COLWARD				= new Integer(-6);
	public static final Integer		COLLOCATION			= new Integer(-7);
	public static final Integer		COLCONSULANT		= new Integer(-8);
	public static final Integer		COLESTDISCH			= new Integer(-9);
	public static final Integer		COLSPECIALTY		= new Integer(-10);
	public static final Integer		COLHOMELEAVE		= new Integer(-11);
	
	private static final String INTENSE_ORANGE_COLOR_HEXA_CODE = "#FF6600";
	
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeDynamicGrid();
		engine.clearPatientContextInformation();
		open(false);
	}
	private void open(boolean bShowNoRecErrorMsg)
	{		
		SpecialtyOutlierInpatientEpisodeListVoCollection coll = domain.listInpatientEpisodes(form.getGlobalContext().Core.getWardViewPatientListWard());
		populateRecordsToGrid(coll,bShowNoRecErrorMsg);		
		form.setMode(FormMode.VIEW);
	}
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearAllPatientGcs();
		engine.close(DialogResult.OK);
	}
	
	private void clearAllPatientGcs()
	{
		form.getGlobalContext().Core.setADTPendingTransfer(null);
		form.getGlobalContext().Core.setBedInfoAction(null);		
		form.getGlobalContext().Core.setSelectedBedSpaceState(null);
		form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);		
	}
	private void initializeDynamicGrid() 
	{
		form.dyngrdPatients().clear();
		form.dyngrdPatients().setSelectable(true);
		
		DynamicGridColumn surnameColumn = form.dyngrdPatients().getColumns().newColumn("Surname", COLSURNAME);
		surnameColumn.setSortMode(SortMode.AUTOMATIC);
		surnameColumn.setWidth(100);	

		DynamicGridColumn forenameColumn = form.dyngrdPatients().getColumns().newColumn("Forename", COLFORENAME);
		forenameColumn.setSortMode(SortMode.AUTOMATIC);
		forenameColumn.setWidth(100);	
			
		DynamicGridColumn hospnumColumn = form.dyngrdPatients().getColumns().newColumn(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText(), COLHOSPNUM);
		hospnumColumn.setSortMode(SortMode.AUTOMATIC);
		hospnumColumn.setWidth(85);
			
		DynamicGridColumn ageColumn = form.dyngrdPatients().getColumns().newColumn("Age", COLAGE);
		ageColumn.setSortMode(SortMode.MANUAL);
		ageColumn.setWidth(50);
			
		DynamicGridColumn sexColumn = form.dyngrdPatients().getColumns().newColumn("Sex", COLSEX);
		sexColumn.setSortMode(SortMode.AUTOMATIC);
		sexColumn.setWidth(45);
			
		DynamicGridColumn specialtyColumn = form.dyngrdPatients().getColumns().newColumn("Specialty", COLSPECIALTY);
		specialtyColumn.setSortMode(SortMode.AUTOMATIC);
		specialtyColumn.setWidth(100);
			
		DynamicGridColumn consColumn = form.dyngrdPatients().getColumns().newColumn("Consultant", COLCONSULANT);
		consColumn.setSortMode(SortMode.AUTOMATIC);
		consColumn.setWidth(100);
		
		DynamicGridColumn bedColumn = form.dyngrdPatients().getColumns().newColumn("Bed Type", COLBEDTYPE);
		bedColumn.setSortMode(SortMode.AUTOMATIC);
		bedColumn.setWidth(65);
		
		DynamicGridColumn alertColumn = form.dyngrdPatients().getColumns().newColumn("Alert", COLALERTS);
		alertColumn.setSortMode(SortMode.MANUAL);
		alertColumn.setWidth(55);		
			
		DynamicGridColumn estDateColumn = form.dyngrdPatients().getColumns().newColumn("Est. Disch", COLESTDISCH);
		estDateColumn.setSortMode(SortMode.MANUAL);
		estDateColumn.setWidth(90);
				 
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO") || ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{			
			DynamicGridColumn hlColumn = form.dyngrdPatients().getColumns().newColumn("HL", COLHOMELEAVE);
			hlColumn.setSortMode(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? SortMode.MANUAL : SortMode.AUTOMATIC);
			hlColumn.setAlignment(Alignment.CENTER);
			hlColumn.setHeaderAlignment(Alignment.CENTER);
			hlColumn.setWidth(-1);	
		}
		else
		{
			estDateColumn.setWidth(-1);
		}
		
		form.lblTotal().setValue("Total: 0");		
	}
	private void populateRecordsToGrid(SpecialtyOutlierInpatientEpisodeListVoCollection gridValues, boolean bShowNoRecErrorMsg)
	{
		// Clear records from grid
		form.dyngrdPatients().getRows().clear();
		form.lblTotal().setValue("Total: 0");
		
		// Terminate function if the collection is null
		if (gridValues == null)
		{
			if (bShowNoRecErrorMsg)
				engine.showMessage("No patient records were found.");
			return;
		}	
		
		// Add each record from collection to grid
		for (int i = 0; i < gridValues.size(); i++)
		{
			addNewDynamicGridRow(gridValues.get(i));
		}
		form.lblTotal().setValue("Total: " + form.dyngrdPatients().getRows().size());
	}
	
	private void addNewDynamicGridRow(SpecialtyOutlierInpatientEpisodeListVo voCurrInpat) 
	{
		if (voCurrInpat == null)
			return;
		
		voCurrInpat.setActiveAlerts(false);
		
		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();
		if (voCurrInpat.getPasEventIsNotNull() && voCurrInpat.getPasEvent().getPatientIsNotNull())
			voCurrInpat.getPasEvent().getPatient().calculateAge();
		
		if (voCurrInpat.getPasEventIsNotNull() && voCurrInpat.getPasEvent().getPatientIsNotNull() && voCurrInpat.getPasEvent().getPatient().getNameIsNotNull())
		{
			DynamicGridCell snameCell = newRow.getCells().newCell(getColumn(COLSURNAME), DynamicCellType.LABEL);
			snameCell.setValue(voCurrInpat.getPasEvent().getPatient().getName().getSurname());
			snameCell.setTooltip(voCurrInpat.getPasEvent().getPatient().getName().getSurname());
			snameCell.setReadOnly(true);
			
			DynamicGridCell fnameCell = newRow.getCells().newCell(getColumn(COLFORENAME), DynamicCellType.LABEL);
			fnameCell.setValue(voCurrInpat.getPasEvent().getPatient().getName().getForename());
			fnameCell.setTooltip(voCurrInpat.getPasEvent().getPatient().getName().getForename() != null ? voCurrInpat.getPasEvent().getPatient().getName().getForename() : "");
			fnameCell.setReadOnly(true);	
		}	
		
		if (voCurrInpat.getPasEventIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatientIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatient().getIdentifiersIsNotNull()
			&& voCurrInpat.getPasEvent().getPatient().getIdentifiers().size() > 0)
		{
			DynamicGridCell hospnumCell = newRow.getCells().newCell(getColumn(COLHOSPNUM), DynamicCellType.LABEL);
			if (voCurrInpat.getPasEvent().getPatient().getDisplayId() != null)
			{	
				hospnumCell.setValue(voCurrInpat.getPasEvent().getPatient().getDisplayId() != null && voCurrInpat.getPasEvent().getPatient().getDisplayId().getValueIsNotNull() ? voCurrInpat.getPasEvent().getPatient().getDisplayId().getValue().toString(): "");
				hospnumCell.setTooltip(voCurrInpat.getPasEvent().getPatient().getDisplayId() != null && voCurrInpat.getPasEvent().getPatient().getDisplayId().getValueIsNotNull() ? voCurrInpat.getPasEvent().getPatient().getDisplayId().getValue().toString(): "");
			}
			hospnumCell.setReadOnly(true);
		}	

		if (voCurrInpat.getPasEventIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatientIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatient().getAgeIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLAGE), DynamicCellType.LABEL);
			patientCell.setValue(voCurrInpat.getPasEvent().getPatient().calculateAgeText());
			patientCell.setReadOnly(true);
		}	

		if (voCurrInpat.getPasEventIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatientIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatient().getSexIsNotNull() )
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLSEX), DynamicCellType.LABEL);
			patientCell.setValue(voCurrInpat.getPasEvent().getPatient().getSex().toString());
			patientCell.setReadOnly(true);
		}	
		
		if (voCurrInpat.getPasEventIsNotNull() 
			&& voCurrInpat.getPasEvent().getPatientIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLALERTS), DynamicCellType.IMAGE);
			if(voCurrInpat.getPasEvent().getPatient().getPatientAlertsIsNotNull() && voCurrInpat.getPasEvent().getPatient().getPatientAlerts().size() > 0 )
			{
				boolean tempBool = false;
				for(int i = 0; i < voCurrInpat.getPasEvent().getPatient().getPatientAlerts().size();i++)
				{
					PatientAlertLiteVo patAlertLiteVo = voCurrInpat.getPasEvent().getPatient().getPatientAlerts().get(i);
					if(patAlertLiteVo != null && patAlertLiteVo.getIsCurrentlyActiveAlert().equals(Boolean.TRUE))
					{
						tempBool = true;
						break;
					}
				}
				
				if (tempBool)
				{
					patientCell.setValue(form.getImages().Core.Alert16);
					voCurrInpat.setActiveAlerts(true);
					
				}
			}
			//----------
			
			patientCell.setReadOnly(true);
		}		
		
		if (voCurrInpat.getBedIsNotNull() 
			&& voCurrInpat.getBed().getBedSpaceIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLBEDTYPE), DynamicCellType.LABEL);
			patientCell.setValue(voCurrInpat.getBed().getBedSpace().getBedSpaceType().toString());
			patientCell.setReadOnly(true);
		}	
		
		if (voCurrInpat.getPasEventIsNotNull() 
			&& voCurrInpat.getPasEvent().getConsultantIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCONSULANT), DynamicCellType.LABEL);
			patientCell.setValue(voCurrInpat.getPasEvent().getConsultant().getName().toString());
			patientCell.setTooltip(voCurrInpat.getPasEvent().getConsultant() != null ? voCurrInpat.getPasEvent().getConsultant().getName().toString(): "");
			patientCell.setReadOnly(true);
		}	
		
		if (voCurrInpat.getEstDischargeDateIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLESTDISCH), DynamicCellType.LABEL);
			patientCell.setValue(voCurrInpat.getEstDischargeDate().toString());
			patientCell.setReadOnly(true);
		}	
		
		if (voCurrInpat.getPasEventIsNotNull() && voCurrInpat.getPasEvent().getSpecialtyIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLSPECIALTY), DynamicCellType.LABEL);
			patientCell.setReadOnly(true);
			patientCell.setValue(voCurrInpat.getPasEvent().getSpecialty().getText());
			patientCell.setTooltip(voCurrInpat.getPasEvent().getSpecialty().getText());
		}	
		
		if (Boolean.TRUE.equals(voCurrInpat.getIsOnHomeLeave()) && !ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			DynamicGridCell hlCell = newRow.getCells().newCell(getColumn(COLHOMELEAVE),ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? DynamicCellType.IMAGE : DynamicCellType.LABEL);
			hlCell.setReadOnly(true);
			hlCell.setAutoPostBack(false);
			
			hlCell.setValue(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? getHomeLeaveImageDisplay(voCurrInpat) : "(H)");
			
			StringBuffer sb = new StringBuffer();
			sb.append(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? ((voCurrInpat.getBedIsNotNull() ? "<b>Patient's bed is retained during home leave</b>" : "<b>Bed was vacated</b>") + "<br/>") : "");
			sb.append(voCurrInpat.getDateOnHomeLeaveIsNotNull() ? "Patient went on Home Leave on: <b>" + voCurrInpat.getDateOnHomeLeave().toString() + "</b>" : "");
			sb.append(voCurrInpat.getTimeOnHomeLeaveIsNotNull() ? " at <b>" + voCurrInpat.getTimeOnHomeLeave().toString() + "</b>": "");
			sb.append(voCurrInpat.getExpectedDateOfReturnIsNotNull() ? "<br/>Patient is expected to return from Home Leave on: <b>" + voCurrInpat.getExpectedDateOfReturn().toString() + "</b>": "");
			sb.append(voCurrInpat.getExpectedTimeOfReturnIsNotNull() ? " at <b>" + voCurrInpat.getExpectedTimeOfReturn().toString() + "</b>" : "");
			
			hlCell.setTooltip(sb.toString());			
		}	
		
		Color rowColour = getRowColour(voCurrInpat);

		if (rowColour != null)
		{
			newRow.setBackColor(rowColour);
		}
		newRow.setValue(voCurrInpat);
	}
	//WDEV-21828 //WDEV-22443
	private Color getRowColour(SpecialtyOutlierInpatientEpisodeListVo voCurrInpat)
	{
		ColorBean darkOrangeBean = new ColorBean();
		darkOrangeBean.setName("Dark Orange");
		darkOrangeBean.setValue(INTENSE_ORANGE_COLOR_HEXA_CODE);
		Color darkOrange = new Color(darkOrangeBean);
		
		if (voCurrInpat.getPasEventIsNotNull()
				&& voCurrInpat.getPasEvent().getPatientIsNotNull())
		{
			if (isPatientOnTrackingMovement(voCurrInpat)) //WDEV-22309
				return Color.RoyalBlue;	
			
			if (voCurrInpat.getPasEvent().getPatient().getDodIsNotNull())
				return ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue();

			if (voCurrInpat.getPasEvent().getPatient().getAssociatedPatientIsNotNull())
				return ConfigFlag.UI.MERGED_COLOUR.getValue();			
		}

		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && Boolean.TRUE.equals(voCurrInpat.getIsOnHomeLeave()))
				return Color.LightGray;
		
		//			Each row in the list will be assigned a background colour according to the bed status: 
		//			White. Occupied. Estimated date/time of discharge >24hrs from current date/time 
		//			Amber. Occupied. Estimated date/time of discharge <24hrs from current date/time 
		//			Red. Occupied. Confirmed discharge 

		if (voCurrInpat.isDischargeDueWithin24Hrs())
			return Boolean.TRUE.equals(voCurrInpat.getIsConfirmedDischarge()) ? Color.Red : darkOrange;

		return null;
	}
	
	private Image getHomeLeaveImageDisplay(SpecialtyOutlierInpatientEpisodeListVo voCurrInpat)
	{
		if (voCurrInpat != null && Boolean.TRUE.equals(voCurrInpat.getIsOnHomeLeave()))
		{
			return voCurrInpat.getBedIsNotNull() ? form.getImages().Core.homeleavebed : form.getImages().Core.homeleavenobed16x16;			
		}
		return null;
	}
	private boolean isPatientOnTrackingMovement(SpecialtyOutlierInpatientEpisodeListVo record)
	{
		if (record == null || record.getCurrentTrackingMovement() == null)
			return false;
		
		if (Boolean.TRUE.equals(record.getCurrentTrackingMovement().getPatientReturned()))
			return false;
		
		return true;
	}
	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdPatients().getColumns().getByIdentifier(identifier);
	}
	@Override
	protected void onDyngrdPatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		sortPatients((Integer) column.getIdentifier());
		
	}
	private void sortOrderToggle(Object columnIdentifer)
	{
		// Age column
		if (COLAGE.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()))
				form.getLocalContext().setSortOrderAge(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderAge(null);
		}
		
		// Estimate discharge column
		if (COLESTDISCH.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEstimatedDischarge()))
				form.getLocalContext().setSortOrderEstimatedDischarge(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderEstimatedDischarge(SortOrder.ASCENDING);
			
		}
		else
		{
			form.getLocalContext().setSortOrderEstimatedDischarge(null);
		}
		
		//Alert column
		if (COLALERTS.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAlerts()))
				form.getLocalContext().setSortOrderAlerts(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAlerts(SortOrder.ASCENDING);
			
		}
		else
		{
			form.getLocalContext().setSortOrderAlerts(null);
		}
		
		//HomeLeave
		if (COLHOMELEAVE.equals(columnIdentifer) && SortMode.MANUAL.equals(getColumn(COLHOMELEAVE).getSortMode()))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderHomeLeaveIcon()))
				form.getLocalContext().setSortOrderHomeLeaveIcon(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderHomeLeaveIcon(SortOrder.ASCENDING);
			
		}
		else
		{
			form.getLocalContext().setSortOrderHomeLeaveIcon(null);
		}
	}
	private void sortPatients(Object columnIdentifer)
	{
		// Get records from grid
		SpecialtyOutlierInpatientEpisodeListVoCollection gridValues = populateRecordsFromGrid();
		
		if (gridValues.size() < 2)
			return;
		
		// Toggle sort order for column
		sortOrderToggle(columnIdentifer);
		
		// Determine column, sort records
		if (COLAGE.equals(columnIdentifer))
		{
			gridValues.sort(new AgeComparator(form.getLocalContext().getSortOrderAge()));
		}
		else if (COLESTDISCH.equals(columnIdentifer))
		{
			gridValues.sort(new EstimateDischargeComparator(form.getLocalContext().getSortOrderEstimatedDischarge()));
		}
		
		else if (COLALERTS.equals(columnIdentifer))
		{
			gridValues.sort(new AlertsComparator(form.getLocalContext().getSortOrderAlerts()));
		}
		
		else if (COLHOMELEAVE.equals(columnIdentifer))
		{
			gridValues.sort(new HomeLeaveImageComparator(form.getLocalContext().getSortOrderHomeLeaveIcon()));
		}
		// Get selected record
		Object selectedValue = form.dyngrdPatients().getValue();
		
		// Refresh grid
		populateRecordsToGrid(gridValues, false);
		
		// Reselect value
		form.dyngrdPatients().setValue(selectedValue);
		
		
	}
	private SpecialtyOutlierInpatientEpisodeListVoCollection populateRecordsFromGrid()
	{
		// Create collection to return
		SpecialtyOutlierInpatientEpisodeListVoCollection gridValues = new SpecialtyOutlierInpatientEpisodeListVoCollection();
		
		// Add each record from grid to collection
		for (int i = 0; i < form.dyngrdPatients().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPatients().getRows().get(i);
			
			if (row.getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo)
				gridValues.add((SpecialtyOutlierInpatientEpisodeListVo) row.getValue());
		}
		
		// Return collection grid
		return gridValues;
	}
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}
	private void updateControlsState()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() != null && form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;
		boolean isOnHomeLeave = isWardViewPatient && Boolean.TRUE.equals(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getIsOnHomeLeave());
		boolean hasClosedHomeLeaves = isWardViewPatient && !isOnHomeLeave && ((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getHomeLeavesIsNotNull() && ((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getHomeLeaves().size() > 0;
		
		form.getContextMenus().Core.getWardViewACCEPT_TRANSFERItem().setVisible(false);
		form.getContextMenus().Core.getWardViewASSIGNWARDItem().setVisible(false);
		form.getContextMenus().Core.getWardViewCANCEL_TRANSFERItem().setVisible(false);
		form.getContextMenus().Core.getWardViewDISCHARGEItem().setVisible(isWardViewPatient);
		form.getContextMenus().Core.getWardViewTRANSFERItem().setVisible(isWardViewPatient);
		form.getContextMenus().Core.getWardViewRETURN_FROM_HOMELEAVEItem().setVisible(isOnHomeLeave && ((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getBedIsNotNull());
		form.getContextMenus().Core.getWardViewCANCEL_HOME_LEAVEItem().setVisible(isOnHomeLeave);
		form.getContextMenus().Core.getWardViewCANCEL_HOMELEAVE_RETURNItem().setVisible(hasClosedHomeLeaves);
		form.getContextMenus().Core.getWardViewVACATEBEDItem().setVisible(isOnHomeLeave && ((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getBedIsNotNull());
		form.getContextMenus().Core.getWardViewEDITHOMELEAVEItem().setVisible(isOnHomeLeave);
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.BedInfoDialog))
		{	
			form.getGlobalContext().Core.setBedInfoAction(null);
			form.getGlobalContext().Core.setADTPendingTransfer(null);
			form.getGlobalContext().Core.setSelectedBedSpaceState(null);
			form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);			
		}
		open(true);

	}
	private void cancelReturnFromHomeLeave()
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);									
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
			}
			form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.CANCELRETURNFROMHOMELEAVE);
			
			engine.open(form.getForms().Core.BedInfoDialog);
		}	
		
	}


	private void cancelHomeLeave()
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);								
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
			}
			form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.CANCELHOMELEAVE);
			
			engine.open(form.getForms().Core.BedInfoDialog);
		}		
	}


	private void returnFromHomeLeave()
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);									
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
			}
			form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.RETURNFROMHOMELEAVE);
			
			engine.open(form.getForms().Core.BedInfoDialog);
		}	
	}
	@Override
	protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row)	throws PresentationLogicException
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{			
			CareContextShortVo currentCareContext = null; //WDEV-22236
			if (((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getPasEventIsNotNull())
			{	
				currentCareContext = domain.getCareContextByPasEvent(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getPasEvent()) ; 
				form.getGlobalContext().Core.setCurrentCareContext(currentCareContext);
				if (currentCareContext == null)
					form.getGlobalContext().Core.setPatientShort(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getPasEventIsNotNull() && ((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getPasEvent().getPatientIsNotNull() ? domain.getPatientShort(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()).getPasEvent().getPatient()) : null);
			}			
		}
		updateControlsState();
		
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (form.dyngrdPatients().getSelectedRow() == null)
			return;
		
		switch (menuItemID)
		{
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.TRANSFER:
				recordTransfer();
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.ACCEPT_TRANSFER:
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_TRANSFER:				
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.ASSIGNWARD:
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.DISCHARGE:
				dischargePatient();
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.RETURN_FROM_HOMELEAVE:
				returnFromHomeLeave();
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_HOME_LEAVE:
				cancelHomeLeave();
				break;
				
			case ims.core.forms.specialtyoutlierinpatientlist.GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_HOMELEAVE_RETURN:
				cancelReturnFromHomeLeave();
				break;
							
			case GenForm.ContextMenus.CoreNamespace.WardView.EDITHOMELEAVE:
				editHomeLeave();
				break;
				
			case GenForm.ContextMenus.CoreNamespace.WardView.VACATEBED:
				vacatePatientBed();
				break;		
		}
		updateControlsState();
		
	}
	private void vacatePatientBed()
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);									
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
			}
			form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.VACATEBED);
			
			engine.open(form.getForms().Core.BedInfoDialog);
		}	
		
	}
	private void editHomeLeave()
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);									
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
			}
			form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.EDITHOMELEAVE);
			
			engine.open(form.getForms().Core.BedInfoDialog);
		}	
		
	}
	private void dischargePatient() 
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);						
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.DISCHARGEWARDPATIENT);
			}
			engine.open(form.getForms().Core.BedInfoDialog);
		}		
	}
	private void recordTransfer() 
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof SpecialtyOutlierInpatientEpisodeListVo;

		if (isWardViewPatient)
		{
			SpecialtyOutlierInpatientEpisodeListVo selectedRecord = (SpecialtyOutlierInpatientEpisodeListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedIsNotNull() && selectedRecord.getBed().getBedSpace() != null)
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBed().getBedSpace());
					
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);									
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((SpecialtyOutlierInpatientEpisodeListVo)form.dyngrdPatients().getValue()));
					
					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
			}
			form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.TRANSFERWARDPATIENT);
						
			engine.open(form.getForms().Core.BedInfoDialog);
		}		
	}
}
