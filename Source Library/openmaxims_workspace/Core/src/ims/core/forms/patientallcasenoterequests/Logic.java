//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientallcasenoterequests;

import ims.core.forms.patientallcasenoterequests.GenForm.grdRequestsRow;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteRequestShortVoCollection;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.core.vo.lookups.CaseNoteRequestStatusCollection;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open()
	{
		populateRequestsGrid(domain.listRequests(form.getGlobalContext().Core.getPatientShort(), getStatuses()));
		
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.chkAll().setEnabled(!form.chkAll().getValue());
	}

	private void populateRequestsGrid(PatientCaseNoteRequestShortVoCollection listRequests)
	{
		form.grdRequests().getRows().clear();
		
		if(listRequests == null)
			return;
		
		for(PatientCaseNoteRequestShortVo request : listRequests)
		{
			addRequestRow(request);
		}
	}

	private void addRequestRow(PatientCaseNoteRequestShortVo request)
	{
		if(request == null)
			return;
		
		grdRequestsRow row = form.grdRequests().getRows().newRow();
		
		row.setColReqDate(request.getRequiredByDate() != null ? request.getRequiredByDate().toString() : null);
		row.setTooltipForColReqBy(row.getColReqDate());
		row.setColType((request.getCaseNote() != null && request.getCaseNote().getType() != null) ? request.getCaseNote().getType().getText() : null);
		row.setTooltipForColType(row.getColType());
		row.setColReqLocation(request.getRequestedForLocation() != null ? request.getRequestedForLocation().getName() : null);
		row.setTooltipForColReqLocation(row.getColReqLocation());
		row.setColReqBy(request.getRequestedBy() != null ? request.getRequestedBy().getName().toString() : null);
		row.setTooltipForColReqBy(row.getColReqBy());
		row.setColStatus(request.getRequestStatus() != null ? request.getRequestStatus().getText() : null);
		row.setTooltipForColStatus(row.getColStatus());
		
		if(request.getRequestComment() != null)
		{
			row.setColImage(form.getImages().Core.Comment16);
			row.setTooltipForColImage(request.getRequestComment().getComment());
		}
		
		row.setValue(request);
	}

	private CaseNoteRequestStatusCollection getStatuses()
	{
		CaseNoteRequestStatusCollection coll = new CaseNoteRequestStatusCollection();
		
		if(form.chkAll().getValue())
		{
			return null;
		}
		else
		{
			if(form.chkOpen().getValue())
			{
				coll.add(CaseNoteRequestStatus.OPEN);
			}
			if(form.chkCompleted().getValue())
			{
				coll.add(CaseNoteRequestStatus.COMPLETED);
			}
			if(form.chkCancelled().getValue())
			{
				coll.add(CaseNoteRequestStatus.CANCELLED);
			}
		}
		
		return coll.size() > 0 ? coll : null;
	}

	private void initialise()
	{
		form.chkAll().setValue(true);
		
		form.chkOpen().setValue(null);
		form.chkCancelled().setValue(null);
		form.chkCompleted().setValue(null);
	}

	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onChkCompletedValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkAll().setValue(areAllUnchecked());
		
		open();
	}
	
	private Boolean areAllUnchecked()
	{
		if(!form.chkOpen().getValue() && !form.chkCompleted().getValue() && !form.chkCancelled().getValue())
			return true;
		
		return null;
	}

	@Override
	protected void onChkCancelledValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkAll().setValue(areAllUnchecked());
		
		open();
		
	}
	
	@Override
	protected void onChkOpenValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkAll().setValue(areAllUnchecked());
		
		open();
	}
	
	@Override
	protected void onChkAllValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkAll().getValue())
		{
			form.chkOpen().setValue(null);
			form.chkCancelled().setValue(null);
			form.chkCompleted().setValue(null);
		}
		
		open();
	}
}
