//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.pdsrelatedpersondialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.PdsRelatedPersonDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.PdsRelatedPersonDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void bindgrdCommChannelscolTypeLookup()
	{
		this.form.lyrContact().tabPageContact().grdCommChannels().colTypeComboBox().clear();
		ims.core.vo.lookups.ChannelTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getChannelType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrContact().tabPageContact().grdCommChannels().colTypeComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdCommChannelscolUsageLookup()
	{
		this.form.lyrContact().tabPageContact().grdCommChannels().colUsageComboBox().clear();
		ims.core.vo.lookups.PDSChannelUsageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSChannelUsage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrContact().tabPageContact().grdCommChannels().colUsageComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncmbPreferredWrittenCommMethodValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPreferredWrittenCommMethod().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreferredWrittenCommunication existingInstance = (ims.core.vo.lookups.PreferredWrittenCommunication)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPreferredWrittenCommMethodLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreferredWrittenCommunication)
		{
			ims.core.vo.lookups.PreferredWrittenCommunication instance = (ims.core.vo.lookups.PreferredWrittenCommunication)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPreferredWrittenCommMethodLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreferredWrittenCommunication existingInstance = (ims.core.vo.lookups.PreferredWrittenCommunication)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPreferredWrittenCommMethod().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPreferredWrittenCommMethodLookup()
	{
		this.form.cmbPreferredWrittenCommMethod().clear();
		ims.core.vo.lookups.PreferredWrittenCommunicationCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreferredWrittenCommunication(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPreferredWrittenCommMethod().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPreferredWrittenCommMethodLookupValue(int id)
	{
		ims.core.vo.lookups.PreferredWrittenCommunication instance = ims.core.vo.lookups.LookupHelper.getPreferredWrittenCommunicationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPreferredWrittenCommMethod().setValue(instance);
	}
	protected final void defaultcmbPreferredWrittenCommMethodLookupValue()
	{
		this.form.cmbPreferredWrittenCommMethod().setValue((ims.core.vo.lookups.PreferredWrittenCommunication)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreferredWrittenCommunication.class, engine.getFormName().getID(), ims.core.vo.lookups.PreferredWrittenCommunication.TYPE_ID));
	}
	protected final void oncmbPreferredContactMethodValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPreferredContactMethod().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSContactMethod existingInstance = (ims.core.vo.lookups.PDSContactMethod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPreferredContactMethodLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSContactMethod)
		{
			ims.core.vo.lookups.PDSContactMethod instance = (ims.core.vo.lookups.PDSContactMethod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPreferredContactMethodLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSContactMethod existingInstance = (ims.core.vo.lookups.PDSContactMethod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPreferredContactMethod().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPreferredContactMethodLookup()
	{
		this.form.cmbPreferredContactMethod().clear();
		ims.core.vo.lookups.PDSContactMethodCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSContactMethod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPreferredContactMethod().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPreferredContactMethodLookupValue(int id)
	{
		ims.core.vo.lookups.PDSContactMethod instance = ims.core.vo.lookups.LookupHelper.getPDSContactMethodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPreferredContactMethod().setValue(instance);
	}
	protected final void defaultcmbPreferredContactMethodLookupValue()
	{
		this.form.cmbPreferredContactMethod().setValue((ims.core.vo.lookups.PDSContactMethod)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSContactMethod.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSContactMethod.TYPE_ID));
	}
	protected final void oncmbRelationshipTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRelationshipType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PersonRelationship existingInstance = (ims.core.vo.lookups.PersonRelationship)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRelationshipTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PersonRelationship)
		{
			ims.core.vo.lookups.PersonRelationship instance = (ims.core.vo.lookups.PersonRelationship)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRelationshipTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PersonRelationship existingInstance = (ims.core.vo.lookups.PersonRelationship)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRelationshipType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRelationshipTypeLookup()
	{
		this.form.cmbRelationshipType().clear();
		ims.core.vo.lookups.PersonRelationshipCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPersonRelationship(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRelationshipType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRelationshipTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PersonRelationship instance = ims.core.vo.lookups.LookupHelper.getPersonRelationshipInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRelationshipType().setValue(instance);
	}
	protected final void defaultcmbRelationshipTypeLookupValue()
	{
		this.form.cmbRelationshipType().setValue((ims.core.vo.lookups.PersonRelationship)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PersonRelationship.class, engine.getFormName().getID(), ims.core.vo.lookups.PersonRelationship.TYPE_ID));
	}
	protected final void oncmbRelationshipRoleValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRelationshipRole().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSPersonRole existingInstance = (ims.core.vo.lookups.PDSPersonRole)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRelationshipRoleLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PDSPersonRole)
		{
			ims.core.vo.lookups.PDSPersonRole instance = (ims.core.vo.lookups.PDSPersonRole)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRelationshipRoleLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PDSPersonRole existingInstance = (ims.core.vo.lookups.PDSPersonRole)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRelationshipRole().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRelationshipRoleLookup()
	{
		this.form.cmbRelationshipRole().clear();
		ims.core.vo.lookups.PDSPersonRoleCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPDSPersonRole(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRelationshipRole().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRelationshipRoleLookupValue(int id)
	{
		ims.core.vo.lookups.PDSPersonRole instance = ims.core.vo.lookups.LookupHelper.getPDSPersonRoleInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRelationshipRole().setValue(instance);
	}
	protected final void defaultcmbRelationshipRoleLookupValue()
	{
		this.form.cmbRelationshipRole().setValue((ims.core.vo.lookups.PDSPersonRole)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PDSPersonRole.class, engine.getFormName().getID(), ims.core.vo.lookups.PDSPersonRole.TYPE_ID));
	}
	protected final void oncmbTitleValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTitle().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PersonTitle existingInstance = (ims.core.vo.lookups.PersonTitle)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTitleLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PersonTitle)
		{
			ims.core.vo.lookups.PersonTitle instance = (ims.core.vo.lookups.PersonTitle)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTitleLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PersonTitle existingInstance = (ims.core.vo.lookups.PersonTitle)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTitle().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTitleLookup()
	{
		this.form.cmbTitle().clear();
		ims.core.vo.lookups.PersonTitleCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPersonTitle(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTitle().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTitleLookupValue(int id)
	{
		ims.core.vo.lookups.PersonTitle instance = ims.core.vo.lookups.LookupHelper.getPersonTitleInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTitle().setValue(instance);
	}
	protected final void defaultcmbTitleLookupValue()
	{
		this.form.cmbTitle().setValue((ims.core.vo.lookups.PersonTitle)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PersonTitle.class, engine.getFormName().getID(), ims.core.vo.lookups.PersonTitle.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.PdsRelatedPersonDialog domain;
}
