//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdsdemographics;

import ims.admin.helper.SamlParser;
import ims.admin.vo.PDSConfigurationVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabOtherDetailsContainer.grdCasenoteRow;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabPreferencesContainer.Group2Enumeration;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabPreferencesContainer.Group3Enumeration;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabPreferencesContainer.grdConsentHistoryRow;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabRelatedPersonsContainer.grdRelatedPersonsGrid;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabRelatedPersonsContainer.grdRelatedPersonsRow;
import ims.core.forms.pdsdemographics.GenForm.lyrDetailsLayer.tabRelatedPersonsContainer.grdRelatedPersonsRowCollection;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.helper.PdsException;
import ims.core.helper.PdsPatientUpdateHelper;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.DeathDetailsVo;
import ims.core.vo.MissingMappingVoCollection;
import ims.core.vo.NationalHealthCoverVo;
import ims.core.vo.NextOfKin;
import ims.core.vo.PDSConsentHistoryVo;
import ims.core.vo.PDSConsentHistoryVoCollection;
import ims.core.vo.PDSGeneralUpdateRequestVo;
import ims.core.vo.PDSPatientGPVo;
import ims.core.vo.PDSPatientGPVoCollection;
import ims.core.vo.PatRelative;
import ims.core.vo.PatRelativeCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientCaseNoteListVo;
import ims.core.vo.PatientCaseNoteListVoCollection;
import ims.core.vo.PatientContactPreferenceVo;
import ims.core.vo.PatientDetailsComponentVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientLiteVoCollection;
import ims.core.vo.PatientMedicalInsuranceVo;
import ims.core.vo.PatientShort;
import ims.core.vo.Pds2LpiContextVo;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.PersonName;
import ims.core.vo.PersonNameCollection;
import ims.core.vo.PrivateInsuranceCompanyVoCollection;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CaseNoteStatusCollection;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.Eligibility;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.NameType;
import ims.core.vo.lookups.PDSAsyncRequestType;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.PDSConsent;
import ims.core.vo.lookups.PDSContactMethod;
import ims.core.vo.lookups.PDSPersonRole;
import ims.core.vo.lookups.PDSSearchStatus;
import ims.core.vo.lookups.PDSUpdateMode;
import ims.core.vo.lookups.PDSUpdateType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatientStatus;
import ims.core.vo.lookups.PrivateInsurancePolicyType;
import ims.core.vo.lookups.RegistrationSourceOfInfo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.interfaces.INavigation;
import ims.framework.interfaces.ISelectedPatient;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;
import ims.utils.textile.Textile;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVoCollection;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	private static final int NONE = 0;				//wdev-13521
	private static final int BUTTON_OTHERNAMES = 1; //wdev-13521
	private static final int BUTTON_ALIAS = 2;		//wdev-13521
	private static final int BUTTON_DECEASED = 3;	//wdev-13521
	private static final int VISITOR_STATUS = 4;	//WDEV-21624
	private static final int BUTTON_OTHER_ADDRESSES = 5; //WDEV-22900
	
	private static final int ACTION_DECOUPLE = 0;
	private static final int ACTION_ACTIVATE = 1;
	
	private static final HashMap<PDSContactMethod, ArrayList> commMethodMap = new HashMap();
	private static final HashMap<PDSContactMethod, String> commMethodMapTxt = new HashMap();
	
	static
	{
		StringBuilder sb = new StringBuilder();
		
		commMethodMap.put(PDSContactMethod.TELEPHONE, new ArrayList());
		commMethodMap.get(PDSContactMethod.TELEPHONE).add(ChannelType.GEN_PHONE);
		sb.append(ChannelType.GEN_PHONE.getText());
		sb.append(",");
		commMethodMap.get(PDSContactMethod.TELEPHONE).add(ChannelType.HOME_PHONE);
		sb.append(ChannelType.HOME_PHONE.getText());
		sb.append(",");
		commMethodMap.get(PDSContactMethod.TELEPHONE).add(ChannelType.MOBILE);
		sb.append(ChannelType.MOBILE.getText());
		sb.append(",");
		commMethodMap.get(PDSContactMethod.TELEPHONE).add(ChannelType.WORK_PHONE);
		sb.append(ChannelType.WORK_PHONE.getText());
		sb.append(",");
		commMethodMap.get(PDSContactMethod.TELEPHONE).add(ChannelType.FAX);
		sb.append(ChannelType.FAX.getText());
		commMethodMapTxt.put(PDSContactMethod.TELEPHONE, sb.toString());

		commMethodMap.put(PDSContactMethod.TELEPHONECONTACTVIAPROXY, new ArrayList());
		commMethodMapTxt.put(PDSContactMethod.TELEPHONECONTACTVIAPROXY, "");
		commMethodMap.get(PDSContactMethod.TELEPHONECONTACTVIAPROXY).add(ChannelType.GEN_PHONE);
		commMethodMap.get(PDSContactMethod.TELEPHONECONTACTVIAPROXY).add(ChannelType.HOME_PHONE);
		commMethodMap.get(PDSContactMethod.TELEPHONECONTACTVIAPROXY).add(ChannelType.MOBILE);
		commMethodMap.get(PDSContactMethod.TELEPHONECONTACTVIAPROXY).add(ChannelType.WORK_PHONE);
		commMethodMap.get(PDSContactMethod.TELEPHONECONTACTVIAPROXY).add(ChannelType.FAX);
		commMethodMapTxt.put(PDSContactMethod.TELEPHONECONTACTVIAPROXY, sb.toString());
		
		sb.setLength(0);
		commMethodMap.put(PDSContactMethod.EMAIL, new ArrayList());
		commMethodMap.get(PDSContactMethod.EMAIL).add(ChannelType.EMAIL);
		sb.append(ChannelType.EMAIL.getText());
		sb.append(",");	
		commMethodMap.get(PDSContactMethod.EMAIL).add(ChannelType.WEB);
		sb.append(ChannelType.WEB.getText());
		commMethodMapTxt.put(PDSContactMethod.EMAIL, sb.toString());
	}
	
	@Override
	protected void onFormModeChanged()
	{
		//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setcmbOccupationEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrDetails().tabPatientDetails().ccDetails().setcmbEthnicEnabled(form.getMode().equals(FormMode.EDIT));
			//wdev-13000
			//form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrDetails().tabPatientDetails().ccDetails().setMode(form.getMode());
			
		}
		
		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setComponentEnabled(form.getMode().equals(FormMode.EDIT));
		
		//WDEV-14466
		if (engine.isDialog() && form.getMode().equals(FormMode.VIEW))
		{
			form.btnClose().setVisible(true);
		}
		else 
		{
			form.btnClose().setVisible(false);
		}
		
		form.lyrDetails().tabPatientDetails().ccDetails().showOverseasStar(!form.getLocalContext().getFormOpenedFromNavigation());
		form.lyrDetails().tabPatientDetails().ccDetails().setMode(form.getMode());		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setMode(form.getMode());	
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().setMode(form.getMode());	
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().setMode(form.getMode());
		
		//form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		
		
		//http://jira/browse/WDEV-9672
		if(form.getMode().equals(FormMode.VIEW))
		{
			//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				//wdev-12966
				form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);

				if( engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
					form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
				else
					form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(false);
			}
			
			form.getGlobalContext().Core.setDeathDetails(null);
			form.getLocalContext().setDeathDetails(null);

			//form.lyrTabsDetails().tabPatientDetails().ccPatientDetailstab().showHideIdentifierGridRemoveItem(false);	//wdev-17883
		}
		else
		{
			//WDEV-19365
			if (engine.hasRight(AppRight.CAN_INACTIVATE_PATIENT))
			{
				if (form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_Patient() != null)
				{
					form.btninactivate().setVisible(true);
					if (form.getGlobalContext().Core.getPatientShort().getIsActive() != null && Boolean.FALSE.equals(form.getGlobalContext().Core.getPatientShort().getIsActive()))
					{
						if (form.getGlobalContext().Core.getPatientShort().getIsActive() != null && Boolean.FALSE.equals(form.getGlobalContext().Core.getPatientShort().getIsActive()))
						{
							// WDEV-21955 - set button text to Activate
							// form.btninactivate().setVisible(false);
							form.btninactivate().setText("Activate");
						}
						else
						{
							form.btninactivate().setText("Inactivate");  // WDV-21955
						}
					}
				}
				else
				{
					form.btninactivate().setVisible(false);
				}
			}
    		else
    		{
    			form.btninactivate().setVisible(false);
    		}
			
			//WDEV-21624 - hide Inacyivate button when PDS = false
			if(!isPds())
				form.btninactivate().setVisible(false);
		//WDEV-19365 ends here
			
			/*
			if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
			{
				form.btnEditPhoto().setVisible(true);
			}
			else
			{
				form.btnEditPhoto().setVisible(false);
			}
			*/
		}
		
		if(form.getMode().equals(FormMode.VIEW))
			form.lyrDetails().tabRelatedPersons().btnEditPerson().setText("View Related Person");
		else
			form.lyrDetails().tabRelatedPersons().btnEditPerson().setText("Edit Related Person");
		
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
		
		//form.lyrDetails().tabOtherDetails().cmbOccupation().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.lyrDetails().tabOtherDetails().qmbSchool().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		if(form.getMode().equals(FormMode.EDIT))
        {
               boolean enable = false;
               
               if (isPds() && engine.getLoggedInRole().getRequiresPDS() && engine.getLoggedInRole().getSpineRbacRole()!=null)
               {
                     //CHange here - Consent will not be updated on PDS, so no authentication checks needed for PDS.
                     // PDS AUTHENTICATION
               //PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
               //enable = pdsAuth.hasRightsFor(PdsRight.CONTROL_CONSENT, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml());
               // END PDS AUTHENTICATION
               
               //Also check new MAXIMS access right for updating consent locally
               enable = engine.hasRight(AppRight.PDS_ACCESS_SENSITIVE_RECORDS);
               
               }
               else
               {
                     //only check new MAXIMS access right for updating consent locally 
                     enable = true; //No need to check as not a requirement for Maxims without pds
               }
               
        form.lyrDetails().tabPreferences().cmbConsent().setEnabled(enable);
        form.lyrDetails().tabPreferences().dteDateLastChanged().setEnabled(enable);
        form.lyrDetails().tabPreferences().txtConsentComments().setEnabled(enable);
        
               
        }

		else //WDEV-21326
		{
			form.lyrDetails().tabPreferences().cmbConsent().setEnabled(false);
    		form.lyrDetails().tabPreferences().dteDateLastChanged().setEnabled(false);
    		form.lyrDetails().tabPreferences().txtConsentComments().setEnabled(false);
		}
		
		if(isSVUH())
		{
			form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setEnabled(form.getMode().equals(FormMode.EDIT));
		}
		else
		{
			//WDEV-23335
			form.lyrDetails().tabOtherDetails().cmbEligibility().setEnabled(form.getMode().equals(FormMode.EDIT));
		}
		
		if(form.lyrDetails().tabOtherDetails().cmbPatientCategory().getVisible())
		{
			form.lyrDetails().tabOtherDetails().cmbPatientCategory().setEnabled(form.getMode().equals(FormMode.EDIT));	
		}
		
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnUpdate().setVisible(true);
		}
		else
		{
			form.btnUpdate().setVisible(false);
		}
		
		updateContextMenu();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getMessageBoxID() != null && messageBoxId == form.getLocalContext().getMessageBoxID())
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
			Pds2LpiContextVo updateContext = form.getLocalContext().getPds2LpiContext();
			String superseededNhs = updateContext.getSuperseededNhsNumber();
			String newNhs = updateContext.getNhsNumber();
			
			if (result.equals(DialogResult.YES))
			{
				if(updateLocalPatientWithPds(updateContext, helper))
					onFormOpenLogic(null, updateContext.getPdsPatient());
			}
			else if (result.equals(DialogResult.NO))
			{
				try
				{
					form.getLocalContext().getPatient().setDecoupled(true);
					save(form.getLocalContext().getPatient(), false, null, null, false, true, false);
					
					helper.setPatientInContext(updateContext.getPatSuperseeded());
					
					if(superseededNhs != null)
						helper.setSuperseededNhsNumber(superseededNhs);
					if(newNhs != null)
						helper.setNhsNumber(newNhs);
					
					helper.setPatientInContext(form.getLocalContext().getPatient());
					
					if(updateContext.getPdsPatientIsNotNull() && updateContext.getPdsPatient().getDodIsNotNull())
						helper.createBackOfficeItemAndNotification(PDSBackOfficeType.DEATH,  "The user has chosen not to update LPI record with PDS.", PDSBackOfficeWorkPriority.P1);
					else
						helper.createBackOfficeItemAndNotification(PDSBackOfficeType.DECOUPLED,  "The user has chosen not to update LPI record with PDS.", PDSBackOfficeWorkPriority.P1);
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}

				onFormOpenLogic(null, null);
			}
		}
		else if(form.getLocalContext().getAliasChangedMessageID() != null && messageBoxId == form.getLocalContext().getAliasChangedMessageID())
		{
			if (result.equals(DialogResult.YES))
			{
				//yes - means data correction
				//nothing to do here
			}
			else if (result.equals(DialogResult.NO))
			{
				//no - means we add current name to historical names
				if(form.getLocalContext().getInitialPatientIsNotNull())
				{
    				Patient patient = form.getLocalContext().getPatient();
    				if(patient.getOtherNames() == null)
    					patient.setOtherNames(new PersonNameCollection());
    				
    				PersonName currentName = form.getLocalContext().getInitialPatient().getName();
    				PersonName historicalName = new PersonName();
    				
    				historicalName.setSurname(currentName.getSurname());
    				historicalName.setForename(currentName.getForename());
    				historicalName.setNameType(NameType.HISTORICAL);
    				
    				patient.getOtherNames().add(historicalName);
				}
			}
			
			form.getLocalContext().setbSaveAliasChange(true);

			if(validateData())
				doSave(null, null);
			
			return;
		}
		else if(form.getLocalContext().getAddressChangedMessageID() != null && messageBoxId == form.getLocalContext().getAddressChangedMessageID())
		{
			if (result.equals(DialogResult.YES))
			{
				//yes - means data correction
				//nothing to do here
			}
			else if (result.equals(DialogResult.NO))
			{
				//no - means we add current address to historical addresses
				if(form.getLocalContext().getInitialPatientIsNotNull())
				{
    				PersonAddress currentAddress = form.getLocalContext().getInitialPatient().getAddress();
    				
					engine.open(form.getForms().Core.AddressHistoryDlg, new Object[] { currentAddress });
					return;
				}
			}
			
			form.getLocalContext().setbSaveAddressChange(true);

			if(validateData())
				doSave(null, null);
			
			return;
		}
		else if (form.getLocalContext().getActivatePatientMessageBoxID() != null && messageBoxId == form.getLocalContext().getActivatePatientMessageBoxID() && result.equals(DialogResult.OK))
		{
			if(form.getLocalContext().getAction().equals(ACTION_ACTIVATE))
			{
				activateDeactivatePatient(form.getLocalContext().getPatient());
				form.setMode(FormMode.VIEW);
				populateScreenFromData(form.getLocalContext().getPatient());
				form.btnUpdate().setEnabled(true);
			}
			form.getLocalContext().setAction(null);
		}
		//WDEV-22448
		else if (form.getLocalContext().getRemoveAppointmentsMessageIDIsNotNull()
				&& messageBoxId == form.getLocalContext().getRemoveAppointmentsMessageID())
			{
				form.getLocalContext().setbRemovePatientAppointments(true);
				form.getLocalContext().setRemoveAppointmentsMessageID(null);
				
				if (form.getLocalContext().getPatient() != null)
					form.getLocalContext().getPatient().setCancelSD_APPTS(true);
				if (validateData())
				{
					doSave(null, null);
				}
				return;
			}
		else if(form.getLocalContext().getRemoveRelatedPersonMessageBoxID() != null && messageBoxId == form.getLocalContext().getRemoveRelatedPersonMessageBoxID())
		{
			if(DialogResult.YES.equals(result))
			{
				form.lyrDetails().tabRelatedPersons().grdRelatedPersons().removeSelectedRow();
			}
		}
		
		updateContextMenu();
		
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
	}
	@Override
	protected void onFormClosing(ims.framework.delegates.CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-23979
		form.getGlobalContext().Core.setGPDetails(null);
		form.getGlobalContext().Core.setGPPractice(null);
		form.getGlobalContext().Core.setGPSurgery(null);
		//WDEV-23979 - ends here
		
		form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasEnabledImage(form.getImages().Core.AddFile16);
		form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasDisabledImage(form.getImages().Core.AddFile16);
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setRequireAdress(Boolean.TRUE);
		
		//form.lyrDetails().tabOtherDetails().qmbSchool().clear();
		
		checkSVUHDemographics();
				
		populateInsuranceSchemeCombo();
		form.lyrDetails().tabPatientDetails().ccDetails().setPatientImage(form.getGlobalContext().Core.getPatientShort());
		displayAgeRelatedControls(form.getGlobalContext().Core.getPatientShort());	
		
		if (isPds() && engine.getLoggedInRole().getRequiresPDS() && engine.getLoggedInRole().getSpineRbacRole()!=null)
		{
			if (form.getLocalContext().getFormOpenedFromNavigation() == null)
			{
				form.getLocalContext().setFormOpenedFromNavigation(true);
				form.lyrDetails().tabPatientDetails().ccDetails().setFormOpenedFromNavigation(true);				
			}
			
			form.lyrDetails().tabPatientDetails().lyrAddress().tabSensitiveAddress().btnViewAddresses().setPostbackRequirePdsAuthentication(true);
			form.btnSave().setPostbackRequirePdsAuthentication(true);
			
			//WDEV-21414
			if (Boolean.TRUE.equals(form.getGlobalContext().Core.getCheckKeyFieldsOnPDSDemographicsOnOpenFromPdsSearch()))
			{
				if (checkPdsDemographics(true)==false)
				{
					form.getLocalContext().setArgs(args);
					return;
				}
			}
			else if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull() && checkPdsDemographics(false) == false)
			{
				form.getLocalContext().setArgs(args);
				return;
			}
		}
		//if( !Boolean.TRUE.equals(form.getLocalContext().getIsCompanyConfigurable()))	//wdev-19528
		//	form.lyrDetails().tabOtherDetails().cmbInsurer().setRequired(true);		//wdev-19226

		onFormOpenLogic(args, null);	
		updateControlsState(); //WDEV-21326
		
		if(Boolean.TRUE.equals(form.getGlobalContext().Core.getPdsSuccesfullSearch()))
		{
			form.setMode(FormMode.EDIT);
			form.getGlobalContext().Core.setPdsSuccesfullSearch(null);
		}
		
		//WDEV-22156
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setRequireAdress(Boolean.TRUE);
		
		//WDEV-21624 - hide country from address if not overseas visitor
		checkTheEvent(VISITOR_STATUS);
		form.lyrDetails().tabPatientDetails().ccDetails().setModeForm(form.getMode());
	}
	
	private void updateControlsState() //WDEV-21326
	{
		boolean displayConsentToShare = form.getLocalContext().getPDSConfigurationIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getPDSConfiguration().getPDS_DISPLAY_CONSENT());
		
		form.lyrDetails().tabPreferences().lblConsent().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().cmbConsent().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().lblDateLastChanged().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().dteDateLastChanged().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().lblConsentComments().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().txtConsentComments().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().lblConsentHistory().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().grdConsentHistory().setVisible(displayConsentToShare);
		form.lyrDetails().tabPreferences().pnl6().setVisible(displayConsentToShare);
	}
	
	private void onFormOpenLogic(Object[] args, Patient synchronizedPatient) throws FormOpenException
	{
		boolean isDialog = engine.isDialog(); //WDEV-21687
		
		if (args != null && args.length == 1 && args[0] instanceof ISelectedPatient)
		{
			form.getGlobalContext().Core.setPatientShort(null);
			PatientShort ps = new ims.core.vo.PatientShort(((ISelectedPatient) args[0]).getISelectedPatientID(), 0);
			PatientId psId = new PatientId();
			PatientIdCollection psColl = new PatientIdCollection();
			ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(((ISelectedPatient) args[0]).getISelectedPatientInterfaceIDType());
			if (type != null)
			{
				psId.setType(type);
				psId.setValue(((ISelectedPatient) args[0]).getISelectedPatientInterfaceID());
				if (psId.getValueIsNotNull())
				{
					psColl.add(psId);
					ps.setIdentifiers(psColl);
				}
			}

			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
		}
		else if (args != null && args.length == 1 && args[0] instanceof Boolean)
		{
			Boolean fomOpenFromNav = (Boolean) args[0];
			form.getLocalContext().setFormOpenedFromNavigation(fomOpenFromNav);
			form.lyrDetails().tabPatientDetails().ccDetails().setFormOpenedFromNavigation(fomOpenFromNav);
		}
		else if (args != null && args.length > 1 && args[1] instanceof FormMode && isDialog)
		{
			FormMode formMode = (FormMode) args[1];
			form.getLocalContext().setPreDefinedFormMode(formMode);			
		}
		
		if (form.getLocalContext().getFormOpenedFromNavigation() == null)
		{
			form.getLocalContext().setFormOpenedFromNavigation(!isDialog);
			form.lyrDetails().tabPatientDetails().ccDetails().setFormOpenedFromNavigation(!isDialog);
		}
			
		
		form.getLocalContext().setbIdentifiersEdited(false);
		form.getLocalContext().setbCommChannelsEdited(false);
		form.getLocalContext().setsavedPatient(null);
		form.lyrDetails().tabPatientDetails().ccDetails().setSavedPatient(null);

		displayDemographics(synchronizedPatient);
		
		// WDEV-21883 - Need to get the actual Patient object in order to set the SCN from the synchronized patient object - otherwise it is lost
		Patient patient = form.getLocalContext().getPatient();
		if (patient != null && synchronizedPatient != null && synchronizedPatient.getSCNIsNotNull())
			patient.setSCN(synchronizedPatient.getSCN());

	
		form.getLocalContext().setbSaveAliasChange(null);
		
		if (isDialog)
		{
			form.setMode(form.getLocalContext().getPreDefinedFormModeIsNotNull() ?  form.getLocalContext().getPreDefinedFormMode() : FormMode.VIEW);
			if (FormMode.VIEW.equals(form.getMode()))
			{	
				form.btnUpdate().setVisible(true);
			}
		}

		//logic around consent status
		Patient initialPatient = form.getLocalContext().getInitialPatient();
		if(initialPatient != null && initialPatient.getID_PatientIsNotNull())
		{
			if(initialPatient.getAlternativeContactIsNotNull() && PDSConsent.EXPLICITDISSENT.equals(initialPatient.getAlternativeContact().getPdsConsent()))
			{
				if(!engine.hasRight(AppRight.PDS_ACCESS_RECORD_ON_DISSENT))  
				{
					//Express dissent
					engine.showMessage("Current patient record has a consent status of 'Express dissent' and the current user doesn't have rights to see this data.");
					
					clearScreen();
					hideAllButtons();
				}
				else
				{
					engine.showMessage("Please be aware that current patient record has a consent status of 'Express dissent'!");					
				}
			}
		}
		if (isDialog && FormMode.EDIT.equals(form.getLocalContext().getPreDefinedFormMode()))
		{
			updateInstance();
		}
		
		//WDEV-22687
		form.lyrDetails().tabOtherDetails().btnViewCasenoteFolder().setEnabled(!isDialog);
		
	}
	private void hideAllButtons()
	{
		form.btnUpdate().setVisible(false);
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().setVisible(false);
		form.lyrDetails().tabPatientDetails().lyrAddress().tabSensitiveAddress().setVisible(true);
		form.lyrDetails().tabPatientDetails().lyrAddress().tabSensitiveAddress().btnViewAddresses().setVisible(Boolean.FALSE);
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().showHideGPDetailsButton(false);
		form.lyrDetails().tabPatientDetails().ccDetails().showHideButtons(false);
		form.lyrDetails().tabOtherDetails().btnViewCasenoteFolder().setVisible(false);
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setVisible(false);
		
		form.getContextMenus().Core.getPDSRelatedPersonsMenuREMOVE_RELATIVEItem().setVisible(false);
	}
	/*
	 returns true if patient should be read from DB  
	 */
	private boolean checkPdsDemographics(Boolean overrideDateLastUpdate) 
    {
		if(!isPds())
			return true;
		
		//PdsRetrievalQueryHelper pds = new PdsRetrievalQueryHelper(domain);
        //PdsTouchPointHelper touchPoint = new PdsTouchPointHelper();
        PatientShort pat = form.getGlobalContext().Core.getPatientShort();
    	PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
    	Patient pdsPatient = null;
    	Patient initialPatient = null;
    	boolean callPds = false;
               
        String url = ConfigFlag.GEN.PDS_SYNC_GATEWAY_URL.getValue();
               
        if(url == null || url.length() == 0)
        {
        	engine.showMessage("PDS_SYNC_GATEWAY_URL flag was not set !");
        	return true;
        }
        
        
        PDSConfigurationVo conf = getPdsConfiguration();
        
        //WDEV-21065
        
        try
		{
			initialPatient = domain.getPatient(pat);
		}
		catch (StaleObjectException e2)
		{
			e2.printStackTrace();
			
        	engine.showMessage("Error getting the patient record: " + e2.toString());
        	return true;
		}
        
        //WDEV-21910 - if the patient is decoupled then it must not be synchronized with PDS
        if(initialPatient != null && Boolean.TRUE.equals(initialPatient.getDecoupled()))
        	return true;
        
        PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
        
        if(initialPatient.getSCN() == null)
        {
            if(initialPatient.getNhsn() == null && pat.getNhsn()==null) //WDEV-21414
            {
				try
				{
					helper.setPatientInContext(initialPatient);
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "The current patient doesn not have an NHS number", PDSBackOfficeWorkPriority.P1);
					return true;
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}

            }
        	
        	callPds = true;
        }
        
        if(callPds == false)
        {
        	boolean decoupled = initialPatient.getDecoupled() == null ? false : initialPatient.getDecoupled();
        	Date pdsLastChecked = initialPatient.getPDSDateLastChecked();
            conf = getPdsConfiguration();
        	int numDays = conf.getNumOfDaysForNextPDSCheck() == null ? 0 : conf.getNumOfDaysForNextPDSCheck();
        	
        	if (!overrideDateLastUpdate)
        	{
	        	if(decoupled == false && (pdsLastChecked == null || pdsLastChecked.addDay(numDays).isLessThan(new Date())))
	        		callPds = true;
        	}
        	else
        		callPds = true;
        }
        
        if(callPds == true && pat.getNhsn() != null)
        {
			//call PDS retrieval
			try
			{
				pdsPatient = helper.makeRequest(params, pat.getNhsn() != null ? pat.getNhsn().getIdValue() : "", PdsRetrievalQueryHelper.HistoricDataIndicator.ON);
				
				if(pdsPatient == null)
				{
					//spine returned an error
					PdsErrorVo pdsError = helper.getLastErrorDetails();
					String err = "";
					
					if(PdsQuery.NO_MATCH.equals(pdsError.getQueryResponseCode()))
					{
						engine.showMessage("This record is found to be invalid. Please treat all demographic and clinical data on the record with caution.");
						
						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.GENERAL, "Review Invalid record", PDSBackOfficeWorkPriority.P1);
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
					else
					{
						err = "Error calling PdsRetrievalQuery, query response code: " + pdsError.getQueryResponseCode();
						engine.showMessage(err);
						
						try
						{
							helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  err, PDSBackOfficeWorkPriority.P1);
						}
						catch (PdsException e1)
						{
							e1.printStackTrace();
							err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
							engine.showMessage(err);
						}
					}
				}
			}
			catch (PdsException e)
			{
				e.printStackTrace();
				
				engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());
				
				helper.setPdsErrorFromException(e);
				try
				{
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  e.toString(), PDSBackOfficeWorkPriority.P1);
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
				}
			}
		}
        
        if(pdsPatient != null)
        {
        	//check if the PDS record is flagged as confidential
        	/*
        	if(Boolean.TRUE.equals(pdsPatient.getIsConfidential()))
			{
    			//update the LPI with PDS record
    			if(updateLocalPatientWithPds(initialPatient, pdsPatient, params) == null)
    				return false;
			}
			*/
        	boolean hasSuperseeded = false;
        	Patient patSuperseeded = null;
        	PatientId superseededNhs = null;
        	PatientId newNhs = null;
        	
        	//check if the PDS record has superseeded nhs numbers
        	if(pdsPatient.getIdentifiersIsNotNull())
        	{
        		newNhs = null;
        		for(int i = 0; i < pdsPatient.getIdentifiers().size(); i++)
        		{
        			PatientId id = pdsPatient.getIdentifiers().get(i);
        			
        			if(Boolean.TRUE.equals(id.getSuperseeded()))
        			{
        				hasSuperseeded = true;
        				superseededNhs = id;
        			}
        			else
        			{
        				newNhs = id;
        			}
        		}
        		
        		if(hasSuperseeded)
        		{
        			try
					{
        				patSuperseeded = domain.getPatientByIdentifier(newNhs.getIdValue(), newNhs.getType());
					}
					catch (DomainInterfaceException e)
					{
						e.printStackTrace();
						engine.showMessage("Error getting patient details: " + e.toString());
						return true;
					}
        			
        			if(patSuperseeded != null)
        			{
        				//patient exists locally
        				//mark the identifier row as a duplicate via sequence numbering 
        				
        				for(int i = 0; i < patSuperseeded.getIdentifiers().size(); i++)
        				{
        					if(newNhs.getIdValue().equals(patSuperseeded.getIdentifiers().get(i).getIdValue()))
        					{
        						int dup = 0;
        						Integer duplicate = patSuperseeded.getIdentifiers().get(i).getDuplicateNHSNum();
        						
        						if(duplicate != null)
        							dup = duplicate;
        						
        						newNhs.setDuplicateNHSNum(dup + 1);
        						
        						break;
        					}
        				}
        			}
        		}
        	}
        	
        	//
        	if(!overrideDateLastUpdate && (initialPatient.getSCN() == null || initialPatient.getSCN().intValue() < pdsPatient.getSCN().intValue()))
        	{
        		if(Boolean.TRUE.equals(conf.getSYNCHRONISE_WITH_BACKOFFICE()))
        		{
        			//check the key fields
        			StringBuilder sb = new StringBuilder();
        			boolean keyFieldsChanged = false;
        			
        			//gender
        			if(initialPatient.getSex() != null ? !initialPatient.getSex().equals(pdsPatient.getSex()) : pdsPatient.getSex() != null)
        			{
        				keyFieldsChanged = true;
        				sb.append("Gender: LPI = "+ initialPatient.getSex() + ", PDS = " + pdsPatient.getSex());
        				sb.append("\r\n");
        			}
        			
        			//dob
        			if(initialPatient.getDob() != null ? !initialPatient.getDob().equals(pdsPatient.getDob()) : pdsPatient.getDob() != null)
        			{
        				keyFieldsChanged = true;
        				sb.append("DOB: LPI = "+ initialPatient.getDob() + ", PDS = " + pdsPatient.getDob());
        				sb.append("\r\n");
        			}

        			//death status
        			if(initialPatient.getPDSDeathNotificationStatus() != null ? !initialPatient.getPDSDeathNotificationStatus().equals(pdsPatient.getPDSDeathNotificationStatus()) : pdsPatient.getPDSDeathNotificationStatus() != null)
        			{
        				keyFieldsChanged = true;
        				sb.append("Death status: LPI = "+ initialPatient.getPDSDeathNotificationStatus() + ", PDS = " + pdsPatient.getPDSDeathNotificationStatus());
        				sb.append("\r\n");
        			}
        			
        			//dob
        			if(initialPatient.getDod() != null ? !initialPatient.getDod().equals(pdsPatient.getDod()) : pdsPatient.getDod() != null)
        			{
        				keyFieldsChanged = true;
        				sb.append("DOD: LPI = "+ initialPatient.getDod() + ", PDS = " + pdsPatient.getDod());
        				sb.append("\r\n");
        			}
        			

        			Pds2LpiContextVo updateContext = new Pds2LpiContextVo();
        			updateContext.setInitialPatient(initialPatient);
        			updateContext.setPdsPatient(pdsPatient);
        			updateContext.setPatSuperseeded(patSuperseeded);
        			updateContext.setHasSuperseeded(hasSuperseeded);
        			updateContext.setNhsNumber(newNhs != null ? newNhs.getIdValue() : null);
        			updateContext.setSuperseededNhsNumber(superseededNhs != null ? superseededNhs.getIdValue() : null);
        			updateContext.setMissingMappings(helper.getMissingMappings());
        			
        			if(keyFieldsChanged)
        			{
        				sb.append("\r\n");
        				sb.append("\r\nDo you accept the changes?");
        				
        				int id = engine.showMessage(sb.toString(), "The following key fields are changed", MessageButtons.YESNO, MessageIcon.QUESTION);
        				
        				form.getLocalContext().setMessageBoxID(id);
        				form.getLocalContext().setPds2LpiContext(updateContext);
        			}
        			else
        			{
        				return updateLocalPatientWithPds(updateContext, helper);
        			}
        		}
        		else
        		{
        			// WDEV-21897 If no key fields changed, but this patient has superseded, we need to save the details and notify user
        			if (!keyFieldsChanged(initialPatient, pdsPatient) && hasSuperseeded)
        			{
        				Pds2LpiContextVo updateContext = new Pds2LpiContextVo();
            			updateContext.setInitialPatient(initialPatient);
            			updateContext.setPdsPatient(pdsPatient);
            			updateContext.setPatSuperseeded(patSuperseeded);
            			updateContext.setHasSuperseeded(hasSuperseeded);
            			updateContext.setNhsNumber(newNhs != null ? newNhs.getIdValue() : null);
            			updateContext.setSuperseededNhsNumber(superseededNhs != null ? superseededNhs.getIdValue() : null);
            			updateContext.setMissingMappings(helper.getMissingMappings());
            			return updateLocalPatientWithPds(updateContext, helper);
        			}
        			else
        			{
        				//launch patient synchronization form
        				form.getGlobalContext().Core.setPatientToBeSynchronized(initialPatient);
        				form.getGlobalContext().Core.setPatientFromPDS(pdsPatient);
        			
        				// 	Open Synchronisation screen, but pass in hasSuperseded flag as this could be the only field that differs
        				engine.open(form.getForms().Core.PDSPatientSynchronisation, new Object[] {engine.getFormName()});
        			}
        			return false;
        		}
        	}
        	else if(!overrideDateLastUpdate && (initialPatient.getSCN() != null || initialPatient.getSCN().intValue() == pdsPatient.getSCN().intValue()))
        	{
    			Pds2LpiContextVo updateContext = new Pds2LpiContextVo();
    			updateContext.setInitialPatient(initialPatient);
    			updateContext.setPdsPatient(pdsPatient);
    			updateContext.setPatSuperseeded(patSuperseeded);
    			updateContext.setHasSuperseeded(hasSuperseeded);
    			updateContext.setNhsNumber(newNhs != null ? newNhs.getIdValue() : null);
    			updateContext.setSuperseededNhsNumber(superseededNhs != null ? superseededNhs.getIdValue() : null);
    			updateContext.setMissingMappings(helper.getMissingMappings());

    			return updateLocalPatientWithPds(updateContext, helper);        			
        	}
        	else if (overrideDateLastUpdate)
        	{
        		//override to get latest object identifiers
            	if(initialPatient.getSCN() == null || initialPatient.getSCN().intValue() < pdsPatient.getSCN().intValue())
            	{
            		if(Boolean.TRUE.equals(conf.getSYNCHRONISE_WITH_BACKOFFICE()))
            		{
            			//check the key fields
            			StringBuilder sb = new StringBuilder();
            			boolean keyFieldsChanged = false;
            			
            			//gender
            			if(initialPatient.getSex() != null ? !initialPatient.getSex().equals(pdsPatient.getSex()) : pdsPatient.getSex() != null)
            			{
            				keyFieldsChanged = true;
            				sb.append("Gender: LPI = "+ initialPatient.getSex() + ", PDS = " + pdsPatient.getSex());
            				sb.append("\r\n");
            			}
            			
            			//dob
            			if(initialPatient.getDob() != null ? !initialPatient.getDob().equals(pdsPatient.getDob()) : pdsPatient.getDob() != null)
            			{
            				keyFieldsChanged = true;
            				sb.append("DOB: LPI = "+ initialPatient.getDob() + ", PDS = " + pdsPatient.getDob());
            				sb.append("\r\n");
            			}

            			//death status
            			if(initialPatient.getPDSDeathNotificationStatus() != null ? !initialPatient.getPDSDeathNotificationStatus().equals(pdsPatient.getPDSDeathNotificationStatus()) : pdsPatient.getPDSDeathNotificationStatus() != null)
            			{
            				keyFieldsChanged = true;
            				sb.append("Death status: LPI = "+ initialPatient.getPDSDeathNotificationStatus() + ", PDS = " + pdsPatient.getPDSDeathNotificationStatus());
            				sb.append("\r\n");
            			}

            			Pds2LpiContextVo updateContext = new Pds2LpiContextVo();
            			updateContext.setInitialPatient(initialPatient);
            			updateContext.setPdsPatient(pdsPatient);
            			updateContext.setPatSuperseeded(patSuperseeded);
            			updateContext.setHasSuperseeded(hasSuperseeded);
            			updateContext.setNhsNumber(newNhs != null ? newNhs.getIdValue() : null);
            			updateContext.setSuperseededNhsNumber(superseededNhs != null ? superseededNhs.getIdValue() : null);
            			updateContext.setMissingMappings(helper.getMissingMappings());
            			
            			if(keyFieldsChanged)
            			{
            				sb.append("\r\n");
            				sb.append("\r\nDo you accept the changes?");
            				
            				int id = engine.showMessage(sb.toString(), "The following key fields are changed", MessageButtons.YESNO, MessageIcon.QUESTION);
            				
            				form.getLocalContext().setMessageBoxID(id);
            				form.getLocalContext().setPds2LpiContext(updateContext);
            			}
            			else
            			{
            				return updateLocalPatientWithPds(updateContext, helper);
            			}
            		}
            		else
            		{
            			//launch patient synchronization form
            			form.getGlobalContext().Core.setPatientToBeSynchronized(initialPatient);
            			form.getGlobalContext().Core.setPatientFromPDS(pdsPatient);
            			
            			engine.open(form.getForms().Core.PDSPatientSynchronisation, new Object[] {engine.getFormName()});
            			return false;
            		}
            	}
            	else if(initialPatient.getSCN() != null && initialPatient.getSCN().intValue() == pdsPatient.getSCN().intValue())
            	{
        			Pds2LpiContextVo updateContext = new Pds2LpiContextVo();
        			updateContext.setInitialPatient(initialPatient);
        			updateContext.setPdsPatient(pdsPatient);
        			updateContext.setPatSuperseeded(patSuperseeded);
        			updateContext.setHasSuperseeded(hasSuperseeded);
        			updateContext.setNhsNumber(newNhs != null ? newNhs.getIdValue() : null);
        			updateContext.setSuperseededNhsNumber(superseededNhs != null ? superseededNhs.getIdValue() : null);
        			updateContext.setMissingMappings(helper.getMissingMappings());

        			return updateLocalPatientWithPds(updateContext, helper);        			
            	}
        	}
        }

        return true;
    }
	
	/**
	 * WDEV-21897 Method will return true if any of the key field values differ between local and pds patient
	 * @param initialPatient
	 * @param pdsPatient
	 * @return
	 */
	private boolean keyFieldsChanged(Patient initialPatient, Patient pdsPatient)
	{
		boolean keyFieldsChanged = false;
		
		//gender
		if(initialPatient.getSex() != null ? !initialPatient.getSex().equals(pdsPatient.getSex()) : pdsPatient.getSex() != null)
			keyFieldsChanged = true;
		
		//dob
		if(initialPatient.getDob() != null ? !initialPatient.getDob().equals(pdsPatient.getDob()) : pdsPatient.getDob() != null)
			keyFieldsChanged = true;

		//death status
		if(initialPatient.getPDSDeathNotificationStatus() != null ? !initialPatient.getPDSDeathNotificationStatus().equals(pdsPatient.getPDSDeathNotificationStatus()) : pdsPatient.getPDSDeathNotificationStatus() != null)
			keyFieldsChanged = true;
		
		//dob
		if(initialPatient.getDod() != null ? !initialPatient.getDod().equals(pdsPatient.getDod()) : pdsPatient.getDod() != null)
			keyFieldsChanged = true;
		
		return keyFieldsChanged;
	}

	private PDSConfigurationVo getPdsConfiguration() 
	{
		PdsRetrievalQueryHelper pds = new PdsRetrievalQueryHelper(domain);		
        if (form.getLocalContext().getPDSConfiguration()==null)
        {
        	PDSConfigurationVo conf = pds.getPdsConfiguration();
        	form.getLocalContext().setPDSConfiguration(conf);//WDEV-21326                
        }		
        
        return form.getLocalContext().getPDSConfiguration();
	}

	private boolean updateLocalPatientWithPds(Pds2LpiContextVo updateContext, PdsRetrievalQueryHelper helper)
	{
		form.htmOverwritten().setHTML("");
		PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
		
		String superseededNhs = updateContext.getSuperseededNhsNumber();
		String newNhs = updateContext.getNhsNumber();
		//Patient initialPatient = updateContext.getInitialPatient();
        PDSConfigurationVo conf = getPdsConfiguration();
		
		//update the LPI with PDS record
		Patient updatedPatient = updateLocalPatientWithPds(updateContext.getInitialPatient(), updateContext.getPdsPatient(), params, updateContext.getMissingMappings());
		if(updatedPatient == null)
			return false;
		else
		{
			updateContext.setPdsPatient(updatedPatient);
		}
		
		if(Boolean.TRUE.equals(updateContext.getHasSuperseeded()))
		{
			if(updateContext.getPatSuperseeded() != null)  // This is the patient that has been superseded
			{
				try
				{
					helper.setPatientInContext(updateContext.getPatSuperseeded());
					if(superseededNhs != null)
						helper.setSuperseededNhsNumber(superseededNhs);
					if(newNhs != null)
						helper.setNhsNumber(newNhs);

					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.DUPLICATE,  "Review NHS Number superseded record", PDSBackOfficeWorkPriority.P1);
				}
				catch (PdsException e1)
				{
					e1.printStackTrace();
					String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
					engine.showMessage(err);
					return false;
				}
				
			}
			else
			{
					// WDEV-21897 The save is complete and patient has been notified, no need for back office entry (SN confirmed this was discussed with HSCIC)
					/*helper.setPatientInContext(initialPatient);
					if(initialPatient.getNhsn() != null && initialPatient.getNhsn().getIdValue() != null)
						helper.setNhsNumber(initialPatient.getNhsn().getIdValue());
					
					if(superseededNhs != null)
						helper.setSuperseededNhsNumber(superseededNhs);
					
					helper.createBackOfficeItemAndNotification(PDSBackOfficeType.GENERAL,  "Review NHS Number superseded record", PDSBackOfficeWorkPriority.P2);*/
					
					engine.showMessage("This patient's NHS Number (" + superseededNhs + ") has been superseded with new NHS Number " + newNhs); // WDEV-21897
				
			}
		}
        
        if(Boolean.TRUE.equals(conf.getSYNCHRONISE_WITH_BACKOFFICE()))
		{
        	form.htmOverwritten().setHTML("<font color=\"red\">Local Record has been overwritten with the PDS data. Please verify the details with the patient.</font>");
		}
        
		return true;
	}
	
	private Patient updateLocalPatientWithPds(Patient initialPatient, Patient pdsPatient, PdsRequestParameters params, MissingMappingVoCollection missingMappings)
	{
		ArrayList errors = new ArrayList();
		Patient pat = null; 
		
		if(missingMappings != null && missingMappings.size() > 0)
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(this.domain);
			helper.displayMissingMappings(missingMappings, engine);
		}
		
		try
		{
			pat = domain.updateLocalPatientWithPds(initialPatient, pdsPatient, errors, form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole(), missingMappings);
		}
		catch (DomainInterfaceException e1)
		{
			e1.printStackTrace();
		}
		catch (StaleObjectException e1)
		{
			e1.printStackTrace();
		}
		catch (ForeignKeyViolationException e1)
		{
			e1.printStackTrace();
		}
		
		if(errors.size() > 0)
		{
			String[] template = new String[] {""};
    		String[] patErrors = (String[]) errors.toArray(template);
    		if (patErrors != null)
    		{
    			engine.showErrors(patErrors);
    			return null;
    		}
		}
		
		return pat;
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-23177
		if (formName.equals(form.getForms().Core.OtherNamesDialog) && form.getMode().equals(FormMode.EDIT))
		{
			if(form.getGlobalContext().Core.getOtherNames() != null)
			{
				for(PersonName pn : form.getGlobalContext().Core.getOtherNames())
				{
					if(NameType.MAIDEN.equals(pn.getNameType()))
					{
						form.lyrDetails().tabPatientDetails().ccDetails().setMaidenName(pn.getSurname());
						break;
					}
				}
			}
		}
		else if (formName.equals(form.getForms().Core.DuplicatedPatients) && result.equals(DialogResult.OK))
		{
			PatientLiteVoCollection selected = form.getGlobalContext().Core.getDuplicatedPatients();
			
			if(selected != null && selected.size() > 0)
			{
				//DuplicatedPatients global context is used for selected patient !
				Patient pat = domain.getPatient(selected.get(0));
				
				form.getGlobalContext().Core.setPatientShort(pat);
				form.getGlobalContext().Core.setPatientToBeDisplayed(pat);
    			onFormOpenLogic(null, null);
    			form.setMode(FormMode.VIEW);
				try
				{
					cancelSave();
				}
				catch (FormOpenException e1) 
				{
					engine.showMessage(e1.getMessage());
				}
			}
		}
		else if (formName.equals(form.getForms().Core.DuplicatedPatients) && result.equals(DialogResult.CANCEL))
		{
			//create local patient record and mark the new record and all records that have the same NHS number as duplicated
			doSave(null, Boolean.TRUE);
		}
		else if (formName.equals(form.getForms().Core.PDSRelativesSynchronization) && result.equals(DialogResult.CONFIRM))
		{
			if(Boolean.TRUE.equals(form.getGlobalContext().Core.getSynchronizeRelatives()))
			{
				PatRelativeCollection rels = form.getGlobalContext().Core.getPdsRelativesSynchronization();

				grdRelatedPersonsGrid grd = form.lyrDetails().tabRelatedPersons().grdRelatedPersons();
				
				grd.getRows().clear();

				if(form.getGlobalContext().Core.getPatientRelativesIsNotNull())
					form.getGlobalContext().Core.getPatientRelatives().clear();
				else
					form.getGlobalContext().Core.setPatientRelatives(new PatRelativeCollection());
				
				if(rels != null)
				{
					for(int i = 0; i < rels.size(); i++)
					{
						//remove pending status
						rels.get(i).setPending(null);
						
						addRelatedPersonRecord(rels.get(i));
						form.getGlobalContext().Core.getPatientRelatives().add(rels.get(i));
					}
				}
				
			}
		}
		else if (formName.equals(form.getForms().Core.PDSPatientSynchronisation)/* && result.equals(DialogResult.OK)*/)
		{
			if(result.equals(DialogResult.OK))
				onFormOpenLogic(form.getLocalContext().getArgs(), form.getGlobalContext().Core.getPatientToBeSynchronized());
			else
				onFormOpenLogic(form.getLocalContext().getArgs(), null);
		}
		else if (formName.equals(form.getForms().Core.PdsRelatedPersonDialog) && result.equals(DialogResult.OK))
		{
			if(!gridContainsRecord(form.getGlobalContext().Core.getPdsRelatedPerson()))
			{
				//new record added
				addRelatedPersonRecord(form.getGlobalContext().Core.getPdsRelatedPerson());
				
				if(form.getGlobalContext().Core.getPatientRelatives() == null)
					form.getGlobalContext().Core.setPatientRelatives(new PatRelativeCollection());

				form.getGlobalContext().Core.getPatientRelatives().add(form.getGlobalContext().Core.getPdsRelatedPerson());
			}
			else
			{
				//just refresh the record in the grid
				refreshRelatedPersonRecord(form.getGlobalContext().Core.getPdsRelatedPerson());
			}
			
			//WDEV-22523
			PatRelativeCollection coll = new PatRelativeCollection();
			grdRelatedPersonsGrid grd = form.lyrDetails().tabRelatedPersons().grdRelatedPersons();
			
			for(int i = 0; i < grd.getRows().size(); i++)
			{
				coll.add(grd.getRows().get(i).getValue());
			}
			
			coll.sort(new ContactRankingComparator(SortOrder.ASCENDING));
			
			grd.getRows().clear();
			for(int i = 0; i < coll.size(); i++)
			{
				addRelatedPersonRecord(coll.get(i));
			}
		}
		else if (formName.equals(form.getForms().Core.DateOfDeathDialog) && result.equals(DialogResult.OK))
		{
			//WDEV-9025
			PatientShort patient = form.getGlobalContext().Core.getPatientShort();

			Date dteDod = null;
			Time timTimeOfDeath = null;
			if(patient != null)
			{	
				dteDod = patient.getDod();
				timTimeOfDeath = patient.getTimeOfDeath();
			}	
			
			if (dteDod != null)
			{
				//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodEnabled(false);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodEnabled(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodValue(dteDod);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodValue(timTimeOfDeath);
					//form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(false);
				}
			}
			else
			{
				//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodValue(null);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodValue(null);
					form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Mark as Deceased");
					//form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(true);
				}
			}
		}
		else if (formName.equals(form.getForms().Clinical.DeathDetails) && result.equals(DialogResult.OK))
		{
			if(Boolean.TRUE.equals(form.getGlobalContext().Core.getRefreshParent()))
			{
				cancelSave();
			}
			
			form.getLocalContext().setDeathDetails(form.getGlobalContext().Core.getDeathDetails());

			Date dteDod = null;
			Time timeOfDeath = null;
			if (form.getGlobalContext().Core.getDeathDetails() != null)
			{	
				dteDod = form.getGlobalContext().Core.getDeathDetails().getPatient().getDod();
				timeOfDeath = form.getGlobalContext().Core.getDeathDetails().getPatient().getTimeOfDeath();
			}	
			
			if (dteDod != null)
			{
				//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodEnabled(false);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodEnabled(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(true);
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodValue(dteDod);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodValue(timeOfDeath);
					//form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Update Death Details");
				}
			}
			else
			{
				//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
				{
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setdteDodValue(null);
					form.lyrDetails().tabPatientDetails().ccDetails().settimTodValue(null);
					form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Mark as Deceased");
					//form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(true);
				}
			}
			
			if(Boolean.TRUE.equals(form.getGlobalContext().Core.getRefreshParent()))
			{
				form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && dteDod != null);
				form.getGlobalContext().Core.setRefreshParent(null);
			}
		}
		else if (formName.equals(form.getForms().Core.AliasDialog) && result.equals(DialogResult.OK))
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasEnabledImage(form.getImages().Core.AddFile16);
			form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasDisabledImage(form.getImages().Core.AddFile16);
			//form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasTooltip("<b>ALIAS :</b>   " + form.getGlobalContext().Core.getAliasName());
			//form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasVisible(ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue());
			form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasVisible(true);
		}
		else if (formName.equals(form.getForms().Core.YesNoDialog))
		{
			if (result.equals(DialogResult.OK) || result.equals(DialogResult.YES))
			{
				doSave(Boolean.TRUE, null);
			}
			else
			{
				doSave(Boolean.FALSE, null);
			}		
		}	
		else if (formName.equals(form.getForms().Core.AddressHistoryDlg) && result.equals(DialogResult.OK))
		{
			Patient patient = form.getLocalContext().getPatient();
			if(patient.getAddresses() == null)
				patient.setAddresses(new PersonAddressCollection());
			
			PersonAddress historicalAddress = form.getGlobalContext().Core.getPersonAddress();
			historicalAddress.setAddressType(AddressType.HISTORICAL);
			patient.getAddresses().add(historicalAddress);
		
			form.getLocalContext().setbSaveAddressChange(true);

    		if(validateData())
    			doSave(null, null);			
		}
		else if( FormMode.EDIT.equals(form.getMode()) && formName.equals(form.getForms().Core.NOKDetails) && result.equals(DialogResult.OK))
		{
			NextOfKin nok = form.getGlobalContext().Core.getNOKDetails();
			if (nok == null)
				form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setValue(null);
			else if (nok.getNameIsNotNull()) //WDEV-14004
				form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setValue(nok.getName().toShortForm());
			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();
			patient.setNok(nok);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setTooltip(getNokTooltip(patient));
			form.getLocalContext().setPatient(patient);
		}
		
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
		
		updateContextMenu();
	}

	@Override
	protected void onBtnEditPersonClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getMode().equals(FormMode.VIEW))
			form.getGlobalContext().Core.setViewRelatedPerson(Boolean.TRUE);
		else
			form.getGlobalContext().Core.setViewRelatedPerson(Boolean.FALSE);
		
		form.getGlobalContext().Core.setPdsRelatedPerson(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue());
		engine.open(form.getForms().Core.PdsRelatedPersonDialog);
	}
	@Override
	protected void onBtnAddPersonClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setViewRelatedPerson(null);
		form.getGlobalContext().Core.setPdsRelatedPerson(null);
		engine.open(form.getForms().Core.PdsRelatedPersonDialog);
	}
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setPdsRelativesSynchronization(null);
		form.getGlobalContext().Core.setSynchronizeRelatives(null);
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		//form.lyrDetails().tabOtherDetails().qmbSchool().clear();
		updateInstance();
		//form.lyrDetails().tabPatientDetails().ccDetails().setSurnameFocus();
		
		if(form.lyrDetails().tabOtherDetails().isVisible() && form.getMode().equals(FormMode.EDIT) && isSVUH())
		{
			form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setFocus();
		}
	}

	private void updateInstance() throws FormOpenException
	{
		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		//SN - agreed to remove this condition as the update should be non blocking and the PDS message handler will always check the conversation id when updating the scn on a successful PDS update.		
		//		if(domain.countPendingPdsGeneralUpdatesRequests(form.getGlobalContext().Core.getPatientShort()) > 0)
		//		{
		//			engine.showMessage("There are active General Update requests for current patient. The patient details cannot be amended at this moment.");
		//			return;
		//		}
		
		//SN
		//need to get the patient again because some object identifiers mat have been assigned in PDS for data additions and we don't have them from the response.		
		if (isPds())
			checkPdsDemographics(true);
		
		form.getGlobalContext().Core.setPatientToBeDisplayed(form.getLocalContext().getPatient());
		displayDemographics(null);
		
		form.getLocalContext().setbSaveAliasChange(null);
		form.getLocalContext().setbRemovePatientAppointments(null);	
		form.getGlobalContext().Core.setDeathDetails(null);
		form.getLocalContext().setDeathDetails(null);
		form.getLocalContext().setbUpdatePDS(null); //wdev-15181


		form.btnUpdate().setEnabled(false);
		
		//form.lyrDetails().tabPatientDetails().ccGpDetails().showHideGPButton(true);

		if(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
    	{
    		form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Update Death Details");
    	}
		else
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Mark as Deceased");
		}
		
		form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED));
		
		//WDEV-20689
		if (engine.hasRight(AppRight.CAN_INACTIVATE_PATIENT))
			{
				if (form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_Patient() != null)
				{
					form.btninactivate().setVisible(true);
					if (form.getGlobalContext().Core.getPatientShort().getIsActive() != null && Boolean.FALSE.equals(form.getGlobalContext().Core.getPatientShort().getIsActive()))
					{
						// WDEV-21955 - set button text to Activate
						// form.btninactivate().setVisible(false);
						form.btninactivate().setText("Activate");
					}
					else
					{
						form.btninactivate().setText("Inactivate");  // WDV-21955
					}
				}
				else
				{
					form.btninactivate().setVisible(false);
				}
			}
		else
		{
			form.btninactivate().setVisible(false);
		}
		//WDEV-20689 ends here
		
		//WDEV-21624 - hide Inacyivate button when PDS = false
		if(!isPds())
			form.btninactivate().setVisible(false);


		form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
		form.lyrDetails().tabPatientDetails().ccDetails().setdteDodEnabled(false);
		form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
		form.lyrDetails().tabPatientDetails().ccDetails().settimTodEnabled(false);
		form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
		form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
		
		form.getLocalContext().setbCommChannelsEdited(false);
		form.getLocalContext().setbIdentifiersEdited(false);
		form.getLocalContext().setsavedPatient((Patient) form.getLocalContext().getPatient().clone());
		form.lyrDetails().tabPatientDetails().ccDetails().setSavedPatient((Patient) form.getLocalContext().getPatient().clone());

		displayRelativeSynchronizationDialog();		
		//form.lyrDetails().tabPatientDetails().ccPatientContacts().setValueGridCommChanel(null);	//wdev-17883
		//form.grdIdentifiers().setValue(null);	
		//form.getContextMenus().getGenericGridCOPYItem().setVisible(form.grdIdentifiers().getSelectedRow() != null);
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
		
		updateContextMenu();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		handleCancelButtonAction(); //WDEV-21687 
	}

	private void handleCancelButtonAction() throws FormOpenException
	{
		//WDEV-21687
		if (!Boolean.TRUE.equals(form.getLocalContext().getFormOpenedFromNavigation()) && form.getLocalContext().getPreDefinedFormModeIsNotNull() && engine.isDialog())
		{
			form.getGlobalContext().Core.setPatientToBeDisplayed(null);
			engine.close(DialogResult.CANCEL);
			return;
		}
		cancelSave();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateData())
		{
			doSave(null, null);
			form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
			
			updateContextMenu();
		}
	}
	
	//various functions here
	private void displayDemographics(Patient synchronizedPatient) throws FormOpenException
	{
		PatientShort patient = synchronizedPatient != null ? synchronizedPatient : form.getGlobalContext().Core.getPatientShort();
		
		//WDEV-8525
		Date dteDod = null;
		Time timTimeOfDeath = null;
		if(patient != null)
		{	
			dteDod = patient.getDod();
			timTimeOfDeath = patient.getTimeOfDeath();
		}	
		
		if (patient != null && (patient.getID_PatientIsNotNull() || (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO") && patient.getInterfaceId() != null)))
		{
			displayPatient(patient, synchronizedPatient != null);
			form.getGlobalContext().Core.setDeathDetails(domain.getDeathDetails(patient));

		}
		else if (form.getGlobalContext().Core.getPatientToBeDisplayedIsNotNull())
		{
			patient = form.getGlobalContext().Core.getPatientToBeDisplayed();
			if (patient != null && (patient.getID_PatientIsNotNull() || (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO") && patient.getInterfaceId() != null)))
			{
				displayPatient(patient, synchronizedPatient != null);
				patient = form.getGlobalContext().Core.getPatientShort(); // A domain get was done in previous method invoked ... wdev-14742
				if (patient != null)
				{
						dteDod = patient.getDod();
						timTimeOfDeath = patient.getTimeOfDeath(); //WDEV-19682
				}		
			}
			else
			{
				// New patient registration
				PatientFilter voPatFilter = form.getGlobalContext().Core.getPatientFilter();
				
				form.lyrDetails().tabPatientDetails().ccDetails().setPatientDetailsFromPatientFilter(voPatFilter);  //wdev-13521			

				form.lyrDetails().tabOtherDetails().cmbPatientCategory().setValue(PatientStatus.NHS); //WDEV-22312 Default Patient Category to NHS

				form.setMode(FormMode.EDIT);
				form.btnUpdate().setEnabled(false);

			}
		}
		else
		{
			throw new CodingRuntimeException("Demographics not supplied with PatientFilter GC or PatientShort GC");
		}	

		if (dteDod != null)
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(true);
			form.lyrDetails().tabPatientDetails().ccDetails().setdteDodEnabled(false);
			form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(true);
			form.lyrDetails().tabPatientDetails().ccDetails().settimTodEnabled(false);
			form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(true);
			form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(true);
			form.lyrDetails().tabPatientDetails().ccDetails().setdteDodValue(dteDod);
			form.lyrDetails().tabPatientDetails().ccDetails().settimTodValue(timTimeOfDeath);
		}
		else
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(false);
			form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(false);
			form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(false);
			form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(false);
			form.lyrDetails().tabPatientDetails().ccDetails().setdteDodValue(null);
			form.lyrDetails().tabPatientDetails().ccDetails().settimTodValue(null);
			
			form.getLocalContext().setDeathDetails(null);
			form.getGlobalContext().Core.setDeathDetails(null);
		}
		
		form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Mark as Deceased");
		form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(false);
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && dteDod == null && patient != null && patient.getID_PatientIsNotNull())
			{
				form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(true);
			}
			/*
			else
			{
				form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(true);
			}
			*/
			
			if(engine.isDialog())
				form.btnUpdate().setVisible(false);
		}
		
		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && dteDod != null)
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Update Death Details");
			form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(true);
		}
	}

	private void displayPatient(PatientShort patient, boolean bSynchronizedPatient) throws FormOpenException
	{
		Patient voPatient;
		try
		{
			voPatient = bSynchronizedPatient ? (Patient)patient : domain.getPatient(patient);
			engine.addPatientSelectionToHistory(voPatient);
			//WDEV-13009 
			if(engine.getParentDialogFormName()!= null && engine.getParentDialogFormName().equals(form.getForms().Core.BedInfoDialog))
			{
				form.getLocalContext().setsavedPatient((Patient) voPatient.clone());
				form.lyrDetails().tabPatientDetails().ccDetails().setSavedPatient((Patient) voPatient.clone());
			}
		}
		catch (StaleObjectException e)
		{
			// Try a second time. Only then fail.
			try
			{
				voPatient = domain.getPatient(patient);
			}
			catch (StaleObjectException e1)
			{
				throw new FormOpenException("Failed to retrieve Patient due to StaleObjectException");
			}
		}
		if (voPatient == null)
			throw new FormOpenException("Data has been changed, Please perform another Patient Search");
	
		form.getLocalContext().setPatient(voPatient);
		form.getGlobalContext().Core.setPatientShort(voPatient);
		populateScreenFromData(voPatient);

		//to avoid a NPE on save when a patient was updated from PDS as some key fields were changed
		form.getLocalContext().setsavedPatient((Patient) voPatient.clone());
		form.lyrDetails().tabPatientDetails().ccDetails().setSavedPatient((Patient) voPatient.clone());
		
		form.getLocalContext().setInitialPatient((Patient)voPatient.clone());

		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED)
			&& voPatient != null
			&& voPatient.getDodIsNotNull())
		{
			form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedText("Update Death Details");
			form.lyrDetails().tabPatientDetails().ccDetails().setbtnDeceasedVisible(true);
		}

		//form.btnUpdate().setVisible(ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue());
		
		if(bSynchronizedPatient)
		{
			form.setMode(FormMode.EDIT);
			form.btnUpdate().setVisible(false);
		}
		else
			form.btnUpdate().setVisible(true);
		//WDEV-21863 
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().showHideGPDetailsButton(voPatient != null && voPatient.getPDSPatientGPHistoryIsNotNull() && voPatient.getPDSPatientGPHistory().size() > 0);
	}

	protected void populateScreenFromData(Patient pat)
	{
		clearScreen();
		
		if (pat == null)
			throw new DomainRuntimeException("No Patient Supplied");				
		
		//-----
		//if(ConfigFlag.UI.DISPLAY_PATIENT_IMAGE.getValue() == true)  //wdev-13521
		{			
			if( Boolean.FALSE.equals(form.lyrDetails().tabPatientDetails().ccDetails().populateScreenFromData(pat)))
			{
				//wdev-15845
				if( Boolean.TRUE.equals(form.lyrDetails().tabPatientDetails().ccDetails().getDemographicDetailsCannotBeEdited()))
				{
					form.btnUpdate().setEnabled(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setDemographicDetailsCannotBeEdited(null);
				}
				return;
			}
			
		}
		/*
		else
		{
			if(Boolean.FALSE.equals(form.lyrDetails().tabPatientDetails().ccDetails().populateScreenFromData(pat)))
			{
				//wdev-15845
				if( Boolean.TRUE.equals(form.lyrDetails().tabPatientDetails().ccDetails().getDemographicDetailsCannotBeEdited()))
				{
					form.btnUpdate().setEnabled(false);
					form.lyrDetails().tabPatientDetails().ccDetails().setDemographicDetailsCannotBeEdited(null);
				}
				return;
			}
		}
		*/
		
		//this is to check whether the GP has changed so to add it to history 
		PDSPatientGPVo prevGpInfo = new PDSPatientGPVo();
		prevGpInfo.setGp(pat.getGp());
		prevGpInfo.setPractice(pat.getPractice());	
		if(pat.getPDSPatientGPIsNotNull())
		{
			prevGpInfo.setBeffdate(pat.getPDSPatientGP().getBeffdate());
		}
		form.getLocalContext().setPreviousGpInfo(prevGpInfo);
		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setValue(pat.getAddress());
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setPatient(pat);
		form.lyrDetails().tabPatientDetails().ccDetails().setValue(pat);
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().setValue(pat);
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().setvalue(pat);
		//WDEV-21256
		//set default no fixed abode posttown address line if needed
		if (form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().getPatientWithGPetails()!=null
				&& form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().getPatientWithGPetails().getPractice()!=null
				&& form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().getPatientWithGPetails().getPractice().getAddress()!=null)
		{
			//WDEV-22720
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setDefaultNoFixedAbodeAddressLine4(form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().getPatientWithGPetails().getPractice().getAddress().getAddressLocality());
			//WDEV-22720
		}
		//WDEV-21256
		form.getGlobalContext().Core.setNOKDetails(pat.getNok());
		
		populateTabOtherDetails(pat);
		populateTabPreferences(pat);
		populateTabRelatedPersons(pat);
		
		form.lyrDetails().tabPatientDetails().ccDetails().setPatientImage(pat);
		
		form.getGlobalContext().Core.setAliasName(null);
		
		form.getGlobalContext().Core.setOtherNames(pat.getOtherNames());
		
		if(pat.getOtherNamesIsNotNull() && pat.getOtherNames().size() > 0)
		{
			form.getGlobalContext().Core.setAliasName(pat.getOtherNames().get(0).getSurname());

			form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasEnabledImage(form.getImages().Core.AddFile16);
			form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasDisabledImage(form.getImages().Core.AddFile16);
			//form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasTooltip("<b>ALIAS :</b>   " + form.getGlobalContext().Core.getAliasName());
			form.lyrDetails().tabPatientDetails().ccDetails().setimbAliasVisible(true);
		}
		
		PatientCaseNoteListVoCollection caseNoteFolders = domain.listCaseNoteFolders(pat, null,  getStatusesIds(getCurrentOnlyStatuses()));
		
		form.lyrDetails().tabOtherDetails().grdCasenote().getRows().clear();
		
		if(caseNoteFolders != null && caseNoteFolders.size() > 0)
		{
			for(PatientCaseNoteListVo caseNote : caseNoteFolders)
			{
				grdCasenoteRow row = form.lyrDetails().tabOtherDetails().grdCasenote().getRows().newRow();
				
				if(caseNote.getFolderIsNotNull())
					row.setcolFolder(caseNote.getFolder().getText());
				if(caseNote.getTypeIsNotNull())
					row.setcolType(caseNote.getType().getText());
				if(caseNote.getCurrentLocationIsNotNull())
					row.setcolLocation(caseNote.getCurrentLocation().getName());
			}
		}
		
		if(Boolean.TRUE.equals(pat.getIsConfidential()))
		{
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().setVisible(false);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabSensitiveAddress().setVisible(true);
			
			form.lyrDetails().tabRelatedPersons().setHeaderVisible(false);
			form.lyrDetails().tabPatientDetails().ctnContactsAndGP().setVisible(false);
			
			boolean activityB1611 = true;
			boolean hasRightToRecordTempSensitiveAddress = true;
			
			if (isPds() && engine.getLoggedInRole().getRequiresPDS() && engine.getLoggedInRole().getSpineRbacRole()!=null)
			{
				//check B1611 activity
				// PDS AUTHENTICATION				
	    		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
	    		activityB1611 = pdsAuth.hasRightsFor(PdsRight.ACCESS_SENSITIVE_DATA, PdsCheck.CHECK_ACTIVITY, null);
				// END PDS AUTHENTICATION
	    		
	    		//WDEV-21444
	    		form.lyrDetails().tabRelatedPersons().setHeaderVisible(activityB1611);
	    		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().setVisible(activityB1611);
	    		
			}
			
			hasRightToRecordTempSensitiveAddress = engine.hasRight(AppRight.PDS_RECORD_TEMP_SENSITIVE_ADDRESS);
			
			if(isPds()) // WDEV-21999.
			{
				if (!(activityB1611 && hasRightToRecordTempSensitiveAddress))
				{
					//WDEV-22048 Appended Consent message details
					if(displayConsentMessage(pat))	//WDEV-22049 - only display message if Patient consent is not PDSConsent.EXPLICITDISSENT, otherwise user will get 2 popup messages
					{
						// WDEV-21999 engine.showMessage("You must have the appropriate RBAC rights to be able to view or amend 'location' data for this patient"+getConsentMessage(pat));
			        	form.htmOverwritten().setHTML("<font color=\"red\">You must have the appropriate RBAC rights to be able to view or amend 'location' data for this patient"+getConsentMessage(pat)+".  Updates to this record will NOT be sent to PDS.</font>");  // WDEV-21999 
					}
				}
				
				// WDEV-21999.  
				if (!(!activityB1611 && hasRightToRecordTempSensitiveAddress))
				{
					//WDEV-22048 Appended Consent message details
					if(displayConsentMessage(pat))	//WDEV-22049 - only display message if Patient consent is not PDSConsent.EXPLICITDISSENT, otherwise user will get 2 popup messages
					{
						// WDEV-21999 engine.showMessage("You must have the appropriate RBAC rights to be able to view or amend 'location' data for this patient"+getConsentMessage(pat));
			        	form.htmOverwritten().setHTML("<font color=\"red\">Marked as sensitive. Location data not available.  Updates to this record will NOT be sent to PDS.</font>");  // WDEV-21999 
					}
				}
			}
			
			form.lyrDetails().tabPatientDetails().lyrAddress().tabSensitiveAddress().btnViewAddresses().setVisible(activityB1611 && hasRightToRecordTempSensitiveAddress);
		}
		else
		{
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().setVisible(true);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabSensitiveAddress().setVisible(false);
		}
		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setTooltip(getNokTooltip(pat));		
		
		//WDEV-21624 - hide country from address if not overseas visitor
		checkTheEvent(VISITOR_STATUS);
	}
	
	private CaseNoteStatusCollection getCurrentOnlyStatuses()
	{
		CaseNoteStatusCollection coll = LookupHelper.getCaseNoteStatus(domain.getLookupService());
		if(coll == null)
			return null;
		
		CaseNoteStatusCollection statuses = new CaseNoteStatusCollection();
		
		for(int i=0; i<coll.size(); i++)
		{
			if(coll.get(i) == null || CaseNoteStatus.SCANNED.equals(coll.get(i)) || CaseNoteStatus.DESTROYED.equals(coll.get(i)) || CaseNoteStatus.MERGED.equals(coll.get(i)))
				continue;
			
			statuses.add(coll.get(i));
		}
		
		return statuses;
	}
	
	private String getStatusesIds(CaseNoteStatusCollection statuses) 
	{
		if(statuses == null || statuses.size() == 0)
			return null;
		
		String ids = "";
		
		for(int i=0; i<statuses.size(); i++)
		{
			if(statuses.get(i) == null)
				continue;
			
			ids += (ids.length() > 0 ? "," : "") + statuses.get(i).getId();
		}
		
		return ids.length() > 0 ? ids : null;
	}
	
	private void populateTabRelatedPersons(Patient pat)
	{
		grdRelatedPersonsGrid grd = form.lyrDetails().tabRelatedPersons().grdRelatedPersons();
		
		grd.getRows().clear();

		if(form.getGlobalContext().Core.getPatientRelativesIsNotNull())
			form.getGlobalContext().Core.getPatientRelatives().clear();
		else
			form.getGlobalContext().Core.setPatientRelatives(new PatRelativeCollection());
		
		if(pat.getPDSrelativesIsNotNull())
		{
			pat.getPDSrelatives().sort(new ContactRankingComparator(SortOrder.ASCENDING));
			
			for(int i = 0; i < pat.getPDSrelatives().size(); i++)
			{
				addRelatedPersonRecord(pat.getPDSrelatives().get(i));
				form.getGlobalContext().Core.getPatientRelatives().add(pat.getPDSrelatives().get(i));
			}
		}
	}
	
	private void populateTabOtherDetails(Patient pat)
	{
		
		//form.lyrDetails().tabOtherDetails().cmbReligion().setValue(pat.getReligion());
		//form.lyrDetails().tabOtherDetails().cmbEthnicCategory().setValue(pat.getEthnicOrigin());
		//form.lyrDetails().tabOtherDetails().cmbMaritialStatus().setValue(pat.getMaritalStatus());
		//form.lyrDetails().tabOtherDetails().cmbOccupation().setValue(pat.getOccupation());
		form.lyrDetails().tabOtherDetails().cmbPatientCategory().setValue(pat.getPatientCategory());
		
		if(pat.getSchoolOrCollegeIsNotNull())
		{
			//form.lyrDetails().tabOtherDetails().qmbSchool().newRow(pat.getSchoolOrCollege(), pat.getSchoolOrCollege().getText());
			//form.lyrDetails().tabOtherDetails().qmbSchool().setValue(pat.getSchoolOrCollege());
		}
		
		populateInsuranceFromData(pat.getNationalHealthCover(), pat.getCurrentMedicalInsurance());
		
		boolean ageGreater16 = false;
		if(pat.getAge() == null || pat.getAge() > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
		{
			ageGreater16 = true;
		}
		
		//form.lyrDetails().tabOtherDetails().cmbEthnicCategory().setRequired(!form.getLocalContext().getFormOpenedFromNavigation());
		
		//form.lyrDetails().tabOtherDetails().qmbSchool().setRequired(!form.getLocalContext().getFormOpenedFromNavigation() && !ageGreater16);
		
		//form.lyrDetails().tabOtherDetails().lblOccupation().setVisible(ageGreater16);
		//form.lyrDetails().tabOtherDetails().cmbOccupation().setVisible(ageGreater16);
		//form.lyrDetails().tabOtherDetails().lblSchool().setVisible(!ageGreater16);
		//form.lyrDetails().tabOtherDetails().qmbSchool().setVisible(!ageGreater16);
		form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setVisible(!ageGreater16 && !isSVUH());
		form.lyrDetails().tabOtherDetails().lblPublicCareNeed().setVisible(Boolean.TRUE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()) && !ageGreater16);
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setVisible(Boolean.TRUE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()) && !ageGreater16);
		
		form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.lyrDetails().tabOtherDetails().cmbOccupation().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.lyrDetails().tabOtherDetails().qmbSchool().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setValue(pat.getIsChildInPublicCare());
		if(pat.getPublicCareNeedIsNotNull())
		{
			form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().newRow(pat.getPublicCareNeed(), pat.getPublicCareNeed().getText());
			form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setValue(pat.getPublicCareNeed());
		}
		
		updateComponentState();
	}
	
	private void populateInsuranceFromData(NationalHealthCoverVo insurance, PatientMedicalInsuranceVo patientmedicalinsurance)
	{
		if( patientmedicalinsurance != null )
		{
			if( patientmedicalinsurance.getCompanyIsNotNull())
			{
    			if( form.lyrDetails().tabOtherDetails().cmbInsurer().getValues().contains(patientmedicalinsurance.getCompany()))
    				form.lyrDetails().tabOtherDetails().cmbInsurer().setValue(patientmedicalinsurance.getCompany());
    			else
    			{
    				form.lyrDetails().tabOtherDetails().cmbInsurer().newRow(patientmedicalinsurance.getCompany(), patientmedicalinsurance.getCompany().getIItemText());
    				form.lyrDetails().tabOtherDetails().cmbInsurer().setValue(patientmedicalinsurance.getCompany());
    			}
			}
			form.lyrDetails().tabOtherDetails().txtPolicyNumber().setValue(patientmedicalinsurance.getPolicyNumber());
			form.lyrDetails().tabOtherDetails().cmbPolicyType().setValue(patientmedicalinsurance.getPolicyType());
			form.lyrDetails().tabOtherDetails().txtPolicyOther().setValue(patientmedicalinsurance.getPlanOrUnits());
			form.lyrDetails().tabOtherDetails().dteRenewalDate().setValue(patientmedicalinsurance.getExpiryDate());
			
			PrivateInsurancePolicyType type = form.lyrDetails().tabOtherDetails().cmbPolicyType().getValue();
			form.lyrDetails().tabOtherDetails().txtPolicyOther().setRequired(PrivateInsurancePolicyType.OTHER.equals(type));
		}
		
		form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setVisible(isSVUH());
		form.lyrDetails().tabOtherDetails().lblEligibility().setVisible(isSVUH());
		
		if(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getVisible())
			form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setRequired(true);
		
		//WDEV-23335
		form.lyrDetails().tabOtherDetails().cmbEligibility().setVisible(!isSVUH());
		form.lyrDetails().tabOtherDetails().lblEligibility1().setVisible(!isSVUH());
		form.lyrDetails().tabOtherDetails().lblEligibility2().setVisible(!isSVUH());
		
		if( insurance != null )
		{
			form.lyrDetails().tabOtherDetails().txtEhicNumber().setValue(insurance.getEHICNumber());
			form.lyrDetails().tabOtherDetails().pdtEhicExpiryDate().setValue(insurance.getEHICExpiryDate());
			form.lyrDetails().tabOtherDetails().cmbEhicCountry().setValue(insurance.getEHICCountry());
			form.lyrDetails().tabOtherDetails().cmbEhicInstitution().setValue(insurance.getEHICInstitutionCode());
			
			form.lyrDetails().tabOtherDetails().txtMedicalCardNo().setValue(insurance.getMedicalCardNo());
			form.lyrDetails().tabOtherDetails().pdtExpiryDate().setValue(insurance.getMedicalCardExpiryDate());
			form.lyrDetails().tabOtherDetails().cmbEligibility().setValue(insurance.getHealthActCategory());
			form.lyrDetails().tabOtherDetails().cmbProved().setValue(insurance.getMedicalCardProved());
			form.lyrDetails().tabOtherDetails().txtEligibilityProof().setValue(insurance.getEligibilityProof());
			
			if(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getVisible())
			{
				form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setValue(insurance.getEligibility());
				try
				{
					onCmbEligibilitySVUHValueChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}
			}
			
		}
		
	}

	private void populateInsuranceSchemeCombo()
	{
		form.lyrDetails().tabOtherDetails().cmbInsurer().clear();
		PrivateInsuranceCompanyVoCollection tempColl = domain.listPrivateInsuranceCompanyVo();
		if( tempColl != null && tempColl.size() > 0)
		{
			for(int  i = 0; i < tempColl.size(); i++)
			{
				form.lyrDetails().tabOtherDetails().cmbInsurer().newRow(tempColl.get(i), tempColl.get(i).getIItemText());
			}
		}
	}
	
	
	private void populateTabPreferences(Patient pat)	
	{
		PatientContactPreferenceVo tempPatContctVo  = pat.getAlternativeContact();   
		
		if( tempPatContctVo != null )
		{
			form.lyrDetails().tabPreferences().cmbPrefferedContactMethod().setValue(tempPatContctVo.getPdsPreferredContactMethod());
			form.lyrDetails().tabPreferences().txtPrefferedContactTimes().setValue(tempPatContctVo.getPdsPreferredContactTimes());
			form.lyrDetails().tabPreferences().cmbPreferredWrittenCommMethod().setValue(tempPatContctVo.getPdsPreferredWrittenComm());
			form.lyrDetails().tabPreferences().cmbConsent().setValue(tempPatContctVo.getPdsConsent());
			form.lyrDetails().tabPreferences().dteDateLastChanged().setValue(tempPatContctVo.getPdsDateLastChanged());
			form.lyrDetails().tabPreferences().txtConsentComments().setValue(tempPatContctVo.getComment());
			
			form.lyrDetails().tabPreferences().grdConsentHistory().getRows().clear();
			if(tempPatContctVo.getConsentHistoryIsNotNull())
			{
				tempPatContctVo.getConsentHistory().sort(new ConsentHistoryComparator(SortOrder.DESCENDING));
				
				for (int i = 0; i < tempPatContctVo.getConsentHistory().size(); i++)
				{
					grdConsentHistoryRow row = form.lyrDetails().tabPreferences().grdConsentHistory().getRows().newRow();
					
					row.setcolComments(tempPatContctVo.getConsentHistory().get(i).getComment());
					row.setcolDate(tempPatContctVo.getConsentHistory().get(i).getDate() != null ? tempPatContctVo.getConsentHistory().get(i).getDate().toString() : "");
					row.setcolStatus(tempPatContctVo.getConsentHistory().get(i).getConsent() != null ? tempPatContctVo.getConsentHistory().get(i).getConsent().getText() : "");
					
					row.setValue(tempPatContctVo.getConsentHistory().get(i));
				}
			}
		}
		
		
		form.lyrDetails().tabPreferences().cmbPreferredLanguage().setValue(pat.getPrefCommLanguage());
		if(pat.getPDSInterpreterRequiredIsNotNull())
		{
			if(Boolean.TRUE.equals(pat.getPDSInterpreterRequired()))
			{
				form.lyrDetails().tabPreferences().Group2().setValue(Group2Enumeration.rdoIRYes);
			}
			else
			{
				form.lyrDetails().tabPreferences().Group2().setValue(Group2Enumeration.rdoIRNo);
			}
		}
	}
	
	private void cancelSave() throws FormOpenException
	{
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		
		form.getGlobalContext().Core.setPdsRelativesSynchronization(null);
		form.getGlobalContext().Core.setSynchronizeRelatives(null);
		
		if (patient != null && patient.getID_PatientIsNotNull())
		{
			// Existing patient so just refresh and return to demographics
			// screen
			form.setMode(FormMode.VIEW);		//wdev-14249
			displayPatient(patient, false);
			//form.setMode(FormMode.VIEW);
			form.btnUpdate().setEnabled(true);
			//Take the value stored in the db 
			patient = form.getGlobalContext().Core.getPatientShort();
			Boolean dteDodIsVisible = form.lyrDetails().tabPatientDetails().ccDetails().dteDodIsVisible();
			
			if (patient.getDod() == null && dteDodIsVisible) //wdev-13521
			{
				form.lyrDetails().tabPatientDetails().ccDetails().setdteDodVisible(false);
				form.lyrDetails().tabPatientDetails().ccDetails().settimTodVisible(false);
				form.lyrDetails().tabPatientDetails().ccDetails().setlblDodVisible(false);
				form.lyrDetails().tabPatientDetails().ccDetails().setlblDod2Visible(false);
			}
			
			//setRemoveMenuVisibility();
			
			form.lyrDetails().tabPatientDetails().ccDetails().setPatientImage(form.getGlobalContext().Core.getPatientShort());  //wdev-13521
		}
		else
		{
			// Go back to PDS Patient Search
			engine.open(form.getForms().Core.PDSPatientSearch);//WDEV-19365
			form.getGlobalContext().Core.setPatientShort(null);
			form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		}
		
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
		
		updateContextMenu();
	}
	
	private boolean gridContainsRecord(PatRelative rel)
	{
		if(rel == null)
			return false;
		
		grdRelatedPersonsRowCollection rows = form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getRows();
		
		for (int i = 0; i < rows.size(); i++)
		{
			grdRelatedPersonsRow row = rows.get(i);
			
			if(rel.equals(row.getValue()))
				return true;
		}
		
		return false;
	}

	private void refreshRelatedPersonRecord(PatRelative rel)
	{
		grdRelatedPersonsRowCollection rows = form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getRows();
		
		for (int i = 0; i < rows.size(); i++)
		{
			grdRelatedPersonsRow row = rows.get(i);
			
			if(rel.equals(row.getValue()))
			{
				updatePatientRelativeRowValue(rel, row);
				break;
			}
		}
	}
	private void addRelatedPersonRecord(PatRelative rel)
	{
		grdRelatedPersonsRow row = form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getRows().newRow();
		
		updatePatientRelativeRowValue(rel, row);
	}
	private void updatePatientRelativeRowValue(PatRelative rel, grdRelatedPersonsRow row)
	{
		if(rel.getName() != null)
			row.setcolName(rel.getName().toString());
		
		if(rel.getRoleIsNotNull())
			row.setcolRole(rel.getRole().getText());
		
		if(rel.getRelationshipIsNotNull())
			row.setcolType(rel.getRelationship().getText());
		
		row.setcolCopyCorrespondence(Boolean.TRUE.equals(rel.getCpyCorresp()));
		
		row.setcolContactNo(getPersonContactNumber(rel.getCommChannels())); 
		row.setcolNok(Boolean.TRUE.equals(rel.getNokInd())); //WDEV-22286
		
		//WDEV-22286
		if (rel.getContactRankIsNotNull())
			row.setcolRanking(rel.getContactRank());
		//WDEV-22286 ends here
		
		row.setValue(rel);
	}

	/*
	private boolean validatePct() 
	{
		Patient patient = form.getLocalContext().getPatient();
		
		//get data
		patient.setAddress(form.lyrDetails().tabPatientDetails().ccAddress().getValue());
		
		// check valid address if CAPSCAN enabled
		if (ConfigFlag.UI.CAPSCAN_ENABLED.getValue())
		{
			if (ConfigFlag.UI.DISPLAY_PCT_CODE.getValue())
			{
				//verify it
				if (patient.getAddressIsNotNull() && patient.getAddress().getPostCodeIsNotNull())			//wdev-15845
				{
					String l_postCode = patient.getAddress().getPostCode();					
					//WDEV-14397
					String l_pctCode = form.lyrDetails().tabPatientDetails().ccAddress().getValue().getPCT();
					
					//WDEV-17212 - TCCO4597
					if (l_pctCode != null && (l_pctCode.toUpperCase().equals("X98")))
					{
						l_pctCode = l_pctCode.toUpperCase();
						form.lyrDetails().tabPatientDetails().ccAddress().getValue().setPCT(l_pctCode); 
					}
					
					if (l_pctCode != null && (!l_pctCode.equals("X98")))
					{					
						String l_correctPct = form.lyrDetails().tabPatientDetails().ccAddress().verifyPCT(l_postCode);
						if  ((null == l_correctPct) || (l_pctCode.equals("")))
						{					 
							if (ConfigFlag.UI.PCT_CODE_VALIDAT_OVERRIDE.getValue())
							{
								
								form.getLocalContext().setPCTMessageId(DialogResult.OK);
								engine.showMessage("Warning: CCG code: " + form.lyrDetails().tabPatientDetails().ccAddress().getValue().getPctCode() 
										+ " does not match with the postcode: " + form.lyrDetails().tabPatientDetails().ccAddress().getValue().getPostCode() + "\n\n"
										+ "The save will continue, but you can update to either remove the CCG value for automatic correction or specify X98 to bypass verification.",
										"CCG", MessageButtons.OK, MessageIcon.WARNING);
								return false;
							}
							else
							{
								form.getLocalContext().setPCTMessageId(DialogResult.CANCEL);
								engine.showMessage("Error: Cannot match CCG code: " + form.lyrDetails().tabPatientDetails().ccAddress().getValue().getPctCode() 
										+ " with the postcode: " + form.lyrDetails().tabPatientDetails().ccAddress().getValue().getPostCode() 
										+ ". \nPlease enter a valid postcode,remove CCG value to allow automatic correction or specify X98 to bypass verification.", 
										"CCG", MessageButtons.OK, MessageIcon.ERROR);
								return false;								
							}
						}
						else
						{
							//call get value again to get current pct as set by component.							
							if (patient != null)
								patient.setAddress(form.lyrDetails().tabPatientDetails().ccAddress().getValue());
						}					
					}
				}
			}
		}

		return true;
	}
	*/

	private void doSave(Boolean decouplePatientRecord, Boolean markSimilarOnesAsDuplicated)
	{
		boolean newPatient = false;
		
		Patient patient = form.getLocalContext().getPatient();
		patient = populateDataFromScreen(patient);
		
		if(patient.getID_Patient() == null)
			newPatient = true;

		if(markSimilarOnesAsDuplicated == null || Boolean.FALSE.equals(markSimilarOnesAsDuplicated))
		{
    		PatientId nhs = patient.getNhsn();
    		
    		if(newPatient && nhs != null)
    		{
    			PatientLiteVoCollection patients = domain.listPatientsByIdentifier(nhs);
    			
    			if(patients != null && patients.size() > 0)
    			{
    				form.getGlobalContext().Core.setDuplicatedPatients(patients);
    				engine.open(form.getForms().Core.DuplicatedPatients);
    				return;
    			}
    		}
		}
		
		//WDEV-21624
		boolean bNameChanged = false;
		if(form.getLocalContext().getInitialPatientIsNotNull()
				&& form.getLocalContext().getInitialPatient().getNameIsNotNull()
				&& form.getLocalContext().getInitialPatient().getName().getSurnameIsNotNull()
				&& !form.getLocalContext().getInitialPatient().getName().getSurname().equals(patient.getName().getSurname()))  
			bNameChanged = true;
		if(!bNameChanged && form.getLocalContext().getInitialPatientIsNotNull()
				&& form.getLocalContext().getInitialPatient().getNameIsNotNull()
				&& form.getLocalContext().getInitialPatient().getName().getForenameIsNotNull()
				&& !form.getLocalContext().getInitialPatient().getName().getForename().equals(patient.getName().getForename()))
			bNameChanged = true;	
		
		if ( bNameChanged
				&& form.getLocalContext().getbSaveAliasChange() == null) 
			{
				form.getLocalContext().setAliasChangedMessageID(engine.showMessage("You have changed the patient's name. Is this a data correction?", "Patient Name Change", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
		
		boolean bAddressChanged = false;
		if(form.getLocalContext().getInitialPatientIsNotNull() && form.getLocalContext().getInitialPatient().getAddressIsNotNull())
			bAddressChanged = hasAddressChanged(patient.getAddress(), form.getLocalContext().getInitialPatient().getAddress());		

		if (bAddressChanged
				&& form.getLocalContext().getbSaveAddressChange() == null) 
			{
				form.getLocalContext().setAddressChangedMessageID(engine.showMessage("You have changed the patient's address. Is this a data correction?", "Patient Address Change", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
		//WDEV-22448 
		if (ConfigFlag.GEN.CANCEL_APPOINTMENTS_WHEN_DOD_ENTERED.getValue()
				&& form.getLocalContext().getbRemovePatientAppointments() == null	
				&& patient.getDod() != null
				&& !newPatient
				&& form.getGlobalContext().Core.getDeathDetailsIsNotNull()
				&& form.getGlobalContext().Core.getDeathDetails().getPatient().getDodIsNotNull()
				&& form.getGlobalContext().Core.getDeathDetails().getID_DeathDetails() == null) 
		{
			form.getLocalContext().setRemoveAppointmentsMessageID(engine.showMessage("All future appointments will be cancelled for this patient.", "Appointment Cancellation", MessageButtons.OK, MessageIcon.INFORMATION));
			return;
		}	
		//wdev-13000
		/*
		if (ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue())
		{
			if (form.getLocalContext().getbSaveAliasChangeIsNotNull()
				&& form.getLocalContext().getbSaveAliasChange()
				&& form.getGlobalContext().Core.getAliasNameIsNotNull()
				&& form.getGlobalContext().Core.getAliasName().equals(patient.getName().getSurname()))  //wdev-13521
			{
				engine.showMessage("Patients alias must be different from surname");
				return;
			}

			boolean bAliasAndSurnameChanged = false;
			boolean bSurnameChanged = false;
			//if the surname and alias have changed, then you need to ask if old Surname should overwrite the Alias
			if(form.getGlobalContext().Core.getAliasNameIsNotNull()
				&& form.getLocalContext().getInitialPatientIsNotNull()
				&& form.getLocalContext().getInitialPatient().getNameIsNotNull()
				&& form.getLocalContext().getInitialPatient().getName().getSurnameIsNotNull()
				&& !form.getLocalContext().getInitialPatient().getName().getSurname().equals(patient.getName().getSurname()))  
				bAliasAndSurnameChanged = true;

			//if the surname has changed, then you need to ask if old Surname should overwrite the Alias
			if(form.getGlobalContext().Core.getAliasName() == null
				&& form.getLocalContext().getInitialPatientIsNotNull()
				&& form.getLocalContext().getInitialPatient().getNameIsNotNull()
				&& form.getLocalContext().getInitialPatient().getName().getSurnameIsNotNull()
				&& !form.getLocalContext().getInitialPatient().getName().getSurname().equals(patient.getName().getSurname()))  
				bSurnameChanged = true;

			if ( (bAliasAndSurnameChanged
				|| bSurnameChanged)
				&& form.getLocalContext().getbSaveAliasChange() == null) 
			{
				form.getLocalContext().setAliasChangedMessageID(engine.showMessage("You have changed the patient's surname. Do you wish to add the previous surname to the Alias list?", "Alias Change", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
		}
		*/
		if(isPds())
		{
    		if((decouplePatientRecord == null && patient.getDodIsNotNull()))
    		{
    			if(!patient.getDod().equals(form.getLocalContext().getInitialPatient().getDod()))
    			{
    				form.getGlobalContext().Core.setYesNoDialogMessage("Would you like to decouple the patient record from PDS?");
    				engine.open(form.getForms().Core.YesNoDialog);
    				return;
    			}
    		}
    		else if (((decouplePatientRecord == null && patient.getDod() == null && form.getLocalContext().getInitialPatient() != null && form.getLocalContext().getInitialPatient().getDodIsNotNull())))
    		{
    			form.getGlobalContext().Core.setYesNoDialogMessage("Would you like to decouple the patient record from PDS?");
    			engine.open(form.getForms().Core.YesNoDialog);
    			return;
    		}
    		
    		//WDEV-22498 - rollback
    		// PDS AUTHENTICATION
//    		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
//    		if(pdsAuth.hasRightsFor(PdsRight.PDS_RETRIEVAL, PdsCheck.CHECK_ALL, null))
//    		{
    			if(form.getLocalContext().getInitialPatient() != null)
    			{
    	    		PdsPatientUpdateHelper updateHelper = new PdsPatientUpdateHelper(domain);
    	    		updateHelper.setPatientUpdateFields(patient, form.getLocalContext().getInitialPatient());
    			}
//    		}    
    		//WDEV-22498    		
		}
		
		form.getLocalContext().setbSaveAliasChange(null);
		form.getLocalContext().setbSaveAddressChange(null);
		//patient.setSaveAlias(form.getGlobalContext().Core.getAliasNameIsNotNull() ? form.getGlobalContext().Core.getAliasName() : null);

		//WDEV-23340 - clear maiden name from collection if it exists
		//the first PersonName with NameType = MAIDEN is the maiden name displayed on demographics
		String txtMaidenName = form.lyrDetails().tabPatientDetails().ccDetails().getMaidenName();
		if((txtMaidenName == null || txtMaidenName.trim().length() == 0) && patient.getOtherNames() != null)
		{
			for(PersonName pn : patient.getOtherNames())
			{
				if(NameType.MAIDEN.equals(pn.getNameType()))
				{
					patient.getOtherNames().remove(pn);
					break;
				}
			}
		}
		
		save(patient, newPatient, null, null, true, decouplePatientRecord, markSimilarOnesAsDuplicated);
	}

	/*
	 * Checks whether all lookup instances that are used to pds have a taxonomy map of type PDS
	 * This is neccesary to make the link between MAXIMS and PDS lookups 
	 */
	private boolean checkValidPdsLookups(Patient patient, ArrayList<String> errors)
	{
		//Title
		if(patient.getNameIsNotNull())
		{
    		checkPdsLookup(patient.getName().getTitle(), "PersonTitle", errors);
		}

		//Sex
		checkPdsLookup(patient.getSex(), "Sex", errors);
		
		//Country
//		if(patient.getAddressIsNotNull())
//		{
//    		checkPdsLookup(patient.getAddress().getCountry(), "Country", errors);
//		}

		//Contact type
		if(patient.getCommChannelsIsNotNull())
		{
			for(int i = 0; i < patient.getCommChannels().size(); i++)
			{
        		checkPdsLookup(patient.getCommChannels().get(i).getChannelType(), "ChannelType", errors);
			}
		}

		//Ethnic category
		//checkPdsLookup(patient.getEthnicOrigin(), "EthnicOrigin", errors);

		//Religion
		//checkPdsLookup(patient.getReligion(), "Religion", errors);

		//Overseas
		//checkPdsLookup(patient.getOverseasClassification(), "OverseasVisitorStatusCassification", errors);

		//Relationship role & type
		if(patient.getPDSrelativesIsNotNull())
		{
			for(int i = 0; i < patient.getPDSrelatives().size(); i++)
			{
        		checkPdsLookup(patient.getPDSrelatives().get(i).getRole(), "PDSPersonRole", errors);
        		checkPdsLookup(patient.getPDSrelatives().get(i).getRelationship(), "PersonRelationship", errors);
			}
		}
		
		//preferred contact method
		if(patient.getAlternativeContactIsNotNull())
		{
			checkPdsLookup(patient.getAlternativeContact().getPreferredContactMethod(), "ContactMethod", errors);
		}
		
		//preferred written comm method
		if(patient.getAlternativeContactIsNotNull())
		{
			checkPdsLookup(patient.getAlternativeContact().getPdsPreferredWrittenComm(), "PreferredWrittenCommunication", errors);
		}
		
		//consent
		if(patient.getAlternativeContactIsNotNull())
		{
			checkPdsLookup(patient.getAlternativeContact().getPdsConsent(), "PDSConsent", errors);
		}
		
		//preferred comm language
		checkPdsLookup(patient.getPrefCommLanguage(), "PDSPreferredCommunicationLanguage", errors);
		
		return true;
	}
	
	private boolean checkPdsLookup(LookupInstVo lookup, String lkpName, ArrayList<String> errors)
	{
		//means that field is null so no need to check
		if(lookup == null)
			return true;
		
		LookupInstVo lkp = domain.getMappings(lookup);
		
		if(!hasPdsMapping(lkp.getMappings()))
		{
			String err = "Lookup instance '" + lkp.getText() + "' of type '" + lkpName + "' doesn't have a taxonomy mapping of type PDS !";
			
			if(errors != null)
				errors.add(err);
			else
				engine.showMessage(err);
			
			return false;
		}
		
		return true;
	}
	
	private boolean hasPdsMapping(LookupMappingVoCollection mappings)
	{
		if(mappings == null || mappings.size() == 0)
			return false;
		
		for(int i = 0; i < mappings.size(); i++)
		{
			if("PDS".equals(mappings.get(i).getExtSystem()))
			{
				return true;
			}
		}
		
		return false;
	}
	@Override
	public Patient populateDataFromScreen(Patient pat)
	{
		Patient patient = super.populateDataFromScreen(pat);

		//tab patient details
		form.lyrDetails().tabPatientDetails().ccDetails().populateDataFromScreen(patient);
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().populateDataFromScreen(patient);
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().populateDataFromScreen(patient);
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().populateDataFromScreen(patient);
		
		//tab other details
		//patient.setMaritalStatus(form.lyrDetails().tabOtherDetails().cmbMaritialStatus().getValue());
		//patient.setEthnicOrigin(form.lyrDetails().tabOtherDetails().cmbEthnicCategory().getValue());
		//patient.setReligion(form.lyrDetails().tabOtherDetails().cmbReligion().getValue());
		//patient.setOccupation(form.lyrDetails().tabOtherDetails().cmbOccupation().getValue());
		//patient.setSchoolOrCollege(form.lyrDetails().tabOtherDetails().qmbSchool().getValue());
		patient.setIsChildInPublicCare(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue());
		patient.setPublicCareNeed(form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().getValue());
		
		patient.setPatientCategory(form.lyrDetails().tabOtherDetails().cmbPatientCategory().getValue());
		
		patient.setNationalHealthCover(populateNationalHealthCover(patient, patient.getNationalHealthCover()));
		patient.setCurrentMedicalInsurance(populateCurrentMedicalInsurance(patient, patient.getCurrentMedicalInsurance()));

		//tab Related persons
		grdRelatedPersonsGrid grd = form.lyrDetails().tabRelatedPersons().grdRelatedPersons();
		PatRelativeCollection rels = new PatRelativeCollection();
		
		for(int i = 0; i < grd.getRows().size(); i++)
		{
			rels.add(grd.getRows().get(i).getValue());
		}
		
		patient.setPDSrelatives(rels);
		
		//tab Preferences and Consent
		boolean updatePrefs = false;
		
		if(hasAnyContactPreferences())
		{
    		if(patient.getAlternativeContact() == null)
    			patient.setAlternativeContact(new PatientContactPreferenceVo());
    		
    		patient.getAlternativeContact().setPdsUpdateMode(PDSUpdateMode.ADDED);
    		updatePrefs = true;
		}
		else
		{
    		if(patient.getAlternativeContact() != null)
    		{
    			patient.getAlternativeContact().setPdsUpdateMode(PDSUpdateMode.ALTERED);
    			updatePrefs = true;
    		}
		}

		if(updatePrefs)
		{
			patient.getAlternativeContact().setPdsPreferredContactMethod(form.lyrDetails().tabPreferences().cmbPrefferedContactMethod().getValue());
			patient.getAlternativeContact().setPdsPreferredContactTimes(form.lyrDetails().tabPreferences().txtPrefferedContactTimes().getValue());
			patient.getAlternativeContact().setPdsPreferredWrittenComm(form.lyrDetails().tabPreferences().cmbPreferredWrittenCommMethod().getValue());
			
			PDSConsentHistoryVoCollection historyColl = patient.getAlternativeContact().getConsentHistory();
			if(historyColl == null)
			{
				historyColl = new PDSConsentHistoryVoCollection();
				patient.getAlternativeContact().setConsentHistory(historyColl);
			}
			
			//check whether any of the consent history fields have changed
			boolean consentHistoryChanged = false;
			if(patient.getAlternativeContact().getPdsDateLastChanged() != null ? !patient.getAlternativeContact().getPdsDateLastChanged().equals(form.lyrDetails().tabPreferences().dteDateLastChanged().getValue()) : form.lyrDetails().tabPreferences().dteDateLastChanged().getValue() != null)
				consentHistoryChanged = true;
			if(patient.getAlternativeContact().getPdsConsent() != null ? !patient.getAlternativeContact().getPdsConsent().equals(form.lyrDetails().tabPreferences().cmbConsent().getValue()) : form.lyrDetails().tabPreferences().cmbConsent().getValue() != null)
				consentHistoryChanged = true;
			if(patient.getAlternativeContact().getComment() != null ? !patient.getAlternativeContact().getComment().equals(form.lyrDetails().tabPreferences().txtConsentComments().getValue()) : form.lyrDetails().tabPreferences().txtConsentComments().getValue() != null)
				consentHistoryChanged = true;
			
			if(consentHistoryChanged)
			{
				PDSConsentHistoryVo consentHistory = new PDSConsentHistoryVo();
				
				consentHistory.setComment(patient.getAlternativeContact().getComment());
				consentHistory.setConsent(patient.getAlternativeContact().getPdsConsent());
				consentHistory.setConsentType(patient.getAlternativeContact().getPdsConsentType());
				consentHistory.setDate(patient.getAlternativeContact().getPdsDateLastChanged());
				
				historyColl.add(consentHistory);
			}
			
			patient.getAlternativeContact().setPdsConsent(form.lyrDetails().tabPreferences().cmbConsent().getValue());
			patient.getAlternativeContact().setPdsDateLastChanged(form.lyrDetails().tabPreferences().dteDateLastChanged().getValue());
			patient.getAlternativeContact().setComment(form.lyrDetails().tabPreferences().txtConsentComments().getValue());
		}
		
		patient.setPDSInterpreterRequired(Group2Enumeration.rdoIRYes.equals(form.lyrDetails().tabPreferences().Group2().getValue()));
		patient.setPrefCommLanguage(form.lyrDetails().tabPreferences().cmbPreferredLanguage().getValue());
		
		//WDEV-23106
		patient.setOtherNames(form.getGlobalContext().Core.getOtherNames());
		
		/*
		if(form.getGlobalContext().Core.getAliasName() != null)
		{
    		if(patient.getOtherNames() == null)
    		{
    			patient.setOtherNames(new PersonNameCollection());
    			patient.getOtherNames().add(new PersonName());
    		}
    		else if(patient.getOtherNames().size() == 0)
    		{
    			patient.getOtherNames().add(new PersonName());
    		}
    		
    		patient.getOtherNames().get(0).setSurname(form.getGlobalContext().Core.getAliasName());
    		patient.getOtherNames().get(0).setNameType(NameType.ALIAS);
		}
		*/
		
		//patient.setHasLivedUK(Group1Enumeration.rdoLivedUKYes.equals(form.lyrDetails().tabOtherDetails().Group1().getValue()));
		
		// WDEV-21930 PDSDeathNotification to be populated if DeathDetails set, other deceased information is set in pdsPatientDetails logic
		if (form.getLocalContext().getDeathDetailsIsNotNull())
		{
			DeathDetailsVo deathVo = form.getLocalContext().getDeathDetails();
			patient.setPDSDeathNotificationStatus(deathVo.getPDSDeathNotificationStatus());
		}
		
		return patient;
	}
	

	private boolean hasAnyContactPreferences()
	{
		if(form.lyrDetails().tabPreferences().cmbPrefferedContactMethod().getValue() != null)
			return true;

		if(form.lyrDetails().tabPreferences().txtPrefferedContactTimes().getValue() != null && form.lyrDetails().tabPreferences().txtPrefferedContactTimes().getValue().length() > 0)
			return true;

		if(form.lyrDetails().tabPreferences().cmbPreferredWrittenCommMethod().getValue() != null)
			return true;

		if(form.lyrDetails().tabPreferences().cmbConsent().getValue() != null)
			return true;

		if(form.lyrDetails().tabPreferences().dteDateLastChanged().getValue() != null)
			return true;
		
		if(form.lyrDetails().tabPreferences().txtConsentComments().getValue() != null)
			return true;
		
		return false;
	}
	public Boolean validateInsuranceDetails(java.util.ArrayList<String> errors)
	{
		ArrayList<String> localErrors = new ArrayList<String>();
		
		if (PrivateInsurancePolicyType.OTHER.equals(form.lyrDetails().tabOtherDetails().cmbPolicyType().getValue()) && form.lyrDetails().tabOtherDetails().txtPolicyOther().getValue() == null)
		{
			localErrors.add("Other policy type is mandatory.");
		}
		
		//WDEV-22415
		if(form.lyrDetails().tabOtherDetails().txtEhicNumber().getValue()!=null && form.lyrDetails().tabOtherDetails().txtEhicNumber().getValue().length() > 20)
		{
			localErrors.add("The length of the field EHIC Number is too big. It should be less or equal to 20.");
		}
		//WDEV-22415 ends here
			
		if( localErrors.size() > 0)
		{
			String[] UIErrors = new String[localErrors.size()];
			localErrors.toArray(UIErrors);
			
			if(UIErrors != null)
			{
				if(errors != null)
				{
					for(String err: UIErrors)
					{
						errors.add(err);
					}
				}
				else
				{
					engine.showErrors(UIErrors);
				}
				
				return false;
			}
		}

		return true;
	}
	
	public Boolean validateOtherDetails(java.util.ArrayList<String> errors)
	{
		ArrayList<String> localErrors = new ArrayList<String>();
		
		/*
		if (form.lyrDetails().tabOtherDetails().cmbEthnicCategory().isRequired() && form.lyrDetails().tabOtherDetails().cmbEthnicCategory().getValue() == null)
		{
			localErrors.add("Ethnic Category is mandatory.");
		}
		
		if (form.lyrDetails().tabOtherDetails().qmbSchool().isRequired() && form.lyrDetails().tabOtherDetails().qmbSchool().getValue() == null)
		{
			localErrors.add("School / College is mandatory.");
		}
		*/
		
		if (Boolean.TRUE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()) && form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().getValue() == null && ! form.getLocalContext().getFormOpenedFromNavigation())
		{
			localErrors.add("Public care need is mandatory.");
		}
		
		if(form.lyrDetails().tabOtherDetails().txtMedicalCardNo().isRequired() && 
				(form.lyrDetails().tabOtherDetails().txtMedicalCardNo().getValue() == null 
				|| form.lyrDetails().tabOtherDetails().txtMedicalCardNo().getValue().length() == 0))
		{
			localErrors.add("Medical Card Number is mandatory.");
		}
		
		if(form.lyrDetails().tabOtherDetails().cmbInsurer().isRequired() && form.lyrDetails().tabOtherDetails().cmbInsurer().getValue() == null)		
		{
			localErrors.add("Insurer is mandatory.");
		}
			
		if( localErrors.size() > 0)
		{
			String[] UIErrors = new String[localErrors.size()];
			localErrors.toArray(UIErrors);
			
			if(UIErrors != null)
			{
				if(errors != null)
				{
					for(String err: UIErrors)
					{
						errors.add(err);
					}
				}
				else
				{
					engine.showErrors(UIErrors);
				}
				
				return false;
			}
		}

		return true;
	}

	/*
	private boolean hasAddressChanged(PersonAddress previousAddress) //WDEV-19137 Now includes check for County && Address Line 5 
	{
		
		PersonAddress newAddress = form.lyrDetails().tabPatientDetails().ccAddress().getValue();
		
		if (previousAddress == null || isEmptyAddress(previousAddress))
			return false;
		else if(newAddress == null)
			return true;
		
		if (previousAddress.getLine1() == null && newAddress.getLine1() == null)
							;
		else if ((previousAddress.getLine1() != null && newAddress.getLine1() == null)	|| (previousAddress.getLine1() == null && newAddress.getLine1() != null))
						return true;
		else if (!previousAddress.getLine1().equals(newAddress.getLine1()))
						return true;
		
		if (previousAddress.getLine2() == null && newAddress.getLine2() == null)
							;
		else if ((previousAddress.getLine2() != null && newAddress.getLine2() == null) || (previousAddress.getLine2() == null && newAddress.getLine2() != null))
						return true;
		else if (!previousAddress.getLine2().equals(newAddress.getLine2()))
						return true;
		
		if(previousAddress.getLine3() == null && newAddress.getLine3() == null)
							;
		else if ((previousAddress.getLine3() != null && newAddress.getLine3() == null) || (previousAddress.getLine3() == null && newAddress.getLine3() != null))
						return true;
		else if (!previousAddress.getLine3().equals(newAddress.getLine3()))
						return true;
		
		if(previousAddress.getLine4() == null && newAddress.getLine4() == null)
							;
		else if ((previousAddress.getLine4() != null && newAddress.getLine4() == null) || (previousAddress.getLine4() == null && newAddress.getLine4()!= null))
						return true;
		else if (!previousAddress.getLine4().equals(newAddress.getLine4()))
						return true;
		////WDEV-19137 ----------------------------------------------
		if(previousAddress.getLine5() == null && (newAddress.getLine5() == null || newAddress.getLine5().equals("")))		//wdev-19228
							;
		else if ((previousAddress.getLine5() != null && newAddress.getLine5() == null) || (previousAddress.getLine5() == null && newAddress.getLine5() != null))
						return true;
		else if (!previousAddress.getLine5().equals(newAddress.getLine5()))
						return true;
		
		if(previousAddress.getCounty() == null && newAddress.getCounty() == null)
							;
		else if ((previousAddress.getCounty() != null && newAddress.getCounty() == null) || (previousAddress.getCounty() == null && newAddress.getCounty() != null))
						return true;
		else if (!previousAddress.getCounty().equals(newAddress.getCounty()))
						return true;
		////WDEV-19137 ----------------------------------------------
		
		//WDEV-19597 -- Area Of Residence added
		if(previousAddress.getAreaOfResidence() == null && newAddress.getAreaOfResidence() == null)
							;
		else if ((previousAddress.getAreaOfResidence() != null && newAddress.getAreaOfResidence() == null) || (previousAddress.getAreaOfResidence() == null && newAddress.getAreaOfResidence() != null))
						return true;
		else if (!previousAddress.getAreaOfResidence().equals(newAddress.getAreaOfResidence()))
						return true;
		
		if (previousAddress.getPostCode() == null && newAddress.getPostCode() == null)
							;
		else if((previousAddress.getPostCode()!= null && newAddress.getPostCode() == null) || (previousAddress.getPostCode() == null && newAddress.getPostCode() != null))
						return true;
		else if (!previousAddress.getPostCode().replaceAll("[^a-zA-Z0-9]", "").equals(newAddress.getPostCode().replaceAll("[^a-zA-Z0-9]", "")))
						return true;
		//---------------------------	
		return false;
	}
	*/

	/**
	 * WDEV-13432
	 * Function used to test an address if it is empty.
	 * A null address is also considered empty
	 * @param decouplePatientRecord 
	 * @param markSimilarOnesAsDuplicated 
	 */
	/*
	private boolean isEmptyAddress(PersonAddress previousAddress)
	{
		// Test address for null value
		if (previousAddress == null)
			return true;
		
		// Test relevant fields if are not empty
		
		if (previousAddress.getLine1IsNotNull() && previousAddress.getLine1().length() != 0)
			return false;
		
		if (previousAddress.getLine2IsNotNull() && previousAddress.getLine2().length() != 0)
			return false;
		
		if (previousAddress.getLine3IsNotNull() && previousAddress.getLine3().length() != 0)
			return false;
		
		if (previousAddress.getLine4IsNotNull() && previousAddress.getLine4().length() != 0)
			return false;
		
		if (previousAddress.getLine5IsNotNull() && previousAddress.getLine5().length() != 0)
			return false;
		
		if (previousAddress.getPostCodeIsNotNull() && previousAddress.getPostCode().length() != 0)
			return false;
		
		if (previousAddress.getPhoneIsNotNull() && previousAddress.getPhone().length() != 0)
			return false;
		
		if (previousAddress.getCountyIsNotNull())
			return false;
		
		if (previousAddress.getAreaOfResidenceIsNotNull()) //WDEV-19597
			return false;
		
		return true;
	}
	*/

	private boolean save(Patient patient, boolean newPatient, PersonAddress previousAddress, PersonAddress historicAddress,boolean bPCTcheck, Boolean decouplePatientRecord, Boolean markSimilarOnesAsDuplicated)
	{		
		boolean bSave = newPatient;
		boolean pdsMode = isPds(); //WDEV-23506
		
		if (patient.getSourceOfInformation() == null)
		{
			patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
			bSave = true;
		}

		if (newPatient)
			patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
		else if (patient.getSourceOfInformationIsNotNull() && patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && ((form.getLocalContext().getsavedPatient() != null && form.getLocalContext().getsavedPatient().getEthnicOrigin() == null && patient.getEthnicOriginIsNotNull()) || (form.getLocalContext().getsavedPatient().getEthnicOriginIsNotNull() && patient.getEthnicOrigin() == null) || (form.getLocalContext().getsavedPatient().getEthnicOriginIsNotNull() && patient.getEthnicOriginIsNotNull() && !form.getLocalContext().getsavedPatient().getEthnicOrigin().toString().equals(patient.getEthnicOrigin().toString()))) && !checkForEditedData(form.getLocalContext().getsavedPatient(), patient))////	WDEV-15197
		{
			bSave = true;
		}
		else if (patient.getSourceOfInformationIsNotNull() && !patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && form.getLocalContext().getPatientIsNotNull())
		{
			bSave = true;
		}
		else if (patient.getSourceOfInformationIsNotNull())
		{

			// WDEV-5928 - BW Modified
			Patient savedPatient = form.getLocalContext().getsavedPatient();
			if (savedPatient.getEthnicOriginIsNotNull() && patient.getEthnicOriginIsNotNull() && !savedPatient.getEthnicOrigin().equals(patient.getEthnicOrigin()) || (savedPatient.getEthnicOriginIsNotNull() && patient.getEthnicOrigin() == null) || (savedPatient.getEthnicOrigin() == null && patient.getEthnicOriginIsNotNull()))
				bSave = true;

			if ((savedPatient.getAddressesIsNotNull() && !patient.getAddressesIsNotNull()) || (!savedPatient.getAddressesIsNotNull() && patient.getAddressesIsNotNull()) || (savedPatient.getAddressesIsNotNull() && patient.getAddressesIsNotNull() && !savedPatient.getAddresses().toDisplayString().equals(patient.getAddresses().toDisplayString())))
				bSave = true;

			// WDEV-5928 - BW Modified
			//boolean dataModified = checkForEditedData(form.getLocalContext().getsavedPatient(), patient);
			//WDEV-21785 - this only applies in non PDS mode
			/*
			boolean dataModified = dataChangedForVerifiedNHSNumber(form.getLocalContext().getsavedPatient(), patient);

			if (patient.getSourceOfInformationIsNotNull() && patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS) && form.getLocalContext().getsavedPatientIsNotNull() && dataModified)
			{
				patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
				for (int i = 0; patient.getIdentifiersIsNotNull() && i < patient.getIdentifiers().size(); i++)
				{
					if (patient.getIdentifiers().get(i).getTypeIsNotNull() && patient.getIdentifiers().get(i).getType().equals(PatIdType.NHSN))
					{
						patient.getIdentifiers().get(i).setVerified(false);
					}
				}
				bSave = true;
			}
			*/
			
			boolean dataModified = checkForEditedData(form.getLocalContext().getsavedPatient(), patient);
			
			if(dataModified)
				bSave = true;
		}
		
		//WDEV-21785 - this only applies in non PDS mode		
		if(!pdsMode)
		{
			boolean dataModified = dataChangedForVerifiedNHSNumber(form.getLocalContext().getsavedPatient(), patient);

			if (form.getLocalContext().getsavedPatientIsNotNull() && dataModified)
			{
				for (int i = 0; patient.getIdentifiersIsNotNull() && i < patient.getIdentifiers().size(); i++)
				{
					if (patient.getIdentifiers().get(i).getTypeIsNotNull() && patient.getIdentifiers().get(i).getType().equals(PatIdType.NHSN))
					{
						patient.getIdentifiers().get(i).setVerified(false);
					}
				}
				bSave = true;
			}
		}
		
		boolean saveToPDS = false;
		PDSGeneralUpdateRequestVo generalUpdateRequestPDS = null;
		IAppRole iLoggedInRole = engine.getLoggedInRole();
		
		if (pdsMode)
		{
			//WDEV-21867 - only save patient records that contain a serial change number and source of information is PDS
			if (patient.getSCNIsNotNull() && patient.getSourceOfInformationIsNotNull() && patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS))
			{
				// PDS AUTHENTICATION
				PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
				form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
				saveToPDS = pdsAuth.hasRightsFor(PdsRight.AMEND_PATIENT, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml());
				// END PDS AUTHENTICATION
				
		        PDSConfigurationVo conf = getPdsConfiguration();
	
				if (saveToPDS)
				{					
					SamlParser samlParser;					
	
					
					if (patient.getPDSPatientUpdateIsNotNull())
					{
						try {
							samlParser = new SamlParser();
						
							generalUpdateRequestPDS = patient.getPDSPatientUpdate().getPDSUpdateRequest();					
							if (patient.getPDSPatientUpdate().getPDSUpdateRequest() == null)
								generalUpdateRequestPDS = new PDSGeneralUpdateRequestVo();					
						
							if (form.getGlobalContext().Core.getSamlXmlIsNotNull())
							{							
								samlParser.loadFileContent(form.getGlobalContext().Core.getSamlXml());							
								generalUpdateRequestPDS.setSDSRoleProfileId(samlParser.getValueForField(SamlParser.UID));							
								generalUpdateRequestPDS.setSDSUserId(samlParser.getValueForField(SamlParser.UID));							
	
								//generalUpdateRequestPDS.setSDSJobRoleCode(samlParser.getValueForField(SamlParser.NHSJOBROLECODE));
								//WDEV-22262 only need to pass down logged in rbac role
								generalUpdateRequestPDS.setSDSJobRoleCode(iLoggedInRole.getSpineRbacRole().getRoleCode());
							}
							else if (conf!=null
									&& conf.getPDS_AUTHENTICATIONIsNotNull() 
									&& !conf.getPDS_AUTHENTICATION())
							{					
								generalUpdateRequestPDS.setSDSJobRoleCode("S0010:G0020:R0050");
								generalUpdateRequestPDS.setSDSRoleProfileId("665289892010");
								generalUpdateRequestPDS.setSDSUserId("665289892010");
							}
							
							generalUpdateRequestPDS.setActive(Boolean.TRUE);
							generalUpdateRequestPDS.setRequestType(PDSAsyncRequestType.GENERALUPDATE);
							generalUpdateRequestPDS.setRequestDate(new DateTime());
							generalUpdateRequestPDS.setPatient(patient);
							generalUpdateRequestPDS.setStatus(PDSSearchStatus.SUBMITTED);
							generalUpdateRequestPDS.setUpdateType(PDSUpdateType.CHANGE);							
						} catch (ParserConfigurationException e) {
							engine.showMessage("Unable to get SAML for currently logged in user: " + e.getMessage());
						} catch (SAXException e) {
							engine.showMessage("Unable to get SAML for currently logged in user: " + e.getMessage());
						}
						//WDEV-22296
						patient.getPDSPatientUpdate().setPDSUpdateRequest(generalUpdateRequestPDS);
					}
				}
			}
		}
		
		if (bSave)
		{
			//WDEV-13009
			if(previousAddress!=null)
			{
				PersonAddressCollection collAdresses = patient.getAddresses();
				if (collAdresses == null)
					collAdresses = new PersonAddressCollection();
				
				collAdresses.add((PersonAddress) previousAddress.clone());
				patient.setAddresses(collAdresses);
			}
				
			//wdev-13000 - Maintains one Other name only.
			//patient.setSaveAlias(form.getGlobalContext().Core.getAliasNameIsNotNull() ? form.getGlobalContext().Core.getAliasName() : null); 
			
			//add gp to history?
			//WDEV-23159
			PDSPatientGPVo prevGpInfo = form.getLocalContext().getPreviousGpInfo();
			if(patient.getGpIsNotNull() && ((prevGpInfo != null && prevGpInfo.getGp() != null) && (!patient.getGp().getID_Gp().equals(prevGpInfo.getGp().getID_Gp()))))
			{
				//add gp to history
				if(patient.getPDSPatientGPHistory() == null)
					patient.setPDSPatientGPHistory(new PDSPatientGPVoCollection());
				
				PDSPatientGPVo gpHistoryItem = new PDSPatientGPVo();
				gpHistoryItem.setGp(prevGpInfo.getGp());
				gpHistoryItem.setPractice(prevGpInfo.getPractice());
				if (patient.getPDSPatientGPIsNotNull())
				{	
					gpHistoryItem.setBeffdate(prevGpInfo.getBeffdate());
					gpHistoryItem.setBetdate(prevGpInfo.getBetdate()); //WDEV-21863
				} 	
				
				patient.getPDSPatientGPHistory().add(gpHistoryItem);
			}
			else if (patient.getPDSPatientGPHistory() != null) //WDEV-22448 NPE fix
			{
				for (PDSPatientGPVo gp : patient.getPDSPatientGPHistory())
				{
					if ((gp.getGp()!=null && prevGpInfo.getGp()!=null) && (gp.getGp().getID_Gp().equals(prevGpInfo.getGp().getID_Gp())))
					{
						gp.setBeffdate(patient.getPDSPatientGP().getBeffdate());
						gp.setBetdate(patient.getPDSPatientGP().getBetdate());
					}
				}
			}
			//WDEV-23159
			
			//wdev-12963
			if (form.getLocalContext().getbRemovePatientAppointmentsIsNotNull()
				&& form.getLocalContext().getbRemovePatientAppointments())
				patient.setCancelSD_APPTS(true);
			else
				patient.setCancelSD_APPTS(null);

			// WDEV-21883 - we only want to mark Decease Patient if the patient was not previously deceased, i.e. we could simply be updating part of the death details
			//WDEV-23506 - fix for DeathDetails updates
			if (form.getLocalContext().getDeathDetailsIsNotNull())
			{	
				if(Boolean.TRUE.equals(decouplePatientRecord))
					patient.setDecoupled(Boolean.TRUE);
				
				String[] errors = form.getLocalContext().getDeathDetails().validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return false;
				}								

				if(pdsMode)
				{
					patient.setPDSDeathNotificationStatus(form.getLocalContext().getDeathDetails().getPDSDeathNotificationStatus());
				
					// WDEV-21862 - If Serial Change number is not set, leave it at null
					if (patient.getPDSPatientUpdateIsNotNull())  // WDEV-21883 - only set scn to zero if going to perform an actual update
					{
						//WDEV-22520
						if (patient.getSCN()!=null && !patient.getSCN().equals(0))
							patient.getPDSPatientUpdate().setSCN(patient.getSCN()); //need the latest serial change number for this update going out to PDS
						//else patient.getPDSPatientUpdate() SCN should have been set on a previous update transaction.
						
						//Now set the SCN of the patient to zero to signal an update sent to PDS and awaiting a response from PDS.
						patient.setSCN(0);
					}
						
				
					//WDEV-21392
					//WDEV-21785 - this should happen only in PDS mode
					if(RegistrationSourceOfInfo.PDS.equals(patient.getSourceOfInformation())) 
					{
						if (patient.getPatientIdentifier(PatIdType.NHSN)!=null)
							patient.getPatientIdentifier(PatIdType.NHSN).setVerified(true);
					}
					//WDEV-21392
				}
				
				String[] patErrors = patient.validate();
				if (patErrors != null)
				{
					engine.showErrors(patErrors);
					return false;
				}
				
				try
				{
					patient = domain.saveDemographics(patient, form.getLocalContext().getDeathDetails(), decouplePatientRecord, saveToPDS);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage("Data has been modified by another user - screen will be refreshed");
					form.setMode(FormMode.VIEW);
					try
					{
						cancelSave();
					}
					catch (FormOpenException e1) 
					{
						engine.showMessage(e1.getMessage());
					}
					
					return false;
				}
				catch (UniqueKeyViolationException e)
				{
					if (form.getLocalContext().getbUpdatePDSIsNotNull()
						&& form.getLocalContext().getbUpdatePDS())
						patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. wdev-15187

					engine.showMessage(e.getMessage());
					return false;
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (IndexOutOfBoundsException e)
				{
					engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
					return false;
				}

				form.getLocalContext().setDeathDetails(null);
			}
			else
			{
				//if(ConfigFlag.UI.DEMOGRAPHICS_ALLOW_CREATION_OF_HISTORICAL_ADDRESS.getValue())//WDEV-14617
				{
					if (historicAddress != null)
					{
						patient.getAddresses().add(historicAddress);
					}
				}
				
				//WDEV-21392
				//WDEV-21785 - this should happen only in PDS mode
				if(pdsMode && RegistrationSourceOfInfo.PDS.equals(patient.getSourceOfInformation())) 
				{
					// WDEV-21862 - If Serial Change number is not set, leave it at null
										
					if (patient.getPDSPatientUpdateIsNotNull())  // WDEV-21883 - only set scn to zero if going to perform an actual update
					{
						//WDEV-22520
						if (patient.getSCN()!=null && !patient.getSCN().equals(0))
							patient.getPDSPatientUpdate().setSCN(patient.getSCN()); //need the latest serial change number for this update going out to PDS
						//else patient.getPDSPatientUpdate() SCN should have been set on a previous update transaction.
						
						//Now set the SCN of the patient to zero to signal an update sent to PDS and awaiting a response from PDS.
						patient.setSCN(0);

					}
					
    				if (patient.getPatientIdentifier(PatIdType.NHSN)!=null)
    					patient.getPatientIdentifier(PatIdType.NHSN).setVerified(true);
				}
				//WDEV-21392

				try
				{
					String[] errors = patient.validate();
					if (errors != null)
					{
						engine.showErrors(errors);
						return false;
					}
					patient = domain.savePatient(patient, false, saveToPDS);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage("Data has been modified by another user - screen will be refreshed");
					form.setMode(FormMode.VIEW);
					try
					{
						cancelSave();
					}
					catch (FormOpenException e1)
					{
						engine.showMessage(e1.getMessage());
					}
					return false;
				}
				catch (UniqueKeyViolationException e)
				{
					if (form.getLocalContext().getbUpdatePDSIsNotNull()
						&& form.getLocalContext().getbUpdatePDS())
						patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. wdev-15187
					
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (IndexOutOfBoundsException e)
				{
					engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
					return false;
				}
				
			}
		}

		//wdev-13000
		patient.setSaveAlias(null);
		
		form.getGlobalContext().Core.setPatientShort(patient);
		if (newPatient)
		{
			engine.clearPatientContextInformation();
			form.getGlobalContext().RefMan.clearCatsReferral();
			engine.addPatientSelectionToHistory(patient); //WDEV-19618 
		}

		form.getLocalContext().setPatient(patient);
		form.getGlobalContext().Core.setPatientShort(patient);
		form.getGlobalContext().Core.getPatientShort().calculateAge();//wdev-14840 : Age is nulled in the save. Need to reset it.
		form.getGlobalContext().Core.getPatientShort().setFutureApptsCancelOnMarkDeceasedAnswer(form.getLocalContext().getbRemovePatientAppointments());
		form.setMode(FormMode.VIEW);

		form.getLocalContext().setInitialPatient((Patient)patient.clone());
		
		// WDEV-7940 //WDEV-22787
		boolean isDialog = engine.isDialog();
		boolean canSwitchToEdRegistration = engine.hasRight(AppRight.ED_AUTO_SWITCH_TO_ATTENDANCE_DETAILS);
		boolean isEdFormInCurrentNav = isFormInNavigation(iLoggedInRole, form.getForms().Emergency.AttendanceDetails);
		
		if (isDialog)
		{
			engine.close(DialogResult.OK);
			return true;
		}		
		else if (canSwitchToEdRegistration && isEdFormInCurrentNav)
		{
			engine.open(form.getForms().Emergency.AttendanceDetails);
			return true;
		}
		//WDEV-22787   - end
		populateScreenFromData(patient);
		
		//if (ConfigFlag.UI.SHOW_CASENOTEFOLDER_ON_DEMOGRAPHICS.getValue())
		//	form.lyrTabsDetails().tabAdditionalDetails().ccAdditionalDetailstab().displayCaseNoteFolder(patient.getPatId(PatIdType.HOSPNUM));	//wdev-17883
		
		form.btnUpdate().setVisible(true);
		form.btnUpdate().setEnabled(true);
		
		return true;
	}
	
	//WDEV-22787
	private boolean isFormInNavigation(IAppRole iRole, FormName form)
	{
		if (iRole == null)
			return false;
		
		INavigation iNav = iRole.getRoleNavigation();
		 if (iNav.getNavForm(form) != null)
			 return true;
		return false;
	}
	
	
	private boolean dataChangedForVerifiedNHSNumber(Patient savedPatient, Patient patient)
	{
		if (savedPatient == null || patient == null)
			return false;
		
		if ((savedPatient.getSex() == null && patient.getSexIsNotNull()) || (savedPatient.getSexIsNotNull() && patient.getSex() == null) || (savedPatient.getSexIsNotNull() && patient.getSexIsNotNull() && !savedPatient.getSex().toString().equals(patient.getSex().toString())))
			return true;
		
		PersonName savedName = savedPatient.getName();
		PersonName name = patient.getName();
		
		//WDEV-22740
		if ((savedName.getSurname() == null && name.getSurnameIsNotNull()) || (savedName.getSurnameIsNotNull() && name.getSurname() == null) || (savedName.getSurnameIsNotNull() && name.getSurnameIsNotNull() && (savedName.getSurname()!=null?!savedName.getSurname().equals(name.getSurname()):name.getSurname()!=null)))
			return true;
		if ((savedName.getForename() == null && name.getForenameIsNotNull()) || (savedName.getForenameIsNotNull() && name.getForename() == null) || (savedName.getForenameIsNotNull() && name.getForenameIsNotNull() && (savedName.getForename()!=null?!savedName.getForename().equals(name.getForename()):name.getForename()!=null)))
			return true;
		if ((savedPatient.getGp() == null && patient.getGpIsNotNull()) || (savedPatient.getGpIsNotNull() && patient.getGp() == null) || (savedPatient.getGpIsNotNull() && patient.getGpIsNotNull() && (savedPatient.getGp()!=null?!savedPatient.getGp().equals(patient.getGp()):patient.getGp()!=null)))
			return true;
		if ((savedPatient.getPractice() == null && patient.getPracticeIsNotNull()) || (savedPatient.getPracticeIsNotNull() && patient.getPractice() == null) || (savedPatient.getPracticeIsNotNull() && patient.getPracticeIsNotNull() && (savedPatient.getPractice()!=null?!savedPatient.getPractice().equals(patient.getPractice()):patient.getPractice()!=null)))
			return true;
		//WDEV-22740
		
		/*
		if ((savedPatient.getDob() == null && patient.getDobIsNotNull()) || (savedPatient.getDobIsNotNull() && patient.getDob() == null) || (savedPatient.getDobIsNotNull() && patient.getDobIsNotNull() && !savedPatient.getDob().toString().equals(patient.getDob().toString())))
			return true;
		*/			
		
		return false;
	}
	
	private boolean checkForEditedData(Patient savedPatient, Patient patient)
	{
		if (savedPatient == null || patient == null)// 	WDEV-15197
			return false;
		
		// wdev-6157
		if ((savedPatient.getAddress() == null && patient.getAddressIsNotNull() && !patient.getAddress().toDisplayString().equals("")) || (savedPatient.getAddressIsNotNull() && !savedPatient.getAddress().toDisplayString().equals("") && patient.getAddress() == null) || (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull() && !savedPatient.getAddress().toDisplayString().equals(patient.getAddress().toDisplayString())))
			return true;

		// WDEV-5928 - BW Modified
		if ((savedPatient.getAddress() == null && patient.getAddressIsNotNull()) || (savedPatient.getAddressIsNotNull() && patient.getAddress() == null))
			return true;

		if (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull() && (savedPatient.getAddress().getPhone() == null && patient.getAddress().getPhoneIsNotNull() || (savedPatient.getAddress().getPhoneIsNotNull() && patient.getAddress().getPhone() == null) || (savedPatient.getAddress().getPhoneIsNotNull() && patient.getAddress().getPhoneIsNotNull() && !savedPatient.getAddress().getPhone().equals(patient.getAddress().getPhone()))))
			return true;

		//WDEV-22520
		if (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull())
		{
			if (savedPatient.getAddress().getBeffdateIsNotNull() && patient.getAddress().getBeffdateIsNotNull())
			{
				if (!savedPatient.getAddress().getBeffdate().equals(patient.getAddress().getBeffdate()))
					return true;
			}
			else if (savedPatient.getAddress().getBeffdateIsNotNull() && !patient.getAddress().getBeffdateIsNotNull())
				return true;
			else if (!savedPatient.getAddress().getBeffdateIsNotNull() && patient.getAddress().getBeffdateIsNotNull())
				return true;
			
			if (savedPatient.getAddress().getBetdateIsNotNull() && patient.getAddress().getBetdateIsNotNull())
			{
				if (!savedPatient.getAddress().getBetdate().equals(patient.getAddress().getBetdate()))
					return true;
			}
			else if (savedPatient.getAddress().getBetdateIsNotNull() && !patient.getAddress().getBetdateIsNotNull())
				return true;
			else if (!savedPatient.getAddress().getBetdateIsNotNull() && patient.getAddress().getBetdateIsNotNull())
				return true;	
		}
		else
		//WDEV-22520
		
		if (savedPatient.getName() == null && patient.getName() != null)
			return true;

		if ((savedPatient.getName().getTitle() == null && patient.getName().getTitleIsNotNull()) || (savedPatient.getName().getTitleIsNotNull() && patient.getName().getTitle() == null) || (savedPatient.getName().getTitleIsNotNull() && patient.getName().getTitleIsNotNull() && !savedPatient.getName().getTitle().equals(patient.getName().getTitle())))
			return true;

		if ((savedPatient.getName().getForename() == null && patient.getName().getForenameIsNotNull()) || (savedPatient.getName().getForenameIsNotNull() && patient.getName().getForename() == null) || (savedPatient.getName().getForenameIsNotNull() && patient.getName().getForenameIsNotNull() && !savedPatient.getName().getForename().equals(patient.getName().getForename())))
			return true;

		if ((savedPatient.getName().getMiddleName() == null && patient.getName().getMiddleNameIsNotNull()) || (savedPatient.getName().getMiddleNameIsNotNull() && patient.getName().getMiddleName() == null) || (savedPatient.getName().getMiddleNameIsNotNull() && patient.getName().getMiddleNameIsNotNull() && !savedPatient.getName().getMiddleName().equals(patient.getName().getMiddleName())))
			return true;

		if ((savedPatient.getName().getSurname() == null && patient.getName().getSurnameIsNotNull()) || (savedPatient.getName().getSurnameIsNotNull() && patient.getName().getSurname() == null) || (savedPatient.getName().getSurnameIsNotNull() && patient.getName().getSurnameIsNotNull() && !savedPatient.getName().getSurname().equals(patient.getName().getSurname())))
			return true;

		if ((savedPatient.getSex() == null && patient.getSexIsNotNull()) || (savedPatient.getSexIsNotNull() && patient.getSex() == null) || (savedPatient.getSexIsNotNull() && patient.getSexIsNotNull() && !savedPatient.getSex().toString().equals(patient.getSex().toString())))
			return true;

		if ((savedPatient.getDob() == null && patient.getDobIsNotNull()) || (savedPatient.getDobIsNotNull() && patient.getDob() == null) || (savedPatient.getDobIsNotNull() && patient.getDobIsNotNull() && !savedPatient.getDob().toString().equals(patient.getDob().toString())))
			return true;

		//WDEV-22138
		if ((savedPatient.getTimeOfDeath() == null && patient.getTimeOfDeathIsNotNull()) || (savedPatient.getTimeOfDeathIsNotNull() && patient.getTimeOfDeath() == null) || (savedPatient.getTimeOfDeathIsNotNull() && patient.getTimeOfDeathIsNotNull() && !savedPatient.getTimeOfDeath().toString().equals(patient.getTimeOfDeath().toString())))
			return true;
		//WDEV-22138
		
		if ((savedPatient.getDod() == null && patient.getDodIsNotNull()) || (savedPatient.getDodIsNotNull() && patient.getDod() == null) || (savedPatient.getDodIsNotNull() && patient.getDodIsNotNull() && !savedPatient.getDod().toString().equals(patient.getDod().toString())))
			return true;
		
		if ((savedPatient.getMaritalStatus() == null && patient.getMaritalStatusIsNotNull()) || (savedPatient.getMaritalStatusIsNotNull() && patient.getMaritalStatus() == null) || (savedPatient.getMaritalStatusIsNotNull() && patient.getMaritalStatusIsNotNull() && !savedPatient.getMaritalStatus().toString().equals(patient.getMaritalStatus().toString())))
			return true;

		if ((savedPatient.getOccupation() == null && patient.getOccupationIsNotNull()) || (savedPatient.getOccupationIsNotNull() && patient.getOccupation() == null) || (savedPatient.getOccupationIsNotNull() && patient.getOccupationIsNotNull() && !savedPatient.getOccupation().toString().equals(patient.getOccupation().toString())))
			return true;

		if ((savedPatient.getReligion() == null && patient.getReligionIsNotNull()) || (savedPatient.getReligionIsNotNull() && patient.getReligion() == null) || (savedPatient.getReligionIsNotNull() && patient.getReligionIsNotNull() && !savedPatient.getReligion().toString().equals(patient.getReligion().toString())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getName() == null && patient.getNok().getNameIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getNameIsNotNull() && patient.getNok().getName() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getNameIsNotNull() && patient.getNok().getNameIsNotNull() && !savedPatient.getNok().getName().toString().equals(patient.getNok().getName().toString())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddress() == null && patient.getNok().getAddressIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddress() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && !savedPatient.getNok().getAddress().toDisplayString().equals(patient.getNok().getAddress().toDisplayString())) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && savedPatient.getNok().getAddress().getPhone() == null && patient.getNok().getAddress().getPhoneIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && savedPatient.getNok().getAddress().getPhoneIsNotNull() && patient.getNok().getAddress().getPhone() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull() && savedPatient.getNok().getAddress().getPhoneIsNotNull() && patient.getNok().getAddress().getPhoneIsNotNull() && !savedPatient.getNok().getAddress().getPhone().equals(patient.getNok().getAddress().getPhone())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getRelationship() == null && patient.getNok().getRelationshipIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getRelationshipIsNotNull() && patient.getNok().getRelationship() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getRelationshipIsNotNull() && patient.getNok().getRelationshipIsNotNull() && !savedPatient.getNok().getRelationship().equals(patient.getNok().getRelationship())))
			return true;

		if ((savedPatient.getNok() == null && patient.getNokIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNok() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getCommChannels() == null && patient.getNok().getCommChannelsIsNotNull()) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getCommChannelsIsNotNull() && patient.getNok().getCommChannels() == null) || (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull() && savedPatient.getNok().getCommChannelsIsNotNull() && patient.getNok().getCommChannelsIsNotNull() && savedPatient.getNok().getCommChannels().size() > 0 && patient.getNok().getCommChannels().size() > 0 && !savedPatient.getNok().getCommChannels().get(0).getCommValue().equals(patient.getNok().getCommChannels().get(0).getCommValue())))
			return true;

		if ((savedPatient.getGp() == null && patient.getGpIsNotNull()) || (savedPatient.getGpIsNotNull() && patient.getGp() == null) || (savedPatient.getGpIsNotNull() && patient.getGpIsNotNull() && !savedPatient.getGp().toString().equals(patient.getGp().toString())))
			return true;

		if ((savedPatient.getGpSurgery() == null && patient.getGpSurgeryIsNotNull()) || (savedPatient.getGpSurgeryIsNotNull() && patient.getGpSurgery() == null) || (savedPatient.getGpSurgeryIsNotNull() && patient.getGpSurgeryIsNotNull() && !savedPatient.getGpSurgery().toString().equals(patient.getGpSurgery().toString())))
			return true;

		if (form.getLocalContext().getbIdentifiersEdited())
			return true;

		// Check values of identifiers
		// WDEV-5928 - BW Modified
		if ((patient.getIdentifiersIsNotNull() && savedPatient.getIdentifiersIsNotNull() && patient.getIdentifiers().size() != savedPatient.getIdentifiers().size()) || (patient.getIdentifiersIsNotNull() && !savedPatient.getIdentifiersIsNotNull()) || (!patient.getIdentifiersIsNotNull() && savedPatient.getIdentifiersIsNotNull()))
			return true;

		for (int i = 0; savedPatient.getIdentifiersIsNotNull() && i < savedPatient.getIdentifiers().size(); i++)
		{
			PatientId voSavedIdent = savedPatient.getIdentifiers().get(i);
			// WDEV-5928 - BW Modified
			boolean found = false;
			for (int j = 0; patient.getIdentifiersIsNotNull() && j < patient.getIdentifiers().size(); j++)
			{
				PatientId voIdent = patient.getIdentifiers().get(j);
				if (voSavedIdent.getTypeIsNotNull() && voIdent.getTypeIsNotNull() && voSavedIdent.getType().equals(voIdent.getType()))
				{
					//found = true;//	WDEV-15202
					if (voSavedIdent.getValueIsNotNull() && voIdent.getValueIsNotNull() && voSavedIdent.getValue().equals(voIdent.getValue()))
					{
						//return true;//	WDEV-15202
						found = true;//	WDEV-15202
						break;//	WDEV-15202
					}
				}
			}
			if (!found)
				return true;
		}

		if (form.getLocalContext().getbCommChannelsEdited())
			return true;

		// Check values of Commchannels
		// WDEV-5928 - BW Modified
		if ((patient.getCommChannelsIsNotNull() && savedPatient.getCommChannelsIsNotNull() && patient.getCommChannels().size() != savedPatient.getCommChannels().size()) || (patient.getCommChannelsIsNotNull() && !savedPatient.getCommChannelsIsNotNull()) || (!patient.getCommChannelsIsNotNull() && savedPatient.getCommChannelsIsNotNull()))
			return true;

		for (int i = 0; savedPatient.getCommChannelsIsNotNull() && i < savedPatient.getCommChannels().size(); i++)
		{
			CommChannelVo voSavedComm = savedPatient.getCommChannels().get(i);
			// WDEV-5928 - BW Modified
			boolean found = false;
			for (int j = 0; patient.getCommChannelsIsNotNull() && j < patient.getCommChannels().size(); j++)
			{
				CommChannelVo voComm = patient.getCommChannels().get(j);

				if (voSavedComm.getChannelTypeIsNotNull() && voComm.getChannelTypeIsNotNull() && voSavedComm.getChannelType().equals(voComm.getChannelType()))
				{
					found = true;
					if (voSavedComm.getCommValueIsNotNull() && voComm.getCommValueIsNotNull() && !voSavedComm.getCommValue().equals(voComm.getCommValue()))
						return true;
				}
			}
			if (!found)
				return true;
		}

		if ((savedPatient.getNationalHealthCover() == null && patient.getNationalHealthCoverIsNotNull()) || (savedPatient.getNationalHealthCoverIsNotNull() && patient.getNationalHealthCover() == null) || (savedPatient.getNationalHealthCoverIsNotNull() && patient.getNationalHealthCoverIsNotNull() && !savedPatient.getNationalHealthCover().toString().equals(patient.getNationalHealthCover().toString())))
			return true;

		return false;
	}

	public boolean validateData()
	{
		boolean errorsOnPatientDetailsTab = false;
		boolean errorsOnOtherDetailsTab = false;
		
		java.util.ArrayList<String> errors = new ArrayList<String>();
		
		if(!form.lyrDetails().tabPatientDetails().ccDetails().validateData(errors))
		{
			errorsOnPatientDetailsTab = true;
			//form.lyrDetails().showtabPatientDetails();
			//return false;
		}

		if (form.getLocalContext().getPatient() == null || (form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getIsConfidentialIsNotNull() && !form.getLocalContext().getPatient().getIsConfidential()) || (form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getIsConfidential() == null))
		{			
			if(!form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().validateData(errors))
			{
				errorsOnPatientDetailsTab = true;
				//form.lyrDetails().showtabPatientDetails();
				//return false;
			}
		}
		
		if(!form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().validateData(errors))
		{
			errorsOnPatientDetailsTab = true;
			//form.lyrDetails().showtabPatientDetails();
			//return false;
		}
		
		Boolean skipGP = form.lyrDetails().tabPatientDetails().ccDetails().isOverseasVisitor();
		if(!form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().validateData(errors, skipGP))
		{
			errorsOnPatientDetailsTab = true;
			//form.lyrDetails().showtabPatientDetails();
			//return false;
		}
		
		// WDEV-22135 Date of Death cannot be cleared 
		if (!validateDateOfDeath(errors))
		{
			errorsOnPatientDetailsTab = true;
			//form.lyrDetails().showtabPatientDetails();
		}

		if(!validateInsuranceDetails(errors))
		{
			errorsOnOtherDetailsTab = true;
			//form.lyrDetails().showtabOtherDetails();
			//return false;
		}
		
		if(!validateOtherDetails(errors))
		{
			errorsOnOtherDetailsTab = true;
			//form.lyrDetails().showtabOtherDetails();
			//return false;
		}
			
		
		if(form.lyrDetails().tabPreferences().cmbPrefferedContactMethod().getValue() != null)
		{
			PDSContactMethod contactMethod = form.lyrDetails().tabPreferences().cmbPrefferedContactMethod().getValue();
			
			ArrayList list = commMethodMap.get(contactMethod);
			
			if(list != null && list.size() > 0)
			{
				Patient patient = new Patient();
				
				form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().populateDataFromScreen(patient);
				
				if(patient.getCommChannels() == null || patient.getCommChannels().size() == 0)
				{
					errorsOnPatientDetailsTab = true;
					errors.add("The patient must have a communication channel type from this list: " + commMethodMapTxt.get(contactMethod) + " !");
					//return false;
				}
				else
				{
    				boolean found = false;
    				for(CommChannelVo cc : patient.getCommChannels())
    				{
    					if(list.contains(cc.getChannelType()))
    					{
    						found = true;
    						break;
    					}
    				}
    				
    				if(!found)
    				{
    					errorsOnPatientDetailsTab = true;
    					errors.add("The patient must have a communication channel type from this list: " + commMethodMapTxt.get(contactMethod) + " !");					
    					//return false;
    				}
				}
			}
		}
		
		if(isSVUH())
		{
			if(form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().getValue() == null || form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().getValue().trim().length() == 0)
			{
				errorsOnPatientDetailsTab = true;
				errors.add("The patient must have a NOK record !");
			}
			
			if(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getValue() == null)
			{
				errorsOnOtherDetailsTab = true;
				errors.add("The Eligibility is mandatory !");
			}
		}
		
		Patient patient = new Patient();
		patient = populateDataFromScreen(patient);
		
		if(isPds())
			checkValidPdsLookups(patient, errors);
		
		boolean ageGreater16 = false;
		Integer age = patient.calculateAge();
		boolean isSVUH = isSVUH();
		
		if(age == null || age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
		{
			ageGreater16 = true;
		}
		
		if(ageGreater16 == false && !isSVUH)
		{
			//the patient is a child and must have a Legal Guardian as a patient relative
			if(patient.getPDSrelatives() == null)
			{
				errors.add("The current Patient is a child and must have a Relationship Role of 'Guardian'!");//WDEV-23033
				//return;
			}
			
			boolean hasGuardian = false;
			for(int i = 0; i < patient.getPDSrelatives().size(); i++)
			{
				if(PDSPersonRole.GUARDIAN.equals(patient.getPDSrelatives().get(i).getRole()))
				{
					hasGuardian = true;
					break;
				}
			}
			
			if(!hasGuardian)
			{
				errors.add("The current Patient is a child and must have a Relationship Role of 'Guardian'!");//WDEV-23033
				//return;
			}

			boolean hasNok = false;
			for(int i = 0; i < patient.getPDSrelatives().size(); i++)
			{
				if(Boolean.TRUE.equals(patient.getPDSrelatives().get(i).getNokInd()))
				{
					hasNok = true;
					break;
				}
			}
			
			if(!hasNok)
			{
				errors.add("The current patient is a child and must have a Next Of Kin !");
				//return;
			}
		}
		
		//WDEV-22142
		if (form.lyrDetails().tabPreferences().Group2().getValue()!=null 
				&& (Group2Enumeration.rdoIRYes.equals(form.lyrDetails().tabPreferences().Group2().getValue())))
		{
			//check that Preferred Language is set
			if (form.lyrDetails().tabPreferences().cmbPreferredLanguage().getValue()==null)
				errors.add("Please select a Preferred Language value from the drop down list provided, when Interpreter Required is specified.");
		}
		//WDEV-22142
		
		//WDEV-22138 - Where deceasedTime is to be 'added', the full death date (CCYYMMDD) MUST be provided in the update
		if (form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getTimeOfDeathIsNotNull())
		{			
			if (!form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getDodIsNotNull())
				errors.add("Please provide a full Date of Death.");
		}		
		//WDEV-22138
		
		//WDEV-21991
		if (checkConsecutiveSpace(form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getSurname()))
				errors.add("Please remove consecutive and or leading/trailing spaces in Surname");

		if (checkConsecutiveSpace(form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getForename()))
			errors.add("Please remove consecutive and or leading/trailing spaces in Forename");

		if (checkConsecutiveSpace(form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getMiddleName()))
			errors.add("Please remove consecutive and or leading/trailing spaces in Middlename");
		//WDEV-21991
		
		if (errors.size() > 0)
		{		
			if(errorsOnPatientDetailsTab)
				form.lyrDetails().showtabPatientDetails();
			else if(errorsOnOtherDetailsTab)
				form.lyrDetails().showtabOtherDetails();
			
			engine.showErrors(errors.toArray(new String[errors.size()]));			
			return false;
		}
		return true;
	}

	//WDEV-21991
	private boolean checkConsecutiveSpace(String string) 
	{
		if (string==null)
			return false;

		Pattern pattern = Pattern.compile("\\p{javaWhitespace}{2,}");
		Matcher m = pattern.matcher(string);
		if (m.find())
			return true;
		
		if (Character.isWhitespace(string.charAt(0)) || Character.isWhitespace(string.charAt(string.length() - 1))) {
	        return true;
	    }
		
		return false;
	}
	//WDEV-21991

	public NationalHealthCoverVo populateNationalHealthCover(Patient pat, NationalHealthCoverVo insurance)
	{
		if(insurance == null) //WDEV-21921
		{
			insurance = new NationalHealthCoverVo();
		}
		
		if(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getVisible())
			insurance.setEligibility(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getValue());
		
		insurance.setEHICNumber(form.lyrDetails().tabOtherDetails().txtEhicNumber().getValue());
		insurance.setEHICExpiryDate(form.lyrDetails().tabOtherDetails().pdtEhicExpiryDate().getValue());
		insurance.setEHICCountry(form.lyrDetails().tabOtherDetails().cmbEhicCountry().getValue());
		insurance.setEHICInstitutionCode(form.lyrDetails().tabOtherDetails().cmbEhicInstitution().getValue());
		
		insurance.setMedicalCardNo(form.lyrDetails().tabOtherDetails().txtMedicalCardNo().getValue());
		insurance.setMedicalCardExpiryDate(form.lyrDetails().tabOtherDetails().pdtExpiryDate().getValue());
		insurance.setHealthActCategory(form.lyrDetails().tabOtherDetails().cmbEligibility().getValue());
		insurance.setMedicalCardProved(form.lyrDetails().tabOtherDetails().cmbProved().getValue());
		insurance.setEligibilityProof(form.lyrDetails().tabOtherDetails().txtEligibilityProof().getValue());
		
		return insurance;
	}

	
	public PatientMedicalInsuranceVo populateCurrentMedicalInsurance(Patient pat, PatientMedicalInsuranceVo tempVo)
	{
		if(tempVo == null)
		{
			if( form.lyrDetails().tabOtherDetails().cmbInsurer().getValue() != null || form.lyrDetails().tabOtherDetails().txtPolicyNumber().getValue() != null || form.lyrDetails().tabOtherDetails().cmbPolicyType().getValue() != null || form.lyrDetails().tabOtherDetails().txtPolicyOther().getValue() != null || form.lyrDetails().tabOtherDetails().dteRenewalDate().getValue() != null)
			{
				tempVo = new PatientMedicalInsuranceVo();
			}
			else
			{
				return null;
			}
		}

		tempVo.setPatient(pat);
		tempVo.setCompany(form.lyrDetails().tabOtherDetails().cmbInsurer().getValue());
		tempVo.setPolicyNumber(form.lyrDetails().tabOtherDetails().txtPolicyNumber().getValue());
		tempVo.setPolicyType(form.lyrDetails().tabOtherDetails().cmbPolicyType().getValue());
		tempVo.setPlanOrUnits(form.lyrDetails().tabOtherDetails().txtPolicyOther().getValue());
		tempVo.setExpiryDate(form.lyrDetails().tabOtherDetails().dteRenewalDate().getValue());
		
		return tempVo;
	}

	@Override
	protected void onGrdRelatedPersonsSelectionChanged() throws PresentationLogicException
	{
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);		
		
		updateContextMenu();
	}

	private void updateContextMenu()
	{
		form.getContextMenus().Core.getPDSRelatedPersonsMenuREMOVE_RELATIVEItem().setVisible(!isPds() && form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null && FormMode.EDIT.equals(form.getMode()));
	}

	private void checkTheEvent(Integer action)
	{
		if(action == null)
			return;
		
		switch (action)
		{
			
			case BUTTON_OTHERNAMES:
				engine.open(form.getForms().Core.AliasNames);
			break;
			
			case BUTTON_ALIAS:
				engine.open(form.getForms().Core.OtherNamesDialog, new Object[] {FormMode.VIEW, FormMode.EDIT.equals(form.getMode())}, null, Boolean.TRUE);
			break;
			
			case BUTTON_DECEASED:
				
				if (form.getGlobalContext().Core.getPatientShort() == null)
				{
					form.getGlobalContext().Core.setPatientShort(new PatientShort());
				}
				
				// WDEV-22135 Hold onto Death Details as we need previous details on save in case the user clears the values - not allowed in PDS
				Patient localPat = form.getLocalContext().getPatient();
				if (localPat != null)
					form.getLocalContext().setprevDateOfDeath(localPat.getDod());
				
				engine.open(form.getForms().Clinical.DeathDetails);
				break;

			case VISITOR_STATUS:
				boolean overseasVisitor = form.lyrDetails().tabPatientDetails().ccDetails().isOverseasVisitor();
				form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setCountryVisibility(overseasVisitor);
				break;
			case BUTTON_OTHER_ADDRESSES:
				Patient pat = new Patient();
				PersonAddress address = form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().getValue();
				form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().populateDataFromScreen(pat);
				
				if( address != null)
					form.getGlobalContext().Core.setNOKPersonAddress(address);

				form.getGlobalContext().Core.setCommChannels(pat.getCommChannels());
				
				form.getGlobalContext().Core.setParentFormMode(form.getMode());
				form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().otherAddressesEvent();
				break;
		}
	}
	@Override
	protected void onCcDetailsValueChanged() throws PresentationLogicException
	{
		checkTheEvent(form.lyrDetails().tabPatientDetails().ccDetails().getButtonAction());
		form.lyrDetails().tabPatientDetails().ccDetails().setButtonAction(NONE);
	}

	@Override
	protected void clearScreen()
	{
		super.clearScreen();
		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().clearScreen();
		form.lyrDetails().tabPatientDetails().ccDetails().clearScreen();
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().clearScreen();
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().clearScreen();

		form.lyrDetails().tabOtherDetails().cmbEhicCountry().setValue(null);
		form.lyrDetails().tabOtherDetails().cmbEhicInstitution().setValue(null);
		//form.lyrDetails().tabOtherDetails().cmbEthnicCategory().setValue(null);
		form.lyrDetails().tabOtherDetails().cmbInsurer().setValue(null);
		//form.lyrDetails().tabOtherDetails().cmbMaritialStatus().setValue(null);
		//form.lyrDetails().tabOtherDetails().cmbOccupation().setValue(null);
		form.lyrDetails().tabOtherDetails().cmbPolicyType().setValue(null);
		//form.lyrDetails().tabOtherDetails().cmbReligion().setValue(null);
		//form.lyrDetails().tabOtherDetails().qmbSchool().setValue(null);
		form.lyrDetails().tabOtherDetails().cmbPatientCategory().setValue(null);
		form.lyrDetails().tabOtherDetails().dteRenewalDate().setValue(null);
		form.lyrDetails().tabOtherDetails().grdCasenote().getRows().clear();
		form.lyrDetails().tabOtherDetails().txtEhicNumber().setValue(null);
		form.lyrDetails().tabOtherDetails().txtPolicyNumber().setValue(null);
		form.lyrDetails().tabOtherDetails().txtPolicyOther().setValue(null);
		form.lyrDetails().tabOtherDetails().pdtEhicExpiryDate().setValue(null);
		
		form.lyrDetails().tabPreferences().cmbConsent().setValue(null);
		form.lyrDetails().tabPreferences().txtConsentComments().setValue(null);
		form.lyrDetails().tabPreferences().grdConsentHistory().getRows().clear();
		form.lyrDetails().tabPreferences().cmbPreferredLanguage().setValue(null);
		form.lyrDetails().tabPreferences().cmbPreferredWrittenCommMethod().setValue(null);
		form.lyrDetails().tabPreferences().cmbPrefferedContactMethod().setValue(null);
		form.lyrDetails().tabPreferences().dteDateLastChanged().setValue(null);
		form.lyrDetails().tabPreferences().txtPrefferedContactTimes().setValue(null);
		
		form.lyrDetails().tabPreferences().Group3().setValue(Group3Enumeration.rdoOptNo);
		//form.lyrDetails().tabOtherDetails().Group1().setValue(Group1Enumeration.rdoLivedUKNo);
		form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setValue(null);
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setValue(null);
		
		form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getRows().clear();
		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setTooltip(null);		
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setValue(null);
	}

	@Override
	protected void onBtnViewCasenoteFolderClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.PatientCaseNotes);
	}
	
	private String getPersonContactNumber(CommChannelVoCollection coll)
	{
		PdsQuery helper = new PdsQuery(domain);
		
		return helper.getPersonContactNumber(coll);
	}
	
	private boolean isPds()
	{
		return !"None".equals(ConfigFlag.DOM.USE_PDS.getValue());
	}
	
	private boolean isSVUH()
	{
		return ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH");
	}
	
	@Override
	protected void onBtnViewAddressesClick() throws PresentationLogicException
	{
		if (isPds())
		{
			//Only check if there exists an address of type sensitive
			
			if (form.getLocalContext().getPatientIsNotNull() && form.getLocalContext().getPatient().getAddressesIsNotNull())
			{
				boolean lSensitive = false;
				for (int i=0;i<form.getLocalContext().getPatient().getAddresses().size();i++)
				{
					if (form.getLocalContext().getPatient().getAddresses().get(i).getAddressTypeIsNotNull() 
							&& form.getLocalContext().getPatient().getAddresses().get(i).getAddressType().equals(AddressType.SENSITIVE))
					{
						lSensitive = true;
						break;
					}
				}
				
				if (lSensitive)
				{
					//check B1611 activity
					// PDS AUTHENTICATION
					boolean activityB1611 = true;
					PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
					activityB1611 = pdsAuth.hasRightsFor(PdsRight.ACCESS_SENSITIVE_DATA, PdsCheck.CHECK_ALL, null);
					if(activityB1611 == false)
					{
						engine.showMessage(pdsAuth.getLastError());
						return;
					}
					form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
					// END PDS AUTHENTICATION
				}
			}
		}
		
		Patient pat = new Patient();
		PersonAddress address = form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().getValue();
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().populateDataFromScreen(pat);
		
		if( address != null)
			form.getGlobalContext().Core.setNOKPersonAddress(address);

		form.getGlobalContext().Core.setCommChannels(pat.getCommChannels());
		
		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		engine.open(form.getForms().Core.OtherAddresses);
	}
	@Override
	protected void onBtninactivateClick() throws PresentationLogicException 
	{
		Patient patient = form.getLocalContext().getPatient();

		if (patient.getSCN() == null || (patient.getSCN() != null && Boolean.TRUE.equals(patient.getDecoupled())))
		{
			form.getLocalContext().setAction(ACTION_ACTIVATE);
			// WDEV-21954 Check button as we could be re-activating the patient!
			if (form.btninactivate().getText().equals("Activate"))
			{
				form.getLocalContext().setActivatePatientMessageBoxID((engine.showMessage("Any other current changes to this patient record will NOT be saved if you choose to activate the patient.", "Warning", MessageButtons.OKCANCEL, MessageIcon.WARNING)));
			}
			else
			{
				form.getLocalContext().setActivatePatientMessageBoxID((engine.showMessage("Any other current changes to this patient record will NOT be saved if you choose to inactivate the patient.", "Warning", MessageButtons.OKCANCEL, MessageIcon.WARNING)));
			}
		}
		else if (patient.getSCN() != null && Boolean.FALSE.equals(patient.getDecoupled()))
		{
			form.getLocalContext().setAction(ACTION_DECOUPLE);
			if (form.btninactivate().getText().equals("Activate"))
			{
				form.getLocalContext().setDecouplePatientMessageBoxID(engine.showMessage("Patient Record cannot be activated locally as it is still coupled with PDS", "Warning", MessageButtons.OK, MessageIcon.WARNING));
			}
			else
			{
				form.getLocalContext().setDecouplePatientMessageBoxID(engine.showMessage("Patient Record cannot be inactivated locally as it is still coupled with PDS", "Warning", MessageButtons.OK, MessageIcon.WARNING));
			}
		}
	}
	
	private void activateDeactivatePatient(Patient patient)
	{	
		try
		{
			patient = domain.activateDeactivatePatient(patient);
			form.getLocalContext().setPatient(patient);
			form.getGlobalContext().Core.setPatientShort(patient);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientShort(patient);
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}

	}
	
	private void displayRelativeSynchronizationDialog()
	{
		if(form.getMode().equals(FormMode.EDIT) && form.lyrDetails().tabRelatedPersons().isVisible())
		{
			boolean hasPendingRelatives = false;
			Patient initialPatient = form.getLocalContext().getInitialPatient();
			
			if(initialPatient != null && initialPatient.getPDSrelativesIsNotNull())
			{
				for(int i = 0; i < initialPatient.getPDSrelatives().size(); i++)
				{
					if(Boolean.TRUE.equals(initialPatient.getPDSrelatives().get(i).getPending()))
					{
						hasPendingRelatives = true;
						break;
					}
				}
			}
				
			if(hasPendingRelatives)
			{
				PatRelativeCollection coll = new PatRelativeCollection();
				
				for(int i = 0; i < form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getRows().size(); i++)
				{
					coll.add(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getRows().get(i).getValue());
				}
				
				form.getGlobalContext().Core.setPdsRelativesSynchronization(coll);
				engine.open(form.getForms().Core.PDSRelativesSynchronization);
			}
		}
	}
	@Override
	protected void onlyrDetailsTabChanged(LayerBridge tab)
	{
		if(form.lyrDetails().tabOtherDetails().isVisible() && form.getMode().equals(FormMode.EDIT))
		{
			displayAgeRelatedControls(null);
		}
			
		displayRelativeSynchronizationDialog();
		form.lyrDetails().tabRelatedPersons().btnEditPerson().setEnabled(form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue() != null);
		
		updateContextMenu();
		
		if(form.lyrDetails().tabOtherDetails().isVisible() && form.getMode().equals(FormMode.EDIT) && isSVUH())
		{
			form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setFocus();
		}
		
	}

	public class ConsentHistoryComparator implements Comparator
	{
		private int direction = 1;
		
		public ConsentHistoryComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ConsentHistoryComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Integer id1 = null;
			Integer id2 = null;
			
			if(ob1 instanceof PDSConsentHistoryVo)
			{
				PDSConsentHistoryVo ps1 = (PDSConsentHistoryVo)ob1;
				
				if(ps1.getID_pdsConsentHistory() != null)
					id1 = ps1.getID_pdsConsentHistory();
				else
					id1 = 9999;
			}
			if(ob2 instanceof PDSConsentHistoryVo)
			{
				PDSConsentHistoryVo ps2 = (PDSConsentHistoryVo)ob2;
				
				if(ps2.getID_pdsConsentHistory() != null)
					id2 = ps2.getID_pdsConsentHistory();
				else
					id2 = 9999;
			}
			
			if(id1 != null )
				return  id1.compareTo(id2)*direction;
			
			if(id2 != null)
				return (-1)*direction;
			
			return 0;
		}
	}

	public class ContactRankingComparator implements Comparator
	{
		private int direction = 1;
		
		public ContactRankingComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ContactRankingComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Long id1 = null;
			Long id2 = null;
			
			// WDEV-22523 - the sorting order is as follows: Contact Rank first, if there is no contact rank
			// the records should be sorted in the order they were added to the list
			// in this case ID_Relative is used, if that is null then we use PatRelative.Timestamp which is only set
			// when a brand new PatRelative record is created (records that are not saved yet)
			
			if(ob1 instanceof PatRelative)
			{
				PatRelative ps1 = (PatRelative)ob1;
				
				try
				{
    				if(ps1.getContactRank() != null)
    					id1 = Long.parseLong(ps1.getContactRank());
    				else
    					id1 = 100L + (ps1.getID_RelativeIsNotNull() ? ps1.getID_Relative() : Long.parseLong(ps1.getTimestamp()));
				}
				catch(Exception e)
				{
					id1 = 1000L;
				}
			}
			
			if(ob2 instanceof PatRelative)
			{
				PatRelative ps2 = (PatRelative)ob2;

				try
				{
    				if(ps2.getContactRank() != null)
    					id2 = Long.parseLong(ps2.getContactRank());
    				else
    					id2 = 100L + (ps2.getID_RelativeIsNotNull() ? ps2.getID_Relative() : Long.parseLong(ps2.getTimestamp()));
				}
				catch(Exception e)
				{
					id2 = 1000L;
				}
			}
			
			if(id1 != null )
				return  id1.compareTo(id2)*direction;
			
			if(id2 != null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	@Override
	protected void onChkIsChildInPublicCareValueChanged() throws PresentationLogicException 
	{
		if (Boolean.FALSE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()))
		{
			form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setValue(null);
		}
		
		updateComponentState();
	}
	
	private void updateComponentState() 
	{	
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setVisible(Boolean.TRUE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()) && form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().isVisible()); 
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setRequired(Boolean.TRUE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()) && FormMode.EDIT.equals(form.getMode()) && !form.getLocalContext().getFormOpenedFromNavigation()); 
		form.lyrDetails().tabOtherDetails().lblPublicCareNeed().setVisible(Boolean.TRUE.equals(form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().getValue()) && form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().isVisible()); 
	}
	
	private void displayAgeRelatedControls(PatientShort pat)
	{
		boolean ageGreater16 = false;
		Integer age = null;
		
		if(pat == null)
		{
			PartialDate dob = form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getDob();
			Date dod = form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails().getDod();
			
			if(dob == null)
				age = null;
			else
			{
				int patAge = 0;
				if (dod != null)
				{
					patAge = dod.yearDiff(dob);
				}
				else
				{
					patAge = new ims.framework.utils.Age(dob, dod).getYears();
				}
				
				age = new Integer(patAge);
			}
		}
		else
		{
			age = pat.getAge();
		}
		
		if(age == null || age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
		{
			ageGreater16 = true;
		}
		
		/*
		form.lyrDetails().tabOtherDetails().qmbSchool().setRequired(!Boolean.TRUE.equals(form.getLocalContext().getFormOpenedFromNavigation()) && !ageGreater16);
		form.lyrDetails().tabOtherDetails().lblOccupation().setVisible(ageGreater16);
		form.lyrDetails().tabOtherDetails().cmbOccupation().setVisible(ageGreater16);
		form.lyrDetails().tabOtherDetails().lblSchool().setVisible(!ageGreater16);
		form.lyrDetails().tabOtherDetails().qmbSchool().setVisible(!ageGreater16);
		*/
		
		form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setVisible(!ageGreater16 && !isSVUH());
	}
	
	private boolean hasAddressChanged(PersonAddress newAddress, PersonAddress previousAddress) 
	{
		
		if (previousAddress == null || isEmptyAddress(previousAddress))
			return false;
		else if(newAddress == null)
			return true;
		
		if (previousAddress.getLine1() == null && newAddress.getLine1() == null)
							;
		else if ((previousAddress.getLine1() != null && newAddress.getLine1() == null)	|| (previousAddress.getLine1() == null && newAddress.getLine1() != null))
						return true;
		else if (!previousAddress.getLine1().equals(newAddress.getLine1()))
						return true;
		
		if (previousAddress.getLine2() == null && newAddress.getLine2() == null)
							;
		else if ((previousAddress.getLine2() != null && newAddress.getLine2() == null) || (previousAddress.getLine2() == null && newAddress.getLine2() != null))
						return true;
		else if (!previousAddress.getLine2().equals(newAddress.getLine2()))
						return true;
		
		if(previousAddress.getLine3() == null && newAddress.getLine3() == null)
							;
		else if ((previousAddress.getLine3() != null && newAddress.getLine3() == null) || (previousAddress.getLine3() == null && newAddress.getLine3() != null))
						return true;
		else if (!previousAddress.getLine3().equals(newAddress.getLine3()))
						return true;
		
		if(previousAddress.getLine4() == null && newAddress.getLine4() == null)
							;
		else if ((previousAddress.getLine4() != null && newAddress.getLine4() == null) || (previousAddress.getLine4() == null && newAddress.getLine4()!= null))
						return true;
		else if (!previousAddress.getLine4().equals(newAddress.getLine4()))
						return true;
		////WDEV-19137 ----------------------------------------------
		if(previousAddress.getLine5() == null && (newAddress.getLine5() == null || newAddress.getLine5().equals("")))		//wdev-19228
							;
		else if ((previousAddress.getLine5() != null && newAddress.getLine5() == null) || (previousAddress.getLine5() == null && newAddress.getLine5() != null))
						return true;
		else if (!previousAddress.getLine5().equals(newAddress.getLine5()))
						return true;
		
		if(previousAddress.getCounty() == null && newAddress.getCounty() == null)
							;
		else if ((previousAddress.getCounty() != null && newAddress.getCounty() == null) || (previousAddress.getCounty() == null && newAddress.getCounty() != null))
						return true;
		else if (!previousAddress.getCounty().equals(newAddress.getCounty()))
						return true;
		////WDEV-19137 ----------------------------------------------
		
		//WDEV-19597 -- Area Of Residence added
		if(previousAddress.getAreaOfResidence() == null && newAddress.getAreaOfResidence() == null)
							;
		else if ((previousAddress.getAreaOfResidence() != null && newAddress.getAreaOfResidence() == null) || (previousAddress.getAreaOfResidence() == null && newAddress.getAreaOfResidence() != null))
						return true;
		else if (!previousAddress.getAreaOfResidence().equals(newAddress.getAreaOfResidence()))
						return true;
		
		if (previousAddress.getPostCode() == null && newAddress.getPostCode() == null)
							;
		else if((previousAddress.getPostCode()!= null && newAddress.getPostCode() == null) || (previousAddress.getPostCode() == null && newAddress.getPostCode() != null))
						return true;
		else if (!previousAddress.getPostCode().replaceAll("[^a-zA-Z0-9]", "").equals(newAddress.getPostCode().replaceAll("[^a-zA-Z0-9]", "")))
						return true;
		
		//WDEV-22763		
		if(previousAddress.getCountry() == null && newAddress.getCountry() == null)
							;
		else if ((previousAddress.getCountry() != null && newAddress.getCountry() == null) || (previousAddress.getCountry() == null && newAddress.getCountry() != null))
						return true;
		else if (!previousAddress.getCountry().equals(newAddress.getCountry()))
						return true;
		//---------------------------
		return false;
	}

	/**
	 * WDEV-13432
	 * Function used to test an address if it is empty.
	 * A null address is also considered empty
	 */
	private boolean isEmptyAddress(PersonAddress previousAddress)
	{
		// Test address for null value
		if (previousAddress == null)
			return true;
		
		// Test relevant fields if are not empty
		
		if (previousAddress.getLine1IsNotNull() && previousAddress.getLine1().length() != 0)
			return false;
		
		if (previousAddress.getLine2IsNotNull() && previousAddress.getLine2().length() != 0)
			return false;
		
		if (previousAddress.getLine3IsNotNull() && previousAddress.getLine3().length() != 0)
			return false;
		
		if (previousAddress.getLine4IsNotNull() && previousAddress.getLine4().length() != 0)
			return false;
		
		if (previousAddress.getLine5IsNotNull() && previousAddress.getLine5().length() != 0)
			return false;
		
		if (previousAddress.getPostCodeIsNotNull() && previousAddress.getPostCode().length() != 0)
			return false;
		
		if (previousAddress.getPhoneIsNotNull() && previousAddress.getPhone().length() != 0)
			return false;
		
		if (previousAddress.getCountyIsNotNull())
			return false;
		
		if (previousAddress.getAreaOfResidenceIsNotNull()) //WDEV-19597
			return false;
		
		return true;
	}

	@Override
	protected void onCmbPolicyTypeValueChanged() throws PresentationLogicException
	{
		PrivateInsurancePolicyType type = form.lyrDetails().tabOtherDetails().cmbPolicyType().getValue();
		
		form.lyrDetails().tabOtherDetails().txtPolicyOther().setRequired(PrivateInsurancePolicyType.OTHER.equals(type));
	}

	//WDEV-21256
	protected void onCcGpDetailsValueChanged()
			throws PresentationLogicException 
	{
		Patient pat = form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccGpDetails().getPatientWithGPetails();
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setPatient(pat);
		//WDEV-22720
		if (pat!=null && pat.getPracticeIsNotNull() && pat.getPractice().getAddressIsNotNull())
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setDefaultNoFixedAbodeAddressLine4(pat.getPractice().getAddress().getAddressLocality());
		else
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setDefaultNoFixedAbodeAddressLine4(null);
		//WDEV-22720
	}
	
	//WDEV-22048
	private String getConsentMessage(Patient pat)
	{
		PatientContactPreferenceVo tempPatContctVo  = pat.getAlternativeContact();
		String ret="";

		if( tempPatContctVo != null )
		{
			ret = " Consent Status is ["+tempPatContctVo.getPdsConsent()+"]. Last consent decision date is["+tempPatContctVo.getPdsDateLastChanged()+"]";
		}
			
		return ret;
	}
	
	//WDEV-22049
	private boolean displayConsentMessage(Patient pat)
	{
		boolean ret=true;
		
		if(pat != null && pat.getID_PatientIsNotNull())
		{
			if(pat.getAlternativeContactIsNotNull() && PDSConsent.EXPLICITDISSENT.equals(pat.getAlternativeContact().getPdsConsent()))
			{
				if(!engine.hasRight(AppRight.PDS_ACCESS_RECORD_ON_DISSENT))
				{
					ret=false;
				}
			}
		}
		return ret;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.PDSRelatedPersonsMenu.REMOVE_RELATIVE:
				PatRelative relatedPerson = form.lyrDetails().tabRelatedPersons().grdRelatedPersons().getValue();
				
				if(relatedPerson != null)
				{
					form.getLocalContext().setRemoveRelatedPersonMessageBoxID(engine.showMessage("Are you sure you want to remove " + relatedPerson.getName().toString() + " from Related Persons?", "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
				}
				
			break;
		}
		
		updateContextMenu();
	}

	@Override
	protected void onImbNOKClick() throws PresentationLogicException
	{
		Patient pat = new Patient();
		PersonAddress address = form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().getValue();
		form.lyrDetails().tabPatientDetails().ctnContactsAndGP().ccPatientContacts().populateDataFromScreen(pat);
		
		if( address != null)
			form.getGlobalContext().Core.setNOKPersonAddress(address);

		form.getGlobalContext().Core.setCommChannels(pat.getCommChannels());
		
		engine.open(form.getForms().Core.NOKDetails);
	}
	
	private String getNokTooltip(Patient pat)
	{
		if (pat == null || pat.getNok() == null)
		{
			if (form.getMode().equals(FormMode.EDIT) && isSVUH())
				form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setVisible(true);
			else
				form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setVisible(false);
			
			return "No NOK Details";
		}

		StringBuffer sbNOKDetails = new StringBuffer();
		if (pat.getNok().getNameIsNotNull())
		{
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setValue(pat.getNok().getName().toString());
			sbNOKDetails.append(Textile.setBold("NOK DETAILS") + "\r" + Textile.setBold("NOK Name: ") + pat.getNok().getName().toString());
		}
		if (pat.getNok().getAddressIsNotNull())
		{
			sbNOKDetails.append("\n" + Textile.setBold("Address:"));
			if (pat.getNok().getAddress().getLine1IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine1());
			if (pat.getNok().getAddress().getLine2IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine2());
			if (pat.getNok().getAddress().getLine3IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine3());
			if (pat.getNok().getAddress().getLine4IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine4());
			if (pat.getNok().getAddress().getLine5IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine5());

			if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
			{
				if (pat.getNok().getAddress().getPostCodeIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("Post Code:  ") + pat.getNok().getAddress().getPostCode());
			}
			else if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
			{
				if (pat.getNok().getAddress().getCountyIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("County:  ") + pat.getNok().getAddress().getCounty());
			}

			if (pat.getNok().getAddress().getPhoneIsNotNull())
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Home): ") + pat.getNok().getAddress().getPhone());
			
		}
		
		//WDEV-15956
		if (pat.getNok().getCommChannelsIsNotNull())
		{
			if (pat.getNok().getWorkPhoneNumber() != null)
			{
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Work): ") + pat.getNok().getWorkPhoneNumber().getCommValue());
				//form.txtWorkPhone().setValue(pat.getNok().getWorkPhoneNumber().getCommValue());  //wdev-17883
			}

			if (pat.getNok().getMobile() != null)
				sbNOKDetails.append("\n" + Textile.setBold("Mobile:  ") + pat.getNok().getMobile().getCommValue());
		}
		
		if (pat.getNok().getRelationshipIsNotNull())
			sbNOKDetails.append("\n" + Textile.setBold("Relationship: ") + pat.getNok().getRelationship().getText());

		return new Textile().process(sbNOKDetails.toString());
	}

	private void checkSVUHDemographics()
	{
		if(ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			//SVUH
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().lblNOK().setVisible(true);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setVisible(true);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setVisible(true);
			
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setEnabled(false);
			
			form.lyrDetails().tabRelatedPersons().setVisible(false);
			form.lyrDetails().tabPreferences().setVisible(false);
			form.lyrDetails().tabRelatedPersons().setHeaderVisible(false);
			form.lyrDetails().tabPreferences().setHeaderVisible(false);
			
			form.lyrDetails().tabOtherDetails().chkIsChildInPublicCare().setVisible(false);
			form.lyrDetails().tabOtherDetails().lblPublicCareNeed().setVisible(false);
			form.lyrDetails().tabOtherDetails().lblPatientCategory().setVisible(false);
			form.lyrDetails().tabOtherDetails().cmbPublicCareNeed().setVisible(false);
			form.lyrDetails().tabOtherDetails().cmbPatientCategory().setVisible(false);
			form.lyrDetails().tabOtherDetails().pnlCasenote().setVisible(false);
			form.lyrDetails().tabOtherDetails().grdCasenote().setVisible(false);
			form.lyrDetails().tabOtherDetails().btnViewCasenoteFolder().setVisible(false);
		}
		else
		{
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().lblNOK().setVisible(false);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().txtNOK().setVisible(false);
			form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().imbNOK().setVisible(false);
			
			form.lyrDetails().tabRelatedPersons().setVisible(true);
			form.lyrDetails().tabPreferences().setVisible(true);
			form.lyrDetails().tabRelatedPersons().setHeaderVisible(true);
			form.lyrDetails().tabPreferences().setHeaderVisible(true);
		}
		
		form.lyrDetails().showtabPatientDetails();
		
		if(ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue() == true)
		{
			form.lyrDetails().tabOtherDetails().cmbInsurer().setRequired(true);
		}

		form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setVisible(isSVUH());
		form.lyrDetails().tabOtherDetails().lblEligibility().setVisible(isSVUH());
		
		if(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getVisible())
			form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().setRequired(true);
		
		//WDEV-23335
		form.lyrDetails().tabOtherDetails().cmbEligibility().setVisible(!isSVUH());
		form.lyrDetails().tabOtherDetails().lblEligibility1().setVisible(!isSVUH());
		form.lyrDetails().tabOtherDetails().lblEligibility2().setVisible(!isSVUH());
	}

	@Override
	protected void onCcAddressValueChanged() throws PresentationLogicException
	{
		checkTheEvent(form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().getButtonAction());
		form.lyrDetails().tabPatientDetails().lyrAddress().tabPageAddress().ccAddress().setButtonAction(NONE);
	}
	

	/**
	 * WDEV-22135
	 * In the PDS environment you cannot rollback on Date of Death
	 * @param errors
	 * @return
	 */
	private boolean validateDateOfDeath(ArrayList<String> errors) 
	{
		// TODO Auto-generated method stub
		if(!isPds())
		{
			return true;
		}
		
		// Get the current version of the Patient
		Date prevDeathDetails = form.getLocalContext().getprevDateOfDeath();
		if (prevDeathDetails != null)
		{
			PatientDetailsComponentVo det = form.lyrDetails().tabPatientDetails().ccDetails().getPatientDetails();
			if (det != null && !det.getDodIsNotNull())
			{
				errors.add("Date of Death cannot be rolled back");
				return false;
			}
		}
		return true;
		
	}

	@Override
	protected void onCmbEligibilitySVUHValueChanged() throws PresentationLogicException
	{
		form.lyrDetails().tabOtherDetails().txtMedicalCardNo().setRequired(Eligibility.MEDICAL_CARD.equals(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getValue()) || Eligibility.RTA_WITH_MEDICAL_CARD.equals(form.lyrDetails().tabOtherDetails().cmbEligibilitySVUH().getValue()));
	}
}
