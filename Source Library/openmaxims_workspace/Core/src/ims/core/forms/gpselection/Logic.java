//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 41210.1630)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.gpselection;

import ims.admin.vo.GPSearchCriteriaVo;
import ims.admin.vo.enums.GPAction;
import ims.admin.vo.enums.GPSelectedRecordType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.GP;
import ims.core.vo.GpLiteToPracticeLiteVo;
import ims.core.vo.GpPracticeLiteVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.OrgLiteVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException
	{
		initialize();
	}

	private void initialize()
	{
		form.btnOK().setEnabled(false);
		form.customControlGPSearch().initialize(false, false);
		form.customControlGPSearch().setSearchButtonAsDefault();

		if (form.getGlobalContext().OCRR.getGPSearchStringIsNotNull() && form.getGlobalContext().OCRR.getGPSearchString().length() > 0)
		{
			GPSearchCriteriaVo criteria = new GPSearchCriteriaVo();
			criteria.setSurname(form.getGlobalContext().OCRR.getGPSearchString());
			form.customControlGPSearch().setSearchCriteria(criteria);
			form.customControlGPSearch().search();
		}
	}

	// catch events coming from the gp search custom control
	protected void onCustomControlGPSearchValueChanged() throws PresentationLogicException
	{
		GPAction action = form.customControlGPSearch().getActionEvent();

		if (action != null)
		{
			if (action.equals(GPAction.SELECT))
			{
				//getAndListDetails(form.customControlGPSearch().getValue());
				if(isGPSelectionOnly())
				{
					form.btnOK().setEnabled(true);
				}
				else
				{	
					if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue())
					{
						form.btnOK().setEnabled(GPSelectedRecordType.SURGERY.equals(form.customControlGPSearch().getComponentGridSelectedRecordType()));
					}
					else
					{
						form.btnOK().setEnabled(GPSelectedRecordType.PRACTICE.equals(form.customControlGPSearch().getComponentGridSelectedRecordType()));
					}
				}
			}
			else if (action.equals(GPAction.CLEAR))
			{
				clear();
			}
			else if (action.equals(GPAction.SEARCH))
			{
				clear();
			}
		}
	}
	private boolean isGPSelectionOnly()
	{
		if(engine.getFormName().equals(form.getForms().Core.GpSelectionOnly))
			return true;
		return false;
	}
	private void clear()
	{
		form.trePracticesSurgeries().clear();
		form.btnOK().setEnabled(false);
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		GP gridGP = form.customControlGPSearch().getFullGpVo(); // - this is unnecessarily large. 

		////WDEV-18377
		if(!isGPSelectionOnly())
		{
			LocSiteShortVo selSurgery = new LocSiteShortVo();

			if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue() && GPSelectedRecordType.SURGERY.equals(form.customControlGPSearch().getComponentGridSelectedRecordType()) && form.customControlGPSearch().getValue() instanceof LocSiteShortVo)
			{
				selSurgery = (LocSiteShortVo) form.customControlGPSearch().getValue();
			}
			else if (GPSelectedRecordType.PRACTICE.equals(form.customControlGPSearch().getComponentGridSelectedRecordType()) && form.customControlGPSearch().getValue() instanceof GpLiteToPracticeLiteVo)// if not using surgeries, set the global context to be the first child surgery of the selected practice
			{
				GpPracticeLiteVo practice = ((GpLiteToPracticeLiteVo) form.customControlGPSearch().getValue()).getPractice();
				if (practice.getSurgeriesIsNotNull() && practice.getSurgeries().size() > 0 && practice.getSurgeries().get(0) != null)
				{
					selSurgery = practice.getSurgeries().get(0);
				}

				form.getGlobalContext().Core.setGPPractice((OrgLiteVo) ((GpLiteToPracticeLiteVo) form.customControlGPSearch().getValue()).getPractice()); //WDEV-16051 //WDEV-18377
			}

			form.getGlobalContext().Core.setGPSurgery(selSurgery);
		}
		form.getGlobalContext().Core.setGPDetails(gridGP);

		engine.close(DialogResult.OK);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
