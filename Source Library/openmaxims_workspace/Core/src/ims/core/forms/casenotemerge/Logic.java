//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotemerge;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CaseNoteFolderCcConfigVo;
import ims.core.vo.CaseNoteFolderCcConfigVoCollection;
import ims.core.vo.CaseNoteRequestsColumnWidthVo;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CaseNoteStatusCollection;
import ims.core.vo.lookups.CaseNoteType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
		
	}

	private void initialise()
	{
		
		form.ccVolumeFrom().initialise(false);
		form.ccVolumeTo().initialise(false);
		
		CaseNoteRequestsColumnWidthVo ccRequestColumnsWidth = new CaseNoteRequestsColumnWidthVo();
		ccRequestColumnsWidth.setColumnTypeWidth(150);
		ccRequestColumnsWidth.setColumnRequestDateWidth(110);
		ccRequestColumnsWidth.setColumnRequestLocationWidth(230);
		ccRequestColumnsWidth.setColumnImage(22);
		ccRequestColumnsWidth.setColumnRequestByWidth(-1);
		
		form.ccOpenRequests().initialize(false, false, false, ccRequestColumnsWidth);
		
		form.btnMergeVolume().setImage(form.getImages().Core.Merge24);
		form.btnClose().setImage(form.getImages().Admin.CloseEnabled24);
		
	}

	private void open()
	{
		clearScreen();
		
		form.ccOpenRequests().setValue(form.getGlobalContext().Core.getPatientShort());
		
		if (form.getGlobalContext().Core.getPatientCaseNoteFolderRef() != null)
		{
			form.ccVolumeFrom().addValue(domain.getPatientCaseNoteFolder(form.getGlobalContext().Core.getPatientCaseNoteFolderRef()));
		}
		
		if (form.ccVolumeFrom().getValue() != null)
		{
			populateVolumeFromComponents();
		}
		
		form.ccVolumeTo().setValue(form.getGlobalContext().Core.getPatientShort(), getStatusAndTypes(false));
		
		updateControlsState();
	}

	private CaseNoteFolderCcConfigVoCollection getStatusAndTypes(boolean fromGrid)
	{
		
		CaseNoteFolderCcConfigVoCollection configColl = new CaseNoteFolderCcConfigVoCollection(); 
		
		if (fromGrid)
		{
			CaseNoteFolderCcConfigVo configTemporary = new CaseNoteFolderCcConfigVo();
			
			configTemporary.setType(CaseNoteType.TEMPORARY);
			configTemporary.setStatuses(getFromTemporaryStatuses());
			configColl.add(configTemporary);
			
			
			CaseNoteFolderCcConfigVo configPermanent = new CaseNoteFolderCcConfigVo();
			
			configPermanent.setType(CaseNoteType.PERMANENT);
			configPermanent.setStatuses(getFromPermanentStatuses());
			
			configColl.add(configPermanent);
		}
		else
		{
		
			CaseNoteFolderCcConfigVo configPermanent = new CaseNoteFolderCcConfigVo();
			
			configPermanent.setType(CaseNoteType.PERMANENT);
			configPermanent.setStatuses(getToPermanentStatuses());
			
			configColl.add(configPermanent);
		}
			
		return configColl;
	}

	private CaseNoteStatusCollection getToPermanentStatuses()
	{
		CaseNoteStatusCollection statuses = new CaseNoteStatusCollection();
		
		statuses.add(CaseNoteStatus.ARCHIVED);
		statuses.add(CaseNoteStatus.ACTIVE);
		statuses.add(CaseNoteStatus.MARKED_AS_FOUND);
		
		return statuses;
	}

	private CaseNoteStatusCollection getFromPermanentStatuses()
	{
		CaseNoteStatusCollection statuses = new CaseNoteStatusCollection();
		
		statuses.add(CaseNoteStatus.MARKED_AS_FOUND);
		statuses.add(CaseNoteStatus.REQUIRES_MERGING);
		
		return statuses;
	}

	private CaseNoteStatusCollection getFromTemporaryStatuses()
	{
		CaseNoteStatusCollection statuses = new CaseNoteStatusCollection();
		
		statuses.add(CaseNoteStatus.ACTIVE);
		statuses.add(CaseNoteStatus.MARKED_AS_FOUND);
		
		return statuses;
	}

	private void clearScreen()
	{
		clearFromComponents();
		clearToComponents();
		
		form.getLocalContext().setCaseNoteFrom(null);
		form.getLocalContext().setCaseNoteFrom(null);
		
	}

	@Override
	protected void onBtnMergeVolumeClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (mergeVolumes())
			engine.close(DialogResult.OK);
		else
			open();
		
	}

	private boolean mergeVolumes()
	{
		
		try
		{
			domain.mergeVolumes(form.getLocalContext().getCaseNoteFrom(), form.getLocalContext().getCaseNoteTo());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		return true;
		
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);

	}

	@Override
	protected void onCcVolumeFromValueChanged() throws PresentationLogicException
	{
		populateVolumeFromComponents();
		updateControlsState();

	}
	
	private void updateControlsState()
	{
		form.btnMergeVolume().setEnabled(form.ccVolumeFrom().getValue() != null && form.ccVolumeTo().getValue() != null && form.ccVolumeFrom().getValue().getCurrentLocation() != null 
				&& form.ccVolumeFrom().getValue().getCurrentLocation().equals(form.ccVolumeTo().getValue().getCurrentLocation()) && !form.ccVolumeFrom().getValue().equals(form.ccVolumeTo().getValue()));
		
	}

	private void populateVolumeFromComponents()
	{
		clearFromComponents();
		
		PatientCaseNoteVo caseNote = domain.getPatientCaseNoteFolder(form.ccVolumeFrom().getValue());
		
		form.getLocalContext().setCaseNoteFrom(caseNote);
		
		form.cmbTypeFrom().setValue(caseNote.getType());
		
		if (caseNote.getCurrentLocation() != null)
		{
			form.qmbLocationFrom().newRow(caseNote.getCurrentLocation().getName(), caseNote.getCurrentLocation().getName());
			form.qmbLocationFrom().setValue(caseNote.getCurrentLocation().getName());
		}
		
		form.cmbStatusFrom().setValue(caseNote.getStatus());
		form.txtIdFrom().setValue(caseNote.getTrackingID() != null ? caseNote.getTrackingID().toString() : "");
		form.txtCommentsFrom().setValue(caseNote.getCurrentComment() != null ? caseNote.getCurrentComment().getComment() : "");
		
	}

	private void clearFromComponents()
	{
		form.cmbTypeFrom().setValue(null);
		form.qmbLocationFrom().clear();
		form.cmbStatusFrom().setValue(null);
		form.txtIdFrom().setValue(null);
		form.txtCommentsFrom().setValue(null);
		
	}

	@Override
	protected void onCcVolumeToValueChanged() throws PresentationLogicException
	{
		populateVolumeToComponents();
		updateControlsState();

	}

	private void populateVolumeToComponents()
	{
		clearToComponents();
		
		PatientCaseNoteVo caseNote = domain.getPatientCaseNoteFolder(form.ccVolumeTo().getValue());
		
		form.getLocalContext().setCaseNoteTo(caseNote);
		
		form.cmbTypeTo().setValue(caseNote.getType());
		
		if (caseNote.getCurrentLocation() != null)
		{
			form.qmbLocationTo().newRow(caseNote.getCurrentLocation().getName(), caseNote.getCurrentLocation().getName());
			form.qmbLocationTo().setValue(caseNote.getCurrentLocation().getName());
		}
		
		form.cmbStatusTo().setValue(caseNote.getStatus());
		form.txtIdTo().setValue(caseNote.getTrackingID() != null ? caseNote.getTrackingID().toString() : "");
		form.txtCommentsTo().setValue(caseNote.getCurrentComment() != null ? caseNote.getCurrentComment().getComment() : "");
		
	}

	private void clearToComponents()
	{
		form.cmbTypeTo().setValue(null);
		form.qmbLocationTo().clear();
		form.cmbStatusTo().setValue(null);
		form.txtIdTo().setValue(null);
		form.txtCommentsTo().setValue(null);
		
	}

	

}
