//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdspatientcontacts;

import java.util.ArrayList;
import java.util.HashMap;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.pdspatientcontacts.GenForm.grdCommChannelsRow;
import ims.core.forms.pdspatientcontacts.GenForm.grdCommChannelsRowCollection;
import ims.core.helper.CommChannelHelper;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.PDSChannelUsage;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
	}	
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.grdCommChannels()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Add :
					GenForm.grdCommChannelsRow rowComm = form.grdCommChannels().getRows().newRow(true);
					rowComm.setValue(new CommChannelVo());
					setRemoveCommunicationMenuVisibility();
				break;
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Remove :
					removeCommChannel();
					setRemoveCommunicationMenuVisibility();
				break;
			}
		}	
	}
	
	private void removeCommChannel()
	{
		int index = form.grdCommChannels().getSelectedRowIndex();

		if (index < 0)
		{
			engine.showMessage("Please select a Contact Type to remove");
			return;
		}
		
		form.grdCommChannels().getRows().remove(index);
	}
	
	
	public void setValue(ims.core.vo.Patient pat)
	{
		form.grdCommChannels().getRows().clear();
		populateScreenFromData(pat);
	}
	
	private void populateScreenFromData(Patient pat)
	{
		if( pat == null )
			return;
		
		if(form.grdCommChannels().colTypeComboBox().size() == 0)
		{
			ChannelType[] instances = ChannelType.getNegativeInstances();
			
			for(ChannelType inst : instances)
			{
				form.grdCommChannels().colTypeComboBox().newRow(inst, inst.getText());
			}
			//form.grdCommChannels().colTypeComboBox().newRow(value, text);
		}
		
		form.getLocalContext().setPatient(pat);

		CommChannelVoCollection voCommChannelColl = pat.getCommChannels();

		grdCommChannelsRow rowCommChannel;

		if (voCommChannelColl != null)
		{
			for (int i = 0; i < voCommChannelColl.size(); i++)
			{
				CommChannelVo voCommChannel = voCommChannelColl.get(i);

				if (voCommChannel.getChannelTypeIsNotNull())
				{
					rowCommChannel = form.grdCommChannels().getRows().newRow();
					rowCommChannel.setcolType(voCommChannel.getChannelType());
					rowCommChannel.setcolContactValue(voCommChannel.getCommValue());
					rowCommChannel.setcolUsage(voCommChannel.getChannelUsage());
					rowCommChannel.setValue(voCommChannel);
				}
			}

		}
		
		prePopulateCommChannels();
	}
	@Override
	public Boolean validateData(java.util.ArrayList<String> errors)
	{
		ArrayList<String> localErrors = new ArrayList<String>();
		grdCommChannelsRowCollection rows = form.grdCommChannels().getRows();
		
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		HashMap<Integer, ChannelType> mapChannelType = new HashMap<Integer, ChannelType>();
		HashMap<Integer, PDSChannelUsage> mapChannelUsage = new HashMap<Integer, PDSChannelUsage>();
		String key;
		
		for(int i = 0; i < rows.size(); i++)
		{
			grdCommChannelsRow row = rows.get(i);
			
			if(row.getcolType() != null && (row.getcolContactValue() == null || row.getcolContactValue().length() == 0))
			{
				if (isPds() || !ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH") || ChannelType.MOBILE.equals(row.getcolType()))
					localErrors.add("Please add a value for contact type '" + row.getcolType().getText() + "' !");
			}

			if(row.getcolType() == null && row.getcolContactValue() != null && row.getcolContactValue().length() > 0)
			{
				localErrors.add("Please add a contact type for value '" + row.getcolContactValue() + "' !");
			}
		
			//WDEV-22164
			if(row.getcolType() != null && row.getcolUsage() != null)
			{
				key = row.getcolType().getId() + ":" + row.getcolUsage().getId();
				
				if(map.containsKey(key))
				{
					map.put(key, map.get(key) + 1);
				}
				else
				{
					map.put(key, 1);
				}
				
				mapChannelType.put(row.getcolType().getId(), row.getcolType());
				mapChannelUsage.put(row.getcolUsage().getId(), row.getcolUsage());
			}
			
		}
		
		CommChannelHelper validator = new CommChannelHelper();

		//validate email addresses
		//if(isPds())
		{
    		for(int i = 0; i < rows.size(); i++)
    		{
    			grdCommChannelsRow row = rows.get(i);
    			
    			if(row.getcolType() != null && ChannelType.EMAIL.equals(row.getcolType()) && row.getcolContactValue() != null && row.getcolContactValue().length() > 0)
    			{
    				if(!validator.isValidEmailAddress(row.getcolContactValue()))
    				{
    					localErrors.add("The email address '" + row.getcolContactValue() + "' is not valid !");
    				}
    			}
    		}
		}
		
		//validate telephone numbers if demographics = UK
		if (isPds() && ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
		{
    		for(int i = 0; i < rows.size(); i++)
    		{
    			grdCommChannelsRow row = rows.get(i);
    
    			//isValidTelephoneNumber
    			if(row.getcolType() != null && 
    					(ChannelType.FAX.equals(row.getcolType()) || 
    							ChannelType.GEN_PHONE.equals(row.getcolType()) ||
    							ChannelType.HOME_PHONE.equals(row.getcolType()) ||
    							ChannelType.MOBILE.equals(row.getcolType()) ||
    							ChannelType.WORK_PHONE.equals(row.getcolType())) 
    					&& row.getcolContactValue() != null && row.getcolContactValue().length() > 0)
    			{
    				if(!validator.isValidTelephoneNumber(row.getcolContactValue()))
    				{
    					localErrors.add("The communication channel '" + row.getcolContactValue() + "' is not STD compliant !");
    				}
    			}
    		}
		}
		
		//WDEV-22164 - allow only one combination of ChannelType and PDSUsage
		for(String k : map.keySet())
		{
			if(map.get(k) > 1)
			{
				//duplicate
				String[] parts = k.split(":");
				
				if(parts != null && parts.length == 2)
				{
					//parts[0] = ChannelType
					//parts[1] = PDSChannelUsage
				
					localErrors.add("Found duplicates of types communication channel '" + mapChannelType.get(Integer.valueOf(parts[0])).getText() + "' and usage '" + mapChannelUsage.get(Integer.valueOf(parts[1])).getText() + "' !");
				}
			}
		}
		
		//WDEV-22806 - only for SVUH - 	IMS pre-populate three phone numbers Home (Mandatory), Mobile (Mandatory), Work (SVUH to confirm) 
		if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			boolean mobileFound = false;
			//boolean homeFound = false;
			//boolean workFound = false;
			
    		for(int i = 0; i < rows.size(); i++)
    		{
    			grdCommChannelsRow row = rows.get(i);
    
    			if(ChannelType.MOBILE.equals(row.getcolType()))
    			{
					mobileFound = true;
					break;
    			}
    			
    			/*
    			if(ChannelType.HOME_PHONE.equals(row.getcolType()))
    				homeFound = true;
    			else if(ChannelType.MOBILE.equals(row.getcolType()))
					mobileFound = true;
    			else if(ChannelType.WORK_PHONE.equals(row.getcolType()))
    				workFound = true;
    			*/
    		}

			if(!mobileFound)
			{
				localErrors.add("The communication channel of type '" + ChannelType.MOBILE.getText() + "' is mandatory !");
			}

			/*
    		if(!homeFound)
			{
				localErrors.add("The communication channel of type '" + ChannelType.HOME_PHONE.getText() + "' is mandatory !");
			}
			if(!workFound)
			{
				localErrors.add("The communication channel of type '" + ChannelType.WORK_PHONE.getText() + "' is mandatory !");
			}
			*/
		}
		
		if(localErrors.size() > 0)
		{
			String[] UIErrors = new String[localErrors.size()];
			localErrors.toArray(UIErrors);
			
			if(UIErrors != null)
			{
				if(errors != null)
				{
					for(String err: UIErrors)
					{
						errors.add(err);
					}
				}
				else
				{
					engine.showErrors(UIErrors);
				}
				
				return false;
			}
		}
		
		return true;
	}
	
	private boolean isPds()
	{
		return !"None".equals(ConfigFlag.DOM.USE_PDS.getValue());
	}
	
	private CommChannelVoCollection listCommChannels()
	{
		CommChannelVoCollection voCommChannelColl = new CommChannelVoCollection();
		grdCommChannelsRow rowComm;

		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			rowComm = form.grdCommChannels().getRows().get(i);
			CommChannelVo voCommChannel = rowComm.getValue();
			boolean existCommChannels = false;
			// WDEV-2496
			if (rowComm.getcolType() != null && (rowComm.getcolContactValue() != null && rowComm.getcolContactValue().trim().length() != 0))
			{
				voCommChannel.setChannelType(rowComm.getcolType());
				//voCommChannel.setCommValue(rowComm.getcolContactValue() != null ? rowComm.getcolContactValue().replaceAll(" ", "") : null); 
				voCommChannel.setCommValue(rowComm.getcolContactValue()); 
				voCommChannel.setChannelUsage(rowComm.getcolUsage());

				for (int k = 0; k < voCommChannelColl.size(); k++)
				{
					if (voCommChannelColl.get(k).getChannelType().equals(rowComm.getcolType()) && voCommChannelColl.get(k).getCommValue().equals(rowComm.getcolContactValue()))
					{
						existCommChannels = true;
						break;
					}
				}

				//WDEV-22806 - we only add comm channels that have values
				//for DEMOGRAPHICS_TYPE = "IRISH" we may have comm channels that don't have values (skip validation for SVUH non mandatory fields)
				if (!existCommChannels && voCommChannel.getCommValueIsNotNull() && voCommChannel.getCommValue().length() > 0)
				{
					voCommChannelColl.add(voCommChannel);
				}
				
				//WDEV-22164 -  for a brand new record we set beffrom date to today and if it has an object identifier we clear befto date
				if(voCommChannel.getObjectidentifierIsNotNull())
				{
					voCommChannel.setBetdate(null);
					voCommChannel.setBetdatecnf(Boolean.FALSE);
				}
				else
				{
					voCommChannel.setBeffdate(new Date());
					voCommChannel.setBeffdatecnf(Boolean.TRUE);
				}
			}
		}
		
		return voCommChannelColl;
	}
	
	private void setRemoveCommunicationMenuVisibility()
	{
		boolean bVisible = form.grdCommChannels().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(bVisible);
	}
	
	@Override
	public void populateDataFromScreen(Patient patient)
	{
		patient.setCommChannels(listCommChannels());
	}

	@Override
	protected void onFormModeChanged()
	{
		form.getContextMenus().Core.getIdentifierGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		setRemoveCommunicationMenuVisibility();
		
		prePopulateCommChannels();
	}

	private void prePopulateCommChannels()
	{
		//WDEV-22806 - only for SVUH - 	IMS pre-populate three phone numbers Home (Mandatory), Mobile (Mandatory), Work (SVUH to confirm) 
		if (form.getMode().equals(FormMode.EDIT) && ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH") && form.grdCommChannels().getRows().size() == 0)
		{
			grdCommChannelsRow rowCommChannel = form.grdCommChannels().getRows().newRow();
			rowCommChannel.setcolType(ChannelType.MOBILE);
			rowCommChannel.setValue(new CommChannelVo());
			rowCommChannel = form.grdCommChannels().getRows().newRow();
			rowCommChannel.setcolType(ChannelType.HOME_PHONE);
			rowCommChannel.setValue(new CommChannelVo());
			rowCommChannel = form.grdCommChannels().getRows().newRow();
			rowCommChannel.setcolType(ChannelType.WORK_PHONE);
			rowCommChannel.setValue(new CommChannelVo());
		}
	}

	@Override
	protected void onGrdCommChannelsSelectionChanged() throws PresentationLogicException
	{
		setRemoveCommunicationMenuVisibility();
	}

	@Override
	public void clearScreen()
	{
		form.grdCommChannels().getRows().clear();
	}

}
