//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.pendingemergencyadmissions;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.pendingemergencyadmissions.GenForm.grdAdmissionsRow;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingEmergencyAdmissionLiteVo;
import ims.core.vo.PendingEmergencyAdmissionLiteVoCollection;
import ims.core.vo.PendingEmergencyAdmissionsDataVo;
import ims.core.vo.PersonName;
import ims.core.vo.enums.PendingEmergencyEventFired;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.BedAvailabilityForTrackingVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.enums.EDPendingDecisionToAdmitEvent;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.PartialDate;
import ims.vo.LookupInstVo;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.GregorianCalendar;

public class Logic extends BaseLogic
{
	/**
	 * WDEV-13136 WDEV-22365 - removed unused comparator
	 * @author George Josan
	 *	Comparator for manual sorting after age
	
	private static class AgeComparator implements Comparator<PendingEmergencyAdmissionLiteVo>
	{
		private int direction;

		public AgeComparator(SortOrder sortOrderAge)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAge))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after age
		 
		public int compare(PendingEmergencyAdmissionLiteVo o1, PendingEmergencyAdmissionLiteVo o2)
		{
			if (o1.getPasEventIsNotNull() && o1.getPasEvent().getPatientIsNotNull() && o1.getPasEvent().getPatient().getAgeIsNotNull()
					&& o2.getPasEventIsNotNull() && o2.getPasEvent().getPatientIsNotNull() && o2.getPasEvent().getPatient().getAgeIsNotNull())
			{
				return o1.getPasEvent().getPatient().getAge().compareTo(o2.getPasEvent().getPatient().getAge()) * direction;
			}
			
			if (o1.getPasEventIsNotNull() && o1.getPasEvent().getPatientIsNotNull() && o1.getPasEvent().getPatient().getAgeIsNotNull()
					&& (!o2.getPasEventIsNotNull() || !o2.getPasEvent().getPatientIsNotNull() || !o2.getPasEvent().getPatient().getAgeIsNotNull()) )
			{
				return direction;
			}
			
			if (o1.getPasEventIsNotNull() && o1.getPasEvent().getPatientIsNotNull() && o1.getPasEvent().getPatient().getAgeIsNotNull()
					&& (!o2.getPasEventIsNotNull() || !o2.getPasEvent().getPatientIsNotNull() || !o2.getPasEvent().getPatient().getAgeIsNotNull()) )
			{
				return -1 * direction;
			}

			return 0;
		}
	} **/
	
	//wdev-21464
	public static class AgeDOBComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public AgeDOBComparator()
		{
			this(SortOrder.ASCENDING);
		}	
		public AgeDOBComparator(SortOrder order)
		{		
			direction = SortOrder.DESCENDING.equals(order) ? -1 : 1;		
		}
		
		public int compare(Object o1, Object o2)
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;
					
			if (o1 instanceof PendingEmergencyAdmissionLiteVo && o2 instanceof PendingEmergencyAdmissionLiteVo)
			{
				PendingEmergencyAdmissionLiteVo ps1 = (PendingEmergencyAdmissionLiteVo)o1;
				pdate1 = ps1.getPasEventIsNotNull()  && ps1.getPasEvent().getPatientIsNotNull() ? ps1.getPasEvent().getPatient().getDob() : null;
				PendingEmergencyAdmissionLiteVo ps2 = (PendingEmergencyAdmissionLiteVo)o2;
				pdate2 = ps2.getPasEventIsNotNull() && ps2.getPasEvent().getPatientIsNotNull()  ? ps2.getPasEvent().getPatient().getDob() : null;
			}
			
			
			
			if (pdate1 != null && pdate2 != null)
				return  pdate1.compareTo(pdate2)*direction;
			if (pdate1 != null)
				return direction;
			if (pdate2 != null)
				return -1*direction;
			
			return 0;
		}
	}

	/**
	 *  WDEV-18011 
	 *	Comparator for manual sorting after alert image
	 */
	private static class AlertComparator implements Comparator<PendingEmergencyAdmissionLiteVo>
	{
		private int direction;

		public AlertComparator(SortOrder sortOrderAlert)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAlert))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after alert image
		 */
		public int compare(PendingEmergencyAdmissionLiteVo o1, PendingEmergencyAdmissionLiteVo o2)
		{
			if (o1.getPasEvent()!= null && o1.getPasEvent().getPatient() != null && o2.getPasEvent() != null && o2.getPasEvent().getPatient() != null)
			{
				Integer val1 = Boolean.TRUE.equals(o1.getActiveAlerts()) ? 1 : 0;
				Integer val2 = Boolean.TRUE.equals(o2.getActiveAlerts()) ? 1 : 0;
				
				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}	
			}

		return 0;
		}
	}
	
	private static class BedAvailabilityStatusComparator implements Comparator<PendingEmergencyAdmissionLiteVo>
	{
		private int direction;

		public BedAvailabilityStatusComparator(SortOrder sortOrderAlert)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAlert))
				direction = 1;
			else
				direction = -1;
		}

		/**
		 * Function used to compare two records after bed availability status image
		 */
		public int compare(PendingEmergencyAdmissionLiteVo o1, PendingEmergencyAdmissionLiteVo o2)
		{
			if (o1.getBedAvailability() != null && o2.getBedAvailability() != null)
			{
				Integer val1, val2;

				if (o1.getBedAvailability().getAvailableDateTime() != null)
				{
					val1 = 1;
				}
				else if (o1.getBedAvailability().getAwaitingDateTime() != null)
				{
					val1 = 2;
				}
				else 
					val1 = 0;

				if (o2.getBedAvailability().getAvailableDateTime() != null)
				{
					val2 = 1;
				}
				else if (o2.getBedAvailability().getAwaitingDateTime() != null)
				{
					val2 = 2;
				}
				else 
					val2 = 0;

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}

				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}				
			}

			return 0;
		}
	}
	private static final long	serialVersionUID	= 1L;
		
	private static final int COL_AGE = 3;
	private static final int COL_ALERT = 5;
	private static final int COL_BED_AVAILABILITY = 11;
	private static final int COL_DATE_DECISION_TO_ADMIT = 12;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}

	//WDEV-18420
	public void open() 
	{
		initialize();
		if (form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilterIsNotNull()) //WDEV-19286 //WDEV-22365
		{	
			refreshSearchCriteria(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter(), Boolean.TRUE.equals(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getWasTimerOn()));
			if (Boolean.TRUE.equals(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getWasTimerOn()))
			{
				toggleTimer(false);				
			}
		}
		else if (form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter() == null || !Boolean.TRUE.equals(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getWasTimerOn()))
		{		
			enableAutoRefreshStart(true);	//wdev-11804
		}
		//WDEV-22365 - end
		updateControlsState();
	}
	
	private void initialize()
	{
		form.getLocalContext().setbTimerOn(false);		
		clearControls();
		loadHospitals();

		PatIdType negativeInstance = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.cmbIDType().setValue(negativeInstance);
		form.grdAdmissions().setColHOSNUMCaption(negativeInstance.getText());//WDEV-20926
		
		if (form.cmbHospital().getValue() == null && engine.getCurrentLocation() != null)
		{
			// Try and load the logged in location as a ward
			LocMostVo voLoc = domain.getLocation((LocationRefVo) engine.getCurrentLocation());
			LocationLiteVo currentHospital = domain.getCurrentHospital(engine.getCurrentLocation()); //WDEV-20707
			if (voLoc != null && voLoc.getTypeIsNotNull() && voLoc.getType().equals(LocationType.WARD))
			{
				//form.cmbHospital().setValue(voLoc.getParentLocation());
				form.cmbHospital().setValue(currentHospital); //WDEV-20707
				form.qmbWard().newRow(voLoc, voLoc.getName());
				form.qmbWard().setValue(voLoc);
			}
		}

		loadAlerts();
		
		setWatchDefaultButtonState();		
	}

	private void setWatchDefaultButtonState()
	{
		if(form.getLocalContext().getbTimerOn() == null)
			return;
		
		if (form.getLocalContext().getbTimerOn())
		{
			enableAutoRefreshStart(true);
		}
		else
		{
			enableAutoRefreshStart(false);
		}
	}
	
	private void refreshSearchCriteria(PendingEmergencyAdmissionsDataVo voFilter, Boolean timerCalled)
	{
			form.txtIDNum().setValue(voFilter.getIDNumber());
			form.cmbIDType().setValue(voFilter.getIDType());
			form.txtSurname().setValue(voFilter.getPatientSurname());
			form.txtForeName().setValue(voFilter.getPatientForename());

			form.cmbHospital().setValue(null);
			for (int i = 0; voFilter.getHospitalIsNotNull() && i < form.cmbHospital().getValues().size(); i++)
			{
				LocationLiteVo voHosp = (LocationLiteVo) form.cmbHospital().getValues().get(i);
				if (voHosp.getID_Location().equals(voFilter.getHospital().getID_Location()))
					form.cmbHospital().setValue((LocationLiteVo) form.cmbHospital().getValues().get(i));
			}
			if (form.cmbHospital().getValue() == null && voFilter.getHospitalIsNotNull())
			{				
				form.cmbHospital().newRow(voFilter.getHospital(), voFilter.getHospital().getName());
				form.cmbHospital().setValue(voFilter.getHospital());
			}
			form.cmbStatus().setValue(voFilter.getAdmissionStatus());
			for (int i = 0; voFilter.getHcpIsNotNull() && i < form.qmbHCP().getValues().size(); i++)
			{
				HcpLiteVo voHCP = (HcpLiteVo) form.qmbHCP().getValues().get(i);
				if (voHCP.getID_Hcp().equals(voFilter.getHcp().getID_Hcp()))
					form.qmbHCP().setValue((HcpLiteVo) form.qmbHCP().getValues().get(i));
			}
			if (form.qmbHCP().getValue() == null && voFilter.getHcpIsNotNull())
			{
				form.qmbHCP().newRow(voFilter.getHcp(), voFilter.getHcp().getIMosName());
				form.qmbHCP().setValue(voFilter.getHcp());
			}

			form.qmbWard().setValue(null);
			for (int i = 0; voFilter.getAllocatedWardIsNotNull() && i < form.qmbWard().getValues().size(); i++)
			{
				LocationLiteVo voWard = (LocationLiteVo) form.qmbWard().getValues().get(i);
				if (voWard.getID_Location().equals(voFilter.getAllocatedWard().getID_Location()))
					form.qmbWard().setValue((LocationLiteVo) form.qmbWard().getValues().get(i));
			}
			if (form.qmbWard().getValue() == null && voFilter.getAllocatedWardIsNotNull())
			{				
				form.qmbWard().newRow(voFilter.getAllocatedWard(), voFilter.getAllocatedWard().getName());
				form.qmbWard().setValue(voFilter.getAllocatedWard());
			}
			form.cmbAlert().setValue(voFilter.getAlert());			
			//enableAutoRefreshStart(true);
	}

	private void loadAlerts()
	{
		form.cmbAlert().clear();

		TreeNode[] coll = LookupHelper.getAlertType(domain.getLookupService()).getRootNodes();
	
		if (coll != null)
		{
			for (int i = 0; i < coll.length; i++)
			{
				AlertType item = (AlertType) coll[i];
				ArrayList<LookupInstVo> coll1 = item.getChildInstances();

				AlertType type = null;
				for (int j = 0; j < coll1.size(); j++)
				{
					type = (AlertType) coll1.get(j);
					if (type.isActive())
						form.cmbAlert().newRow((AlertType) coll1.get(j), coll1.get(j).toString());
				}
			}
		}
	}
	private Image getBedStatusImage(BedAvailabilityForTrackingVo bedAvailability) 
	{
		if(bedAvailability == null)
			return null;
		
		if(bedAvailability.getAvailableDateTime() != null)
			return form.getImages().Emergency.Bed_Available;
		
		if(bedAvailability.getAwaitingDateTime() != null)
			return form.getImages().Emergency.Bed_Awaiting;
			
		return null;
	}
	private String getBedStatusTooltip(PendingEmergencyAdmissionLiteVo pendingEmergencyAdmission) 
	{
		StringBuffer sb = new StringBuffer();
		BedAvailabilityForTrackingVo bedAvailability = pendingEmergencyAdmission.getBedAvailability();
		sb.append("Requested by:<b> ");
		if (pendingEmergencyAdmission.getBedAvailability() != null)
		{
			if (bedAvailability.getRequestedBy() != null)
			{
				if (bedAvailability.getRequestedBy().getName() != null && bedAvailability.getRequestedBy().getName().getSurname() != null)
					sb.append(bedAvailability.getRequestedBy().getName().getSurname()).append(" ");
				
				if (bedAvailability.getRequestedBy().getName() != null && bedAvailability.getRequestedBy().getName().getForename() != null)
					sb.append(bedAvailability.getRequestedBy().getName().getForename());
			}
		}
		sb.append("</b><br>");

		
		sb.append("Decision to Admit Date/Time:<b> ");
		if (pendingEmergencyAdmission != null && pendingEmergencyAdmission.getDTADateTime() != null)
		{
			sb.append(pendingEmergencyAdmission.getDTADateTime());
		}
		sb.append("</b><br>");
		
		
		sb.append("Requested Bed Type:<b> ");
		if (pendingEmergencyAdmission != null && pendingEmergencyAdmission.getBedTypeRequested() != null)
		{
			sb.append(pendingEmergencyAdmission.getBedTypeRequested().getText());
		}
		sb.append("</b><br>");
		
		
		sb.append("Hospital:<b> ");
		if (pendingEmergencyAdmission != null && pendingEmergencyAdmission.getHospital() != null)
		{
			sb.append(pendingEmergencyAdmission.getHospital().getName());
		}
		sb.append("</b><br>");
		
		
		sb.append("Ward:<b> ");
		if (pendingEmergencyAdmission != null && pendingEmergencyAdmission.getAllocatedWard() != null)
		{
			sb.append(pendingEmergencyAdmission.getAllocatedWard().getName());
		}
		sb.append("</b><br><br>");
		
		
		sb.append("Bed Available Date/Time:<b> ");
		if (bedAvailability != null && bedAvailability.getAvailableDateTime() != null)
		{
			sb.append(bedAvailability.getAvailableDateTime());
		}
		sb.append("</b><br>");
		
		
		sb.append("Bed Available Ward:<b> ");
		if (bedAvailability != null && bedAvailability.getWard() != null)
		{
			sb.append(bedAvailability.getWard().getName() + "</b>");
		}
			
		return sb.toString();
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection voColl = domain.listActiveHospitalsLite();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			form.cmbHospital().newRow(voColl.get(i), voColl.get(i).getName());

			if (engine.getCurrentLocation() != null && voColl.get(i).getID_Location().equals(engine.getCurrentLocation().getID()))
				form.cmbHospital().setValue(voColl.get(i));
		}
	}

	@Override
	protected void onQmbWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEventFired(null);
		
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital.");
			return;
		}

		LocationLiteVoCollection wards = domain.listWards(form.cmbHospital().getValue().getID_Location(), value);
		if (wards != null)
		{
			for (LocationLiteVo item : wards)
				form.qmbWard().newRow(item, item.getName());
		}
		if (wards.size() == 1)
		{	
			form.qmbWard().setValue(wards.get(0));
		}	
		else
		{	
			form.qmbWard().showOpened();
		}	
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEventFired(null);
				
		form.cmbStatus().setValue(null);
		clearControls();		

		form.lblTotal().setValue("Total: 0");

		// Clear the selected patient information in the Engine
		form.getGlobalContext().Core.setSelectingPatientForm(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		//engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");

		form.getGlobalContext().STHK.setPendingEmergencyAdmissionsFilter(null);
		
		//refresh
		form.getLocalContext().setbTimerOn(false);
		form.imbAutoRefresh().setEnabled(false);
		form.imbAutoRefresh().setTooltip("This button will be enabled once a valid search of Pending ED Admissions is performed");
//		form.getTimers().gettimerSearch().setEnabled(false);
	}

	private void clearControls()
	{
		form.cmbHospital().setValue(null);
		form.txtForeName().setValue(null);
		form.txtSurname().setValue(null);
		form.txtIDNum().setValue(null);
		form.qmbHCP().clear();
		form.qmbWard().clear();
		form.cmbAlert().setValue(null);
		form.grdAdmissions().getRows().clear();

		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEventFired(null);
		form.grdAdmissions().getRows().clear();
		form.lblTotal().setValue("Total: 0");		
		enableAutoRefreshStart(false);
		if (validateSearchCriteria(true)) //WDEV-19286
		{
			search(true,false);
			enableAutoRefreshStart(true);		
		}
		
		updateControlsState(); //WDEV-18114 
	}

	private void enableAutoRefreshStart(boolean bEnabled)
	{
		form.imbAutoRefresh().setEnabled(bEnabled);

		form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
		form.imbAutoRefresh().setDisabledImage(form.getImages().Core.TimerStartDisabled24);

		if (bEnabled)
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Pending ED Admissions");
		else 
			form.imbAutoRefresh().setTooltip("This button will be enabled once a valid search of Pending ED Admissions is performed");

	}

	private void enableAutoRefreshStop(boolean bEnable)
	{
		form.imbAutoRefresh().setEnabled(bEnable);

		form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
		form.imbAutoRefresh().setDisabledImage(form.getImages().Core.TimerStopEnabled24);

		form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of Pending ED Admissions");

		form.getLocalContext().setbTimerOn(bEnable);

	}
	//WDEV-19286
	private boolean validateSearchCriteria(boolean showErrors)
	{
		PendingEmergencyAdmissionsDataVo voFilter = populateDataFromScreen();
	
		if (voFilter.getIDNumberIsNotNull() && voFilter.getIDType() == null)
		{
			if (showErrors)
				engine.showErrors("Invalid search criteria",new String[]{"Please enter both an Identifier type as well as its value."}); //WDEV-22298 
			return false;
		}
		
		if (voFilter.countFieldsWithValue() == 1 && (voFilter.getIDTypeIsNotNull() || voFilter.getIDNumberIsNotNull()))
		{
			if (showErrors)
				engine.showErrors("Invalid search criteria", new String[] {"Please enter some valid search criteria."}); //WDEV-22298 
			return false;
		}
		
		form.getGlobalContext().STHK.setPendingEmergencyAdmissionsFilter(voFilter);
		return true;
	}

	private void search(Boolean fromSearchBtn, Boolean timerCalled) //WDEV-19286
	{
		PendingEmergencyAdmissionLiteVoCollection voColl = null;

		form.grdAdmissions().getRows().clear();
		form.lblTotal().setValue("Total: 0"); //WDEV-18099 
		
		PendingEmergencyAdmissionsDataVo searchFilter = form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter() == null ? populateDataFromScreen() : form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter(); //WDEV-19286
		voColl = domain.listPendingEmergencyAdmissions(searchFilter);
		
		if (voColl == null || voColl.size() == 0)
		{
			if (fromSearchBtn && !timerCalled)
				engine.showMessage("No matching records found.");
			return;
		}
		if (voColl != null)
			form.lblTotal().setValue("Total: " + String.valueOf(voColl.size()));

		if (voColl != null)
			populateGrid(voColl);
	}
	
	private void populateGrid(PendingEmergencyAdmissionLiteVoCollection emerAdmissions)
	{
		form.grdAdmissions().getRows().clear(); //WDEV-18011 
		for (PendingEmergencyAdmissionLiteVo item : emerAdmissions)
		{
			item.setActiveAlerts(false); //WDEV-18011 
			grdAdmissionsRow row = form.grdAdmissions().getRows().newRow();
			if (item.getPasEventIsNotNull())
			{
				if (item.getPasEvent().getPatientIsNotNull())
				{
					item.getPasEvent().getPatient().calculateAge();

					if (item.getPasEvent().getPatient().getNameIsNotNull()) //WDEV-21248
					{	
						if (item.getPasEvent().getPatient().getName().getSurnameIsNotNull())
						{	
							row.setColSurname(item.getPasEvent().getPatient().getName().getSurname());
							row.setCellColSurnameTooltip(item.getPasEvent().getPatient().getName().getSurname());
						}	
						if (item.getPasEvent().getPatient().getName().getForenameIsNotNull())
						{	
							row.setColForename(item.getPasEvent().getPatient().getName().getForename());
							row.setCellColForenameTooltip(item.getPasEvent().getPatient().getName().getForename());//WDEV-22737
						}	
					}

					//WDEV-20926
					if (	item.getPasEvent().getPatient().getIdentifiersIsNotNull()
							&& item.getPasEvent().getPatient().getIdentifiers().size() > 0 
						)
					{	
						
						//WDEV-22960
						StringBuilder tooltip = new StringBuilder();
						PatientId patNHSId = item.getPasEvent().getPatient().getPatId(PatIdType.NHSN);
						PatientId displayId = item.getPasEvent().getPatient().getDisplayId();
						
						if(displayId == null)
						{
							if(patNHSId != null)
							{
								tooltip.append("NHSN: ").append(patNHSId.getValue());
								row.setColHOSNUM(patNHSId.getValue());
								row.setCellColHOSNUMTooltip(tooltip.toString());	
							}
						}
						else
						{
							String name = ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
							ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(name);
							
							tooltip.append(name).append(": ").append(displayId.getValue().toString()).append("<br />");
								
							if(patNHSId != null && !PatIdType.NHSN.equals(type))
							{
								tooltip.append("NHSN: ").append(patNHSId.getValue());	
							}
							row.setColHOSNUM(displayId.getValue().toString());//WDEV-20926
							row.setCellColHOSNUMTooltip(tooltip.toString());
						}
						//end WDEV-22960
						
					}	
					if (item.getPasEvent().getPatient().getAgeIsNotNull())
					{
						row.setcolAge(item.getPasEvent().getPatient().calculateAgeText());	//wdev-21464
						row.setTooltipForcolAge(item.getPasEvent().getPatient().calculateAgeText());	//wdev-21464
						//row.setcolAge(item.getPasEvent().getPatient().getAge().toString());
					}

					if (item.getPasEvent().getPatient().getSexIsNotNull())
					{
						row.setColPatSex(item.getPasEvent().getPatient().getSex().getText());
						row.setCellColPatSexTooltip(item.getPasEvent().getPatient().getSex().getText());//WDEV-22737
					}

					if (item.getPasEvent().getPatient().getPatientAlertsIsNotNull() && item.getPasEvent().getPatient().getPatientAlerts().size() > 0)
					{
						//wdev-11146				
						for(int i = 0; i < item.getPasEvent().getPatient().getPatientAlerts().size();i++)
						{
							PatientAlertLiteVo patAlertLiteVo = item.getPasEvent().getPatient().getPatientAlerts().get(i);
							if(patAlertLiteVo != null && patAlertLiteVo.getIsCurrentlyActiveAlert().equals(Boolean.TRUE))
							{
								row.setColAlerts(form.getImages().Core.Alert16); //WDEV-18011
								row.setCellColAlertsTooltip("Alert(s) present");
								item.setActiveAlerts(true); //WDEV-18011 
								break;
							}
						}						
					}
				}

				if (item.getPasEvent().getSpecialtyIsNotNull())
				{	
					row.setColSpecialty(item.getPasEvent().getSpecialty().getText());
					row.setCellColSpecialtyTooltip(item.getPasEvent().getSpecialty().getText());
				}	
			}

			if (item.getAllocatedWardIsNotNull())
			{	
				row.setColWard(item.getAllocatedWard().getName());
				row.setCellColWardTooltip(item.getAllocatedWard().getName());
			}	
			if (item.getAdmissionStatusIsNotNull())
			{
				row.setColStatus(item.getAdmissionStatus().getText());
				row.setTooltipForColStatus(item.getAdmissionStatus().getText());
			}
			if (item.getDTADateTimeIsNotNull())
			{
				row.setColDateTime(item.getDTADateTime().toString());
				row.setCellColDateTimeTooltip(item.getDTADateTime().toString()); //WDEV-22737
			}

			// WDEV-8041
			if (item.getBedTypeRequestedIsNotNull())
			{
				row.setColBedType(item.getBedTypeRequested().getText()); //WDEV-20305
				row.setColBedType(item.getBedTypeRequested().getText()); //WDEV-22737
				row.setCellColBedTypeTooltip(item.getBedTypeRequested().getText());//WDEV-22737
			}
			//WDEV-21133
			if (ConfigFlag.UI.BED_MANAGEMENT_DISPLAY_BREACH_COLOURS_FOR_PENDING_ED_PATIENTS.getValue() && item.getDTADateTimeIsNotNull() && item.getDTADateTime().isLessOrEqualThan(new DateTime()) && (EmergencyAdmissionStatus.DTA.equals(item.getAdmissionStatus()) || EmergencyAdmissionStatus.DISCHARGED.equals(item.getAdmissionStatus())))
			{
				int intDiff = minsDiff(new DateTime(), item.getDTADateTime());

				// i. Green - 0-2 hrs
				// ii. Amber - 2-3 hrs
				// iii. Red - >3 hrs
				if (intDiff >= 0 && intDiff <= 119)
					row.setBackColor(Color.LightGreen);
				else if (intDiff >= 120 && intDiff <= 179)
					row.setBackColor(Color.Orange);
				else if (intDiff >= 180)
					row.setBackColor(Color.Red);
			}
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")) //WDEV-20328
			{
				row.setColWardStatus(getWardStatusTextDisplay(item.getWardStatus()));
				row.setCellColWardStatusTooltip(getWardStatusTextDisplay(item.getWardStatus()));//WDEV-22737
			}
			//WDEV-22426
			if (item.getBedAvailabilityIsNotNull())
			{
				row.setColBedAvailability(getBedStatusImage(item.getBedAvailability()));
				row.setCellColBedAvailabilityTooltip(getBedStatusTooltip(item));
			}
			row.setValue(item);
		}
	}
	private String getWardStatusTextDisplay(WardBayStatus wardStatus)
	{		
		if (wardStatus == null || WardBayStatus.OPEN.equals(wardStatus))
			return "<div style =\"color:#008000;padding-top: 5px;\">" + WardBayStatus.OPEN.getText() + "</div>";//WDEV-20770
		else if (WardBayStatus.CLOSED.equals(wardStatus))
			return "<div style =\"color:#FF0000;padding-top: 5px;\">" + WardBayStatus.CLOSED.getText() + "</div>";
		else if  (WardBayStatus.BLOCKED.equals(wardStatus))
			return "<div style =\"color:#FFBF00;padding-top: 5px;\">" + WardBayStatus.BLOCKED.getText() + "</div>";
		
		return null;
	}		
	public static int minsDiff(DateTime startDate, DateTime endDate)
	{
		if (startDate == null)
			throw new IllegalArgumentException("No start date specified");
		if (endDate == null)
			throw new IllegalArgumentException("No end date specified");

		Calendar start = new GregorianCalendar((startDate.getDate()).getYear(), (startDate.getDate()).getMonth(), (startDate.getDate()).getDay(), startDate.getTime().getHour(), startDate.getTime().getMinute(), startDate.getTime().getSecond());
		Calendar end = new GregorianCalendar(endDate.getDate().getYear(), endDate.getDate().getMonth(), endDate.getDate().getDay(), endDate.getTime().getHour(), endDate.getTime().getMinute(), endDate.getTime().getSecond());

		long endInMillis = end.getTimeInMillis() + end.getTimeZone().getOffset(end.getTimeInMillis());
		long startInMillis = start.getTimeInMillis() + start.getTimeZone().getOffset(start.getTimeInMillis());

		return (int) ((((endInMillis < startInMillis ? startInMillis - endInMillis : endInMillis - startInMillis) / 1000) / 60));
	}

	private PendingEmergencyAdmissionsDataVo populateDataFromScreen()
	{
		PendingEmergencyAdmissionsDataVo admission = new PendingEmergencyAdmissionsDataVo();
		admission.setIDNumber(form.txtIDNum().getValue());
		admission.setIDType(form.cmbIDType().getValue());

		//WDEV-13065 -- if (form.txtIDNum().getValue() == null)
		
		admission.setHospital(form.cmbHospital().getValue());
		admission.setAlert(form.cmbAlert().getValue());
		admission.setAllocatedWard(form.qmbWard().getValue());
		admission.setAdmissionStatus(form.cmbStatus().getValue());
		if (EmergencyAdmissionStatus.ADMITTED.equals(admission.getAdmissionStatus()))
			admission.setHcp(form.qmbHCP().getValue());
		admission.setPatientForename(form.txtForeName().getValue());
		admission.setPatientSurname(form.txtSurname().getValue());		
		admission.setWasTimerOn(form.getLocalContext().getbTimerOn());
		
		return admission;
	}

	@Override
	protected void onQmbHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEventFired(null);
		
		if (value != null)
		{
			HcpFilter voHCPFilter = new HcpFilter();
			PersonName name = new PersonName();
			name.setSurname(value);
			voHCPFilter.setQueryName(name);
			voHCPFilter.setHcpType(HcpDisType.MEDICAL);

			HcpLiteVoCollection voColl = domain.listHCPs(voHCPFilter);

			voColl.sort();
			form.qmbHCP().clear();
			for (int i = 0; i < voColl.size(); i++)
			{
				form.qmbHCP().newRow(voColl.get(i), voColl.get(i).getIHcpName());
			}
			if (voColl.size() == 1)
				form.qmbHCP().setValue(voColl.get(0));
			else 
				form.qmbHCP().showOpened();
		}
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setEventFired(null);
		form.qmbWard().clear();
	}

	@Override
	/**
	 * WDEV-13136
	 * Event handler for GridRowSelectionChanged event
	 */
	protected void onGrdAdmissionsSelectionChanged() throws PresentationLogicException
	{
		updateGlobalContextOnSelection(form.grdAdmissions().getValue());

		updateControlsState();

		form.getLocalContext().setEventFired(null);
	}

	/**
	 * WDEV-13136
	 * Function used to update the global contexts PatientToBeDisplayed and PatientShort
	 */
	private void updateGlobalContextOnSelection(PendingEmergencyAdmissionLiteVo selectedValue)
	{
		form.getGlobalContext().Core.setSelectingPatientForm(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);

		if (selectedValue == null)
			return;

		if (selectedValue.getPasEventIsNotNull())
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCurrentCareContext(selectedValue));
			
			if (form.getGlobalContext().Core.getCurrentCareContext() == null && selectedValue.getPasEvent().getPatientIsNotNull())
			{
				PatientShort ps = domain.getPatientShort(selectedValue.getPasEvent().getPatient());

				form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
				form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
				form.getGlobalContext().Core.setPatientShort(ps);
			}
			else if (form.getGlobalContext().Core.getCurrentCareContext() != null)
			{
				form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
				form.getGlobalContext().Core.setPatientToBeDisplayed(form.getGlobalContext().Core.getPatientShort());
			}
		}
		
	}

	private void updateMenuOptions()
	{
		form.getContextMenus().Core.hideAllPendingEmergencyMenuItems();
		boolean isCancelled = form.grdAdmissions().getValue() != null && form.grdAdmissions().getValue().getAdmissionStatusIsNotNull() && form.grdAdmissions().getValue().getAdmissionStatus().equals(EmergencyAdmissionStatus.CANCELLED); //wdev-17355
		form.getContextMenus().Core.getPendingEmergencyASSIGNItem().setVisible(form.grdAdmissions().getValue() != null && !isCancelled);	//wdev-17355
		form.getContextMenus().Core.getPendingEmergencyBED_READYItem().setVisible(form.grdAdmissions().getValue() != null && !isCancelled && form.grdAdmissions().getValue().getBedTypeRequestedIsNotNull());
		
		if(engine.hasRight(AppRight.ALLOW_ADT_PENDINGEMERGENCY_REMOVAL))
			form.getContextMenus().Core.getPendingEmergencyREMOVEPATIENTFROMPENDINGEMERGENCYItem().setVisible(form.grdAdmissions().getValue() != null);
	}

	public void refresh(Boolean timerCalled)
	{
		if (form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilterIsNotNull())
			refreshSearchCriteria(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter(),timerCalled);

		if (validateSearchCriteria(false))
			search(false,timerCalled);
		updateControlsState();
	}

	@Override
	/**
	 * WDEV-13136
	 * Event handler for GridColumnHeaderClick event
	 * Will sort records by values on column which header was clicked, then update the context menu options state
	 */
	protected void onGrdAdmissionsGridHeaderClicked(int column) throws PresentationLogicException
	{
		// Sort records by column
		sortAdmissions(column);
		// Update context menu options
		updateControlsState();
	}

	/**
	 * WDEV-13136
	 * Function used to sort admissions by column
	 */
	private void sortAdmissions(int column)
	{
		// Get records from grid
		PendingEmergencyAdmissionLiteVoCollection records = form.grdAdmissions().getValues();
		
		//no need to sort 1 record
		if (records.size() < 2)
			return;
		
		// Toggle sort mode for column
		sortOrderToggle(column);
		
		// Determine the column - sort records after it
		if (column == COL_AGE)
		{
			//records.sort(new AgeComparator(form.getLocalContext().getSortOrderAge()));
			records.sort(new AgeDOBComparator(form.getLocalContext().getSortOrderAge()));	//wdev-21464
			
		}
		else if (column == COL_DATE_DECISION_TO_ADMIT)
		{
			records.sort(PendingEmergencyAdmissionLiteVo.getDateTimeComparator(form.getLocalContext().getSortOrder()));
		}
		
		//WDEV-18011 
		else if (column == COL_ALERT)
		{
			records.sort(new AlertComparator(form.getLocalContext().getSortOrderAlert()));
		}
		
		//WDEV-22426 
		else if (column == COL_BED_AVAILABILITY)
		{
			records.sort(new BedAvailabilityStatusComparator(form.getLocalContext().getSortOrderBedAvailability()));
		}

		// Get selection
		PendingEmergencyAdmissionLiteVo selectedValue = form.grdAdmissions().getValue();
		// Re-populate grid
		populateGrid(records);
		// Update selection
		form.grdAdmissions().setValue(selectedValue);
		// Call code for new selection
		updateGlobalContextOnSelection(form.grdAdmissions().getValue());
	}

	/**
	 *	WDEV-13136 
	 * 	Function used to toggle sort order for column
	 * 	Will reset the rest of the columns manual sort order
	 */
	private void sortOrderToggle(int column)
	{
		if (column == COL_AGE)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()))
				form.getLocalContext().setSortOrderAge(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderAge(null);
		}
		
		if (column == COL_DATE_DECISION_TO_ADMIT)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrder()))
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrder(null);
		}
		
		// WDEV-18011 
		if (column == COL_ALERT)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAlert()))
				form.getLocalContext().setSortOrderAlert(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAlert(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderAlert(null);
		}
		
		//WDEV-22426 
		if (column == COL_BED_AVAILABILITY)
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderBedAvailability()))
				form.getLocalContext().setSortOrderBedAvailability(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderBedAvailability(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderBedAvailability(null);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.PendingEmergency.ASSIGN :
				form.getGlobalContext().Core.setADTPendingEmergencyAdmission(form.grdAdmissions().getValue());
				//engine.open(form.getForms().Core.AssignADTWardAndSpecialtyDialog);
				//WDEV-20388
				TrackingForClinicianWorklistAndTriageVo tempVo = domain.getTrackingByPendingEmergencyAdmission(form.grdAdmissions().getValue());
				form.getGlobalContext().Emergency.setTracking(tempVo);
				engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog,  new Object[] {form.getGlobalContext().Emergency.getTracking()});
			break;
			case GenForm.ContextMenus.CoreNamespace.PendingEmergency.REMOVEPATIENTFROMPENDINGEMERGENCY :
				try
				{
					domain.removeFromPendingEmergency(form.grdAdmissions().getValue());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
				
				refresh(true);
			break;
			case GenForm.ContextMenus.CoreNamespace.PendingEmergency.BED_READY :
				TrackingForClinicianWorklistAndTriageVo tempTrackingVo = domain.getTrackingByPendingEmergencyAdmission(form.grdAdmissions().getValue());
				form.getGlobalContext().Emergency.setTracking(tempTrackingVo);
				engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog,  new Object[] {form.getGlobalContext().Emergency.getTracking(), EDPendingDecisionToAdmitEvent.BED_READY});
			default :
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.AssignADTWardAndSpecialtyDialog) && result.equals(DialogResult.OK))
		{
			form.getGlobalContext().Emergency.setTracking(null);
			form.getGlobalContext().Core.setADTPendingEmergencyAdmission(null);
			if (validateSearchCriteria(true))	
				search(true,false);
		}	
		else if (formName.equals(form.getForms().Emergency.EDDecisionToAdmitDialog) && result.equals(DialogResult.OK))
		{
			form.getGlobalContext().Emergency.setTracking(null);
			form.getGlobalContext().Core.setADTPendingEmergencyAdmission(null);
			if (validateSearchCriteria(true))	
			{	
				search(true,false);
				updateGlobalContextOnSelection(form.grdAdmissions().getValue());
			}	
		}	
		
		updateControlsState();
	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{		
		toggleTimer(form.getLocalContext().getbTimerOn() != null ? form.getLocalContext().getbTimerOn().booleanValue() : false);
	}
	//WDEV-22365
	private void toggleTimer(boolean wasTimerOn)
	{		
		boolean refreshButtonToggle = !(!Boolean.TRUE.equals(form.getLocalContext().getbTimerOn()) && form.getLocalContext().getEventFiredIsNotNull()) && !PendingEmergencyEventFired.STOP_TIMER.equals(form.getLocalContext().getEventFired());
		if (wasTimerOn)
		{
			form.getLocalContext().setEventFired(PendingEmergencyEventFired.STOP_TIMER);
			form.getLocalContext().setbTimerOn(false);		
			enableAutoRefreshStart(refreshButtonToggle);
			if (form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter() != null)
				form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().setWasTimerOn(!wasTimerOn);
			enableSearchCriteria(true);
		}
		else
		{
			if (!validateSearchCriteria(true))
			{	
				enableAutoRefreshStart(refreshButtonToggle);
				form.grdAdmissions().getRows().clear();
				form.lblTotal().setValue("Total: 0");				
				return;
			}	
			form.getLocalContext().setEventFired(PendingEmergencyEventFired.START_TIMER);
			form.getLocalContext().setbTimerOn(true);			
			if (form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter() != null)
				form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().setWasTimerOn(!wasTimerOn);
			enableAutoRefreshStop(true);
			enableSearchCriteria(false);
		}
		form.fireCustomControlValueChanged();
		updateControlsState();
	}

	private void enableSearchCriteria(boolean bEnable)
	{
		form.imbSearch().setEnabled(bEnable);
		form.imbClear().setEnabled(bEnable);
		form.cmbIDType().setEnabled(bEnable);
		form.txtSurname().setEnabled(bEnable);
		form.txtForeName().setEnabled(bEnable);
		form.txtIDNum().setEnabled(bEnable);
		form.qmbHCP().setEnabled(bEnable);
		form.cmbHospital().setEnabled(bEnable);
		form.cmbAlert().setEnabled(bEnable);
		form.qmbWard().setEnabled(bEnable);
		form.cmbStatus().setEnabled(bEnable);
	}

	public PendingEmergencyEventFired getEventFired()
	{
		return form.getLocalContext().getEventFired();
	}

	//wdev-11804
	public void leaveComponent() 
	{
		if (form.getLocalContext().getbTimerOnIsNotNull() && form.getLocalContext().getbTimerOn().booleanValue())
		{
			form.getLocalContext().setEventFired(PendingEmergencyEventFired.STOP_TIMER);
			form.getLocalContext().setbTimerOn(false);			
			enableAutoRefreshStart(false);
			enableSearchCriteria(true);
		}
		
	}
	//WDEV-22298 -- start
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		cmbStatusValueChanged();
	}

	private void cmbStatusValueChanged()
	{
		if (!EmergencyAdmissionStatus.ADMITTED.equals(form.cmbStatus().getValue()))
			form.qmbHCP().clear();
		if (EmergencyAdmissionStatus.ADMITTED.equals(form.cmbStatus().getValue()) && form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilterIsNotNull() && EmergencyAdmissionStatus.ADMITTED.equals(form.cmbStatus().getValue()) && form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getHcpIsNotNull())
		{	
			form.qmbHCP().newRow(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getHcp(),form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getHcp().getIMosName());
			form.qmbHCP().setValue(form.getGlobalContext().STHK.getPendingEmergencyAdmissionsFilter().getHcp());
		}	
		updateControlsState();
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.lblConsultant().setVisible(EmergencyAdmissionStatus.ADMITTED.equals(form.cmbStatus().getValue()));
		form.qmbHCP().setVisible(EmergencyAdmissionStatus.ADMITTED.equals(form.cmbStatus().getValue()));
		updateMenuOptions();		
	}
	//WDEV-22298 -- end
//	@Override
//	protected void onTimer(Timer timer) throws PresentationLogicException
//	{
//		if (timer.equals(form.getTimers().gettimerSearch()))
//			search();
//	}	
}
