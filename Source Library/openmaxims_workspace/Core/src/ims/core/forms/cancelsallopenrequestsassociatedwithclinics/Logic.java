//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.cancelsallopenrequestsassociatedwithclinics;

import ims.core.vo.CancelClinicRequestsBatchVo;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IDynamicFormDataOperations;

public class Logic extends BaseLogic implements IDynamicFormDataOperations
{
	private static final long serialVersionUID = 1L;
	
	public void loadData()
	{
		form.getLocalContext().setSelectedRecord(domain.getConfiguration(form.getGlobalContext().Admin.getCurrentJobConfiguration()));
		populateScreenFromData(form.getLocalContext().getSelectedRecord());
	}

	private void populateScreenFromData(CancelClinicRequestsBatchVo settingsVo)
	{
		clearControls();
		
		if (settingsVo == null)
			return;
		
		form.intTotal().setValue(settingsVo.getProcessedRequestsNo());
		form.intSuccessfullyProcessed().setValue(settingsVo.getSuccessfulRequestsUpdatedNo());	
		form.intFailedProcessing().setValue(settingsVo.getProcessedRequestsNo() != null ? settingsVo.getProcessedRequestsNo() - (settingsVo.getSuccessfulRequestsUpdatedNo() != null ?  settingsVo.getSuccessfulRequestsUpdatedNo() : 0) :  null);
	}

	private void clearControls()
	{
		form.intTotal().setValue(null);
		form.intSuccessfullyProcessed().setValue(null);
		form.intFailedProcessing().setValue(null);
	}

	public String[] validateData()
	{
		return getData().validate();
	}
	
	public CancelClinicRequestsBatchVo getData()
	{
		CancelClinicRequestsBatchVo settingsVo = populateDataFromScreen(form.getLocalContext().getSelectedRecord());
		settingsVo.setConfiguredJobDetails(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		
		return settingsVo;
	}

	private CancelClinicRequestsBatchVo populateDataFromScreen(CancelClinicRequestsBatchVo selectedRecord)
	{
		if (selectedRecord == null)
			selectedRecord = new CancelClinicRequestsBatchVo();
		
		selectedRecord.setFailedRecordsNo(form.intFailedProcessing().getValue());
		selectedRecord.setProcessedRequestsNo(form.intTotal().getValue());
		selectedRecord.setSuccessfulRequestsUpdatedNo(form.intSuccessfullyProcessed().getValue());
		
		return selectedRecord;
	}

	public void saveData() throws Exception
	{
		CancelClinicRequestsBatchVo record  = getData();
		
		String[] errors = record.validate();
		
		if(errors != null && errors.length > 0)
			throw new Exception("Validation Errors");
		
		domain.saveConfiguration(record);		
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		loadData();
	}
}
