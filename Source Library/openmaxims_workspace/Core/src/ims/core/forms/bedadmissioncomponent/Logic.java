//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.bedadmissioncomponent;

import ims.RefMan.vo.BookAppointmentForWardAttendersVo;
import ims.RefMan.vo.BookAppointmentForWardAttendersVoCollection;
import ims.RefMan.vo.CATSReferralStatusRefVoCollection;
import ims.RefMan.vo.CATSReferralWithContextPasVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.ElectiveListStatusRefVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVo;
import ims.RefMan.vo.PatientElectiveListBedInfoVo;
import ims.RefMan.vo.PatientElectiveListBedInfoVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListRefVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.ccosched.vo.TCIForPatientElectiveListBedInfoDetailsVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.domain.objects.WardBayConfig;
import ims.core.admin.pas.vo.AdmissionDetailRefVoCollection;
import ims.core.admin.pas.vo.WardBayConfigRefVo;
import ims.core.forms.bedadmissioncomponent.GenForm.CaseFolderYesNoEnumeration;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabBookedContainer.grdElectiveRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabEDEmergencyContainer.grdEmergencyRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabHomeLeaveContainer.grdHomeLeaveRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabInWaitingContainer.grdInWaitingRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabPETContainer.GroupPETWardEnumeration;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabPETContainer.grdPETRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabPendingEmergencyContainer.GroupPendingEmergenciesEnumeration;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabPendingEmergencyContainer.grdPendingEmergencyAdmissionRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabPlannedContainer.grdTCIRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabTCIContainer.GroupTCIEnumeration;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabTCIContainer.grdTCI_ElectiveRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabWaitingContainer.grdPatientsRow;
import ims.core.forms.bedadmissioncomponent.GenForm.lyrAdmissionLayer.tabWardAttendersContainer.grdWardAttendersRow;
import ims.core.layout.domain.objects.BayConfig;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.AdmissionDetailVoCollection;
import ims.core.vo.AdmissionReasonVo;
import ims.core.vo.BayConfigLiteVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.CareContextAdmitVo;
import ims.core.vo.CareContextAdmitVoCollection;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.CareContextStatusHistoryVoCollection;
import ims.core.vo.CareSpellAdmitVo;
import ims.core.vo.CareSpellStatusHistoryVo;
import ims.core.vo.CareSpellStatusHistoryVoCollection;
import ims.core.vo.CatsReferralEmergencyAdmissionVo;
import ims.core.vo.CatsReferralPendingAdmissionAdmitVo;
import ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo;
import ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoCollection;
import ims.core.vo.ConsultantStayVo;
import ims.core.vo.EpisodeOfCareAdmitVo;
import ims.core.vo.EpisodeOfCareAdmitVoCollection;
import ims.core.vo.EpisodeOfCareStatusHistoryVo;
import ims.core.vo.EpisodeOfCareStatusHistoryVoCollection;
import ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo;
import ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVoCollection;
import ims.core.vo.GpToPracticesVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HealthyLodgerVo;
import ims.core.vo.HomeLeaveVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MedicVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventAdmitVo;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteTransferVo;
import ims.core.vo.PatientCaseNoteTransferVoCollection;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.PatientCaseNoteVoCollection;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientLite_IdentifiersVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientWithGPForCCGVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVoCollection;
import ims.core.vo.PendingEmergencyAdmissionAdmitVo;
import ims.core.vo.ReferralDetailsEmergencyAdmissionVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.TrackingForPendingEmergencyAdmitVo;
import ims.core.vo.TrackingForPendingEmergencyAdmitVoCollection;
import ims.core.vo.WardMixedSexBreachVo;
import ims.core.vo.WardStayVo;
import ims.core.vo.enums.AdmissionType;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpelltoEpisodeRelationship;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.ContactLocation;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.EpisodeOfCareStatus;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.MethodOfAdmission;
import ims.core.vo.lookups.PASSpecialty;
import ims.core.vo.lookups.PASSpecialtyCollection;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatientStatus;
import ims.core.vo.lookups.PendingEmergencyAdmissionType;
import ims.core.vo.lookups.ProblemGroupStatus;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.SourceOfAdmission;
import ims.core.vo.lookups.SourceOfEmergencyReferral;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.SourceOfReferralCollection;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DTODomainInterfaceException;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.GridBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo;
import ims.scheduling.vo.PendingEmergencyTheatreForAdmitVoCollection;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IPendingAdmission;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.List;


public class Logic extends BaseLogic
{
	//WDEV-21119  comparator classes - might be moved to standalone file in the future
	public static class BedAdmissionDOBComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public BedAdmissionDOBComparator()
		{
			this(SortOrder.ASCENDING);
		}	
		public BedAdmissionDOBComparator(SortOrder order)
		{		
			direction = SortOrder.DESCENDING.equals(order) ? -1 : 1;		
		}
		
		public int compare(Object o1, Object o2)
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;
					
			if (o1 instanceof PendingElectiveAdmissionAdmitVo && o2 instanceof PendingElectiveAdmissionAdmitVo)
			{
				PendingElectiveAdmissionAdmitVo ps1 = (PendingElectiveAdmissionAdmitVo)o1;
				pdate1 = ps1.getPasEvent() != null && ps1.getPasEvent().getPatientIsNotNull() ? ps1.getPasEvent().getPatient().getDob() : null;
				PendingElectiveAdmissionAdmitVo ps2 = (PendingElectiveAdmissionAdmitVo)o2;
				pdate2 = ps2.getPasEvent() != null && ps2.getPasEvent().getPatientIsNotNull()  ? ps2.getPasEvent().getPatient().getDob() : null;
			}
			
			if(o1 instanceof IPendingAdmission && o2 instanceof IPendingAdmission)
			{
				IPendingAdmission ps1 = (IPendingAdmission)o1;
				pdate1 = ps1.getPatientDoB();
				IPendingAdmission ps2 = (IPendingAdmission)o2;
				pdate2 = ps2.getPatientDoB();
			}
			if(o1 instanceof InpatientEpisodeLiteVo && o2 instanceof InpatientEpisodeLiteVo)
			{
				InpatientEpisodeLiteVo ps1 = (InpatientEpisodeLiteVo)o1;
				pdate1 = ps1.getPasEvent() != null && ps1.getPasEvent().getPatientIsNotNull() ? ps1.getPasEvent().getPatient().getDob() : null;
				InpatientEpisodeLiteVo ps2 = (InpatientEpisodeLiteVo)o2;
				pdate2 = ps2.getPasEvent() != null && ps2.getPasEvent().getPatientIsNotNull()  ? ps2.getPasEvent().getPatient().getDob() : null;
			}
			
			if(o1 instanceof PendingEmergencyTheatreForAdmitVo && o2 instanceof PendingEmergencyTheatreForAdmitVo)
			{
				PendingEmergencyTheatreForAdmitVo ps1 = (PendingEmergencyTheatreForAdmitVo)o1;
				pdate1 = ps1.getPatient() != null ? ps1.getPatient().getDob() : null;
				PendingEmergencyTheatreForAdmitVo ps2 = (PendingEmergencyTheatreForAdmitVo)o2;
				pdate2 = ps2.getPatient() != null ? ps2.getPatient().getDob() : null;
			}
			
			if (pdate1 != null && pdate2 != null)
				return  pdate1.compareTo(pdate2)*direction;
			if (pdate1 != null)
				return direction;
			if (pdate2 != null)
				return -1*direction;
			
			return 0;
		}
	}
	public static class BedAdmissionAgeComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public BedAdmissionAgeComparator()
		{
			this(SortOrder.ASCENDING);
		}	
		public BedAdmissionAgeComparator(SortOrder order)
		{
			direction = SortOrder.DESCENDING.equals(order) ? -1 : 1;	
		}		
		public int compare(Object o1, Object o2)
		{
			Integer age1 = null;
			Integer age2 = null;
					
			if (o1 instanceof PendingElectiveAdmissionAdmitVo && o2 instanceof PendingElectiveAdmissionAdmitVo)
			{
				PendingElectiveAdmissionAdmitVo ps1 = (PendingElectiveAdmissionAdmitVo)o1;
				age1 = ps1.getPasEvent() != null && ps1.getPasEvent().getPatientIsNotNull() ? ps1.getPasEvent().getPatient().calculateAge() : null;
				PendingElectiveAdmissionAdmitVo ps2 = (PendingElectiveAdmissionAdmitVo)o2;
				age2 = ps2.getPasEvent() != null && ps2.getPasEvent().getPatientIsNotNull()  ? ps2.getPasEvent().getPatient().calculateAge() : null;
			}
			if(o1 instanceof IPendingAdmission && o2 instanceof IPendingAdmission)
			{
				IPendingAdmission ps1 = (IPendingAdmission)o1;
				age1 = ps1.getPatientAge();
				IPendingAdmission ps2 = (IPendingAdmission)o2;
				age2 = ps2.getPatientAge();
			}
			if(o1 instanceof InpatientEpisodeLiteVo && o2 instanceof InpatientEpisodeLiteVo)
			{
				InpatientEpisodeLiteVo ps1 = (InpatientEpisodeLiteVo)o1;
				age1 = ps1.getPasEvent() != null && ps1.getPasEvent().getPatientIsNotNull() ? ps1.getPasEvent().getPatient().calculateAge() : null;
				InpatientEpisodeLiteVo ps2 = (InpatientEpisodeLiteVo)o2;
				age2 = ps2.getPasEvent() != null && ps2.getPasEvent().getPatientIsNotNull()  ? ps2.getPasEvent().getPatient().calculateAge() : null;
			}
			
			if(o1 instanceof PendingEmergencyTheatreForAdmitVo && o2 instanceof PendingEmergencyTheatreForAdmitVo)
			{
				PendingEmergencyTheatreForAdmitVo ps1 = (PendingEmergencyTheatreForAdmitVo)o1;
				age1 = ps1.getPatient() != null ? ps1.getPatient().calculateAge() : null;
				PendingEmergencyTheatreForAdmitVo ps2 = (PendingEmergencyTheatreForAdmitVo)o2;
				age2 = ps2.getPatient() != null ? ps2.getPatient().calculateAge() : null;
			}
			
			if (age1 != null && age2 != null)
			{	
				return age1.compareTo(age2) == 0 ? new BedAdmissionDOBComparator().compare(o1, o2)* (-1) * direction : age1.compareTo(age2)*direction;
			}	
			if (age1 != null)
				return direction;
			if (age2 != null)
				return (-1)*direction;			
			return 0;
		}
	}
	public static class BedAdmissionTCIDateTimeComparator implements Comparator<PatientElectiveListBedInfoVo>
	{
		private int direction;

		public BedAdmissionTCIDateTimeComparator()
		{
			this(SortOrder.ASCENDING);	
		}
		public BedAdmissionTCIDateTimeComparator(SortOrder sortOrderDate)
		{
			direction = SortOrder.DESCENDING.equals(sortOrderDate) ? -1 : 1;		
		}
		/**
		 * Function used to compare two records after TCI Date and TCI Time where this is on record
		 */
		public int compare(PatientElectiveListBedInfoVo o1, PatientElectiveListBedInfoVo o2)
		{
			if (o1.getTCIDetails().getTCIDate() != null && o2.getTCIDetails().getTCIDate() != null)
			{
				if (o1.getTCIDetails().getTCITimeIsNotNull() && o2.getTCIDetails().getTCITimeIsNotNull())
				{	
				return new DateTime(o1.getTCIDetails().getTCIDate(),o1.getTCIDetails().getTCITime()).compareTo(new DateTime(o2.getTCIDetails().getTCIDate(),o2.getTCIDetails().getTCITime())) * direction;
				}
				if (o1.getTCIDetails().getTCITimeIsNotNull() && o2.getTCIDetails().getTCITime() == null)
				{	
				return new DateTime(o1.getTCIDetails().getTCIDate(),o1.getTCIDetails().getTCITime()).compareTo(new DateTime(o2.getTCIDetails().getTCIDate(),new Time(0,0))) * direction;
				}
				if (o2.getTCIDetails().getTCITimeIsNotNull() && o1.getTCIDetails().getTCITime() == null)
				{	
				return new DateTime(o1.getTCIDetails().getTCIDate(),new Time(0,0)).compareTo(new DateTime(o2.getTCIDetails().getTCIDate(),o2.getTCIDetails().getTCITime())) * direction;
				}
			}
			
			if (o1.getTCIDetails().getTCIDate()  != null && o2.getTCIDetails().getTCIDate() == null)
			{
				return direction;
			}
			
			if (o2.getTCIDetails().getTCIDate() != null && o1.getTCIDetails().getTCIDate() == null)
			{
				return -1 * direction;
			}

			return 0;
		}
	}
	public static class BedAdmissionTCICommentsComparator implements Comparator<PatientElectiveListBedInfoVo>
	{
		private int direction;

		public BedAdmissionTCICommentsComparator ()
		{
			this(SortOrder.ASCENDING);
		}
		public BedAdmissionTCICommentsComparator(SortOrder sortOrderComments)
		{
			direction = SortOrder.DESCENDING.equals(sortOrderComments) ? -1 : 1;	
		}

		public int compare(PatientElectiveListBedInfoVo c1, PatientElectiveListBedInfoVo c2)
		{
			Integer val1 = hasAnyComments(c1) ? 1 : 0;
			Integer val2 = hasAnyComments(c2)  ? 1 : 0;

			if (val1 != 0 && val2 != 0)
			{
				return val1.compareTo(val2) * direction;
			}

			if (val1 != 0 && val2 == 0)
			{
				return direction;
			}

			if (val2 != 0 && val1 == 0)
			{
				return -1 * direction;
			}	

			return 0;
		}
	}
	//WDEV-21119 end of comparator class definition
	
	private static final int TAB_BOOKED = 1;
	private static final int TAB_AE = 2;
	private static final int TAB_PLANNED = 3;
	private static final int TAB_WAITING_AREA_ADMISSION = 4;
	private static final int TAB_AWAITING_BED_WAITING_AREA = 5;
	private static final int TAB_RETURN_FROM_LEAVE = 6;
	private static final int TAB_TCI = 7;
	private static final int TAB_WARD_ATTENDERS = 8;
	private static final int TAB_PENDING_EMERGENCY_ADMISSION = 9;
	private static final int TAB_PENDING_EMERGENCY_THEATRE = 10;

	private static final int RULE_28_DAYS_PERIOD = 28;
	
	private static final int COL_AGE = 4;
	private static final int COL_DOB = 5;
	private static final int COL_TCI_DATE_LOS = 6;
	private static final int COL_TCI_COMMENT = 7;

	private static final String RESIDENCE_NOT_KNOWN_CCG = "Q99";
	private static final String OVERSEAS_VISITOR_CCG = "X98";
	
	
	private static final String CREATE_CARE_CONTEXT_ONLY = "CareContext Only";
	private static final String CREATE_CARE_CONTEXT_AND_REFERRAL = "CareContext and Referral";
	
	
	
	//-------------------------------------------------------------------------------------------------------------------------------
	// Component interface function
	//-------------------------------------------------------------------------------------------------------------------------------
	public void initialise()
	{			
		clearScreen();
		initialiseGridColumns();
		Boolean hasWaitingArea = form.getGlobalContext().Core.getHasWaitingArea();
		if(hasWaitingArea == null)
			throw new CodingRuntimeException("HasWaiting Area Global Context is null");
			
		form.getLocalContext().setIsInWaitingTabVisible(false);
		form.getLocalContext().setIsReturnFromLeaveVisible(false);	//wdev-13509
		form.getLocalContext().setIsEmergencyAdmissionTab(false);	//WDEV-12587
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);		
		updateControlsState();
		
		if(hasWaitingArea && form.getGlobalContext().Core.getSelectedBedSpaceState() == null)
		{
			form.lyrAdmission().tabBooked().setVisible(false);
			form.lyrAdmission().tabBooked().setHeaderVisible(false);
			form.lyrAdmission().tabPlanned().setVisible(false);
			form.lyrAdmission().tabPlanned().setHeaderVisible(false);
			form.lyrAdmission().tabEDEmergency().setVisible(false);
			form.lyrAdmission().tabEDEmergency().setHeaderVisible(false);	
			form.lyrAdmission().tabInWaiting().setVisible(false);	
			form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
			form.lyrAdmission().tabWaiting().setHeaderVisible(true);
			form.lyrAdmission().tabWaiting().setVisible(true);
			
			form.lyrAdmission().tabTCI().setHeaderVisible(false);
			form.lyrAdmission().tabTCI().setVisible(false);
		}
		else if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && (form.getLocalContext().getTabSelected() == null || form.getLocalContext().getTabSelected().equals(TAB_TCI) || form.getLocalContext().getTabSelected().equals(TAB_PENDING_EMERGENCY_ADMISSION) || form.getLocalContext().getTabSelected().equals(TAB_PENDING_EMERGENCY_THEATRE)))
		{
			form.lyrAdmission().tabBooked().setVisible(false);
			form.lyrAdmission().tabBooked().setHeaderVisible(false);
			form.lyrAdmission().tabPlanned().setVisible(false);
			form.lyrAdmission().tabPlanned().setHeaderVisible(false);
//			form.lyrAdmission().tabEmergency().setVisible(false);
//			form.lyrAdmission().tabEmergency().setHeaderVisible(false);	
//			form.lyrAdmission().tabInWaiting().setVisible(false);	
//			form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
//			form.lyrAdmission().tabWaiting().setHeaderVisible(true);
//			form.lyrAdmission().tabWaiting().setVisible(true);
			form.lyrAdmission().tabTCI().setHeaderVisible(true);
			form.lyrAdmission().tabTCI().setVisible(true);
			
			showExtraUIControls_ElectiveList();
			
			form.lyrAdmission().tabTCI().dteTCI_From().setValue(new Date());
			form.lyrAdmission().tabTCI().dteTCI_To().setValue(new Date());
			form.lyrAdmission().tabTCI().chkTCI_Today().setValue(true);
			//Wdev-19361 
			form.lyrAdmission().tabTCI().GroupTCI().setValue(GroupTCIEnumeration.rdoCurrentWard);					
			//----------
			
			form.lyrAdmission().tabPendingEmergency().dtePEAFrom().setValue(new Date());
			form.lyrAdmission().tabPendingEmergency().dtePEATo().setValue(new Date());
			form.lyrAdmission().tabPendingEmergency().chkPEATodayOnly().setValue(true);
			//Wdev-19361 
			form.lyrAdmission().tabPendingEmergency().GroupPendingEmergencies().setValue(GroupPendingEmergenciesEnumeration.rdoPendingAdmissionCurrentWard);		
			
			form.lyrAdmission().tabPET().dtePETFrom().setValue(new Date());
			form.lyrAdmission().tabPET().dtePETTo().setValue(new Date());
			form.lyrAdmission().tabPET().chkPETTodayOnly().setValue(true);
			//Wdev-19361 
			form.lyrAdmission().tabPET().GroupPETWard().setValue(GroupPETWardEnumeration.rdoPETCurrentWard);		
			
			if (form.lyrAdmission().tabTCI().isVisible())
				populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), false);
			
			form.lyrAdmission().tabWaiting().setCaption("Emergency Admission");
			form.getLocalContext().setIsEmergencyAdmissionTab(true);

			if (!hasWaitingArea)
			{
				form.lyrAdmission().tabInWaiting().setVisible(false);	
				form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
			}	
		}
		else
		{
			form.lyrAdmission().tabTCI().setHeaderVisible(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()));
			form.lyrAdmission().tabTCI().setVisible(false);

			if(form.lyrAdmission().tabBooked().isVisible())
				populateBookedTabFromData();
			
			form.lyrAdmission().tabWaiting().setCaption("Emergency Admission");
			form.getLocalContext().setIsEmergencyAdmissionTab(true);	//WDEV-12587
			
			if(!hasWaitingArea)
			{
				form.lyrAdmission().tabInWaiting().setVisible(false);	
				form.lyrAdmission().tabInWaiting().setHeaderVisible(false);	
			}	
		}
		
		//set default values for the Ward Attenders tab
		form.lyrAdmission().tabWardAttenders().dteWard().setValue(new Date());
		form.lyrAdmission().tabWardAttenders().dteWard().setEnabled(false);
		form.lyrAdmission().tabWardAttenders().lblCurrentWard().setValue(form.getGlobalContext().Core.getSelectedBedSpaceState() != null && form.getGlobalContext().Core.getSelectedBedSpaceState().getWard() != null ? "Ward: " + form.getGlobalContext().Core.getSelectedBedSpaceState().getWard().getName() : "");
		
//		form.lblService().setVisible(false);
//		form.qmbService().setVisible(false);
//		form.lblReferralSource().setVisible(false);
//		form.cmbSourceOfReferral().setVisible(false);
		
		form.lblPatientStatus().setVisible(false);
		form.cmbPatientStatus().setVisible(false);
		
		//WDEV-12587
		form.lblReferringConsultant().setVisible(false);
		form.ccReferringConsultant().setVisible(false);
		
		form.cmbCCOSpecialty().setVisible(false); 
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			form.lblAntStay().setVisible(false);
			form.intAntStay().setVisible(false);
			form.cmbCCOSpecialty().setVisible(false);
		}
		else if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.dteEstDischarge().setEnabled(false);
			form.cmbCCOSpecialty().setVisible(true);

			form.cmbSpecialty().setVisible(false);
		}
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
		{
			form.getLocalContext().setBayConfig(domain.getBayConfig(form.getGlobalContext().Core.getSelectedBedSpaceState().getBay()));
		}
		
		//WDEV-12957
		form.lblAntStay().setVisible(false);
		form.intAntStay().setVisible(false);
		form.lblCaseComment().setVisible(false);
		form.txtCaseComment().setVisible(false);
//		form.lblUpdateCasefolder().setVisible(false);
	//	form.CaseFolderYesNo().setVisible(false);
		form.lblUpdateCasefolder().setVisible(true);
		form.CaseFolderYesNo().setVisible(true);
		
		//WDEV-13509
		form.lblHLReturnDate().setVisible(false);
		form.dteHLDateReturn().setVisible(false);
		form.lblHLTimeOfReturn().setVisible(false);
		form.timHLTimeOfReturn().setVisible(false);
		
		showExtraUIControls();
		
		//WDEV-13001
		form.lblEpisode().setVisible(false);
		form.cmbEpisode().setVisible(false);
		
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
		{
			form.lblEpisode().setVisible(true);
			form.cmbEpisode().setVisible(true);
		}
		
		//WDEV-16003
		if(form.lyrAdmission().tabWaiting().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			form.lblSourceOfReferral().setVisible(true);
			form.cmbSourceOfReferral().setVisible(true);
		}
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
		{
			showExtraUIControls_ElectiveList();
		}
		
		form.lblMaternity().setVisible(form.lyrAdmission().tabWaiting().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"));
		form.chkIsMaternity().setVisible(form.lyrAdmission().tabWaiting().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"));  //wdeV-20224
		form.dteEstDischarge().setVisible(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"));
		form.dtimEstDischarge().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"));		
		hideTabs();
		
		updateControlsState();
	}
	

	public PatientShort getSelectedPatientReturnFromLeave()
	{
		InpatientEpisodeLiteVo selectedValue = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();
		
		if (selectedValue == null || selectedValue.getPasEvent() == null)
			return null;
		
		return domain.getPatientShort(selectedValue.getPasEvent().getPatient());
	}

	
	//-------------------------------------------------------------------------------------------------------------------------------
	// Form Event handlers
	//-------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-12587
		bindCmbSourceOfReferralLookup();
		form.ccReferringConsultant().initialize(MosType.MEDIC);
		
		enableInstanceControls(false);
		
		//WDEV-10696 - hide A&E Tabs 
		if(!ConfigFlag.UI.DISPLAY_ANE_BEDMANAGEMENT.getValue())
		{
			form.lyrAdmission().tabEDEmergency().setVisible(false);
			form.lyrAdmission().tabEDEmergency().setHeaderVisible(false);
		}
		
		//WDEV-12968 Default Id Type to config type 
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.lyrAdmission().tabWaiting().cmbIdType().setValue(dispIdType);		
		
		form.setMode(FormMode.EDIT);
	}
	
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}


	@Override
	protected void onQmbConsultantValueChanged() throws PresentationLogicException
	{
	}


	@Override
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		MedicVoCollection medics = domain.listMedicsForService(form.qmbService().getValue(), value);
		
		if (medics == null)
			return;
		
		for (MedicVo medic : medics)
		{
    		form.qmbConsultant().newRow(medic, medic.toString());
		}
		
		if (medics.size() == 1)
			form.qmbConsultant().setValue(medics.get(0));
		else
			form.qmbConsultant().showOpened();
	}


	protected void onCmbSourceOfEmergencyReferralValueChanged() throws PresentationLogicException
	{
		boolean fromOtherEmergency = SourceOfEmergencyReferral.OTHER_EMERGENCY_ADMISSION.equals(form.cmbSourceOfEmergencyReferral().getValue());
		
		if (!fromOtherEmergency)
			form.chkSelfAdmitPatient().setValue(null);
		else
		{
			Boolean hasPatientActiveSelfAdmitAlert = domain.hasPatientActiveSelfAdmitAlert(form.getGlobalContext().Core.getPatientShort());
			form.chkSelfAdmitPatient().setValue(Boolean.TRUE.equals(hasPatientActiveSelfAdmitAlert));
		}

		updateControlsState();
	}


	protected void onRadioButtonGroupPendingEmergenciesValueChanged() throws PresentationLogicException
	{
		populatePendingEmergencyTab(form.lyrAdmission().tabPendingEmergency().GroupPendingEmergencies().getValue());
		updateControlsState();
	}
	
	
	@Override
	protected void onlyrAdmissionTabChanged(LayerBridge tab) 
	{
		clearScreen();	
		clearSelection();
		clearElectiveListContexts();
		form.getLocalContext().setPatientShortForTCIEntry(null);//WDEV-22856
		
		if (form.lyrAdmission().tabBooked().isVisible())
		{
			form.getLocalContext().setTabSelected(TAB_BOOKED);
		}
		else if (form.lyrAdmission().tabEDEmergency().isVisible())
		{
			form.getLocalContext().setTabSelected(TAB_AE);
		}
		else if (form.lyrAdmission().tabPlanned().isVisible())
		{	
			form.getLocalContext().setTabSelected(TAB_PLANNED);
			form.lyrAdmission().tabPlanned().imbSearch().setFocus();
		}	
		else if (form.lyrAdmission().tabWaiting().isVisible())
		{	
			form.getLocalContext().setTabSelected(TAB_WAITING_AREA_ADMISSION);
			form.lyrAdmission().tabWaiting().imbSearchWait().setFocus();
		}	
		else if (form.lyrAdmission().tabInWaiting().isVisible())
		{
			form.getLocalContext().setTabSelected(TAB_AWAITING_BED_WAITING_AREA);
		}
		else if (form.lyrAdmission().tabHomeLeave().isVisible())
		{
			form.getLocalContext().setTabSelected(TAB_RETURN_FROM_LEAVE);
		}
		else if (form.lyrAdmission().tabTCI().isVisible())
		{	
			form.getLocalContext().setTabSelected(TAB_TCI);
			form.lyrAdmission().tabTCI().imbTCI_Search().setFocus();
		}	
		else if (form.lyrAdmission().tabWardAttenders().isVisible())
		{	
			
			form.getLocalContext().setTabSelected(TAB_WARD_ATTENDERS);
			form.lyrAdmission().tabWardAttenders().imbSearchWard().setFocus();
		}	
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{	
			form.getLocalContext().setTabSelected(TAB_PENDING_EMERGENCY_ADMISSION);
			form.lyrAdmission().tabPendingEmergency().imbSearch_PEA().setFocus();
		}	
		else if (form.lyrAdmission().tabPET().isVisible())
		{	
			form.getLocalContext().setTabSelected(TAB_PENDING_EMERGENCY_THEATRE);
			form.lyrAdmission().tabPET().imbSearch_PET().setFocus();
		}	
		else
			form.getLocalContext().setTabSelected(null);
		
		hideAllControls(true); // Show all controls 

		//WDEV-13509
		form.lblHLReturnDate().setVisible(false);
		form.dteHLDateReturn().setVisible(false);
		form.lblHLTimeOfReturn().setVisible(false);
		form.timHLTimeOfReturn().setVisible(false);
		form.dteHLDateReturn().setEnabled(false);
		form.timHLTimeOfReturn().setEnabled(false);

		//WDEV-12957
		form.lblAntStay().setVisible(false);
		form.intAntStay().setVisible(false);
		form.lblCaseComment().setVisible(false);
		form.txtCaseComment().setVisible(false);
//		form.lblUpdateCasefolder().setVisible(false);
	//	form.CaseFolderYesNo().setVisible(false);
		form.lblUpdateCasefolder().setVisible(true);
		form.CaseFolderYesNo().setVisible(true);

		//moved code
		form.lblSourceOfReferral().setVisible(false);
		form.cmbSourceOfReferral().setVisible(false);
		form.lblPatientStatus().setVisible(false);
		form.cmbPatientStatus().setVisible(false);
		form.lblReferringConsultant().setVisible(false);
		form.ccReferringConsultant().setVisible(false);
		
//		form.lblService().setVisible(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && (form.lyrAdmission().tabWaiting().isVisible() || form.lyrAdmission().tabWardAttenders().isVisible()));
//		form.qmbService().setVisible(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && (form.lyrAdmission().tabWaiting().isVisible() || form.lyrAdmission().tabWardAttenders().isVisible()));

		form.getLocalContext().setIsInWaitingTabVisible(false);
		form.getLocalContext().setIsReturnFromLeaveVisible(false);
		form.getLocalContext().setRecordSelected(false);
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839

		form.lblMaternity().setVisible(tab.equals(form.lyrAdmission().tabWaiting()) && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"));
		form.chkIsMaternity().setVisible(tab.equals(form.lyrAdmission().tabWaiting()) && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST")); //wdeV-20224
		
		
		if (tab.equals(form.lyrAdmission().tabPendingEmergency()))
		{
			form.lyrAdmission().tabPendingEmergency().GroupPendingEmergencies().setValue(GroupPendingEmergenciesEnumeration.rdoPendingAdmissionCurrentWard);
			populatePendingEmergencyTab(form.lyrAdmission().tabPendingEmergency().GroupPendingEmergencies().getValue());
			updateControlsState();
			return;
		}
		
		if(tab.equals(form.lyrAdmission().tabHomeLeave()))
		{
			hideAllControls(false);
			form.cmbEpisode().setVisible(false); //	
			form.lblEpisode().setVisible(false); //WDEV-14612
			
			form.lblHLReturnDate().setVisible(true);
			form.dteHLDateReturn().setVisible(true);
			form.lblHLTimeOfReturn().setVisible(true);
			form.timHLTimeOfReturn().setVisible(true);

			if (form.dteHLDateReturn().getValue() != null)
				form.dteHLDateReturn().setValue(new Date());
			if (form.timHLTimeOfReturn().getValue() != null)
				form.timHLTimeOfReturn().setValue(new Time());
			
			form.getLocalContext().setIsReturnFromLeaveVisible(true);
			form.getLocalContext().setRecordSelected(form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() != null ? true : false);

			if(!tab.isInitialized())
			{	
				populatehomeLeaveTabFromData();
				clearSelection();
			}
			else
			{
				if(form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() != null)
				{
					enableInstanceControls(true);
					form.dteHLDateReturn().setEnabled(true);
					form.timHLTimeOfReturn().setEnabled(true);
					form.fireCustomControlValueChanged();
				}
			}
			
			updateControlsState();
			return;
		}
				
		//WDEV-12587
		bindCmbSourceOfReferralLookup();
		
		enableInstanceControls(false);
		if(tab.equals(form.lyrAdmission().tabEDEmergency()))
		{		
			updateControlsState();

			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST")
					//WDEV-20500
					|| ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")) //WDEV-20500
			{
				//WDEV-20223
				form.lblPatientStatus().setVisible(true);
				form.cmbPatientStatus().setVisible(true);
			}

			if(!tab.isInitialized())
			{	
				populateEmergencyTabFromData();
				clearSelection();
			}	
			else
			{
				if(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					enableInstanceControls(true);
					populateScreenFrom_ED_EmergencyData(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null ? form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission() : null);
					form.fireCustomControlValueChanged();
					return;
				}
			}
		}
		else if(tab.equals(form.lyrAdmission().tabBooked()))
		{
			showExtraUIControls();
			updateControlsState();

			if(!tab.isInitialized())
			{	
				clearSelection();
				populateBookedTabFromData();				
			}	
			else
			{
				if (form.lyrAdmission().tabBooked().grdElective().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					if (form.lyrAdmission().tabBooked().grdElective().getValue().getPasEventIsNotNull())
					{	
						form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent().getPatient()));
					}
					enableInstanceControls(true);
					populateScreenFromPendingAdmissionData(form.lyrAdmission().tabBooked().grdElective().getValue(), true);
					form.fireCustomControlValueChanged();
					return;
				}
			}
		}	
		else if (tab.equals(form.lyrAdmission().tabTCI()))
		{
			enableInstanceControls(false);
			showExtraUIControls_ElectiveList();
			form.lyrAdmission().tabTCI().grdTCI_Elective().setValue(null);			
			clearScreen();
			clearElectiveListGC();
			updateControlsState();
			return;
		}
		else if (tab.equals(form.lyrAdmission().tabWardAttenders())) //WDEV-22589
		{
			clearScreen();
			enableInstanceControls(false);
			if (!tab.isInitialized())
			{
				clearSelection();				
				populateWardAttendersTabFromData();
			}
			else
			{	
				form.lyrAdmission().tabWardAttenders().grdWardAttenders().setValue(null);
				updateControlsState();
				return;
			}
			updateControlsState();
		}
		else if(tab.equals(form.lyrAdmission().tabPlanned()))
		{
			showExtraUIControls();
			updateControlsState();
			
			if (!tab.isInitialized())
			{	
				clearSelection();
				populatePlannedTabFromData();
			}	
			else
			{
				if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					if (form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEventIsNotNull())
					{	
						form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent().getPatient()));
					}
					enableInstanceControls(true);
					populateScreenFromPendingAdmissionData(form.lyrAdmission().tabPlanned().grdTCI().getValue(), false);
					form.fireCustomControlValueChanged();
					updateControlsState();
					return;
				}
			}
			
		}
		else if(tab.equals(form.lyrAdmission().tabWaiting()))
		{
			form.lblUpdateCasefolder().setVisible(true);
			form.CaseFolderYesNo().setVisible(true);
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				form.lblAntStay().setVisible(true);
				form.intAntStay().setVisible(true);
				form.lblCaseComment().setVisible(true);
				form.txtCaseComment().setVisible(true);
				form.txtCaseComment().setEnabled(false);
				form.lblUpdateCasefolder().setVisible(true);
				form.CaseFolderYesNo().setVisible(true);
				form.lblSourceOfReferral().setVisible(true);
				form.cmbSourceOfReferral().setVisible(true);
			}
			if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
			{
				form.lblPatientStatus().setVisible(true);
				form.cmbPatientStatus().setVisible(true);
			}

			if(form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(SourceOfReferral.CONSULTANT))
			{
				form.lblReferringConsultant().setVisible(true);
				form.ccReferringConsultant().setVisible(true);
			}

			updateControlsState();
			
			if(!tab.isInitialized())
			{	
				clearSelection();
				clearScreen();
			}	
			else
			{
				if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					enableInstanceControls(true);
					populateScreenFromPatientSelected(form.lyrAdmission().tabWaiting().grdPatients().getValue());
					form.fireCustomControlValueChanged();
					updateControlsState();
					return;
				}
			}
		}
		else if(tab.equals(form.lyrAdmission().tabInWaiting()))
		{
			form.cmbEpisode().setVisible(false); 	
			form.lblEpisode().setVisible(false); 
			if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
			{
				form.lblPatientStatus().setVisible(true);
				form.cmbPatientStatus().setVisible(true);
				form.cmbPatientStatus().setEnabled(false);
			}			
			form.getLocalContext().setIsInWaitingTabVisible(true);

			updateControlsState();

			if (!tab.isInitialized())
			{	
				clearSelection();
				populateInWaitingTabFromData();			
			}	
			else
			{
				if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() != null)
				{
					form.getLocalContext().setRecordSelected(true);
					populateScreenFromInWaitingSelected();

					form.fireCustomControlValueChanged();
					updateControlsState();
					return;
				}
			}
		}
		else if (tab.equals(form.lyrAdmission().tabPET()))
		{
			populatePETGrid(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(), form.lyrAdmission().tabPET().GroupPETWard().getValue());
			
			updateControlsState();
			return;
		}
		
		updateControlsState();
	}	

	private void populatePETGrid(Date dateFrom, Date dateTo, GroupPETWardEnumeration value)
	{
		clearSelection();
		clearScreen();

		enableInstanceControls(false);
		
		form.lyrAdmission().tabPET().grdPET().getRows().clear();

		LocationLiteVo currentWard = form.getGlobalContext().Core.getADTWard();
		
		boolean currentWardSearchMode = GroupPETWardEnumeration.rdoPETCurrentWard.equals(value);
		LocationRefVo selHospital = domain.getHospitalLoc(currentWard);
		PendingEmergencyTheatreForAdmitVoCollection pendingEmergencyTheatreRecords = currentWardSearchMode ? domain.listPendingEmergencyTheatreRecords(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(), currentWard, selHospital) : domain.listPendingEmergencyTheatreRecords(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(), null, selHospital);
		
		if (pendingEmergencyTheatreRecords == null || pendingEmergencyTheatreRecords.size() == 0)
		{
			engine.showMessage("No results found.");
			return;
		}
		
		populatePendingEmergencyTheatresToGrid(pendingEmergencyTheatreRecords);
		
	}


	private void populatePendingEmergencyTheatresToGrid(PendingEmergencyTheatreForAdmitVoCollection pendingEmergencyTheatreRecords)
	{
		form.lyrAdmission().tabPET().grdPET().getRows().clear();
		if (pendingEmergencyTheatreRecords == null)
			return;
		
		for (PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre : pendingEmergencyTheatreRecords)
		{
			 grdPETRow row = form.lyrAdmission().tabPET().grdPET().getRows().newRow();

			if (pendingEmergencyTheatre == null || pendingEmergencyTheatre.getPatient() == null)
				continue;
			
			PatientLite_IdentifiersVo patient = pendingEmergencyTheatre.getPatient();
			
			if(patient.getName() != null)
			{
				row.setColForename(patient.getName().getForename());
				row.setColSurname(patient.getName().getSurname());
			}
			
			PatientId patId = patient.getDisplayId();
			row.setColIdentifier(patId != null ? patId.getValue() : null);
			row.setColSex(patient.getSex() != null ? patient.getSex().toString() : null);
		
			Integer age = patient.calculateAge();
			
			if (age != null)
			   row.setColAge(patient.calculateAgeText());
			
			row.setColDOB(patient.getDob() != null ? patient.getDob().toString() : null);
			
			if (patient.getAssociatedPatient() != null)
			   row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
			if (patient.getDod() != null)
			{	
				row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
				row.setTooltip(getRIPInfo(patient));
			} 
					
			row.setColDateTime(pendingEmergencyTheatre.getExpectedDateTime() != null ? pendingEmergencyTheatre.getExpectedDateTime().getDate() : null);
			
			row.setValue(pendingEmergencyTheatre);	
		}
	}
	private String getRIPInfo(PatientLite_IdentifiersVo val)
	{
		StringBuilder sb = new StringBuilder();
		if (val == null || val.getDod() == null)
			return null;
		sb.append("Patient's Date of Death: "  + "<b> " + val.getDod().toString() + "</b>" );
		if (val.getTimeOfDeath() != null)
			sb.append(" at "  + "<b> " + val.getTimeOfDeath().toString() + "</b>" );
		
		return sb.toString();
	}	
	@Override
	protected void onGrdEmergencySelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		TrackingForPendingEmergencyAdmitVo selectedEDRecord = form.lyrAdmission().tabEDEmergency().grdEmergency().getValue();
		if (selectedEDRecord != null && selectedEDRecord.getAssociatedPendingEmergencyAdmissionIsNotNull() && selectedEDRecord.getAssociatedPendingEmergencyAdmission().getPasEvent() != null)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(selectedEDRecord.getAssociatedPendingEmergencyAdmission().getPasEvent().getPatient()));
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		
			//WDEV-18533 
		if(selectedEDRecord != null && selectedEDRecord.getAssociatedPendingEmergencyAdmissionIsNotNull() && selectedEDRecord.getAssociatedPendingEmergencyAdmission().getPasEvent() != null)
			setSexForSelectedpatient(selectedEDRecord.getAssociatedPendingEmergencyAdmission().getPasEvent().getPatient());
		
		enableInstanceControls(true);
		populateScreenFrom_ED_EmergencyData(selectedEDRecord.getAssociatedPendingEmergencyAdmission());
		form.fireCustomControlValueChanged();
		
		updateControlsState();
	}
	
	
	@Override
	protected void onGrdPendingEmergencyAdmissionSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		if (form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue() != null)
		{
			PatientShort patShort = domain.getPatientShort(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().getPatient());
			form.getGlobalContext().Core.setPatientShort(patShort);
			setSexForSelectedpatient(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().getPatient());
		}

		enableInstanceControls(true);
		
		populateScreenFrom_PendingEmergencyData(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue());
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		updateControlsState();
		form.fireCustomControlValueChanged();
	}

	private void populateSpecialtyForService(ServiceLiteVo service)
	{
		form.cmbSpecialty().clear();
		
		if (service != null && service.getSpecialty() != null)
		{
			form.cmbSpecialty().newRow(service.getSpecialty(), service.getSpecialty().getText());
			form.cmbSpecialty().setValue(service.getSpecialty());
		}
	}

	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.PendingEmergencyAdmissionCM.VIEW_DTA:
				viewDecisionToAdmit();
			break;

			case GenForm.ContextMenus.CoreNamespace.ElectiveListTCIAdmission.VIEW:
				viewPatientElectiveListEntry();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.BedManagementHomeLeave.CANCEL_HOME_LEAVE:
				if (cancelHomeLeave())
				{
					refreshHomeLeaves();
				}
			break;
		}
	}

	
	private void viewPatientElectiveListEntry()
	{
		if (form.getLocalContext().getTCIElectiveAdmission() == null)
			return;
		form.getLocalContext().setbCanClearElectiveListContexts(null);
		form.fireCustomControlValueChanged();
		form.getGlobalContext().RefMan.setPatientElectiveListRef(form.getLocalContext().getTCIElectiveAdmission());
		form.getGlobalContext().RefMan.setCatsReferral(form.getLocalContext().getTCIElectiveAdmission().getReferral());
		
		engine.open(form.getForms().RefMan.ElectiveListDetails);
	}


	private void viewDecisionToAdmit()
	{
		if (form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() == null)
			return;
		
		form.getGlobalContext().Emergency.setTracking(domain.getTrackingForPendingEmergency(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission()));
		
		engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] {form.getGlobalContext().Emergency.getTracking()});
	}


	public Boolean hasPatientElectiveListToCancel()
	{
		if (form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() == null)
			return false;

		if (!Specialty.EMERGENCY.equals(form.cmbSpecialty().getValue()))
			return false;
		
		PatientElectiveListBedAdmissionVo electiveList = form.getLocalContext().getTCIElectiveAdmission();
		if (electiveList == null)
			return false;
		
		return domain.hasPatientElectiveListToCancel(electiveList.getPatient(), electiveList, electiveList.getElectiveList().getService());
	}

	
	/**
	 * This function returns true if the admission is done from an emergency tab
	 */
	public Boolean isOnEmergency()
	{
		if (form.lyrAdmission().tabEDEmergency().isVisible())
			return true;
		
		if (form.lyrAdmission().tabPendingEmergency().isVisible())
			return true;
		
		if (form.lyrAdmission().tabWaiting().isVisible())
			return true;
		
		if (form.lyrAdmission().tabWardAttenders().isVisible())
			return true;
		
		if (form.lyrAdmission().tabPET().isVisible())
			return true;
		
		return false;
	}

	public Boolean isOnTCITab()
	{
		return form.lyrAdmission().tabTCI().isVisible();
	}

	private void hideTabs()
	{
		boolean hasHomeLeaves = false;//	WDEV-14563
		
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();//	WDEV-14563
		if(voBed != null)//	WDEV-14563
		{		
			hasHomeLeaves = domain.hasHomeLeavesByWard(voBed.getWard());
		}
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue()=="WST" || !hasHomeLeaves)//	WDEV-14563
		{
			form.lyrAdmission().tabHomeLeave().setVisible(false);
			form.lyrAdmission().tabHomeLeave().setHeaderVisible(false);			
		}	
	}

	//WDEV-22735
	private AdmissionDetailVo updateAdmissionRecordWithHealthyLodgerDetails(AdmissionDetailVo admissionDetails,	HealthyLodgerVo healthyLodgerDetails)
	{
		if (admissionDetails == null)
			return null;
		
		AdmissionDetailVo admission = null;
		
		admissionDetails.setHealthyLodgerDetails(healthyLodgerDetails);
		
		String[] errors = admissionDetails.validate();
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return null;
		}
		try {
			admission = domain.updateAdmissionDetailWithHealthyLodgerInfo(admissionDetails, healthyLodgerDetails);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}		
		return admission;
	}
	//WDEV-22735 ends here
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().RefMan.NewElectiveListTCIErodDialog))
		{			
			if (form.getGlobalContext().RefMan.getPatientElectiveListRef().getVersion_PatientElectiveList() > form.getLocalContext().getTCIElectiveAdmission().getVersion_PatientElectiveList())
			{
				populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), false);
				form.getLocalContext().setTCIElectiveAdmission(null);
				PatientElectiveListBedInfoVo tciToRestore = getTCIForSelectionRestore(form.getGlobalContext().RefMan.getPatientElectiveListRef());
				if (form.getGlobalContext().RefMan.getPatientElectiveListRef() != null && tciToRestore != null)
				{
					PatientElectiveListBedAdmissionVo val = domain.getPatientElectiveAdmission(tciToRestore);
					form.getLocalContext().setTCIElectiveAdmission(val);
					form.lyrAdmission().tabTCI().grdTCI_Elective().setValue(tciToRestore);					
				}					
			}
			populateScreenFromTCI_ElectiveAdmissionData(form.getLocalContext().getTCIElectiveAdmission(), false);
			enableInstanceControls(form.getLocalContext().getTCIElectiveAdmissionIsNotNull());	
			form.getLocalContext().setbCanClearElectiveListContexts(true);
			updateControlsState();
			form.fireCustomControlValueChanged();
			
		}
		else if (formName.equals(form.getForms().Core.HealthyLodgerDetails))
		{
			//WDEV-22735
			if (form.getGlobalContext().Core.getHealthyLodgerDetails() == null)
			{
				if (form.lyrAdmission().tabInWaiting().isVisible() && DialogResult.OK.equals(result))
				{
					form.getLocalContext().setAdmissionDetail(updateAdmissionRecordWithHealthyLodgerDetails(form.getLocalContext().getAdmissionDetail(), form.getGlobalContext().Core.getHealthyLodgerDetails()));
				}
				form.chkHealthyLodger().setValue(false);
			}
			//WDEV-22735 ends here
			if (DialogResult.OK.equals(result))
				updateControlsState();
		}
		//WDEV-20988 - refresh controls and selection
		else if (formName.equals(form.getForms().Emergency.EDDecisionToAdmitDialog) && DialogResult.OK.equals(result))
		{
			form.getLocalContext().setRecordSelected(false);
			form.getGlobalContext().Core.setPatientShort(null);
			setSexForSelectedpatient(null);
			clearScreen();
			populateEmergencyTabFromData();			
			
			enableInstanceControls(false);
			updateContextMenus(true, false, false);

			form.fireCustomControlValueChanged();
		}
		else if (form.getForms().RefMan.ElectiveListDetails.equals(formName))
		{
			searchElectiveTCI();
			
			updateControlsState();
		}
	}
	
	
	
	
	private PatientElectiveListBedInfoVo getTCIForSelectionRestore(PatientElectiveListRefVo patientElectiveListRefVo)
	{
		PatientElectiveListBedInfoVoCollection tciGridValues = form.lyrAdmission().tabTCI().grdTCI_Elective().getValues();
		if (tciGridValues.size() == 0)
			return null;
		
		for (PatientElectiveListBedInfoVo value : tciGridValues)
		{			
			if (value.getID_PatientElectiveList().equals(patientElectiveListRefVo.getID_PatientElectiveList()))
			{				 
				 return value;
			}	 
		}
		return null;
	}


	
	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{		
		clearPlannedTabDetails(true);
	}

	private void clearPlannedTabDetails(boolean clearSearchCriteria) 
	{
		form.getLocalContext().setRecordSelected(false);
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839
		form.lyrAdmission().tabPlanned().grdTCI().getRows().clear();
		
		if (clearSearchCriteria)
		{
			form.lyrAdmission().tabPlanned().dteFrom().setValue(null);
			form.lyrAdmission().tabPlanned().dteTo().setValue(null);
			form.lyrAdmission().tabPlanned().chkTodayOnly().setValue(false);
			
			enableDateSearch(true);
		}

		clearScreen();			
		enableInstanceControls(false);
		
		form.fireCustomControlValueChanged();
		
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		search();
	}

	private void search() 
	{
		form.getLocalContext().setRecordSelected(false);//WDEV-16265
		clearScreen();//WDEV-16265
		enableInstanceControls(false);//WDEV-16265
		
		searchPlanned();	
	}

	private void searchPlanned()
	{
		if(validatePlannedSearchCriteria())
		{
			form.lyrAdmission().tabPlanned().grdTCI().getRows().clear();
			
			PendingElectiveAdmissionAdmitVoCollection voCollPlanned = null;
			BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
			if(voBed != null)
				voCollPlanned = domain.listPlannedElectiveAdmission(form.lyrAdmission().tabPlanned().dteFrom().getValue(), form.lyrAdmission().tabPlanned().dteTo().getValue(), voBed.getWard());
			else
				throw new CodingRuntimeException("Ward has not been set up with a bed configuration");
			
			if(voCollPlanned == null || voCollPlanned.size() == 0)
			{
				engine.showMessage("No records found.");	//wdev-11257
				return;
			}
			
			for (PendingElectiveAdmissionAdmitVo voPlannedAdmission : voCollPlanned)
			{
				grdTCIRow row = form.lyrAdmission().tabPlanned().grdTCI().getRows().newRow();
				
				PatientLite_IdentifiersVo voPatient = (voPlannedAdmission.getPasEventIsNotNull() && voPlannedAdmission.getPasEvent().getPatientIsNotNull()) ? voPlannedAdmission.getPasEvent().getPatient() : null;
				if(voPatient != null)
				{
					if(voPatient.getNameIsNotNull())
					{
						row.setColForename(voPatient.getName().getForename());
						row.setColSurname(voPatient.getName().getSurname());
					}
					
					PatientId patId = voPatient.getDisplayId();
					row.setColDisplayId(patId != null ? patId.getValue() : null);
					row.setColSex(voPatient.getSexIsNotNull() ? voPatient.getSex().toString() : null);
					
					Integer age = voPatient.calculateAge();
					if (age != null)
						row.setColAge(voPatient.calculateAgeText());
					
					row.setColDob(voPatient.getDobIsNotNull() ? voPatient.getDob().toString() : null);
					
					if (voPatient.getAssociatedPatientIsNotNull())		//wdev-13105
						row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
					
					if (voPatient.getDodIsNotNull())	//wdev-13105
					{	
						row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
						row.setTooltip(getRIPInfo(voPatient));
					}	
				}
				row.setValue(voPlannedAdmission);
			}
		}
	}

	private boolean validatePlannedSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
	
		if(form.lyrAdmission().tabPlanned().dteFrom().getValue() == null)
			errors.add("'From' Date is mandatory");
			
		if(form.lyrAdmission().tabPlanned().dteTo().getValue() == null)
			errors.add("'To' Date is mandatory");
		
		if(form.lyrAdmission().tabPlanned().dteFrom().getValue() != null && form.lyrAdmission().tabPlanned().dteTo().getValue() != null)
		{
			if(form.lyrAdmission().tabPlanned().dteFrom().getValue().isGreaterThan(form.lyrAdmission().tabPlanned().dteTo().getValue()))
				errors.add("'To' Date cannot be before 'From' Date");
		}
		
		
		String[] strErrors = errors.toArray(new String[0]);
		if(strErrors != null && strErrors.length > 0)
		{
			engine.showErrors(strErrors);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onImbClearWaitClick() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(false);
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839
		form.getLocalContext().setAdmissionDetail(null);
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		
		form.lyrAdmission().tabWaiting().cmbIdType().setValue(null);
		form.lyrAdmission().tabWaiting().txtIdValue().setValue(null);
		form.lyrAdmission().tabWaiting().txtForename().setValue(null);
		form.lyrAdmission().tabWaiting().txtSurname().setValue(null);
		form.chkIsMaternity().setValue(false);
		
		form.lyrAdmission().tabWaiting().grdPatients().getRows().clear();
		clearScreen();
		
		enableInstanceControls(false);
		
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onImbSearchWaitClick() throws PresentationLogicException
	{
		clearScreen();//WDEV-18744
		form.getLocalContext().setRecordSelected(false);//WDEV-18744
		enableInstanceControls(false);//WDEV-18744
		searchWaiting();
	}

	private void searchWaiting()
	{
		if(validateWaitingSearchCriteria())
		{
			PatientFilter voPatFilter = new PatientFilter();
			if (form.lyrAdmission().tabWaiting().txtIdValue().getValue() != null && form.lyrAdmission().tabWaiting().txtIdValue().getValue().length() > 0)
			{
				PatientId pid = new PatientId();
				pid.setType(form.lyrAdmission().tabWaiting().cmbIdType().getValue());	
				pid.setValue(form.lyrAdmission().tabWaiting().txtIdValue().getValue());			
				voPatFilter.setPersId(pid);
				//wdev-11258
				form.lyrAdmission().tabWaiting().txtForename().setValue("");
				form.lyrAdmission().tabWaiting().txtSurname().setValue("");
				//------------
			}
			else
			{
				voPatFilter.setForename(form.lyrAdmission().tabWaiting().txtForename().getValue());
				voPatFilter.setSurname(form.lyrAdmission().tabWaiting().txtSurname().getValue());
			}
			
			//WDEV-17167
			voPatFilter.setExcludeQuickRegistrationPatients(Boolean.TRUE);
			
			form.lyrAdmission().tabWaiting().grdPatients().getRows().clear();
			PatientLite_IdentifiersVoCollection voCollPatients = null;
			try
			{
				voCollPatients = domain.searchPatients(voPatFilter);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			if(voCollPatients == null || voCollPatients.size() == 0)
			{
				engine.showMessage("No matching records found");
				return;
			}
			populateEmergencyAdmissionPatientsGridFromData(voCollPatients);	
		}
	}


	private void populateEmergencyAdmissionPatientsGridFromData(PatientLite_IdentifiersVoCollection voCollPatients)
	{
		form.lyrAdmission().tabWaiting().grdPatients().getRows().clear();
		if (voCollPatients == null)
			return;
		for (PatientLite_IdentifiersVo patient : voCollPatients)
		{
			grdPatientsRow row = form.lyrAdmission().tabWaiting().grdPatients().getRows().newRow();

			if(patient.getNameIsNotNull())
			{
				row.setColForename(patient.getName().getForename());
				row.setColSurname(patient.getName().getSurname());
			}
			
			PatientId patId = patient.getDisplayId();
			row.setColDisplayId(patId != null ? patId.getValue() : null);
			row.setColSex(patient.getSexIsNotNull() ? patient.getSex().toString() : null);
		
			Integer age = patient.calculateAge();
			if(age != null)
				row.setColAge(patient.calculateAgeText());
			
			row.setColDob(patient.getDobIsNotNull() ? patient.getDob().toString() : null);
			
			//WDEV-8000
			if (patient.getAssociatedPatientIsNotNull())
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
			if (patient.getDodIsNotNull())
			{	
				row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
				row.setTooltip(getRIPInfo(patient));
			}	
					
			row.setValue(patient);	
		}
	}

	private boolean validateWaitingSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
	
		if (form.lyrAdmission().tabWaiting().txtIdValue().getValue() != null && form.lyrAdmission().tabWaiting().txtIdValue().getValue().length() > 0)
		{
			if (form.lyrAdmission().tabWaiting().cmbIdType().getValue() == null)
			{
				errors.add("Please select an ID Type");
				form.lyrAdmission().tabWaiting().cmbIdType().setFocus();
			}
		}
		else
		{
			if(form.lyrAdmission().tabWaiting().txtSurname().getValue() == null)
				errors.add("Surname is mandatory");
			if(form.lyrAdmission().tabWaiting().txtForename().getValue() == null
				&& ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) //WDEV-20257
				errors.add("Forename is mandatory");
		}
		
		String[] strErrors = errors.toArray(new String[0]);
		if(strErrors != null && strErrors.length > 0)
		{
			engine.showErrors(strErrors);
			//http://jira/browse/WDEV-20484
			if (form.lyrAdmission().tabWaiting().grdPatients().getRows().size() > 0)
			{
				form.lyrAdmission().tabWaiting().grdPatients().getRows().clear();
			} 
			return false;
		}
		
		return true;
	}

	@Override
	protected void onGrdPatientsSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrAdmission().tabWaiting().grdPatients().getValue()));
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		
		//WDEV-10964  for DTO (specifically CCO) implementation - may need to replicate here as searching off DTO
		if (replicatePatient())
		{
			// WDEV-10998
			form.getLocalContext().setRecordSelected(true);

			// WDEV-18533
			setSexForSelectedpatient(form.lyrAdmission().tabWaiting().grdPatients().getValue());

			enableInstanceControls(true);
			PatientLite_IdentifiersVo pat = form.lyrAdmission().tabWaiting().grdPatients().getValue();
			//form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(pat));
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{
				pat.setIsSelfAdmitPatient(domain.hasPatientActiveSelfAdmitAlert(pat));
			}
			populateScreenFromPatientSelected(pat);
			updateCaseNoteLocationState();
			form.fireCustomControlValueChanged();
		}
	}

	private boolean replicatePatient() 
	{
		if (form.lyrAdmission().tabWaiting().grdPatients().getValue() != null && form.lyrAdmission().tabWaiting().grdPatients().getValue().getID_Patient() == null)
		{
			try 
			{
				form.lyrAdmission().tabWaiting().grdPatients().getSelectedRow().setValue(domain.getPatient(domain.getPatientShort(form.lyrAdmission().tabWaiting().grdPatients().getValue())).toPatientLite_IdentifiersVo());
				form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrAdmission().tabWaiting().grdPatients().getValue()));
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			return true;
		}
		else 
			return true;
	}

	private void populateScreenFromPatientSelected(PatientLite_IdentifiersVo patient)
	{
		clearScreen();
		
		if(patient == null)
			return;
		
		// Default in Ward
		if(form.getGlobalContext().Core.getADTWardIsNotNull())
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());			
		}
		
		// No defaults on Service
		// No defaults on Speciality
		// No defaults on Consultant
		
		// No defaults on WardType
		// No defaults on Source Of Admission
		
		// Default on Method of Admission 
		//WDEV-20501 (Note: tanWaiting is actually Emergency Admission)
		if(form.lyrAdmission().tabWaiting().isVisible())
		{
			form.cmbMethod().setValue(MethodOfAdmission.EMERGENCY);
			form.cmbMethod().setEnabled(false);
		}//WDEV-20501

		// No default on Patient Category
		// Patient Category is defaulted to NHS - is this correct?
//		if(!form.lyrAdmission().tabWardAttenders().isVisible())
//			 form.cmbPatientStatus().setValue(PatientStatus.NHS);

		// Default Admit Date Time to current date time
		form.dtimAdmit().setValue(new DateTime());
		// No Default on Anticipated Stay
		// Estimated discharge Date Time - calculated field
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{	
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		
		// No Default on chaplain
		
		// No default on Source of Referral
		
		if (form.chkSelfAdmitPatient().isVisible())
			form.chkSelfAdmitPatient().setValue(Boolean.TRUE.equals(patient.getIsSelfAdmitPatient()));

		// Default category from patient record
		form.cmbPatientStatus().setValue(patient.getPatientCategory());
		loadEpisodes();
	}
	


	private void populateScreenFromPatientSelected_WardAttenders(PatientLite_IdentifiersVo patient)
	{
		clearScreen();
		
		BookAppointmentForWardAttendersVo wardBooking = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
		if (patient == null || wardBooking == null || wardBooking.getSession() == null)
			return;

		// Default in current ward
		if(form.getGlobalContext().Core.getADTWardIsNotNull())
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());			
		}
		
		// Default in Service from Ward Attenders list
		form.qmbService().setValue(wardBooking.getSession().getService());
		if (wardBooking.getSession().getService() != null && form.qmbService().getValue() == null)
		{
			form.qmbService().newRow(wardBooking.getSession().getService(), wardBooking.getSession().getService().getServiceName());
			form.qmbService().setValue(wardBooking.getSession().getService());
		}

		// Default in Speciality
		if (wardBooking.getSession().getService() != null && wardBooking.getSession().getService().getSpecialty() != null && form.cmbSpecialty().getValue() == null)
		{
			form.cmbSpecialty().newRow(wardBooking.getSession().getService().getSpecialty(), wardBooking.getSession().getService().getSpecialty().getText());
			form.cmbSpecialty().setValue(wardBooking.getSession().getService().getSpecialty());
		}
		
		// No default on Consultant

		// No default on Ward Type
		// No default on Source of Admission
		// Method of Admission defaulted to 24 - Emergency
		form.cmbMethod().setValue(MethodOfAdmission.EMERGENCY);
		// No default on Patient Category
		
		// No default on Admit Date Time
		form.dtimAdmit().setValue(new DateTime());
		// No default on Anticipated Stay
		// Estimated date of discharged to be calculated based on the above two values
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{	
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		
		// Set Source of Emergency Referral to 24
		form.cmbSourceOfEmergencyReferral().setValue(SourceOfEmergencyReferral.CONSULTANT_CLINIC);
		
		// No default on Chaplain
		// No default on Case Note Folder Location
		
		// Default category from appointment
		if (wardBooking.getPatientCategory() != null)
		{
			form.cmbPatientStatus().setValue(wardBooking.getPatientCategory());
		}
		else
		{
			form.cmbPatientStatus().setValue(wardBooking.getPatient().getPatientCategory());
		}
	}


	private void loadEpisodes()
	{
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
		{
			PatientRefVo voPat = getSelectedPatient();
			if(voPat != null)
			{
				EpisodeOfCareWithPrimaryDiagnosisVoCollection voCollEpisodes = domain.listOpenEpisodesForPatient(getSelectedPatient());
				if(voCollEpisodes != null)
				{
					for(EpisodeOfCareWithPrimaryDiagnosisVo voEpis : voCollEpisodes)
						form.cmbEpisode().newRow(voEpis, voEpis.toString());
					
					// WDEV-16054  If only one episode, set this as the value in the combo
					if (voCollEpisodes.size() == 1)
						form.cmbEpisode().setValue(voCollEpisodes.get(0));
				}
			}
		}
	}

	@Override
	protected void onGrdInWaitingSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		//WDEV-22211
		InpatientEpisodeLiteVo selRecord = form.lyrAdmission().tabInWaiting().grdInWaiting().getValue();
		if (selRecord != null && selRecord.getPasEventIsNotNull() && selRecord.getPasEvent().getPatientIsNotNull())
		{	
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(selRecord.getPasEvent().getPatient()));
		}	
		populateScreenFromInWaitingSelected();
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
			form.cmbEpisode().setEnabled(true);
		updateControlsState();
		form.fireCustomControlValueChanged();
	}

	private void populateScreenFromInWaitingSelected()
	{
		form.getLocalContext().setAdmissionDetail(null);
		clearScreen();
		if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() == null)
			return;
		
		InpatientEpisodeLiteVo voInWaiting = form.lyrAdmission().tabInWaiting().grdInWaiting().getValue();
		AdmissionDetailVo voAdmission = domain.getAdmissionDetailByPasEvent(voInWaiting.getPasEvent());
		if(voAdmission == null)
			return;
		
		form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
		form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());

		if(voAdmission.getPasEventIsNotNull())
		{
			//WDEV-20910 
			if (voAdmission.getPasEvent().getServiceIsNotNull())
			{
				if (!form.qmbService().getValues().contains(voAdmission.getPasEvent().getService()))
				{	
					form.qmbService().newRow(voAdmission.getPasEvent().getService(), voAdmission.getPasEvent().getService().getServiceName());
				}
				form.qmbService().setValue(voAdmission.getPasEvent().getService());
			}
			if (voAdmission.getPasEvent().getConsultantIsNotNull())
			{
				//WDEV-23376
				MedicVo consultantVo = domain.getMedic(voAdmission.getPasEvent().getConsultant().toHcpRefVo());
				if (!form.qmbConsultant().getValues().contains(voAdmission.getPasEvent().getConsultant()))
				{					
					form.qmbConsultant().newRow(consultantVo, consultantVo.getIHcpName());
				}	
				form.qmbConsultant().setValue(consultantVo);
			}		
			//WDEV-20910 --en			
			listSpecialtiesForConsultant();						
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				if(voAdmission.getPasEvent().getPASSpecialtyIsNotNull())
				{
					if(!form.cmbCCOSpecialty().getValues().contains(voAdmission.getPasEvent().getPASSpecialty()))
						form.cmbCCOSpecialty().newRow(voAdmission.getPasEvent().getPASSpecialty(), voAdmission.getPasEvent().getPASSpecialty().getText());
				}
					
				form.cmbCCOSpecialty().setValue(voAdmission.getPasEvent().getPASSpecialty());
			}
			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
			if(voAdmission.getPasEvent().getSpecialtyIsNotNull())
			{
				if(!form.cmbSpecialty().getValues().contains(voAdmission.getPasEvent().getSpecialty()))
					form.cmbSpecialty().newRow(voAdmission.getPasEvent().getSpecialty(), voAdmission.getPasEvent().getSpecialty().getText());
			}
		
			form.cmbSpecialty().setValue(voAdmission.getPasEvent().getSpecialty());
			setSexForSelectedpatient(voAdmission.getPasEvent().getPatient()); //WDEV-18533 
		}		
		form.cmbWardType().setValue(voAdmission.getWardType()); 
		form.cmbMethod().setValue(voAdmission.getMethodOfAdmission()); 
		form.cmbSource().setValue(voAdmission.getSourceOfAdmission());
		form.dtimAdmit().setValue(voAdmission.getAdmissionDateTime());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			form.dteEstDischarge().setValue(voAdmission.getEstDischargeDateIsNotNull() ? voAdmission.getEstDischargeDate().getDate() : null);
		}
		else
		{
			form.dtimEstDischarge().setValue(voAdmission.getEstDischargeDate());
		}
		//WDEV-20910
		if (form.intAntStay().isVisible())
		{
			form.intAntStay().setValue(voInWaiting.getEstDischargeDate() != null ? DateTime.daysDiff(voInWaiting.getAdmissionDateTime(), voInWaiting.getEstDischargeDate()): null);
		}
		if (voAdmission.getSourceOfEmergencyReferralIsNotNull())
		{
			form.cmbSourceOfEmergencyReferral().setValue(voAdmission.getSourceOfEmergencyReferral());
		}
		//WDEV-20910  -- end
		form.cmbPatientStatus().setValue(voAdmission.getPatientStatus());
		form.chkChaplain().setValue(voAdmission.getIsChaplainRequired());
		form.txtReason().setValue(voAdmission.getReasonForAdmission());
		if (voAdmission.getHealthyLodgerDetailsIsNotNull())
		{
			form.chkHealthyLodger().setValue(true);			
		}
		//WDEV-20910
		form.CaseFolderYesNo().setValue(voAdmission.getUpdateCFLIsNotNull() ? (Boolean.TRUE.equals(voAdmission.getUpdateCFL()) ? CaseFolderYesNoEnumeration.rdoYes : CaseFolderYesNoEnumeration.rdoNo) : CaseFolderYesNoEnumeration.None);
		
		form.getLocalContext().setAdmissionDetail(voAdmission);
	}

	//WDEV-19348
	private PatientElectiveListBedAdmissionVo populateDataFromScreenTCIElectiveAdmission(PatientElectiveListBedAdmissionVo electiveAdmission)
	{
		if (electiveAdmission == null)
			throw new CodingRuntimeException("Invalid PatientElectiveList record!");
		else //WDEV-18759
		{
			//DEEP Clone
			electiveAdmission = (PatientElectiveListBedAdmissionVo) electiveAdmission.clone();

			//WDEV-21577 - SOE fix - need to get a refreshed patient as it may have been updated in PDSDemograp[hics dialog
			if (form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() != null && form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient() != null)
			{
				PatientLite_IdentifiersVo refreshedPatient = form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient();
				if(electiveAdmission.getPatientIsNotNull() && electiveAdmission.getPatient().getID_PatientIsNotNull() && electiveAdmission.getPatient().getID_Patient().equals(refreshedPatient.getID_Patient()))
				{
					electiveAdmission.setPatient(refreshedPatient);	
				}
			}			
			
			// DEEP Clone of CatsReferral & CatsReferral.Admissions
			electiveAdmission.setReferral((CATSReferralWithContextPasVo) electiveAdmission.getReferral().clone());
			if (electiveAdmission.getReferral().getAdmissions() != null)
			{
				electiveAdmission.getReferral().setAdmissions((AdmissionDetailRefVoCollection) electiveAdmission.getReferral().getAdmissions().clone());
			}
			
			if (electiveAdmission.getTCIDetails() != null)
			{
				electiveAdmission.setTCIDetails((TCIForPatientElectiveListBedInfoDetailsVo) electiveAdmission.getTCIDetails().clone());
				if (electiveAdmission.getTCIDetails().getOutcomeHistoryIsNotNull())
				{
					electiveAdmission.getTCIDetails().setOutcomeHistory((TCIOutcomeForPatientElectiveListRefVoCollection) electiveAdmission.getTCIDetails().getOutcomeHistory().clone());
				}
			}
			
			if (electiveAdmission.getElectiveListStatusHistoryIsNotNull())
			{
				electiveAdmission.setElectiveListStatusHistory((ElectiveListStatusRefVoCollection) electiveAdmission.getElectiveListStatusHistory().clone());
			}
		}
		
		if (Boolean.TRUE.equals(electiveAdmission.getSubjectTo28DayRule()) && isAdmissionDateInBreachOfRule28Days(form.dtimAdmit().getValue(), electiveAdmission))
		{
			electiveAdmission.setSubjectTo28DayRule(Boolean.FALSE);
			electiveAdmission.setRule28DayStatus(Rule28DayStatus.BREACHED);
			electiveAdmission.setRule28DayPeriodStart(null);
			
			if (electiveAdmission.getTCIDetails() != null)
			{
				electiveAdmission.getTCIDetails().setRule28DayStatus(Rule28DayStatus.BREACHED);
				electiveAdmission.getTCIDetails().setRule28DayPeriodStart(null);
			}
		}
		//WDEV-22646 Consultant Not to be updated
		/*
		HcpLiteVo admissionConsultant = domain.getHcpFromIMos(form.qmbConsultant().getValue()); //WDEV-18583 
		// Fill in data into PatientElectiveList record
		electiveAdmission.setConsultant(admissionConsultant); // WDEV-18583 */ 
		//electiveAdmission.setPatientStatus(form.cmbPatientStatus().getValue());
		electiveAdmission.setAnticipatedStay(form.intAntStay().getValue());
		
		// Update the status to PatientElectiveList record
		ElectiveListStatusVo admitStatus = new ElectiveListStatusVo(); 
		admitStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		admitStatus.setStatusDateTime(new DateTime());
		admitStatus.setElectiveListStatus(WaitingListStatus.ADMITTED);

		electiveAdmission.setElectiveListStatus(admitStatus);
		electiveAdmission.getElectiveListStatusHistory().add(admitStatus);

		
		// Fill in data into PatientElectiveList.TCIDetails record
		TCIForPatientElectiveListBedInfoDetailsVo tciDetails = electiveAdmission.getTCIDetails();
		
		// Safety check - but should be unnecessary
		if (tciDetails == null)
		{
			tciDetails = new TCIForPatientElectiveListBedInfoDetailsVo();
			electiveAdmission.setTCIDetails(tciDetails);
		}
		
		tciDetails.setTCIWard(form.cmbWard().getValue());
		// Bed number - to be taken from global context 
		BedSpaceStateLiteVo bedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (bedSpaceState != null && bedSpaceState.getBedSpace() != null)
			tciDetails.setTCIBed(bedSpaceState.getBedSpace().getBedNumber());
		//WDEV-22646 Consultant Not to be updated
		//tciDetails.setTCIConsultant(admissionConsultant); // WDEV-18583 
		
		
		// Update the outcome for PatientElectiveList.TCIDetails record
		TCIOutcomeForPatientElectiveListVo outcomeTCI = new TCIOutcomeForPatientElectiveListVo();
		
		if (ElectiveListReason.DIAGNOSTIC.equals(electiveAdmission.getElectiveListReason()))
			outcomeTCI.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED);
		else
			outcomeTCI.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED_COMMENCED_8);
		
		outcomeTCI.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
		outcomeTCI.setStatusDateTime(form.dtimAdmit().getValue());
		outcomeTCI.setOutcomeReason(null);
		tciDetails.setCurrentOutcome(outcomeTCI);
		tciDetails.getOutcomeHistory().add(outcomeTCI);
		tciDetails.setIsActive(false);//wdev-18248 RF
		
		// WDEV-18598 - Update the Appointment status
		BookingAppointmentTheatreVo appointment = tciDetails.getAppointment();
		if (appointment != null)
		{
			appointment.setApptStatus(Status_Reason.ADMITTED);
			
			Appointment_StatusVo appointmentStatus = new Appointment_StatusVo();
			appointmentStatus.setStatus(Status_Reason.ADMITTED);
			appointmentStatus.setStatusChangeDateTime(form.dtimAdmit().getValue());
			appointmentStatus.setApptDate(appointment.getAppointmentDate());
			
			appointment.setCurrentStatusRecord(appointmentStatus);
			
			if (appointment.getApptStatusHistory() == null)
				appointment.setApptStatusHistory(new Appointment_StatusVoCollection());
			appointment.getApptStatusHistory().add(appointmentStatus);
		}

		// Fill in data into PatientElectiveList.TCIDetails.AdmissionDetail record - create a new one if needed
		AdmissionDetailVo admissionDetails = tciDetails.getAdmissionDetail();
		if (admissionDetails == null)
		{
			admissionDetails = new AdmissionDetailVo();

			PasEventAdmitVo pasEvent = new PasEventAdmitVo();
			//WDEV-23376
			if (form.qmbConsultant().getValue() != null)
			{
				MedicVo medicVo = domain.getMedic(form.qmbConsultant().getValue().toHcpRefVo());
				pasEvent.setConsultant(new MedicRefVo(medicVo.getID_Hcp(),medicVo.getVersion_Hcp()));
			}
			else
			{	
				pasEvent.setConsultant(null);
			}
			pasEvent.setEventDateTime(form.dtimAdmit().getValue());
			pasEvent.setEventType(PasEventType.TCI);
			pasEvent.setLocation(form.cmbWard().getValue());
			PatientShort patientShort = domain.getPatientShort(electiveAdmission.getPatient());
			patientShort.setWard(form.cmbWard().getValue());
			pasEvent.setPatient(electiveAdmission.getPatient());
			pasEvent.setSpecialty(form.cmbSpecialty().getValue());
			//WDEV-18779
			pasEvent.setPasEventId(electiveAdmission.getPatient().getID_Patient().toString() + (pasEvent.getEventDateTime() != null ? pasEvent.getEventDateTime().toString(DateTimeFormat.ISO) : "") + "-" + (new DateTime().toString(DateTimeFormat.ISO)));
			pasEvent.setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			//WDEV-20323 On Admission, service needs to be saved alongside the specialty 
			admissionDetails.setService(form.qmbService().getValue()); //WDEV-20323
			pasEvent.setService(form.qmbService().getValue()); //WDEV-20910
			admissionDetails.setPasEvent(pasEvent);
			tciDetails.setAdmissionDetail(admissionDetails);
			if (appointment != null)
				appointment.setPASEvent(pasEvent);
		}
		
		if (electiveAdmission.getReferral().getAdmissions() == null)
			electiveAdmission.getReferral().setAdmissions(new AdmissionDetailRefVoCollection());
		electiveAdmission.getReferral().getAdmissions().add(admissionDetails);
		
		
		// WDEV-18304  WDEV-18686 - code moved to impl 
//		if (!ElectiveListReason.DIAGNOSTIC.equals(electiveAdmission.getElectiveListReason()))
//		{
//			if (electiveAdmission.getPathwayClock() != null)
//				electiveAdmission.getPathwayClock().setStopDate(form.dtimAdmit().getValue() != null ? form.dtimAdmit().getValue().getDate() : null);
//		}
		
		admissionDetails.setAdmissionDateTime(form.dtimAdmit().getValue());
		admissionDetails.setWard(form.cmbWard().getValue());
		admissionDetails.setAdmissionWard(form.cmbWard().getValue());
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() != null)
			admissionDetails.setBed(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());

		if (form.qmbConsultant().getValue() != null)
			admissionDetails.setConsultant(domain.getMedic(new HcpRefVo(form.qmbConsultant().getValue().getIMosHcpId(), 0)));
		else
			admissionDetails.setConsultant(null);

		admissionDetails.setSourceOfEmergencyReferral(form.cmbSourceOfEmergencyReferral().getValue());
		admissionDetails.setSpecialty(form.cmbSpecialty().getValue());
		admissionDetails.setWardType(form.cmbWardType().getValue());
		admissionDetails.setMethodOfAdmission(form.cmbMethod().getValue());
		admissionDetails.setSourceOfAdmission(form.cmbSource().getValue());
		admissionDetails.setReasonForAdmission(form.txtReason().getValue());
		admissionDetails.setEstDischargeDate(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? form.dtimEstDischarge().getValue() : (form.dteEstDischarge().getValue() != null ? new DateTime(form.dteEstDischarge().getValue(), new Time(0,0)) : null));
		admissionDetails.setIsChaplainRequired(form.chkChaplain().getValue());
		admissionDetails.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
		admissionDetails.setPatientStatus(form.cmbPatientStatus().getValue());
		admissionDetails.setAnticipatedStay(form.intAntStay().getValue());
		//wdev-20362
		admissionDetails.setUpdateCFL(form.CaseFolderYesNo().getValue() != null && form.CaseFolderYesNo().getValue().equals(CaseFolderYesNoEnumeration.rdoYes));
		
		return electiveAdmission;
	}


	
	private boolean isAdmissionDateInBreachOfRule28Days(DateTime admissionDateTime, PatientElectiveListBedAdmissionVo electiveAdmission)
	{
		if (admissionDateTime == null)
			return false;
		
		if (electiveAdmission.getRule28DayPeriodStart() == null)
			return false;
		
		if (admissionDateTime.getDate().isGreaterThan(electiveAdmission.getRule28DayPeriodStart().addDay(RULE_28_DAYS_PERIOD)))
			return true;
		
		return false;
	}

	//http://jira/browse/WDEV-22615
	private PasEventAdmitVo getPasEvent()
	{
		if(form.lyrAdmission().tabBooked().isVisible()
			&& form.lyrAdmission().tabBooked().grdElective().getValue() != null)
		{
			return form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent();
		}
		else if (form.lyrAdmission().tabEDEmergency().isVisible()
			&&form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null 
			&& form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmissionIsNotNull())
		{
				return form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEvent();
		}
		else if(form.lyrAdmission().tabPlanned().isVisible()
			&&form.lyrAdmission().tabPlanned().grdTCI().getValue() != null)
		{
			return form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent();
		}
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{
			CatsReferralPendingAdmissionAdmitVo pendingEmergencyAdmission = domain.getPendingEmergencyAdmission(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue());
			if (pendingEmergencyAdmission != null&&pendingEmergencyAdmission.getCareContext()!=null)
			{
				// Set the Pas Event
				return pendingEmergencyAdmission.getCareContext().getPasEvent();
			}
		}
		return null;
	}
	
	//http://jira/browse/WDEV-22615
	private AdmissionDetailVo getAdmissionDetailForPendingNoED()
	{
		if (form.lyrAdmission().tabPendingEmergency().isVisible()
			&&form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().getRepatriationRequestIsNotNull()
			&&form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().getRepatriationRequest().getAdmissionDetailIsNotNull())
		{
			return domain.getAdmissionDetails(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().getRepatriationRequest().getAdmissionDetail());
		}
		return null;
	}
	
	@Override
	protected AdmissionDetailVo populateDataFromScreen(AdmissionDetailVo admissionDetail) 
	{
		//http://jira/browse/WDEV-22615
		PasEventAdmitVo pasEvent = getPasEvent();
		if(admissionDetail==null&&pasEvent!=null) ///WDEV-22615
		{
			admissionDetail=domain.getAdmissionDetailByPasEvent(pasEvent);
		}
		
		if (admissionDetail == null) //http://jira/browse/WDEV-22615
		{
			admissionDetail = getAdmissionDetailForPendingNoED();
		}
		
		if (admissionDetail == null)
		{
			admissionDetail = new AdmissionDetailVo();
		}
		
		//for Inwaiting tab retrieve admissiondetail from localcontext and use instead of new
		admissionDetail =  super.populateDataFromScreen(admissionDetail);
		admissionDetail.setService(form.qmbService().getValue());
		admissionDetail.setConsultant(form.qmbConsultant().getValue());
		admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());//WDEV-20223
		admissionDetail.setSourceOfEmergencyReferral(form.cmbSourceOfEmergencyReferral().getValue());
		
		//WDEV-12957
		admissionDetail.setUpdateCFL(form.CaseFolderYesNo().getValue() != null && form.CaseFolderYesNo().getValue().equals(CaseFolderYesNoEnumeration.rdoYes));
		//WDEV-21027
		admissionDetail.setWard(form.cmbWard().getValue());
		admissionDetail.setAdmissionWard(form.cmbWard().getValue());
		
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
			admissionDetail.setAdmissionEpisode(form.cmbEpisode().getValue());
		//WDEV-20349
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.lyrAdmission().tabPendingEmergency().isVisible())
			admissionDetail.setSelfAdmitPatient(form.chkSelfAdmitPatient().getValue());
		
		
		if(form.lyrAdmission().tabBooked().isVisible())
		{
			if(form.lyrAdmission().tabBooked().grdElective().getValue() != null)
				admissionDetail.setPasEvent(form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent());
			
			//WDEV-12930
			if(admissionDetail.getPasEventIsNotNull())
				admissionDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				admissionDetail.getPasEvent().setPASSpecialty(form.cmbCCOSpecialty().getValue());
				admissionDetail.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.cmbCCOSpecialty().getValue()));
				admissionDetail.setSpecialty(admissionDetail.getPasEvent().getSpecialty());
			}
			else
				admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
			
			admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
			if (form.ccReferringConsultant().getValue() != null)
				admissionDetail.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
		}
		else if (form.lyrAdmission().tabEDEmergency().isVisible())
		{
			if(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmissionIsNotNull())
				admissionDetail.setPasEvent(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEvent());

			//WDEV-12930
			if(admissionDetail.getPasEventIsNotNull())
				admissionDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
			admissionDetail.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
			admissionDetail.setService(form.qmbService().getValue()); //WDEV-20900
			if (admissionDetail.getPasEventIsNotNull())
			{	
				admissionDetail.getPasEvent().setService(form.qmbService().getValue());
				admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
			}	
		}
		else if(form.lyrAdmission().tabPlanned().isVisible())
		{
			if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null)
				admissionDetail.setPasEvent(form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent());
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				admissionDetail.getPasEvent().setPASSpecialty(form.cmbCCOSpecialty().getValue());
				admissionDetail.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.cmbCCOSpecialty().getValue()));
				admissionDetail.setSpecialty(admissionDetail.getPasEvent().getSpecialty());
			}
			else
				admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());

			//WDEV-12930
			if(admissionDetail.getPasEventIsNotNull())
				admissionDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			
			admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
			if (form.ccReferringConsultant().getValue() != null)
				admissionDetail.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
			
		}
		else if(form.lyrAdmission().tabWaiting().isVisible())
		{
			if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
			{
				//WDEV-7676  create new PasEvent
				admissionDetail.setPasEvent(new PasEventAdmitVo());
				admissionDetail.getPasEvent().setConsultant(form.qmbConsultant().getValue() != null ? new MedicRefVo(form.qmbConsultant().getValue().getID_Hcp(), form.qmbConsultant().getValue().getVersion_Hcp()) : null);
				admissionDetail.getPasEvent().setEventDateTime(form.dtimAdmit().getValue());
				admissionDetail.getPasEvent().setEventType(PasEventType.INPATIENT);
				admissionDetail.getPasEvent().setLocation(form.cmbWard().getValue());
				admissionDetail.getPasEvent().setPatient(form.lyrAdmission().tabWaiting().grdPatients().getValue());
				admissionDetail.getPasEvent().setService(form.qmbService().getValue());
				
				if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
				{
					admissionDetail.getPasEvent().setPASSpecialty(form.cmbCCOSpecialty().getValue());
					admissionDetail.getPasEvent().setSpecialty(domain.getCCOSpecialtyMappingFromPASSpecialty(form.cmbCCOSpecialty().getValue()));
					admissionDetail.setSpecialty(admissionDetail.getPasEvent().getSpecialty());
				}
				else
					admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
				
				//patient id will be null if the ConfigFlag - PatientSearchType is set to DTO
				if(admissionDetail.getPasEvent().getEventDateTimeIsNotNull() && form.lyrAdmission().tabWaiting().grdPatients().getValue().getID_PatientIsNotNull())
					admissionDetail.getPasEvent().setPasEventId(form.lyrAdmission().tabWaiting().grdPatients().getValue().getID_Patient().toString() + admissionDetail.getPasEvent().getEventDateTime().toString(DateTimeFormat.ISO));
				
				admissionDetail.getPasEvent().setSourceOfReferral(form.cmbSourceOfReferral().getValue());

				admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
				
				//WDEV-12587
				if (form.ccReferringConsultant().getValue() != null)
					admissionDetail.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
				
				if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
				{	
					admissionDetail.setSelfAdmitPatient(form.chkSelfAdmitPatient().getValue());
					admissionDetail.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
				}	
			}
		}
		else if(form.lyrAdmission().tabWardAttenders().isVisible())
		{
			BookAppointmentForWardAttendersVo wardAttender = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
			if(wardAttender != null)
			{
				
				admissionDetail.setWardAppointment(wardAttender);
				admissionDetail.setPasEvent(new PasEventAdmitVo());
				admissionDetail.getPasEvent().setConsultant(form.qmbConsultant().getValue() != null ? new MedicRefVo(form.qmbConsultant().getValue().getID_Hcp(), form.qmbConsultant().getValue().getVersion_Hcp()) : null);
				admissionDetail.getPasEvent().setEventDateTime(form.dtimAdmit().getValue());
				admissionDetail.getPasEvent().setEventType(PasEventType.INPATIENT);
				admissionDetail.getPasEvent().setLocation(form.cmbWard().getValue());
				admissionDetail.getPasEvent().setPatient(wardAttender.getPatient());
				admissionDetail.getPasEvent().setService(form.qmbService().getValue());
				
				//patient id will be null if the ConfigFlag - PatientSearchType is set to DTO
				if(admissionDetail.getPasEvent().getEventDateTime() != null && wardAttender.getPatient() != null && wardAttender.getPatient().getID_Patient() != null)
					admissionDetail.getPasEvent().setPasEventId(wardAttender.getPatient().getID_Patient().toString() + admissionDetail.getPasEvent().getEventDateTime().toString(DateTimeFormat.ISO));
				
				admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
				admissionDetail.setService(form.qmbService().getValue());
				admissionDetail.getPasEvent().setService(form.qmbService().getValue()); //WDEV-20910
				admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
				
				if (form.ccReferringConsultant().getValue() != null)
					admissionDetail.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
				
				if (form.chkHealthyLodger().getValue());
					admissionDetail.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
			}
		}
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{
			CatsReferralPendingAdmissionAdmitVo pendingEmergencyAdmission = domain.getPendingEmergencyAdmission(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue());
			if (pendingEmergencyAdmission != null)
			{
				// Set the Pas Event
				if(pendingEmergencyAdmission.getCareContext().getPasEventIsNotNull())
				{
					admissionDetail.setPasEvent(pendingEmergencyAdmission.getCareContext().getPasEvent());
				}
				if (admissionDetail.getPasEventIsNotNull())
				{
					admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
					admissionDetail.getPasEvent().setService(form.qmbService().getValue());
				}
				admissionDetail.setWard(form.cmbWard().getValue());
				admissionDetail.setAdmissionWard(form.cmbWard().getValue());
				if(form.getGlobalContext().Core.getSelectedBedSpaceState() != null)
				{
					admissionDetail.setBed(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());
				}
				admissionDetail.setService(form.qmbService().getValue());
				admissionDetail.setSpecialty(form.cmbSpecialty().getValue());
				admissionDetail.setConsultant(form.qmbConsultant().getValue());
				
				admissionDetail.setWardType(form.cmbWardType().getValue());
				admissionDetail.setSourceOfAdmission(form.cmbSource().getValue());
				admissionDetail.setMethodOfAdmission(form.cmbMethod().getValue());
				admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
				
				admissionDetail.setAdmissionDateTime(form.dtimAdmit().getValue());
				admissionDetail.setAnticipatedStay(form.intAntStay().getValue());
				admissionDetail.setEstDischargeDate(form.dtimEstDischarge().getValue());
				
				admissionDetail.setSourceOfEmergencyReferral(form.cmbSourceOfEmergencyReferral().getValue());
				admissionDetail.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
				admissionDetail.setReasonForAdmission(form.txtReason().getValue());
				
				admissionDetail.setIsChaplainRequired(form.chkChaplain().getValue());
				admissionDetail.setIsMaternity(form.chkIsMaternity().getValue());
				admissionDetail.setSelfAdmitPatient(form.chkSelfAdmitPatient().getValue());
				if (form.chkHealthyLodger().getValue());
					admissionDetail.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
				if (CaseFolderYesNoEnumeration.rdoYes.equals(form.CaseFolderYesNo().getValue()))
				{
					admissionDetail.setUpdateCFL(Boolean.TRUE);
					admissionDetail.setCaseFolderComments(form.txtCaseComment().getValue());
				}
				else
				{
					admissionDetail.setUpdateCFL(Boolean.FALSE);
				}
			}
		}
		//WDEV-20371
		else if(form.lyrAdmission().tabPET().isVisible())
		{
			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrAdmission().tabPET().grdPET().getValue();
			
			if(pendingEmergencyTheatre != null)
			{
				
				admissionDetail.setPendingEmergencyTheatre(pendingEmergencyTheatre);
				admissionDetail.setPasEvent(new PasEventAdmitVo());
				admissionDetail.getPasEvent().setConsultant(form.qmbConsultant().getValue() != null ? new MedicRefVo(form.qmbConsultant().getValue().getID_Hcp(), form.qmbConsultant().getValue().getVersion_Hcp()) : null);
				admissionDetail.getPasEvent().setEventDateTime(form.dtimAdmit().getValue());
				admissionDetail.getPasEvent().setEventType(PasEventType.INPATIENT);
				admissionDetail.getPasEvent().setLocation(form.cmbWard().getValue());
				admissionDetail.getPasEvent().setPatient(pendingEmergencyTheatre.getPatient());
				admissionDetail.getPasEvent().setService(form.qmbService().getValue());
				
				//patient id will be null if the ConfigFlag - PatientSearchType is set to DTO
				if(admissionDetail.getPasEvent().getEventDateTime() != null && pendingEmergencyTheatre.getPatient() != null && pendingEmergencyTheatre.getPatient().getID_Patient() != null)
					admissionDetail.getPasEvent().setPasEventId(pendingEmergencyTheatre.getPatient().getID_Patient().toString() + admissionDetail.getPasEvent().getEventDateTime().toString(DateTimeFormat.ISO));
				
				admissionDetail.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
				admissionDetail.setService(form.qmbService().getValue());
				admissionDetail.getPasEvent().setService(form.qmbService().getValue());
				admissionDetail.setPatientStatus(form.cmbPatientStatus().getValue());
				
				if (form.ccReferringConsultant().getValue() != null)
					admissionDetail.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
				
				if (form.chkHealthyLodger().getValue());
					admissionDetail.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
			}
		}
		admissionDetail.setEstDischargeDate(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? form.dtimEstDischarge().getValue() : (form.dteEstDischarge().getValue() != null ? new DateTime(form.dteEstDischarge().getValue(), new Time(00,00,00)) : null));
		
		return admissionDetail;
	}
	
	@Override
	protected void onGrdElectiveSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		PendingElectiveAdmissionAdmitVo electiveRecordSelection = form.lyrAdmission().tabBooked().grdElective().getValue();
		if (electiveRecordSelection != null && electiveRecordSelection.getPasEvent() != null)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(electiveRecordSelection.getPasEvent().getPatient()));
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		
		if (electiveRecordSelection != null && electiveRecordSelection.getPasEvent() != null)
			setSexForSelectedpatient(electiveRecordSelection.getPasEvent().getPatient());
			
		enableInstanceControls(true);
		populateScreenFromPendingAdmissionData(electiveRecordSelection, true);
		updateCaseNoteLocationState();
		form.fireCustomControlValueChanged();
	}


	private void updateCaseNoteLocationState()//WDEV-22803
	{
		boolean isCaseNoteLocationVisible = form.getGlobalContext().Core.getPatientShortIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsCaseNoteFolderVisible());//WDEV-22839
		form.lblUpdateCasefolder().setVisible(isCaseNoteLocationVisible);
		form.CaseFolderYesNo().setVisible(isCaseNoteLocationVisible);
	}
	
	private void populateScreenFromTCI_ElectiveAdmissionData(PatientElectiveListBedAdmissionVo patientElectiveList, boolean isBooked)
	{
		form.getLocalContext().setAdmissionDetail(null);
		clearScreen();
		showExtraUIControls_ElectiveList();
		
		if (patientElectiveList == null)//WDEV-22998
			return;

		// Default in Ward to currently selected ward
		if(form.getGlobalContext().Core.getADTWardIsNotNull())
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());			
		}
		
		// Default in Service
		if (patientElectiveList.getElectiveListIsNotNull() && patientElectiveList.getElectiveList().getService() != null)//WDEV-22998
		{
			form.qmbService().newRow(patientElectiveList.getElectiveList().getService(),patientElectiveList.getElectiveList().getService().getServiceName());	
			form.qmbService().setValue(patientElectiveList.getElectiveList().getService());
		}
		//Default in consultant //WDEV-23376
		MedicVo medic = domain.getMedic(patientElectiveList.getResponsibleHCP());
		if (medic != null)
		{
    		form.qmbConsultant().newRow(medic, medic.getIMosName());
    		form.qmbConsultant().setValue(medic);
		}
		
		// Default in Speciality
		if (patientElectiveList.getElectiveListIsNotNull() && patientElectiveList.getElectiveList().getService() != null && patientElectiveList.getElectiveList().getService().getSpecialty() != null)//WDEV-22998
		{
			form.cmbSpecialty().newRow(patientElectiveList.getElectiveList().getService().getSpecialty(), patientElectiveList.getElectiveList().getService().getSpecialty().getText());
			form.cmbSpecialty().setValue(patientElectiveList.getElectiveList().getService().getSpecialty());
		}
		
		// No default on Ward Type
		// No default on Source of Admission

		// Default on Method of Admission
		form.cmbMethod().setValue(getMethodOfAdmissionFromElectiveAdmissionData(patientElectiveList));
		
		// Default for Patient Category
		if (patientElectiveList.getPatientCategory() != null)
		{
			form.cmbPatientStatus().setValue(patientElectiveList.getPatientCategory());
		}
		else
		{
			form.cmbPatientStatus().setValue(patientElectiveList.getPatient().getPatientCategory());
		}
		
		// Default Admission Date Time
		form.dtimAdmit().setValue(new DateTime());
		// Default in Anticipated stay 
		form.intAntStay().setValue(patientElectiveList.getAnticipatedStay());
		// Calculate Estimated Discharge Date Time
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), patientElectiveList.getAnticipatedStay());
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		else
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}

		// No default on Chaplain
		// No Default on Case Note Folder
	}
	
	
	
	//WDEV-20550
	private MethodOfAdmission getMethodOfAdmissionFromElectiveAdmissionData(PatientElectiveListBedAdmissionVo patientElectiveList)
	{
		if (patientElectiveList == null)
			return null;
		if (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(patientElectiveList.getElectiveAdmissionType()))
			return MethodOfAdmission.WAITING_LIST;
		if (ElectiveAdmissionType.BOOKED_TYPE12.equals(patientElectiveList.getElectiveAdmissionType()))
			return MethodOfAdmission.BOOKED;
		if (ElectiveAdmissionType.PLANNED_TYPE13.equals(patientElectiveList.getElectiveAdmissionType()))
			return MethodOfAdmission.PLANNED;
		return null;
	}


	private DateTime calculateEstimateDischarge(DateTime dateTime, Integer anticipatedStay)
	{
		if (dateTime == null || anticipatedStay == null || (anticipatedStay == 0 && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))) //WDEV-22714 
			return null;
		
		DateTime estimatedDischarge = new DateTime(dateTime);
		estimatedDischarge.addDays(anticipatedStay);

		return estimatedDischarge;
	}
	

	private void populateScreenFromPendingAdmissionData(PendingElectiveAdmissionAdmitVo voPendingAdmission, boolean isBooked) 
	{
		form.getLocalContext().setAdmissionDetail(null);
		
		clearScreen();
		if(voPendingAdmission == null)
			return;
		
		BedSpaceStateLiteVo voBedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBedSpaceState != null)
		{
			if(voBedSpaceState.getWardIsNotNull())
			{
				form.cmbWard().newRow(voBedSpaceState.getWard(), voBedSpaceState.getWard().toString());
				form.cmbWard().setValue(voBedSpaceState.getWard());
			}
			
			if(voBedSpaceState.getBedSpaceIsNotNull())
				form.cmbWardType().setValue(voBedSpaceState.getBedSpace().getWardType());
		}

		if(voPendingAdmission.getPasEventIsNotNull())
		{
			if (voPendingAdmission.getPasEvent().getConsultant() != null)
				form.qmbConsultant().setValue(domain.getMedic(voPendingAdmission.getPasEvent().getConsultant().toHcpRefVo()));
			listSpecialtiesForConsultant();
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				if(voPendingAdmission.getPasEvent().getPASSpecialtyIsNotNull())
				{
					if(!form.cmbCCOSpecialty().getValues().contains(voPendingAdmission.getPasEvent().getPASSpecialty()))
						form.cmbCCOSpecialty().newRow(voPendingAdmission.getPasEvent().getPASSpecialty(), voPendingAdmission.getPasEvent().getPASSpecialty().getText());
				}
					
				form.cmbCCOSpecialty().setValue(voPendingAdmission.getPasEvent().getPASSpecialty());
			}

			//if conspc call did not find specialty (conspc mapping was removed) add it as a value anyway
			if(voPendingAdmission.getPasEvent().getSpecialtyIsNotNull())
			{
				if(!form.cmbSpecialty().getValues().contains(voPendingAdmission.getPasEvent().getSpecialty()))
					form.cmbSpecialty().newRow(voPendingAdmission.getPasEvent().getSpecialty(), voPendingAdmission.getPasEvent().getSpecialty().getText());
			}
			
			form.cmbSpecialty().setValue(voPendingAdmission.getPasEvent().getSpecialty());
		
			//wdev-13472
			form.cmbSourceOfReferral().setValue(voPendingAdmission.getPasEvent().getSourceOfReferral());
			showExtraUIControls();
			enableInstanceControls(true);
		}

		if(form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(SourceOfReferral.CONSULTANT))
			form.ccReferringConsultant().setValue(voPendingAdmission.getReferringConsultant());

		//set defaults from spec
		form.cmbMethod().setValue(isBooked ? MethodOfAdmission.BOOKED : MethodOfAdmission.PLANNED); 
		form.cmbSource().setValue(SourceOfAdmission.HOMEADDRESS);
		
		//WDEV-8444 - override defaults with those populated from booked or planned lists
		if(voPendingAdmission.getAdmissionSourceIsNotNull())
			form.cmbSource().setValue(voPendingAdmission.getAdmissionSource());
		if(voPendingAdmission.getAdmissionMethodIsNotNull())
			form.cmbMethod().setValue(voPendingAdmission.getAdmissionMethod());
		
		if (voPendingAdmission.getPatientStatus() != null)
		{
			form.cmbPatientStatus().setValue(voPendingAdmission.getPatientStatus());
		}
		else
		{
			form.cmbPatientStatus().setValue(voPendingAdmission.getPasEvent().getPatient().getPatientCategory());
		}
		
		form.dtimAdmit().setValue(new DateTime());
		//WDEV-8003
		form.intAntStay().setValue(voPendingAdmission.getExpectedStay());//wdev-13472
		
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{	
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		
		form.txtReason().setValue(voPendingAdmission.getReasonForAdmission());
		
		form.chkChaplain().setValue(false);
		
		loadEpisodes();
	}
	

	private void updateControlsState()
	{
		boolean visible_ED_EMERGENCY = form.lyrAdmission().tabEDEmergency().isVisible();
		boolean visible_HOME_LEAVE = form.lyrAdmission().tabHomeLeave().isVisible();
		boolean visible_WARD_ATTENDERS = form.lyrAdmission().tabWardAttenders().isVisible();
		boolean visible_PATIENT_EMERGENCY = form.lyrAdmission().tabWaiting().isVisible();
		boolean visible_TCI_ELECTIVE = form.lyrAdmission().tabTCI().isVisible();
		boolean visible_PENDING_EMERGENCIES = form.lyrAdmission().tabPendingEmergency().isVisible();
		boolean visible_IN_WAITING = form.lyrAdmission().tabInWaiting().isVisible();
		boolean visible_PENDING_EMERGENCY_THEATRE = form.lyrAdmission().tabPET().isVisible() ;
		
		
		form.cmbWard().setEnabled(false);
		form.cmbWard().setVisible(!visible_HOME_LEAVE);
		form.lblWard().setVisible(!visible_HOME_LEAVE);
		
		
		form.lblService().setVisible(!visible_HOME_LEAVE);
		form.qmbService().setVisible(!visible_HOME_LEAVE);
		
		form.lblSpecialty().setVisible(!visible_HOME_LEAVE);
		form.cmbSpecialty().setVisible(!visible_HOME_LEAVE);
		form.cmbSpecialty().setEnabled(false);
		
		form.lblConsultant().setVisible(!visible_HOME_LEAVE);
		form.qmbConsultant().setVisible(!visible_HOME_LEAVE);
		
		form.lblPatientStatus().setVisible(!visible_HOME_LEAVE);
		form.cmbPatientStatus().setVisible(!visible_HOME_LEAVE);
		
		form.lblAntStay().setVisible(!visible_HOME_LEAVE);
		form.intAntStay().setVisible(!visible_HOME_LEAVE);
		
		form.lblSourceOfEmergencyReferral().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && (visible_PATIENT_EMERGENCY || visible_ED_EMERGENCY || visible_WARD_ATTENDERS || visible_PENDING_EMERGENCIES || visible_IN_WAITING || visible_PENDING_EMERGENCY_THEATRE));
		form.cmbSourceOfEmergencyReferral().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && (visible_PATIENT_EMERGENCY || visible_ED_EMERGENCY || visible_WARD_ATTENDERS || visible_PENDING_EMERGENCIES || visible_IN_WAITING || visible_PENDING_EMERGENCY_THEATRE));
		
		form.lblSourceOfReferral().setVisible(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") || (!visible_HOME_LEAVE && !visible_TCI_ELECTIVE && !visible_PATIENT_EMERGENCY && !visible_WARD_ATTENDERS && !visible_ED_EMERGENCY && !visible_PENDING_EMERGENCIES && !visible_IN_WAITING && !visible_PENDING_EMERGENCY_THEATRE));
		form.cmbSourceOfReferral().setVisible(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") || (!visible_HOME_LEAVE && !visible_TCI_ELECTIVE && !visible_PATIENT_EMERGENCY && !visible_WARD_ATTENDERS && !visible_ED_EMERGENCY && !visible_PENDING_EMERGENCIES && !visible_IN_WAITING && !visible_PENDING_EMERGENCY_THEATRE));
		
		form.lblReasonForAdmission().setVisible(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") || (!visible_ED_EMERGENCY && !visible_HOME_LEAVE && !visible_WARD_ATTENDERS && !visible_PATIENT_EMERGENCY && !visible_TCI_ELECTIVE && !visible_PENDING_EMERGENCIES && !visible_IN_WAITING && !visible_PENDING_EMERGENCY_THEATRE));
		form.txtReason().setVisible(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") || (!visible_ED_EMERGENCY && !visible_HOME_LEAVE && !visible_WARD_ATTENDERS && !visible_PATIENT_EMERGENCY && !visible_TCI_ELECTIVE && !visible_PENDING_EMERGENCIES && !visible_IN_WAITING && !visible_PENDING_EMERGENCY_THEATRE));
		
		boolean fromOtherEmergency = SourceOfEmergencyReferral.OTHER_EMERGENCY_ADMISSION.equals(form.cmbSourceOfEmergencyReferral().getValue());
		
		form.lblSelfAdmitPatient().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && (visible_PATIENT_EMERGENCY || visible_PENDING_EMERGENCIES)
													&& (fromOtherEmergency));
		form.chkSelfAdmitPatient().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && (visible_PATIENT_EMERGENCY || visible_PENDING_EMERGENCIES)
													&& (fromOtherEmergency));
		form.chkHealthyLodger().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && !visible_HOME_LEAVE);
		form.lblHealthyLodger().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && !visible_HOME_LEAVE);
		form.imbHealthyLodger().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && !visible_HOME_LEAVE && (form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull() || (form.getLocalContext().getAdmissionDetailIsNotNull() && form.getLocalContext().getAdmissionDetail().getHealthyLodgerDetailsIsNotNull() && visible_IN_WAITING)));
		form.imbHealthyLodger().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && !visible_HOME_LEAVE && form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull() || (form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull() || (form.getLocalContext().getAdmissionDetailIsNotNull() && form.getLocalContext().getAdmissionDetail().getHealthyLodgerDetailsIsNotNull() && visible_IN_WAITING)));
		
		// Update context menus
		updateContextMenus(visible_ED_EMERGENCY,visible_HOME_LEAVE, visible_TCI_ELECTIVE);
		boolean isCaseNoteLocationVisible =form.getGlobalContext().Core.getPatientShortIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsCaseNoteFolderVisible());//WDEV-22839
		form.lblUpdateCasefolder().setVisible(!visible_HOME_LEAVE && isCaseNoteLocationVisible);//WDEV-22803
		form.CaseFolderYesNo().setVisible(!visible_HOME_LEAVE && isCaseNoteLocationVisible);//WDEV-22803
		if (visible_IN_WAITING && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")) //WDEV-20982
			form.cmbWardType().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getRecordSelected()));
	}


	private void updateContextMenus(boolean isOnEDview, boolean isOnHomeLeaveView,	boolean isOnElectiveTCIView)
	{
		form.getContextMenus().Core.hideAllPendingEmergencyAdmissionCMMenuItems();
		form.getContextMenus().Core.hideAllElectiveListTCIAdmissionMenuItems();
		form.getContextMenus().Core.hideAllBedManagementHomeLeaveMenuItems();
		
		form.getContextMenus().Core.getPendingEmergencyAdmissionCMVIEW_DTAItem().setVisible(isOnEDview && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null);
		form.getContextMenus().Core.getElectiveListTCIAdmissionVIEWItem().setVisible(isOnElectiveTCIView && form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() != null);
		form.getContextMenus().Core.getBedManagementHomeLeaveCANCEL_HOME_LEAVEItem().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && isOnHomeLeaveView && form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() != null);
	}


	private void populateScreenFrom_PendingEmergencyData(CatsReferralPendingEmergencyNonEDAdmissionListVo pendingAdmission)
	{
		clearScreen();
		
		// Default ward from Pending Emergency Admission
		if (form.getGlobalContext().Core.getADTWard() != null)
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().getName());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());
		}
		
		// Default Service from Pending Emergency Admission
		if (pendingAdmission != null && pendingAdmission.getRepatriationRequest() != null && pendingAdmission.getRepatriationRequest().getService() != null)
		{
			form.qmbService().newRow(pendingAdmission.getRepatriationRequest().getService(), pendingAdmission.getRepatriationRequest().getService().getServiceName());
			form.qmbService().setValue(pendingAdmission.getRepatriationRequest().getService());
		}
		
		// Default Speciality from service of Pending Emergency Admission
		if (pendingAdmission != null && pendingAdmission.getRepatriationRequest().getService() != null && pendingAdmission.getRepatriationRequest().getService() != null)
		{
			form.cmbSpecialty().newRow(pendingAdmission.getRepatriationRequest().getService().getSpecialty(), pendingAdmission.getRepatriationRequest().getService().getSpecialty().getText());
			form.cmbSpecialty().setValue(pendingAdmission.getRepatriationRequest().getService().getSpecialty());
		}
		
		// Consultant to be pulled through from the record Taunton P1-481 //WDEV-22079
		if (pendingAdmission != null && pendingAdmission.getReferralDetailsIsNotNull())
		{
			MedicVo pendingAdmissionConsultant = domain.getMedic(pendingAdmission.getReferralDetails().getConsultant());
			if (pendingAdmissionConsultant != null)
			{	
				form.qmbConsultant().newRow(pendingAdmissionConsultant,pendingAdmissionConsultant.getIMosName());
				form.qmbConsultant().setValue(pendingAdmissionConsultant);
			}
		}
		// Do not default Ward Type
		// Do not default Source of Admission
		
		// Default Method of Admission to 
		form.cmbMethod().setValue(MethodOfAdmission.EMERGENCY);
		
		// Default Patient Category from Pending Emergency Admission or from Patient
		if (pendingAdmission != null) //WDEV-22272
		{
			if (pendingAdmission.getRepatriationRequest() != null && pendingAdmission.getRepatriationRequest().getCategory() != null)
			{
				form.cmbPatientStatus().setValue(pendingAdmission.getRepatriationRequest().getCategory());
			}
			else if (pendingAdmission.getPatientIsNotNull() && pendingAdmission.getPatient().getPatientCategory() != null)
			{	
				form.cmbPatientStatus().setValue(pendingAdmission.getPatient().getPatientCategory());
			}
			else
			{
				form.cmbPatientStatus().setValue(PatientStatus.NHS);
			}
			//WDEV-22272
		}
		
		// Admit Date Time - default to current date time
		form.dtimAdmit().setValue(new DateTime());
		// Do not default Anticipated Stay
		// Estimated Discharge Date Time will be calculated based on Admit DateTime + Anticipated Stay
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		// Do not default chaplain
		// Default Source of Emergency Referral to 
		if (pendingAdmission != null && pendingAdmission.getRepatriationRequest() != null)
		{
			if (PendingEmergencyAdmissionType.GP.equals(pendingAdmission.getRepatriationRequest().getType()))
			{
				form.cmbSourceOfEmergencyReferral().setValue(SourceOfEmergencyReferral.GENERAL_PRACTITIONER);
			}
			else if (PendingEmergencyAdmissionType.CLINICAL_NEED.equals(pendingAdmission.getRepatriationRequest().getType())
						|| PendingEmergencyAdmissionType.REQUEST_FOR_REPATRIATION.equals(pendingAdmission.getRepatriationRequest().getType()))
			{
				form.cmbSourceOfEmergencyReferral().setValue(SourceOfEmergencyReferral.TRANSFER_FROM_HOSPITAL_PROVIDER);
			}
			//WDEV-21317
			else if (PendingEmergencyAdmissionType.OTHER.equals(pendingAdmission.getRepatriationRequest().getType()))
			{
				form.cmbSourceOfEmergencyReferral().setValue(pendingAdmission.getRepatriationRequest().getSourceOfEmergencyReferral());
			}
		}
		
		// Do not default on Update Case Note Folder Location
	}
	

	private void populateScreenFrom_ED_EmergencyData(PendingEmergencyAdmissionAdmitVo pendingEDAdmission)
	{
		clearScreen();
		if (pendingEDAdmission == null)
			return;
		
		// Default ward from Pending ED Admission
		// Default in current ward
		if(form.getGlobalContext().Core.getADTWardIsNotNull())
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());			
		}
		
		// Default Service from PendingEmergencyAdmission
		if (pendingEDAdmission != null && pendingEDAdmission.getService() != null)
		{
			form.qmbService().newRow(pendingEDAdmission.getService(), pendingEDAdmission.getService().getServiceName());
			form.qmbService().setValue(pendingEDAdmission.getService());
		}
		
		// Default Speciality from service of PendingEmergencyAdmission
		if (pendingEDAdmission != null && pendingEDAdmission.getService() != null && pendingEDAdmission.getService().getSpecialty() != null)
		{
			form.cmbSpecialty().newRow(pendingEDAdmission.getService().getSpecialty(), pendingEDAdmission.getService().getSpecialty().getText());
			form.cmbSpecialty().setValue(pendingEDAdmission.getService().getSpecialty());
		}
		
		// Do not default Consultant
		// Do not default Ward Type
		// Do not default Source of Admission

		// Default Method of Admission to 21 (Emergency)
		form.cmbMethod().setValue(MethodOfAdmission.EMERGENCY);
		
		// Default Patient Category to the one from patient
		form.cmbPatientStatus().setValue(pendingEDAdmission.getPasEvent().getPatient().getPatientCategory());
		
		// Admit Date Time - default to current date time
		form.dtimAdmit().setValue(new DateTime());
		// Do not default Anticipated Stay
		// Estimated Discharge Date Time will be calculated based on Admit DateTime + Anticipated Stay
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		
		// Do not default chaplain
		// Default Source of Emergency Referral to 21 - 'Accident and Emergency'
		form.cmbSourceOfEmergencyReferral().setValue(SourceOfEmergencyReferral.ACCIDENT_EMERGENCY);
		
		// Do not default on Update Case Note Folder Location

		// Default category from patient record
		form.cmbPatientStatus().setValue(pendingEDAdmission != null && pendingEDAdmission.getPasEventIsNotNull() && pendingEDAdmission.getPasEvent().getPatientIsNotNull() ? pendingEDAdmission.getPasEvent().getPatient().getPatientCategory() : null);
	}

	@Override
	protected void onGrdTCISelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		PendingElectiveAdmissionAdmitVo electiveTCISelection = form.lyrAdmission().tabPlanned().grdTCI().getValue();
		if (electiveTCISelection != null && electiveTCISelection.getPasEvent() != null)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(electiveTCISelection.getPasEvent().getPatient()));
			setSexForSelectedpatient(electiveTCISelection.getPasEvent().getPatient());
		}
		
		enableInstanceControls(true);
		populateScreenFromPendingAdmissionData(electiveTCISelection, false);
		form.fireCustomControlValueChanged();
	}
	
	protected void onGrdTCI_ElectiveSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		//WDEV-18533 
		if(form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() != null && form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatientIsNotNull())
		{
			PatientShort patientShort = domain.getPatientShort(form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient());
			form.getLocalContext().setPatientShortForTCIEntry(patientShort);
			form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(patientShort));//WDEV-22803
			setSexForSelectedpatient(form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient());
		}	
		enableInstanceControls(true);
		form.getLocalContext().setTCIElectiveAdmission(domain.getPatientElectiveAdmission(form.lyrAdmission().tabTCI().grdTCI_Elective().getValue()));		

		populateScreenFromTCI_ElectiveAdmissionData(form.getLocalContext().getTCIElectiveAdmission(), false);
		form.fireCustomControlValueChanged();
		updateControlsState();
		
	}


	@Override
	protected void clearScreen() 
	{
		form.qmbService().clear();
		form.qmbConsultant().clear();
		form.cmbCCOSpecialty().clear();
		form.cmbSpecialty().clear(); //WDEV-16214
		form.cmbSourceOfEmergencyReferral().setValue(null);
		form.cmbSourceOfReferral().setValue(null);
		form.cmbPatientStatus().setValue(null);
		form.chkIsMaternity().setValue(false);
		
		//WDEV-12587
		form.ccReferringConsultant().clear();
		
		//WDEV-12957
		form.CaseFolderYesNo().setValue(CaseFolderYesNoEnumeration.None);
		
		//WDEV-12957
		form.ccReferringConsultant().setVisible(false);
		form.lblReferringConsultant().setVisible(false);
		
		//WDEV-13001
		form.cmbEpisode().clear();
		
		//WDEV-13130
		form.intAntStay().setValue(null);
		form.dtimEstDischarge().setValue(null);
		form.chkSelfAdmitPatient().setValue(false);
		form.chkHealthyLodger().setValue(false);
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		
		clearHomeLeaveInstanceControls();
		super.clearScreen();
	}
	private void clearHomeLeaveInstanceControls()
	{
		form.dteHLDateReturn().setValue(null);
		form.timHLTimeOfReturn().setValue(null);	
	}
	
	private void initialiseGridColumns() 
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.lyrAdmission().tabBooked().grdElective().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabEDEmergency().grdEmergency().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabPlanned().grdTCI().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabWaiting().grdPatients().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabInWaiting().grdInWaiting().setColDisplayIdCaption(dispIdType.getText());//wdev-14819
		form.lyrAdmission().tabHomeLeave().grdHomeLeave().setColDisplayIdCaption(dispIdType.getText());
		form.lyrAdmission().tabWardAttenders().grdWardAttenders().setColIdentifierCaption(dispIdType.getText());
		form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().setColNHSCaption(dispIdType.getText());
		form.lyrAdmission().tabPET().grdPET().setColIdentifierCaption(dispIdType.getText());
		form.lyrAdmission().tabTCI().grdTCI_Elective().setColNHSCaption(dispIdType.getText()); //WDEV-21123
	}
	
	private void populateTCITabFromData(Date fromDate, Date toDate, boolean showNoResultsFoundMessage)
	{
		form.getLocalContext().setRecordSelected(false);
		form.lyrAdmission().tabBooked().grdElective().getRows().clear();
		
		PatientElectiveListBedInfoVoCollection patientElectives = null;
		BedSpaceStateLiteVo bed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		if (bed != null)
		{
			if( form.lyrAdmission().tabTCI().GroupTCI().getValue().equals(GroupTCIEnumeration.rdoCurrentWard))		//wdev-19361
				patientElectives = domain.listPatientElective(bed.getWard(), fromDate, toDate,null);
			else
			{
				patientElectives = domain.listPatientElective(null, fromDate, toDate, domain.getHospitalLoc(bed.getWard()));								//wdev-19361
			}
		}
		
		if (patientElectives == null || patientElectives.size() == 0)
		{
			if (showNoResultsFoundMessage)
				engine.showMessage("No results found.");
		}
		
		form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().clear();
		
		if (patientElectives == null)
		{
			form.fireCustomControlValueChanged();
			return;
		}

		populateTCIRecordsToGrid(patientElectives);

		form.fireCustomControlValueChanged();
	}


	private void populateTCIRecordsToGrid(PatientElectiveListBedInfoVoCollection patientElectives)
	{
		form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().clear();
		if (patientElectives == null)
			return;
		for (PatientElectiveListBedInfoVo patientElective : patientElectives)
		{
			grdTCI_ElectiveRow rowPatientElective = form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().newRow();


			if (patientElective.getPatient() != null)
			{
				if (patientElective.getPatient().getName() != null)
				{
					rowPatientElective.setColSurname(patientElective.getPatient().getName().getSurname());
					rowPatientElective.setColForename(patientElective.getPatient().getName().getForename());
				}

				if (patientElective.getPatient().getDisplayId() != null)
					rowPatientElective.setColNHS(patientElective.getPatient().getDisplayId().getValue());

				rowPatientElective.setColSex(patientElective.getPatient().getSexIsNotNull() ? patientElective.getPatient().getSex().getText() : "");//WDEV-19705
				rowPatientElective.setColDOB(patientElective.getPatient().getDob());
				rowPatientElective.setColAge(patientElective.getPatient().calculateAge());
			}
			//WDEV-20346
			if (patientElective.getTCIDetailsIsNotNull())
			{
				rowPatientElective.setColTCIDate(patientElective.getTCIDetails().getTCIDateIsNotNull() ? (patientElective.getTCIDetails().getTCITimeIsNotNull() ? new DateTime(patientElective.getTCIDetails().getTCIDate(), patientElective.getTCIDetails().getTCITime()).toString() : patientElective.getTCIDetails().getTCIDate().toString()) : "" );
			}
			if (hasAnyComments(patientElective))
			{
				rowPatientElective.setColComments(form.getImages().Core.Comment16);
				rowPatientElective.setCellColCommentsTooltip(getCommentsDisplay(patientElective));
			}
			//WDEV-20346   -- ends here
			rowPatientElective.setValue(patientElective);
		}
	}


	private String getCommentsDisplay(PatientElectiveListBedInfoVo patientElective)
	{
		StringBuilder commmentDisplay = new StringBuilder();
		
		if (patientElective.getCommentsIsNotNull())
			commmentDisplay.append("<b>Elective List Comments:</b> " + patientElective.getComments() + " <br/>");
		if (patientElective.getPreAssessmentOutcomeIsNotNull() && patientElective.getPreAssessmentOutcome().getGeneralCommentsIsNotNull())
		{	
			commmentDisplay.append("<b>Pre-Assessment Comments:</b> " + patientElective.getPreAssessmentOutcome().getGeneralComments() + " <br/>");
		}	
		if (patientElective.getTCIDetailsIsNotNull())
		{
			if (patientElective.getTCIDetails().getCommentsIsNotNull())
				commmentDisplay.append("<b>TCI Booking Comments:</b> " + patientElective.getTCIDetails().getComments() + " <br/>");
			if (patientElective.getTCIDetails().getBedManagerCommentIsNotNull())
				commmentDisplay.append("<b>TCI Bed Manager Comments:</b> " + patientElective.getTCIDetails().getBedManagerComment() + " <br/>");
		}
		
		return commmentDisplay.toString();
	}


	private static boolean hasAnyComments(PatientElectiveListBedInfoVo patientElective)
	{
		if (patientElective == null)
			return false;
		
		return patientElective.getCommentsIsNotNull() || (patientElective.getPreAssessmentOutcomeIsNotNull() && patientElective.getPreAssessmentOutcome().getGeneralComments() != null)|| (patientElective.getTCIDetailsIsNotNull() && (patientElective.getTCIDetails().getCommentsIsNotNull() || patientElective.getTCIDetails().getBedManagerCommentIsNotNull()));
	}


	private void populateBookedTabFromData() 
	{
		form.getLocalContext().setRecordSelected(false);
		form.lyrAdmission().tabBooked().grdElective().getRows().clear();
		
		PendingElectiveAdmissionAdmitVoCollection voCollPendingElectiveAdmission = null;
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if(voBed != null)
		{
			
			voCollPendingElectiveAdmission = domain.listPendingElectiveAdmission( voBed.getWard() );
			if(voCollPendingElectiveAdmission == null || voCollPendingElectiveAdmission.size() == 0)
				return;
		}
		
		if(voCollPendingElectiveAdmission == null)
			return;
		
		for(PendingElectiveAdmissionAdmitVo voPendingElectiveAdmission : voCollPendingElectiveAdmission)
		{
			grdElectiveRow row = form.lyrAdmission().tabBooked().grdElective().getRows().newRow();
			
			PatientLite_IdentifiersVo patient = (voPendingElectiveAdmission.getPasEventIsNotNull() && voPendingElectiveAdmission.getPasEvent().getPatientIsNotNull()) ? voPendingElectiveAdmission.getPasEvent().getPatient() : null;
			if(patient != null)
			{
				if(patient.getNameIsNotNull())
				{
					row.setColForename(patient.getName().getForename());
					row.setColSurname(patient.getName().getSurname());
				}
				
				PatientId patId = patient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(patient.getSexIsNotNull() ? patient.getSex().toString() : null);
				
				Integer age = patient.calculateAge();
				if(age != null)
					row.setColAge(patient.calculateAgeText());
				
				row.setColDOB(patient.getDobIsNotNull() ? patient.getDob().toString() : null);
				
				if (patient.getAssociatedPatientIsNotNull())	//wdev-13105
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if (patient.getDodIsNotNull())		//wdev-13105
				{	
					row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
					row.setTooltip(getRIPInfo(patient));
				}	
					
			}
			row.setValue(voPendingElectiveAdmission);
		}
		
		form.fireCustomControlValueChanged();
	}
	

	private void populatehomeLeaveTabFromData() 
	{
		form.getLocalContext().setRecordSelected(false);
		
		form.lyrAdmission().tabHomeLeave().grdHomeLeave().getRows().clear();
		
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (voBed == null)
		{
			form.fireCustomControlValueChanged();
			return;
		}

		InpatientEpisodeLiteVoCollection voColl = domain.listHomeLeavesByWard(voBed.getWard());
			
		if(voColl == null || voColl.size() == 0)
		{
			form.fireCustomControlValueChanged();
			return;
		}
		
		populateHomeLeavesToGrid(voColl);	
		
		form.fireCustomControlValueChanged();
	}


	private void populateHomeLeavesToGrid(InpatientEpisodeLiteVoCollection voColl)
	{
		form.lyrAdmission().tabHomeLeave().grdHomeLeave().getRows().clear();
		if (voColl == null)
			return;
		
		for(InpatientEpisodeLiteVo voIP : voColl)
		{
			grdHomeLeaveRow row = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getRows().newRow();
			
			PatientLite_IdentifiersVo patient = (voIP.getPasEventIsNotNull() && voIP.getPasEvent().getPatientIsNotNull()) ? voIP.getPasEvent().getPatient() : null;
			if(patient != null)
			{
				if(patient.getNameIsNotNull())
				{
					row.setColForename(patient.getName().getForename());
					row.setColSurname(patient.getName().getSurname());
				}
				
				PatientId patId = patient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(patient.getSexIsNotNull() ? patient.getSex().toString() : null);
				
				Integer age = patient.calculateAge();
				if(age != null)
					row.setColAge(patient.calculateAgeText());
				
				row.setColDob(patient.getDobIsNotNull() ? patient.getDob().toString() : null);
				
				if(patient.getAssociatedPatientIsNotNull())					//wdev-13105
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if (patient.getDodIsNotNull())//wdev-13105
				{	
					row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
					row.setTooltip(getRIPInfo(patient));
				}	
			}
			row.setValue(voIP);
		}
	}

	private void hideAllControls(boolean bHide)
	{
		form.dtimAdmit().setVisible(bHide);
		form.txtReason().setVisible(bHide);
		form.cmbWardType().setVisible(bHide);
		form.cmbSource().setVisible(bHide);
		form.cmbMethod().setVisible(bHide);
		
		if (ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue() && bHide) //WDEV-14879
		{
			form.lblEpisode().setVisible(true);
			form.cmbEpisode().setVisible(true);
		}
		else
		{
			form.lblEpisode().setVisible(false);
			form.cmbEpisode().setVisible(false);
		}
		form.cmbPatientStatus().setVisible(bHide);
		form.dteEstDischarge().setVisible(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? bHide : false);
		form.dtimEstDischarge().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? bHide : false);
		form.chkChaplain().setVisible(bHide);
		form.lblChaplain().setVisible(bHide);
		
		form.lblMaternity().setVisible(form.lyrAdmission().tabWaiting().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST") ? bHide : false);
		form.chkIsMaternity().setVisible(form.lyrAdmission().tabWaiting().isVisible() && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST") ? bHide : false);
		
		//WDEV-20325
		form.cmbCCOSpecialty().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO") && bHide);
			
		form.lblConsultant().setVisible(bHide);
		form.lblSpecialty().setVisible(bHide);
		form.lblAdmitDateTime().setVisible(bHide);
		form.lblReasonForAdmission().setVisible(bHide);
		form.lblWardType().setVisible(bHide);
		form.lblSourceOfAdmission().setVisible(bHide);
		form.lblMethod().setVisible(bHide);
		form.lblPatientStatus().setVisible(bHide);
		form.lblEstDischDate().setVisible(bHide);
		
		updateControlsState();
	}

	private void showExtraUIControls()
	{
		form.lblUpdateCasefolder().setVisible(true);
		form.CaseFolderYesNo().setVisible(true);
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.lblAntStay().setVisible(true);
			form.intAntStay().setVisible(true);
			form.lblCaseComment().setVisible(true);
			form.txtCaseComment().setVisible(true);
			form.txtCaseComment().setEnabled(false);
			form.lblUpdateCasefolder().setVisible(true);
			form.CaseFolderYesNo().setVisible(true);
			
			form.lblSourceOfReferral().setVisible(true);
			form.cmbSourceOfReferral().setVisible(true);			
		}
		if(!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
		{
			form.lblPatientStatus().setVisible(true);
			form.cmbPatientStatus().setVisible(true);
		}
		
		boolean isLayoutCCO = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO");
		boolean isLayoutWhinston = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST");
		boolean consultantSelected = SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue());

		form.ccReferringConsultant().setVisible(consultantSelected && (isLayoutCCO || (isLayoutWhinston && form.lyrAdmission().tabWaiting().isVisible())));
		form.lblReferringConsultant().setVisible(consultantSelected && (isLayoutCCO || (isLayoutWhinston && form.lyrAdmission().tabWaiting().isVisible())));
		form.ccReferringConsultant().isRequired(consultantSelected && (isLayoutCCO || (isLayoutWhinston && form.lyrAdmission().tabWaiting().isVisible()))); //?
		
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO") || ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST")) //WDEV-15999
		{
			if (!(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue())))
			{
				form.ccReferringConsultant().clear();
			
			}
		}
	}
	

	private void showExtraUIControls_ElectiveList()
	{
		boolean consultantSelected = SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue());
		boolean tciTabFunctionality = Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabTCI().isVisible();

		form.ccReferringConsultant().setVisible(consultantSelected && tciTabFunctionality);
		form.lblReferringConsultant().setVisible(consultantSelected && tciTabFunctionality);
		
		
		updateControlsState();
	}

	
	private void enableInstanceControls(boolean bEnabled)
	{
		form.qmbConsultant().setEnabled(bEnabled);
		form.chkChaplain().setEnabled(bEnabled);
		form.chkIsMaternity().setEnabled(bEnabled);
		form.cmbMethod().setEnabled(bEnabled);
		form.cmbSource().setEnabled(bEnabled);
		
		form.qmbService().setEnabled(bEnabled);
		form.cmbWardType().setEnabled(bEnabled);
		form.dtimAdmit().setEnabled(bEnabled);
		form.intAntStay().setEnabled(bEnabled);
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("WST"))
			form.dteEstDischarge().setEnabled(bEnabled);
		
		form.dtimEstDischarge().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? bEnabled : false);	

		form.txtReason().setEnabled(bEnabled);
		form.cmbSourceOfEmergencyReferral().setEnabled(bEnabled);
		form.cmbSourceOfReferral().setEnabled(bEnabled);
		form.ccReferringConsultant().setEnabled(bEnabled);
		
		form.cmbPatientStatus().setEnabled(bEnabled);
		
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
			form.cmbEpisode().setEnabled(bEnabled);

		//WDEV-8804 //WDEV-20550
		if(bEnabled)
		{
			if(form.lyrAdmission().tabBooked().isVisible() || form.lyrAdmission().tabPlanned().isVisible())
			{
				form.cmbMethod().setEnabled(false);
				form.cmbSource().setEnabled(false);
			}
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && (form.lyrAdmission().tabWaiting().isVisible() || form.lyrAdmission().tabEDEmergency().isVisible() || form.lyrAdmission().tabTCI().isVisible() || form.lyrAdmission().tabPendingEmergency().isVisible())) //WDEV-21317
			{
				form.cmbMethod().setEnabled(false);
			}
		}
		
		form.CaseFolderYesNo().setEnabled(bEnabled);
		//WDEV-12957
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			form.cmbCCOSpecialty().setEnabled(bEnabled);

			form.intAntStay().setEnabled(bEnabled);
			form.CaseFolderYesNo().setEnabled(bEnabled);
			
			if(bEnabled)
			{
				if(form.CaseFolderYesNo().getValue().equals(CaseFolderYesNoEnumeration.rdoYes))
					form.txtCaseComment().setEnabled(true);
			}
			else
				form.txtCaseComment().setEnabled(false);			
			
			if(form.lyrAdmission().tabBooked().isVisible() || form.lyrAdmission().tabPlanned().isVisible())
			{
				if(bEnabled)
					form.cmbSource().setEnabled(true);
			}
		}
		form.chkSelfAdmitPatient().setEnabled(bEnabled);
		form.chkHealthyLodger().setEnabled(bEnabled);
		form.imbHealthyLodger().setVisible(form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull());
		form.imbHealthyLodger().setEnabled(form.getGlobalContext().Core.getHealthyLodgerDetailsIsNotNull());
	}
	private void enableHomeLeaveInstanceControls(boolean bEnable)
	{
		form.dteHLDateReturn().setEnabled(bEnable);
		form.timHLTimeOfReturn().setEnabled(bEnable);
	}
	private void populateInWaitingTabFromData()
	{	
		form.getLocalContext().setRecordSelected(false);

		//load list of waiting area patients for ward
		form.getLocalContext().setAdmissionDetail(null);
		InpatientEpisodeLiteVoCollection voCollPatients = domain.listWaitingAreaPatientsByWard(form.getGlobalContext().Core.getADTWard());
		populateInWaitingGridFromData(voCollPatients);
		
		form.fireCustomControlValueChanged();
	}


	private void populateInWaitingGridFromData(InpatientEpisodeLiteVoCollection voCollPatients)
	{
		form.lyrAdmission().tabInWaiting().grdInWaiting().getRows().clear();
		if (voCollPatients == null)
			return;
		
		for (InpatientEpisodeLiteVo voInpatEpis : voCollPatients)
		{
			grdInWaitingRow row = form.lyrAdmission().tabInWaiting().grdInWaiting().getRows().newRow();
			PatientLite_IdentifiersVo patient = (voInpatEpis.getPasEventIsNotNull() && voInpatEpis.getPasEvent().getPatientIsNotNull()) ? voInpatEpis.getPasEvent().getPatient() : null;
			if(patient != null)
			{
				if(patient.getNameIsNotNull())
				{
					row.setColForename(patient.getName().getForename());
					row.setColSurname(patient.getName().getSurname());
				}
				
				PatientId patId = patient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(patient.getSexIsNotNull() ? patient.getSex().toString() : null);
				
				Integer age = patient.calculateAge();
				if (age != null)
					row.setColAge(patient.calculateAgeText());

				row.setColDob(patient.getDobIsNotNull() ? patient.getDob().toString() : null);
				
				if (patient.getAssociatedPatientIsNotNull())			//wdev-13105	
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if (patient.getDodIsNotNull())			//wdev-13105
				{	
					row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
					row.setTooltip(getRIPInfo(patient));
				}	
				
			}
			row.setValue(voInpatEpis);
		}
	}

	private void populatePlannedTabFromData()
	{
		form.getLocalContext().setRecordSelected(false);
		
		updatePlannedTabDateSearchCriteria(); //WDEV-18009 
		searchPlanned();
		
		form.fireCustomControlValueChanged();
	}
	
	private void populatePendingEmergencyTab(GroupPendingEmergenciesEnumeration toggleCurrentWardAllWards)
	{
		// Set the flag for selected record for admission to false (to disable records)
		form.getLocalContext().setRecordSelected(false);
		
		// Clear the Pending Emergency grid
		form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getRows().clear();
		// Clear & disable instance controls
		clearScreen();
		enableInstanceControls(Boolean.TRUE.equals(form.getLocalContext().getRecordSelected()));
		
		BedSpaceStateLiteVo selectedBedSpace = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (selectedBedSpace != null)
		{
			boolean currentWardSearchMode = GroupPendingEmergenciesEnumeration.rdoPendingAdmissionCurrentWard.equals(toggleCurrentWardAllWards);
			LocationRefVo selHospital = domain.getHospitalLoc(selectedBedSpace.getWard());
			populatePendingEmergencyAdmissionGrid(currentWardSearchMode ? domain.listPendingEmergencies(form.lyrAdmission().tabPendingEmergency().dtePEAFrom().getValue(), form.lyrAdmission().tabPendingEmergency().dtePEATo().getValue(), selectedBedSpace.getWard(), selHospital) : domain.listPendingEmergencies(form.lyrAdmission().tabPendingEmergency().dtePEAFrom().getValue(), form.lyrAdmission().tabPendingEmergency().dtePEATo().getValue(), null, selHospital));
		}		
		form.fireCustomControlValueChanged();
	}




	private void populatePendingEmergencyAdmissionGrid(CatsReferralPendingEmergencyNonEDAdmissionListVoCollection pendingEmergencyAdmissions)
	{
		form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getRows().clear();
		
		if (pendingEmergencyAdmissions == null)
			return;
		
		for (CatsReferralPendingEmergencyNonEDAdmissionListVo pendingAdmission : pendingEmergencyAdmissions)
		{
			grdPendingEmergencyAdmissionRow pendingEmergencyRow = form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getRows().newRow();
			
			pendingEmergencyRow.setColSurname(pendingAdmission.getPatient().getName().getSurname());
			pendingEmergencyRow.setColForename(pendingAdmission.getPatient().getName().getForename());
			
			pendingEmergencyRow.setColNHS(pendingAdmission.getPatient().getDisplayId() != null ? pendingAdmission.getPatient().getDisplayId().getValue() : "");
			pendingEmergencyRow.setColSex(pendingAdmission.getPatient().getSex() != null ? pendingAdmission.getPatient().getSex().getText() : "");
			pendingEmergencyRow.setColAge(pendingAdmission.getPatient().calculateAgeText());
			pendingEmergencyRow.setColDOB(pendingAdmission.getPatient().getDob());
			
			pendingEmergencyRow.setValue(pendingAdmission);
			
			Color rowColor = getColor(pendingEmergencyRow);//WDEV-21599
			if (!Color.Default.equals(rowColor))
				pendingEmergencyRow.setBackColor(rowColor);
		}
	}
	//WDEV-21599
	private static Color getColor(grdPendingEmergencyAdmissionRow row)
	{		
		Color color = Color.Default;
		if (row != null && row.getValue() instanceof IPendingAdmission)
		{
			if (((IPendingAdmission) row.getValue()).getPatientAssociatedPatient() != null)
				color = ConfigFlag.UI.MERGED_COLOUR.getValue();
			if (((IPendingAdmission) row.getValue()).getPatientDod() != null)
				color = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue();
		}
		return color;
	}
	private void populateEmergencyTabFromData()
	{
		form.getLocalContext().setRecordSelected(false);
		
		form.lyrAdmission().tabEDEmergency().grdEmergency().getRows().clear();
		
		TrackingForPendingEmergencyAdmitVoCollection trackingEmergencyAdmissionCollection = null;
		BedSpaceStateLiteVo voBed = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		if (voBed == null)
		{
			form.fireCustomControlValueChanged();
			return;
		}

		trackingEmergencyAdmissionCollection = domain.listEmergencyAdmission(voBed.getWard());
		
		if(trackingEmergencyAdmissionCollection == null || trackingEmergencyAdmissionCollection.size() == 0)
		{
			form.fireCustomControlValueChanged();
			return;
		}
		
		populatePendingEDAdmissionsToGrid(trackingEmergencyAdmissionCollection);	
		
		form.fireCustomControlValueChanged();
	}


	private void populatePendingEDAdmissionsToGrid(TrackingForPendingEmergencyAdmitVoCollection trackingEmergencyAdmissionCollection)
	{
		form.lyrAdmission().tabEDEmergency().grdEmergency().getRows().clear();
		if (trackingEmergencyAdmissionCollection == null)
			return;
		
		for (TrackingForPendingEmergencyAdmitVo tracking : trackingEmergencyAdmissionCollection)
		{
			grdEmergencyRow row = form.lyrAdmission().tabEDEmergency().grdEmergency().getRows().newRow();
			
			PatientLite_IdentifiersVo patient = (tracking.getAssociatedPendingEmergencyAdmission().getPasEventIsNotNull() && tracking.getAssociatedPendingEmergencyAdmission().getPasEvent().getPatientIsNotNull()) ? tracking.getAssociatedPendingEmergencyAdmission().getPasEvent().getPatient() : null;
			if (patient != null)
			{
				if(patient.getNameIsNotNull())
				{
					row.setColForename(patient.getName().getForename());
					row.setColSurname(patient.getName().getSurname());
				}
				
				PatientId patId = patient.getDisplayId();
				row.setColDisplayId(patId != null ? patId.getValue() : null);
				row.setColSex(patient.getSexIsNotNull() ? patient.getSex().toString() : null);
				
				Integer age = patient.calculateAge();
				if(age != null)
					row.setColAge(patient.calculateAgeText());
				
				row.setColDob(patient.getDobIsNotNull() ? patient.getDob().toString() : null);
				row.setColLOS(getLengthOfStay(tracking));
				
				if (patient.getAssociatedPatientIsNotNull())					//wdev-13105
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				
				if (patient.getDodIsNotNull())//wdev-13105
				{	
					row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")  ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
					row.setTooltip(getRIPInfo(patient));
				}			
			}
			
			row.setValue(tracking);			
		}
	}

	private String getLengthOfStay(TrackingForPendingEmergencyAdmitVo trackingPendingEmergency)
	{
		if (trackingPendingEmergency == null)
			return null;
		
		boolean isDischarged = trackingPendingEmergency.getAttendance() != null && trackingPendingEmergency.getAttendance().getDischargeDateTime() != null;
		DateTime registrDateTimeForLOS = trackingPendingEmergency.getAttendance() != null ? (trackingPendingEmergency.getAttendance().getEndOfRegistrationDateTimeIsNotNull() ? trackingPendingEmergency.getAttendance().getEndOfRegistrationDateTime() : trackingPendingEmergency.getAttendance().getRegistrationDateTime()) : null;
		DateTime endTimeForLOS = isDischarged ? trackingPendingEmergency.getAttendance().getDischargeDateTime() : new DateTime();

		
		Integer intLOS = null;
		String minHourLOS = null;
		
		if (ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
		{	
			intLOS = calculateDateDiffInMinutes(endTimeForLOS, registrDateTimeForLOS);
			minHourLOS = (minutesToHoursAndMinutes(intLOS));
		}	
		else
		{	
			intLOS = calculateDateDiffInMinutes(endTimeForLOS, trackingPendingEmergency.getAttendance().getArrivalDateTime());
			minHourLOS = (minutesToHoursAndMinutes(intLOS));
		}
		
		return minHourLOS;
	}

	
	private Integer calculateDateDiffInMinutes(DateTime currentTime, DateTime registrationDateTime) 
	{
		if(currentTime == null || registrationDateTime == null)
			return null;
		
		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = registrationDateTime.getJavaDate().getTime();
		
		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}


	public static String minutesToHoursAndMinutes(Integer minutes) 
	{
		if(minutes == null)
			return null;
		
		int hours = minutes/60;
		int mins = minutes%60;
		
		StringBuilder time = new StringBuilder();
		
		if(hours > 0)
		{
			time.append(hours + "h");
		}
		
		if(mins > 0)
		{
			time.append((time.length() > 0 ? " " : "") + ((mins >= 0 && mins <= 9 && time.length() > 0) ? "0" : "") + mins + "m");
		}
		
		if(time.length() > 0)
			return time.toString();
		
		return null;
	}

	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//component interface methods below here
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////


	private void clearSelection()
	{
		//clear selection from the grids
		form.lyrAdmission().tabBooked().grdElective().setValue(null);
		form.lyrAdmission().tabPlanned().grdTCI().setValue(null);
		form.lyrAdmission().tabEDEmergency().grdEmergency().setValue(null);
		form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().setValue(null);
		form.lyrAdmission().tabTCI().grdTCI_Elective().setValue(null);
		form.lyrAdmission().tabInWaiting().grdInWaiting().setValue(null);
		form.lyrAdmission().tabWardAttenders().grdWardAttenders().setValue(null);
		form.lyrAdmission().tabWaiting().grdPatients().setValue(null);
		form.lyrAdmission().tabHomeLeave().grdHomeLeave().setValue(null);
		form.lyrAdmission().tabPET().grdPET().setValue(null);
		
		form.getLocalContext().setRecordSelected(false);
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}


	public Boolean saveElectiveListEmergencyAdmission()
	{
		PatientLite_IdentifiersVo patient = form.lyrAdmission().tabWaiting().grdPatients().getValue();

		if (patient != null && patient.getDod() != null)
		{
			engine.showMessage("Deceased patients cannot be admitted",  "Info", MessageButtons.OK, MessageIcon.INFORMATION);
			return false;
		}		

		// Populate the Admission Details record
		AdmissionDetailVo admission = createAdmissionDetails(patient);

		// Get or create new Care Spell & Care Context
		CareSpellAdmitVo careSpell = getCreateCareSpell(admission.getPasEvent());
		
		// Get or create new CATS Referral
		CatsReferralEmergencyAdmissionVo catsReferral = getCreateCatsReferral(admission, careSpell);
		
		
		PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer=null;
		if (CaseFolderYesNoEnumeration.rdoYes.equals(form.CaseFolderYesNo().getValue()))
		{
			PatientCaseNoteVoCollection voCollCaseNotesFolder = domain.getCaseNoteFolders(patient,null);
			
			collPatientCaseNoteTransfer = new PatientCaseNoteTransferVoCollection();
			for (int i = 0 ; voCollCaseNotesFolder !=null && i < voCollCaseNotesFolder.size() ; i++)
			{
				//WDEV-22803
				if(CaseNoteStatus.ACTIVE.equals(voCollCaseNotesFolder.get(i).getStatus())|| CaseNoteStatus.REQUIRES_MERGING.equals(voCollCaseNotesFolder.get(i).getStatus())|| CaseNoteStatus.MARKED_AS_FOUND.equals(voCollCaseNotesFolder.get(i).getStatus()))
					collPatientCaseNoteTransfer.add(populatePatCaseNoteTransferFromScreen(voCollCaseNotesFolder.get(i), admission.getWard()));
			}
		}

		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}

		WardMixedSexBreachVo breachVo = null;
		if (Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
		{	
			breachVo = populateWardMixedSexBreach(admission, form.getGlobalContext().Core.getSelectedBedSpaceState(), form.getGlobalContext().Core.getBedRuleBreachReason(), form.getGlobalContext().Core.getMaleBedAdmissionWardCount(), form.getGlobalContext().Core.getFemaleBedAdmissionWardCount());
		}								
		
		WardStayVo voWardStay = createWardStay(form.dtimAdmit().getValue(), form.cmbPatientStatus().getValue(), form.qmbService().getValue(),form.getGlobalContext().Core.getSelectedBedSpaceState());
		
		ConsultantStayVo voConsStay = new ConsultantStayVo();
		voConsStay.setConsultant((MedicVo) (admission != null ? admission.getConsultant() : null));
		voConsStay.setTransferDateTime(admission != null  ? admission.getAdmissionDateTime() : null);
		voConsStay.setSpecialty((admission != null && admission.getPasEvent() != null) ? admission.getPasEvent().getSpecialty() : null);
		voConsStay.setPatientStatus((admission != null && admission.getPatientStatusIsNotNull()) ? admission.getPatientStatus() : null);//WDEV-20223
		
		String errors[] = admission.validate();
		errors = careSpell.validate(errors);
		errors = catsReferral.validate(errors);
		
		if (collPatientCaseNoteTransfer != null && collPatientCaseNoteTransfer.size() > 0)
		{
			errors = collPatientCaseNoteTransfer.validate(errors);
		}
		
		if (breachVo != null)
			errors = breachVo.validate(errors);
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
//		try
//		{
//			domain.saveEmergencyAdmissionInElectiveCase(admission, careSpell, catsReferral, voBedSpaceStateLite, voWardStay, voConsStay, form.getGlobalContext().Core.getBedRuleBreachReason(), breachVo, form.getLocalContext().getWardBayConfigRef(), collPatientCaseNoteTransfer);
//		}
//		catch (DomainInterfaceException e) 
//		{
//			engine.showMessage(e.getMessage());
//			initialise();
//			clearSelection();
//			enableInstanceControls(false);
//			form.fireCustomControlValueChanged();
//			return false;
//		} 
//		catch (StaleObjectException e) 
//		{
//			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
//			initialise();
//			clearSelection();
//			enableInstanceControls(false);
//			form.fireCustomControlValueChanged();
//			return false;
//		} 
//		catch (UniqueKeyViolationException e)
//		{
//			engine.showMessage(e.getMessage());
//			form.getLocalContext().setbCanCloseBedDialog(true);
//			form.fireCustomControlValueChanged();
//			return false;
//		}
		
		return true;
	}

	private WardMixedSexBreachVo populateWardMixedSexBreach(AdmissionDetailVo admission, BedSpaceStateLiteVo bedSpaceStateLiteVo, AdmissionReasonVo admissionReasonVo, Integer maleCount, Integer femaleCount)
	{
		WardMixedSexBreachVo vo = new WardMixedSexBreachVo();
		
		vo.setWard(bedSpaceStateLiteVo.getWard());
		vo.setBay(bedSpaceStateLiteVo.getBay());
		vo.setFemalePatients(femaleCount);
		vo.setMalePatients(maleCount);
		vo.setAdmissionDateTime(admission.getAdmissionDateTime());
		Object mosUser = domain.getMosUser();
		if (mosUser != null)
			vo.setMemberOfStaff((MemberOfStaffLiteVo) mosUser);
		vo.setReasonForGenderBreach(admissionReasonVo.getReasonForMixingBayGender());
		vo.setReasonForGenderBreachComment(admissionReasonVo.getReasonForMixingBayGenderComment());
		
		return vo;
	}



	private AdmissionDetailVo createAdmissionDetails(PatientLite_IdentifiersVo patient)
	{
		// Fill in data into PatientElectiveList.TCIDetails.AdmissionDetail record - create a new one if needed
		AdmissionDetailVo admissionDetails = new AdmissionDetailVo();

			PasEventAdmitVo pasEvent = new PasEventAdmitVo();
			
			if (form.qmbConsultant().getValue() != null) //WDEV-23376
			{	
				MedicVo medicVo = domain.getMedic(form.qmbConsultant().getValue().toHcpRefVo());
				pasEvent.setConsultant(new MedicRefVo(medicVo.getID_Hcp(), medicVo.getVersion_Hcp()));
			}	
			else
				pasEvent.setConsultant(null);
			
			pasEvent.setEventDateTime(form.dtimAdmit().getValue());
			pasEvent.setEventType(PasEventType.EMERGENCY);
			pasEvent.setLocation(form.cmbWard().getValue());
			patient.setWard(form.cmbWard().getValue());
			pasEvent.setPatient(patient);
			pasEvent.setSpecialty(form.cmbSpecialty().getValue());
			pasEvent.setPasEventId(patient.getID_Patient().toString() + pasEvent.getEventDateTime().toString(DateTimeFormat.ISO));
			pasEvent.setSourceOfReferral(form.cmbSourceOfReferral().getValue());
			pasEvent.setService(form.qmbService().getValue()); //WDEV-20910
			
			admissionDetails.setPasEvent(pasEvent);
		
		
		admissionDetails.setAdmissionDateTime(form.dtimAdmit().getValue());
		admissionDetails.setWard(form.cmbWard().getValue());
		admissionDetails.setAdmissionWard(form.cmbWard().getValue());
		
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() != null)
			admissionDetails.setBed(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace());

		if (form.qmbConsultant().getValue() != null)
			admissionDetails.setConsultant(domain.getMedic(new HcpRefVo(form.qmbConsultant().getValue().getIMosHcpId(), 0)));
		else
			admissionDetails.setConsultant(null);

		admissionDetails.setSpecialty(form.cmbSpecialty().getValue());
		admissionDetails.setWardType(form.cmbWardType().getValue());
		admissionDetails.setMethodOfAdmission(form.cmbMethod().getValue());
		admissionDetails.setSourceOfAdmission(form.cmbSource().getValue());
		admissionDetails.setReasonForAdmission(form.txtReason().getValue());
		admissionDetails.setEstDischargeDate(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? form.dtimEstDischarge().getValue() : (form.dteEstDischarge().getValue() != null ? new DateTime(form.dteEstDischarge().getValue(), new Time(0,0)) : null));
		admissionDetails.setIsChaplainRequired(form.chkChaplain().getValue());
		admissionDetails.setSourceOfEmergencyReferral(form.cmbSourceOfEmergencyReferral().getValue());
		admissionDetails.setReferringConsultant((MedicVo) form.ccReferringConsultant().getValue());
		admissionDetails.setPatientStatus(form.cmbPatientStatus().getValue());
		admissionDetails.setAnticipatedStay(form.intAntStay().getValue());
		admissionDetails.setIsMaternity(form.chkIsMaternity().getValue());
		//WDEV-20323 On Admission, service needs to be saved alongside the specialty - this will be saved in Admission Detail and Consultant Stay
		admissionDetails.setService(form.qmbService().getValue()); //WDEV-20323
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			admissionDetails.setSelfAdmitPatient(form.chkSelfAdmitPatient().getValue());
			admissionDetails.setHealthyLodgerDetails(form.getGlobalContext().Core.getHealthyLodgerDetails());
		}	
		
		admissionDetails.setUpdateCFL(form.CaseFolderYesNo().getValue() != null && form.CaseFolderYesNo().getValue().equals(CaseFolderYesNoEnumeration.rdoYes));

		return admissionDetails;
	}




	public Boolean saveElectiveListAdmission(PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer)
	{
		try
		{
			PatientElectiveListBedAdmissionVo electiveAdmission = populateDataFromScreenTCIElectiveAdmission(form.getLocalContext().getTCIElectiveAdmission());

			if (electiveAdmission != null && electiveAdmission.getPatient() != null && electiveAdmission.getPatient().getDod() != null)
			{
				engine.showMessage("Deceased patients cannot be admitted",  "Info", MessageButtons.OK, MessageIcon.INFORMATION);
				return false;
			}

			if (Boolean.TRUE.equals(domain.isPatientAnInpatient(electiveAdmission.getPatient())))
			{			
				engine.showMessage("Patient cannot be admitted. Patient is already an inpatient.",  "Error", MessageButtons.OK, MessageIcon.INFORMATION);
				return false;
			}

			BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
			// copy to previous
			if (voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
			{
				voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
				voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
				voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
				voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
			}

			WardStayVo voWardStay = createWardStay(form.dtimAdmit().getValue(), form.cmbPatientStatus().getValue(), form.qmbService().getValue(), form.getGlobalContext().Core.getSelectedBedSpaceState());

			WardMixedSexBreachVo breachVo = null;
			if (form.getGlobalContext().Core.getBedRuleBreachReason() != null
					&& Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
			{
				breachVo = populateWardMixedSexBreach(electiveAdmission.getTCIDetails().getAdmissionDetail(), form.getGlobalContext().Core.getSelectedBedSpaceState(), form.getGlobalContext().Core.getBedRuleBreachReason(), form.getGlobalContext().Core.getMaleBedAdmissionWardCount(), form.getGlobalContext().Core.getFemaleBedAdmissionWardCount());
			}

			ConsultantStayVo voConsStay = null;
			if (electiveAdmission.getTCIDetailsIsNotNull()) //WDEV-22774 //WDEV-22872
			{
				voConsStay = new ConsultantStayVo();
			
				voConsStay.setConsultant(electiveAdmission.getTCIDetails().getAdmissionDetail() != null && electiveAdmission.getTCIDetails().getAdmissionDetail().getConsultant() != null ? (MedicVo) electiveAdmission.getTCIDetails().getAdmissionDetail().getConsultant() : null);
				voConsStay.setPatientStatus((electiveAdmission.getTCIDetails() != null && electiveAdmission.getTCIDetails().getAdmissionDetail() != null && electiveAdmission.getTCIDetails().getAdmissionDetail().getPatientStatus() != null) ? electiveAdmission.getTCIDetails().getAdmissionDetail().getPatientStatus() : form.cmbPatientStatus().getValue());// WDEV-20223
				voConsStay.setTransferDateTime(form.dtimAdmit().getValue());// 	WDEV-23672
				voConsStay.setSpecialty((electiveAdmission.getTCIDetails() != null && electiveAdmission.getTCIDetails().getAdmissionDetail() != null && electiveAdmission.getTCIDetails().getAdmissionDetail().getPasEvent() != null) ? electiveAdmission.getTCIDetails().getAdmissionDetail().getPasEvent().getSpecialty() : null);
				// WDEV-20323 On Admission, service needs to be saved alongside the specialty
				voConsStay.setService((electiveAdmission.getTCIDetails() != null && electiveAdmission.getTCIDetails().getAdmissionDetail() != null) ? electiveAdmission.getTCIDetails().getAdmissionDetail().getService() : null); // WDEV-20323
				
				voConsStay.setCodingStatus(CodingStatus.UNCODED);
			}

			String errors[] = electiveAdmission.validate(breachVo != null ? breachVo.validate(getUIValidation()) : getUIValidation());

			if (collPatientCaseNoteTransfer != null && collPatientCaseNoteTransfer.size() > 0)
			{
				errors = collPatientCaseNoteTransfer.validate(errors);
			}

			if (errors != null)
			{
				engine.showErrors(errors);
				return false;
			}
			electiveAdmission = domain.saveTCIAdmissionAndUpdateList(electiveAdmission, voBedSpaceStateLite, voWardStay, voConsStay, form.getGlobalContext().Core.getBedRuleBreachReason(), breachVo, form.getLocalContext().getWardBayConfigRef(), collPatientCaseNoteTransfer);

			//WDEV-19489
			domain.createCaseNoteRequests(electiveAdmission);
			
			//WDEV-21973 make sure patient has a Case Note Folder
			domain.createCaseNoteFolderIfNone(form.getGlobalContext().Core.getPatientShort());

			//WDEV-20293
			//form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
			//wdev-21464 //WDEV-22236
			CareContextShortVo careContextShort = domain.getCareContextShort(form.getGlobalContext().Core.getPatientShort());
			form.getGlobalContext().Core.setCurrentCareContext(careContextShort);
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (StaleObjectException e)
		{
			if (e.getStaleObject() instanceof Patient || e.getStaleObject() instanceof BedSpaceState)
			{
				if (e.getStaleObject() instanceof Patient)
					engine.showMessage("Patient record has been changed. The admission process has been aborted.");
				
				if (e.getStaleObject() instanceof BedSpaceState)
					engine.showMessage("The Bed record has been changed. The admission process has been aborted.");
				
				System.out.println("Stale Object:" + e.getStaleObject());
				
				initialise();
				clearSelection();
				enableInstanceControls(false);
				
				return true;
			}
			else
			{
				System.out.println("Stale Object" + e.getStaleObject());
				engine.showMessage("An error occured during the admission process. Please try again to admit the patient. If it still doesn't work, abort it and start over.");
			}
			
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (Throwable e)
		{
			engine.showMessage("An error occured during the admission process. Please try again to admit the patient. If it still doesn't work, abort it and start over.");
			System.out.println("Unknown Exception" + e.getStackTrace());
			return false;
		}
	}


	private WardStayVo createWardStay(DateTime admissionDateTime, PatientStatus patientCategory, ServiceLiteVo serviceLiteVo, BedSpaceStateLiteVo bedSpaceState)
	{
		WardStayVo wardStay = new WardStayVo();

		wardStay.setTransferDateTime(admissionDateTime);
		wardStay.setPatientStatus(patientCategory);
		wardStay.setService(serviceLiteVo);
		
		if (bedSpaceState != null)
		{
			wardStay.setBedSpace(bedSpaceState.getBedSpace());
			wardStay.setWard(bedSpaceState.getWard());
			wardStay.setBay(bedSpaceState.getBay());

			if (bedSpaceState.getBedSpace() != null)
			{
				wardStay.setWardType(bedSpaceState.getBedSpace().getWardType());
				
				if (form.getGlobalContext().Core.getBedRuleBreachReason() != null)
				{
					if (Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsPrivateBedAllocationValidated()))
					{
						wardStay.setReasonPrivateBedAllocated(form.getGlobalContext().Core.getBedRuleBreachReason().getReasonForPrivateBedAllocation());
						wardStay.setReasonPrivateBedAllocatedComment(form.getGlobalContext().Core.getBedRuleBreachReason().getReasonForPrivateBedAllocationComment());
					}
					if (Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsOohAllocationValidated()))
					{
						wardStay.setReasonAdmittingOutsideHours(form.getGlobalContext().Core.getBedRuleBreachReason().getReasonForAdmissionOutOfOpeningHours());
						wardStay.setReasonAdmittingOutsideHoursComment(form.getGlobalContext().Core.getBedRuleBreachReason().getReasonForAdmissionOohComment());
					}
					if (Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
					{
						wardStay.setReasonGenderBreach(form.getGlobalContext().Core.getBedRuleBreachReason().getReasonForMixingBayGender());
						wardStay.setReasonGenderBreachComment(form.getGlobalContext().Core.getBedRuleBreachReason().getReasonForMixingBayGenderComment());
					}
				}
			}
		}

		return wardStay;
	}

	
	/**
	 * Function used to save the admission of a patient
	 */
	public Boolean saveAdmission()
	{	
		try
		{
			// Populate Admission Details
			AdmissionDetailVo admissionDetail = populateDataFromScreen(form.getLocalContext().getAdmissionDetail());

			CareSpellAdmitVo careSpell = null;
			CatsReferralEmergencyAdmissionVo catsReferral = null;
			
			if (CREATE_CARE_CONTEXT_ONLY.equals(ConfigFlag.DOM.CREATE_CARE_CONTEXT_AND_REFERRAL_ON_ADMISSION.getValue())
					|| CREATE_CARE_CONTEXT_AND_REFERRAL.equals(ConfigFlag.DOM.CREATE_CARE_CONTEXT_AND_REFERRAL_ON_ADMISSION.getValue()))
			{
    			// Get or create new Care Spell & Care Context
				careSpell = getCreateCareSpell(admissionDetail.getPasEvent());
    			
    			if (CREATE_CARE_CONTEXT_AND_REFERRAL.equals(ConfigFlag.DOM.CREATE_CARE_CONTEXT_AND_REFERRAL_ON_ADMISSION.getValue()))
    			{
    				// Get or create new CATS Referral
    				catsReferral = getCreateCatsReferral(admissionDetail, careSpell);
    			}
			}
			
			// Update BedSpace state (use clone of it - because it is from a Global Context so if an error occurs it doesn't leave it updated)
			BedSpaceStateLiteVo bedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
			if (bedSpaceState != null && bedSpaceState.getCurrentBedStatusIsNotNull())
			{
				bedSpaceState.setPreviousBedStatus((BedSpaceStateStatusLiteVo) bedSpaceState.getCurrentBedStatus().clone());
				bedSpaceState.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
				bedSpaceState.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
				bedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime());
			}

			// Create the Ward Stay record
			WardStayVo wardStay = createWardStay(admissionDetail.getAdmissionDateTime(), admissionDetail.getPatientStatus(),admissionDetail.getService(), bedSpaceState);
			// Create the Consultant record
			ConsultantStayVo consultantStay = createConsultantStay((MedicVo)admissionDetail.getConsultant(), admissionDetail.getPatientStatus(), admissionDetail.getAdmissionDateTime(), admissionDetail.getService(), admissionDetail.getSpecialty());
			

			PatientCaseNoteTransferVoCollection patientCaseNoteTransfers = null;
			if (CaseFolderYesNoEnumeration.rdoYes.equals(form.CaseFolderYesNo().getValue()))
			{
				PatientCaseNoteVoCollection voCollCaseNotesFolder = domain.getCaseNoteFolders(form.getGlobalContext().Core.getPatientShort(),null);
				
				patientCaseNoteTransfers = new PatientCaseNoteTransferVoCollection();
				for (int i = 0; voCollCaseNotesFolder != null && i < voCollCaseNotesFolder.size(); i++)
				{
					//WDEV-22803
					if(CaseNoteStatus.ACTIVE.equals(voCollCaseNotesFolder.get(i).getStatus())|| CaseNoteStatus.REQUIRES_MERGING.equals(voCollCaseNotesFolder.get(i).getStatus())|| CaseNoteStatus.MARKED_AS_FOUND.equals(voCollCaseNotesFolder.get(i).getStatus()))
						patientCaseNoteTransfers.add(populatePatCaseNoteTransferFromScreen(voCollCaseNotesFolder.get(i), form.cmbWard().getValue()));
				}	
			}
			
			if (form.lyrAdmission().tabTCI().isVisible() && Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
			{
				return saveElectiveListAdmission(patientCaseNoteTransfers);
			}


			// WDEV-8799 - don't allow admit of a dead patient - separate validation
			if (admissionDetail != null && admissionDetail.getPasEventIsNotNull() && admissionDetail.getPasEvent().getPatientIsNotNull() && admissionDetail.getPasEvent().getPatient().getDodIsNotNull())
			{
				engine.showMessage("Deceased patients cannot be admitted",  "Info", MessageButtons.OK, MessageIcon.INFORMATION);
				return false;
			}
			
			AdmissionType admitType = getAdmissionType();

			if(form.lyrAdmission().tabBooked().isVisible())
				admitType = AdmissionType.BOOKED;
			else if (form.lyrAdmission().tabPlanned().isVisible())
				admitType = AdmissionType.PLANNED;
			//WDEV-22849 added tabEDEmergency
			else if (form.lyrAdmission().tabWaiting().isVisible() || form.lyrAdmission().tabEDEmergency().isVisible()) //waiting tab is actually Emergency Admission 
			{
				admitType = AdmissionType.EMERGENCY;
				admissionDetail.setIsMaternity(form.chkIsMaternity().getValue());
			}
			
			PendingElectiveAdmissionAdmitVo voBookedElective = form.lyrAdmission().tabBooked().isVisible() ? form.lyrAdmission().tabBooked().grdElective().getValue() : null;
			PendingEmergencyAdmissionAdmitVo voEmergency = form.lyrAdmission().tabEDEmergency().isVisible() && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null ? form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission() : null;
			PendingElectiveAdmissionAdmitVo voPlannedElective = form.lyrAdmission().tabPlanned().isVisible() ? form.lyrAdmission().tabPlanned().grdTCI().getValue() : null;
			CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergencyAdmission = form.lyrAdmission().tabPendingEmergency().isVisible() ? form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue() : null;

			if (voEmergency != null && EmergencyAdmissionStatus.DTA.equals(voEmergency.getAdmissionStatus()))
			{
				// Auto discharge from Emergency
				HcpLiteVo consultant = null;
				if (form.qmbConsultant().getValue() != null)
				{
					consultant = ((Hcp) form.qmbConsultant().getValue()).toHcpLiteVo();
				}
				
				voEmergency = domain.automaticDischarge(voEmergency, form.dtimAdmit().getValue(), consultant);
			}


			WardMixedSexBreachVo breachVo = null;
			if (form.getGlobalContext().Core.getBedRuleBreachReason() != null 
					&& Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
			{	
				breachVo = populateWardMixedSexBreach(admissionDetail, bedSpaceState, form.getGlobalContext().Core.getBedRuleBreachReason(), form.getGlobalContext().Core.getMaleBedAdmissionWardCount(), form.getGlobalContext().Core.getFemaleBedAdmissionWardCount());
			}										


			// Validate all records to be saved
			String[] errors = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? admissionDetail.validate() : admissionDetail.validate(getUIValidation());
			
			if (careSpell != null)
			{
				errors = careSpell.validate(errors);
			}
			
			if (catsReferral != null && catsReferral.getID_CatsReferral() == null) //WDEV-21406
				errors = catsReferral.validate(errors);
			
			errors = bedSpaceState.validate(errors);
			errors = wardStay.validate(errors);
			errors = consultantStay.validate(errors);
			if (patientCaseNoteTransfers != null && patientCaseNoteTransfers.size() > 0)
			{
				errors = patientCaseNoteTransfers.validate(errors);
			}
			if (breachVo != null)
			{
				errors = breachVo.validate(errors);
			}
			
			if (errors != null)
			{
				engine.showErrors(errors);
				return false;
			}

			domain.saveAdmissionAndUpdateList(admissionDetail, bedSpaceState, careSpell, catsReferral,
												wardStay, consultantStay,
												voBookedElective, voEmergency, voPlannedElective, pendingEmergencyAdmission,
												admitType, form.getGlobalContext().Core.getBedRuleBreachReason(), breachVo, form.getLocalContext().getWardBayConfigRef(), patientCaseNoteTransfers);

			//WDEV-20293
			//form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
			//wdev-21464 //WDEV-22236
			CareContextShortVo careContext = domain.getCareContextShort(form.getGlobalContext().Core.getPatientShort());
			form.getGlobalContext().Core.setCurrentCareContext(careContext);
			
			//WDEV-21973 
			domain.createCaseNoteFolderIfNone(form.getGlobalContext().Core.getPatientShort());
			
			return true;
		} 
		catch (DTODomainInterfaceException e)
		{
			if (e.getErrorCode() == -12) // Case note location error, CCO specific
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			initialise();
			clearSelection();
			enableInstanceControls(false);
			form.fireCustomControlValueChanged();
			return false;
		} 
		catch (StaleObjectException e)
		{
			if (e.getStaleObject() instanceof Patient || e.getStaleObject() instanceof BedSpaceState)
			{
				if (e.getStaleObject() instanceof Patient)
					engine.showMessage("Patient record has been changed. The admission process has been aborted.");
				
				if (e.getStaleObject() instanceof BedSpaceState)
					engine.showMessage("The Bed record has been changed. The admission process has been aborted.");
				
				System.out.println("Stale Object" + e.getStaleObject());
				
				initialise();
				clearSelection();
				enableInstanceControls(false);
				
				return true;
			}
			else
			{
				System.out.println("Stale Object" + e.getStaleObject());
				engine.showMessage("An error occured during the admission process. Please try again to admit the patient. If it still doesn't work, abort it and start over.");
			}
			
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (Throwable e)
		{
			engine.showMessage("An error occured during the admission process. Please try again to admit the patient. If it still doesn't work, abort it and start over.");
			System.out.println("Unknown Exception" + e.getStackTrace());
			return false;
		}		
	}

	
	private AdmissionType getAdmissionType()
	{
		// TODO Auto-generated method stub
		return null;
	}


	private CatsReferralEmergencyAdmissionVo getCreateCatsReferral(AdmissionDetailVo admission, CareSpellAdmitVo careSpell)
	{
		if (form.lyrAdmission().tabEDEmergency().isVisible() && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null)
		{
			PendingEmergencyAdmissionAdmitVo pendingAdmissionED = form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission();
			
			if (pendingAdmissionED == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending ED Emergency Admission should have been selected at this point.");
			
			PatientLite_IdentifiersVo patient = pendingAdmissionED.getPasEvent().getPatient();
			
			return createCatsReferral(patient, admission, careSpell);
		}
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergency = form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue();
			
			if (pendingEmergency == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending Emergency Admission should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingEmergency);
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		else if (form.lyrAdmission().tabTCI().isVisible())
		{
			PatientElectiveListBedInfoVo pendingElectiveTCI = form.lyrAdmission().tabTCI().grdTCI_Elective().getValue();
			
			if (pendingElectiveTCI == null)
				throw new CodingRuntimeException("LOGICAL ERROR - An Elective TCI should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingElectiveTCI.getReferral());
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		else if (form.lyrAdmission().tabPlanned().isVisible())
		{
			return null;
		}
		else if (form.lyrAdmission().tabWardAttenders().isVisible())
		{
			BookAppointmentForWardAttendersVo pendingWardAttender = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
			
			if (pendingWardAttender == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A WardAttender should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingWardAttender);
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		else if (form.lyrAdmission().tabWaiting().isVisible())				// This actually is the Patient Search & Emergency Admit tab
		{
			PatientLite_IdentifiersVo patient = form.lyrAdmission().tabWaiting().grdPatients().getValue();
			
			if (patient == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Patient should have been selected at this point.");
			
			return createCatsReferral(patient, admission, careSpell);
		}
		else if (form.lyrAdmission().tabPET().isVisible())					// This is the Pending Emergency Theatre tab
		{
			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrAdmission().tabPET().grdPET().getValue();
			
			if (pendingEmergencyTheatre == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending Emergency Theatre should have been selected at this point.");
			
			CatsReferralEmergencyAdmissionVo referral = domain.getReferralForAdmission(pendingEmergencyTheatre.getCatsReferral());
			referral.getAdmissions().add(admission);
			
			return referral;
		}
		
		// If we reach this point then the function needs to be updated for tabs added
		throw new CodingRuntimeException("LOGICAL ERROR - Was a new tab added? If so, then please provide the additional code for it.");
	}


	private CareSpellAdmitVo getCreateCareSpell(PasEventAdmitVo pasEvent)
	{
		BedSpaceStateLiteVo bedSpaceState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		
		DateTime admisssionDateTime = form.dtimAdmit().getValue();
		Date estimatedDischargeDate = form.dtimEstDischarge().getValue() != null ? form.dtimEstDischarge().getValue().getDate() : null;
		MedicVo consultant = form.qmbConsultant().getValue();
		String bedNumber = bedSpaceState != null && bedSpaceState.getBedSpace() != null ? bedSpaceState.getBedSpace().getBedNumber() : null;
		
		if (form.lyrAdmission().tabEDEmergency().isVisible() && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null)
		{
			// Get the record to admit
			PendingEmergencyAdmissionAdmitVo pendingAdmissionED = form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission();
			
			if (pendingAdmissionED == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending ED Emergency Admission should have been selected at this point.");
			
			PatientLite_IdentifiersVo patient = pendingAdmissionED.getPasEvent().getPatient();

			// Create the Care Spell, Episode of Care and the two Care Contexts for pending admission
			CareSpellAdmitVo careSpell				= createCareSpell(patient, admisssionDateTime);
			EpisodeOfCareAdmitVo episodeOfCare		= createEpisodeOfCare(careSpell, admisssionDateTime, consultant, form.cmbSpecialty().getValue());
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextReferral	= createCareContext(episodeOfCare, ContextType.REFERRAL, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient	= createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, bedNumber); 
			
			return careSpell;
		}
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{
			// Get the record to admit
			CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergencyAdmission = form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue();
			
			if (pendingEmergencyAdmission == null)
				throw new CodingRuntimeException("LOGIC ERROR - A Pending Emergency Admission should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the pending admission
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingEmergencyAdmission);
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, bedNumber);
			
			return careSpell;
		}
		else if (form.lyrAdmission().tabTCI().isVisible())
		{
			// Get the record to admit
			PatientElectiveListBedInfoVo pendingElectiveTCI = form.lyrAdmission().tabTCI().grdTCI_Elective().getValue();
			
			if (pendingElectiveTCI == null)
				throw new CodingRuntimeException("LOGIC ERROR - An Elective TCI should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the pending Elective TCI
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingElectiveTCI.getReferral());
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, bedNumber);
			
			return careSpell;
		}
		else if (form.lyrAdmission().tabPlanned().isVisible())
		{
			return null;
		}
		else if (form.lyrAdmission().tabWardAttenders().isVisible())
		{
			// Get the record to admit
			BookAppointmentForWardAttendersVo pendingWardAttender = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
			
			if (pendingWardAttender == null)
				throw new CodingRuntimeException("LOGIC ERROR - A Ward Attender should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the Ward Attenders
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingWardAttender);
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, bedNumber);
			
			return careSpell;
		}
		else if (form.lyrAdmission().tabWaiting().isVisible())		// This is actually the Patient Search & Emergency Admit tab
		{
			// Get the Patient for emergency admission (patient search & admit)
			PatientLite_IdentifiersVo patient = form.lyrAdmission().tabWaiting().grdPatients().getValue();
			
			if (patient == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Patient should have been selected at this point.");

			// Create the Care Spell, Episode of Care and the two Care Contexts for pending admission
			CareSpellAdmitVo careSpell				= createCareSpell(patient, admisssionDateTime);
			EpisodeOfCareAdmitVo episodeOfCare		= createEpisodeOfCare(careSpell, admisssionDateTime, consultant, form.cmbSpecialty().getValue());
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextReferral	= createCareContext(episodeOfCare, ContextType.REFERRAL, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, null);
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient	= createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, bedNumber); 
			
			return careSpell;
		}
		else if (form.lyrAdmission().tabPET().isVisible())			// This is the Pending Emergency Theatre
		{
			// Get the record to admit
			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrAdmission().tabPET().grdPET().getValue();
			
			if (pendingEmergencyTheatre == null)
				throw new CodingRuntimeException("LOGICAL ERROR - A Pending Emergency Theatre should have been selected at this point.");
			
			// Retrieve the existing Care Spell for the Pending Emergency Theatre
			CareSpellAdmitVo careSpell = domain.getCareSpellForAdmission(pendingEmergencyTheatre.getCatsReferral());
			// Get the relevant Episode of Care
			EpisodeOfCareAdmitVo episodeOfCare = getRelevantEpisodeOfCare(careSpell, ContextType.REFERRAL);
			// Create the INPATIENT care context
			@SuppressWarnings("unused")
			CareContextAdmitVo careContextInpatient = createCareContext(episodeOfCare, ContextType.INPATIENT, pasEvent, admisssionDateTime, estimatedDischargeDate, consultant, null, bedNumber);
			
			return careSpell;
		}

		// If we reach this point then the function needs to be updated for tabs added
		throw new CodingRuntimeException("LOGICAL ERROR - Was a new tab added? If so, then please provide the additional code for it.");
	}


	private EpisodeOfCareAdmitVo getRelevantEpisodeOfCare(CareSpellAdmitVo careSpell, ContextType contextType)
	{
		// Check for Care Spell - this is mandatory
		if (careSpell == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Care Spell cannot be null at this point.");
		
		if (contextType == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Context Type is mandatory.");
		
		// Check for Care Spell to have episodes
		if (careSpell.getEpisodes() == null)
			throw new CodingRuntimeException("LOGICAL ERROR - Care Spell is invalid. It should have the Episode of Care populated.");
		
		for (EpisodeOfCareAdmitVo episodeOfCare : careSpell.getEpisodes())
		{
			if (episodeOfCare.getCareContexts() == null)
				throw new CodingRuntimeException("LOGICAL ERROR - Care Spell is invalid. The Episode of Care should have the Care Context.");
			
			for (CareContextAdmitVo careContext : episodeOfCare.getCareContexts())
			{
				if (contextType.equals(careContext.getContext()))
					return episodeOfCare;
			}
		}
		
		// If no Episode of Care was found at this point then it's a breach in execution logic
		throw new CodingRuntimeException("LOGICAL ERROR - Care Spell is invalid. An Episode of Care with should have been found at this point");
	}


	/**
	 * Function used to create a Consultant Stay record on admission
	 * @param consultant
	 * @param patientCategory
	 * @param transferDateTime
	 * @param serviceLiteVo 
	 * @param specialty
	 * @return
	 */
	private ConsultantStayVo createConsultantStay(MedicVo consultant, PatientStatus patientCategory, DateTime transferDateTime, ServiceLiteVo serviceLiteVo, Specialty specialty)
	{
		ConsultantStayVo consultantStay = new ConsultantStayVo();
		
		consultantStay.setConsultant(consultant);
		consultantStay.setPatientStatus(patientCategory);
		consultantStay.setTransferDateTime(transferDateTime);
		consultantStay.setService(serviceLiteVo);
		consultantStay.setSpecialty(specialty);
		
		return consultantStay;
	}
	private String[] getValidationErrors()
	{
		List<String> errors = new ArrayList<String>();

		if (form.qmbService().getVisible() && form.qmbService().isEnabled() && form.qmbService().getValue() == null)
		{	
			errors.add("Service is mandatory");
		}
		else if (form.cmbSpecialty().isEnabled() && form.cmbSpecialty().getValue() == null)
		{	
			errors.add("Specialty is mandatory");
		}
		
		if (form.cmbCCOSpecialty().getVisible() && form.cmbCCOSpecialty().isEnabled() && form.cmbCCOSpecialty().getValue() == null)
		{
			errors.add("Specialty is mandatory");
		}

		if (form.qmbConsultant().isEnabled() && form.qmbConsultant().getValue() == null)
		{	
			errors.add("Consultant is mandatory");
		}
		
		if (form.dtimAdmit().isEnabled() && form.dtimAdmit().getValue() == null)
		{	
			errors.add("Admission Date/Time is mandatory");
		}	
		
		if (form.dtimAdmit().isEnabled() && form.dtimAdmit().getValue() != null && form.dtimAdmit().getValue().getDate().isGreaterThan(new Date()))
		{	
			errors.add("Admission Date cannot be set to a date later than current date");
		}	
		if (form.intAntStay().isVisible() && form.intAntStay().isEnabled() && form.intAntStay().getValue() == null)
		{
			errors.add("Anticipated Stay is mandatory");
		}
		
		if (form.cmbSourceOfReferral().getVisible() && form.cmbSourceOfReferral().isEnabled() && form.cmbSourceOfReferral().getValue() == null)
		{
			errors.add("Source of Referral is mandatory");
		}
		
		if(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue()) && form.ccReferringConsultant().getValue() == null)
		{
			errors.add(form.ccReferringConsultant().getError("Referring Consultant"));
		}
		
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue() && form.cmbEpisode().getValue() == null)
		{
			errors.add("Episode is mandatory.");		
		}
		
		if (form.cmbWardType().isEnabled() && form.cmbWardType().getValue() == null)
		{
			errors.add("Ward Type is mandatory");
		}
		
		if (form.cmbSource().isEnabled() && form.cmbSource().getValue() == null)
		{
			errors.add("Source of Admission is mandatory");
		}
		
		if (form.cmbMethod().isEnabled() && form.cmbMethod().getValue() == null)
		{
			errors.add("Method of Admission is mandatory");
		}
		
		if (form.cmbPatientStatus().getVisible() && form.cmbPatientStatus().isEnabled() && form.cmbPatientStatus().getValue() == null)
		{
			errors.add("Patient Category is mandatory");
		}
		
		if (form.dtimAdmit().getValue() != null)
		{	
			if	(form.dteEstDischarge().isVisible() && form.dteEstDischarge().isEnabled() && form.dteEstDischarge().getValue() != null && form.dtimAdmit().getValue().getDate().isGreaterThan(form.dteEstDischarge().getValue()))
			{	
				errors.add("Est. Discharge Date/Time cannot be earlier than Admission Date/Time");
			}	
			else if (form.dtimEstDischarge().isVisible() && form.dtimEstDischarge().isEnabled() && form.dtimEstDischarge().getValue() != null && (form.dtimAdmit().getValue().getDate().isGreaterThan(form.dtimEstDischarge().getValue().getDate()) || (form.dtimAdmit().getValue().getDate().equals(form.dtimEstDischarge().getValue().getDate()) && form.dtimAdmit().getValue().getTime().isGreaterThan(form.dtimEstDischarge().getValue().getTime()))))
			{	
				errors.add("Est. Discharge Date/Time cannot be earlier than Admission Date/Time");
			}
		}				
		return errors.size() > 0 ? errors.toArray(new String[errors.size()]) : null;
	}

	private String[] getUIValidation()
	{
		List<String> errors = new ArrayList<String>();
				
		if (form.dtimAdmit().getValue() != null)
		{
			if (form.dtimAdmit().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("Admission Date/Time cannot be set to a date/time in the future.");
			}
			if	(form.dteEstDischarge().isVisible() && form.dteEstDischarge().getValue() != null && form.dteEstDischarge().getValue().isLessThan(form.dtimAdmit().getValue().getDate()))
			{	
				errors.add("Est. Discharge Date cannot be earlier than Admission Date");
			}			
		}	
		if(form.cmbPatientStatus().getVisible())
		{
			if(form.cmbPatientStatus().getValue() == null)
				errors.add("Patient Category is mandatory");
		}
		
		if(form.cmbSourceOfReferral().getVisible())
		{
			if(form.cmbSourceOfReferral().getValue() == null)
				errors.add("Source of Referral is mandatory");
		}

		if(form.cmbCCOSpecialty().getVisible())
		{
			if(form.cmbCCOSpecialty().getValue() == null)
				errors.add("Specialty is mandatory");
		}

		if(form.intAntStay().isVisible())
		{
			if(form.intAntStay().getValue() == null)
				errors.add("Anticipated Stay is mandatory");
		}
		
				
		//WDEV-12587 WDEV-16242
		if(SourceOfReferral.CONSULTANT.equals(form.cmbSourceOfReferral().getValue()) && form.ccReferringConsultant().getValue() == null)
		{
			errors.add(form.ccReferringConsultant().getError("Referring Consultant"));
		}
		
		//WDEV-13001
		if(ConfigFlag.DOM.ADT_LINK_ADMISSION_TO_EPISODE.getValue())
		{
			if(form.cmbEpisode().getValue() == null)
			{
				errors.add("Episode is mandatory.");
			}
		}
				
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	public Boolean getInWaitingIsVisible()
	{
		return form.getLocalContext().getIsInWaitingTabVisible();
	}

	public Boolean checkForPatientAlreadyAdmited()
	{
		PatientRefVo voPatient = getSelectedPatient();
		
		if(voPatient != null)
		{
			String errors = domain.checkForPatientAlreadyAdmited(voPatient);
			
			if (errors != null){
				engine.showMessage(errors, "Admit Error", MessageButtons.OK, MessageIcon.ERROR);
				return true;			
			}
		}
		
		return false;
	}

	public PatientRefVo getSelectedPatient()
	{
		if(form.lyrAdmission().tabBooked().isVisible())
		{
			if(form.lyrAdmission().tabBooked().grdElective().getValue() != null && form.lyrAdmission().tabBooked().grdElective().getValue().getPasEventIsNotNull())
				return form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent().getPatient();
		}
		else if(form.lyrAdmission().tabPlanned().isVisible())
		{
			if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null && form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEventIsNotNull())
				return form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent().getPatient();			
		}
		else if(form.lyrAdmission().tabEDEmergency().isVisible())
		{
			if(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmissionIsNotNull() && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEventIsNotNull())
				return form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEvent().getPatient();					
		}
		else if(form.lyrAdmission().tabInWaiting().isVisible())
		{
			if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() != null && form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEventIsNotNull())
				return form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEvent().getPatient();								
		}
		else if(form.lyrAdmission().tabWaiting().isVisible())
		{
			if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
				return form.lyrAdmission().tabWaiting().grdPatients().getValue();								
		}
		else if (form.lyrAdmission().tabTCI().isVisible())
		{
			if (form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() != null)
				return form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient();
		}
		else if (form.lyrAdmission().tabWardAttenders().isVisible())
		{
			if (form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue() != null)
			{
				BookAppointmentForWardAttendersVo appointment = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
				return appointment.getPatient();
			}
		}
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{
			if (form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue() != null)
			{
				CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergency = form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue();
				return pendingEmergency.getPatient();
			}
		}
		else if (form.lyrAdmission().tabPET().isVisible())
		{
			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrAdmission().tabPET().grdPET().getValue();
			
			if (pendingEmergencyTheatre != null)
				return pendingEmergencyTheatre.getPatient();
		}
		
		return null;
	}
	
	public Boolean allocateBed()
	{
		AdmissionDetailVo voAdmissionDetail = form.getLocalContext().getAdmissionDetail();
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		InpatientEpisodeLiteVo voInpatEpis = domain.getInpatientEpisode(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue());
		WardMixedSexBreachVo wardMixedSexBreachVo = null;
		//WDEV-20982
		if (voAdmissionDetail == null)
		{
			engine.showErrors(new String[]{"No valid admission was found"});
			return false;
		}
		if (voBedSpaceStateLite == null)
		{
			engine.showErrors(new String[]{"No bed/chair selected to allocate"});
			return false;
		}
		if (voInpatEpis == null)
		{
			engine.showErrors(new String[]{"Please select a patient"});
			return false;
		}			
		
		//WDEV-16062
		if (voInpatEpis != null && voInpatEpis.getBedIsNotNull() && form.lyrAdmission().tabInWaiting().isVisible() && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			BedSpaceStateLiteVo temVo = domain.getBedSpaceState(voBedSpaceStateLite);

			if (temVo != null && temVo.getCurrentBedStatusIsNotNull() && BedStatus.AVAILABLE.equals(temVo.getCurrentBedStatus().getBedStatus()))
			{
				engine.showMessage("Patient has been already allocated to another bed/chair. Screen will be refreshed.");
				form.lyrAdmission().tabInWaiting().grdInWaiting().getRows().clear();
				clearScreen();
				populateInWaitingTabFromData();
				return false;
			}
		}
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			voAdmissionDetail.setWardType(form.cmbWardType().getValue());
		}
		if (form.getGlobalContext().Core.getBedRuleBreachReasonIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
		{	
			wardMixedSexBreachVo = populateWardMixedSexBreach(voAdmissionDetail, voBedSpaceStateLite, form.getGlobalContext().Core.getBedRuleBreachReason(), form.getGlobalContext().Core.getMaleBedAdmissionWardCount(), form.getGlobalContext().Core.getFemaleBedAdmissionWardCount());
			
			if (wardMixedSexBreachVo != null)
				wardMixedSexBreachVo.validate();
		}	
		//WDEV-20982 -- end
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
		}
		
		try
		{
			domain.allocateBed(voBedSpaceStateLite, voInpatEpis, voAdmissionDetail, null, form.getGlobalContext().Core.getBedRuleBreachReason(),wardMixedSexBreachVo);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			if (form.lyrAdmission().tabInWaiting().isVisible()) //WDEV-16063
			{
				return true; //dialog will be closed as bed is already occupied
			}
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}


	private void listSpecialtiesForConsultant()
	{
		if(form.qmbConsultant().getValue() != null)
		{
			String pasMapping = domain.getPasMappingFromConsultant(form.qmbConsultant().getValue()) ;
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				loadCCOSpecialties(pasMapping);
				loadSpecialties(pasMapping);
			}
			else
				loadSpecialties(pasMapping);
		}
		else //WDEV-16214
		{
			form.cmbCCOSpecialty().clear();
			form.cmbSpecialty().clear();
		}
	}

	private void loadCCOSpecialties(String pasMapping) 
	{
		form.cmbCCOSpecialty().clear();
		if(pasMapping != null)
		{
			PASSpecialtyCollection collSpec = null;
			try
			{
				collSpec = domain.listCCOSpecialtiesFromConSpc( pasMapping );
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage("PAS Error : " + e.getMessage());
				return;
			}
			for(int i=0; collSpec != null && i<collSpec.size();i++)
			{
				PASSpecialty inst = collSpec.get(i);
				form.cmbCCOSpecialty().newRow(inst, inst.getText());
			}
		}
	}

	private void loadSpecialties(String pasMapping)
	{
		form.cmbSpecialty().clear();
		if(pasMapping != null)
		{
			SpecialtyCollection collSpec = null;
			try
			{
				collSpec = domain.listSpecialtiesFromConSpc( pasMapping );
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage("PAS Error : " + e.getMessage());
				return;
			}
			
			
			for(int i=0 ; collSpec != null && i < collSpec.size();i++)
			{
				Specialty inst = collSpec.get(i);
				form.cmbSpecialty().newRow(inst, inst.getText());
			}
		}
		
		// WDEV-18568 - if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, then add in all active Specialty lookups to the combo
		if (form.cmbSpecialty().getValues().size() == 0 && ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		{
			loadAllSpecialties();
		}
	}


	private PatientCaseNoteTransferVo populatePatCaseNoteTransferFromScreen(PatientCaseNoteVo patientCaseNoteVo, LocationLiteVo locationLiteVo)
	{
		PatientCaseNoteTransferVo transfer =  new PatientCaseNoteTransferVo();
		
		transfer.setPatient(patientCaseNoteVo.getPatient());
		transfer.setCaseNote(patientCaseNoteVo);
		transfer.setTransferredFromLocation(patientCaseNoteVo.getCurrentLocation());
		transfer.setTransferredToLocation(locationLiteVo);
		
		Object mos = domain.getMosUser();
		if (mos != null) transfer.setTransferredBy((MemberOfStaffLiteVo)mos);
		transfer.setTransferDate(new DateTime());
		
		
		PatientCaseNoteCommentSaveVo comment = new PatientCaseNoteCommentSaveVo();
			
		comment.setAuthoredBy((MemberOfStaffLiteVo)mos);
		comment.setAuthoredDate(new DateTime());
		comment.setCaseNote(patientCaseNoteVo);
			
		comment.setComment("Transfer Comment: Patient Casenotes transferred as part of Patient Admission" );
		comment.setPatient(patientCaseNoteVo.getPatient());
		comment.setCaseNoteFolderLocation(locationLiteVo);
		
		transfer.setTansferComment(comment);
		
		return transfer;
	}
	
	
	// WDEV-18568 - if USE_ELECTIVE_LIST_FUNCTIONALITY is TRUE and there are no rows in the specialty combo, then add in all active Specialty lookups to the combo
	private void loadAllSpecialties()
	{
		SpecialtyCollection listSpecialty = ims.core.vo.lookups.LookupHelper.getSpecialty(domain.getLookupService());
		
		for(int i = 0; i < listSpecialty.size(); i++)
		{
			if(Boolean.TRUE.equals(listSpecialty.get(i).isActive())) 
				form.cmbSpecialty().newRow(listSpecialty.get(i), listSpecialty.get(i).getText());
		}	
	}

	public Boolean getIsRecordSelected()
	{
		return form.getLocalContext().getRecordSelected();
	}
	
	//WDEV-21548 - method for UI controls
	public String[] getErrors()
	{
		if (!Boolean.TRUE.equals(form.getLocalContext().getRecordSelected()))
			return null;

		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		if (voBedSpaceStateLite == null)
		{
			return new String[] {"No Bed/Chair Selected"};			
		}
		if (Boolean.TRUE.equals(form.getLocalContext().getIsReturnFromLeaveVisible()))
		{	
			InpatientEpisodeLiteVo voInpatEpis = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();
			return getHomeLeaveUIValidation(voBedSpaceStateLite, voInpatEpis);
		}	
		return getValidationErrors();
	}
	
	//WDEV-12587
	@Override
	protected void onCmbSourceOfReferralValueChanged() throws PresentationLogicException 
	{
		showExtraUIControls();
		
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()) && form.lyrAdmission().tabTCI().isVisible())
			showExtraUIControls_ElectiveList();
		
		enableInstanceControls(true);
	}
	
	//WDEV-12587
	private void bindCmbSourceOfReferralLookup()
	{
		form.cmbSourceOfReferral().clear();
		
		SourceOfReferralCollection lookupCollection = LookupHelper.getSourceOfReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{

			if(SourceOfReferral.CONSULTANT.equals(lookupCollection.get(x))
				&& ! ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO")) //wdev-13472
			{
				//DONT add consultant if its not WAITING tab
				//IF its WAITING tab, only add if its EmergencyAdmission
				if(!form.lyrAdmission().tabWaiting().isVisible() 
					|| (form.lyrAdmission().tabWaiting().isVisible() 
						&& (form.getLocalContext().getIsEmergencyAdmissionTab() == null 
							|| (form.getLocalContext().getIsEmergencyAdmissionTabIsNotNull() 
								&& !form.getLocalContext().getIsEmergencyAdmissionTab()))))
						continue;
			}

			//WDEV-20186 If Emergency tab, limit combo options to Consultant, GP and Self
			if(form.getLocalContext().getIsEmergencyAdmissionTabIsNotNull()
				&& form.getLocalContext().getIsEmergencyAdmissionTab())
			{
				if(!SourceOfReferral.CONSULTANT.equals(lookupCollection.get(x)) && !SourceOfReferral.GP.equals(lookupCollection.get(x)) && !SourceOfReferral.SELF.equals(lookupCollection.get(x)))
				{
					continue;					
				}
				else
				{
					form.cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());					
				}
			}
			else
			{
				form.cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			} //WDEV-20186

			
//			form.cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	@Override
	protected void onRadioButtonCaseFolderYesNoValueChanged() throws PresentationLogicException
	{
		CaseFolderYesNoEnumeration val = form.CaseFolderYesNo().getValue();
		if(val.equals(CaseFolderYesNoEnumeration.rdoYes))
		{
			form.txtCaseComment().setEnabled(true);
		}
		else if(val.equals(CaseFolderYesNoEnumeration.rdoNo))
		{
			form.txtCaseComment().setEnabled(false);
			form.txtCaseComment().setValue(null);
		}
	}

	
	@Override
	protected void onIntAntStayValueChanged() throws PresentationLogicException
	{
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());

		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{	
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}

	}


	public Boolean getIsReturnFromLeaveVisible()
	{
		return form.getLocalContext().getIsReturnFromLeaveVisible();
	}

	public Boolean returnFromLeave() 
	{
		AdmissionDetailVo voAdmissionDetail = form.getLocalContext().getAdmissionDetail();
		BedSpaceStateLiteVo voBedSpaceStateLite = form.getGlobalContext().Core.getSelectedBedSpaceState();
		InpatientEpisodeLiteVo voInpatEpis = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();
		WardMixedSexBreachVo wardMixedSexBreachVo = null;
				
		String[] uiErrrors = getHomeLeaveUIValidation(voBedSpaceStateLite,voInpatEpis);
		
		if (uiErrrors != null)
		{
			engine.showErrors(uiErrrors);
			return false;
		}	
		HomeLeaveVo voHL = new HomeLeaveVo();
		voHL.setDateReturnedFromHomeLeave(form.dteHLDateReturn().getValue());
		voHL.setTimeReturnedFromHomeLeave(form.timHLTimeOfReturn().getValue());
		if (form.getGlobalContext().Core.getBedRuleBreachReasonIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
		{	
			wardMixedSexBreachVo = populateWardMixedSexBreach(voAdmissionDetail, voBedSpaceStateLite, form.getGlobalContext().Core.getBedRuleBreachReason(), form.getGlobalContext().Core.getMaleBedAdmissionWardCount(), form.getGlobalContext().Core.getFemaleBedAdmissionWardCount());
			
			if (wardMixedSexBreachVo != null)
				wardMixedSexBreachVo.validate();
		}	
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime(form.dteHLDateReturn().getValue(),(form.timHLTimeOfReturn().getValue() != null  ? form.timHLTimeOfReturn().getValue() : new Time(0,0))));
		}
		try
		{
			domain.allocateBed(voBedSpaceStateLite, voInpatEpis, voAdmissionDetail, voHL, form.getGlobalContext().Core.getBedRuleBreachReason(), wardMixedSexBreachVo);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}


	private String[] getHomeLeaveUIValidation(BedSpaceStateLiteVo voBedSpaceStateLite, InpatientEpisodeLiteVo voInpatEpis)
	{
		List<String> errors = new ArrayList<String>();

		if (voBedSpaceStateLite == null)
		{
			errors.add("No Bed/Chair Selected to Allocate");			
		}
		if (voInpatEpis == null)
		{
			errors.add("Please select a Patient");		
		}	
		if (form.dteHLDateReturn().getValue() == null)
		{
			errors.add("Date of Return is mandatory");				
		}
		if (form.timHLTimeOfReturn().getValue() == null)
		{
			errors.add("Time of Return is mandatory");	
		}
		if (voInpatEpis != null && voInpatEpis.getDateOnHomeLeaveIsNotNull() && form.dteHLDateReturn().getValue() != null)
		{		
			if (form.dteHLDateReturn().getValue().isGreaterThan(new Date()))
			{
				errors.add("Date of Return cannot be a future date");			
			}
			if (form.dteHLDateReturn().getValue().isLessThan(voInpatEpis.getDateOnHomeLeave()))
			{
				errors.add("Date of Return cannot be earlier than Date on Home Leave");			
			}
			else if (voInpatEpis.getTimeOnHomeLeaveIsNotNull() && form.timHLTimeOfReturn().getValue() != null && form.dteHLDateReturn().getValue().equals(voInpatEpis.getDateOnHomeLeave()) && form.timHLTimeOfReturn().getValue().isLessThan(voInpatEpis.getTimeOnHomeLeave()))
			{
				errors.add("Time of Return cannot be earlier than Time on Home Leave");			
			}
		}
		return errors.size() > 0 ? errors.toArray(new String[errors.size()]) : null;	
	}

	@Override
	protected void onGrdHomeLeaveSelectionChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setAdmissionDetail(null);
		clearScreen();
		if(form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() == null)
			return;

		form.dteHLDateReturn().setEnabled(true);
		form.timHLTimeOfReturn().setEnabled(true);
		form.dteHLDateReturn().setValue(new Date());
		form.timHLTimeOfReturn().setValue(new Time());
		form.timHLTimeOfReturn().setFocus();
		
		form.getLocalContext().setRecordSelected(true);
		
		//WDEV-22211
		InpatientEpisodeLiteVo selHomeLeaveRecord = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();		
		if (selHomeLeaveRecord.getPasEventIsNotNull() && selHomeLeaveRecord.getPasEvent().getPatientIsNotNull())
		{	
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(selHomeLeaveRecord.getPasEvent().getPatient()));
		}	
		
		AdmissionDetailVo voAdmission = domain.getAdmissionDetailByPasEvent(selHomeLeaveRecord.getPasEvent());
		if(voAdmission == null)
			return;
		
		form.getLocalContext().setAdmissionDetail(voAdmission);
		
		//WDEV-18533 
		if(voAdmission.getPasEvent() != null && voAdmission.getPasEvent().getPatientIsNotNull())
			setSexForSelectedpatient(voAdmission.getPasEvent().getPatient());
		updateContextMenus(false,getIsReturnFromLeaveVisible(), isOnTCITab());
		form.fireCustomControlValueChanged();
	}

	
	protected void onChkTodayOnlyValueChanged()throws PresentationLogicException 
	{
		updatePlannedTabDateSearchCriteria();
		
		if (Boolean.TRUE.equals(form.lyrAdmission().tabPlanned().chkTodayOnly().getValue()))
			search();
		else
		{
			clearPlannedTabDetails(false);
		}
	}

	private void updatePlannedTabDateSearchCriteria() 
	{
		Boolean todayOnly = Boolean.TRUE.equals(form.lyrAdmission().tabPlanned().chkTodayOnly().getValue());
		
		Date fromDate = todayOnly ? new Date().addDay(0) : new Date().addDay(-7);
		Date toDate = todayOnly ? new Date().addDay(0) : new Date().addDay(7);
		
		form.lyrAdmission().tabPlanned().dteFrom().setValue(fromDate);
		form.lyrAdmission().tabPlanned().dteTo().setValue(toDate);
		
		enableDateSearch(!todayOnly);
	}

	private void enableDateSearch(Boolean dateIntervalSearchCriteriaEnabled) 
	{
		form.lyrAdmission().tabPlanned().dteFrom().setEnabled(dateIntervalSearchCriteriaEnabled);
		form.lyrAdmission().tabPlanned().dteTo().setEnabled(dateIntervalSearchCriteriaEnabled);		
	}

	@Override
	protected void onImbTCI_ClearClick() throws PresentationLogicException
	{
		// Clear TCI tab grid && search criteria
		form.lyrAdmission().tabTCI().dteTCI_From().setValue(null);
		form.lyrAdmission().tabTCI().dteTCI_To().setValue(null);
		form.lyrAdmission().tabTCI().chkTCI_Today().setValue(false);
		//Wdev-19361 
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839
		form.lyrAdmission().tabTCI().GroupTCI().setValue(GroupTCIEnumeration.rdoCurrentWard);					
		//----------
		form.lyrAdmission().tabTCI().grdTCI_Elective().getRows().clear();

		// Clear selection
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearSelection();
		updateControlsState();
		
		// Clear TCI controls
		clearScreen();
		showExtraUIControls_ElectiveList();
		
		// Disable controls
		enableInstanceControls(false);		
	}

	@Override
	protected void onImbTCI_SearchClick() throws PresentationLogicException
	{
		searchElectiveTCI();
		
		updateControlsState();
	}


	private void searchElectiveTCI()
	{
		clearSelection();
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearScreen();
		showExtraUIControls_ElectiveList();
		enableInstanceControls(false);
		
		if (validateSearchCriteria())
			populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), true);
	}

	private boolean validateSearchCriteria()
	{
		if (form.lyrAdmission().tabTCI().isVisible() && form.lyrAdmission().tabTCI().dteTCI_From().getValue() != null && form.lyrAdmission().tabTCI().dteTCI_To().getValue() != null)
		{
			if (form.lyrAdmission().tabTCI().dteTCI_From().getValue().isGreaterThan(form.lyrAdmission().tabTCI().dteTCI_To().getValue()))
			{
				engine.showMessage("'From' Date cannot be later than 'To' Date.");
				return false;
			}
		}
		if (form.lyrAdmission().tabPendingEmergency().isVisible() && form.lyrAdmission().tabPendingEmergency().dtePEAFrom().getValue() != null && form.lyrAdmission().tabPendingEmergency().dtePEATo().getValue() != null)
		{
			if (form.lyrAdmission().tabPendingEmergency().dtePEAFrom().getValue().isGreaterThan(form.lyrAdmission().tabPendingEmergency().dtePEATo().getValue()))
			{
				engine.showMessage("'From' Date cannot be later than 'To' Date.");
				return false;
			}
		}
		if (form.lyrAdmission().tabPET().isVisible() && form.lyrAdmission().tabPET().dtePETFrom().getValue() != null && form.lyrAdmission().tabPET().dtePETTo().getValue() != null)
		{
			if (form.lyrAdmission().tabPET().dtePETFrom().getValue().isGreaterThan(form.lyrAdmission().tabPET().dtePETTo().getValue()))
			{
				engine.showMessage("'From' Date cannot be later than 'To' Date..");
				return false;
			}
		}
		return true;
	}



	@Override
	protected void onChkTCI_TodayValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.lyrAdmission().tabTCI().chkTCI_Today().getValue()))
		{
			form.lyrAdmission().tabTCI().dteTCI_From().setValue(new Date());
			form.lyrAdmission().tabTCI().dteTCI_To().setValue(new Date());

			clearSelection();
			form.getLocalContext().setTCIElectiveAdmission(null);
			clearScreen();
			showExtraUIControls_ElectiveList();
			enableInstanceControls(false);

			populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), true);
			updateControlsState();
		}
	}

	@Override
	protected void onDteTCITo_ValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabTCI().chkTCI_Today().setValue(Boolean.FALSE);
	}

	@Override
	protected void onDteTCIFrom_ValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabTCI().chkTCI_Today().setValue(Boolean.FALSE);
	}


	@Override
	protected void onCmbSpecialtyValueChanged() throws PresentationLogicException
	{
	}

	public Sex getSexForSelectedPatient()
	{
		return form.getLocalContext().getlcPatientSex();
	}

	private void clearElectiveListGC()
	{
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setPatientElectiveListRef(null);		
	}
	
	//WDEV-20224
	private void setSexForSelectedpatient(PatientLite_IdentifiersVo patient)
	{
		if (patient != null && patient.getSexIsNotNull() && !Sex.UNKNOWN.equals(patient.getSex()))
			form.getLocalContext().setlcPatientSex(patient.getSex());
		else
			form.getLocalContext().setlcPatientSex(null);		
	}
	
	//wdev-19361
	protected void onRadioButtonGroupTCIValueChanged() throws PresentationLogicException
	{
		clearSelection();
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearScreen();
		showExtraUIControls_ElectiveList();
		enableInstanceControls(false);
		
		populateTCITabFromData(form.lyrAdmission().tabTCI().dteTCI_From().getValue(), form.lyrAdmission().tabTCI().dteTCI_To().getValue(), true);
		updateControlsState();
	}

	//WDEV-19507
	public Boolean hasPatientAppointmentsWithinNextMonth()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return false;
		
		return domain.hasPatientAppointmentsWithinNextMonth(form.getGlobalContext().Core.getPatientShort());
	}

	//WDEV-19507
	public Boolean hasTCIForSameService()
	{
		if (form.lyrAdmission().tabWaiting().grdPatients().getValue() == null || form.qmbService().getValue()==null)
			return false;
		
		return domain.hasPatientTCIForSameService(form.lyrAdmission().tabWaiting().grdPatients().getValue(), form.qmbService().getValue());
	}

	//WDEV-20234
	public Boolean hasTCIWithinNextMonth()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return false;
		
		return domain.hasPatientTCIWithinNextMonth(form.getGlobalContext().Core.getPatientShort());
	}
	
	//WDEV-20224
	public Boolean isPrivateBedAdmission()
	{
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace() == null)
			return false;
		if (Boolean.TRUE.equals(form.getGlobalContext().Core.getSelectedBedSpaceState().getBedSpace().getPrivateBed()) && form.cmbPatientStatus().getValue() != null && !PatientStatus.PRIVATE.equals(form.cmbPatientStatus().getValue()))
			return true;
		return false;	
	}
	
	public Boolean isOutsideOpeningHoursAdmission()
	{
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getBay() == null || form.getLocalContext().getBayConfig() == null)
			return false;
		return isBayOutOfOpeningHours(form.getLocalContext().getBayConfig());
		
	}
	private boolean isBayOutOfOpeningHours(BayConfigLiteVo selectedBay) //WDEV-20598
	{
		if (selectedBay == null)
			return false;
		
		DateTime admissionDateTime = form.dtimAdmit().getValue() != null ? form.dtimAdmit().getValue() : new DateTime();
		
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(admissionDateTime.getJavaDate());		
		
		boolean isDayWeekDay =  calendar.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY  && calendar.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY;
		boolean isBayOutOfHours = (selectedBay.getOpeningTimeIsNotNull() && admissionDateTime.getTime().isLessThan(selectedBay.getOpeningTime())) || (selectedBay.getClosingTimeIsNotNull() && admissionDateTime.getTime().isGreaterThan(selectedBay.getClosingTime()));
		boolean wasReopenedOnAdmissionDay = wasReopenedOnAdmissionDate(selectedBay, admissionDateTime.getDate());
		
		if (isBayOutOfHours && wasReopenedOnAdmissionDay)
			return false;
		
		if (Boolean.TRUE.equals(selectedBay.getWeekdaysOnly()) && !isDayWeekDay)
			return true;
		return isBayOutOfHours;
	}
	
	private boolean wasReopenedOnAdmissionDate(BayConfigLiteVo tempVo, Date admissionDate)
	{
		if (tempVo.getReOpenOutOfHours() == null)
			return false;
		
		ArrayList<Date> dates = new ArrayList<Date>();
		for (int i=0;i<tempVo.getReOpenOutOfHours().size();i++)
		{
			if (tempVo.getReOpenOutOfHours().get(i) != null && tempVo.getReOpenOutOfHours().get(i).getReopenDateIsNotNull())
				dates.add(tempVo.getReOpenOutOfHours().get(i).getReopenDate());
		}
		return dates.size() > 0 && dates.contains(admissionDate) ? true : false;
		
	}
	
	public Boolean isBayGenderMismatch()
	{
		if (!ConfigFlag.GEN.BED_MANAGEMENT_APPLY_MIXED_SEX_LOGIC.getValue()) //WDEV-22783 
			return false;
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getBay() == null || form.getLocalContext().getBayConfig() == null)
			return false;
		return isBaySpecificGenderMismatch(form.getLocalContext().getBayConfig()); 
	}
	
	private Boolean isBaySpecificGenderMismatch(BayConfigLiteVo bayConfig)
	{
		return  ((bayConfig.getNumOfOccupiedBeds() == null || bayConfig.getNumOfOccupiedBeds() == 0 || (bayConfig.getNumOfOccupiedBeds() > 0 && bayConfig.getTemporaryBayGender() == null)) && ((!Boolean.TRUE.equals(bayConfig.getFemale()) && !Boolean.TRUE.equals(bayConfig.getMale())) || ((!Boolean.TRUE.equals(bayConfig.getFemale()) ||(Boolean.TRUE.equals(bayConfig.getFemale()) && !Boolean.TRUE.equals(bayConfig.getMale()))&& Sex.MALE.equals(form.getLocalContext().getlcPatientSex()))) ||  ((!Boolean.TRUE.equals(bayConfig.getMale()) || (Boolean.TRUE.equals(bayConfig.getMale()) && !Boolean.TRUE.equals(bayConfig.getFemale()))) && Sex.FEMALE.equals(form.getLocalContext().getlcPatientSex()))));			
	}

	public Boolean hasConflictWithTemporaryBayGender()
	{
		if (!ConfigFlag.GEN.BED_MANAGEMENT_APPLY_MIXED_SEX_LOGIC.getValue()) //WDEV-21084
			return false;
		if (form.getGlobalContext().Core.getSelectedBedSpaceState() == null || form.getGlobalContext().Core.getSelectedBedSpaceState().getBay() == null)
			return false;
		return isInConflictWithTemporaryBayGender(form.getLocalContext().getBayConfig()); 
	}
	//WDEV-20927 - changed the return statement
	private Boolean isInConflictWithTemporaryBayGender(BayConfigLiteVo bayConfig)
	{
		if (bayConfig == null)
			return false;
		boolean isGenderAlreadyMixed = isGenderAlreadyMixedForBay();
		return isGenderAlreadyMixed ? true : (bayConfig.getNumOfOccupiedBeds() != null && bayConfig.getNumOfOccupiedBeds() > 0 && bayConfig.getTemporaryBayGenderIsNotNull() && (form.getLocalContext().getlcPatientSex() != null && !form.getLocalContext().getlcPatientSex().equals(bayConfig.getTemporaryBayGender()) && ((form.getGlobalContext().Core.getFemaleBedAdmissionWardCount() != null && form.getGlobalContext().Core.getFemaleBedAdmissionWardCount() >= 1) || (form.getGlobalContext().Core.getMaleBedAdmissionWardCount() != null && form.getGlobalContext().Core.getMaleBedAdmissionWardCount() >= 1))));		
	}

	public void setWardBayConfigRef(WardBayConfigRefVo wardBayConfigRef)
	{
		form.getLocalContext().setWardBayConfigRef(wardBayConfigRef);
		
	}
	public Boolean canCloseBedDialog() 
	{
		return form.getLocalContext().getbCanCloseBedDialog();
	}
		
	public Boolean canClearElectiveListContexts()
	{
		return form.getLocalContext().getbCanClearElectiveListContexts();
	}

	public void clearElectiveListContexts()
	{
		clearElectiveListGC();		
	}
	
	public Boolean isTCIRecordSelectedForView()
	{
		return form.getLocalContext().getTCIElectiveAdmission() != null;
	}
	public PatientShort getPatientForElectiveListEntry()
	{	
		return form.getLocalContext().getPatientShortForTCIEntry();
	}
	
	public void clearSelectionAndInstanceControls()
	{
		clearSelection();//WDEV-22856
		form.getLocalContext().setPatientShortForTCIEntry(null);
		clearScreen();
		enableInstanceControls(false);
		updateControlsState();
		form.fireCustomControlValueChanged();
		
	}


	@Override
	protected void onGrdWardAttendersSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		BookAppointmentForWardAttendersVo wardAttenders = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
		if (wardAttenders != null)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(wardAttenders.getPatient()));
		}
		
		setSexForSelectedpatient(wardAttenders != null ? wardAttenders.getPatient() : null);
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
			
		enableInstanceControls(true);
		populateScreenFromPatientSelected_WardAttenders(wardAttenders != null ? wardAttenders.getPatient() : null);
		form.fireCustomControlValueChanged();
	
		updateControlsState();
	}


	@Override
	protected void onImbClearWardClick() throws PresentationLogicException
	{
		
		form.lyrAdmission().tabWardAttenders().grdWardAttenders().getRows().clear();
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839

		clearSelection();
		
		clearScreen();
		
		// Disable controls
		enableInstanceControls(false);
		
	}


	@Override
	protected void onImbSearchWardClick() throws PresentationLogicException
	{
		clearSelection();
		clearScreen();

		enableInstanceControls(false);
		
		populateWardAttendersTabFromData();
		
	}

	private void populateWardAttendersTabFromData()
	{
		form.getLocalContext().setRecordSelected(false);
		form.lyrAdmission().tabWardAttenders().grdWardAttenders().getRows().clear();

		BedSpaceStateLiteVo bed = form.getGlobalContext().Core.getSelectedBedSpaceState();

		BookAppointmentForWardAttendersVoCollection wardAppts = domain.listWardAttenders(bed != null ? bed.getWard() : null, form.lyrAdmission().tabWardAttenders().dteWard().getValue());

		if (wardAppts == null || wardAppts.size() == 0)
		{
			engine.showMessage("No results found.");
			return;
		}

		populateWardAttendancesGridFromData(wardAppts);
	}


	private void populateWardAttendancesGridFromData(BookAppointmentForWardAttendersVoCollection wardAppts)
	{
		form.lyrAdmission().tabWardAttenders().grdWardAttenders().getRows().clear();
		if (wardAppts == null)
			return;
		
		for (BookAppointmentForWardAttendersVo wardAppt : wardAppts)
		{
			grdWardAttendersRow row = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getRows().newRow();

			if (wardAppt == null || wardAppt.getPatient() == null)
				continue;

			row.setColApptTime(wardAppt.getApptStartTime());

			PatientLite_IdentifiersVo patient = wardAppt.getPatient();

			if (patient.getName() != null)
			{
				row.setColForename(patient.getName().getForename());
				row.setColSurname(patient.getName().getSurname());
			}

			PatientId patId = patient.getDisplayId();
			row.setColIdentifier(patId != null ? patId.getValue() : null);
			row.setColSex(patient.getSex() != null ? patient.getSex().toString() : null);

			Integer age = patient.calculateAge();

			if (age != null)
				row.setColAge(patient.calculateAgeText());

			row.setColDOB(patient.getDob() != null ? patient.getDob().toString() : null);

			if (patient.getAssociatedPatient() != null)
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());

			if (patient.getDod() != null)
			{	
				row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());
				row.setTooltip(getRIPInfo(patient));
			}	

			row.setValue(wardAppt);
		}
	}
	//WDEV-20927
	public Boolean isGenderAlreadyMixedForBay()
	{
			BayConfigLiteVo bayConfig  = form.getLocalContext().getBayConfig();
			if (bayConfig == null)
				return false;
			return (bayConfig.getTemporaryBayGenderIsNotNull() && bayConfig.getNumOfBedsIsNotNull() && bayConfig.getNumOfOccupiedBedsIsNotNull() && bayConfig.getNumOfOccupiedBeds() >= 2 && form.getGlobalContext().Core.getMaleBedAdmissionWardCountIsNotNull() &&  form.getGlobalContext().Core.getFemaleBedAdmissionWardCountIsNotNull() && (form.getGlobalContext().Core.getMaleBedAdmissionWardCount() >= 1 && form.getGlobalContext().Core.getFemaleBedAdmissionWardCount() >= 1));	
	}

	@Override
	protected void onImbHealthyLodgerClick() throws PresentationLogicException
	{
		if (form.getLocalContext().getAdmissionDetailIsNotNull() && form.lyrAdmission().tabInWaiting().isVisible())
		{	
			form.getGlobalContext().Core.setHealthyLodgerDetails(form.getLocalContext().getAdmissionDetail().getHealthyLodgerDetails());
			engine.open(form.getForms().Core.HealthyLodgerDetails, new Object[]{FormMode.VIEW});	
		}
		else
		{	
			engine.open(form.getForms().Core.HealthyLodgerDetails);
		}
	}


	@Override
	protected void onChkHealthyLodgerValueChanged()	throws PresentationLogicException
	{
		if (!form.chkHealthyLodger().getValue())
		{	
			form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		}
		else
		{	
			engine.open(form.getForms().Core.HealthyLodgerDetails);
		}
		updateControlsState();
	}

	
	public void refreshHomeLeaves()
	{
		clearScreen();
		populatehomeLeaveTabFromData();
		form.getLocalContext().setAdmissionDetail(null);
		form.getLocalContext().setRecordSelected(false);
		enableHomeLeaveInstanceControls(false);
		updateControlsState();
		
		form.fireCustomControlValueChanged();
		
	}

	public Boolean cancelHomeLeave()
	{
		if (form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue() == null)
			return false;

		try
		{
			domain.cancelHomeLeave(null, form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue());
		}

		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			refreshHomeLeaves();
			return false;
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			refreshHomeLeaves();
			return false;
		}	
		return true;
	}


	@Override
	protected void onGrdPETSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setRecordSelected(true);
		
		if (form.lyrAdmission().tabPET().grdPET().getValue() != null)
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.lyrAdmission().tabPET().grdPET().getValue().getPatient()));
		}
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		
		setSexForSelectedpatient(form.lyrAdmission().tabPET().grdPET().getValue() != null ? form.lyrAdmission().tabPET().grdPET().getValue().getPatient() : null);
			
		enableInstanceControls(true);
		
		populateScreenFromPatientSelected_PET();
		form.fireCustomControlValueChanged();
	
		updateControlsState();
		
	}


	private void populateScreenFromPatientSelected_PET()
	{
		clearScreen();
		
		PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrAdmission().tabPET().grdPET().getValue();
		
		if (pendingEmergencyTheatre == null || pendingEmergencyTheatre.getPatient() == null)
			return;

		// Default in current ward
		if(form.getGlobalContext().Core.getADTWardIsNotNull())
		{
			form.cmbWard().newRow(form.getGlobalContext().Core.getADTWard(), form.getGlobalContext().Core.getADTWard().toString());
			form.cmbWard().setValue(form.getGlobalContext().Core.getADTWard());			
		}
		
		// Default in Service from Ward Attenders list
		if (pendingEmergencyTheatre.getService() != null)
		{
			form.qmbService().newRow(pendingEmergencyTheatre.getService(), pendingEmergencyTheatre.getService().getServiceName());
			form.qmbService().setValue(pendingEmergencyTheatre.getService());
		}

		// Default in Speciality
		if (pendingEmergencyTheatre.getService() != null && pendingEmergencyTheatre.getService().getSpecialty() != null && form.cmbSpecialty().getValue() == null)
		{
			form.cmbSpecialty().newRow(pendingEmergencyTheatre.getService().getSpecialty(), pendingEmergencyTheatre.getService().getSpecialty().getText());
			form.cmbSpecialty().setValue(pendingEmergencyTheatre.getService().getSpecialty());
		}
		
		// Default in Consultant  WDEV-22760
		MedicVo medic = domain.getMedic(pendingEmergencyTheatre.getResponsibleHCP());
		if (medic != null)
		{
    		form.qmbConsultant().newRow(medic, medic.getIMosName());
    		form.qmbConsultant().setValue(medic);
		}

		// No default on Ward Type
		// No default on Source of Admission
		// Method of Admission defaulted to 24 - Emergency
		form.cmbMethod().setValue(MethodOfAdmission.EMERGENCY);
		
		// No default on Patient Category
		
		// Default on Admit Date Time
		form.dtimAdmit().setValue(new DateTime());
		
		// No default on Anticipated Stay
		// Estimated date of discharged to be calculated based on the above two values
		DateTime estimatedDischargeDateTime = calculateEstimateDischarge(form.dtimAdmit().getValue(), form.intAntStay().getValue());
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			form.dteEstDischarge().setValue(estimatedDischargeDateTime != null ? estimatedDischargeDateTime.getDate() : null);
		}
		else
		{	
			form.dtimEstDischarge().setValue(estimatedDischargeDateTime);
		}
		// No default on Emergency Referral
		// No default on Chaplain
		// No default on Case Note Folder Location
		
		//Default category from the Referral
		form.cmbPatientStatus().setValue(pendingEmergencyTheatre.getPendingAdmissionPatientCategory() != null ? pendingEmergencyTheatre.getPendingAdmissionPatientCategory() : pendingEmergencyTheatre.getPatient().getPatientCategory());
	}


	@Override
	protected void onRadioButtonGroupPETWardValueChanged() throws PresentationLogicException
	{
		populatePETGrid(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(), form.lyrAdmission().tabPET().GroupPETWard().getValue());
		
	}


	@Override
	protected void onImbClear_PEAClick() throws PresentationLogicException
	{
		form.lyrAdmission().tabPendingEmergency().dtePEAFrom().setValue(null);
		form.lyrAdmission().tabPendingEmergency().dtePEATo().setValue(null);
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839
		form.lyrAdmission().tabPendingEmergency().chkPEATodayOnly().setValue(false);
		form.lyrAdmission().tabPendingEmergency().GroupPendingEmergencies().setValue(GroupPendingEmergenciesEnumeration.rdoPendingAdmissionCurrentWard);
		form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getRows().clear();
		clearSelection();
		clearScreen();		
		enableInstanceControls(false);
		updateControlsState();
		
	}


	@Override
	protected void onImbSearch_PEAClick() throws PresentationLogicException
	{
		clearSelection();
		form.getLocalContext().setTCIElectiveAdmission(null);
		clearScreen();		
		enableInstanceControls(false);
		
		if (validateSearchCriteria())
			populatePendingEmergencyTab(form.lyrAdmission().tabPendingEmergency().GroupPendingEmergencies().getValue());
		updateControlsState();		
	}


	@Override
	protected void onChkPEATodayOnlyValueChanged()	throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.lyrAdmission().tabPendingEmergency().chkPEATodayOnly().getValue()))
		{
			form.lyrAdmission().tabPendingEmergency().dtePEAFrom().setValue(new Date());
			form.lyrAdmission().tabPendingEmergency().dtePEATo().setValue(new Date());
			form.lyrAdmission().tabPendingEmergency().chkPEATodayOnly().setValue(true);
			clearSelection();
			clearScreen();			
			enableInstanceControls(false);

			populatePETGrid(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(),form.lyrAdmission().tabPET().GroupPETWard().getValue());
			updateControlsState();
		}
		
	}


	@Override
	protected void onDtePEAToValueChanged() throws PresentationLogicException 
	{
		form.lyrAdmission().tabPendingEmergency().chkPEATodayOnly().setValue(Boolean.FALSE);
		
	}


	@Override
	protected void onDtePEAFromValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabPendingEmergency().chkPEATodayOnly().setValue(Boolean.FALSE);
		
	}


	@Override
	protected void onImbClear_PETClick() throws PresentationLogicException
	{		
		form.lyrAdmission().tabPET().dtePETFrom().setValue(null);
		form.lyrAdmission().tabPET().dtePETTo().setValue(null);
		form.lyrAdmission().tabPET().chkPETTodayOnly().setValue(false);
		form.getLocalContext().setIsCaseNoteFolderVisible(null);//WDEV-22839
		form.lyrAdmission().tabPET().GroupPETWard().setValue(GroupPETWardEnumeration.rdoPETCurrentWard);
		form.lyrAdmission().tabPET().grdPET().getRows().clear();
		clearSelection();
		clearScreen();		
		enableInstanceControls(false);
		updateControlsState();		
	}


	@Override
	protected void onImbSearch_PETClick() throws PresentationLogicException
	{
		clearSelection();	
		clearScreen();		
		enableInstanceControls(false);
		
		if (validateSearchCriteria())
			populatePETGrid(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(),form.lyrAdmission().tabPET().GroupPETWard().getValue());
		updateControlsState();			
	}


	@Override
	protected void onChkPETTodayOnlyValueChanged()	throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.lyrAdmission().tabPET().chkPETTodayOnly().getValue()))
		{
			form.lyrAdmission().tabPET().dtePETFrom().setValue(new Date());
			form.lyrAdmission().tabPET().dtePETTo().setValue(new Date());
			form.lyrAdmission().tabPET().chkPETTodayOnly().setValue(true);
			
			clearSelection();
			clearScreen();			
			enableInstanceControls(false);

			populatePETGrid(form.lyrAdmission().tabPET().dtePETFrom().getValue(), form.lyrAdmission().tabPET().dtePETTo().getValue(),form.lyrAdmission().tabPET().GroupPETWard().getValue());
			updateControlsState();
		}
	}


	@Override
	protected void onDtePETToValueChanged() throws PresentationLogicException
	{
		form.lyrAdmission().tabPET().chkPETTodayOnly().setValue(Boolean.FALSE);		
	}


	@Override
	protected void onDtePETFromValueChanged() throws PresentationLogicException 
	{
		form.lyrAdmission().tabPET().chkPETTodayOnly().setValue(Boolean.FALSE);
		
	}


	/**
	 * Function used to create the CareSpell for admission
	 * @param patient
	 * @param startDateTime
	 * @return
	 */
	private CareSpellAdmitVo createCareSpell(PatientRefVo patient, DateTime startDateTime)
	{
		CareSpellAdmitVo careSpell = new CareSpellAdmitVo();

		careSpell.setPatient(patient);
		careSpell.setStartDate(startDateTime.getDate());
		careSpell.setEndDate(null);

		CareSpellStatusHistoryVo firstStatus = new CareSpellStatusHistoryVo();
		firstStatus.setStatus(ProblemGroupStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		careSpell.setCurrentStatus(firstStatus);
		careSpell.setStatusHistory(new CareSpellStatusHistoryVoCollection());
		careSpell.getStatusHistory().add(firstStatus);
		
		return careSpell;
	}


	private EpisodeOfCareAdmitVo createEpisodeOfCare(CareSpellAdmitVo careSpell, DateTime startDateTime, HcpRefVo responsibleHCP, Specialty specialty)
	{
		EpisodeOfCareAdmitVo episodeOfCare = new EpisodeOfCareAdmitVo();
		
		episodeOfCare.setStartDate(startDateTime.getDate());
		episodeOfCare.setEndDate(null);

		episodeOfCare.setCareSpell(careSpell);
		episodeOfCare.setRelationship(CareSpelltoEpisodeRelationship.PRIMARY);

		episodeOfCare.setSpecialty(specialty);
		episodeOfCare.setResponsibleHCP(responsibleHCP);		
		
		EpisodeOfCareStatusHistoryVo firstStatus = new EpisodeOfCareStatusHistoryVo();
		firstStatus.setStatus(EpisodeOfCareStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		episodeOfCare.setCurrentStatus(firstStatus);
		episodeOfCare.setStatusHistory(new EpisodeOfCareStatusHistoryVoCollection());
		episodeOfCare.getStatusHistory().add(firstStatus);
		
		if (careSpell.getEpisodes() == null) careSpell.setEpisodes(new EpisodeOfCareAdmitVoCollection());
		careSpell.getEpisodes().add(episodeOfCare);
		
		return episodeOfCare;
	}
	
	
	private CareContextAdmitVo createCareContext(EpisodeOfCareAdmitVo episodeOfCare, ContextType contextType, PasEventAdmitVo pasEvent, DateTime startDateTime, Date estimatedDischargeDate, HcpRefVo responsibleHCP, ContactLocation locationType, String bedNumber)
	{
		CareContextAdmitVo careContext = new CareContextAdmitVo();
		
		careContext.setContext(contextType);
		
		careContext.setStartDateTime(startDateTime);
		careContext.setEndDateTime(null);
		
		careContext.setResponsibleHCP(responsibleHCP);
		careContext.setEpisodeOfCare(episodeOfCare);
		
		careContext.setPasEvent(pasEvent);
		careContext.setBedNumber(bedNumber);
		careContext.setEstimatedDischargeDate(estimatedDischargeDate);
		
		CareContextStatusHistoryVo firstStatus = new CareContextStatusHistoryVo();
		firstStatus.setStatus(CareContextStatus.OPEN);
		firstStatus.setStatusDateTime(startDateTime);
		
		careContext.setCurrentStatus(firstStatus);
		careContext.setStatusHistory(new CareContextStatusHistoryVoCollection());
		careContext.getStatusHistory().add(firstStatus);
		
		if (episodeOfCare.getCareContexts() == null) episodeOfCare.setCareContexts(new CareContextAdmitVoCollection());
		episodeOfCare.getCareContexts().add(careContext);
		
		return careContext;
	}


	private CatsReferralEmergencyAdmissionVo createCatsReferral(PatientLite_IdentifiersVo patient, AdmissionDetailVo admission, CareSpellAdmitVo careSpell)
	{
		if (careSpell == null || careSpell.getEpisodes() == null || careSpell.getEpisodes().size() < 1
				|| careSpell.getEpisodes().get(0).getCareContexts() == null)
			throw new CodingRuntimeException("Invalid care spell created.");
		
		CatsReferralEmergencyAdmissionVo referral = new CatsReferralEmergencyAdmissionVo();
		
		referral.setPatient(patient);
		
		for (CareContextAdmitVo careContext : careSpell.getEpisodes().get(0).getCareContexts())
		{
			if (ContextType.REFERRAL.equals(careContext.getContext()))
			{
				referral.setCareContext(careContext);
				referral.setEpisodeOfCare(careSpell.getEpisodes().get(0));
				break;
			}
		}
		PatientWithGPForCCGVo patientWithGP = domain.getPatientForCCG(patient);
		String codeCCG = getCCGCode(patientWithGP);
		
		CatsReferralStatusVo referralStatus = new CatsReferralStatusVo();
		referralStatus.setReferralStatus(ReferralApptStatus.REFERRAL_ACCEPTED);
		referralStatus.setStatusDateTime(new DateTime());
		referralStatus.setAuthoringUser((MemberOfStaffRefVo) domain.getMosUser());
		referral.setCurrentStatus(referralStatus);
		referral.setStatusHistory(new CATSReferralStatusRefVoCollection());
		referral.getStatusHistory().add(referralStatus);

		referral.setContract(null);
		referral.setHasAppointments(false);
		
		referral.setAdmissions(new AdmissionDetailVoCollection());
		referral.getAdmissions().add(admission);
		
			ReferralDetailsEmergencyAdmissionVo referralDetails = new ReferralDetailsEmergencyAdmissionVo();
			referralDetails.setReferrerType(form.cmbSourceOfReferral().getValue() != null ? form.cmbSourceOfReferral().getValue() : SourceOfReferral.ED);
			referralDetails.setService(admission.getService());
			referralDetails.setConsultant(domain.getHcpFromIMos(admission.getConsultant()));
			referralDetails.setAuthoringUser((MemberOfStaffRefVo) domain.getMosUser());
			referralDetails.setAuthoringDateTime(new DateTime());
			//referralDetails.setDateReferralReceived(new Date());//WDEV-22688
			referralDetails.setDateOfReferral(new Date());
			referralDetails.setEnd18WW(null);
			referralDetails.setPCT(codeCCG);
		
		referral.setReferralDetails(referralDetails);
		referral.setIsEmergencyReferral(Boolean.TRUE);
		referral.setUrgency(ReferralUrgency.EMERGENCY); //WDEV-22229
		
		return referral;
	}
	
	//WDEV-20585 //WDEV-21767 - MAXIMS_10.5.1.0
	private String getCCGCode(PatientWithGPForCCGVo patient)
	{
		if (patient == null)
			return null;
		
		if (!Boolean.TRUE.equals(ConfigFlag.DOM.GP_USE_SURGERIES.getValue()))
		{
			// 1 - Patient.Gp.practices.practice (with isDefault).PCTCode (this is a CCG so no lookup of CCGPCTPCCodes needed) 
			// 2 - Patient.Gp.practices.practice (with isDefault).Address.Postcode
			if (patient.getGp() != null && patient.getGp().getPractices() != null)
			{
				for (GpToPracticesVo gpToPractice : patient.getGp().getPractices())
				{
					if (Boolean.TRUE.equals(gpToPractice.getIsPrimaryPractice()))
					{
						// Case 1
						if (gpToPractice.getPractice() != null && gpToPractice.getPractice().getPctCode() != null)
							return gpToPractice.getPractice().getPctCode();
						
						// Case 2
						if (gpToPractice.getPractice() != null && gpToPractice.getPractice().getAddress() != null)
						{
							String codeCCG = domain.getCodeCCGFromPostalCode(gpToPractice.getPractice().getAddress().getPostCode());
							if (codeCCG != null) return codeCCG;
						}
					}
						
				}
			}
		}
			
		// 3 - Patient.gpSurgery.address.postcode
		if (patient.getGpSurgery() != null && patient.getGpSurgery().getAddress() != null)
		{
			String codeCCG = domain.getCodeCCGFromPostalCode(patient.getGpSurgery().getAddress().getPostCode());
			if (codeCCG != null) return codeCCG;
		}
		
		//4 - if overseas visitor, use designated code
		if (Boolean.TRUE.equals(patient.getOverseasVisitor())) 
			return OVERSEAS_VISITOR_CCG;
		
		// 5 -  Patient.Address.PCT(CCG) or Post code - if no post code on record use default codes for CCG // //WDEV-20585
		if (patient.getAddress() != null)
		{
			String codeCCG =  null;
			
			if (patient.getAddress().getPctCode() != null)
			{	
				codeCCG = patient.getAddress().getPctCode();
			}			
			else
			{
				codeCCG = domain.getCodeCCGFromPostalCode(patient.getAddress().getPostCode());
			}
			
			if (codeCCG != null) return codeCCG;
		}
		
		//6 - current user's organisation
		if (engine.getCurrentLocation() != null)
		{
			String codeCCG = domain.getCCGCodeForCurrentLocationOrg(engine.getCurrentLocation());
			if (codeCCG != null)
				return codeCCG;
		}
		
		return RESIDENCE_NOT_KNOWN_CCG;
	}

	//sort methods for grids with manual comparators
	@Override
	protected void onGrdPendingEmergencyAdmissionGridHeaderClicked(int column)	throws PresentationLogicException
	{
		CatsReferralPendingEmergencyNonEDAdmissionListVoCollection vals = form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValues();
		if (vals.size() <2)
			return;
		CatsReferralPendingEmergencyNonEDAdmissionListVo selPendingEmerAdm = form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue();
		toggleSortOrder(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderPendingEmergAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderPendingEmergDOB()));
		}
		populatePendingEmergencyAdmissionGrid(vals);
		if (selPendingEmerAdm != null)
		{	
			form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().setValue(selPendingEmerAdm);
		}	
		form.getLocalContext().setIsCaseNoteFolderVisible(domain.isCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientShort()));//WDEV-22803
		updateCaseNoteLocationState();
	}

	@Override
	protected void onGrdTCI_ElectiveGridHeaderClicked(int column)	throws PresentationLogicException 
	{
		PatientElectiveListBedInfoVoCollection vals = form.lyrAdmission().tabTCI().grdTCI_Elective().getValues();
		if (vals.size() <2)
			return;
		PatientElectiveListBedInfoVo val = form.lyrAdmission().tabTCI().grdTCI_Elective().getValue();
		toggleSortOrder(form.lyrAdmission().tabTCI().grdTCI_Elective(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderTCIAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderTCIDOB()));
		}
		else if (COL_TCI_DATE_LOS == column)
		{
			vals.sort(new BedAdmissionTCIDateTimeComparator(form.getLocalContext().getSortOrderTCIDateTime()));
		}
		else if (COL_TCI_COMMENT == column)
		{
			vals.sort(new BedAdmissionTCICommentsComparator(form.getLocalContext().getSortOrderTCIComments()));
		}
		populateTCIRecordsToGrid(vals);
		if (val != null)
		{
			form.lyrAdmission().tabTCI().grdTCI_Elective().setValue(val);
		}		
	}


	@Override
	protected void onGrdInWaitingGridHeaderClicked(int column)	throws PresentationLogicException 
	{
		InpatientEpisodeLiteVoCollection vals = form.lyrAdmission().tabInWaiting().grdInWaiting().getValues();
		if (vals.size() <2)
			return;
		InpatientEpisodeLiteVo selVal = form.lyrAdmission().tabInWaiting().grdInWaiting().getValue();
		toggleSortOrder(form.lyrAdmission().tabInWaiting().grdInWaiting(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderAwaitingBedAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderAwaitingBedDOB()));
		}
		populateInWaitingGridFromData(vals);
		if (selVal != null)
		{
			form.lyrAdmission().tabInWaiting().grdInWaiting().setValue(selVal);
		}	
	}


	@Override
	protected void onGrdWardAttendersGridHeaderClicked(int column)	throws PresentationLogicException
	{
		BookAppointmentForWardAttendersVoCollection vals = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValues();		
		if (vals.size() < 2)
			return;
		BookAppointmentForWardAttendersVo val = form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue();
		toggleSortOrder(form.lyrAdmission().tabWardAttenders().grdWardAttenders(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderWardAttendersAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderWardAttendersDOB()));
		}
		populateWardAttendancesGridFromData(vals);
		if (val != null)
		{
			form.lyrAdmission().tabWardAttenders().grdWardAttenders().setValue(val);
		}	
	}


	@Override
	protected void onGrdPatientsGridHeaderClicked(int column)	throws PresentationLogicException
	{
		PatientLite_IdentifiersVoCollection vals = form.lyrAdmission().tabWaiting().grdPatients().getValues();
		if (vals.size() < 2)
			return;
		PatientLite_IdentifiersVo selval = form.lyrAdmission().tabWaiting().grdPatients().getValue();
		toggleSortOrder(form.lyrAdmission().tabWaiting().grdPatients(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderEmergencyAdmissionAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderEmergencyAdmissionDOB()));
		}
		populateEmergencyAdmissionPatientsGridFromData(vals);
		if (selval != null)
		{
			form.lyrAdmission().tabWaiting().grdPatients().setValue(selval);
		}	
	}


	@Override
	protected void onGrdHomeLeaveGridHeaderClicked(int column)	throws PresentationLogicException
	{
		InpatientEpisodeLiteVoCollection vals = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValues();
		if (vals.size() < 2)
			return;
		InpatientEpisodeLiteVo selectedHl = form.lyrAdmission().tabHomeLeave().grdHomeLeave().getValue();
		toggleSortOrder(form.lyrAdmission().tabHomeLeave().grdHomeLeave(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderHomeLeaveAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderHomeLeaveDOB()));
		}
		populateHomeLeavesToGrid(vals);
		if (selectedHl != null)
		{	
			form.lyrAdmission().tabHomeLeave().grdHomeLeave().setValue(selectedHl);
		}	
	}


	@Override
	protected void onGrdPETGridHeaderClicked(int column) throws PresentationLogicException
	{
		PendingEmergencyTheatreForAdmitVoCollection vals = form.lyrAdmission().tabPET().grdPET().getValues();		
		if (vals.size() < 2)
			return;
		PendingEmergencyTheatreForAdmitVo selPETVal = form.lyrAdmission().tabPET().grdPET().getValue();
		toggleSortOrder(form.lyrAdmission().tabPET().grdPET(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderPETAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderPETDOB()));
		}
		populatePendingEmergencyTheatresToGrid(vals);
		if (selPETVal != null)
		{
			form.lyrAdmission().tabPET().grdPET().setValue(selPETVal);
		}	
		
	}

	@Override
	protected void onGrdEmergencyGridHeaderClicked(int column) throws PresentationLogicException
	{
		TrackingForPendingEmergencyAdmitVoCollection vals = form.lyrAdmission().tabEDEmergency().grdEmergency().getValues();		
		if (vals.size() < 2)
			return;
		TrackingForPendingEmergencyAdmitVo trackVal = form.lyrAdmission().tabEDEmergency().grdEmergency().getValue();
		toggleSortOrder(form.lyrAdmission().tabEDEmergency().grdEmergency(), column);
		if (COL_AGE == column)
		{
			vals.sort(new BedAdmissionAgeComparator(form.getLocalContext().getSortOrderEDAge()));
		}
		else if (COL_DOB == column)
		{
			vals.sort(new BedAdmissionDOBComparator(form.getLocalContext().getSortOrderEDDOB()));
		}
		else if (COL_TCI_DATE_LOS == column)
		{
			vals.sort(TrackingForPendingEmergencyAdmitVo.getLOSComparator(form.getLocalContext().getSortOrderEDLOS()));
		}
		populatePendingEDAdmissionsToGrid(vals);
		if (trackVal != null)
		{	
			form.lyrAdmission().tabEDEmergency().grdEmergency().setValue(trackVal);
		}	
		
	}
	//WDEV-21119 toggle sort
	private void toggleSortOrder(GridBridge grid, int column)
	{
		switch (column)
		{
		case COL_AGE:
			if (form.lyrAdmission().tabBooked().grdElective().getID() == grid.getID())
			{	
				form.getLocalContext().setSortOrderBookedAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderBookedAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabPlanned().grdTCI().getID() == grid.getID())
			{	
				form.getLocalContext().setSortOrderPlannedAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPlannedAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabInWaiting().grdInWaiting().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderAwaitingBedAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAwaitingBedAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabWardAttenders().grdWardAttenders().getID() == grid.getID())
			{				
				form.getLocalContext().setSortOrderWardAttendersAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderWardAttendersAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);				
			}
			else if (form.lyrAdmission().tabWaiting().grdPatients().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderEmergencyAdmissionAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEmergencyAdmissionAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);				
			}
			else if (form.lyrAdmission().tabHomeLeave().grdHomeLeave().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderHomeLeaveAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderHomeLeaveAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);				
			}
			else if (form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderPendingEmergAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPendingEmergAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);				
			}
			else if (form.lyrAdmission().tabPET().grdPET().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderPETAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPETAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);				
			}
			else if (form.lyrAdmission().tabEDEmergency().grdEmergency().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderEDAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEDAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderEDLOS(null);	
			}
			else if (form.lyrAdmission().tabTCI().grdTCI_Elective().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderTCIAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderTCIDateTime(null);
				form.getLocalContext().setSortOrderTCIComments(null);
			}				

			break;	
		case COL_DOB:
			if (form.lyrAdmission().tabBooked().grdElective().getID() == grid.getID())
			{	
				form.getLocalContext().setSortOrderBookedDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderBookedDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabPlanned().grdTCI().getID() == grid.getID())
			{					
				form.getLocalContext().setSortOrderPlannedDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPlannedDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}	
			else if (form.lyrAdmission().tabInWaiting().grdInWaiting().getID() == grid.getID())
			{				
				form.getLocalContext().setSortOrderAwaitingBedDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAwaitingBedDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabWardAttenders().grdWardAttenders().getID() == grid.getID())
			{				
				form.getLocalContext().setSortOrderWardAttendersDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderWardAttendersDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabWaiting().grdPatients().getID() == grid.getID())
			{				
				form.getLocalContext().setSortOrderEmergencyAdmissionDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEmergencyAdmissionDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabHomeLeave().grdHomeLeave().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderHomeLeaveDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderHomeLeaveDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getID() == grid.getID())
			{			
				form.getLocalContext().setSortOrderPendingEmergDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPendingEmergDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabPET().grdPET().getID() == grid.getID())
			{				
				form.getLocalContext().setSortOrderPETDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderPETDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabEDEmergency().grdEmergency().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderEDDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEDDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderEDLOS(null);				
			}
			else if (form.lyrAdmission().tabTCI().grdTCI_Elective().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderTCIDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				form.getLocalContext().setSortOrderTCIDateTime(null);
				form.getLocalContext().setSortOrderTCIComments(null);	
			}
			break;	
		case COL_TCI_DATE_LOS:
			if (form.lyrAdmission().tabTCI().grdTCI_Elective().getID() == grid.getID())
			{
				form.getLocalContext().setSortOrderTCIAge(null);
				form.getLocalContext().setSortOrderTCIDOB(null);				
				form.getLocalContext().setSortOrderTCIComments(null);
				form.getLocalContext().setSortOrderTCIDateTime(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIDateTime()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			else if (form.lyrAdmission().tabEDEmergency().grdEmergency().getID() == grid.getID())
			{	
				form.getLocalContext().setSortOrderEDAge(null);
				form.getLocalContext().setSortOrderEDDOB(null);
				form.getLocalContext().setSortOrderEDLOS(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEDLOS()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			break;	
		case COL_TCI_COMMENT:
			if (form.lyrAdmission().tabTCI().grdTCI_Elective().getID() == grid.getID())
			{	
				form.getLocalContext().setSortOrderTCIAge(null);
				form.getLocalContext().setSortOrderTCIDOB(null);
				form.getLocalContext().setSortOrderTCIDateTime(null);
				form.getLocalContext().setSortOrderTCIComments(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderTCIComments()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			break;	
		default:			
			break;							
		}
		updateContextMenus(form.lyrAdmission().tabEDEmergency().isVisible(), getIsReturnFromLeaveVisible(), isOnTCITab());
	}


	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		serviceValueChanged();
	}

	private void serviceValueChanged()
	{
		populateSpecialtyForService(form.qmbService().getValue());
		
		// Clear consultants
		form.qmbConsultant().clear();
	}
	
	private void populateServices(ServiceLiteVoCollection listServices)
	{
		form.qmbService().clear();
		
		if (listServices == null)
		{
			form.qmbService().showOpened();
			return;
		}
		for (ServiceLiteVo service : listServices)
		{
			form.qmbService().newRow(service, service.getServiceName());
		}
		if (listServices.size() == 1)
		{	
			form.qmbService().setValue(listServices.get(0));
			serviceValueChanged();
		}
		else
		{
			form.qmbService().showOpened();
		}
	}


	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbService().clear();
		//WDEV-22789
		form.cmbSpecialty().clear();
		form.qmbConsultant().clear();
		
		if (value == null)
			return;		
		
		ServiceLiteVoCollection services = domain.listServices(value);			
		populateServices(services);
	}


	//@Override
	public Boolean refreshSelectedPatient() 
	{
		if(form.lyrAdmission().tabBooked().isVisible())
		{
			if(form.lyrAdmission().tabBooked().grdElective().getValue() != null && form.lyrAdmission().tabBooked().grdElective().getValue().getPasEventIsNotNull())
			{
				if(form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent().getPatient() != null)
				{
					try
					{
						PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent().getPatient());
						form.lyrAdmission().tabBooked().grdElective().getValue().getPasEvent().setPatient(voPatient);
						return Boolean.TRUE;
					}
					catch (DomainInterfaceException e)
					{
						e.printStackTrace();
						engine.showMessage("Error getting patient record: " + e.toString());
					}
				}
			}
		}
		else if(form.lyrAdmission().tabPlanned().isVisible())
		{
			if(form.lyrAdmission().tabPlanned().grdTCI().getValue() != null && form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEventIsNotNull())
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent().getPatient());
					form.lyrAdmission().tabPlanned().grdTCI().getValue().getPasEvent().setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if(form.lyrAdmission().tabEDEmergency().isVisible())
		{
			if(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue() != null && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmissionIsNotNull() && form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEventIsNotNull())
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEvent().getPatient());
					form.lyrAdmission().tabEDEmergency().grdEmergency().getValue().getAssociatedPendingEmergencyAdmission().getPasEvent().setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if(form.lyrAdmission().tabInWaiting().isVisible())
		{
			if(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue() != null && form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEventIsNotNull())
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEvent().getPatient());
					form.lyrAdmission().tabInWaiting().grdInWaiting().getValue().getPasEvent().setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if(form.lyrAdmission().tabWaiting().isVisible())
		{
			if(form.lyrAdmission().tabWaiting().grdPatients().getValue() != null)
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabWaiting().grdPatients().getValue());
					grdPatientsRow row = form.lyrAdmission().tabWaiting().grdPatients().getSelectedRow();
					row.setValue(voPatient);
					form.lyrAdmission().tabWaiting().grdPatients().setValue(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if (form.lyrAdmission().tabTCI().isVisible())
		{
			if (form.lyrAdmission().tabTCI().grdTCI_Elective().getValue() != null)
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().getPatient());
					form.lyrAdmission().tabTCI().grdTCI_Elective().getValue().setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if (form.lyrAdmission().tabWardAttenders().isVisible())
		{
			if (form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue() != null)
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue().getPatient());
					form.lyrAdmission().tabWardAttenders().grdWardAttenders().getValue().setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if (form.lyrAdmission().tabPendingEmergency().isVisible())
		{
			if (form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue() != null)
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().getPatient());
					form.lyrAdmission().tabPendingEmergency().grdPendingEmergencyAdmission().getValue().setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
			}
		}
		else if (form.lyrAdmission().tabPET().isVisible())
		{
			PendingEmergencyTheatreForAdmitVo pendingEmergencyTheatre = form.lyrAdmission().tabPET().grdPET().getValue();
			
			if (pendingEmergencyTheatre != null)
			{
				try
				{
					PatientLite_IdentifiersVo voPatient = domain.getPatient(pendingEmergencyTheatre.getPatient());
					pendingEmergencyTheatre.setPatient(voPatient);
					return Boolean.TRUE;
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error getting patient record: " + e.toString());
				}
				
			}
		}
		
		return Boolean.FALSE;
	}

}
