//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bedadmissioncomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAdmissionLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabBookedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdElectiveRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdElectiveRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdElectiveRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdElectiveRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdElectiveRow get(int index)
				{
					return new grdElectiveRow(super.collection.get(index));
				}
				public grdElectiveRow newRow()
				{
					return new grdElectiveRow(super.collection.newRow());
				}
				public grdElectiveRow newRow(boolean autoSelect)
				{
					return new grdElectiveRow(super.collection.newRow(autoSelect));
				}
				public grdElectiveRow newRowAt(int index)
				{
					return new grdElectiveRow(super.collection.newRowAt(index));
				}
				public grdElectiveRow newRowAt(int index, boolean autoSelect)
				{
					return new grdElectiveRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdElectiveGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection getValues()
				{
					ims.core.vo.PendingElectiveAdmissionAdmitVoCollection listOfValues = new ims.core.vo.PendingElectiveAdmissionAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdElectiveRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdElectiveRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdElectiveRowCollection getRows()
				{
					return new grdElectiveRowCollection(super.grid.getRows());
				}
				public grdElectiveRow getRowByValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdElectiveRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 752, 118, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdElectiveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdElectiveTemp);
				grdElectiveGrid grdElective = (grdElectiveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdElectiveGrid.class, m_grdElectiveTemp);
				grdElective.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("Sex", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("Age", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdElective.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdElective);
			}

			public grdElectiveGrid grdElective()
			{
				return (grdElectiveGrid)super.getGrid(0);
			}
		}
		public static class tabPlannedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTCIRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTCIRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTCIRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTCIRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTCIRow get(int index)
				{
					return new grdTCIRow(super.collection.get(index));
				}
				public grdTCIRow newRow()
				{
					return new grdTCIRow(super.collection.newRow());
				}
				public grdTCIRow newRow(boolean autoSelect)
				{
					return new grdTCIRow(super.collection.newRow(autoSelect));
				}
				public grdTCIRow newRowAt(int index)
				{
					return new grdTCIRow(super.collection.newRowAt(index));
				}
				public grdTCIRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTCIRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTCIGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection getValues()
				{
					ims.core.vo.PendingElectiveAdmissionAdmitVoCollection listOfValues = new ims.core.vo.PendingElectiveAdmissionAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PendingElectiveAdmissionAdmitVo getValue()
				{
					return (ims.core.vo.PendingElectiveAdmissionAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdTCIRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTCIRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTCIRowCollection getRows()
				{
					return new grdTCIRowCollection(super.grid.getRows());
				}
				public grdTCIRow getRowByValue(ims.core.vo.PendingElectiveAdmissionAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTCIRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 198, 10, 26, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 10, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From :", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 238, 8, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 62, 8, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 384, 10, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Today Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 10, 40, 752, 88, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTCITemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTCITemp);
				grdTCIGrid grdTCI = (grdTCIGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCIGrid.class, m_grdTCITemp);
				grdTCI.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("Sex", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("Age", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTCI);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 732, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 696, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public DateControl dteTo()
			{
				return (DateControl)super.getControl(2);
			}
			public DateControl dteFrom()
			{
				return (DateControl)super.getControl(3);
			}
			public CheckBox chkTodayOnly()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdTCIGrid grdTCI()
			{
				return (grdTCIGrid)super.getGrid(0);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(7);
			}
		}
		public static class tabEDEmergencyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdEmergencyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdEmergencyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColLOSReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColLOSReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColLOSOpened()
				{
					super.row.showOpened(6);
				}
				public String getColLOS()
				{
					return (String)super.row.get(6);
				}
				public void setColLOS(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColLOSTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.core.vo.TrackingForPendingEmergencyAdmitVo getValue()
				{
					return (ims.core.vo.TrackingForPendingEmergencyAdmitVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.TrackingForPendingEmergencyAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdEmergencyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdEmergencyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdEmergencyRow get(int index)
				{
					return new grdEmergencyRow(super.collection.get(index));
				}
				public grdEmergencyRow newRow()
				{
					return new grdEmergencyRow(super.collection.newRow());
				}
				public grdEmergencyRow newRow(boolean autoSelect)
				{
					return new grdEmergencyRow(super.collection.newRow(autoSelect));
				}
				public grdEmergencyRow newRowAt(int index)
				{
					return new grdEmergencyRow(super.collection.newRowAt(index));
				}
				public grdEmergencyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdEmergencyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdEmergencyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.TrackingForPendingEmergencyAdmitVoCollection getValues()
				{
					ims.core.vo.TrackingForPendingEmergencyAdmitVoCollection listOfValues = new ims.core.vo.TrackingForPendingEmergencyAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.TrackingForPendingEmergencyAdmitVo getValue()
				{
					return (ims.core.vo.TrackingForPendingEmergencyAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.TrackingForPendingEmergencyAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdEmergencyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdEmergencyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdEmergencyRowCollection getRows()
				{
					return new grdEmergencyRowCollection(super.grid.getRows());
				}
				public grdEmergencyRow getRowByValue(ims.core.vo.TrackingForPendingEmergencyAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdEmergencyRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColLOSHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColLOSHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 740, 118, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdEmergencyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuPendingEmergencyAdmissionCM, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdEmergencyTemp);
				grdEmergencyGrid grdEmergency = (grdEmergencyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEmergencyGrid.class, m_grdEmergencyTemp);
				grdEmergency.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("Sex", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("Age", 0, 0, 40, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("DOB", 0, 0, 80, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdEmergency.addStringColumn("LOS", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdEmergency);
			}

			public grdEmergencyGrid grdEmergency()
			{
				return (grdEmergencyGrid)super.getGrid(0);
			}
		}
		public static class tabPendingEmergencyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdPendingEmergencyAdmissionRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPendingEmergencyAdmissionRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColNHSReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColNHSReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColNHSOpened()
				{
					super.row.showOpened(2);
				}
				public String getColNHS()
				{
					return (String)super.row.get(2);
				}
				public void setColNHS(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColNHSTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public ims.framework.utils.PartialDate getColDOB()
				{
					return (ims.framework.utils.PartialDate)super.row.get(5);
				}
				public void setColDOB(ims.framework.utils.PartialDate value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo getValue()
				{
					return (ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPendingEmergencyAdmissionRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPendingEmergencyAdmissionRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPendingEmergencyAdmissionRow get(int index)
				{
					return new grdPendingEmergencyAdmissionRow(super.collection.get(index));
				}
				public grdPendingEmergencyAdmissionRow newRow()
				{
					return new grdPendingEmergencyAdmissionRow(super.collection.newRow());
				}
				public grdPendingEmergencyAdmissionRow newRow(boolean autoSelect)
				{
					return new grdPendingEmergencyAdmissionRow(super.collection.newRow(autoSelect));
				}
				public grdPendingEmergencyAdmissionRow newRowAt(int index)
				{
					return new grdPendingEmergencyAdmissionRow(super.collection.newRowAt(index));
				}
				public grdPendingEmergencyAdmissionRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPendingEmergencyAdmissionRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPendingEmergencyAdmissionGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColNHSCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoCollection getValues()
				{
					ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoCollection listOfValues = new ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo getValue()
				{
					return (ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo value)
				{
					super.grid.setValue(value);
				}
				public grdPendingEmergencyAdmissionRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPendingEmergencyAdmissionRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPendingEmergencyAdmissionRowCollection getRows()
				{
					return new grdPendingEmergencyAdmissionRowCollection(super.grid.getRows());
				}
				public grdPendingEmergencyAdmissionRow getRowByValue(ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPendingEmergencyAdmissionRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColNHSHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColNHSHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
		
			public static class GroupPendingEmergenciesRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 544, 13, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "All Wards", startTabIndex.intValue() + 10);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 432, 13, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Current Ward", startTabIndex.intValue() + 9);
				}
				public void setText(GroupPendingEmergenciesEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPendingEmergenciesEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPendingEmergenciesEnumeration.None;
						case 0: return GroupPendingEmergenciesEnumeration.rdoPendingAdmissionsAllWards;
						case 1: return GroupPendingEmergenciesEnumeration.rdoPendingAdmissionCurrentWard;
					}
					return null;
				}
				public void setValue(GroupPendingEmergenciesEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPendingEmergenciesEnumeration.None.id);
				}
				public boolean isEnabled(GroupPendingEmergenciesEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPendingEmergenciesEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPendingEmergenciesEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPendingEmergenciesEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPendingEmergenciesEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPendingEmergenciesEnumeration None = new GroupPendingEmergenciesEnumeration(-1);
				public static GroupPendingEmergenciesEnumeration rdoPendingAdmissionsAllWards = new GroupPendingEmergenciesEnumeration(0);
				public static GroupPendingEmergenciesEnumeration rdoPendingAdmissionCurrentWard = new GroupPendingEmergenciesEnumeration(1);
				private GroupPendingEmergenciesEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPendingEmergenciesEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 168, 12, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 12, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 192, 10, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 48, 10, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 312, 14, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Today Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 752, 88, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPendingEmergencyAdmissionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPendingEmergencyAdmissionTemp);
				grdPendingEmergencyAdmissionGrid grdPendingEmergencyAdmission = (grdPendingEmergencyAdmissionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPendingEmergencyAdmissionGrid.class, m_grdPendingEmergencyAdmissionTemp);
				grdPendingEmergencyAdmission.addStringColumn("Surname", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPendingEmergencyAdmission.addStringColumn("Forename", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPendingEmergencyAdmission.addStringColumn("NHS", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPendingEmergencyAdmission.addStringColumn("Sex", 0, 0, 60, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPendingEmergencyAdmission.addStringColumn("Age", 0, 0, 60, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPendingEmergencyAdmission.addPartialDateColumn("DOB", 0, 0, -1, true, true, null, false, 2, true);
				super.addGrid(grdPendingEmergencyAdmission);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 728, 4, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 689, 4, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for Pending Emergency Admissions matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupPendingEmergencies = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPendingEmergencies);
				GroupPendingEmergenciesRadioButton GroupPendingEmergencies = (GroupPendingEmergenciesRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPendingEmergenciesRadioButton.class, tmpGroupPendingEmergencies);
				GroupPendingEmergencies.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPendingEmergencies);
			}

			public DateControl dtePEATo()
			{
				return (DateControl)super.getControl(2);
			}
			public DateControl dtePEAFrom()
			{
				return (DateControl)super.getControl(3);
			}
			public CheckBox chkPEATodayOnly()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdPendingEmergencyAdmissionGrid grdPendingEmergencyAdmission()
			{
				return (grdPendingEmergencyAdmissionGrid)super.getGrid(0);
			}
			public ImageButton imbClear_PEA()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbSearch_PEA()
			{
				return (ImageButton)super.getControl(7);
			}
			public GroupPendingEmergenciesRadioButton GroupPendingEmergencies()
			{
				return (GroupPendingEmergenciesRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabTCIContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTCI_ElectiveRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTCI_ElectiveRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColNHSReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColNHSReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColNHSOpened()
				{
					super.row.showOpened(2);
				}
				public String getColNHS()
				{
					return (String)super.row.get(2);
				}
				public void setColNHS(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColNHSTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public Integer getColAge()
				{
					return (Integer)super.row.get(4);
				}
				public void setColAge(Integer value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public ims.framework.utils.PartialDate getColDOB()
				{
					return (ims.framework.utils.PartialDate)super.row.get(5);
				}
				public void setColDOB(ims.framework.utils.PartialDate value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColTCIDateReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColTCIDateReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColTCIDateOpened()
				{
					super.row.showOpened(6);
				}
				public String getColTCIDate()
				{
					return (String)super.row.get(6);
				}
				public void setColTCIDate(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColTCIDateTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColCommentsReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColCommentsReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColCommentsOpened()
				{
					super.row.showOpened(7);
				}
				public ims.framework.utils.Image getColComments()
				{
					return (ims.framework.utils.Image)super.row.get(7);
				}
				public void setColComments(ims.framework.utils.Image value)
				{
					super.row.set(7, value);
				}
				public void setCellColCommentsTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.RefMan.vo.PatientElectiveListBedInfoVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListBedInfoVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListBedInfoVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTCI_ElectiveRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTCI_ElectiveRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTCI_ElectiveRow get(int index)
				{
					return new grdTCI_ElectiveRow(super.collection.get(index));
				}
				public grdTCI_ElectiveRow newRow()
				{
					return new grdTCI_ElectiveRow(super.collection.newRow());
				}
				public grdTCI_ElectiveRow newRow(boolean autoSelect)
				{
					return new grdTCI_ElectiveRow(super.collection.newRow(autoSelect));
				}
				public grdTCI_ElectiveRow newRowAt(int index)
				{
					return new grdTCI_ElectiveRow(super.collection.newRowAt(index));
				}
				public grdTCI_ElectiveRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTCI_ElectiveRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTCI_ElectiveGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColNHSCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
				}
				private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.RefMan.vo.PatientElectiveListBedInfoVoCollection getValues()
				{
					ims.RefMan.vo.PatientElectiveListBedInfoVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListBedInfoVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.PatientElectiveListBedInfoVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListBedInfoVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListBedInfoVo value)
				{
					super.grid.setValue(value);
				}
				public grdTCI_ElectiveRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTCI_ElectiveRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTCI_ElectiveRowCollection getRows()
				{
					return new grdTCI_ElectiveRowCollection(super.grid.getRows());
				}
				public grdTCI_ElectiveRow getRowByValue(ims.RefMan.vo.PatientElectiveListBedInfoVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTCI_ElectiveRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColNHSHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColNHSHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColTCIDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColTCIDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColCommentsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColCommentsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
			}
		
			public static class GroupTCIRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 544, 13, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "All Wards", startTabIndex.intValue() + 16);
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 432, 13, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "Current Ward", startTabIndex.intValue() + 15);
				}
				public void setText(GroupTCIEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupTCIEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupTCIEnumeration.None;
						case 0: return GroupTCIEnumeration.rdoAllWards;
						case 1: return GroupTCIEnumeration.rdoCurrentWard;
					}
					return null;
				}
				public void setValue(GroupTCIEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupTCIEnumeration.None.id);
				}
				public boolean isEnabled(GroupTCIEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupTCIEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupTCIEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupTCIEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupTCIEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupTCIEnumeration None = new GroupTCIEnumeration(-1);
				public static GroupTCIEnumeration rdoAllWards = new GroupTCIEnumeration(0);
				public static GroupTCIEnumeration rdoCurrentWard = new GroupTCIEnumeration(1);
				private GroupTCIEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupTCIEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 168, 12, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 10, 12, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 192, 10, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 48, 10, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 312, 12, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Today Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 752, 88, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTCI_ElectiveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuElectiveListTCIAdmission, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTCI_ElectiveTemp);
				grdTCI_ElectiveGrid grdTCI_Elective = (grdTCI_ElectiveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTCI_ElectiveGrid.class, m_grdTCI_ElectiveTemp);
				grdTCI_Elective.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addStringColumn("NHS", 0, 0, 90, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addStringColumn("Sex", 0, 0, 75, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addIntColumn("Age", 0, 0, 75, true, true, null, false, 2, true, 0);
				grdTCI_Elective.addPartialDateColumn("DOB", 0, 0, 75, true, true, null, false, 2, true);
				grdTCI_Elective.addStringColumn("TCI Date/Time", 0, 0, 110, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTCI_Elective.addImageColumn("   ", 1, 1, 23, false, 2);
				grdTCI_Elective.setColCommentsHeaderTooltip("TCI Comments");
				super.addGrid(grdTCI_Elective);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 728, 4, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 690, 4, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for Elective TCIs matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupTCI = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupTCI);
				GroupTCIRadioButton GroupTCI = (GroupTCIRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTCIRadioButton.class, tmpGroupTCI);
				GroupTCI.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupTCI);
			}

			public DateControl dteTCI_To()
			{
				return (DateControl)super.getControl(2);
			}
			public DateControl dteTCI_From()
			{
				return (DateControl)super.getControl(3);
			}
			public CheckBox chkTCI_Today()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdTCI_ElectiveGrid grdTCI_Elective()
			{
				return (grdTCI_ElectiveGrid)super.getGrid(0);
			}
			public ImageButton imbTCI_Clear()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbTCI_Search()
			{
				return (ImageButton)super.getControl(7);
			}
			public GroupTCIRadioButton GroupTCI()
			{
				return (GroupTCIRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabInWaitingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdInWaitingRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInWaitingRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInWaitingRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInWaitingRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInWaitingRow get(int index)
				{
					return new grdInWaitingRow(super.collection.get(index));
				}
				public grdInWaitingRow newRow()
				{
					return new grdInWaitingRow(super.collection.newRow());
				}
				public grdInWaitingRow newRow(boolean autoSelect)
				{
					return new grdInWaitingRow(super.collection.newRow(autoSelect));
				}
				public grdInWaitingRow newRowAt(int index)
				{
					return new grdInWaitingRow(super.collection.newRowAt(index));
				}
				public grdInWaitingRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInWaitingRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInWaitingGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdInWaitingRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInWaitingRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInWaitingRowCollection getRows()
				{
					return new grdInWaitingRowCollection(super.grid.getRows());
				}
				public grdInWaitingRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInWaitingRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 10, 16, 752, 110, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdInWaitingTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInWaitingTemp);
				grdInWaitingGrid grdInWaiting = (grdInWaitingGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInWaitingGrid.class, m_grdInWaitingTemp);
				grdInWaiting.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("Sex", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("Age", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInWaiting.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInWaiting);
			}

			public grdInWaitingGrid grdInWaiting()
			{
				return (grdInWaitingGrid)super.getGrid(0);
			}
		}
		public static class tabWardAttendersContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdWardAttendersRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdWardAttendersRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColIdentifierReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColIdentifierReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColIdentifierOpened()
				{
					super.row.showOpened(2);
				}
				public String getColIdentifier()
				{
					return (String)super.row.get(2);
				}
				public void setColIdentifier(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColIdentifierTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColApptTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColApptTimeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColApptTimeOpened()
				{
					super.row.showOpened(6);
				}
				public ims.framework.utils.Time getColApptTime()
				{
					return (ims.framework.utils.Time)super.row.get(6);
				}
				public void setColApptTime(ims.framework.utils.Time value)
				{
					super.row.set(6, value);
				}
				public void setCellColApptTimeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.RefMan.vo.BookAppointmentForWardAttendersVo getValue()
				{
					return (ims.RefMan.vo.BookAppointmentForWardAttendersVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.BookAppointmentForWardAttendersVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdWardAttendersRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdWardAttendersRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdWardAttendersRow get(int index)
				{
					return new grdWardAttendersRow(super.collection.get(index));
				}
				public grdWardAttendersRow newRow()
				{
					return new grdWardAttendersRow(super.collection.newRow());
				}
				public grdWardAttendersRow newRow(boolean autoSelect)
				{
					return new grdWardAttendersRow(super.collection.newRow(autoSelect));
				}
				public grdWardAttendersRow newRowAt(int index)
				{
					return new grdWardAttendersRow(super.collection.newRowAt(index));
				}
				public grdWardAttendersRow newRowAt(int index, boolean autoSelect)
				{
					return new grdWardAttendersRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdWardAttendersGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColIdentifierCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
				}
				public ims.RefMan.vo.BookAppointmentForWardAttendersVoCollection getValues()
				{
					ims.RefMan.vo.BookAppointmentForWardAttendersVoCollection listOfValues = new ims.RefMan.vo.BookAppointmentForWardAttendersVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.BookAppointmentForWardAttendersVo getValue()
				{
					return (ims.RefMan.vo.BookAppointmentForWardAttendersVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.BookAppointmentForWardAttendersVo value)
				{
					super.grid.setValue(value);
				}
				public grdWardAttendersRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdWardAttendersRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdWardAttendersRowCollection getRows()
				{
					return new grdWardAttendersRowCollection(super.grid.getRows());
				}
				public grdWardAttendersRow getRowByValue(ims.RefMan.vo.BookAppointmentForWardAttendersVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdWardAttendersRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColIdentifierHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColIdentifierHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColApptTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColApptTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 176, 16, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 46, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 10, 47, 752, 82, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdWardAttendersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdWardAttendersTemp);
				grdWardAttendersGrid grdWardAttenders = (grdWardAttendersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWardAttendersGrid.class, m_grdWardAttendersTemp);
				grdWardAttenders.addStringColumn("Surname", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWardAttenders.addStringColumn("Forename", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWardAttenders.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWardAttenders.addStringColumn("Sex", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWardAttenders.addStringColumn("Age", 0, 0, 50, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWardAttenders.addStringColumn("DOB", 0, 0, 70, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWardAttenders.addTimeColumn("Appt. Time", 0, 0, -1, true, true, false, null, false, 1, true);
				super.addGrid(grdWardAttenders);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 728, 8, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 688, 8, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for ward attendances matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
			}

			public Label lblCurrentWard()
			{
				return (Label)super.getControl(0);
			}
			public DateControl dteWard()
			{
				return (DateControl)super.getControl(2);
			}
			public grdWardAttendersGrid grdWardAttenders()
			{
				return (grdWardAttendersGrid)super.getGrid(0);
			}
			public ImageButton imbClearWard()
			{
				return (ImageButton)super.getControl(4);
			}
			public ImageButton imbSearchWard()
			{
				return (ImageButton)super.getControl(5);
			}
		}
		public static class tabWaitingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbIdTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatIdType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatIdType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatIdType getValue()
				{
					return (ims.core.vo.lookups.PatIdType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatIdType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdPatientsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.PatientLite_IdentifiersVo getValue()
				{
					return (ims.core.vo.PatientLite_IdentifiersVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientLite_IdentifiersVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientsRow get(int index)
				{
					return new grdPatientsRow(super.collection.get(index));
				}
				public grdPatientsRow newRow()
				{
					return new grdPatientsRow(super.collection.newRow());
				}
				public grdPatientsRow newRow(boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRow(autoSelect));
				}
				public grdPatientsRow newRowAt(int index)
				{
					return new grdPatientsRow(super.collection.newRowAt(index));
				}
				public grdPatientsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.PatientLite_IdentifiersVoCollection getValues()
				{
					ims.core.vo.PatientLite_IdentifiersVoCollection listOfValues = new ims.core.vo.PatientLite_IdentifiersVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientLite_IdentifiersVo getValue()
				{
					return (ims.core.vo.PatientLite_IdentifiersVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientLite_IdentifiersVo value)
				{
					super.grid.setValue(value);
				}
				public grdPatientsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientsRowCollection getRows()
				{
					return new grdPatientsRowCollection(super.grid.getRows());
				}
				public grdPatientsRow getRowByValue(ims.core.vo.PatientLite_IdentifiersVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientsRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 10, 34, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Value :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 10, 10, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Type :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 224, 10, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 224, 34, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename :", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 86, 32, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 296, 8, 284, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 296, 32, 284, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 86, 8, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIdTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIdTypeTemp);
				cmbIdTypeComboBox cmbIdType = (cmbIdTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIdTypeComboBox.class, m_cmbIdTypeTemp);
				super.addComboBox(cmbIdType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 10, 58, 752, 68, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPatientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientsTemp);
				grdPatientsGrid grdPatients = (grdPatientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsGrid.class, m_grdPatientsTemp);
				grdPatients.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Sex", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Age", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPatients);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 730, 16, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 693, 16, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
			}

			public TextBox txtIdValue()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtSurname()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtForename()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbIdTypeComboBox cmbIdType()
			{
				return (cmbIdTypeComboBox)super.getComboBox(0);
			}
			public grdPatientsGrid grdPatients()
			{
				return (grdPatientsGrid)super.getGrid(0);
			}
			public ImageButton imbClearWait()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbSearchWait()
			{
				return (ImageButton)super.getControl(10);
			}
		}
		public static class tabHomeLeaveContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdHomeLeaveRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHomeLeaveRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDobReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDobReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDobOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDob()
				{
					return (String)super.row.get(5);
				}
				public void setColDob(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDobTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHomeLeaveRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHomeLeaveRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHomeLeaveRow get(int index)
				{
					return new grdHomeLeaveRow(super.collection.get(index));
				}
				public grdHomeLeaveRow newRow()
				{
					return new grdHomeLeaveRow(super.collection.newRow());
				}
				public grdHomeLeaveRow newRow(boolean autoSelect)
				{
					return new grdHomeLeaveRow(super.collection.newRow(autoSelect));
				}
				public grdHomeLeaveRow newRowAt(int index)
				{
					return new grdHomeLeaveRow(super.collection.newRowAt(index));
				}
				public grdHomeLeaveRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHomeLeaveRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHomeLeaveGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdHomeLeaveRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHomeLeaveRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHomeLeaveRowCollection getRows()
				{
					return new grdHomeLeaveRowCollection(super.grid.getRows());
				}
				public grdHomeLeaveRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHomeLeaveRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 10, 11, 752, 110, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHomeLeaveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuBedManagementHomeLeave, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHomeLeaveTemp);
				grdHomeLeaveGrid grdHomeLeave = (grdHomeLeaveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHomeLeaveGrid.class, m_grdHomeLeaveTemp);
				grdHomeLeave.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("Sex", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("Age", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHomeLeave.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHomeLeave);
			}

			public grdHomeLeaveGrid grdHomeLeave()
			{
				return (grdHomeLeaveGrid)super.getGrid(0);
			}
		}
		public static class tabPETContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdPETRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPETRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColIdentifierReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColIdentifierReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColIdentifierOpened()
				{
					super.row.showOpened(2);
				}
				public String getColIdentifier()
				{
					return (String)super.row.get(2);
				}
				public void setColIdentifier(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColIdentifierTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(6);
				}
				public ims.framework.utils.Date getColDateTime()
				{
					return (ims.framework.utils.Date)super.row.get(6);
				}
				public void setColDateTime(ims.framework.utils.Date value)
				{
					super.row.set(6, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo getValue()
				{
					return (ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPETRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPETRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPETRow get(int index)
				{
					return new grdPETRow(super.collection.get(index));
				}
				public grdPETRow newRow()
				{
					return new grdPETRow(super.collection.newRow());
				}
				public grdPETRow newRow(boolean autoSelect)
				{
					return new grdPETRow(super.collection.newRow(autoSelect));
				}
				public grdPETRow newRowAt(int index)
				{
					return new grdPETRow(super.collection.newRowAt(index));
				}
				public grdPETRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPETRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPETGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColIdentifierCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.scheduling.vo.PendingEmergencyTheatreForAdmitVoCollection getValues()
				{
					ims.scheduling.vo.PendingEmergencyTheatreForAdmitVoCollection listOfValues = new ims.scheduling.vo.PendingEmergencyTheatreForAdmitVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo getValue()
				{
					return (ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo value)
				{
					super.grid.setValue(value);
				}
				public grdPETRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPETRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPETRowCollection getRows()
				{
					return new grdPETRowCollection(super.grid.getRows());
				}
				public grdPETRow getRowByValue(ims.scheduling.vo.PendingEmergencyTheatreForAdmitVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPETRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColIdentifierHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColIdentifierHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
		
			public static class GroupPETWardRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 544, 13, 70, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper50.getX(), anchoringHelper50.getY(), anchoringHelper50.getWidth(), "All Wards", startTabIndex.intValue() + 34);
					RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 432, 13, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper51.getX(), anchoringHelper51.getY(), anchoringHelper51.getWidth(), "Current Ward", startTabIndex.intValue() + 33);
				}
				public void setText(GroupPETWardEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupPETWardEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupPETWardEnumeration.None;
						case 0: return GroupPETWardEnumeration.rdoPETAllWards;
						case 1: return GroupPETWardEnumeration.rdoPETCurrentWard;
					}
					return null;
				}
				public void setValue(GroupPETWardEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupPETWardEnumeration.None.id);
				}
				public boolean isEnabled(GroupPETWardEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupPETWardEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupPETWardEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupPETWardEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupPETWardEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupPETWardEnumeration None = new GroupPETWardEnumeration(-1);
				public static GroupPETWardEnumeration rdoPETAllWards = new GroupPETWardEnumeration(0);
				public static GroupPETWardEnumeration rdoPETCurrentWard = new GroupPETWardEnumeration(1);
				private GroupPETWardEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupPETWardEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 160, 13, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 13, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 192, 11, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 48, 11, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 312, 14, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Today Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 752, 88, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPETTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPETTemp);
				grdPETGrid grdPET = (grdPETGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPETGrid.class, m_grdPETTemp);
				grdPET.addStringColumn("Surname", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPET.addStringColumn("Forename", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPET.addStringColumn("Identifier", 0, 0, 110, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPET.addStringColumn("Sex", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPET.addStringColumn("Age", 0, 0, 60, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPET.addStringColumn("DOB", 0, 0, 70, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPET.addDateColumn("Expected Date", 0, 0, -1, true, true, null, false, 1, true);
				super.addGrid(grdPET);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 728, 4, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 690, 4, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for Pending Emergency Theatres matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupPETWard = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupPETWard);
				GroupPETWardRadioButton GroupPETWard = (GroupPETWardRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPETWardRadioButton.class, tmpGroupPETWard);
				GroupPETWard.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupPETWard);
			}

			public DateControl dtePETTo()
			{
				return (DateControl)super.getControl(2);
			}
			public DateControl dtePETFrom()
			{
				return (DateControl)super.getControl(3);
			}
			public CheckBox chkPETTodayOnly()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdPETGrid grdPET()
			{
				return (grdPETGrid)super.getGrid(0);
			}
			public ImageButton imbClear_PET()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbSearch_PET()
			{
				return (ImageButton)super.getControl(7);
			}
			public GroupPETWardRadioButton GroupPETWard()
			{
				return (GroupPETWardRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabBooked = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Booked", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBookedContainer m_tabBookedContainer = (tabBookedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBookedContainer.class, m_tabBooked, factory);
			super.addContainer(m_tabBooked, m_tabBookedContainer);
			ims.framework.utils.SizeInfo m_tabBookedDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabBookedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabBookedContainer.setContext(form, appForm, m_tabBooked, loader, form_images_local, contextMenus, startControlID, m_tabBookedDesignSize, m_tabBookedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPlanned = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Planned", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPlannedContainer m_tabPlannedContainer = (tabPlannedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPlannedContainer.class, m_tabPlanned, factory);
			super.addContainer(m_tabPlanned, m_tabPlannedContainer);
			ims.framework.utils.SizeInfo m_tabPlannedDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabPlannedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabPlannedContainer.setContext(form, appForm, m_tabPlanned, loader, form_images_local, contextMenus, startControlID, m_tabPlannedDesignSize, m_tabPlannedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabEDEmergency = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"ED", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabEDEmergencyContainer m_tabEDEmergencyContainer = (tabEDEmergencyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEDEmergencyContainer.class, m_tabEDEmergency, factory);
			super.addContainer(m_tabEDEmergency, m_tabEDEmergencyContainer);
			ims.framework.utils.SizeInfo m_tabEDEmergencyDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabEDEmergencyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
			m_tabEDEmergencyContainer.setContext(form, appForm, m_tabEDEmergency, loader, form_images_local, contextMenus, startControlID, m_tabEDEmergencyDesignSize, m_tabEDEmergencyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPendingEmergency = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pending Emergency", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPendingEmergencyContainer m_tabPendingEmergencyContainer = (tabPendingEmergencyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPendingEmergencyContainer.class, m_tabPendingEmergency, factory);
			super.addContainer(m_tabPendingEmergency, m_tabPendingEmergencyContainer);
			ims.framework.utils.SizeInfo m_tabPendingEmergencyDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabPendingEmergencyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper63.getWidth(), anchoringHelper63.getHeight());
			m_tabPendingEmergencyContainer.setContext(form, appForm, m_tabPendingEmergency, loader, form_images_local, contextMenus, startControlID, m_tabPendingEmergencyDesignSize, m_tabPendingEmergencyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTCI = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Elective TCI", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTCIContainer m_tabTCIContainer = (tabTCIContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTCIContainer.class, m_tabTCI, factory);
			super.addContainer(m_tabTCI, m_tabTCIContainer);
			ims.framework.utils.SizeInfo m_tabTCIDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabTCIRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper64.getWidth(), anchoringHelper64.getHeight());
			m_tabTCIContainer.setContext(form, appForm, m_tabTCI, loader, form_images_local, contextMenus, startControlID, m_tabTCIDesignSize, m_tabTCIRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInWaiting = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Awaiting Bed", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInWaitingContainer m_tabInWaitingContainer = (tabInWaitingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInWaitingContainer.class, m_tabInWaiting, factory);
			super.addContainer(m_tabInWaiting, m_tabInWaitingContainer);
			ims.framework.utils.SizeInfo m_tabInWaitingDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabInWaitingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper65.getWidth(), anchoringHelper65.getHeight());
			m_tabInWaitingContainer.setContext(form, appForm, m_tabInWaiting, loader, form_images_local, contextMenus, startControlID, m_tabInWaitingDesignSize, m_tabInWaitingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabWardAttenders = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Ward Attenders", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabWardAttendersContainer m_tabWardAttendersContainer = (tabWardAttendersContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWardAttendersContainer.class, m_tabWardAttenders, factory);
			super.addContainer(m_tabWardAttenders, m_tabWardAttendersContainer);
			ims.framework.utils.SizeInfo m_tabWardAttendersDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabWardAttendersRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper66.getWidth(), anchoringHelper66.getHeight());
			m_tabWardAttendersContainer.setContext(form, appForm, m_tabWardAttenders, loader, form_images_local, contextMenus, startControlID, m_tabWardAttendersDesignSize, m_tabWardAttendersRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabWaiting = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Waiting Area - Admission", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabWaitingContainer m_tabWaitingContainer = (tabWaitingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWaitingContainer.class, m_tabWaiting, factory);
			super.addContainer(m_tabWaiting, m_tabWaitingContainer);
			ims.framework.utils.SizeInfo m_tabWaitingDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabWaitingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper67.getWidth(), anchoringHelper67.getHeight());
			m_tabWaitingContainer.setContext(form, appForm, m_tabWaiting, loader, form_images_local, contextMenus, startControlID, m_tabWaitingDesignSize, m_tabWaitingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHomeLeave = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Return from Leave", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHomeLeaveContainer m_tabHomeLeaveContainer = (tabHomeLeaveContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHomeLeaveContainer.class, m_tabHomeLeave, factory);
			super.addContainer(m_tabHomeLeave, m_tabHomeLeaveContainer);
			ims.framework.utils.SizeInfo m_tabHomeLeaveDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabHomeLeaveRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper68.getWidth(), anchoringHelper68.getHeight());
			m_tabHomeLeaveContainer.setContext(form, appForm, m_tabHomeLeave, loader, form_images_local, contextMenus, startControlID, m_tabHomeLeaveDesignSize, m_tabHomeLeaveRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 2, 0, 780, 158, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPET = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pending Emergency Theatre", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPETContainer m_tabPETContainer = (tabPETContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPETContainer.class, m_tabPET, factory);
			super.addContainer(m_tabPET, m_tabPETContainer);
			ims.framework.utils.SizeInfo m_tabPETDesignSize = new ims.framework.utils.SizeInfo(780, 158);
			ims.framework.utils.SizeInfo m_tabPETRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper69.getWidth(), anchoringHelper69.getHeight());
			m_tabPETContainer.setContext(form, appForm, m_tabPET, loader, form_images_local, contextMenus, startControlID, m_tabPETDesignSize, m_tabPETRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
		}
		public void settabBookedEnabled(boolean value)
		{
			tabBooked().setEnabled(value);
		}
		public void settabPlannedEnabled(boolean value)
		{
			tabPlanned().setEnabled(value);
		}
		public void settabEDEmergencyEnabled(boolean value)
		{
			tabEDEmergency().setEnabled(value);
		}
		public void settabPendingEmergencyEnabled(boolean value)
		{
			tabPendingEmergency().setEnabled(value);
		}
		public void settabTCIEnabled(boolean value)
		{
			tabTCI().setEnabled(value);
		}
		public void settabInWaitingEnabled(boolean value)
		{
			tabInWaiting().setEnabled(value);
		}
		public void settabWardAttendersEnabled(boolean value)
		{
			tabWardAttenders().setEnabled(value);
		}
		public void settabWaitingEnabled(boolean value)
		{
			tabWaiting().setEnabled(value);
		}
		public void settabHomeLeaveEnabled(boolean value)
		{
			tabHomeLeave().setEnabled(value);
		}
		public void settabPETEnabled(boolean value)
		{
			tabPET().setEnabled(value);
		}
		public void showtabBooked()
		{
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabBooked().setVisible(true);
		}
		public void showtabPlanned()
		{
			tabBooked().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabPlanned().setVisible(true);
		}
		public void showtabEDEmergency()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabEDEmergency().setVisible(true);
		}
		public void showtabPendingEmergency()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabPendingEmergency().setVisible(true);
		}
		public void showtabTCI()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabTCI().setVisible(true);
		}
		public void showtabInWaiting()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabInWaiting().setVisible(true);
		}
		public void showtabWardAttenders()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabWardAttenders().setVisible(true);
		}
		public void showtabWaiting()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(false);
			tabWaiting().setVisible(true);
		}
		public void showtabHomeLeave()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabPET().setVisible(false);
			tabHomeLeave().setVisible(true);
		}
		public void showtabPET()
		{
			tabBooked().setVisible(false);
			tabPlanned().setVisible(false);
			tabEDEmergency().setVisible(false);
			tabPendingEmergency().setVisible(false);
			tabTCI().setVisible(false);
			tabInWaiting().setVisible(false);
			tabWardAttenders().setVisible(false);
			tabWaiting().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabPET().setVisible(true);
		}

		public tabBookedContainer tabBooked()
		{
			return (tabBookedContainer)super.layers.get(0);
		}
		public tabPlannedContainer tabPlanned()
		{
			return (tabPlannedContainer)super.layers.get(1);
		}
		public tabEDEmergencyContainer tabEDEmergency()
		{
			return (tabEDEmergencyContainer)super.layers.get(2);
		}
		public tabPendingEmergencyContainer tabPendingEmergency()
		{
			return (tabPendingEmergencyContainer)super.layers.get(3);
		}
		public tabTCIContainer tabTCI()
		{
			return (tabTCIContainer)super.layers.get(4);
		}
		public tabInWaitingContainer tabInWaiting()
		{
			return (tabInWaitingContainer)super.layers.get(5);
		}
		public tabWardAttendersContainer tabWardAttenders()
		{
			return (tabWardAttendersContainer)super.layers.get(6);
		}
		public tabWaitingContainer tabWaiting()
		{
			return (tabWaitingContainer)super.layers.get(7);
		}
		public tabHomeLeaveContainer tabHomeLeave()
		{
			return (tabHomeLeaveContainer)super.layers.get(8);
		}
		public tabPETContainer tabPET()
		{
			return (tabPETContainer)super.layers.get(9);
		}
	}
	public static class cmbSourceOfEmergencyReferralComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SourceOfEmergencyReferral value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SourceOfEmergencyReferral getValue()
		{
			return (ims.core.vo.lookups.SourceOfEmergencyReferral)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SourceOfEmergencyReferral value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.WardType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.WardType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.WardType getValue()
		{
			return (ims.core.vo.lookups.WardType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.WardType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSourceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SourceOfAdmission value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SourceOfAdmission getValue()
		{
			return (ims.core.vo.lookups.SourceOfAdmission)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SourceOfAdmission value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbMethodComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.MethodOfAdmission value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.MethodOfAdmission getValue()
		{
			return (ims.core.vo.lookups.MethodOfAdmission)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.MethodOfAdmission value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPatientStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatientStatus getValue()
		{
			return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatientStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbEpisodeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo getValue()
		{
			return (ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.EpisodeOfCareWithPrimaryDiagnosisVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSourceOfReferralComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SourceOfReferral value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SourceOfReferral getValue()
		{
			return (ims.core.vo.lookups.SourceOfReferral)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SourceOfReferral value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCCOSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PASSpecialty getValue()
		{
			return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PASSpecialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbConsultantComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MedicVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MedicVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MedicVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MedicVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MedicVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MedicVo getValue()
		{
			return (ims.core.vo.MedicVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MedicVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}

	public static class CaseFolderYesNoRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 229, 392, 48, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper70.getX(), anchoringHelper70.getY(), anchoringHelper70.getWidth(), "No", startTabIndex.intValue() + 61);
			RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 186, 392, 48, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper71.getX(), anchoringHelper71.getY(), anchoringHelper71.getWidth(), "Yes", startTabIndex.intValue() + 60);
		}
		public void setText(CaseFolderYesNoEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public CaseFolderYesNoEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return CaseFolderYesNoEnumeration.None;
				case 0: return CaseFolderYesNoEnumeration.rdoNo;
				case 1: return CaseFolderYesNoEnumeration.rdoYes;
			}
			return null;
		}
		public void setValue(CaseFolderYesNoEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(CaseFolderYesNoEnumeration.None.id);
		}
		public boolean isEnabled(CaseFolderYesNoEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(CaseFolderYesNoEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(CaseFolderYesNoEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(CaseFolderYesNoEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class CaseFolderYesNoEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static CaseFolderYesNoEnumeration None = new CaseFolderYesNoEnumeration(-1);
		public static CaseFolderYesNoEnumeration rdoNo = new CaseFolderYesNoEnumeration(0);
		public static CaseFolderYesNoEnumeration rdoYes = new CaseFolderYesNoEnumeration(1);
		private CaseFolderYesNoEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((CaseFolderYesNoEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(784, 440);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuPendingEmergencyAdmissionCM = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuPendingEmergencyAdmissionCMVIEW_DTAItem = factory.createMenuItem(startControlID.intValue() + 1, "View DTA Details", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6150001)))
			contextMenus.Core.contextMenuPendingEmergencyAdmissionCM.add(contextMenus.Core.contextMenuPendingEmergencyAdmissionCMVIEW_DTAItem);
		form.registerMenu(contextMenus.Core.contextMenuPendingEmergencyAdmissionCM);
		contextMenus.Core.contextMenuElectiveListTCIAdmission = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Core.contextMenuElectiveListTCIAdmissionVIEWItem = factory.createMenuItem(startControlID.intValue() + 2, "View Patient Elective List", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6200001)))
			contextMenus.Core.contextMenuElectiveListTCIAdmission.add(contextMenus.Core.contextMenuElectiveListTCIAdmissionVIEWItem);
		form.registerMenu(contextMenus.Core.contextMenuElectiveListTCIAdmission);
		contextMenus.Core.contextMenuBedManagementHomeLeave = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Core.contextMenuBedManagementHomeLeaveCANCEL_HOME_LEAVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Cancel Home Leave", true, false, new Integer(102652), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6290001)))
			contextMenus.Core.contextMenuBedManagementHomeLeave.add(contextMenus.Core.contextMenuBedManagementHomeLeaveCANCEL_HOME_LEAVEItem);
		form.registerMenu(contextMenus.Core.contextMenuBedManagementHomeLeave);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 516, 319, 270, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ims.framework.FormUiLogic m_ccReferringConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper72.getSize(), instance1, startTabIndex.intValue() + 56, skipContextValidation);
		//ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(516), new Integer(319), new Integer(270), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 56), m_ccReferringConsultantForm, instance1 } );
		ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1067),  new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 56), m_ccReferringConsultantForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccReferringConsultantControl);
		Menu[] menus1 = m_ccReferringConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrAdmissionLayer m_lyrAdmissionLayer = (lyrAdmissionLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAdmissionLayer.class, this, factory);
		super.addLayer(m_lyrAdmissionLayer);
		m_lyrAdmissionLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 404, 370, 55, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Maternity:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 404, 295, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Chaplain:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 404, 347, 84, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Healthy Lodger:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 8, 286, 112, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Source Of\nEmergency Referral:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 8, 370, 111, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Is Self-Admit Patient:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 191, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Service:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 8, 191, 83, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Time of Return:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 166, 82, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date of Return:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 418, 47, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Episode:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 272, 392, 56, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comment:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 8, 392, 178, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Update Case Note Folder Location:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 265, 269, 89, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Anticipated Stay:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 166, 38, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Ward :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 404, 166, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Ward Type:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 404, 191, 113, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Source of Admission: ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 8, 243, 65, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Consultant :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 8, 217, 52, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Specialty:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 404, 217, 113, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Method of Admission:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 404, 269, 106, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Est. Discharge Date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 8, 269, 114, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Admission Date/Time:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 8, 347, 116, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reason for Admission:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 404, 243, 91, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Patient Category:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 8, 321, 100, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Source Of Referral:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 404, 321, 111, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Referring Consultant:", new Integer(0), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 128, 345, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 328, 390, 272, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 516, 267, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 128, 164, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 516, 267, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 128, 267, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 128, 293, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbSourceOfEmergencyReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSourceOfEmergencyReferralTemp);
		cmbSourceOfEmergencyReferralComboBox cmbSourceOfEmergencyReferral = (cmbSourceOfEmergencyReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfEmergencyReferralComboBox.class, m_cmbSourceOfEmergencyReferralTemp);
		super.addComboBox(cmbSourceOfEmergencyReferral);
		RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 516, 164, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbWardTypeTemp);
		cmbWardTypeComboBox cmbWardType = (cmbWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardTypeComboBox.class, m_cmbWardTypeTemp);
		super.addComboBox(cmbWardType);
		RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 516, 189, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSourceTemp);
		cmbSourceComboBox cmbSource = (cmbSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceComboBox.class, m_cmbSourceTemp);
		super.addComboBox(cmbSource);
		RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 516, 215, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbMethodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbMethodTemp);
		cmbMethodComboBox cmbMethod = (cmbMethodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodComboBox.class, m_cmbMethodTemp);
		super.addComboBox(cmbMethod);
		RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 516, 241, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_cmbPatientStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPatientStatusTemp);
		cmbPatientStatusComboBox cmbPatientStatus = (cmbPatientStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientStatusComboBox.class, m_cmbPatientStatusTemp);
		super.addComboBox(cmbPatientStatus);
		RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 128, 416, 472, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbEpisodeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbEpisodeTemp);
		cmbEpisodeComboBox cmbEpisode = (cmbEpisodeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEpisodeComboBox.class, m_cmbEpisodeTemp);
		super.addComboBox(cmbEpisode);
		RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 128, 215, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 128, 319, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbSourceOfReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSourceOfReferralTemp);
		cmbSourceOfReferralComboBox cmbSourceOfReferral = (cmbSourceOfReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfReferralComboBox.class, m_cmbSourceOfReferralTemp);
		super.addComboBox(cmbSourceOfReferral);
		RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 128, 164, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);
		RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 128, 215, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbCCOSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbCCOSpecialtyTemp);
		cmbCCOSpecialtyComboBox cmbCCOSpecialty = (cmbCCOSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOSpecialtyComboBox.class, m_cmbCCOSpecialtyTemp);
		super.addComboBox(cmbCCOSpecialty);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 128, 189, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbServiceTemp);
		qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
		super.addComboBox(qmbService);
		RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 128, 241, 254, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_qmbConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbConsultantTemp);
		qmbConsultantComboBox qmbConsultant = (qmbConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantComboBox.class, m_qmbConsultantTemp);
		super.addComboBox(qmbConsultant);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 516, 349, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 128, 372, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 516, 372, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 516, 297, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));

		// Time Controls
		RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 128, 189, 40, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 350, 267, 32, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(2)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 532, 345, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.HealthyLodger16x16, this.getImages().Core.Lodger16x16Disabled, "Healthy Lodger Details", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpCaseFolderYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpCaseFolderYesNo);
		CaseFolderYesNoRadioButton CaseFolderYesNo = (CaseFolderYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(CaseFolderYesNoRadioButton.class, tmpCaseFolderYesNo);
		CaseFolderYesNo.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(CaseFolderYesNo);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccReferringConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccReferringConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccReferringConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccReferringConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccReferringConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccReferringConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public lyrAdmissionLayer lyrAdmission()
	{
		return (lyrAdmissionLayer)super.getLayer(0);
	}
	public Label lblMaternity()
	{
		return (Label)super.getControl(11);
	}
	public Label lblChaplain()
	{
		return (Label)super.getControl(12);
	}
	public Label lblHealthyLodger()
	{
		return (Label)super.getControl(13);
	}
	public Label lblSourceOfEmergencyReferral()
	{
		return (Label)super.getControl(14);
	}
	public Label lblSelfAdmitPatient()
	{
		return (Label)super.getControl(15);
	}
	public Label lblService()
	{
		return (Label)super.getControl(16);
	}
	public Label lblHLTimeOfReturn()
	{
		return (Label)super.getControl(17);
	}
	public Label lblHLReturnDate()
	{
		return (Label)super.getControl(18);
	}
	public Label lblEpisode()
	{
		return (Label)super.getControl(19);
	}
	public Label lblCaseComment()
	{
		return (Label)super.getControl(20);
	}
	public Label lblUpdateCasefolder()
	{
		return (Label)super.getControl(21);
	}
	public Label lblAntStay()
	{
		return (Label)super.getControl(22);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(23);
	}
	public Label lblWardType()
	{
		return (Label)super.getControl(24);
	}
	public Label lblSourceOfAdmission()
	{
		return (Label)super.getControl(25);
	}
	public Label lblConsultant()
	{
		return (Label)super.getControl(26);
	}
	public Label lblSpecialty()
	{
		return (Label)super.getControl(27);
	}
	public Label lblMethod()
	{
		return (Label)super.getControl(28);
	}
	public Label lblEstDischDate()
	{
		return (Label)super.getControl(29);
	}
	public Label lblAdmitDateTime()
	{
		return (Label)super.getControl(30);
	}
	public Label lblReasonForAdmission()
	{
		return (Label)super.getControl(31);
	}
	public Label lblPatientStatus()
	{
		return (Label)super.getControl(32);
	}
	public Label lblSourceOfReferral()
	{
		return (Label)super.getControl(33);
	}
	public Label lblReferringConsultant()
	{
		return (Label)super.getControl(34);
	}
	public TextBox txtReason()
	{
		return (TextBox)super.getControl(35);
	}
	public TextBox txtCaseComment()
	{
		return (TextBox)super.getControl(36);
	}
	public DateControl dteEstDischarge()
	{
		return (DateControl)super.getControl(37);
	}
	public DateControl dteHLDateReturn()
	{
		return (DateControl)super.getControl(38);
	}
	public DateTimeControl dtimEstDischarge()
	{
		return (DateTimeControl)super.getControl(39);
	}
	public DateTimeControl dtimAdmit()
	{
		return (DateTimeControl)super.getControl(40);
	}
	public cmbSourceOfEmergencyReferralComboBox cmbSourceOfEmergencyReferral()
	{
		return (cmbSourceOfEmergencyReferralComboBox)super.getComboBox(0);
	}
	public cmbWardTypeComboBox cmbWardType()
	{
		return (cmbWardTypeComboBox)super.getComboBox(1);
	}
	public cmbSourceComboBox cmbSource()
	{
		return (cmbSourceComboBox)super.getComboBox(2);
	}
	public cmbMethodComboBox cmbMethod()
	{
		return (cmbMethodComboBox)super.getComboBox(3);
	}
	public cmbPatientStatusComboBox cmbPatientStatus()
	{
		return (cmbPatientStatusComboBox)super.getComboBox(4);
	}
	public cmbEpisodeComboBox cmbEpisode()
	{
		return (cmbEpisodeComboBox)super.getComboBox(5);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(6);
	}
	public cmbSourceOfReferralComboBox cmbSourceOfReferral()
	{
		return (cmbSourceOfReferralComboBox)super.getComboBox(7);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(8);
	}
	public cmbCCOSpecialtyComboBox cmbCCOSpecialty()
	{
		return (cmbCCOSpecialtyComboBox)super.getComboBox(9);
	}
	public qmbServiceComboBox qmbService()
	{
		return (qmbServiceComboBox)super.getComboBox(10);
	}
	public qmbConsultantComboBox qmbConsultant()
	{
		return (qmbConsultantComboBox)super.getComboBox(11);
	}
	public CheckBox chkHealthyLodger()
	{
		return (CheckBox)super.getControl(53);
	}
	public CheckBox chkSelfAdmitPatient()
	{
		return (CheckBox)super.getControl(54);
	}
	public CheckBox chkIsMaternity()
	{
		return (CheckBox)super.getControl(55);
	}
	public CheckBox chkChaplain()
	{
		return (CheckBox)super.getControl(56);
	}
	public TimeControl timHLTimeOfReturn()
	{
		return (TimeControl)super.getControl(57);
	}
	public IntBox intAntStay()
	{
		return (IntBox)super.getControl(58);
	}
	public ImageButton imbHealthyLodger()
	{
		return (ImageButton)super.getControl(59);
	}
	public CaseFolderYesNoRadioButton CaseFolderYesNo()
	{
		return (CaseFolderYesNoRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Emergency = new EmergencyForms();
			RefMan = new RefManForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				AddressSelection = new LocalFormName(102270);
				OtherAddresses = new LocalFormName(102178);
				AdmissionGenderWarningDialog = new LocalFormName(102429);
				AdmissionReason = new LocalFormName(102481);
				HealthyLodgerDetails = new LocalFormName(102498);
			}
			public final FormName AddressSelection;
			public final FormName OtherAddresses;
			public final FormName AdmissionGenderWarningDialog;
			public final FormName AdmissionReason;
			public final FormName HealthyLodgerDetails;
		}
		public final class EmergencyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyForms()
			{
				EDDecisionToAdmitDialog = new LocalFormName(129193);
			}
			public final FormName EDDecisionToAdmitDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
				ElectiveListDetails = new LocalFormName(134283);
			}
			public final FormName NewElectiveListTCIErodDialog;
			public final FormName ElectiveListDetails;
		}

		public CoreForms Core;
		public EmergencyForms Emergency;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Comment16 = new ImageHelper(102625, "Images/Core/Comment16.png", new Integer(16), new Integer(16));
				HealthyLodger16x16 = new ImageHelper(102647, "Images/Core/lodger16x16.png", new Integer(16), new Integer(16));
				Lodger16x16Disabled = new ImageHelper(102649, "Images/Core/lodger16x16disabled.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Comment16;
			public final ims.framework.utils.Image HealthyLodger16x16;
			public final ims.framework.utils.Image Lodger16x16Disabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsRequired = new ims.framework.ContextVariable("IsRequired", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsRequired_" + componentIdentifier + "");
			cxl_addressResult = new ims.framework.ContextVariable("addressResult", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier + "");
			cxl_AdmissionDetail = new ims.framework.ContextVariable("AdmissionDetail", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier + "");
			cxl_IsInWaitingTabVisible = new ims.framework.ContextVariable("IsInWaitingTabVisible", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsInWaitingTabVisible_" + componentIdentifier + "");
			cxl_RecordSelected = new ims.framework.ContextVariable("RecordSelected", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__RecordSelected_" + componentIdentifier + "");
			cxl_IsEmergencyAdmissionTab = new ims.framework.ContextVariable("IsEmergencyAdmissionTab", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsEmergencyAdmissionTab_" + componentIdentifier + "");
			cxl_IsReturnFromLeaveVisible = new ims.framework.ContextVariable("IsReturnFromLeaveVisible", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsReturnFromLeaveVisible_" + componentIdentifier + "");
			cxl_TCIElectiveAdmission = new ims.framework.ContextVariable("TCIElectiveAdmission", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier + "");
			cxl_TabSelected = new ims.framework.ContextVariable("TabSelected", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TabSelected_" + componentIdentifier + "");
			cxl_lcPatientSex = new ims.framework.ContextVariable("lcPatientSex", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__lcPatientSex_" + componentIdentifier + "");
			cxl_BayConfig = new ims.framework.ContextVariable("BayConfig", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier + "");
			cxl_WardBayConfigRef = new ims.framework.ContextVariable("WardBayConfigRef", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__WardBayConfigRef_" + componentIdentifier + "");
			cxl_bCanCloseBedDialog = new ims.framework.ContextVariable("bCanCloseBedDialog", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__bCanCloseBedDialog_" + componentIdentifier + "");
			cxl_bCanClearElectiveListContexts = new ims.framework.ContextVariable("bCanClearElectiveListContexts", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__bCanClearElectiveListContexts_" + componentIdentifier + "");
			cxl_PatientShortForTCIEntry = new ims.framework.ContextVariable("PatientShortForTCIEntry", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier + "");
			cxl_SortOrderBookedDOB = new ims.framework.ContextVariable("SortOrderBookedDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderBookedDOB_" + componentIdentifier + "");
			cxl_SortOrderPlannedDOB = new ims.framework.ContextVariable("SortOrderPlannedDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderPlannedDOB_" + componentIdentifier + "");
			cxl_SortOrderEDDOB = new ims.framework.ContextVariable("SortOrderEDDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderEDDOB_" + componentIdentifier + "");
			cxl_SortOrderEDLOS = new ims.framework.ContextVariable("SortOrderEDLOS", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderEDLOS_" + componentIdentifier + "");
			cxl_SortOrderPendingEmergDOB = new ims.framework.ContextVariable("SortOrderPendingEmergDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderPendingEmergDOB_" + componentIdentifier + "");
			cxl_SortOrderTCIDOB = new ims.framework.ContextVariable("SortOrderTCIDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderTCIDOB_" + componentIdentifier + "");
			cxl_SortOrderTCIComments = new ims.framework.ContextVariable("SortOrderTCIComments", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderTCIComments_" + componentIdentifier + "");
			cxl_SortOrderTCIDateTime = new ims.framework.ContextVariable("SortOrderTCIDateTime", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderTCIDateTime_" + componentIdentifier + "");
			cxl_SortOrderAwaitingBedDOB = new ims.framework.ContextVariable("SortOrderAwaitingBedDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderAwaitingBedDOB_" + componentIdentifier + "");
			cxl_SortOrderWardAttendersDOB = new ims.framework.ContextVariable("SortOrderWardAttendersDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderWardAttendersDOB_" + componentIdentifier + "");
			cxl_SortOrderEmergencyAdmissionDOB = new ims.framework.ContextVariable("SortOrderEmergencyAdmissionDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderEmergencyAdmissionDOB_" + componentIdentifier + "");
			cxl_SortOrderHomeLeaveDOB = new ims.framework.ContextVariable("SortOrderHomeLeaveDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderHomeLeaveDOB_" + componentIdentifier + "");
			cxl_SortOrderPETDOB = new ims.framework.ContextVariable("SortOrderPETDOB", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderPETDOB_" + componentIdentifier + "");
			cxl_SortOrderBookedAge = new ims.framework.ContextVariable("SortOrderBookedAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderBookedAge_" + componentIdentifier + "");
			cxl_SortOrderPlannedAge = new ims.framework.ContextVariable("SortOrderPlannedAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderPlannedAge_" + componentIdentifier + "");
			cxl_SortOrderEDAge = new ims.framework.ContextVariable("SortOrderEDAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderEDAge_" + componentIdentifier + "");
			cxl_SortOrderPendingEmergAge = new ims.framework.ContextVariable("SortOrderPendingEmergAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderPendingEmergAge_" + componentIdentifier + "");
			cxl_SortOrderTCIAge = new ims.framework.ContextVariable("SortOrderTCIAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderTCIAge_" + componentIdentifier + "");
			cxl_SortOrderAwaitingBedAge = new ims.framework.ContextVariable("SortOrderAwaitingBedAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderAwaitingBedAge_" + componentIdentifier + "");
			cxl_SortOrderWardAttendersAge = new ims.framework.ContextVariable("SortOrderWardAttendersAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderWardAttendersAge_" + componentIdentifier + "");
			cxl_SortOrderEmergencyAdmissionAge = new ims.framework.ContextVariable("SortOrderEmergencyAdmissionAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderEmergencyAdmissionAge_" + componentIdentifier + "");
			cxl_SortOrderHomeLeaveAge = new ims.framework.ContextVariable("SortOrderHomeLeaveAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderHomeLeaveAge_" + componentIdentifier + "");
			cxl_SortOrderPETAge = new ims.framework.ContextVariable("SortOrderPETAge", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__SortOrderPETAge_" + componentIdentifier + "");
			cxl_IsCaseNoteFolderVisible = new ims.framework.ContextVariable("IsCaseNoteFolderVisible", prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__IsCaseNoteFolderVisible_" + componentIdentifier + "");
		}
		
		public boolean getIsRequiredIsNotNull()
		{
			return !cxl_IsRequired.getValueIsNull(context);
		}
		public Boolean getIsRequired()
		{
			return (Boolean)cxl_IsRequired.getValue(context);
		}
		public void setIsRequired(Boolean value)
		{
			cxl_IsRequired.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRequired = null;
		public boolean getaddressResultIsNotNull()
		{
			return !cxl_addressResult.getValueIsNull(context);
		}
		public ims.core.vo.PersonAddress getaddressResult()
		{
			return (ims.core.vo.PersonAddress)cxl_addressResult.getValue(context);
		}
		public void setaddressResult(ims.core.vo.PersonAddress value)
		{
			cxl_addressResult.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_addressResult = null;
		public boolean getAdmissionDetailIsNotNull()
		{
			return !cxl_AdmissionDetail.getValueIsNull(context);
		}
		public ims.core.vo.AdmissionDetailVo getAdmissionDetail()
		{
			return (ims.core.vo.AdmissionDetailVo)cxl_AdmissionDetail.getValue(context);
		}
		public void setAdmissionDetail(ims.core.vo.AdmissionDetailVo value)
		{
			cxl_AdmissionDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdmissionDetail = null;
		public boolean getIsInWaitingTabVisibleIsNotNull()
		{
			return !cxl_IsInWaitingTabVisible.getValueIsNull(context);
		}
		public Boolean getIsInWaitingTabVisible()
		{
			return (Boolean)cxl_IsInWaitingTabVisible.getValue(context);
		}
		public void setIsInWaitingTabVisible(Boolean value)
		{
			cxl_IsInWaitingTabVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsInWaitingTabVisible = null;
		public boolean getRecordSelectedIsNotNull()
		{
			return !cxl_RecordSelected.getValueIsNull(context);
		}
		public Boolean getRecordSelected()
		{
			return (Boolean)cxl_RecordSelected.getValue(context);
		}
		public void setRecordSelected(Boolean value)
		{
			cxl_RecordSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RecordSelected = null;
		public boolean getIsEmergencyAdmissionTabIsNotNull()
		{
			return !cxl_IsEmergencyAdmissionTab.getValueIsNull(context);
		}
		public Boolean getIsEmergencyAdmissionTab()
		{
			return (Boolean)cxl_IsEmergencyAdmissionTab.getValue(context);
		}
		public void setIsEmergencyAdmissionTab(Boolean value)
		{
			cxl_IsEmergencyAdmissionTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsEmergencyAdmissionTab = null;
		public boolean getIsReturnFromLeaveVisibleIsNotNull()
		{
			return !cxl_IsReturnFromLeaveVisible.getValueIsNull(context);
		}
		public Boolean getIsReturnFromLeaveVisible()
		{
			return (Boolean)cxl_IsReturnFromLeaveVisible.getValue(context);
		}
		public void setIsReturnFromLeaveVisible(Boolean value)
		{
			cxl_IsReturnFromLeaveVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsReturnFromLeaveVisible = null;
		public boolean getTCIElectiveAdmissionIsNotNull()
		{
			return !cxl_TCIElectiveAdmission.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListBedAdmissionVo getTCIElectiveAdmission()
		{
			return (ims.RefMan.vo.PatientElectiveListBedAdmissionVo)cxl_TCIElectiveAdmission.getValue(context);
		}
		public void setTCIElectiveAdmission(ims.RefMan.vo.PatientElectiveListBedAdmissionVo value)
		{
			cxl_TCIElectiveAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TCIElectiveAdmission = null;
		public boolean getTabSelectedIsNotNull()
		{
			return !cxl_TabSelected.getValueIsNull(context);
		}
		public Integer getTabSelected()
		{
			return (Integer)cxl_TabSelected.getValue(context);
		}
		public void setTabSelected(Integer value)
		{
			cxl_TabSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TabSelected = null;
		public boolean getlcPatientSexIsNotNull()
		{
			return !cxl_lcPatientSex.getValueIsNull(context);
		}
		public ims.core.vo.lookups.Sex getlcPatientSex()
		{
			return (ims.core.vo.lookups.Sex)cxl_lcPatientSex.getValue(context);
		}
		public void setlcPatientSex(ims.core.vo.lookups.Sex value)
		{
			cxl_lcPatientSex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_lcPatientSex = null;
		public boolean getBayConfigIsNotNull()
		{
			return !cxl_BayConfig.getValueIsNull(context);
		}
		public ims.core.vo.BayConfigLiteVo getBayConfig()
		{
			return (ims.core.vo.BayConfigLiteVo)cxl_BayConfig.getValue(context);
		}
		public void setBayConfig(ims.core.vo.BayConfigLiteVo value)
		{
			cxl_BayConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BayConfig = null;
		public boolean getWardBayConfigRefIsNotNull()
		{
			return !cxl_WardBayConfigRef.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.WardBayConfigRefVo getWardBayConfigRef()
		{
			return (ims.core.admin.pas.vo.WardBayConfigRefVo)cxl_WardBayConfigRef.getValue(context);
		}
		public void setWardBayConfigRef(ims.core.admin.pas.vo.WardBayConfigRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'WardBayConfigRef' RefVo context variable.");
			if(value == null)
				cxl_WardBayConfigRef.setValue(context, null);
			else
				cxl_WardBayConfigRef.setValue(context, new ims.core.admin.pas.vo.WardBayConfigRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_WardBayConfigRef = null;
		public boolean getbCanCloseBedDialogIsNotNull()
		{
			return !cxl_bCanCloseBedDialog.getValueIsNull(context);
		}
		public Boolean getbCanCloseBedDialog()
		{
			return (Boolean)cxl_bCanCloseBedDialog.getValue(context);
		}
		public void setbCanCloseBedDialog(Boolean value)
		{
			cxl_bCanCloseBedDialog.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bCanCloseBedDialog = null;
		public boolean getbCanClearElectiveListContextsIsNotNull()
		{
			return !cxl_bCanClearElectiveListContexts.getValueIsNull(context);
		}
		public Boolean getbCanClearElectiveListContexts()
		{
			return (Boolean)cxl_bCanClearElectiveListContexts.getValue(context);
		}
		public void setbCanClearElectiveListContexts(Boolean value)
		{
			cxl_bCanClearElectiveListContexts.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bCanClearElectiveListContexts = null;
		public boolean getPatientShortForTCIEntryIsNotNull()
		{
			return !cxl_PatientShortForTCIEntry.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShortForTCIEntry()
		{
			return (ims.core.vo.PatientShort)cxl_PatientShortForTCIEntry.getValue(context);
		}
		public void setPatientShortForTCIEntry(ims.core.vo.PatientShort value)
		{
			cxl_PatientShortForTCIEntry.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientShortForTCIEntry = null;
		public boolean getSortOrderBookedDOBIsNotNull()
		{
			return !cxl_SortOrderBookedDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderBookedDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderBookedDOB.getValue(context);
		}
		public void setSortOrderBookedDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderBookedDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderBookedDOB = null;
		public boolean getSortOrderPlannedDOBIsNotNull()
		{
			return !cxl_SortOrderPlannedDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPlannedDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPlannedDOB.getValue(context);
		}
		public void setSortOrderPlannedDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPlannedDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPlannedDOB = null;
		public boolean getSortOrderEDDOBIsNotNull()
		{
			return !cxl_SortOrderEDDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderEDDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderEDDOB.getValue(context);
		}
		public void setSortOrderEDDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderEDDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderEDDOB = null;
		public boolean getSortOrderEDLOSIsNotNull()
		{
			return !cxl_SortOrderEDLOS.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderEDLOS()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderEDLOS.getValue(context);
		}
		public void setSortOrderEDLOS(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderEDLOS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderEDLOS = null;
		public boolean getSortOrderPendingEmergDOBIsNotNull()
		{
			return !cxl_SortOrderPendingEmergDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPendingEmergDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPendingEmergDOB.getValue(context);
		}
		public void setSortOrderPendingEmergDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPendingEmergDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPendingEmergDOB = null;
		public boolean getSortOrderTCIDOBIsNotNull()
		{
			return !cxl_SortOrderTCIDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderTCIDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderTCIDOB.getValue(context);
		}
		public void setSortOrderTCIDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderTCIDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderTCIDOB = null;
		public boolean getSortOrderTCICommentsIsNotNull()
		{
			return !cxl_SortOrderTCIComments.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderTCIComments()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderTCIComments.getValue(context);
		}
		public void setSortOrderTCIComments(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderTCIComments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderTCIComments = null;
		public boolean getSortOrderTCIDateTimeIsNotNull()
		{
			return !cxl_SortOrderTCIDateTime.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderTCIDateTime()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderTCIDateTime.getValue(context);
		}
		public void setSortOrderTCIDateTime(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderTCIDateTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderTCIDateTime = null;
		public boolean getSortOrderAwaitingBedDOBIsNotNull()
		{
			return !cxl_SortOrderAwaitingBedDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAwaitingBedDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAwaitingBedDOB.getValue(context);
		}
		public void setSortOrderAwaitingBedDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAwaitingBedDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAwaitingBedDOB = null;
		public boolean getSortOrderWardAttendersDOBIsNotNull()
		{
			return !cxl_SortOrderWardAttendersDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderWardAttendersDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderWardAttendersDOB.getValue(context);
		}
		public void setSortOrderWardAttendersDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderWardAttendersDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderWardAttendersDOB = null;
		public boolean getSortOrderEmergencyAdmissionDOBIsNotNull()
		{
			return !cxl_SortOrderEmergencyAdmissionDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderEmergencyAdmissionDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderEmergencyAdmissionDOB.getValue(context);
		}
		public void setSortOrderEmergencyAdmissionDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderEmergencyAdmissionDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderEmergencyAdmissionDOB = null;
		public boolean getSortOrderHomeLeaveDOBIsNotNull()
		{
			return !cxl_SortOrderHomeLeaveDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderHomeLeaveDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderHomeLeaveDOB.getValue(context);
		}
		public void setSortOrderHomeLeaveDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderHomeLeaveDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderHomeLeaveDOB = null;
		public boolean getSortOrderPETDOBIsNotNull()
		{
			return !cxl_SortOrderPETDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPETDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPETDOB.getValue(context);
		}
		public void setSortOrderPETDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPETDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPETDOB = null;
		public boolean getSortOrderBookedAgeIsNotNull()
		{
			return !cxl_SortOrderBookedAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderBookedAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderBookedAge.getValue(context);
		}
		public void setSortOrderBookedAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderBookedAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderBookedAge = null;
		public boolean getSortOrderPlannedAgeIsNotNull()
		{
			return !cxl_SortOrderPlannedAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPlannedAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPlannedAge.getValue(context);
		}
		public void setSortOrderPlannedAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPlannedAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPlannedAge = null;
		public boolean getSortOrderEDAgeIsNotNull()
		{
			return !cxl_SortOrderEDAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderEDAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderEDAge.getValue(context);
		}
		public void setSortOrderEDAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderEDAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderEDAge = null;
		public boolean getSortOrderPendingEmergAgeIsNotNull()
		{
			return !cxl_SortOrderPendingEmergAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPendingEmergAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPendingEmergAge.getValue(context);
		}
		public void setSortOrderPendingEmergAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPendingEmergAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPendingEmergAge = null;
		public boolean getSortOrderTCIAgeIsNotNull()
		{
			return !cxl_SortOrderTCIAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderTCIAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderTCIAge.getValue(context);
		}
		public void setSortOrderTCIAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderTCIAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderTCIAge = null;
		public boolean getSortOrderAwaitingBedAgeIsNotNull()
		{
			return !cxl_SortOrderAwaitingBedAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAwaitingBedAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAwaitingBedAge.getValue(context);
		}
		public void setSortOrderAwaitingBedAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAwaitingBedAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAwaitingBedAge = null;
		public boolean getSortOrderWardAttendersAgeIsNotNull()
		{
			return !cxl_SortOrderWardAttendersAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderWardAttendersAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderWardAttendersAge.getValue(context);
		}
		public void setSortOrderWardAttendersAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderWardAttendersAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderWardAttendersAge = null;
		public boolean getSortOrderEmergencyAdmissionAgeIsNotNull()
		{
			return !cxl_SortOrderEmergencyAdmissionAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderEmergencyAdmissionAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderEmergencyAdmissionAge.getValue(context);
		}
		public void setSortOrderEmergencyAdmissionAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderEmergencyAdmissionAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderEmergencyAdmissionAge = null;
		public boolean getSortOrderHomeLeaveAgeIsNotNull()
		{
			return !cxl_SortOrderHomeLeaveAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderHomeLeaveAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderHomeLeaveAge.getValue(context);
		}
		public void setSortOrderHomeLeaveAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderHomeLeaveAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderHomeLeaveAge = null;
		public boolean getSortOrderPETAgeIsNotNull()
		{
			return !cxl_SortOrderPETAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderPETAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderPETAge.getValue(context);
		}
		public void setSortOrderPETAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderPETAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderPETAge = null;
		public boolean getIsCaseNoteFolderVisibleIsNotNull()
		{
			return !cxl_IsCaseNoteFolderVisible.getValueIsNull(context);
		}
		public Boolean getIsCaseNoteFolderVisible()
		{
			return (Boolean)cxl_IsCaseNoteFolderVisible.getValue(context);
		}
		public void setIsCaseNoteFolderVisible(Boolean value)
		{
			cxl_IsCaseNoteFolderVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsCaseNoteFolderVisible = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PendingEmergencyAdmissionCM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW_DTA = 1;
			}
			public void disableAllPendingEmergencyAdmissionCMMenuItems()
			{
				this.contextMenuPendingEmergencyAdmissionCMVIEW_DTAItem.setEnabled(false);
			}
			public void hideAllPendingEmergencyAdmissionCMMenuItems()
			{
				this.contextMenuPendingEmergencyAdmissionCMVIEW_DTAItem.setVisible(false);
			}
			private Menu contextMenuPendingEmergencyAdmissionCM;
			public ReadOnlyMenuItem getPendingEmergencyAdmissionCMVIEW_DTAItem()
			{
				return this.contextMenuPendingEmergencyAdmissionCMVIEW_DTAItem;
			}
			private MenuItem contextMenuPendingEmergencyAdmissionCMVIEW_DTAItem;
			public final class ElectiveListTCIAdmission implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW = 2;
			}
			public void disableAllElectiveListTCIAdmissionMenuItems()
			{
				this.contextMenuElectiveListTCIAdmissionVIEWItem.setEnabled(false);
			}
			public void hideAllElectiveListTCIAdmissionMenuItems()
			{
				this.contextMenuElectiveListTCIAdmissionVIEWItem.setVisible(false);
			}
			private Menu contextMenuElectiveListTCIAdmission;
			public ReadOnlyMenuItem getElectiveListTCIAdmissionVIEWItem()
			{
				return this.contextMenuElectiveListTCIAdmissionVIEWItem;
			}
			private MenuItem contextMenuElectiveListTCIAdmissionVIEWItem;
			public final class BedManagementHomeLeave implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CANCEL_HOME_LEAVE = 3;
			}
			public void disableAllBedManagementHomeLeaveMenuItems()
			{
				this.contextMenuBedManagementHomeLeaveCANCEL_HOME_LEAVEItem.setEnabled(false);
			}
			public void hideAllBedManagementHomeLeaveMenuItems()
			{
				this.contextMenuBedManagementHomeLeaveCANCEL_HOME_LEAVEItem.setVisible(false);
			}
			private Menu contextMenuBedManagementHomeLeave;
			public ReadOnlyMenuItem getBedManagementHomeLeaveCANCEL_HOME_LEAVEItem()
			{
				return this.contextMenuBedManagementHomeLeaveCANCEL_HOME_LEAVEItem;
			}
			private MenuItem contextMenuBedManagementHomeLeaveCANCEL_HOME_LEAVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[251];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ID", "ID_Location");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISACTIVE", "IsActive");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-TYPE", "Type");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ISMATERNITY", "IsMaternity");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-NOOFINFANTS", "NoOfInfants");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-COMMENT", "Comment");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Core.HealthyLodgerDetails", "BO-1014100029-ID", "ID_HealthyLodger");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Core.HealthyLodgerDetails", "BO-1014100029-RELATIONSHIPTOPATIENT", "RelationshipToPatient");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Emergency.Tracking", "BO-1086100005-ID", "ID_Tracking");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-ID", "ID_Address");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE1", "Line1");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE2", "Line2");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE3", "Line3");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE4", "Line4");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-LINE5", "Line5");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-POSTCODE", "PostCode");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-PHONE", "Phone");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-COUNTY", "County");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-FAX", "Fax");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-UPDATEDATE", "UpdateDate");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-NOTIFICATIONDATE", "NotificationDate");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-ADDRESSTYPE", "AddressType");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-PCT", "PCT");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-OTHERPHONE", "Otherphone");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-AREAOFRESIDENCE", "AreaOfResidence");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-PAFKEY", "Pafkey");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-DESCRIPTION", "Description");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-OBJECTIDENTIFIER", "Objectidentifier");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-BEFFDATE", "Beffdate");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-BEFFDATECNF", "Beffdatecnf");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-BETDATE", "Betdate");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-BETDATECNF", "Betdatecnf");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-PDSUPDATEMODE", "PdsUpdateMode");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-COUNTRY", "Country");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-NOFIXEDABODE", "NoFixedAbode");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__addressResult_" + componentIdentifier, "BO-1002100000-CAREHOME", "CareHome");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ID", "ID_AdmissionDetail");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-BED", "Bed");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-SPECIALTY", "Specialty");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-WARDTYPE", "WardType");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-METHODOFADMISSION", "MethodOfAdmission");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-SOURCEOFADMISSION", "SourceOfAdmission");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-REASONFORADMISSION", "ReasonForAdmission");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ISCHAPLAINREQUIRED", "IsChaplainRequired");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-PATIENTSTATUS", "PatientStatus");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-UPDATECFL", "UpdateCFL");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-CASEFOLDERCOMMENTS", "CaseFolderComments");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-EXTENDEDLENGTHOFSTAYREASON", "ExtendedLengthOfStayReason");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-MEDICALLYFITFORDISCHARGE", "MedicallyFitForDischarge");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-PATIENTREQUIRESTRANSPORT", "PatientRequiresTransport");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-ABLETOGODISCHARGELOUNGE", "AbleToGoDischargeLounge");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-REASONCANNOTGODISCHARGELOUNGE", "ReasonCannotGoDischargeLounge");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-SELFADMITPATIENT", "SelfAdmitPatient");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__AdmissionDetail_" + componentIdentifier, "BO-1014100008-SOURCEOFEMERGENCYREFERRAL", "SourceOfEmergencyReferral");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__TCIElectiveAdmission_" + componentIdentifier, "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-ID", "ID_BayConfig");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-ISACTIVE", "IsActive");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-MALE", "Male");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-FEMALE", "Female");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-PEDIATRIC", "Paediatric");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-NUMOFBEDS", "NumOfBeds");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-NUMOFOCCUPIEDBEDS", "NumOfOccupiedBeds");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-OPENINGTIME", "OpeningTime");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-CLOSINGTIME", "ClosingTime");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-WEEKDAYSONLY", "WeekdaysOnly");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-BAYSTATUS", "BayAvailabilityStatus");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__BayConfig_" + componentIdentifier, "BO-1095100004-TEMPORARYBAYGENDER", "TemporaryBayGender");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__WardBayConfigRef_" + componentIdentifier, "BO-1014100014-ID", "ID_WardBayConfig");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedAdmissionComponent.__internal_x_context__PatientShortForTCIEntry_" + componentIdentifier, "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
