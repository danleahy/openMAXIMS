//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2379.15643)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.authoringinfo;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.HcpDisType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final String	START_DATE_TIME		= "Start Date/Time:";
	private static final String	START_HCP			= "Start HCP:";
	
	private static final String	REVIEWING_DATE_TIME	= "Reviewing Date/Time:";
	private static final String	REVIEWING_HCP		= "Reviewing HCP:";
	
	private static final String	RESOLVING_DATE_TIME	= "Resolving Date/Time:";
	private static final String	RESOLVING_HCP		= "Resolving HCP:";
	
	private static final String	REMOVAL_DATE_TIME	= "Removal Date/Time:";
	private static final String	REMOVAL_HCP			= "Removal HCP:";
	
	private static final String	RECORDING_DATE_TIME	= "Recording Date/Time:";
	private static final String	RECORDING_HCP		= "Recording HCP:";
	
	private static final String	INSERTED_DATE_TIME	= "Inserted Date/Time:";
	private static final String	INSERTED_HCP		= "Inserting HCP:";//WDEV-13333 
	
	private static final String	CONFIRMING_DATE_TIME= "Confirming Date/Time:";
	private static final String	CONFIRMING_HCP		= "Confirming HCP:";
	
	private static final String	CONFIRMED_DATE_TIME	= "Confirmed Date/Time:";
	private static final String	CONFIRMED_HCP		= "Confirmed HCP:";
	
	private static final String	AUTHORING_DATE_TIME	= "Authoring Date/Time:";
	private static final String	AUTHORING_HCP		= "Authoring HCP:";
	
	private static final String	AUTHORISING_DATE_TIME	= "Authorised Date/Time:";
	private static final String	AUTHORISING_HCP		= "Authorising HCP:";
	
	private static final String	COMPLETED_DATE_TIME	= "Completed Date/Time:";
	private static final String	COMPLETING_HCP		= "Completing HCP:";
	
	private static final String	SCANNED_DATE_TIME	= "Scanned Date/Time:";
	private static final String	SCANNED_HCP		= "Scanned by:";
	
	private static final String	IMPORTED_DATE_TIME	= "Imported Date/Time:";
	private static final String	IMPORTED_HCP		= "Imported by:";

	private static final String	INITIALLY_SEEN_DATE_TIME	= "Initially Seen Date/Time:";
	private static final String	INITIALLY_SEEN_HCP		= "Initially Seen By";
	
	private static final String	LAST_UPDATING_DATE_TIME	= "Last Updating Date/Time:";
	private static final String	LAST_UPDATING_HCP		= "Last Updating HCP:";
	
	private static final String	DISCHARGING_DATE_TIME	= "Discharging Date/Time:";
	private static final String	DISCHARGING_HCP		= "Discharging HCP:";
	
	private static final String	PRESCRIBING_DATE_TIME	= "Prescribing Date/Time:";
	private static final String	PRESCRIBING_HCP		= "Prescribing HCP:";
	
	private static final String	THEATRENURSE_DATE_TIME	= "Theatre Nurse Date/Time:";
	private static final String	THEATRENURSE_HCP		= "Theatre Nurse HCP:";

	protected void onFormOpen() throws PresentationLogicException 
	{
		if(controlsShouldBeDisabled())
			disableAllControls();
	}
	
	// ---- Interface Implementation Methods -----
	public void initializeComponent()
	{
		setDefaultValuesToControls(false, false);//WDEV-11523		
	}
	//WDEV-11523, WDEV-18846
	public void initializeComponent(Boolean ignoreClinicalContact,	Boolean ignoreClinicalContactDate)
	{	
		if (ignoreClinicalContact != null && Boolean.TRUE.equals(ignoreClinicalContact))
			setDefaultValuesToControls(true, false);
		else
			setDefaultValuesToControls(false, ignoreClinicalContactDate != null ? ignoreClinicalContactDate.booleanValue() : false);
			
	}

	public void initializeComponent(HcpDisType hcpType)
	{
		setDefaultValuesToControls(false, false);
		setHcpDisciplineType(hcpType);
	}

	public AuthoringInformationVo getValue()
	{
		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringDateTime(form.dtimAuthoring().getValue());
		voAuthoringInformation.setAuthoringHcp(form.qmbAuthoringHcp().getValue());
		
		//WDEV-4628
		if(isRequired() &&  voAuthoringInformation.countFieldsWithValue() < voAuthoringInformation.countValueObjectFields())
			return null;
		
		return voAuthoringInformation;
	}

	public void setValue(AuthoringInformationVo voAuthoringInformation)
	{
		populateControlsFromData(voAuthoringInformation);
	}

	public void clearValue()
	{
		clearValues();
	}

	public FormMode getMode()
	{
		return form.getMode();
	}

	public void setHcpType(HcpDisType hcpDisType)
	{
		setHcpDisciplineType(hcpDisType);
	}

	public void setIsRequiredPropertyToControls(Boolean value)
	{
		if(value != null)
		{
			form.qmbAuthoringHcp().setRequired(value.booleanValue());
			form.dtimAuthoring().setRequired(value.booleanValue());
			form.getLocalContext().setIsRequired(value);
		}	
	}
	
	public void setEnabledAuthoringHCP(Boolean value)
	{
		if(controlsShouldBeDisabled())
			return;
		
		if (value != null)
			form.qmbAuthoringHcp().setEnabled(value.booleanValue());
	}

	public void setEnabledDateTime(Boolean value)
	{
		if(controlsShouldBeDisabled())
			return;
		
		if (value != null)
			form.dtimAuthoring().setEnabled(value.booleanValue());
	}
	
	public void setLabels(AuthoringLabelType labelType)
	{
		if(labelType != null)
		{
			if(labelType.equals(AuthoringLabelType.COMPLETING_COMPLETED))
			{
				setLabelsText(COMPLETING_HCP, COMPLETED_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.AUTHORING))
			{
				setLabelsText(AUTHORING_HCP, AUTHORING_DATE_TIME);
			}
			//WDEV-18622
			if(labelType.equals(AuthoringLabelType.AUTHORISING))
			{
				setLabelsText(AUTHORISING_HCP, AUTHORISING_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.CONFIRMED))
			{
				setLabelsText(CONFIRMED_HCP, CONFIRMED_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.CONFIRMING))
			{
				setLabelsText(CONFIRMING_HCP, CONFIRMING_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.SCANNED))
			{
				setLabelsText(SCANNED_HCP, SCANNED_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.IMPORTED))
			{
				setLabelsText(IMPORTED_HCP, IMPORTED_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.INSERTED))
			{
				setLabelsText(INSERTED_HCP, INSERTED_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.RECORDING))
			{
				setLabelsText(RECORDING_HCP, RECORDING_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.REMOVAL))
			{
				setLabelsText(REMOVAL_HCP, REMOVAL_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.RESOLVING))
			{
				setLabelsText(RESOLVING_HCP, RESOLVING_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.REVIEWING))
			{
				setLabelsText(REVIEWING_HCP, REVIEWING_DATE_TIME);
			}
									
			if(labelType.equals(AuthoringLabelType.START))
			{
				setLabelsText(START_HCP, START_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.INITIALLY))
			{
				setLabelsText(INITIALLY_SEEN_HCP, INITIALLY_SEEN_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.LAST))
			{
				setLabelsText(LAST_UPDATING_HCP, LAST_UPDATING_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.DISCHARGING))
			{
				setLabelsText(DISCHARGING_HCP, DISCHARGING_DATE_TIME);
			}
			
			if(labelType.equals(AuthoringLabelType.PRESCRIBING))
			{
				setLabelsText(PRESCRIBING_HCP, PRESCRIBING_DATE_TIME);
			}
			if(labelType.equals(AuthoringLabelType.THEATRENURSE))
			{
				setLabelsText(THEATRENURSE_HCP, THEATRENURSE_DATE_TIME);
			}
		}
		else //WDEV-18827
			setLabelsText("", "");
	}
	 
	public String getErrors()
	{
		if (isRequired())
		{
			StringBuffer errors = new StringBuffer();
			String hcpLabel = form.getLocalContext().getAuthoringHCPLabelIsNotNull()?form.getLocalContext().getAuthoringHCPLabel():AUTHORING_HCP;			
			if (form.qmbAuthoringHcp().getValue() == null)
			{
				errors.append(getStringNoComa(hcpLabel));
				errors.append(" is mandatory.");
			}
			
			String dateTimeLabel = form.getLocalContext().getAuthoringDateTimeLabelIsNotNull()?form.getLocalContext().getAuthoringDateTimeLabel():AUTHORING_DATE_TIME;
			if(form.dtimAuthoring().getValue() == null)
			{
				if(errors.length() > 0)
					errors.append("\n\n");
				errors.append(getStringNoComa(dateTimeLabel));
				errors.append(" is mandatory.");
			}
				
			return errors.length() > 0 ? errors.toString() : null;
		}

		return null;
	}
	
	private String getStringNoComa(String hcpLabel)
	{
		if(hcpLabel != null)
		{
			int index = hcpLabel.indexOf(":");
			if(index == (hcpLabel.length() - 1) && hcpLabel.length() > 0)
				return hcpLabel.substring(0, (hcpLabel.length() - 1));
		}
		
		return hcpLabel;
	}

	public void setLabelsToValidatedBy()
	{
		setLabelsText("Validated  By", "Validated Date/Time");		
	}

	public void setLabelsToTranscribedBy()
	{
		setLabelsText("Transcribed By", "Transcribed Date/Time");		
	}
	
	public void setLabelsToRecordingBy()
	{
		setLabelsText("Recording By:", "Recording Date/Time:");	//WDEV-14538
	}
	
	public void ignoreComponentReadonlyFlag(Boolean value)
	{
		form.getLocalContext().setIgnoreComponentReadOnlyFlag(value);		
	}
	// ---- End Interface Implementation Methods -----

	// ------ Protected Methods ----------------------
	protected void onQmbAuthoringHcpTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{	
		//WDEV-18301
		if (value == null || (value != null && value.length() == 0))
			return;
		
		HcpLiteVoCollection coll = listHCPs(value);

		for (int i = 0; i < coll.size(); i++)
		{
			HcpLiteVo med = coll.get(i);
			form.qmbAuthoringHcp().newRow(med, med.toString());
		}
		if (coll.size() == 1)
		{
			form.qmbAuthoringHcp().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbAuthoringHcp().showOpened();
		}
		
	}
	// ------ End Protected Methods ----------

	// ------ Private Methods ----------------
	private void setDefaultValuesToControls(boolean ignoreClinicalContact, boolean ignoreClinicalContactDate)//WDEV-11523
	{
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
		
		if(!ignoreClinicalContact && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())//WDEV-11523
		{
			voAuthoring.setAuthoringDateTime(Boolean.TRUE.equals(ignoreClinicalContactDate) ? new DateTime() : (form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime() != null ?  form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime() : new DateTime())); //WDEV-18846
			voAuthoring.setAuthoringHcp(form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy());			
		}
		else
		{
			voAuthoring.setAuthoringDateTime(new DateTime());
			voAuthoring.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		}
		
		populateControlsFromData(voAuthoring);
	}

	private void setHcpDisciplineType(HcpDisType hcpDisType)
	{
		form.getLocalContext().setHcpType(hcpDisType);
	}
	
	private void populateControlsFromData(AuthoringInformationVo voAuthoringInformation)
	{
		clearValues();
		if (voAuthoringInformation == null)
			return;

		form.dtimAuthoring().setValue(voAuthoringInformation.getAuthoringDateTime());
		if (voAuthoringInformation.getAuthoringHcpIsNotNull())
		{
			form.qmbAuthoringHcp().newRow(voAuthoringInformation.getAuthoringHcp(), voAuthoringInformation.getAuthoringHcp().toString());
			form.qmbAuthoringHcp().setValue(voAuthoringInformation.getAuthoringHcp());
		}
	}

	private HcpLiteVoCollection listHCPs(String value)
	{
		form.qmbAuthoringHcp().clear();
		return domain.listHcpLiteByNameAndDisciplineType(value, form.getLocalContext().getHcpType());
	}

	private void clearValues()
	{
		form.qmbAuthoringHcp().clear();
		form.dtimAuthoring().setValue(null);
	}
	
	private void setLabelsText(String labelHCP, String labelDT)
	{
		if(labelHCP != null)
		{
			form.lblAuthoringHCP().setValue(labelHCP);
			form.getLocalContext().setAuthoringHCPLabel(labelHCP);
		}
		if(labelDT != null)
		{
			form.lblAuthoringDT().setValue(labelDT);
			form.getLocalContext().setAuthoringDateTimeLabel(labelDT);
		}
	}
	private void disableAllControls()
	{
		form.qmbAuthoringHcp().setEnabled(false);
		form.dtimAuthoring().setEnabled(false);
	}
	
	private boolean ignoreComponentReadOnlyFlag()
	{
		Boolean ignore = form.getLocalContext().getIgnoreComponentReadOnlyFlag();
		return ignore != null ? ignore.booleanValue() : false;
	}
	
	private boolean controlsShouldBeDisabled()
	{
		return ignoreComponentReadOnlyFlag() == false && ConfigFlag.UI.AUTHORING_INFO_COMPONENT_ISREADONLY.getValue();	
	}
	
	private boolean isRequired()
	{
		return form.getLocalContext().getIsRequiredIsNotNull()?form.getLocalContext().getIsRequired().booleanValue():false;
	}
	// ------ End Private Methods ----------------	

		
	//wdev-22310
	public void setVisible(Boolean showhide)
	{
		form.lblAuthoringHCP().setVisible(showhide);
		form.lblAuthoringDT().setVisible(showhide);
		form.qmbAuthoringHcp().setVisible(showhide);
		form.dtimAuthoring().setVisible(showhide);
		
	}
	
}
