//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.assignbedtohomeleaveinpatient;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.assignbedtohomeleaveinpatient.GenForm.grdAvailableBedsRow;
import ims.core.vo.AdmissionDetailVo;
import ims.core.vo.AdmissionReasonVo;
import ims.core.vo.BayConfigLiteVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateLiteVoCollection;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.HomeLeaveVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.WardConfigLiteVo;
import ims.core.vo.WardMixedSexBreachVo;
import ims.core.vo.enums.BedAdmissionValidationType;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.PatientStatus;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static int COL_BED_NO = 0;
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		form.btnReturnFromLeave().setEnabled(form.grdAvailableBeds().getValue() != null);
		form.dteReturn().setEnabled(form.grdAvailableBeds().getValue() != null);
		form.timReturn().setEnabled(form.grdAvailableBeds().getValue() != null);
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	private void initialise()
	{
		form.getLocalContext().setSelectedWardConfig(domain.getWardConfig(form.getGlobalContext().Core.getWardViewPatientListWard()));
		form.btnCancel().setImage(form.getImages().Core.Delete);
		form.btnReturnFromLeave().setImage(form.getImages().Core.ReturnFromHome);
	}
	private void open()
	{
		BedSpaceStateLiteVoCollection list = domain.listAvailableBedSpaces(form.getGlobalContext().Core.getWardViewPatientListWard());
		populateBedSpacesGrid(list);
	}
	private void populateBedSpacesGrid(BedSpaceStateLiteVoCollection list)
	{
		form.grdAvailableBeds().getRows().clear();
		if (list == null)
			return;
		for (BedSpaceStateLiteVo bedSpaceStateVo : list)
		{
			addNewBedSpaceRow(bedSpaceStateVo);
		}

	}
	private void addNewBedSpaceRow(BedSpaceStateLiteVo bedSpaceStateLiteVo)
	{
		if (bedSpaceStateLiteVo == null)
			return;
		
		grdAvailableBedsRow row = form.grdAvailableBeds().getRows().newRow();

		row.setColBedNo(bedSpaceStateLiteVo.getBedSpace() != null ? bedSpaceStateLiteVo.getBedSpace().getBedNumber() : null);
		row.setColType(bedSpaceStateLiteVo.getBedSpace() != null && bedSpaceStateLiteVo.getBedSpace().getBedSpaceType() != null ? bedSpaceStateLiteVo.getBedSpace().getBedSpaceType().getText() : null);
		row.setColBay(bedSpaceStateLiteVo.getBay() != null ? bedSpaceStateLiteVo.getBay().getName() : null);

		row.setValue(bedSpaceStateLiteVo);		
	}
	private BayConfigLiteVo getBayConfig(LocationLiteVo bay)
	{
		WardConfigLiteVo wardConfig = form.getLocalContext().getSelectedWardConfig();
		if (wardConfig != null && wardConfig.getBays() != null)
		{
			for (BayConfigLiteVo bayCfg : wardConfig.getBays())
			{
				if (bayCfg.getBay().equals(bay))
					return bayCfg;
			}
		}
		return null;	
	}
	private boolean isBayClosed(LocationLiteVo bay)
	{
		BayConfigLiteVo bayConfig = getBayConfig(bay);

		return bayConfig != null && WardBayStatus.CLOSED.equals(bayConfig.getBayAvailabilityStatus());
	}
	private boolean isBayBlocked(LocationLiteVo bay)
	{
		BayConfigLiteVo bayConfig = getBayConfig(bay);

		return bayConfig != null && WardBayStatus.BLOCKED.equals(bayConfig.getBayAvailabilityStatus());
	}

	private String validateOnAdmission(LocationLiteVo ward)
	{
		WardConfigLiteVo wardConfig = form.getLocalContext().getSelectedWardConfig();
		BedSpaceStateLiteVo selectedBedSpaceState = form.grdAvailableBeds().getValue();
		if (wardConfig == null)
			return null;

		StringBuilder str = new StringBuilder();
		String strMessage = "Cannot allocate bed at this time.";

		if (selectedBedSpaceState != null)
		{
			LocationLiteVo baySelected = selectedBedSpaceState.getBay();
			if (isBayBlocked(baySelected))
			{
				str.append("'" + baySelected.getName() + "' is currently blocked. " + strMessage);
			}
			else if (isBayClosed(baySelected))
			{
				str.append("'" + baySelected.getName() + "' is currently closed. " + strMessage);
			}			
		}		
		return str.length() > 0 ? str.toString() : null;
	}
	private Sex getConfiguredBayGender(BayConfigLiteVo bay)
	{
		if (Boolean.TRUE.equals(bay.getMale()) && !Boolean.TRUE.equals(bay.getFemale()))
			return Sex.MALE;
		if (Boolean.TRUE.equals(bay.getFemale()) && !Boolean.TRUE.equals(bay.getMale()))
			return Sex.FEMALE;
		return null;
	}
	private String getBedSpaceTypeDescriptor(BedSpaceStateLiteVo selectedBedSpaceState)
	{
		String str = selectedBedSpaceState == null ? "Bed/Chair" : (selectedBedSpaceState.getBedSpace() != null && selectedBedSpaceState.getBedSpace().getBedSpaceTypeIsNotNull() ? selectedBedSpaceState.getBedSpace().getBedSpaceType().getText() : "Bed/Chair");
		if (str.startsWith("Maternity"))
			str = "Bed";
		return str;
	}
	private boolean isBedAllocationValidatedByRelevantRule(AdmissionReasonVo admissionReasonVo)
	{
		BayConfigLiteVo bay = form.grdAvailableBeds().getValue() != null ? getBayConfig(form.grdAvailableBeds().getValue().getBay()) : null;
		boolean isBayNotGenderSpecificDesignated = bay != null && ((!Boolean.TRUE.equals(bay.getMale()) && !Boolean.TRUE.equals(bay.getFemale())) || (Boolean.TRUE.equals(bay.getMale()) && Boolean.TRUE.equals(bay.getFemale())));
		
		//WDEV-23052
		String bedStr = getBedSpaceTypeDescriptor(form.grdAvailableBeds().getValue());
		
		Sex patientSelectedSex = form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull() && form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEventIsNotNull() ? getSexForSelectedpatient(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient()) : null;
		Sex configuredBayGender = getConfiguredBayGender(bay);


		if (admissionReasonVo == null || admissionReasonVo.getIItemText() == null || (!Boolean.TRUE.equals(admissionReasonVo.getIsPrivateBedAllocationValidated()) && !BedAdmissionValidationType.PRIVATE_BED.getIItemText().equals(admissionReasonVo.getIItemText())))
		{
			if (isPrivateBedAllocation())
			{	
				engine.open(form.getForms().Core.AdmissionReason, new Object[] {BedAdmissionValidationType.PRIVATE_BED}, ("Reason for Private " + bedStr + " Allocation"));
				return false;
			}
		}
		if (admissionReasonVo == null || admissionReasonVo.getIItemText() == null || (!Boolean.TRUE.equals(admissionReasonVo.getIsOohAllocationValidated()) && !BedAdmissionValidationType.OUT_OF_OPENING_HOURS.getIItemText().equals(admissionReasonVo.getIItemText())))
		{
			if (isOutsideOpeningHoursAdmission())
			{	
				engine.open(form.getForms().Core.AdmissionReason, new Object[] {BedAdmissionValidationType.OUT_OF_OPENING_HOURS}, ("Reason for " + bedStr +  " Allocation Outside Opening Hours"));
				return false;
			}
		}
		if (form.getLocalContext().getMessageBoxBayGenderMismatch() == null && (admissionReasonVo == null || !Boolean.TRUE.equals(admissionReasonVo.getIsGenderSpecificBayValidated())))
		{	
			if (isBayGenderMismatch())
			{					
				if (patientSelectedSex != null)
				{	
					if (isBayNotGenderSpecificDesignated || (configuredBayGender != null && !configuredBayGender.equals(patientSelectedSex)))
					{	
						form.getLocalContext().setMessageBoxBayGenderMismatch(engine.showMessage(isBayNotGenderSpecificDesignated ? ("If you carry on with this " + bedStr.toLowerCase() + " allocation, this bay will be provisionally set as suitable for " + (patientSelectedSex != null ? patientSelectedSex.getText().toLowerCase() + " patients. Proceed anyway?" : "")) : ("This bay is suitable for " + (configuredBayGender != null ? configuredBayGender.getText().toLowerCase() + " patients." : " patients of different gender.") + (" Proceed with current " + bedStr.toLowerCase() +  " allocation?")), "Confirmation", MessageButtons.YESNO, MessageIcon.QUESTION));
						return false;
					}
				}

			}
		}
		if (form.getLocalContext().getMessageBoxBayMixedGender() == null && (admissionReasonVo == null || !Boolean.TRUE.equals(admissionReasonVo.getIsMixingGenderBayValidated())))
		{				
			if (patientSelectedSex != null && hasConflictWithTemporaryBayGender())
			{				
				form.getLocalContext().setMessageBoxBayMixedGender(engine.showMessage(isGenderAlreadyMixedForBay() ? ("The bay has patients of different genders admitted. Proceed with current " + bedStr.toLowerCase() +  " allocation?") : ("If you carry on with this " + bedStr.toLowerCase() + " allocation, the bay will have patients of different genders admitted. Proceed anyway?"), "Confirm Mixing Bay Gender", MessageButtons.YESNO, MessageIcon.QUESTION));	
				return false;					
			}
		}
		return true;
	}
	private boolean isGenderAlreadyMixedForBay()
	{
		BayConfigLiteVo bayConfig  = getBayConfig(form.grdAvailableBeds().getValue().getBay());
		if (bayConfig == null)
			return false;
		return (bayConfig.getTemporaryBayGenderIsNotNull() && bayConfig.getNumOfBedsIsNotNull() && bayConfig.getNumOfOccupiedBedsIsNotNull() && bayConfig.getNumOfOccupiedBeds() >= 2 && form.getLocalContext().getLCMaleCountIsNotNull() &&  form.getLocalContext().getLCFemaleCountIsNotNull() && (form.getLocalContext().getLCMaleCount() >= 1 && form.getLocalContext().getLCFemaleCount() >= 1));	
	}
	private boolean isPrivateBedAllocation()
	{
		if (form.grdAvailableBeds().getValue() == null || form.grdAvailableBeds().getValue().getBedSpace() == null || form.getLocalContext().getSelectedAdmissionDetail() == null)
			return false;
		if (Boolean.TRUE.equals(form.grdAvailableBeds().getValue().getBedSpace().getPrivateBed()) && !PatientStatus.PRIVATE.equals(form.getLocalContext().getSelectedAdmissionDetail().getPatientStatus()))
			return true;
		return false;	
	}
	private boolean isOutsideOpeningHoursAdmission()
	{
		if (form.grdAvailableBeds().getValue() == null || form.grdAvailableBeds().getValue().getBay() == null) 
			return false;
		return isBayOutOfOpeningHours(getBayConfig(form.grdAvailableBeds().getValue().getBay()));

	}
	private boolean isBayOutOfOpeningHours(BayConfigLiteVo selectedBay) //WDEV-20598
	{
		if (selectedBay == null)
			return false;

		DateTime admissionDateTime = form.dteReturn().getValue() != null && form.timReturn().getValue() != null ? new DateTime(form.dteReturn().getValue(), form.timReturn().getValue()) : new DateTime();

		Calendar calendar = Calendar.getInstance();
		calendar.setTime(admissionDateTime.getJavaDate());		

		boolean isDayWeekDay =  calendar.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY  && calendar.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY;
		boolean isBayOutOfHours = (selectedBay.getOpeningTimeIsNotNull() && admissionDateTime.getTime().isLessThan(selectedBay.getOpeningTime())) || (selectedBay.getClosingTimeIsNotNull() && admissionDateTime.getTime().isGreaterThan(selectedBay.getClosingTime()));
		boolean wasReopenedOnAdmissionDay = wasReopenedOnAdmissionDate(selectedBay, admissionDateTime.getDate());

		if (isBayOutOfHours && wasReopenedOnAdmissionDay)
			return false;

		if (Boolean.TRUE.equals(selectedBay.getWeekdaysOnly()) && !isDayWeekDay)
			return true;
		return isBayOutOfHours;
	}

	private boolean wasReopenedOnAdmissionDate(BayConfigLiteVo tempVo, Date admissionDate)
	{
		if (tempVo.getReOpenOutOfHours() == null)
			return false;

		ArrayList<Date> dates = new ArrayList<Date>();
		for (int i=0;i<tempVo.getReOpenOutOfHours().size();i++)
		{
			if (tempVo.getReOpenOutOfHours().get(i) != null && tempVo.getReOpenOutOfHours().get(i).getReopenDateIsNotNull())
				dates.add(tempVo.getReOpenOutOfHours().get(i).getReopenDate());
		}
		return dates.size() > 0 && dates.contains(admissionDate) ? true : false;

	}

	private Boolean isBayGenderMismatch()
	{
		if (form.grdAvailableBeds().getValue() == null || form.grdAvailableBeds().getValue().getBay() == null)
			return false;
		if (!ConfigFlag.GEN.BED_MANAGEMENT_APPLY_MIXED_SEX_LOGIC.getValue())
			return false;
		return isBaySpecificGenderMismatch(getBayConfig(form.grdAvailableBeds().getValue().getBay())); 
	}

	private boolean isBaySpecificGenderMismatch(BayConfigLiteVo bayConfig)
	{
		Sex patientSelectedSex = form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull() && form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEventIsNotNull() ? getSexForSelectedpatient(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient()) : null;
		return  ((bayConfig.getNumOfOccupiedBeds() == null || bayConfig.getNumOfOccupiedBeds() == 0 || (bayConfig.getNumOfOccupiedBeds() > 0 && bayConfig.getTemporaryBayGender() == null)) && ((!Boolean.TRUE.equals(bayConfig.getFemale()) && !Boolean.TRUE.equals(bayConfig.getMale())) || ((!Boolean.TRUE.equals(bayConfig.getFemale()) ||(Boolean.TRUE.equals(bayConfig.getFemale()) && !Boolean.TRUE.equals(bayConfig.getMale()))&& Sex.MALE.equals(patientSelectedSex))) ||  ((!Boolean.TRUE.equals(bayConfig.getMale()) || (Boolean.TRUE.equals(bayConfig.getMale()) && !Boolean.TRUE.equals(bayConfig.getFemale()))) && Sex.FEMALE.equals(patientSelectedSex))));			
	}

	private Sex getSexForSelectedpatient(PatientLite_IdentifiersVo patient)
	{
		if (patient != null && patient.getSexIsNotNull() && !Sex.UNKNOWN.equals(patient.getSex()))
			return patient.getSex();
		return null;				
	}

	private boolean hasConflictWithTemporaryBayGender()
	{
		if (!ConfigFlag.GEN.BED_MANAGEMENT_APPLY_MIXED_SEX_LOGIC.getValue())
			return false;
		if (form.grdAvailableBeds().getValue() == null || form.grdAvailableBeds().getValue().getBay() == null)
			return false;
		return isInConflictWithTemporaryBayGender(getBayConfig(form.grdAvailableBeds().getValue().getBay())); 
	}

	private Boolean isInConflictWithTemporaryBayGender(BayConfigLiteVo bayConfig)
	{
		if (bayConfig == null)
			return false;
		boolean isGenderAlreadyMixed = isGenderAlreadyMixedForBay();
		Sex patientSelectedSex = form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull() && form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEventIsNotNull() ? getSexForSelectedpatient(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient()) : null;
		return isGenderAlreadyMixed ? true : (bayConfig.getNumOfOccupiedBeds() != null && bayConfig.getNumOfOccupiedBeds() > 0 && bayConfig.getTemporaryBayGenderIsNotNull() && (patientSelectedSex != null && !patientSelectedSex.equals(bayConfig.getTemporaryBayGender()) && ((form.getLocalContext().getLCMaleCount() != null && form.getLocalContext().getLCMaleCount() >= 1) || (form.getLocalContext().getLCFemaleCount() != null && form.getLocalContext().getLCFemaleCount() >= 1))));		
	}

	@Override
	protected void onBtnReturnFromLeaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (returnFromLeave())
			engine.close(DialogResult.OK);

	}
	private boolean returnFromLeave()
	{		
		if (form.grdAvailableBeds().getValue() == null)
		{	
			engine.showMessage("Selection of a Bed/Chair is mandatory.");
			return false;
		}	

		String[] uiErrors = getUIErrors();
		if (uiErrors != null)
		{	
			engine.showErrors(uiErrors);
			return false;
		}
		PatientLite_IdentifiersVo patientReturnFromLeave = form.getGlobalContext().Core.getSelectedWaitingAreaPatient() != null && form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEventIsNotNull() ?  form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient() : null;
		if (patientReturnFromLeave != null && patientReturnFromLeave.getDod() != null)
		{
			form.getLocalContext().setMessageBoxDeceasedReturnFromLeaveAdmit(engine.showMessage("The patient you've selected is deceased. Do you need to return the patient from Home Leave?", "", MessageButtons.YESNO)); //WDEV-21628
			return false;
		}
		String wardAvailabilityErrors = validateOnAdmission(form.grdAvailableBeds().getValue().getWard());
		if(wardAvailabilityErrors != null)
		{
			form.getLocalContext().setMessageBoxWardBayAvailability(engine.showMessage(wardAvailabilityErrors,"Not Allowed", MessageButtons.OK, MessageIcon.INFORMATION));
			return false;
		}
		return proceedWithHomeLeaveReturn();

	}
	private boolean proceedWithHomeLeaveReturn()
	{
		boolean bValidate = isBedAllocationValidatedByRelevantRule(form.getGlobalContext().Core.getBedRuleBreachReason());
		if (!bValidate)
			return false;		

		AdmissionDetailVo voAdmissionDetail = form.getLocalContext().getSelectedAdmissionDetail();
		InpatientEpisodeLiteVo voInpatEpis = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		BedSpaceStateLiteVo voBedSpaceStateLite = form.grdAvailableBeds().getValue();
		voBedSpaceStateLite.setProvisionalBayGender(getSexForSelectedpatient(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient()));
		WardMixedSexBreachVo wardMixedSexBreachVo = null;

		HomeLeaveVo voHL = new HomeLeaveVo();
		voHL.setDateReturnedFromHomeLeave(form.dteReturn().getValue());
		voHL.setTimeReturnedFromHomeLeave(form.timReturn().getValue());
		if (form.getGlobalContext().Core.getBedRuleBreachReasonIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Core.getBedRuleBreachReason().getIsMixingGenderBayValidated()))
		{	
			wardMixedSexBreachVo = populateWardMixedSexBreach(voAdmissionDetail, voBedSpaceStateLite, form.getGlobalContext().Core.getBedRuleBreachReason(), form.getLocalContext().getLCMaleCount(), form.getLocalContext().getLCFemaleCount());

			if (wardMixedSexBreachVo != null)
				wardMixedSexBreachVo.validate();
		}	
		//copy to previous
		if(voBedSpaceStateLite != null && voBedSpaceStateLite.getCurrentBedStatusIsNotNull())
		{
			voBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voBedSpaceStateLite.getCurrentBedStatus().clone());
			voBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
			voBedSpaceStateLite.getCurrentBedStatus().setBedStatus(BedStatus.OCCUPIED);
			voBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime(form.dteReturn().getValue(),(form.timReturn().getValue() != null  ? form.timReturn().getValue() : new Time(0,0))));
		}
		try
		{
			domain.returnFromLeaveToBed(voBedSpaceStateLite, voInpatEpis, voAdmissionDetail, voHL, form.getGlobalContext().Core.getBedRuleBreachReason(), wardMixedSexBreachVo);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialise();
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}
	private WardMixedSexBreachVo populateWardMixedSexBreach(AdmissionDetailVo admission, BedSpaceStateLiteVo bedSpaceStateLiteVo, AdmissionReasonVo admissionReasonVo, Integer maleCount, Integer femaleCount)
	{
		WardMixedSexBreachVo vo = new WardMixedSexBreachVo();

		vo.setWard(bedSpaceStateLiteVo.getWard());
		vo.setBay(bedSpaceStateLiteVo.getBay());
		vo.setFemalePatients(femaleCount);
		vo.setMalePatients(maleCount);
		vo.setAdmissionDateTime(admission.getAdmissionDateTime());
		Object mosUser = domain.getMosUser();
		if (mosUser != null)
			vo.setMemberOfStaff((MemberOfStaffLiteVo) mosUser);
		vo.setReasonForGenderBreach(admissionReasonVo.getReasonForMixingBayGender());
		vo.setReasonForGenderBreachComment(admissionReasonVo.getReasonForMixingBayGenderComment());

		return vo;
	}

	private String[] getUIErrors()
	{
		List<String> errors = new ArrayList<String>();		
		InpatientEpisodeLiteVo voInpatEpis = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();

		if (form.dteReturn().getValue() == null)
		{
			errors.add("Date of Return is mandatory");				
		}
		if (form.timReturn().getValue() == null)
		{
			errors.add("Time of Return is mandatory");	
		}
		if (voInpatEpis != null && voInpatEpis.getDateOnHomeLeaveIsNotNull() && form.dteReturn().getValue() != null)
		{		
			if (form.dteReturn().getValue().isGreaterThan(new Date()))
			{
				errors.add("Date of Return cannot be a future date");			
			}
			if (form.dteReturn().getValue().isLessThan(voInpatEpis.getDateOnHomeLeave()))
			{
				errors.add("Date of Return cannot be earlier than Date on Home Leave");			
			}
			else if (voInpatEpis.getTimeOnHomeLeaveIsNotNull() && form.timReturn().getValue() != null && form.dteReturn().getValue().equals(voInpatEpis.getDateOnHomeLeave()) && form.timReturn().getValue().isLessThan(voInpatEpis.getTimeOnHomeLeave()))
			{
				errors.add("Time of Return cannot be earlier than Time on Home Leave");			
			}
		}
		return errors.size() > 0 ? errors.toArray(new String[errors.size()]) : null;	
	}
	@Override
	protected void onGrdAvailableBedsGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException
	{
		if (column == COL_BED_NO)
		{	
			sortRecords();
		}
		updateControlsState();
	}
	private void sortRecords()
	{
		BedSpaceStateLiteVoCollection values = form.grdAvailableBeds().getValues();

		if (values.size() < 2)
			return;

		BedSpaceStateLiteVo selValue = form.grdAvailableBeds().getValue();
		form.getLocalContext().setSortOrderBedNumber(SortOrder.DESCENDING.equals(form.getLocalContext().getSortOrderBedNumber()) ? SortOrder.ASCENDING : SortOrder.DESCENDING);
		values.sort(BedSpaceStateLiteVo.getBedNumberComparator(form.getLocalContext().getSortOrderBedNumber()));

		populateBedSpacesGrid(values);
		if (selValue != null)
			form.grdAvailableBeds().setValue(selValue);	
	}
	private void clearInstanceControlsAndSetDefault()
	{
		form.dteReturn().setValue(new Date());
		form.timReturn().setValue(new Time());

	}
	@Override
	protected void onGrdAvailableBedsSelectionChanged()
	{
		InpatientEpisodeLiteVo selectedRecord = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		BedSpaceStateLiteVo selectedGridValue = form.grdAvailableBeds().getValue();
		
		form.getLocalContext().setSelectedAdmissionDetail(domain.getAdmissionDetail(selectedRecord.getPasEvent()));
		
		form.getLocalContext().setLCMaleCount(domain.countMaleInpatients(selectedGridValue.getWard(), selectedGridValue.getBay()));
		form.getLocalContext().setLCFemaleCount(domain.countFemaleInpatients(selectedGridValue.getWard(), selectedGridValue.getBay()));
		
		clearInstanceControlsAndSetDefault();
		updateControlsState();
	}
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);		
	}
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getMessageBoxDeceasedReturnFromLeaveAdmit() != null
				&& form.getLocalContext().getMessageBoxDeceasedReturnFromLeaveAdmit().equals(messageBoxId))
		{
			form.getLocalContext().setMessageBoxDeceasedReturnFromLeaveAdmit(null);

			if (DialogResult.YES.equals(result))
			{
				if (returnFromLeave());
				engine.close(DialogResult.OK);
			}
		}		
		else if (form.getLocalContext().getMessageBoxBayMixedGenderIsNotNull() && form.getLocalContext().getMessageBoxBayMixedGender().equals(messageBoxId))
		{
			if (DialogResult.YES.equals(result))
			{
				engine.open(form.getForms().Core.AdmissionGenderWarningDialog, new Object[] {BedAdmissionValidationType.MIXED_GENDER}, "Reason for Mixing Gender");
			}
			form.getLocalContext().setMessageBoxBayMixedGender(null);
			return;			
		}

		else if (form.getLocalContext().getMessageBoxBayGenderMismatchIsNotNull() && form.getLocalContext().getMessageBoxBayGenderMismatch().equals(messageBoxId))
		{			
			handleBtnAction(null, messageBoxId,result);

			form.getLocalContext().setMessageBoxBayGenderMismatch(null);
			return;
		}
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.AdmissionReason))
		{	
			handleBtnAction(form.getForms().Core.AdmissionReason, null, result);			
		}
		else if (formName.equals(form.getForms().Core.AdmissionGenderWarningDialog))
		{
			handleBtnAction(form.getForms().Core.AdmissionGenderWarningDialog, null, result);
		}
	}
	private AdmissionReasonVo populateReasonForAdmissionOnGenderMismatch(AdmissionReasonVo admissionReason)
	{
		if (admissionReason == null)
			admissionReason = new AdmissionReasonVo();
		admissionReason.setValidationType(BedAdmissionValidationType.GENDER_SPECIFIC.getIItemText());
		admissionReason.setIsGenderSpecificBayValidated(true);
		return admissionReason;
	}
	void handleBtnAction(FormName formName, Integer messageBoxId, DialogResult result)
	{
		if ((DialogResult.YES.equals(result) && formName == null) || DialogResult.OK.equals(result))
		{			
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{
				boolean bValidate = isBedAllocationValidatedByRelevantRule(form.getGlobalContext().Core.getBedRuleBreachReason());
				if (!bValidate)
					return;
			}

			form.getGlobalContext().Core.setBedRuleBreachReason(populateReasonForAdmissionOnGenderMismatch(form.getGlobalContext().Core.getBedRuleBreachReason()));
			form.grdAvailableBeds().getValue().setProvisionalBayGender(getSexForSelectedpatient(form.getGlobalContext().Core.getSelectedWaitingAreaPatient().getPasEvent().getPatient()));

			if (proceedWithHomeLeaveReturn())
			{	
				engine.close(DialogResult.OK);
				form.getGlobalContext().Core.setBedRuleBreachReason(null);
			}					
		}
		else if ((DialogResult.NO.equals(result) && formName == null) || DialogResult.CANCEL.equals(result))
		{
			if (form.getForms().Core.AdmissionReason.equals(formName))
			{	
				form.getLocalContext().setMessageBoxBayGenderMismatch(null);
				form.getGlobalContext().Core.setBedRuleBreachReason(null);	
				return;
			}	
			if (form.getForms().Core.AdmissionGenderWarningDialog.equals(formName))
			{	
				form.getLocalContext().setMessageBoxBayMixedGender(null);
				form.getGlobalContext().Core.setBedRuleBreachReason(null);	
				return;
			}
			if (form.getLocalContext().getMessageBoxBayGenderMismatchIsNotNull() && form.getLocalContext().getMessageBoxBayGenderMismatch().equals(messageBoxId))
			{
				form.getLocalContext().setMessageBoxBayGenderMismatch(null);
				return;
			}
		}
	}
}
