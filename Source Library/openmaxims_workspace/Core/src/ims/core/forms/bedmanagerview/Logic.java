//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.66 build 3261.19720)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.bedmanagerview;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.enums.PendingEmergencyEventFired;
import ims.framework.LayerBridge;
import ims.framework.controls.Timer;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//WDEV-18420
	@Override
	protected void onlyrListsTabChanged(LayerBridge tab) 
	{
		if( form.lyrLists().tabPagePendingEmergencyAdmissions() != null && form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms() != null) //wdev-11804
			form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms().leaveComponent(); 					//wdev-11804
		
		if (tab.equals(form.lyrLists().tabPageCurrentIP()))
			form.lyrLists().tabPageCurrentIP().ccCurrentIPList().refresh();

		if (tab.equals(form.lyrLists().tabPagePendingElectiveAdmissions()))
		{
			form.lyrLists().tabPagePendingElectiveAdmissions().ccPending().open();
			form.lyrLists().tabPagePendingElectiveAdmissions().ccPending().refresh();
		}
		
		if (tab.equals(form.lyrLists().tabPageBedState()))
		{
			form.lyrLists().tabPageBedState().ccBedState().open();
			form.lyrLists().tabPageBedState().ccBedState().refresh();
		}

		if (tab.equals(form.lyrLists().tabPageRecentDischarges()))
		{
			form.lyrLists().tabPageRecentDischarges().ccRecentDischarges().open();
			form.lyrLists().tabPageRecentDischarges().ccRecentDischarges().refresh();
		}

		if (tab.equals(form.lyrLists().tabPagePendingEmergencyAdmissions()))
		{
			form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms().open();
			form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms().refresh(false);
		}

		if (tab.equals(form.lyrLists().tabPageTransfers()))
		{
			form.lyrLists().tabPageTransfers().ccTransfers().open();
			form.lyrLists().tabPageTransfers().ccTransfers().refresh();
		}

		if (tab.equals(form.lyrLists().tabPagePendingDischarges()))
		{
			form.lyrLists().tabPagePendingDischarges().cc1().open();
			form.lyrLists().tabPagePendingDischarges().cc1().refresh();
		}
		
		if (tab.equals(form.lyrLists().tabElectiveListPendingElectiveAdms()))
		{
			form.lyrLists().tabElectiveListPendingElectiveAdms().ccPendingEL().open();
			form.lyrLists().tabElectiveListPendingElectiveAdms().ccPendingEL().refresh();
		}
		if (tab.equals(form.lyrLists().tabPendingEmergencies()))
		{
			if (!form.lyrLists().tabPendingEmergencies().isInitialized())
			{	
				form.lyrLists().tabPendingEmergencies().ccPendingEmergenciesAdm().initializeCustomControl();
			}
			form.lyrLists().tabPendingEmergencies().ccPendingEmergenciesAdm().setFocusOnSearch();
			form.lyrLists().tabPendingEmergencies().ccPendingEmergenciesAdm().refresh();

		}
		if (tab.equals(form.lyrLists().tabPendingEmergencyTheatre()))
		{
			if (!form.lyrLists().tabPendingEmergencyTheatre().isInitialized())
			{	
				form.lyrLists().tabPendingEmergencyTheatre().ccPendingEmergencyTheatreAdm().initializeCustomControl();
			}
			form.lyrLists().tabPendingEmergencyTheatre().ccPendingEmergencyTheatreAdm().setFocusOnSearch();
			form.lyrLists().tabPendingEmergencyTheatre().ccPendingEmergencyTheatreAdm().refresh();
		}
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.getTimers().gettimerPendingEmergency().setInterval(ConfigFlag.UI.PENDING_EMERGENCY_TIMER_INTERVAL.getValue());
		//On the assumption that CurrentInpatient List is the first
		if (form.getGlobalContext().STHK.getCurrentInpatientListFilterIsNotNull())
			form.lyrLists().tabPageCurrentIP().ccCurrentIPList().refresh();
		
		//WDEV-10696 - hide A&E Tabs
		if(!ConfigFlag.UI.DISPLAY_ANE_BEDMANAGEMENT.getValue())
		{
			form.lyrLists().tabPagePendingEmergencyAdmissions().setVisible(false);
			form.lyrLists().tabPagePendingEmergencyAdmissions().setHeaderVisible(false);
		}
		
		//WDEV-18268 hide/show PendingElectiveAdmission tabs depending on the flag
		boolean isElectiveListFunctionalityInUse = Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue());
		
		form.lyrLists().tabPagePendingElectiveAdmissions().setHeaderVisible(!isElectiveListFunctionalityInUse);
		form.lyrLists().tabElectiveListPendingElectiveAdms().setHeaderVisible(isElectiveListFunctionalityInUse);
		
		form.lyrLists().tabPendingEmergencies().setHeaderVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"));
		form.lyrLists().tabPendingEmergencyTheatre().setHeaderVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"));
		
		updateControlsState(); //WDEV-23632
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms().refresh(true);
	}

	@Override
	protected void onCcPendingEDAdmsValueChanged() throws PresentationLogicException
	{
		if(form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms().getEventFired() != null)
		{
			if(form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms(). getEventFired().equals(PendingEmergencyEventFired.START_TIMER))
			{
				form.getTimers().gettimerPendingEmergency().setEnabled(true);
			}
			else if(form.lyrLists().tabPagePendingEmergencyAdmissions().ccPendingEDAdms(). getEventFired().equals(PendingEmergencyEventFired.STOP_TIMER))
			{
				form.getTimers().gettimerPendingEmergency().setEnabled(false);
			}
		}	
	}
	
	//WDEV-23632
	private void updateControlsState()
	{
		boolean showBedManagementDashboardButton = ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue() != null && ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue().length() > 0;
		form.btnBedManagementDashboard().setVisible(showBedManagementDashboardButton);
	}

	//WDEV-23632
	@Override
	protected void onBtnBedManagementDashboardClick() throws PresentationLogicException 
	{
		engine.openDashboard(ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue(), null);
	}
}
