//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5196.25869)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdspatientsynchronisationcc;

import ims.admin.vo.lookups.PDSDeathNotificationStatus;
import ims.core.helper.PdsException;
import ims.core.helper.PdsPatientUpdateHelper;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.NationalHealthCoverVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.PDSPatientGPVo;
import ims.core.vo.PDSRelativeContactPrefVo;
import ims.core.vo.PatRelative;
import ims.core.vo.PatRelativeCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientContactPreferenceVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PdsErrorVo;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.enums.PDSSynchronisationCustomControlEvents;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.Language;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.PDSConsent;
import ims.core.vo.lookups.PDSContactMethod;
import ims.core.vo.lookups.PDSPreferredCommunicationLanguage;
import ims.core.vo.lookups.PDSSynchronisationRelevantDatasetFields;
import ims.core.vo.lookups.PDSSynchronisationRelevantDatasetFieldsCollection;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PersonTitle;
import ims.core.vo.lookups.PreferredWrittenCommunication;
import ims.core.vo.lookups.RegistrationSourceOfInfo;
import ims.core.vo.lookups.Sex;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_FIELD_NAME = new Integer(0);
	private static final Integer COL_PDS_PATIENT_1ST = new Integer(1);
	private static final Integer COL_PDS_BUTTONS = new Integer(2);
	private static final Integer COL_RESULT_DATA = new Integer(3);
	private static final Integer COL_LPI_BUTTONS = new Integer(4);
	private static final Integer COL_LPI_PATIENT_1ST = new Integer(5);
	private static final Integer COL_WAS_MODIFIED = new Integer(6);
	private static final Integer COL_LAST_VALUE = new Integer(7);
	
	//private static String DUPLICATE_IDENTIFIER_STRING = "*";
	private static final String SOURCE_BUTTON_TEXT = "Synchronise Field";
	private static final String DESTINATION_BUTTON_TEXT = "Keep Local Field Value";
	private static final String UNDO_BUTTON_TEXT = "Undo changes";
	
	//private static final Boolean IS_PDS_UPDATABLE_FIELD = new Boolean(true);
	//private static final Boolean IS_PDS_UPDATABLE_GROUP = new Boolean(true);

	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
	}
	
	public void initialize(Object[] args)
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof FormName)
				form.getLocalContext().setParentForm((FormName) args[0]);
		}
		
		initializeComponent();
	}

	private void initializeComponent()
	{
		initializePDSDynGrid();
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(doSave(null))
		{
			form.getLocalContext().setSelectedEvent(PDSSynchronisationCustomControlEvents.SYNC_AND_SAVE);
			form.fireCustomControlValueChanged();
		}
	}
	
	protected void onBtnDeferClick() throws ims.framework.exceptions.PresentationLogicException
	{
        PdsQuery helper = new PdsQuery(domain);
        
		try
		{
			helper.setPatientInContext(form.getGlobalContext().Core.getPatientToBeSynchronized());
			
			if(form.getGlobalContext().Core.getPatientToBeSynchronized() != null && form.getGlobalContext().Core.getPatientToBeSynchronized().getNhsn() != null)
				helper.setNhsNumber(form.getGlobalContext().Core.getPatientToBeSynchronized().getNhsn().getValue().replaceAll(" ", ""));

			helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "The patient synchronization operation was deferred.", PDSBackOfficeWorkPriority.P1);

			form.getLocalContext().setSelectedEvent(PDSSynchronisationCustomControlEvents.DEFER);
			form.fireCustomControlValueChanged();
		}
		catch (PdsException e1)
		{
			e1.printStackTrace();
			String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
			engine.showMessage(err);
		}
		
	}
	
	protected void onDynGrdSyncCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		if (cell.isReadOnly())
			return;

		DynamicGridCell resultCell = cell.getRow().getCells().get(getColumn(COL_RESULT_DATA));
		DynamicGridCell sourceCell = null;
		DynamicGridCell cellLastValue = cell.getRow().getCells().get(getColumn(COL_LAST_VALUE));
		boolean undoClicked = false;
		
		if(cell.getRow().getRows().size() == 0)
			resultCell.setBackColor(Color.Orange);
		
		if (cell.getColumn().getIdentifier().equals(COL_PDS_BUTTONS))
		{	
			if(form.getImages().Core.Undo.equals(cell.getValue()))
			{
				//undo pressed
    			cell.setValue(form.getImages().Core.RightArrowEnabled16);
    			cell.setTooltip(SOURCE_BUTTON_TEXT);
    			undoClicked = true;
			}
			else
			{
				//right arrow pressed
    			cell.setValue(form.getImages().Core.Undo);
    			cell.setTooltip(UNDO_BUTTON_TEXT);
			}

			DynamicGridCell lPICell = cell.getRow().getCells().get(getColumn(COL_LPI_BUTTONS));
			if (lPICell != null && form.getImages().Core.Undo.equals(lPICell.getValue()))
			{
				lPICell.setValue(form.getImages().Core.LeftArrowEnabled16);
				lPICell.setTooltip(DESTINATION_BUTTON_TEXT);
			}
			
			sourceCell = cell.getRow().getCells().get(getColumn(COL_PDS_PATIENT_1ST));
		}
		else if (cell.getColumn().getIdentifier().equals(COL_LPI_BUTTONS))
		{
			if(form.getImages().Core.Undo.equals(cell.getValue()))
			{
				//undo pressed
    			cell.setValue(form.getImages().Core.LeftArrowEnabled16);
    			cell.setTooltip(SOURCE_BUTTON_TEXT);
    			undoClicked = true;
			}
			else
			{
				//right arrow pressed
    			cell.setValue(form.getImages().Core.Undo);
    			cell.setTooltip(UNDO_BUTTON_TEXT);
			}
			
			DynamicGridCell pDSCell = cell.getRow().getCells().get(getColumn(COL_PDS_BUTTONS));
			if (pDSCell != null && form.getImages().Core.Undo.equals(pDSCell.getValue()))
			{
				pDSCell.setValue(form.getImages().Core.RightArrowEnabled16);
				pDSCell.setTooltip(SOURCE_BUTTON_TEXT);
			}
			
			sourceCell = cell.getRow().getCells().get(getColumn(COL_LPI_PATIENT_1ST));
		}

		if(cell.getRow().getRows().size() == 0)
		{
			if(undoClicked)
			{
    			resultCell.setValue(cellLastValue.getValue());
    			resultCell.setIdentifier(cellLastValue.getIdentifier());
			}
			else
			{
				cellLastValue.setValue(resultCell.getValue());
				cellLastValue.setIdentifier(resultCell.getIdentifier());
				
    			resultCell.setValue(sourceCell.getValue());
    			resultCell.setIdentifier(sourceCell.getIdentifier());
			}
		}
		else 
		{
			DynamicGridRowCollection childRows = cell.getRow().getRows();
			DynamicGridRow childRow;
			
			for(int i = 0; i < childRows.size(); i++)
			{
				childRow = childRows.get(i);
				
				resultCell = childRow.getCells().get(getColumn(COL_RESULT_DATA));
				resultCell.setBackColor(Color.Orange);
				
				cellLastValue = childRow.getCells().get(getColumn(COL_LAST_VALUE));

				if (cell.getColumn().getIdentifier().equals(COL_PDS_BUTTONS))
				{	
					DynamicGridCell btnCell = childRow.getCells().get(getColumn(COL_PDS_BUTTONS));
					
					if(undoClicked)
						btnCell.setValue(form.getImages().Core.RightArrowEnabled16);
					else
						btnCell.setValue(form.getImages().Core.Undo);
					
					DynamicGridCell lPICell = childRow.getCells().get(getColumn(COL_LPI_BUTTONS));
					if (lPICell != null && form.getImages().Core.Undo.equals(lPICell.getValue()))
					{
						lPICell.setValue(form.getImages().Core.LeftArrowEnabled16);
						lPICell.setTooltip(DESTINATION_BUTTON_TEXT);
					}
					
					sourceCell = childRow.getCells().get(getColumn(COL_PDS_PATIENT_1ST));
				}
				else if (cell.getColumn().getIdentifier().equals(COL_LPI_BUTTONS))
				{
					DynamicGridCell btnCell = childRow.getCells().get(getColumn(COL_LPI_BUTTONS));
					
					if(undoClicked)
						btnCell.setValue(form.getImages().Core.LeftArrowEnabled16);
					else
						btnCell.setValue(form.getImages().Core.Undo);
					
					DynamicGridCell pDSCell = childRow.getCells().get(getColumn(COL_PDS_BUTTONS));
					if (pDSCell != null && form.getImages().Core.Undo.equals(pDSCell.getValue()))
					{
						pDSCell.setValue(form.getImages().Core.RightArrowEnabled16);
						pDSCell.setTooltip(SOURCE_BUTTON_TEXT);
					}
					
					sourceCell = childRow.getCells().get(getColumn(COL_LPI_PATIENT_1ST));
				}
				
				//resultCell.setValue(sourceCell.getValue());
				//resultCell.setIdentifier(sourceCell.getIdentifier());
				if(undoClicked)
				{
	    			resultCell.setValue(cellLastValue.getValue());
	    			resultCell.setIdentifier(cellLastValue.getIdentifier());
				}
				else
				{
					cellLastValue.setValue(resultCell.getValue());
					cellLastValue.setIdentifier(resultCell.getIdentifier());
					
	    			resultCell.setValue(sourceCell.getValue());
	    			resultCell.setIdentifier(sourceCell.getIdentifier());
				}
				
			}
		}
	}

	private void removeIdenticalRows()
	{
		ArrayList<DynamicGridRow> tbr = new ArrayList<DynamicGridRow>();
		DynamicGridRowCollection rows = form.dynGrdSync().getRows();
		DynamicGridRow row;
		
		for(int i = 0; i < rows.size(); i++)
		{
			row = rows.get(i);
			
			if(row.getRows().size() == 0)
			{
				checkIdenticalValues(tbr, row);
			}
			else
			{
				for(int j = 0; j < row.getRows().size(); j++)
				{
					checkIdenticalValues(tbr, row.getRows().get(j));
				}
			}
		}
		
		for(int i = 0; i < tbr.size(); i++)
		{
			rows.remove(tbr.get(i));
		}
		
		tbr.clear();
		
		//second pass - for rows that had children rows
		rows = form.dynGrdSync().getRows();
		for(int i = 0; i < rows.size(); i++)
		{
			row = rows.get(i);
			
			if(row.getRows().size() == 0)
			{
				checkIdenticalValues(tbr, row);
			}
		}
		
		for(int i = 0; i < tbr.size(); i++)
		{
			rows.remove(tbr.get(i));
		}
		
	}

	private void checkIdenticalValues(ArrayList<DynamicGridRow> tbr, DynamicGridRow row)
	{
		DynamicGridCell lPICell = row.getCells().get(getColumn(COL_PDS_PATIENT_1ST));
		DynamicGridCell pDSCell = row.getCells().get(getColumn(COL_LPI_PATIENT_1ST));
		
		if(lPICell == null || pDSCell == null)
			return;
		
		if(lPICell.getValue() == null && pDSCell.getValue() == null && row.getRows().size() == 0)
		{
			tbr.add(row);
		}
		else
		{
			if(lPICell.getValue() != null && lPICell.getValue().equals(pDSCell.getValue()))
				tbr.add(row);
			else if(pDSCell.getValue() != null && pDSCell.getValue().equals(lPICell.getValue()))
				tbr.add(row);
		}
	}

	private void initializePDSDynGrid()
	{
		form.dynGrdSync().clear();

		DynamicGridColumn column = form.dynGrdSync().getColumns().newColumn("Field Name", COL_FIELD_NAME);
		column.setWidth(200);
		column.setCanGrow(true);

		column = form.dynGrdSync().getColumns().newColumn("PDS Patient", COL_PDS_PATIENT_1ST);
		column.setWidth(190);
		column.setCanGrow(true);
		
		column = form.dynGrdSync().getColumns().newColumn("", COL_PDS_BUTTONS);
		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setCanGrow(false);
		
		column = form.dynGrdSync().getColumns().newColumn("Result Data", COL_RESULT_DATA);
		column.setWidth(190);
		column.setCanGrow(true);
		
		column = form.dynGrdSync().getColumns().newColumn("", COL_LPI_BUTTONS);
		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		
		column = form.dynGrdSync().getColumns().newColumn("LPI Patient", COL_LPI_PATIENT_1ST);
		column.setWidth(190);
		column.setCanGrow(true);
				
		column = form.dynGrdSync().getColumns().newColumn("", COL_WAS_MODIFIED);
		column.setWidth(0);
		column.setCanGrow(false);

		column = form.dynGrdSync().getColumns().newColumn("", COL_LAST_VALUE);
		column.setWidth(0);
		column.setCanGrow(false);
	}
	
	private void open() 
	{
		form.getLocalContext().setPDSPatient(form.getGlobalContext().Core.getPatientFromPDS());
		form.getLocalContext().setLPIPatient((Patient) form.getGlobalContext().Core.getPatientToBeSynchronized().clone());
		form.getLocalContext().setResultedPatient(form.getGlobalContext().Core.getPatientToBeSynchronized());
		
		populateSynchronizeGrid(form.getLocalContext().getPDSPatient(), form.getLocalContext().getLPIPatient());
		populateRelatives(form.getLocalContext().getPDSPatient(), form.getLocalContext().getLPIPatient());
		
		removeIdenticalRows();
	}

	private void populateRelatives(Patient pdsPatient, Patient lpiPatient)
	{
		PatRelativeCollection coll = new PatRelativeCollection();
		
		if(lpiPatient.getPDSrelativesIsNotNull())
		{
			for(int i = 0; i < lpiPatient.getPDSrelatives().size(); i++)
			{
				//WDEV-22172 - add if no object identifier held locally
				if (!lpiPatient.getPDSrelatives().get(i).getObjectidentifierIsNotNull())
					coll.add(lpiPatient.getPDSrelatives().get(i));
			}
		}

		//WDEV-22172
		//remove all relatives saved locally with an object identifier for PDS
		lpiPatient.setPDSrelatives(coll);		
		
		if(pdsPatient.getPDSrelativesIsNotNull())
		{
			mergeRelativeCollections(coll, pdsPatient.getPDSrelatives());
		}
		
		form.ccRelativeSynchronization().setRelatives(coll);
	}

	private void mergeRelativeCollections(PatRelativeCollection coll, PatRelativeCollection pdsRelatives)
	{
		PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());

		for(int i = 0; i < pdsRelatives.size(); i++)
		{
			PatRelative rel = pdsRelatives.get(i);
			
			if(rel.getNhsNumIsNotNull() && rel.getNhsNum().length() > 0)
			{
				//retrieve relative's details from PDS
				PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
				Patient pdsRelative = null;
				
				try
				{					
					pdsRelative = helper.makeRequest(params, rel.getNhsNum(), PdsRetrievalQueryHelper.HistoricDataIndicator.ON);
				}
				catch (PdsException e)
				{
					e.printStackTrace();
					
					engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString());
					
					helper.setPdsErrorFromException(e);
					try
					{
						helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  e.toString(), PDSBackOfficeWorkPriority.P1);
					}
					catch (PdsException e1)
					{
						e1.printStackTrace();
						String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
						engine.showMessage(err);
					}
				}

				if(pdsRelative == null)
				{
					//spine returned an error
					PdsErrorVo pdsError = helper.getLastErrorDetails();
					
					String err = "Error calling PdsRetrievalQuery for patient relative, query response code: " + pdsError.getQueryResponseCode();
					engine.showMessage(err);
					
					try
					{
						helper.createBackOfficeItemAndNotification(PDSBackOfficeType.CONNECTIONERROR,  err, PDSBackOfficeWorkPriority.P1);
					}
					catch (PdsException e1)
					{
						e1.printStackTrace();
						err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
						engine.showMessage(err);
					}
				}
				else
				{
					//fill in patient relative details as returned by second retrieval query
					PatRelative newRel = null;
					
					//WDEV-22172
					newRel = getRelativeByObjectIdentifier(coll, rel.getObjectidentifier());
					
					//WDEV-22172
					if(newRel == null)
					{
						//Check if the last transaction had added relatives added
						newRel = getRelativeByRelativeRecord(coll, rel);
					}
					
					if(newRel == null)
					{
						newRel = new PatRelative();
						coll.add(newRel);
					}
					
					newRel.setName(pdsRelative.getName());
					newRel.setAddress(pdsRelative.getAddress());
					newRel.setCommChannels(pdsRelative.getCommChannels());
					
					newRel.setNokInd(rel.getNokInd());
					newRel.setPending(null);
					newRel.setObjectidentifier(rel.getObjectidentifier());
					newRel.setBeffdate(rel.getBeffdate());
					newRel.setBeffdatecnf(rel.getBeffdatecnf());
					newRel.setBetdate(rel.getBetdate());
					newRel.setBetdatecnf(rel.getBetdatecnf());
					newRel.setRelationship(rel.getRelationship());
					newRel.setRole(rel.getRole());
					//WDEV-22172
					newRel.setContactRank(rel.getContactRank());
					//WDEV-22201
					if (pdsRelative.getIdentifiersIsNotNull())
					{
						//always take the first identifier from the list retrieved from PDS
						if (pdsRelative.getIdentifiers().size()>1
								&& pdsRelative.getIdentifiers().get(0).getValue()!=null)
							newRel.setNhsNum(pdsRelative.getIdentifiers().get(0).getValue().replaceAll(" ", ""));
					}
					//WDEV-22201
					newRel.setIsConfidential(pdsRelative.getIsConfidential());
					newRel.setPDScontactPreferences(new PDSRelativeContactPrefVo());
					newRel.getPDScontactPreferences().setPdsPreferredContactTimes(pdsRelative.getAlternativeContact()!=null?pdsRelative.getAlternativeContact().getPdsPreferredContactTimes():null);
					newRel.getPDScontactPreferences().setPdsPreferredWrittenComm(pdsRelative.getAlternativeContact()!=null?pdsRelative.getAlternativeContact().getPdsPreferredWrittenComm():null);
					newRel.setPDSInterpreterRequired(pdsRelative.getPDSInterpreterRequired());
					newRel.setPDSlanguage(pdsRelative.getAlternativeContact()!=null?pdsRelative.getPrefCommLanguage():null);
					//WDEV-22186
					newRel.setCpyCorresp(rel.getCpyCorresp());
					//WDEV22172
				}
			}
			else
			{
				//fill in patient relative details as returned by first retrieval query
				PatRelative newRel = null;
				
				newRel = getRelativeByObjectIdentifier(coll, rel.getObjectidentifier());
				
				//WDEV-22172
				if(newRel == null)
				{
					//Check if the last transaction had added relatives added
					newRel = getRelativeByRelativeRecord(coll, rel);
				}
				
				if(newRel == null)
				{
					newRel = new PatRelative();
					coll.add(newRel);
				}
				
				newRel.setName(rel.getName());
				newRel.setAddress(rel.getAddress());
				newRel.setCommChannels(rel.getCommChannels());
				newRel.setNokInd(rel.getNokInd());
				newRel.setPending(null);
				newRel.setObjectidentifier(rel.getObjectidentifier());
				newRel.setBeffdate(rel.getBeffdate());
				newRel.setBeffdatecnf(rel.getBeffdatecnf());
				newRel.setBetdate(rel.getBetdate());
				newRel.setBetdatecnf(rel.getBetdatecnf());
				newRel.setRelationship(rel.getRelationship());
				newRel.setRole(rel.getRole());
				//WDEV22172
				newRel.setContactRank(rel.getContactRank());
				newRel.setNhsNum(rel.getNhsNum());
				newRel.setIsConfidential(rel.getIsConfidential());
				newRel.setPDScontactPreferences(rel.getPDScontactPreferences());
				newRel.setPDSInterpreterRequired(rel.getPDSInterpreterRequired());
				newRel.setPDSlanguage(rel.getPDSlanguage());
				//WDEV-22186				
				newRel.setCpyCorresp(rel.getCpyCorresp());
				//WDEV22172
			}
		}
		
	}

	//WDEV-22172
	private PatRelative getRelativeByRelativeRecord(
			PatRelativeCollection patRelativeCollection, PatRelative rel) 
	{
		if(rel == null)
			return null;
		
		for(int i = 0; i < patRelativeCollection.size(); i++)
		{
			if (rel.getNhsNumIsNotNull() && rel.getNhsNum().equals(patRelativeCollection.get(i).getNhsNum()))
				return patRelativeCollection.get(i);
			else 
			{
				//Check name and address to get a match for the object identifier update
				if((rel.getNameIsNotNull() && patRelativeCollection.get(i).getNameIsNotNull()) 
						&& (rel.getName().getForenameIsNotNull() && patRelativeCollection.get(i).getName().getForenameIsNotNull()) 
						&& (rel.getName().getForename().toUpperCase().equals(patRelativeCollection.get(i).getName().getForename().toUpperCase())))
				{
					if((rel.getNameIsNotNull() && patRelativeCollection.get(i).getNameIsNotNull()) 
							&& (rel.getName().getSurnameIsNotNull() && patRelativeCollection.get(i).getName().getSurnameIsNotNull()) 
							&& (rel.getName().getSurname().toUpperCase().equals(patRelativeCollection.get(i).getName().getSurname().toUpperCase())))
					{
						//WDEV-22186
						if((rel.getAddressIsNotNull() && patRelativeCollection.get(i).getAddressIsNotNull())
								&& (rel.getAddress().getPostCodeIsNotNull() && patRelativeCollection.get(i).getAddress().getPostCodeIsNotNull())
								&& (rel.getAddress().getPostCode().replaceAll(" ", "").toUpperCase().equals(patRelativeCollection.get(i).getAddress().getPostCode().replaceAll(" ", "").toUpperCase()))
								&& patRelativeCollection.get(i).getObjectidentifier()==null)							
							return patRelativeCollection.get(i);
						//WDEV-22186						
					}
				}
			}
		}
		
		return null;
	}
	//WDEV-22172

	private DynamicGridColumn getColumn(Integer colFieldName) 
	{
		return form.dynGrdSync().getColumns().getByIdentifier(colFieldName);
	}
	
	private boolean doSave(Boolean decouplePatientRecord) 
	{
		Patient initialPatient = form.getLocalContext().getLPIPatient();
		Patient patient = form.getLocalContext().getResultedPatient();
		Patient pdsPatient = form.getLocalContext().getPDSPatient();
		
		patient = populateDataFromScreen(patient);
		
		// WDEV-21883
		patient.setSCN(pdsPatient.getSCN());
		patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);

		if(form.getForms().Core.PDSDemographics.equals(form.getLocalContext().getParentForm()))
		{
			form.getGlobalContext().Core.setPatientToBeSynchronized(patient);
			return true;
		}
		
		
		
		//WDEV-21387
		//Also set decoupled to false as the intention herer is to synchronise
		patient.setDecoupled(new Boolean(false));
		
		String[] errors = patient.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if(decouplePatientRecord == null && patient.getDodIsNotNull())
		{
			if(!patient.getDod().equals(initialPatient.getDod()))
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("Would you like to decouple the patient record from PDS?");
				engine.open(form.getForms().Core.YesNoDialog);
				return false;
			}
		}
		
		PdsPatientUpdateHelper updateHelper = new PdsPatientUpdateHelper(domain);
		updateHelper.setPatientUpdateFields(patient, initialPatient);
		
		//WDEV-21392
		//set nhs number verified 
		for (int i = 0; patient.getIdentifiersIsNotNull() && i < patient.getIdentifiers().size(); i++)
		{
			if (patient.getIdentifiers().get(i).getTypeIsNotNull() && patient.getIdentifiers().get(i).getType().equals(PatIdType.NHSN))
			{
				patient.getIdentifiers().get(i).setVerified(true);
				break;
			}
		}
		//WDEV-21392
		
		return save(patient, false, null, null, true, decouplePatientRecord);
	}
	
	private boolean save(Patient patient, boolean newPatient, PersonAddress previousAddress, PersonAddress historicAddress,boolean bPCTcheck, Boolean decouplePatientRecord)
	{		

		// WDEV-21862 - Source of Information is now PDS as it has been synchronized from there
		patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);

		if(previousAddress != null)
		{
			PersonAddressCollection collAdresses = patient.getAddresses();
			if (collAdresses == null)
				collAdresses = new PersonAddressCollection();
			
			collAdresses.add((PersonAddress) previousAddress.clone());
			patient.setAddresses(collAdresses);
		}
			
		/*
		if (form.getLocalContext().getDeathDetailsIsNotNull())
		{	
			if(Boolean.TRUE.equals(decouplePatientRecord))
				patient.setDecoupled(Boolean.TRUE);
			
			String[] patErrors = patient.validate();
			if (patErrors != null)
			{
				engine.showErrors(patErrors);
				return false;
			}

			String[] errors = form.getLocalContext().getDeathDetails().validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return false;
			}								

			if(isPds())
				patient.setPDSDeathNotificationStatus(form.getLocalContext().getDeathDetails().getPDSDeathNotificationStatus());
			
			try
			{
				patient = domain.saveDemographics(patient, form.getLocalContext().getDeathDetails(), decouplePatientRecord);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage("Data has been modified by another user - screen will be refreshed");
				form.setMode(FormMode.VIEW);
				try
				{
					cancelSave();
				}
				catch (FormOpenException e1) 
				{
					engine.showMessage(e.getMessage());
				}
				
				return false;
			}
			catch (UniqueKeyViolationException e)
			{
				if (form.getLocalContext().getbUpdatePDSIsNotNull()
					&& form.getLocalContext().getbUpdatePDS())
					patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. wdev-15187

				engine.showMessage(e.getMessage());
				return false;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			catch (IndexOutOfBoundsException e)
			{
				engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
				return false;
			}

			form.getLocalContext().setDeathDetails(null);
		}
		else
		*/	
		{
			try
			{
				String[] errors = patient.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return false;
				}
				patient = domain.savePatient(patient, false);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage("Data has been modified by another user - screen will be refreshed");
				try
				{
					Patient lpiPatient = domain.getResultPatient(form.getGlobalContext().Core.getPatientToBeSynchronized());
					form.getGlobalContext().Core.setPatientToBeSynchronized(lpiPatient);
					
					open();
				}
				catch (Exception e1)
				{
					engine.showMessage(e1.getMessage());
				}
				return false;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			catch (IndexOutOfBoundsException e)
			{
				engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
				return false;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
		}

		form.getGlobalContext().Core.setPatientShort(patient);
		form.getGlobalContext().Core.getPatientShort().calculateAge();

		return true;
	}
	
	private Patient populateDataFromScreen(Patient patient)
	{
		DynamicGridRowCollection rows = form.dynGrdSync().getRows();
		DynamicGridRow row = null;
		PDSSynchronisationRelevantDatasetFields fieldType;
		int count = rows.size();
		
		for(int i = 0; i < count; i++)
		{
			row = rows.get(i);
			DynamicGridCell cellResult = row.getCells().get(getColumn(COL_RESULT_DATA));
			
			fieldType = (PDSSynchronisationRelevantDatasetFields) row.getValue();

			//person name
    		if(PDSSynchronisationRelevantDatasetFields.NAME.equals(fieldType))
    		{
    			for(int j = 0; j < row.getRows().size(); j++)
    			{
    				fieldType = (PDSSynchronisationRelevantDatasetFields) row.getRows().get(j).getValue();
    				cellResult = row.getRows().get(j).getCells().get(getColumn(COL_RESULT_DATA));
    				
    	    		if(PDSSynchronisationRelevantDatasetFields.TITLE.equals(fieldType))
    	    		{
    	    			patient.getName().setTitle((PersonTitle) cellResult.getIdentifier());
    	    		}
    	    		else if(PDSSynchronisationRelevantDatasetFields.SURNAME.equals(fieldType))
    	    		{
    	    			patient.getName().setSurname((String) cellResult.getIdentifier());
    	    		}
    	    		else if(PDSSynchronisationRelevantDatasetFields.FORENAME.equals(fieldType))
    	    		{
    	    			patient.getName().setForename((String) cellResult.getIdentifier());
    	    		}
    	    		else if(PDSSynchronisationRelevantDatasetFields.MIDDLENAME.equals(fieldType))
    	    		{
    	    			patient.getName().setMiddleName((String) cellResult.getIdentifier());
    	    		}
    			}
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.COMMUNICATION_CHANNELS.equals(fieldType))
    		{
    			//comm channels
    			
    			if(patient.getCommChannels() == null)
    				patient.setCommChannels(new CommChannelVoCollection());
    			
    			for(int j = 0; j < row.getRows().size(); j++)
    			{
    				fieldType = (PDSSynchronisationRelevantDatasetFields) row.getRows().get(j).getValue();
    				cellResult = row.getRows().get(j).getCells().get(getColumn(COL_RESULT_DATA));
    				
    	    		if(PDSSynchronisationRelevantDatasetFields.COMMUNICATION_CHANNELS.equals(fieldType))
    	    		{
    	    			CommChannelVo newValue = (CommChannelVo) cellResult.getIdentifier();
    	    			
    	    			if(newValue == null)
    	    			{
    	    				//remove comm channel
    	    				CommChannelVo lpiValue = (CommChannelVo) row.getRows().get(j).getCells().get(getColumn(COL_LPI_PATIENT_1ST)).getIdentifier();
    	    				
    	    				if(lpiValue != null && lpiValue.getCommValue() != null)
    	    				{
        	    				for(int k = 0; k < patient.getCommChannels().size(); k++)
        	    				{
        	    					if(lpiValue.getCommValue().equals(patient.getCommChannels().get(k).getCommValue()))
        	    					{
        	    						patient.getCommChannels().remove(k);
        	    						break;
        	    					}
        	    				}
    	    				}
    	    			}
    	    			else
    	    			{
    	    				CommChannelVo lpiValue = (CommChannelVo) row.getRows().get(j).getCells().get(getColumn(COL_LPI_PATIENT_1ST)).getIdentifier();
    	    				
    	    				if(lpiValue != null && lpiValue.getCommValue() != null)
    	    				{
    	    					//update comm channel
        	    				for(int k = 0; k < patient.getCommChannels().size(); k++)
        	    				{
        	    					if(lpiValue.getCommValue().equals(patient.getCommChannels().get(k).getCommValue()))
        	    					{
        	    						patient.getCommChannels().set(k, newValue);
        	    						break;
        	    					}
        	    				}
    	    				}
    	    				else
    	    				{
    	    					//insert comm channel
    	    					patient.getCommChannels().add(newValue);
    	    				}
    	    			}
    	    		}
    			}
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.SEX.equals(fieldType))
    		{
    			patient.setSex((Sex) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.DATE_OF_BIRTH.equals(fieldType))
    		{
    			patient.setDob((PartialDate) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.DATE_OF_DEATH.equals(fieldType))
    		{
    			patient.setDod((Date) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.LANGUAGE.equals(fieldType))
    		{
    			patient.setLanguage((Language) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.ADDRESS.equals(fieldType))
    		{
    			patient.setAddress((PersonAddress) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.TIME_OF_DEATH.equals(fieldType))
    		{
    			patient.setTimeOfDeath((Time) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.DEATH_NOTIFICATION_STATUS.equals(fieldType))
    		{
    			patient.setPDSDeathNotificationStatus((PDSDeathNotificationStatus) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_CONTACT_METHOD.equals(fieldType))
    		{
    			if(patient.getAlternativeContact() == null)
    				patient.setAlternativeContact(new PatientContactPreferenceVo());
    			
    			patient.getAlternativeContact().setPdsPreferredContactMethod((PDSContactMethod) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_CONTACT_TIMES.equals(fieldType))
    		{
    			if(patient.getAlternativeContact() == null)
    				patient.setAlternativeContact(new PatientContactPreferenceVo());
    			
    			patient.getAlternativeContact().setPdsPreferredContactTimes((String) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_WRITTEN_COMMUNICATION_FORMAT.equals(fieldType))
    		{
    			if(patient.getAlternativeContact() == null)
    				patient.setAlternativeContact(new PatientContactPreferenceVo());
    			
    			patient.getAlternativeContact().setPdsPreferredWrittenComm( (PreferredWrittenCommunication) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.CONSENT.equals(fieldType))
    		{
    			if(patient.getAlternativeContact() == null)
    				patient.setAlternativeContact(new PatientContactPreferenceVo());
    			
    			patient.getAlternativeContact().setPdsConsent((PDSConsent) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.CONSENT_DATE_LAST_CHANGED.equals(fieldType))
    		{
    			if(patient.getAlternativeContact() == null)
    				patient.setAlternativeContact(new PatientContactPreferenceVo());
    			
    			patient.getAlternativeContact().setPdsDateLastChanged((Date) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_LANGUAGE.equals(fieldType))
    		{
    			patient.setPrefCommLanguage((PDSPreferredCommunicationLanguage) cellResult.getIdentifier());
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.INTERPRETER_REQUIRED.equals(fieldType))
    		{
    			patient.setPDSInterpreterRequired((Boolean) cellResult.getIdentifier());
    		}
    		//WDEV-22199 as a result of changes to sds lookup and confirmed GP's not sent from PDS
//    		else if(PDSSynchronisationRelevantDatasetFields.GP.equals(fieldType))
//    		{
//    			patient.setGp((GpShortVo) cellResult.getIdentifier());
//    			
//    			if(patient.getPDSPatientGP() == null)
//    				patient.setPDSPatientGP(new PDSPatientGPVo());
//    			
//    			patient.getPDSPatientGP().setGp((GpShortVo) cellResult.getIdentifier());
//    		}
    		else if(PDSSynchronisationRelevantDatasetFields.GP_PRACTICE.equals(fieldType))
    		{
    			patient.setPractice((OrganisationWithSitesVo) cellResult.getIdentifier());
    			
    			if(patient.getPDSPatientGP() == null)
    				patient.setPDSPatientGP(new PDSPatientGPVo());
    			
    			patient.getPDSPatientGP().setPractice((OrganisationWithSitesVo) cellResult.getIdentifier());
    			
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.NEXT_OF_KIN.equals(fieldType))
    		{
    			//TODO awaiting more specs for dealing with relatives/NOK 
    		}
    		else if(PDSSynchronisationRelevantDatasetFields.MEDICAL_CARD_INFORMATION.equals(fieldType))
    		{
    			if(patient.getNationalHealthCover() == null)
    				patient.setNationalHealthCover(new NationalHealthCoverVo());
    			
    			patient.getNationalHealthCover().setMedicalCardNo((String) cellResult.getIdentifier());
       		}
		}
		
		//pds relatives
		patient.setPDSrelatives(form.ccRelativeSynchronization().getRelatives());
	
		return patient;
	}

	private void updateControlsState() 
	{
		
	}

	class CommChannelComparator implements Comparator<CommChannelVo>
	{
		private int order =1;
		public CommChannelComparator()
		{
			order = 1;
		}
		public CommChannelComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(CommChannelVo o1, CommChannelVo o2)
		{
			if (o1 != null && o1.getChannelType() != null && o2!=null && o2.getChannelType() != null)
			{
				int typeCompare = o1.getChannelType().compareTo(o2.getChannelType());
				
				if(typeCompare == 0 && o1.getCommValue() != null && o2.getCommValue() != null)
				{
					return o1.getCommValue().compareToIgnoreCase(o2.getCommValue());
				}
				
				return typeCompare;
			}
			
			if (o1 == null || o1.getChannelType() == null)
				return -1*order;
			
			if (o2 == null || o2.getChannelType() == null)
				return order;
			
			return 0;
		}	
	}
	
	class PatientIdComparator implements Comparator<PatientId>
	{
		private int order =1;
		public PatientIdComparator()
		{
			order = 1;
		}
		public PatientIdComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(PatientId o1, PatientId o2)
		{
			if (o1 != null && o1.getType() != null && o2!=null && o2.getType() != null)
			{
				int typeCompare = o1.getType().compareTo(o2.getType());
				
				if(typeCompare == 0 && o1.getIdValue() != null && o2.getIdValue() != null)
				{
					return o1.getIdValue().compareToIgnoreCase(o2.getIdValue());
				}
				
				return typeCompare;
			}
			
			if (o1 == null || o1.getType() == null)
				return -1*order;
			
			if (o2 == null || o2.getType() == null)
				return order;
			
			return 0;
		}	
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getMessageBoxIdFromGPAndGPSurgery() != null && messageBoxId == form.getLocalContext().getMessageBoxIdFromGPAndGPSurgery())
		{
			if(DialogResult.YES.equals(result))
			{
				form.getLocalContext().getResultedPatient().setGp(form.getLocalContext().getNewGP() != null ? new GpShortVo(form.getLocalContext().getNewGP().getID_Gp(), form.getLocalContext().getNewGP().getVersion_Gp()) : null);
				form.getLocalContext().getResultedPatient().setPractice(form.getLocalContext().getNewPractice() != null ? new OrganisationWithSitesVo(form.getLocalContext().getNewPractice().getID_Organisation(), form.getLocalContext().getNewPractice().getVersion_Organisation()) : null);
				
				for(int i=0; i<form.dynGrdSync().getRows().size(); i++)
				{
					DynamicGridCell cell = null;
					
					if(PDSSynchronisationRelevantDatasetFields.GP.equals(form.dynGrdSync().getRows().get(i).getValue()) || PDSSynchronisationRelevantDatasetFields.GP_PRACTICE.equals(form.dynGrdSync().getRows().get(i).getValue()))
					{
						cell = form.dynGrdSync().getRows().get(i).getCells().get(getColumn(COL_RESULT_DATA));
						if(cell == null)
							cell = form.dynGrdSync().getRows().get(i).getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.HTMLVIEW);
						
						if(PDSSynchronisationRelevantDatasetFields.GP.equals(form.dynGrdSync().getRows().get(i).getValue()))
						{
							cell.setValue(form.getLocalContext().getNewGP() != null ? form.getLocalContext().getNewGP().getName().toString() : null);
						}
						else if(PDSSynchronisationRelevantDatasetFields.GP_PRACTICE.equals(form.dynGrdSync().getRows().get(i).getValue()))
						{
							cell.setValue(form.getLocalContext().getNewPractice() != null ? form.getLocalContext().getNewPractice().getName() : null);
						}
						
						cell.setBackColor(form.getLocalContext().getCellColor());
					}
				}
			}
			
			form.getLocalContext().setMessageBoxIdFromGPAndGPSurgery(null);
		}
		else if(form.getLocalContext().getMessageBoxIdFromAddresCollection() != null && messageBoxId == form.getLocalContext().getMessageBoxIdFromAddresCollection())
		{
			if(DialogResult.YES.equals(result))
			{
				form.getLocalContext().getResultedPatient().setAddresses(form.getLocalContext().getAddresses());
			}
		}
	}

	
	public PDSSynchronisationCustomControlEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	
	public void clearSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
		
	}

	@Override
	public void setLocalPatient(Patient localPatient) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setPDSPatient(Patient pdsPatient) {
		// TODO Auto-generated method stub
		
	}

	private void populateSynchronizeGrid(Patient pdsPatient, Patient lpiPatient) 
	{
		form.dynGrdSync().getRows().clear();
		
		if(pdsPatient == null || lpiPatient == null)
			return;
		
		PDSSynchronisationRelevantDatasetFieldsCollection PDSSynchronisationRelevantDatasetFieldsColl = LookupHelper.getPDSSynchronisationRelevantDatasetFields(domain.getLookupService());
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.SCN);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.BEFF_DATE_FROM_TO);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.BEFF_DATE_FROM_TO_ADDR);
		
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.ADDRESS_TYPE);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.ADDRESS_LINE1);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.ADDRESS_LINE2);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.ADDRESS_LINE3);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.ADDRESS_LINE4);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.ADDRESS_LINE5);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.POSTCODE);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.PAF_KEY);
		
		//related person
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.RELATIVE_BEFF_DATE_FROM_TO);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.RELATED_PERSON_ROLE);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.RELATIONSHIP_TYPE);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.CONTACT_RANKING);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.NEXT_OF_KIN_INDICATOR);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.COPY_CORRESPONDENCE_INDICATOR);

		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.IDENTIFIERS);
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.GP_SURGERY);
		//WDEV-22199
		PDSSynchronisationRelevantDatasetFieldsColl.remove(PDSSynchronisationRelevantDatasetFields.GP);
		//WDEV-22199
		/*
		PDSSynchronisationRelevantDatasetFieldsCollection PDSSynchronisationRelevantDatasetFieldsColl = new PDSSynchronisationRelevantDatasetFieldsCollection();
		PDSSynchronisationRelevantDatasetFieldsColl.add(PDSSynchronisationRelevantDatasetFields.COMMUNICATION_CHANNELS);
		*/
		
		for(int i=0; i<PDSSynchronisationRelevantDatasetFieldsColl.size(); i++)
		{
			addDataRow(PDSSynchronisationRelevantDatasetFieldsColl.get(i), pdsPatient, lpiPatient);
		}
	}

	private void addDataRow(PDSSynchronisationRelevantDatasetFields fieldType, Patient pdsPatient, Patient lpiPatient)
	{
		DynamicGridRow row = null;
		
		getColumn(COL_PDS_PATIENT_1ST).setCaption("PDS Patient (" + PDSSynchronisationRelevantDatasetFields.SCN.getText() + " = " + (pdsPatient.getSCNIsNotNull() ? pdsPatient.getSCN().intValue() : "") + ")");
		getColumn(COL_LPI_PATIENT_1ST).setCaption("LPI Patient (" + PDSSynchronisationRelevantDatasetFields.SCN.getText() + " = " + (lpiPatient.getSCNIsNotNull() ? lpiPatient.getSCN().intValue() : "") + ")");
		
		if(fieldType.getParent() != null)
		{
			//child lookup instance
			row = getRowByValue(fieldType.getParent(), form.dynGrdSync().getRows());
			//add child row
			row = row.getRows().newRow();
		}
		else
		{
			row = form.dynGrdSync().getRows().newRow();
		}
		
		setRowCells(fieldType, row);
		
		//populate field values from both PDS and LPI
		if(PDSSynchronisationRelevantDatasetFields.IDENTIFIERS.equals(fieldType))
		{	
			addPatientIdentifiers(row, pdsPatient, lpiPatient);
		}
		else if(PDSSynchronisationRelevantDatasetFields.COMMUNICATION_CHANNELS.equals(fieldType))
		{	
			addPatientCommChannels(row, pdsPatient, lpiPatient);
		}
		else
		{
			populateRowWithPdsAndLpiData(row, pdsPatient, lpiPatient);
		}
	}

	private void setRowCells(PDSSynchronisationRelevantDatasetFields fieldType, DynamicGridRow row)
	{
		row.setSelectable(false);
		row.setExpanded(true);
		row.setValue(fieldType);
		
		//field name
		DynamicGridCell cell = row.getCells().newCell(getColumn(COL_FIELD_NAME), DynamicCellType.HTMLVIEW);
		cell.setValue("<b>" + fieldType.getText() + "</b>");
		cell.setReadOnly(true);

		//PDS field value
		cell = row.getCells().newCell(getColumn(COL_PDS_PATIENT_1ST), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);

		//cell buttons
		DynamicGridCell pdsButtonCell = row.getCells().newCell(getColumn(COL_PDS_BUTTONS), DynamicCellType.IMAGEBUTTON);
		pdsButtonCell.setValue(form.getImages().Core.RightArrowEnabled16);
		pdsButtonCell.setAutoPostBack(Boolean.TRUE);
		pdsButtonCell.setReadOnly(Boolean.FALSE);
		pdsButtonCell.setTooltip(fieldType.getParent() == null ? SOURCE_BUTTON_TEXT : "Synchronise All Fields");
		
		//field value
		cell = row.getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);

		DynamicGridCell lpiButtonCell = row.getCells().newCell(getColumn(COL_LPI_BUTTONS), DynamicCellType.IMAGEBUTTON);
		lpiButtonCell.setValue(form.getImages().Core.LeftArrowEnabled16);
		lpiButtonCell.setAutoPostBack(Boolean.TRUE);
		lpiButtonCell.setReadOnly(Boolean.FALSE);
		lpiButtonCell.setTooltip(fieldType.getParent() == null ? DESTINATION_BUTTON_TEXT : "Synchronise All Fields");
		
		//LPI field value
		cell = row.getCells().newCell(getColumn(COL_LPI_PATIENT_1ST), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);

		//has changed
		cell = row.getCells().newCell(getColumn(COL_WAS_MODIFIED), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);
		
		//last value
		cell = row.getCells().newCell(getColumn(COL_LAST_VALUE), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);
	}

	private void populateRowWithPdsAndLpiData(DynamicGridRow row, Patient pdsPatient, Patient lpiPatient)
	{
		
		// WDEV-21862 - If Patient Sex, DOB or DOD differ, they need to be highlighted a different colour
		Boolean fieldsDiffer=false;
		if(PDSSynchronisationRelevantDatasetFields.SEX.equals((PDSSynchronisationRelevantDatasetFields) row.getValue()))
		{
			ims.core.vo.lookups.Sex pdsPatientSex = pdsPatient.getSex();
			ims.core.vo.lookups.Sex lpiPatientSex = lpiPatient.getSex();
			if ((pdsPatientSex == null && lpiPatientSex != null) || (lpiPatientSex == null && pdsPatientSex != null) || (pdsPatientSex != null && lpiPatientSex != null && pdsPatientSex.getId() != lpiPatientSex.getId()))
				fieldsDiffer=true;
		}
		if(PDSSynchronisationRelevantDatasetFields.DATE_OF_DEATH.equals((PDSSynchronisationRelevantDatasetFields) row.getValue()))
		{
			Date pdsPatientDod = pdsPatient.getDod();
			Date lpiPatientDod = lpiPatient.getDod();
			if ((pdsPatientDod == null && lpiPatientDod != null) || (lpiPatientDod == null && pdsPatientDod != null) || (pdsPatientDod != null && lpiPatientDod != null && !pdsPatientDod.equals(lpiPatientDod)))
				fieldsDiffer=true;
		}
			
		if(PDSSynchronisationRelevantDatasetFields.DATE_OF_BIRTH.equals((PDSSynchronisationRelevantDatasetFields) row.getValue()))
		{
			PartialDate pdsPatientDob = pdsPatient.getDob();
			PartialDate lpiPatientDob = lpiPatient.getDob();
			if ((pdsPatientDob == null && lpiPatientDob != null) || (lpiPatientDob == null && pdsPatientDob != null) || (pdsPatientDob != null && lpiPatientDob != null && !pdsPatientDob.equals(lpiPatientDob)))
				fieldsDiffer=true;
		}

		// WDEV-21883 - For the boolean type fields need to treat null and false the same
		if (PDSSynchronisationRelevantDatasetFields.INTERPRETER_REQUIRED.equals((PDSSynchronisationRelevantDatasetFields) row.getValue()))
		{
			Boolean pdsPatientValue = pdsPatient.getPDSInterpreterRequired();
			Boolean lpiPatientValue = lpiPatient.getPDSInterpreterRequired();
			if ((pdsPatientValue == null || (pdsPatientValue != null && !pdsPatientValue)) && lpiPatientValue != null && lpiPatientValue)
				fieldsDiffer=true;
			else if ((lpiPatientValue == null || (lpiPatientValue != null && !lpiPatientValue)) && pdsPatientValue != null && pdsPatientValue)
				fieldsDiffer=true;
		}
		
		
		//pds cell
		DynamicGridCell cell = row.getCells().newCell(getColumn(COL_PDS_PATIENT_1ST), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);
		populateCellWithData(cell, pdsPatient, (PDSSynchronisationRelevantDatasetFields) row.getValue(), true, fieldsDiffer);
		
		//lpi cell
		cell = row.getCells().newCell(getColumn(COL_LPI_PATIENT_1ST), DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);
		populateCellWithData(cell, lpiPatient, (PDSSynchronisationRelevantDatasetFields) row.getValue(), false, fieldsDiffer);
	}
	
	void populateCellWithData(DynamicGridCell cell, Patient patient, PDSSynchronisationRelevantDatasetFields fieldType, boolean isPds, boolean fieldsDiffer)
	{
		DynamicGridCell cellResult = cell.getRow().getCells().get(getColumn(COL_RESULT_DATA));
		DynamicGridCell cellLastValue = cell.getRow().getCells().get(getColumn(COL_LAST_VALUE));
		
		if(PDSSynchronisationRelevantDatasetFields.NAME.equals(fieldType))
		{	
		}
		else if(PDSSynchronisationRelevantDatasetFields.TITLE.equals(fieldType))
		{
			cell.setValue((patient.getName() != null && patient.getName().getTitle() != null) ? patient.getName().getTitle().toString() : null);
			cell.setIdentifier(patient.getName() != null && patient.getName().getTitle() != null ? patient.getName().getTitle() : null);
			
			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.SURNAME.equals(fieldType))
		{
			cell.setValue(patient.getName() != null ? patient.getName().getSurname() : null);
			cell.setIdentifier(patient.getName() != null && patient.getName().getSurname() != null ? patient.getName().getSurname() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.FORENAME.equals(fieldType))
		{
			cell.setValue(patient.getName() != null ? patient.getName().getForename() : null);
			cell.setIdentifier(patient.getName() != null && patient.getName().getForename() != null ? patient.getName().getForename() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.MIDDLENAME.equals(fieldType))
		{
			cell.setValue(patient.getName() != null ? patient.getName().getMiddleName() : null);
			cell.setIdentifier(patient.getName() != null &&  patient.getName().getMiddleName() != null ? patient.getName().getMiddleName() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.SEX.equals(fieldType))
		{
			cell.setValue(patient.getSex() != null ? patient.getSex().getText() : null);
			cell.setIdentifier(patient.getSex() != null ? patient.getSex() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
			
			// WDEV-21862 - Fields differ, display in bold
			if (fieldsDiffer)
				cell.getRow().setBackColor(Color.Red);
		}
		else if(PDSSynchronisationRelevantDatasetFields.DATE_OF_BIRTH.equals(fieldType))
		{
			cell.setValue(patient.getDob() != null ? patient.getDob().toString(DateFormat.STANDARD) : null);
			cell.setIdentifier(patient.getDob() != null ? patient.getDob() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
			
			// WDEV-21862 - Fields differ, display in bold
			if (fieldsDiffer)
				cell.getRow().setBackColor(Color.Red);
			
		}
		else if(PDSSynchronisationRelevantDatasetFields.DATE_OF_DEATH.equals(fieldType))
		{
			cell.setValue(patient.getDod() != null ? patient.getDod().toString() : null);
			cell.setIdentifier(patient.getDod() != null ? patient.getDod() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
			// WDEV-21862 - Fields differ, display in bold
			if (fieldsDiffer)
				cell.getRow().setBackColor(Color.Red);

		}
		else if(PDSSynchronisationRelevantDatasetFields.LANGUAGE.equals(fieldType))
		{
			cell.setValue(patient.getLanguage() != null ? patient.getLanguage().getText() : null);
			cell.setIdentifier(patient.getLanguage() != null ? patient.getLanguage() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.ADDRESS.equals(fieldType))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().toDisplayString() : null);
			cell.setIdentifier(patient.getAddress());

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.TIME_OF_DEATH.equals(fieldType))
		{
			cell.setValue(patient.getTimeOfDeath() != null ? patient.getTimeOfDeath().toString() : null);
			cell.setIdentifier(patient.getTimeOfDeath() != null ? patient.getTimeOfDeath() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.DEATH_NOTIFICATION_STATUS.equals(fieldType))
		{
			cell.setValue(patient.getPDSDeathNotificationStatus() != null ? patient.getPDSDeathNotificationStatus().getText() : null);
			cell.setIdentifier(patient.getPDSDeathNotificationStatus() != null ? patient.getPDSDeathNotificationStatus() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_CONTACT_METHOD.equals(fieldType))
		{
			cell.setValue(patient.getAlternativeContact() != null && patient.getAlternativeContact().getPdsPreferredContactMethod() != null ? patient.getAlternativeContact().getPdsPreferredContactMethod().getText() : null);
			cell.setIdentifier(patient.getAlternativeContact() != null &&  patient.getAlternativeContact().getPdsPreferredContactMethod() != null ? patient.getAlternativeContact().getPdsPreferredContactMethod() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_CONTACT_TIMES.equals(fieldType))
		{
			cell.setValue(patient.getAlternativeContact() != null ? patient.getAlternativeContact().getPdsPreferredContactTimes() : null);
			cell.setIdentifier(patient.getAlternativeContact() != null && patient.getAlternativeContact().getPdsPreferredContactTimes() != null ? patient.getAlternativeContact().getPdsPreferredContactTimes() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_WRITTEN_COMMUNICATION_FORMAT.equals(fieldType))
		{
			cell.setValue(patient.getAlternativeContact() != null && patient.getAlternativeContact().getPdsPreferredWrittenComm() != null ? patient.getAlternativeContact().getPdsPreferredWrittenComm().getText() : null);
			cell.setIdentifier(patient.getAlternativeContact() != null &&  patient.getAlternativeContact().getPdsPreferredWrittenComm() != null ? patient.getAlternativeContact().getPdsPreferredWrittenComm() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.CONSENT.equals(fieldType))
		{
			cell.setValue(patient.getAlternativeContact() != null && patient.getAlternativeContact().getPdsConsent() != null ? patient.getAlternativeContact().getPdsConsent().getText() : null);
			cell.setIdentifier(patient.getAlternativeContact() != null &&  patient.getAlternativeContact().getPdsConsent() != null ? patient.getAlternativeContact().getPdsConsent() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.CONSENT_DATE_LAST_CHANGED.equals(fieldType))
		{
			cell.setValue(patient.getAlternativeContact() != null && patient.getAlternativeContact().getPdsDateLastChanged() != null ? patient.getAlternativeContact().getPdsDateLastChanged().toString() : null);
			cell.setIdentifier(patient.getAlternativeContact() != null &&  patient.getAlternativeContact().getPdsDateLastChanged() != null ? patient.getAlternativeContact().getPdsDateLastChanged() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.PREFERRED_LANGUAGE.equals(fieldType))
		{
			cell.setValue(patient.getPrefCommLanguage() != null ? patient.getPrefCommLanguage().getText() : null);
			cell.setIdentifier(patient.getPrefCommLanguage() != null ? patient.getPrefCommLanguage() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.INTERPRETER_REQUIRED.equals(fieldType) && fieldsDiffer)
		{
			cell.setValue(patient.getPDSInterpreterRequired() != null ? patient.getPDSInterpreterRequired().toString() : null);
			cell.setIdentifier(patient.getPDSInterpreterRequired() != null ? patient.getPDSInterpreterRequired() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.ADDRESS_TYPE.equals(fieldType))
		{
			cell.setValue((patient.getAddress() != null && patient.getAddress().getAddressType() != null ) ? patient.getAddress().getAddressType().getText() : null);
			cell.setIdentifier(patient.getAddress() != null && patient.getAddress().getAddressType() != null ? patient.getAddress().getAddressType() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.GP.equals(fieldType))
		{
			cell.setValue((patient.getGp() != null && patient.getGp().getName() != null) ? patient.getGp().getName().toString() : null);
			cell.setIdentifier(patient.getGp() != null ? patient.getGp() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.GP_PRACTICE.equals(fieldType))
		{
			cell.setValue(patient.getPractice() != null ? patient.getPractice().getName() : null);
			cell.setIdentifier(patient.getPractice() != null ? patient.getPractice() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.NEXT_OF_KIN.equals(fieldType))
		{
			cell.setValue((patient.getNok() != null && patient.getNok().getName() != null) ? patient.getNok().getName().toString() : null);
			cell.setIdentifier(patient.getNok());

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
		else if(PDSSynchronisationRelevantDatasetFields.MEDICAL_CARD_INFORMATION.equals(fieldType))
		{
			cell.setValue(patient.getNationalHealthCover() != null ? patient.getNationalHealthCover().getMedicalCardNo() : null);
			cell.setIdentifier(patient.getNationalHealthCover() != null ? patient.getNationalHealthCover().getMedicalCardNo() : null);

			if(isPds)
			{
    			cellResult.setValue(cell.getValue());
    			cellResult.setIdentifier(cell.getIdentifier());

    			cellLastValue.setValue(cell.getValue());
    			cellLastValue.setIdentifier(cell.getIdentifier());
			}
		}
	
		if(cell.getValue() instanceof String)
			cell.setTooltip((String) cell.getValue());
	}

	private DynamicGridRow getRowByValue(PDSSynchronisationRelevantDatasetFields fieldType, DynamicGridRowCollection rows)
	{
		DynamicGridRow row = null;
		
		if(rows == null || rows.size() == 0)
			return null;
		
		for(int i = 0; i < rows.size(); i++)
		{
			if(fieldType.equals(rows.get(i).getValue()))
				return rows.get(i);

			if(rows.get(i).getRows().size() > 0)
			{
				row = getRowByValue(fieldType, rows.get(i).getRows());
				
				if(row != null)
					return row;
			}
		}
		
		return null;
	}

	private void addPatientIdentifiers(DynamicGridRow row, Patient pdsPatient, Patient lpiPatient) 
	{
		ArrayList<PatIdType> types = new ArrayList<PatIdType>();
		PatientIdCollection coll;
		int count;
		DynamicGridCell cell;
		
		if(row == null)
			return;
		
		if(pdsPatient.getIdentifiers() != null && pdsPatient.getIdentifiers().size() > 0)
		{
			coll = pdsPatient.getIdentifiers();
			count = coll.size();
			
			for(int i=0; i < count; i++)
			{
				if(!types.contains(coll.get(i).getType()))
					types.add(coll.get(i).getType());
			}
		}

		if(lpiPatient.getIdentifiers() != null && lpiPatient.getIdentifiers().size() > 0)
		{
			coll = lpiPatient.getIdentifiers();
			count = coll.size();
			
			for(int i=0; i < count; i++)
			{
				if(!types.contains(coll.get(i).getType()))
					types.add(coll.get(i).getType());
			}
		}
		
		count = types.size();
		for(int i=0; i < count; i++)
		{
			PatientIdCollection pdsIdentifiers = getIdentifiersByType(types.get(i), pdsPatient.getIdentifiers());
			PatientIdCollection lpiIdentifiers = getIdentifiersByType(types.get(i), lpiPatient.getIdentifiers());
			
			int max = Math.max(pdsIdentifiers.size(), lpiIdentifiers.size());
			
			for(int j=0; j < max; j++)
			{
				DynamicGridRow childRow = row.getRows().newRow();
				setRowCells(PDSSynchronisationRelevantDatasetFields.IDENTIFIERS, childRow);
				
				cell = childRow.getCells().get(getColumn(COL_FIELD_NAME));
				cell.setValue(types.get(i).getText());
				
				if(j < pdsIdentifiers.size())
				{
					cell = childRow.getCells().get(getColumn(COL_PDS_PATIENT_1ST));
					
					if(pdsIdentifiers.get(j) != null)
						cell.setValue(pdsIdentifiers.get(j).getValue());
					
					cell.setIdentifier(pdsIdentifiers.get(j));
					
					cell = childRow.getCells().get(getColumn(COL_RESULT_DATA));
					if(pdsIdentifiers.get(j) != null)
						cell.setValue(pdsIdentifiers.get(j).getValue());
					cell.setIdentifier(pdsIdentifiers.get(j));
				}
				
				if(j < lpiIdentifiers.size())
				{
					cell = childRow.getCells().get(getColumn(COL_LPI_PATIENT_1ST));
					
					if(lpiIdentifiers.get(j) != null)
						cell.setValue(lpiIdentifiers.get(j).getValue());
					
					cell.setIdentifier(lpiIdentifiers.get(j));
				}
				
			}
		}
	}

	private PatientIdCollection getIdentifiersByType(PatIdType patIdType, PatientIdCollection identifiers)
	{
		PatientIdCollection coll = new PatientIdCollection();
		
		if(identifiers == null)
			return coll;
		
		for(int i = 0; i < identifiers.size(); i++)
		{
			if(patIdType.equals(identifiers.get(i).getType()))
				coll.add(identifiers.get(i));
		}
		
		return coll;
	}

	private void addPatientCommChannels(DynamicGridRow row, Patient pdsPatient, Patient lpiPatient) 
	{
		ArrayList<ChannelType> types = new ArrayList<ChannelType>();
		CommChannelVoCollection coll;
		int count;
		DynamicGridCell cell;
		
		if(row == null)
			return;
		
		if(pdsPatient.getCommChannels() != null && pdsPatient.getCommChannels().size() > 0)
		{
			coll = pdsPatient.getCommChannels();
			count = coll.size();
			
			for(int i=0; i < count; i++)
			{
				if(coll.get(i).getChannelType() != null && !types.contains(coll.get(i).getChannelType()))
					types.add(coll.get(i).getChannelType());
			}
		}

		if(lpiPatient.getCommChannels() != null && lpiPatient.getCommChannels().size() > 0)
		{
			coll = lpiPatient.getCommChannels();
			count = coll.size();
			
			for(int i=0; i < count; i++)
			{
				if(!types.contains(coll.get(i).getChannelType()))
					types.add(coll.get(i).getChannelType());
			}
		}
		
		count = types.size();
		for(int i=0; i < count; i++)
		{
			CommChannelVoCollection pdsChannels = getCommChannelsByType(types.get(i), pdsPatient.getCommChannels());
			CommChannelVoCollection lpiChannels = getCommChannelsByType(types.get(i), lpiPatient.getCommChannels());
			
			int max = Math.max(pdsChannels.size(), lpiChannels.size());
			
			for(int j=0; j < max; j++)
			{
				DynamicGridRow childRow = row.getRows().newRow();
				setRowCells(PDSSynchronisationRelevantDatasetFields.COMMUNICATION_CHANNELS, childRow);
				
				cell = childRow.getCells().get(getColumn(COL_FIELD_NAME));
				cell.setValue(types.get(i).getText());
				
				if(j < pdsChannels.size())
				{
					cell = childRow.getCells().get(getColumn(COL_PDS_PATIENT_1ST));
					
					if(pdsChannels.get(j) != null)
						cell.setValue(pdsChannels.get(j).getCommValue());
					cell.setIdentifier(pdsChannels.get(j));
					
					cell = childRow.getCells().get(getColumn(COL_RESULT_DATA));
					if(pdsChannels.get(j) != null)
						cell.setValue(pdsChannels.get(j).getCommValue());
					cell.setIdentifier(pdsChannels.get(j));
				}
				
				if(j < lpiChannels.size())
				{
					cell = childRow.getCells().get(getColumn(COL_LPI_PATIENT_1ST));
					
					if(lpiChannels.get(j) != null)
						cell.setValue(lpiChannels.get(j).getCommValue());
					
					cell.setIdentifier(lpiChannels.get(j));
				}
				
			}
		}
	}

	private CommChannelVoCollection getCommChannelsByType(ChannelType channelType, CommChannelVoCollection commChannels)
	{
		CommChannelVoCollection coll = new CommChannelVoCollection();
		
		if(commChannels == null)
			return coll;
		
		for(int i = 0; i < commChannels.size(); i++)
		{
			if(channelType.equals(commChannels.get(i).getChannelType()))
				coll.add(commChannels.get(i));
		}
		
		return coll;
	}

	@Override
	public Boolean hasAnyDifferences()
	{
		return (form.dynGrdSync().getRows().size() != 0 || form.ccRelativeSynchronization().countRelatives() > 0);
	}

	private PatRelative getRelativeByObjectIdentifier(PatRelativeCollection patRelativeCollection, String objectIdentifier)
	{
		if(objectIdentifier == null)
			return null;
		
		for(int i = 0; i < patRelativeCollection.size(); i++)
		{
			if(objectIdentifier.equals(patRelativeCollection.get(i).getObjectidentifier()))
			{
				return patRelativeCollection.get(i);
			}
		}
		
		return null;
	}
	
}
