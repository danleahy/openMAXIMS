//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.epresdialog;

import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.VSMetrics;
import ims.domain.exceptions.DomainInterfaceException;
import ims.dto.DTODomainImplementation;
import ims.framework.exceptions.ConfigurationException;
import ims.framework.utils.DateFormat;
import ims.framework.utils.TimeFormat;

import org.jinterop.dcom.common.JIException;
import org.jinterop.dcom.common.JISystem;
import org.jinterop.dcom.core.IJIComObject;
import org.jinterop.dcom.core.JIComServer;
import org.jinterop.dcom.core.JIProgId;
import org.jinterop.dcom.core.JISession;
import org.jinterop.dcom.core.JIVariant;
import org.jinterop.dcom.impls.JIObjectFactory;
import org.jinterop.dcom.impls.automation.IJIDispatch;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected ims.dto.DTODomain dtoDomain;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		try {
						
			if (engine.getLoggedInUser() != null)
			{
				dtoDomain = new DTODomainImplementation();
				
				//build data xml
				String xmlData = getXmlData();
				
				if (!ConfigFlag.GEN.RELEASE_MODE.getValue())
				{
					try
					{
						System.out.println(xmlData);
					} catch (Exception e)
					{
						e.printStackTrace();
						System.out.println(e.getMessage());
					}
				}
				
				JISession session = null;
				JIComServer comServer = null;
				
				//WDEV-15766				
				Logger lgr = JISystem.getLogger();
				if (lgr != null)
				{
					//default
					lgr.setLevel(Level.WARNING);
					if (EnvironmentConfig.getEpresLoggingLevel() != null)
						lgr.setLevel(Level.parse(EnvironmentConfig.getEpresLoggingLevel()));
				}
				//WDEV-15766
				
				if (!EnvironmentConfig.getEpresDomainPassword().equals("") &&
						!EnvironmentConfig.getEpresDomain().equals("")&&
						!EnvironmentConfig.getEpresDomainUser().equals(""))
				{
					session = JISession.createSession(EnvironmentConfig.getEpresDomain(),EnvironmentConfig.getEpresDomainUser(),EnvironmentConfig.getEpresDomainPassword());
				}
				else
				{
				// WDEV-16390 	
					engine.showMessage("E-Prescribing authentication environment variables are missing.");
					return;
				}
				if (session == null)
				{
				// WDEV-16390 	
					engine.showMessage("E-Prescribing Session not established. Please check authentication environment variables.");	
					return;
				}
				
				if (!EnvironmentConfig.getEpresServerName().equals("") && !EnvironmentConfig.getEpresProgId().equals(""))
				{
						comServer = new JIComServer(JIProgId.valueOf(EnvironmentConfig.getEpresProgId()),EnvironmentConfig.getEpresServerName(),session);
				}
				else
				{
					engine.showMessage("Eprescribing Servername or ProdramId not specified.");
					return;
				}
				
	//			Instantiate the COM Server
				IJIComObject epresObject = comServer.createInstance();		
				
	//			Get a handle to it's IDispatch
				IJIDispatch dispatch = (IJIDispatch)JIObjectFactory.narrowObject(epresObject.queryInterface(IJIDispatch.IID));
				JIVariant results[] = dispatch.callMethodA("AddIntegrationData",new Object[]{xmlData});
						
				if (results == null)
					System.out.println("null returned.");
				else if(results[0] == null)
					System.out.println("No token received - null returned.");
				else
				{
					String strToken = results[0].getObjectAsString().toString();					
					
					if (strToken.equals("")) 
						System.out.println("No token received.");
					
					String strToken2 = "";
					String strToken3 = "";
					if (!strToken.contains("<BrokenRule"))
					{
						if (strToken.indexOf("Token Id") > 0)
						{
							//<Token Id="8929"
							strToken2 = strToken.substring(strToken.indexOf("Token Id="), strToken.length());
							if (strToken2.length()>0)
							{
								strToken3 = strToken2.substring(strToken2.indexOf("=") + 2,strToken2.length());
								strToken3 = strToken3.substring(0,strToken3.indexOf("\""));
								form.getLocalContext().setstrToken(strToken3);
								//to pass back to calling parent.
								form.getGlobalContext().Core.setsecurityToken(strToken3);								
								
							}
							form.htmBrowser().setIFrameValue(ConfigFlag.UI.EPRES_URL.getValue() + "?token=" + strToken3);
						}
					}				
				}
				
				JISession.destroySession(session);
			}
		} catch (JIException e) {
			engine.showMessage(e.getMessage());
		} catch (ConfigurationException e) {
			engine.showMessage(e.getMessage());
		} catch (UnknownHostException e) {
		engine.showMessage(e.getMessage());
		}			
	}
	
	private String getXmlData() throws  ConfigurationException
	{
		String userId = "";
		StringBuffer strData = new StringBuffer();
		
		//get user id mapping from MOS external PAS code
		if (engine.getLoggedInUser().getMosId() == null)
		{
			throw new ConfigurationException("User is not linked to a Member Of Staff. Please link user in MOS Administration to continue.");	
		}
		try {
			userId = domain.getPASUser(engine.getLoggedInUser().getMosId());
			if (userId.equals(""))
				throw new ConfigurationException("User has no PAS external mapping identifier. Please create a new PAS external code mapping for the linked Member of Staff in MOS Administration to continue.");
		} catch (DomainInterfaceException e) 
		{
			throw new ConfigurationException(e.getMessage());
		}
		
		//Document document = DocumentHelper.createDocument();

		strData.append("<DATA>")
		.append(System.getProperty("line.separator"))
				.append("<USERID>")
				.append("<ID>")
		.append(userId)
		.append("</ID></USERID>")
		.append(System.getProperty("line.separator"));
	    
//	    Element root = document.addElement( "DATA" );
//	    root.addElement( "USERID" );
//	    root.addElement( "ID", userId );
		
		
		if (form.getGlobalContext().Core.getPatientShortIsNotNull()
			&& form.getGlobalContext().Core.getPatientShort().getHospnum() != null)
		{
			strData.append("<PATIENT>")
			.append(form.getGlobalContext().Core.getPatientShortIsNotNull()?form.getGlobalContext().Core.getPatientShort().getPkey().getIdValue():"111")
			.append(System.getProperty("line.separator"))
			.append("<HOSPNUM>")
			.append(form.getGlobalContext().Core.getPatientShort().getHospnum().getIdValue())
			.append("</HOSPNUM>")
			.append("</PATIENT>")
			.append(System.getProperty("line.separator"));
//		    root.addElement( "PATIENT" );
//		    root.addElement("PKEY","");
//		    root.addElement("HOSPNUM", form.getGlobalContext().Core.getPatientShort().getHospnum().getIdValue());				

			//Metrics
			VSMetrics metrics;
			try {
				//vitalSigns = domain.getLastMetrics(form.getGlobalContext().Core.getCurrentCareContext());
				metrics = domain.getLatestMetricsForPatient(form.getGlobalContext().Core.getPatientShort());
			} catch (DomainInterfaceException e) 
			{
				throw new ConfigurationException(e.getMessage());
			}
			
			if (metrics != null)
			{
	//			if (metrics.getMetricsIsNotNull() && metrics.getMetrics() != null)
	//			{
	//					if(vitalSigns.getMetrics().getHeightValueIsNotNull() && vitalSigns.getMetrics().getHeightValue()!= null)
	//					form.decHeight().setValue(vitalSigns.getMetrics().getHeightValue());
					
					if (form.getGlobalContext().Core.getPatientShort().getHospnum()!=null && !form.getGlobalContext().Core.getPatientShort().getHospnum().equals(""))
					{						
						strData.append("<METRICS>");
						//root.addElement("UNID", vitalSigns.getMetrics().getID_Metrics().toString());
						strData.append("<UNID>" + metrics.getID_Metrics().toString() + "</UNID>").append(System.getProperty("line.separator"));
						//root.addElement("PKEY", "");
						strData.append("<PKEY></PKEY>").append(System.getProperty("line.separator"));
							//AddChildElem( "CDAT"), lMetric.DataCollection.get(0).spCdat));
							//AddChildElem( "CTIM"), lMetric.DataCollection.get(0).spCtim));
						//root.addElement("RHCP", vitalSigns.getMetrics().getAuthoringInformationIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringHcpIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringHcp().getDomainId().toString():"":"");					
						strData.append("<RHCP>" + (metrics.getAuthoringInformationIsNotNull()?metrics.getAuthoringInformation().getAuthoringHcpIsNotNull()?metrics.getAuthoringInformation().getAuthoringHcp().getDomainId().toString():"":"") + "</RHCP>").append(System.getProperty("line.separator"));					
						//root.addElement("RHCPTXT", vitalSigns.getMetrics().getAuthoringInformationIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringHcpIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringHcp().getIHcpName():"":"");
						strData.append("<RHCPTXT>" + (metrics.getAuthoringInformationIsNotNull()?metrics.getAuthoringInformation().getAuthoringHcpIsNotNull()?metrics.getAuthoringInformation().getAuthoringHcp().getIHcpName():"":"") + "</RHCPTXT>").append(System.getProperty("line.separator"));
						//root.addElement("RUSR", vitalSigns.getMetrics().getAuthoringInformationIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringHcpIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringHcp().getDomainId().toString():"":"");
						strData.append("<RUSR>" + (metrics.getAuthoringInformationIsNotNull()?metrics.getAuthoringInformation().getAuthoringHcpIsNotNull()?metrics.getAuthoringInformation().getAuthoringHcp().getDomainId().toString():"":"") + "</RUSR>").append(System.getProperty("line.separator"));
							//AddChildElem( "RUSRTXT"), lMetric.DataCollection.get(0).spRusrtxt));
						//root.addElement("RDAT", vitalSigns.getMetrics().getAuthoringInformationIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringDateTimeIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringDateTime().getDate().toString():"":"");
						strData.append("<RDAT>" + (metrics.getAuthoringInformationIsNotNull()?metrics.getAuthoringInformation().getAuthoringDateTimeIsNotNull()?metrics.getAuthoringInformation().getAuthoringDateTime().getDate().toString(DateFormat.ISO):"":"") + "</RDAT>").append(System.getProperty("line.separator"));
						//Time tm = new Time(lMetric.DataCollection.get(0).Rtim.toString());
						//root.addElement("RTIM", vitalSigns.getMetrics().getAuthoringInformationIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringDateTimeIsNotNull()?vitalSigns.getMetrics().getAuthoringInformation().getAuthoringDateTime().getTime().toString():"":"");
						strData.append("<RTIM>" + (metrics.getAuthoringInformationIsNotNull()?metrics.getAuthoringInformation().getAuthoringDateTimeIsNotNull()?metrics.getAuthoringInformation().getAuthoringDateTime().getTime().toString(TimeFormat.FLAT6):"":"") + "</RTIM>").append(System.getProperty("line.separator"));
						//root.addElement("UDAT", "");
						strData.append("<UDAT></UDAT>").append(System.getProperty("line.separator"));
							
	//							if (!lMetric.DataCollection.get(0).Utim.equals(""))
	//							{
	//								Time tm2 = new Time(lMetric.DataCollection.get(0).Utim.toString());
	//								strMetric.append(AddChildElem( "UTIM", tm2.toString(TimeFormat.FLAT6)));
	//							}
						//root.addElement("UTIM", "");
						strData.append("<UTIM></UTIM>").append(System.getProperty("line.separator"));
						//root.addElement("UHCP", "");
						strData.append("<UHCP></UHCP>").append(System.getProperty("line.separator"));
						//root.addElement("UHCPTXT", "");
						strData.append("<UHCPTXT></UHCPTXT>").append(System.getProperty("line.separator"));
						//root.addElement("UUSR", "");
						strData.append("<UUSR></UUSR>").append(System.getProperty("line.separator"));
						//root.addElement("UUSRTXT", "");
						strData.append("<UUSRTXT></UUSRTXT>").append(System.getProperty("line.separator"));
						//root.addElement("MODU", "");
						strData.append("<MODU></MODU>").append(System.getProperty("line.separator"));
						//root.addElement("MODUTXT", "");
						strData.append("<MODUTXT></MODUTXT>").append(System.getProperty("line.separator"));
						//root.addElement("CCSEPID", vitalSigns.getCareContext().getID_CareContextIsNotNull()?vitalSigns.getCareContext().getID_CareContext().toString():"");
						
						//TODO the new episodeid will have the old epid after mifration. Needs to be discussed if this field is really need to be sent across the interface.
						//TODO leaving this data blank as it breaks the interface if the id is incorrect
	//					strData.append("<CCSEPID>" + (vitalSigns.getCareContext().getID_CareContextIsNotNull()?vitalSigns.getCareContext().getID_CareContext().toString():"") + "</CCSEPID>").append(System.getProperty("line.separator"));
						strData.append("<CCSEPID>" + "</CCSEPID>").append(System.getProperty("line.separator"));
						
						//root.addElement("TSTP", "0");
						strData.append("<TSTP>0</TSTP>").append(System.getProperty("line.separator"));
						//root.addElement("WGHT", vitalSigns.getMetrics().getWeightValueIsNotNull()?vitalSigns.getMetrics().getWeightValue().toString():"");
						strData.append("<WGHT>" + (metrics.getWeightValueIsNotNull()?metrics.getWeightValue().toString():"") + "</WGHT>").append(System.getProperty("line.separator"));
						//root.addElement("WGHTG", "");
						strData.append("<WGHTG></WGHTG>").append(System.getProperty("line.separator"));
						//root.addElement("WGTU", ""); // weight unit
						strData.append("<WGTU></WGTU>").append(System.getProperty("line.separator"));
						
						if (metrics.getWeightEstimatedMeasured()) //True : measured
							//root.addElement("MWGT", "Y");
							strData.append("<MWGT>Y</MWGT>").append(System.getProperty("line.separator"));
						else
							//root.addElement("MWGT", "N");
							strData.append("<MWGT>N</MWGT>").append(System.getProperty("line.separator"));
						
							//AddChildElem( "WGTUTXT"), lMetric.DataCollection.get(0).spWgtutxt));
						//root.addElement("HGT", vitalSigns.getMetrics().getHeightValueIsNotNull()?vitalSigns.getMetrics().getHeightValue().toString():"");
						strData.append("<HGT>" + (metrics.getHeightValueIsNotNull()?metrics.getHeightValue().toString():"") + "</HGT>").append(System.getProperty("line.separator"));
						//root.addElement("HGTU", "");
						strData.append("<HGTU></HGTU>").append(System.getProperty("line.separator"));
						
						if (metrics.getHeightEstimatedMeasured()) //True : measured
							//root.addElement("MHGT", "Y");
							strData.append("<MHGT>Y</MHGT>").append(System.getProperty("line.separator"));
						else
							//root.addElement("MHGT", "N");
							strData.append("<MHGT>N</MHGT>").append(System.getProperty("line.separator"));
	
							//AddChildElem( "HGTUTXT"), lMetric.DataCollection.get(0).spHgtutxt));
						
						//root.addElement("SARE", "");
						strData.append("<SARE></SARE>").append(System.getProperty("line.separator"));
						//root.addElement("WAIST_HIP", "");
						strData.append("<WAIST_HIP></WAIST_HIP>").append(System.getProperty("line.separator"));
						//root.addElement("BMI", vitalSigns.getMetrics().getBMIIsNotNull()? vitalSigns.getMetrics().getBMI().toString():"");
						strData.append("<BMI>" + (metrics.getBMIIsNotNull()? metrics.getBMI().toString():"") + "</BMI>").append(System.getProperty("line.separator"));
						//root.addElement("NTES", "");
						strData.append("<NTES></NTES>").append(System.getProperty("line.separator"));
						strData.append("</METRICS>").append(System.getProperty("line.separator"));
		
						//get episode start date if CCSEPID exists
						//TODO the new episodeid will have the old epid after mifration. Needs to be discussed if this field is really need to be sent across the interface.
						
						CareContextShortVo ccvo = form.getGlobalContext().Core.getCurrentCareContext();
						if (ccvo!=null && ccvo.getStartDateTimeIsNotNull())
						{
							strData.append("<EPISODE>").append(System.getProperty("line.separator"));
							strData.append("<EPISODE_START_DATE>" + (ccvo.getStartDateTimeIsNotNull()?ccvo.getStartDateTime().getDate().toString(DateFormat.ISO):"") + "</EPISODE_START_DATE>").append(System.getProperty("line.separator"));
							strData.append("<CCSEPID>" + (ccvo.getID_CareContextIsNotNull()?ccvo.getID_CareContext().toString():"") + "</CCSEPID>").append(System.getProperty("line.separator"));
							strData.append("</EPISODE>").append(System.getProperty("line.separator"));
						}						
						
						
						
	//					CareContextShortVo ccvo = domain.getCareContextMin(metrics.getCareContext());						
	//					if (ccvo!=null && ccvo.getStartDateTimeIsNotNull())
	//					{
	//						//m_csCheckZone = "EPISODE";
	//						//root.addElement("EPISODE");
	//						strData.append("<EPISODE>").append(System.getProperty("line.separator"));
	//						//root.addElement("EPISODE_START_DATE", ccvo.getStartDateTimeIsNotNull()?ccvo.getStartDateTime().getDate().toString():"");
	//						strData.append("<EPISODE_START_DATE>" + (ccvo.getStartDateTimeIsNotNull()?ccvo.getStartDateTime().getDate().toString(DateFormat.ISO):"") + "</EPISODE_START_DATE>").append(System.getProperty("line.separator"));
	//						//root.addElement("CCSEPID", vitalSigns.getCareContext().getID_CareContextIsNotNull()?vitalSigns.getCareContext().getID_CareContext().toString():"");
	//						strData.append("<CCSEPID>" + (metrics.getCareContext().getID_CareContextIsNotNull()?metrics.getCareContext().getID_CareContext().toString():"") + "</CCSEPID>").append(System.getProperty("line.separator"));
	//						strData.append("</EPISODE>").append(System.getProperty("line.separator"));
	//					}						
					}
				
	//			}
			}
		}
		
		//root.addElement("SCREEN").addElement("TITLE", "Prescribing").addElement("RW", "R");
		strData.append("<SCREEN>").append("<TITLE>Prescribing</TITLE>").append("<RW>R</RW>");
		strData.append("</SCREEN>");
		//root.addElement("TERMINAL").addAttribute("NAME", "INTEGRATION");
		strData.append("<TERMINAL>").append("<NAME>INTEGRATION</NAME>");
		strData.append("</TERMINAL>");
		strData.append("</DATA>");
		
		
		//strData.append("<SCREEN><TITLE>Prescribing</TITLE><RW>R</RW></SCREEN><TERMINAL><NAME>INTEGRATION</NAME></TERMINAL></DATA>");
				
		//return root.asXML();
		
		return strData.toString();
		
	}	 
}
