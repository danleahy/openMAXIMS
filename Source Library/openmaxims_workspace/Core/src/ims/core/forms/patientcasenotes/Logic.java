//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientcasenotes;

import ims.admin.vo.MenuActionVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CaseNoteRequestsColumnWidthVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteRequestVo;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.enums.CaseNoteFolderCcEvent;
import ims.core.vo.enums.CaseNoteOpenRequestComponentAction;
import ims.core.vo.enums.PatientCaseNoteFolderActions;
import ims.core.vo.enums.PatientCaseNoteFolderProcessAction;
import ims.core.vo.lookups.CaseNoteCommentType;
import ims.core.vo.lookups.CaseNoteRequestCancellationReason;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CaseNoteStatusCollection;
import ims.core.vo.lookups.CaseNoteType;
import ims.core.vo.lookups.FolderCaseNote;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String DUMMY_TRACKING_ID = "-1";
	
	private static final int NEW_PERMANENT = 5770001;
	
	private static final int NEW_TEMPORARY = 5770010;
	private static final int CHANGE_FROM_TEMPORARY_TOPERMANENT = 5770011;
	private static final int MARK_AS_FOUND = 5770012;
	private static final int MARK_AS_MISSING = 5770013;
	private static final int REQUIRES_MERGING = 5770014;
	
	private static final int EDIT_FOLDER = 5770002;
	private static final int ARCHIVE_FOLDER = 5770005;
	private static final int SCAN_FOLDER = 5770003;
	private static final int DESTROY_FOLDER = 5770004;
	private static final int TRANSFER_FOLDER = 5770009;
	private static final int PRINT_FOLDER = 5770006;
	private static final int ADD_COMMENT_FOLDER = 5770008;
	private static final int NEW_REQUEST = 5760001;
	private static final int EDIT_REQUEST = 5760002;
	private static final int CANCEL_REQUEST = 5760003;
	private static final int COMPLETE_REQUEST = 5760004;
	private static final int MERGE_FOLDER = 5770007;
	private static final int CREATE_CASE_NOTE_FOLDER = 5770015; 
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open() 
	{
		CaseNoteStatusCollection statuses = new CaseNoteStatusCollection();
		
		if(form.chkCurrentOnly().getValue())
		{
			statuses = getCurrentOnlyStatuses();
		}
		
		if(statuses.size() == 0)
			statuses = null;
		
		form.ccCaseNoteFolder().setValue(form.getGlobalContext().Core.getPatientShort(), null, statuses);
		form.ccCaseNoteFolder().setSelection(form.getLocalContext().getSelectedCaseNoteFolder());
		form.getLocalContext().setSelectedCaseNoteFolder(domain.getCaseNoteFolder(form.ccCaseNoteFolder().getValue()));
		populateCaseNoteVolumeDetails(form.getLocalContext().getSelectedCaseNoteFolder());
		
		form.getLocalContext().setCaseNoteFolderMode(FormMode.VIEW);
		form.getLocalContext().setCaseNoteRequestMode(FormMode.VIEW);
		
		form.ccCaseNoteRequest().setValue(form.getGlobalContext().Core.getPatientShort());
		form.getLocalContext().setSelectedCaseNoteRequest(domain.getCaseNoteRequests(form.getGlobalContext().Core.getCaseNoteRequestRef()));
		form.ccCaseNoteRequest().setSelection(form.getLocalContext().getSelectedCaseNoteRequest());
		
		populateCaseNoteRequestDetails(form.getLocalContext().getSelectedCaseNoteRequest());
		
		form.getLocalContext().setSelectedAction(null);//WDEV-19662
		
		form.setMode(FormMode.VIEW);
	}

	private CaseNoteStatusCollection getCurrentOnlyStatuses()
	{
		CaseNoteStatusCollection coll = LookupHelper.getCaseNoteStatus(domain.getLookupService());
		if(coll == null)
			return null;
		
		CaseNoteStatusCollection statuses = new CaseNoteStatusCollection();
		
		for(int i=0; i<coll.size(); i++)
		{
			if(coll.get(i) == null || CaseNoteStatus.SCANNED.equals(coll.get(i)) || CaseNoteStatus.DESTROYED.equals(coll.get(i)) || CaseNoteStatus.MERGED.equals(coll.get(i)))
				continue;
			
			statuses.add(coll.get(i));
		}
		
		return statuses;
	}

	private void populateCaseNoteVolumeDetails(PatientCaseNoteVo caseNote) 
	{
		clearCaseNoteVolume();
		
		if(caseNote == null)
			return;
		
		form.cmbVolType().setValue(caseNote.getType());
		form.cmbFolder().setValue(caseNote.getFolder());
		
		if(caseNote.getCurrentLocation() != null)
		{
			form.qmbVolCurrentLocation().newRow(caseNote.getCurrentLocation(), caseNote.getCurrentLocation().getName());
		}
		form.qmbVolCurrentLocation().setValue(caseNote.getCurrentLocation());
		
		form.cmbVolStatus().setValue(caseNote.getStatus());
		form.txtTRackingId().setValue(caseNote.getTrackingID());
		form.txtVolComments().setValue(caseNote.getCurrentComment() != null ? caseNote.getCurrentComment().getComment() : null);
	}

	private void clearCaseNoteVolume() 
	{
		form.cmbVolType().setValue(null);
		form.cmbFolder().setValue(null);
		form.qmbVolCurrentLocation().setValue(null);
		form.cmbVolStatus().setValue(null);
		form.txtTRackingId().setValue(null);
		form.txtVolComments().setValue(null);
	}

	private void initialise() 
	{
		Object mosUser = domain.getMosUser();
		if(mosUser instanceof MemberOfStaffLiteVo)
		{
			form.getLocalContext().setCurrentMOS((MemberOfStaffLiteVo) mosUser);
		}
	
			ILocation currentLocation = engine.getCurrentLocation();
			if(currentLocation instanceof LocationLiteVo)
			{
				if(Boolean.TRUE.equals(((LocationLiteVo) currentLocation).getCaseNoteFolderLocation()))
				{
					form.getLocalContext().setCurrentLocation((LocationLiteVo) currentLocation);
				}
			}
		
		
		form.getLocalContext().setDeniedActions(listDeniedActionForCurrentUser());
		
		form.chkCurrentOnly().setValue(true);
		form.ccCaseNoteFolder().initialise(false, true);
		
		form.getLocalContext().setCaseNoteFolderMode(FormMode.VIEW);
		form.getLocalContext().setCaseNoteRequestMode(FormMode.VIEW);
		
		setButtonsImages();
		
		initiliseCaseNoteRequestComponent();
	}

	private void initiliseCaseNoteRequestComponent() 
	{
		CaseNoteRequestsColumnWidthVo ccRequestColumnsWidth = new CaseNoteRequestsColumnWidthVo();
		ccRequestColumnsWidth.setColumnTypeWidth(60);
		ccRequestColumnsWidth.setColumnRequestDateWidth(95);
		ccRequestColumnsWidth.setColumnRequestLocationWidth(110);
		ccRequestColumnsWidth.setColumnRequestByWidth(-1);
		
		form.ccCaseNoteRequest().initialize(false, true, true, ccRequestColumnsWidth);
	}

	private void setButtonsImages() 
	{
		form.btnVolumeNewPermanent().setImage(form.getImages().Core.New_Folder24);
		form.btnCreateCaseNoteFolder().setImage(form.getImages().Core.New_Folder24);
		form.btnVolumeNewTemporary().setImage(form.getImages().Core.New_Temporary24);
		form.btnMarkAsMissing().setImage(form.getImages().Core.Folder_Missing24);
		form.btnMarkAsFound().setImage(form.getImages().Core.Folder_Found24);
		form.btnRequiresMerging().setImage(form.getImages().Core.Requires_Merging24);
		
		form.btnVolumeEdit().setImage(form.getImages().Core.Edit_Folder24);
		form.btnVolumeSave().setImage(form.getImages().Admin.SaveEnabled24);
		form.btnVolumeCancel().setImage(form.getImages().Emergency.CORECTNOTE16);
		form.btnVolumeMerge().setImage(form.getImages().Core.Merge24);
		form.btnVolumeArchive().setImage(form.getImages().Core.Archive_24);
		form.btnVolumeDestroy().setImage(form.getImages().Core.Destroy24);
		form.btnScanVolume().setImage(form.getImages().Core.scanner24x24);
		form.btnTransfer().setImage(form.getImages().Core.transfer_up_down22x22);
		form.btnViewTransfers().setImage(form.getImages().Core.data_transfer22x22);
		form.btnViewComments().setImage(form.getImages().Core.Comments24x24);
		form.btnViewAllRequests().setImage(form.getImages().Core.Requests24);
		
		form.btnNewRequest().setImage(form.getImages().Core.New_Request24);
		form.btnEditRequest().setImage(form.getImages().Core.Edit_Request24);
		form.btnCancelRequest().setImage(form.getImages().Core.Cancel_Request24);
		form.btnCompleteRequest().setImage(form.getImages().Core.Complete_Request24);
		
		form.btnAddComment().setImage(form.getImages().Core.Comment24x24); //WDEV-19690
	}

	private List<PatientCaseNoteFolderActions> listDeniedActionForCurrentUser() 
	{
		List<PatientCaseNoteFolderActions> deniedActions = new ArrayList<PatientCaseNoteFolderActions>();
		
		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if(currentForm == null)
			return null;
		
		IAppRole role = engine.getLoggedInRole();
		
		if(role == null)
			return null;
		
		for(MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if(menuAction == null)
				continue;
			
			if(!role.hasMenuActionRight(currentForm, menuAction))
			{
				PatientCaseNoteFolderActions mappedAction = getMappedAction(menuAction);
				
				if(mappedAction != null)
				{
					deniedActions.add(mappedAction);
				}
			}
		}
		
		return deniedActions;
	}

	private PatientCaseNoteFolderActions getMappedAction(MenuActionVo menuAction) 
	{
		if(menuAction == null || menuAction.getID_MenuAction() == null)
			return null;
		
		if(NEW_PERMANENT == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.NEW_PERMANENT;
		else if(NEW_TEMPORARY == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.NEW_TEMPORARY;
		else if(CHANGE_FROM_TEMPORARY_TOPERMANENT == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.CHANGE_FROM_TEMPORARY_TO_PERMANENT;
		else if(REQUIRES_MERGING == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.REQUIRES_MERGING;
		else if(MARK_AS_FOUND == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.MARKED_AS_FOUND;
		else if(MARK_AS_MISSING == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.MARK_AS_MISSING;
		else if(EDIT_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.EDIT_FOLDER;
		else if(ARCHIVE_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.ARCHIVE_FOLDER;
		else if(SCAN_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.SCAN_FOLDER;
		else if(DESTROY_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.DESTROY_FOLDER;
		else if(TRANSFER_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.TRANSFER_FOLDER;
		else if(ADD_COMMENT_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.ADD_FOLDER_COMMENT;
		else if(MERGE_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.MERGE;
		else if(NEW_REQUEST == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.NEW_REQUEST;
		else if(EDIT_REQUEST == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.EDIT_REQUEST;
		else if(CANCEL_REQUEST == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.CANCEL_REQUEST;
		else if(COMPLETE_REQUEST == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.COMPLETED_TRANSFER;
		else if(PRINT_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.PRINT_FOLDER;
		else if(CREATE_CASE_NOTE_FOLDER == menuAction.getID_MenuAction())
			return PatientCaseNoteFolderActions.CREATECASENOTEFOLDER;
		
		return null;
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnTransferClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		form.getGlobalContext().Core.setCaseNoteRequestRef(null);
		engine.open(form.getForms().Core.CaseNoteTransfer);
	}
	
	@Override
	protected void onBtnVolumeDestroyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		destroyVolume();
	}

	private void destroyVolume() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		engine.open(form.getForms().Core.CaseNoteArchiveOrDestroy, new Object[]{PatientCaseNoteFolderProcessAction.DESTROY});
	}
	
	@Override
	protected void onBtnVolumeArchiveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		archiveVolume();
	}

	private void archiveVolume() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		engine.open(form.getForms().Core.CaseNoteArchiveOrDestroy, new Object[]{PatientCaseNoteFolderProcessAction.ARCHIVE});
	}
	
	@Override
	protected void onBtnVolumeMergeClick() throws ims.framework.exceptions.PresentationLogicException
	{
		merge();
	}

	private void merge() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		engine.open(form.getForms().Core.CaseNoteMerge);
	}
	
	@Override
	protected void onBtnViewTransfersClick() throws ims.framework.exceptions.PresentationLogicException
	{
		transferVolume();
	}

	private void transferVolume() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		engine.open(form.getForms().Core.CaseNoteTransferHistory);
	}
	
	@Override
	protected void onBtnNewRequestClick() throws PresentationLogicException 
	{
		newRequest();
	}

	private void newRequest() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		form.getGlobalContext().Core.setCaseNoteRequestRef(null);
		form.ccCaseNoteRequest().setSelection(null);
		form.getLocalContext().setSelectedCaseNoteRequest(null);
		engine.open(form.getForms().Core.CaseNoteRequest, new Object[] {form.getLocalContext().getDeniedActions()});
	}
	
	@Override
	protected void onBtnEditRequestClick() throws PresentationLogicException 
	{
		updateRequest();
	}

	private void updateRequest() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		form.getGlobalContext().Core.setCaseNoteRequestRef(form.ccCaseNoteRequest().getSelectedRowValue());
		engine.open(form.getForms().Core.CaseNoteRequest, new Object[] {form.getLocalContext().getDeniedActions()});
	}
	
	@Override
	protected void onBtnSaveReqClick() throws PresentationLogicException 
	{
		if(saveRequest())
			open();
	}
	
	private boolean saveRequest() 
	{
		PatientCaseNoteRequestVo record = populateRequestDataFromScreen(form.getLocalContext().getSelectedCaseNoteRequest());
		
		String[] errors = record.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedCaseNoteRequest(domain.saveCaseNoteRequest(record));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private String[] validateUIRules() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dtimReq().getValue() != null &&  form.dtimReq().getValue().isLessThan(new DateTime()))
		{
			return new String[] {"Required By Date cannot be set in the past."};
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private PatientCaseNoteRequestVo populateRequestDataFromScreen(PatientCaseNoteRequestVo patientCaseNoteRequestVo) 
	{
		if(patientCaseNoteRequestVo == null)
			patientCaseNoteRequestVo = new PatientCaseNoteRequestVo();
		
		patientCaseNoteRequestVo.setCreationDate(new DateTime());
		patientCaseNoteRequestVo.setRequestStatus(CaseNoteRequestStatus.OPEN);
		patientCaseNoteRequestVo.setRequiredByDate(form.dtimReq().getValue());
		patientCaseNoteRequestVo.setRequestedForLocation(form.qmbReqLoc().getValue());
		patientCaseNoteRequestVo.setReasonForRequest(form.cmbReasonReq().getValue());
		
		if(patientCaseNoteRequestVo.getID_PatientCaseNoteRequest() == null)
		{
			patientCaseNoteRequestVo.setPatient(new PatientLite_IdentifiersVo(form.getGlobalContext().Core.getPatientShort().getID_Patient(), form.getGlobalContext().Core.getPatientShort().getVersion_Patient()));
			patientCaseNoteRequestVo.setCaseNote(form.getLocalContext().getSelectedCaseNoteFolder());
		}
		
		patientCaseNoteRequestVo.setRequestedBy((MemberOfStaffLiteVo) form.ccRequestedBy().getValue());
		
		return null;
	}

	private void updateControlsState() 
	{
		boolean active = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.ACTIVE.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean missing = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.MISSING.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean found = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.MARKED_AS_FOUND.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean requiresMerging = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.REQUIRES_MERGING.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean requiresCaseNote = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.REQUIRES_CASE_NOTES.equals(form.ccCaseNoteFolder().getValue().getStatus());
		
		boolean scan = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.SCANNED.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean destroy = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.DESTROYED.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean merged = form.ccCaseNoteFolder().getValue() != null && CaseNoteStatus.MERGED.equals(form.ccCaseNoteFolder().getValue().getStatus());
		boolean hasCancelRequestRoleRight = engine.hasRight(AppRight.CAN_CANCEL_ANY_CASENOTE_REQUEST); //WDEV-22748
		
		form.getLocalContext().setIsACaseNoteFolderCreated(domain.checkIfThereIsACaseNoteFolderCreated(form.getGlobalContext().Core.getPatientShort(), null , null, null));
		
		form.ccCaseNoteFolder().setMode(form.getLocalContext().getCaseNoteFolderMode());
		
		form.cmbFolder().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()) && !Boolean.TRUE.equals(form.getLocalContext().getIsAddCommentMode()) && form.cmbFolder().getValue() == null);
		form.qmbVolCurrentLocation().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()) && !Boolean.TRUE.equals(form.getLocalContext().getIsAddCommentMode()));
		form.cmbVolStatus().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()) && !Boolean.TRUE.equals(form.getLocalContext().getIsAddCommentMode()) && !PatientCaseNoteFolderActions.NEW_PERMANENT.equals(form.getLocalContext().getSelectedAction()) ); //WDEV-19662
		
		form.txtVolComments().setEnabled(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()));
		
		form.chkCurrentOnly().setEnabled(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()));
		form.btnVolumeNewPermanent().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.NEW_PERMANENT));
		form.btnVolumeNewTemporary().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.NEW_TEMPORARY) && Boolean.TRUE.equals(form.getLocalContext().getIsACaseNoteFolderCreated()) && missing);
		form.btnCreateCaseNoteFolder().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.CREATECASENOTEFOLDER) && requiresCaseNote);
		form.btnMarkAsMissing().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.MARK_AS_MISSING) && (active || found || requiresMerging));
		form.btnMarkAsFound().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.MARKED_AS_FOUND) && missing);
		form.btnRequiresMerging().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.REQUIRES_MERGING) && (active || found || missing));
		form.btnVolumeEdit().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && form.ccCaseNoteFolder().getValue() != null && !isDeniedAction(PatientCaseNoteFolderActions.CHANGE_FROM_TEMPORARY_TO_PERMANENT) && CaseNoteType.TEMPORARY.equals(form.ccCaseNoteFolder().getValue().getType()) && domain.checkIfThereIsACaseNoteFolderCreated(form.getGlobalContext().Core.getPatientShort(), CaseNoteStatus.MISSING, form.ccCaseNoteFolder().getValue().getFolder(), form.ccCaseNoteFolder().getValue()));
		form.btnVolumeSave().setVisible(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()));
		form.btnVolumeCancel().setVisible(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()));
		
		form.btnViewTransfers().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && form.ccCaseNoteFolder().getValue() != null);
		form.btnViewAllRequests().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && form.ccCaseNoteFolder().getValue() != null);
		form.btnViewComments().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && form.ccCaseNoteFolder().getValue() != null);
		form.btnAddComment().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && form.ccCaseNoteFolder().getValue() != null && !isDeniedAction(PatientCaseNoteFolderActions.ADD_FOLDER_COMMENT)); //WDEV-19690
		
		form.btnVolumeMerge().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.MERGE) && (found || requiresMerging || (active && CaseNoteType.TEMPORARY.equals(form.ccCaseNoteFolder().getValue().getType()))));// && domain.checkIfThereIsACaseNoteFolderCreated(form.getGlobalContext().Core.getPatientShort(), CaseNoteStatus.ACTIVE , null, form.ccCaseNoteFolder().getValue()));
		form.btnVolumeDestroy().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.DESTROY_FOLDER) && form.ccCaseNoteFolder().getValue() != null && !destroy && !merged && !requiresCaseNote && !scan && !missing);
		form.btnScanVolume().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.SCAN_FOLDER) && active);
		form.btnTransfer().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.TRANSFER_FOLDER) && (active || requiresMerging || found));
		form.btnVolumeArchive().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.ARCHIVE_FOLDER) && active);
		
		form.ccCaseNoteRequest().disableOpenRequestGrid(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteFolderMode()));
		form.ccCaseNoteRequest().refreshContextMenu(active || missing || found || requiresMerging);
		
		//WDEV-23012
//		form.btnNewRequest().setVisible((active || missing || found || requiresMerging || requiresCaseNote) && FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && !isDeniedAction(PatientCaseNoteFolderActions.NEW_REQUEST));
		form.btnNewRequest().setVisible((active || found || requiresMerging || requiresCaseNote) 
				&& FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) 
				&& !isDeniedAction(PatientCaseNoteFolderActions.NEW_REQUEST)
				&& !missing); //WDEV-23012
		
		form.btnEditRequest().setVisible(form.ccCaseNoteRequest().getSelectedRowValue() != null && !isDeniedAction(PatientCaseNoteFolderActions.EDIT_REQUEST) && FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()));
		form.btnCancelRequest().setVisible(form.ccCaseNoteRequest().getSelectedRowValue() != null && !isDeniedAction(PatientCaseNoteFolderActions.CANCEL_REQUEST) && (isSelectedRequestCreatedByLoggedInUser() || hasCancelRequestRoleRight) && FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode())); //WDEV-22748
		form.btnSaveReq().setVisible(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteRequestMode()));
		form.btnCancelReq().setVisible(FormMode.EDIT.equals(form.getLocalContext().getCaseNoteRequestMode()));
		
		form.btnCompleteRequest().setVisible(FormMode.VIEW.equals(form.getLocalContext().getCaseNoteFolderMode()) && form.ccCaseNoteRequest().getSelectedRowValue() != null && !isDeniedAction(PatientCaseNoteFolderActions.COMPLETED_TRANSFER));
	}

	private boolean isSelectedRequestCreatedByLoggedInUser() 
	{
		PatientCaseNoteRequestShortVo request = form.ccCaseNoteRequest().getSelectedRowValue();
		
		if(request == null)
			return false;
		
		return request.getRequestedBy() != null && request.getRequestedBy().equals(form.getLocalContext().getCurrentMOS());
	}

	@Override
	protected void onBtnVolumeCancelClick() throws PresentationLogicException 
	{
		form.getLocalContext().setIsAddCommentMode(null);
		
		open();
	}
	
	@Override
	protected void onBtnVolumeSaveClick() throws PresentationLogicException 
	{
		if(saveVolume(null, null, false))
			open();
	}
	
	private boolean saveVolume(CaseNoteType type, CaseNoteStatus status, boolean openPrintDialog) 
	{
		PatientCaseNoteVo record = populateVolumeDataFromScreen(form.getLocalContext().getSelectedCaseNoteFolder(), type, status);
		
		boolean isNewRecord = record.getID_PatientCaseNote() == null;
		
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedCaseNoteFolder(domain.saveCaseNoteFolder(record));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		form.getLocalContext().setIsAddCommentMode(null);
		
		if(isNewRecord || openPrintDialog)
			engine.open(form.getForms().Core.PrintReport);
		
		return true;
	}

	private PatientCaseNoteVo populateVolumeDataFromScreen(PatientCaseNoteVo selectedCaseNoteFolder, CaseNoteType type, CaseNoteStatus status) 
	{
		if(selectedCaseNoteFolder == null)
			selectedCaseNoteFolder = new PatientCaseNoteVo();
		
		if(!Boolean.TRUE.equals(form.getLocalContext().getIsAddCommentMode()))
		{	
			if(type != null)
			{
				selectedCaseNoteFolder.setType(type);
			}
			else if(FormMode.EDIT.equals(form.getMode()))
			{
				selectedCaseNoteFolder.setType(form.cmbVolType().getValue());
			}
			
			if(status != null)
			{
				selectedCaseNoteFolder.setStatus(status);
			}
			else if(FormMode.EDIT.equals(form.getMode()))
			{
				selectedCaseNoteFolder.setStatus(form.cmbVolStatus().getValue());
			}
			
			if(selectedCaseNoteFolder.getID_PatientCaseNote() == null)
			{
				selectedCaseNoteFolder.setPatient(form.getGlobalContext().Core.getPatientShort());
				selectedCaseNoteFolder.setFolder(form.cmbFolder().getValue());
				selectedCaseNoteFolder.setCurrentLocation(form.qmbVolCurrentLocation().getValue());
				selectedCaseNoteFolder.setTrackingID(DUMMY_TRACKING_ID);
				selectedCaseNoteFolder.setCreatedBy(form.getLocalContext().getCurrentMOS());
				selectedCaseNoteFolder.setCreationDate(new DateTime());
				selectedCaseNoteFolder.setLastTransferDate(new DateTime());
			}
		}
		
		if(form.txtVolComments().getValue() != null)
		{
			PatientCaseNoteCommentSaveVo comment = selectedCaseNoteFolder.getCurrentComment();
			
			if(comment == null || Boolean.TRUE.equals(form.getLocalContext().getIsAddCommentMode()))
				comment = new PatientCaseNoteCommentSaveVo();
			
			comment.setAuthoredBy(form.getLocalContext().getCurrentMOS());
			comment.setAuthoredDate(new DateTime());
			comment.setCaseNote(selectedCaseNoteFolder);
			comment.setComment(form.txtVolComments().getValue());
			comment.setPatient(form.getGlobalContext().Core.getPatientShort());
			comment.setCaseNoteFolderLocation(form.qmbVolCurrentLocation().getValue());
			comment.setNoteType(CaseNoteCommentType.CASENOTE);
			
			selectedCaseNoteFolder.setCurrentComment(comment);
		}
		
		return selectedCaseNoteFolder;
	}

	@Override
	protected void onBtnVolumeEditClick() throws PresentationLogicException 
	{
		changeFromTemporaryToPermanent();
	}

	@Override
	protected void onBtnVolumeNewClick() throws PresentationLogicException 
	{
		newVolumeInstance(CaseNoteType.PERMANENT);
	}
	
	private void newVolumeInstance(CaseNoteType type) 
	{
		
		FolderCaseNote permanentFolder = form.ccCaseNoteFolder().getValue() != null ? form.ccCaseNoteFolder().getValue().getFolder() : null;
		
		form.getLocalContext().setSelectedCaseNoteFolder(null);
		form.getLocalContext().setSelectedAction(PatientCaseNoteFolderActions.NEW_PERMANENT);//WDEV-19662
		
		form.ccCaseNoteFolder().clearSelection();
		clearCaseNoteVolume();
		
		form.cmbVolType().setValue(type);
		if(CaseNoteType.TEMPORARY.equals(type))
		{
			form.cmbFolder().setValue(permanentFolder);
		}
		
		if(form.getLocalContext().getCurrentLocation() != null)
		{
			form.qmbVolCurrentLocation().newRow(form.getLocalContext().getCurrentLocation(), form.getLocalContext().getCurrentLocation().getName());
			form.qmbVolCurrentLocation().setValue(form.getLocalContext().getCurrentLocation());
		}
		form.cmbVolStatus().setValue(CaseNoteStatus.ACTIVE);
		
		form.getLocalContext().setCaseNoteFolderMode(FormMode.EDIT);
		
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnViewCommentsClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		engine.open(form.getForms().Core.CaseNoteComments);
	}

	@Override
	protected void onChkCurrentOnlyValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setSelectedCaseNoteFolder(null);
		open();
	}


	@Override
	protected void onQmbVolCurrentLocationTextSubmited(String value) throws PresentationLogicException 
	{
		bindCurrentLocationCombo(value);
	}

	private void bindCurrentLocationCombo(String value) 
	{
		form.qmbVolCurrentLocation().clear();
		
		LocationLiteVoCollection locs = domain.listCaseNoteLocations(value);
		
		if(locs == null || locs.size() == 0)
			return;
		
		for(LocationLiteVo loc : locs)
		{
			if(loc == null)
				continue;
			
			form.qmbVolCurrentLocation().newRow(loc, loc.getName());
		}
		
		if(locs.size() == 1)
			form.qmbVolCurrentLocation().setValue(locs.get(0));
		else
			form.qmbVolCurrentLocation().showOpened();
	}

	@Override
	protected void onCcCaseNoteFolderValueChanged()	throws PresentationLogicException 
	{
		if(CaseNoteFolderCcEvent.SELECTIONCHANGE.equals(form.ccCaseNoteFolder().getAction()))
		{
			form.getLocalContext().setSelectedCaseNoteFolder(domain.getCaseNoteFolder(form.ccCaseNoteFolder().getValue()));
			populateCaseNoteVolumeDetails(form.getLocalContext().getSelectedCaseNoteFolder());
			
			form.ccCaseNoteRequest().setSelection(null);
			form.getLocalContext().setSelectedCaseNoteRequest(null);
			form.getGlobalContext().Core.setCaseNoteRequestRef(null);
			clearCaseNoteRequest();
		}
		else if(CaseNoteFolderCcEvent.NEWPERMANENT.equals(form.ccCaseNoteFolder().getAction()))
		{
			newVolumeInstance(CaseNoteType.PERMANENT);
		}
		else if(CaseNoteFolderCcEvent.NEWTEMPORARY.equals(form.ccCaseNoteFolder().getAction()))
		{
			newVolumeInstance(CaseNoteType.TEMPORARY);
		}
		else if(CaseNoteFolderCcEvent.CREATECASENOTEFOLDER.equals(form.ccCaseNoteFolder().getAction()))
		{
			createActiveCaseNoteFromRequireCaseNote();
		}
		else if(CaseNoteFolderCcEvent.CHANGEFROMTEMPORARYTOPERMANENT.equals(form.ccCaseNoteFolder().getAction()))
		{
			changeFromTemporaryToPermanent();
		}
		else if(CaseNoteFolderCcEvent.MARKED_AS_FOUND.equals(form.ccCaseNoteFolder().getAction()))
		{
			markAsFound();
		}
		else if(CaseNoteFolderCcEvent.EDITVOLUME.equals(form.ccCaseNoteFolder().getAction()))
		{
			changeFromTemporaryToPermanent();
		}
		else if(CaseNoteFolderCcEvent.ARCHIVE.equals(form.ccCaseNoteFolder().getAction()))
		{
			archiveVolume();
		}
		else if(CaseNoteFolderCcEvent.DESTROY.equals(form.ccCaseNoteFolder().getAction()))
		{
			destroyVolume();
		}
		else if(CaseNoteFolderCcEvent.SCAN.equals(form.ccCaseNoteFolder().getAction()))
		{
			scanVolume();
		}
		else if(CaseNoteFolderCcEvent.ADDCOMMENT.equals(form.ccCaseNoteFolder().getAction()))
		{
			addComment();
		}
		else if(CaseNoteFolderCcEvent.PRINT.equals(form.ccCaseNoteFolder().getAction()))
		{
			print();
		}
		else if(CaseNoteFolderCcEvent.MERGE.equals(form.ccCaseNoteFolder().getAction()))
		{
			merge();
		}
		else if(CaseNoteFolderCcEvent.TRANSFER.equals(form.ccCaseNoteFolder().getAction()))
		{
			form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
			form.getGlobalContext().Core.setCaseNoteRequestRef(null);
			engine.open(form.getForms().Core.CaseNoteTransfer);
		}
		else if(CaseNoteFolderCcEvent.MARK_AS_MISSING.equals(form.ccCaseNoteFolder().getAction()))
		{
			markAsMissing();
		}
		else if(CaseNoteFolderCcEvent.REQUIRESMERGING.equals(form.ccCaseNoteFolder().getAction()))
		{
			if(saveVolume(null, CaseNoteStatus.REQUIRES_MERGING, false))
				open();
		}
		else if(CaseNoteFolderCcEvent.VIEW_TRANSFERS.equals(form.ccCaseNoteFolder().getAction()))
		{
			transferVolume();
		}
		else if(CaseNoteFolderCcEvent.VIEW_ALL_COMMENTS.equals(form.ccCaseNoteFolder().getAction()))
		{
			form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
			engine.open(form.getForms().Core.CaseNoteComments);
		}
		
		updateControlsState();
	}

	private void createActiveCaseNoteFromRequireCaseNote() 
	{
		if(saveVolume(null, CaseNoteStatus.ACTIVE, true))
			open();
	}

	private void markAsFound() 
	{
		if(saveVolume(null, getCaseNoteStatusForMarkedAsFound(), false))
			open();
	}

	private void changeFromTemporaryToPermanent() 
	{
		form.getLocalContext().setChangeFromTemporaryToPermanentMessageBoxId(engine.showMessage("Are you sure you want to change the selected Case Note Folder to a Permanent Case Note Folder?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	private void addComment() 
	{
		form.getLocalContext().setIsAddCommentMode(true);
		form.txtVolComments().setValue(null);
		
		form.getLocalContext().setCaseNoteFolderMode(FormMode.EDIT);
		
		form.setMode(FormMode.EDIT);
	}

	private void print() 
	{
		engine.open(form.getForms().Core.PrintReport);
	}

	@Override
	protected void onCcCaseNoteRequestValueChanged() throws PresentationLogicException 
	{
		if(CaseNoteOpenRequestComponentAction.REQUEST_SELECTED.equals(form.ccCaseNoteRequest().getComponentAction()))
		{
			form.getLocalContext().setSelectedCaseNoteRequest(domain.getCaseNoteRequests(form.ccCaseNoteRequest().getSelectedRowValue()));
			populateCaseNoteRequestDetails(form.getLocalContext().getSelectedCaseNoteRequest());
			
			if(form.getLocalContext().getCaseNoteFolderMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedCaseNoteRequest() != null)
			{
				form.getLocalContext().setSelectedCaseNoteFolder(domain.getCaseNoteFolder(form.getLocalContext().getSelectedCaseNoteRequest().getCaseNote()));
				form.ccCaseNoteFolder().setSelection(form.getLocalContext().getSelectedCaseNoteFolder());
				clearCaseNoteVolume();
				
				if(form.ccCaseNoteFolder().getValue() != null)
				{
					populateCaseNoteVolumeDetails(form.getLocalContext().getSelectedCaseNoteFolder());
				}
			}
		}
		else if(CaseNoteOpenRequestComponentAction.MENU_NEW_REQUEST.equals(form.ccCaseNoteRequest().getComponentAction()))
		{
			newRequest();
		}
		else if(CaseNoteOpenRequestComponentAction.MENU_EDIT_REQUEST.equals(form.ccCaseNoteRequest().getComponentAction()))
		{
			updateRequest();
		}
		else if(CaseNoteOpenRequestComponentAction.MENU_CANCEL_REQUEST.equals(form.ccCaseNoteRequest().getComponentAction()))
		{
			form.getLocalContext().setCancelRequestMessageBoxId(engine.showMessage("Are you sure you want to Cancel the selected request?" , "", MessageButtons.YESNO, MessageIcon.QUESTION));
		}
		else if(CaseNoteOpenRequestComponentAction.MENU_COMPLETE_TRANSFER.equals(form.ccCaseNoteRequest().getComponentAction()))
		{
			completeRequest();
		}
		
		updateControlsState();
	}

	private boolean cancelRequest() 
	{
		try 
		{
			boolean value = domain.cancelRequest(form.ccCaseNoteRequest().getSelectedRowValue(), form.getLocalContext().getCurrentMOS(), CaseNoteRequestCancellationReason.CANCELLED_BY_USER);
			form.getGlobalContext().Core.setCaseNoteRequestRef(null);
			
			return value;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	}

	private void populateCaseNoteRequestDetails(PatientCaseNoteRequestVo selectedCaseNoteRequest) 
	{
		clearCaseNoteRequest();
		
		if(selectedCaseNoteRequest == null)
			return;
		
		form.cmbTypeReq().setValue(selectedCaseNoteRequest.getCaseNote().getType());
		form.dtimRecordingDate().setValue(selectedCaseNoteRequest.getCreationDate());//WDEV-21097
		form.dtimReq().setValue(selectedCaseNoteRequest.getRequiredByDate());
		
		if(selectedCaseNoteRequest.getRequestedForLocation() != null)
		{
			form.qmbReqLoc().newRow(selectedCaseNoteRequest.getRequestedForLocation(), selectedCaseNoteRequest.getRequestedForLocation().getName());
		}
		form.qmbReqLoc().setValue(selectedCaseNoteRequest.getRequestedForLocation());
		
		form.ccRequestedBy().setValue(selectedCaseNoteRequest.getRequestedBy());
		form.cmbReasonReq().setValue(selectedCaseNoteRequest.getReasonForRequest());
		form.txtCommentsReq().setValue(selectedCaseNoteRequest.getRequestComment() != null ? selectedCaseNoteRequest.getRequestComment().getComment() : null);
	}

	private void clearCaseNoteRequest() 
	{
		form.cmbTypeReq().setValue(null);
		form.dtimRecordingDate().setValue(null);//WDEV-21097
		form.dtimReq().setValue(null);
		form.qmbReqLoc().setValue(null);
		form.ccRequestedBy().setValue(null);
		form.cmbReasonReq().setValue(null);
		form.txtCommentsReq().setValue(null);
	}

	@Override
	protected void onBtnScanVolumeClick() throws PresentationLogicException 
	{
		scanVolume();
	}

	private void scanVolume() 
	{
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		engine.open(form.getForms().Core.CaseNoteArchiveOrDestroy, new Object[]{PatientCaseNoteFolderProcessAction.SCAN});
	}
	
	private boolean isDeniedAction(PatientCaseNoteFolderActions caseNoteAction) 
	{
		if(caseNoteAction == null)
			return false;
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(caseNoteAction.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnVolumeNewTemporaryClick() throws PresentationLogicException 
	{
		newVolumeInstance(CaseNoteType.TEMPORARY);
	}

	@Override
	protected void onBtnMarkAsFoundClick() throws PresentationLogicException 
	{
		markAsFound();
	}

	private CaseNoteStatus getCaseNoteStatusForMarkedAsFound() 
	{
		boolean value = domain.checkIfThereIsACaseNoteFolderCreated(form.getGlobalContext().Core.getPatientShort(), CaseNoteStatus.ACTIVE , (form.ccCaseNoteFolder().getValue() != null ? form.ccCaseNoteFolder().getValue().getFolder() : null), form.ccCaseNoteFolder().getValue());
		
		return value ? CaseNoteStatus.MARKED_AS_FOUND : CaseNoteStatus.ACTIVE;
	}

	@Override
	protected void onBtnMarkAsMissingClick() throws PresentationLogicException 
	{
		markAsMissing();
	}

	private void markAsMissing() 
	{
		form.getLocalContext().setMissingMessageBoxId(engine.showMessage("Are you sure you want to mark the selected Case Note Folder as Missing?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	@Override
	protected void onBtnRequiresMergingClick() throws PresentationLogicException 
	{
		if(saveVolume(null, CaseNoteStatus.REQUIRES_MERGING, false))
			open();
	}

	@Override
	protected void onBtnCancelRequestClick() throws PresentationLogicException 
	{
		form.getLocalContext().setCancelRequestMessageBoxId(engine.showMessage("Are you sure you want to Cancel the selected request?" , "", MessageButtons.YESNO, MessageIcon.QUESTION));//WDEV-22933
	}

	@Override
	protected void onBtnCompleteRequestClick() throws PresentationLogicException 
	{
		completeRequest();
	}

	private void completeRequest() 
	{
		if(form.ccCaseNoteRequest().getSelectedRowValue() != null)
		{
			if(domain.isCaseNoteRequestStale(form.ccCaseNoteRequest().getSelectedRowValue()))
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				
				return;
			}
		}
		
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteFolder().getValue());
		
		if(form.getGlobalContext().Core.getPatientCaseNoteFolderRef() == null && form.ccCaseNoteRequest().getSelectedRowValue() != null)
		{
			form.getGlobalContext().Core.setPatientCaseNoteFolderRef(form.ccCaseNoteRequest().getSelectedRowValue().getCaseNote());
		}
		
		form.getGlobalContext().Core.setCaseNoteRequestRef(form.ccCaseNoteRequest().getSelectedRowValue());
		
		engine.open(form.getForms().Core.CaseNoteTransfer);
	}

	@Override
	protected void onBtnCreateCaseNoteFolderClick()	throws PresentationLogicException 
	{
		createActiveCaseNoteFromRequireCaseNote();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getMissingMessageBoxId() != null && form.getLocalContext().getMissingMessageBoxId().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result))
			{
				if(saveVolume(null, CaseNoteStatus.MISSING, false))
					open();
			}
		}
		else if(form.getLocalContext().getChangeFromTemporaryToPermanentMessageBoxId() != null && form.getLocalContext().getChangeFromTemporaryToPermanentMessageBoxId().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result))
			{
				if(changeCaseNoteToPermanent())
					open();
			}
		}
		else if(form.getLocalContext().getCancelRequestMessageBoxId() != null && form.getLocalContext().getCancelRequestMessageBoxId().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result))
			{
				if(cancelRequest())
					open();
			}
		}
	}

	private boolean changeCaseNoteToPermanent() 
	{
		PatientCaseNoteVo record = form.getLocalContext().getSelectedCaseNoteFolder();
		record.setType(CaseNoteType.PERMANENT);
	
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedCaseNoteFolder(domain.changeFromTemporaryToPermanent(record));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		form.getLocalContext().setIsAddCommentMode(null);
		
		return true;
	}

	//WDEV-19690
	@Override
	protected void onBtnAddCommentClick() throws PresentationLogicException
	{
		addComment();
	}

	@Override
	protected void onBtnViewAllRequestsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.PatientAllCaseNoteRequests);
	}
}
