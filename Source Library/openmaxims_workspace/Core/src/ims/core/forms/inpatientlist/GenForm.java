//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.inpatientlist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatIdType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatIdType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatIdType getValue()
		{
			return (ims.core.vo.lookups.PatIdType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatIdType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbConsultantsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.correspondence.vo.CorrespondenceDetailsRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.correspondence.vo.CorrespondenceDetailsRefVo' of the global context variable 'Correspondence.CorrespondenceDetails' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientListsFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientListsFilterVo' of the global context variable 'Correspondence.PatientListSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientFilter.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientFilter' of the global context variable 'Core.PatientFilter' is not supported.");
		if(!context.isValidContextType(ims.core.admin.pas.vo.PASEventRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.admin.pas.vo.PASEventRefVo' of the global context variable 'Core.PasEvent' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CurrentInpatientListFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CurrentInpatientListFilterVo' of the global context variable 'STHK.CurrentInpatientListFilter' is not supported.");
		if(!context.isValidContextType(FormName.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'FormName' of the global context variable 'Core.SelectingPatientForm' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(90);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuADTMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuADTMenuAdmitItem = factory.createMenuItem(startControlID.intValue() + 1, "Admit Patient", true, false, null, true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuAdmitItem);
		contextMenus.contextMenuADTMenuTransferItem = factory.createMenuItem(startControlID.intValue() + 2, "Transfer Patient", true, false, new Integer(102112), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1690002)))
			contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuTransferItem);
		contextMenus.contextMenuADTMenuDischargeItem = factory.createMenuItem(startControlID.intValue() + 3, "Discharge Patient", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuDischargeItem);
		contextMenus.contextMenuADTMenuDemographicsItem = factory.createMenuItem(startControlID.intValue() + 4, "Show Demographics", true, false, new Integer(103133), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuDemographicsItem);
		contextMenus.contextMenuADTMenuAddItem = factory.createMenuItem(startControlID.intValue() + 5, "New Correspondence", true, false, new Integer(111108), true, true);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuAddItem);
		contextMenus.contextMenuADTMenuViewItem = factory.createMenuItem(startControlID.intValue() + 6, "View Correspondence", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuViewItem);
		contextMenus.contextMenuADTMenuSetLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 7, "Set Letter Required", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuSetLetterRequiredItem);
		contextMenus.contextMenuADTMenuSetNoLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 8, "Set `No Letter Required", true, false, new Integer(111104), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuSetNoLetterRequiredItem);
		contextMenus.contextMenuADTMenuPreviewDocumentItem = factory.createMenuItem(startControlID.intValue() + 9, "Preview Document", true, false, new Integer(102221), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuPreviewDocumentItem);
		contextMenus.contextMenuADTMenuViewDocumentStatusHistoryItem = factory.createMenuItem(startControlID.intValue() + 10, "View Document Status History", true, false, new Integer(102202), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuViewDocumentStatusHistoryItem);
		contextMenus.contextMenuADTMenuEditDocumentStatusHistoryItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Document Status History", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuEditDocumentStatusHistoryItem);
		contextMenus.contextMenuADTMenuEditItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit Correspondence", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuEditItem);
		contextMenus.contextMenuADTMenuBatchupdateofstatustoDictatedItem = factory.createMenuItem(startControlID.intValue() + 13, "Batch update of status to (Dictated)", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuBatchupdateofstatustoDictatedItem);
		contextMenus.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem = factory.createMenuItem(startControlID.intValue() + 14, "Batch update of status to (No Letter Required)", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem);
		contextMenus.contextMenuADTMenuBatchupdateofstatustoSignedItem = factory.createMenuItem(startControlID.intValue() + 15, "Batch update of status to (Signed)", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuBatchupdateofstatustoSignedItem);
		contextMenus.contextMenuADTMenuCancelAdmissionItem = factory.createMenuItem(startControlID.intValue() + 16, "Cancel Admission", true, false, new Integer(102249), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1690001)))
			contextMenus.contextMenuADTMenu.add(contextMenus.contextMenuADTMenuCancelAdmissionItem);
		form.registerMenu(contextMenus.contextMenuADTMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 53, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Value:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 20, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 176, 20, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 176, 53, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 570, 53, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 608, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 570, 20, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 360, 20, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 360, 53, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 64, 51, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 240, 18, 112, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 240, 51, 112, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 64, 18, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTypeTemp);
		cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
		super.addComboBox(cmbType);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 640, 51, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 414, 18, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 414, 51, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 640, 18, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_qmbConsultantsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbConsultantsTemp);
		qmbConsultantsComboBox qmbConsultants = (qmbConsultantsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantsComboBox.class, m_qmbConsultantsTemp);
		super.addComboBox(qmbConsultants);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuADTMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 810, 46, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear search criteria and ward list", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 810, 13, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "List Inpatients matching search criteria", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(5);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(8);
	}
	public Button btnPrintReport()
	{
		return (Button)super.getControl(9);
	}
	public TextBox txtIdentifier()
	{
		return (TextBox)super.getControl(10);
	}
	public TextBox txtSurname()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtForename()
	{
		return (TextBox)super.getControl(12);
	}
	public cmbTypeComboBox cmbType()
	{
		return (cmbTypeComboBox)super.getComboBox(0);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(1);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(2);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(3);
	}
	public qmbConsultantsComboBox qmbConsultants()
	{
		return (qmbConsultantsComboBox)super.getComboBox(4);
	}
	public DynamicGrid dyngrdInpatients()
	{
		return (DynamicGrid)super.getControl(18);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(20);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Correspondence = new CorrespondenceForms();
			Admin = new AdminForms();
			Clinical = new ClinicalForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Demographics = new LocalFormName(102101);
				AdtDischargeDialog = new LocalFormName(102226);
				AdtTransferDialog = new LocalFormName(102224);
				InpatientTransferDialog = new LocalFormName(102366);
				ADTPatientAdmission = new LocalFormName(102407);
			}
			public final FormName Demographics;
			public final FormName AdtDischargeDialog;
			public final FormName AdtTransferDialog;
			public final FormName InpatientTransferDialog;
			public final FormName ADTPatientAdmission;
		}
		public final class CorrespondenceForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceForms()
			{
				CorrespondenceDetails = new LocalFormName(111109);
				CorrespondenceDetail = new LocalFormName(111101);
			}
			public final FormName CorrespondenceDetails;
			public final FormName CorrespondenceDetail;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				RCHTManualDischargeDialog = new LocalFormName(103214);
			}
			public final FormName RCHTManualDischargeDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DementiaAssessmentFormDialog = new LocalFormName(123264);
			}
			public final FormName DementiaAssessmentFormDialog;
		}

		public CoreForms Core;
		public CorrespondenceForms Correspondence;
		public AdminForms Admin;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Clinical = new ClinicalImages();
			OCRR = new OCRRImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Home = new ImageHelper(102220, "Images/Core/Home-2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Home;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				DementiaNew = new ImageHelper(123173, "Images/Clinical/dementia_newa.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image DementiaNew;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				UpdatedResult = new ImageHelper(116138, "Images/OCRR/UpdatedResult.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image UpdatedResult;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Complication = new ImageHelper(103158, "Images/Admin/Complication.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Complication;
		}
		public final CoreImages Core;
		public final ClinicalImages Clinical;
		public final OCRRImages OCRR;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_wardCollection = new ims.framework.ContextVariable("wardCollection", prefix + "_lv_Core.InpatientList.__internal_x_context__wardCollection_" + componentIdentifier + "");
			cxl_SelectedCorrespondenceInstance = new ims.framework.ContextVariable("SelectedCorrespondenceInstance", prefix + "_lv_Core.InpatientList.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier + "");
			cxl_patientListType = new ims.framework.ContextVariable("patientListType", prefix + "_lv_Core.InpatientList.__internal_x_context__patientListType_" + componentIdentifier + "");
			cxl_UserAccessVo = new ims.framework.ContextVariable("UserAccessVo", prefix + "_lv_Core.InpatientList.__internal_x_context__UserAccessVo_" + componentIdentifier + "");
			cxl_SortOrderIdentifier = new ims.framework.ContextVariable("SortOrderIdentifier", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderIdentifier_" + componentIdentifier + "");
			cxl_SortOrderSurname = new ims.framework.ContextVariable("SortOrderSurname", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderSurname_" + componentIdentifier + "");
			cxl_SortOrderForename = new ims.framework.ContextVariable("SortOrderForename", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderForename_" + componentIdentifier + "");
			cxl_SortOrderSex = new ims.framework.ContextVariable("SortOrderSex", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderSex_" + componentIdentifier + "");
			cxl_SortOrderAge = new ims.framework.ContextVariable("SortOrderAge", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderAge_" + componentIdentifier + "");
			cxl_SortOrderDOB = new ims.framework.ContextVariable("SortOrderDOB", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderDOB_" + componentIdentifier + "");
			cxl_SortOrderWard = new ims.framework.ContextVariable("SortOrderWard", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderWard_" + componentIdentifier + "");
			cxl_SortOrderConsultant = new ims.framework.ContextVariable("SortOrderConsultant", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderConsultant_" + componentIdentifier + "");
			cxl_SortOrderAdmissionDate = new ims.framework.ContextVariable("SortOrderAdmissionDate", prefix + "_lv_Core.InpatientList.__internal_x_context__SortOrderAdmissionDate_" + componentIdentifier + "");
		}
		
		public boolean getwardCollectionIsNotNull()
		{
			return !cxl_wardCollection.getValueIsNull(context);
		}
		public ims.core.vo.LocMostVoCollection getwardCollection()
		{
			return (ims.core.vo.LocMostVoCollection)cxl_wardCollection.getValue(context);
		}
		public void setwardCollection(ims.core.vo.LocMostVoCollection value)
		{
			cxl_wardCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_wardCollection = null;
		public boolean getSelectedCorrespondenceInstanceIsNotNull()
		{
			return !cxl_SelectedCorrespondenceInstance.getValueIsNull(context);
		}
		public ims.correspondence.vo.CorrespondenceDetailsRefVo getSelectedCorrespondenceInstance()
		{
			return (ims.correspondence.vo.CorrespondenceDetailsRefVo)cxl_SelectedCorrespondenceInstance.getValue(context);
		}
		public void setSelectedCorrespondenceInstance(ims.correspondence.vo.CorrespondenceDetailsRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedCorrespondenceInstance' RefVo context variable.");
			if(value == null)
				cxl_SelectedCorrespondenceInstance.setValue(context, null);
			else
				cxl_SelectedCorrespondenceInstance.setValue(context, new ims.correspondence.vo.CorrespondenceDetailsRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedCorrespondenceInstance = null;
		public boolean getpatientListTypeIsNotNull()
		{
			return !cxl_patientListType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.PatientListType getpatientListType()
		{
			return (ims.core.vo.lookups.PatientListType)cxl_patientListType.getValue(context);
		}
		public void setpatientListType(ims.core.vo.lookups.PatientListType value)
		{
			cxl_patientListType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_patientListType = null;
		public boolean getUserAccessVoIsNotNull()
		{
			return !cxl_UserAccessVo.getValueIsNull(context);
		}
		public ims.correspondence.vo.UserAccessVo getUserAccessVo()
		{
			return (ims.correspondence.vo.UserAccessVo)cxl_UserAccessVo.getValue(context);
		}
		public void setUserAccessVo(ims.correspondence.vo.UserAccessVo value)
		{
			cxl_UserAccessVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UserAccessVo = null;
		public boolean getSortOrderIdentifierIsNotNull()
		{
			return !cxl_SortOrderIdentifier.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderIdentifier()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderIdentifier.getValue(context);
		}
		public void setSortOrderIdentifier(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderIdentifier.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderIdentifier = null;
		public boolean getSortOrderSurnameIsNotNull()
		{
			return !cxl_SortOrderSurname.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderSurname()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderSurname.getValue(context);
		}
		public void setSortOrderSurname(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderSurname.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderSurname = null;
		public boolean getSortOrderForenameIsNotNull()
		{
			return !cxl_SortOrderForename.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderForename()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderForename.getValue(context);
		}
		public void setSortOrderForename(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderForename.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderForename = null;
		public boolean getSortOrderSexIsNotNull()
		{
			return !cxl_SortOrderSex.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderSex()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderSex.getValue(context);
		}
		public void setSortOrderSex(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderSex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderSex = null;
		public boolean getSortOrderAgeIsNotNull()
		{
			return !cxl_SortOrderAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAge.getValue(context);
		}
		public void setSortOrderAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAge = null;
		public boolean getSortOrderDOBIsNotNull()
		{
			return !cxl_SortOrderDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderDOB.getValue(context);
		}
		public void setSortOrderDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderDOB = null;
		public boolean getSortOrderWardIsNotNull()
		{
			return !cxl_SortOrderWard.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderWard()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderWard.getValue(context);
		}
		public void setSortOrderWard(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderWard.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderWard = null;
		public boolean getSortOrderConsultantIsNotNull()
		{
			return !cxl_SortOrderConsultant.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderConsultant()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderConsultant.getValue(context);
		}
		public void setSortOrderConsultant(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderConsultant.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderConsultant = null;
		public boolean getSortOrderAdmissionDateIsNotNull()
		{
			return !cxl_SortOrderAdmissionDate.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderAdmissionDate()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderAdmissionDate.getValue(context);
		}
		public void setSortOrderAdmissionDate(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderAdmissionDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderAdmissionDate = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ADTMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Admit = 1;
			public static final int Transfer = 2;
			public static final int Discharge = 3;
			public static final int Demographics = 4;
			public static final int Add = 5;
			public static final int View = 6;
			public static final int SetLetterRequired = 7;
			public static final int SetNoLetterRequired = 8;
			public static final int PreviewDocument = 9;
			public static final int ViewDocumentStatusHistory = 10;
			public static final int EditDocumentStatusHistory = 11;
			public static final int Edit = 12;
			public static final int BatchupdateofstatustoDictated = 13;
			public static final int BatchupdateofstatustoNoLetterRequired = 14;
			public static final int BatchupdateofstatustoSigned = 15;
			public static final int CancelAdmission = 16;
		}
		public void disableAllADTMenuMenuItems()
		{
			this.contextMenuADTMenuAdmitItem.setEnabled(false);
			this.contextMenuADTMenuTransferItem.setEnabled(false);
			this.contextMenuADTMenuDischargeItem.setEnabled(false);
			this.contextMenuADTMenuDemographicsItem.setEnabled(false);
			this.contextMenuADTMenuAddItem.setEnabled(false);
			this.contextMenuADTMenuViewItem.setEnabled(false);
			this.contextMenuADTMenuSetLetterRequiredItem.setEnabled(false);
			this.contextMenuADTMenuSetNoLetterRequiredItem.setEnabled(false);
			this.contextMenuADTMenuPreviewDocumentItem.setEnabled(false);
			this.contextMenuADTMenuViewDocumentStatusHistoryItem.setEnabled(false);
			this.contextMenuADTMenuEditDocumentStatusHistoryItem.setEnabled(false);
			this.contextMenuADTMenuEditItem.setEnabled(false);
			this.contextMenuADTMenuBatchupdateofstatustoDictatedItem.setEnabled(false);
			this.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem.setEnabled(false);
			this.contextMenuADTMenuBatchupdateofstatustoSignedItem.setEnabled(false);
			this.contextMenuADTMenuCancelAdmissionItem.setEnabled(false);
		}
		public void hideAllADTMenuMenuItems()
		{
			this.contextMenuADTMenuAdmitItem.setVisible(false);
			this.contextMenuADTMenuTransferItem.setVisible(false);
			this.contextMenuADTMenuDischargeItem.setVisible(false);
			this.contextMenuADTMenuDemographicsItem.setVisible(false);
			this.contextMenuADTMenuAddItem.setVisible(false);
			this.contextMenuADTMenuViewItem.setVisible(false);
			this.contextMenuADTMenuSetLetterRequiredItem.setVisible(false);
			this.contextMenuADTMenuSetNoLetterRequiredItem.setVisible(false);
			this.contextMenuADTMenuPreviewDocumentItem.setVisible(false);
			this.contextMenuADTMenuViewDocumentStatusHistoryItem.setVisible(false);
			this.contextMenuADTMenuEditDocumentStatusHistoryItem.setVisible(false);
			this.contextMenuADTMenuEditItem.setVisible(false);
			this.contextMenuADTMenuBatchupdateofstatustoDictatedItem.setVisible(false);
			this.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem.setVisible(false);
			this.contextMenuADTMenuBatchupdateofstatustoSignedItem.setVisible(false);
			this.contextMenuADTMenuCancelAdmissionItem.setVisible(false);
		}
		private Menu contextMenuADTMenu;
		public MenuItem getADTMenuAdmitItem()
		{
			return this.contextMenuADTMenuAdmitItem;
		}
		private MenuItem contextMenuADTMenuAdmitItem;
		public MenuItem getADTMenuTransferItem()
		{
			return this.contextMenuADTMenuTransferItem;
		}
		private MenuItem contextMenuADTMenuTransferItem;
		public MenuItem getADTMenuDischargeItem()
		{
			return this.contextMenuADTMenuDischargeItem;
		}
		private MenuItem contextMenuADTMenuDischargeItem;
		public MenuItem getADTMenuDemographicsItem()
		{
			return this.contextMenuADTMenuDemographicsItem;
		}
		private MenuItem contextMenuADTMenuDemographicsItem;
		public MenuItem getADTMenuAddItem()
		{
			return this.contextMenuADTMenuAddItem;
		}
		private MenuItem contextMenuADTMenuAddItem;
		public MenuItem getADTMenuViewItem()
		{
			return this.contextMenuADTMenuViewItem;
		}
		private MenuItem contextMenuADTMenuViewItem;
		public MenuItem getADTMenuSetLetterRequiredItem()
		{
			return this.contextMenuADTMenuSetLetterRequiredItem;
		}
		private MenuItem contextMenuADTMenuSetLetterRequiredItem;
		public MenuItem getADTMenuSetNoLetterRequiredItem()
		{
			return this.contextMenuADTMenuSetNoLetterRequiredItem;
		}
		private MenuItem contextMenuADTMenuSetNoLetterRequiredItem;
		public MenuItem getADTMenuPreviewDocumentItem()
		{
			return this.contextMenuADTMenuPreviewDocumentItem;
		}
		private MenuItem contextMenuADTMenuPreviewDocumentItem;
		public MenuItem getADTMenuViewDocumentStatusHistoryItem()
		{
			return this.contextMenuADTMenuViewDocumentStatusHistoryItem;
		}
		private MenuItem contextMenuADTMenuViewDocumentStatusHistoryItem;
		public MenuItem getADTMenuEditDocumentStatusHistoryItem()
		{
			return this.contextMenuADTMenuEditDocumentStatusHistoryItem;
		}
		private MenuItem contextMenuADTMenuEditDocumentStatusHistoryItem;
		public ReadOnlyMenuItem getADTMenuEditItem()
		{
			return this.contextMenuADTMenuEditItem;
		}
		private MenuItem contextMenuADTMenuEditItem;
		public ReadOnlyMenuItem getADTMenuBatchupdateofstatustoDictatedItem()
		{
			return this.contextMenuADTMenuBatchupdateofstatustoDictatedItem;
		}
		private MenuItem contextMenuADTMenuBatchupdateofstatustoDictatedItem;
		public ReadOnlyMenuItem getADTMenuBatchupdateofstatustoNoLetterRequiredItem()
		{
			return this.contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem;
		}
		private MenuItem contextMenuADTMenuBatchupdateofstatustoNoLetterRequiredItem;
		public ReadOnlyMenuItem getADTMenuBatchupdateofstatustoSignedItem()
		{
			return this.contextMenuADTMenuBatchupdateofstatustoSignedItem;
		}
		private MenuItem contextMenuADTMenuBatchupdateofstatustoSignedItem;
		public ReadOnlyMenuItem getADTMenuCancelAdmissionItem()
		{
			return this.contextMenuADTMenuCancelAdmissionItem;
		}
		private MenuItem contextMenuADTMenuCancelAdmissionItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[167];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientList.__internal_x_context__SelectedCorrespondenceInstance_" + componentIdentifier, "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientList.__internal_x_context__UserAccessVo_" + componentIdentifier, "BO-1053100011-ID", "ID_UserAccess");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientList.__internal_x_context__UserAccessVo_" + componentIdentifier, "BO-1053100011-APPUSER", "AppUser");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
