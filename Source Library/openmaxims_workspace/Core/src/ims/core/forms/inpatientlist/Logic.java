//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.42 build 2221.27776)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.inpatientlist;

import ims.clinical.vo.DementiaForWorklistVo;
import ims.clinical.vo.enums.DementiaWorklistOpenFormModeEnum;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.ColumnSortOrderVo;
import ims.core.vo.CurrentInpatientListFilterVo;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.InpatientEpisodeVoCollection;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonName;
import ims.core.vo.RCHTInpatientDischargeVo;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.framework.utils.PartialDate;
import ims.icp.vo.InpatientEpisodeWithICPInfoVo;
import java.util.Comparator;



import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	
	private static final int IDENTIFIER_COLUMN_ID = 1;
	private static final int SURNAME_COLUMN_ID = 2;
	private static final int FORENAME_COLUMN_ID = 3;
	private static final int SEX_COLUMN_ID = 4;
	private static final int AGE_COLUMN_ID = 5;
	private static final int DOB_COLUMN_ID = 6;
	private static final int WARD_COLUMN_ID = 7;
	private static final int CONSULTANT_COLUMN_ID = 8;
	private static final int ADMISSION_DATE_COLUMN_ID = 9;
	
	//wdev-18784
	private static final int COL_LEAVE 			= 0;
	private static final int COL_HOSPITALNO 	= 1;
	private static final int COL_SURNAME  		= 2;
	private static final int COL_FORENAME 		= 3;
	private static final int COL_SEX 			= 4;
	private static final int COL_AGE        	= 5;
	private static final int COL_DOB			= 6;
	private static final int COL_WARD			= 7;
	private static final int COL_CONSULTANT 	= 8;
	private static final int COL_ADMISSION_DATE	= 9;
	private static final int COL_DEMENTIA		= 10;
	private static final int COL_DOCSTATUS		= 11;
	//---------
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		refreshSearchCriteria();
	}

	private void refreshSearchCriteria()
	{
		CurrentInpatientListFilterVo voFilter = form.getGlobalContext().STHK.getCurrentInpatientListFilter();
		
		if (voFilter != null)
		{
			//WDEV-15526
			form.cmbType().setValue(voFilter.getIDType());
			form.txtIdentifier().setValue(voFilter.getHospNum());
			form.txtSurname().setValue(voFilter.getSurname());
			form.txtForename().setValue(voFilter.getForename());
			
			form.cmbHospital().setValue(null);
			for(int i = 0 ; voFilter.getHospitalIsNotNull() && form.cmbHospital().getValues() != null&& i < form.cmbHospital().getValues().size() ; i++)
			{
				LocationLiteVo voHosp = (LocationLiteVo)form.cmbHospital().getValues().get(i);
				if (voHosp.getID_Location().equals(voFilter.getHospital().getID_Location()))
					form.cmbHospital().setValue((LocationLiteVo)form.cmbHospital().getValues().get(i));
			}
			if ( form.cmbHospital().getValue() == null && voFilter.getHospitalIsNotNull())
			{
				LocationLiteVo voHosp = domain.getHospital(voFilter.getHospital());
				form.cmbHospital().newRow(voHosp, voHosp.getName().toString());
				form.cmbHospital().setValue(voHosp);
			}
			hospitalValueChanged();

			form.qmbConsultants().clear();
			if (form.qmbConsultants().getValue() == null && voFilter.getConsultantIsNotNull())
			{
				HcpLiteVo voHcp = domain.getHCP(voFilter.getConsultant().getID_Hcp());
				form.qmbConsultants().newRow(voHcp, voHcp.getMos().getName().toString());
				form.qmbConsultants().setValue(voHcp);
			}
			
			
			form.cmbWard().setValue(null);
			for(int i = 0 ; voFilter.getWardIsNotNull() && i < form.cmbWard().getValues().size() ; i++)
			{
				LocationLiteVo voWard = (LocationLiteVo)form.cmbWard().getValues().get(i);
				if (voWard.getID_Location().equals(voFilter.getWard().getID_Location()))
					form.cmbWard().setValue((LocationLiteVo)form.cmbWard().getValues().get(i));
			}
			if ( form.cmbWard().getValue() == null&& voFilter.getWardIsNotNull())
			{
				LocationLiteVo voWard = domain.getWard(voFilter.getWard());
				form.cmbWard().newRow(voWard, voWard.getName());
				form.cmbWard().setValue(voWard);
			}
			
			form.cmbSpecialty().setValue(voFilter.getSpecialty());
			
			form.cmbWard().setVisible(true);
			form.lblWard().setVisible(true);
			
			search();
		}
	}

	private void setSortOrderForColumn(Integer columnId, Integer sortOrderId)
	{
	
		SortOrder order;
		
		if (sortOrderId == 1) // 1 is ascending but for the form to work correct we need to reverse this
			order = SortOrder.DESCENDING;
		else
			order = SortOrder.ASCENDING;
		
		if (IDENTIFIER_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderIdentifier(order);
			sortColumn(IDENTIFIER_COLUMN_ID);
		}
		else if (SURNAME_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderSurname(order);
			sortColumn(SURNAME_COLUMN_ID);
		}
		else if (FORENAME_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderForename(order);
			sortColumn(FORENAME_COLUMN_ID);
		}
		else if (SEX_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderSex(order);
			sortColumn(SEX_COLUMN_ID);
		}
		else if (AGE_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderAge(order);
			sortColumn(AGE_COLUMN_ID);
		}
		else if (DOB_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderDOB(order);
			sortColumn(DOB_COLUMN_ID);
		}
		else if (WARD_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderWard(order);
			sortColumn(WARD_COLUMN_ID);
		}
		else if (CONSULTANT_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderConsultant(order);
			sortColumn(CONSULTANT_COLUMN_ID);
		}
		else if (ADMISSION_DATE_COLUMN_ID == columnId)
		{
			form.getLocalContext().setSortOrderAdmissionDate(order);
			sortColumn(ADMISSION_DATE_COLUMN_ID);
		}
	}

	protected void onGrdWardsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{					
		form.getGlobalContext().Core.setPatientShort(null);
		
		if (ConfigFlag.UI.INPATIENT_LIST_HIDE_ADT_ACTIONS.getValue())
		{
			selectionChanged();
		}
		else if (ConfigFlag.UI.INPAT_CREATE_CORRESPONDENCE_DETAILS.getValue())
		{
			selectionChanged();
		}
		else if (engine.hasRight(AppRight.CAN_DISCHARGE_INPATIENT_IN_RCHT))
		{
			selectionChanged();
		}
		else if (ConfigFlag.UI.MAXIMS_ADT_NO_INTERFACE.getValue())
		{
			selectionChanged();
		}
		else
		{
			showDemographics();
		}

	}

	private void showDemographics() 
	{
		/*if (form.grdInpatients().getValue() != null &&
				form.grdInpatients().getValue().getPasEventIsNotNull() &&
					form.grdInpatients().getValue().getPasEvent().getPatientIsNotNull())
		{
			PatientShort ps = form.grdInpatients().getValue().getPasEvent().getPatient();		
			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
			setPatientFilterDetails();
			setPatientInfoBar(ps);		
			engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
			
		}*/
		//wdev-18784
		if( form.dyngrdInpatients().getValue() != null && ((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEventIsNotNull() && ((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEvent().getPatientIsNotNull())
		{
			PatientShort ps = ((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEvent().getPatient();		
			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
			setPatientFilterDetails();
			setPatientInfoBar(ps);		
			engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
		}
		//-----------
		
	}

	private void selectionChanged()
	{
		setContextVariablesForSelection();
		setContextMenusState();
		if (form.isReadOnly())
			engine.showMessage("Read only form");
	}

	private void setContextMenusState() 
	{							
		DocumentStatus lkpStatus = null;
		
		//lkpStatus = form.grdInpatients().getSelectedRowIndex() < 0 ? null : form.grdInpatients().getSelectedRow().getValue().getPasEvent().getCspDocumentStatus();
		lkpStatus = form.dyngrdInpatients().getSelectedRow() != null && form.dyngrdInpatients().getSelectedRow().getValue() != null ? ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent().getCspDocumentStatus():null;  //wdev-18784
			
		boolean boolCanAddCSP = false;
		boolean boolCanViewCSP = false; 
		if (lkpStatus != null)
		{
			boolCanAddCSP = lkpStatus.equals(DocumentStatus.LETTERREQUIRED);
			boolCanViewCSP = lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE) || lkpStatus.equals(DocumentStatus.SIGNED);
			//boolCanPreviewLetter = lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE) || lkpStatus.equals(DocumentStatus.SIGNED);
			
			//TODO
			/*
			if (form.getLocalContext().getSelectedCorrespondenceInstanceIsNotNull())
				boolCanViewDocStatusHistory = form.getLocalContext().getSelectedCorrespondenceInstance().getCspStatusHistoryIsNotNull() ? true : false;
			else
				boolCanViewDocStatusHistory = false;
			*/
				
			//boolCanViewContacts = true;
			//boolCanSetLetterRequired = lkpStatus.equals(DocumentStatus.NOLETTERREQUIRED);
			//boolCanSetNOLetterRequired = lkpStatus.equals(DocumentStatus.LETTERREQUIRED);
		}
		
		//WDEV-22664
		form.getContextMenus().hideAllADTMenuMenuItems();
		form.getContextMenus().getADTMenuDemographicsItem().setVisible(form.dyngrdInpatients().getValue() != null);//WDEV-15975,wdev-18784
		if (ConfigFlag.UI.INPATIENT_LIST_HIDE_ADT_ACTIONS.getValue())
			return;
		
		enableAllContextMenus();		
		form.getContextMenus().getADTMenuAddItem().setVisible(boolCanAddCSP);
		form.getContextMenus().getADTMenuViewItem().setVisible(boolCanViewCSP);
		//form.getContextMenus().getADTMenuDemographicsItem().setVisible(form.grdInpatients().getValue() != null);//WDEV-15975
		
		
		form.getContextMenus().getADTMenuDischargeItem().setVisible(false);//wdev-15489
		if (engine.hasRight(AppRight.CAN_DISCHARGE_INPATIENT_IN_RCHT))
		{
			//form.getContextMenus().getADTMenuDischargeItem().setVisible(form.grdInpatients().getValue() != null);// 	WDEV-15975
			form.getContextMenus().getADTMenuDischargeItem().setVisible(form.dyngrdInpatients().getValue() != null);// 	WDEV-15975, wdev-18784
		}
		
		if (ConfigFlag.UI.MAXIMS_ADT_NO_INTERFACE.getValue())
		{
			/*if (form.grdInpatients().getSelectedRow() !=null
				&& form.grdInpatients().getSelectedRow().getValue() != null)
				form.getContextMenus().getADTMenuTransferItem().setVisible(true);

			if (form.grdInpatients().getSelectedRow() !=null
				&& form.grdInpatients().getSelectedRow().getValue() != null)
			{
				if(form.grdInpatients().getSelectedRow().getValue().getWardStays() == null
					|| (form.grdInpatients().getSelectedRow().getValue().getWardStaysIsNotNull()
						&& form.grdInpatients().getSelectedRow().getValue().getWardStays().size() == 0) // initialised but empty.
					|| (form.grdInpatients().getSelectedRow().getValue().getWardStaysIsNotNull()
						&& form.grdInpatients().getSelectedRow().getValue().getWardStays().size() == 1)	)
				{
					InpatientEpisodeVo voIP = domain.getInpatientEpisode(form.grdInpatients().getSelectedRow().getValue());
					if (voIP == null
						|| 
						(voIP != null
						&& voIP.getPasEventIsNotNull()
						&& voIP.getPasEvent().getLocationIsNotNull()
						&& form.grdInpatients().getSelectedRow().getValue() != null
						&& form.grdInpatients().getSelectedRow().getValue().getPasEvent() != null
						&&  ! voIP.getPasEvent().getLocation().equals(form.grdInpatients().getSelectedRow().getValue().getPasEvent().getLocation())))
					{
						engine.showMessage("This In-Patient record has already been updated by another user. The screen will be refreshed.");
						performSearch();
						return;
					}
					form.getContextMenus().getADTMenuCancelAdmissionItem().setVisible(true);
					
				}
			}*/
			//wdev-18784
			if( form.dyngrdInpatients().getSelectedRow() !=null
					&& form.dyngrdInpatients().getSelectedRow().getValue() != null)
					form.getContextMenus().getADTMenuTransferItem().setVisible(true);

				if( form.dyngrdInpatients().getSelectedRow() !=null
					&& form.dyngrdInpatients().getSelectedRow().getValue() != null)
				{
					if( ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getWardStays() == null
						|| (((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getWardStaysIsNotNull()
							&& ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getWardStays().size() == 0) // initialised but empty.
						|| ( ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getWardStaysIsNotNull()
							&& ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getWardStays().size() == 1)	)
					{
						InpatientEpisodeVo voIP = domain.getInpatientEpisode((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue());
						if (voIP == null
							|| 
							(voIP != null
							&& voIP.getPasEventIsNotNull()
							&& voIP.getPasEvent().getLocationIsNotNull()
							&& form.dyngrdInpatients().getSelectedRow().getValue() != null
							&& ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent() != null
							&&  ! voIP.getPasEvent().getLocation().equals(((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent().getLocation())))
						{
							engine.showMessage("This In-Patient record has already been updated by another user. The screen will be refreshed.");
							performSearch();
							return;
						}
						form.getContextMenus().getADTMenuCancelAdmissionItem().setVisible(true);
						
					}
				}

			if ( !engine.hasRight(AppRight.CAN_DISCHARGE_INPATIENT_IN_RCHT) && engine.hasRight(AppRight.MAXIMS_ADT_CAN_DISCHARGE))  //wdev-16427
			{
				//form.getContextMenus().getADTMenuDischargeItem().setVisible(form.grdInpatients().getValue() != null);
				form.getContextMenus().getADTMenuDischargeItem().setVisible(form.dyngrdInpatients().getValue() != null);	//wdev-18784
			}
		}

	}
	
	private void enableAllContextMenus()
	{
		form.getContextMenus().getADTMenuAddItem().setVisible(true);
		form.getContextMenus().getADTMenuAddItem().setEnabled(true);
		form.getContextMenus().getADTMenuViewItem().setEnabled(true);
	}

	private void clearContextVariables()
	{
		form.getLocalContext().setSelectedCorrespondenceInstance(null);

		form.getGlobalContext().Correspondence.setCorrespondenceDetails(null);
		form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(null);
		form.getGlobalContext().Correspondence.setGenerateFormMode(null);
		form.getGlobalContext().Core.setPasEvent(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);//WDEV-16020
	}

	private void setContextVariablesForSelection() 
	{
		clearContextVariables();
		InpatientEpisodeVo voInpatientListRow = null;
		//PatientShort voPatientShort = null;
		//PasContactVo voPasContact = null;
		PASEventRefVo voRefPasEvent = null;

		//if (form.grdInpatients().getSelectedRowIndex() >= 0 && form.grdInpatients().getRows().get(form.grdInpatients().getSelectedRowIndex()).getValue() != null) 					
		if( form.dyngrdInpatients().getSelectedRow().getValue() != null)			//wdev-18784
		{
			//voInpatientListRow = form.grdInpatients().getSelectedRow().getValue();
			voInpatientListRow = (InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue();
			//voPasContact = voInpatientListRow.getPasContact();
			//voPatientShort = voInpatientListRow.getPasEvent().getPatient();
			voRefPasEvent = voInpatientListRow.getPasEvent();
					
			/*
			if (voRefPasEvent == null && voPasContact != null)
			{
				voRefPasEvent = getOrCreatePasEventForPasContact(voPasContact, voPatient, patientListType);			
	
				if (patientListType.equals(PatientListType.INPATIENTLIST))
				{
					voInpatientListRow.setPasContact(voPasContact);
					voInpatientListRow.setPasEvent(voRefPasEvent);
					form.grdInpatients().setValue(voInpatientListRow);					
				}
				else
				{
					voOutPatientListRow.setPasContact(voPasContact);
					voOutPatientListRow.setPasEvent(voRefPasEvent);
					form.lyrPatientLists().tabOutpatientList().grdOPList().setValue(voOutPatientListRow);
				}
	
				form.getGlobalContext().Core.setPasEvent(voRefPasEvent);			
	
			}
			else
			*/
			
			form.getGlobalContext().Core.setPasEvent(voRefPasEvent);
			//wdev-16427
			if( voRefPasEvent != null)
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortVoByPasEventId(voRefPasEvent));
			if (form.getGlobalContext().Core.getPatientShort() == null)
				form.getGlobalContext().Core.setPatientShort(voInpatientListRow.getPasEvent().getPatient());
			//----------
			form.getLocalContext().setSelectedCorrespondenceInstance(domain.getCorrespondenceDetailsByPasEvent(voRefPasEvent));
			form.getGlobalContext().Correspondence.setCorrespondenceDetails(form.getLocalContext().getSelectedCorrespondenceInstance());
	
		}
	}				
	

	private void setPatientFilterDetails()
	{		
		PatientFilter voPatFilter = new PatientFilter();		
		//PatientShort patient = form.grdInpatients().getValue().getPasEvent().getPatient();
		PatientShort patient = ((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEvent().getPatient();		//wdev-18784
		voPatFilter.setForename(patient.getNameIsNotNull() ? patient.getName().getForename() : null);
		voPatFilter.setSurname(patient.getNameIsNotNull() ? patient.getName().getSurname() : null);
		voPatFilter.setSex(patient.getSex());
		voPatFilter.setDob(patient.getDob());
		
		form.getGlobalContext().Core.setPatientFilter(voPatFilter);
	}
	
	private void setPatientInfoBar(PatientShort ps)
	{
		if (ps.getIsDead() != null && ps.getIsDead().booleanValue())
		{
			engine.setPatientInfo(ps.getPatientInfo(), ims.configuration.gen.ConfigFlag.UI.RIP_INFO_COLOUR.getValue());
		}
		else
		{
			engine.setPatientInfo(ps.getPatientInfo());
		}
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();

	}

	private void clear()
	{
		clearSearchCriteria();
		clearPatientList();
		
		form.getContextMenus().hideAllADTMenuMenuItems();
		form.getContextMenus().getADTMenuViewItem().setVisible(false);
		form.getContextMenus().getADTMenuDemographicsItem().setVisible(false);
	}

	private void setTotalLabel(int count)
	{
		form.lblTotal().setValue("Total : " + count);		
	}

	private void clearSearchCriteria()
	{
		//WDEV-15526
		form.cmbType().setValue(null);
		form.txtIdentifier().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename().setValue(null);
		
		form.cmbWard().setVisible(false);
		form.lblWard().setVisible(false);
		form.cmbHospital().setValue(null);
		form.cmbWard().clear();
		form.cmbWard().setValue(null);
		form.qmbConsultants().clear();
		form.cmbSpecialty().setValue(null);
		form.getGlobalContext().STHK.setCurrentInpatientListFilter(null);

	}

	protected void onCmbHospitalFilterValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		hospitalValueChanged();
	}

	private void hospitalValueChanged()
	{
		if (form.cmbHospital().getValue() == null)
		{
			form.lblWard().setVisible(false);
			form.cmbWard().setVisible(false);
		}
		else
		{
			form.lblWard().setVisible(true);
			form.cmbWard().setVisible(true);

			clearPatientList();

			populateWardCombo();
		}
	}

	private void populateHospitalListCombo()
	{
		form.cmbHospital().clear();
		
		LocationLiteVoCollection voLocColl = domain.listActiveHospitals();
		if (voLocColl != null)
		{
			for (LocationLiteVo hospital : voLocColl)
			{
				form.cmbHospital().newRow(hospital, hospital.getName());
			}
		}
		
		ILocation location = engine.getCurrentLocation();
		if (location != null)
		{
			LocationLiteVo hospitalForCurrentLocation = domain.getHospitalForCurrentLocation(location.getID());
			form.cmbHospital().setValue(hospitalForCurrentLocation);
		}
		
		if (form.cmbHospital().getValue() != null)
			hospitalValueChanged();
	}

	private void populateWardCombo()
	{
		form.cmbWard().clear();

		if (form.cmbHospital().getValue().getType() != null && form.cmbHospital().getValue().getType().equals(LocationType.HOSP))
		{
			LocShortMappingsVoCollection voLocShortMapColl = domain.listActiveWardsForHospital(form.cmbHospital().getValue());
			if (voLocShortMapColl != null)
			{
				for (int i = 0; i < voLocShortMapColl.size(); i++)
				{
					LocShortMappingsVo voLocShortMap = voLocShortMapColl.get(i);
					form.cmbWard().newRow(voLocShortMap, voLocShortMap.getName());
				}
			}
		}
		
		ILocation currentLocation = engine.getCurrentLocation();
		LocationLiteVo currentWard = domain.getWard((LocationRefVo) currentLocation);
		if (currentWard != null && LocationType.WARD.equals(currentWard.getType()))			// Check ward LocationType because the function "domain.getWard" will return any location passed as argument
		{																					// Whoever named & coded that function was a "GENIUS"
			form.cmbWard().setValue(currentWard);
		}
	}
	
	private void initialize()
	{
		form.lblWard().setVisible(false);
		form.cmbWard().setVisible(false);

		prePopulateControls();

		//PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		//form.grdInpatients().setcolHospnumCaption(dispIdType.getText());
		
		
		//WDEV-12991
		//if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		//	form.grdInpatients().setcolAdmissionDateCaption("Admission Reason");
		
		//wdev-18784
		initializeDynPatGrid();
	}

	private void prePopulateControls()
	{
		populateHospitalListCombo();
		prePopulateConsultantCombo();

	}
	private void prePopulateConsultantCombo()
	{
		Object currUser = domain.getHcpUser();
		if (currUser instanceof MedicVo && MedicGrade.CONS.equals(((MedicVo)currUser).getGrade()))
		{
			HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
			form.qmbConsultants().clear();
			form.qmbConsultants().newRow(hcpUser,hcpUser.getName()!= null ? hcpUser.getName().toString() : "");
			form.qmbConsultants().setValue(hcpUser);
		}
		
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		search();
	}

	private void search()
	{
		clearContextVariables();//WDEV-15975

		performSearch();
		
	}

	private void performSearch()
	{
		clearPatientList();
		form.getContextMenus().hideAllADTMenuMenuItems();

		//WDEV-15526
		if (form.txtIdentifier().getValue() != null && form.cmbType().getValue() == null)
		{
			engine.showMessage("Please select a Patient ID Type");
			return ;
		}
		if (form.txtSurname().getValue() == null && form.txtForename().getValue() != null)
		{
			engine.showMessage("Please enter a valid Surname search string.");
			return;
		}
	
		if (form.cmbWard().getValue() == null && form.qmbConsultants().getValue() == null && form.cmbSpecialty().getValue() == null)
		{
			if (form.txtIdentifier().getValue() == null)
			{
				if (form.txtSurname().getValue() == null)
				{
					engine.showMessage("Valid search criteria must be specified. A minimum of Surname or ID or Hospital/Ward/Consultant/Specialty is required to search.");//WDEV-15644 //WDEV-15621
					return;
				}

				// Mandatory Search on forname
				if((ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue())
					&&(form.txtForename().getValue() == null || form.txtForename().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
				{
					engine.showMessage("Please enter a valid Forename search string");
					return;
				}
			}
		}

		if (form.txtIdentifier().getValue() == null
			&& form.txtSurname().getValue() == null)
		{
			if (form.cmbHospital().getValue() == null)
			{
				engine.showMessage("Valid search criteria must be specified. A minimum of Surname or ID or Hospital/Ward/Consultant/Specialty is required to search.");//WDEV-15644 //WDEV-15621
				return;
			}
			if (form.cmbWard().getValue() == null && form.qmbConsultants().getValue() == null && form.cmbSpecialty().getValue() == null)
			{
				engine.showMessage("Valid search criteria must be specified. A minimum of Surname or ID or Hospital/Ward/Consultant/Specialty is required to search.");//WDEV-15644 //WDEV-15621
				return;
			}
		}
		
		//WDEV-15644
		if (form.cmbType().getValue()!=null && form.txtIdentifier().getValue()!=null)
		{
			form.txtSurname().setValue(null);
			form.txtForename().setValue(null);
			
			form.cmbWard().setVisible(false);
			form.lblWard().setVisible(false);
			form.cmbHospital().setValue(null);
			form.cmbWard().clear();
			form.cmbWard().setValue(null);
			form.qmbConsultants().clear();
			form.cmbSpecialty().setValue(null);
		}
		
		//WDEV-15526
		//populateListControl(domain.listInPatients(form.cmbHospital().getValue(), form.cmbWard().getValue(), form.qmbConsultants().getValue(),form.cmbSpecialty().getValue()));
		
		storeSearchCriteria();
		
		InpatientEpisodeVoCollection inpatients = domain.listInpatientsBySearchCriteria(form.cmbType().getValue(),form.txtIdentifier().getValue(),form.txtSurname().getValue(),form.txtForename().getValue(),form.cmbHospital().getValue(), form.cmbWard().getValue(), form.qmbConsultants().getValue(),form.cmbSpecialty().getValue());
		
		if (inpatients == null || inpatients.size() == 0)
		{
			engine.showMessage("No matching patients found.");
			return;
		}

		populateListControl(inpatients);
		
		CurrentInpatientListFilterVo voFilter = form.getGlobalContext().STHK.getCurrentInpatientListFilter();
		
		if (voFilter.getColumnSortOrder() != null)
		{
			setSortOrderForColumn(voFilter.getColumnSortOrder().getColumnId(), voFilter.getColumnSortOrder().getSortOrder());
		}
	}

	private void populateListControl(InpatientEpisodeVoCollection voInpatientEpisColl)
	{

		if (voInpatientEpisColl != null)
		{
			
			//GenForm.grdInpatientsRow row = null;
			DynamicGridRow row1 = null;	//wdev-18784
			for (int i = 0; i < voInpatientEpisColl.size(); i++)
			{
				InpatientEpisodeVo voInpatient = voInpatientEpisColl.get(i);
				if (voInpatient.getPasEvent().getPatientIsNotNull())
				{
					//row = form.grdInpatients().getRows().newRow();
					row1 = form.dyngrdInpatients().getRows().newRow();	//wdev-18784
					
					
					
					if(voInpatient.getIsOnLeaveIsNotNull() && voInpatient.getIsOnLeave().equals(Boolean.TRUE))
					{
						//row.setcolLeave(form.getImages().Core.Home);
						//row.setTooltipForcolLeave("Patient is currently on Leave");
						DynamicGridCell cellleave = row1.getCells().newCell(getColumnDynGrid(COL_LEAVE), DynamicCellType.IMAGE); //wdev-18784
						cellleave.setValue(form.getImages().Core.Home);			//wdev-18784
						cellleave.setTooltip("Patient is currently on Leave");	//wdev-18784
					
					}
					DynamicGridCell cellForename = row1.getCells().newCell(getColumnDynGrid(COL_FORENAME), DynamicCellType.STRING); 	//wdev-18784
					DynamicGridCell cellSurname = row1.getCells().newCell(getColumnDynGrid(COL_SURNAME), DynamicCellType.STRING); 	//wdev-18784
					cellForename.setReadOnly(true);			//wdev-18784
					cellSurname.setReadOnly(true);			//wdev-18784
					if (voInpatient.getPasEvent().getPatient().getNameIsNotNull())
					{
						
						cellForename.setValue(voInpatient.getPasEvent().getPatient().getName().getForename());								//wdev-18784
						cellForename.setTooltip(voInpatient.getPasEvent().getPatient().getName().getForename());							//wdev-18784
						
						
						//row.setcolForename(voInpatient.getPasEvent().getPatient().getName().getForename());
						//row.setTooltipForcolForename(voInpatient.getPasEvent().getPatient().getName().getForename());
						
						
						cellSurname.setValue(voInpatient.getPasEvent().getPatient().getName().getSurname());								//wdev-18784
						cellSurname.setTooltip(voInpatient.getPasEvent().getPatient().getName().getSurname());								//wdev-18784
						
						
						//row.setcolSurname(voInpatient.getPasEvent().getPatient().getName().getSurname());
						//row.setTooltipForcolSurname(voInpatient.getPasEvent().getPatient().getName().getSurname());
					}

					ims.core.vo.PatientId voPatId = voInpatient.getPasEvent().getPatient().getDisplayId();
					DynamicGridCell cellHospNum = row1.getCells().newCell(getColumnDynGrid(COL_HOSPITALNO), DynamicCellType.STRING); 	//wdev-18784
					cellHospNum.setReadOnly(true);			//wdev-18784
					if (voPatId != null)
					{
						//row.setcolHospnum(voPatId.getValue());
						cellHospNum.setValue(voPatId.getValue());	//wdev-18784
						
						
					}
					
					//WDEV-16710
					StringBuffer patientIdentifiers = new StringBuffer();
					PatientIdCollection identifiers = voInpatient.getPasEvent().getPatient().getIdentifiers();
					
					if (identifiers != null)
					{
						for (int a = 0; a < identifiers.size(); a++)
						{
							patientIdentifiers.append("<b>" + identifiers.get(a).getType().toString() + ":</b> " + identifiers.get(a).getValue() + "<br>");
						}
					}
					
					//row.setTooltipForcolHospnum(patientIdentifiers.toString());
					cellHospNum.setTooltip(patientIdentifiers.toString());	//wdev-18784		

					DynamicGridCell cellDob = row1.getCells().newCell(getColumnDynGrid(COL_DOB), DynamicCellType.STRING); 	//wdev-18784
					cellDob.setReadOnly(true);			//wdev-18784
					if (voInpatient.getPasEvent().getPatient().getDobIsNotNull())
					{
						//row.setcolDob(voInpatient.getPasEvent().getPatient().getDob().toString());
						//row.setTooltipForcolDob(voInpatient.getPasEvent().getPatient().getDob().toString());
						
						cellDob.setValue(voInpatient.getPasEvent().getPatient().getDob().toString());		//wdev-18784
						cellDob.setTooltip(voInpatient.getPasEvent().getPatient().getDob().toString());		//wdev-18784
						
					}

					DynamicGridCell cellAge = row1.getCells().newCell(getColumnDynGrid(COL_AGE), DynamicCellType.STRING); 	//wdev-18784
					cellAge.setReadOnly(true);		//wdev-18784
					String patientAgeTxt = voInpatient.getPasEvent().getPatient().calculateAgeText();					
					if (patientAgeTxt != null) //WDEV-22664
					{		
						//row.setColAge(patientAge);
						//row.setTooltipForColAge(patientAge);
						
						cellAge.setValue(patientAgeTxt);
						cellAge.setTooltip(patientAgeTxt);						
					}
					DynamicGridCell cellSex = row1.getCells().newCell(getColumnDynGrid(COL_SEX), DynamicCellType.STRING); 	//wdev-18784
					cellSex.setReadOnly(true);			//wdev-18784
					if (voInpatient.getPasEvent().getPatient().getSexIsNotNull())
					{
						//row.setcolSex(voInpatient.getPasEvent().getPatient().getSex().getText());
						//row.setTooltipForcolSex(voInpatient.getPasEvent().getPatient().getSex().getText());
						
						cellSex.setValue(voInpatient.getPasEvent().getPatient().getSex().getText());	//wdev-18784
						cellSex.setTooltip(voInpatient.getPasEvent().getPatient().getSex().getText());	//wdev-18784
						
					}

					DynamicGridCell cellWard = row1.getCells().newCell(getColumnDynGrid(COL_WARD), DynamicCellType.STRING); 	//wdev-18784
					cellWard.setReadOnly(true);			//wdev-18784
					if (voInpatient.getPasEvent().getLocationIsNotNull())
					{
						//row.setcolWard(voInpatient.getPasEvent().getLocation().getName());
						//row.setTooltipForcolWard(voInpatient.getPasEvent().getLocation().getName());
						
						
						cellWard.setValue(voInpatient.getPasEvent().getLocation().getName());			//wdev-18784
						cellWard.setTooltip(voInpatient.getPasEvent().getLocation().getName());			//wdev-18784
						
					}

					DynamicGridCell cellConsultant = row1.getCells().newCell(getColumnDynGrid(COL_CONSULTANT), DynamicCellType.STRING); 	//wdev-18784
					cellConsultant.setReadOnly(true);			//wdev-18784
					if (voInpatient.getPasEvent().getConsultantIsNotNull())
					{
						//row.setcolConsultant(voInpatient.getPasEvent().getConsultant().getName().toString());
						//row.setTooltipForcolConsultant(voInpatient.getPasEvent().getConsultant().getName().toString());
						
						cellConsultant.setValue(voInpatient.getPasEvent().getConsultant().getName().toString());	//wdev-18784
						cellConsultant.setTooltip(voInpatient.getPasEvent().getConsultant().getName().toString());	//wdev-18784
						
						
					}
					DynamicGridCell cellAdmissionDate = row1.getCells().newCell(getColumnDynGrid(COL_ADMISSION_DATE), DynamicCellType.STRING); 	//wdev-18784
					cellAdmissionDate.setReadOnly(true);			//wdev-18784	
					//WDEV-12991
					if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
					{
						//row.setcolAdmissionDate(voInpatient.getReasonForAdmission());
						//row.setTooltipForcolAdmissionDate(voInpatient.getReasonForAdmission());
						
						cellAdmissionDate.setValue(voInpatient.getReasonForAdmission());		//wdev-18784
						cellAdmissionDate.setTooltip(voInpatient.getReasonForAdmission());		//wdev-18784
						
					}
					else if (voInpatient.getAdmissionDateTimeIsNotNull())
					{
						//row.setcolAdmissionDate(voInpatient.getAdmissionDateTime().getDate().toString());
						//row.setTooltipForcolAdmissionDate(voInpatient.getAdmissionDateTime().getDate().toString());
						
						cellAdmissionDate.setValue(voInpatient.getAdmissionDateTime().getDate().toString());		//wdev-18784
						cellAdmissionDate.setTooltip(voInpatient.getAdmissionDateTime().getDate().toString());		//wdev-18784
					}

					if (voInpatient.getPasEvent().getPatient().getIsDead() != null && voInpatient.getPasEvent().getPatient().getIsDead().booleanValue())
					{
						//row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
						row1.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());		//wdev-18784
					}
					
					
					//wdev-18784
					if( voInpatient.getPasEventIsNotNull() && voInpatient.getPasEvent().getPatientIsNotNull() && voInpatient.getPasEvent().getPatient().getDementiaWorklistStatusIsNotNull())
					{
						
						DynamicGridCell cellDementia = row1.getCells().newCell(getColumnDynGrid(COL_DEMENTIA), DynamicCellType.IMAGEBUTTON); 	//wdev-18784
						cellDementia.setValue(form.getImages().Admin.Complication);//WDEV-19251 
						cellDementia.setAutoPostBack(true);
						StringBuffer strDementia = new StringBuffer();
						strDementia.append("<b>" + "Outstanding Dementia Assessment"  + "</b> " + "<br>"); //WDEV-19251 
						strDementia.append("<b>" + "Dementia Status :"  + "</b> " + voInpatient.getPasEvent().getPatient().getDementiaWorklistStatus().getText() + "<br>");
						strDementia.append("<b>" + "Breach Date Time :"  + "</b> " + (voInpatient.getPasEvent().getPatient().getDementiaBreachDateTimeIsNotNull() ? voInpatient.getPasEvent().getPatient().getDementiaBreachDateTime().toString():"") + "<br>");
						cellDementia.setTooltip(strDementia.toString());
						
															
					}
					
					
					//---------------
					DynamicGridCell celldocStatus = row1.getCells().newCell(getColumnDynGrid(COL_DOCSTATUS), DynamicCellType.IMAGE); 	//wdev-18784
					if (ConfigFlag.UI.INPAT_CREATE_CORRESPONDENCE_DETAILS.getValue())
					{
						if (voInpatient.getPasEventIsNotNull()
							&& voInpatient.getPasEvent().getCspDocumentStatusIsNotNull())
						{
							//row.setcolDocStatus(voInpatient.getPasEvent().getCspDocumentStatus().getImage() != null ? voInpatient.getPasEvent().getCspDocumentStatus().getImage() : null);
							//row.setTooltipForcolDocStatus(voInpatient.getPasEvent().getCspDocumentStatus().getText());
							
							celldocStatus.setValue(voInpatient.getPasEvent().getCspDocumentStatus().getImage() != null ? voInpatient.getPasEvent().getCspDocumentStatus().getImage() : null);  //wdev-18784
							celldocStatus.setTooltip(voInpatient.getPasEvent().getCspDocumentStatus().getText());	//wdev-18784
						}
					}

					//row.setValue(voInpatient);
					row1.setValue(voInpatient);		//wdev-18784
				}
			}
		}
		
		//setTotalLabel(form.grdInpatients().getRows().size());
		setTotalLabel(form.dyngrdInpatients().getRows().size());		//wdev-18784
	}

	private void storeSearchCriteria() 
	{
		CurrentInpatientListFilterVo voCriteria;
		
		if (form.getGlobalContext().STHK.getCurrentInpatientListFilter() == null)
			voCriteria = new CurrentInpatientListFilterVo();
		else
			voCriteria = form.getGlobalContext().STHK.getCurrentInpatientListFilter();
		
		voCriteria.setConsultant(form.qmbConsultants().getValue());
		voCriteria.setHospital(form.cmbHospital().getValue());
		voCriteria.setWard(form.cmbWard().getValue());
		voCriteria.setSpecialty(form.cmbSpecialty().getValue());
		
		//WDEV-15526
		voCriteria.setIDType(form.cmbType().getValue());
		voCriteria.setHospNum(form.txtIdentifier().getValue());
		voCriteria.setSurname(form.txtSurname().getValue());
		voCriteria.setForename(form.txtForename().getValue());
		
		form.getGlobalContext().STHK.setCurrentInpatientListFilter(voCriteria);
	}

	private void clearPatientList()
	{
		//form.grdInpatients().getRows().clear();
		form.dyngrdInpatients().getRows().clear();	//wdev-18784
		setTotalLabel(0);
	}

	protected void onQmbConsultantsTextSubmited(String value) throws PresentationLogicException 
	{
		if (value != null)
		{
			HcpFilter voHCPFilter = new HcpFilter();
			PersonName name = new PersonName();
			name.setSurname(value);
			voHCPFilter.setQueryName(name);
			voHCPFilter.setHcpType(HcpDisType.MEDICAL);
			
			HcpLiteVoCollection voColl = domain.listHCPs(voHCPFilter);

			form.qmbConsultants().clear();
			for (int i = 0; i < voColl.size(); i++)
			{
				form.qmbConsultants().newRow(voColl.get(i), voColl.get(i).getName().toString());
			}
			if (voColl.size() == 1)
				form.qmbConsultants().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbConsultants().showOpened();
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.InpatientTransferDialog)
			&& result.equals(DialogResult.OK))
		{
			PatientShort ps = null;
			try
			{
				//wdev-18784
				if( form.dyngrdInpatients().getValue() != null
					&& ((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEventIsNotNull()
					&& ((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEvent().getPatientIsNotNull())
			 		{
			 			ps = domain.getPatient(((InpatientEpisodeVo)form.dyngrdInpatients().getValue()).getPasEvent().getPatient());
				 		if (ps != null)
				 			setPatientInfoBar(ps);		
			 		}
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
			}

			performSearch();
		}
		else if (formName.equals(form.getForms().Admin.RCHTManualDischargeDialog)
			&& result.equals(DialogResult.OK))
		{
			if( domain.inpatientWasDischarged(form.getGlobalContext().Core.getPatientShort()) == true) 	//wdev-15823
				engine.showMessage(" The In-Patient has been discharged by another user. The screen will be refreshed. ");								//wdev-15823
			else
				//dischargeInpatientRecord(form.grdInpatients().getValue(), form.getGlobalContext().Core.getRCHTInpatientDischarge());
				dischargeInpatientRecord((InpatientEpisodeVo)form.dyngrdInpatients().getValue(), form.getGlobalContext().Core.getRCHTInpatientDischarge());		//wdev-18784
			
			search();
		}
		else if(formName.equals(form.getForms().Clinical.DementiaAssessmentFormDialog))			//wdev-18784
		{
			search();
		}
		else if (result.equals(DialogResult.OK) || result.equals(DialogResult.YES))
			search();
		
		setContextMenusState();//WDEV-15975
	}

	private void dischargeInpatientRecord(InpatientEpisodeVo value, RCHTInpatientDischargeVo inpatientDischarge) 
	{
		PatientShort pat = form.getGlobalContext().Core.getPatientShort();
		DischargedEpisodeVo disc = new DischargedEpisodeVo();
		disc.setDischargeDateTime(inpatientDischarge.getDischargeDateTime());
		disc.setDischargeDestination(inpatientDischarge.getDischargeDestination());
		disc.setMethodOfDischarge(inpatientDischarge.getMethodOfDischarge());
		//wdev-18784
		if( pat != null)
		{
			pat.setDementiaBreachDateTime(null);
			pat.setDementiaWorklistStatus(null);
		}
		//-----------
		
		String[] errs = pat.validate();
		if (errs != null)	
		{
			engine.showErrors(errs);
		}
		errs = disc.validate();
		if (errs != null)
		{
			engine.showErrors(errs);
		}
		try
		{
			domain.dischargePatient(pat, disc);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if ((ConfigFlag.UI.INPAT_CREATE_CORRESPONDENCE_DETAILS.getValue()
				|| engine.hasRight(AppRight.CAN_DISCHARGE_INPATIENT_IN_RCHT) 
				|| ConfigFlag.UI.MAXIMS_ADT_NO_INTERFACE.getValue() 
			)
			&& form.getGlobalContext().Core.getPatientShortIsNotNull()
			)
		{
			switch(menuItemID)
			{	
				case GenForm.ContextMenus.ADTMenu.Add:
					addDocumentDetails();
					break;
				case GenForm.ContextMenus.ADTMenu.View:
					viewDocumentDetails();
					break;
				case GenForm.ContextMenus.ADTMenu.Demographics:
					showDemographics();
					break;
				case GenForm.ContextMenus.ADTMenu.Discharge:
					if( !engine.hasRight(AppRight.CAN_DISCHARGE_INPATIENT_IN_RCHT) && ConfigFlag.UI.MAXIMS_ADT_NO_INTERFACE.getValue() && engine.hasRight(AppRight.MAXIMS_ADT_CAN_DISCHARGE))  //wdev-16427
						dischargeInpatientForLeopardstown();
					else
						dischargeInpatientForRCHT();
					break;
				case GenForm.ContextMenus.ADTMenu.Transfer:
					transferPatient();
					break;
				case GenForm.ContextMenus.ADTMenu.CancelAdmission:
					cancelAdmission();
					break;
			}	
		}
	}
	
	private void cancelAdmission()
	{
		StringBuffer sb = new StringBuffer();
		
		InpatientEpisodeVo voIP = domain.getInpatientEpisode((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue());		//wdev-18784
		if (voIP == null
			|| 
			(voIP != null
			&& voIP.getPasEventIsNotNull()
			&& voIP.getPasEvent().getLocationIsNotNull()
			&& form.dyngrdInpatients().getSelectedRow().getValue() != null
			&& ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent() != null
			&&  ! voIP.getPasEvent().getLocation().equals(((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent().getLocation())))   //wdev-18784
		{
			engine.showMessage("This In-Patient record has already been updated by another user. The screen will be refreshed.");
			performSearch();
			return;
		}

		if (voIP != null
			&& voIP.getPasEventIsNotNull()
			&& voIP.getPasEvent().getLocationIsNotNull())
		{
			sb.append("Confirm admission to ward '");
			sb.append(voIP.getPasEvent().getLocation().getName());
			sb.append("' on '");
			sb.append(voIP.getAdmissionDateTimeIsNotNull() ? voIP.getAdmissionDateTime().toString() : "");
			sb.append("' for patient '");
		}
		else
			sb.append("Confirm admission for ");
		
		if (voIP != null
			&& voIP.getPasEventIsNotNull()
			&& voIP.getPasEvent().getPatientIsNotNull()
			&& voIP.getPasEvent().getPatient().getNameIsNotNull())
			sb.append(voIP.getPasEvent().getPatient().getName().toString());
		
		sb.append("' is to be cancelled.");
		
		engine.showMessage(sb.toString(), "Cancel Admission ", MessageButtons.CONFIRMCANCEL, MessageIcon.QUESTION);
	}

	private void transferPatient()
	{
		InpatientEpisodeWithICPInfoVo voIp = domain.getInpatientEpisodeWithICPInfo((InpatientEpisodeRefVo)form.dyngrdInpatients().getSelectedRow().getValue());		//wdev-18784
		if (voIp == null
			|| 
			(voIp != null
			&& voIp.getPasEventIsNotNull()
			&& voIp.getPasEvent().getLocationIsNotNull()
			&& form.dyngrdInpatients().getSelectedRow().getValue() != null
			&& ((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent() != null
			&&  ! voIp.getPasEvent().getLocation().equals(((InpatientEpisodeVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPasEvent().getLocation())))    //wdev-18784
		{
			engine.showMessage("This In-Patient record has already been updated by another user. The screen will be refreshed.");
			performSearch();
			return;
		}
		
		if (voIp != null)
			engine.open(form.getForms().Core.InpatientTransferDialog, new Object[]{ voIp});
	}

	private void dischargeInpatientForRCHT() 
	{
		engine.open(form.getForms().Admin.RCHTManualDischargeDialog);
	}
	//wdev-16427
	private void dischargeInpatientForLeopardstown()
	{
		
		engine.open(form.getForms().Core.ADTPatientAdmission,new Object[]{ new Boolean(true)});
	}

	private void addDocumentDetails() 
	{				
		form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.EDIT);	
		engine.open(form.getForms().Correspondence.CorrespondenceDetail);		
	}
	
	private void viewDocumentDetails()
	{
		form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.VIEW);
		engine.open(form.getForms().Correspondence.CorrespondenceDetail);
	}
	
	@Override
	protected void onBtnPrintReportClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		
		if(form.cmbWard().getValue()==null)		
		{
			engine.showMessage("Please select a ward !");
			return;
		}
		
		//we need a better way to do this
		Object[] obj = domain.getSystemReportAndTemplate(new Integer(297));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
		client.addSeed(new SeedValue("Ward",  form.cmbWard().getValue().getID_Location().intValue(), Integer.class));
		client.addSeed(new SeedValue("Consultant",  form.qmbConsultants().getValue()==null?null:form.qmbConsultants().getValue().getIMosId().intValue(), Integer.class));
		client.addSeed(new SeedValue("Specialty",  form.cmbSpecialty().getValue()==null?null:form.cmbSpecialty().getValue().getID(), Integer.class));
		
		
		
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		engine.openUrl(resultUrl);
		
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		//Currently only one message box on this form so .....its a CancelAdmission
		if (result.equals(DialogResult.CONFIRM))
		{
			PatientShort pat = form.getGlobalContext().Core.getPatientShort();
			if (pat == null)
			{
				search();
				return;
			}
			String[] errs = pat.validate();
			
			if (errs != null)	
			{
				engine.showErrors(errs);
				return;
			}

			try
			{
				domain.cancelAdmission(pat);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			search();
		}
		else
			search();// refresh - could have pressed cancel - and i/p reord was removed in another session.

	}

	/*@Override
	protected void onGrdInpatientsGridHeaderClicked(int column) throws PresentationLogicException
	{
		InpatientEpisodeVo temp = form.grdInpatients().getValue();
		
		sortColumn(column);
		
		form.grdInpatients().setValue(temp);
		
	}*/

	private void sortColumn(int column)
	{
		if (column == IDENTIFIER_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderIdentifier() == null)
				form.getLocalContext().setSortOrderIdentifier(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)		//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());	//wdev-18784	
			
			collectionToSort.sort(new IdentifierComparator(form.getLocalContext().getSortOrderIdentifier()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderIdentifier()))
			{
				form.getLocalContext().setSortOrderIdentifier(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderIdentifier(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(IDENTIFIER_COLUMN_ID, form.getLocalContext().getSortOrderIdentifier());
			
			form.dyngrdInpatients().getRows().clear();	//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == SURNAME_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderSurname() == null)
				form.getLocalContext().setSortOrderSurname(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)								 //wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());	 //wdev-18784	
			
			collectionToSort.sort(new SurnameComparator(form.getLocalContext().getSortOrderSurname()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderSurname()))
			{
				form.getLocalContext().setSortOrderSurname(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderSurname(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(SURNAME_COLUMN_ID, form.getLocalContext().getSortOrderSurname());
			
			form.dyngrdInpatients().getRows().clear();		//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == FORENAME_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderForename() == null)
				form.getLocalContext().setSortOrderForename(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)									//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());		//wdev-18784
			
			collectionToSort.sort(new ForenameComparator(form.getLocalContext().getSortOrderForename()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderForename()))
			{
				form.getLocalContext().setSortOrderForename(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderForename(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(FORENAME_COLUMN_ID, form.getLocalContext().getSortOrderForename());
			
			form.dyngrdInpatients().getRows().clear();				//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == SEX_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderSex() == null)
				form.getLocalContext().setSortOrderSex(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)								//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());	//wdev-18784
			
			collectionToSort.sort(new SexComparator(form.getLocalContext().getSortOrderSex()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderSex()))
			{
				form.getLocalContext().setSortOrderSex(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderSex(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(SEX_COLUMN_ID, form.getLocalContext().getSortOrderSex());
			
			form.dyngrdInpatients().getRows().clear();															//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == AGE_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderAge() == null)
				form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)								//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());	//wdev-18784	
			
			collectionToSort.sort(new DOBComparator(form.getLocalContext().getSortOrderAge()));
			form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(AGE_COLUMN_ID, form.getLocalContext().getSortOrderAge());
			
			form.dyngrdInpatients().getRows().clear();		//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == DOB_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderDOB() == null)
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)								//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());	//wdev-18784	
			
			collectionToSort.sort(new DOBComparator(form.getLocalContext().getSortOrderDOB()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDOB()))
			{
				form.getLocalContext().setSortOrderDOB(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(DOB_COLUMN_ID, form.getLocalContext().getSortOrderDOB());
			
			form.dyngrdInpatients().getRows().clear();					//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == WARD_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderWard() == null)
				form.getLocalContext().setSortOrderWard(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)							//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());					//wdev-18784	
			
			collectionToSort.sort(new WardComparator(form.getLocalContext().getSortOrderWard()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderWard()))
			{
				form.getLocalContext().setSortOrderWard(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderWard(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(WARD_COLUMN_ID, form.getLocalContext().getSortOrderWard());
			
			form.dyngrdInpatients().getRows().clear();				//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == CONSULTANT_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderConsultant() == null)
				form.getLocalContext().setSortOrderConsultant(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)										//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());			//wdev-18784	
			
			collectionToSort.sort(new ConsultantComparator(form.getLocalContext().getSortOrderConsultant()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderConsultant()))
			{
				form.getLocalContext().setSortOrderConsultant(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderConsultant(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(CONSULTANT_COLUMN_ID, form.getLocalContext().getSortOrderConsultant());
			
			form.dyngrdInpatients().getRows().clear();					//wdev-18784
			populateListControl(collectionToSort);
		}
		else if (column == ADMISSION_DATE_COLUMN_ID)
		{
			
			if(form.getLocalContext().getSortOrderAdmissionDate() == null)
				form.getLocalContext().setSortOrderAdmissionDate(SortOrder.ASCENDING);
			
			InpatientEpisodeVoCollection collectionToSort = new InpatientEpisodeVoCollection();
			
			for (int i = 0 ; i < form.dyngrdInpatients().getRows().size() ; i++)								//wdev-18784
				collectionToSort.add((InpatientEpisodeVo)form.dyngrdInpatients().getRows().get(i).getValue());	//wdev-18784	
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				collectionToSort.sort(new AdmissionDateStringComparator(form.getLocalContext().getSortOrderAdmissionDate()));
			}
			else
				collectionToSort.sort(new AdmissionDateComparator(form.getLocalContext().getSortOrderAdmissionDate()));
			
			if(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAdmissionDate()))
			{
				form.getLocalContext().setSortOrderAdmissionDate(SortOrder.DESCENDING);
			}
			else
				form.getLocalContext().setSortOrderAdmissionDate(SortOrder.ASCENDING);
			
			addColumnSortToSearchCriteriaGC(ADMISSION_DATE_COLUMN_ID, form.getLocalContext().getSortOrderAdmissionDate());
			
			form.dyngrdInpatients().getRows().clear();						//wdev-18784
			populateListControl(collectionToSort);
		}
	}
	
	private void addColumnSortToSearchCriteriaGC(int identifierColumnId, SortOrder sortOrder)
	{
		if (form.getGlobalContext().STHK.getCurrentInpatientListFilter() == null)
			return;
		
		ColumnSortOrderVo columnSortOrder = new ColumnSortOrderVo();
		
		columnSortOrder.setColumnId(identifierColumnId);
		
		if (SortOrder.ASCENDING.equals(sortOrder))
			columnSortOrder.setSortOrder(1);
		else
			columnSortOrder.setSortOrder(-1);
		
		form.getGlobalContext().STHK.getCurrentInpatientListFilter().setColumnSortOrder(columnSortOrder);
	}

	public class IdentifierComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public IdentifierComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public IdentifierComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getPatient() != null && ps1.getPasEvent().getPatient().getDisplayId() != null) ? ps1.getPasEvent().getPatient().getDisplayId().getValue() :null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getPatient() != null && ps2.getPasEvent().getPatient().getDisplayId() != null) ? ps2.getPasEvent().getPatient().getDisplayId().getValue():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class SurnameComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public SurnameComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SurnameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getPatient() != null && ps1.getPasEvent().getPatient().getName() != null) ? ps1.getPasEvent().getPatient().getName().getSurname():null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getPatient() != null && ps2.getPasEvent().getPatient().getName() != null) ? ps2.getPasEvent().getPatient().getName().getSurname():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class ForenameComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ForenameComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ForenameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getPatient() != null && ps1.getPasEvent().getPatient().getName() != null) ? ps1.getPasEvent().getPatient().getName().getForename():null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getPatient() != null && ps2.getPasEvent().getPatient().getName() != null) ? ps2.getPasEvent().getPatient().getName().getForename():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class SexComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public SexComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SexComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getPatient() != null && ps1.getPasEvent().getPatient().getSex() != null) ? ps1.getPasEvent().getPatient().getSex().getText():null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getPatient() != null && ps2.getPasEvent().getPatient().getSex() != null) ? ps2.getPasEvent().getPatient().getSex().getText():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class DOBComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public DOBComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DOBComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PartialDate rez1 = null;
			PartialDate rez2 = null;
			
			if (ob1 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getPatient() != null && ps1.getPasEvent().getPatient().getDob() != null) ? ps1.getPasEvent().getPatient().getDob() : null;
			}
			if (ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getPatient() != null && ps2.getPasEvent().getPatient().getDob() != null) ? ps2.getPasEvent().getPatient().getDob() : null;
			}
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;	
			
			if(rez1 != null && rez2 == null)
				return  direction;
						
			if(rez1 != null && rez2 != null)
				return  rez1.compareTo(rez2)*direction;
			
			return 0;
		}
	}
	
	public class WardComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public WardComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public WardComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getLocation() != null && ps1.getPasEvent().getLocation().getName() != null) ? ps1.getPasEvent().getLocation().getName() : null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getLocation() != null && ps2.getPasEvent().getLocation().getName() != null) ? ps2.getPasEvent().getLocation().getName() : null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class ConsultantComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ConsultantComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ConsultantComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = (ps1.getPasEvent() != null && ps1.getPasEvent().getConsultant() != null && ps1.getPasEvent().getConsultant().getName() != null) ? ps1.getPasEvent().getConsultant().getName().toString() : null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = (ps2.getPasEvent() != null && ps2.getPasEvent().getConsultant() != null && ps2.getPasEvent().getConsultant().getName() != null) ? ps2.getPasEvent().getConsultant().getName().toString() : null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class AdmissionDateStringComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public AdmissionDateStringComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public AdmissionDateStringComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = ps1.getReasonForAdmission() != null ? ps1.getReasonForAdmission() : null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = ps2.getReasonForAdmission() != null ? ps2.getReasonForAdmission() : null;
			}

			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class AdmissionDateComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public AdmissionDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public AdmissionDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date rez1 = null;
			Date rez2 = null;
			
			if(ob1 instanceof InpatientEpisodeVo )
			{
				InpatientEpisodeVo ps1 = (InpatientEpisodeVo)ob1;
				rez1 = ps1.getAdmissionDateTime() != null ? ps1.getAdmissionDateTime().getDate() : null;
			}
			if(ob2 instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo ps2 = (InpatientEpisodeVo)ob2;
				rez2 = ps2.getAdmissionDateTime() != null ? ps2.getAdmissionDateTime().getDate() : null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareTo(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	//wdev-18784
	private void initializeDynPatGrid()
	{
		form.dyngrdInpatients().clear();

		DynamicGridColumn column;

		
		form.dyngrdInpatients().setSelectable(true);
		form.dyngrdInpatients().setHeaderHeight(40);
		
		column = form.dyngrdInpatients().getColumns().newColumn(" ");
		column.setIdentifier(COL_LEAVE);
		column.setWidth(23);
		column.setCanGrow(false);
		column.setSortMode(SortMode.NONE);
		
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		column = form.dyngrdInpatients().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_HOSPITALNO);
		column.setWidth(80);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		column = form.dyngrdInpatients().getColumns().newColumn("Surname");
		column.setIdentifier(COL_SURNAME);
		column.setWidth(110);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		column = form.dyngrdInpatients().getColumns().newColumn("Forename");
		column.setIdentifier(COL_FORENAME);
		column.setWidth(90);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		column = form.dyngrdInpatients().getColumns().newColumn("Sex");
		column.setIdentifier(COL_SEX);
		column.setWidth(50);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		column = form.dyngrdInpatients().getColumns().newColumn("Age");
		column.setIdentifier(COL_AGE);
		column.setWidth(38);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		
		column = form.dyngrdInpatients().getColumns().newColumn("DOB");
		column.setIdentifier(COL_DOB);
		column.setWidth(70);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		column = form.dyngrdInpatients().getColumns().newColumn("Ward");
		column.setIdentifier(COL_WARD);
		column.setWidth(115);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		column = form.dyngrdInpatients().getColumns().newColumn("Consultant");
		column.setIdentifier(COL_CONSULTANT);
		column.setWidth(90);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		

		//WDEV-12991		
		column = form.dyngrdInpatients().getColumns().newColumn(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO") ? "Admission Reason" : "Admission Date");		
		column.setIdentifier(COL_ADMISSION_DATE);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);
		
		
		column = form.dyngrdInpatients().getColumns().newColumn(" ");
		column.setIdentifier(COL_DEMENTIA);
		column.setWidth(23);
		column.setCanGrow(false);
		column.setSortMode(SortMode.NONE);
		column.setAlignment(Alignment.CENTER);	
		column.setHeaderTooltip("Dementia Status"); // WDEV-19251 
		
		column = form.dyngrdInpatients().getColumns().newColumn(" ");
		column.setIdentifier(COL_DOCSTATUS);
		column.setWidth(-1);
		column.setCanGrow(true);
		column.setSortMode(SortMode.NONE);
		

	}

	//wdev-18784
	protected void onDyngrdInpatientsCellButtonClicked(DynamicGridCell cell) 
	{
		if(cell.getValue() != null )
		{
			
			InpatientEpisodeVo inpTempVo = (InpatientEpisodeVo) cell.getRow().getValue();
			if( inpTempVo != null && inpTempVo.getPasEventIsNotNull() && inpTempVo.getPasEvent().getPatientIsNotNull())
			{
				DementiaForWorklistVo tempvo  = domain.getDementia(inpTempVo.getPasEvent().getPatient());
				if( tempvo != null )
				{
					engine.open(form.getForms().Clinical.DementiaAssessmentFormDialog, new Object[] { tempvo, DementiaWorklistOpenFormModeEnum.VIEW });
				}
			}
		}
		
	}

	//wdev-18784
	protected void onDyngrdInpatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setPatientShort(null);
		

		if (ConfigFlag.UI.INPAT_CREATE_CORRESPONDENCE_DETAILS.getValue())
		{
			selectionChanged();
		}
		else if (engine.hasRight(AppRight.CAN_DISCHARGE_INPATIENT_IN_RCHT))
		{
			selectionChanged();
		}
		else if (ConfigFlag.UI.MAXIMS_ADT_NO_INTERFACE.getValue())
		{
			selectionChanged();
		}
		else
		{
			showDemographics();
		}
		
	}

	//wdev-18784
	protected void onDyngrdInpatientsColumnHeaderClicked(DynamicGridColumn column) 
	{
		InpatientEpisodeVo temp = (InpatientEpisodeVo) form.dyngrdInpatients().getValue();
		
		sortColumn((Integer) column.getIdentifier());
		
		form.dyngrdInpatients().setValue(temp);
		
	}
	//wdev-18784
	private DynamicGridColumn getColumnDynGrid(Integer identifier)
	{
		return form.dyngrdInpatients().getColumns().getByIdentifier(identifier);
	}

}
