//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.wardbayconfigdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.wardbayconfigdialog.GenForm.grdLayoutsRow;
import ims.core.forms.wardbayconfigdialog.GenForm.grdSpecialtiesRow;
import ims.core.vo.BayConfigVo;
import ims.core.vo.BayConfigVoCollection;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceVoCollection;
import ims.core.vo.BedsAllocatedVo;
import ims.core.vo.BedsAllocatedVoCollection;
import ims.core.vo.FloorBedSpaceLayoutLiteVo;
import ims.core.vo.FloorBedSpaceLayoutLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.WardBayConfigVo;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int COL_BAY_ACTIVE = 3;
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		populateScreenFromData();
		calculateNrOfBeds();
		updateControlsState();
	}

	private void initialise()
	{
		form.grdLayouts().setEnabled(false);
		form.getContextMenus().Core.getWardBayConfigDialogADDItem().setVisible(false);
		form.getContextMenus().Core.getWardBayConfigDialogREMOVEItem().setVisible(false);
		form.getLocalContext().setLCTotalNoOfBeds(0);		
		prepopulateSpecialties();
		
		//available floor layouts
		form.getLocalContext().setActiveLayouts(domain.listFloorBedLayouts());
		
		//load templates combo
		if(form.getLocalContext().getActiveLayoutsIsNotNull())
		{
			form.cmbTemplates().clear();
			for(FloorBedSpaceLayoutLiteVo voItem : form.getLocalContext().getActiveLayouts())
			{
				form.cmbTemplates().newRow(voItem, voItem.getName());
			}
			if (form.getLocalContext().getActiveLayouts() != null && form.getLocalContext().getActiveLayouts().size() > 0)
			{
				if (form.getGlobalContext().STHK.getWardBayConfigVo() != null && form.getGlobalContext().STHK.getWardBayConfigVo().getID_WardBayConfig() == null)
				{	
					if (form.getLocalContext().getActiveLayouts().size() == 1)
					{	
						form.cmbTemplates().setValue(form.getLocalContext().getActiveLayouts().get(0));
					}
					else
					{
						form.cmbTemplates().showOpened();
					}
				}
			}
		}
	}

	private void prepopulateSpecialties()
	{
		//Specialty
		form.grdSpecialties().getRows().clear();
		
		SpecialtyCollection collSpec = LookupHelper.getSpecialty(domain.getLookupService());
		if(collSpec == null)
			return;
		
		for (int i=0;i<collSpec.size();i++)
		{
			Specialty specInst = collSpec.get(i);
			grdSpecialtiesRow row = form.grdSpecialties().getRows().newRow();
			row.setSpecialty(specInst);
			row.setColBedsAllocatedReadOnly(true);
		}
	}

	private void populateScreenFromData()
	{
		WardBayConfigVo voWardBayConf = form.getGlobalContext().STHK.getWardBayConfigVo();
		if(voWardBayConf == null)
			throw new CodingRuntimeException("voWardBayConf is null in method populateScreenFromData");
		
		form.getLocalContext().setSelectedBay(null);
		form.getLocalContext().setSelectedBayConfig(null);

//		form.lblWard().setValue(voWardBayConf.getWard() != null ? voWardBayConf.getWard().getName() + (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() ? numberOfBedSpaces : "")  : "");
		
		form.chkWaiting().setValue(voWardBayConf.getIsWaitingArea());
		if(voWardBayConf.getID_WardBayConfig() == null)
			form.chkWaiting().setValue(true);
		
		form.ansYesNo().setValue(voWardBayConf.getBays() != null &&  voWardBayConf.getBays().size() > 1 ? YesNo.YES : YesNo.NO);
		ansBoxValueChanged();
		
		populateBayConfigsGridFromData(voWardBayConf.getBays());
		populateSpecialtiesGridFromData(voWardBayConf.getSpecialties(), voWardBayConf.getMainSpecialty(), voWardBayConf.getBedsAllocated());
		
		if(form.ansYesNo().getValue() != null)
		{
			if(form.ansYesNo().getValue().equals(YesNo.NO))
			{
				if(voWardBayConf.getID_WardBayConfigIsNotNull() && voWardBayConf.getBays().size() > 0)				//wdev-13279					
				{
					form.cmbTemplates().newRow(voWardBayConf.getBays().get(0).getFloorBedSpaceLayout(), voWardBayConf.getBays().get(0).getFloorBedSpaceLayout().getName());
					form.cmbTemplates().setValue(voWardBayConf.getBays().get(0).getFloorBedSpaceLayout());
					form.chkFemale().setValue(Boolean.TRUE.equals(voWardBayConf.getBays().get(0).getFemale()) ? true : false);
					form.chkWeekDays().setValue(Boolean.TRUE.equals(voWardBayConf.getBays().get(0).getWeekdaysOnly()) ? true : false);//WDEV-20390
					form.chkMale().setValue(Boolean.TRUE.equals(voWardBayConf.getBays().get(0).getMale()) ? true : false);
					form.chkPaediatric().setValue(Boolean.TRUE.equals(voWardBayConf.getBays().get(0).getPaediatric()) ? true : false);
					form.cmbDependency().setValue(voWardBayConf.getBays().get(0).getDependencyIsNotNull() ? voWardBayConf.getBays().get(0).getDependency() : null);
					form.timOpening().setValue(voWardBayConf.getBays().get(0).getOpeningTime());
					form.timClosing().setValue(voWardBayConf.getBays().get(0).getClosingTime());
					form.getLocalContext().setSelectedBay(voWardBayConf.getBays().get(0).getBay());
					form.getLocalContext().setSelectedBayConfig(voWardBayConf.getBays().get(0));
				}
			}
			if(voWardBayConf.getID_WardBayConfigIsNotNull())
			{
				form.ansYesNo().setEnabled(true);
			}
			
			if(form.grdLayouts().getRows().size() > 1)
				form.ansYesNo().setEnabled(false);
		}
	}

	private void populateSpecialtiesGridFromData(SpecialtyCollection specialties, Specialty mainSpecialty, BedsAllocatedVoCollection bedsAllocatedVoCollection)
	{
		if(specialties == null)
			return;
		
		for(int i=0;i<form.grdSpecialties().getRows().size();i++)
		{
			if(specialties.contains(form.grdSpecialties().getRows().get(i).getSpecialty()))
				form.grdSpecialties().getRows().get(i).setSelect(true);
			else
				form.grdSpecialties().getRows().get(i).setSelect(false);
			
			if(mainSpecialty != null)
				if(form.grdSpecialties().getRows().get(i).getSpecialty().equals(mainSpecialty))
					form.grdSpecialties().getRows().get(i).setMain(true);
			//WDEV-19675 
			form.grdSpecialties().getRows().get(i).setColBedsAllocated(getNoOfAllocatedBeds(form.grdSpecialties().getRows().get(i).getSpecialty(), bedsAllocatedVoCollection));
			form.grdSpecialties().getRows().get(i).setColBedsAllocatedReadOnly(!Boolean.TRUE.equals(form.grdSpecialties().getRows().get(i).getSelect()) && !Boolean.TRUE.equals(form.grdSpecialties().getRows().get(i).getMain()));
		}
	}

	private Integer getNoOfAllocatedBeds(Specialty specialty, BedsAllocatedVoCollection bedsAllocatedVoCollection)
	{	
		if (bedsAllocatedVoCollection == null)
			return null;
		
		for (int i=0; i<bedsAllocatedVoCollection.size(); i++ )
		{
			if (bedsAllocatedVoCollection.get(i).getSpecialty().equals(specialty))
				return  bedsAllocatedVoCollection.get(i).getNumberOfBeds();
		}
		
		return null;		
	}

	private void populateBayConfigsGridFromData(BayConfigVoCollection voCollBayConf)
	{
		form.grdLayouts().getRows().clear();
		
		if(voCollBayConf == null)
			return;
		
		for (BayConfigVo voBayConfig : voCollBayConf)
		{
			grdLayoutsRow row = form.grdLayouts().getRows().newRow();
		
			if(voBayConfig.getBayIsNotNull())
			{
				row.setBayValue(voBayConfig.getBay());
				row.setBay(voBayConfig.getBay().getName());
				
				//WDEV-13964
				row.setActive(voBayConfig.getBay().getIsActive());
			}
			
			if(voBayConfig.getFloorBedSpaceLayoutIsNotNull())
			{
				row.getBayBedSpaceLayout().newRow(voBayConfig.getFloorBedSpaceLayout(), voBayConfig.getFloorBedSpaceLayout().getName());
				row.getBayBedSpaceLayout().setValue(voBayConfig.getFloorBedSpaceLayout());			
				row.setBayBedSpaceLayoutReadOnly(true);
				row.setColFemale(Boolean.TRUE.equals(voBayConfig.getFemale()) ? true : false);
				row.setColMale(Boolean.TRUE.equals(voBayConfig.getMale()) ? true : false);
				row.setColPaediatric(Boolean.TRUE.equals(voBayConfig.getPaediatric()) ? true : false);
				row.setColWeekDay(Boolean.TRUE.equals(voBayConfig.getWeekdaysOnly()) ? true : false);
				row.setColDependencyLevel(voBayConfig.getDependency());
				row.setColOpeningTime(voBayConfig.getOpeningTime());
				row.setColClosingTime(voBayConfig.getClosingTime());
			}
			
			addAvailableFloorLayouts(row);
			row.setValue(voBayConfig);
		}
	}

	@Override
	protected void onGrdSpecialtiesGridCheckBoxClicked(int column, GenForm.grdSpecialtiesRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		//allow only one item to be checked as main and main has to be selected
		if(column == 1)
		{
			if(isChecked)
			{
				for(int i=0;i<form.grdSpecialties().getRows().size();i++)
				{
					form.grdSpecialties().getRows().get(i).setMain(false);
				}

				row.setMain(isChecked);
				row.setSelect(isChecked);
			}
		}
		//WDEV-19675 
		row.setColBedsAllocatedReadOnly(!Boolean.TRUE.equals(row.getSelect()) && !Boolean.TRUE.equals(row.getMain()));
		
		if (!Boolean.TRUE.equals(row.getSelect()) && !Boolean.TRUE.equals(row.getMain()))
			row.setColBedsAllocated(null);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WardBayConfigVo voWardBayConfig = form.getGlobalContext().STHK.getWardBayConfigVo();
		if (voWardBayConfig == null)
			throw new CodingRuntimeException("voWardBayConfig cannot be null in method onBtnSaveClick");
		
		if (hasDuplicateBayNames())
		{
			engine.showMessage("Cannot save active bays with duplicate names.");
			return;
		}
		
		voWardBayConfig = populateDataFromScreen(voWardBayConfig);
		
		String[] errors = voWardBayConfig.validate(getUIValidationErrors());
		if(errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		int nrOfBeds = getSumOfBedsForSpecialty();
		if (nrOfBeds > form.getLocalContext().getLCTotalNoOfBeds())
		{
			engine.showMessage("Total Number of Specialty Allocated Beds exceeds ward's Total Number of Bed Spaces: " + form.getLocalContext().getLCTotalNoOfBeds() + ".");
			return;
		}
		
		try
		{
			domain.saveWardBayConfig(voWardBayConfig);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateScreenFromData();
			
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		engine.close(DialogResult.OK);
	}
	
	private boolean hasDuplicateBayNames()
	{
		int rowsSize = form.grdLayouts().getRows().size();
		
		if (rowsSize <= 1)
			return false;
		
		for (int i = 0; i < rowsSize - 1; i++)
		{
			for (int j = i + 1; j < rowsSize; j++)
			{
				if (form.grdLayouts().getRows().get(i).getBay() != null
						&& form.grdLayouts().getRows().get(j).getBay() != null
						&& form.grdLayouts().getRows().get(i).getBay().equals(form.grdLayouts().getRows().get(j).getBay())
						&& Boolean.TRUE.equals(form.grdLayouts().getRows().get(i).getActive())
						&& Boolean.TRUE.equals(form.grdLayouts().getRows().get(j).getActive()))
				{
					return true;
				}
			}
		}
		
		return false;
	}

	private int getSumOfBedsForSpecialty()
	{
		int noOfBeds = 0;
		for (int i = 0; i < form.grdSpecialties().getRows().size(); i++ )
		{
			if (form.grdSpecialties().getRows().get(i).getColBedsAllocated() != null)
				noOfBeds += form.grdSpecialties().getRows().get(i).getColBedsAllocated();
		}
		
		return noOfBeds;
	}

	private String[] getUIValidationErrors()
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.ansYesNo().getValue() == null)
			errors.add("'Multiple Bays' is mandatory.");
		//one specialty selected
		if(getSelectedSpecialties() == null || getSelectedSpecialties().size() == 0)
			errors.add("One Specialty is mandatory.");
		if (YesNo.NO.equals(form.ansYesNo().getValue()) && form.timOpening().getValue() == null && form.timClosing().getValue() != null)
			errors.add("Opening Time is mandatory if Closing Time was entered for the bay.");
		if (YesNo.NO.equals(form.ansYesNo().getValue()) && form.timClosing().getValue()  == null && form.timOpening().getValue() != null)
			errors.add("Closing Time is mandatory if Opening Time was entered for the bay.");
		if (YesNo.NO.equals(form.ansYesNo().getValue()) && form.timOpening().getValue() != null && form.timClosing().getValue() != null && form.timClosing().getValue().isLessOrEqualThan(form.timOpening().getValue()))
			errors.add("Closing Time cannot be earlier than Opening Time.");
		//each layout row has a location name and floorbedlayout selected
		for(int i=0;i<form.grdLayouts().getRows().size();i++)
		{
			grdLayoutsRow lRow = form.grdLayouts().getRows().get(i);
			/* WDEV-16066
			  if(lRow.getBay() == null || lRow.getBay().equals("")) 
				errors.add("Bay Name is mandatory"); 
			*/
			if (YesNo.YES.equals(form.ansYesNo().getValue()))
			{		
				if(lRow.getBayBedSpaceLayout() == null)
					errors.add("Bed Space Layout is mandatory.");
				if (lRow.getColOpeningTime() == null && lRow.getColClosingTime() != null)
					errors.add("Opening Time is mandatory if Closing Time was entered for the bay.");
				if (lRow.getColOpeningTime() != null && lRow.getColClosingTime() == null)
					errors.add("Closing Time is mandatory if Opening Time was entered for the bay.");
				if (lRow.getColOpeningTime() != null && lRow.getColClosingTime() != null && lRow.getColClosingTime().isLessOrEqualThan(lRow.getColOpeningTime()))
					errors.add("Closing Time cannot be earlier than Opening Time.");
			}
		}
			
		return (errors.size() > 0 ? errors.toArray(new String[0]) : null);
	}

	private WardBayConfigVo populateDataFromScreen(WardBayConfigVo voWardBayConfig)
	{
		if (voWardBayConfig == null)
			throw new CodingRuntimeException("voWardBayConfig cannot be null in method populateDataFromScreen");
		
		voWardBayConfig.setIsWaitingArea(form.chkWaiting().getValue());
		voWardBayConfig.setSpecialties(getSelectedSpecialties());
		voWardBayConfig.setMainSpecialty(getMainSpecialty());
		voWardBayConfig.setBays(getSelectedBays());
		voWardBayConfig.setBedsAllocated(getNoOfAllocatedBeds());
		
		//WDEV-20217
		voWardBayConfig.setNumOfBeds(form.getLocalContext().getLCTotalNoOfBeds());
		
		return voWardBayConfig;
	}

	private BedsAllocatedVoCollection getNoOfAllocatedBeds()
	{
		BedsAllocatedVoCollection allocatedBedsVoCollection = new BedsAllocatedVoCollection();
		
		for(int i = 0; i < form.grdSpecialties().getRows().size(); i++)
		{
			grdSpecialtiesRow row = form.grdSpecialties().getRows().get(i);
			
			if (row.getColBedsAllocated() != null)
			{
				BedsAllocatedVo nrOfAllocatedBeds = new BedsAllocatedVo();
				
				nrOfAllocatedBeds.setSpecialty(row.getSpecialty());
				nrOfAllocatedBeds.setNumberOfBeds(row.getColBedsAllocated());
				
				allocatedBedsVoCollection.add(nrOfAllocatedBeds);
			}

		}
		return allocatedBedsVoCollection;
	}

	private BayConfigVoCollection getSelectedBays()
	{
		BayConfigVoCollection voCollBayConfig = new BayConfigVoCollection();
		
		if(form.ansYesNo().getValue() != null)
		{
			if(form.ansYesNo().getValue().equals(YesNo.YES))
			{
				for(int i=0; i<form.grdLayouts().getRows().size(); i++)
				{
					grdLayoutsRow row = form.grdLayouts().getRows().get(i);
					BayConfigVo voBayConfig = row.getValue();
					
					voBayConfig.setBay(getBay(row));
					voBayConfig.setFloorBedSpaceLayout((FloorBedSpaceLayoutLiteVo) row.getBayBedSpaceLayout().getValue());
					//WDEV-13964
					voBayConfig.setIsActive(row.getActive());
					//WDEV-19675
					voBayConfig.setFemale(Boolean.TRUE.equals(row.getColFemale()) ? true : false);
					voBayConfig.setMale(Boolean.TRUE.equals(row.getColMale()) ? true : false);
					voBayConfig.setPaediatric(Boolean.TRUE.equals(row.getColPaediatric()) ? true : false);
					voBayConfig.setDependency(row.getColDependencyLevel());
					voBayConfig.setWeekdaysOnly(Boolean.TRUE.equals(row.getColWeekDay()) ? true : false);//WDEV-20390
					
					//WDEV-20217
					voBayConfig.setOpeningTime(row.getColOpeningTime());
					voBayConfig.setClosingTime(row.getColClosingTime());
					voBayConfig.setNumOfBeds(getNrOfBeds((FloorBedSpaceLayoutLiteVo) row.getBayBedSpaceLayout().getValue()));
					
					if(voBayConfig != null && !isThisRecordDuplicate(voBayConfig, voCollBayConfig))
						voCollBayConfig.add(voBayConfig);
				}
			}
			else
			{
				BayConfigVo voBayConfig = getSelectedBayConfig();
				voBayConfig.setBay(getBay(null));
				voBayConfig.setFloorBedSpaceLayout(form.cmbTemplates().getValue());
				//WDEV-19675 
				voBayConfig.setFemale(Boolean.TRUE.equals(form.chkFemale().getValue()));
				voBayConfig.setMale(Boolean.TRUE.equals(form.chkMale().getValue()));
				voBayConfig.setPaediatric(Boolean.TRUE.equals(form.chkPaediatric().getValue()));
				voBayConfig.setDependency(form.cmbDependency().getValue());
				voBayConfig.setWeekdaysOnly(Boolean.TRUE.equals(form.chkWeekDays().getValue()));//WDEV-20390
				
				//WDEV-20217
				voBayConfig.setOpeningTime(form.timOpening().getValue());
				voBayConfig.setClosingTime(form.timClosing().getValue());
				voBayConfig.setNumOfBeds(getNrOfBeds(form.cmbTemplates().getValue()));
				
				//WDEV-13964 Latest Change 02/02/2012
				voBayConfig.setIsActive(true);
				voCollBayConfig.add(voBayConfig);
			}
		}
		
		return voCollBayConfig;
	}

	private boolean isThisRecordDuplicate(BayConfigVo voBayConfig, BayConfigVoCollection voCollBayConfig)
	{
		if (voCollBayConfig == null)
			return false;
		if (voBayConfig == null)
			return false;
		
		for (BayConfigVo voBayConfiglstItem : voCollBayConfig)
		{
			if(voBayConfiglstItem.getBayIsNotNull() &&  voBayConfiglstItem.getBay().getNameIsNotNull() && Boolean.TRUE.equals(voBayConfiglstItem.getIsActive()) && Boolean.TRUE.equals(voBayConfig.getIsActive()))
			{
				if(voBayConfiglstItem.getBay().getName().equals(voBayConfig.getBay().getName()))
				{
					return true;
				}
			}	
		}
		
		return false;
	}

	/**
	 * if there was a previously instantiated BayConfig record for this one use it
	 * else create new
	 * @return
	 */
	private BayConfigVo getSelectedBayConfig()
	{
		if(form.getLocalContext().getSelectedBayConfigIsNotNull())
			return form.getLocalContext().getSelectedBayConfig();
		
		return new BayConfigVo();
	}

	/**
	 * custom method here to create locationlites if needed
	 * caused by the fact that javacustomvalue type attribute for grid column in devenv
	 * doesnt allow you to have editable string value
	 * if row is null then create a dummy bay or use selected bay
	 * @param row
	 * @return
	 */
	private LocationLiteVo getBay(grdLayoutsRow row)
	{
		LocationLiteVo voBay = null;
		if(row != null)
		{
			voBay = row.getBayValue();
			voBay.setName(row.getBay());
		}
		else
		{
			if(!form.cmbTemplates().isEnabled())
				voBay = form.getLocalContext().getSelectedBay();
			else
			{
				voBay = new LocationLiteVo();
				voBay.setName("Bay 1 (" + form.getGlobalContext().STHK.getWardBayConfigVo().getWard().getName() + ")");
			}
		}	
		
		if(voBay != null)	//wdev-13279				
		{
			voBay.setIsVirtual(false);
			voBay.setType(LocationType.BAY);
		}
		return voBay;
	}

	private Specialty getMainSpecialty()
	{
		Specialty mainSpecialty = null; 
		for(int i=0; i< form.grdSpecialties().getRows().size(); i++)
		{
			if(form.grdSpecialties().getRows().get(i).getMain())
				mainSpecialty = form.grdSpecialties().getRows().get(i).getSpecialty();
		}
		
		return mainSpecialty;
	}

	private SpecialtyCollection getSelectedSpecialties()
	{
		SpecialtyCollection collSpec = new SpecialtyCollection(); 
		for(int i=0; i< form.grdSpecialties().getRows().size(); i++)
		{
			if(form.grdSpecialties().getRows().get(i).getSelect())
				collSpec.add(form.grdSpecialties().getRows().get(i).getSpecialty());
		}
		return collSpec;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onAnsYesNoValueChanged() throws PresentationLogicException
	{
		ansBoxValueChanged();
	}

	private void ansBoxValueChanged()
	{
//		if(form.ansYesNo().getValue() != null)
//		{
//			if(form.ansYesNo().getValue().equals(YesNo.YES))
//			{
//				form.cmbTemplates().setVisible(false);
//				form.lblLayout().setVisible(false);
//				form.grdLayouts().setEnabled(true);
//				form.grdLayouts().setReadOnly(false);
//				form.grdLayouts().setVisible(true);
//				form.getContextMenus().Core.getWardBayConfigDialogADDItem().setVisible(true);
//			}
//			else if(form.ansYesNo().getValue().equals(YesNo.NO))
//			{
//				form.grdLayouts().setVisible(false);
//				form.cmbTemplates().setVisible(true);
//				form.lblLayout().setVisible(true);
//			}
//		}
//		else
//		{
//			form.grdLayouts().setVisible(false);
//			form.cmbTemplates().setVisible(false);
//			form.lblLayout().setVisible(false);
//		}
		
		updateControlsState();
		calculateNrOfBeds();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.WardBayConfigDialog.ADD:
				grdLayoutsRow row = form.grdLayouts().getRows().newRow(true);
				row.setBayValue(new LocationLiteVo());
				row.setValue(new BayConfigVo());
				addAvailableFloorLayouts(row);
			break;
			case GenForm.ContextMenus.CoreNamespace.WardBayConfigDialog.REMOVE:
				grdLayoutsRow lRow = form.grdLayouts().getSelectedRow();
				if(lRow != null)
				{
					form.grdLayouts().removeSelectedRow();
					//form.getContextMenus().Core.getWardBayConfigDialogREMOVEItem().setVisible(false);
				}
			break;
			
			case GenForm.ContextMenus.CoreNamespace.WardBayConfigDialog.CONFIGURE_BED_TIMES:
				configureBedTimes();
			break;
			default:
		}
	}

	private void configureBedTimes()
	{
		if(!ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() || form.grdLayouts().getValue() == null)
			return;
		
		form.getGlobalContext().Core.setSelectedBay(form.grdLayouts().getValue().getBay());
		engine.open(form.getForms().Core.BedAvailabilityTimes);
	}

	private void addAvailableFloorLayouts(grdLayoutsRow row)
	{
		FloorBedSpaceLayoutLiteVoCollection voCollLayout = form.getLocalContext().getActiveLayouts();
		if(voCollLayout != null)
		{
			for (FloorBedSpaceLayoutLiteVo voFloorBedSpace : voCollLayout)
			{
				if(voFloorBedSpace != null)
					row.getBayBedSpaceLayout().newRow(voFloorBedSpace, voFloorBedSpace.getName());
			}
			if (voCollLayout.size() > 0 && row.getValue() != null && row.getValue().getID_BayConfig() == null)
			{
				if (voCollLayout.size() == 1)
					row.getBayBedSpaceLayout().setValue(voCollLayout.get(0));
				else
				{
					row.getBayBedSpaceLayout().showOpened();
				}
			}
		}
	}


	@Override
	protected void onGrdLayoutsSelectionChanged() throws PresentationLogicException
	{
		//form.getContextMenus().Core.getWardBayConfigDialogREMOVEItem().setVisible(form.grdLayouts().getSelectedRow() != null && form.getMode().equals(FormMode.EDIT)&& domain.getOccupiedBedsForBay(form.grdLayouts().getSelectedRow().getValue().getBay())==0);
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().Core.getWardBayConfigDialogCONFIGURE_BED_TIMESItem().setVisible(false);//ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.grdLayouts().getValue() != null);
		
		form.grdLayouts().setEnabled(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.YES) ? true : false);
		form.grdLayouts().setReadOnly(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.YES) ? false : true);
		form.grdLayouts().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.YES) ? true : false);
		
		form.lblLayout().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		WardBayConfigVo voWardBayConf = form.getGlobalContext().STHK.getWardBayConfigVo();
		form.cmbTemplates().setEnabled(form.ansYesNo().getValue() != null && voWardBayConf.getID_WardBayConfigIsNotNull() ? false : true);
		form.cmbTemplates().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.getContextMenus().Core.getWardBayConfigDialogADDItem().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.YES) ? true : false);
		
		form.chkFemale().setEnabled(YesNo.NO.equals(form.ansYesNo().getValue()) ? true : false);
		form.chkFemale().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.chkMale().setEnabled(YesNo.NO.equals(form.ansYesNo().getValue()) ? true : false);
		form.chkMale().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.chkPaediatric().setEnabled(YesNo.NO.equals(form.ansYesNo().getValue()) ? true : false);
		form.chkPaediatric().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.chkWeekDays().setEnabled(YesNo.NO.equals(form.ansYesNo().getValue()) ? true : false);//WDEV-20390
		form.chkWeekDays().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);//WDEV-20390
		form.lblWeekdays().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.cmbDependency().setEnabled(YesNo.NO.equals(form.ansYesNo().getValue()) ? true : false);
		form.cmbDependency().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.lblDependency().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.lblOpeningTime().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		form.timOpening().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.lblClosingTime().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		form.timClosing().setVisible(form.ansYesNo().getValue() != null && form.ansYesNo().getValue().equals(YesNo.NO) ? true : false);
		
		form.timOpening().setRequired(YesNo.NO.equals(form.ansYesNo().getValue()) && form.timClosing().getValue() != null && form.timOpening().getValue() == null);
		form.timClosing().setRequired(YesNo.NO.equals(form.ansYesNo().getValue()) && form.timOpening().getValue() != null && form.timClosing().getValue() == null);
	}

	//WDEV-18064
	@Override
	protected void onGrdLayoutsGridCheckBoxClicked(int column, grdLayoutsRow row, boolean isChecked) throws PresentationLogicException
	{
		//http://jira/browse/WDEV-20449
//		if (Boolean.FALSE.equals(isChecked) && row.getValue().getFloorBedSpaceLayout() != null && row.getValue().getID_BayConfig() != null)
//		{
//			if (row.getValue().getID_BayConfig() != null)
//			{
//				BedSpaceVoCollection getBedSpaces = domain.getBedSpacesForLayout(row.getValue().getFloorBedSpaceLayout());
//				
//				if (areOccupiedBeds(getBedSpaces))
//				{
//					row.setActive(Boolean.TRUE);
//					//engine.showMessage("Bay cannot be Inactivated as there are occupied beds on the Ward.", "Warning", MessageButtons.OK, MessageIcon.WARNING);
//				}
//			}
//		}
//		
//		if (column == 3)
//			calculateNrOfBeds();
		
		// Only perform following if user has ticked/unticked column 3 (Active) in grdLayouts
		if (column == COL_BAY_ACTIVE)
		{
			if (row.getValue().getID_BayConfig() != null)
			{
				BedSpaceVoCollection getBedSpaces = domain.getBedSpacesForLayout(row.getValue().getFloorBedSpaceLayout());
				
				if (areOccupiedBeds(getBedSpaces))
				{
					row.setActive(Boolean.TRUE);
					engine.showMessage("The bay cannot be inactivated as there are patients occupying a bed admitted on it.", "Warning", MessageButtons.OK, MessageIcon.WARNING);
				}
			}
		
			calculateNrOfBeds();
			
		} //WDEV-20449
		
	}

	private void calculateNrOfBeds()
	{
		int numberOfBeds = 0;
		WardBayConfigVo voWardBayConf = form.getGlobalContext().STHK.getWardBayConfigVo();
		if(voWardBayConf == null)
			return;
		
		if (YesNo.YES.equals(form.ansYesNo().getValue()))
		{
			for(int i = 0; i < form.grdLayouts().getRows().size(); i++)
			{
				if (Boolean.TRUE.equals(form.grdLayouts().getRows().get(i).getActive()) && form.grdLayouts().getRows().get(i).getBayBedSpaceLayout().getValue() != null)
				{
					FloorBedSpaceLayoutLiteVo floorBedSpaceLayoutLite = (FloorBedSpaceLayoutLiteVo) form.grdLayouts().getRows().get(i).getBayBedSpaceLayout().getValue();
					numberOfBeds = numberOfBeds + getNrOfBeds(floorBedSpaceLayoutLite);
				}
			}
		}
		else if (Boolean.TRUE.equals(form.cmbTemplates().getVisible()) && form.cmbTemplates().getValue() != null)
		{
			numberOfBeds =getNrOfBeds( form.cmbTemplates().getValue());
		}
		
		String numberOfBedSpaces = " (Total Number of Bed Spaces: " + numberOfBeds + ")";
		form.getLocalContext().setLCTotalNoOfBeds(numberOfBeds);
		form.lblWard().setValue(voWardBayConf.getWard() != null ? voWardBayConf.getWard().getName() + numberOfBedSpaces : "");		
	}

	private Boolean areOccupiedBeds(BedSpaceVoCollection getBedSpaces)
	{
		if (getBedSpaces == null)
			return false;
		
		for (int i=0; i < getBedSpaces.size(); i++)
		{
			BedSpaceStateStatusLiteVo bedSpaceState = domain.getBedSpaceStateStatus(getBedSpaces.get(i));
			
			if (BedStatus.OCCUPIED.equals(bedSpaceState.getBedStatus()))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onCmbTemplatesValueChanged() throws PresentationLogicException
	{	
		calculateNrOfBeds();
	}

	private int getNrOfBeds(FloorBedSpaceLayoutLiteVo floorLayout)
	{
		int noOfBeds = 0;
		
		if (floorLayout == null || (floorLayout != null && !floorLayout.getBedSpacesIsNotNull()) ) 
			 return noOfBeds;
		 
		return  noOfBeds = floorLayout.getBedSpaces().size();
	}

	@Override
	protected void onGrdLayoutsMutableComboBoxSelected(int column, grdLayoutsRow row, Object value) throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(row.getActive()))
			calculateNrOfBeds();		
	}

	@Override
	protected void onTimClosingValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}

	@Override
	protected void onTimOpeningValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
}
