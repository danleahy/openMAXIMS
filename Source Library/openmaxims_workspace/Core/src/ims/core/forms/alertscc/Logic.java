//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.forms.alertscc;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.alertscc.GenForm.grdAlertsRow;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AuthoringInfoForTriageVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientAlertLiteVoCollection;
import ims.core.vo.PatientNoAlertInfoForTriageVo;
import ims.core.vo.RecordingUserInformationForTriageVo;
import ims.core.vo.lookups.AlertAccessRights;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.PatientAlertStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAlertsAccess;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		refresh();
		
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onChkNoAlertsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(saveNoAlert())
			refresh();
		
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
		form.fireCustomControlValueChanged();
	}
	
	private boolean saveNoAlert() 
	{
		PatientNoAlertInfoForTriageVo patientNoAlert = populatePatientNoAlertInfo();
		
		String[] errros = patientNoAlert.validate();
		
		if(errros != null && errros.length > 0)
		{
			engine.showErrors(errros);
			return false;
		}
		
		try 
		{
			domain.savePatientNoAlertInfo(patientNoAlert);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			refresh();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			refresh();
			return false;
		}
		
		return true;
	}

	private PatientNoAlertInfoForTriageVo populatePatientNoAlertInfo() 
	{
		PatientNoAlertInfoForTriageVo noAlert = form.getLocalContext().getNoAlert();
		
		if(noAlert == null)
			noAlert = new PatientNoAlertInfoForTriageVo();
		
		noAlert.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		AuthoringInfoForTriageVo authoringInfo = new AuthoringInfoForTriageVo();
		
		Object user = domain.getHcpLiteUser();
		
		if(user instanceof HcpRefVo)
		{
			authoringInfo.setAuthoringHcp((HcpRefVo) user);
			authoringInfo.setAuthoringDateTime(new DateTime());
		}
		
		noAlert.setAuthoringInformation(authoringInfo);
		
		if(!noAlert.getRecordingInformationIsNotNull())
		{
			RecordingUserInformationForTriageVo recordingInformation = new RecordingUserInformationForTriageVo();
			
			if(user instanceof HcpLiteVo)
			{
				recordingInformation.setRecordingUser(((HcpLiteVo)user).getMos());
				recordingInformation.setRecordingDateTime(new DateTime());
			}
			
			noAlert.setRecordingInformation(recordingInformation);
		}
		
		noAlert.setAlertStatus(PatientAlertStatus.NOKNOWNALERTS);
		
		return noAlert;
	}
	
	@Override
	protected void onGrdAlertsSelectionChanged()
	{
		form.getLocalContext().setselectedAlert(form.grdAlerts().getValue());//WDEV-16176
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		boolean rightToEdit = form.grdAlerts().getValue() != null && hasTheUserRightToEditAlert(form.grdAlerts().getValue().getAlertType());
		boolean rightToNew = hasTheUserRightToCreateAlert();
		
		form.imbNew().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && rightToNew);
		form.imbEdit().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && rightToEdit);
		form.imbView().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && rightToEdit); //WDEV-22359
		//WDEV-17686
		form.chkNoAlerts().setEnabled((Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) || (!Boolean.TRUE.equals(form.getLocalContext().getIsHidden()) && FormMode.VIEW.equals(form.getMode()))) && form.grdAlerts().getRows().size() == 0 && !form.chkNoAlerts().getValue());//WDEV-17605
		
		form.getContextMenus().Core.getAlertsCcMenuADDItem().setVisible((Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) || (!Boolean.TRUE.equals(form.getLocalContext().getIsHidden()) && FormMode.VIEW.equals(form.getMode()))) && rightToNew);//WDEV-17605
		form.getContextMenus().Core.getAlertsCcMenuEDITItem().setVisible((Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) || (!Boolean.TRUE.equals(form.getLocalContext().getIsHidden()) && FormMode.VIEW.equals(form.getMode()))) && rightToEdit);//WDEV-17605
		form.getContextMenus().Core.getAlertsCcMenuVIEWItem().setVisible((Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) || (!Boolean.TRUE.equals(form.getLocalContext().getIsHidden()) && FormMode.VIEW.equals(form.getMode()))) && rightToEdit);//WDEV-22359
		
		//WDEV-17605
		form.imbNew().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsHidden()));
		form.imbEdit().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsHidden()));
		form.imbView().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsHidden())); //WDEV-22359
	}

	public void refresh()
	{
		if(form.getGlobalContext().Core.getPatientShort() == null)
			return;
		
		form.getLocalContext().setNoAlert(domain.getPatientNoAlertInfo(form.getGlobalContext().Core.getPatientShort()));
		form.chkNoAlerts().setValue(form.getLocalContext().getNoAlertIsNotNull() && PatientAlertStatus.NOKNOWNALERTS.equals((form.getLocalContext().getNoAlert().getAlertStatus())));
		
		populateAlertsGrid(domain.listAlerts(form.getGlobalContext().Core.getPatientShort(), engine.getLoggedInRole()));
		
		updateControlsState();
	}

	private void populateAlertsGrid(PatientAlertLiteVoCollection listAlerts) 
	{
		form.grdAlerts().getRows().clear();
		
		if(listAlerts == null)
			return;
		
		for(PatientAlertLiteVo alert :listAlerts)
		{
			addAlertRow(alert);
		}
		form.grdAlerts().setValue(form.getLocalContext().getselectedAlert());//WDEV-16176
	}

	private void addAlertRow(PatientAlertLiteVo alert) 
	{
		if(alert == null || alert.getAlertType() == null)
			return;
		
		grdAlertsRow row = form.grdAlerts().getRows().newRow();
		row.setColAlert(alert.getAlertType().getText());
		row.setTextColor(ConfigFlag.UI.ALERTS_COMPONENT_TEXT_COLOUR.getValue());  //wdev-16133
		row.setTooltipForColAlert(alert.getAlertType().getText());//WDEV-15092
		row.setValue(alert);
	}

	public void setEnabled(Boolean value) 
	{
		form.getLocalContext().setIsEnabled(value);
		
		updateControlsState();
	}

	@Override
	protected void onImbEditClick() throws PresentationLogicException 
	{
		if(form.grdAlerts().getValue() == null)
			return;
		
		engine.open(form.getForms().Core.AlertsForTriage, new Object[] {form.grdAlerts().getValue(), Boolean.TRUE}); //WDEV-22359
	}

	@Override
	protected void onImbNewClick() throws PresentationLogicException 
	{
		form.getLocalContext().setselectedAlert(null);//WDEV-16176
		engine.open(form.getForms().Core.AlertsForTriage);
	}
	
	//WDEV-22359
	@Override
	protected void onImbViewClick() throws PresentationLogicException 
	{
		if(form.grdAlerts().getValue() == null)
			return;
		
		engine.open(form.getForms().Core.AlertsForTriage, new Object[] {form.grdAlerts().getValue(), Boolean.FALSE});
	}
	//WDEV-22359 ends here

	public void clear() 
	{
		form.getLocalContext().setNoAlert(null);
		form.grdAlerts().getRows().clear();
		
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.AlertsCcMenu.ADD:
			{
				form.getLocalContext().setselectedAlert(null);//WDEV-16176
				engine.open(form.getForms().Core.AlertsForTriage);
			}
			break;
			
			case GenForm.ContextMenus.CoreNamespace.AlertsCcMenu.EDIT:
			{
				if(form.grdAlerts().getValue() == null)
					return;
				
				engine.open(form.getForms().Core.AlertsForTriage, new Object[] {form.grdAlerts().getValue(), Boolean.TRUE}); //WDEV-22359
			}
			break;
			
			case GenForm.ContextMenus.CoreNamespace.AlertsCcMenu.VIEW:
			{
				if(form.grdAlerts().getValue() == null)
					return;
				
				engine.open(form.getForms().Core.AlertsForTriage, new Object[] {form.grdAlerts().getValue(), Boolean.FALSE}); //WDEV-22359
			}
			break;
		}
		
		updateControlsState();
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	//WDEV-17605
	public void hideButtons(Boolean value)
	{
		form.getLocalContext().setIsHidden(value);
		
		updateControlsState();
	}
	
	private boolean hasTheUserRightToEditAlert(AlertType alertType)
	{
		if(alertType == null)
			return false;
		
		IAppRole role = engine.getLoggedInRole();
		IAlertsAccess[] alertsAccessList = role.getAlertsAccessList();
		
		for(int i=0; i<alertsAccessList.length; i++)
		{
			IAlertsAccess alertAccess = alertsAccessList[i];
			
			if(alertAccess == null)
				continue;
			
			if(!(alertAccess.getIAlertType() instanceof AlertType) || !(alertAccess.getIAccess() instanceof AlertAccessRights))
				continue;
			
			AlertType alertCat = (AlertType) alertAccess.getIAlertType();
			AlertAccessRights access = (AlertAccessRights) alertAccess.getIAccess();
			
			if(AlertAccessRights.READ_WRITE.equals(access) && alertCat.equals(alertType.getParent()))
			{
				return true;
			}
		}
		
		return false;
	}
	
	private boolean hasTheUserRightToCreateAlert()
	{
		IAppRole role = engine.getLoggedInRole();
		IAlertsAccess[] alertsAccessList = role.getAlertsAccessList();
		
		for(int i=0; i<alertsAccessList.length; i++)
		{
			IAlertsAccess alertAccess = alertsAccessList[i];
			
			if(alertAccess == null)
				continue;
			
			if(!(alertAccess.getIAlertType() instanceof AlertType) || !(alertAccess.getIAccess() instanceof AlertAccessRights))
				continue;
			
			AlertAccessRights access = (AlertAccessRights) alertAccess.getIAccess();
			
			if(AlertAccessRights.READ_WRITE.equals(access))
			{
				return true;
			}
		}
		
		return false;
	}
}
