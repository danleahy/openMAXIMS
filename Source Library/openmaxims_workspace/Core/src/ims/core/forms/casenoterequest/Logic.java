//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenoterequest;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CaseNoteRequestsColumnWidthVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteRequestForCheckingVoCollection;
import ims.core.vo.PatientCaseNoteRequestVo;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.enums.PatientCaseNoteFolderActions;
import ims.core.vo.lookups.CaseNoteCommentType;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private final static String SAVE = "Save";
	private final static String PLACE_REQUEST = "Place Request";

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
		open(true);
	}
	
	private void open(boolean editMode) 
	{
		form.ccOpenRequest().setValue(form.getGlobalContext().Core.getPatientShort());
		
		form.getLocalContext().setSelectedCaseNoteRequest(domain.getCaseNoteRequests(form.getGlobalContext().Core.getCaseNoteRequestRef()));
		form.ccOpenRequest().setSelection(form.getLocalContext().getSelectedCaseNoteRequest());
		
		if(form.ccOpenRequest().getSelectedRowValue() != null)
		{
			populateScreenFromData(form.getLocalContext().getSelectedCaseNoteRequest());
		}
		else
		{
			clearScreen();
			
			if(Boolean.TRUE.equals(editMode))
			{
				newInstance();
				return;
			}
		}
		
		form.setMode(editMode ? FormMode.EDIT : FormMode.VIEW);
	}

	private void populateScreenFromData(PatientCaseNoteRequestVo caseNoteRequests) 
	{
		clearScreen();
		
		if(caseNoteRequests == null)
			return;
		
		form.cmbType().setValue(caseNoteRequests.getCaseNote().getType());
		form.dtimRequiredByDate().setValue(caseNoteRequests.getRequiredByDate());
		form.dtimRecordingDateTime().setValue(caseNoteRequests.getSystemInformation() != null ? caseNoteRequests.getSystemInformation().getCreationDateTime() : null);
		
		if(caseNoteRequests.getRequestedForLocation() != null)
		{
			form.qmbReqLoc().newRow(caseNoteRequests.getRequestedForLocation(), caseNoteRequests.getRequestedForLocation().getName());
		}
		form.qmbReqLoc().setValue(caseNoteRequests.getRequestedForLocation());
		
		form.ccRequestedBy().setValue(caseNoteRequests.getRequestedBy());
		form.cmbReason().setValue(caseNoteRequests.getReasonForRequest());
		form.txtComment().setValue(caseNoteRequests.getRequestComment() != null ? caseNoteRequests.getRequestComment().getComment() : null);
	}

	private void clearScreen() 
	{
		form.cmbType().setValue(null);
		form.dtimRequiredByDate().setValue(null);
		form.qmbReqLoc().setValue(null);
		form.ccRequestedBy().setValue(null);
		form.cmbReason().setValue(null);
		form.txtComment().setValue(null);
	}

	private void initialise(Object[] args) 
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof java.util.List)
			{
				form.getLocalContext().setDeniedActions((List<PatientCaseNoteFolderActions>) args[0]);
			}
		}
		
		Object mosUser = domain.getMosUser();
		if(mosUser instanceof MemberOfStaffLiteVo)
		{
			form.getLocalContext().setCurrentMOS((MemberOfStaffLiteVo) mosUser);
		}
		ILocation currentLocation = engine.getCurrentLocation();
		if(currentLocation instanceof LocationLiteVo)
		{
			if(ims.core.vo.lookups.LocationType.CASE_NOTE_FOLDER_LOCATION.equals(((LocationLiteVo) currentLocation).getType() == null) || Boolean.TRUE.equals(((LocationLiteVo) currentLocation).getCaseNoteFolderLocation()))
			{
				form.getLocalContext().setCurrentLocation((LocationLiteVo) currentLocation);
			}
		}
		
		form.getLocalContext().setConfig(domain.getTrackingConfig());
		
		form.ccRequestedBy().isRequired(true);
		
		form.btnNew().setImage(form.getImages().Core.New_Request24);
		form.btnEdit().setImage(form.getImages().Core.Edit_Request24);
		form.btnSave().setImage(form.getImages().Admin.SaveEnabled24);
		form.btnCancel().setImage(form.getImages().Emergency.CORECTNOTE16);
		form.btnClose().setImage(form.getImages().Admin.CloseEnabled24);
		
		CaseNoteRequestsColumnWidthVo ccRequestColumnsWidth = new CaseNoteRequestsColumnWidthVo();
		ccRequestColumnsWidth.setColumnTypeWidth(100);
		ccRequestColumnsWidth.setColumnRequestDateWidth(120);
		ccRequestColumnsWidth.setColumnRequestLocationWidth(150);
		ccRequestColumnsWidth.setColumnImage(22);
		ccRequestColumnsWidth.setColumnRequestByWidth(-1);
		form.ccOpenRequest().initialize(false, true, false, ccRequestColumnsWidth);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance() 
	{
		clearScreen();
		form.ccOpenRequest().setSelection(null);
		
		form.dtimRecordingDateTime().setValue(new DateTime());
		form.cmbType().setValue(form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getType());
		
		if(form.getLocalContext().getCurrentLocation() != null)
		{
			form.qmbReqLoc().newRow(form.getLocalContext().getCurrentLocation(), form.getLocalContext().getCurrentLocation().getName());
			form.qmbReqLoc().setValue(form.getLocalContext().getCurrentLocation());
		}
		
		if(form.getLocalContext().getCurrentMOS() != null)
		{
			form.ccRequestedBy().setValue(form.getLocalContext().getCurrentMOS());
		}
		
		form.getLocalContext().setSelectedCaseNoteRequest(null);
		form.getGlobalContext().Core.setCaseNoteRequestRef(null);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.ccOpenRequest().getSelectedRowValue() == null)
			engine.close(DialogResult.CANCEL);
		else
		{
			open(false);
		}
	}
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(saveRequest(false))
			open(false);
	}
	
	private boolean saveRequest(boolean wasWarningMessageDisplayed) 
	{
		PatientCaseNoteRequestVo record = populateRequestDataFromScreen(form.getLocalContext().getSelectedCaseNoteRequest());
		
		String[] errors = record.validate(validateUIRules(record.getID_PatientCaseNoteRequest() == null));
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if(!wasWarningMessageDisplayed && record.getID_PatientCaseNoteRequest() == null)
		{
			PatientCaseNoteRequestForCheckingVoCollection existingRequests = domain.checkIfThereAreRequests(record.getCaseNote(), record, record.getRequestedForLocation(), record.getRequiredByDate());
			
			if(existingRequests != null && existingRequests.size() > 0)
			{
				int size = existingRequests.size();
				
				int offset = 24;
				if(form.getLocalContext().getConfig() != null && form.getLocalContext().getConfig().getCaseNoteRequestOffset() != null)
				{
					offset = form.getLocalContext().getConfig().getCaseNoteRequestOffset();
				}
				
				DateTime dateFrom = (DateTime) record.getRequiredByDate().clone();
				dateFrom.addHours(-offset);
				DateTime dateTo = (DateTime) record.getRequiredByDate().clone();
				dateTo.addHours(offset);
				
				String messageText = "There" + (size > 1 ? " are " :  " is ") + size + (size > 1 ? " open requests " :  " open request ") + "for " + record.getRequestedForLocation().getName() + " between " + dateFrom + " and " + dateTo + ".\nDo you wish to proceed with this request?";
				form.getLocalContext().setMessageBoxIdForExistingRequests(engine.showMessage(messageText, "", MessageButtons.YESNO, MessageIcon.QUESTION));
				return false;
			}
		}
		
		try 
		{
			form.getLocalContext().setSelectedCaseNoteRequest(domain.saveCaseNoteRequest(record, null));
			form.getGlobalContext().Core.setCaseNoteRequestRef(form.getLocalContext().getSelectedCaseNoteRequest());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false);
			return false;
		}
		
		return true;
	}
	
	private String[] validateUIRules(boolean isNewRecord) 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.cmbReason().getValue() == null && Boolean.TRUE.equals(isNewRecord))
		{
			uiErrors.add("Reason is mandatory.");
		}
		if(form.dtimRequiredByDate().getValue() != null &&  form.dtimRequiredByDate().getValue().isLessThan(new DateTime()))
		{
			uiErrors.add("Required By Date cannot be set in the past.");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}
	
	private PatientCaseNoteRequestVo populateRequestDataFromScreen(PatientCaseNoteRequestVo patientCaseNoteRequestVo) 
	{
		if(patientCaseNoteRequestVo == null)
			patientCaseNoteRequestVo = new PatientCaseNoteRequestVo();
		
		patientCaseNoteRequestVo.setCreationDate(new DateTime());
		patientCaseNoteRequestVo.setRequestStatus(CaseNoteRequestStatus.OPEN);
		patientCaseNoteRequestVo.setRequiredByDate(form.dtimRequiredByDate().getValue());
		patientCaseNoteRequestVo.setRequestedForLocation(form.qmbReqLoc().getValue());
		patientCaseNoteRequestVo.setReasonForRequest(form.cmbReason().getValue());
		
		if(patientCaseNoteRequestVo.getID_PatientCaseNoteRequest() == null)
		{
			patientCaseNoteRequestVo.setPatient(new PatientLite_IdentifiersVo(form.getGlobalContext().Core.getPatientShort().getID_Patient(), form.getGlobalContext().Core.getPatientShort().getVersion_Patient()));
			patientCaseNoteRequestVo.setCaseNote(form.getGlobalContext().Core.getPatientCaseNoteFolderRef());
		}
		
		patientCaseNoteRequestVo.setRequestedBy((MemberOfStaffLiteVo) form.ccRequestedBy().getValue());
		
		if(form.txtComment().getValue() != null)
		{
			PatientCaseNoteCommentSaveVo comment = patientCaseNoteRequestVo.getRequestComment();
			
			if(comment == null)
				comment = new PatientCaseNoteCommentSaveVo();
			
			if(comment.getID_PatientCaseNoteComment() == null)
			{
				comment.setAuthoredBy(form.getLocalContext().getCurrentMOS());
				comment.setAuthoredDate(new DateTime());
			
				if(patientCaseNoteRequestVo.getID_PatientCaseNoteRequest() == null)
				{
					comment.setCaseNote(form.getGlobalContext().Core.getPatientCaseNoteFolderRef());
				}
				else
				{
					comment.setCaseNote(patientCaseNoteRequestVo.getCaseNote());
				}
				
				comment.setPatient(form.getGlobalContext().Core.getPatientShort());
				comment.setCaseNoteFolderLocation(form.getGlobalContext().Core.getPatientCaseNoteFolderRef() != null ? form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getCurrentLocation() : null);
				comment.setNoteType(CaseNoteCommentType.REQUEST);
			}
			
			comment.setComment(form.txtComment().getValue());
			
			patientCaseNoteRequestVo.setRequestComment(comment);
		}
		
		return patientCaseNoteRequestVo;
	}

	@Override
	protected void onQmbReqLocTextSubmited(String value) throws PresentationLogicException 
	{
		bindCurrentLocationCombo(value);
	}

	private void bindCurrentLocationCombo(String value) 
	{
		form.qmbReqLoc().clear();
		
		LocationLiteVoCollection locs = domain.listCaseNoteLocations(value);
		
		if(locs == null || locs.size() == 0)
			return;
		
		for(LocationLiteVo loc : locs)
		{
			if(loc == null)
				continue;
			
			form.qmbReqLoc().newRow(loc, loc.getName());
		}
		
		if(locs.size() == 1)
			form.qmbReqLoc().setValue(locs.get(0));
		else
			form.qmbReqLoc().showOpened();
	}

	@Override
	protected void onCcOpenRequestValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setSelectedCaseNoteRequest(domain.getCaseNoteRequests(form.ccOpenRequest().getSelectedRowValue()));
		populateScreenFromData(form.getLocalContext().getSelectedCaseNoteRequest());
		
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.ccRequestedBy().setEnabled(false);
		form.btnSave().setText(form.getGlobalContext().Core.getCaseNoteRequestRef() == null ? PLACE_REQUEST : SAVE);
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(form.getGlobalContext().Core.getPatientCaseNoteFolderRef() != null && !isDeniedAction(PatientCaseNoteFolderActions.NEW_REQUEST));
			form.btnEdit().setVisible(form.ccOpenRequest().getSelectedRowValue() != null && !isDeniedAction(PatientCaseNoteFolderActions.EDIT_REQUEST));
		}
		
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.cmbReason().setEnabled(form.getLocalContext().getSelectedCaseNoteRequest() == null || form.getLocalContext().getSelectedCaseNoteRequest().getID_PatientCaseNoteRequest() == null);
		}
	}
	
	private boolean isDeniedAction(PatientCaseNoteFolderActions caseNoteAction) 
	{
		if(caseNoteAction == null)
			return false;
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(caseNoteAction.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getMessageBoxIdForExistingRequests() != null && form.getLocalContext().getMessageBoxIdForExistingRequests().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result))
			{
				if(saveRequest(true))
					open(false);
			}
		}
	}
}
