//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdspatientdetails;

import ims.admin.helper.NHSNumberCalculator;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.demographics.GenForm;
import ims.core.forms.pdspatientdetails.GenForm.GroupVisitorEnumeration;
import ims.core.forms.pdspatientdetails.GenForm.grdIdentifiersRow;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsQuery;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientDetailsComponentVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonName;
import ims.core.vo.PersonNameCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.NameType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatIdTypeCollection;
import ims.emergency.vo.lookups.SchoolCollection;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	
	private static final String DUPLICATE_NHSNUMBER_STRING = "*";
	
	//wdev-19528
	private static final String TITLE_DEMOGR 			= "DEM01";
	private static final String FORENAME_DEMOGR 		= "DEM02";
	private static final String MIDDLENAME_DEMOGR 		= "DEM03";
	private static final String SURNAME_DEMOGR 			= "DEM04";
	private static final String SEX_DEMOGR 				= "DEM05";
	private static final String DOB_DEMOGR 				= "DEM06";
	

	private static final Integer NONE = new Integer(0);
	private static final Integer BUTTON_OTHERNAMES = new Integer(1);
	private static final Integer BUTTON_ALIAS = new Integer(2);
	private static final Integer BUTTON_DECEASED = new Integer(3);
	private static final Integer VISITOR_STATUS = new Integer(4);
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//form.txtSurname().setRequired(true);	//wdev-19528
		form.getLocalContext().setButtonAction(NONE);

		//form.txtForename().setRequired(ConfigFlag.DOM.FORENAME1_IS_MANDATORY.getValue());//WDEV-12962
		//form.btnDeceased().setVisible(false);//wdev-12966
		//form.cmbSex().setRequired(ConfigFlag.DOM.GENDER_IS_MANDATORY_FOR_REGISTRATION.getValue());	//WDEV-12972
		
		form.getLocalContext().setDemographicDetailsCannotBeEdited(null);		//wdev-15845
		
		//form.getContextMenus().Core.getIdentifierGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		//setRemoveCommunicationMenuVisibility();
		setRemoveMenuVisibility();
		boolean pdsMode = isPds();
		
		showOverseasStar(pdsMode);//WDEV-23409

		if(pdsMode)
			form.btnDeceased().setPostbackRequirePdsAuthentication(true);
		
		form.imbOtherNames().setVisible(false);
		form.cmbOccupation().setVisible(false);
		
		//WDEV-23168
		boolean svUHMandatoryAttributes = ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue();
		if (svUHMandatoryAttributes)
		{
			setSVUHMandatoryFields();
		}
		form.lblMaidenName().setVisible(svUHMandatoryAttributes);
		form.txtMaidenName().setVisible(svUHMandatoryAttributes);		
		//WDEV-23168 -- end
		
		boolean svuhDemographics = isSVUH();
		form.lblMiddleName().setVisible(svuhDemographics);
		form.txtMiddleName().setVisible(svuhDemographics);
		
		displayAgeRelatedControls(null);
	}

	private boolean isSVUH()
	{
		return ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH");
	}

	//wdev-19232
	public void setSVUHMandatoryFields()
	{
		form.cmbTitle().setRequired(true);
		//form.txtForename().setRequired(true);
		//form.txtSurname().setRequired(true);
		//form.cmbSex().setRequired(true);
		//form.pdtDOB().setRequired(true);
		form.cmbMaritialStatus().setRequired(true);
		form.cmbReligion().setRequired(true);
	}
	
	protected void onBtnDeceasedClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
		
		// PDS AUTHENTICATION
		if(isPds())
		{
    		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
    		if(!pdsAuth.hasRightsFor(PdsRight.AMEND_PATIENT_DECEASE, PdsCheck.CHECK_ALL, null))
    		{
    			engine.showMessage(pdsAuth.getLastError());
    			return;
    		}
    		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		}
		// END PDS AUTHENTICATION
		
		setButtonAction(BUTTON_DECEASED);
		form.fireCustomControlValueChanged();
	}
	
	protected void onImbOtherNamesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
		setButtonAction(BUTTON_OTHERNAMES);
		form.fireCustomControlValueChanged();
	}
	public void setIsRequiredtxtForename(Boolean required)
	{
		form.txtForename().setRequired(required);
	}

	public void setcmbSexIsRequire(Boolean required)
	{
		form.cmbSex().setRequired(required);
	}

	public void setimbOtherNamesVisible(Boolean visible)
	{
		form.imbOtherNames().setVisible(visible);
	}

	public void setdteDodVisible(Boolean visible)
	{
		form.dteDod().setVisible(visible);
		form.lblDod().setVisible(visible);
	}

	public void setdteDodEnabled(Boolean enabled)
	{
		form.dteDod().setEnabled(enabled);
	}

	public void setPatientDetailsFromPatientFilter(PatientFilter patientFilter) 
	{
		if(patientFilter != null)
		{
    		form.txtSurname().setValue(patientFilter.getSurname());
    		form.txtForename().setValue(patientFilter.getForename());
    		if (patientFilter.getSexIsNotNull())
    			form.cmbSex().setValue(patientFilter.getSex());
    		form.pdtDOB().setValue(patientFilter.getDob());
		}
	}

	public void setbtnDeceasedText(String text) 
	{
		form.btnDeceased().setText(text);
		
	}

	public void setbtnDeceasedVisible(Boolean visible) 
	{
		form.btnDeceased().setVisible(visible);
		
	}

	public void clearScreen()
	{
		form.cmbTitle().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename().setValue(null);
		form.txtMiddleName().setValue(null);
		form.cmbSex().setValue(null);
		form.pdtDOB().setValue(null);
		form.txtAge().setValue(null);
		form.dteDod().setValue(null);
		form.timTod().setValue(null);
		form.timTod().setTooltip(null);
		
		form.grdIdentifiers().getRows().clear();
		
		form.cmbVisitorStatus().setValue(null);

		form.ccPicture().clear();
	}

	public Boolean populateScreenFromData(Patient pat) 
	{
		if (pat.getNameIsNotNull())
		{
			form.cmbTitle().setValue(pat.getName().getTitle());
			form.txtSurname().setValue(pat.getName().getSurname());
			form.txtForename().setValue(pat.getName().getForename());
			form.txtMiddleName().setValue(pat.getName().getMiddleName());
		}
		
		form.txtMaidenName().setValue(null);
		if(pat.getOtherNames() != null)
		{
			PersonName maidenName = null;
			
			for(PersonName pn : pat.getOtherNames())
			{
				if(NameType.MAIDEN.equals(pn.getNameType()))
				{
					maidenName = pn;
					break;
				}
			}
			
			//WDEV-23178
			if(maidenName != null)
				form.txtMaidenName().setValue(maidenName.getSurname());
		}

		form.cmbSex().setValue(pat.getSex());
		form.pdtDOB().setValue(pat.getDob());
		form.txtAge().setValue(pat.calculateAgeText());
		form.dteDod().setValue(pat.getDod());
		form.timTod().setValue(pat.getTimeOfDeath());
		form.timTod().setTooltip(pat.getDodIsNotNull() && pat.getTimeOfDeath() ==  null ? "Time of Death<br/>Unknown/Not Recorded" : null);

		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{
			form.btnDeceased().setText("Update Death Details");
			form.btnDeceased().setVisible(true);
			
			//WDEV-16548
			form.dteDod().setVisible(true);
			form.timTod().setVisible(true);
		}

		if (pat.getOtherNamesIsNotNull() && pat.getOtherNames().size() > 0)
		{
			if (pat.getMaidenName() != null)
			{
				form.imbOtherNames().setTooltip("<b>OTHER NAMES<br><br>Maiden Name:  </b>" + pat.getMaidenName().toString());
			}
			form.getGlobalContext().Core.setOtherNames(pat.getOtherNames());
		}
		else
		{
			//form.imbOtherNames().setVisible(false);
			form.imbOtherNames().setTooltip("No Other Names");
		}
		
		displayCaseNoteFolder(pat.getPatId(PatIdType.HOSPNUM));
		
		//WDEV-22562
		form.GroupVisitor().setValue((pat.getHasLivedUKIsNotNull() || pat.getOverseasVisitorIsNotNull()) ? (Boolean.TRUE.equals(pat.getHasLivedUK()) || !Boolean.TRUE.equals(pat.getOverseasVisitor()) ? GroupVisitorEnumeration.rdoYes : GroupVisitorEnumeration.rdoNo) : GroupVisitorEnumeration.None);
		form.cmbVisitorStatus().setValue(pat.getOverseasClassification());	
		
		form.cmbReligion().setValue(pat.getReligion());
		form.cmbEthnicCategory().setValue(pat.getEthnicOrigin());
		form.cmbMaritialStatus().setValue(pat.getMaritalStatus());
		form.txtOccupation().setValue(pat.getTxtOccupation()); 
		form.txtOccupation().setTooltip(pat.getTxtOccupation()); //WDEV-22882
		form.cmbOccupation().setValue(pat.getOccupation());

		if(pat.getSchoolOrCollegeIsNotNull())
		{
			form.qmbSchool().newRow(pat.getSchoolOrCollege(), pat.getSchoolOrCollege().getText());
			form.qmbSchool().setValue(pat.getSchoolOrCollege());
		}
		
		return Boolean.TRUE;
	}

	public void setdteDodValue(Date value) 
	{
		form.dteDod().setValue(value);		
	}

	public Boolean dteDodIsVisible() 
	{
		return form.dteDod().isVisible();

	}

	public PatientDetailsComponentVo getPatientDetails() 
	{
		PatientDetailsComponentVo tempVo = new PatientDetailsComponentVo();
		tempVo.setTitle(form.cmbTitle().getValue());
		tempVo.setForename(form.txtForename().getValue());
		tempVo.setMiddleName(form.txtMiddleName().getValue());
		tempVo.setSurname(form.txtSurname().getValue());
		
		tempVo.setSex(form.cmbSex().getValue());
		tempVo.setDob(form.pdtDOB().getValue());
		tempVo.setDod(form.dteDod().getValue());
		tempVo.setTimeOfDeath(form.timTod().getValue());
		
		return tempVo;
	}
	
	//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
	public void setButtonAction(Integer action) 
	{
		form.getLocalContext().setButtonAction(action);
	}

	//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
	public Integer getButtonAction() 
	{
		return form.getLocalContext().getButtonAction();
	}

	public void setModeForm(FormMode mode) 
	{
		form.setMode(mode);
		
		displayAgeRelatedControls(null);
		
		if(FormMode.EDIT.equals(mode))
			form.txtSurname().setFocus();
	}
	
	//wdev-15845
	public Boolean getDemographicDetailsCannotBeEdited()
	{
		return form.getLocalContext().getDemographicDetailsCannotBeEdited();
	}

	//wdev-15845
	public void setDemographicDetailsCannotBeEdited(Boolean canBeEdited)
	{
		form.getLocalContext().setDemographicDetailsCannotBeEdited(canBeEdited);
		
	}

	//wdev-19528
	public void setConfigurableFields(DemographicControlsConfigVoCollection collfields)
	{
		if( collfields == null || collfields.size() == 0)
			return;
		
		for(int i = 0; i < collfields.size(); i++ )
		{
			DemographicControlsConfigVo tempVo = collfields.get(i); 
			if( tempVo != null )
			{
				if( TITLE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbTitle().setRequired(tempVo.getIsMandatory());
				}
				else if( FORENAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtForename().setRequired(tempVo.getIsMandatory());
				}
				else if( MIDDLENAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtMiddleName().setRequired(tempVo.getIsMandatory());
				}
				else if( SURNAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtSurname().setRequired(tempVo.getIsMandatory());
				}
				else if( SEX_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbSex().setRequired(tempVo.getIsMandatory());
				}
				else if( DOB_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.pdtDOB().setRequired(tempVo.getIsMandatory());
				}
			}
		}
		
		
	}
	
	//wdev-19528 //WDEV-22562
	public String[] getUIErrorsForConfigurableMode()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.lblOverseasStar().isVisible())
		{
			GroupVisitorEnumeration rdoOption = form.GroupVisitor().getValue();
			if(rdoOption == null || GroupVisitorEnumeration.None.equals(rdoOption))
				errors.add("'Resident in UK for last 12 Months' answer is mandatory.");
		}

		if( form.cmbTitle().getVisible() && form.cmbTitle().isRequired() && form.cmbTitle().getValue() == null)
		{
			errors.add("Title is mandatory.");
		}
		if( form.txtForename().isVisible() && form.txtForename().isRequired() && (form.txtForename().getValue() == null || form.txtForename().getValue() == ""))
		{
			errors.add("Forename is mandatory.");
		}
		if( form.txtMiddleName().isVisible() && form.txtMiddleName().isRequired() && (form.txtMiddleName().getValue() == null || form.txtMiddleName().getValue() == ""))
		{
			errors.add("Middlename is mandatory.");
		}
		if( form.txtSurname().isVisible() && form.txtSurname().isRequired() && (form.txtSurname().getValue() == null || form.txtSurname().getValue() == ""))
		{
			errors.add("Surname is mandatory.");
		}
		if( form.cmbSex().getVisible() && form.cmbSex().isRequired() && form.cmbSex().getValue() == null)
		{
			errors.add("Sex is mandatory.");
		}
		if( form.pdtDOB().isVisible() && form.pdtDOB().isRequired() && form.pdtDOB().getValue() == null)
		{
			errors.add("DOB is mandatory.");
		}
		if( form.cmbMaritialStatus().getVisible() && form.cmbMaritialStatus().isRequired() && form.cmbMaritialStatus().getValue() == null)
		{
			errors.add("Marital status is mandatory.");
		}
		if( form.cmbReligion().getVisible() && form.cmbReligion().isRequired() && form.cmbReligion().getValue() == null)
		{
			errors.add("Religion is mandatory.");
		}
		
		if( form.pdtDOB().isVisible() && form.pdtDOB().getValue() != null)   //wdev-13521
		{
			if( form.pdtDOB().getValue().isGreaterThan(new Date()))
			{
				errors.add("DOB cannot be set to a future date.");
				
			}
		}
		if( form.dteDod().isVisible() && form.dteDod().getValue() != null)					//wdev-13521
		{
			if( form.dteDod().getValue().isGreaterThan(new Date()))
			{
				errors.add("DOD cannot be set to a future date.");
				
			}
		}
		if( form.pdtDOB().isVisible() && form.dteDod().isVisible() && form.pdtDOB().getValue() != null && form.dteDod().getValue() != null)	//wdev-13521
		{
			if( form.dteDod().getValue().isLessThan(form.pdtDOB().getValue()))
			{
				errors.add("DOB cannot be later than DOD");
				
			}
		}
		
		if (form.cmbEthnicCategory().getVisible() && form.cmbEthnicCategory().isRequired() && form.cmbEthnicCategory().getValue() == null)
		{
			errors.add("Ethnic Category is mandatory.");
		}
		
		if (form.qmbSchool().isRequired() && form.qmbSchool().getValue() == null)
		{
			errors.add("School / College is mandatory.");
		}
		
		
		grdIdentifiersRow row;
		for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
		{
			row = form.grdIdentifiers().getRows().get(i);
			// WDEV-2496
			if (((row.getcolIdType().getValue() != null) && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() == 0)) || (row.getcolIdType().getValue() != null && row.getcolIdValue() == null) || (row.getcolIdType().getValue() == null && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() != 0)))
			{
				errors.add("Please enter a valid identifier type and value");
			}

			//wdev-6138
			if (row.getcolIdType() != null
				&&row.getcolIdType().getValue() != null
				&& row.getcolIdValue() != null
				&& row.getcolIdValue().trim().length() > 50) 
			{
				errors.add("An entered Identifier is too long. Please reenter with a size less then 50 in length.");
			}

			if (row.getcolIdType() != null && row.getcolIdValue()!=null && PatIdType.NHSN.equals(row.getcolIdType().getValue()) ) //WDEV-21841
			{
				String nospacesString = row.getcolIdValue().replace(" ", "");// wdev-7305

				if (NHSNumberCalculator.ValidNHSNumber(nospacesString) != "")
				{
					errors.add(NHSNumberCalculator.ValidNHSNumber(nospacesString));
				}
				else if (!NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0, 9)).contains(nospacesString.toString()))
    			{
    				errors.add("The NHS number provided is invalid");
    			}
    			else
    				row.setcolIdValue(NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0, 9)));
			}
	
		}
		
		//overseas visitor
		if(GroupVisitorEnumeration.rdoNo.equals(form.GroupVisitor().getValue()) && form.cmbVisitorStatus().getValue() == null)
		{
			errors.add("Visitor Status is mandatory");
		}		
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	public void settimTodValue(Time timeTod)
	{
		form.timTod().setValue(timeTod);		
	}

	public void settimTodVisible(Boolean visible)
	{
		form.timTod().setVisible(visible);
		
	}

	public void settimTodEnabled(Boolean enabled)
	{
		form.timTod().setEnabled(enabled);
		
	}

	public Boolean timTodIsVisible()
	{
		return form.timTod().isVisible();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (sender.equals(form.grdIdentifiers()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					grdIdentifiersRow row = form.grdIdentifiers().getRows().newRow(true);	//wdev-13454
					bindColType(null, row);
					
					PatientId identifier = new PatientId();
					//identifier.setDuplicateNHSNum(0);
					row.setValue(identifier);
					
					form.grdIdentifiers().resetScrollPosition();	//wdev-13454
					setRemoveMenuVisibility();//WDEV-15223
				break;
				case GenForm.ContextMenus.GenericGrid.Remove :
					removeIdentifier();
					setRemoveMenuVisibility();
				break;
				//WDEV-18792
				case GenForm.ContextMenus.GenericGrid.COPY :
					copyToClipboard();
				break;
				case GenForm.ContextMenus.GenericGrid.REMOVE_UNVERIFIED_NHS_NUMBER :
					removeUnverifiedNhsNumber();
				break;
			}
		}
	}

	private void removeUnverifiedNhsNumber()
	{
		int index = form.grdIdentifiers().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select an identifier to remove");
			return;
		}
		form.grdIdentifiers().getRows().remove(index);
	}

	private void removeIdentifier()
	{
		int index = form.grdIdentifiers().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select an identifier to remove");
			return;
		}
		form.grdIdentifiers().getRows().remove(index);
	}
	
	@Override
	public void setVisiblelblEthnicOrigin(Boolean visibleB)
	{
		
	}

	@Override
	public void setcmbEthnicVisble(Boolean isVisible)
	{
		//form.cmbEthnic().setVisible(isVisible);
	}

	@Override
	public void setcmbEthnicEnabled(Boolean enable)
	{
		//form.cmbEthnic().setEnabled(enable);
	}

	@Override
	public void setcmbOccupationVisible(Boolean visible)
	{
		
	}

	@Override
	public void setlblOccupationVisible(Boolean visible)
	{
		
	}

	@Override
	public void setcmbOccupationEnabled(Boolean enabled)
	{
		
	}

	@Override
	public void setimbAliasVisible(Boolean visible)
	{
		form.imbAlias().setVisible(visible);
	}

	@Override
	public void setlblDodVisible(Boolean visible)
	{
		form.lblDod().setVisible(visible);
	}

	@Override
	public void setlblDod2Visible(Boolean visible)
	{
		//form.lblDod2().setVisible(visible);
	}

	@Override
	public void setimbAliasEnabledImage(Image image)
	{
		form.imbAlias().setEnabledImage(image);
	}

	@Override
	public void setimbAliasDisabledImage(Image image)
	{
		form.imbAlias().setDisabledImage(image);
	}

	@Override
	public void setimbAliasTooltip(String tooltip)
	{
		form.imbAlias().setTooltip(tooltip);
	}

	@Override
	public void setimbAliasEnabled(Boolean enabled)
	{
		form.imbAlias().setEnabled(enabled);
	}

	@Override
	public void setValue(Patient pat)
	{
		PatientIdCollection identifers = pat.getIdentifiers();

		grdIdentifiersRow row;

		form.grdIdentifiers().getRows().clear();
		
		PatIdType defaultIdentifier = PatIdType.getNegativeInstance(ConfigFlag.GEN.GENERATE_PATID_TYPE.getValue());
		
		if (identifers != null)
		{
			for (int i = 0; i < identifers.size(); i++)
			{
				ims.core.vo.PatientId id = identifers.get(i);
				//WDEV-13611 check that PatientId type is active
				if(typeIsActive(id.getType()))
				{
					row = form.grdIdentifiers().getRows().newRow();
					
					bindColType(id.getType(), row);
					
					row.getcolIdType().setValue(id.getType());
					row.setCellcolIdTypeTooltip(id.getType().getText() + ": " + id.getValue());
					row.setcolIdValue(id.getValue());
					row.setValue(id);
					if ((!id.getVerifiedIsNotNull() || (id.getVerifiedIsNotNull() && !id.getVerified())) && id.getType().equals(PatIdType.NHSN))
					{
						row.setBackColor(Color.Orange);
						row.setReadOnly(true);
					}
					if (id.getTypeIsNotNull() && id.getType().equals(PatIdType.NHSN) && isPds())
						row.setReadOnly(true);

					//WDEV-21624
					if (id.getTypeIsNotNull() && id.getType().equals(defaultIdentifier))
						row.setReadOnly(true);
					
					row.setcolNHSDUP((id.getDuplicateNHSNum() != null && id.getDuplicateNHSNum() > 0) ? DUPLICATE_NHSNUMBER_STRING : null);
					
					if(id.getDuplicateNHSNum() != null && id.getDuplicateNHSNum() > 0)
					{
						row.setTooltip("Duplicate NHS Number " + id.getDuplicateNHSNum());
					}
				}
			}
		}		
		
		setRemoveMenuVisibility();
		
		displayAgeRelatedControls(pat);
	}
	
	private boolean typeIsActive(PatIdType type) 
	{
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());

		for (int i = 0; i < collTypes.size(); i++)
		{
			if(collTypes.get(i).equals(type))
				return true;
		}
		return false;
	}

	private void bindColType(PatIdType selectedPatIdType, grdIdentifiersRow row)
	{
		row.getcolIdType().clear();
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());
		String[] negativeInstanceNames = PatIdType.getNegativeInstanceNames();
		PatIdType[] ni = PatIdType.getNegativeInstances();
		
		PatIdType flagType = null;
		PatIdType notAllowedFlagType = null;
		for(int j = 0; j < negativeInstanceNames.length; j++)
		{
			if(PatIdType.getNegativeInstanceNames()[j].equals(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()))
			{
				flagType = ni[j];
				//break;
			}
			
			if(PatIdType.getNegativeInstanceNames()[j].equals(ConfigFlag.GEN.GENERATE_PATID_TYPE.getValue()))
			{
				notAllowedFlagType = ni[j];
			}
			
		}		
				
		for (int i = 0; i<collTypes.size(); i++)
		{
			if(selectedPatIdType == null) //new
			{
				/*
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					if(collTypes.get(i).equals(PatIdType.HOSPNUM) || collTypes.get(i).equals(PatIdType.PKEY))
						continue;					
				}
				*/
				
				if(Boolean.TRUE.equals(ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()))
				{
					if(collTypes.get(i).equals(notAllowedFlagType))
						continue;
				}
				
				if(collTypes.get(i).equals(PatIdType.PATNUM))					
					continue;
				
				//you should not be able to add NHS Number for PDS
				if(isPds() && collTypes.get(i).equals(PatIdType.NHSN))
					continue;
				
				/*
				if(collTypes.get(i).equals(flagType))
					continue;
				*/	
				
				row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
			}
			else
			// not new
			{
				/*
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					//if we are displaying a previously saved hospnum or pkey
					if(selectedPatIdType.equals(PatIdType.HOSPNUM) || selectedPatIdType.equals(PatIdType.PKEY) || selectedPatIdType.equals(PatIdType.PATNUM))
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					else
					{
						//we are displaying a previous saved any other patidtype - dont add the pkey and hospnum or patnum
						if(!collTypes.get(i).equals(PatIdType.HOSPNUM) && !collTypes.get(i).equals(PatIdType.PKEY)  && !collTypes.get(i).equals(PatIdType.PATNUM))
							row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					}		
				}
				else
				*/
				{
					//if we are displaying a previously saved patientnumber
					if(selectedPatIdType.equals(PatIdType.PATNUM) || selectedPatIdType.equals(PatIdType.NHSN) || selectedPatIdType.equals(flagType))
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					else
					{
						//we are displaying a previous saved any other patidtype - dont add the patientnumber
						if(collTypes.get(i).equals(PatIdType.PATNUM) || (collTypes.get(i).equals(PatIdType.NHSN) && isPds()) || collTypes.get(i).equals(flagType))
							continue;
						
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					}	
				}
			}
		}
	}

	private void setRemoveMenuVisibility()
	{
		PatIdType defaultIdentifier = PatIdType.getNegativeInstance(ConfigFlag.GEN.GENERATE_PATID_TYPE.getValue());

		boolean bVisible = form.grdIdentifiers().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);

		//WDEV-21624 - cannot remove default identifier
		if(form.grdIdentifiers().getValue() != null && form.grdIdentifiers().getValue().getTypeIsNotNull() && form.grdIdentifiers().getValue().getType().equals(defaultIdentifier))
			bVisible = false;
			
		form.getContextMenus().getGenericGridRemoveItem().setVisible(bVisible);

		if (form.grdIdentifiers().getSelectedRow() != null && form.grdIdentifiers().getSelectedRow().getValue().getTypeIsNotNull() && form.grdIdentifiers().getSelectedRow().getValue().getType().equals(PatIdType.NHSN) && !ConfigFlag.GEN.ALLOW_UPDATES_TO_NHS_NO.getValue())
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		
		form.getContextMenus().getGenericGridCOPYItem().setVisible(form.grdIdentifiers().getSelectedRow() != null);
		
		//WDEV-22487
		bVisible = form.grdIdentifiers().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);
		
		if(bVisible)
		{
			bVisible = form.grdIdentifiers().getValue() != null && PatIdType.NHSN.equals(form.grdIdentifiers().getValue().getType()) && !Boolean.TRUE.equals(form.grdIdentifiers().getValue().getVerified());
		}
		
		form.getContextMenus().getGenericGridREMOVE_UNVERIFIED_NHS_NUMBERItem().setVisible(bVisible);
		//WDEV-22487
	}

	private void copyToClipboard()
	{
		
	   engine.clearClipboard();
		
	   if (form.grdIdentifiers().getSelectedRow() != null && form.grdIdentifiers().getSelectedRow().getcolIdValue() != null)
	   {
		  engine.copyToClipboard(form.grdIdentifiers().getSelectedRow().getcolIdValue());
	   }
		
	}
	
	
	@Override
	public void setPatientImage(PatientRefVo pat)
	{
		form.ccPicture().setValue(pat);
	}

	@Override
	protected void onBtnPhotoClick() throws PresentationLogicException
	{
		form.ccPicture().setMode(FormMode.EDIT);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.PatientImageSelection) && result.equals(DialogResult.CANCEL))
		{
			form.ccPicture().setDBImage(form.getGlobalContext().Core.getPatientImage());									
		}
	}

	@Override
	protected void onCcPictureValueChanged() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getPatientImage() != null)
		{
			form.ccPicture().setDBImage(form.getGlobalContext().Core.getPatientImage());
		}
	}

	@Override
	public Boolean validateData(java.util.ArrayList<String> errors)
	{
		String[] UIErrors = getUIErrorsForConfigurableMode();
		
		if(UIErrors != null)
		{
			if(errors != null)
			{
				for(String err: UIErrors)
				{
					errors.add(err);
				}
			}
			else
			{
				engine.showErrors(UIErrors);
			}
			
			return false;
		}
		
		return true;
	}

	@Override
	public void populateDataFromScreen(Patient patient)
	{
		if(patient.getName() == null)
			patient.setName(new PersonName());
		
		PersonName name = patient.getName();
		
		name.setTitle(form.cmbTitle().getValue());
		name.setForename(form.txtForename().getValue());
		name.setMiddleName(form.txtMiddleName().getValue());
		name.setSurname(form.txtSurname().getValue());
		
		if(form.txtMaidenName().getValue() != null && form.txtMaidenName().getValue().trim().length() > 0)
		{
			PersonName maidenName = null;
			
			if(form.getGlobalContext().Core.getOtherNames() != null)
			{
				for(PersonName pn : form.getGlobalContext().Core.getOtherNames())
				{
					if(NameType.MAIDEN.equals(pn.getNameType()))
					{
						maidenName = pn;
						break;
					}
				}
			}
			
			if(maidenName == null)
			{
				maidenName = new PersonName();
				
				//WDEV-23177
				maidenName.setSurname(form.txtMaidenName().getValue());
				maidenName.setForename(form.txtForename().getValue());
				maidenName.setNameType(NameType.MAIDEN);
			}
		
			
			if(form.getGlobalContext().Core.getOtherNames() == null)
				form.getGlobalContext().Core.setOtherNames(new PersonNameCollection());
			
			//WDEV-23178
			if (maidenName != null && form.getGlobalContext().Core.getOtherNames() != null)
			{
    			for (int i = 0; i < form.getGlobalContext().Core.getOtherNames().size(); i++)
    			{
    				if (maidenName.equals(form.getGlobalContext().Core.getOtherNames().get(i)))
    				{
    					//WDEV-23177
    					form.getGlobalContext().Core.getOtherNames().get(i).setSurname(form.txtMaidenName().getValue()); 
    					//WDEV-23340
    					//form.getGlobalContext().Core.getOtherNames().get(i).setForename(form.txtForename().getValue());
    					break;
    				}
    			}
			}
			// end WDEV-23178
			
			form.getGlobalContext().Core.getOtherNames().add(maidenName);
		}
		
		patient.setSex(form.cmbSex().getValue());
		patient.setDob(form.pdtDOB().getValue());
		patient.setDod(form.dteDod().getValue());
		patient.setTimeOfDeath(form.timTod().getValue());
		
		//WDEV-22693
		if(patient.getName().getObjectidentifier() == null && patient.getName().getNameType() == null)
		{
			//Name type = current needs to be saved against the main patient name
			PdsQuery query = new PdsQuery(null);
			NameType nt = query.getNameTypeByPdsMapping("L");

			patient.getName().setNameType(nt);
		}

		if (form.getGlobalContext().Core.getPatientImage() != null)
		{
			patient.setPhoto(form.getGlobalContext().Core.getPatientImage());
		}
		
		//patient identifiers
		PatientIdCollection coll = new PatientIdCollection();
		grdIdentifiersRow row;
		for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
		{
			row = form.grdIdentifiers().getRows().get(i);
			PatientId id = row.getValue();
			boolean exist = false;
			// WDEV-2496
			if (row.getcolIdType().getValue() != null && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() != 0))
			{
				id.setType((PatIdType) row.getcolIdType().getValue());
				if (id.getType().equals(PatIdType.NHSN)) // wdev-7305
					id.setValue(row.getcolIdValue().replace(" ", ""));
				else
					id.setValue(row.getcolIdValue());

				if (id.getType().equals(PatIdType.NHSN) && id.getVerified() == null)//wdev-15109
					id.setVerified(Boolean.FALSE);
				
				for (int j = 0; j < coll.size(); j++)
				{
					if (coll.get(j).getType().equals(row.getcolIdType()) && coll.get(j).getValue().equals(row.getcolIdValue()))
					{
						exist = true;
						break;
					}
				}

				if (!exist)
				{
					if (id.getType().equals(PatIdType.NHSN))
					{
						id.setVerified(Boolean.FALSE);
						// WDEV-5928 - BW Modified
						// If this identifier is in the saved patient, it may be
						// verified, so leave it if it is
						Patient savedPatient = form.getLocalContext().getSavedPatient();
						if (savedPatient != null)
						{
							PatientId nhsnId = savedPatient.getPatientIdentifier(PatIdType.NHSN);
							if (nhsnId != null && nhsnId.getValue().equals(id.getValue()) && nhsnId.getVerifiedIsNotNull() && nhsnId.getVerified().booleanValue() == true)
							{
								id.setVerified(Boolean.TRUE);
							}
						}

					}
					coll.add(id);
				}
			}
		}

		patient.setIdentifiers(coll);
		
		if(isPds() && patient.getDobIsNotNull())
		{
			int day, month, year;
			
			day = patient.getDob().getDay() == null ? 0 : patient.getDob().getDay();
			month = patient.getDob().getMonth() == null ? 0 : patient.getDob().getMonth();
			year = patient.getDob().getYear();
			
			if(day == 0)
				day = 1;
			if(month == 0)
				month = 1;
			
			patient.setDob(new PartialDate(year, month, day));
		}
		
		//WDEV-22562
		if (!GroupVisitorEnumeration.None.equals(form.GroupVisitor().getValue()))
		{	
			patient.setHasLivedUK(GroupVisitorEnumeration.rdoYes.equals(form.GroupVisitor().getValue()));
			patient.setOverseasVisitor(!GroupVisitorEnumeration.rdoYes.equals(form.GroupVisitor().getValue()));			
		}	
		patient.setOverseasClassification(GroupVisitorEnumeration.rdoNo.equals(form.GroupVisitor().getValue()) ? form.cmbVisitorStatus().getValue() : null);
		
		if(form.txtOccupation().isVisible())
		{
			form.qmbSchool().setValue(null);
		}
		else
		{
			form.txtOccupation().setValue(null);
		}
		
		patient.setMaritalStatus(form.cmbMaritialStatus().getValue());
		patient.setEthnicOrigin(form.cmbEthnicCategory().getValue());
		patient.setReligion(form.cmbReligion().getValue());
		
		
		if(ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			//SVUH
			patient.setTxtOccupation(form.txtOccupation().getValue());
			patient.setSchoolOrCollege(form.qmbSchool().getValue());
		}
		else
		{
			patient.setOccupation(form.cmbOccupation().getValue());
			patient.setSchoolOrCollege(form.qmbSchool().getValue());
		}
		
	}

	@Override
	public void setSavedPatient(Patient patient)
	{
		form.getLocalContext().setSavedPatient(patient);
	}

	protected void onFormModeChanged()
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.txtMaidenName().setEnabled(FormMode.EDIT.equals(form.getMode()));
		//form.imbAlias().setVisible(form.getMode().equals(FormMode.EDIT));
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(form.GroupVisitor().getValue().equals(GroupVisitorEnumeration.rdoNo))
			{
    			form.cmbVisitorStatus().setEnabled(true);
    			form.cmbVisitorStatus().setRequired(true);
			}
			else
			{
    			form.cmbVisitorStatus().setEnabled(false);
    			form.cmbVisitorStatus().setRequired(false);
			}
			
			if(form.qmbSchool().getVisible())
				form.qmbSchool().setEnabled(true);

			if(form.txtOccupation().isVisible())
				form.txtOccupation().setEnabled(true);
		}
		else
		{
			if(form.qmbSchool().getVisible())
				form.qmbSchool().setEnabled(false);

			if(form.txtOccupation().isVisible())
				form.txtOccupation().setEnabled(false);
		}
		
		setRemoveMenuVisibility();
		displayAgeRelatedControls(null);
	
		/*
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnDeceased().setVisible(form.dteDod().getValue() != null);
		}
		else
		{
			form.btnDeceased().setVisible(true);
		}
		*/

		boolean svuhDemographics = isSVUH();
		form.lblMiddleName().setVisible(!svuhDemographics);
		form.txtMiddleName().setVisible(!svuhDemographics);
		form.lblResident1().setVisible(!svuhDemographics);
		form.lblResident2().setVisible(!svuhDemographics);
		form.GroupVisitor().setVisible(!svuhDemographics);
		form.lblVisitorStatus().setVisible(!svuhDemographics);
		form.cmbVisitorStatus().setVisible(!svuhDemographics);

		if(!svuhDemographics)
		{
			form.txtMiddleName().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.GroupVisitor().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.cmbVisitorStatus().setEnabled(form.getMode().equals(FormMode.EDIT) && form.GroupVisitor().getValue().equals(GroupVisitorEnumeration.rdoNo));
		}
	}
	
	public void showOverseasStar(Boolean mandatory)
	{
		form.lblOverseasStar().setVisible(form.getMode().equals(FormMode.EDIT) && mandatory && !isSVUH());//WDEV-23409
		form.lblOverseasStar().setTextColor(Color.Red);
	}

	@Override
	protected void onGrdIdentifiersSelectionChanged() throws PresentationLogicException
	{
		setRemoveMenuVisibility();		
	}

	@Override
	protected void onImbAliasClick() throws PresentationLogicException
	{
		//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
		setButtonAction(BUTTON_ALIAS);
		form.fireCustomControlValueChanged();
	}
	
	private boolean isPds()
	{
		return !"None".equals(ConfigFlag.DOM.USE_PDS.getValue());
	}
	
	public void displayCaseNoteFolder(PatientId id)
	{
		//WDEV-13844 
		if (id == null) 
		{
			return;
		}
		//end 
		
		//need to populate a grid here
		/*
		CaseNoteFolderVo voCN = null;
		try 
		{
			voCN = domain.getCaseNoteFolderLocation(id.getValue());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}

		if (voCN != null)
		{
			form.txtCaseNoteLocation().setValue(voCN.getLocation());
		}
		*/
	}
	
	public void setPDSMandatoryFields(Boolean mandatory)
	{
		form.pdtDOB().setRequired(mandatory);
		form.cmbSex().setRequired(mandatory);
	}

	@Override
	protected void onRadioButtonGroupVisitorValueChanged() throws PresentationLogicException
	{
		if(GroupVisitorEnumeration.rdoNo.equals(form.GroupVisitor().getValue()))
		{
			form.cmbVisitorStatus().setEnabled(true);
			form.cmbVisitorStatus().setRequired(true);
		}
		else
		{
			form.cmbVisitorStatus().setEnabled(false);
			form.cmbVisitorStatus().setValue(null);
		}
		
		setButtonAction(VISITOR_STATUS);
		form.fireCustomControlValueChanged();
	}

	@Override
	public void showHideButtons(Boolean showHide)
	{
		form.btnDeceased().setVisible(showHide && engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED));
		form.imbAlias().setVisible(showHide);
		//form.imbOtherNames().setVisible(showHide);
	}

	@Override
	public Boolean isOverseasVisitor()
	{
		return GroupVisitorEnumeration.rdoNo.equals(form.GroupVisitor().getValue());
	}

	@Override
	protected void onQmbSchoolTextSubmited(String value) throws PresentationLogicException
	{
		populateSchoolQueryCombo(value);
	}

	private void populateSchoolQueryCombo(String value)
	{
		form.qmbSchool().clear();
		
		if (value == null || value.length() == 0)
			return;

		SchoolCollection schoolColl = domain.getSchool(value);

		if (schoolColl != null && schoolColl.size() > 0)
		{
			for (int i = 0; i < schoolColl.size(); i++)
			{
				form.qmbSchool().newRow(schoolColl.get(i), schoolColl.get(i).getText());
			}
			
			if(schoolColl.size() > 1)
				form.qmbSchool().showOpened();
			else
				form.qmbSchool().setValue(schoolColl.get(0));
		}
	}

	private void displayAgeRelatedControls(PatientShort pat)
	{
		boolean ageGreater16 = false;
		Integer age = null;
		
		if(pat == null)
		{
			PartialDate dob = getPatientDetails().getDob();
			Date dod = getPatientDetails().getDod();
			
			if(dob == null)
				age = null;
			else
			{
				int patAge = 0;
				if (dod != null)
				{
					patAge = dod.yearDiff(dob);
				}
				else
				{
					patAge = new ims.framework.utils.Age(dob, dod).getYears();
				}
				
				age = new Integer(patAge);
			}
		}
		else
		{
			age = pat.getAge();
		}
		
		if(age == null || age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
		{
			ageGreater16 = true;
		}
		
		form.qmbSchool().setRequired(!Boolean.TRUE.equals(form.getLocalContext().getFormOpenedFromNavigation()) && !ageGreater16);
		form.lblOccupation().setVisible(ageGreater16);
		form.txtOccupation().setVisible(ageGreater16);
		form.lblSchool().setVisible(!ageGreater16);
		form.qmbSchool().setVisible(!ageGreater16);
		form.cmbOccupation().setVisible(ageGreater16);

		if(ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			//SVUH
			form.cmbOccupation().setVisible(false);
			//form.txtOccupation().setVisible(true && ageGreater16);
			form.lblOccupation().setVisible(true);
			form.txtOccupation().setVisible(true);
			
			//for SVUH we only display txtOccupation as they don't treat children
			form.lblSchool().setVisible(false);
			form.qmbSchool().setVisible(false);
		}
		else
		{
			form.cmbOccupation().setVisible(form.lblOccupation().isVisible());
			form.txtOccupation().setVisible(false);
		}
		
		//System.out.println(form.getMode().toString());

		if(form.getMode().equals(FormMode.VIEW))
		{
			if(form.txtOccupation().isVisible())
				form.txtOccupation().setEnabled(false);
			if(form.cmbOccupation().getVisible())
				form.cmbOccupation().setEnabled(false);
			if(form.qmbSchool().getVisible())
				form.qmbSchool().setEnabled(false);
		}
		else
		{
			if(form.txtOccupation().isVisible())
				form.txtOccupation().setEnabled(true);
			if(form.cmbOccupation().getVisible())
				form.cmbOccupation().setEnabled(true);
			if(form.qmbSchool().getVisible())
				form.qmbSchool().setEnabled(true);
		}
	}

	@Override
	public void setFormOpenedFromNavigation(Boolean value)
	{
		form.getLocalContext().setFormOpenedFromNavigation(value);
	}

	@Override
	protected void onPdtDOBValueChanged() throws PresentationLogicException
	{
		displayAgeRelatedControls(null);

		if(form.txtOccupation().isVisible())
		{
			form.qmbSchool().setValue(null);
		}
		else
		{
			form.txtOccupation().setValue(null);
		}
		
	}

	@Override
	public void setSurnameFocus()
	{
		form.txtSurname().setFocus();
	}

	@Override
	public void setMaidenName(String maidenName)
	{
		form.txtMaidenName().setValue(maidenName);
	}

	@Override
	public String getMaidenName()
	{
		return form.txtMaidenName().getValue();
	}
	
}
