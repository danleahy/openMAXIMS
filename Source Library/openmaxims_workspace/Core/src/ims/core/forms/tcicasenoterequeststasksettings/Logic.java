//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.tcicasenoterequeststasksettings;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.TCIRequestsBatchSettingsVo;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IDynamicFormDataOperations;

import com.ims.query.builder.client.PrinterAvailableCollection;
import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic implements IDynamicFormDataOperations
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialise();		
	}

	@Override
	public void saveData() throws Exception 
	{
		TCIRequestsBatchSettingsVo jobSettingsVo = getData();
		
		String[] errors = jobSettingsVo.validate();
		
		if(errors != null && errors.length > 0)
			throw new Exception("Validation Errors");
		
		domain.saveConfiguration(jobSettingsVo);		
	}

	@Override
	public String[] validateData() 
	{
		return getData().validate(validateUIRules());
	}
	
	// private methods -------------------------------- 
	
	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.cmbPrinter().getValue() == null)
		{
			errors.add("'Automatic Batch Printer for TCI Requests' is mandatory.");
		}
		if (form.intNoOfDays().getValue() == null)
		{
			errors.add("'Print Requests for TCIs Due in' is mandatory.");
		}
		if (form.intNoOfDays().getValue() != null && form.intNoOfDays().getValue() == 0)
		{
			errors.add("'Print Requests for TCIs Due in' must be greater than 0.");
		}
		if (errors.size() == 0)
			return null;
		
		String[] uiErrors = errors.toArray(new String[errors.size()]);
		engine.showErrors("Invalid TCI Requests Batch Settings record", uiErrors);
		return uiErrors;
	}

	private TCIRequestsBatchSettingsVo getData()
	{
		TCIRequestsBatchSettingsVo jobSettings = populateDataFromScreen(form.getLocalContext().getSelRecord());
		jobSettings.setConfiguredJobDetails(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		
		return jobSettings;		
	}
	private TCIRequestsBatchSettingsVo populateDataFromScreen(TCIRequestsBatchSettingsVo settingsVo)
	{
		if (settingsVo == null)
			settingsVo = new TCIRequestsBatchSettingsVo();
		
		settingsVo.setPrintAgentTo(form.cmbPrinter().getValue());
		settingsVo.setPrintRequestsForTCIsInNdays(form.intNoOfDays().getValue());
		settingsVo.setProcessedRequestsNo(form.intTotalReq().getValue());
		settingsVo.setSuccessfulRequestsUpdatedNo(form.intSuccessReq().getValue());
	
		return settingsVo;
	}
	private void populateScreenFromData(TCIRequestsBatchSettingsVo settingsVo)
	{
		clearScreen();
		
		if (settingsVo == null)
			return;
		
		form.intSuccessReq().setValue(settingsVo.getSuccessfulRequestsUpdatedNo());
		form.intTotalReq().setValue(settingsVo.getProcessedRequestsNo());
		form.intNoOfDays().setValue(settingsVo.getPrintRequestsForTCIsInNdays());
		form.cmbPrinter().setValue(settingsVo.getPrintAgentTo());
		form.intFailedReqNo().setValue(settingsVo.getProcessedRequestsNo() != null ? settingsVo.getProcessedRequestsNo() - (settingsVo.getSuccessfulRequestsUpdatedNo() != null ?  settingsVo.getSuccessfulRequestsUpdatedNo() : 0) :  null);
	}
	private void initialise() 
	{
		loadPrinterList();
		open();
	}
	
	private void open()
	{
		TCIRequestsBatchSettingsVo jobSettings = domain.getConfiguration(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		
		form.getLocalContext().setSelRecord(jobSettings);
		
		populateScreenFromData(form.getLocalContext().getSelRecord());
		
	}

	private void loadPrinterList()
	{
		form.cmbPrinter().clear();		
		QueryBuilderClient qbc = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());

		try
		{
			PrinterAvailableCollection printers = qbc.listPrinters(ConfigFlag.GEN.REPORT_SERVER_URL.getValue());
			String[] printersColl = new String[printers.size()];

			for (int i = 0; i < printers.size(); i++)
			{
				form.cmbPrinter().newRow(printers.get(i).getName(), printers.get(i).getName());
				printersColl[i] = printers.get(i).getName();
			}
			
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Error getting the printers list: " + e.toString());
			return;
		}
	}
	
	private void clearScreen()
	{
		form.intFailedReqNo().setValue(null);
		form.intNoOfDays().setValue(null);
		form.intSuccessReq().setValue(null);
		form.intTotalReq().setValue(null);
		form.cmbPrinter().setValue(null);		
	}
	
	//------------------
}
