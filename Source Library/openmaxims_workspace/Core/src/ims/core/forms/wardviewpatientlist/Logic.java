//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.wardviewpatientlist;

import ims.RefMan.vo.PatientElectiveListBedInfoVo;
import ims.RefMan.vo.PatientElectiveListBedInfoVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo;
import ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVoCollection;
import ims.core.vo.HomeLeaveVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientLite_IdentifiersVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.TrackingForPendingEmergencyAdmitVo;
import ims.core.vo.TrackingForPendingEmergencyAdmitVoCollection;
import ims.core.vo.WardConfigLiteVo;
import ims.core.vo.WardViewPatientListVo;
import ims.core.vo.WardViewPatientListVoCollection;
import ims.core.vo.enums.AdmitToWardAdmissionType;
import ims.core.vo.enums.AdmitToWardMode;
import ims.core.vo.enums.BedDialogPatientDataTabs;
import ims.core.vo.enums.BedInfoAction;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.BedAvailabilityForTrackingVo;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;
import ims.framework.utils.beans.ColorBean;
import ims.vo.interfaces.IPendingAdmission;
import ims.vo.interfaces.IPendingAdmissionDetails;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	private static final int COL_PATIENT_SURNAME = 0;
	private static final int COL_PATIENT_FORENAME = 1;
	private static final int COL_PATIENT_IDENTIFIER = 2;
	private static final int COL_PATIENT_SEX = 3;
	private static final int COL_PATIENT_DOB = 4;
	private static final int COL_PATIENT_AGE = 5;
	private static final int COL_PATIENT_TRANSFER_BED_READY_DATE = 6;
	private static final int COL_PATIENT_LOS = 6;
	private static final int COL_PATIENT_TCIDATE = 6;
	private static final int COL_PATIENT_TRANSFER_IN_WARD = 6;
	private static final int COL_PATIENT_TRANSFER_OUT_WARD = 7;
	private static final int COL_PATIENT_TCICOMMENT = 7;
	private static final int COL_BED_STATUS = 8; //WDEV-22478

	private static final String INTENSE_ORANGE_COLOR_HEXA_CODE = "#FF6600";

	class BedReadyDateTimeComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order =1;
		public BedReadyDateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		public BedReadyDateTimeComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}

		public int compare(Object o1, Object o2)// WDEV-15414
		{
			if (o1 instanceof WardViewPatientListVo && o2 instanceof WardViewPatientListVo)
			{
				WardViewPatientListVo o1Vo = (WardViewPatientListVo) o1;
				WardViewPatientListVo o2Vo = (WardViewPatientListVo) o2;

				if (o1Vo != null && o1Vo.getPendingTransfer() != null && o1Vo.getPendingTransfer().getBedAvailableDateTimeIsNotNull() && o2Vo != null && o2Vo.getPendingTransferIsNotNull() && o2Vo.getPendingTransfer().getBedAvailableDateTimeIsNotNull())
				{
					return order * o1Vo.getPendingTransfer().getBedAvailableDateTime().compareTo(o2Vo.getPendingTransfer().getBedAvailableDateTime());
				}

				if (o1 == null || !(o1Vo.getPendingTransfer() != null) || !(o1Vo.getPendingTransfer().getBedAvailableDateTimeIsNotNull()))
					return -1 * order;

				if (o2 == null || !(o2Vo.getPendingTransfer() != null) || !(o2Vo.getPendingTransfer().getBedAvailableDateTimeIsNotNull()))
					return order;
			}

			return 0;
		}
	}

	static class WardViewPatientListDOBComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order = 1;

		public WardViewPatientListDOBComparator()
		{
			this(SortOrder.ASCENDING);
		}
		public WardViewPatientListDOBComparator(SortOrder sortOrder)
		{
			order = SortOrder.DESCENDING.equals(sortOrder)? -1:1;
		}

		public int compare(Object o1, Object o2)
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;

			if (o1 instanceof WardViewPatientListVo && o2 instanceof WardViewPatientListVo)
			{
				pdate1 = ((WardViewPatientListVo) o1).getPatient() != null ? ((WardViewPatientListVo) o1).getPatient().getDob() : null;
				pdate2 = ((WardViewPatientListVo) o2).getPatient() != null ? ((WardViewPatientListVo) o2).getPatient().getDob() : null;				
			}	

			if(o1 instanceof IPendingAdmission && o2 instanceof IPendingAdmission)
			{
				IPendingAdmission ps1 = (IPendingAdmission)o1;
				pdate1 = ps1.getPatientDoB();
				IPendingAdmission ps2 = (IPendingAdmission)o2;
				pdate2 = ps2.getPatientDoB();
			}

			if (pdate1 != null && pdate2 != null)
				return  pdate1.compareTo(pdate2)*order;
			if (pdate1 != null)
				return order;
			if (pdate2 != null)
				return -1*order;

			return 0;
		}
	}

	class WardViewPatientListAgeComparator implements Comparator<Object>//WDEV-15414 
	{
		private int order = 1;

		public WardViewPatientListAgeComparator()
		{
			order = 1;
		}
		public WardViewPatientListAgeComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}

		public int compare(Object o1, Object o2)// WDEV-15414
		{
			IPendingAdmission o1Vo = null;
			IPendingAdmission o2Vo = null;

			if (o1 instanceof WardViewPatientListVo && o2 instanceof WardViewPatientListVo)
			{
				o1Vo = ((WardViewPatientListVo) o1).getPatient();
				o2Vo = ((WardViewPatientListVo) o2).getPatient();				
			}
			if (o1 instanceof IPendingAdmission && o2 instanceof IPendingAdmission)
			{
				o1Vo = (IPendingAdmission) o1;
				o2Vo = (IPendingAdmission) o2;
			}
			if (o1Vo != null && o2Vo != null)
				return new ims.core.forms.bedadmissioncomponent.Logic.BedAdmissionAgeComparator().compare(o1Vo, o2Vo) * order;

			return 0;
		}
	}

	private static class BedAvailabilityStatusComparator implements Comparator<TrackingForPendingEmergencyAdmitVo>
	{
		private int direction;

		public BedAvailabilityStatusComparator(SortOrder sortOrderAlert)
		{
			if (SortOrder.ASCENDING.equals(sortOrderAlert))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(TrackingForPendingEmergencyAdmitVo o1, TrackingForPendingEmergencyAdmitVo o2)
		{
			if (o1.getBedAvailability() != null && o2.getBedAvailability() != null)
			{
				Integer val1, val2;

				if (o1.getBedAvailability().getAvailableDateTime() != null)
				{
					val1 = 1;
				}
				else if (o1.getBedAvailability().getAwaitingDateTime() != null)
				{
					val1 = 2;
				}
				else 
					val1 = 0;

				if (o2.getBedAvailability().getAvailableDateTime() != null)
				{
					val2 = 1;
				}
				else if (o2.getBedAvailability().getAwaitingDateTime() != null)
				{
					val2 = 2;
				}
				else 
					val2 = 0;

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}

				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}				
			}

			return 0;
		}
	}

	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args == null || args.length == 0)
			form.getLocalContext().setSelectedVIEW(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_OCCUPYING_A_BED);
		else
			form.getLocalContext().setSelectedVIEW(args[0]);

		initialize(form.getLocalContext().getSelectedVIEW());
		engine.clearPatientContextInformation();

		open(form.getLocalContext().getSelectedVIEW());
	}


	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		LocationRefVo ward = form.getGlobalContext().Core.getWardViewPatientListWard();
		//LocationRefVo bay = form.getGlobalContext().Core.getWardViewPatientListBay();

		if (formName.equals(form.getForms().Core.TransferCancellation))
		{			
			boolean isOnTransferInList = form.getLocalContext().getSelectedVIEWIsNotNull() && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN);

			if (DialogResult.OK.equals(result))
			{			
				try
				{
					PendingTransfersLiteVo voTransfer = form.getGlobalContext().Core.getADTPendingTransfer();
					domain.cancelTransfer(voTransfer, ward);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					open(form.getLocalContext().getSelectedVIEW());				
					return;
				}
				catch (ForeignKeyViolationException e)
				{
					engine.showMessage(e.getMessage());				
					return;
				}			
			}
			if (isOnTransferInList)
			{
				form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
			}
			form.getGlobalContext().Core.setADTPendingTransfer(null);
		}
		else if (formName.equals(form.getForms().RefMan.NewElectiveListTCIErodDialog))
		{
			clearPatientElectiveListContexts();
		}
		else if (formName.equals(form.getForms().Core.BedInfoDialog))
		{
			boolean isOnHomeLeaveView =  form.getLocalContext().getSelectedVIEW() != null && (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED));

			if (BedInfoAction.TRANSFERWAITINGAREAPATIENT.equals(form.getGlobalContext().Core.getBedInfoAction()) || BedInfoAction.TRANSFERWARDPATIENT.equals(form.getGlobalContext().Core.getBedInfoAction()) || BedInfoAction.TRANSFERHOMELEAVEPATIENT.equals(form.getGlobalContext().Core.getBedInfoAction()))
			{
				boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
				boolean hasInpatientEpisode = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode() != null;

				if (isWardViewPatient && hasInpatientEpisode && !isOnHomeLeaveView)
				{	
					boolean hasPendingTransfer = ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer() != null;
					form.getGlobalContext().Core.setADTPendingTransfer(hasPendingTransfer ? domain.getPendingTransferLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer()) : null);
				}
			}
			form.getGlobalContext().Core.setSelectedBedSpaceState(null);
			form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
			form.getGlobalContext().Core.setBedInfoAction(null);
			//WDEV-22789
			if (!DialogResult.OK.equals(result))
				form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
		}
		//WDEV-20988
		else if (formName.equals(form.getForms().Emergency.EDDecisionToAdmitDialog))
		{			
			form.getGlobalContext().Emergency.setTracking(null);
		}
		else if (formName.equals(form.getForms().Core.BedReadyDetailsDialog) && DialogResult.OK.equals(result))
		{
			try
			{
				PendingTransfersLiteVo voTransfer = form.getGlobalContext().Core.getADTPendingTransfer();
				domain.updatePendingTransfer(voTransfer);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open(form.getLocalContext().getSelectedVIEW());				
				return;
			}	
		}
		else if (formName.equals(form.getForms().Core.AdmitToWard) && DialogResult.OK.equals(result))
		{
			if (form.getGlobalContext().Core.getSelectionAdmitToWard() != null)
			{	
				form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
			}
			form.getGlobalContext().Core.setSelectionAdmitToWard(null);
		}

		// Refresh screen
		open(form.getLocalContext().getSelectedVIEW());
	}

	private void clearPatientElectiveListContexts()
	{
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setPatientElectiveListRef(null);		
	}


	@Override
	protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		gridSelectionChanged();		
	}


	private void gridSelectionChanged()
	{
		form.getGlobalContext().Core.setPatientShort(null);//WDEV-22431
		form.getGlobalContext().Core.setCurrentCareContext(null);//WDEV-22431
		if (form.dyngrdPatients().getValue() == null)
			return;

		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpis = isWardViewPatient &&  ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisodeIsNotNull();
		boolean isElectiveListEntry = form.dyngrdPatients().getValue() instanceof PatientElectiveListBedInfoVo;
		boolean isEDPatient = form.dyngrdPatients().getValue() instanceof TrackingForPendingEmergencyAdmitVo;
		boolean isPendingEmergencyAdmissionPatient = form.dyngrdPatients().getValue() instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo;

		form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Emergency.setTracking(null);

		if (hasInpatientEpis)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{				
				if (selectedRecord.getInpatientEpisode().getPasEventIsNotNull())
					form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(selectedRecord.getInpatientEpisode().getPasEvent()));
			}
		}
		else if (isElectiveListEntry)
		{	
			PatientElectiveListBedInfoVo selectedTCI = (PatientElectiveListBedInfoVo) form.dyngrdPatients().getValue();

			form.getGlobalContext().RefMan.setPatientElectiveListRef((PatientElectiveListRefVo) form.dyngrdPatients().getValue());
			form.getGlobalContext().RefMan.setCatsReferral(selectedTCI.getReferral());
			form.getGlobalContext().Core.setSelectedAdmissionTypeAdmitToWard(AdmitToWardAdmissionType.PENDING_TCI);
		}
		else if (isEDPatient)
		{
			TrackingForPendingEmergencyAdmitVo selectedEDRecord = (TrackingForPendingEmergencyAdmitVo) form.dyngrdPatients().getValue();

			if (selectedEDRecord.getAttendance() != null)
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForTrackingAttendance(selectedEDRecord.getAttendance()));

			form.getGlobalContext().Emergency.setTracking(selectedEDRecord);
			form.getGlobalContext().Core.setSelectedAdmissionTypeAdmitToWard(AdmitToWardAdmissionType.PENDING_ED);
		}
		else if (isPendingEmergencyAdmissionPatient)
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVo selectedPendingEmerg = (CatsReferralPendingEmergencyNonEDAdmissionListVo) form.dyngrdPatients().getValue();

			form.getGlobalContext().RefMan.setCatsReferral(selectedPendingEmerg);
			form.getGlobalContext().Core.setSelectedAdmissionTypeAdmitToWard(AdmitToWardAdmissionType.PENDING_EMERGENCY);
		}

		if(!form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) 
			form.getGlobalContext().Core.setPatientShort(getPatientShort());


		updateControlsState();
	}


	private PatientShort getPatientShort()//WDEV-22431
	{
		PatientRefVo patient= null;
		Object rowValue = form.dyngrdPatients().getValue();
		
		if(rowValue == null)
			return null;
		
		if(rowValue instanceof PatientElectiveListBedInfoVo)
		{
			PatientElectiveListBedInfoVo selectRecord = (PatientElectiveListBedInfoVo) rowValue;//WDEV-22431
			patient = selectRecord != null ? selectRecord.getPatient():null;
			
		}
		else if(rowValue instanceof TrackingForPendingEmergencyAdmitVo)
		{
			TrackingForPendingEmergencyAdmitVo selectRecord = (TrackingForPendingEmergencyAdmitVo) rowValue;//WDEV-22431
			patient = selectRecord != null ? selectRecord.getPatient():null;
			
		}
		else if(rowValue instanceof WardViewPatientListVo)
		{
			WardViewPatientListVo selectRecord = (WardViewPatientListVo) rowValue;//WDEV-22431
			patient = selectRecord != null ? selectRecord.getPatient():null;
			
		}
		else if(rowValue instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo)
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVo selectRecord = (CatsReferralPendingEmergencyNonEDAdmissionListVo) rowValue;//WDEV-22431
			patient = selectRecord != null ? selectRecord.getPatient():null;
		}
		else if(rowValue instanceof PatientLite_IdentifiersVo)
		{
			PatientLite_IdentifiersVo selectRecord = (PatientLite_IdentifiersVo) rowValue;//WDEV-22431
			patient = selectRecord != null ? selectRecord.getPatient():null;
		}
		
		return patient != null && patient.getID_PatientIsNotNull() ? domain.getPatientShort(patient): null;
	}


	@Override
	protected void onBtnAdmitToWardClick() throws PresentationLogicException
	{

		if (form.dyngrdPatients().getValue() instanceof TrackingForPendingEmergencyAdmitVo)
			form.getGlobalContext().Core.setSelectionAdmitToWard((IPendingAdmissionDetails) form.dyngrdPatients().getValue());

		if (form.dyngrdPatients().getValue() instanceof PatientElectiveListBedInfoVo)
			form.getGlobalContext().Core.setSelectionAdmitToWard((IPendingAdmissionDetails) domain.getPatientElectiveList((PatientElectiveListRefVo) form.dyngrdPatients().getValue()));

		if (form.dyngrdPatients().getValue() instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo)
			form.getGlobalContext().Core.setSelectionAdmitToWard((IPendingAdmissionDetails) form.dyngrdPatients().getValue());


		engine.open(form.getForms().Core.AdmitToWard, new Object[] {AdmitToWardMode.SELECTION_ADMIT});
	}


	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		boolean isOnPendingElectiveView = form.getLocalContext().getSelectedVIEWIsNotNull() && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ELECTIVE_TCI_ADMISSIONS);
		boolean isOnEDView = form.getLocalContext().getSelectedVIEWIsNotNull() && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS);

		clearBedManagementGC();
		if (isOnPendingElectiveView)
		{	
			clearPatientElectiveListContexts();
		}
		if (isOnEDView)
		{
			form.getGlobalContext().Emergency.setTracking(null);
		}
		engine.close(DialogResult.OK);
	}


	private void clearBedManagementGC()
	{		
		form.getGlobalContext().Core.setSelectedBedSpaceState(null);
		form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
		form.getGlobalContext().Core.setBedInfoAction(null);
		form.getGlobalContext().Core.setADTPendingTransfer(null);
	}

	//WDEV-22353
	private Boolean isNotMosUser(String message)
	{
		Object mos = domain.getMosUser();
		if (mos == null)
		{
			engine.showMessage(message, "Not Allowed", MessageButtons.OK, MessageIcon.WARNING);
			return true;
		}
		return false;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.CoreNamespace.WardView.TRANSFER:
			//WDEV-22353
			if(!isNotMosUser("Logged-in user is not associated with a Member of Staff. Transfer cannot continue."))
			{
				recordTransfer();
			}
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.ACCEPT_TRANSFER:
			//WDEV-22353
			if(!isNotMosUser("Logged-in user is not associated with a Member of Staff. Cannot accept transfer."))
			{
				acceptTransferNoBed();
			}
			break;
		case GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_TRANSFER:
			//WDEV-22353
			if(!isNotMosUser("Logged-in user is not associated with a Member of Staff. Cannot cancel transfer."))
			{
				cancelTransfer();
			}
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.ASSIGNWARD:
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.DISCHARGE:
			//WDEV-22353
			if(!isNotMosUser("Logged-in user is not associated with a Member of Staff. Discharge cannot continue."))
			{
				dischargePatient();
			}
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.VIEW_DTA:
			viewDTADetails();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.VIEW_ELECTIVE_LIST:
			viewPatientElectiveListEntry();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.RETURN_FROM_HOMELEAVE:
			returnFromHomeLeave();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_HOME_LEAVE:
			cancelHomeLeave();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_HOMELEAVE_RETURN:
			cancelReturnFromHomeLeave();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.BED_READY:
			recordBedReadyDetails(form.getLocalContext().getSelectedVIEW());
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.EDITHOMELEAVE:
			editHomeLeave();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.VACATEBED:
			vacatePatientBed();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.UNDO_READY_TO_LEAVE:
			initiateUndoReadyToLeave();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.RETURN_FROM_LEAVE_TO_BED:
			returnFromHomeLeaveAssignBed();
			break;

		case GenForm.ContextMenus.CoreNamespace.WardView.RETURN_FROM_LEAVE_WARD:
			returnFromHomeLeaveToWard();
			break;	
		}
		updateControlsState();
	}
	private void returnFromHomeLeaveToWard()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean isOnHomeLeaveWithRetainedBedView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED);
		boolean isOnHomeLeaveView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE);

		InpatientEpisodeLiteVo selectedInpatient = null;

		if (isWardViewPatient)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}			
			}		
			if (isOnHomeLeaveWithRetainedBedView)
				selectedInpatient = form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode();
			else if (isOnHomeLeaveView)
				selectedInpatient = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();

			if (selectedInpatient != null)
			{	
				form.getLocalContext().setMessageBoxReturnFromHomeLeaveToWard(engine.showMessage(" Are you sure you want to return this patient from home leave without assigning a bed? The patient will be put in 'Awaiting bed' section of the ward.", "Return from Leave ", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}	
		}
	}
	private boolean doReturnFromHomeLeaveToWard()
	{		
		InpatientEpisodeLiteVo voInpatEpis = null;
		boolean isOnHomeLeaveWithRetainedBedView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED);
		boolean isOnHomeLeaveView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE);

		if (isOnHomeLeaveWithRetainedBedView)
			voInpatEpis = form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode();
		else if (isOnHomeLeaveView)
			voInpatEpis = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();


		HomeLeaveVo voHL = new HomeLeaveVo();
		voHL.setDateReturnedFromHomeLeave(new Date());
		voHL.setTimeReturnedFromHomeLeave(new Time());

		if (voInpatEpis == null)
		{
			engine.showMessage("Invalid Inpatient record.");
			return false;
		}			
		try
		{
			domain.returnFromHomeLeaveToWard(voInpatEpis, voHL);
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(form.getLocalContext().getSelectedVIEW());
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			open(form.getLocalContext().getSelectedVIEW());
			return false;
		}
		return true;
	}


	private void initiateUndoReadyToLeave()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpisode = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode() != null;
		boolean isOnReadyToLeaveView = isWardViewPatient && hasInpatientEpisode && form.getLocalContext().getSelectedVIEW() != null && (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_READY_TO_LEAVE));
		boolean hasPatientDied = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPatientIsNotNull() && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPatient().getDodIsNotNull();

		if (isOnReadyToLeaveView && hasInpatientEpisode)
		{		
			form.getLocalContext().setMessageBoxUndoReadyToLeave(engine.showMessage(((hasPatientDied ? "Patient is deceased." : "") + " Are you sure you wish to remove this patient from 'Ready to Leave' list?"), "", MessageButtons.YESNO));
			return;
		}		
	}

	private boolean doUndoReadyToLeave()
	{		
		WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();

		InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(selectedRecord.getInpatientEpisode());
		selectedInpatientEpisode.setIsReadyToLeave(Boolean.FALSE);
		selectedInpatientEpisode.setReadyToLeaveDecisionDateTime(null);

		String[] validationErrors = selectedInpatientEpisode.validate();

		if (validationErrors != null)
		{
			engine.showErrors(validationErrors);
			return false;
		}

		try {

			domain.undoReadyToLeave(selectedInpatientEpisode);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open(form.getLocalContext().getSelectedVIEW());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(form.getLocalContext().getSelectedVIEW());
			return false;
		}
		return true;
	}

	private void editHomeLeave()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpis = isWardViewPatient &&  ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisodeIsNotNull();

		if (hasInpatientEpis)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.EDITHOMELEAVE);
			}
			engine.open(form.getForms().Core.BedInfoDialog, new Object[] {BedDialogPatientDataTabs.TAB_RETURNFROMHOMELEAVE}); //WDEV-22522
		}

	}

	private void vacatePatientBed()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpis = isWardViewPatient &&  ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisodeIsNotNull();

		if (hasInpatientEpis)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.VACATEBED);
			}
			engine.open(form.getForms().Core.BedInfoDialog, new Object[] {BedDialogPatientDataTabs.TAB_RETURNFROMHOMELEAVE}); //WDEV-22522
		}

	}


	private void recordBedReadyDetails(Object selectedVIEW)
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;		
		boolean hasPendingTransfer = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer() != null;

		if (isWardViewPatient && hasPendingTransfer)
		{
			PendingTransfersLiteVo pendingTransfVo = domain.getPendingTransferLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer());
			form.getGlobalContext().Core.setADTPendingTransfer(pendingTransfVo);			
			boolean bedReadyReadOnlyMode = form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_OUT) ? Boolean.TRUE : Boolean.FALSE;
			engine.open(form.getForms().Core.BedReadyDetailsDialog, new Object[]{bedReadyReadOnlyMode});
		}

	}


	//WDEV-20669 
	private void cancelReturnFromHomeLeave()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpis = isWardViewPatient &&  ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisodeIsNotNull();

		if (hasInpatientEpis)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.CANCELRETURNFROMHOMELEAVE);
			}
			engine.open(form.getForms().Core.BedInfoDialog);
		}

	}

	private void cancelHomeLeave()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpis = isWardViewPatient &&  ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisodeIsNotNull();

		if (hasInpatientEpis)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.CANCELHOMELEAVE);
			}
			engine.open(form.getForms().Core.BedInfoDialog, new Object[] {BedDialogPatientDataTabs.TAB_CANCEL_RETURNFROMHOMELEAVE});
		}
	}

	private void returnFromHomeLeave()
	{	
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpis = isWardViewPatient &&  ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisodeIsNotNull();

		if (hasInpatientEpis)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.RETURNFROMHOMELEAVE);
			}
			engine.open(form.getForms().Core.BedInfoDialog, new Object[] {BedDialogPatientDataTabs.TAB_RETURNFROMHOMELEAVE});
		}
	}
	//WDEV-20669 -- end of

	@Override
	protected void onBtnViewEleClick() throws PresentationLogicException
	{
		viewPatientElectiveListEntry();

	}

	private void viewDTADetails()
	{
		if (form.dyngrdPatients().getValue() instanceof TrackingForPendingEmergencyAdmitVo)
		{
			form.getGlobalContext().Emergency.setTracking(domain.getTrackingForPendingEmergency(((TrackingForPendingEmergencyAdmitVo) form.dyngrdPatients().getValue()).getAssociatedPendingEmergencyAdmission()));
		}

		engine.open(form.getForms().Emergency.EDDecisionToAdmitDialog, new Object[] { form.getGlobalContext().Emergency.getTracking()});
	}


	private void acceptTransferNoBed()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpisode = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode() != null;

		form.getGlobalContext().Core.setSelectedBedSpaceState(null);
		if (isWardViewPatient && hasInpatientEpisode)
		{	
			PendingTransfersLiteVo pendingTransf = domain.getPendingTransferLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer());
			form.getGlobalContext().Core.setADTPendingTransfer(pendingTransf);			
			engine.open(form.getForms().Core.AcceptTransferToWardDlg, "Accept Transfer to Ward");
		}
	}


	private void recordTransfer()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpisode = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode() != null;
		boolean isOnHomeLeaveView = isWardViewPatient && hasInpatientEpisode && form.getLocalContext().getSelectedVIEW() != null && (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED));
		boolean isPatientOnHomeLeave  = false;  
		boolean hasPendingTransfer = isWardViewPatient && (Boolean.TRUE.equals(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getHasPendingTransfer()) || ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer() != null);

		if (isOnHomeLeaveView || (isWardViewPatient && hasInpatientEpisode))
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
					isPatientOnHomeLeave = hasInpatientEpisode &&  selectedPatientBedSpace.getInpatientEpisodeIsNotNull() && Boolean.TRUE.equals(selectedPatientBedSpace.getInpatientEpisode().getIsOnHomeLeave());
				}
				else				
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
					isPatientOnHomeLeave = hasInpatientEpisode &&  Boolean.TRUE.equals(selectedInpatientEpisode.getIsOnHomeLeave());
				}
			}

			form.getGlobalContext().Core.setBedInfoAction(isOnHomeLeaveView  || isPatientOnHomeLeave ? BedInfoAction.TRANSFERHOMELEAVEPATIENT : (form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull() ? BedInfoAction.TRANSFERWAITINGAREAPATIENT : BedInfoAction.TRANSFERWARDPATIENT));
			if (hasInpatientEpisode || hasPendingTransfer)
			{	
				form.getGlobalContext().Core.setADTPendingTransfer(hasPendingTransfer ? domain.getPendingTransferLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer()) : (hasInpatientEpisode ? domain.getPendingTransferForInpatientEpisode(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode()) : null));
			}
			engine.open(form.getForms().Core.BedInfoDialog, new Object[] {!isOnHomeLeaveView || hasPendingTransfer ? BedDialogPatientDataTabs.TAB_TRANSFER_OUT : BedDialogPatientDataTabs.TAB_TRANSFER_CONSULTANT});
		}
	}	

	private void cancelTransfer()
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpisode = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode() != null;
		boolean hasPendingTransfer = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer() != null;

		if (isWardViewPatient && hasPendingTransfer)
		{
			PendingTransfersLiteVo pendingTransfVo = domain.getPendingTransferLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer());
			form.getGlobalContext().Core.setADTPendingTransfer(pendingTransfVo);			
			engine.open(form.getForms().Core.TransferCancellation);
		}
	}



	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------


	private void initialize(Object rowOnTheWard)
	{
		form.dyngrdPatients().clear();
		form.dyngrdPatients().setReadOnly(true);

		DynamicGridColumn columnSurname = form.dyngrdPatients().getColumns().newColumn("Surname", COL_PATIENT_SURNAME);
		columnSurname.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn columnForename = form.dyngrdPatients().getColumns().newColumn("Forename", COL_PATIENT_FORENAME);
		columnForename.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn columnPatID = form.dyngrdPatients().getColumns().newColumn(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText(), COL_PATIENT_IDENTIFIER);
		columnPatID.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn columnSex = form.dyngrdPatients().getColumns().newColumn("Sex", COL_PATIENT_SEX);
		columnSex.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn columnDOB = form.dyngrdPatients().getColumns().newColumn("DOB", COL_PATIENT_DOB);
		columnDOB.setSortMode(SortMode.MANUAL);

		DynamicGridColumn columnAge = form.dyngrdPatients().getColumns().newColumn("Age", COL_PATIENT_AGE);
		columnAge.setSortMode(SortMode.MANUAL);

		if (rowOnTheWard != null && rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS))
		{
			DynamicGridColumn columnLOS = form.dyngrdPatients().getColumns().newColumn("LoS", COL_PATIENT_LOS);
			columnLOS.setWidth(60);
			columnLOS.setSortMode(SortMode.MANUAL);			
			
			DynamicGridColumn columnStatus = form.dyngrdPatients().getColumns().newColumn("Status", COL_BED_STATUS);
			columnStatus.setWidth(-1);
			columnStatus.setSortMode(SortMode.MANUAL);
		}
		if (rowOnTheWard != null && rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ELECTIVE_TCI_ADMISSIONS))
		{
			DynamicGridColumn columnTCI = form.dyngrdPatients().getColumns().newColumn("TCI Date/Time", COL_PATIENT_TCIDATE);
			columnTCI.setWidth(100);
			columnTCI.setSortMode(SortMode.AUTOMATIC);

			DynamicGridColumn columnComments = form.dyngrdPatients().getColumns().newColumn("   ", COL_PATIENT_TCICOMMENT);
			columnComments.setWidth(23);
			columnComments.setSortMode(SortMode.MANUAL);
			columnComments.setAlignment(Alignment.CENTER);
			columnComments.setHeaderAlignment(Alignment.CENTER);
			columnComments.setHeaderTooltip("TCI Comments");
		}
		//WDEV-22316
		if (rowOnTheWard != null && rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_OUT))
		{
			DynamicGridColumn columnBedReady = form.dyngrdPatients().getColumns().newColumn("Bed Available Date", COL_PATIENT_TRANSFER_BED_READY_DATE);
			columnBedReady.setWidth(125);
			columnBedReady.setSortMode(SortMode.MANUAL);

			DynamicGridColumn columnWard = form.dyngrdPatients().getColumns().newColumn("Transfer to Ward", COL_PATIENT_TRANSFER_OUT_WARD);
			columnWard.setWidth(-1);
			columnWard.setSortMode(SortMode.AUTOMATIC);
		}
		else if (rowOnTheWard != null && rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN))
		{
			DynamicGridColumn columnWard = form.dyngrdPatients().getColumns().newColumn("Transfer from Ward", COL_PATIENT_TRANSFER_IN_WARD);
			columnWard.setWidth(-1);
			columnWard.setSortMode(SortMode.AUTOMATIC);		
		}

		int columnsCount = form.dyngrdPatients().getColumns().size();
		columnSurname.setWidth(columnsCount > 6 ? 120 : 170);
		columnForename.setWidth(columnsCount > 6 ? 110 : 160);
		columnPatID.setWidth(columnsCount > 6 ? 95 : 145);
		columnSex.setWidth(columnsCount > 6 ? 55: 105);
		columnDOB.setWidth(columnsCount > 6 ? 65 : 115);
		columnAge.setWidth(columnsCount > 6 ? 50 : 80);
		//WDEV-22316 end
	}



	private void open(Object rowOnTheWard)
	{
		//form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setWardViewPendingEmergencyAdmission(null);
		form.getGlobalContext().Core.setSelectedAdmissionTypeAdmitToWard(null);

		LocationRefVo ward = form.getGlobalContext().Core.getWardViewPatientListWard();
		LocationRefVo bay = form.getGlobalContext().Core.getWardViewPatientListBay();
		form.getLocalContext().setConfig(domain.getWardConfig(ward));

		if (rowOnTheWard == null || rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_OCCUPYING_A_BED))
		{
			populatePatientsOnTheWard(domain.listForPatientsOnTheWard(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_AWAITING_BED))
		{
			populatePatientsOnTheWard(domain.listForPatientsAwaitingBed(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE))
		{
			populatePatientsOnTheWard(domain.listForPatientsOnHomeLeave(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED))
		{
			populatePatientsOnTheWard(domain.listForPatientsOnHomeLeaveWithBedsRetained(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_DISCHARGE_WITHIN_24_HOURS))
		{
			populatePatientsOnTheWard(domain.listForPatientsToBeDischargedWithin24Hours(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_DISCHARGE_CONFIRMED_24_HOURS))
		{
			populatePatientsOnTheWard(domain.listForPatientsWithDischargedConfirmedWithin24Hours(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_READY_TO_LEAVE))
		{
			populatePatientsOnTheWard(domain.listForPatientsReadyToLeave(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_OUT))
		{
			populatePatientsOnTheWard(domain.listForTransferOutPatients(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN)) //WDEV-20291
		{
			populatePatientsOnTheWard(domain.listForTransferInPatients(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS))
		{
			populatePendingEDEmergencyAdmissions(domain.listPendingEDEmergencyAdmission(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_EMERGENCY_ADMISSIONS))
		{
			populatePendingEmergencyAdmissions(domain.listPendingEmergencyAdmissions(ward, bay));
		}
		else if (rowOnTheWard.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ELECTIVE_TCI_ADMISSIONS))
		{
			populatePendingElectiveAdmissions(domain.listPatientsForElectiveAdmission(ward, bay));
		}
		else
		{
			populatePatients(domain.listPatients(ward, bay, rowOnTheWard));
		}

		updateControlsState();
	}


	private void updateControlsState()
	{		
		form.btnAdmitToWard().setVisible(form.dyngrdPatients().getValue() instanceof TrackingForPendingEmergencyAdmitVo
				|| form.dyngrdPatients().getValue() instanceof PatientElectiveListBedInfoVo
				|| form.dyngrdPatients().getValue() instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo);
		form.btnAdmitToWard().setEnabled(form.btnAdmitToWard().isVisible() && isWardOpen(form.getLocalContext().getConfig()));

		// Update context menus
		form.getContextMenus().Core.hideAllWardViewMenuItems();

		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;
		boolean hasInpatientEpisode = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode() != null;
		boolean hasPendingTransfer = isWardViewPatient && ((WardViewPatientListVo)form.dyngrdPatients().getValue()).getPendingTransfer() != null;
		//WDEV-20674
		boolean canDischarge = isWardViewPatient && form.getLocalContext().getSelectedVIEW() != null && (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_OCCUPYING_A_BED) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_AWAITING_BED) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_DISCHARGE_WITHIN_24_HOURS) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_DISCHARGE_CONFIRMED_24_HOURS) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_READY_TO_LEAVE));
		boolean isOnHomeLeaveWithRetainedBedView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE_WITH_BED);
		boolean isOnHomeLeaveView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_HOME_LEAVE);
		boolean isOnReadyToLeaveView = form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_READY_TO_LEAVE);
		boolean hasHomeLeaveToReopen = hasInpatientEpisode && Boolean.TRUE.equals(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getCanReopenHomeLeave());

		boolean wardActionsAvailable  = isWardOpen(form.getLocalContext().getConfig()) || (form.getLocalContext().getConfigIsNotNull() && WardBayStatus.BLOCKED.equals(form.getLocalContext().getConfig().getWardAvailabilityStatus()));

		form.getContextMenus().Core.getWardViewDISCHARGEItem().setVisible(canDischarge && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewRETURN_FROM_HOMELEAVEItem().setVisible(hasInpatientEpisode && isOnHomeLeaveWithRetainedBedView && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewRETURN_FROM_LEAVE_TO_BEDItem().setVisible(hasInpatientEpisode && isOnHomeLeaveView && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewRETURN_FROM_LEAVE_WARDItem().setVisible(hasInpatientEpisode && (isOnHomeLeaveView || isOnHomeLeaveWithRetainedBedView));

		form.getContextMenus().Core.getWardViewVACATEBEDItem().setVisible(hasInpatientEpisode && isOnHomeLeaveWithRetainedBedView && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewEDITHOMELEAVEItem().setVisible(hasInpatientEpisode && (isOnHomeLeaveWithRetainedBedView || isOnHomeLeaveView) && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewCANCEL_HOME_LEAVEItem().setVisible(hasInpatientEpisode && (isOnHomeLeaveWithRetainedBedView || isOnHomeLeaveView) && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewCANCEL_HOMELEAVE_RETURNItem().setVisible(hasInpatientEpisode && !isOnHomeLeaveWithRetainedBedView &&  !isOnHomeLeaveView && hasHomeLeaveToReopen && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewBED_READYItem().setVisible(isWardViewPatient && hasPendingTransfer && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewACCEPT_TRANSFERItem().setVisible(isWardViewPatient && hasPendingTransfer && form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN) && wardActionsAvailable); // //WDEV-20291
		form.getContextMenus().Core.getWardViewTRANSFERItem().setVisible(isWardViewPatient && hasInpatientEpisode && form.getLocalContext().getSelectedVIEW() != null && !form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN) && wardActionsAvailable); // //WDEV-20291);
		form.getContextMenus().Core.getWardViewCANCEL_TRANSFERItem().setVisible(isWardViewPatient && hasPendingTransfer && wardActionsAvailable);
		form.getContextMenus().Core.getWardViewVIEW_DTAItem().setVisible(form.dyngrdPatients().getValue() instanceof TrackingForPendingEmergencyAdmitVo);
		form.getContextMenus().Core.getWardViewVIEW_ELECTIVE_LISTItem().setVisible(form.dyngrdPatients().getValue() instanceof PatientElectiveListBedInfoVo);
		form.getContextMenus().Core.getWardViewUNDO_READY_TO_LEAVEItem().setVisible(form.dyngrdPatients().getValue() instanceof WardViewPatientListVo && isOnReadyToLeaveView);

		form.btnViewEle().setVisible(form.dyngrdPatients().getValue() instanceof PatientElectiveListBedInfoVo);
		form.btnAcceptTransfer().setVisible(isWardViewPatient && hasPendingTransfer && form.getLocalContext().getSelectedVIEW() != null && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN) && wardActionsAvailable);
		form.btnReturnFromHomeLeave().setVisible(isWardViewPatient && isOnHomeLeaveView&& wardActionsAvailable);
	}



	//-------------------------------------------------------------------------------------------------------------------------------------
	//	Form populating functions
	//-------------------------------------------------------------------------------------------------------------------------------------

	private boolean isWardOpen(WardConfigLiteVo config)
	{
		if (config == null  || !WardBayStatus.CLOSED.equals(config.getWardAvailabilityStatus()))
			return true;
		return false;

	}
	private void populatePendingEmergencyAdmissions(CatsReferralPendingEmergencyNonEDAdmissionListVoCollection listPendingEmergencyAdmissions)
	{
		form.dyngrdPatients().getRows().clear();

		if (listPendingEmergencyAdmissions == null)
			return;

		for (CatsReferralPendingEmergencyNonEDAdmissionListVo pendingAdmission : listPendingEmergencyAdmissions)
		{
			DynamicGridRow row = form.dyngrdPatients().getRows().newRow();
			
			PatientLite_IdentifiersVo patient = pendingAdmission.getPatient();
			if (patient != null)
			{
				if (patient.getName() != null)
				{	
					DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_PATIENT_SURNAME), DynamicCellType.STRING);
					cellSurname.setValue(patient.getName().getSurname());

					DynamicGridCell cellForname = row.getCells().newCell(getColumn(COL_PATIENT_FORENAME), DynamicCellType.STRING);
					cellForname.setValue(patient.getName().getForename());
				}
				DynamicGridCell cellIdentifier = row.getCells().newCell(getColumn(COL_PATIENT_IDENTIFIER), DynamicCellType.STRING);
				if (patient.getDisplayId() != null)
				{
					cellIdentifier.setValue(patient.getDisplayId().getValue());
				}

				DynamicGridCell cellSex = row.getCells().newCell(getColumn(COL_PATIENT_SEX), DynamicCellType.STRING);
				if (patient.getSex() != null)
				{
					cellSex.setValue(patient.getSex().getText());
				}

				DynamicGridCell cellDOB = row.getCells().newCell(getColumn(COL_PATIENT_DOB), DynamicCellType.STRING);
				if (patient.getDob() != null)
				{
					cellDOB.setValue(patient.getDob().toString());
				}

				DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_PATIENT_AGE), DynamicCellType.INT);
				cellAge.setValue(patient.calculateAge());

				if (patient.getAssociatedPatientIsNotNull())
				{
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());							
				}								
				if (patient.getDodIsNotNull())
				{
					row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());						
				}			
			}

			row.setValue(pendingAdmission);
		}
	}


	private void populatePendingEDEmergencyAdmissions(TrackingForPendingEmergencyAdmitVoCollection trackingForPendingEmergencyAdmitVoCollection)
	{
		form.dyngrdPatients().getRows().clear();

		if (trackingForPendingEmergencyAdmitVoCollection == null)
			return;

		for (TrackingForPendingEmergencyAdmitVo trackingPendingEmergency : trackingForPendingEmergencyAdmitVoCollection)
		{
			if (trackingPendingEmergency != null && trackingPendingEmergency.getAssociatedPendingEmergencyAdmission() != null)
			{
				PatientLite_IdentifiersVo patient = trackingPendingEmergency.getAssociatedPendingEmergencyAdmission().getPasEvent().getPatient();

				if (patient != null)
				{
					DynamicGridRow row = form.dyngrdPatients().getRows().newRow();

					if (patient.getName() != null)
					{	
						DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_PATIENT_SURNAME), DynamicCellType.STRING);
						cellSurname.setValue(patient.getName().getSurname());

						DynamicGridCell cellForname = row.getCells().newCell(getColumn(COL_PATIENT_FORENAME), DynamicCellType.STRING);
						cellForname.setValue(patient.getName().getForename());
					}
					DynamicGridCell cellIdentifier = row.getCells().newCell(getColumn(COL_PATIENT_IDENTIFIER), DynamicCellType.STRING);
					if (patient.getDisplayId() != null)
					{
						cellIdentifier.setValue(patient.getDisplayId().getValue());
					}

					DynamicGridCell cellSex = row.getCells().newCell(getColumn(COL_PATIENT_SEX), DynamicCellType.STRING);
					if (patient.getSex() != null)
					{
						cellSex.setValue(patient.getSex().getText());
					}

					DynamicGridCell cellDOB = row.getCells().newCell(getColumn(COL_PATIENT_DOB), DynamicCellType.STRING);
					if (patient.getDob() != null)
					{
						cellDOB.setValue(patient.getDob().toString());
					}

					DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_PATIENT_AGE), DynamicCellType.INT);
					cellAge.setValue(patient.calculateAge());

					DynamicGridCell cellLoS = row.getCells().newCell(getColumn(COL_PATIENT_LOS), DynamicCellType.STRING);
					cellLoS.setValue(getLengthOfStay(trackingPendingEmergency));
					
					DynamicGridCell cellBedStatus = row.getCells().newCell(getColumn(COL_BED_STATUS), DynamicCellType.IMAGE);
					if (trackingPendingEmergency.getBedAvailabilityIsNotNull())
					{
						cellBedStatus.setValue(getBedStatusImage(trackingPendingEmergency.getBedAvailability()));
						cellBedStatus.setTooltip(getBedStatusTooltip(trackingPendingEmergency));
					}

					if (patient.getAssociatedPatientIsNotNull())
					{
						row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());							
					}								
					if (patient.getDodIsNotNull())
					{
						row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());						
					}	
					row.setValue(trackingPendingEmergency);
				}
			}
		}
	}


	private void populatePendingElectiveAdmissions(PatientElectiveListBedInfoVoCollection patientsForElectiveAdmission)
	{
		form.dyngrdPatients().getRows().clear();

		if (patientsForElectiveAdmission == null)
			return;

		for (PatientElectiveListBedInfoVo electiveAdmission : patientsForElectiveAdmission)
		{
			PatientLite_IdentifiersVo patient = electiveAdmission.getPatient();

			if (patient != null)
			{
				DynamicGridRow row = form.dyngrdPatients().getRows().newRow();

				if (patient.getNameIsNotNull())
				{	
					DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_PATIENT_SURNAME), DynamicCellType.STRING);
					cellSurname.setValue(patient.getName().getSurname());

					DynamicGridCell cellForname = row.getCells().newCell(getColumn(COL_PATIENT_FORENAME), DynamicCellType.STRING);
					cellForname.setValue(patient.getName().getForename());
				}
				DynamicGridCell cellIdentifier = row.getCells().newCell(getColumn(COL_PATIENT_IDENTIFIER), DynamicCellType.STRING);
				if (patient.getDisplayId() != null)
				{
					cellIdentifier.setValue(patient.getDisplayId().getValue());
				}

				DynamicGridCell cellSex = row.getCells().newCell(getColumn(COL_PATIENT_SEX), DynamicCellType.STRING);
				if (patient.getSex() != null)
				{
					cellSex.setValue(patient.getSex().getText());
				}

				DynamicGridCell cellDOB = row.getCells().newCell(getColumn(COL_PATIENT_DOB), DynamicCellType.STRING);
				if (patient.getDob() != null)
				{
					cellDOB.setValue(patient.getDob().toString());
				}

				DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_PATIENT_AGE), DynamicCellType.INT);
				cellAge.setValue(patient.calculateAge());

				DynamicGridCell cellTCIDate = row.getCells().newCell(getColumn(COL_PATIENT_TCIDATE), DynamicCellType.STRING);
				cellTCIDate.setValue(electiveAdmission.getTCIDetails().getTCIDateIsNotNull() ? (electiveAdmission.getTCIDetails().getTCITimeIsNotNull() ? new DateTime(electiveAdmission.getTCIDetails().getTCIDate(), electiveAdmission.getTCIDetails().getTCITime()).toString() : electiveAdmission.getTCIDetails().getTCIDate().toString()) : null);

				DynamicGridCell cellTCIComment = row.getCells().newCell(getColumn(COL_PATIENT_TCICOMMENT), DynamicCellType.IMAGE);
				if (hasAnyComments(electiveAdmission))
				{
					cellTCIComment.setValue(form.getImages().Core.Comment16);
					cellTCIComment.setTooltip(getCommentsDisplay(electiveAdmission));

				}
				if (patient.getAssociatedPatientIsNotNull())
				{
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());							
				}								
				if (patient.getDodIsNotNull())
				{
					row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());						
				}	

				row.setValue(electiveAdmission);
			}
		}
	}

	private String getCommentsDisplay(PatientElectiveListBedInfoVo patientElective)
	{
		StringBuilder commmentDisplay = new StringBuilder();

		if (patientElective.getCommentsIsNotNull())
		{	
			commmentDisplay.append("<b>Elective List Comments:</b> " + patientElective.getComments() + " <br/>");
		}	
		if (patientElective.getPreAssessmentOutcomeIsNotNull() && patientElective.getPreAssessmentOutcome().getGeneralCommentsIsNotNull())
		{	
			commmentDisplay.append("<b>Pre-Assessment Comments:</b> " + patientElective.getPreAssessmentOutcome().getGeneralComments() + " <br/>");
		}	
		if (patientElective.getTCIDetailsIsNotNull())
		{
			if (patientElective.getTCIDetails().getCommentsIsNotNull())
				commmentDisplay.append("<b>TCI Booking Comments:</b> " + patientElective.getTCIDetails().getComments() + " <br/>");
			if (patientElective.getTCIDetails().getBedManagerCommentIsNotNull())
				commmentDisplay.append("<b>TCI Bed Manager Comments:</b> " + patientElective.getTCIDetails().getBedManagerComment() + " <br/>");
		}

		return commmentDisplay.toString();
	}


	private boolean hasAnyComments(PatientElectiveListBedInfoVo patientElective)
	{
		if (patientElective == null)
			return false;

		return patientElective.getCommentsIsNotNull() || (patientElective.getPreAssessmentOutcomeIsNotNull() && patientElective.getPreAssessmentOutcome().getGeneralComments() != null) || (patientElective.getTCIDetailsIsNotNull() && (patientElective.getTCIDetails().getCommentsIsNotNull() || patientElective.getTCIDetails().getBedManagerCommentIsNotNull()));
	}

	private String getLengthOfStay(TrackingForPendingEmergencyAdmitVo trackingPendingEmergency)
	{
		if (trackingPendingEmergency == null)
			return null;

		boolean isDischarged = trackingPendingEmergency.getAttendance() != null && trackingPendingEmergency.getAttendance().getDischargeDateTime() != null;
		DateTime registrDateTimeForLOS = trackingPendingEmergency.getAttendance() != null ? (trackingPendingEmergency.getAttendance().getEndOfRegistrationDateTimeIsNotNull() ? trackingPendingEmergency.getAttendance().getEndOfRegistrationDateTime() : trackingPendingEmergency.getAttendance().getRegistrationDateTime()) : null;
		DateTime endTimeForLOS = isDischarged ? trackingPendingEmergency.getAttendance().getDischargeDateTime() : new DateTime();


		Integer intLOS = null;
		String minHourLOS = null;

		if (ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
		{	
			intLOS = calculateDateDiffInMinutes(endTimeForLOS, registrDateTimeForLOS);
			minHourLOS = (minutesToHoursAndMinutes(intLOS));
		}	
		else
		{	
			intLOS = calculateDateDiffInMinutes(endTimeForLOS, trackingPendingEmergency.getAttendance().getArrivalDateTime());
			minHourLOS = (minutesToHoursAndMinutes(intLOS));
		}

		return minHourLOS;
	}


	private void populatePatientsOnTheWard(WardViewPatientListVoCollection patientOnTheWard)
	{
		form.dyngrdPatients().getRows().clear();

		if (patientOnTheWard == null)
			return;

		for (WardViewPatientListVo wardViewPatient : patientOnTheWard)
		{
			PatientLite_IdentifiersVo patient = wardViewPatient.getPatient();

			if (patient != null)
			{
				DynamicGridRow row = form.dyngrdPatients().getRows().newRow();

				if (patient.getName() != null)
				{	
					DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_PATIENT_SURNAME), DynamicCellType.STRING);
					cellSurname.setValue(patient.getName().getSurname());

					DynamicGridCell cellForname = row.getCells().newCell(getColumn(COL_PATIENT_FORENAME), DynamicCellType.STRING);
					cellForname.setValue(patient.getName().getForename());
				}
				DynamicGridCell cellIdentifier = row.getCells().newCell(getColumn(COL_PATIENT_IDENTIFIER), DynamicCellType.STRING);
				if (patient.getDisplayId() != null)
				{
					cellIdentifier.setValue(patient.getDisplayId().getValue());
				}

				DynamicGridCell cellSex = row.getCells().newCell(getColumn(COL_PATIENT_SEX), DynamicCellType.STRING);
				if (patient.getSex() != null)
				{
					cellSex.setValue(patient.getSex().getText());
				}

				DynamicGridCell cellDOB = row.getCells().newCell(getColumn(COL_PATIENT_DOB), DynamicCellType.STRING);
				if (patient.getDob() != null)
				{
					cellDOB.setValue(patient.getDob().toString());
				}

				DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_PATIENT_AGE), DynamicCellType.INT);
				cellAge.setValue(patient.calculateAge());

				if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_OUT))
				{	
					DynamicGridCell cellBedReady = row.getCells().newCell(getColumn(COL_PATIENT_TRANSFER_BED_READY_DATE), DynamicCellType.STRING);
					cellBedReady.setValue(wardViewPatient.getPendingTransferIsNotNull() && wardViewPatient.getPendingTransfer().getBedAvailableDateTimeIsNotNull() ?  wardViewPatient.getPendingTransfer().getBedAvailableDateTime().toString() : null);

					DynamicGridCell cellWard = row.getCells().newCell(getColumn(COL_PATIENT_TRANSFER_OUT_WARD), DynamicCellType.STRING);
					cellWard.setValue(wardViewPatient.getPendingTransferIsNotNull() && wardViewPatient.getPendingTransfer().getDestinationWardIsNotNull() ?  wardViewPatient.getPendingTransfer().getDestinationWard().getName() : null);
				}
				else if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN))
				{						
					DynamicGridCell cellWard = row.getCells().newCell(getColumn(COL_PATIENT_TRANSFER_IN_WARD), DynamicCellType.STRING);
					cellWard.setValue(wardViewPatient.getPendingTransferIsNotNull() && wardViewPatient.getInpatientEpisodeIsNotNull() && wardViewPatient.getInpatientEpisode().getPasEventIsNotNull() && wardViewPatient.getInpatientEpisode().getPasEvent().getLocationIsNotNull() ? wardViewPatient.getInpatientEpisode().getPasEvent().getLocation().getName() : null);
				}
				//WDEV-22316				
				if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN) || (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_OUT)))
				{
					String transfTooltip = getTransferViewTooltip(wardViewPatient);
					if (transfTooltip != null)
					{
						DynamicGridCell[] rowCellsArray = row.getCellArray();
						for (int i=0;i<rowCellsArray.length;i++)
						{
							rowCellsArray[i].setTooltip(transfTooltip);
						}
					}
				}
				//WDEV-22316 -- end
				Color rowColour = getRowColour(wardViewPatient);
				if (rowColour != null)
				{
					row.setBackColor(rowColour);
				}

				row.setValue(wardViewPatient);
			}
		}
	}
	//WDEV-22316
	private String getTransferViewTooltip(WardViewPatientListVo record)
	{
		if (record == null || record.getInpatientEpisode() == null)
			return null;
		StringBuilder infoTooltip = new StringBuilder();
		if (record.getInpatientEpisode().getPasEventIsNotNull() && record.getInpatientEpisode().getPasEvent().getLocationIsNotNull())
			infoTooltip.append("Current Ward: <b>" + record.getInpatientEpisode().getPasEvent().getLocation().getName() + "</b><br/>");
		if (record.getInpatientEpisode().getPasEventIsNotNull() && record.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
			infoTooltip.append("Current Consultant: <b>" + record.getInpatientEpisode().getPasEvent().getConsultant().getIMosName() + "</b><br/>");
		if (record.getPendingTransferIsNotNull())
		{	
			if (record.getPendingTransfer().getDestinationWardIsNotNull())
				infoTooltip.append("Destination Ward: <b>" + record.getPendingTransfer().getDestinationWard().getName() + "</b><br/>");
			if (record.getPendingTransfer().getConsultantIsNotNull())
				infoTooltip.append("Destination Consultant: <b>" + record.getPendingTransfer().getConsultant().getIMosName() + "</b><br/>");
			if (record.getPendingTransfer().getServiceIsNotNull())
				infoTooltip.append("Service: <b>" + record.getPendingTransfer().getService().getServiceName() + "</b><br/>");
			if (record.getPendingTransfer().getSpecialtyIsNotNull())
				infoTooltip.append("Specialty: <b>" + record.getPendingTransfer().getSpecialty().getText() + "</b><br/>");
			if (record.getPendingTransfer().getTransferReasonIsNotNull())
				infoTooltip.append("Transfer Reason: <b>" + record.getPendingTransfer().getTransferReason().getText() + "</b><br/>");
			if (record.getPendingTransfer().getTransferCommentIsNotNull())
				infoTooltip.append("Transfer Comment: <b>" + record.getPendingTransfer().getTransferComment() + "</b><br/>");
			if (record.getPendingTransfer().getTransferRequestDateTimeIsNotNull())
				infoTooltip.append("Transfer Requested Date/Time: <b>" + record.getPendingTransfer().getTransferRequestDateTime().toString() + "</b><br/>");
			if (record.getPendingTransfer().getBedAvailableDateTimeIsNotNull())
				infoTooltip.append("Bed Available Date/Time: <b>" + record.getPendingTransfer().getBedAvailableDateTime().toString() + "</b>");
		}
		if (infoTooltip.length() == 0)
			return null;

		return infoTooltip.toString();
	}
	//WDEV-22443
	private Color getRowColour(WardViewPatientListVo wardViewPatient)
	{
		ColorBean darkOrangeBean = new ColorBean();
		darkOrangeBean.setName("Dark Orange");
		darkOrangeBean.setValue(INTENSE_ORANGE_COLOR_HEXA_CODE);
		Color darkOrange = new Color(darkOrangeBean);

		if (wardViewPatient.getPatientIsNotNull() && wardViewPatient.getPatient().getDodIsNotNull())
			return Color.Yellow;
		
		if (isPatientOnTrackingMovement(wardViewPatient))
			return Color.RoyalBlue;		

		if (wardViewPatient.getPatientIsNotNull() && wardViewPatient.getPatient().getAssociatedPatientIsNotNull())
			return ConfigFlag.UI.MERGED_COLOUR.getValue();	
		
		if (Boolean.TRUE.equals(wardViewPatient.getInpatientEpisode().getIsOnHomeLeave()))
			return Color.LightGray;
		
		if (wardViewPatient.getPendingTransferIsNotNull() || Boolean.TRUE.equals(wardViewPatient.getHasPendingTransfer()))//WDEV-22456
			return Color.LightSkyBlue;

		/**	Each row in the list will be assigned a background colour according to the bed status: 
		White. Occupied. Estimated date/time of discharge >24hrs from current date/time 
		Amber. Occupied. Estimated date/time of discharge <24hrs from current date/time 
		Red. Occupied. Confirmed discharge */ 

		if (wardViewPatient.getInpatientEpisode().isDischargeDueWithin24Hrs())
			return Boolean.TRUE.equals(wardViewPatient.getInpatientEpisode().getIsConfirmedDischarge()) ? Color.Red : darkOrange;

		return null;
	}


	private boolean isPatientOnTrackingMovement(WardViewPatientListVo record)
	{
		if (record == null || record.getInpatientEpisode() == null || record.getInpatientEpisode().getCurrentTrackingMovement() == null)
			return false;

		if (Boolean.TRUE.equals(record.getInpatientEpisode().getCurrentTrackingMovement().getPatientReturned()))
			return false;

		return true;
	}	
	private void populatePatients(PatientLite_IdentifiersVoCollection patientLite_IdentifiersVoCollection)
	{
		form.dyngrdPatients().getRows().clear();

		if (patientLite_IdentifiersVoCollection == null)
			return;

		for (PatientLite_IdentifiersVo patient : patientLite_IdentifiersVoCollection)
		{
			DynamicGridRow row = form.dyngrdPatients().getRows().newRow();

			if (patient.getName() != null)
			{	
				DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_PATIENT_SURNAME), DynamicCellType.STRING);
				cellSurname.setValue(patient.getName().getSurname());

				DynamicGridCell cellForname = row.getCells().newCell(getColumn(COL_PATIENT_FORENAME), DynamicCellType.STRING);
				cellForname.setValue(patient.getName().getForename());
			}

			DynamicGridCell cellIdentifier = row.getCells().newCell(getColumn(COL_PATIENT_IDENTIFIER), DynamicCellType.STRING);
			if (patient.getDisplayId() != null)
			{
				cellIdentifier.setValue(patient.getDisplayId().getValue());
			}

			DynamicGridCell cellSex = row.getCells().newCell(getColumn(COL_PATIENT_SEX), DynamicCellType.STRING);
			if (patient.getSex() != null)
			{
				cellSex.setValue(patient.getSex().getText());
			}

			DynamicGridCell cellDOB = row.getCells().newCell(getColumn(COL_PATIENT_DOB), DynamicCellType.STRING);
			if (patient.getDob() != null)
			{
				cellDOB.setValue(patient.getDob().toString());
			}

			DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_PATIENT_AGE), DynamicCellType.INT);
			cellAge.setValue(patient.calculateAge());

			if (patient.getAssociatedPatientIsNotNull())
			{
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());							
			}								
			if (patient.getDodIsNotNull())
			{
				row.setBackColor(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? Color.Yellow : ConfigFlag.UI.RIP_COLOUR.getValue());						
			}	
			row.setValue(patient);
		}
	}

	private DynamicGridColumn getColumn(Object columnIdentifier)
	{
		if (columnIdentifier == null)
			return null;

		return form.dyngrdPatients().getColumns().getByIdentifier(columnIdentifier);
	}


	private Integer calculateDateDiffInMinutes(DateTime currentTime, DateTime registrationDateTime) 
	{
		if(currentTime == null || registrationDateTime == null)
			return null;

		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = registrationDateTime.getJavaDate().getTime();

		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}


	public static String minutesToHoursAndMinutes(Integer minutes) 
	{
		if(minutes == null)
			return null;

		int hours = minutes/60;
		int mins = minutes%60;

		StringBuilder time = new StringBuilder();

		if(hours > 0)
		{
			time.append(hours + "h");
		}

		if(mins > 0)
		{
			time.append((time.length() > 0 ? " " : "") + ((mins >= 0 && mins <= 9 && time.length() > 0) ? "0" : "") + mins + "m");
		}

		if(time.length() > 0)
			return time.toString();

		return null;
	}

	private void viewPatientElectiveListEntry()
	{
		if (form.dyngrdPatients().getValue() == null)
			return;				
		engine.open(form.getForms().RefMan.ElectiveListDetails);
	}
	private void dischargePatient() 
	{
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;

		if (isWardViewPatient)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.DISCHARGEHOMELEAVEPATIENT);
			}

			engine.open(form.getForms().Core.BedInfoDialog, new Object[] {BedDialogPatientDataTabs.TAB_DISCHARGE});
		}		
	}
	private static class CommentImageComparator implements Comparator<PatientElectiveListBedInfoVo>
	{
		private int direction;

		public CommentImageComparator(SortOrder sortOrderComment)
		{
			if (SortOrder.ASCENDING.equals(sortOrderComment))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(PatientElectiveListBedInfoVo o1, PatientElectiveListBedInfoVo o2)
		{

			Integer val1 = Boolean.TRUE.equals(hasAnyComments(o1)) ? 1 : 0;
			Integer val2 = Boolean.TRUE.equals(hasAnyComments(o2)) ? 1 : 0;

			if (val1 != 0 && val2 != 0)
			{
				return val1.compareTo(val2) * direction;
			}

			if (val1 != 0 && val2 == 0)
			{
				return direction;
			}

			if (val2 != 0 && val1 == 0)
			{
				return -1 * direction;
			}

			return 0;
		}
		private boolean hasAnyComments(PatientElectiveListBedInfoVo patientElective)
		{
			if (patientElective == null)
				return false;

			return patientElective.getCommentsIsNotNull() || (patientElective.getTCIDetailsIsNotNull() && (patientElective.getTCIDetails().getCommentsIsNotNull() || patientElective.getTCIDetails().getBedManagerCommentIsNotNull()));
		}
	}
	@Override
	protected void onDyngrdPatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		sortRecords(column);				
	}


	private void sortRecords(DynamicGridColumn column)
	{
		if (column.equals(getColumn(COL_PATIENT_TCICOMMENT)) && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ELECTIVE_TCI_ADMISSIONS))
		{
			if (form.dyngrdPatients().getRows().size() < 2)
				return;

			DynamicGridRow row = form.dyngrdPatients().getSelectedRow();

			form.getLocalContext().setSortOrderAge(null);
			form.getLocalContext().setSortOrderDOB(null);

			PatientElectiveListBedInfoVoCollection gridValues = getPendingTCIValuesFromGrid();
			form.getLocalContext().setSortOrderCommentsImage(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderCommentsImage()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new CommentImageComparator(form.getLocalContext().getSortOrderCommentsImage()));

			populatePendingElectiveAdmissions(gridValues);

			if (row != null)
			{
				form.dyngrdPatients().setSelectedRow(row);
			}
		}
		if (column.equals(getColumn(COL_PATIENT_TRANSFER_BED_READY_DATE)) && (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_OUT) || form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_TRANSFER_IN)))
		{
			if (form.dyngrdPatients().getRows().size() < 2)
				return;

			form.getLocalContext().setSortOrderAge(null);
			form.getLocalContext().setSortOrderDOB(null);

			DynamicGridRow row = form.dyngrdPatients().getSelectedRow();

			WardViewPatientListVoCollection gridValues = getOnWardValuesFromGrid();
			form.getLocalContext().setSortOrderBedReadyTime(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderBedReadyTime()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new BedReadyDateTimeComparator(form.getLocalContext().getSortOrderBedReadyTime()));

			populatePatientsOnTheWard(gridValues);

			if (row != null)
			{
				form.dyngrdPatients().setSelectedRow(row);
			}			
		}
		//WDEV-21119
		if (column.equals(getColumn(COL_PATIENT_LOS)) && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS))
		{
			if (form.dyngrdPatients().getRows().size() < 2)
				return;

			form.getLocalContext().setSortOrderAge(null);
			form.getLocalContext().setSortOrderDOB(null);

			DynamicGridRow row = form.dyngrdPatients().getSelectedRow();

			TrackingForPendingEmergencyAdmitVoCollection gridValues = getPendingEDValuesFromGrid();
			form.getLocalContext().setSortOrderLOS(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderLOS()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(TrackingForPendingEmergencyAdmitVo.getLOSComparator(form.getLocalContext().getSortOrderLOS()));

			populatePendingEDEmergencyAdmissions(gridValues);

			if (row != null)
			{
				form.dyngrdPatients().setSelectedRow(row);
			}
		}
		if (column.equals(getColumn(COL_PATIENT_DOB)))
		{
			if (form.dyngrdPatients().getRows().size() < 2)
				return;

			sortRecordsByDOB();
		}
		if (column.equals(getColumn(COL_PATIENT_AGE)))
		{
			if (form.dyngrdPatients().getRows().size() < 2)
				return;

			sortRecordsByAge();
		}
		
		if (column.equals(getColumn(COL_BED_STATUS)) && form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS))
		{
			if (form.dyngrdPatients().getRows().size() < 2)
				return;

			form.getLocalContext().setSortOrderAge(null);
			form.getLocalContext().setSortOrderDOB(null);

			DynamicGridRow row = form.dyngrdPatients().getSelectedRow();

			TrackingForPendingEmergencyAdmitVoCollection gridValues = getPendingEDValuesFromGrid();
			form.getLocalContext().setSortOrderBedStatus(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderBedStatus()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new BedAvailabilityStatusComparator(form.getLocalContext().getSortOrderBedStatus()));

			populatePendingEDEmergencyAdmissions(gridValues);

			if (row != null)
			{
				form.dyngrdPatients().setSelectedRow(row);
			}
		}

		updateControlsState();
	}


	private void sortRecordsByAge()
	{
		form.getLocalContext().setSortOrderBedReadyTime(null);
		form.getLocalContext().setSortOrderLOS(null);
		form.getLocalContext().setSortOrderCommentsImage(null);
		form.getLocalContext().setSortOrderDOB(null);

		DynamicGridRow row = form.dyngrdPatients().getSelectedRow();

		if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS))
		{
			TrackingForPendingEmergencyAdmitVoCollection gridValues = getPendingEDValuesFromGrid();
			form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListAgeComparator(form.getLocalContext().getSortOrderAge()));

			populatePendingEDEmergencyAdmissions(gridValues);
		}
		else if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ELECTIVE_TCI_ADMISSIONS))
		{
			PatientElectiveListBedInfoVoCollection gridValues = getPendingTCIValuesFromGrid();
			form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListAgeComparator(form.getLocalContext().getSortOrderAge()));

			populatePendingElectiveAdmissions(gridValues);				
		}
		else if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_EMERGENCY_ADMISSIONS))
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVoCollection gridValues = getPendingEmergencyValuesFromGrid();
			form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListAgeComparator(form.getLocalContext().getSortOrderAge()));

			populatePendingEmergencyAdmissions(gridValues);				
		}
		else  
		{
			WardViewPatientListVoCollection gridValues = getOnWardValuesFromGrid();
			form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListAgeComparator(form.getLocalContext().getSortOrderAge()));

			populatePatientsOnTheWard(gridValues);				
		}

		if (row != null)
		{
			form.dyngrdPatients().setValue(row.getValue());
		}
	}


	private void sortRecordsByDOB()
	{
		form.getLocalContext().setSortOrderBedReadyTime(null);
		form.getLocalContext().setSortOrderLOS(null);
		form.getLocalContext().setSortOrderCommentsImage(null);
		form.getLocalContext().setSortOrderAge(null);

		DynamicGridRow row = form.dyngrdPatients().getSelectedRow();

		if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ED_ADMISSIONS))
		{
			TrackingForPendingEmergencyAdmitVoCollection gridValues = getPendingEDValuesFromGrid();
			form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListDOBComparator(form.getLocalContext().getSortOrderDOB()));

			populatePendingEDEmergencyAdmissions(gridValues);
		}
		else if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ELECTIVE_TCI_ADMISSIONS))
		{
			PatientElectiveListBedInfoVoCollection gridValues = getPendingTCIValuesFromGrid();
			form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListDOBComparator(form.getLocalContext().getSortOrderDOB()));

			populatePendingElectiveAdmissions(gridValues);				
		}
		else if (form.getLocalContext().getSelectedVIEW().equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_EMERGENCY_ADMISSIONS))
		{
			CatsReferralPendingEmergencyNonEDAdmissionListVoCollection gridValues = getPendingEmergencyValuesFromGrid();
			form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListDOBComparator(form.getLocalContext().getSortOrderDOB()));

			populatePendingEmergencyAdmissions(gridValues);				
		}
		else  
		{
			WardViewPatientListVoCollection gridValues = getOnWardValuesFromGrid();
			form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDOB()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			gridValues.sort(new WardViewPatientListDOBComparator(form.getLocalContext().getSortOrderDOB()));

			populatePatientsOnTheWard(gridValues);				
		}

		if (row != null)
		{
			form.dyngrdPatients().setValue(row.getValue());
		}
	}

	private PatientElectiveListBedInfoVoCollection getPendingTCIValuesFromGrid()
	{
		PatientElectiveListBedInfoVoCollection coll = new PatientElectiveListBedInfoVoCollection();
		for (int i=0;i<form.dyngrdPatients().getRows().size();i++)
		{
			if (form.dyngrdPatients().getRows().get(i) == null || form.dyngrdPatients().getRows().get(i).getValue() == null)
				continue;

			if (form.dyngrdPatients().getRows().get(i).getValue() instanceof PatientElectiveListBedInfoVo)
				coll.add((PatientElectiveListBedInfoVo) form.dyngrdPatients().getRows().get(i).getValue());

		}
		return coll;
	}
	private CatsReferralPendingEmergencyNonEDAdmissionListVoCollection getPendingEmergencyValuesFromGrid()
	{
		CatsReferralPendingEmergencyNonEDAdmissionListVoCollection coll = new CatsReferralPendingEmergencyNonEDAdmissionListVoCollection();
		for (int i=0;i<form.dyngrdPatients().getRows().size();i++)
		{
			if (form.dyngrdPatients().getRows().get(i) == null || form.dyngrdPatients().getRows().get(i).getValue() == null)
				continue;

			if (form.dyngrdPatients().getRows().get(i).getValue() instanceof CatsReferralPendingEmergencyNonEDAdmissionListVo)
				coll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo) form.dyngrdPatients().getRows().get(i).getValue());

		}
		return coll;
	}

	private TrackingForPendingEmergencyAdmitVoCollection getPendingEDValuesFromGrid()
	{
		TrackingForPendingEmergencyAdmitVoCollection coll = new TrackingForPendingEmergencyAdmitVoCollection();
		for (int i=0;i<form.dyngrdPatients().getRows().size();i++)
		{
			if (form.dyngrdPatients().getRows().get(i) == null || form.dyngrdPatients().getRows().get(i).getValue() == null)
				continue;

			if (form.dyngrdPatients().getRows().get(i).getValue() instanceof TrackingForPendingEmergencyAdmitVo)
				coll.add((TrackingForPendingEmergencyAdmitVo) form.dyngrdPatients().getRows().get(i).getValue());

		}
		return coll;
	}


	private WardViewPatientListVoCollection getOnWardValuesFromGrid()
	{
		WardViewPatientListVoCollection coll = new WardViewPatientListVoCollection();
		for (int i=0;i<form.dyngrdPatients().getRows().size();i++)
		{
			if (form.dyngrdPatients().getRows().get(i) == null || form.dyngrdPatients().getRows().get(i).getValue() == null)
				continue;

			if (form.dyngrdPatients().getRows().get(i).getValue() instanceof WardViewPatientListVo)
				coll.add((WardViewPatientListVo) form.dyngrdPatients().getRows().get(i).getValue());

		}
		return coll;
	}	



	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getMessageBoxUndoReadyToLeaveIsNotNull() && form.getLocalContext().getMessageBoxUndoReadyToLeave().equals(messageBoxId))
		{	
			form.getLocalContext().setMessageBoxUndoReadyToLeave(null);
			if (DialogResult.YES.equals(result))
			{	
				if (doUndoReadyToLeave())
				{	
					open(form.getLocalContext().getSelectedVIEW());
				}
			}
		}
		//WDEV-22380
		else if (form.getLocalContext().getMessageBoxReturnFromHomeLeaveToWardIsNotNull() && form.getLocalContext().getMessageBoxReturnFromHomeLeaveToWard().equals(messageBoxId))
		{
			form.getLocalContext().setMessageBoxReturnFromHomeLeaveToWard(null);
			if (DialogResult.YES.equals(result))
			{	
				if (doReturnFromHomeLeaveToWard())
				{	
					open(form.getLocalContext().getSelectedVIEW());
				}
			}

		}
		updateControlsState();
	}

	@Override
	protected void onBtnAcceptTransferClick() throws PresentationLogicException
	{
		if(!isNotMosUser("Logged-in user is not associated with a Member of Staff. Cannot accept transfer."))
		{
			acceptTransferNoBed();
		}
	}

	protected void onBtnReturnFromHomeLeaveClick() throws PresentationLogicException
	{
		if (form.dyngrdPatients().getValue() == null)
			return;
		returnFromHomeLeaveAssignBed();		
	}


	private void returnFromHomeLeaveAssignBed()
	{		
		boolean isWardViewPatient = form.dyngrdPatients().getValue() instanceof WardViewPatientListVo;

		if (isWardViewPatient)
		{
			WardViewPatientListVo selectedRecord = (WardViewPatientListVo) form.dyngrdPatients().getValue();
			if (selectedRecord != null)
			{	
				if (selectedRecord.getBedSpaceStateIsNotNull())
				{
					BedSpaceStateLiteVo selectedPatientBedSpace = domain.getSelectedBedSpaceState(selectedRecord.getBedSpaceState());

					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);					
					form.getGlobalContext().Core.setSelectedBedSpaceState(selectedPatientBedSpace);					
				}
				else
				{
					InpatientEpisodeLiteVo selectedInpatientEpisode = domain.getInpatientEpisodeLite(((WardViewPatientListVo)form.dyngrdPatients().getValue()).getInpatientEpisode());

					form.getGlobalContext().Core.setSelectedBedSpaceState(null);
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient(selectedInpatientEpisode);					
				}			
			}
			engine.open(form.getForms().Core.AssignBedToHomeLeaveInpatient);
		}
	}	

	private String getBedStatusTooltip(TrackingForPendingEmergencyAdmitVo trackingForPendingEmergencyAdmission) 
	{
		StringBuffer sb = new StringBuffer(); 
		BedAvailabilityForTrackingVo bedAvailability = trackingForPendingEmergencyAdmission.getBedAvailability();

		sb.append("<b>Requested by:</b> ");
		if (bedAvailability != null)
		{
			if (bedAvailability.getRequestedBy() != null)
			{
				if (bedAvailability.getRequestedBy().getName() != null && bedAvailability.getRequestedBy().getName().getSurname() != null)
					sb.append(bedAvailability.getRequestedBy().getName().getSurname()).append(" ");

				if (bedAvailability.getRequestedBy().getName() != null && bedAvailability.getRequestedBy().getName().getForename() != null)
					sb.append(bedAvailability.getRequestedBy().getName().getForename());
			}
		}
		sb.append("<br>");


		sb.append("<b>Decision to Admit Date Time:</b> ");
		if (trackingForPendingEmergencyAdmission != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission() != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getDTADateTime() != null)
		{
			sb.append(trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getDTADateTime());
		}
		sb.append("<br>");


		sb.append("<b>Requested Bed Type:</b> ");
		if (trackingForPendingEmergencyAdmission != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission() != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getBedTypeRequested() != null)
		{
			sb.append(trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getBedTypeRequested().getText());
		}
		sb.append("<br>");


		sb.append("<b>Hospital:</b> ");
		if (trackingForPendingEmergencyAdmission != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission() != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getHospital() != null)
		{
			sb.append(trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getHospital().getName());
		}
		sb.append("<br>");


		sb.append("<b>Ward:</b> ");
		if (trackingForPendingEmergencyAdmission != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission() != null && trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getAllocatedWard() != null)
		{
			sb.append(trackingForPendingEmergencyAdmission.getAssociatedPendingEmergencyAdmission().getAllocatedWard().getName());
		}
		sb.append("<br><br>");


		sb.append("<b>Bed Available Date Time:</b> ");
		if (bedAvailability != null && bedAvailability.getAvailableDateTime() != null)
		{
			sb.append(bedAvailability.getAvailableDateTime());
		}
		sb.append("<br>");


		sb.append("<b>Bed Available Ward:</b> ");
		if (bedAvailability != null && bedAvailability.getWard() != null)
		{
			sb.append(bedAvailability.getWard().getName());
		}

		return sb.toString();
	}

	private Image getBedStatusImage(BedAvailabilityForTrackingVo bedAvailability) 
	{
		if(bedAvailability == null)
			return null;

		if(bedAvailability.getAvailableDateTime() != null)
			return form.getImages().Emergency.Bed_Available;

		if(bedAvailability.getAwaitingDateTime() != null)
			return form.getImages().Emergency.Bed_Awaiting;

		return null;
	}



}
