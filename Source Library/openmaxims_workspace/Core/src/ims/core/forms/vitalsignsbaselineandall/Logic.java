//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3776.16944)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.vitalsignsbaselineandall;

import ims.clinical.vo.SECSConfigurationVo;
import ims.clinical.vo.SECSConfigurationVoCollection;
import ims.clinical.vo.SECSLookupConfigVo;
import ims.clinical.vo.SECSLookupScoreVo;
import ims.clinical.vo.SECSRangeScoreVo;
import ims.clinical.vo.SECSVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientEWSVo;
import ims.core.vo.VSBloodPressure;
import ims.core.vo.VSBloodSugar;
import ims.core.vo.VSGlasgowComaScale;
import ims.core.vo.VSLungFunctionTestVo;
import ims.core.vo.VSMetrics;
import ims.core.vo.VSOxygenSaturation;
import ims.core.vo.VSPainLadderVo;
import ims.core.vo.VSPulse;
import ims.core.vo.VSPupils;
import ims.core.vo.VSRespirations;
import ims.core.vo.VSTemperature;
import ims.core.vo.VSVisualAcuity;
import ims.core.vo.VitalSignsLiteVo;
import ims.core.vo.VitalSignsLiteVoCollection;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.lookups.CBGType;
import ims.core.vo.lookups.ConsciousLevel;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.OBSProtocolType;
import ims.core.vo.lookups.OBSType;
import ims.core.vo.lookups.OBSTypeCollection;
import ims.core.vo.lookups.PatientCausingConcern;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.UrineOutput;
import ims.core.vo.lookups.VSSnellen;
import ims.core.vo.lookups.VSSnellenCollection;
import ims.core.vo.lookups.VSType;
import ims.core.vo.lookups.VSTypeCollection;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		
		initialize();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		enableBloodSugarControls(false);
		showBloodGlucoseControls(false, false);
		

		loadPupilsCombos();
		
		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
		{
			loadEWSCombos();
			form.getLocalContext().setOBSProtocolTypeText(form.getLocalContext().getSecsRecord()!=null && form.getLocalContext().getSecsRecord().getOBSProtocolType()!=null ? form.getLocalContext().getSecsRecord().getOBSProtocolType().getText() : null);
			form.lblEWSScore().setValue(form.getLocalContext().getOBSProtocolTypeText() != null ? form.getLocalContext().getOBSProtocolTypeText() + " Score" : "");
		}
		else
		{
			hideEWSControls();
		}
		
		try
		{
			listVitalSigns();
		}
		catch (PresentationLogicException e1)
		{

			engine.showMessage(e1.getMessage());
			return;
		}
		form.setMode(FormMode.VIEW);
		// Don't allow to create new Vital Signs when "Logged in User is not a
		// Hcp"
		if (form.getMode().equals(FormMode.VIEW) && isLoggedInUser() == false)
		{
			engine.showMessage("Logged in User is not a Hcp");
			form.btnNew().setEnabled(false);
		}

		// default to original record selected if flicking back to this screen
		// from any other
		/*if (form.getGlobalContext().Core.getVitalSign() != null)
		{
			form.recbrHistory().setValue(form.getGlobalContext().Core.getVitalSign());
			try
			{
				vitallSignsValueChanged();
			}
			catch (PresentationLogicException e)
			{
				throw new FormOpenException("PresentationLogicException occurred " + e.getMessage(), e);
			}
		}*/

		setPupilstooltip();		
	}
	private void initialize()
	{
		form.getGlobalContext().Core.setIdForm(null);
		StringBuffer tooltip = new StringBuffer();
		
		//WDEV-20481
		tooltip.append("<table>");
		tooltip.append(addTableRow("<b>Eyes open</b>", ""));
		tooltip.append(addTableRow("Spontaneously", "4"));
		tooltip.append(addTableRow("To speech", "3"));
		tooltip.append(addTableRow("To pain", "2"));
		tooltip.append(addTableRow("None", "1"));
		
		tooltip.append(addTableRow("", ""));
		
		tooltip.append(addTableRow("<b>Verbal response</b>", ""));
		tooltip.append(addTableRow("Orientated", "5"));
		tooltip.append(addTableRow("Confused", "4"));
		tooltip.append(addTableRow("Inappropriate words", "3"));
		tooltip.append(addTableRow("Incomprehensible sound", "2"));
		tooltip.append(addTableRow("None", "1"));
		
		tooltip.append(addTableRow("", ""));
		
		tooltip.append(addTableRow("<b>Motor response</b>", ""));
		tooltip.append(addTableRow("Obey commands", "6"));
		tooltip.append(addTableRow("Localises pain", "5"));
		tooltip.append(addTableRow("Normal flexion (Withdraws)", "4"));
		tooltip.append(addTableRow("Abnormal flexion (Decorticate)", "3"));
		tooltip.append(addTableRow("Extension Decerebrate", "2"));
		tooltip.append(addTableRow("None (Flaccid)", "1"));
		tooltip.append("</table>");
				
		form.lyrVital().tabPageOtherVitalSigns().lnkGCS().setTooltip(tooltip.toString());
	}
	
	//WDEV-20481
	private String addTableRow(String textColl1, String textColl2 )
	{
		return "<td>" + textColl1 + "</td>" +"<td> &nbsp;&nbsp;&nbsp;&nbsp </td>" +"<td>" + textColl2 + "</td></tr>";
	}
	
	private void setPupilstooltip()
	{
		StringBuffer tooltip = new StringBuffer();
		tooltip.append("<table border='0' width='4%' id='table1' bgcolor='#F5FAFF' cellspacing='6'>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_1.getImagePath() + "' width='9' height='11'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>1</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_2.getImagePath() + "' width='12' height='13'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>2</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_3.getImagePath() + "' width='16' height='18'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>3</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_4.getImagePath() + "' width='19' height='20'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>4</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_5.getImagePath() + "' width='21' height='23'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>5</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_6.getImagePath() + "' width='30' height='28'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>6</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_7.getImagePath() + "' width='31' height='33'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>7</font></td>");
		tooltip.append("</tr>");
		tooltip.append("<tr>");
		tooltip.append("<td align='center'>");
		tooltip.append("<img border='0' src='" + form.getImages().Core.Pupil_8.getImagePath() + "' width='30' height='33'></td>");
		tooltip.append("<td align='center' width='11'><font face='Arial'>8</font></td>");
		tooltip.append("</tr>");
		tooltip.append("</table>");

		form.lyrVital().tabPageOtherVitalSigns().lnkPupils().setTooltip(tooltip.toString());
	}

	private boolean isLoggedInUser()
	{
		MemberOfStaffShortVo memStaffShortVo = (MemberOfStaffShortVo) domain.getMosUser();
		if (memStaffShortVo != null && memStaffShortVo.getHcp() != null)
			return true;

		return false;
	}

	private void listVitalSigns() throws PresentationLogicException
	{
		populateRecordBrowser(domain.listVitalSignsLiteVo(form.getGlobalContext().Core.getCurrentCareContext()));
		form.getLocalContext().setEditedRecord(domain.getVitalSignsById(form.recbrHistory().getValue()));
		form.getGlobalContext().Core.setVitalSign(form.getLocalContext().getEditedRecord());
		displayRecord();
		form.btnEdit().setVisible(form.getLocalContext().getEditedRecordIsNotNull() ? true : false);
		
	}
	private void populateRecordBrowser(VitalSignsLiteVoCollection voColl)
	{
		if(voColl == null)
			return;
		
		form.recbrHistory().clear();
						
		for (int i = 0; i < voColl.size(); i++)
		{
			VitalSignsLiteVo vo = voColl.get(i);			
			form.recbrHistory().newRow(voColl.get(i), getAuthoring(vo));
		}
		
		if (form.getLocalContext().getEditedRecordIsNotNull())
			form.recbrHistory().setValue(form.getLocalContext().getEditedRecord());
		else
			form.recbrHistory().setValue(voColl.get(0));
	}
	private String getAuthoring(VitalSignsLiteVo vo)
	{
		StringBuffer sb = new StringBuffer();
		if(vo != null)
		{
			if(vo.getAuthoringInformationIsNotNull())
			{
				if (vo.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					sb.append(vo.getAuthoringInformation().getAuthoringHcp().toString());
				}
				if (vo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
				{
					sb.append(" " + vo.getAuthoringInformation().getAuthoringDateTime().toString());
				}
			}			
		}
		
		return sb.toString();
	}
	void loadPupilsCombos()
	{
		for (int i = 1; i < 9; i++)
		{
			form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().newRow(new Integer(i), String.valueOf(i));
			form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().newRow(new Integer(i), String.valueOf(i));
		}
		for (int i = 1; i < 6; i++)
			form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().newRow(new Integer(i), String.valueOf(i));

		for (int i = 1; i < 5; i++)
			form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().newRow(new Integer(i), String.valueOf(i));

		for (int i = 1; i < 7; i++)
			form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().newRow(new Integer(i), String.valueOf(i));
	}
	private void showBloodGlucoseControls(boolean bShow, boolean bCBGM)
	{
		form.lyrVital().tabPageBaseline().lblValue().setVisible(bShow);
		form.lyrVital().tabPageBaseline().decValue().setVisible(bShow);
		form.lyrVital().tabPageBaseline().lblValueUnits().setVisible(bShow);

		if (bCBGM)
		{
			form.lyrVital().tabPageBaseline().lblValue().setValue("Pre Value: ");

			form.lyrVital().tabPageBaseline().lblValue().setVisible(bShow);
			form.lyrVital().tabPageBaseline().lblPostValue().setVisible(bShow);
			form.lyrVital().tabPageBaseline().lblPostValueUnits().setVisible(bShow);
			form.lyrVital().tabPageBaseline().lblTimeInterval().setVisible(bShow);
			form.lyrVital().tabPageBaseline().lblTimeIntervalUnits().setVisible(bShow);
			form.lyrVital().tabPageBaseline().lblTimePeriod().setVisible(bShow);

			form.lyrVital().tabPageBaseline().cmbTimePeriod().setVisible(bShow);
			form.lyrVital().tabPageBaseline().decPostValue().setVisible(bShow);
			form.lyrVital().tabPageBaseline().intInterval().setVisible(bShow);
		}
		else
		{
			form.lyrVital().tabPageBaseline().lblValue().setValue("Value: ");

			form.lyrVital().tabPageBaseline().lblPostValue().setVisible(false);
			form.lyrVital().tabPageBaseline().lblPostValueUnits().setVisible(false);
			form.lyrVital().tabPageBaseline().lblTimeInterval().setVisible(false);
			form.lyrVital().tabPageBaseline().lblTimeIntervalUnits().setVisible(false);
			form.lyrVital().tabPageBaseline().lblTimePeriod().setVisible(false);

			form.lyrVital().tabPageBaseline().cmbTimePeriod().setVisible(false);
			form.lyrVital().tabPageBaseline().decPostValue().setVisible(false);
			form.lyrVital().tabPageBaseline().intInterval().setVisible(false);
		}
	}
	private void hideEWSControls() 
	{
		form.lyrVital().tabPageOtherVitalSigns().lblConscious().setVisible(false);
		form.lyrVital().tabPageOtherVitalSigns().lblPatCausConc().setVisible(false);
		form.lyrVital().tabPageOtherVitalSigns().lblUrineOut().setVisible(false);
		form.lyrVital().tabPageOtherVitalSigns().cmbConscious().setVisible(false);
		form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().setVisible(false);
		form.lyrVital().tabPageOtherVitalSigns().cmbUrine().setVisible(false);
	}

	/**
	 * Patient Causing Concern,Conscious Level and Urine Output
	 */
	private void loadEWSCombos()
	{
		SECSVo voSecs = domain.getSecs();

		if (voSecs == null || voSecs.getConfiguration() == null)
			return;

		form.getLocalContext().setSecsRecord(voSecs);
		form.getLocalContext().setCollVitalSignsRequiredForScore(getVitalSignsRequiredForScore(voSecs.getConfiguration())); //WDEV-20668

		SECSConfigurationVoCollection voCollConfig = voSecs.getConfiguration();

		for (int i = 0; i < voCollConfig.size(); i++)
		{
			SECSConfigurationVo voConfig = voCollConfig.get(i);
			if (voConfig.getTypeIsNotNull())
			{
				if (voConfig.getType().equals(OBSType.PATIENT_CONCERN))
				{
					SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
					if (voLookupConfig != null && voLookupConfig.getLookupScores() != null)
					{
						for (int p = 0; p < voLookupConfig.getLookupScores().size(); p++)
							form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().newRow(new PatientCausingConcern(voLookupConfig.getLookupScores().get(p).getLookupInstance().getId(), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText(), voLookupConfig.getLookupScores().get(p).getLookupInstance().isActive(), null, null, null), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText());
					}
				}
				else if (voConfig.getType().equals(OBSType.CONSCIOUS_LEVEL))
				{
					SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
					if (voLookupConfig != null && voLookupConfig.getLookupScores() != null)
					{
						for (int p = 0; p < voLookupConfig.getLookupScores().size(); p++)
							form.lyrVital().tabPageOtherVitalSigns().cmbConscious().newRow(new ConsciousLevel(voLookupConfig.getLookupScores().get(p).getLookupInstance().getId(), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText(), voLookupConfig.getLookupScores().get(p).getLookupInstance().isActive(), null, null, null), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText());
					}
				}
				else if (voConfig.getType().equals(OBSType.URINE_OUTPUT))
				{
					SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
					if (voLookupConfig != null && voLookupConfig.getLookupScores() != null)
					{
						for (int p = 0; p < voLookupConfig.getLookupScores().size(); p++)
							form.lyrVital().tabPageOtherVitalSigns().cmbUrine().newRow(new UrineOutput(voLookupConfig.getLookupScores().get(p).getLookupInstance().getId(), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText(), voLookupConfig.getLookupScores().get(p).getLookupInstance().isActive(), null, null, null), voLookupConfig.getLookupScores().get(p).getLookupInstance().getText());
					}
				}
			}
		}
	}

	//WDEV-20668
	private OBSTypeCollection getVitalSignsRequiredForScore(SECSConfigurationVoCollection voCollConfig) 
	{
		if (voCollConfig==null  || voCollConfig.size()==0)
			return null;

		OBSTypeCollection collObsType=new OBSTypeCollection();
		
		for (int i = 0; i < voCollConfig.size(); i++)
		{
			if (voCollConfig.get(i)!=null && Boolean.TRUE.equals(voCollConfig.get(i).getIsRequiredForScore()))
			{
				collObsType.add(voCollConfig.get(i).getType());
			}
		}
		
		return collObsType;
	}

	private void enableBloodSugarControls(boolean bEnable)
	{
		form.lyrVital().tabPageBaseline().cmbTimePeriod().setEnabled(bEnable);
		form.lyrVital().tabPageBaseline().decValue().setEnabled(bEnable);
		form.lyrVital().tabPageBaseline().decPostValue().setEnabled(bEnable);
		form.lyrVital().tabPageBaseline().intInterval().setEnabled(bEnable);
	}
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.setMode(FormMode.EDIT);
		//form.cmbAllRecords().setValue(null);
		form.getLocalContext().setEditedRecord(null);
		form.customControlAuthoringInfo().initializeComponent();
		form.setcustomControlAuthoringInfoEnabled(true);
		form.dtimTaken().setValue(new DateTime());
		form.lyrVital().tabPageBaseline().GroupBP().setValue(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPSitting);
		onRadioButtonGroupBPValueChanged();
		
		showBloodGlucoseControls(false, false);
		form.lyrVital().showtabPageBaseline();
		// TODO Add your code here.
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSave(true);

	}
	
	private void doSave(boolean validateNEWS) throws PresentationLogicException
	{
		if (form.dtimTaken().getValue() != null)
		{
			if (form.dtimTaken().getValue().isGreaterThan(new DateTime()))
			{
				engine.showMessage("'Date/Time Taken' cannot be set in the future."); //WDEV-18762
				return;
			}
		}
		
		ArrayList<String> screenErrors = new ArrayList<String>();

		VitalSignsVo voVitalSign = null;
		
		if (form.getLocalContext().getEditedRecordIsNotNull()) 
			voVitalSign = form.getLocalContext().getEditedRecord();
		else
			voVitalSign = new VitalSignsVo();
		
		VSTypeCollection recordedSigns = new VSTypeCollection();

		populateEwsDataFromControls(voVitalSign);
		
		if ((form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue() != null) || (form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue() != null) || (form.lyrVital().tabPageBaseline().intBPStandingDiastolic().getValue() != null) || (form.lyrVital().tabPageBaseline().intBPStandingSystolic().getValue() != null))
		{
			VSBloodPressure voBP = new VSBloodPressure();
			if ((form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue() != null && form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue() == null) || (form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue() == null && form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue() != null))
			{
				if (form.lyrVital().tabPageBaseline().GroupBP().getValue().equals(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPSitting))
					screenErrors.add("Please enter both Blood Pressure values for Sitting.");
				else
					screenErrors.add("Please enter both Blood Pressure values for Lying.");
			}
			else
			{

				if (form.lyrVital().tabPageBaseline().GroupBP().getValue().equals(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPSitting))
				{
					voBP.setBPSittingDias(new Float(form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue().intValue()));
					voBP.setBPSittingSys(new Float(form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue().intValue()));
				}
				else
				{
					if (form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue() != null)
						voBP.setBPLyingDias(new Float(form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue().intValue()));
					if (form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue() != null)
						voBP.setBPLyingSys(new Float(form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue().intValue()));
				}
			}

			if ((form.lyrVital().tabPageBaseline().intBPStandingDiastolic().getValue() != null && form.lyrVital().tabPageBaseline().intBPStandingSystolic().getValue() == null) || (form.lyrVital().tabPageBaseline().intBPStandingDiastolic().getValue() == null && form.lyrVital().tabPageBaseline().intBPStandingSystolic().getValue() != null))
			{
				screenErrors.add("Please enter both Blood Pressure values for Standing.");
			}
			else
			{
				if (form.lyrVital().tabPageBaseline().intBPStandingDiastolic().getValue() != null)
					voBP.setBPStandingDias(new Float(form.lyrVital().tabPageBaseline().intBPStandingDiastolic().getValue().intValue()));
				if (form.lyrVital().tabPageBaseline().intBPStandingSystolic().getValue() != null)
					voBP.setBPStandingSys(new Float(form.lyrVital().tabPageBaseline().intBPStandingSystolic().getValue().intValue()));
			}

			voVitalSign.setBloodPressure(voBP);
			recordedSigns.add(VSType.BP);
		}
		else if ((form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().getValue() == null) && (form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().getValue() == null) && (form.lyrVital().tabPageBaseline().intBPStandingDiastolic().getValue() == null) && (form.lyrVital().tabPageBaseline().intBPStandingSystolic().getValue() == null))
			voVitalSign.setBloodPressure(null);

		if ((form.lyrVital().tabPageBaseline().intPulseRadial().getValue() != null) || (form.lyrVital().tabPageBaseline().intPulseApex().getValue() != null))
		{
			VSPulse voPulse = new VSPulse();
			if (form.lyrVital().tabPageBaseline().intPulseRadial().getValue() != null)
			{
				voPulse.setPulseRateRadial(form.lyrVital().tabPageBaseline().intPulseRadial().getValue());
			}
			if (form.lyrVital().tabPageBaseline().intPulseApex().getValue() != null)
			{
				voPulse.setPulseRateApex(form.lyrVital().tabPageBaseline().intPulseApex().getValue());
			}
			voPulse.setIsIrregular(new Boolean(form.lyrVital().tabPageBaseline().chkIrregular().getValue()));
			voVitalSign.setPulse(voPulse);
			recordedSigns.add(VSType.PULSE);
		}
		else if ((form.lyrVital().tabPageBaseline().intPulseRadial().getValue() == null) && (form.lyrVital().tabPageBaseline().intPulseApex().getValue() == null))
			voVitalSign.setPulse(null);

		if ((form.lyrVital().tabPageBaseline().intPeakFlowPre().getValue() != null) || (form.lyrVital().tabPageBaseline().intPeakFlowPost().getValue() != null) || (form.lyrVital().tabPageBaseline().intTimeInterval().getValue() != null))
		{
			// VSPeakFlow vopeakFlow = new VSPeakFlow();
			VSLungFunctionTestVo voLungFunction = new VSLungFunctionTestVo();

			if (form.lyrVital().tabPageBaseline().intPeakFlowPre().getValue() != null)
			{
				voLungFunction.setPeakFlowPre(form.lyrVital().tabPageBaseline().intPeakFlowPre().getValue());
			}

			if (form.lyrVital().tabPageBaseline().intPeakFlowPost().getValue() != null)
			{
				voLungFunction.setPeakFlowPost(form.lyrVital().tabPageBaseline().intPeakFlowPost().getValue());
			}

			if (form.lyrVital().tabPageBaseline().intTimeInterval().getValue() != null)
			{
				voLungFunction.setTimeInterval(form.lyrVital().tabPageBaseline().intTimeInterval().getValue());
			}

			voVitalSign.setLungFunctionTest(voLungFunction);
			recordedSigns.add(VSType.PEAKFLOW);
		}
		else if ((form.lyrVital().tabPageBaseline().intPeakFlowPre().getValue() == null) && (form.lyrVital().tabPageBaseline().intPeakFlowPost().getValue() == null) && (form.lyrVital().tabPageBaseline().intTimeInterval().getValue() == null))
			voVitalSign.setLungFunctionTest(null);

		
		if (form.lyrVital().tabPageBaseline().cmbPainScore().getValue() == null)
		{
			voVitalSign.setPain(null);
		}
		else
		{
			VSPainLadderVo vo = new VSPainLadderVo();
			vo.setPain(form.lyrVital().tabPageBaseline().cmbPainScore().getValue());
			voVitalSign.setPain(vo);
			recordedSigns.add(VSType.PAIN);
		}
		
		

		if (form.lyrVital().tabPageBaseline().decTemp().getValue() != null)
		{
			VSTemperature voTemperature = new VSTemperature();
			voTemperature.setTemperature(form.lyrVital().tabPageBaseline().decTemp().getValue());
			voVitalSign.setTemperature(voTemperature);
			recordedSigns.add(VSType.TEMP);
		}
		else if (form.lyrVital().tabPageBaseline().decTemp().getValue() == null)
			voVitalSign.setTemperature(null);

		if (form.lyrVital().tabPageBaseline().intRespirations().getValue() != null)
		{
			VSRespirations voResp = new VSRespirations();
			voResp.setRespRate(form.lyrVital().tabPageBaseline().intRespirations().getValue());
			voVitalSign.setRespiratory(voResp);
			recordedSigns.add(VSType.RESPIRATION);
		}
		else if (form.lyrVital().tabPageBaseline().intRespirations().getValue() == null)
			voVitalSign.setRespiratory(null);

		if (form.lyrVital().tabPageBaseline().intO2Sat().getValue() != null || form.lyrVital().tabPageBaseline().intFractionRate().getValue() != null)
		{
			if (form.lyrVital().tabPageBaseline().chkonFiO2().getValue())
			{
				if (form.lyrVital().tabPageBaseline().intFractionRate().getValue() == null)
					screenErrors.add("Please enter value for Oxygen Saturation % rate.");
			}

			VSOxygenSaturation voOxygen = new VSOxygenSaturation();
			voOxygen.setOxygenSaturationLevel(form.lyrVital().tabPageBaseline().intO2Sat().getValue());
			voOxygen.setFractionRate(form.lyrVital().tabPageBaseline().intFractionRate().getValue());
			voOxygen.setIsOnFiO2(form.lyrVital().tabPageBaseline().chkonFiO2().getValue());
			voVitalSign.setOxygenSaturation(voOxygen);
			recordedSigns.add(VSType.OXYGEN);
		}
		else
			voVitalSign.setOxygenSaturation(null);

		if (!form.lyrVital().tabPageBaseline().BloodGlucoseGroup1().getValue().equals(GenForm.lyrVitalLayer.tabPageBaselineContainer.BloodGlucoseGroup1Enumeration.None))
		{
			VSBloodSugar voBloodSugar = new VSBloodSugar();
			if (form.lyrVital().tabPageBaseline().BloodGlucoseGroup1().getValue().equals(GenForm.lyrVitalLayer.tabPageBaselineContainer.BloodGlucoseGroup1Enumeration.rdoRandom))
				voBloodSugar.setType(CBGType.RANDOM);
			else
				voBloodSugar.setType(CBGType.CBGM);
			voBloodSugar.setBloodSugarValue(form.lyrVital().tabPageBaseline().decValue().getValue());
			voBloodSugar.setTimePeriod(form.lyrVital().tabPageBaseline().cmbTimePeriod().getValue());
			voBloodSugar.setPostBloodSugarValue(form.lyrVital().tabPageBaseline().decPostValue().getValue());
			voBloodSugar.setTimeInterval(form.lyrVital().tabPageBaseline().intInterval().getValue());
			voVitalSign.setBloodSugar(voBloodSugar);
			recordedSigns.add(VSType.BLOODSUGAR);
		}
		else
			voVitalSign.setBloodSugar(null);

		if (form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbLeftReactionPupil().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbRightReactionPupil().getValue() != null)
		{
			if (form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().getValue() == null || form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().getValue() == null || form.lyrVital().tabPageOtherVitalSigns().cmbLeftReactionPupil().getValue() == null || form.lyrVital().tabPageOtherVitalSigns().cmbRightReactionPupil().getValue() == null)
			{
				screenErrors.add("Please enter values for pupil size and reaction for both eyes.");
			}
			else
			{
				VSPupils voPupil = new VSPupils();
				voPupil.setPupilLeftReaction(form.lyrVital().tabPageOtherVitalSigns().cmbLeftReactionPupil().getValue());
				voPupil.setPupilRightReaction(form.lyrVital().tabPageOtherVitalSigns().cmbRightReactionPupil().getValue());
				voPupil.setPupilLeftSize(form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().getValue());
				voPupil.setPupilRightSize(form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().getValue());
				voVitalSign.setPupils(voPupil);
				recordedSigns.add(VSType.PUPILS);
			}
		}
		else if ((form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().getValue() == null) && (form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().getValue() == null) && (form.lyrVital().tabPageOtherVitalSigns().cmbLeftReactionPupil().getValue() == null) && (form.lyrVital().tabPageOtherVitalSigns().cmbRightReactionPupil().getValue() == null))
			voVitalSign.setPupils(null);

		if (form.lyrVital().tabPageOtherVitalSigns().cmbVisualLeft().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbVisualRight().getValue() != null)
		{
			VSVisualAcuity voVisual = new VSVisualAcuity();

			if (form.lyrVital().tabPageOtherVitalSigns().cmbVisualLeft().getValue() != null)
				voVisual.setLeftValue(String.valueOf(form.lyrVital().tabPageOtherVitalSigns().cmbVisualLeft().getValue().getID()));

			if (form.lyrVital().tabPageOtherVitalSigns().cmbVisualRight().getValue() != null)
				voVisual.setRightValue(String.valueOf(form.lyrVital().tabPageOtherVitalSigns().cmbVisualRight().getValue().getID()));

			voVitalSign.setVisualAcuity(voVisual);
			recordedSigns.add(VSType.VISUALACUITY);
		}
		else if (form.lyrVital().tabPageOtherVitalSigns().cmbVisualLeft().getValue() == null && form.lyrVital().tabPageOtherVitalSigns().cmbVisualRight().getValue() == null)
			voVitalSign.setVisualAcuity(null);

		if (form.lyrVital().tabPageOtherVitalSigns().intGCS().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().getValue() != null || form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().getValue() != null)
		{
			if (form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().getValue() == null || form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().getValue() == null || form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().getValue() == null)
			{
				screenErrors.add("Please enter all values for Glasgow Coma Scale.");
			}
			else
			{
				VSGlasgowComaScale voGcs = new VSGlasgowComaScale();
				voGcs.setMotorResponse(form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().getValue());
				voGcs.setVerbalResponse(form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().getValue());
				voGcs.setEyeOpening(form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().getValue());
				voGcs.setTotalGlasgowComaScale(form.lyrVital().tabPageOtherVitalSigns().intGCS().getValue());

				voVitalSign.setGlasgowComaScale(voGcs);

				recordedSigns.add(VSType.GLASGOWCOMASCALE);
			}
		}
		else if ((form.lyrVital().tabPageOtherVitalSigns().intGCS().getValue() == null) && (form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().getValue() == null) && (form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().getValue() == null) && (form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().getValue() == null))
			voVitalSign.setGlasgowComaScale(null);

		if (form.lyrVital().tabPageBaseline().decHeight().getValue() != null || form.lyrVital().tabPageBaseline().decWeight().getValue() != null)
		{
			if (form.lyrVital().tabPageBaseline().decHeight().getValue() == null || form.lyrVital().tabPageBaseline().decWeight().getValue() == null)
			{
				screenErrors.add("Please enter both Height and Weight for Metrics.");
			}
			else
			{
				VSMetrics voMetrics = new VSMetrics();
				voMetrics.setHeightValue(form.lyrVital().tabPageBaseline().decHeight().getValue());
				voMetrics.setWeightValue(form.lyrVital().tabPageBaseline().decWeight().getValue());
				voMetrics.setBMI(bodyMassIndex(form.lyrVital().tabPageBaseline().decHeight().getValue().floatValue(), form.lyrVital().tabPageBaseline().decWeight().getValue().floatValue()));
				voMetrics.setSurfaceArea(bodySurfaceArea(form.lyrVital().tabPageBaseline().decHeight().getValue().floatValue(), form.lyrVital().tabPageBaseline().decWeight().getValue().floatValue()));
				voMetrics.setHeightEstimatedMeasured(Boolean.TRUE); // default
				// to
				// measured
				voMetrics.setWeightEstimatedMeasured(Boolean.TRUE); // default
				// to
				// measured
				voMetrics.setPatient(form.getGlobalContext().Core.getPatientShort());
				voVitalSign.setMetrics(voMetrics);
				recordedSigns.add(VSType.METRICS);
			}
		}
		else if ((form.lyrVital().tabPageBaseline().decHeight().getValue() == null) && (form.lyrVital().tabPageBaseline().decWeight().getValue() == null))
			voVitalSign.setMetrics(null);

		if (recordedSigns.size() == 0)
			screenErrors.add("No Vital Signs values entered");
		else
			voVitalSign.setRecordedSigns(recordedSigns);

		voVitalSign.setAuthoringInformation(getAuthoringInfo());
		
		voVitalSign.setVitalsTakenDateTime(form.dtimTaken().getValue());

		voVitalSign.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voVitalSign.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if (form.getGlobalContext().Core.getUnrecordedObservationsReason() != null)
			voVitalSign.setUnrecordedObservationsReason(form.getGlobalContext().Core.getUnrecordedObservationsReason().getReason());

		boolean requiresEscalation = requiresEscalation(voVitalSign);
		
		String[] arrErrors = voVitalSign.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		if (arrScreenAndVoErrors.length == 0)
		{
			boolean isNEWSProtocol = form.getLocalContext().getSecsRecord() != null && OBSProtocolType.NEWS.equals(form.getLocalContext().getSecsRecord().getOBSProtocolType());
			
			if (validateNEWS && isNEWSProtocol && ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue() && !allRequiredForScoreVitalSignsHaveValues(voVitalSign))
			{
				if (form.getLocalContext().getCollVitalSignsRequiredForScore() != null && form.getLocalContext().getCollVitalSignsRequiredForScore().size() > 0)
				{
					
					if (Integer.valueOf(form.getGlobalContext().Core.getVitalSignsEscalationScore()) <=2)
						form.getLocalContext().setNEWSMessageId(engine.showMessage("You have not completed all "+ form.getLocalContext().getCollVitalSignsRequiredForScore().size() +" observations which are required to generate a NEWS score. Would you like to complete these?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
					else 
						form.getLocalContext().setNEWSMessageId(engine.showMessage("Your patient has been given a score of "+ form.getGlobalContext().Core.getVitalSignsEscalationScore() +" or more. Due to this scoring, and/or if you have clinical concerns regarding your patient, it is recommended a full set of observations are completed. Would you like to complete these?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
					
					return;
				}
			}
			
			try
			{
				voVitalSign = domain.saveVitalSign(voVitalSign);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.setMode(FormMode.VIEW);
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Error", arrScreenAndVoErrors);
			return;
		}

		form.setMode(FormMode.VIEW);
		enableBloodSugarControls(false);

		clearScreen();
		form.getLocalContext().setEditedRecord(voVitalSign);
		listVitalSigns();

		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue() && allRequiredForScoreVitalSignsHaveValues(voVitalSign)) //WDEV-20668
		{
			if (requiresEscalation)
			{
				if (form.getLocalContext().getSecsRecordIsNotNull() && form.getLocalContext().getSecsRecord().getEWSProtocolIsNotNull())
				{
					form.getGlobalContext().Assessment.setIsDynamicAssessmentOpenedForPreview(false);
					engine.open(form.getForms().Assessment.DynamicAssessmentsDialog, new Object[]{form.getLocalContext().getSecsRecord().getEWSProtocol()});
				}
				else
					engine.open(form.getForms().Nursing.SECS);
			}
		}
	}
	
	//WDEV-20668
	private boolean allRequiredForScoreVitalSignsHaveValues(VitalSignsVo voVitalSign)
	{
		OBSTypeCollection collVitalSignsRequiredForScore = form.getLocalContext().getCollVitalSignsRequiredForScore();
		
		if (collVitalSignsRequiredForScore == null || collVitalSignsRequiredForScore.size()==0)
			return false;

		if (collVitalSignsRequiredForScore.contains(OBSType.TEMPERATURE) &&  voVitalSign.getTemperature()==null)
		{
			return false;
		}

		if (collVitalSignsRequiredForScore.contains(OBSType.SYSTOLICBP) &&  (voVitalSign.getBloodPressure()==null || (voVitalSign.getBloodPressure().getBPSittingSys()==null && voVitalSign.getBloodPressure().getBPLyingSys()==null && voVitalSign.getBloodPressure().getBPStandingSys()==null )))
		{
			return false;
		}

		if (collVitalSignsRequiredForScore.contains(OBSType.RESPIRATORYRATE) &&  voVitalSign.getRespiratory()==null)
		{
			return false;
		}

		if (collVitalSignsRequiredForScore.contains(OBSType.PULSE) &&  voVitalSign.getPulse()==null)
		{
			return false;
		}

		if (collVitalSignsRequiredForScore.contains(OBSType.OXYGENSATS) &&  (voVitalSign.getOxygenSaturation()==null || voVitalSign.getOxygenSaturation().getOxygenSaturationLevel()==null ))
		{
			return false;
		}
		
		if (collVitalSignsRequiredForScore.contains(OBSType.FILTEREDO2) &&  (voVitalSign.getOxygenSaturation()==null || voVitalSign.getOxygenSaturation().getFractionRate()==null ))
		{
			return false;
		}
		
		if (collVitalSignsRequiredForScore.contains(OBSType.PATIENT_CONCERN) &&  voVitalSign.getPatientCausingConcern()==null)
		{
			return false;
		}

		if (collVitalSignsRequiredForScore.contains(OBSType.CONSCIOUS_LEVEL) &&  voVitalSign.getPatientConscious()==null)
		{
			return false;
		}
		
		if (collVitalSignsRequiredForScore.contains(OBSType.URINE_OUTPUT) &&  voVitalSign.getUrine2mlkgkhr()==null)
		{
			return false;
		}

		return true;
	}


	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.setMode(FormMode.VIEW);
		enableBloodSugarControls(false);
		form.recbrHistory().setValue(null);
		form.btnNew().setEnabled(true);
		listVitalSigns();
		updateControlState();
	}

	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName != null)
		{
			if(formName.equals(form.getForms().Assessment.DynamicAssessmentsDialog))
			{
				if(result != null && result.equals(DialogResult.OK))
					saveEWS();
			}
			else if (formName.equals(form.getForms().Core.UnrecordedObservationsReason) && DialogResult.OK.equals(result))
			{
				doSave(false);
			}
		}
		
	}
	
	protected void onFormModeChanged() 
	{
		updateControlState();		
	}
	
	protected void onRecbrHistoryValueChanged()	throws PresentationLogicException 
	{
		vitallSignsValueChanged();
	}
	private void vitallSignsValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setEditedRecord(domain.getVitalSignsById(form.recbrHistory().getValue()));
		form.getGlobalContext().Core.setVitalSign(form.getLocalContext().getEditedRecord());
		displayRecord();
		form.btnEdit().setVisible(form.getLocalContext().getEditedRecordIsNotNull() ? true : false);	
	
	}
	private void displayRecord()
	{
		ArrayList<VSType> vsTypesList = new ArrayList<VSType>();

		clearScreen();
		form.setMode(FormMode.VIEW);

		VitalSignsVo voVitalSign = form.getLocalContext().getEditedRecord();	
		if(voVitalSign == null)
			return;
		if (voVitalSign.getAuthoringInformationIsNotNull())
			form.customControlAuthoringInfo().setValue(voVitalSign.getAuthoringInformation());
		
		form.dtimTaken().setValue(voVitalSign.getVitalsTakenDateTime());

		form.lblEWSScore().setVisible(false);
		
		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
		{
			form.lyrVital().tabPageOtherVitalSigns().cmbConscious().setValue(voVitalSign.getPatientConscious());
			form.lyrVital().tabPageOtherVitalSigns().cmbUrine().setValue(voVitalSign.getUrine2mlkgkhr());
			form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().setValue(voVitalSign.getPatientCausingConcern());
			
			if (allRequiredForScoreVitalSignsHaveValues(voVitalSign))
			{
				requiresEscalation(voVitalSign);

				form.lblEWSScore().setVisible(true);
				if (form.getGlobalContext().Core.getVitalSignsEscalationScoreIsNotNull())
					form.lblEWSScore().setValue(form.getLocalContext().getOBSProtocolTypeText() != null ? form.getLocalContext().getOBSProtocolTypeText() + " Score is : " + form.getGlobalContext().Core.getVitalSignsEscalationScore() : "");// WDEV-20311
			}
			else if (voVitalSign.getUnrecordedObservationsReason() != null)
			{
				form.lblEWSScore().setVisible(true);
				form.lblEWSScore().setValue("Reason for Not recording full set of Observations: " + voVitalSign.getUnrecordedObservationsReason().getText());
			}
		}

		if (voVitalSign.getTemperature() != null)
		{
			form.lyrVital().tabPageBaseline().decTemp().setValue(voVitalSign.getTemperature().getTemperature());
			vsTypesList.add(VSType.TEMP);
		}

		if (voVitalSign.getPain() != null)
		{
			//form.lblScore().setValue("Score = " + voVitalSign.getPain().getPain().getText());
			if (voVitalSign.getPain().getPainIsNotNull())
				form.lyrVital().tabPageBaseline().cmbPainScore().setValue(voVitalSign.getPain().getPain());
			vsTypesList.add(VSType.PAIN);
			
			
		}

		if (voVitalSign.getPulse() != null)
		{
			if (voVitalSign.getPulse().getPulseRateRadial() != null)
				form.lyrVital().tabPageBaseline().intPulseRadial().setValue(voVitalSign.getPulse().getPulseRateRadial());
			if (voVitalSign.getPulse().getPulseRateApex() != null)
				form.lyrVital().tabPageBaseline().intPulseApex().setValue(voVitalSign.getPulse().getPulseRateApex()); // cm
			if (voVitalSign.getPulse().getIsIrregular() != null)
				form.lyrVital().tabPageBaseline().chkIrregular().setValue(voVitalSign.getPulse().getIsIrregular().booleanValue());
			vsTypesList.add(VSType.PULSE);
		}

		if (voVitalSign.getBloodPressure() != null)
		{
			// Siting
			if (voVitalSign.getBloodPressure().getBPSittingSysIsNotNull())
			{
				form.lyrVital().tabPageBaseline().GroupBP().setValue(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPSitting);
				try
				{
					onRadioButtonGroupBPValueChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}
				if(voVitalSign.getBloodPressure().getBPSittingDias() != null)
					form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPSittingDias().intValue()));
				if(voVitalSign.getBloodPressure().getBPSittingSys() != null)
					form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPSittingSys().intValue()));
			}
			else
			{

				form.lyrVital().tabPageBaseline().GroupBP().setValue(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPLyingStanding);
				try
				{
					onRadioButtonGroupBPValueChanged();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
				}

				// Standing
				if (voVitalSign.getBloodPressure().getBPStandingDias() != null)
					form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPStandingDias().intValue()));
				if (voVitalSign.getBloodPressure().getBPStandingSys() != null)
					form.lyrVital().tabPageBaseline().intBPStandingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPStandingSys().intValue()));

				// Lying
				if (voVitalSign.getBloodPressure().getBPLyingDias() != null)
					form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPLyingDias().intValue()));
				if (voVitalSign.getBloodPressure().getBPLyingSys() != null)
					form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPLyingSys().intValue()));
			}

			vsTypesList.add(VSType.BP);
		}

		if (voVitalSign.getRespiratory() != null)
		{
			form.lyrVital().tabPageBaseline().intRespirations().setValue(voVitalSign.getRespiratory().getRespRate());
			vsTypesList.add(VSType.RESPIRATION);
		}

		if (voVitalSign.getPupils() != null)
		{
			form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().setValue(voVitalSign.getPupils().getPupilLeftSize());
			form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().setValue(voVitalSign.getPupils().getPupilRightSize());
			form.lyrVital().tabPageOtherVitalSigns().cmbLeftReactionPupil().setValue(voVitalSign.getPupils().getPupilLeftReaction());
			form.lyrVital().tabPageOtherVitalSigns().cmbRightReactionPupil().setValue(voVitalSign.getPupils().getPupilRightReaction());

			vsTypesList.add(VSType.PUPILS);
		}

		if (voVitalSign.getLungFunctionTest() != null)
		{
			form.lyrVital().tabPageBaseline().intPeakFlowPre().setValue(voVitalSign.getLungFunctionTest().getPeakFlowPre());
			form.lyrVital().tabPageBaseline().intPeakFlowPost().setValue(voVitalSign.getLungFunctionTest().getPeakFlowPost());
			form.lyrVital().tabPageBaseline().intTimeInterval().setValue(voVitalSign.getLungFunctionTest().getTimeInterval());
			vsTypesList.add(VSType.PEAKFLOW);
		}

		if (voVitalSign.getGlasgowComaScale() != null)
		{
			form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().setValue(voVitalSign.getGlasgowComaScale().getEyeOpening());
			form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().setValue(voVitalSign.getGlasgowComaScale().getMotorResponse());
			form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().setValue(voVitalSign.getGlasgowComaScale().getVerbalResponse());
			form.lyrVital().tabPageOtherVitalSigns().intGCS().setValue(voVitalSign.getGlasgowComaScale().getTotalGlasgowComaScale());

			vsTypesList.add(VSType.GLASGOWCOMASCALE);
		}

		if (voVitalSign.getMetrics() != null)
		{
			form.lyrVital().tabPageBaseline().decHeight().setValue(voVitalSign.getMetrics().getHeightValue());
			form.lyrVital().tabPageBaseline().decWeight().setValue(voVitalSign.getMetrics().getWeightValue());
			if (voVitalSign.getMetrics().getBMIIsNotNull())
				form.lyrVital().tabPageBaseline().decBMI().setValue(voVitalSign.getMetrics().getBMI());			
			
			vsTypesList.add(VSType.METRICS);
		}

		if (voVitalSign.getBloodSugar() != null)
		{
			if (voVitalSign.getBloodSugar().getType().equals(CBGType.RANDOM))
				form.lyrVital().tabPageBaseline().BloodGlucoseGroup1().setValue(GenForm.lyrVitalLayer.tabPageBaselineContainer.BloodGlucoseGroup1Enumeration.rdoRandom);
			else
				form.lyrVital().tabPageBaseline().BloodGlucoseGroup1().setValue(GenForm.lyrVitalLayer.tabPageBaselineContainer.BloodGlucoseGroup1Enumeration.rdoCBGM);
			if (voVitalSign.getBloodSugar().getBloodSugarValueIsNotNull())
				form.lyrVital().tabPageBaseline().decValue().setValue(voVitalSign.getBloodSugar().getBloodSugarValue());
			if (voVitalSign.getBloodSugar().getTimePeriodIsNotNull())
				form.lyrVital().tabPageBaseline().cmbTimePeriod().setValue(voVitalSign.getBloodSugar().getTimePeriod());
			if (voVitalSign.getBloodSugar().getPostBloodSugarValueIsNotNull())
				form.lyrVital().tabPageBaseline().decPostValue().setValue(voVitalSign.getBloodSugar().getPostBloodSugarValue());
			if (voVitalSign.getBloodSugar().getTimeIntervalIsNotNull())
				form.lyrVital().tabPageBaseline().intInterval().setValue(voVitalSign.getBloodSugar().getTimeInterval());

			vsTypesList.add(VSType.BLOODSUGAR);

			showBloodGlucoseControls(true, voVitalSign.getBloodSugar().getType().equals(CBGType.CBGM));
		}
		else
			showBloodGlucoseControls(false, false);

		if (voVitalSign.getOxygenSaturation() != null)
		{
			form.lyrVital().tabPageBaseline().intO2Sat().setValue(voVitalSign.getOxygenSaturation().getOxygenSaturationLevel());
			form.lyrVital().tabPageBaseline().chkonFiO2().setValue(voVitalSign.getOxygenSaturation().getIsOnFiO2());
			form.lyrVital().tabPageBaseline().intFractionRate().setValue(voVitalSign.getOxygenSaturation().getFractionRate());
			vsTypesList.add(VSType.OXYGEN);
		}

		if (voVitalSign.getVisualAcuity() != null)
		{
			form.lyrVital().tabPageOtherVitalSigns().cmbVisualLeft().setValue(retrieveCodeFromID(voVitalSign.getVisualAcuity().getLeftValue()));
			form.lyrVital().tabPageOtherVitalSigns().cmbVisualRight().setValue(retrieveCodeFromID(voVitalSign.getVisualAcuity().getRightValue()));

			vsTypesList.add(VSType.VISUALACUITY);
		}

		// Code for enabling/disabling relevant links

		VSType[] typeArray = null;
		if (vsTypesList.size() > 0)
		{
			typeArray = new VSType[vsTypesList.size()];
			if (vsTypesList != null)
			{
				for (int i = 0; i < vsTypesList.size(); i++)
				{
					typeArray[i] = (VSType) vsTypesList.get(i);
				}
			}
		}
	}
	private VSSnellen retrieveCodeFromID(String id)
	{
		VSSnellenCollection coll = LookupHelper.getVSSnellen(domain.getLookupService());
		VSSnellen type = null;
		Integer val = null;

		try
		{
			val = Integer.valueOf(id);
		}
		catch (NumberFormatException e)
		{
			return null;
		}

		for (int i = 0; i < coll.size(); i++)
		{
			type = coll.get(i);
			if (type.getID() == val.intValue())
				break;
		}

		return type;
	}
	private void clearScreen()
	{
		
		form.lyrVital().tabPageBaseline().decTemp().setValue(null);
		
		form.lyrVital().tabPageBaseline().intPulseRadial().setValue(null);
		form.lyrVital().tabPageBaseline().intPulseApex().setValue(null);
		form.lyrVital().tabPageBaseline().chkIrregular().setValue(false);
		form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setValue(null);
		form.lyrVital().tabPageBaseline().intBPStandingSystolic().setValue(null);
		form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().setValue(null);
		form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().setValue(null);
		form.lyrVital().tabPageBaseline().intRespirations().setValue(null);
		form.lyrVital().tabPageBaseline().intPeakFlowPre().setValue(null);
		form.lyrVital().tabPageBaseline().intPeakFlowPost().setValue(null);
		form.lyrVital().tabPageBaseline().intTimeInterval().setValue(null);
		
		form.lyrVital().tabPageBaseline().decHeight().setValue(null);
		form.lyrVital().tabPageBaseline().decWeight().setValue(null);
		form.lyrVital().tabPageBaseline().intO2Sat().setValue(null);
		form.lyrVital().tabPageBaseline().intFractionRate().setValue(null);
		form.lyrVital().tabPageBaseline().chkonFiO2().setValue(false);
		form.lyrVital().tabPageBaseline().decBMI().setValue(null);
		form.customControlAuthoringInfo().setValue(null);
		
		form.dtimTaken().setValue(null);
		form.lyrVital().tabPageBaseline().GroupBP().setValue(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPSitting);
		try
		{
			onRadioButtonGroupBPValueChanged();
		}
		catch (PresentationLogicException e)
		{
			e.printStackTrace();
		}

		form.lyrVital().tabPageBaseline().BloodGlucoseGroup1().setValue(null);
		form.lyrVital().tabPageBaseline().decValue().setValue(null);
		form.lyrVital().tabPageBaseline().cmbTimePeriod().setValue(null);
		form.lyrVital().tabPageBaseline().decPostValue().setValue(null);
		form.lyrVital().tabPageBaseline().intInterval().setValue(null);
		
		form.lyrVital().tabPageBaseline().cmbPainScore().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbConscious().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbUrine().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbVisualLeft().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbVisualRight().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().intGCS().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbLeftSizePupil().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbRightSizePupil().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbLeftReactionPupil().setValue(null);
		form.lyrVital().tabPageOtherVitalSigns().cmbRightReactionPupil().setValue(null);
		form.lyrVital().tabPageBaseline().cmbPainScore().setValue(null);
		
		//WDEV-20327
		form.lyrVital().tabPageBaseline().decUlna().setValue(new Float(0));
		form.lyrVital().tabPageBaseline().decUlna().setValue(null);
	}
	
	protected void onRadioButtonBloodGlucoseGroup1ValueChanged() throws PresentationLogicException 
	{
		form.lyrVital().tabPageBaseline().cmbTimePeriod().setValue(null);
		form.lyrVital().tabPageBaseline().decValue().setValue(Float.valueOf("0.0"));
		form.lyrVital().tabPageBaseline().decValue().setValue(null);
		form.lyrVital().tabPageBaseline().decPostValue().setValue(Float.valueOf("0.0"));
		form.lyrVital().tabPageBaseline().decPostValue().setValue(null);
		form.lyrVital().tabPageBaseline().intInterval().setValue(Integer.valueOf("0"));
		form.lyrVital().tabPageBaseline().intInterval().setValue(null);

		if (form.lyrVital().tabPageBaseline().BloodGlucoseGroup1().getValue().equals(GenForm.lyrVitalLayer.tabPageBaselineContainer.BloodGlucoseGroup1Enumeration.rdoRandom))
		{
			showBloodGlucoseControls(true, false);

			form.lyrVital().tabPageBaseline().cmbTimePeriod().setEnabled(false);
			form.lyrVital().tabPageBaseline().decValue().setEnabled(true);
			form.lyrVital().tabPageBaseline().decPostValue().setEnabled(false);
			form.lyrVital().tabPageBaseline().intInterval().setEnabled(false);

		}
		else
		{
			showBloodGlucoseControls(true, true);

			form.lyrVital().tabPageBaseline().cmbTimePeriod().setEnabled(true);
			form.lyrVital().tabPageBaseline().decValue().setEnabled(true);
			form.lyrVital().tabPageBaseline().decPostValue().setEnabled(true);
			form.lyrVital().tabPageBaseline().intInterval().setEnabled(true);
		}
		
	}
	
	protected void onRadioButtonGroupBPValueChanged() throws PresentationLogicException 
	{
		if (form.lyrVital().tabPageBaseline().GroupBP().getValue().equals(GenForm.lyrVitalLayer.tabPageBaselineContainer.GroupBPEnumeration.rdoBPSitting))
		{
			form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setVisible(false);
			form.lyrVital().tabPageBaseline().intBPStandingSystolic().setVisible(false);
			form.lyrVital().tabPageBaseline().lblBPErectSlash().setVisible(false);
			form.lyrVital().tabPageBaseline().lblBPSupine().setValue("Sitting");
			form.lyrVital().tabPageBaseline().lblBPErect().setVisible(false);

		}
		else
		{
			form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setVisible(true);
			form.lyrVital().tabPageBaseline().intBPStandingSystolic().setVisible(true);
			
			form.lyrVital().tabPageBaseline().lblBPErectSlash().setVisible(true);
			form.lyrVital().tabPageBaseline().lblBPSupine().setValue("Lying");
			form.lyrVital().tabPageBaseline().lblBPErect().setVisible(true);
		}

		form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().setValue(new Integer(0));
		form.lyrVital().tabPageBaseline().intBPSittingLyingDiastolic().setValue(null);
		form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().setValue(new Integer(0));
		form.lyrVital().tabPageBaseline().intBPSittingLyingSystolic().setValue(null);
		form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setValue(new Integer(0));
		form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setValue(null);
		form.lyrVital().tabPageBaseline().intBPStandingSystolic().setValue(new Integer(0));
		form.lyrVital().tabPageBaseline().intBPStandingSystolic().setValue(null);
		
	}
		
	
	private void populateEwsDataFromControls(VitalSignsVo voVitalSign) 
	{
		if(!ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
			return;
		
		// constructing lookup instances from LookupInstVo
		PatientCausingConcern pccLkup = null;
		if (form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().getValue() != null)
			pccLkup = new PatientCausingConcern(form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().getValue().getId(), form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().getValue().getText(), form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().getValue().isActive(), null, null, null);

		voVitalSign.setPatientCausingConcern(pccLkup);

		ConsciousLevel clLkup = null;
		if (form.lyrVital().tabPageOtherVitalSigns().cmbConscious().getValue() != null)
			clLkup = new ConsciousLevel(form.lyrVital().tabPageOtherVitalSigns().cmbConscious().getValue().getId(), form.lyrVital().tabPageOtherVitalSigns().cmbConscious().getValue().getText(), form.lyrVital().tabPageOtherVitalSigns().cmbConscious().getValue().isActive(), null, null, null);

		voVitalSign.setPatientConscious(clLkup);

		UrineOutput uLkup = null;
		if (form.lyrVital().tabPageOtherVitalSigns().cmbUrine().getValue() != null)
			uLkup = new UrineOutput(form.lyrVital().tabPageOtherVitalSigns().cmbUrine().getValue().getId(), form.lyrVital().tabPageOtherVitalSigns().cmbUrine().getValue().getText(), form.lyrVital().tabPageOtherVitalSigns().cmbUrine().getValue().isActive(), null, null, null);

		voVitalSign.setUrine2mlkgkhr(uLkup);

	}

	private AuthoringInformationVo getAuthoringInfo()
	{
		AuthoringInformationVo voAuthInfo = form.customControlAuthoringInfo().getValue();
		if(voAuthInfo == null)
			return null;
		
		if(voAuthInfo.countFieldsWithValue() == 0)
			return null;
		
		return voAuthInfo;
	}

	private boolean requiresEscalation(VitalSignsVo voVitalSign)   //WDEV-21004
	{
		SECSVo voSecs = form.getLocalContext().getSecsRecord();
		Boolean bOXYTriggered = false;
		
		form.getGlobalContext().Core.setVitalSignsEscalationScore("0");

		if (voSecs == null || voSecs.getConfiguration() == null)
			return false;

		SECSConfigurationVoCollection voCollConfig = voSecs.getConfiguration();
		StringBuffer originsOfScore = new StringBuffer();

		if (voVitalSign.getTemperatureIsNotNull() && voVitalSign.getTemperature().getTemperatureIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(-1, OBSType.TEMPERATURE, voCollConfig, -1, voVitalSign.getTemperature().getTemperature().floatValue());
			if (!scoreText.equals(""))
			{
				originsOfScore.append("Temperature  ");
				originsOfScore.append(scoreText);
			}
		}
		
		if (voVitalSign.getBloodPressureIsNotNull() && voVitalSign.getBloodPressure().getBPSittingSysIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getBloodPressure().getBPSittingSys().intValue(), OBSType.SYSTOLICBP, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Systolic Blood Pressure  ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getBloodPressureIsNotNull() && voVitalSign.getBloodPressure().getBPLyingSysIsNotNull()) 
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getBloodPressure().getBPLyingSys().intValue(), OBSType.SYSTOLICBP, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Systolic Blood Pressure  ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getBloodPressureIsNotNull() && voVitalSign.getBloodPressure().getBPStandingSysIsNotNull()) 
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getBloodPressure().getBPStandingSys().intValue(), OBSType.SYSTOLICBP, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Systolic Blood Pressure  ");
				originsOfScore.append(scoreText);
				}
		}
		
		if (voVitalSign.getRespiratoryIsNotNull() && voVitalSign.getRespiratory().getRespRateIsNotNull())  //WDEV-21004
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getRespiratory().getRespRate().intValue(), OBSType.RESPIRATORYRATE, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Respiratory Rate        ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getPulseIsNotNull() && voVitalSign.getPulse().getPulseRateRadialIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getPulse().getPulseRateRadial().intValue(), OBSType.PULSE, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Heart Rate                         ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getOxygenSaturationIsNotNull() && voVitalSign.getOxygenSaturation().getOxygenSaturationLevelIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getOxygenSaturation().getOxygenSaturationLevel(), OBSType.OXYGENSATS, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Oxygen Saturation             ");
				originsOfScore.append(scoreText);
			}
		}

		//WDEV-23043
		if (form.getLocalContext().getSecsRecord() != null && OBSProtocolType.NEWS.equals(form.getLocalContext().getSecsRecord().getOBSProtocolType()))
		{
			String scoreText = null;
			
			scoreText = getEscalationScoreText(voVitalSign.getOxygenSaturation() != null && Boolean.TRUE.equals(voVitalSign.getOxygenSaturation().getIsOnFiO2()) ? YesNo.YES.getID() : YesNo.NO.getID(), OBSType.ONSUPPLEMENTALOXYGEN, voCollConfig, -1, -1);

			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("On Supplemental Oxygen             ");
				originsOfScore.append(scoreText);

			}
		}
		
		if (voVitalSign.getOxygenSaturationIsNotNull() && voVitalSign.getOxygenSaturation().getFractionRateIsNotNull()) 
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getOxygenSaturation().getFractionRate(), OBSType.FILTEREDO2, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Filtered O2             ");
				originsOfScore.append(scoreText);
			}
		}
		
		if (voVitalSign.getPatientCausingConcernIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getPatientCausingConcern().getID(), OBSType.PATIENT_CONCERN, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Patient Causing Concern            ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getPatientConsciousIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getPatientConscious().getID(), OBSType.CONSCIOUS_LEVEL, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Conscious Level            ");
				originsOfScore.append(scoreText);
			}
		}

		if (voVitalSign.getUrine2mlkgkhrIsNotNull())
		{
			String scoreText = null;
			scoreText = getEscalationScoreText(voVitalSign.getUrine2mlkgkhr().getID(), OBSType.URINE_OUTPUT, voCollConfig, -1, -1);
			if (!scoreText.equals(""))
			{
				if (!originsOfScore.equals(""))
					originsOfScore.append("\n");
				originsOfScore.append("Urine output            ");
				originsOfScore.append(scoreText);
			}
		}

		form.getGlobalContext().Core.setVitalSignsEscalationText(originsOfScore.toString());
		if (form.getGlobalContext().Core.getVitalSignsEscalationScoreIsNotNull())
		{
			if (form.getLocalContext().getSecsRecordIsNotNull() && form.getLocalContext().getSecsRecord().getEWSTriggerScoreIsNotNull())
			{
				if (Integer.valueOf(form.getGlobalContext().Core.getVitalSignsEscalationScore()) >= form.getLocalContext().getSecsRecord().getEWSTriggerScore())
				{
					return true;
				}
			}
		}

		if (bOXYTriggered)
			return true;
		
		return false;
	}

	/**
	 * takes a value and checks the type against the configuration and
	 * increments score if the value is outside configured values
	 * 
	 * @param value
	 *            (doubles also as id of lookup selected for the lookup config
	 *            items)
	 * @param type
	 * @param voCollConfig
	 * @param fractionRate
	 * @return scoreText
	 */
	private String getEscalationScoreText(int value, OBSType type, SECSConfigurationVoCollection voCollConfig, int fractionRate, float tempValue) //WDEV-21004
	{
		StringBuffer scoreText = new StringBuffer();

		int iScore = 0;

		String score = form.getGlobalContext().Core.getVitalSignsEscalationScore();

		if (score != null)
			iScore = Integer.valueOf(score);

		for (int i = 0; i < voCollConfig.size(); i++)
		{
			if (voCollConfig.get(i).getType().equals(type))
			{
				if (isRange(type))
				{
					if (voCollConfig.get(i).getRangeConfigIsNotNull() && voCollConfig.get(i).getRangeConfig().getRangeScoresIsNotNull())
					{
						for (int p = 0; p < voCollConfig.get(i).getRangeConfig().getRangeScores().size(); p++)
						{
							SECSRangeScoreVo voRangeScore = voCollConfig.get(i).getRangeConfig().getRangeScores().get(p);

							if (type.equals(OBSType.TEMPERATURE))
							{
								if (voRangeScore.getGreaterThanDecValueIsNotNull())
								{
									if (voRangeScore.getLessThanDecValueIsNotNull())
									{
										if (tempValue >= voRangeScore.getGreaterThanDecValue().floatValue() && tempValue <= voRangeScore.getLessThanDecValue().floatValue())
										{
											iScore += voRangeScore.getScore();
											//http://jira/browse/WDEV-22399
//											scoreText.append(" > " + voRangeScore.getGreaterThanDecValue() + " < " + voRangeScore.getLessThanDecValue());
											scoreText.append(" >= " + voRangeScore.getGreaterThanDecValue() + " <= " + voRangeScore.getLessThanDecValue()); //WDEV-22399
										}
									}
									else if (tempValue >= voRangeScore.getGreaterThanDecValue().floatValue())
									{
										iScore += voRangeScore.getScore();
										//http://jira/browse/WDEV-22399
//										scoreText.append(" > " + voRangeScore.getGreaterThanDecValue());
										scoreText.append(" >= " + voRangeScore.getGreaterThanDecValue()); //WDEV-22399
									}
								}
								else if (voRangeScore.getLessThanDecValueIsNotNull())
								{
									if (voRangeScore.getGreaterThanDecValueIsNotNull())
									{
										if (tempValue <= voRangeScore.getLessThanDecValue().floatValue() && tempValue >= voRangeScore.getGreaterThanDecValue().floatValue())
										{
											iScore += voRangeScore.getScore();
											//http://jira/browse/WDEV-22399
//											scoreText.append(" < " + voRangeScore.getLessThanDecValue() + " > " + voRangeScore.getGreaterThanDecValue());
											scoreText.append(" <= " + voRangeScore.getLessThanDecValue() + " >= " + voRangeScore.getGreaterThanDecValue()); //WDEV-22399
										}
									}
									else if (tempValue <= voRangeScore.getLessThanDecValue().floatValue())
									{
										iScore += voRangeScore.getScore();
										//http://jira/browse/WDEV-22399
//										scoreText.append(" < " + voRangeScore.getLessThanDecValue());
										scoreText.append(" <= " + voRangeScore.getLessThanDecValue()); //WDEV-22399
									}
								}
							}
							else if (voRangeScore.getGreaterThanIntValueIsNotNull())
							{
								if (voRangeScore.getLessThanIntValueIsNotNull())
								{
									if (value >= voRangeScore.getGreaterThanIntValue().intValue() && value <= voRangeScore.getLessThanIntValue().intValue())
									{
										iScore += voRangeScore.getScore();
										//http://jira/browse/WDEV-22399
//										scoreText.append(" > " + voRangeScore.getGreaterThanIntValue() + " < " + voRangeScore.getLessThanIntValue());
										scoreText.append(" >= " + voRangeScore.getGreaterThanIntValue() + " <= " + voRangeScore.getLessThanIntValue()); //WDEV-22399
									}
								}
								else if (value >= voRangeScore.getGreaterThanIntValue().intValue())
								{
									iScore += voRangeScore.getScore();
									//http://jira/browse/WDEV-22399
//									scoreText.append(" > " + voRangeScore.getGreaterThanIntValue());
									scoreText.append(" >= " + voRangeScore.getGreaterThanIntValue()); //WDEV-22399
								}
							}

							else if (voRangeScore.getLessThanIntValueIsNotNull())
							{
								if (voRangeScore.getGreaterThanIntValueIsNotNull())
								{
									if (value <= voRangeScore.getLessThanIntValue().intValue() && value >= voRangeScore.getGreaterThanIntValue().intValue())
									{
										iScore += voRangeScore.getScore();
										//http://jira/browse/WDEV-22399
//										scoreText.append(" < " + voRangeScore.getLessThanIntValue() + " > " + voRangeScore.getGreaterThanIntValue());
										scoreText.append(" <= " + voRangeScore.getLessThanIntValue() + " >= " + voRangeScore.getGreaterThanIntValue()); //WDEV-22399
									}
								}
								else if (value <= voRangeScore.getLessThanIntValue().intValue())
								{
									iScore += voRangeScore.getScore();
									//http://jira/browse/WDEV-22399
//									scoreText.append(" < " + voRangeScore.getLessThanIntValue());
									scoreText.append(" <= " + voRangeScore.getLessThanIntValue()); //WDEV-22399
								}
							}
						}
					}
				}
				else if (isScore(type))
				{
					if (voCollConfig.get(i).getLookupConfigIsNotNull() && voCollConfig.get(i).getLookupConfig().getLookupScoresIsNotNull())
					{
						for (int p = 0; p < voCollConfig.get(i).getLookupConfig().getLookupScores().size(); p++)
						{
							SECSLookupScoreVo voLookupScore = voCollConfig.get(i).getLookupConfig().getLookupScores().get(p);
							if (value == voLookupScore.getLookupInstance().getID())
							{
								iScore += voLookupScore.getScore();
								scoreText.append(" " + voLookupScore.toString());
							}
						}
					}
				}
			}
		}

		form.getGlobalContext().Core.setVitalSignsEscalationScore(String.valueOf(iScore));

		return scoreText.toString();

	}

	private boolean isRange(OBSType value)
	{
		return value != null && (value.equals(OBSType.PULSE) || value.equals(OBSType.RESPIRATORYRATE) || value.equals(OBSType.SYSTOLICBP) || value.equals(OBSType.TEMPERATURE) || value.equals(OBSType.OXYGENSATS) || value.equals(OBSType.FILTEREDO2)); //WDEV-21004
	}

	private boolean isScore(OBSType value)
	{
		return value != null && (value.equals(OBSType.PATIENT_CONCERN) || value.equals(OBSType.URINE_OUTPUT) || value.equals(OBSType.CONSCIOUS_LEVEL) || value.equals(OBSType.ONSUPPLEMENTALOXYGEN));
	}

	
	VSSnellen retrieveCodeFromText(String text)
	{
		VSSnellenCollection coll = LookupHelper.getVSSnellen(domain.getLookupService());
		VSSnellen type = null;

		for (int i = 0; i < coll.size(); i++)
		{
			type = coll.get(i);
			if (type.getText().equals(text))
				break;
		}

		return type;
	}
	private void refresh() throws PresentationLogicException
	{
		clearScreen();
		listVitalSigns();
	}

	protected void onLnkTemperatureClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsTemperature);
	}

	protected void onLnkPulseClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsPulse);
	}

	protected void onLnkMetricsClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsMetrics);
	}

	protected void onLnkPeakFlowClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsPeakFlow);
	}

	protected void onLnkOxygenSaturationClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsOxygenSaturation);
	}

	protected void onLnkRespirationsClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsRespiration);
	}

	protected void onLnkBloodPresureClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsBP);
	}

	protected void onLnkGCSClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsGCS);
	}

	protected void onLnkPupilsClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsPupils);
	}

	protected void onLnkVisualAcuityClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsVisualAcuity);
	}

	protected void onLnkBMIClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsBMI);
	}

	protected void onCmbEyeOpeningValueChanged() throws PresentationLogicException
	{
		if (form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().getValue() == null)
			return;

		if (form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().getValue() == null)
			return;

		if (form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().getValue() == null)
			return;

		form.lyrVital().tabPageOtherVitalSigns().intGCS().setValue(new Integer(form.lyrVital().tabPageOtherVitalSigns().cmbEyeOpening().getValue().intValue() + form.lyrVital().tabPageOtherVitalSigns().cmbMResponse().getValue().intValue() + form.lyrVital().tabPageOtherVitalSigns().cmbVResponse().getValue().intValue()));
	}

	private Float bodySurfaceArea(float height/* cm */, float weight/* kg */)
	{
		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (0.20247 * Math.pow(height / 100.0, 0.725) * Math.pow(weight, 0.425)));
	}

	private Float bodyMassIndex(float height/* cm */, float weight/* kg */)
	{
		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (weight / (height / 100.0 * height / 100.0)));
	}

	protected void onCmbMResponseValueChanged() throws PresentationLogicException
	{
		onCmbEyeOpeningValueChanged();
	}

	protected void onCmbVResponseValueChanged() throws PresentationLogicException
	{
		onCmbEyeOpeningValueChanged();
	}
	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			arrAllErrors = new String[screenErrors.size()];

			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);
		}

		return arrAllErrors;
	}

	protected void onLnkCBGMClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsBloodSugar);

	}

	protected void onLnkPainLadderClick() throws PresentationLogicException
	{
		//Core.VitalSignsBaselineAndAll, ID: 102341
		form.getGlobalContext().Core.setIdForm(102341);
		engine.open(form.getForms().Core.VitalSignsPainLadder);

	}
			
	private void updateControlState()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyrVital().tabPageBaseline().intFractionRate().setEnabled(form.lyrVital().tabPageBaseline().chkonFiO2().getValue());
			if (form.lyrVital().tabPageBaseline().chkonFiO2().getValue() == false)
				form.lyrVital().tabPageBaseline().intFractionRate().setValue(null);
			
			form.lyrVital().tabPageBaseline().btnBMI().setEnabled(true);
			form.dtimTaken().setEnabled(true);
			form.lyrVital().tabPageBaseline().cmbTimePeriod().setEnabled(true);
			form.lyrVital().tabPageBaseline().decPostValue().setEnabled(true);
			form.lyrVital().tabPageBaseline().decValue().setEnabled(true);
			form.lyrVital().tabPageBaseline().intInterval().setEnabled(true);
		}
		else
		{
			form.btnNew().setEnabled(true);
			form.btnNew().setVisible(true);
			form.btnEdit().setEnabled(true);
			form.btnEdit().setVisible(form.recbrHistory().getValues().size() > 0);
		}
		
		if(ConfigFlag.UI.USE_EARLY_WARNING_SYSTEM.getValue())
		{
			form.lyrVital().tabPageOtherVitalSigns().cmbConscious().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrVital().tabPageOtherVitalSigns().cmbPatientConcern().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyrVital().tabPageOtherVitalSigns().cmbUrine().setEnabled(form.getMode().equals(FormMode.EDIT));
		}
		form.lyrVital().tabPageBaseline().intBPStandingDiastolic().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.lyrVital().tabPageBaseline().intBPStandingSystolic().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		//WDEV-20327
		form.lyrVital().tabPageBaseline().lblUlnaUnit().setVisible(FormMode.EDIT.equals(form.getMode()) && ims.configuration.gen.ConfigFlag.DOM.USE_ULNA_TO_ESTIMATE_PATIENT_HEIGHT.getValue());
		form.lyrVital().tabPageBaseline().lblUlna().setVisible(FormMode.EDIT.equals(form.getMode()) && ims.configuration.gen.ConfigFlag.DOM.USE_ULNA_TO_ESTIMATE_PATIENT_HEIGHT.getValue());
		form.lyrVital().tabPageBaseline().decUlna().setVisible(FormMode.EDIT.equals(form.getMode()) && ims.configuration.gen.ConfigFlag.DOM.USE_ULNA_TO_ESTIMATE_PATIENT_HEIGHT.getValue());
		form.lyrVital().tabPageBaseline().btnCalculateULNA().setVisible(FormMode.EDIT.equals(form.getMode()) && ims.configuration.gen.ConfigFlag.DOM.USE_ULNA_TO_ESTIMATE_PATIENT_HEIGHT.getValue());
		
		Integer patAge = form.getGlobalContext().Core.getPatientShort().getAge();
		Sex patSex = form.getGlobalContext().Core.getPatientShort().getSex();
	
		form.lyrVital().tabPageBaseline().decUlna().setEnabled(patAge != null && patSex != null && (patSex.equals(ims.core.vo.lookups.Sex.MALE) || patSex.equals(ims.core.vo.lookups.Sex.FEMALE)));
		form.lyrVital().tabPageBaseline().btnCalculateULNA().setEnabled(patAge != null && patSex != null && (patSex.equals(ims.core.vo.lookups.Sex.MALE) || patSex.equals(ims.core.vo.lookups.Sex.FEMALE)));
		
	}

	protected void onChkonFiO2ValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	

	private void saveEWS()
	{
		PatientEWSVo voPatEws = new PatientEWSVo();
		
		voPatEws.setPatientAssessment(form.getGlobalContext().Core.getPatientAssessmentFull());
		voPatEws.setVitalSign(form.getGlobalContext().Core.getVitalSign());
		voPatEws.setSECSScore(form.getGlobalContext().Core.getVitalSignsEscalationScoreIsNotNull() ? new Integer(form.getGlobalContext().Core.getVitalSignsEscalationScore()) : null);
		voPatEws.setScoreDetails(form.getGlobalContext().Core.getVitalSignsEscalationText());
		voPatEws.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		domain.savePatientEws(voPatEws);
	}

	
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getNEWSMessageId() != null && form.getLocalContext().getNEWSMessageId().equals(messageBoxId) && DialogResult.NO.equals(result))
		{
    		engine.open(form.getForms().Core.UnrecordedObservationsReason);
		}
		
	}
	
	protected void onBtnBMIClick() throws PresentationLogicException 
	{
		if (form.lyrVital().tabPageBaseline().decHeight().getValue() == null || form.lyrVital().tabPageBaseline().decWeight().getValue() == null) 
		{
			engine.showMessage("Please enter both Height and Weight for Metrics", "Error calculate BMI", MessageButtons.OK);
			return;
		}
		else
		{
			if ((form.lyrVital().tabPageBaseline().decHeight().getValue() == 0 || form.lyrVital().tabPageBaseline().decHeight().getValue() < 1) ||
					(form.lyrVital().tabPageBaseline().decWeight().getValue() == 0 || form.lyrVital().tabPageBaseline().decWeight().getValue() < 0))
			{
				engine.showMessage("A non-zero and greather than 1 value needs to be specified for Height and Weight", "Error calculate BMI", MessageButtons.OK);
				return;
			}
		}
					
		form.lyrVital().tabPageBaseline().decBMI().setValue(bodyMassIndex(form.lyrVital().tabPageBaseline().decHeight().getValue().floatValue(), form.lyrVital().tabPageBaseline().decWeight().getValue().floatValue()));		
		
		
	}
	
	//WDEV-20327
	@Override
	protected void onBtnCalculateULNAClick() throws PresentationLogicException
	{
		if (form.lyrVital().tabPageBaseline().decHeight().getValue()!=null)
		{
			engine.showMessage("A value for Height already exist.\nHeight field should be empty to be able to calculate it using ULNA radius.");
			form.lyrVital().tabPageBaseline().decUlna().setValue(null);
			return;
		}
		
		if (form.lyrVital().tabPageBaseline().decUlna().getValue() == null)
		{
			engine.showMessage("Please enter the value for ULNA to calculate the Height");
			return;
		}

		Integer patAge = form.getGlobalContext().Core.getPatientShort().getAge();
		Sex patSex = form.getGlobalContext().Core.getPatientShort().getSex();

		if (patAge != null && patSex != null && (patSex.equals(ims.core.vo.lookups.Sex.MALE) || patSex.equals(ims.core.vo.lookups.Sex.FEMALE)))
		{
			Float heights = domain.getHeight(form.lyrVital().tabPageBaseline().decUlna().getValue().toString(), patAge, patSex);

			if (heights == null)
			{
				engine.showMessage("Please enter a valid value for ULNA");
				return;
			}

			form.lyrVital().tabPageBaseline().decHeight().setValue(heights);

		}
		else
		{
			engine.showMessage("When calculating the Height using ULNA radius the patient age and sex are mandatory!");
		}

	}

	
	
}
