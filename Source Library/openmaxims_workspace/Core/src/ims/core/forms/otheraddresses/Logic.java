//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.38 build 2144.16652)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.otheraddresses;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;

import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsQuery;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.ChannelType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initalize();
	}
		
	private void initalize() 
	{
		//update local context
		if (form.getGlobalContext().Core.getOtherAddressesIsNotNull())
		{
			//WDEV-22162 - because of cloning we need a way to identify an address instance within two collections
			//PersonAddress.AddressSearchTxt is not a DB field
			int key = 1;
			for(PersonAddress pa : form.getGlobalContext().Core.getOtherAddresses())
			{
				pa.setAddressSearchTxt(String.valueOf(key));
			}
			
			PersonAddressCollection coll = (ims.core.vo.PersonAddressCollection)form.getGlobalContext().Core.getOtherAddresses().clone();
			PersonAddressCollection collNonHistorical = new PersonAddressCollection();
			for(int i=0; i<coll.size(); i++)
			{
				if(coll.get(i).getAddressType()!=null && !coll.get(i).getAddressType().equals(AddressType.HISTORICAL))
					collNonHistorical.add(coll.get(i));
			}
			form.getLocalContext().setpersonAddressCol(collNonHistorical);
		
		}
		else
			form.getLocalContext().setpersonAddressCol(null);

		if (form.getLocalContext().getpersonAddressColIsNotNull() && form.getLocalContext().getpersonAddressCol().size() > 0)
		{			
			for(PersonAddress pa:form.getLocalContext().getpersonAddressCol())
			{
				if(pa.getAddressType()!=null && !pa.getAddressType().equals(AddressType.HISTORICAL))//WDEV-13009 exclude Historical addresses
				{
					form.recbrAddress().newRow(pa, pa.getLine1IsNotNull()?pa.getLine1():"");
					form.recbrAddress().setValue(pa);
					form.recbrAddress().setEnabled(true);
				}
				else if(pa.getAddressType()==null)
				{
					form.recbrAddress().newRow(pa, pa.getLine1IsNotNull()?pa.getLine1():"");
					form.recbrAddress().setValue(pa);
					form.recbrAddress().setEnabled(true);
				}
			}
		}
		form.cmbAddressType().removeRow(AddressType.NOKHOME);	
		//WDEV-17700 ---- remove non relevant fields
		form.cmbAddressType().removeRow(AddressType.LOC_SITE);
		form.cmbAddressType().removeRow(AddressType.LOCATION);
		form.cmbAddressType().removeRow(AddressType.ORGANISATION);
		form.cmbAddressType().removeRow(AddressType.PRACTICE);
		form.cmbAddressType().removeRow(AddressType.SURGERY);
		//WDEV-17700 ---- end 
		
		form.cmbAddressType().removeRow(AddressType.HISTORICAL);//WDEV-13009 exclude Historical type	
		populateScreenFromData(form.recbrAddress().getValue());

		form.btnClear().setVisible(true);
		form.btnNew().setVisible(true);
		form.btnUpdate().setVisible(true);
		form.btnOK().setVisible(true);

		form.ccEffectiveDates().setDateFromRequired(!isSVUH());

		form.ccEffectiveDates().showDates(!isSVUH());		
		
		form.setMode(FormMode.VIEW);	
	}

	protected void onFormModeChanged()
	{				
		// Unless using local patient registration, this form should go to view mode only
		if ((!ims.configuration.gen.ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue()))
		{
			form.ccAddress().setEnabled(false);
			form.cmbAddressType().setEnabled(false);			
			form.txtOtherPhone().setEnabled(false);			
			form.btnNew().setVisible(false);
			form.ccEffectiveDates().setEnabled(false);
			form.btnUpdate().setVisible(false);
			form.recbrAddress().setEnabled(true);
			form.btnOK().setVisible(false);
			form.btnClear().setVisible(false);//WDEV-14367
			form.btnRemove().setVisible(false);//WDEV-22156
		}
		else
		{
			form.ccAddress().setComponentEnabled(form.getMode().equals(FormMode.EDIT));			
			form.cmbAddressType().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.txtOtherPhone().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.ccEffectiveDates().setEnabled(form.getMode().equals(FormMode.EDIT));
			
			if (form.getLocalContext().getpersonAddressColIsNotNull())
			{
				if (form.getLocalContext().getpersonAddressCol().size()< ConfigFlag.UI.MAXIMUM_NUMBER_OF_OTHERADDRESSES.getValue())
					form.btnNew().setVisible(true);
				else
					form.btnNew().setVisible(false);
			}
			form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW));
			form.btnUpdate().setVisible(true);
			form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW) && form.recbrAddress().getValue() != null);

			//WDEV-22156
			form.btnRemove().setVisible(true);
			form.btnRemove().setEnabled(form.getMode().equals(FormMode.VIEW) && form.recbrAddress().getValue() != null);
			
			if (ConfigFlag.UI.MAXIMUM_NUMBER_OF_OTHERADDRESSES.getValue() == 1)
				form.recbrAddress().setVisible(false);
			else
				form.recbrAddress().setEnabled(form.recbrAddress().getValue() != null);
				
			form.btnOK().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.btnClear().setEnabled(form.getMode().equals(FormMode.EDIT));//WDEV-14367
		}			
		
		form.getLocalContext().setFieldsWereCleared(Boolean.FALSE);
		
		//WDEV-14613
		//WDEV-19443
		if ((engine.getPreviousNonDialogFormName().equals(form.getForms().Core.Demographics) || engine.getPreviousNonDialogFormName().equals(form.getForms().Core.PDSDemographics) || engine.getParentDialogFormName().equals(form.getForms().Core.DemographicsDialog))
				&& form.getGlobalContext().Core.getParentFormModeIsNotNull()
				&& form.getGlobalContext().Core.getParentFormMode().equals(FormMode.VIEW))
		{
			form.btnClear().setVisible(false);
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
			form.btnOK().setVisible(false);
			form.btnRemove().setVisible(false);
		}

		form.btnCancel().setEnabled(true);
	}
	
	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if(form.ccAddress().getValue() == null || form.ccAddress().getValue().getLine1() == null || form.ccAddress().getValue().getLine1().equals(""))
			errors.add("Address Line 1 is a mandatory field");				
				
		if (form.cmbAddressType().getValue() == null)
			errors.add("Address Type is a mandatory field");
		
		//WDEV-22492
		Date dateFrom = form.ccEffectiveDates().getDateFrom();
		Date dateTo = form.ccEffectiveDates().getDateTo();
		
		if(dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
			errors.add("'Effective date to' must be less than 'Effective date from' !");
		//WDEV-22492

		if(dateFrom == null && form.ccEffectiveDates().isDateFromRequired())
			errors.add("'Effective date from' is mandatory !");
		
		//WDEV-22150
		PdsQuery query = new PdsQuery(null);
		AddressType at = query.getAddressTypeByPdsMapping("H");

		boolean newRecord = form.getLocalContext().getaddressIndex() != null && form.getLocalContext().getaddressIndex() == -1;
		
		if(at != null)
		{
			if(at.equals(form.cmbAddressType().getValue()) && newRecord)
			{
				errors.add("The patient can have a single address of type '" + at.getText() + "' !");
			}
			else if(form.recbrAddress().getValues() != null)
			{
				for(int i = 0; i < form.recbrAddress().getValues().size(); i++)
				{
					PersonAddress a = (PersonAddress) form.recbrAddress().getValues().get(i);
					
					if(at.equals(a.getAddressType()) && a.getObjectidentifier() == null)
					{
						errors.add("The patient can have a single address of type '" + at.getText() + "' !");
						break;
					}
				}
			}
		}
		
		if(dateFrom != null)
		{
    		//WDEV-22162 - we need to check whether the addresses of the same type don't overlap the business effective dates
    		PersonAddressCollection addresses = form.getGlobalContext().Core.getOtherAddresses();
    		PersonAddressCollection coll = new PersonAddressCollection();	
    		HashMap<AddressType, PersonAddressCollection> map = new HashMap<AddressType, PersonAddressCollection>();
    
    		if(addresses != null)
    		{
        		for(PersonAddress pa : addresses)
        			coll.add(pa);
    		}
    		
    		int nIndex = -1;
    		if (form.getLocalContext().getaddressIndex() != -1)
    		{
    			for (int i = 0 ; i < coll.size() ; i++)
    			{
    				if (coll.get(i).equals(form.getLocalContext().getpersonAddress()))
    					nIndex = i;
    			}
    		}
    
    		PersonAddress editedAddress = populateDataFromScreen();
    		
    		if (form.getLocalContext().getaddressIndex() != -1) 
    			coll.set(nIndex  != -1 ?  nIndex : form.getLocalContext().getaddressIndex(), editedAddress);
    		else
    			coll.add(editedAddress);
    		
    		//build the map for each address type
    		for(int i = 0; i < coll.size(); i++)
    		{
    			at = coll.get(i).getAddressType();
    			
    			if(at != null)
    			{
    				if(map.containsKey(at))
    				{
    					map.get(at).add(coll.get(i));
    				}
    				else
    				{
    					PersonAddressCollection pc = new PersonAddressCollection();
    					
    					pc.add(coll.get(i));
    					map.put(at, pc);
    				}
    			}
    		}
    		
    		//sort each address collection from the map by BEF date 
    		for(AddressType key : map.keySet())
    		{
    			map.get(key).sort(new BEDComparator(SortOrder.ASCENDING));
    		}
    
    		//now within each collection check whether business effective dates don't overlap 
    		PersonAddressCollection pacWithBET = new PersonAddressCollection();
    		PersonAddressCollection prevBEF = new PersonAddressCollection();
    		
    		for(AddressType key : map.keySet())
    		{
    			coll = map.get(key);
    			
    			//we only need to check against BET dates
    			pacWithBET.clear();
    			prevBEF.clear();
    			for(int i = 0; i < coll.size(); i++)
    			{
    				for(int j = 0; j < pacWithBET.size(); j++)
    				{
    					if(coll.get(i).getBeffdateIsNotNull() && coll.get(i).getBeffdate().isLessThan(pacWithBET.get(j).getBetdate()))
    					{
    						errors.add("The following addresses of type '" + key.getText() + "' overlap each other: \r\n" + 
    								getOverlapIntervalAsText(pacWithBET.get(j).getBeffdate(), pacWithBET.get(j).getBetdate(), coll.get(i).getBeffdate(), coll.get(i).getBetdate()) + " !");
    					}
    				}

    				//checks for start interval (BEFF date)
    				for(int j = 0; j < prevBEF.size(); j++)
    				{
    					if(coll.get(i).getBeffdateIsNotNull() && coll.get(i).getBeffdate().equals(prevBEF.get(j).getBeffdate()))
    					{
    						errors.add("The following addresses of type '" + key.getText() + "' overlap each other: \r\n" + 
    								getOverlapIntervalAsText(prevBEF.get(j).getBeffdate(), prevBEF.get(j).getBetdate(), coll.get(i).getBeffdate(), coll.get(i).getBetdate()) + " !");
    					}
    				}
    				
    				if(coll.get(i).getBetdateIsNotNull())
    					pacWithBET.add(coll.get(i));
    				
    				if(coll.get(i).getBeffdateIsNotNull())
    					prevBEF.add(coll.get(i));
    			}
    		}
		}
		
		if (errors.size() == 0)
			return null;
		
		String[] aErrors = new String[errors.size()];
		errors.toArray(aErrors);
		
		return aErrors;
	}
		
	private String getOverlapIntervalAsText(Date beffdate, Date betdate, Date beffdate2, Date betdate2)
	{
		StringBuilder sb = new StringBuilder();
		
		sb.append("[");
		sb.append(beffdate != null ? beffdate.toString() : "?");
		sb.append(" , ");
		sb.append(betdate != null ? betdate.toString() : "?");
		sb.append("] - [");
		sb.append(beffdate2 != null ? beffdate2.toString() : "?");
		sb.append(" , ");
		sb.append(betdate2 != null ? betdate2.toString() : "?");
		sb.append("]");
		
		return sb.toString();
	}

	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ccAddress().setRequireAdress(true);
			form.cmbAddressType().setRequired(true);
			
			if ( ! form.getLocalContext().getFieldsWereCleared()
				|| (form.getLocalContext().getFieldsWereCleared() && !AddressFieldsAreEmpty())
				|| (form.getLocalContext().getFieldsWereCleared() && form.txtOtherPhone().getValue() != null))
			{
				form.getLocalContext().setFieldsWereCleared(false);
				
				String[] errors = validateUIRules();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}
			}
			
			int nIndex = -1;
			if (form.getLocalContext().getaddressIndex() != -1)
			{
				for (int i = 0 ; i < form.getGlobalContext().Core.getOtherAddresses().size() ; i++)
				{
					if (form.getGlobalContext().Core.getOtherAddresses().get(i).equals(form.getLocalContext().getpersonAddress()))
						nIndex = i;
				}
			}
				
			if ( ! form.getLocalContext().getFieldsWereCleared())
			{
				populateDataFromScreen();
				//form.getLocalContext().getpersonAddress();
			}
			else if (form.getLocalContext().getpersonAddress()!=null) //WDEV-23248
			{
				form.getLocalContext().getpersonAddress().setAddressBuildingName("");
				form.getLocalContext().getpersonAddress().setAddressBuildingNumber("");
				form.getLocalContext().getpersonAddress().setAddressLocality("");
				form.getLocalContext().getpersonAddress().setAddressCounty("");
				form.getLocalContext().getpersonAddress().setAddressPostTown("");
				form.getLocalContext().getpersonAddress().setAddressStreet("");
				form.getLocalContext().getpersonAddress().setAddressLine5("");
				form.getLocalContext().getpersonAddress().setPostCode("");
				form.getLocalContext().getpersonAddress().setOtherphone("");
				form.getLocalContext().getpersonAddress().setPhone("");
				form.getLocalContext().getpersonAddress().setAddressType(null);
				form.getLocalContext().getpersonAddress().setAreaOfResidence(null); //WDEV-17700 
				form.getLocalContext().getpersonAddress().setCounty(null); //WDEV-17700 
			}
				
			if (form.getLocalContext().getaddressIndex() != -1) //FB
				form.getGlobalContext().Core.getOtherAddresses().set(nIndex  != -1 ?  nIndex : form.getLocalContext().getaddressIndex(), form.getLocalContext().getpersonAddress()); //WDEV-20042  - fixed IndexOutOfBoundsExc when nIndex had the value assigned on initialisation.
			else
			{
				//WDEV-14367 
				if (form.getGlobalContext().Core.getOtherAddresses()==null)
					form.getGlobalContext().Core.setOtherAddresses( new PersonAddressCollection());
				
				form.getGlobalContext().Core.getOtherAddresses().add(form.getLocalContext().getpersonAddress());
			}	
		}
		
		engine.close(DialogResult.OK);
	}
	//WDEV-14367 
	private boolean AddressFieldsAreEmpty() 
	{
		PersonAddress addressTemp = form.ccAddress().getValue();
		
		return addressTemp == null; //WDEV-17700
	}

	public PersonAddress populateDataFromScreen()
	{
		form.getLocalContext().setpersonAddress(form.ccAddress().getValue());
		
		if (form.getLocalContext().getpersonAddressIsNotNull()) //WDEV-23240
		{
			form.getLocalContext().getpersonAddress().setAddressType(form.cmbAddressType().getValue());
			form.getLocalContext().getpersonAddress().setOtherphone(form.txtOtherPhone().getValue());
		}
		
		//WDEV-22492
		PersonAddress addr = form.getLocalContext().getpersonAddress();
		if(addr != null)
		{
			Date dateFrom = form.ccEffectiveDates().getDateFrom();
			Date dateTo = form.ccEffectiveDates().getDateTo();
			
			if(dateFrom != null)
			{
				addr.setBeffdate(dateFrom);
				addr.setBeffdatecnf(Boolean.TRUE);
			}
			else
			{
				addr.setBeffdate(null);
				addr.setBeffdatecnf(Boolean.FALSE);
			}
			
			if(dateTo != null)
			{
				addr.setBetdate(dateTo);
				addr.setBetdatecnf(Boolean.TRUE);
			}
			else
			{
				addr.setBetdate(null);
				addr.setBetdatecnf(Boolean.FALSE);
			}
		}
		//WDEV-22492

		return form.getLocalContext().getpersonAddress();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onBtnNewClick() throws PresentationLogicException 
	{		
		clearScreen();
		
		form.recbrAddress().clear();//WDEV-14367
		
		form.setMode(FormMode.EDIT); //WDEV-14367
		
		//16179
		form.ccAddress().setRequireAdress(true);
		
		form.getLocalContext().setpersonAddress(new PersonAddress());
		form.getLocalContext().setaddressIndex(-1);		
		
		form.btnNew().setEnabled(false);
		form.btnUpdate().setEnabled(false);
		form.recbrAddress().setEnabled(false);
		
	//	form.cmbAddressType().setValue(AddressType.CORRESPONDENCE);
		form.cmbAddressType().setValue(null);//WDEV-14188
		form.cmbAddressType().removeRow(AddressType.NOKHOME);
		form.cmbAddressType().removeRow(AddressType.HISTORICAL);//WDEV-13009 exclude Historical type
		
		form.cmbAddressType().setRequired(true);
	}

	public void clearScreen()
	{
		//WDEV-14367
		form.ccAddress().setValue(null);
		form.ccAddress().clearscreen();
		
		//WDEV-14188
		form.cmbAddressType().setValue(null);

		form.txtOtherPhone().setValue(null);
		
		form.ccEffectiveDates().setEffectiveDates(null, null);
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		
		//16179
		form.ccAddress().setRequireAdress(true);
		
		form.getLocalContext().setpersonAddress((PersonAddress)form.recbrAddress().getValue().clone());
		form.getLocalContext().setaddressIndex(form.recbrAddress().getSelectedIndex());
		
		form.btnUpdate().setEnabled(false);
		form.btnNew().setEnabled(false);
		
		form.cmbAddressType().setRequired(true);
		
		//WDEV-22689
		PersonAddress pa = form.getLocalContext().getpersonAddress();
		if(pa != null && pa.getObjectidentifierIsNotNull())
			form.cmbAddressType().setEnabled(false);
		else
			form.cmbAddressType().setEnabled(true);
	}

	protected void onRecbrAddressValueChanged() throws PresentationLogicException 
	{
		populateScreenFromData(form.recbrAddress().getValue());		
	}
	
	public void populateScreenFromData(PersonAddress pa)
	{
		if (pa != null)
		{
			pa.setPhone(pa.getPhone());

			if (form.getGlobalContext().Core.getPatientShortIsNotNull()
				&& form.getGlobalContext().Core.getPatientShort().getCommChannelsIsNotNull()
				&& form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.GEN_PHONE) != null)
				pa.setPhone(form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.GEN_PHONE).getCommValue());
			
			form.ccAddress().setValue(pa);
			form.txtOtherPhone().setValue(pa.getOtherphone());
			form.cmbAddressType().setValue(pa.getAddressTypeIsNotNull()?pa.getAddressType():null);
			form.getLocalContext().setpersonAddress(pa);
			
			form.ccEffectiveDates().setEffectiveDates(pa.getBeffdate(), pa.getBetdate());
		}
		form.getLocalContext().setaddressIndex(form.recbrAddress().getSelectedIndex());
	}

	//WDEV-14367 
	protected void onBtnClearClick() throws PresentationLogicException 
	{
		form.ccAddress().clearscreen();
		form.ccAddress().setRequireAdress(false);
		form.txtOtherPhone().setValue(null);
		form.cmbAddressType().setRequired(false);
		form.cmbAddressType().setValue(null);
		form.ccEffectiveDates().setEffectiveDates(null, null); //WDEV-22882
		
		form.getLocalContext().setFieldsWereCleared(Boolean.TRUE);
	}

	@Override
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		PersonAddress addr = form.recbrAddress().getValue();
		
		if(addr != null)
		{
			ArrayList list = form.recbrAddress().getValues();
			PersonAddress pa;
			
			clearScreen();
			
			if(list != null)
			{
    			list.remove(form.recbrAddress().getSelectedIndex());
    			
    			form.recbrAddress().clear();
    			
    			for(int i = 0; i < list.size(); i++)
    			{
    				pa = (PersonAddress) list.get(i);
    				
        			form.recbrAddress().newRow(pa, pa.getLine1IsNotNull()?pa.getLine1():"");
        			form.recbrAddress().setValue(pa);
    			}
			}
			
			if(form.getGlobalContext().Core.getOtherAddressesIsNotNull())
			{
				for(PersonAddress a : form.getGlobalContext().Core.getOtherAddresses())
				{
					if(a.getAddressSearchTxtIsNotNull() && a.getAddressSearchTxt().equals(addr.getAddressSearchTxt()))
					{
						form.getGlobalContext().Core.getOtherAddresses().remove(a);
						break;
					}
				}
				
			}
			
			onFormModeChanged();
			
			if(form.recbrAddress().getValue() != null)
				populateScreenFromData(form.recbrAddress().getValue());	
		}
	}
	
	public class BEDComparator implements Comparator
	{
		private int direction = 1;
		
		public BEDComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public BEDComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date d1 = null;
			Date d2 = null;
			
			if(ob1 instanceof PersonAddress)
			{
				d1 = ((PersonAddress)ob1).getBeffdate();
			}

			if(ob2 instanceof PersonAddress)
			{
				d2 = ((PersonAddress)ob2).getBeffdate();
			}
			
			if(d1 != null )
				return  d1.compareTo(d2)*direction;
			
			if(d2 != null)
				return (-1)*direction;
			
			return 0;
		}
	}

	@Override
	protected void onBtnCopyClick() throws PresentationLogicException
	{
		doCopy();
	}

	private void doCopy()
	{
		if (form.getGlobalContext().Core.getNOKPersonAddressIsNotNull())
		{
			PersonAddress personAddress = (PersonAddress) form.getGlobalContext().Core.getNOKPersonAddress().clone();
		
    		personAddress.setPhone(form.getGlobalContext().Core.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE) !=null ? form.getGlobalContext().Core.getCommChannels().getCommunicationChannel(ChannelType.HOME_PHONE).getCommValue() : null);
    		form.ccAddress().setComponentEnabled(false);
    		form.ccAddress().setValue(personAddress);
    		form.ccAddress().setComponentEnabled(true);
		}
	}

	private boolean isSVUH()
	{
		return ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH");
	}
	
}
