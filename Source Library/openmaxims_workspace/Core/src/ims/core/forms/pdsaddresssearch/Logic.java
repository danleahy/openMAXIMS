//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdsaddresssearch;

import ims.admin.vo.PDSConfigurationVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.core.vo.GeoCoOrdVo;
import ims.core.vo.GpToPracticesVo;
import ims.core.vo.Patient;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.Country;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAddressProvider;
import ims.framework.utils.Date;
import ims.utils.textile.Textile;
import ims.vo.LookupInstVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	//wdev-19528
	private static final String ADDRESS1_DEMOGR 			= "DEM11";
	private static final String ADDRESS2_DEMOGR 			= "DEM12";
	private static final String ADDRESS3_DEMOGR 			= "DEM13";
	private static final String ADDRESS4_DEMOGR 			= "DEM14";
	private static final String ADDRESS5_DEMOGR 			= "DEM15";
	private static final String POST_CODE_DEMOGR 			= "DEM17";
	private static final String CCG_CODE_DEMOGR 			= "DEM18";
	//private static final String COUNTRY_DEMOGR 			= "DEM19";
	
	//WDEV-21848
//	private static final String PDS_LINE1					= "House:";
//	private static final String PDS_LINE2					= "Thoroughfare:";
	private static final String PDS_LINE1					= "House/Building:"; //WDEV-21848
	private static final String PDS_LINE2					= "No. + Street:"; //WDEV-21848
	private static final String PDS_LINE3					= "Locality:";
	private static final String PDS_LINE4					= "Post Town:";
	private static final String PDS_LINE5					= "County:";
	
	private static final Integer PDS_MAX_ADDR_LENGTH		= 35;
	//private static final Integer NON_PDS_MAX_ADDR_LENGTH	= 40;
	
	private static final int BUTTON_OTHER_ADDRESSES = 5; //WDEV-22900
	//----------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(isPds())
			form.btnViewOtherAddresses().setPostbackRequirePdsAuthentication(true);
		
		initialize();
		
		setPostCodeStatus();
	}

	private void initialize() 
	{
		//assume check boxes are visible implicitly
		form.getLocalContext().setCheckBoxesVisibility(Boolean.TRUE);
		
		//if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
		{			
			form.lblPostCode().setVisible(usePostCode());			
			form.txtPost().setVisible(usePostCode());
			
			//WDEV-23175
			// assume a valid postcide until changed
			form.getLocalContext().setpostcodeValidated(form.txtPost().getValue()!=null && !form.txtPost().getValue().equals("")); 

			//form.txtPost().setEnabled(false);
			//if (ConfigFlag.UI.DISPLAY_PCT_CODE.getValue())
			{
				form.lblPCTCode().setVisible(false);
				form.txtPctCode().setVisible(false);
				//form.txtPctCode().setEnabled(false);
			}
			/*
			else
			{
				form.lblPCTCode().setVisible(false);
				form.txtPctCode().setVisible(false);
				form.txtPctCode().setEnabled(false);				
			}
			*/
			form.lblSearch().setVisible(ConfigFlag.UI.CAPSCAN_ENABLED.getValue());
			form.txtAddressSearchText().setVisible(ConfigFlag.UI.CAPSCAN_ENABLED.getValue());			
			form.imbPostCodeSearch().setVisible(ConfigFlag.UI.CAPSCAN_ENABLED.getValue());			
			
			//wdev-19176
			form.txtAddress5().setVisible(true && !isSVUH());
			//----------
		}
		
		//if(isPds())
		{
			//form.txtAddress1().setRequired(true);
			//form.txtAddress2().setRequired(true);
			if(!isSVUH())
				form.txtAddress4().setRequired(true);
			form.txtPost().setRequired(true);

			//WDEV-21848
//			form.txtAddress1().setTooltip("House Name");
//			form.txtAddress2().setTooltip("House Number, (Dependent )Thoroughfare Name and Descriptor");form.getLocalContext().getaddressResult().getAddressBuildingName()
//			form.txtAddress3().setTooltip("(Dependent) Locality");
//			form.txtAddress4().setTooltip("Post Town");
//			form.txtAddress5().setTooltip("County");
			//WDEV-21848
			
			form.lblLine1().setValue(isSVUH() ? "Address:" : PDS_LINE1);
			form.lblLine2().setValue(isSVUH() ? "" : PDS_LINE2);
			form.lblLine3().setValue(isSVUH() ? "" : PDS_LINE3);
			form.lblLine4().setValue(isSVUH() ? "" : PDS_LINE4);
			form.lblLine5().setValue(isSVUH() ? "" : PDS_LINE5);

		}
		/*
		else
		{
			form.lblLine1().setValue("Address:");
			form.lblLine2().setValue(null);
			form.lblLine3().setValue(null);
			form.lblLine4().setValue(null);
			form.lblLine5().setValue(null);
		}
		*/
		
		boolean isSVUH = isSVUH();
		form.cmbAreaOfResidence().setVisible(isSVUH);
		form.cmbAreaOfResidence().setRequired(isSVUH);
		form.lblArea1().setVisible(isSVUH);
		form.lblArea2().setVisible(isSVUH);
		
		form.lblLine5().setVisible(!isSVUH);
		form.txtAddress5().setVisible(!isSVUH);
		
		form.ccEffectiveDates().showDates(!isSVUH);

		clearControl();		
	}

	private void clearControl() 
	{
		form.txtAddressSearchText().setValue("");
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.AddressSelection) && result.equals(DialogResult.OK))
		{
			//display selected personAddress from GC
			form.getLocalContext().setaddressResult(form.getGlobalContext().Core.getPersonAddress());
			
			Date dateFrom = form.ccEffectiveDates().getDateFrom();
			Date dateTo = form.ccEffectiveDates().getDateTo();
			displayAddress();
			setPostCodeStatus();
			form.ccEffectiveDates().setEffectiveDates(dateFrom, dateTo);
			
			//WDEV-23175
			form.getLocalContext().setpostcodeValidated(true);
		}
	}
		
	protected void displayAddress() 
	{
		/*
		//WDEV-15963
		boolean lbBuildingNameDisplayed = false;
		boolean lbBuildingNumberDisplayed = false;
		boolean lbPostTownDisplayed = false;
		boolean lbAddressStreetDisplayed = false;
		//WDEV-15963
		
		//WDEV-17696
		if (form.getMode().equals(FormMode.EDIT))
		{
			//display from local context
			if (form.getLocalContext().getaddressResult() != null)
			{
				if ((form.getLocalContext().getaddressResult().getAddressBuildingName() !=  null && !form.getLocalContext().getaddressResult().getAddressBuildingName().equals("")))
				{
					//address with building name
					if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
					{
						//WDEV-9025
						//WDEV-15963 
						//check length of address and display on available lines.						
						if (form.getLocalContext().getaddressResult().getOrganisationIsNotNull() && !form.getLocalContext().getaddressResult().getOrganisation().equals(""))
						{
							if (form.getLocalContext().getaddressResult().getOrganisation().length() 
									+ form.getLocalContext().getaddressResult().getAddressBuildingName().length() 
									<= ConfigFlag.DOM.HEARTS_ADDRESS_LINE_MAXLEN.getValue()) //including space and comma
							{
								lbBuildingNameDisplayed = true;
								form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getOrganisation() + "," + form.getLocalContext().getaddressResult().getAddressBuildingName());																
							}
							else
							{
								form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getOrganisation().substring(0, form.getLocalContext().getaddressResult().getOrganisation().length()<=30?form.getLocalContext().getaddressResult().getOrganisation().length():30));	
							}
						}
						else
						{
							form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());
							lbBuildingNameDisplayed = true;
						}

						if (lbBuildingNameDisplayed)
						{
							form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingNumber());
							lbBuildingNumberDisplayed = true;
						}
						else
						{
							if ((form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressBuildingNumber()).length() 
									<= ConfigFlag.DOM.HEARTS_ADDRESS_LINE_MAXLEN.getValue())
							{
								form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressBuildingNumber());
								lbBuildingNumberDisplayed = true;
							}
							else
							{
								form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());								
							}							
						}
						 
						String address3 = "";
						if (lbBuildingNumberDisplayed)
						{
							address3 += form.getLocalContext().getaddressResult().getAddressLocality() != null ? form.getLocalContext().getaddressResult().getAddressLocality() : "";
							address3 += form.getLocalContext().getaddressResult().getAddressPostTown() != null ? (address3.length() > 0 ? "," : "") + form.getLocalContext().getaddressResult().getAddressPostTown() : "";
							lbPostTownDisplayed = true;
						}
						else
						{
							address3 += form.getLocalContext().getaddressResult().getAddressBuildingNumber() + ",";
							address3 += form.getLocalContext().getaddressResult().getAddressLocality() != null ? form.getLocalContext().getaddressResult().getAddressLocality() : "";
							
							if ((address3 + form.getLocalContext().getaddressResult().getAddressPostTown()).length() <= ConfigFlag.DOM.HEARTS_ADDRESS_LINE_MAXLEN.getValue())
							{
								address3 += form.getLocalContext().getaddressResult().getAddressPostTown() != null ? (address3.length() > 0 ? "," : "") + form.getLocalContext().getaddressResult().getAddressPostTown() : "";
								lbPostTownDisplayed = true;
							}							
						}
						
						form.txtAddress3().setValue(address3);// 	WDEV-17432
						
						if (lbPostTownDisplayed)
							form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
						else
							form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressPostTown() != null ? 
									form.getLocalContext().getaddressResult().getAddressPostTown() + "," + form.getLocalContext().getaddressResult().getAddressCounty() : "" 
									+ form.getLocalContext().getaddressResult().getAddressCounty());
						
						//WDEV-15963
					}
					else
					{
						//WDEV-15963
						//check length of address and display on available lines.						
						if (form.getLocalContext().getaddressResult().getOrganisationIsNotNull() && !form.getLocalContext().getaddressResult().getOrganisation().equals(""))
						{
							if (form.getLocalContext().getaddressResult().getOrganisation().length() + form.getLocalContext().getaddressResult().getAddressBuildingName().length() 
									<= ConfigFlag.DOM.HEARTS_ADDRESS_LINE_MAXLEN.getValue())
							{
								lbBuildingNameDisplayed = true;
								form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getOrganisation() + "," + form.getLocalContext().getaddressResult().getAddressBuildingName());								
							}
							else
							{
								form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getOrganisation().substring(0, form.getLocalContext().getaddressResult().getOrganisation().length()<=30?form.getLocalContext().getaddressResult().getOrganisation().length():30));																
							}
						}
						else
						{
							form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());
							lbBuildingNameDisplayed = true;
						}

						if (form.getLocalContext().getaddressResult().getAddressStreet() != null && !form.getLocalContext().getaddressResult().getAddressStreet().equals(""))
						{
							if (form.getLocalContext().getaddressResult().getAddressLocality() != null && !form.getLocalContext().getaddressResult().getAddressLocality().equals(""))
							{
								//WDEV-15963
								if (lbBuildingNameDisplayed)
								{
									form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressStreet());
									lbBuildingNumberDisplayed = true; // at this point there will be no building number
								}
								else
								{
									//form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressStreet());
									if ((form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressStreet()).length() 
											<= ConfigFlag.DOM.HEARTS_ADDRESS_LINE_MAXLEN.getValue())
									{
										form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressBuildingNumber());
										lbBuildingNameDisplayed = true;
										lbBuildingNumberDisplayed = true;
									}
									else
									{
										form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());										
									}							
								}									
								//WDEV-15963
								
								if (!lbBuildingNumberDisplayed)
								{
									form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressBuildingNumber() + "," +
											form.getLocalContext().getaddressResult().getAddressLocality());
								}
								else
									form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressLocality());
								
								form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressPostTown());
								form.txtAddress5().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
								
							}
							else
							{
								//WDEV-15963
								if (lbBuildingNameDisplayed)
								{
									form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressStreet());
									lbBuildingNumberDisplayed = true;
								}
								else
								{
									//form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressStreet());
									if ((form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressStreet()).length() 
											<= ConfigFlag.DOM.HEARTS_ADDRESS_LINE_MAXLEN.getValue())
									{
										form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName() + "," + form.getLocalContext().getaddressResult().getAddressBuildingNumber());
										lbBuildingNameDisplayed = true;
										lbBuildingNumberDisplayed = true;
									}
									else
									{
										form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());										
									}																
								}
								//WDEV-15963
								
								if (!lbBuildingNumberDisplayed)
								{
									form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressBuildingNumber() + "," +
											form.getLocalContext().getaddressResult().getAddressPostTown());									
								}
								else
									form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressPostTown()!=null?form.getLocalContext().getaddressResult().getAddressPostTown():"");
								
								if (form.getLocalContext().getaddressResult().getAddressCounty() != null 
										&& !form.getLocalContext().getaddressResult().getAddressCounty().equals(form.getLocalContext().getaddressResult().getAddressPostTown()))// 	WDEV-17810
									form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
								else
									form.txtAddress4().setValue("");
								form.txtAddress5().setValue("");
							}
						}
						else
						{
							if (form.getLocalContext().getaddressResult().getAddressLocality() != null && !form.getLocalContext().getaddressResult().getAddressLocality().equals(""))
							{
								//WDEV-15963
								if (lbBuildingNameDisplayed)
									form.txtAddress2().setValue("");//WDEV-15211
								else
									form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());
								//WDEV-15963
																
								form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressLocality());
								form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressPostTown());
								form.txtAddress5().setValue(form.getLocalContext().getaddressResult().getAddressCounty());					
							}
							else
							{
								form.txtAddress2().setValue("");//WDEV-15211
								form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressPostTown());
								form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
								form.txtAddress5().setValue("");
							}					
						}
					}
				}
				else
				{					
					//WDEV-15963
					if (form.getLocalContext().getaddressResult().getOrganisationIsNotNull() 
							&& !form.getLocalContext().getaddressResult().getOrganisation().equals(""))
					{
						if ((form.getLocalContext().getaddressResult().getOrganisation() + "," + form.getLocalContext().getaddressResult().getAddressStreet()).length()
								<= ims.core.vo.PersonAddress.getLine1MaxLength())
						{
							form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getOrganisation() + "," 
								+ form.getLocalContext().getaddressResult().getAddressStreet());
							lbAddressStreetDisplayed = true;
						}
						else
						{
							form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getOrganisation().substring(0, form.getLocalContext().getaddressResult().getOrganisation().length() <= PersonAddress.getLine1MaxLength() ? form.getLocalContext().getaddressResult().getOrganisation().length() : PersonAddress.getLine1MaxLength()));
						}						
					}
					else
					{						
						form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getAddressStreet());
						lbAddressStreetDisplayed = true;
					}
					
					
					if (form.getLocalContext().getaddressResult().getAddressLocality() != null && !form.getLocalContext().getaddressResult().getAddressLocality().equals(""))
					{
						if (!lbAddressStreetDisplayed)
						{
							form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressStreet() + "," 
									+ form.getLocalContext().getaddressResult().getAddressLocality());
						}
						else
							form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressLocality());
						
						form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressPostTown());
						
						if (form.getLocalContext().getaddressResult().getAddressCounty() != null && !form.getLocalContext().getaddressResult().getAddressCounty().equals(form.getLocalContext().getaddressResult().getAddressPostTown()))
							form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
						else
							form.txtAddress4().setValue("");
						
						form.txtAddress5().setValue("");
					}
					else
					{
						form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressPostTown());
						form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
						form.txtAddress4().setValue("");
						form.txtAddress5().setValue("");
					}					
				}

				form.txtPost().setValue(form.getLocalContext().getaddressResult().getAddressPostCode());
				form.txtPctCode().setValue(form.getLocalContext().getaddressResult().getPCT());
				
				form.chkCareHome().setValue(form.getLocalContext().getaddressResult().getCareHome());
				form.chkNoFixed().setValue(form.getLocalContext().getaddressResult().getNoFixedAbode());
			}
		}
		else
		*/
		{
			//just display directly what was saved, i.e. no formatting
			form.txtAddress1().setValue(form.getLocalContext().getaddressResult().getAddressBuildingName());
			form.txtAddress2().setValue(form.getLocalContext().getaddressResult().getAddressBuildingNumber());
			form.txtAddress3().setValue(form.getLocalContext().getaddressResult().getAddressLocality());
			form.txtAddress4().setValue(form.getLocalContext().getaddressResult().getAddressPostTown());
			form.txtAddress5().setValue(form.getLocalContext().getaddressResult().getAddressCounty());
			form.txtPost().setValue(form.getLocalContext().getaddressResult().getAddressPostCode());			
			form.txtPctCode().setValue(form.getLocalContext().getaddressResult().getPCT());
			
			form.cmbCountry().setValue(form.getLocalContext().getaddressResult().getCountry());
			form.ccEffectiveDates().setEffectiveDates(form.getLocalContext().getaddressResult().getBeffdate(), form.getLocalContext().getaddressResult().getBetdate());

			form.chkCareHome().setValue(form.getLocalContext().getaddressResult().getCareHome());
			form.chkNoFixed().setValue(form.getLocalContext().getaddressResult().getNoFixedAbode());
			
			//boolean svuhMandatory = ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue() == true;
			//if(svuhMandatory)
			{
				form.cmbAreaOfResidence().setValue(form.getLocalContext().getaddressResult().getAreaOfResidence());
			}
			
			//WDEV-21848
			StringBuffer txtAddress1Tooltip = new StringBuffer();
			StringBuffer txtAddress2Tooltip = new StringBuffer();
			StringBuffer txtAddress3Tooltip = new StringBuffer();
			StringBuffer txtAddress4Tooltip = new StringBuffer();
			StringBuffer txtAddress5Tooltip = new StringBuffer();

			txtAddress1Tooltip.append("House/Building Name");
			if (form.getLocalContext().getaddressResult().getAddressBuildingName() != null)
			{
				txtAddress1Tooltip.append("<br><b>" + form.getLocalContext().getaddressResult().getAddressBuildingName() + "</b>");
			}
			form.txtAddress1().setTooltip(txtAddress1Tooltip.toString());

			txtAddress2Tooltip.append("House/Building No., Street Name and Descriptor");
			if (form.getLocalContext().getaddressResult().getAddressBuildingNumber() != null)
			{
				txtAddress2Tooltip.append("<br><b>" + form.getLocalContext().getaddressResult().getAddressBuildingNumber() + "</b>");
			}
			form.txtAddress2().setTooltip(txtAddress2Tooltip.toString());
			
			txtAddress3Tooltip.append("Locality");
			if (form.getLocalContext().getaddressResult().getAddressLocality() != null)
			{
				txtAddress3Tooltip.append("<br><b>" + form.getLocalContext().getaddressResult().getAddressLocality() + "</b>");
			}
			form.txtAddress3().setTooltip(txtAddress3Tooltip.toString());

			txtAddress4Tooltip.append("Post Town");
			if (form.getLocalContext().getaddressResult().getAddressPostTown() != null)
			{
				txtAddress4Tooltip.append("<br><b>" + form.getLocalContext().getaddressResult().getAddressPostTown() + "</b>");
			}
			form.txtAddress4().setTooltip(txtAddress4Tooltip.toString());

			txtAddress5Tooltip.append("County");
			if (form.getLocalContext().getaddressResult().getAddressCounty() != null)
			{
				txtAddress5Tooltip.append("<br><b>" + form.getLocalContext().getaddressResult().getAddressCounty() + "</b>");
			}
			form.txtAddress5().setTooltip(txtAddress5Tooltip.toString());
			//WDEV-21848

		}
	}
	private void displayPhone() 
	{
	}

	@Override
	protected void onFormModeChanged()
	{
		form.txtPost().setEnabled(form.getMode().equals(FormMode.EDIT));
		//form.txtPctCode().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.txtAddressSearchText().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.imbPostCodeSearch().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.txtAddressSearchText().setTooltip(FormMode.EDIT.equals(form.getMode()) ? "Enter a post code or keywords from the first or second line of the address" : null); //WDEV-17700
		
		form.ccEffectiveDates().setEnabled(form.getMode().equals(FormMode.EDIT));		
		
		//form.btnViewOtherAddresses().setVisible(true);
		
		form.chkCareHome().setVisible(form.getLocalContext().getCheckBoxesVisibility());
		form.chkNoFixed().setVisible(form.getLocalContext().getCheckBoxesVisibility());
		form.imbHistoricalAddresses().setVisible(form.getLocalContext().getCheckBoxesVisibility());
		
		//boolean svuhMandatory = ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue() == true;

		if(form.getMode().equals(FormMode.EDIT))
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getCheckBoxesVisibility()))
			{
				form.chkCareHome().setEnabled(true);
				form.chkNoFixed().setEnabled(true);
			}
			
			if(form.cmbAreaOfResidence().getVisible())
				form.cmbAreaOfResidence().setEnabled(true);
		}
		else
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getCheckBoxesVisibility()))
			{
				form.chkCareHome().setEnabled(false);
				form.chkNoFixed().setEnabled(false);
			}
			
			if(form.cmbAreaOfResidence().getVisible())
				form.cmbAreaOfResidence().setEnabled(false);
		}
	}
	
	@Override
	protected void onImbPostCodeSearchClick() throws PresentationLogicException 
	{
		// Address provider helper
		IAddressProvider l_addressprovider = engine.getAddressProvider();
		if(l_addressprovider == null)
			throw new PresentationLogicException("Please Configure Address Provider");

		PersonAddress personAddress = new PersonAddress();
		PersonAddress[] personAddressResult = new PersonAddress[0];
				
		//Funtionality
		//To initiate search, the user will use either the poscode field or an additional address search field located on the right of the poscode field
		//The poscode field will initiate a search of type POSTCODE
		//the additional address search field will initiate a search of type BROWSE with input ADDR
				
		try
		{			
			if (form.txtAddressSearchText().getValue() != null && !form.txtAddressSearchText().getValue().equals(""))
			{
				personAddress.setAddressSearchText(form.txtAddressSearchText().getValue());// search criteria comma delimited.
				form.getGlobalContext().Core.setAddressSearchType("SEARCH");
			}
			else
			{
				engine.showMessage("Please enter a post code or keywords from the first or second line of the address.");
				return;
			}
			personAddressResult = (PersonAddress[])l_addressprovider.getAddress(personAddress,form.getGlobalContext().Core.getAddressSearchType(),"",""); // return result or ambiglist
		}
		catch (PresentationLogicException pe)
		{
			engine.showMessage(pe.getMessage());
		}
		
		//fill out rest of address fields if somthing found
		if (personAddressResult != null && personAddressResult.length == 1)
		{
			//exact match
			form.getLocalContext().setaddressResult(personAddressResult[0]);
			Date dateFrom = form.ccEffectiveDates().getDateFrom();
			Date dateTo = form.ccEffectiveDates().getDateTo();
			displayAddress();
			setPostCodeStatus();
			form.ccEffectiveDates().setEffectiveDates(dateFrom, dateTo);
			//WDEV-23175
			form.getLocalContext().setpostcodeValidated(true);
		}
		else
		{
			form.getGlobalContext().Core.setAddressSearchText(form.txtAddressSearchText().getValue());
			form.getGlobalContext().Core.setPersonAddress(personAddress);
			engine.open(form.getForms().Core.AddressSelection);
		}						
	}
	//------------------- Component Interface methods ---------------------------
	
	public void setEnabled(Boolean value)
	{
		if (value != null)
		{			
			form.txtAddressSearchText().setEnabled(value);
			form.imbPostCodeSearch().setEnabled(value);
		}
	}
	
	public void setComponentEnabled(Boolean value)
	{
		if (Boolean.TRUE.equals(value))
		{
				form.setMode(FormMode.EDIT);
				form.txtAddressSearchText().setTooltip("Enter a post code or keywords from the first or second line of the address"); 
		}
			else if (Boolean.FALSE.equals(value))
		{
				form.setMode(FormMode.VIEW);
				form.txtAddressSearchText().setTooltip(null);
		}		
		
		form.txtAddress5().setEnabled(!isPds() && Boolean.TRUE.equals(value)); //WDEV-21385
		form.cmbCountry().setEnabled(isPds() && Boolean.TRUE.equals(value)); //WDEV-22180
	}

	public void isRequired(Boolean value) 
	{
		/*
		if (value != null)
		{
			if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
			{
				form.txtPost().setRequired(value);
				if (ConfigFlag.UI.DISPLAY_PCT_CODE.getValue())
				{
					//form.txtPctCode().setRequired(value);
				}
			}
			else if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
			{
				form.txtPost().setVisible(false);
				//form.txtPctCode().setVisible(false);
			}
			
			form.getLocalContext().setIsRequired(value);
		}
		*/
		
		form.getLocalContext().setIsRequired(value);
	}

	public void clearScreen()
	{
		form.txtAddressSearchText().setValue(null);
		form.ccEffectiveDates().clear();
		form.chkCareHome().setValue(null);
		form.chkNoFixed().setValue(null);
		form.cmbCountry().setValue(null);
		form.txtAddress1().setValue(null);
		form.txtAddress2().setValue(null);
		form.txtAddress3().setValue(null);
		form.txtAddress4().setValue(null);
		form.txtAddress5().setValue(null);
		form.txtPctCode().setValue(null);
		form.txtPost().setValue(null);
	}

	public String getError(String labelName) 
	{
		if (form.getLocalContext().getIsRequiredIsNotNull() && form.getLocalContext().getIsRequired())
		{
			if(labelName == null || (labelName != null && labelName.length() == 0))
			{
				labelName = "Post Code";
			}
			
			String label = labelName.charAt(labelName.length() - 1) == ' ' ? labelName : labelName + " ";
			
			if (form.txtAddressSearchText().getValue() == null)
				return new String(label + "is mandatory");
		}
		
		return null;
	}

	public void setValue(ims.core.vo.PersonAddress address) 
	{
		// fill patient address
		//WDEV-23175
		if (address == null)
		{
			address = new PersonAddress();
			form.getLocalContext().setpostcodeValidated(false);
		}
		else if (address.getPostCodeIsNotNull() && !address.getPostCode().equals(""))
			form.getLocalContext().setpostcodeValidated(true);
		//WDEV-23175
		
		form.getLocalContext().setaddressResult(address);
		form.getGlobalContext().Core.setPersonAddress(address);
		displayAddress();
		displayPhone();
		
		setPostCodeStatus();
	}
	
	public ims.core.vo.PersonAddress getValue() 
	{		
		if (form.getLocalContext().getaddressResultIsNotNull())
			return getlines((PersonAddress) form.getLocalContext().getaddressResult().clone());
		return null;		
	}
	
	private PersonAddress getlines(PersonAddress addressResult)
	{
		if (addressResult == null)
			return null;
		
		addressResult.setLine1((form.txtAddress1().getValue()));
		addressResult.setLine2((form.txtAddress2().getValue()));
		addressResult.setLine3((form.txtAddress3().getValue()));
		addressResult.setLine4((form.txtAddress4().getValue()));
		addressResult.setLine5((form.txtAddress5().getValue()));
		
		addressResult.setPostCode(form.txtPost().getValue()); //WDEV-17700
		addressResult.setPCT(form.txtPctCode().getValue());
		addressResult.setCountry(form.cmbCountry().getValue());
		addressResult.setBeffdate(form.ccEffectiveDates().getDateFrom());
		addressResult.setBetdate(form.ccEffectiveDates().getDateTo());
		
		addressResult.setCareHome(form.chkCareHome().getValue());
		addressResult.setNoFixedAbode(form.chkNoFixed().getValue());
		
		//boolean svuhMandatory = ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue() == true;
		if(form.cmbAreaOfResidence().getVisible())
		{
			addressResult.setAreaOfResidence(form.cmbAreaOfResidence().getValue());
		}
		
		return addressResult;
	}
	
	public void clearscreen() 
	{
		form.txtAddress1().setValue(null);
		form.txtAddress2().setValue(null);
		form.txtAddress3().setValue(null);
		form.txtAddress4().setValue(null);
		form.txtAddress5().setValue(null);
		form.txtAddressSearchText().setValue(null);
		form.txtPost().setValue(null);
		form.txtPctCode().setValue(null);
		form.cmbCountry().setValue(null);
		form.ccEffectiveDates().setEffectiveDates(null, null);
		
		form.chkCareHome().setValue(null);
		form.chkNoFixed().setValue(null);
		
		form.getLocalContext().setaddressResult(null); //WDEV-14367
		
		//WDEV-23175
		form.getLocalContext().setpostcodeValidated(false);		
	
	}

	@Override
	protected void onTxtAddress1ValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
		
//		form.getLocalContext().getaddressResult().setAddressBuildingNumber(form.txtAddress1().getValue());
//		form.getLocalContext().getaddressResult().setAddressBuildingName(form.txtAddress1().getValue());
		form.getLocalContext().getaddressResult().setLine1(form.txtAddress1().getValue());
		
		setPostCodeStatus();
	}

	@Override
	protected void onTxtAddress2ValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	
//		form.getLocalContext().getaddressResult().setAddressLocality(form.txtAddress2().getValue());		
//		form.getLocalContext().getaddressResult().setAddressBuildingNumber(form.txtAddress2().getValue());
		form.getLocalContext().getaddressResult().setLine2(form.txtAddress2().getValue());
		
		setPostCodeStatus();
	}

	@Override
	protected void onTxtAddress3ValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	
//		form.getLocalContext().getaddressResult().setAddressPostTown((form.txtAddress3().getValue()));				
//		form.getLocalContext().getaddressResult().setAddressLocality((form.txtAddress3().getValue()));
		form.getLocalContext().getaddressResult().setLine3(form.txtAddress3().getValue());
		
		setPostCodeStatus();
	}

	@Override
	protected void onTxtAddress4ValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	
//		form.getLocalContext().getaddressResult().setAddressCounty((form.txtAddress4().getValue()));						
//		form.getLocalContext().getaddressResult().setAddressPostTown((form.txtAddress4().getValue()));
		form.getLocalContext().getaddressResult().setLine4(form.txtAddress4().getValue());
		
		setPostCodeStatus();
	}

	@Override
	protected void onTxtAddress5ValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	
		form.getLocalContext().getaddressResult().setLine5(form.txtAddress5().getValue());
		
		setPostCodeStatus();
	}

	@Override
	protected void onTxtPostValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	
		form.getLocalContext().getaddressResult().setPostCode((form.txtPost().getValue()));
		
		//WDEV-23175
		form.getLocalContext().setpostcodeValidated(false);
	}
	
	protected void onTxtPctCodeValueChanged() throws PresentationLogicException 
	{
		// update local context
		if (form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	
		form.getLocalContext().getaddressResult().setPCTcode((form.txtPctCode().getValue()));
		
		//WDEV-23175
		form.getLocalContext().setpostcodeValidated(false);
		
	}

	public void setPhoneVisible(Boolean value) 
	{
	}
	
	public void setHistoricAddressBtnVisible(Boolean value) 
	{
		form.btnViewOtherAddresses().setVisible(value);
	}

	public void setSearchControlsVisible(Boolean value) 
	{
		form.lblSearch().setVisible(value);
		form.txtAddressSearchText().setVisible(value);
		form.imbPostCodeSearch().setVisible(value);
	}
	
	public void setTitle(String title) 
	{
	}

	public String verifyPCT(String postCode)
	{
		// Address provider helper
		IAddressProvider l_addressprovider = engine.getAddressProvider();
		if(l_addressprovider == null)
			return null;

		PersonAddress address = new PersonAddress();
		PersonAddress[] personAddressResult = new PersonAddress[0];
		
		String l_pctCode = form.txtPctCode().getValue();
		
		if (ConfigFlag.UI.DISPLAY_PCT_CODE.getValue())
		{		
			if ((l_pctCode != null) && (l_pctCode != ""))
			{
											
				try
				{			
					if (form.txtPost().getValue() != null && !form.txtPost().getValue().equals(""))
					{
						form.getGlobalContext().Core.setAddressSearchType("SEARCH");
					}
					address.setAddressSearchText(postCode);
					personAddressResult = (PersonAddress[])l_addressprovider.getAddress(address,form.getGlobalContext().Core.getAddressSearchType(),"",""); // return result or ambiglist
				}
				catch (PresentationLogicException pe)
				{
					engine.showMessage(pe.getMessage());
				}
				
				boolean l_match = true;
				
				//fill out rest of address fields if somthing found
				if (personAddressResult == null)
					return null;
				
				if (personAddressResult != null && personAddressResult.length == 1)
				{
					//possible exact match
					if (personAddressResult[0].getPCTIsNotNull())
					{
						if (l_pctCode.equalsIgnoreCase(personAddressResult[0].getPCT()))
						{
							l_match = true;
						}
						else
							l_match = false;						
					}
				}
				else
				{
					PersonAddress pa = null;				
					for (int i =0; i< personAddressResult.length; i++)
					{
						pa = personAddressResult[i];
						if (pa.getPctCode() != null)
						{
							if (!l_pctCode.equalsIgnoreCase(pa.getPctCode()))
									l_match = false;
						}
					}
				}						
				
				if (l_match)
					return personAddressResult[0].getPCT();
				else
					return null;
			}
			else
			{
				//automatically fill in the pct if a postcode is given on editing, i.e. not through capscan
				if (form.txtPost().getValue() != "")
				{
					try
					{			
						if (form.txtPost().getValue() != null && !form.txtPost().getValue().equals(""))
						{
							form.getGlobalContext().Core.setAddressSearchType("SEARCH");
						}
						address.setAddressSearchText(postCode);
						personAddressResult = (PersonAddress[])l_addressprovider.getAddress(address,form.getGlobalContext().Core.getAddressSearchType(),"",""); // return result or ambiglist
					}
					catch (PresentationLogicException pe)
					{
						engine.showMessage(pe.getMessage());
					}
					
					//fill out rest of address fields if somthing found
					if (personAddressResult == null)
						return null;
					
					if (personAddressResult != null && personAddressResult.length >= 1)
					{
						//possible match
						if (personAddressResult[0].getPCTIsNotNull() && personAddressResult[0].getPCT() != "")
						{						
							form.txtPctCode().setValue(personAddressResult[0].getPCT());
							if (form.getLocalContext().getaddressResult() != null)
							{
								form.getLocalContext().getaddressResult().setPCT(form.txtPctCode().getValue());
								if (form.getGlobalContext().Core.getPersonAddressIsNotNull())
									form.getGlobalContext().Core.getPersonAddress().setPCT(form.txtPctCode().getValue());
								displayAddress();
							}
							return personAddressResult[0].getPCT();
						}
						else
							return null;
					}	
				}
			}
		}
		
		return null;
	}

	protected void onBtnShowGeoCoOrdsClick() throws PresentationLogicException 
	{
		
		try {
			if (form.txtPost().getValue() != null && form.txtPost().getValue() != "")
			{
				GeoCoOrdVo vo = domain.getGeoCoOrds(form.txtPost().getValue());
				if (vo != null)
				{
					if (vo.getLatitudeIsNotNull() && vo.getLogitudeIsNotNull())
					{
						String format = String.format("Lattitude: %f Longitude: %f",vo.getLatitude(),vo.getLogitude());
						engine.showMessage(format);
					}
				}
			}
		} catch (DomainInterfaceException e) 
		{
			throw new PresentationLogicException(e.getMessage());
		}
		
		/*
		double[] coOrds;
		ims.core.vo.PersonAddress lpa = new ims.core.vo.PersonAddress();
		
		if (form.txtPost().getValue() != null)
		{
			if (form.getGlobalContext().Core.getPersonAddressIsNotNull())
				coOrds = engine.getAddressProvider().getLatitudeLogitude(form.getGlobalContext().Core.getPersonAddress());
			else
			{
				lpa.setAddressPostCode(form.txtPost().getValue());
				coOrds = engine.getAddressProvider().getLatitudeLogitude(lpa);
			}
			
			if (coOrds != null)
			{
				if (coOrds.length == 2)
				{
					String format = String.format("Lattitude: %f Longitude: %f",coOrds[0],coOrds[1]);
					engine.showMessage(format);
				}
			}
		}
		*/
		
	}

	//wdev-13268
	public void setRequireAdress(Boolean required) 
	{				
		form.getLocalContext().setIsRequired(required);
		
		if(Boolean.FALSE.equals(required))
		{
			form.txtAddress4().setRequired(required);
			form.txtPost().setRequired(required);
			
			setPostCodeStatus();
		}
		else
		{
			form.ccEffectiveDates().setDateFromRequired(required && !isSVUH());
		}
	}

	//wdev-19176
	protected void onCmbAreaOfResidenceValueChanged() throws PresentationLogicException
	{
		if( form.getLocalContext().getaddressResult() == null)
		{
			form.getLocalContext().setaddressResult(new PersonAddress());
		}
	}

	//wdev-19232
	public void setRequireAreaOfResidence(Boolean enable)
	{
	}

	//wdev-19528
	public void setConfigurableFields(DemographicControlsConfigVoCollection collfields)
	{
		if( collfields == null || collfields.size() == 0)
			return;
		
		for(int i = 0; i < collfields.size(); i++ )
		{
			DemographicControlsConfigVo tempVo = collfields.get(i); 
			
			if( tempVo != null )
			{
				if( ADDRESS1_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtAddress1().setRequired(tempVo.getIsMandatory());
				}
				else if( ADDRESS2_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtAddress2().setRequired(tempVo.getIsMandatory());
				}
				else if( ADDRESS3_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtAddress3().setRequired(tempVo.getIsMandatory());
				}
				else if( ADDRESS4_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtAddress4().setRequired(tempVo.getIsMandatory());
				}
				else if( form.txtAddress5().isVisible() && ADDRESS5_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtAddress5().setRequired(tempVo.getIsMandatory());
				}
				else if( form.txtPost().isVisible() && POST_CODE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtPost().setRequired(tempVo.getIsMandatory());
				}
				else if( form.txtPctCode().isVisible() && CCG_CODE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtPctCode().setRequired(tempVo.getIsMandatory());
				}
			}
		}
		
	}

	//wdev-19528
	public String[] getUIErrorsForConfigurableMode()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if(Boolean.FALSE.equals(form.getLocalContext().getIsRequired()))
		{
			boolean addedLine = false;
			
			if( form.txtAddress1().isVisible() && ( form.txtAddress1().getValue() != null && form.txtAddress1().getValue().length() > 0))
			{
				addedLine = true;
			}
			if( form.txtAddress2().isVisible() && ( form.txtAddress2().getValue() != null && form.txtAddress2().getValue().length() > 0))
			{
				addedLine = true;
			}
			if( form.txtAddress3().isVisible() && ( form.txtAddress3().getValue() != null && form.txtAddress3().getValue().length() > 0))
			{
				addedLine = true;
			}
			if( form.txtAddress4().isVisible() && ( form.txtAddress4().getValue() != null && form.txtAddress4().getValue().length() > 0))
			{
				addedLine = true;
			}
			if( form.txtAddress5().isVisible() && ( form.txtAddress5().getValue() != null && form.txtAddress5().getValue().length() > 0))
			{
				addedLine = true;
			}
			
    		if( addedLine && form.txtPost().isVisible() /*&& form.txtPost().isRequired()*/ && ( form.txtPost().getValue() == null || form.txtPost().getValue().length() == 0))
    		{
    			errors.add("Post Code is mandatory.");
    		}
    		
    		if (form.ccEffectiveDates().getDateFrom() == null && form.ccEffectiveDates().isDateFromRequired())
    		{
    			errors.add("The 'Effective date from' for address is mandatory !");
    		}
		}
		else
		{
			boolean missingLine1 = false;
			boolean missingLine2 = false;

			if( form.txtAddress1().isVisible() && ( form.txtAddress1().getValue() == null || form.txtAddress1().getValue().length() == 0))
			{
				missingLine1 = true;
			}
			if( form.txtAddress2().isVisible() && ( form.txtAddress2().getValue() == null || form.txtAddress2().getValue().length() == 0))
			{
				missingLine2 = true;
			}

			if(missingLine1 && missingLine2)
				errors.add("The first or second line of the Address is mandatory.");

       		if(isPds())
       		{
    			if (form.txtAddress1().getValue() != null && form.txtAddress1().getValue().length() > PDS_MAX_ADDR_LENGTH)
    			{
    				errors.add("The first line of the Address exceeds 35 characters.");
    			}
    			
    			if (form.txtAddress2().getValue() != null && form.txtAddress2().getValue().length() > PDS_MAX_ADDR_LENGTH)
    			{
    				errors.add("The second line of the Address exceeds 35 characters.");
    			}
    			
    			if (form.txtAddress3().getValue() != null && form.txtAddress3().getValue().length() > PDS_MAX_ADDR_LENGTH)
    			{
    				errors.add("The third line of the Address exceeds 35 characters.");
    			}
    			
    			if (form.txtAddress4().getValue() != null && form.txtAddress4().getValue().length() > PDS_MAX_ADDR_LENGTH)
    			{
    				errors.add("The fourth line of the Address exceeds 35 characters.");
    			}
    			
    			if (form.txtAddress5().getValue() != null && form.txtAddress5().getValue().length() > PDS_MAX_ADDR_LENGTH)
    			{
    				errors.add("The fifth line of the Address exceeds 35 characters.");
    			}
    		}
    		
    		if(!isPds())
    		{
    			if( form.txtAddress1().isVisible() && form.txtAddress1().isRequired() && ( form.txtAddress1().getValue() == null || form.txtAddress1().getValue() == ""))
    			{
    				errors.add("The first line of the Address is mandatory.");
    			}
    			if( form.txtAddress2().isVisible() && form.txtAddress2().isRequired() && ( form.txtAddress2().getValue() == null || form.txtAddress2().getValue() == ""))
    			{
    				errors.add("The second line of the Address is mandatory.");
    			}
    		}
    		
    		if( form.txtAddress3().isVisible() && form.txtAddress3().isRequired() && ( form.txtAddress3().getValue() == null || form.txtAddress3().getValue() == ""))
    		{
    			errors.add("The third line of the Address is mandatory.");
    		}
    		if( form.txtAddress4().isVisible() && form.txtAddress4().isRequired() && ( form.txtAddress4().getValue() == null || form.txtAddress4().getValue() == ""))
    		{
    			errors.add("The fourth line of the Address is mandatory.");
    		}
    		if( form.txtAddress5().isVisible() && form.txtAddress5().isEnabled() && form.txtAddress5().isRequired() && ( form.txtAddress5().getValue() == null || form.txtAddress5().getValue() == ""))
    		{
    			errors.add("The fifth line of the Address is mandatory.");
    		}
    		if( form.txtPost().isVisible() && form.txtPost().isRequired() && ( form.txtPost().getValue() == null || form.txtPost().getValue() == ""))
    		{
    			errors.add("Post Code is mandatory.");
    		}
    		
    		if(capscanEnabled()) // WDEV-23071
    		{
    			//WDEV-23175
    			if(usePostCode() && (form.getLocalContext().getpostcodeValidatedIsNotNull() && !form.getLocalContext().getpostcodeValidated())) // WDEV-23070 
    			{
	    			//WDEV-21978 
		    		if( form.txtPost().getValue() != null && form.txtPost().getValue() != "")
		    		{
		    			PDSConfigurationVo config = domain.getPdsConfiguration();

		    			if ((form.txtPost().getValue().replaceAll(" ", "")!=null && config!=null && config.getNO_FIXED_ABODE_POSTCODE()!=null) 
		    					&& (!form.txtPost().getValue().replaceAll(" ", "").equalsIgnoreCase(config.getNO_FIXED_ABODE_POSTCODE().replaceAll(" ", ""))))
		    			{
			    			try
			    			{
			    				if (engine.getAddressProvider().validPostcode(form.txtPost().getValue())==null)
			    				{
			    					errors.add("Invalid Postcode entered");
			    					form.getLocalContext().setpostcodeValidated(false); //needs to be revalidated each time
			    				}
			    				else
			    					form.getLocalContext().setpostcodeValidated(true);
			    			}
			    			catch(PresentationLogicException pe)
			    			{
								engine.showMessage(pe.getMessage());
			    			}
		    			}
		    		}
    			}
    			//WDEV-23175
    		}    		
    		if( form.txtPctCode().isVisible() && form.txtPctCode().isRequired() && ( form.txtPctCode().getValue() == null || form.txtPctCode().getValue() == ""))
    		{
    			errors.add("CCG Code: is mandatory.");
    		}
    		if( form.cmbAreaOfResidence().getVisible() && form.cmbAreaOfResidence().isRequired() && form.cmbAreaOfResidence().getValue() == null)
    		{
    			errors.add("Area of residence is mandatory.");
    		}
    		
    		if (form.ccEffectiveDates().getDateFrom() != null && form.ccEffectiveDates().getDateTo() != null)
    		{
    			if (form.ccEffectiveDates().getDateFrom().isGreaterThan(form.ccEffectiveDates().getDateTo()))
    			{
    				errors.add("Address Details - Effective from is after Effective to.");
    			}
    		}
    		
    		if (form.ccEffectiveDates().getDateFrom() == null && form.ccEffectiveDates().isDateFromRequired())
    		{
    			errors.add("The 'Effective date from' for address is mandatory !");
    		}
		}
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	@Override
	protected void onCmbCountyValueChanged() throws PresentationLogicException
	{
		if(form.cmbCountry().getValue() != null)
		{
			Country country = form.cmbCountry().getValue();
			
			LookupInstVo inst = LookupHelper.getCountryInstance(this.domain.getLookupService(),country.getID());
			LookupInstVo instMap = domain.getMappings(inst);
			
			if(instMap.getMappings() != null)
			{
				for(int i = 0; i < instMap.getMappings().size(); i++)
				{
					if("CCG Mapping".equals(instMap.getMappings().get(i).getExtSystem()))
					{
						form.txtPctCode().setValue(instMap.getMappings().get(i).getExtCode());
						break;
					}
				}
			}
		}
	}
	
	private void displayOtherAdressesAndTooltip(PersonAddressCollection voCollAddresses) //WDEV-17700
	{
		if(voCollAddresses== null)//WDEV-22338
		{
			form.btnViewOtherAddresses().setTooltip(null);
			return;
		}
		// update GC
		form.getGlobalContext().Core.setOtherAddresses(voCollAddresses);

		PersonAddressCollection voTempColl = (PersonAddressCollection)voCollAddresses.clone();
		
		//dont display Historic addresses in other address control
		for (int i = 0 ; i < voTempColl.size() ; i++)
		{
			if(voTempColl.get(i).getAddressTypeIsNotNull() && voTempColl.get(i).getAddressType().equals(AddressType.HISTORICAL) || voTempColl.get(i).getAddressType() == null)
				voTempColl.remove(i);		
		}		

		if (FormMode.EDIT.equals(form.getGlobalContext().Core.getParentFormMode()))
		{
			form.btnViewOtherAddresses().setVisible(true);
			//WDEV-14367
			//form.getGlobalContext().Core.setOtherAddresses(null);
		}
		
		if (voTempColl == null || voTempColl.size() == 0) //WDEV-17700
		{
			if (form.getMode().equals(FormMode.VIEW))
				form.btnViewOtherAddresses().setVisible(false);
			return;
		}

		voTempColl.sort();

		String l_address = voTempColl.toDisplayString();

		// display address
		if (l_address.length() > 0 && l_address != "No Other Addresses") //WDEV-17700
		{
			// set tooltip
			String l_addressHeader = Textile.setBold("OTHER ADDRESSES: ");
			l_addressHeader += "\r\n";
			l_addressHeader += l_address;
			l_addressHeader = new Textile().process(l_addressHeader);
			form.btnViewOtherAddresses().setTooltip(l_addressHeader);
		}
	}

	@Override
	public void setPatient(Patient pat)
	{
		if(pat == null)//WDEV-22338
			return;
		
		//WDEV-21256`
		if (pat.getGpIsNotNull())
		{
			//set address line to primary practice
			if (pat.getGp().getPracticesIsNotNull())
			{
				for (GpToPracticesVo gpPract : pat.getGp().getPractices()){
					if (gpPract!=null && gpPract.getIsPrimaryPracticeIsNotNull() && gpPract.getIsPrimaryPractice())
					{
						if (gpPract.getPracticeIsNotNull() && gpPract.getPractice().getAddressIsNotNull())
							form.getLocalContext().setnofixedAbodeTown(gpPract.getPractice().getAddress().getAddressPostTown());
					}
				}
			}
		}
		
		displayOtherAdressesAndTooltip(pat.getAddresses());
		
	}

	@Override
	protected void onBtnViewOtherAddressesClick() throws PresentationLogicException
	{
		//check B1611 activity
		// PDS AUTHENTICATION
		boolean activityB1611 = true;
		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
		activityB1611 = pdsAuth.hasRightsFor(PdsRight.ACCESS_SENSITIVE_DATA, PdsCheck.CHECK_ALL, null);
		if(activityB1611 == false)
		{
			engine.showMessage(pdsAuth.getLastError());
			return;
		}
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		// END PDS AUTHENTICATION
		
		//form.getGlobalContext().Core.setParentFormMode(form.getMode());
		
		setButtonAction(BUTTON_OTHER_ADDRESSES);
		form.fireCustomControlValueChanged();
		
		//engine.open(form.getForms().Core.OtherAddresses);
	}

	@Override
	public Boolean validateData(java.util.ArrayList<String> errors)
	{
		String[] UIErrors = getUIErrorsForConfigurableMode();
		
		if(UIErrors != null)
		{
			if(errors != null)
			{
				for(String err: UIErrors)
				{
					errors.add(err);
				}
			}
			else
			{
				engine.showErrors(UIErrors);
			}
			
			return false;
		}
		
		return true;
	}

	@Override
	public void populateDataFromScreen(Patient patient)
	{
		patient.setAddress(getValue());
		patient.setHARCCode(form.txtPctCode().getValue());
		if(form.getGlobalContext().Core.getOtherAddresses()!=null)
		{
			if (patient.getAddresses() == null)
				patient.setAddresses(new PersonAddressCollection());
			patient.setAddresses(form.getGlobalContext().Core.getOtherAddresses());
		}
	}

	@Override
	protected void onChkNoFixedValueChanged() throws PresentationLogicException
	{
		if(form.chkNoFixed().getValue())
		{
			if (form.chkCareHome().getValue())
			{
				form.chkCareHome().setValue(false);
			}
			
			//WDEV-21256 - always apply this logic
			PDSConfigurationVo config = domain.getPdsConfiguration();
			
			if(config != null)
			{
				form.txtAddress1().setValue("No Fixed Abode");
				if (form.getLocalContext().getaddressResult()==null)
					form.getLocalContext().setaddressResult(new PersonAddress());
				form.getLocalContext().getaddressResult().setLine1(form.txtAddress1().getValue());
				form.txtAddress2().setValue(null);
				form.txtAddress3().setValue(null);
				form.txtAddress4().setValue(null);
				form.txtAddress5().setValue(null);
				form.txtPost().setValue(config.getNO_FIXED_ABODE_POSTCODE()/*"ZZ99 3VZ"*/);	
				form.getLocalContext().getaddressResult().setPostCode(form.txtPost().getValue());
				if(!isSVUH())
				{
    				form.txtAddress4().setValue(form.getLocalContext().getnofixedAbodeTown());
    				form.getLocalContext().getaddressResult().setLine4(form.txtAddress4().getValue());
				}
				form.getLocalContext().getaddressResult().setNoFixedAbode(true);
			}			
			//WDEV-21256
		}
		else
		{
			form.txtAddress1().setValue(null);
			if (form.getLocalContext().getaddressResult()==null)
				form.getLocalContext().setaddressResult(new PersonAddress());
			form.getLocalContext().getaddressResult().setLine1(form.txtAddress1().getValue());
			form.txtAddress4().setValue(null);
			form.getLocalContext().getaddressResult().setLine4(form.txtAddress4().getValue());
			form.txtPost().setValue(null);
			form.getLocalContext().getaddressResult().setPostCode(form.txtPost().getValue());
			form.getLocalContext().getaddressResult().setNoFixedAbode(false);
		}
	}

	private boolean isPds()
	{
		return !"None".equals(ConfigFlag.DOM.USE_PDS.getValue());
	}

	@Override
	protected void onChkCareHomeValueChanged() throws PresentationLogicException 
	{
		if(form.chkCareHome().getValue())
		{
			if (form.chkNoFixed().getValue())
			{
				if(("No Fixed Abode").equals(form.txtAddress1().getValue()))
				{
					form.txtAddress1().setValue(null);
				}
				form.txtPost().setValue(null);
				if (form.getLocalContext().getnofixedAbodeTown() != null)
					form.txtAddress4().setValue(null);
				form.chkNoFixed().setValue(false);
			}
		}
	}

	public void setPDSMandatoryFields(Boolean mandatory)
	{
		form.txtAddress1().setRequired(mandatory);
		form.txtAddress4().setRequired(mandatory);
		form.txtPost().setRequired(mandatory);
	}
	
	private void setPostCodeStatus()
	{
		if(Boolean.FALSE.equals(form.getLocalContext().getIsRequired()))
		{
			boolean addressLineEntered = false;
			
			if(form.txtAddress1().getValue() != null && form.txtAddress1().getValue().length() > 0)
				addressLineEntered = true;
			if(form.txtAddress2().getValue() != null && form.txtAddress2().getValue().length() > 0)
				addressLineEntered = true;
			if(form.txtAddress3().getValue() != null && form.txtAddress3().getValue().length() > 0)
				addressLineEntered = true;
			if(form.txtAddress4().getValue() != null && form.txtAddress4().getValue().length() > 0)
				addressLineEntered = true;
			if(form.txtAddress5().getValue() != null && form.txtAddress5().getValue().length() > 0)
				addressLineEntered = true;
			
			form.txtPost().setRequired(addressLineEntered && usePostCode());
			//WDEV-23175
			form.getLocalContext().setpostcodeValidated(false);
			
			//WDEV-22156
			form.ccEffectiveDates().setDateFromRequired(addressLineEntered);
		}
	}
	
	@Override
	public void setOtherAddressesButtonVisibility(Boolean value) 
	{
		if (value != null)
			form.btnViewOtherAddresses().setVisible(value);
	}

	@Override
	public void setCountryVisibility(Boolean visible)
	{
		form.cmbCountry().setVisible(Boolean.TRUE.equals(visible));
		form.lblCountry().setVisible(Boolean.TRUE.equals(visible));
		
		form.cmbCountry().setEnabled(form.getMode().equals(FormMode.EDIT));
	}

	@Override
	public void setCheckBoxesVisibility(Boolean visible)
	{
		form.chkCareHome().setVisible(visible);
		form.chkNoFixed().setVisible(visible);
		form.imbHistoricalAddresses().setVisible(visible);		
		
		form.getLocalContext().setCheckBoxesVisibility(visible);
	}

	@Override
	protected void onImbHistoricalAddressesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.AddressHistoryDlg, new Object[] { form.getGlobalContext().Core.getOtherAddresses() });
	}

	@Override
	public void setDefaultNoFixedAbodeAddressLine4(
			String defaultNoFixedAbodeTown) 
	{
		form.getLocalContext().setnofixedAbodeTown(defaultNoFixedAbodeTown);		
	}
	
	private boolean isSVUH()
	{
		return ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH");
	}

	private boolean usePostCode()
	{
		return ConfigFlag.UI.DEMOGRAPHICS_USE_POSTCODE.getValue() == true;
	}
	private boolean capscanEnabled()
	{
		return ConfigFlag.UI.CAPSCAN_ENABLED.getValue() == true;
	}

	@Override
	public void setButtonAction(Integer action)
	{
		form.getLocalContext().setButtonAction(action);
	}

	@Override
	public Integer getButtonAction()
	{
		return form.getLocalContext().getButtonAction();
	}

	@Override
	public void otherAddressesEvent()
	{
		engine.open(form.getForms().Core.OtherAddresses);	
	}
}
