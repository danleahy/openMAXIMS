//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.transfers;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.InpatientEpisodeVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingTransferForBedReadyDetailsVo;
import ims.core.vo.PendingTransfersFilterVo;
import ims.core.vo.PendingTransfersVo;
import ims.core.vo.PendingTransfersVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.WardStayVo;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.cn.data.TreeNode;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.beans.ColorBean;
import ims.scheduling.vo.PendingEmergencyTheatreListVo;
import ims.vo.LookupInstVo;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	/**
	 * WDEV-13135
	 * @author George Josan
	 *	Comparator for manual sorting after request date time (InpatientEpisode records)
	 */
	private static class InpatientEpisodeRequestDateTimeCompartor implements Comparator<InpatientEpisodeVo>
	{
		private int direction;

		public InpatientEpisodeRequestDateTimeCompartor(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(InpatientEpisodeVo o1, InpatientEpisodeVo o2)
		{
			if (o1.getWardStaysIsNotNull() && o1.getWardStays().size() > 1 && o2.getWardStaysIsNotNull() && o2.getWardStays().size() > 1)
			{
				// Sort ward stays
				o1.getWardStays().sort(WardStayVo.getWardStayVoIdComparator());
				o2.getWardStays().sort(WardStayVo.getWardStayVoIdComparator());
				
				WardStayVo previousStay1 = o1.getWardStays().get(1);
				WardStayVo previousStay2 = o2.getWardStays().get(1);
				
				return previousStay1.getTransferDateTime().compareTo(previousStay2.getTransferDateTime()) * direction;
			}
			
			if (o1.getWardStaysIsNotNull() && o1.getWardStays().size() > 1 && (!o2.getWardStaysIsNotNull() || o2.getWardStays().size() <= 1))
			{
				return direction;
			}
			
			if ((!o1.getWardStaysIsNotNull() || o1.getWardStays().size() <= 1) && o2.getWardStaysIsNotNull() && o2.getWardStays().size() > 1)
			{
				return -1 * direction;
			}

			return 0;
		}

	}

	/**
	 * WDEV-13136
	 * @author George Josan
	 *	Comparator for manual sorting after request date time (PendingTransfer records)
	 */
	private static class PendingTransferRequestDateTimeCompartor implements Comparator<PendingTransfersVo>
	{
		private int direction;
		
		public PendingTransferRequestDateTimeCompartor(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(PendingTransfersVo o1, PendingTransfersVo o2)
		{
			if (o1.getTransferRequestDateTimeIsNotNull() && o2.getTransferRequestDateTimeIsNotNull())
			{
				return o1.getTransferRequestDateTime().compareTo(o2.getTransferRequestDateTime()) * direction;
			}
			
			if (o1.getTransferRequestDateTimeIsNotNull() && !o2.getTransferRequestDateTimeIsNotNull())
			{
				return direction;
			}
			
			if (!o1.getTransferRequestDateTimeIsNotNull() && o2.getTransferRequestDateTimeIsNotNull())
			{
				return -1 * direction;
			}

			return 0;
		}

	}
	
	
	/**
	 * WDEV-13136
	 * @author George Josan
	 *	Comparator for manual sorting after request date time (PendingTransfer records)
	 */
	private static class AlertCompartor implements Comparator<PendingTransfersVo>
	{
		private int direction;
		
		public AlertCompartor(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(PendingTransfersVo o1, PendingTransfersVo o2)
		{
			if (o1.getInpatientEpisode()!= null && o1.getInpatientEpisode().getPasEvent()!= null && 
				o1.getInpatientEpisode().getPasEvent().getPatient() != null && 
				o2.getInpatientEpisode()!= null && o2.getInpatientEpisode().getPasEvent()!= null && 
				o2.getInpatientEpisode().getPasEvent().getPatient() != null)
			{
				Integer val1 = Boolean.TRUE.equals(o1.getActiveAlerts()) ? 1 : 0;
				Integer val2 = Boolean.TRUE.equals(o2.getActiveAlerts()) ? 1 : 0;
				
				if (val1 != 0 && val2 != 0)
				{
					return val1.compareTo(val2) * direction;
				}

				if (val1 != 0 && val2 == 0)
				{
					return direction;
				}

				if (val2 != 0 && val1 == 0)
				{
					return -1 * direction;
				}	
			}

		return 0;
		}
	}
	
	// WDEV-20305 //WDEV-20918 to work with both grid value types
	private static class CommentsComparator implements Comparator<Object>
	{
		private int direction;

		public CommentsComparator(SortOrder sortOrderComments)
		{
			if (SortOrder.ASCENDING.equals(sortOrderComments))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object c1, Object c2)
		{
			PendingTransfersVo o1 = c1 instanceof PendingTransfersVo ? (PendingTransfersVo) c1 : null;
			PendingTransfersVo o2 = c2 instanceof PendingTransfersVo ? (PendingTransfersVo) c2 : null;

			InpatientEpisodeVo i1 =  c1 instanceof InpatientEpisodeVo ? (InpatientEpisodeVo) c1 : null;
			InpatientEpisodeVo i2 =  c1 instanceof InpatientEpisodeVo ? (InpatientEpisodeVo) c2 : null;

			Integer val1 = 0;
			Integer val2 = 0;

			if (o1 != null && o2 != null && (o1.getInpatientEpisode().getComments() != null || o2.getInpatientEpisode().getComments() != null || o1.getTransferComment() != null || o2.getTransferComment() != null))
			{
				val1 = (o1.getInpatientEpisode().getComments() != null || o1.getTransferComment() != null) ? 1 : 0;
				val2 = (o2.getInpatientEpisode().getComments() != null || o2.getTransferComment() != null) ? 1 : 0;
			}
			else if (i1 != null && i2 != null && (i1.getComments() != null || i2.getComments() != null || i1.getTransferComment() != null || i2.getTransferComment() != null))
			{
				val1 = (i1.getComments() != null || i1.getTransferComment() != null) ? 1 : 0;
				val2 = (i2.getComments() != null || i2.getTransferComment() != null) ? 1 : 0;
			}

			if (val1 != 0 && val2 != 0)
			{
				return val1.compareTo(val2) * direction;
			}

			if (val1 != 0 && val2 == 0)
			{
				return direction;
			}

			if (val2 != 0 && val1 == 0)
			{
				return -1 * direction;
			}	

			return 0;
		}
	}
	

	public static final Integer	COLSURNAME			= new Integer(0);
	public static final Integer	COLFORENAME			= new Integer(1);
	public static final Integer	COLHOSPNUM			= new Integer(-1);
	public static final Integer	COLSEX				= new Integer(-3);
	public static final Integer	COLALERT			= new Integer(-4);
	public static final Integer	COLCONSULTANT		= new Integer(-5);
	public static final Integer	COLCURRENTWARD		= new Integer(-6);
	public static final Integer	COLCURRENTWARDSTS	= new Integer(-7);
	public static final Integer	COLOTHERWARD		= new Integer(-8);
	public static final Integer	COLREQUESTDATE		= new Integer(-9);
	public static final Integer	COLCOMMENTS			= new Integer(-10);
	public static final Integer	COLDATETIME			= new Integer(-11);
	public static final Integer	COLTRANSFERREASON	= new Integer(-12);
	
	private static final long	serialVersionUID	= 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	//WDEV-18420
	public void open() 
	{
		initialise();
	}
	
	@Override
	/**
	 * WDEV-13136
	 * Event handler for column header clicked
	 */
	protected void onDyngrdPatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.Tranfers().getValue().equals(GenForm.TranfersEnumeration.rdoPendingTransfers))
		{
			sortPendingTansferRecords(column.getIdentifier());
		}
		else
		{
			// Sort records after values on column which header was clicked
			sortInpatientEpisodeRecords(column.getIdentifier());
		}

		// Update controls & context menu options
		updateContextMenusState();
	}

	
	/**
	 * WDEV-13136
	 * Function used to sort records (PendingTransfers) after values on column which header was clicked 
	 */
	private void sortPendingTansferRecords(Object columnIdentifier)
	{
		// Get records from grid
		PendingTransfersVoCollection records = populatePendingTransferRecordsFromGrid();
		
		if (records.size() < 2)
			return;
		
		// Toggle sort order for column
		sortOrderToggle(columnIdentifier);
		
		// Sort records by column
		if (COLDATETIME.equals(columnIdentifier))
		{
			records.sort(new PendingTransferRequestDateTimeCompartor(form.getLocalContext().getSortOrderRequestDate()));
		}
		
		else if (COLALERT.equals(columnIdentifier))
		{
			records.sort(new AlertCompartor(form.getLocalContext().getSortOrderAlerts()));
		}
		//WDEV-20305
		else if (COLCOMMENTS.equals(columnIdentifier))
		{
			records.sort(new CommentsComparator(form.getLocalContext().getSortOrderComments()));
		}
		
		// Get current selection
		Object selectedRecord = form.dyngrdPatients().getValue();
		// Populate records to grid
		populatePendingTransferRecordsToGrid(records);
		// Reselect record
		form.dyngrdPatients().setValue(selectedRecord);
		// Call code for new selection
		updateGlobalContextPatientSelection(form.dyngrdPatients().getValue());
	}


	/**
	 * WDEV-13136
	 * Function used to retrieve records (PatientTransfers) from grid
	 */
	private PendingTransfersVoCollection populatePendingTransferRecordsFromGrid()
	{
		// Create collection to return
		PendingTransfersVoCollection records = new PendingTransfersVoCollection();
		
		// Add each record from grid to collection
		for (int i = 0; i < form.dyngrdPatients().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPatients().getRows().get(i);
			
			if (row.getValue() instanceof PendingTransfersVo)
				records.add((PendingTransfersVo) row.getValue());
		}
		
		// Return populated records
		return records;
	}


	/**
	 * WDEV-13136
	 * Function used to populate pending transfers to grid
	 */
	private void populatePendingTransferRecordsToGrid(PendingTransfersVoCollection records)
	{
		// Clear grid
		form.dyngrdPatients().getRows().clear();
		
		// Check records collection
		if (records == null)
			return;
		
		// Populate records to grid
		for (int i = 0; i < records.size(); i++)
		{
			addNewPendingTransfersDynamicGridRow(records.get(i));
		}
	}


	/**
	 * WDEV-13136
	 * Function used to sort records (InpatientEpisode) after values on column which header was clicked
	 */
	private void sortInpatientEpisodeRecords(Object columnIdentifier)
	{
		// Get records from grid
		InpatientEpisodeVoCollection records = populateInpatientRecordsFromGrid();
		
		if (records.size() < 2)
			return;
		
		// Toggle sort order for column
		sortOrderToggle(columnIdentifier);
		
		// Sort records by column
		if (COLDATETIME.equals(columnIdentifier))
		{
			records.sort(new InpatientEpisodeRequestDateTimeCompartor(form.getLocalContext().getSortOrderRequestDate()));
		}
		//WDEV-20305
		if (COLCOMMENTS.equals(columnIdentifier))
		{
			records.sort(new CommentsComparator(form.getLocalContext().getSortOrderComments()));
		}
		// Get current selection
		Object selectedRecord = form.dyngrdPatients().getValue();
		// Populate records to grid
		populateInpatientEpisodesToGrid(records);
		// Reselect record
		form.dyngrdPatients().setValue(selectedRecord);
		// Call code for new selection
		updateGlobalContextPatientSelection(form.dyngrdPatients().getValue());
	}

	/**
	 * WDEV-13136
	 * Function used to populate inpatient episodes to grid
	 */
	private void populateInpatientEpisodesToGrid(InpatientEpisodeVoCollection records)
	{
		// Clear grid records
		form.dyngrdPatients().getRows().clear();

		// Test collection
		if (records == null)
			return;
		
		// Populate records to grid
		for (int i = 0; i < records.size(); i++)
		{
			addNewInpatientEpisodeDynamicGridRow(records.get(i));
		}
	}


	/**
	 * WDEV-13136
	 * Function used to toggle sort order for columns
	 */
	private void sortOrderToggle(Object columnIdentifer)
	{
		// Column 'Request Date'
		if (COLDATETIME.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderRequestDate()))
				form.getLocalContext().setSortOrderRequestDate(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderRequestDate(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderRequestDate(null);
		}
		
		// Column 'Alert'
		// WDEV-18011 
		if (COLALERT.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAlerts()))
				form.getLocalContext().setSortOrderAlerts(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderAlerts(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderAlerts(null);
		}
		
		//WDEV-20305
		if (COLCOMMENTS.equals(columnIdentifer))
		{
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderComments()))
				form.getLocalContext().setSortOrderComments(SortOrder.DESCENDING);
			else
				form.getLocalContext().setSortOrderComments(SortOrder.ASCENDING);
		}
		else
		{
			form.getLocalContext().setSortOrderComments(null);
		}
	}


	/**
	 * WDEV-13136
	 * Function used to retrieve records (InpatientEpisodes) from grid
	 */
	private InpatientEpisodeVoCollection populateInpatientRecordsFromGrid()
	{
		// Create collection to return
		InpatientEpisodeVoCollection records = new InpatientEpisodeVoCollection();
		
		// Add each record from grid to collection
		for (int i = 0; i < form.dyngrdPatients().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdPatients().getRows().get(i);
			
			if (row.getValue() instanceof InpatientEpisodeVo)
				records.add((InpatientEpisodeVo) row.getValue());
		}
		
		// Return populated records
		return records;
	}


	private void refreshSearchCriteria()
	{
		initialise();

		PendingTransfersFilterVo voFilter = form.getGlobalContext().STHK.getTransfersListFilter();

		if (voFilter != null)
		{
			form.txtIDNum().setValue(voFilter.getPatientHospNumber());
			form.cmbIDType().setValue(voFilter.getIDType());
			form.txtPatientSurname().setValue(voFilter.getPatientSurname());
			form.txtPatientForename().setValue(voFilter.getPatientForename());

			for (int i = 0; voFilter.getConsultantIsNotNull() && i < form.qmbConsultant().getValues().size(); i++)
			{
				HcpLiteVo voHCP = (HcpLiteVo) form.qmbConsultant().getValues().get(i);
				if (voHCP.getID_Hcp().equals(voFilter.getConsultant().getID_Hcp()))
					form.qmbConsultant().setValue((HcpLiteVo) form.qmbConsultant().getValues().get(i));
			}
			if (form.qmbConsultant().getValue() == null && voFilter.getConsultantIsNotNull())
			{
				HcpLiteVo voHCP = domain.getHCP(voFilter.getConsultant().getID_Hcp());
				form.qmbConsultant().newRow(voHCP, voHCP.getMos().getName().toString());
				form.qmbConsultant().setValue(voHCP);
			}

			form.cmbCurrentHosp().setValue(null);
			for (int i = 0; voFilter.getCurrentHospitalIsNotNull() && i < form.cmbCurrentHosp().getValues().size(); i++)
			{
				LocationLiteVo voHosp = (LocationLiteVo) form.cmbCurrentHosp().getValues().get(i);
				if (voHosp.getID_Location().equals(voFilter.getCurrentHospital().getID_Location()))
					form.cmbCurrentHosp().setValue((LocationLiteVo) form.cmbCurrentHosp().getValues().get(i));
			}
			if (form.cmbCurrentHosp().getValue() == null && voFilter.getCurrentHospitalIsNotNull())
			{
				LocationLiteVo voHosp = domain.getHospital(voFilter.getCurrentHospital());
				form.cmbCurrentHosp().newRow(voHosp, voHosp.getName().toString());
				form.cmbCurrentHosp().setValue(voHosp);
			}

			form.qmbCurrentWard().setValue(null);
			for (int i = 0; voFilter.getCurrentWardIsNotNull() && i < form.qmbCurrentWard().getValues().size(); i++)
			{
				LocationLiteVo voWard = (LocationLiteVo) form.qmbCurrentWard().getValues().get(i);
				if (voWard.getID_Location().equals(voFilter.getCurrentWard().getID_Location()))
					form.qmbCurrentWard().setValue((LocationLiteVo) form.qmbCurrentWard().getValues().get(i));
			}
			if (form.qmbCurrentWard().getValue() == null && voFilter.getCurrentWardIsNotNull())
			{
				LocationLiteVo voWard = domain.getWard(voFilter.getCurrentWard());
				form.qmbCurrentWard().newRow(voWard, voWard.getName());
				form.qmbCurrentWard().setValue(voWard);
			}

			form.cmbDestHosp().setValue(null);
			for (int i = 0; voFilter.getDestHospitalIsNotNull() && i < form.cmbDestHosp().getValues().size(); i++)
			{
				LocationLiteVo voHosp = (LocationLiteVo) form.cmbDestHosp().getValues().get(i);
				if (voHosp.getID_Location().equals(voFilter.getDestHospital().getID_Location()))
					form.cmbDestHosp().setValue((LocationLiteVo) form.cmbDestHosp().getValues().get(i));
			}
			if (form.cmbDestHosp().getValue() == null && voFilter.getDestHospitalIsNotNull())
			{
				LocationLiteVo voHosp = domain.getHospital(voFilter.getDestHospital());
				form.cmbDestHosp().newRow(voHosp, voHosp.getName().toString());
				form.cmbDestHosp().setValue(voHosp);
			}

			for (int i = 0; voFilter.getDestinationWardIsNotNull() && i < form.qmbOtherWard().getValues().size(); i++)
			{
				LocationLiteVo voWard = (LocationLiteVo) form.qmbOtherWard().getValues().get(i);
				if (voWard.getID_Location().equals(voFilter.getDestinationWard().getID_Location()))
					form.qmbOtherWard().setValue((LocationLiteVo) form.qmbOtherWard().getValues().get(i));
			}
			if (form.qmbOtherWard().getValue() == null && voFilter.getDestinationWardIsNotNull())
			{
				LocationLiteVo voWard = domain.getWard(voFilter.getDestinationWard());
				form.qmbOtherWard().newRow(voWard, voWard.getName());
				form.qmbOtherWard().setValue(voWard);
			}

			form.cmbAlert().setValue(voFilter.getAlert());
			form.Tranfers().setValue(voFilter.getPendingTransfer() ? GenForm.TranfersEnumeration.rdoPendingTransfers : GenForm.TranfersEnumeration.rdoRecentTransfers);

			radioChanged(); // initializeDynamicGrid(voFilter.getPendingTransfer());

			search(false);
		}
	}

	private void search(boolean fromSearchButton)
	{
		PendingTransfersVo pendingTransferSelectedRecord = null;
		InpatientEpisodeVo inpatientEpisodeSelectedRecord = null;
		
		if (!fromSearchButton  && form.dyngrdPatients().getValue() instanceof PendingTransfersVo)
			pendingTransferSelectedRecord = (PendingTransfersVo) form.dyngrdPatients().getValue();
		
		if (!fromSearchButton  && form.dyngrdPatients().getValue() instanceof InpatientEpisodeVo)
			inpatientEpisodeSelectedRecord = (InpatientEpisodeVo) form.dyngrdPatients().getValue();
		
		form.dyngrdPatients().getRows().clear(); // WDEV-18099 
		form.lblTotal().setValue("Total: 0"); // WDEV-18099 
		updateContextMenusState();

		PendingTransfersFilterVo voPendingTransfersFilter = populateDataFromScreen();
		form.getGlobalContext().STHK.setTransfersListFilter(voPendingTransfersFilter);

		if (form.txtIDNum().getValue() != null && form.cmbIDType().getValue() == null)
		{
			engine.showErrors(new String[]{"Please enter both an Identifier type as well as its value."});
			return;
		}

		if (voPendingTransfersFilter.countFieldsWithValue() == 2 && voPendingTransfersFilter.getIDTypeIsNotNull() && voPendingTransfersFilter.getPendingTransferIsNotNull())
		{
			engine.showMessage("Please enter some valid search criteria.", "Invalid search criteria", MessageButtons.OK, MessageIcon.ERROR);
			return;
		}

		form.dyngrdPatients().getRows().clear();
		if (form.Tranfers().getValue().equals(GenForm.TranfersEnumeration.rdoPendingTransfers))
		{

			PendingTransfersVoCollection pendingTransfers = domain.listPendingTransfers(voPendingTransfersFilter);

			if (pendingTransfers == null || pendingTransfers.size() == 0)
			{
				engine.showMessage("No matching records found");
				return;
			}
			if (pendingTransfers != null)
				form.lblTotal().setValue("Total: " + String.valueOf(pendingTransfers.size()));

			for (int i = 0; pendingTransfers != null && i < pendingTransfers.size(); i++)
				addNewPendingTransfersDynamicGridRow(pendingTransfers.get(i));
			
			form.dyngrdPatients().setValue(pendingTransferSelectedRecord);
		}
		else
		{
			InpatientEpisodeVoCollection inpatientEpisodes = domain.listRecentTransfers(voPendingTransfersFilter);

			if (inpatientEpisodes == null || inpatientEpisodes.size() == 0)
			{
				engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
				return;
			}
			if (inpatientEpisodes != null)
				form.lblTotal().setValue("Total: " + String.valueOf(inpatientEpisodes.size()));

			for (int i = 0; inpatientEpisodes != null && i < inpatientEpisodes.size(); i++)
				addNewInpatientEpisodeDynamicGridRow(inpatientEpisodes.get(i));
			
			form.dyngrdPatients().setValue(inpatientEpisodeSelectedRecord);
		}
		updateContextMenusState();
	}

	private void addNewInpatientEpisodeDynamicGridRow(InpatientEpisodeVo voInpatientEpisode)
	{
		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();

		if (voInpatientEpisode.getPasEventIsNotNull() && voInpatientEpisode.getPasEvent().getPatientIsNotNull())
			voInpatientEpisode.getPasEvent().getPatient().calculateAge();

		if (voInpatientEpisode.getPasEventIsNotNull() && voInpatientEpisode.getPasEvent().getPatientIsNotNull() && voInpatientEpisode.getPasEvent().getPatient().getNameIsNotNull())
		{
			DynamicGridCell snameCell = newRow.getCells().newCell(getColumn(COLSURNAME), DynamicCellType.LABEL);
			snameCell.setValue(voInpatientEpisode.getPasEvent().getPatient().getName().getSurname());
			snameCell.setTooltip(voInpatientEpisode.getPasEvent().getPatient().getName().getSurname()); //WDEV-22737
			snameCell.setReadOnly(true);

			DynamicGridCell fnameCell = newRow.getCells().newCell(getColumn(COLFORENAME), DynamicCellType.LABEL);
			fnameCell.setValue(voInpatientEpisode.getPasEvent().getPatient().getName().getForename());
			fnameCell.setTooltip(voInpatientEpisode.getPasEvent().getPatient().getName().getForename()); //WDEV-22737
			fnameCell.setReadOnly(true);
		}

		//wdev-8431
		if (voInpatientEpisode.getPasEventIsNotNull() 
			&& voInpatientEpisode.getPasEvent().getPatientIsNotNull() 
			&& voInpatientEpisode.getPasEvent().getPatient().getIdentifiersIsNotNull()
			&& voInpatientEpisode.getPasEvent().getPatient().getIdentifiers().size() > 0)
		{
			DynamicGridCell hospnumCell = newRow.getCells().newCell(getColumn(COLHOSPNUM), DynamicCellType.LABEL);
			//WDEV-22960
			StringBuilder tooltip = new StringBuilder();
			PatientId patNHSId = voInpatientEpisode.getPasEvent().getPatient().getPatId(PatIdType.NHSN);
			PatientId displayId = voInpatientEpisode.getPasEvent().getPatient().getDisplayId();
			
			if(displayId == null)
			{
				if(patNHSId != null)
				{
					tooltip.append("NHSN: ").append(patNHSId.getValue());
					hospnumCell.setValue(patNHSId.getValue());
					hospnumCell.setTooltip(tooltip.toString());	
				}
			}
			else
			{
				String name = ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
				ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(name);
				
				tooltip.append(name).append(": ").append(displayId.getValue().toString()).append("<br />");
					
				if(patNHSId != null && !PatIdType.NHSN.equals(type))
				{
					tooltip.append("NHSN: ").append(patNHSId.getValue());	
				}
				hospnumCell.setValue(displayId.getValue().toString());//WDEV-20926
				hospnumCell.setTooltip(tooltip.toString());
			}
			//end WDEV-22960
			
			hospnumCell.setReadOnly(true);
		}

		if (voInpatientEpisode.getPasEventIsNotNull() && voInpatientEpisode.getPasEvent().getPatientIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLSEX), DynamicCellType.LABEL);
			patientCell.setValue(voInpatientEpisode.getPasEvent().getPatient().getSexIsNotNull() ? voInpatientEpisode.getPasEvent().getPatient().getSex().toString() : "");
			patientCell.setTooltip(voInpatientEpisode.getPasEvent().getPatient().getSexIsNotNull() ? voInpatientEpisode.getPasEvent().getPatient().getSex().toString() : ""); //WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voInpatientEpisode.getPasEventIsNotNull() && voInpatientEpisode.getPasEvent().getConsultantIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCONSULTANT), DynamicCellType.LABEL);
			patientCell.setValue(voInpatientEpisode.getPasEvent().getConsultantIsNotNull() ? voInpatientEpisode.getPasEvent().getConsultant().toString() : "");
			patientCell.setTooltip(voInpatientEpisode.getPasEvent().getConsultantIsNotNull() ? voInpatientEpisode.getPasEvent().getConsultant().toString() : ""); //WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voInpatientEpisode.getPasEventIsNotNull() && voInpatientEpisode.getPasEvent().getLocationIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCURRENTWARD), DynamicCellType.LABEL);
			patientCell.setValue(voInpatientEpisode.getPasEvent().getLocationIsNotNull() ? voInpatientEpisode.getPasEvent().getLocation().toString() : "");
			patientCell.setTooltip(voInpatientEpisode.getPasEvent().getLocationIsNotNull() ? voInpatientEpisode.getPasEvent().getLocation().toString() : ""); //WDEV-22737
			patientCell.setReadOnly(true);
		}
		
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			DynamicGridCell wardStatusCell = newRow.getCells().newCell(getColumn(COLCURRENTWARDSTS), DynamicCellType.LABEL);
			wardStatusCell.setValue(voInpatientEpisode.getWardStatusIsNotNull() ? voInpatientEpisode.getWardStatus().getText() : WardBayStatus.OPEN.getText());
			//WDEV-22737
			wardStatusCell.setTooltip(voInpatientEpisode.getWardStatusIsNotNull() ? voInpatientEpisode.getWardStatus().getText() : WardBayStatus.OPEN.getText());
			wardStatusCell.setReadOnly(true);
			
			if (voInpatientEpisode.getWardStatus() == null || WardBayStatus.OPEN.equals(voInpatientEpisode.getWardStatus()))
			{
				wardStatusCell.setTextColor(Color.Green);
			}
			else if (WardBayStatus.BLOCKED.equals(voInpatientEpisode.getWardStatus()))
			{
				ColorBean amberBean = new ColorBean();
				amberBean.setValue("#FFBF00");
				amberBean.setName("Amber");
				wardStatusCell.setTextColor(new Color(amberBean));
			}
			else if (WardBayStatus.CLOSED.equals(voInpatientEpisode.getWardStatus()))
			{
				wardStatusCell.setTextColor(Color.Red);
			}
			DynamicGridCell transfReasonCell = newRow.getCells().newCell(getColumn(COLTRANSFERREASON), DynamicCellType.LABEL);
			transfReasonCell.setValue(voInpatientEpisode.getTransferReasonIsNotNull() ? voInpatientEpisode.getTransferReason().getText() : null);
			transfReasonCell.setTooltip(voInpatientEpisode.getTransferReasonIsNotNull() ? voInpatientEpisode.getTransferReason().getText() : null);//WDEV-22737
			transfReasonCell.setReadOnly(true);
		}
		if (voInpatientEpisode.getWardStaysIsNotNull() && voInpatientEpisode.getWardStays().size() > 1)
		{
			//WDEV-8798
			voInpatientEpisode.getWardStays().sort(WardStayVo.getWardStayVoIdComparator());
			
			WardStayVo voPreviousWardStay = voInpatientEpisode.getWardStays().get(1);

			DynamicGridCell prevWardCell = newRow.getCells().newCell(getColumn(COLOTHERWARD), DynamicCellType.LABEL);
			prevWardCell.setValue(voPreviousWardStay.getWardIsNotNull() ? voPreviousWardStay.getWard().getName() : "");
			prevWardCell.setTooltip(voPreviousWardStay.getWardIsNotNull() ? voPreviousWardStay.getWard().getName() : ""); //WDEV-22737
			prevWardCell.setReadOnly(true);

			DynamicGridCell tdtCell = newRow.getCells().newCell(getColumn(COLDATETIME), DynamicCellType.LABEL);
			tdtCell.setValue(voPreviousWardStay.getTransferDateTimeIsNotNull() ? voPreviousWardStay.getTransferDateTime().toString() : "");
			tdtCell.setTooltip(voPreviousWardStay.getTransferDateTimeIsNotNull() ? voPreviousWardStay.getTransferDateTime().toString() : ""); //WDEV-22737
			tdtCell.setReadOnly(true);
		}
		
		if (voInpatientEpisode != null && (voInpatientEpisode.getCommentsIsNotNull() || (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && voInpatientEpisode.getTransferCommentIsNotNull())) && voInpatientEpisode.getPasEvent().getPatientIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCOMMENTS), DynamicCellType.IMAGEBUTTON);
			
			patientCell.setReadOnly(voInpatientEpisode.getComments() == null);
			patientCell.setAutoPostBack(voInpatientEpisode.getCommentsIsNotNull());
		
			patientCell.setReadOnly(false);
			patientCell.setAutoPostBack(true);
			patientCell.setValue(form.getImages().Core.Memo);
			patientCell.setTooltip(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? ((voInpatientEpisode.getTransferCommentIsNotNull() ? "<b> Transfer Comment:</b> " + voInpatientEpisode.getTransferComment() + "<br/>" : "") + (voInpatientEpisode.getCommentsIsNotNull() ? "<b>Bed Manager Comments:</b> " + voInpatientEpisode.getComments() : "")) : (voInpatientEpisode.getComments() != null ? voInpatientEpisode.getComments() : ""));
		}

		newRow.setValue(voInpatientEpisode);
	}

	private void initialise()
	{

		form.Tranfers().setValue(GenForm.TranfersEnumeration.rdoPendingTransfers);
		initializeDynamicGrid(true);
		loadHospitals();

		form.cmbIDType().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));

		if (form.cmbCurrentHosp().getValue() == null && engine.getCurrentLocation() != null)
		{
			// Try and load the logged in location as a ward
			LocMostVo voLoc = domain.getLocation((LocationRefVo) engine.getCurrentLocation());
			LocationLiteVo currentHospital = domain.getCurrentHospital(engine.getCurrentLocation()); //WDEV-20707
			if (voLoc != null && voLoc.getTypeIsNotNull() && voLoc.getType().equals(LocationType.WARD))
			{
				//form.cmbCurrentHosp().setValue(voLoc.getParentLocation());
				form.cmbCurrentHosp().setValue(currentHospital); //WDEV-20707

				form.qmbCurrentWard().newRow(voLoc, voLoc.getName());
				form.qmbCurrentWard().setValue(voLoc);
			}
		}

		loadAlerts();
	}

	private void loadAlerts()
	{
		form.cmbAlert().clear();

		TreeNode[] coll = LookupHelper.getAlertType(domain.getLookupService()).getRootNodes();

		if (coll != null)
		{
			for (int i = 0; i < coll.length; i++)
			{
				AlertType item = (AlertType) coll[i];
				ArrayList<LookupInstVo> coll1 = item.getChildInstances();

				AlertType type = null;
				for (int j = 0; j < coll1.size(); j++)
				{
					type = (AlertType) coll1.get(j);
					if (type.isActive())
						form.cmbAlert().newRow((AlertType) coll1.get(j), coll1.get(j).toString());
				}
			}
		}
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection voColl = domain.listActiveHospitalsLite();
		form.cmbCurrentHosp().clear();
		form.cmbDestHosp().clear();

		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			form.cmbCurrentHosp().newRow(voColl.get(i), voColl.get(i).getName());
			form.cmbDestHosp().newRow(voColl.get(i), voColl.get(i).getName());

			if (engine.getCurrentLocation() != null && voColl.get(i).getID_Location().equals(engine.getCurrentLocation().getID()))
			{
				form.cmbCurrentHosp().setValue(voColl.get(i));
				form.cmbDestHosp().setValue(voColl.get(i));
			}

		}
	}

	private void initializeDynamicGrid(boolean bPendingTransfers)
	{

		form.dyngrdPatients().clear();
		form.dyngrdPatients().setSelectable(true);
		form.getContextMenus().Core.hideAllTransfersMenuItems();

		if (bPendingTransfers)
		{
			DynamicGridColumn surnameColumn = form.dyngrdPatients().getColumns().newColumn("Surname", COLSURNAME);
			surnameColumn.setSortMode(SortMode.AUTOMATIC);
			surnameColumn.setCanGrow(true);
			surnameColumn.setWidth(70);

			DynamicGridColumn forenameColumn = form.dyngrdPatients().getColumns().newColumn("Forename", COLFORENAME);
			forenameColumn.setSortMode(SortMode.AUTOMATIC);
			forenameColumn.setCanGrow(true);
			forenameColumn.setWidth(70);
			
			PatIdType displayId = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
			
			DynamicGridColumn hospnumColumn = form.dyngrdPatients().getColumns().newColumn(displayId.getText(), COLHOSPNUM);
			hospnumColumn.setSortMode(SortMode.AUTOMATIC);
			hospnumColumn.setCanGrow(true);
			hospnumColumn.setWidth(69);

			DynamicGridColumn sexColumn = form.dyngrdPatients().getColumns().newColumn("Sex", COLSEX);
			sexColumn.setSortMode(SortMode.AUTOMATIC);
			sexColumn.setWidth(35);

			DynamicGridColumn alertColumn = form.dyngrdPatients().getColumns().newColumn("Alert", COLALERT);
			alertColumn.setSortMode(SortMode.MANUAL);
			alertColumn.setWidth(42);

			DynamicGridColumn consultantColumn = form.dyngrdPatients().getColumns().newColumn("Consultant", COLCONSULTANT);
			consultantColumn.setSortMode(SortMode.AUTOMATIC);
			consultantColumn.setCanGrow(true);
			consultantColumn.setWidth(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 74: 81);

			DynamicGridColumn currentWardColumn = form.dyngrdPatients().getColumns().newColumn("Current Ward", COLCURRENTWARD);
			currentWardColumn.setSortMode(SortMode.AUTOMATIC);
			currentWardColumn.setCanGrow(true);
			currentWardColumn.setWidth(90);
			
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{	
				DynamicGridColumn currentWardStsColumn = form.dyngrdPatients().getColumns().newColumn("W. Status", COLCURRENTWARDSTS);
				currentWardStsColumn.setHeaderTooltip("Current Ward Status");
				currentWardStsColumn.setCanGrow(true);
				currentWardStsColumn.setSortMode(SortMode.AUTOMATIC);
				currentWardStsColumn.setWidth(65);
			}

			DynamicGridColumn otherWardColumn = form.dyngrdPatients().getColumns().newColumn("Dest. Ward", COLOTHERWARD);
			otherWardColumn.setSortMode(SortMode.AUTOMATIC);
			otherWardColumn.setCanGrow(true);
			otherWardColumn.setWidth(80);

			DynamicGridColumn requestDateColumn = form.dyngrdPatients().getColumns().newColumn("Request Date", COLREQUESTDATE);
			requestDateColumn.setSortMode(SortMode.AUTOMATIC);
			requestDateColumn.setCanGrow(true);
			requestDateColumn.setWidth(88);
			
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{	
				DynamicGridColumn currentWardStsColumn = form.dyngrdPatients().getColumns().newColumn("Reason", COLTRANSFERREASON);
				currentWardStsColumn.setSortMode(SortMode.AUTOMATIC);
				currentWardStsColumn.setCanGrow(true);
				currentWardStsColumn.setWidth(52);
			}
			
			DynamicGridColumn commentsColumn = form.dyngrdPatients().getColumns().newColumn("Comments", COLCOMMENTS);
			commentsColumn.setSortMode(SortMode.MANUAL); //WDEV-20305
			commentsColumn.setWidth(-1);
		}
		else
		{
			DynamicGridColumn surnameColumn = form.dyngrdPatients().getColumns().newColumn("Surname", COLSURNAME);
			surnameColumn.setSortMode(SortMode.AUTOMATIC);
			surnameColumn.setCanGrow(true);
			surnameColumn.setWidth(72);

			DynamicGridColumn forenameColumn = form.dyngrdPatients().getColumns().newColumn("Forename", COLFORENAME);
			forenameColumn.setSortMode(SortMode.AUTOMATIC);
			forenameColumn.setCanGrow(true);
			forenameColumn.setWidth(72);
			
			PatIdType displayId = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
			
			DynamicGridColumn hospnumColumn = form.dyngrdPatients().getColumns().newColumn(displayId.getText(), COLHOSPNUM);
			hospnumColumn.setSortMode(SortMode.AUTOMATIC);
			hospnumColumn.setCanGrow(true);
			hospnumColumn.setWidth(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 71 : 90);

			DynamicGridColumn sexColumn = form.dyngrdPatients().getColumns().newColumn("Sex", COLSEX);
			sexColumn.setSortMode(SortMode.AUTOMATIC);
			sexColumn.setWidth(35);

			DynamicGridColumn consultantColumn = form.dyngrdPatients().getColumns().newColumn("Consultant", COLCONSULTANT);
			consultantColumn.setSortMode(SortMode.AUTOMATIC);
			consultantColumn.setCanGrow(true);
			consultantColumn.setWidth(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 75 : 90);

			DynamicGridColumn currentWardColumn = form.dyngrdPatients().getColumns().newColumn("Current Ward", COLCURRENTWARD);
			currentWardColumn.setSortMode(SortMode.AUTOMATIC);
			currentWardColumn.setCanGrow(true);
			currentWardColumn.setWidth(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 90 : 110);
			
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{	
				DynamicGridColumn currentWardStsColumn = form.dyngrdPatients().getColumns().newColumn("W. Status", COLCURRENTWARDSTS);
				currentWardStsColumn.setHeaderTooltip("Current Ward Status");
				currentWardStsColumn.setSortMode(SortMode.AUTOMATIC);
				currentWardStsColumn.setCanGrow(true);
				currentWardStsColumn.setWidth(65);
			}

			DynamicGridColumn otherWardColumn = form.dyngrdPatients().getColumns().newColumn("Prev. Ward", COLOTHERWARD);
			otherWardColumn.setSortMode(SortMode.AUTOMATIC);
			otherWardColumn.setCanGrow(true);
			otherWardColumn.setWidth(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 80: 110);

			DynamicGridColumn transferDateTimeColumn = form.dyngrdPatients().getColumns().newColumn("Transfer Date/Time", COLDATETIME);
			transferDateTimeColumn.setSortMode(SortMode.AUTOMATIC);
			transferDateTimeColumn.setCanGrow(true);
			transferDateTimeColumn.setWidth(124);
			
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{	
				DynamicGridColumn currentWardStsColumn = form.dyngrdPatients().getColumns().newColumn("Reason", COLTRANSFERREASON);
				currentWardStsColumn.setSortMode(SortMode.AUTOMATIC);
				currentWardStsColumn.setCanGrow(true);
				currentWardStsColumn.setWidth(53);
			}
			
			DynamicGridColumn commentsColumn = form.dyngrdPatients().getColumns().newColumn("Comments", COLCOMMENTS);
			commentsColumn.setSortMode(SortMode.MANUAL); //WDEV-20305
			commentsColumn.setWidth(-1);
		}

		form.lblTotal().setValue("Total: 0");
	}

	@Override
	protected void onRadioButtonTranfersValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		radioChanged();
	}

	private void radioChanged()
	{
		if (form.Tranfers().getValue().equals(GenForm.TranfersEnumeration.rdoPendingTransfers))
		{
			form.lblOtherWard().setValue("Destination Ward:");
			form.lbl2().setValue("Destination Hospital:"); //WDEV-18607 
			form.cmbAlert().setVisible(true);
			form.lblAlert().setVisible(true);

			initializeDynamicGrid(true);
		}
		else if (form.Tranfers().getValue().equals(GenForm.TranfersEnumeration.rdoRecentTransfers))
		{
			form.lblOtherWard().setValue("Previous Ward:");
			form.lbl2().setValue("Previous Hospital:"); //WDEV-18607 
			form.cmbAlert().setVisible(false);
			form.lblAlert().setVisible(false);

			initializeDynamicGrid(false);
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
		
		form.lblTotal().setValue("Total: 0");

		form.dyngrdPatients().getRows().clear();
		
		updateContextMenusState();
		
		// Clear the selected patient information in the Engine
		form.getGlobalContext().Core.setSelectingPatientForm(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");

		form.getGlobalContext().STHK.setTransfersListFilter(null);
	}

	private void clearControls()
	{
		form.txtPatientForename().setValue(null);
		form.txtPatientSurname().setValue(null);
		form.txtIDNum().setValue(null);
		form.qmbCurrentWard().setValue(null);
		form.qmbOtherWard().setValue(null);
		form.cmbAlert().setValue(null);
		form.qmbConsultant().setValue(null);
		form.cmbCurrentHosp().setValue(null);
		form.cmbDestHosp().setValue(null);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search(true);
	}	

	
	private void addNewPendingTransfersDynamicGridRow(PendingTransfersVo voPendingTransfers)
	{
		voPendingTransfers.setActiveAlerts(false);	// WDEV-18011
		DynamicGridRow newRow = form.dyngrdPatients().getRows().newRow();

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
			voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().calculateAge();

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatientIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getNameIsNotNull())
		{
			DynamicGridCell snameCell = newRow.getCells().newCell(getColumn(COLSURNAME), DynamicCellType.LABEL);
			snameCell.setValue(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getName().getSurname());
			snameCell.setTooltip(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getName().getSurname());//WDEV-22737
			snameCell.setReadOnly(true);

			DynamicGridCell fnameCell = newRow.getCells().newCell(getColumn(COLFORENAME), DynamicCellType.LABEL);
			fnameCell.setValue(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getName().getForename());
			fnameCell.setTooltip(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getName().getForename());//WDEV-22737
			fnameCell.setReadOnly(true);
		}

		//wdev-8431
		if (voPendingTransfers.getInpatientEpisodeIsNotNull() 
			&& voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() 
			&& voPendingTransfers.getInpatientEpisode().getPasEvent().getPatientIsNotNull() 
			&& voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getIdentifiersIsNotNull()
			&& voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getIdentifiers().size() > 0)
		{
			DynamicGridCell hospnumCell = newRow.getCells().newCell(getColumn(COLHOSPNUM), DynamicCellType.LABEL);
			
			//WDEV-22960
			StringBuilder tooltip = new StringBuilder();
			PatientId patNHSId = voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getPatId(PatIdType.NHSN);
			PatientId displayId = voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getDisplayId();
			
			if(displayId == null)
			{
				if(patNHSId != null)
				{
					tooltip.append("NHSN: ").append(patNHSId.getValue());
					hospnumCell.setValue(patNHSId.getValue());
					hospnumCell.setTooltip(tooltip.toString());	
				}
			}
			else
			{
				String name = ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
				ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(name);
				
				tooltip.append(name).append(": ").append(displayId.getValue().toString()).append("<br />");
					
				if(patNHSId != null && !PatIdType.NHSN.equals(type))
				{
					tooltip.append("NHSN: ").append(patNHSId.getValue());	
				}
				hospnumCell.setValue(displayId.getValue().toString());//WDEV-20926
				hospnumCell.setTooltip(tooltip.toString());
			}
			//end WDEV-22960

			
			hospnumCell.setReadOnly(true);
		}

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatientIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getSexIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLSEX), DynamicCellType.LABEL);
			patientCell.setValue(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getSex().toString());
			patientCell.setTooltip(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getSex().toString());//WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLALERT), DynamicCellType.IMAGE);
			
			//wdev-11146
			if(voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getPatientAlertsIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getPatientAlerts().size() > 0 )
			{
				boolean tempBool = false; 	
				for(int i = 0; i < voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getPatientAlerts().size();i++)
				{
					PatientAlertLiteVo patAlertLiteVo = voPendingTransfers.getInpatientEpisode().getPasEvent().getPatient().getPatientAlerts().get(i);
					if(patAlertLiteVo != null && patAlertLiteVo.getIsCurrentlyActiveAlert().equals(Boolean.TRUE))
					{
						tempBool = true;
						break;
					}
				}
				if (tempBool)
				{
					patientCell.setValue(form.getImages().Core.Alert16); // WDEV-18011
					patientCell.setTooltip("Alert(s) present");
					voPendingTransfers.setActiveAlerts(true);	// WDEV-18011 				
				}
			}
			patientCell.setReadOnly(true);
		}

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCONSULTANT), DynamicCellType.LABEL);
			patientCell.setValue(voPendingTransfers.getInpatientEpisode().getPasEvent().getConsultant().toString());
			patientCell.setTooltip(voPendingTransfers.getInpatientEpisode().getPasEvent().getConsultant().toString());//WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEventIsNotNull() && voPendingTransfers.getInpatientEpisode().getPasEvent().getLocationIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCURRENTWARD), DynamicCellType.LABEL);
			patientCell.setValue(voPendingTransfers.getInpatientEpisode().getPasEvent().getLocation().toString());
			patientCell.setTooltip(voPendingTransfers.getInpatientEpisode().getPasEvent().getLocation().toString());//WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voPendingTransfers.getDestinationWardIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLOTHERWARD), DynamicCellType.LABEL);
			patientCell.setValue(voPendingTransfers.getDestinationWard().toString());
			patientCell.setTooltip(voPendingTransfers.getDestinationWard().toString());//WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voPendingTransfers.getTransferRequestDateTimeIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLREQUESTDATE), DynamicCellType.LABEL);
			patientCell.setValue(voPendingTransfers.getTransferRequestDateTime().toString());
			patientCell.setTooltip(voPendingTransfers.getTransferRequestDateTime().toString());//WDEV-22737
			patientCell.setReadOnly(true);
		}

		if (voPendingTransfers.getInpatientEpisodeIsNotNull() && (voPendingTransfers.getInpatientEpisode().getCommentsIsNotNull() || (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && (voPendingTransfers.getTransferCommentIsNotNull() || voPendingTransfers.getBedAvailableDateTimeIsNotNull()))) && voPendingTransfers.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
		{
			DynamicGridCell patientCell = newRow.getCells().newCell(getColumn(COLCOMMENTS), DynamicCellType.IMAGEBUTTON);
			
			patientCell.setReadOnly(voPendingTransfers.getInpatientEpisode() == null  || voPendingTransfers.getInpatientEpisode().getComments() == null);
			patientCell.setAutoPostBack(voPendingTransfers.getInpatientEpisodeIsNotNull() && voPendingTransfers.getInpatientEpisode().getCommentsIsNotNull());
			
			patientCell.setValue(form.getImages().Core.Memo);
			patientCell.setTooltip(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? ((voPendingTransfers.getTransferCommentIsNotNull() ? "<b> Transfer Comment:</b> " + voPendingTransfers.getTransferComment() + "<br/>" : "") + (voPendingTransfers.getInpatientEpisode().getCommentsIsNotNull() ? "<b>Bed Manager Comments:</b> " + voPendingTransfers.getInpatientEpisode().getComments() + "<br/>" : "") + "<b>Bed Available Date/Time:</b> " +  (voPendingTransfers.getBedAvailableDateTimeIsNotNull() ? voPendingTransfers.getBedAvailableDateTime().toString() : "") ) : (voPendingTransfers.getInpatientEpisode().getComments() != null ? voPendingTransfers.getInpatientEpisode().getComments() : ""));
		}
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			DynamicGridCell wardStatusCell = newRow.getCells().newCell(getColumn(COLCURRENTWARDSTS), DynamicCellType.LABEL);
			wardStatusCell.setValue(voPendingTransfers.getWardStatusIsNotNull() ? voPendingTransfers.getWardStatus().getText() : WardBayStatus.OPEN.getText());
			//WDEV-22737
			wardStatusCell.setTooltip(voPendingTransfers.getWardStatusIsNotNull() ? voPendingTransfers.getWardStatus().getText() : WardBayStatus.OPEN.getText());
			wardStatusCell.setReadOnly(true);
			
			if (voPendingTransfers.getWardStatus() == null || WardBayStatus.OPEN.equals(voPendingTransfers.getWardStatus()))
			{
				wardStatusCell.setTextColor(Color.Green);
			}
			else if (WardBayStatus.BLOCKED.equals(voPendingTransfers.getWardStatus()))
			{
				ColorBean amberBean = new ColorBean();
				amberBean.setValue("#FFBF00");
				amberBean.setName("Amber");
				wardStatusCell.setTextColor(new Color(amberBean));
			}
			else if (WardBayStatus.CLOSED.equals(voPendingTransfers.getWardStatus()))
			{
				wardStatusCell.setTextColor(Color.Red);
			}
			
			DynamicGridCell transfReasonCell = newRow.getCells().newCell(getColumn(COLTRANSFERREASON), DynamicCellType.LABEL);
			transfReasonCell.setValue(voPendingTransfers.getTransferReasonIsNotNull() ? voPendingTransfers.getTransferReason().getText() : null);
			//WDEV-22737
			transfReasonCell.setTooltip(voPendingTransfers.getTransferReasonIsNotNull() ? voPendingTransfers.getTransferReason().getText() : null);
			transfReasonCell.setReadOnly(true);
		}

		newRow.setValue(voPendingTransfers);
	}

	private PendingTransfersFilterVo populateDataFromScreen()
	{
		PendingTransfersFilterVo filter = new PendingTransfersFilterVo();

		filter.setPatientHospNumber(form.txtIDNum().getValue());
		filter.setIDType(form.cmbIDType().getValue());
		filter.setPendingTransfer(form.Tranfers().getValue().equals(GenForm.TranfersEnumeration.rdoPendingTransfers) ? Boolean.TRUE : Boolean.FALSE);

		//WDEV-13065 -- if (form.txtIDNum().getValue() == null)
		
		filter.setPatientForename(form.txtPatientForename().getValue());
		filter.setPatientSurname(form.txtPatientSurname().getValue());
		filter.setConsultant(form.qmbConsultant().getValue());
		filter.setCurrentHospital(form.cmbCurrentHosp().getValue());
		filter.setDestHospital(form.cmbDestHosp().getValue());
		filter.setCurrentWard(form.qmbCurrentWard().getValue());
		filter.setDestinationWard(form.qmbOtherWard().getValue());
		filter.setAlert(form.cmbAlert().getValue());
		
		return filter;
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		if (value != null)
		{
			HcpFilter voHCPFilter = new HcpFilter();
			PersonName name = new PersonName();
			name.setSurname(value);
			voHCPFilter.setQueryName(name);
			voHCPFilter.setHcpType(HcpDisType.MEDICAL);

			HcpLiteVoCollection voColl = domain.listHCPs(voHCPFilter);

			voColl.sort();
			form.qmbConsultant().clear();
			for (int i = 0; i < voColl.size(); i++)
			{
				form.qmbConsultant().newRow(voColl.get(i), voColl.get(i).getIHcpName());
			}
			if (voColl.size() == 1)
				form.qmbConsultant().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbConsultant().showOpened();
		}
	}

	@Override
	protected void onQmbDestinationWardTextSubmited(String value) throws PresentationLogicException
	{
		if (form.cmbDestHosp().getValue() == null)
		{
			engine.showMessage("Please select a Destination Hospital to find a Ward for.");
			return;
		}

		LocationLiteVoCollection wards = domain.listWards(form.cmbDestHosp().getValue().getID_Location(), value);
		if (wards != null)
		{
			form.qmbOtherWard().clear();//wdev-8431
			for (LocationLiteVo item : wards)
				form.qmbOtherWard().newRow(item, item.getName());
		}
		if (wards.size() == 1)
			form.qmbOtherWard().setValue(wards.get(0));
		else if (wards.size() > 1)
			form.qmbOtherWard().showOpened();

	}

	@Override
	protected void onQmbWardTextSubmited(String value) throws PresentationLogicException
	{
		if (form.cmbCurrentHosp().getValue() == null)
		{
			engine.showMessage("Please select a Current Hospital to find a Ward for.");
			return;
		}

		LocationLiteVoCollection wards = domain.listWards(form.cmbCurrentHosp().getValue().getID_Location(), value);
		if (wards != null)
		{
			form.qmbCurrentWard().clear();//wdev-8431
			for (LocationLiteVo item : wards)
				form.qmbCurrentWard().newRow(item, item.getName());
		}
		if (wards.size() == 1)
			form.qmbCurrentWard().setValue(wards.get(0));
		else if (wards.size() > 1)
			form.qmbCurrentWard().showOpened();

	}

	@Override
	protected void onCmbDestHospValueChanged() throws PresentationLogicException
	{
		form.qmbOtherWard().clear();
	}

	@Override
	protected void onCmbCurrentHospValueChanged() throws PresentationLogicException
	{
		form.qmbCurrentWard().clear();
	}

	@Override
	protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row)
	{
		if (row == null)
			updateGlobalContextPatientSelection(null);
		else
			updateGlobalContextPatientSelection(row.getValue());

		updateContextMenusState();
	}


	/**
	 * WDEV-13136
	 * Function used to update global context patient
	 */
	private void updateGlobalContextPatientSelection(Object value)
	{
		setPatientGlobalContext(null);
		form.getGlobalContext().Core.setCurrentCareContext(null);

		if (value == null)
			return;

		if (value instanceof InpatientEpisodeVo)
		{
			InpatientEpisodeVo vo = (InpatientEpisodeVo) value;
			if (vo != null && vo.getPasEventIsNotNull())
			{
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCurrentCareContext(vo.getPasEvent()));
				if (form.getGlobalContext().Core.getCurrentCareContext() == null)
				{
					setPatientGlobalContext(vo.getPasEvent().getPatient());
				}
				
			}
		}
		else if (value instanceof PendingTransfersVo)
		{
			PendingTransfersVo vo = (PendingTransfersVo) value;
			if (vo != null && vo.getInpatientEpisodeIsNotNull() && vo.getInpatientEpisode().getPasEventIsNotNull() && vo.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
			{
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCurrentCareContext(vo.getInpatientEpisode().getPasEvent()));
				if (form.getGlobalContext().Core.getCurrentCareContext() == null)
				{
					setPatientGlobalContext(domain.getPatientShort(vo.getInpatientEpisode().getPasEvent().getPatient()));
				}
			}			
		}
	}

	/**
	 * @param ps
	 */
	private void setPatientGlobalContext(PatientShort patient)
	{
		form.getGlobalContext().Core.setPatientToBeDisplayed(patient);
		form.getGlobalContext().Core.setPatientShort(patient);
		if (patient != null)
			form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
	}

	public void refresh()
	{
		if (form.getGlobalContext().STHK.getTransfersListFilterIsNotNull())
			refreshSearchCriteria();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.Transfers.ADD:
				addEditComment(null);
				break;
			case GenForm.ContextMenus.CoreNamespace.Transfers.BED_READY:
				recordBedReadyDetails();
				break;
			//WDEV-22681
			case GenForm.ContextMenus.CoreNamespace.Transfers.EDIT_TRANSFER:
				editTransferDetails();
				break;
		}
		updateContextMenusState();
	}

	private void editTransferDetails()
	{
		if (!isNotMosUser("Logged-in user is not associated with a Member of Staff. Cannot Edit Transfer."))
		{	
			PendingTransfersVo selTransfer = (PendingTransfersVo) form.dyngrdPatients().getValue();
			if (selTransfer == null)
				return;
			engine.open(form.getForms().Core.ADTEditTransferDetailsDialog, new Object[]{selTransfer.toPendingTransfersRefVo()});
		}		
	}

	private void recordBedReadyDetails()
	{
		if (!(form.dyngrdPatients().getValue() instanceof PendingTransfersVo))
			return;
		PendingTransferForBedReadyDetailsVo voBedReadyTransf = (PendingTransferForBedReadyDetailsVo)form.dyngrdPatients().getValue();
		engine.open(form.getForms().Core.BedReadyDetailsDialog, new Object[]{voBedReadyTransf, FormMode.EDIT});		
	}

	private void addEditComment(DynamicGridCell cell)
	{
		if (cell != null)
			form.dyngrdPatients().setSelectedRow(cell.getRow());

		if (form.dyngrdPatients().getSelectedRow() != null && form.dyngrdPatients().getSelectedRow().getValue() != null)
		{
			if (form.dyngrdPatients().getSelectedRow().getValue() instanceof PendingTransfersVo)
			{
				PendingTransfersVo voTrans = domain.getCurrentTransferRecord((PendingTransfersVo) form.dyngrdPatients().getSelectedRow().getValue());

				form.getGlobalContext().Core.setCommentDialogString(voTrans.getInpatientEpisodeIsNotNull() ? voTrans.getInpatientEpisode().getComments() : "");
				form.dyngrdPatients().getSelectedRow().setValue(voTrans);
				if( !form.getGlobalContext().Core.getPatientShortIsNotNull() || !( voTrans != null && voTrans.getInpatientEpisodeIsNotNull() &&  voTrans.getInpatientEpisode().getPasEventIsNotNull() && voTrans.getInpatientEpisode().getPasEvent().getPatientIsNotNull() &&  form.getGlobalContext().Core.getPatientShort().getID_Patient().equals(voTrans.getInpatientEpisode().getPasEvent().getPatient().getID_Patient())))	//wdev-22250
					updateGlobalContextPatientSelection(voTrans);//WDEV-18065 
				engine.open(form.getForms().Core.CommentDialog);
			}
			else if (form.dyngrdPatients().getSelectedRow().getValue() instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo voEpis = (InpatientEpisodeVo) form.dyngrdPatients().getSelectedRow().getValue();

				form.getGlobalContext().Core.setCommentDialogString(voEpis.getComments());
				if( !form.getGlobalContext().Core.getPatientShortIsNotNull() || !( voEpis != null && voEpis.getPasEventIsNotNull()  && voEpis.getPasEvent().getPatientIsNotNull() &&  form.getGlobalContext().Core.getPatientShort().getID_Patient().equals(voEpis.getPasEvent().getPatient().getID_Patient())))	//wdev-22250
					updateGlobalContextPatientSelection(voEpis);//WDEV-18065 
				engine.open(form.getForms().Core.CommentDialog);
			}	
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if ((formName.equals(form.getForms().Core.CommentDialog) || formName.equals(form.getForms().Core.BedReadyDetailsDialog)) && result.equals(DialogResult.OK))
		{
			if (form.dyngrdPatients().getSelectedRow().getValue() instanceof PendingTransfersVo)
			{
				PendingTransfersVo voTrans = ((PendingTransfersVo) form.dyngrdPatients().getSelectedRow().getValue());
				voTrans.getInpatientEpisode().setComments(form.getGlobalContext().Core.getCommentDialogString());
				voTrans.setBedAvailableDateTime(form.getGlobalContext().Core.getBedReadyDetails() != null  ? form.getGlobalContext().Core.getBedReadyDetails().getBedAvailableDateTime() : null);
				
				String[] errors = voTrans.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}

				try
				{
					domain.saveTransfer(voTrans);
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					search(false);
					return;
				}
			}
			else if (form.dyngrdPatients().getSelectedRow().getValue() instanceof InpatientEpisodeVo)
			{
				InpatientEpisodeVo voEpis = (InpatientEpisodeVo) form.dyngrdPatients().getSelectedRow().getValue();
				voEpis.setComments(form.getGlobalContext().Core.getCommentDialogString());
				
				String[] errors = voEpis.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}

				try
				{
					domain.saveInpatientEpisode(voEpis);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					search(false);
					return;
				}
			}	
			search(false);
		}
		//WDEV-22681
		if (formName.equals(form.getForms().Core.ADTEditTransferDetailsDialog) && !DialogResult.CANCEL.equals(result))
		{
			search(false);
		}
		updateContextMenusState();
	}

	@Override
	protected void onDyngrdPatientsCellButtonClicked(DynamicGridCell cell)
	{
		addEditComment(cell);
	}
	private boolean isNotMosUser(String message)
	{
		Object mos = domain.getMosUser();
		if (mos == null)
		{
			engine.showMessage(message, "Not Allowed", MessageButtons.OK, MessageIcon.INFORMATION);
			return true;
		}
		return false;
	}
	private void updateContextMenusState()
	{
		form.getContextMenus().Core.hideAllTransfersMenuItems();
		boolean nonHeartsFunct = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS");
		
		//WDEV-22681
		form.getContextMenus().Core.getTransfersADDItem().setVisible(form.dyngrdPatients().getValue() != null); //WDEV-18011 
		form.getContextMenus().Core.getTransfersBED_READYItem().setVisible(nonHeartsFunct && form.dyngrdPatients().getValue() instanceof PendingTransfersVo);
		form.getContextMenus().Core.getTransfersEDIT_TRANSFERItem().setVisible(nonHeartsFunct && form.dyngrdPatients().getValue() instanceof PendingTransfersVo);
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdPatients().getColumns().getByIdentifier(identifier);
	}

}
