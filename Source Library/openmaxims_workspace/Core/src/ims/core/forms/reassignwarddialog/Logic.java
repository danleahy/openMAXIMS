//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ovidiu Roibu using IMS Development Environment (version 1.80 build 5567.19951)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.reassignwarddialog;

import java.util.ArrayList;

import ims.RefMan.vo.PatientElectiveTCIBedManagerCommentVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationListVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		populateHospitalCmb();
		open();
		updateControlsState();
	}
	
	private void open()
	{
		PatientElectiveTCIBedManagerCommentVo tciDetails = form.getGlobalContext().Core.gettciDetails();
		form.lblCurrentHosVal().setValue(tciDetails.getTCIHospital() == null ? "" : tciDetails.getTCIHospital().getName());
		form.lblCurrentWardVal().setValue(tciDetails.getTCIWard() == null ? "" : tciDetails.getTCIWard().getName());
	}
	
	private void updateControlsState()
	{
		form.qmbCaseNoteFolderLoc().setVisible(form.cmbHospital().getValue() != null && form.qmbWard().getValue() != null && !Boolean.TRUE.equals(form.qmbWard().getValue().getCaseNoteFolderLocation()));
		form.lblCaseNoteFolderLoc().setVisible(form.cmbHospital().getValue() != null && form.qmbWard().getValue() != null && !Boolean.TRUE.equals(form.qmbWard().getValue().getCaseNoteFolderLocation()));
	}
	
	@Override
	protected void onQmbCaseNoteFolderLocTextSubmited(String value) throws PresentationLogicException
	{
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital.");
			return;
		}
		
		if (form.qmbWard().getValue() == null)
		{
			engine.showMessage("Please select a Ward.");
			return;
		}

			LocationLiteVoCollection voColl = domain.listCaseNoteFolderLocations(form.cmbHospital().getValue(), value);
			populateCaseNoteFolderLoc(voColl);
	}
	
	private void populateCaseNoteFolderLoc (LocationLiteVoCollection voColl)
	{
		form.qmbCaseNoteFolderLoc().clear();
		
		if (voColl == null)
			return;
		
		voColl.sort();
		for (int i = 0; i < voColl.size(); i++)
		{
			form.qmbCaseNoteFolderLoc().newRow(voColl.get(i), voColl.get(i).getName());
		}

		if (voColl.size() == 1)
		{
			form.qmbCaseNoteFolderLoc().setValue(voColl.get(0));
		}
		else if (voColl.size() > 1)
		{
			form.qmbCaseNoteFolderLoc().showOpened();
		}
	}
	
	@Override
	protected void onQmbWardValueChanged() throws PresentationLogicException
	{	
		form.qmbCaseNoteFolderLoc().clear();
		updateControlsState();
	}
	
	@Override
	protected void onQmbWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a Hospital to find a Ward for.");
			return;
		}

			LocationLiteVoCollection voColl = domain.listWards(form.cmbHospital().getValue(), value);
			populateWard(voColl);
	}
	
	private void populateWard(LocationLiteVoCollection voColl)
	{
		form.qmbWard().clear();

		if (voColl == null)
			return;

		voColl.sort();
		for (int i = 0; i < voColl.size(); i++)
		{
			form.qmbWard().newRow(voColl.get(i), voColl.get(i).getName());
		}

		if (voColl.size() == 1)
		{
			form.qmbWard().setValue(voColl.get(0));
		}
		else if (voColl.size() > 1)
		{
			form.qmbWard().showOpened();
		}
	}
	
	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbWard().clear();
		form.qmbCaseNoteFolderLoc().clear();
		updateControlsState();
	}
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}
	
	private PatientElectiveTCIBedManagerCommentVo populateTciDetailsFromScreen(PatientElectiveTCIBedManagerCommentVo tciDetailsToSave)
	{
		if (tciDetailsToSave == null)
			throw new CodingRuntimeException("Invalid argument - TCI cannot be null");
		
		tciDetailsToSave.setTCIHospital(form.cmbHospital().getValue());
		tciDetailsToSave.setTCIWard(form.qmbWard().getValue());
		
		return tciDetailsToSave;
	}
	
	private String[] validateSave()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if(form.cmbHospital().getValue() == null)
		{
			errors.add("Hospital is mandatory.");
		}
		if(form.qmbWard().getValue() == null)
		{
			errors.add("Ward is mandatory.");
		}
		if(form.qmbCaseNoteFolderLoc().getValue() == null && Boolean.TRUE.equals(form.qmbCaseNoteFolderLoc().getVisible()))
		{
			errors.add("Case Note Folder Locations is mandatory.");
		}
		
		if (errors.size()>0)
		{
			return errors.toArray(new String[errors.size()]);
		}
		return null;
		
	}
	
	private Boolean save()
	{
		PatientElectiveTCIBedManagerCommentVo tciDetailsToSave = populateTciDetailsFromScreen(form.getGlobalContext().Core.gettciDetails());
		String [] errors = tciDetailsToSave.validate(validateSave());
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}			
		try 
		{
			domain.saveTCIDetails(tciDetailsToSave, form.getGlobalContext().Core.getPatientShort(), form.qmbCaseNoteFolderLoc().getValue());
			return true;			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			PatientElectiveTCIBedManagerCommentVo tciDet = domain.getTCIDetails(tciDetailsToSave.toTCIForPatientElectiveListRefVo());
			if (tciDet != null)
			{
				form.getGlobalContext().Core.settciDetails(tciDet);
				open();
			}
			else
			{
				engine.close(DialogResult.CANCEL);
			}
			return false;
		}
	}
	
	private void populateHospitalCmb()
	{
		LocationLiteVoCollection voColl = domain.listActiveHospitalsLite();

		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			form.cmbHospital().newRow(voColl.get(i), voColl.get(i).getName());
		}
	}

}
