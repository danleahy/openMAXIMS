//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.adtedittransferdetailsdialog;

import ims.core.admin.pas.vo.PendingTransfersRefVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		// TODO Auto-generated method stub
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open(args);
	}
	private void initialize()
	{
		populateHospitals();
		
	}
	private void populateHospitals()
	{
		LocationLiteVoCollection col = domain.listActiveHospitals();
		form.cmbHospital().clear();
		if (col == null)
			return;
		for (LocationLiteVo hosp: col)
		{
			form.cmbHospital().newRow(hosp, hosp.getName());			
		}
		if (col.size() == 1)
			form.cmbHospital().setValue(col.get(0));
		
	}
	private void open(Object[] args) throws FormOpenException
	{
		if (args != null && args.length > 0 && args[0] instanceof PendingTransfersRefVo)
		{	
			PendingTransfersLiteVo voTransferForEdit = domain.getPendingTransfer((PendingTransfersRefVo)args[0]);
			if (voTransferForEdit == null)
			{	
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				engine.close(DialogResult.ABORT);
				return;				
			}	
			
			form.getLocalContext().setCurrentPendingTransfer(voTransferForEdit);
			populateScreenFromData(voTransferForEdit);
		}
		else
		  throw new FormOpenException("The screen was not initialized correctly or the transfer record selected is invalid.");
	}
	private void populateScreenFromData(PendingTransfersLiteVo pendingTransfer)
	{
		if (pendingTransfer == null)
			return;
		if (pendingTransfer.getDestinationWardIsNotNull())
		{
			LocationLiteVo destinationWard = pendingTransfer.getDestinationWard();
			form.qmbWard().newRow(destinationWard, destinationWard.getName());
			form.qmbWard().setValue(destinationWard);
			
			LocationLiteVo voHosp = domain.getParentHospitalForWard(destinationWard);
			if (voHosp != null)
			{
				if (!form.cmbHospital().getValues().contains(voHosp))
					form.cmbHospital().newRow(voHosp, voHosp.getName());
				form.cmbHospital().setValue(voHosp);			}
		}
		if (pendingTransfer.getServiceIsNotNull())
		{
			form.qmbService().newRow(pendingTransfer.getService(), pendingTransfer.getService().getServiceName());
			form.qmbService().setValue(pendingTransfer.getService());
		}
		if (pendingTransfer.getSpecialtyIsNotNull())
		{
			serviceValueChanged();
			if (!form.cmbSpecialty().getValues().contains(pendingTransfer.getSpecialty()))
				form.cmbSpecialty().newRow(pendingTransfer.getSpecialty(), pendingTransfer.getSpecialty().getText());
			form.cmbSpecialty().setValue(pendingTransfer.getSpecialty());
		}
		form.dtimBedAvailable().setValue(pendingTransfer.getBedAvailableDateTime());
		form.dtimTransfReq().setValue(pendingTransfer.getTransferRequestDateTime());
		form.cmbPatientCategory().setValue(pendingTransfer.getPatientStatus());
		form.cmbTransferReason().setValue(pendingTransfer.getTransferReason());
		form.cmbWardType().setValue(pendingTransfer.getWardType());
		form.txtTransfComment().setValue(pendingTransfer.getTransferComment());
		
		Object mosUser = domain.getMosUser();
		if (mosUser != null)
		{
			String iMosName = ((MemberOfStaffLiteVo)mosUser).getIMosName();
			form.lblReqBy().setValue(iMosName != null && iMosName.length() > 60 ? iMosName.substring(0,61) : iMosName);
			if (iMosName != null && iMosName.length() > 60)
				form.lblReqBy().setTooltip(iMosName);
		}
		form.ccConsultant().setValue(pendingTransfer.getConsultant());
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
	  engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	private boolean save()
	{
		PendingTransfersLiteVo voPendingTransferToSave = populateDataFromScreen((PendingTransfersLiteVo)form.getLocalContext().getCurrentPendingTransfer().clone());
		String[] errors = voPendingTransferToSave.validate(validateUiRules());
		if (errors != null)
		{	
			engine.showErrors(errors);
			return false;
		}
		try {
			domain.savePendingTransfer(voPendingTransferToSave);
		} 
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			engine.close(DialogResult.ABORT);
			return false;
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		return true;
	}
	private String[] validateUiRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		InpatientEpisodeLiteVo voInpat = form.getLocalContext().getCurrentPendingTransfer().getInpatientEpisode();
		if (form.qmbService().getValue() == null)
			errors.add("Service is mandatory");		
		if (form.dtimTransfReq().getValue() != null && voInpat != null && form.dtimTransfReq().getValue().isLessThan(voInpat.getAdmissionDateTime()))
			errors.add("Transfer Requested Date/Time cannot be earlier than Admission Date/Time of the episode");
		if (form.cmbTransferReason().getValue() == null)
			errors.add("Transfer Reason is mandatory");
		
		if (errors.size() > 0)
		{
			return errors.toArray(new String[errors.size()]);
		}
		return null;
	}
	private PendingTransfersLiteVo populateDataFromScreen(PendingTransfersLiteVo voTransf)
	{
		if (voTransf == null)
			return null;
		voTransf.setDestinationWard(form.qmbWard().getValue());
		voTransf.setBedAvailableDateTime(form.dtimBedAvailable().getValue());
		voTransf.setTransferRequestDateTime(form.dtimTransfReq().getValue());
		voTransf.setTransferReason(form.cmbTransferReason().getValue());
		voTransf.setTransferComment(form.txtTransfComment().getValue());
		voTransf.setWardType(form.cmbWardType().getValue());
		voTransf.setService(form.qmbService().getValue());
		voTransf.setSpecialty(form.cmbSpecialty().getValue());
		voTransf.setPatientStatus(form.cmbPatientCategory().getValue());
		voTransf.setConsultant(form.ccConsultant().getValue());
		
		return voTransf;
	}
	@Override
	protected void onQmbWardTextSubmited(String value)	throws PresentationLogicException
	{
		listActiveWards(form.cmbHospital().getValue(),value);
	}
	private void listActiveWards(LocationLiteVo hospitalVo, String value)
	{
		form.qmbWard().clear();
		if (hospitalVo == null)
		{
			form.qmbWard().showOpened();
			return;
		}		
		LocationLiteVoCollection wards = domain.listWardsForHospital(hospitalVo, value);
		if (wards == null)
		{	
			form.qmbWard().showOpened();
			return;
		}	
		for (LocationLiteVo ward: wards)
		{
			form.qmbWard().newRow(ward, ward.getName());			
		}
		if (wards.size() == 1)
			form.qmbWard().setValue(wards.get(0));
		else
			form.qmbWard().showOpened();
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		serviceValueChanged();
		
	}
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateServices(value);
	}
	private void populateServices(String value)
	{
		form.qmbService().clear();
		if (value == null)
			return; 
		
		ServiceLiteVoCollection services =  domain.listServices(value);
		if (services == null)
		{	
			form.qmbService().showOpened();
			return;
		}	
		for (ServiceLiteVo serv: services)
		{
			form.qmbService().newRow(serv, serv.getServiceName());			
		}
		if (services.size() == 1)
		{	
			form.qmbService().setValue(services.get(0));
			serviceValueChanged();
		}	
		else
			form.qmbService().showOpened();
		
	}
	private void serviceValueChanged()
	{
		form.cmbSpecialty().clear();
		ServiceLiteVo selectedService = form.qmbService().getValue() ;
		if (selectedService != null && selectedService.getSpecialtyIsNotNull())
		{
			form.cmbSpecialty().newRow(selectedService.getSpecialty(), selectedService.getSpecialty().getText());
			form.cmbSpecialty().setValue(selectedService.getSpecialty());
		}
		form.ccConsultant().clear();		
		if (form.qmbService().getValue() != null)
		{				
			form.ccConsultant().initializeResponsibleHcp(MosType.MEDIC, null, form.qmbService().getValue(), null);
		}
		else
		{
			form.ccConsultant().initialize(MosType.MEDIC);
		}
	}
	@Override
	protected void onCmbHospitalValueChanged()	throws PresentationLogicException
	{
		form.qmbWard().clear();		
	}
}
