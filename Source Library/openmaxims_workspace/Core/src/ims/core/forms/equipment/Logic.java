//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.equipment;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.equipment.GenForm;
import ims.core.forms.equipment.GenForm.groupFilterEnumeration;
import ims.core.vo.EquipmentSearchCriteriaVo;
import ims.core.vo.EquipmentVo;
import ims.core.vo.EquipmentVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.EquipmentType;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final int LIST_ALL			= 2;
	private static final int LIST_ACTIVE		= 1;
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		
		//WDEV-19389 
		if (engine.getFormName().equals(form.getForms().Core.Equipment))
		{
			if (!(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getEquipmentSearchCriteriaIsNotNull() && form.getGlobalContext().Core.getEquipmentSearchCriteria().getCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().equals(form.getGlobalContext().Core.getEquipmentSearchCriteria().getCareContext())))
				form.getGlobalContext().Core.setEquipmentSearchCriteria(null);
			setGlobalContext(form.getGlobalContext().Core.getEquipmentSearchCriteria());
		}
		else if (engine.getFormName().equals(form.getForms().Core.Equipment2))
		{
			if (!(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getEquipmentSecondSearchCriteriaIsNotNull() && form.getGlobalContext().Core.getEquipmentSecondSearchCriteria().getCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().equals(form.getGlobalContext().Core.getEquipmentSecondSearchCriteria().getCareContext())))
				form.getGlobalContext().Core.setEquipmentSecondSearchCriteria(null);
			setGlobalContext(form.getGlobalContext().Core.getEquipmentSecondSearchCriteria());
		}
		//WDEV-19389 - end
		
		open();
		loadEquipmentType();
	}

	private void setGlobalContext(EquipmentSearchCriteriaVo equipmentSecondSearchCriteria)
	{
		if(equipmentSecondSearchCriteria != null)
		{
			setSearchCriteria(equipmentSecondSearchCriteria);
			try
			{
				onRadioButtongroupFilterValueChanged();
			}
			catch (PresentationLogicException e)
			{
				e.printStackTrace();
			}
		}		
	}

	private EquipmentSearchCriteriaVo getSearchCriteria()
	{
		EquipmentSearchCriteriaVo searchCriteria = new EquipmentSearchCriteriaVo();
		
		searchCriteria.setViewType(getViewType());
		searchCriteria.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		return searchCriteria;
	}
	
	
	private void setSearchCriteria(EquipmentSearchCriteriaVo equipmentSearchCriteriaVo)
	{
		setViewType(equipmentSearchCriteriaVo.getViewType());		
	}

	private void setViewType(Integer searchType)
	{
		if (searchType == null)
			return;
		
		switch (searchType)
		{
		case LIST_ALL:
			form.groupFilter().setValue(groupFilterEnumeration.rdoAll);
			break;
		case LIST_ACTIVE:
			form.groupFilter().setValue(groupFilterEnumeration.rdoActive);
			break;
		}				
	}
	
	private Integer getViewType()
	{
		groupFilterEnumeration searchType = form.groupFilter().getValue();
		if (groupFilterEnumeration.rdoAll.equals(searchType))
		{
			return LIST_ALL;
		}
		if (groupFilterEnumeration.rdoActive.equals(searchType))
		{
			return LIST_ACTIVE;
		}
		
		return null;
	}

	private void initialize()
	{
		form.groupFilter().setValue(GenForm.groupFilterEnumeration.rdoActive);
	}

	private void loadEquipmentType()
	{
		TreeNode[] coll = LookupHelper.getEquipmentType(domain.getLookupService()).getRootNodes();

		if (coll != null)
		{
			for (int i = 0; i < coll.length; i++)
			{
				EquipmentType item = (EquipmentType) coll[i];
				if (item.isActive())
					form.ctnDetails().cmbEquipment1().newRow(item, item.getText());
			}
		}
	}

	private void open()
	{
		clearScreen();

		form.grdEquipment().getRows().clear();
		form.grdEquipment().setValue(null);

		form.setMode(FormMode.VIEW);
		populateEquipmentGrid();
		
		if(form.getLocalContext().getVoEquipmentIsNotNull())
			form.getLocalContext().setVoEquipment(domain.getEquipment(form.getLocalContext().getVoEquipment()));
		
		if (form.getLocalContext().getVoEquipmentIsNotNull())
			form.grdEquipment().setValue(form.getLocalContext().getVoEquipment());
		
		populateEquipmentDetails(form.grdEquipment().getValue());

		updateControlsState();
	}

	private void populateEquipmentGrid()
	{
		EquipmentVoCollection voColl;
		PatientShort voPatientShort = form.getGlobalContext().Core.getPatientShort();

		Boolean bTherapiesEquipmentForm = new Boolean(engine.getFormName().equals(form.getForms().Core.Equipment2));
		if (bTherapiesEquipmentForm.equals(Boolean.TRUE))
			voColl = domain.listEquipmentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), form.groupFilter().getValue().equals(GenForm.groupFilterEnumeration.rdoActive));
		else
			voColl = domain.listEquipment(voPatientShort, form.groupFilter().getValue().equals(GenForm.groupFilterEnumeration.rdoActive));

		if (voColl != null)
		{
			GenForm.grdEquipmentRow row = null;
			for (int i = 0; i < voColl.size(); i++)
			{
				row = form.grdEquipment().getRows().newRow();

				if (voColl.get(i).getType().getParent() != null)
					row.setColEquipmentParent(voColl.get(i).getType().getParentNode().toString());
				if (voColl.get(i).getType() != null)
					row.setColEquipmentChild(voColl.get(i).getType().toString());
				if (voColl.get(i).getSupplier() != null)
					row.setColSupplier(voColl.get(i).getSupplier().toString());
				if (voColl.get(i).getDateRequired() != null)
					row.setColDateRequired(voColl.get(i).getDateRequired().toString());
				if (voColl.get(i).getDateSupplied() != null)
					row.setColDateSupplied(voColl.get(i).getDateSupplied().toString());
				if (voColl.get(i).getSuppliedFor() != null)
					row.setColSuppliedFor(voColl.get(i).getSuppliedFor().toString());
				if (voColl.get(i).getLoan() != null)
					row.setColLoan(voColl.get(i).getLoan().toString());
				if (voColl.get(i).getFundedBy() != null)
					row.setColFundedby(voColl.get(i).getFundedBy().toString());
				row.setValue(voColl.get(i));
				boolean hasInactivatingHCPInfo = voColl.get(i).getAuthoringInformationIsNotNull() && voColl.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull();
				if (Boolean.TRUE.equals(voColl.get(i).getInactive())) //wdev-9543
					row.setTooltip("Inactivation Reason: " +(voColl.get(i).getInactivationReasonIsNotNull() && voColl.get(i).getInactivationReason().length() > 0 ? voColl.get(i).getInactivationReason() :"")	+ " <br/> Last Updated by: " + (hasInactivatingHCPInfo ?  voColl.get(i).getAuthoringInformation().getAuthoringHcp().toString() : "")); //WDEV-18768				
				row.setBackColor(Boolean.TRUE.equals(voColl.get(i).getInactive()) ? Color.Beige : null);
			}
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}

	private void clearScreen()
	{
		form.ctnDetails().cmbEquipment1().setValue(null);
		form.ctnDetails().cmbEquipment2().setValue(null);
		form.ctnDetails().cmbFunded().setValue(null);
		form.ctnDetails().cmbLoan().setValue(null);
		form.ctnDetails().cmbSuppliedFor().setValue(null);
		form.ctnDetails().cmbSupplier().setValue(null);
		form.ctnDetails().dteRequired().setValue(null);
		form.ctnDetails().dteSupplied().setValue(null);
		form.ctnDetails().customControlAuthoringInfo().setValue(null);
	}

	private void setDefaultValues()
	{
		form.ctnDetails().customControlAuthoringInfo().initializeComponent();
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableControls(false);
	}

	private void enableControls(boolean bEnable)
	{
		form.ctnDetails().setcustomControlAuthoringInfoEnabled(bEnable);
	}

	protected void onGrdEquipmentSelectionChanged() throws PresentationLogicException
	{
		if(form.grdEquipment().getValue() instanceof EquipmentVo)
		{
			form.getLocalContext().setVoEquipment(domain.getEquipment(form.grdEquipment().getValue()));
			clearScreen();// WDEV881
			populateEquipmentDetails(form.getLocalContext().getVoEquipment());
		}

		updateControlsState();
	}

	private void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnInactivate().setVisible(form.grdEquipment().getValue() != null && !Boolean.TRUE.equals(form.grdEquipment().getValue().getInactive()));
			form.btnUpdate().setVisible(form.grdEquipment().getValue() != null && !Boolean.TRUE.equals(form.grdEquipment().getValue().getInactive()));
		}
		form.ctnDetails().setCollapsed(!(form.getMode().equals(FormMode.EDIT) || form.grdEquipment().getValue() != null));
	}

	private void populateEquipmentDetails(EquipmentVo vo)
	{
		if (vo != null)
		{
			if (vo.getAuthoringInformationIsNotNull())
				form.ctnDetails().customControlAuthoringInfo().setValue(vo.getAuthoringInformation());

			if (vo.getType() != null)
			{
				form.ctnDetails().cmbEquipment1().setValue(vo.getType().getParent());

				try
				{
					onCmbEquipment1ValueChanged();
				}
				catch (PresentationLogicException e)
				{}
				form.ctnDetails().cmbEquipment2().setValue(vo.getType());
			}
			if (vo.getSupplier() != null)
				form.ctnDetails().cmbSupplier().setValue(vo.getSupplier());
			if (vo.getDateRequired() != null)
				form.ctnDetails().dteRequired().setValue(vo.getDateRequired());
			if (vo.getDateSupplied() != null)
				form.ctnDetails().dteSupplied().setValue(vo.getDateSupplied());
			if (vo.getSuppliedFor() != null)
				form.ctnDetails().cmbSuppliedFor().setValue(vo.getSuppliedFor());
			if (vo.getLoan() != null)
				form.ctnDetails().cmbLoan().setValue(vo.getLoan());
			if (vo.getFundedBy() != null)
				form.ctnDetails().cmbFunded().setValue(vo.getFundedBy());
		}
	}

	protected void onCmbEquipment1ValueChanged() throws PresentationLogicException
	{
		form.ctnDetails().cmbEquipment2().clear();
		if (form.ctnDetails().cmbEquipment1().getValue() == null) // for blank
			// selection
			return;

		ArrayList coll = form.ctnDetails().cmbEquipment1().getValue().getChildInstances();
		EquipmentType type = null;
		for (int i = 0; i < coll.size(); i++)
		{
			type = (EquipmentType) coll.get(i);
			if (type.isActive())
				form.ctnDetails().cmbEquipment2().newRow((EquipmentType) coll.get(i), coll.get(i).toString());
		}
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		clearScreen();
		form.grdEquipment().setValue(null);// WDEV-1012
		setDefaultValues();
		enableControls(true);
		form.getLocalContext().setVoEquipment(null);
	}

	private String[] validateUIRules()
	{
		if (form.ctnDetails().cmbEquipment1().getValue()==null)
		{
			return new String[]{"Equipment Type is a mandatory field"};
		}
		return null;
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		EquipmentVo voEquipment = form.getLocalContext().getVoEquipment();
		if (voEquipment == null)
		{
			voEquipment = new EquipmentVo();
		}
		voEquipment.setAuthoringInformation(form.ctnDetails().customControlAuthoringInfo().getValue());
		voEquipment.setType(form.ctnDetails().cmbEquipment2().getValue());
		voEquipment.setSupplier(form.ctnDetails().cmbSupplier().getValue());
		voEquipment.setDateRequired(form.ctnDetails().dteRequired().getValue());
		voEquipment.setDateSupplied(form.ctnDetails().dteSupplied().getValue());
		voEquipment.setSuppliedFor(form.ctnDetails().cmbSuppliedFor().getValue());
		voEquipment.setLoan(form.ctnDetails().cmbLoan().getValue());
		voEquipment.setFundedBy(form.ctnDetails().cmbFunded().getValue());
		voEquipment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voEquipment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		String[] errors = voEquipment.validate(validateUIRules());
		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return;
		}

		try
		{
			form.getLocalContext().setVoEquipment(domain.saveEquipmentDetails(voEquipment));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		open();
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnInactivateClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.InactivationComment);
	}

	private boolean inactivateEquipment(String string)
	{
		try
		{
			// Get equipment data
			if (!form.getLocalContext().getVoEquipmentIsNotNull())
				return false;

			EquipmentVo equipment = form.getLocalContext().getVoEquipment();

			equipment.setInactive(Boolean.TRUE);
			equipment.setInactivationReason(string != null && string.length() > 0 ? string : ""); //WDEV-18768

			String[] validationErrors = equipment.validate();

			if (validationErrors != null && validationErrors.length > 0)
			{
				engine.showErrors(validationErrors);
				return false;
			}

			form.getLocalContext().setVoEquipment(domain.saveEquipmentDetails(equipment));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return false;
		}

		return true;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Core.InactivationComment.equals(formName) && DialogResult.YES.equals(result))
		{
			if (inactivateEquipment(form.getGlobalContext().Core.getInactivationComment()))
			{
				open();
				form.setMode(FormMode.VIEW);
			}
		}
	}

	@Override
	protected void onRadioButtongroupFilterValueChanged() throws PresentationLogicException {
		form.getLocalContext().setVoEquipment(null);
		open();		
		//WDEV-19389 - start
		if (engine.getFormName().equals(form.getForms().Core.Equipment))
			form.getGlobalContext().Core.setEquipmentSearchCriteria(getSearchCriteria());
		else if (engine.getFormName().equals(form.getForms().Core.Equipment2))
			form.getGlobalContext().Core.setEquipmentSecondSearchCriteria(getSearchCriteria());
		//WDEV-19389 - end
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
}
