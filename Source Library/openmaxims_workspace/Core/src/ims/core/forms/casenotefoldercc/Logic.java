//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotefoldercc;

import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CaseNoteFolderCcConfigVoCollection;
import ims.core.vo.PatientCaseNoteListVo;
import ims.core.vo.PatientCaseNoteListVoCollection;
import ims.core.vo.enums.CaseNoteFolderCcEvent;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CaseNoteStatusCollection;
import ims.core.vo.lookups.CaseNoteType;
import ims.core.vo.lookups.CaseNoteTypeCollection;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_TYPE = 1;
	private static final int COL_FOLDER = 2;
	private static final int COL_CURRENT_LOCATION = 3;
	private static final int COL_REQUESTS = 4;
	private static final int COL_STATUS = 5;
	private static final int COL_SELECT = 6;
	
	public void initialise(Boolean displaySelect) 
	{
		initializeDynamicGrid(displaySelect);
	}

	private void initializeDynamicGrid(Boolean displaySelect) 
	{
		form.dyngrdCaseNoteFolder().clear();
		
		DynamicGridColumn column = form.dyngrdCaseNoteFolder().getColumns().newColumn("Type", COL_TYPE);
		column.setWidth(70);
		column.setCanGrow(true);
		
		column = form.dyngrdCaseNoteFolder().getColumns().newColumn("Folder", COL_FOLDER);
		column.setWidth(50);
		column.setCanGrow(true);
		
		column = form.dyngrdCaseNoteFolder().getColumns().newColumn("Current Location", COL_CURRENT_LOCATION);
		column.setWidth(125);
		column.setCanGrow(true);
		
		column = form.dyngrdCaseNoteFolder().getColumns().newColumn("Requests", COL_REQUESTS);
		column.setWidth(70);
		column.setCanGrow(false);
		
		column = form.dyngrdCaseNoteFolder().getColumns().newColumn("Status", COL_STATUS);
		column.setWidth(Boolean.TRUE.equals(displaySelect) ? 100 : -1);
		column.setCanGrow(true);
				
		if (Boolean.TRUE.equals(displaySelect))
		{
			column = form.dyngrdCaseNoteFolder().getColumns().newColumn("", COL_SELECT);
			column.setWidth(-1);
		}
	}

	public void setValue(PatientRefVo patient, CaseNoteTypeCollection types, CaseNoteStatusCollection statuses) 
	{
		String typeIds = getTypeIds(types);
		String statusesIds = getStatusesIds(statuses);
		
		form.getLocalContext().setPatient(patient);
		
		PatientCaseNoteListVoCollection list = domain.listCaseNoteFolders(patient, typeIds, statusesIds);
		populateCaseNoteFolderGrid(list);
		
		updateControlsState();
	}

	private void populateCaseNoteFolderGrid(PatientCaseNoteListVoCollection listCaseNoteFolders) 
	{
		form.dyngrdCaseNoteFolder().getRows().clear();
		
		if (listCaseNoteFolders == null)
			return;
		
		for (PatientCaseNoteListVo caseNote : listCaseNoteFolders)
		{
			 addRow(caseNote);
		}
		
		if(listCaseNoteFolders.size() == 1)
		{
			form.dyngrdCaseNoteFolder().setValue(listCaseNoteFolders.get(0));
			form.getLocalContext().setAction(CaseNoteFolderCcEvent.SELECTIONCHANGE);
			form.fireCustomControlValueChanged();
		}
	}

	private void addRow(PatientCaseNoteListVo caseNote)
	{
		if(caseNote == null)
			return;
		
        DynamicGridRow row = form.dyngrdCaseNoteFolder().getRows().newRow();
         
        DynamicGridCell cellType = row.getCells().newCell(form.dyngrdCaseNoteFolder().getColumns().getByIdentifier(COL_TYPE), DynamicCellType.STRING);
        cellType.setValue(caseNote.getType().getText());
        cellType.setTooltip(caseNote.getType().getText());
        cellType.setReadOnly(true);
         
        DynamicGridCell cellFolder = row.getCells().newCell(form.dyngrdCaseNoteFolder().getColumns().getByIdentifier(COL_FOLDER), DynamicCellType.STRING);
        cellFolder.setValue(caseNote.getFolder().toString());
        cellFolder.setTooltip(caseNote.getFolder().toString());
        cellFolder.setReadOnly(true);
         
        DynamicGridCell cellLoc = row.getCells().newCell(form.dyngrdCaseNoteFolder().getColumns().getByIdentifier(COL_CURRENT_LOCATION), DynamicCellType.STRING);
        cellLoc.setValue(caseNote.getCurrentLocation() != null ? caseNote.getCurrentLocation().getName() : null);
        cellLoc.setTooltip(caseNote.getCurrentLocation() != null ? caseNote.getCurrentLocation().getName() : null);
        cellLoc.setReadOnly(true);
         
        DynamicGridCell cellRequests = row.getCells().newCell(form.dyngrdCaseNoteFolder().getColumns().getByIdentifier(COL_REQUESTS), DynamicCellType.INT);
        cellRequests.setValue(caseNote.getOpenRequests() != null ? caseNote.getOpenRequests().size() : null);
        cellRequests.setTooltip(caseNote.getOpenRequests() != null ? caseNote.getOpenRequests().size() + "" : null);
        cellRequests.setReadOnly(true);
         
        DynamicGridCell cellStatus = row.getCells().newCell(form.dyngrdCaseNoteFolder().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
        cellStatus.setValue(caseNote.getStatus() != null ? caseNote.getStatus().getText() : null);
        cellStatus.setTooltip(caseNote.getStatus() != null ? caseNote.getStatus().getText() : null);
        cellStatus.setReadOnly(true);
         
        DynamicGridColumn colSelect = form.dyngrdCaseNoteFolder().getColumns().getByIdentifier(COL_SELECT);
        if (colSelect != null)
        {
        	row.getCells().newCell(colSelect, DynamicCellType.BOOL);
        	row.setReadOnly(false);
        }
         
        row.setValue(caseNote);
	}

	private String getStatusesIds(CaseNoteStatusCollection statuses) 
	{
		if(statuses == null || statuses.size() == 0)
			return null;
		
		String ids = "";
		
		for(int i=0; i<statuses.size(); i++)
		{
			if(statuses.get(i) == null)
				continue;
			
			ids += (ids.length() > 0 ? "," : "") + statuses.get(i).getId();
		}
		
		return ids.length() > 0 ? ids : null;
	}

	private String getTypeIds(CaseNoteTypeCollection types) 
	{
		if(types == null || types.size() == 0)
			return null;
		
		String ids = "";
		
		for(int i=0; i<types.size(); i++)
		{
			if(types.get(i) == null)
				continue;
			
			ids += (ids.length() > 0 ? "," : "") + types.get(i).getId();
		}
		
		return ids.length() > 0 ? ids : null;
	}

	public PatientCaseNoteListVo getValue() 
	{
		if (form.dyngrdCaseNoteFolder().getSelectedRow() != null)
		{
			PatientCaseNoteListVo selectedRequest = (PatientCaseNoteListVo) form.dyngrdCaseNoteFolder().getSelectedRow().getValue();
			return selectedRequest;
		}

		return null;
	}

	public CaseNoteFolderCcEvent getAction() 
	{
		return form.getLocalContext().getAction();
	}

	@Override
	protected void onDyngrdCaseNoteFolderRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		form.getLocalContext().setAction(CaseNoteFolderCcEvent.SELECTIONCHANGE);
		form.fireCustomControlValueChanged();
		
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.getLocalContext().setIsACaseNoteFolderAlreadyCreated(domain.checkIfThereIsACaseNoteFolderCreated(form.getLocalContext().getPatient(), null, null, null));
		form.getLocalContext().setIsAPermanentCaseNoteFolderMissingForFolder(domain.checkIfThereIsACaseNoteFolderCreated(form.getLocalContext().getPatient(), CaseNoteStatus.MISSING, ((PatientCaseNoteListVo) form.dyngrdCaseNoteFolder().getValue() != null ? ((PatientCaseNoteListVo) form.dyngrdCaseNoteFolder().getValue()).getFolder() : null) , (PatientCaseNoteListVo) form.dyngrdCaseNoteFolder().getValue()));
		
		boolean displayContextMenu = Boolean.TRUE.equals(form.getLocalContext().getDisplayContextMenu());
		
		boolean active = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.ACTIVE.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean missing = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.MISSING.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean found = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.MARKED_AS_FOUND.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean requiresMerging = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.REQUIRES_MERGING.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean requiresCaseNote = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.REQUIRES_CASE_NOTES.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean merged = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.MERGED.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		
		boolean archive = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.ARCHIVED.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean scan = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.SCANNED.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		boolean destroy = form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteStatus.DESTROYED.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getStatus());
		
		form.getContextMenus().Core.getCaseNoteFolderMenuNEW_PERMANENTItem().setVisible(displayContextMenu);
		form.getContextMenus().Core.getCaseNoteFolderMenuNEW_TEMPORARYItem().setVisible(displayContextMenu && Boolean.TRUE.equals(form.getLocalContext().getIsACaseNoteFolderAlreadyCreated()) && missing);
		form.getContextMenus().Core.getCaseNoteFolderMenuCREATE_CASE_NOTE_FOLDERItem().setVisible(displayContextMenu && requiresCaseNote);
		form.getContextMenus().Core.getCaseNoteFolderMenuMARK_AS_MISSINGItem().setVisible(displayContextMenu && (active || found || requiresMerging));
		form.getContextMenus().Core.getCaseNoteFolderMenuCHANGE_FROM_TEMPORARY_TO_PERMANENTItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null && CaseNoteType.TEMPORARY.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getType()) && Boolean.TRUE.equals(form.getLocalContext().getIsAPermanentCaseNoteFolderMissingForFolder()));
		form.getContextMenus().Core.getCaseNoteFolderMenuMARKED_AS_FOUNDItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null && missing);
		form.getContextMenus().Core.getCaseNoteFolderMenuREQUIRES_MERGINGItem().setVisible(displayContextMenu && (active || found || missing));
		form.getContextMenus().Core.getCaseNoteFolderMenuARCHIVE_FOLDERItem().setVisible(displayContextMenu && active);
		form.getContextMenus().Core.getCaseNoteFolderMenuSCAN_FOLDERItem().setVisible(displayContextMenu && active);
		form.getContextMenus().Core.getCaseNoteFolderMenuDESTROY_FOLDERItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null && !destroy && !requiresCaseNote && !merged && !scan && !missing);
		form.getContextMenus().Core.getCaseNoteFolderMenuTRANSFER_FOLDERItem().setVisible(displayContextMenu && (active || requiresMerging || found));
		form.getContextMenus().Core.getCaseNoteFolderMenuADD_COMMENTItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null && !requiresCaseNote);
		form.getContextMenus().Core.getCaseNoteFolderMenuPRINTItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null && !requiresCaseNote);
		form.getContextMenus().Core.getCaseNoteFolderMenuMERGE_FOLDERItem().setVisible(displayContextMenu && (found || requiresMerging || (active && CaseNoteType.TEMPORARY.equals(((PatientCaseNoteListVo)form.dyngrdCaseNoteFolder().getValue()).getType()))));
		form.getContextMenus().Core.getCaseNoteFolderMenuVIEW_ALL_COMMENTSItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null);
		form.getContextMenus().Core.getCaseNoteFolderMenuVIEW_TRANSFERSItem().setVisible(displayContextMenu && form.dyngrdCaseNoteFolder().getValue() != null);
		
		form.dyngrdCaseNoteFolder().setEnabled(!FormMode.EDIT.equals(form.getMode()));
	}

	public void clearSelection() 
	{
		form.dyngrdCaseNoteFolder().setValue(null);
		updateControlsState();
	}

	public void setSelection(PatientCaseNoteListVo caseNote) 
	{
		form.dyngrdCaseNoteFolder().setValue(caseNote);
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender)	throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.NEW_PERMANENT:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.NEWPERMANENT);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.NEW_TEMPORARY:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.NEWTEMPORARY);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.CHANGE_FROM_TEMPORARY_TO_PERMANENT:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.CHANGEFROMTEMPORARYTOPERMANENT);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.MARKED_AS_FOUND:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.MARKED_AS_FOUND);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.MARK_AS_MISSING:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.MARK_AS_MISSING);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.REQUIRES_MERGING:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.REQUIRESMERGING);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.ARCHIVE_FOLDER:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.ARCHIVE);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.SCAN_FOLDER:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.SCAN);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.DESTROY_FOLDER:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.DESTROY);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.TRANSFER_FOLDER:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.TRANSFER);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.ADD_COMMENT:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.ADDCOMMENT);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.PRINT:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.PRINT);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.MERGE_FOLDER:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.MERGE);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.CREATE_CASE_NOTE_FOLDER:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.CREATECASENOTEFOLDER);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.VIEW_ALL_COMMENTS:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.VIEW_ALL_COMMENTS);
			break;
			
			case GenForm.ContextMenus.CoreNamespace.CaseNoteFolderMenu.VIEW_TRANSFERS:
				form.getLocalContext().setAction(CaseNoteFolderCcEvent.VIEW_TRANSFERS);
			break;
		}
		
		updateControlsState();
		
		form.fireCustomControlValueChanged();
	}

	public void initialise(Boolean displaySelect, Boolean displayContextMenu) 
	{
		initialise(displaySelect);
		
		form.getLocalContext().setDisplayContextMenu(displayContextMenu);
	}

	public void setValue(PatientRefVo patient, CaseNoteFolderCcConfigVoCollection configs) 
	{
		form.getLocalContext().setPatient(patient);
		
		populateCaseNoteFolderGrid(domain.listCaseNoteFolders(patient, configs));
		updateControlsState();
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	public Boolean addValue(PatientCaseNoteListVo caseNote)
	{
		addRow(caseNote);
		form.dyngrdCaseNoteFolder().setValue(caseNote);
		
		return true;
	}
}
