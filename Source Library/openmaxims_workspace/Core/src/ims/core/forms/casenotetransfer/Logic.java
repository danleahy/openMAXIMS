//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotetransfer;

import ims.admin.vo.CaseNoteTrackingConfigVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.CaseNoteRequestsColumnWidthVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteTransferVo;
import ims.core.vo.enums.CaseNoteOpenRequestComponentAction;
import ims.core.vo.lookups.CaseNoteCommentType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		newRecord();
	}

	private void initialise()
	{
		Object mosUser = domain.getMosUser();
		if(mosUser instanceof MemberOfStaffLiteVo)
		{
			form.getLocalContext().setCurrentMOS((MemberOfStaffLiteVo) mosUser);
		}
		
		CaseNoteRequestsColumnWidthVo ccRequestColumnsWidth = new CaseNoteRequestsColumnWidthVo();
		ccRequestColumnsWidth.setColumnTypeWidth(90);
		ccRequestColumnsWidth.setColumnRequestDateWidth(100);
		ccRequestColumnsWidth.setColumnRequestLocationWidth(135);
		ccRequestColumnsWidth.setColumnImage(22);
		ccRequestColumnsWidth.setColumnRequestByWidth(135);
		ccRequestColumnsWidth.setColumnSelectWidth(-1);
		
		if(form.getGlobalContext().Core.getCaseNoteRequestRef() != null)
		{
			form.getLocalContext().setSelectedCaseNoteRequest(domain.getCaseNoteRequests(form.getGlobalContext().Core.getCaseNoteRequestRef()));
		}
		
		form.ccOpenRequest().initialize(true, false, false, ccRequestColumnsWidth);
		
		form.btnTransfer().setImage(form.getImages().Core.transfer_up_down22x22);
		form.btnCancel().setImage(form.getImages().Emergency.CORECTNOTE16);
	}

	private void open()
	{
		clearScreen();
		form.setMode(FormMode.VIEW);
	}

	private void clearScreen()
	{
		form.ccOpenRequest().setValue(null);
		form.cmbType().setValue(null);
		form.dtimTransfer().setValue(null);
		form.qmbLocation().clear();
		form.ccTransferredBy().clear();
		form.cmbReason().setValue(null);
		form.txtComments().setValue(null);
		
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.qmbLocation().setEnabled(form.getGlobalContext().Core.getCaseNoteRequestRef() == null);
			form.cmbReason().setEnabled(form.getGlobalContext().Core.getCaseNoteRequestRef() == null);
		}
		
		form.ccOpenRequest().setMode(form.getMode());
		form.ccTransferredBy().setEnabled(Boolean.FALSE);	
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnTransferClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (saveTransfer())
			engine.close(DialogResult.OK);
	}

	private boolean saveTransfer()
	{
		PatientCaseNoteTransferVo record = populateTransferDataFromScreen();
		
		String[] uiErrors = validateUIRules();
						
		if(uiErrors != null)
		{
			engine.showErrors("Transfer Validation Errors", uiErrors);
			return false;
		}
		String[] errors = record.validate();
			
		if(errors != null && errors.length > 0)
		{
			engine.showErrors("Transfer Validation Errors", errors);
			return false;
		}

		try 
		{
			domain.saveTransfer(record, form.ccOpenRequest().getCheckedValues(), false);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);//WDEV-20394
			return false;
		}
		
		return true;
	}
	
	private String[] validateUIRules() 
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		if(form.dtimTransfer().getValue() != null &&  form.dtimTransfer().getValue().getDate().isLessThan(new Date()))
		{
			uiErrors.add("Transfer Date cannot be set in the past");
		}
		
		if (form.qmbLocation().getValue() == null )
		{
			uiErrors.add("Transfer to Location is mandatory"); //validate in UI to avoid duplication error msg
		}
		
		if (uiErrors.size() == 0)
		{
			return null;
		}
				
		return uiErrors.toArray(new String[uiErrors.size()]);
	}
	
	private PatientCaseNoteTransferVo populateTransferDataFromScreen()
	{
		
		PatientCaseNoteTransferVo transfer =  new PatientCaseNoteTransferVo();
		
		transfer.setPatient(form.getGlobalContext().Core.getPatientShort());
		transfer.setCaseNote(form.getGlobalContext().Core.getPatientCaseNoteFolderRef());
		transfer.setTransferredFromLocation(form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getCurrentLocation());
		transfer.setTransferredToLocation(form.qmbLocation().getValue());
		transfer.setTransferredBy((MemberOfStaffRefVo) form.ccTransferredBy().getValue());
		transfer.setTransferDate(form.dtimTransfer().getValue());
		transfer.setReasonForTransfer(form.cmbReason().getValue());
		
		if(form.txtComments().getValue() != null)
		{
			
			PatientCaseNoteCommentSaveVo comment = new PatientCaseNoteCommentSaveVo();
			
			comment.setAuthoredBy(form.getLocalContext().getCurrentMOS());
			comment.setAuthoredDate(new DateTime());
			comment.setCaseNote(form.getGlobalContext().Core.getPatientCaseNoteFolderRef());
			
			comment.setComment("Transfer Comment: " + form.txtComments().getValue());
			comment.setPatient(form.getGlobalContext().Core.getPatientShort());
			comment.setCaseNoteFolderLocation(form.qmbLocation().getValue());
			comment.setNoteType(CaseNoteCommentType.TRANSFER);
			
			transfer.setTansferComment(comment);
		}
		
		return transfer;
	}

	private void newRecord() throws PresentationLogicException
	{
		clearScreen();
		
		if(form.getLocalContext().getSelectedCaseNoteRequest() != null)
		{
			form.qmbLocation().newRow(form.getLocalContext().getSelectedCaseNoteRequest().getRequestedForLocation(), form.getLocalContext().getSelectedCaseNoteRequest().getRequestedForLocation().getName());
			form.qmbLocation().setValue(form.getLocalContext().getSelectedCaseNoteRequest().getRequestedForLocation());
			
			form.cmbReason().setValue(form.getLocalContext().getSelectedCaseNoteRequest().getReasonForRequest());
			
			CaseNoteTrackingConfigVo config = domain.getTrackingConfig();
			
			if(config == null || config.getCaseNoteRequestOffset() == null)
				throw new PresentationLogicException("Please set 'Case Note Request Offset' field on Case Note Folder Tracking Configuration form.");
			
			int offset = config.getCaseNoteRequestOffset();
			
			DateTime dateFrom = (DateTime) form.getLocalContext().getSelectedCaseNoteRequest().getRequiredByDate().clone();
			dateFrom.addHours(-offset);
			DateTime dateTo = (DateTime) form.getLocalContext().getSelectedCaseNoteRequest().getRequiredByDate().clone();
			dateTo.addHours(offset);
			
			form.ccOpenRequest().setValue(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getPatientCaseNoteFolderRef(), form.getLocalContext().getSelectedCaseNoteRequest().getRequestedForLocation(), dateFrom, dateTo);
			form.ccOpenRequest().allowSelectable(form.getGlobalContext().Core.getPatientCaseNoteFolderRef(), form.qmbLocation().getValue());
			form.ccOpenRequest().setSelection(form.getLocalContext().getSelectedCaseNoteRequest());
		}
		else
		{
			form.ccOpenRequest().setValue(form.getGlobalContext().Core.getPatientShort());
		}
		
		form.dtimTransfer().setValue(new DateTime());
		form.cmbType().setValue(form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getType());
		form.cmbFolder().setValue(form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getFolder());
		form.ccTransferredBy().setValue(form.getLocalContext().getCurrentMOS());
		
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onQmbLocationValueChanged() throws PresentationLogicException
	{
		if (form.qmbLocation().getValue() == null)
			form.ccOpenRequest().setValue(form.getGlobalContext().Core.getPatientShort());
		else
			form.ccOpenRequest().allowSelectable(form.getGlobalContext().Core.getPatientCaseNoteFolderRef(), form.qmbLocation().getValue());
	}

	@Override
	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		
		form.qmbLocation().clear();
		
		LocationLiteVoCollection locs = domain.listCaseNoteLocations(value);
		
		if(locs == null || locs.size() == 0)
			return;
		
		for(LocationLiteVo loc : locs)
		{
			if(loc == null)
				continue;
			
			if (loc.equals(form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getCurrentLocation()))
				continue;
			
			form.qmbLocation().newRow(loc, loc.getName());
		}
		
		if(locs.size() == 1)
		{
			form.qmbLocation().setValue(locs.get(0));
			form.ccOpenRequest().allowSelectable(form.getGlobalContext().Core.getPatientCaseNoteFolderRef(), form.qmbLocation().getValue());
		}
		else
			form.qmbLocation().showOpened();
		
	}

	@Override
	protected void onCcOpenRequestValueChanged() throws PresentationLogicException
	{
		if(CaseNoteOpenRequestComponentAction.REQUEST_SELECTED.equals(form.ccOpenRequest().getComponentAction()))
		{
			PatientCaseNoteRequestShortVo req = form.ccOpenRequest().getSelectedRowValue();
			
			form.qmbLocation().clear();
			
			if(req != null && req.getRequestedForLocation() != null)
			{
				form.qmbLocation().newRow(req.getRequestedForLocation(), req.getRequestedForLocation().getName());
				form.qmbLocation().setValue(req.getRequestedForLocation());
			}
		}
	}
}
