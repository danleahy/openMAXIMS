//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.pendingemergencytheatreworklist;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.PendingEmergencyAdmissionLiteVo;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.PendingEmergencyTheatreListVo;
import ims.scheduling.vo.PendingEmergencyTheatreListVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreRemovalVo;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.PendingEmergencyTheatreWorklistSearchCriteriaVo;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int	COLUMN_PATIENT_NAME		= -8;
	private static final int	COLUMN_IDENTIFIER		= -7;
	private static final int	COLUMN_PROCEDURE        = -6;
	private static final int	COLUMN_RESPONSIBLE_HCP 	= -5;
	private static final int	COLUMN_CURRENT_WARD		= -4;
	private static final int	COLUMN_URGENCY   		= -3;
	private static final int 	COLUMN_EXPECTED_WARD	= -2;
	private static final int	COLUMN_EXPECTED_DATE    = -1;
	
	
	//Component interface methods
	public void refresh()
	{		
		if (form.getGlobalContext().Core.getBedMngPendingEmergencyTheatreListCriteria() != null)
		{	
			populateSearchCriteriaFromGC(form.getGlobalContext().Core.getBedMngPendingEmergencyTheatreListCriteria());
			open();
		}
		updateControlsState();
			
	}	
	public void setFocusOnSearch()
	{
		form.imbSearch().setFocus();		
	}	
	public void initializeCustomControl()
	{
		initialise();
	}
	////----------------------------------------
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().RefMan.AddEmergencyTheatre.equals(formName) && DialogResult.OK.equals(result))
		{
			open();
		}
		else if (form.getForms().RefMan.RemovePendingEmergencyTheatre.equals(formName) && DialogResult.OK.equals(result))
		{
			removePendingEmergencyTheatre(form.getGlobalContext().Scheduling.getPendingEmergencyTheatreRemoval());
		}
		else if (form.getForms().RefMan.ReferralServiceSelectionDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			populateServicesGrid(form.getGlobalContext().RefMan.getReferralServiceSearchList());
		}
		else if (form.getForms().RefMan.BookEmergencyTheatre.equals(formName))
		{
			open();
		}
	}
	
	@Override
	protected void onChkNotInpatientValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbExpectedHospital().clear();
		form.qmbExpectedWard().clear();
		form.dteExpected().setValue(null);
		
		if (Boolean.TRUE.equals(form.chkNotInpatient().getValue()))
			form.chkInpatients().setValue(false);
		
		updateControlsState();
	}
	
	@Override
	protected void onImbAddServiceClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setReferralServiceSearchList(form.grdServices().getValues());
		engine.open(form.getForms().RefMan.ReferralServiceSelectionDialog, new Object[] {ServiceCategory.CLINICAL});
	}
	@Override
	protected void onChkListEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkExcludeEndoscopy().setValue(false);
	}
	@Override
	protected void onChkExcludeEndoscopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkListEndoscopy().setValue(false);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
		setTotals();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.PendingEmergencyTheatre.VIEW_EDIT_EMERGENCY_THEATRE:
				engine.open(form.getForms().RefMan.AddEmergencyTheatre);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PendingEmergencyTheatre.REMOVE_EMERGENCY_THEATRE:
				engine.open(form.getForms().RefMan.RemovePendingEmergencyTheatre);
			break;
			
			case GenForm.ContextMenus.RefManNamespace.PendingEmergencyTheatre.BOOK_EMERGENCY_THEATRE:
				engine.open(form.getForms().RefMan.BookEmergencyTheatre, new Object[] {(PendingEmergencyTheatreListVo)form.dyngrdResults().getValue()});
			break;	
		}
		
		updateControlsState();
	}
	private void initialise()
	{
		form.ccRespHcp().initialize(MosType.HCP, HcpDisType.MEDICAL, Boolean.TRUE);
		createDynamicGridResults();
		setTotals();
		
		populateSearchCriteriaFromGC(form.getGlobalContext().Core.getBedMngPendingEmergencyTheatreListCriteria());
		
	}
	private void clearScreen()
	{
		form.grdServices().getRows().clear();
		form.chkListEndoscopy().setValue(null);
		form.chkExcludeEndoscopy().setValue(null);
		form.ccRespHcp().clear();
		form.cmbUrgencyCategory().setValue(null);
		form.chkInpatients().setValue(null);
		form.chkNotInpatient().setValue(null);
		form.qmbExpectedHospital().clear();
		form.qmbExpectedWard().clear();
		form.dteExpected().setValue(null);
		form.dyngrdResults().getRows().clear();
		setTotals();
		
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatre(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		
		form.getGlobalContext().Core.setBedMngPendingEmergencyTheatreListCriteria(null);
	}

	private void removePendingEmergencyTheatre(PendingEmergencyTheatreRemovalVo pendingEmergencyTheatreRemoval)
	{
		if (pendingEmergencyTheatreRemoval == null || form.dyngrdResults().getValue() == null)
			return;
		
		PendingEmergencyTheatreListVo selectedRecord = (PendingEmergencyTheatreListVo) form.dyngrdResults().getValue();
		PendingEmergencyTheatreVo pendingEmergencyTheatre = domain.getPendingEmergencyTheatre(selectedRecord);
		
		if (selectedRecord.getVersion_PendingEmergencyTheatre() != pendingEmergencyTheatre.getVersion_PendingEmergencyTheatre())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		pendingEmergencyTheatre.setCurrentStatus(PendingEmergencyTheatreStatus.REMOVED);
		pendingEmergencyTheatre.setRemovalDateTime(pendingEmergencyTheatreRemoval.getRemovalDateTime());
		pendingEmergencyTheatre.setRemovalReason(pendingEmergencyTheatreRemoval.getRemovalReason());
		pendingEmergencyTheatre.setRemovedBy(pendingEmergencyTheatreRemoval.getRemovalBy());
		
		try
		{
			domain.savePendingEmergencyTheatre(pendingEmergencyTheatre);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		open();
		
	}

	private void populateSearchCriteriaFromGC(PendingEmergencyTheatreWorklistSearchCriteriaVo searchCriteria)
	{
		
		if (searchCriteria == null)
			return;
		
		populateServicesGrid(searchCriteria.getServices());
		
		form.chkExcludeEndoscopy().setValue(searchCriteria.getExcludeEndoscopyProcedures());
		form.chkListEndoscopy().setValue(searchCriteria.getListOnlyEndoscopyProcedures());
		form.ccRespHcp().setValue(searchCriteria.getResponsibleHCP());
		form.cmbUrgencyCategory().setValue(searchCriteria.getUrgencyCategory());
		form.chkInpatients().setValue(searchCriteria.getInpatientsOnly());
		form.chkNotInpatient().setValue(searchCriteria.getNotCurrentlyAnInpatient());
		
		if (searchCriteria.getExpectedHospital() != null)
		{
			form.qmbExpectedHospital().newRow(searchCriteria.getExpectedHospital(), searchCriteria.getExpectedHospital().getName());
			form.qmbExpectedHospital().setValue(searchCriteria.getExpectedHospital());
		}
		else
			form.qmbExpectedHospital().clear();
		
		if (searchCriteria.getExpectedWard() != null)
		{
			form.qmbExpectedWard().newRow(searchCriteria.getExpectedWard(), searchCriteria.getExpectedWard().getName());
			form.qmbExpectedWard().setValue(searchCriteria.getExpectedWard());
		}
		else
			form.qmbExpectedWard().clear();
		
		form.dteExpected().setValue(searchCriteria.getExpectedDate());
		
	}

	private void createDynamicGridResults()
	{
		form.dyngrdResults().clear();
		form.dyngrdResults().setSelectable(true);
		
		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		DynamicGridColumn column = form.dyngrdResults().getColumns().newColumn("Patient Name", COLUMN_PATIENT_NAME);
		
		column.setWidth(120);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn(dispIdType.getText(), COLUMN_IDENTIFIER);
		
		column.setWidth(80);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Procedure", COLUMN_PROCEDURE);
		
		column.setWidth(125);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Responsible HCP", COLUMN_RESPONSIBLE_HCP);
		
		column.setWidth(120);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Curr. Ward", COLUMN_CURRENT_WARD);
		
		column.setWidth(110);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Urgency", COLUMN_URGENCY);
		
		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Exp. Ward", COLUMN_EXPECTED_WARD);
		
		column.setWidth(110);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Exp. Date", COLUMN_EXPECTED_DATE);
		
		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
	}

	private void open()
	{
		if (form.getGlobalContext().Core.getBedMngPendingEmergencyTheatreListCriteria() != null)
		{
			doSearch();
		}
		setTotals();
		updateControlsState();
	}
	private void updateControlsState()
	{
		form.getContextMenus().RefMan.hideAllPendingEmergencyTheatreMenuItems();
		
		form.getContextMenus().RefMan.getPendingEmergencyTheatreVIEW_EDIT_EMERGENCY_THEATREItem().setVisible(form.dyngrdResults().getSelectedRow() != null);
		form.getContextMenus().RefMan.getPendingEmergencyTheatreREMOVE_EMERGENCY_THEATREItem().setVisible(form.dyngrdResults().getSelectedRow() != null);
		form.getContextMenus().RefMan.getPendingEmergencyTheatreBOOK_EMERGENCY_THEATREItem().setVisible(form.dyngrdResults().getSelectedRow() != null);
		
		form.lblHosp().setVisible(Boolean.TRUE.equals(form.chkNotInpatient().getValue()));
		form.qmbExpectedHospital().setVisible(Boolean.TRUE.equals(form.chkNotInpatient().getValue()));
		
		form.lblWard().setVisible(Boolean.TRUE.equals(form.chkNotInpatient().getValue()));
		form.qmbExpectedWard().setVisible(Boolean.TRUE.equals(form.chkNotInpatient().getValue()));
		
		form.lblDate().setVisible(Boolean.TRUE.equals(form.chkNotInpatient().getValue()));
		form.dteExpected().setVisible(Boolean.TRUE.equals(form.chkNotInpatient().getValue()));
	}
	private void populateExpectedHospitals(LocationLiteVoCollection hospitals)
	{
		form.qmbExpectedHospital().clear();
		form.qmbExpectedWard().clear();
		
		if (hospitals == null)
			return;
		
		for (LocationLiteVo hospital : hospitals)
		{
			form.qmbExpectedHospital().newRow(hospital, hospital.getName());
		}
		
		if (hospitals.size() == 1)
		{
			form.qmbExpectedHospital().setValue(hospitals.get(0));
		}
		else
		{
			form.qmbExpectedHospital().showOpened();
		}
		
	}
	private void populateExpectedWards(LocationLiteVoCollection wards)
	{
		form.qmbExpectedWard().clear();
		
		if (wards == null)
			return;
		
		for (LocationLiteVo ward : wards)
		{
			form.qmbExpectedWard().newRow(ward, ward.getName());
		}
		
		if (wards.size() == 1)
		{
			form.qmbExpectedWard().setValue(wards.get(0));
		}
		else
		{
			form.qmbExpectedWard().showOpened();
		}
		
	}
	private void doSearch()
	{
		PendingEmergencyTheatreWorklistSearchCriteriaVo searchCriteria = populateSearchCriteriaFromScreen();
		
		form.getGlobalContext().Core.setBedMngPendingEmergencyTheatreListCriteria(searchCriteria);
		
		PendingEmergencyTheatreListVoCollection records = domain.listPendingEmergencyTheatreRecords(searchCriteria);
		
		populateResultsGrid(records);
		
		updateControlsState();
		
	}
	

	private void populateResultsGrid(PendingEmergencyTheatreListVoCollection records)
	{
		form.dyngrdResults().getRows().clear();
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatre(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		setTotals();
		if (records == null || records.size() == 0)
		{
			engine.showMessage("No records found.");
			return;
		}
		
		for (int i = 0; i < records.size(); i++)
		{
			PendingEmergencyTheatreListVo pendingEmergencyTheatre = records.get(i);
			
			String createdDateTime = "Created: ";
			
			createdDateTime += pendingEmergencyTheatre.getSystemInformation() != null && pendingEmergencyTheatre.getSystemInformation().getCreationDateTime() != null ? "<b>" + pendingEmergencyTheatre.getSystemInformation().getCreationDateTime().toString() + "</b> <br/>" : "<br/>";
				
			DynamicGridRow newRow = form.dyngrdResults().getRows().newRow();
			
			DynamicGridCell cellPatient = newRow.getCells().newCell(getColumnById(COLUMN_PATIENT_NAME), DynamicCellType.STRING);
			
			cellPatient.setReadOnly(true);
			cellPatient.setValue( pendingEmergencyTheatre.getPatient() != null && pendingEmergencyTheatre.getPatient().getName() != null ? pendingEmergencyTheatre.getPatient().getName().toStringSurnameFirst() : null);
			cellPatient.setTooltip(createdDateTime + (pendingEmergencyTheatre.getPatient() != null && pendingEmergencyTheatre.getPatient().getName() != null ? pendingEmergencyTheatre.getPatient().getName().toStringSurnameFirst() : ""));
				
			
			DynamicGridCell cellPatID = newRow.getCells().newCell(getColumnById(COLUMN_IDENTIFIER), DynamicCellType.STRING);
			
			cellPatID.setReadOnly(true);
			if(pendingEmergencyTheatre.getPatient() != null)
			{
				//WDEV-22960
				StringBuilder tooltip = new StringBuilder();
				PatientId patNHSId = pendingEmergencyTheatre.getPatient().getPatId(PatIdType.NHSN);
				PatientId displayId = pendingEmergencyTheatre.getPatient().getDisplayId();
				
				if(displayId == null)
				{
					if(patNHSId != null)
					{
						tooltip.append("NHSN: ").append(patNHSId.getValue());
						cellPatID.setValue(patNHSId.getValue());
						cellPatID.setTooltip(tooltip.toString());	
					}
				}
				else
				{
					String name = ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue();
					ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(name);
					
					tooltip.append(name).append(": ").append(displayId.getValue().toString()).append("<br />");
						
					if(patNHSId != null && !PatIdType.NHSN.equals(type))
					{
						tooltip.append("NHSN: ").append(patNHSId.getValue());	
					}
					cellPatID.setValue(displayId.getValue().toString());//WDEV-20926
					cellPatID.setTooltip(tooltip.toString());
				}
				//end WDEV-22960
			}
			
			
			DynamicGridCell cellProcedure = newRow.getCells().newCell(getColumnById(COLUMN_PROCEDURE), DynamicCellType.STRING);
			
			cellProcedure.setReadOnly(true);
			
			String procedure = "";
			
			if (pendingEmergencyTheatre.getPrimaryProcedure() != null)
			{
				procedure += pendingEmergencyTheatre.getPrimaryProcedure().getProcedureName();
				
				if (pendingEmergencyTheatre.getSecondaryProcedure() != null)
				{
					procedure += ", " + pendingEmergencyTheatre.getSecondaryProcedure().getProcedureName();
				}
			}
			
			cellProcedure.setValue(procedure);
			cellProcedure.setTooltip(createdDateTime + procedure);
			
			DynamicGridCell cellResponsibleHCP = newRow.getCells().newCell(getColumnById(COLUMN_RESPONSIBLE_HCP), DynamicCellType.STRING);
			
			cellResponsibleHCP.setReadOnly(true);
			cellResponsibleHCP.setValue( pendingEmergencyTheatre.getResponsibleHCP() != null &&  pendingEmergencyTheatre.getResponsibleHCP().getName() != null ? pendingEmergencyTheatre.getResponsibleHCP().getName().toString() : null);
			cellResponsibleHCP.setTooltip(createdDateTime + (pendingEmergencyTheatre.getResponsibleHCP() != null &&  pendingEmergencyTheatre.getResponsibleHCP().getName() != null ? pendingEmergencyTheatre.getResponsibleHCP().getName().toString() : ""));
			
			
			DynamicGridCell cellUrgency = newRow.getCells().newCell(getColumnById(COLUMN_URGENCY), DynamicCellType.STRING);
			
			cellUrgency.setReadOnly(true);
			cellUrgency.setValue( pendingEmergencyTheatre.getUrgencyCategory() != null ? pendingEmergencyTheatre.getUrgencyCategory().getText() : null);
			cellUrgency.setTooltip(createdDateTime + (pendingEmergencyTheatre.getUrgencyCategory() != null ? pendingEmergencyTheatre.getUrgencyCategory().getText() : ""));
			
			
			DynamicGridCell cellCurrentWard = newRow.getCells().newCell(getColumnById(COLUMN_CURRENT_WARD), DynamicCellType.STRING);
			
			cellCurrentWard.setReadOnly(true);
			cellCurrentWard.setValue( pendingEmergencyTheatre.getPatient() != null && pendingEmergencyTheatre.getPatient().getWard() != null ? pendingEmergencyTheatre.getPatient().getWard().getName() : null);
			cellCurrentWard.setTooltip(createdDateTime + (pendingEmergencyTheatre.getPatient() != null && pendingEmergencyTheatre.getPatient().getWard() != null ? pendingEmergencyTheatre.getPatient().getWard().getName() : ""));
			
			
			DynamicGridCell cellExpectedWard = newRow.getCells().newCell(getColumnById(COLUMN_EXPECTED_WARD), DynamicCellType.STRING);
			
			cellExpectedWard.setReadOnly(true);
			cellExpectedWard.setValue( pendingEmergencyTheatre.getExpectedWard() != null ? pendingEmergencyTheatre.getExpectedWard().getName() : null);
			cellExpectedWard.setTooltip(createdDateTime + (pendingEmergencyTheatre.getExpectedWard() != null ? pendingEmergencyTheatre.getExpectedWard().getName() : ""));
			
			
			DynamicGridCell cellExpectedDate = newRow.getCells().newCell(getColumnById(COLUMN_EXPECTED_DATE), DynamicCellType.DATE);
			
			cellExpectedDate.setReadOnly(true);
			cellExpectedDate.setValue(pendingEmergencyTheatre.getExpectedDateTime() != null ? pendingEmergencyTheatre.getExpectedDateTime().getDate() : null);
			cellExpectedDate.setTooltip(createdDateTime + (pendingEmergencyTheatre.getExpectedDateTime() != null ? pendingEmergencyTheatre.getExpectedDateTime().getDate() : ""));

			newRow.setValue(pendingEmergencyTheatre);
		}

	}

	private DynamicGridColumn getColumnById(Object identifier)
	{
		return form.dyngrdResults().getColumns().getByIdentifier(identifier);
	}
	
	private void populateServicesGrid(ServiceShortVoCollection referralServiceSearchList)
	{
		form.grdServices().getRows().clear();
		
		if (referralServiceSearchList == null || referralServiceSearchList.size() == 0)
			return;
		
		for (int i = 0; i < referralServiceSearchList.size(); i++)
		{
			ServiceShortVo service = referralServiceSearchList.get(i);
			
			if (service == null)
				continue;
			
			ims.core.forms.pendingemergencytheatreworklist.GenForm.grdServicesRow row = form.grdServices().getRows().newRow();
			
			row.setColService(service.getServiceName());
			row.setValue(service);
		}		
	}
	private void setTotals()
	{
		form.lblTotal().setValue("Total: " + form.dyngrdResults().getRows().size());
	}
	private PendingEmergencyTheatreWorklistSearchCriteriaVo populateSearchCriteriaFromScreen()
	{
		
		PendingEmergencyTheatreWorklistSearchCriteriaVo searchCriteria = new PendingEmergencyTheatreWorklistSearchCriteriaVo();
		
		searchCriteria.setServices(form.grdServices().getValues());
		searchCriteria.setExcludeEndoscopyProcedures(form.chkExcludeEndoscopy().getValue());
		searchCriteria.setListOnlyEndoscopyProcedures(form.chkListEndoscopy().getValue());
		searchCriteria.setResponsibleHCP((Hcp) form.ccRespHcp().getValue());
		searchCriteria.setUrgencyCategory(form.cmbUrgencyCategory().getValue());
		searchCriteria.setInpatientsOnly(form.chkInpatients().getValue());
		searchCriteria.setNotCurrentlyAnInpatient(form.chkNotInpatient().getValue());
		searchCriteria.setExpectedHospital(form.qmbExpectedHospital().getValue());
		searchCriteria.setExpectedWard(form.qmbExpectedWard().getValue());
		searchCriteria.setExpectedDate(form.dteExpected().getValue());
		
		return searchCriteria;
		
	}
	@Override
	protected void onQmbExpectedWardTextSubmited(String value)	throws PresentationLogicException 
	{
		populateExpectedWards(domain.getWardsForHospital(form.qmbExpectedHospital().getValue(), value));		
	}
		
	@Override
	protected void onDyngrdResultsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(((PendingEmergencyTheatreListVo)form.dyngrdResults().getValue()).getPatient()));
		form.getGlobalContext().Scheduling.setPendingEmergencyTheatre((PendingEmergencyTheatreListVo)form.dyngrdResults().getValue());
		form.getGlobalContext().RefMan.setCatsReferral(((PendingEmergencyTheatreListVo)form.dyngrdResults().getValue()).getCatsReferral());
		
		updateControlsState();		
	}
	@Override
	protected void onQmbExpectedHospitalTextSubmited(String value)	throws PresentationLogicException
	{
		populateExpectedHospitals(domain.listActiveHospitals(value));
		
	}
	
	@Override
	protected void onChkInpatientsValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.chkInpatients().getValue()))
		{
			form.chkNotInpatient().setValue(false);
			
			form.qmbExpectedHospital().clear();
			form.qmbExpectedWard().clear();
			form.dteExpected().setValue(null);
			
			updateControlsState();
		}
	}
}
