//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientdocuments;

import ims.admin.vo.DocumentCategoryToFormCfgVo;
import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.patientdocuments.GenForm.GroupDateEnumeration;
import ims.core.forms.patientdocuments.GenForm.grdDetailsRow;
import ims.core.helper.ConversionHelper;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.ColumnSortOrderVo;
import ims.core.vo.DocumentAndPatientWrapperVo;
import ims.core.vo.DocumentAndPatientWrapperVoCollection;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.PatientDocumentSearchFilterVo;
import ims.core.vo.PatientDocumentSearchListVo;
import ims.core.vo.PatientDocumentSearchListVoCollection;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientForDocumentWorklistVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCategoryCollection;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.LookupHelper;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Comparator;

import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String NEW_DOCUMENT = "NEW_DOCUMENT_FROM_PATIENT_DOCUMENTS";
	
	private static final int EVENT_DATE_COLUMN = 0;
	private static final int GENERATED_DATE_COLUMN = 1;
	private static final int SPECIALTY_COLUMN = 2;
	private static final int AUTHORING_HCP_COLUMN = 3;//WDEV-13534
	private static final int DOCUMENT_TYPE_COLUMN = 4;
	private static final int DOC_NAME_COLUMN = 5;//WDEV-18815
	private static final int SOURCE_COLUMN = 6;//WDEV-18815
	
	
	private static final String AUTHORING_HCP = "Authoring HCP"; //WDEV-13337
	private static final String SOURCE = "Source";
	
	private static final String COMPLETED = "Completed"; //PDF's created within Maxims, ie edischarges, correspondence, UDA's - WDEV-13414
	private static final String IMPORTED = "Imported"; //any scanned or imported documents - WDEV-13414
	private static final String HISTORICAL = "Historical"; //all documents migrated from clinical care - WDEV-13414
	private static final String DRAFT = "Draft"; //rtf documents generated within maxims correspondence that are in a draft status - WDEV-13414
	private String 					path 				= EnvironmentConfig.getBaseUri();
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlState();	
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedDocument(null);
		form.getLocalContext().setDraftPDFFileName(null);
		search();
		updateControlState();
	}
	
	@Override
	protected void onGrdDetailsSelectionChanged()
	{
		updateLocalContext();
		updateControlState();
	}

	private void updateLocalContext()
	{
		form.getLocalContext().setSelectedDocument(null);
		if(form.grdDetails().getValue() instanceof PatientDocumentSearchListVo)
		{
			form.getLocalContext().setSelectedDocument(domain.getPatientDocument(form.grdDetails().getValue()));
		}
	}
	
	private void initialize() throws PresentationLogicException
	{
		// WDEV-13492
		// If the patient is different from the one kept in the search criteria then clear search criteria
		if (form.getGlobalContext().Core.getPatientDocumentSearchFilter() != null && form.getGlobalContext().Core.getPatientDocumentSearchFilter().getPatient() != null)
		{
			if (!form.getGlobalContext().Core.getPatientShort().getID_Patient().equals(form.getGlobalContext().Core.getPatientDocumentSearchFilter().getPatient().getID_Patient()))
				form.getGlobalContext().Core.setPatientDocumentSearchFilter(null);
		}
		
		initMosComponents();
		
		if(ConfigFlag.UI.PATIENT_DOCUMENTS_DISPLAY_EPISODEOFCARE_IN_SEARCH_CRITERIA.getValue())//WDEV-13623
		{
			bindEpisodeCombo();
		}
		
		DocumentCategoryToFormCfgVo documentCategoryConfig = domain.getDocumentCategoryConfig(form.getForms().Core.PatientDocuments.getID());
		if(documentCategoryConfig != null && documentCategoryConfig.getDocumentCategory() != null && documentCategoryConfig.getDocumentCategory().size() > 0)
		{
			bindDocumentCategory(documentCategoryConfig.getDocumentCategory());
		}
		else
		{
			DocumentCategoryCollection lookupCollection = LookupHelper.getDocumentCategory(domain.getLookupService());
			bindDocumentCategory(lookupCollection);
		}
		
		form.grdDetails().setAuthorCaption(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue());//WDEV-13337
		
		form.grdDetails().setDocSourceCaption(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue());//WDEV-13414
	}
	
	private void bindDocumentCategory(DocumentCategoryCollection lookupCollection) 
	{
		form.cmbDocType().clear();
		
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			form.cmbDocType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	
	private void initMosComponents()
	{
		form.ccMos().initialize(MosType.HCP);
		form.ccResponsibleHcp().initialize(MosType.HCP);
	}
	
	private void bindEpisodeCombo() throws PresentationLogicException
	{
		form.cmbEpisodes().clear();
		
		EpisodeofCareShortVoCollection listEpisodesOfCare = domain.listEpisodesOfCare(form.getGlobalContext().Core.getPatientShort());
		
		for (int i = 0 ; listEpisodesOfCare != null && i < listEpisodesOfCare.size() ; i++)
		{
			EpisodeofCareShortVo eoc = listEpisodesOfCare.get(i);
			
			if (eoc != null)
			{
				form.cmbEpisodes().newRow(eoc, getTextForEOC(eoc));
			}
		}
	}
	private void  convertDraftPatientDoc(PatientDocumentVo patientDocument)
	{
		if (patientDocument == null)
			return;

		String rtfFileName = null;

		ServerDocumentVo document = patientDocument.getServerDocument();
		String pdfFileName = null;
		if (document != null)
		{
			rtfFileName = document.getFileName();
			pdfFileName = convertDrafRtfToPdf(rtfFileName);
			
			if(pdfFileName == null)
				return;

//			document.setFileName(pdfFileName);
//			document.setFileType(FileType.PDF);
		}
		patientDocument.setServerDocument(document);
		form.getLocalContext().setDraftPDFFileName(pdfFileName);
	}
		
	
	private void deleteTemporaryPDFFile (String pdfFileName)
	{
		
		if (pdfFileName != null && pdfFileName.length() > 0)
		{
			File file = new File(pdfFileName);
			if (file.exists())
			{
				boolean wasDeleted = file.delete();
				if (!wasDeleted)
				{
					file.deleteOnExit();
				}
			}
							
		}
	}
		
	private String convertDrafRtfToPdf(String inputFileName)
	{
		if (inputFileName == null || inputFileName.length() == 0 || ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() == null || ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().length() ==0)
			return null;

		int inputFileTypesIndex = inputFileName.lastIndexOf(".");
		if (inputFileTypesIndex < 0)
			return null;

		String inputFileType = inputFileName.substring(inputFileTypesIndex + 1);
		String pdfFileName = null;

		int lastIndexOf = inputFileName.lastIndexOf("/");
		if (lastIndexOf < 0)
		{
			lastIndexOf = inputFileName.lastIndexOf("\\");
		}

		pdfFileName =  (path + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().endsWith("/") ? ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().replace("/", "") : ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue()) + "/" + generateName() + ".pdf").replace("/", "\\");

		byte[] buffer = readFile(getWorkAreaPath() + inputFileName);//WDEV-13366
		if (buffer == null || (buffer != null && buffer.length == 0))
			return null;

		ByteArrayOutputStream outStream = null;//WDEV-13366

		try
		{
			outStream = new ByteArrayOutputStream();

			ConversionHelper helper = new ConversionHelper();
			helper.convert(buffer, inputFileType, outStream);				
		}
		catch (Exception e)
		{
			e.printStackTrace();
			pdfFileName = null;
		}
		finally
		{
			if (outStream != null)
			{
				try
				{
					outStream.close();
				}
				catch (IOException e)
				{
					// Do Nothing
				}
			}
		}

		if(pdfFileName == null)
			return null;

		try 
		{								
			createFile(pdfFileName,outStream);
		}
		catch (Exception e)
		{
			pdfFileName = null; 
		}
		finally
		{
			if (outStream != null)
			{
				try
				{
					outStream.close();
				}
				catch (IOException e)
				{
					// Do Nothing
				}
			}
		}
		if(pdfFileName != null && pdfFileName.length() > 0)
			return pdfFileName;

		return null;
	}
	
	private void createFile(String finalPDF, ByteArrayOutputStream outputStream) throws FileNotFoundException, IOException 
	{
		if (outputStream == null || finalPDF == null)
			return;
		FileOutputStream fos = new FileOutputStream (new File(finalPDF)); 
		Document document = new Document();
		try
		{			
			fos.write(outputStream.toByteArray());
			fos.close();
			
			PdfWriter writer = PdfWriter.getInstance(document, fos);

			document.open();
			BaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
			PdfContentByte cb = writer.getDirectContent();
			cb.beginText();
			cb.setFontAndSize(bf, 9);
			cb.showTextAligned(PdfContentByte.ALIGN_CENTER, "This is a Draft Document, its contents might still change", 520, 5, 0);
			cb.endText();

			document.close();		       
		}
		catch (Exception e) 
		{
			engine.createSystemLogEntry(SystemLogType.REPORTS, SystemLogLevel.ERROR, "Error Converting DRAFT Document into PDF");
		}
		finally 
		{		
			fos.close();
			if (document.isOpen()) {
				document.close();		
			}
		}
	}	
	
	private byte[] readFile(String filePath)
	{
		File pdf = new File(filePath);
		if (!pdf.exists())
		{
			
			return null;
		}
		long size = pdf.length();

		if (size == 0)
		{
			return null;
		}
		FileInputStream fileInputStream = null;
		byte[] buffer = null;
		try
		{
			fileInputStream = new FileInputStream(pdf);

			int bytesAvailable = fileInputStream.available();

			int maxBufferSize = (int) size;

			int bufferSize = Math.min(bytesAvailable, maxBufferSize);

			buffer = new byte[bufferSize];

			int bytesRead = fileInputStream.read(buffer, 0, bufferSize);

			while (bytesRead > 0)
			{
				bytesAvailable = fileInputStream.available();
				bufferSize = Math.min(bytesAvailable, maxBufferSize);
				bytesRead = fileInputStream.read(buffer, 0, bufferSize);
			}

		}
		catch (IOException e)
		{
			buffer = null;
			engine.showMessage("Cannot view patient document");
		}
		finally
		{
			if (fileInputStream != null)
			{
				try
				{
					fileInputStream.close();
				}
				catch (IOException e1)
				{// Do Nothing

				}
			}
		}
		
		return buffer;
	}
	private String getWorkAreaPath()
	{
		String storePath = ConfigFlag.GEN.MAXIMS_DOCUMENT_WORK_AREA.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}
	private String generateName()
	{
		String str = "";

		try
		{
			// Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			// Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			// Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}

	
	private String getTextForEOC(EpisodeofCareShortVo eoc)
	{
		if (eoc == null)
			return "";
		
		StringBuilder result = new StringBuilder();
		
		result.append(eoc.createDisplayString());
		
		if (eoc.getSpecialtyIsNotNull())
		{
			result.append(" - " + eoc.getSpecialty().getText());
		}
		if (eoc.getResponsibleHCPIsNotNull())
		{
			result.append(" - " + eoc.getResponsibleHCP().getIHcpName());
		}
		
		return result.toString();
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		clearSearchScreen();
		
		if (form.getGlobalContext().Core.getPatientDocumentSearchFilterIsNotNull())
		{
			populateSearchFilterScreenFromData(form.getGlobalContext().Core.getPatientDocumentSearchFilter());
			
		}
		
		if (validateSearchCriteria(false))
		{
			populatePatientDocumentsGrid(listPatientDocumentsAndDisplayNoResultError());
			
			PatientDocumentSearchFilterVo searchFilter = form.getGlobalContext().Core.getPatientDocumentSearchFilter();
			
			if (searchFilter != null && searchFilter.getColumnSortOrder() != null)
			{
				setSortOrderForColumn(searchFilter.getColumnSortOrder().getColumnId(), searchFilter.getColumnSortOrder().getSortOrder());
			}
		}
		
		updateControlState();
	}
	
	private void setSortOrderForColumn(Integer columnId, Integer sortOrderId)
	{
		SortOrder order;
		
		if (sortOrderId == 1) // 1 is ascending but for the form to work correct we need to reverse this
			order = SortOrder.DESCENDING;
		else
			order = SortOrder.ASCENDING;
		
		if (EVENT_DATE_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderEventDate(order);
			sortColumn(EVENT_DATE_COLUMN);
		}
		else if (GENERATED_DATE_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderGeneratedDate(order);
			sortColumn(GENERATED_DATE_COLUMN);
		}
		else if (SPECIALTY_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderSpecialty(order);
			sortColumn(SPECIALTY_COLUMN);
		}
		else if (AUTHORING_HCP_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderAuthoring(order);
			sortColumn(AUTHORING_HCP_COLUMN);
		}
		else if (DOCUMENT_TYPE_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderType(order);
			sortColumn(DOCUMENT_TYPE_COLUMN);
		}
		else if (SOURCE_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderSource(order);
			sortColumn(SOURCE_COLUMN);
		}
		//WDEV-18815
		else if (DOC_NAME_COLUMN == columnId)
		{
			form.getLocalContext().setSortOrderDocName(order);
			sortColumn(DOC_NAME_COLUMN);
		}
	}

	private void updateControlState() 
	{
		//WDEV-12643
		boolean isDocumentFinal = form.getLocalContext().getSelectedDocumentIsNotNull() 
									&& !(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatusIsNotNull() 
										&& (DocumentStatus.DRAFT.equals(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatus().getCorrespondenceStatus()) 
										|| DocumentStatus.FOR_REVIEW.equals(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatus().getCorrespondenceStatus()) 
										|| DocumentStatus.FOR_UPDATE.equals(form.getLocalContext().getSelectedDocument().getCurrentDocumentStatus().getCorrespondenceStatus())));
		//WDEV-18670
		boolean isDocumentDraft = form.grdDetails().getValue() != null && isDraft(form.grdDetails().getValue().getCurrentDocumentStatus()); 
						
		form.getContextMenus().Core.getPatientDocumentsMenuNEW_DOCUMENTItem().setVisible(true);
		form.getContextMenus().Core.getPatientDocumentsMenuVIEWItem().setVisible(form.grdDetails().getValue() != null && (isDocumentFinal || isDocumentDraft));	//	WDEV-12723 //WDEV-18670 , wdev-18614
		form.getContextMenus().Core.getPatientDocumentsMenuPRINTItem().setVisible(form.grdDetails().getValue() != null && isDocumentFinal);	//	WDEV-12723, wdev-18614
		
		form.cmbEpisodes().setVisible(ConfigFlag.UI.PATIENT_DOCUMENTS_DISPLAY_EPISODEOFCARE_IN_SEARCH_CRITERIA.getValue());	//WDEV-12724
		form.lblEC().setVisible(ConfigFlag.UI.PATIENT_DOCUMENTS_DISPLAY_EPISODEOFCARE_IN_SEARCH_CRITERIA.getValue()); //WDEV-12724
	}

	private boolean isDraft(PatientDocumentStatusVo currentDocumentStatus) 
	{
		if (currentDocumentStatus != null 
			&& (DocumentStatus.DRAFT.equals(currentDocumentStatus.getCorrespondenceStatus()) || 
				DocumentStatus.FOR_REVIEW.equals(currentDocumentStatus.getCorrespondenceStatus()) || 
				DocumentStatus.FOR_UPDATE.equals(currentDocumentStatus.getCorrespondenceStatus())))
			return true;
			
		return false;		
	}

	private void populateSearchFilterScreenFromData(PatientDocumentSearchFilterVo searchFilter)
	{
		clearSearchScreen();
		
		if (searchFilter == null)
			return;
		
		if (searchFilter.getEpisodeOfCareIsNotNull())
		{
			form.cmbEpisodes().setValue(searchFilter.getEpisodeOfCare());
		}
		
		form.cmbSpecialty().setValue(searchFilter.getSpeciality());
		form.ccMos().setValue(searchFilter.getAuthoringHCP());
		form.dteFrom().setValue(searchFilter.getDateFrom());
		form.dteTo().setValue(searchFilter.getDateTo());
		form.cmbDocType().setValue(searchFilter.getCategory());
		form.ccResponsibleHcp().setValue(searchFilter.getResponsibleHcp());
		
		if(searchFilter.getUseGeneratedInsteadOfEventIsNotNull() && searchFilter.getUseGeneratedInsteadOfEvent().booleanValue())
		{
			form.GroupDate().setValue(GroupDateEnumeration.rdoGenerated);
		}
	}
	
	private void clearSearchScreen()
	{
		form.cmbEpisodes().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.ccMos().clear();
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.cmbDocType().setValue(null);
		form.ccResponsibleHcp().setValue(null);
		form.GroupDate().setValue(GroupDateEnumeration.rdoEvent);
	}
	
	private boolean validateSearchCriteria(boolean showErrors)
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		Date dateFrom = form.dteFrom().getValue();
		Date dateTo = form.dteTo().getValue();
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("'Date From' cannot be greater than 'Date To'."); //WDEV-18762
		}
		
		if (uiErrors.size() > 0)
		{
			if (showErrors)
				engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}
		
		return true;
	}
	
	private PatientDocumentSearchListVoCollection listPatientDocumentsAndDisplayNoResultError()
	{
		PatientDocumentSearchListVoCollection patDocs = domain.listPatientDocuments(
					form.getGlobalContext().Core.getPatientShort(),form.cmbEpisodes().getValue(), 
					form.cmbSpecialty().getValue(),  form.ccMos().getValue() instanceof HcpRefVo ? (HcpRefVo) form.ccMos().getValue() : null, 
					form.dteFrom().getValue(), form.dteTo().getValue(), 
					form.cmbDocType().getValue(), form.ccResponsibleHcp().getValue() instanceof HcpRefVo ? (HcpRefVo) form.ccResponsibleHcp().getValue() : null,GroupDateEnumeration.rdoGenerated.equals(form.GroupDate().getValue())?true:null);
	
		if (patDocs == null || patDocs.size() == 0)
		{
			engine.showMessage("No documents matching your search criteria were found !", "No results",MessageButtons.OK, MessageIcon.INFORMATION);
			return null;
		}
		
		return patDocs;
	}
	
	private void populatePatientDocumentsGrid(PatientDocumentSearchListVoCollection listPatientDocuments)
	{
		form.grdDetails().getRows().clear();
		
		if(listPatientDocuments == null)
			return;
		
		for (int i = 0 ; i < listPatientDocuments.size() ; i++)
		{
			newPatDocRow(listPatientDocuments.get(i));	
		}
		form.grdDetails().setValue(getRowValueFromGrid(form.getLocalContext().getSelectedDocument()));
		onGrdDetailsSelectionChanged();
	}
	
	private PatientDocumentSearchListVo getRowValueFromGrid(PatientDocumentVo selectedDocument)
	{
		for (int i = 0; i < form.grdDetails().getRows().size(); i++)
		{
			 PatientDocumentSearchListVo value = form.grdDetails().getRows().get(i).getValue();
			if (value.equals(selectedDocument))
				return value;
		}
		
		return null;
	}
	
	private void newPatDocRow(PatientDocumentSearchListVo patientDocument) 
	{
		if (patientDocument == null)
			return;
		//WDEV-18815
		grdDetailsRow newRow = form.grdDetails().getRows().newRow();
		newRow.setValue(patientDocument);
		newRow.setDate(patientDocument.getDocumentDate());
		newRow.setTooltipForDate(patientDocument.getDocumentDate()!=null ? patientDocument.getDocumentDate().toString() : null);
		newRow.setSpecialty(patientDocument.getSpecialtyIsNotNull() ? patientDocument.getSpecialty().getText() : null);
		newRow.setTooltipForSpecialty(patientDocument.getSpecialtyIsNotNull() ? patientDocument.getSpecialty().getText() : null);
		newRow.setAuthor(AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) ? patientDocument.getAuthoringHCP() : patientDocument.getResponsibleHCP());//WDEV-13337
		newRow.setTooltipForAuthor(AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue())  ? (patientDocument.getAuthoringHCPIsNotNull()? patientDocument.getAuthoringHCP().getIHcpName() : null) : (patientDocument.getResponsibleHCPIsNotNull() ? patientDocument.getResponsibleHCP().getIHcpName() : null));//WDEV-13337
		newRow.setGeneratedDate(patientDocument.getRecordingDateTimeIsNotNull()?patientDocument.getRecordingDateTime().toString():null);
		newRow.setTooltipForGeneratedDate(patientDocument.getRecordingDateTimeIsNotNull()?patientDocument.getRecordingDateTime().toString():null);
		newRow.setDocType(patientDocument.getCategoryIsNotNull() ? patientDocument.getCategory().getText() : null);
		newRow.setTooltipForDocType(patientDocument.getCategoryIsNotNull() ? patientDocument.getCategory().getText() : null);
		newRow.setDocName(patientDocument.getName());
		newRow.setTooltipForDocName(patientDocument.getName());
		newRow.setDocSource(SOURCE.equals(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue()) ? (patientDocument.getCreationTypeIsNotNull() ? patientDocument.getCreationType().getIItemText() : null) : getStatus(patientDocument));//WDEV-13414
		newRow.setTooltipForDocSource(SOURCE.equals(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue()) ? (patientDocument.getCreationTypeIsNotNull() ? patientDocument.getCreationType().getIItemText() : null) : getStatus(patientDocument));//WDEV-13414
		
		//WDEV-12723
		if(patientDocument.getCurrentDocumentStatusIsNotNull() 
			&& (DocumentStatus.DRAFT.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus()) 
				|| DocumentStatus.FOR_REVIEW.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus()) 
				|| DocumentStatus.FOR_UPDATE.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus())))
		{
			newRow.setTextColor(Color.Gray);
		}
	}

	//WDEV-13414
	private String getStatus(PatientDocumentSearchListVo patientDocument) 
	{
		if(patientDocument == null)
			return null;
		
		if(DocumentCreationType.IMPORTED.equals(patientDocument.getCreationType()) || DocumentCreationType.SCANNED.equals(patientDocument.getCreationType()))
			return IMPORTED;
		
		if(DocumentCategory.HISTORICAL.equals(patientDocument.getCategory()))
			return HISTORICAL;
		
		if(patientDocument.getCurrentDocumentStatusIsNotNull())
		{
			if(DocumentStatus.DRAFT.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus())
				|| DocumentStatus.FOR_REVIEW.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus())
				||DocumentStatus.FOR_UPDATE.equals(patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus()))
			{
				return DRAFT;
			}
		}
			
		return COMPLETED;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			//WDEV-12643
			case GenForm.ContextMenus.CoreNamespace.PatientDocumentsMenu.NEW_DOCUMENT:
				newDocument();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.PatientDocumentsMenu.VIEW:
				viewDocument();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.PatientDocumentsMenu.PRINT:
				printDocument();
			break;
		}
	}

	//WDEV-12643
	private void newDocument() 
	{
		engine.open(form.getForms().Core.DocumentWorklist, new Object[] {NEW_DOCUMENT});
	}

	private void printDocument() 
	{
		DocumentAndPatientWrapperVoCollection documents = new DocumentAndPatientWrapperVoCollection();
		
		DocumentAndPatientWrapperVo record = new DocumentAndPatientWrapperVo();
		record.setDocument(form.getLocalContext().getSelectedDocument());
		
		PatientForDocumentWorklistVo patient = new PatientForDocumentWorklistVo(form.getGlobalContext().Core.getPatientShort().getID_Patient(), form.getGlobalContext().Core.getPatientShort().getVersion_Patient());
		patient.setName(form.getGlobalContext().Core.getPatientShort().getName());
		patient.setIdentifiers(form.getGlobalContext().Core.getPatientShort().getIdentifiers());
		record.setPatient(patient);
		
		documents.add(record);

		engine.open(form.getForms().Core.MultiPrintDialog, new Object[] {documents});
	}

	private void viewDocument() 
	{
		if(form.getLocalContext().getSelectedDocumentIsNotNull())
		{
			PatientDocumentVo selectedPatDocumentVo = form.getLocalContext().getSelectedDocument();
			String fullPath = "";
			boolean isDraft = selectedPatDocumentVo != null  && isDraft(selectedPatDocumentVo.getCurrentDocumentStatus());
			boolean showWarningMessage = ConfigFlag.UI.PATIENT_DOCUMENTS_VIEW_DRAFT_WARNING_MESSAGE.getValue() != null && ConfigFlag.UI.PATIENT_DOCUMENTS_VIEW_DRAFT_WARNING_MESSAGE.getValue().length() > 0 && isDraft;
			if (isDraft)
			{
				if(!loadSelectedDocument())
					return;
				convertDraftPatientDoc(selectedPatDocumentVo);
				fullPath = EnvironmentConfig.getAplicationURL() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().endsWith("/") ? ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().replace("/", "") : ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue()) + "/" + getBaseName(form.getLocalContext().getDraftPDFFileName());
			}
			ServerDocumentVo document = form.getLocalContext().getSelectedDocument().getServerDocument();
			if(document != null)
			{
				if (FileType.PDF.equals(document.getFileType()))
				{
					fullPath = getFullPath(document);
				}
				engine.open(form.getForms().Core.PatientDocumentView, new Object[] {fullPath.replace("/", "\\"),showWarningMessage},true,true);//WDEV-18651 //WDEV-1867			
			}
		}
	}
	
	private boolean loadSelectedDocument()
	{
		if (form.grdDetails().getValue() != null)
		{

				form.getLocalContext().setSelectedDocument(domain.getPatientDocument(form.grdDetails().getValue()));
				
				if (form.getLocalContext().getSelectedDocument() == null)
				{
					engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
					form.getLocalContext().setSelectedDocument(null);
					open();
					return false;
				}		
		}		
		return true;
	}

	private String getBaseName(String fullFileName) 
	{
		if (fullFileName != null)
		{
			int ind = fullFileName.lastIndexOf("/");
			if (ind == -1)
			{
				ind = fullFileName.lastIndexOf("\\");
			}
			if (ind == -1)
				return fullFileName;

			if (ind + 1 == fullFileName.length())
				return "";

			return fullFileName.substring(ind + 1);
		}

		return null;
	}
	private String getFullPath(ServerDocumentVo document)
	{
		return getMaximsDocumentStorePath() + document.getFileName();	//WDEV-13366
	}
	
	//WDEV-13366
	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.FILE_SERVER_URL.getValue();
		
		if(!storePath.endsWith("/"))
			storePath = storePath + "/";
				
		return storePath;
	}
	
	private void clearScreen()
	{
		form.getGlobalContext().Core.setPatientDocumentSearchFilter(null);
		form.grdDetails().getRows().clear();
		form.getLocalContext().setSelectedDocument(null);
		form.getLocalContext().setDraftPDFFileName(null);
		clearSearchScreen();
	}
	
	private void search() 
	{
		form.grdDetails().getRows().clear();//	WDEV-13636
		
		if (validateSearchCriteria(true))
		{
			saveSearchFilter();
			populatePatientDocumentsGrid(listPatientDocumentsAndDisplayNoResultError());
			
			PatientDocumentSearchFilterVo searchFilter = form.getGlobalContext().Core.getPatientDocumentSearchFilter();
			
			if (searchFilter != null && searchFilter.getColumnSortOrder() != null)
			{
				setSortOrderForColumn(searchFilter.getColumnSortOrder().getColumnId(), searchFilter.getColumnSortOrder().getSortOrder());
			}
			
			updateLocalContext();
		}
	}
	
	private void saveSearchFilter()
	{
		form.getGlobalContext().Core.setPatientDocumentSearchFilter(populateSearchFilterDataFromScreen());
	}
	
	private PatientDocumentSearchFilterVo populateSearchFilterDataFromScreen()
	{
		PatientDocumentSearchFilterVo searchFilter;
		
		if (form.getGlobalContext().Core.getPatientDocumentSearchFilter() == null)
			searchFilter = new PatientDocumentSearchFilterVo();
		else
			searchFilter = form.getGlobalContext().Core.getPatientDocumentSearchFilter();
			
		searchFilter.setPatient(form.getGlobalContext().Core.getPatientShort());				// WDEV-13492
		searchFilter.setEpisodeOfCare(form.cmbEpisodes().getValue());
		searchFilter.setSpeciality(form.cmbSpecialty().getValue());
		searchFilter.setAuthoringHCP(form.ccMos().getValue());
		searchFilter.setDateFrom(form.dteFrom().getValue());
		searchFilter.setDateTo(form.dteTo().getValue());
		searchFilter.setCategory(form.cmbDocType().getValue());
		searchFilter.setResponsibleHcp(form.ccResponsibleHcp().getValue());
		searchFilter.setUseGeneratedInsteadOfEvent(GroupDateEnumeration.rdoGenerated.equals(form.GroupDate().getValue())?true:null);
		
		return searchFilter;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(form.getForms().Core.MultiPrintDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(form.getGlobalContext().Core.getPatientDocumentsErrorsIsNotNull() && form.getGlobalContext().Core.getPatientDocumentsErrors().size() > 0)
			{
				form.getGlobalContext().Core.setPatientDocumentsErrors(null);
				engine.showErrors(new String[] {"The document could not be printed."});
			}
		}
		if (form.getForms().Core.PatientDocumentView.equals(formName))
		{
			deleteTemporaryPDFFile(form.getLocalContext().getDraftPDFFileName());
			open();
		}
		updateControlState();
	}

	@Override
	protected void onGrdDetailsGridHeaderClicked(int column) throws PresentationLogicException
	{
		sortColumn(column);
	}

	//WDEV-18647
	private void sortColumn(int column)
	{
		PatientDocumentSearchListVo back = form.grdDetails().getValue();
		PatientDocumentSearchListVoCollection values = form.grdDetails().getValues();
		
		form.grdDetails().getRows().clear();
		
		switch (column)
		{
			case EVENT_DATE_COLUMN:
				form.getLocalContext().setSortOrderEventDate(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderEventDate()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new EventDateComparator(form.getLocalContext().getSortOrderEventDate()));
				addColumnSortToSearchCriteriaGC(EVENT_DATE_COLUMN, form.getLocalContext().getSortOrderEventDate());
			break;
			
			case GENERATED_DATE_COLUMN:
				form.getLocalContext().setSortOrderGeneratedDate(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderGeneratedDate())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new PatientDocGeneratedDateComparator(form.getLocalContext().getSortOrderGeneratedDate()));
				addColumnSortToSearchCriteriaGC(GENERATED_DATE_COLUMN, form.getLocalContext().getSortOrderGeneratedDate());
			break;
			
			case SPECIALTY_COLUMN:
				form.getLocalContext().setSortOrderSpecialty(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderSpecialty())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new SpecialtyComparator(form.getLocalContext().getSortOrderSpecialty()));
				addColumnSortToSearchCriteriaGC(SPECIALTY_COLUMN, form.getLocalContext().getSortOrderSpecialty());
			break;
			
			//WDEV-13534
			case AUTHORING_HCP_COLUMN:
				form.getLocalContext().setSortOrderAuthoring(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAuthoring()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new PatientDocAuthoringComparator(form.getLocalContext().getSortOrderAuthoring()));
				addColumnSortToSearchCriteriaGC(AUTHORING_HCP_COLUMN, form.getLocalContext().getSortOrderAuthoring());
			break;
			
			case DOCUMENT_TYPE_COLUMN:
				form.getLocalContext().setSortOrderType(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderType())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new DocumentTypeComparator(form.getLocalContext().getSortOrderGeneratedDate()));
				addColumnSortToSearchCriteriaGC(DOCUMENT_TYPE_COLUMN, form.getLocalContext().getSortOrderType());
			break;
			
			case SOURCE_COLUMN:
				form.getLocalContext().setSortOrderSource(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderSource())? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new SourceComparator(form.getLocalContext().getSortOrderSource()));
				addColumnSortToSearchCriteriaGC(SOURCE_COLUMN, form.getLocalContext().getSortOrderSource());
			break;
			
			//WDEV-18815
			case DOC_NAME_COLUMN:
				form.getLocalContext().setSortOrderDocName(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderDocName()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new DocumentNameComparator(form.getLocalContext().getSortOrderDocName()));
				addColumnSortToSearchCriteriaGC(DOC_NAME_COLUMN, form.getLocalContext().getSortOrderDocName());
			break;
			
			default:
			break;
		}
		
		populatePatientDocumentsGrid(values);
		form.grdDetails().setValue(back);
	}
	
	private void addColumnSortToSearchCriteriaGC(int identifierColumnId, SortOrder sortOrder)
	{
		if (form.getGlobalContext().Core.getPatientDocumentSearchFilter() == null)
			form.getGlobalContext().Core.setPatientDocumentSearchFilter(new PatientDocumentSearchFilterVo());
		
		ColumnSortOrderVo columnSortOrder = new ColumnSortOrderVo();
		
		columnSortOrder.setColumnId(identifierColumnId);
		
		if (SortOrder.ASCENDING.equals(sortOrder))
			columnSortOrder.setSortOrder(1);
		else
			columnSortOrder.setSortOrder(-1);
		
		form.getGlobalContext().Core.getPatientDocumentSearchFilter().setColumnSortOrder(columnSortOrder);
		
	}

	public class EventDateComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public EventDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public EventDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date rez1 = null;
			Date rez2 = null;
			
			if(ob1 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps1 = (PatientDocumentSearchListVo)ob1;
				rez1 =  ps1.getDocumentDate();
			}
			if(ob2 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps2 = (PatientDocumentSearchListVo)ob2;
				rez2 = ps2.getDocumentDate();
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareTo(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	class PatientDocGeneratedDateComparator implements Comparator<PatientDocumentSearchListVo>
	{
		private int order =1;
		public PatientDocGeneratedDateComparator()
		{
			order = 1;
		}
		public PatientDocGeneratedDateComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(PatientDocumentSearchListVo o1, PatientDocumentSearchListVo o2)
		{
			if (o1 != null && o1.getRecordingDateTimeIsNotNull() && o2!=null && o2.getRecordingDateTimeIsNotNull())
			{
				return order*o1.getRecordingDateTime().compareTo(o2.getRecordingDateTime());
			}
			if (o1 == null || !o1.getRecordingDateTimeIsNotNull())
				return -1*order;
			if (o2 == null || !o2.getRecordingDateTimeIsNotNull())
				return order;
			
			return 0;
		}	
	}
	
	public class SpecialtyComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public SpecialtyComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SpecialtyComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps1 = (PatientDocumentSearchListVo)ob1;
				rez1 = ps1.getSpecialty() != null ? ps1.getSpecialty().getText():null;
			}
			if(ob2 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps2 = (PatientDocumentSearchListVo)ob2;
				rez2 = ps2.getSpecialty() != null ? ps2.getSpecialty().getText():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	//WDEV-13534
	class PatientDocAuthoringComparator implements Comparator<PatientDocumentSearchListVo>
	{
		private int order = 1;
		public PatientDocAuthoringComparator()
		{
			order = 1;
		}
		public PatientDocAuthoringComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare(PatientDocumentSearchListVo o1, PatientDocumentSearchListVo o2)
		{
			if (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()))
			{
				if(o1 != null && o1.getAuthoringHCPIsNotNull() && o2 != null && o2.getAuthoringHCPIsNotNull())
					return order*o1.getAuthoringHCP().compareTo(o2.getAuthoringHCP());
			}
			else if(!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()))
			{
				if(o1 != null && o1.getResponsibleHCPIsNotNull() && o2 != null && o2.getResponsibleHCPIsNotNull())
					return order*o1.getResponsibleHCP().compareTo(o2.getResponsibleHCP());
			}
			
			if (o1 == null || (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o1.getAuthoringHCPIsNotNull()) || (!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o1.getResponsibleHCPIsNotNull()))
				return -1 * order;
			
			if (o2 == null || (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o2.getAuthoringHCPIsNotNull()) || (!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o2.getResponsibleHCPIsNotNull()))
				return order;
			
			return 0;
		}	
	}
	
	public class DocumentTypeComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public DocumentTypeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DocumentTypeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
			
			if(ob1 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps1 = (PatientDocumentSearchListVo)ob1;
				rez1 = ps1.getCategory() != null ? ps1.getCategory().getText():null;
			}
			if(ob2 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps2 = (PatientDocumentSearchListVo)ob2;
				rez2 = ps2.getCategory() != null ? ps2.getCategory().getText():null;
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	public class SourceComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public SourceComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SourceComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String rez1 = null;
			String rez2 = null;
	
			if(ob1 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps1 = (PatientDocumentSearchListVo)ob1;
				
				if (SOURCE.equals(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue()))
					rez1 = ps1.getCreationType() != null ? ps1.getCreationType().getText():null;
				else getStatus(ps1);
					
			}
			if(ob2 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps2 = (PatientDocumentSearchListVo)ob2;
				
				if (SOURCE.equals(ConfigFlag.UI.PATIENT_DOCUMENT_DISPLAY_STATUS_COLUMN.getValue()))
					rez2 = ps2.getCategory() != null ? ps2.getCategory().getText():null;
				else getStatus(ps2);
			}
			
			if(rez1 != null && rez2 != null)
				return  rez1.compareToIgnoreCase(rez2)*direction;
			
			if(rez1 != null && rez2 == null)
				return  direction;
			
			if(rez2 != null && rez1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
	//WDEV-18815
	public class DocumentNameComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public DocumentNameComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DocumentNameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String name1 = null;
			String name2 = null;
			
			if(ob1 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps1 = (PatientDocumentSearchListVo)ob1;
				name1 = ps1.getName();
			}
			if(ob2 instanceof PatientDocumentSearchListVo)
			{
				PatientDocumentSearchListVo ps2 = (PatientDocumentSearchListVo)ob2;
				name2 = ps2.getName();
			}
			
			if(name1 != null && name2 != null)
				return  name1.compareToIgnoreCase(name2)*direction;
			
			if(name1 != null && name2 == null)
				return  direction;
			
			if(name2 != null && name1 == null)
				return (-1)*direction;
			
			return 0;
		}
	}
	
}
