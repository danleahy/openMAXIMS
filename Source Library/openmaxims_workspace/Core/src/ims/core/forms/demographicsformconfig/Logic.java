//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.demographicsformconfig;

import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String COMM_CHANNRLS_DEMOGR 		= "DEM22";
	private static final Integer	COLUMN_SCREENCONTROL	= new Integer(1);
	private static final Integer	COLUMN_REQUIRE			= new Integer(2);

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		createDyngrdPatientCodingList();
	}
	private void createDyngrdPatientCodingList()
	{
		form.dyngrdDemographicControls().getRows().clear();
		form.dyngrdDemographicControls().setSelectable(false);
		
		DynamicGridColumn columnName = form.dyngrdDemographicControls().getColumns().newColumn("Screen Control(s)", COLUMN_SCREENCONTROL);
		columnName.setCanGrow(true);
		columnName.setWidth(670);
		columnName = form.dyngrdDemographicControls().getColumns().newColumn("Required", COLUMN_REQUIRE);
		columnName.setCanGrow(true);
		columnName.setHeaderAlignment(Alignment.CENTER);
		columnName.setAlignment(Alignment.CENTER);
		columnName.setWidth(-1);
		
		
	}
	private void open()
	{
		DemographicControlsConfigVoCollection tempColl = domain.getDemographicControlsConfig();
		populateScreenFromData(tempColl);
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData(DemographicControlsConfigVoCollection tempColl)
	{
		form.dyngrdDemographicControls().getRows().clear();
		if( tempColl == null || tempColl.size() == 0)
			return;
		for( DemographicControlsConfigVo democontrolsConfVo : tempColl)
		{
			if( democontrolsConfVo != null )
			{
				
				DynamicGridRow newRow = form.dyngrdDemographicControls().getRows().newRow();
				DynamicGridCell rowCell = newRow.getCells().newCell(getColumn(COLUMN_SCREENCONTROL), DynamicCellType.STRING);
				rowCell.setValue(democontrolsConfVo.getControlDescriptionOnForm());
				rowCell.setTooltip(democontrolsConfVo.getControlDescriptionOnForm());
				rowCell.setReadOnly(true);
				rowCell.setAutoPostBack(false);
				
				rowCell = newRow.getCells().newCell(getColumn(COLUMN_REQUIRE), DynamicCellType.BOOL);
				rowCell.setValue(democontrolsConfVo.getIsMandatory());
				
				rowCell.setReadOnly(false);
				rowCell.setAutoPostBack(false);
				
				newRow.setValue(democontrolsConfVo);
				
				if( democontrolsConfVo.getControlIMSIDIsNotNull() && democontrolsConfVo.getControlIMSID().equals(COMM_CHANNRLS_DEMOGR))
				{
					rowCell.setAutoPostBack(true);
				}
				
				
				
				
				
			}
		}
		
		
	}
	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdDemographicControls().getColumns().getByIdentifier(identifier);
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		
		if( form.getForms().Admin.DemographicsComunicationChannelsConfigDialog.equals(formName) )			
		{
			if(	DialogResult.OK.equals(result))
			{
				if( form.dyngrdDemographicControls().getSelectedRow() != null )
					form.dyngrdDemographicControls().getSelectedRow().setValue(form.getGlobalContext().Core.getDemographicControlsConfigVo());
				
				form.getGlobalContext().Core.setDemographicControlsConfigVo(null);
			}
			else
			{
				if( form.dyngrdDemographicControls().getSelectedRow() != null )
				{		
					DynamicGridRow row = form.dyngrdDemographicControls().getSelectedRow();
					DynamicGridCell cellsel = row.getCells().get(getColumn(COLUMN_REQUIRE));
					cellsel.setValue(false);
					if( form.dyngrdDemographicControls().getSelectedRow().getValue() != null )
					{
						((DemographicControlsConfigVo) form.dyngrdDemographicControls().getSelectedRow().getValue()).setChannelType(null);
						((DemographicControlsConfigVo) form.dyngrdDemographicControls().getSelectedRow().getValue()).setIsMandatory(false);
					}
				}
			}
		}

	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();
	}
	private boolean save()
	{
		DemographicControlsConfigVoCollection recordColl = populateDataFromScreen();
		if( recordColl == null || recordColl.size() == 0 )
			return false;
		
		String[] arrErrors = recordColl.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		try
		{
			domain.save(recordColl);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;

			
	}
	private DemographicControlsConfigVoCollection populateDataFromScreen()
	{
		if( form.dyngrdDemographicControls().getRows().size() == 0 )
			return null;
		
		DemographicControlsConfigVoCollection demoConfigVoColl = new DemographicControlsConfigVoCollection();
		for(int i = 0; i < form.dyngrdDemographicControls().getRows().size();i++)
		{
			DemographicControlsConfigVo tempVo = (DemographicControlsConfigVo) form.dyngrdDemographicControls().getRows().get(i).getValue();
			if( tempVo != null)
				demoConfigVoColl.add(tempVo);
			
		}
		return demoConfigVoColl;
	}
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}
	private void updateControlsState()
	{
	
		if( form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.dyngrdDemographicControls().getRows().size() > 0);
		}
	}
	
	
	
	protected void onBtnDeselectAllClick() throws PresentationLogicException
	{
		

		for(int i = 0; i < form.dyngrdDemographicControls().getRows().size();i++)
		{
			DemographicControlsConfigVo tempVo = (DemographicControlsConfigVo) form.dyngrdDemographicControls().getRows().get(i).getValue();
			DynamicGridRow row = form.dyngrdDemographicControls().getRows().get(i);
			DynamicGridCell cellsel = row.getCells().get(getColumn(COLUMN_REQUIRE));
			if( tempVo != null)
			{
				cellsel.setValue(false);
				tempVo.setIsMandatory(Boolean.FALSE);
				if( tempVo.getControlIMSIDIsNotNull() && tempVo.getControlIMSID().equals(COMM_CHANNRLS_DEMOGR)) 
				{
					tempVo.setChannelType(null);
				}
				
				form.dyngrdDemographicControls().getRows().get(i).setValue(tempVo);
								
			}
			
		}
				
	}
	
	protected void onBtnSelectAllClick() throws PresentationLogicException
	{
		
		DemographicControlsConfigVo tempForCommChannelsVo = null;
		
		for(int i = 0; i < form.dyngrdDemographicControls().getRows().size();i++)
		{
			DemographicControlsConfigVo tempVo = (DemographicControlsConfigVo) form.dyngrdDemographicControls().getRows().get(i).getValue();
			DynamicGridRow row = form.dyngrdDemographicControls().getRows().get(i);
			DynamicGridCell cellsel = row.getCells().get(getColumn(COLUMN_REQUIRE));
			
			if( tempVo != null)
			{
				cellsel.setValue(true);
				tempVo.setIsMandatory(Boolean.TRUE);
				
				if( tempVo.getControlIMSIDIsNotNull() && tempVo.getControlIMSID().equals(COMM_CHANNRLS_DEMOGR)) 
				{
					tempForCommChannelsVo = tempVo;
					
				}
				form.dyngrdDemographicControls().getRows().get(i).setValue(tempVo);
			}
		}
		if( tempForCommChannelsVo != null )
		{
			form.dyngrdDemographicControls().setValue(tempForCommChannelsVo);
			engine.open(form.getForms().Admin.DemographicsComunicationChannelsConfigDialog, new Object[] {tempForCommChannelsVo});
		}

		
		
		
		
	}
	
	protected void onDyngrdDemographicControlsCellValueChanged(DynamicGridCell cell)
	{
		if( cell.getColumn().equals(getColumn(COLUMN_REQUIRE)))
		{
			DynamicGridRow row = cell.getRow(); 
			boolean isChecked = Boolean.TRUE.equals(cell.getValue()); 
			if( isChecked == true && row != null && row.getValue() != null && ((DemographicControlsConfigVo) row.getValue()).getControlIMSIDIsNotNull() && ((DemographicControlsConfigVo) row.getValue()).getControlIMSID().equals(COMM_CHANNRLS_DEMOGR)) 
    		{
    			engine.open(form.getForms().Admin.DemographicsComunicationChannelsConfigDialog, new Object[] {row.getValue()});
    		}
    		else
    		{
    			if( row != null && row.getValue() != null )
    			{
    				((DemographicControlsConfigVo) row.getValue()).setIsMandatory(isChecked);
    			}
    		}
		}
		
	}
}
