//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3180.15565)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.demographicscomponent;

import ims.admin.helper.NHSNumberCalculator;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.demographicscomponent.GenForm.grdCommChannelsRow;
import ims.core.forms.demographicscomponent.GenForm.grdIdentifiersRow;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.NationalHealthCoverVo;
import ims.core.vo.NextOfKin;
import ims.core.vo.OrganisationVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.AddressType;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatIdTypeCollection;
import ims.core.vo.lookups.RegistrationSourceOfInfo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ISelectedPatient;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.utils.textile.Textile;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	
	private static final long serialVersionUID = 1L;
	
	//wdev-19528
	private static final String TITLE_DEMOGR 				= "DEM01";
	private static final String FORENAME_DEMOGR 			= "DEM02";
	private static final String MIDDLENAME_DEMOGR 			= "DEM03";
	private static final String SURNAME_DEMOGR 				= "DEM04";
	private static final String SEX_DEMOGR 					= "DEM05";
	private static final String DOB_DEMOGR 					= "DEM06";
	private static final String MARITAL_STATUS_DEMOGR		= "DEM07";
	private static final String OCCUPATION_DEMOGR 			= "DEM08";
	private static final String RELIGION_DEMOGR 			= "DEM09";
	private static final String ETHNIC_ORIGIN_DEMOGR		= "DEM10";
	
	private static final String OTHER_ADDRESSES_DEMOGR		= "DEM21";
	
	private static final String COMM_CHANNRLS_DEMOGR 		= "DEM22";
	private static final String NEXT_OF_KIN_NAME_DEMOGR 	= "DEM23";
	
	private static final String PREF_LANGUAGE_DEMOGR 		= "DEM28";
	
	private static final String MEDICAL_CARD_NO_DEMOGR 		= "DEM40";
	private static final String ELIG_FOR_MED_DEMOGR 		= "DEM41";
	
	private static final String GP_NAME_DEMOGR 				= "DEM45";
	
	
	
	
	//--------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
		//wdev-19528
		form.getLocalContext().setDemographicControlsConfig(domain.getDemographicControlsConfig());
		if( form.getLocalContext().getDemographicControlsConfigIsNotNull() && form.getLocalContext().getDemographicControlsConfig().size() > 0)
		{
			setConfigurableFields(form.getLocalContext().getDemographicControlsConfig());
			form.ccAddressSearch().setConfigurableFields(form.getLocalContext().getDemographicControlsConfig());
		}
		
		form.setMode(FormMode.EDIT);
		if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
		{
			form.lblEthnicOrigin().setVisible(true);
			form.cmbEthnic().setVisible(true);
			form.cmbEthnic().setEnabled(false);
			form.cmbOccupation().setVisible(false);
			form.lblOccupation().setVisible(false);
			form.lyrAdditionalDetails().hide();
		}
		else if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			form.lyrAdditionalDetails().showtabMedicalCardIrish();
			form.lblEthnicOrigin().setVisible(false);
			form.cmbEthnic().setVisible(false);
			form.cmbOccupation().setEnabled(false);
		}
		
		if (Boolean.TRUE.equals(ConfigFlag.UI.SHOW_PREFERRED_LANGUAGE_ON_DEMOGRAPHICS.getValue()))
		{
			form.lyrAdditionalDetails().showtabPLanguage();
			
		}

		form.getGlobalContext().Core.setNOKDetails(null);
		form.getGlobalContext().Core.setGPDetails(null);
		form.getGlobalContext().Core.setDeathDetails(null);
		
		if (args != null && args.length == 1 && args[0] instanceof ISelectedPatient)
		{
			form.getGlobalContext().Core.setPatientShort(null);
			PatientShort ps = new ims.core.vo.PatientShort(((ISelectedPatient) args[0]).getISelectedPatientID(), 0);
			PatientId psId = new PatientId();
			PatientIdCollection psColl = new PatientIdCollection();
			ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(((ISelectedPatient) args[0]).getISelectedPatientInterfaceIDType());
			if (type != null)
			{
				psId.setType(type);
				psId.setValue(((ISelectedPatient) args[0]).getISelectedPatientInterfaceID());
				if (psId.getValueIsNotNull())
				{
					psColl.add(psId);
					ps.setIdentifiers(psColl);
				}
			}

			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);

		}

		form.getLocalContext().setbEventFired(false);//wdev-6137
		form.btnDeceased().setVisible(false);
		displayDemographics();
		form.setMode(FormMode.EDIT);
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			///if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
				//form.btnDeceased().setVisible(!form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.btnDeceased().setVisible(false);
			form.dteDod().setVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.dteDod().setEnabled(false);
			form.timTod().setVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
			form.timTod().setEnabled(false);
			form.lblDod().setVisible(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull());
		}

		//wdev-19528
		if( !form.getLocalContext().getDemographicControlsConfigIsNotNull() || form.getLocalContext().getDemographicControlsConfig().size() == 0 )
		{
			form.cmbSex().setRequired(ConfigFlag.DOM.GENDER_IS_MANDATORY_FOR_REGISTRATION.getValue());	//WDEV-13031
		}
		
		updateControlsState();
	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			form.getLocalContext().setbUpdatePDS(Boolean.TRUE);//WDEV-15197
			save(null, Boolean.FALSE, Boolean.TRUE);
		}
		if (formName.equals(form.getForms().Core.DateOfDeathDialog) && result.equals(DialogResult.OK))
			displayDemographics();
		else if (formName.equals(form.getForms().Core.YesNoDialog) && ( result.equals(DialogResult.NO) || result.equals(DialogResult.CANCEL)) )
		{
			// Display previous data 
			populateScreenFromData(form.getLocalContext().getsavedPatient());
			form.getLocalContext().setbEventFired(true);
			form.fireCustomControlValueChanged();

		}

		if (formName.equals(form.getForms().Core.GPDetails) && result.equals(DialogResult.OK))
		{
			/*
			 * - dialog no longer affext gp details - only views. GpShortVo gp = form.getGlobalContext().Core.getGPDetails(); if (gp == null) form.txtGPName().setValue(null); else form.txtGPName().setValue(gp.getName().toShortForm());
			 * 
			 * Patient patient = form.getLocalContext().getPatient(); if (patient == null) patient = new Patient(); patient.setGp(form.getGlobalContext().Core.getGPDetails()); //form.imbGP().setTooltip(getGpTooltip(patient)); form.getLocalContext().setPatient(patient);
			 */
		}
		else if (formName.equals(form.getForms().Core.NOKDetails) && result.equals(DialogResult.OK))
		{
			NextOfKin nok = form.getGlobalContext().Core.getNOKDetails();
			if (nok == null)
				form.txtNOK().setValue(null);
			else
				form.txtNOK().setValue(nok.getName().toShortForm());
			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();
			patient.setNok(nok);
			form.imbNOK().setTooltip(getNokTooltip(patient));
			form.getLocalContext().setPatient(patient);
		}
		else if (formName.equals(form.getForms().Core.OtherAddresses) && result.equals(DialogResult.OK))
		{
			PersonAddressCollection voCollAddresses = form.getGlobalContext().Core.getOtherAddresses();
			//update local context
			//setOtherAddress(voCollAddresses.toRefVoCollection());
			
			if (voCollAddresses == null)
				return;
			else
			{
				displayOtherAdressesAndTooltip(voCollAddresses);
			}

		}
		else if (formName.equals(form.getForms().Core.GPSelection) && (DialogResult.OK.equals(result))) //WDEV-18644
		{
			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();

			if (form.getGlobalContext().Core.getGPPracticeIsNotNull())
			{
				OrganisationWithSitesVo gpPractice = domain.getGPPractice(form.getGlobalContext().Core.getGPPractice());
				patient.setPractice(gpPractice);
				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
			}
			
			refreshGpDetails(form.getGlobalContext().Core.getGPDetails(), form.getGlobalContext().Core.getGPPracticeWithComm(), form.getGlobalContext().Core.getGPSurgery(), !ConfigFlag.DOM.GP_USE_SURGERIES.getValue());

			patient.setGp(form.getGlobalContext().Core.getGPDetails());
			if (form.getGlobalContext().Core.getGPSurgeryIsNotNull() && form.getGlobalContext().Core.getGPSurgery().getID_LocationIsNotNull())
				patient.setGpSurgery(form.getGlobalContext().Core.getGPSurgery());
			else
				patient.setGpSurgery(null);

			form.getLocalContext().setPatient(patient);
			
		}
		else if (formName.equals(form.getForms().Clinical.DeathDetails) && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setDeathDetails(form.getGlobalContext().Core.getDeathDetails());

			PatientShort patient = form.getGlobalContext().Core.getPatientShort();
			
			Date dateDOD = null;
			Time timeOfDeath = null;
			if (patient != null)
			{	
				dateDOD = patient.getDod();
				timeOfDeath = patient.getTimeOfDeath();
			}
			form.dteDod().setValue(dateDOD);
			form.timTod().setValue(timeOfDeath);
			
			updateControlsState();
		}
	}
	
	private void updateControlsState()
	{
		boolean dateDODPresent = form.dteDod().getValue() != null;
		
		form.lblDod().setVisible(dateDODPresent);
		form.dteDod().setVisible(dateDODPresent);
		form.timTod().setVisible(dateDODPresent);
		form.dteDod().setEnabled(false); // This control must never be enabled
		form.timTod().setEnabled(false);
		
		form.btnDeceased().setVisible(dateDODPresent);
		form.btnDeceased().setText(dateDODPresent ? "Death Details" : "Mark Patient as Deceased");
	}
	
	@Override
	protected void onFormModeChanged()
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			if (form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
			{	
				form.dteDod().setEnabled(false);
				form.timTod().setEnabled(false);
			}	
		}
		else
		{
			form.dteDod().setVisible(false);
			form.timTod().setVisible(false);
			form.lblDod().setVisible(false);
			/*-------------------------------------
			if (form.getMode().equals(FormMode.EDIT))
			{
				if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
					form.btnDeceased().setVisible(true);
				else
					form.btnDeceased().setVisible(false);
			}
			//----------------------------------------
			//form.btnDeceased().setVisible(true);
			*/
		}
		form.cmbOccupation().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.cmbEthnic().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().Core.getIdentifierGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		//form.ccAddressSearch().setMode(form.getMode());
		form.ccAddressSearch().setComponentEnabled(form.getMode().equals(FormMode.EDIT));//WDEV-15745

		form.getGlobalContext().Core.setParentFormMode(form.getMode());
		// WDEV-6964 dont allow editing or selection of HospNum and Pkey
		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
				{
					grdIdentifiersRow row = form.grdIdentifiers().getRows().get(i);
					if (row.getcolIdType().getValue() != null)
					{
						if (row.getcolIdType().getValue().equals(PatIdType.HOSPNUM) || row.getcolIdType().getValue().equals(PatIdType.PKEY))
						{
							row.setReadOnly(true);
							row.setSelectable(false);
						}
					}
				}
			}
		}
		if (ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue())
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
				{
					grdIdentifiersRow row = form.grdIdentifiers().getRows().get(i);
					if (row.getcolIdType().getValue() != null)
					{
						if (row.getcolIdType().getValue().equals(PatIdType.PATNUM) )
						{
							row.setReadOnly(true);
							row.setSelectable(false);
						}
					}
				}
			}
		}
		
		form.imbGP().setVisible(FormMode.EDIT.equals(form.getMode()) || (FormMode.VIEW.equals(form.getMode()) && form.getGlobalContext().Core.getGPDetails() != null));//WDEV-15745
		form.imbNOK().setVisible(FormMode.EDIT.equals(form.getMode()) || (FormMode.VIEW.equals(form.getMode()) && form.getGlobalContext().Core.getNOKDetails() != null));//WDEV-15745
	}
	@Override
	protected void onGrdCommChannelsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		setRemoveCommunicationMenuVisibility();
	}
	private void setRemoveCommunicationMenuVisibility()
	{
		boolean bVisible = form.grdCommChannels().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);

		form.getContextMenus().getGenericGridRemoveItem().setVisible(bVisible);

	}

	@Override
	protected void onGrdIdentifiersSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		setRemoveMenuVisibility();
	}
	private void setRemoveMenuVisibility()
	{
		boolean bVisible = form.grdIdentifiers().getSelectedRowIndex() != -1 
							&& form.getMode().equals(FormMode.EDIT);

		//form.getContextMenus().getGenericGridRemoveItem().setVisible(bVisible);

		form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(bVisible);
		
		if (form.getLocalContext().getPatientIsNotNull()
			&& form.getLocalContext().getPatient().getSourceOfInformationIsNotNull()
			&& form.getLocalContext().getPatient().getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS)
			&& form.grdIdentifiers().getSelectedRow() != null
			&& form.grdIdentifiers().getSelectedRow().getValue().getType().equals(PatIdType.NHSN))
			form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(false);

		if (form.grdIdentifiers().getSelectedRow() != null
			&& form.grdIdentifiers().getSelectedRow().getValue().getTypeIsNotNull()
			&& form.grdIdentifiers().getSelectedRow().getValue().getType().equals(PatIdType.NHSN)
			&& ! ConfigFlag.GEN.ALLOW_UPDATES_TO_NHS_NO.getValue())
			form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(false);
		
		form.getContextMenus().Core.getIdentifierGridCOPYItem().setVisible(form.grdIdentifiers().getSelectedRow() != null);

	}
	@Override
	protected void onImbGPClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.VIEW))
			engine.open(form.getForms().Core.GPDetails);
		else if (form.getMode().equals(FormMode.EDIT))
			engine.open(form.getForms().Core.GPSelection);
	}
	
	@Override
	protected void onImbNOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV - 9888 - Populate global context for NOK Details Address
		if (form.ccAddressSearch().getValue() != null)
			form.getGlobalContext().Core.setNOKPersonAddress(form.ccAddressSearch().getValue());
		
		form.getGlobalContext().Core.setCommChannels(listCommChannels());//WDEV-15213
		
		engine.open(form.getForms().Core.NOKDetails);
	}
	
	@Override
	protected void onImbAddressClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPatientIsNotNull())
			form.getGlobalContext().Core.setOtherAddresses(form.getLocalContext().getPatient().getAddresses());
		else if (form.txtOtherAddress().getValue() == null)
			form.getGlobalContext().Core.setOtherAddresses(null);
		engine.open(form.getForms().Core.OtherAddresses,"Correspondence Address");
	}
//	RF
	/*
	@Override
	protected void onDteDodValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
//			RF			form.imbDeathDetails().setVisible(true);
//			RF			form.imbDeathDetails().setEnabled(form.dteDod().getValue() != null);
		}
	}
*/
	@Override
	protected void onImbOtherNamesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Core.AliasNames);
	}
//	RF
	/*
	@Override
	protected void onImbDeathDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.getPatientShort().setDod(form.dteDod().getValue());
		engine.open(form.getForms().Clinical.DeathDetails);
	}
*/
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{

			switch (menuItemID)
			{
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Add:
					grdIdentifiersRow row = form.grdIdentifiers().getRows().newRow();
					bindColType(null,row);
					row.setValue(new PatientId());
					form.getLocalContext().setbIdentifiersEdited(true);
				break;
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Remove:
					removeIdentifier();
					setRemoveMenuVisibility();
					form.getLocalContext().setbIdentifiersEdited(true);
				break;
				//WDEV-18792
				case GenForm.ContextMenus.CoreNamespace.IdentifierGrid.COPY:
					copyToClipboard();
				break;
				case GenForm.ContextMenus.GenericGrid.Add :
					grdCommChannelsRow rowComm = form.grdCommChannels().getRows().newRow();
					rowComm.setValue(new CommChannelVo());
					form.getLocalContext().setbCommChannelsEdited(true);
				break;
				case GenForm.ContextMenus.GenericGrid.Remove :
					removeCommChannel();
					setRemoveCommunicationMenuVisibility();
					form.getLocalContext().setbCommChannelsEdited(true);
				break;
			}
		
		
	}
	
	private void copyToClipboard()
	{
		engine.clearClipboard();
		
		if (form.grdIdentifiers().getSelectedRow() != null && form.grdIdentifiers().getSelectedRow().getcolIdValue() != null)
		{
			engine.copyToClipboard(form.grdIdentifiers().getSelectedRow().getcolIdValue());
		}
	    
	}
	
	private void removeIdentifier()
	{
		int index = form.grdIdentifiers().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select an identifier to remove");
			return;
		}
		form.grdIdentifiers().getRows().remove(index);
	}
	
	private void removeCommChannel()
	{
		int index = form.grdCommChannels().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select a Contact Type to remove");
			return;
		}
		form.grdCommChannels().getRows().remove(index);

	}
	
	public void displayDemographics()
	{
		clearScreen();
		
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();

		if (patient != null && (patient.getID_PatientIsNotNull() || (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO") && patient.getInterfaceId() != null)))
		{
			try
			{
				displayPatient(patient);
			} 
			catch (FormOpenException e) 
			{
				engine.showMessage("Failed to display Patient Demograhics");
				return;
			}
			form.getGlobalContext().Core.setDeathDetails(domain.getDeathDetails(patient));
			
		}
		else if (form.getGlobalContext().Core.getPatientToBeDisplayedIsNotNull())
		{
			patient = form.getGlobalContext().Core.getPatientToBeDisplayed();
			if (patient != null && (patient.getID_PatientIsNotNull() || (ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO") && patient.getInterfaceId() != null)))
			{
				try
				{
					displayPatient(patient);
				} 
				catch (FormOpenException e) 
				{
					engine.showMessage("Failed to display Patient Demograhics");
					return;
				}
			}
			else
			{
				PatientFilter voPatFilter = form.getGlobalContext().Core.getPatientFilter();
				if (voPatFilter != null)
				{
					form.txtSurname().setValue(voPatFilter.getSurname());
					form.txtForename().setValue(voPatFilter.getForename());
					if (voPatFilter.getSexIsNotNull())
						form.cmbSex().setValue(voPatFilter.getSex());
					if (voPatFilter.getDobIsNotNull())
						form.pdtDOB().setValue(voPatFilter.getDob());
				}
				form.setMode(FormMode.EDIT);
				form.imbOtherNames().setVisible(false);
				
				form.getGlobalContext().Core.setNOKDetails(null);
				form.imbNOK().setTooltip(getNokTooltip(null));
			}
		}
	//	else
	//	{
	//		throw new CodingRuntimeException("Demographics not supplied with PatientFilter GC or PatientShort GC");
	//	}

//		RF		form.imbDeathDetails().setVisible(form.getGlobalContext().Core.getPatientShortIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getDodIsNotNull() : false);
		if (patient!=null)
			if (patient.getDodIsNotNull())
			{
				
				form.dteDod().setVisible(true);
				form.dteDod().setEnabled(false);
				form.timTod().setVisible(true);
				form.timTod().setEnabled(false);
				form.lblDod().setVisible(true);
				form.btnDeceased().setVisible(true);
				if (form.getGlobalContext().Core.getPatientFilterIsNotNull())
				{	
					form.dteDod().setValue(patient.getDod());
					form.timTod().setValue(patient.getTimeOfDeath());
				}	
				
			}
			else
			{
				form.btnDeceased().setVisible(false);
				form.dteDod().setVisible(false);
				form.timTod().setVisible(false);
				form.lblDod().setVisible(false);
				
			}
	}
	private void displayPatient(PatientShort patient) throws FormOpenException
	{
		Patient voPatient = null;
		try
		{
			voPatient = domain.getPatient(patient);
		}
		catch (StaleObjectException e)
		{
			// Try a second time. Only then fail.
			try
			{
				voPatient = domain.getPatient(patient);
			}
			catch (StaleObjectException e1)
			{
				throw new FormOpenException("Failed to retrieve Patient due to StaleObjectException");
			} 
			catch (UniqueKeyViolationException ukve) 
			{
				engine.showMessage(ukve.getMessage());
				return;
			}
		} 
		catch (UniqueKeyViolationException e1)
		{
			engine.showMessage(e1.getMessage());
			return;
		}

		form.getLocalContext().setPatient(voPatient);
		form.getGlobalContext().Core.setPatientShort(voPatient);
		populateScreenFromData(voPatient);
		updateControlsState(); //WDEV-20015
		
	}
	private String getNokTooltip(Patient pat)
	{
		if (pat == null || pat.getNok() == null)
		{
			if (form.getMode().equals(FormMode.EDIT))
				form.imbNOK().setVisible(true);
			else
				form.imbNOK().setVisible(false);
			return "No NOK Details";
		}

		StringBuffer sbNOKDetails = new StringBuffer();
		if (pat.getNok().getNameIsNotNull())
		{
			form.txtNOK().setValue(pat.getNok().getName().toString());
			sbNOKDetails.append(Textile.setBold("NOK DETAILS") + "\r" + Textile.setBold("NOK Name: ") + pat.getNok().getName().toString());
		}
		if (pat.getNok().getAddressIsNotNull())
		{
			sbNOKDetails.append("\n" + Textile.setBold("Address:"));
			if (pat.getNok().getAddress().getLine1IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine1());
			if (pat.getNok().getAddress().getLine2IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine2());
			if (pat.getNok().getAddress().getLine3IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine3());
			if (pat.getNok().getAddress().getLine4IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine4());
			if (pat.getNok().getAddress().getLine5IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine5());

			if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
			{
				if (pat.getNok().getAddress().getPostCodeIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("Post Code:  ") + pat.getNok().getAddress().getPostCode());
			}
			else if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
			{
				if (pat.getNok().getAddress().getCountyIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("County:  ") + pat.getNok().getAddress().getCounty());
			}

			if (pat.getNok().getAddress().getPhoneIsNotNull())
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Home): ") + pat.getNok().getAddress().getPhone());

			if (pat.getNok().getCommChannelsIsNotNull())
			{
				if (pat.getNok().getWorkPhoneNumber() != null)
					sbNOKDetails.append("\n" + Textile.setBold("Phone (Work): ") + pat.getNok().getWorkPhoneNumber().getCommValue());

				if (pat.getNok().getMobile() != null)
					sbNOKDetails.append("\n" + Textile.setBold("Mobile:  ") + pat.getNok().getMobile().getCommValue());
			}
		}
		if (pat.getNok().getRelationshipIsNotNull())
			sbNOKDetails.append("\n" + Textile.setBold("Relationship: ") + pat.getNok().getRelationship().getText());

		return new Textile().process(sbNOKDetails.toString());
	}
	private String getOtherAdressesTooltip(Patient pat)
	{
		if (pat == null || pat.getAddresses() == null || pat.getAddresses().size() == 0)
		{
			if (form.getMode().equals(FormMode.VIEW))
				form.imbAddress().setVisible(false);
			else
				form.imbAddress().setVisible(true);
			return "No Other Addresses";
		}

		pat.getAddresses().sort();

		StringBuffer sb = new StringBuffer();
		sb.append(Textile.setBold("OTHER ADDRESSES ") + "\r");
		for (int i = 0; i < pat.getAddresses().size(); i++)
		{
			sb.append(pat.getAddresses().get(i).toDisplayString() + "\n");
		}

		return new Textile().process(sb.toString());
	}
	private void refreshGpDetails(GpShortVo gp, OrganisationWithSitesVo gpPractice, LocSiteShortVo gpSurgery, boolean usePractice) //WDEV-18644
	{
		if (usePractice) //WDEV-16051
		{
			form.getGlobalContext().Core.setGPDetails(gp);

			if (gp != null)
			{
				form.txtGPName().setValue(gp.getName().toString());

				// Because some of the patients may not have the field Practice saved yet in the BO, we will display the first practice - as it used to work
				if (gpPractice == null && gp.getPracticesIsNotNull() && gp.getPractices().size() > 0 && gp.getPractices().get(0) != null && gp.getPractices().get(0).getPracticeIsNotNull())
				{
					gpPractice = gp.getPractices().get(0).getPractice();
				}

				form.getGlobalContext().Core.setGPPracticeWithComm(gpPractice);
				form.txtGPPractice().setValue(gpPractice.getName());
			}
			else
			// wdev-12889
			{
				if (gpSurgery != null)
				{
					LocSiteVo tempVo = domain.getLocationSite(gpSurgery);
					if (tempVo != null)
					{
						OrganisationVo orgVo = tempVo.getParentOrganisation();
						if (orgVo != null)
							form.txtGPPractice().setValue(orgVo.getName());

					}
				}
			}

			form.imbGP().setTooltip(getGpTooltip(gp, gpPractice, gpSurgery, usePractice));
		}
		else
		{
			form.getGlobalContext().Core.setGPDetails(gp);
			form.getGlobalContext().Core.setGPSurgery(gpSurgery);
			
			form.imbGP().setTooltip(getGpTooltip(gp, gpPractice, gpSurgery, false));
			if (gpSurgery != null)
				form.txtGPPractice().setValue(gpSurgery.getName());
			if (gp != null)
				form.txtGPName().setValue(gp.getName().toString());
		}
	}
	private String getGpTooltip(GpShortVo gp, OrganisationWithSitesVo gpPractice, LocSiteShortVo gpSurgery, boolean usePractice) //WDEV-18644
	{		
		if (gp == null)
		{
			if (form.getMode().equals(FormMode.EDIT))
				form.imbGP().setVisible(true);
			else
			{
				form.imbGP().setVisible(false);
			}
			return "No GP Details";
		}

		StringBuffer sbGPDetails = new StringBuffer();
		if (gp.getNameIsNotNull())
		{
			sbGPDetails.append(Textile.setBold("GP DETAILS") + "\r" + Textile.setBold("GP Name: ") + gp.getName().toString());
			form.txtGPName().setValue(gp.getName().toString());
		}

		if (!usePractice)
		{
			LocShortVo surgery = gpSurgery;
			if (surgery != null)
			{
				if (surgery.getAddressIsNotNull() && isAddressDetailsNotNull(surgery.getAddress())) //WDEV-16656 
				{
					//WDEV-15527
					sbGPDetails.append("\n" + Textile.setBold("Surgery Address: "));
					//WDEV-15527
					if (surgery.getAddress().getLine1IsNotNull() && surgery.getAddress().getLine1().length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getLine1());
					if (surgery.getAddress().getLine2IsNotNull() && surgery.getAddress().getLine2().length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getLine2());
					if (surgery.getAddress().getLine3IsNotNull() && surgery.getAddress().getLine3().length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getLine3());
					if (surgery.getAddress().getLine4IsNotNull() && surgery.getAddress().getLine4().length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getLine4());
					if (!ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() && surgery.getAddress().getLine5IsNotNull() && surgery.getAddress().getLine5().length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getLine5());
					if (surgery.getAddress().getPostCodeIsNotNull() && surgery.getAddress().getPostCode().replace(" " , "").length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getPostCode());
					if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH") && surgery.getAddress().getCountyIsNotNull() && surgery.getAddress().getCounty().getText().length() > 0)
						sbGPDetails.append("\n" + surgery.getAddress().getCounty());
				}

				// WDEV-13614
				if (gp.getCommChannelsIsNotNull())
				{
					CommChannelVo gpWorkPhone = gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
					CommChannelVo gpFax = gp.getCommChannels().getCommunicationChannel(ChannelType.FAX);

					// WORK PHONE
					if (gpWorkPhone != null && gpWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Phone: ") + gpWorkPhone.toString());
					}
					else if (gpSurgery.getCommChannelsIsNotNull())
					{
						CommChannelVo surgeryWork = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

						if (surgeryWork != null && surgeryWork.getCommValueIsNotNull())
						{
							sbGPDetails.append("\n" + Textile.setBold("Surgery Phone: ") + surgeryWork.toString());
						}
					}

					// FAX NUMBER
					if (gpFax != null && gpFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Fax: ") + gpFax);
					}
					else if (gpSurgery.getCommChannelsIsNotNull())
					{
						CommChannelVo surgeryFax = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.FAX);

						if (surgeryFax != null && surgeryFax.getCommValueIsNotNull())
						{
							sbGPDetails.append("\n" + Textile.setBold("Surgery Fax: ") + surgeryFax);
						}
					}

				}
				else if (gpSurgery.getCommChannelsIsNotNull())
				{
					CommChannelVo surgeryFax = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.FAX);
					CommChannelVo surgeryWork = gpSurgery.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

					if (surgeryWork != null && surgeryWork.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Surgery Phone: ") + surgeryWork.toString());
					}

					if (surgeryFax != null && surgeryFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Surgery Fax: ") + surgeryFax);
					}

				}
			}
		}
		else
		{
			if (gp.getPracticesIsNotNull() && gpPractice != null)
			{
				if (gpPractice.getAddressIsNotNull() && isAddressDetailsNotNull(gpPractice.getAddress())) // WDEV-16656 
				{
					//WDEV-15527
					sbGPDetails.append("\n" + Textile.setBold("Practice Address: "));
					//WDEV-15527
					if (gpPractice.getAddress().getLine1IsNotNull() && gpPractice.getAddress().getLine1().length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine1());
					if (gpPractice.getAddress().getLine2IsNotNull() && gpPractice.getAddress().getLine2().length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine2());
					if (gpPractice.getAddress().getLine3IsNotNull() && gpPractice.getAddress().getLine3().length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine3());
					if (gpPractice.getAddress().getLine4IsNotNull() && gpPractice.getAddress().getLine4().length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine4());
					if (!ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() && gpPractice.getAddress().getLine5IsNotNull() && gpPractice.getAddress().getLine5().length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getLine5());
					if (gpPractice.getAddress().getPostCodeIsNotNull() &&  gpPractice.getAddress().getPostCode().replace(" " , "").length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getPostCode());
					if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH") && gpPractice.getAddress().getCountyIsNotNull() && gpPractice.getAddress().getCounty().getText().length() > 0)
						sbGPDetails.append("\n" + gpPractice.getAddress().getCounty());
				}

				// WDEV-13614 //WDEV-16051
				if (gpPractice.getCommChannelsIsNotNull())
				{
					// WORK PHONE
					CommChannelVo gpWorkPhone = gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);
					CommChannelVo practiceWorkPhone = gpPractice.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE);

					if (gpWorkPhone != null && gpWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Phone: ") + gpWorkPhone.toString());
					}
					else if (practiceWorkPhone != null && practiceWorkPhone.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Practice Phone: ") + practiceWorkPhone.toString());
					}

					// FAX NUMBER
					CommChannelVo gpFax = gp.getCommChannels().getCommunicationChannel(ChannelType.FAX);
					CommChannelVo practiceFax = gpPractice.getCommChannels().getCommunicationChannel(ChannelType.FAX);

					if (gpFax != null && gpFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("GP Fax: ") + gpFax.getCommValue());
					}
					else if (practiceFax != null && practiceFax.getCommValueIsNotNull())
					{
						sbGPDetails.append("\n" + Textile.setBold("Practice Fax: ") + practiceFax.getCommValue());
					}
				}
			}
		}
		
		// BW 24/10/06 - Do we still want to display all practice addresses as well???
		// GP gp = domain.getPatientGp(pat.getGp());
		// if (gp != null)
		// {
		// if (gp.getPracticesIsNotNull())
		// {
		// GpToPracticesVoCollection coll = gp.getPractices();
		// // Check size of collection as GP Admin form creates a new OrganisationVoCollection for each GP regardless if any practice exists
		// if (coll.size() >= 1)
		// {
		// if (coll.get(0).getPractice().getAddressIsNotNull())
		// {
		// sbGPDetails.append("\n" + Textile.setBold("Address: "));
		// if (coll.get(0).getPractice().getAddress().getLine1IsNotNull())
		// sbGPDetails.append("\n" + coll.get(0).getPractice().getAddress().getLine1());
		// if (coll.get(0).getPractice().getAddress().getLine2IsNotNull())
		// sbGPDetails.append("\n" + coll.get(0).getPractice().getAddress().getLine2());
		// if (coll.get(0).getPractice().getAddress().getLine3IsNotNull())
		// sbGPDetails.append("\n" + coll.get(0).getPractice().getAddress().getLine3());
		// if (coll.get(0).getPractice().getAddress().getLine4IsNotNull())
		// sbGPDetails.append("\n" + coll.get(0).getPractice().getAddress().getLine4());
		// if (coll.get(0).getPractice().getAddress().getLine5IsNotNull())
		// sbGPDetails.append("\n" + coll.get(0).getPractice().getAddress().getLine5());
		// if (coll.get(0).getPractice().getAddress().getPhoneIsNotNull())
		// sbGPDetails.append("\n" + Textile.setBold("Phone: ") + coll.get(0).getPractice().getAddress().getPhone());
		// }
		// }
		// }
		// }
		return new Textile().process(sbGPDetails.toString());
	}

	private boolean isAddressDetailsNotNull(PersonAddress address)
	{
		if (address.getLine1IsNotNull() ||
			address.getLine2IsNotNull() ||
			address.getLine3IsNotNull() ||
			address.getLine4IsNotNull() ||
			address.getLine5IsNotNull() ||
			address.getPostCodeIsNotNull() ||
			address.getCountyIsNotNull())
				return true;
		return false;
	}

	protected void clearScreen()
	{
		form.cmbTitle().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename().setValue(null);
		form.txtMiddleName().setValue(null);
		form.cmbSex().setValue(null);
		form.pdtDOB().setValue(null);
		form.txtAge().setValue(null);
		form.dteDod().setValue(null);
		form.timTod().setValue(null);
		form.timTod().setTooltip(null);
		form.cmbMarital().setValue(null);
		form.cmbOccupation().setValue(null);
		form.cmbReligion().setValue(null);
		form.cmbEthnic().setValue(null);
		form.txtNOK().setValue(null);
		form.txtGPName().setValue(null);
		form.txtGPPractice().setValue(null);
		form.grdIdentifiers().getRows().clear();
		form.grdCommChannels().getRows().clear();
		form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().setValue(null);
		form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().setValue(null);
		form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().setValue(null);
		form.ccAddressSearch().clearscreen();
		//form.ccAddressSearch().setValue(null);	// Clear address (the address component does not clear with clearscreen() only)
		form.txtOtherAddress().setValue(null);
		
		form.imbNOK().setTooltip("No NOK Details");
	}

	protected void populateScreenFromData(Patient pat)
	{
		clearScreen();
		if (pat == null)
			throw new DomainRuntimeException("No Patient Supplied");

		form.getLocalContext().setbCommChannelsEdited(false);
		form.getLocalContext().setbIdentifiersEdited(false);
		form.getLocalContext().setbEventFired(false);

		form.getLocalContext().setsavedPatient((Patient) pat.clone());
		

		if (pat.getNameIsNotNull())
		{
			form.cmbTitle().setValue(pat.getName().getTitle());
			form.txtSurname().setValue(pat.getName().getSurname());
			form.txtForename().setValue(pat.getName().getForename());
			form.txtMiddleName().setValue(pat.getName().getMiddleName());
		}

		form.cmbSex().setValue(pat.getSex());
		form.pdtDOB().setValue(pat.getDob());
		form.txtAge().setValue(pat.calculateAgeText());
		
		form.dteDod().setValue(pat.getDod());
		form.timTod().setValue(pat.getTimeOfDeath());
		form.timTod().setTooltip(pat.getDodIsNotNull() && pat.getTimeOfDeath() ==  null ? "Time of Death<br/>Unknown/Not Recorded" : null);
		
		if (pat.getDodIsNotNull())
		{			
			form.dteDod().setVisible(true);
			form.dteDod().setEnabled(false);
			form.timTod().setVisible(true);
			form.timTod().setEnabled(false);
			form.lblDod().setVisible(true);
			form.btnDeceased().setVisible(true);
			if (form.getGlobalContext().Core.getPatientFilterIsNotNull())
			{	
				form.dteDod().setValue(pat.getDod());
				form.timTod().setValue(pat.getTimeOfDeath());
			}				
		}
		else
		{
			/*/-------------------------------------
			if (form.getMode().equals(FormMode.EDIT)) //WDEV-20015 - no longer allow to mark as deceased from this screen.
			{
				if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED))
					form.btnDeceased().setVisible(true);
				else
					form.btnDeceased().setVisible(false);
			}
			//----------------------------------------
			*/
			//form.btnDeceased().setVisible(true);
			form.dteDod().setVisible(false);
			form.timTod().setVisible(false);
			form.lblDod().setVisible(false);
			
		}
//		if (pat.getDodIsNotNull())
//		{
////RF			form.imbDeathDetails().setVisible(true);
////			RF			form.imbDeathDetails().setEnabled(true);
//		}
//		else
//		{
////			RF			form.imbDeathDetails().setVisible(false);
////			RF			form.imbDeathDetails().setEnabled(false);
//		}

		form.cmbMarital().setValue(pat.getMaritalStatus());
		form.cmbOccupation().setValue(pat.getOccupation());
		form.cmbReligion().setValue(pat.getReligion());
		form.cmbEthnic().setValue(pat.getEthnicOrigin());

		if (pat.getOtherNamesIsNotNull() && pat.getOtherNames().size() > 0)
		{
			if (pat.getMaidenName() != null)
			{
				form.imbOtherNames().setTooltip("<b>OTHER NAMES<br><br>Maiden Name:  </b>" + pat.getMaidenName().toString());
			}
			form.getGlobalContext().Core.setOtherNames(pat.getOtherNames());
		}
		else
		{
			form.imbOtherNames().setVisible(false);
			form.imbOtherNames().setTooltip("No Other Names");
		}

		if (pat.getAddressIsNotNull())
			form.ccAddressSearch().setValue(pat.getAddress());

		//display other addresses
		displayOtherAdressesAndTooltip(pat.getAddresses());

		form.imbAddress().setTooltip(getOtherAdressesTooltip(pat));

		CommChannelVoCollection voCommChannelColl = pat.getCommChannels();

		grdCommChannelsRow rowCommChannel;

		if (voCommChannelColl != null)
		{
			for (int i = 0; i < voCommChannelColl.size(); i++)
			{
				CommChannelVo voCommChannel = voCommChannelColl.get(i);

				if (voCommChannel.getChannelTypeIsNotNull())
				{
					rowCommChannel = form.grdCommChannels().getRows().newRow();
					rowCommChannel.setcolType(voCommChannel.getChannelType());
					rowCommChannel.setcolContactValue(voCommChannel.getCommValue());
					rowCommChannel.setValue(voCommChannel);
				}
			}

		}
		form.getGlobalContext().Core.setNOKDetails(pat.getNok());
		form.imbNOK().setTooltip(getNokTooltip(pat));

		if (pat.getNationalHealthCoverIsNotNull())
		{
			form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().setValue(pat.getNationalHealthCover().getMedicalCardNo());
			if (pat.getNationalHealthCover().getHealthActCategoryIsNotNull())
				form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().setValue(pat.getNationalHealthCover().getHealthActCategory().getText());
		}

		PatientIdCollection identifers = pat.getIdentifiers();

		grdIdentifiersRow row;

		if (identifers != null)
		{
			for (int i = 0; i < identifers.size(); i++)
			{
				ims.core.vo.PatientId id = identifers.get(i);
				row = form.grdIdentifiers().getRows().newRow();
				bindColType(id.getType(), row);
				row.getcolIdType().setValue(id.getType());
				row.setcolIdValue(id.getValue());
				row.setValue(id);
				if( id.getVerifiedIsNotNull()
					&& ! id.getVerified()
					&& id.getType().equals(PatIdType.NHSN))
				{
					row.setBackColor(Color.Orange);
					row.setReadOnly(true);
				}

				if (id.getTypeIsNotNull()
					&& id.getType().equals(PatIdType.NHSN)
					&& ! ConfigFlag.GEN.ALLOW_UPDATES_TO_NHS_NO.getValue())
					row.setReadOnly(true);
			}
		}

		form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().setValue(pat.getPrefCommLanguage());
		refreshGpDetails(pat.getGp(),pat.getPractice(), pat.getGpSurgery(), !ConfigFlag.DOM.GP_USE_SURGERIES.getValue()); //WDEV-18644

		setRemoveCommunicationMenuVisibility();
		setRemoveMenuVisibility();
	}

	/*
	private void bindColType(grdIdentifiersRow row, boolean isNew)
	{
		row.getcolIdType().clear();
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());
		if(ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue())
		{
			collTypes.remove(PatIdType.PATNUM);
		}

		for (int i = 0; i < collTypes.size(); i++)
		{
			if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
			{
				if (isNew)
				{
					if (collTypes.get(i).equals(PatIdType.HOSPNUM) || collTypes.get(i).equals(PatIdType.PKEY))
						continue;
				}
			}
			if(!(collTypes.get(i).equals(PatIdType.PATNUM)&&isNew))
				row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
		}
	}
*/
	private void bindColType(PatIdType selectedPatIdType, grdIdentifiersRow row)
	{
		row.getcolIdType().clear();
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());
				
		PatIdTypeCollection collEditedTypes = new PatIdTypeCollection();
		
		for (int i = 0; i<collTypes.size(); i++)
		{
			if(selectedPatIdType == null) //new
			{
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					if(collTypes.get(i).equals(PatIdType.HOSPNUM) || collTypes.get(i).equals(PatIdType.PKEY))
						continue;					
				}
				if(collTypes.get(i).equals(PatIdType.PATNUM))					
					continue;
				
				row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
			}
			else //not new
			{
				if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
				{
					//if we are displaying a previously saved hospnum or pkey
					if(selectedPatIdType.equals(PatIdType.HOSPNUM) || selectedPatIdType.equals(PatIdType.PKEY) || selectedPatIdType.equals(PatIdType.PATNUM))
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					else
					{
						//we are displaying a previous saved any other patidtype - dont add the pkey and hospnum or patnum
						if(!collTypes.get(i).equals(PatIdType.HOSPNUM) && !collTypes.get(i).equals(PatIdType.PKEY)  && !collTypes.get(i).equals(PatIdType.PATNUM))
							row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					}		
				}
				else
				{
					//if we are displaying a previously saved patientnumber
					if(selectedPatIdType.equals(PatIdType.PATNUM))
						row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					else
					{
						//we are displaying a previous saved any other patidtype - dont add the patientnumber
						if(!collTypes.get(i).equals(PatIdType.PATNUM))
							row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
					}	
				}
			}
		}
	}
	
	private void displayOtherAdressesAndTooltip(PersonAddressCollection voCollAddresses) 
	{
		//update GC
		form.getGlobalContext().Core.setOtherAddresses(voCollAddresses);
		if (form.getLocalContext().getPatient() == null)
			form.getLocalContext().setPatient(new Patient());
			
		form.getLocalContext().getPatient().setAddresses(voCollAddresses);
		if (voCollAddresses == null || voCollAddresses.size() == 0)
		{
			if (form.getMode().equals(FormMode.VIEW))
				form.imbAddress().setVisible(false);
			else
				form.imbAddress().setVisible(true);
			
			return;
		}

		voCollAddresses.sort();
		
		String l_address = voCollAddresses.toDisplayString();
		
		//display address
		form.txtOtherAddress().setValue(l_address);
		
		//set tooltip 
		String l_addressHeader = Textile.setBold("OTHER ADDRESSES ");
		l_addressHeader += "\r\n";
		l_addressHeader += l_address;
		l_addressHeader = new Textile().process(l_addressHeader);
		form.imbAddress().setTooltip(l_addressHeader);
		form.txtOtherAddress().setTooltip(l_addressHeader);				
	}

	public void setValue(PatientShort pat)
	{
		if (pat == null)
		{
			clearScreen();
			form.getLocalContext().setPatient(null);
			PatientFilter voPatFilter = form.getGlobalContext().Core.getPatientFilter();
			if (voPatFilter != null)
			{
				form.txtSurname().setValue(voPatFilter.getSurname());
				form.txtForename().setValue(voPatFilter.getForename());
				if (voPatFilter.getSexIsNotNull())
					form.cmbSex().setValue(voPatFilter.getSex());
				if (voPatFilter.getDobIsNotNull())
					form.pdtDOB().setValue(voPatFilter.getDob());
			}
			setRemoveCommunicationMenuVisibility();
			setRemoveMenuVisibility();

		}
		else
			try
			{
				displayPatient(pat);
			}
			catch (FormOpenException e)
			{
				e.printStackTrace();
			}
	}
	
	protected Patient populateDataFromScreen(Patient pat)
	{
		if (!validatePatient())
			return null;

		if(pat == null)
			pat = new Patient();
		
//		Get result address from custome control
		pat.setAddress(form.ccAddressSearch().getValue());
		if (pat.getAddressIsNotNull())
		{
			pat.getAddress().setAddressType(AddressType.PERMANENT);
		}
				
		//get other sddresses from GC
		if (form.getGlobalContext().Core.getOtherAddressesIsNotNull())
		{			
			pat.setAddresses(form.getGlobalContext().Core.getOtherAddresses());
		}

		PersonName name = pat.getName();
		if (name == null)
			name = new PersonName();

		name.setTitle(form.cmbTitle().getValue());
		name.setForename(form.txtForename().getValue());
		name.setMiddleName(form.txtMiddleName().getValue());
		name.setSurname(form.txtSurname().getValue());
		name.setUppers();
		//wdev-11952
		if(form.txtForename().getValue() == null)
			name.setUpperForename(null);
		if(form.txtSurname().getValue() == null)
			name.setUpperSurname(null);
		//----------
		pat.setName(name);

		pat.setSex(form.cmbSex().getValue());
		pat.setDob(form.pdtDOB().getValue());
		pat.setDod(form.dteDod().getValue());
		pat.setTimeOfDeath(form.timTod().getValue());
		pat.setMaritalStatus(form.cmbMarital().getValue());
		pat.setOccupation(form.cmbOccupation().getValue());
		pat.setReligion(form.cmbReligion().getValue());
		pat.setEthnicOrigin(form.cmbEthnic().getValue());

		pat.setCommChannels(listCommChannels()); //WDEV-15213

		PatientIdCollection coll = new PatientIdCollection();
		grdIdentifiersRow row;
		for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
		{
			row = form.grdIdentifiers().getRows().get(i);
			PatientId id = row.getValue();
			boolean exist = false;
			// WDEV-2496
			if (row.getcolIdType() != null 
				&&row.getcolIdType().getValue()!=null
				&& (row.getcolIdValue() != null 
				&& row.getcolIdValue().trim().length() != 0))
			{
				id.setType((PatIdType) row.getcolIdType().getValue());
				if (id.getType().equals(PatIdType.NHSN)) //wdev-7305
					id.setValue(row.getcolIdValue().replace(" ", ""));
				else
					id.setValue(row.getcolIdValue());

				if (id.getType().equals(PatIdType.NHSN) && id.getVerified() == null)//wdev-15109
					id.setVerified(Boolean.FALSE);

				for (int j = 0; j < coll.size(); j++)
				{
					if (coll.get(j).getType().equals(row.getcolIdType().getValue()) 
						&& coll.get(j).getValue().equals(row.getcolIdValue()))
					{
						exist = true;
						break;
					}
				}

				if (!exist)
				{
					if (id.getType().equals(PatIdType.NHSN))
					{
						id.setVerified(Boolean.FALSE);
						
//						 WDEV-5928 - BW Modified
						// If this identifier is in the saved patient, it may be verified, so leave it if it is
						Patient savedPatient = form.getLocalContext().getsavedPatient();
						if (savedPatient != null)
						{
							PatientId nhsnId = savedPatient.getPatientIdentifier(PatIdType.NHSN);
							if (nhsnId != null && nhsnId.getValue().equals(id.getValue()) && nhsnId.getVerifiedIsNotNull() && nhsnId.getVerified().booleanValue() == true)
							{
								id.setVerified(Boolean.TRUE);
							}
						}
					}
					coll.add(id);
				}
			}
		}

		pat.setIdentifiers(coll);
		if (!ConfigFlag.DOM.CASE_SENSITIVE_PATID.getValue())
		{
			pat.upperCaseIdentifierValues();
		}
		
		pat.setPrefCommLanguage(form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().getValue());

		NationalHealthCoverVo voInsurance = pat.getNationalHealthCover();
		if (voInsurance == null)
			voInsurance = new NationalHealthCoverVo();

		return pat;
	}
	
	private CommChannelVoCollection listCommChannels()
	{
		CommChannelVoCollection voCommChannelColl = new CommChannelVoCollection();
		grdCommChannelsRow rowComm;

		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			rowComm = form.grdCommChannels().getRows().get(i);
			CommChannelVo voCommChannel = rowComm.getValue();
			boolean existCommChannels = false;
			
			// WDEV-2496
			if (rowComm.getcolType() != null && (rowComm.getcolContactValue() != null && rowComm.getcolContactValue().trim().length() != 0))
			{
				voCommChannel.setChannelType(rowComm.getcolType());
				voCommChannel.setCommValue(rowComm.getcolContactValue());

				for (int k = 0; k < voCommChannelColl.size(); k++)
				{
					if (voCommChannelColl.get(k).getChannelType().equals(rowComm.getcolType()) && voCommChannelColl.get(k).getCommValue().equals(rowComm.getcolContactValue()))
					{
						existCommChannels = true;
						break;
					}
				}

				if (!existCommChannels)
					voCommChannelColl.add(voCommChannel);
			}
		}

		return voCommChannelColl;
	}
	
	private boolean validatePatient()
	{
		
		//wdev-19528
		if( !form.getLocalContext().getDemographicControlsConfigIsNotNull() || form.getLocalContext().getDemographicControlsConfig().size() == 0 )
		{
    		// validate Patient
    		if (form.txtSurname().getValue() == null || form.txtSurname().getValue().equals(""))
    		{
    			engine.showMessage("Please enter a Surname");
    			return false;
    		}
    		//wdev-13031
    		
    		if(ConfigFlag.DOM.GENDER_IS_MANDATORY_FOR_REGISTRATION.getValue() && form.cmbSex().getValue() == null)
    		{
    			engine.showMessage("Sex is mandatory.");
    			return false;
    		}
    
    		//----------
    		if (form.pdtDOB().getValue() != null)
    		{
    			if (form.pdtDOB().getValue().isGreaterThan(new Date()))
    			{
    				engine.showMessage("DOB cannot be in the future");
    				return false;
    			}
    		}
    		if (form.dteDod().getValue() != null)
    		{
    			if (form.dteDod().getValue().isGreaterThan(new Date()) || new DateTime(form.dteDod().getValue(),form.timTod().getValue()).isGreaterThan(new DateTime()))
    			{
    				engine.showMessage("Date/Time of Death cannot be set to a date/time in the future");
    				return false;
    			}
    		}
    		if (form.pdtDOB().getValue() != null && form.dteDod().getValue() != null)
    		{
    			if (form.dteDod().getValue().isLessThan(form.pdtDOB().getValue()))
    			{
    				engine.showMessage("DOB cannot be after DOD");
    				return false;
    			}
    		}
    
    		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
    		{
    			// WDEV-2496
    			if (((form.grdCommChannels().getRows().get(i).getcolType() != null) && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() == 0)) || (form.grdCommChannels().getRows().get(i).getcolType() != null && form.grdCommChannels().getRows().get(i).getcolContactValue() == null) || (form.grdCommChannels().getRows().get(i).getcolType() == null && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() != 0)))
    			{
    				engine.showMessage("Please enter a valid Contact type and value");
    				return false;
    			}
    		}
		}
		else
		{
			String[] UIErrors = null;
			UIErrors =  getUIErrorsForConfigurableMode();
			if( UIErrors != null && UIErrors.length > 0)
			{
				engine.showErrors(UIErrors);
				return false;
			}
			
			UIErrors =  form.ccAddressSearch().getUIErrorsForConfigurableMode();
			
			if( UIErrors != null && UIErrors.length > 0)
			{
				engine.showErrors(UIErrors);
				return false;
			}
		}
		//----------------------------------------------

		// WDEV-6964
		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() == false&&ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==false)
		{
		// WDEV-2496
		if (form.grdIdentifiers().getRows().size() == 0 || (form.grdIdentifiers().getRows().size() == 1 && form.grdIdentifiers().getRows().get(0).getcolIdType() == null || (form.grdIdentifiers().getRows().get(0).getcolIdValue() == null || (form.grdIdentifiers().getRows().get(0).getcolIdValue().trim().length() == 0))))
		{
			engine.showMessage("An identifier type of " + ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue() + " is mandatory");
			return false;
		}
		}

		boolean displayIdSet = false;
		grdIdentifiersRow row;
		for (int i = 0; i < form.grdIdentifiers().getRows().size(); i++)
		{
			row = form.grdIdentifiers().getRows().get(i);
			// WDEV-2496
			if (((row.getcolIdType() != null) && (row.getcolIdValue() != null && row.getcolIdValue().trim().length() == 0)) || (row.getcolIdType() != null &&row.getcolIdType().getValue() != null&& row.getcolIdValue() == null) || (row.getcolIdType() == null && row.getcolIdType().getValue() == null &&(row.getcolIdValue() != null && row.getcolIdValue().trim().length() != 0)))
			{
				engine.showMessage("Please enter a valid identifier type and value");
				return false;
			}
			//wdev-6138
			if (row.getcolIdType() != null
				&&row.getcolIdType().getValue() != null
				&& row.getcolIdValue() != null
				&& row.getcolIdValue().trim().length() > 50) 
			{
				engine.showMessage("An entered Identifier is too long. Please reenter with a size less then 50 in length.");
				return false;
			}

			// check if this is the display patid type
			if (row.getcolIdType() != null &&row.getcolIdType().getValue()!=null && row.getcolIdValue() != null && row.getcolIdType().getValue().equals(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue())))
				displayIdSet = true;
			
			if (row.getcolIdType() != null 
					&&row.getcolIdType().getValue()!=null
					&& row.getcolIdType().getValue().equals(PatIdType.NHSN))
			{
				String nospacesString = row.getcolIdValue().replace(" ", "");//wdev-7305

				if (NHSNumberCalculator.ValidNHSNumber(nospacesString) != "")
				{
					engine.showMessage(NHSNumberCalculator.ValidNHSNumber(nospacesString));
					return false;
				}
					

				if ( ! NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0,9)).contains(nospacesString.toString()))
				{
					engine.showMessage("The NHS number provided is invalid");
					return false;
				}
				else
					row.setcolIdValue(NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0,9)));
			}
			
		}

		if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue() == false&&ConfigFlag.DOM.USE_PATIENT_NUMBER.getValue()==false)
		{
		// Ensure that the display name identifier has been added
		if (!displayIdSet)
		{
			engine.showMessage("An identifier type of " + ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue() + " is mandatory");
			return false;
		}
		}
		return true;
	}
	public Patient getValue()
	{
		return populateDataFromScreen(form.getLocalContext().getPatient());
	}
	public void initialize()
	{
		clearScreen();
		form.getLocalContext().setbIdentifiersEdited(false);
		form.getLocalContext().setbCommChannelsEdited(false);
		form.getLocalContext().setsavedPatient(null);
		form.ccAddressSearch().setPhoneVisible(!ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"));
		form.getLocalContext().setbUpdatePDS(null);//WDEV-15197
	}

	public String[] validate()
	{
		return null;
		
	}
	
	public Boolean savePatientDemographics()
	{
		//check valid address if CAPSCAN enabled
		if (ConfigFlag.UI.CAPSCAN_ENABLED.getValue())
		{
			//TODO: put validation routine here with aid of helper class.
		}
		
		boolean newPatient = false;
		Patient patient = form.getLocalContext().getPatient();
		if (patient == null)
			patient = new Patient();

		if (patient.getID_Patient() == null)
			newPatient = true;

		patient = populateDataFromScreen(patient);
		if (patient == null)
			return false;
		if (!newPatient &&
				ConfigFlag.GEN.CANCEL_APPOINTMENTS_WHEN_DOD_ENTERED.getValue() //  WDEV-19682 
				&& form.getLocalContext().getbRemovePatientAppointments() == null	
				&& form.getGlobalContext().Core.getPatientShort().getDod() != null
				&& form.getGlobalContext().Core.getDeathDetailsIsNotNull()
				&& form.getGlobalContext().Core.getDeathDetails().getPatient().getDodIsNotNull()
				&& form.getGlobalContext().Core.getDeathDetails().getID_DeathDetails() == null)     //wdev-13521
			{
				form.getLocalContext().setCancelAppointmentsMessageID(engine.showMessage("Do you want to cancel all this patient's appointments?", "Cancel Appointments", MessageButtons.YESNO, MessageIcon.QUESTION));
				return false;
			}
		if (form.getLocalContext().getbUpdatePDS() == null//WDEV-15197
			&& patient.getSourceOfInformationIsNotNull()
			&& patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS)
			&& form.getLocalContext().getsavedPatientIsNotNull()
			&& checkForEditedData(form.getLocalContext().getsavedPatient(), patient ))
		{
			form.getGlobalContext().Core.setYesNoDialogMessage("The PDS status of this patient record is about to be changed because of changes to the patient's demographics. Are you sure you want to save?");
			form.getGlobalContext().Core.setHideCancelButton(Boolean.TRUE);
			engine.open(form.getForms().Core.YesNoDialog);
			return false;
		}
				
		return save(patient, newPatient, Boolean.FALSE);
	}
	
	private boolean save(Patient patient, boolean newPatient, boolean bFromDialogClosed) 
	{
		//check valid address if CAPSCAN enabled
		if (ConfigFlag.UI.CAPSCAN_ENABLED.getValue())
		{
			//TODO: put validation routine here with aid of helper class.
		}
		
		if (patient == null)
		{
			patient = form.getLocalContext().getPatient();
			if (patient == null)
			{
				patient = new Patient();
				newPatient = true;
			}

			patient = populateDataFromScreen(patient);
			if (patient == null)
				return false;
		}

		boolean bSave = newPatient;
		
		if (newPatient)
			patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
		else if (patient.getSourceOfInformationIsNotNull()
				&& patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS)
				&& ( (form.getLocalContext().getsavedPatient().getEthnicOrigin() == null && patient.getEthnicOriginIsNotNull())
					|| (form.getLocalContext().getsavedPatient().getEthnicOriginIsNotNull() && patient.getEthnicOrigin() == null) 
					|| (form.getLocalContext().getsavedPatient().getEthnicOriginIsNotNull() && patient.getEthnicOriginIsNotNull()
						&& ! form.getLocalContext().getsavedPatient().getEthnicOrigin().toString().equals(patient.getEthnicOrigin().toString()))) 
				&& !checkForEditedData(form.getLocalContext().getsavedPatient(), patient))//	WDEV-15197
		{
			bSave = true;
		}
		else if (patient.getSourceOfInformationIsNotNull()
				&& ! patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS)
				&& form.getLocalContext().getsavedPatientIsNotNull())
		{
			bSave = true;
		}
		else if (patient.getSourceOfInformationIsNotNull())
		{
			// WDEV-5928 - BW Modified
			Patient savedPatient = form.getLocalContext().getsavedPatient();
			boolean dataModified = false;
			if (savedPatient != null)
			{
				if (savedPatient.getEthnicOriginIsNotNull() && patient.getEthnicOriginIsNotNull()
				&& !savedPatient.getEthnicOrigin().equals(patient.getEthnicOrigin())
					|| (savedPatient.getEthnicOriginIsNotNull() && patient.getEthnicOrigin() == null) 
					|| (savedPatient.getEthnicOrigin() == null && patient.getEthnicOriginIsNotNull()))
					bSave = true;

				if ((savedPatient.getAddressesIsNotNull() && !patient.getAddressesIsNotNull()) 
					|| (!savedPatient.getAddressesIsNotNull() && patient.getAddressesIsNotNull()) 
					|| (savedPatient.getAddressesIsNotNull() && patient.getAddressesIsNotNull()
					&& ! savedPatient.getAddresses().toDisplayString().equals(patient.getAddresses().toDisplayString())))
					bSave = true;
					
				
//				 WDEV-5928 - BW Modified
				dataModified = checkForEditedData(form.getLocalContext().getsavedPatient(), patient);
			}
			
			if (patient.getSourceOfInformationIsNotNull()
				&& patient.getSourceOfInformation().equals(RegistrationSourceOfInfo.PDS)
				&& form.getLocalContext().getsavedPatientIsNotNull()
				&& dataModified)
			{
				patient.setSourceOfInformation(RegistrationSourceOfInfo.MAXIMS);
				for (int i = 0 ; patient.getIdentifiersIsNotNull() && i < patient.getIdentifiers().size() ; i++)
				{
					if (patient.getIdentifiers().get(i).getTypeIsNotNull()
						&& patient.getIdentifiers().get(i).getType().equals(PatIdType.NHSN))
					{
						patient.getIdentifiers().get(i).setVerified(false);
					}
				}
				bSave = true;
			}
		}

		if (bSave)
		{
			if (form.getLocalContext().getDeathDetailsIsNotNull())
			{
				patient.setCancelSD_APPTS(Boolean.TRUE.equals(form.getLocalContext().getbRemovePatientAppointments()) ? Boolean.TRUE : null); //WDEV-19682
				
				String[] patErrors = patient.validate();
				if (patErrors != null)
				{
					engine.showErrors(patErrors);
					return false;
				}

				String[] errors = form.getLocalContext().getDeathDetails().validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return false;
				}

				try
				{
					patient = domain.saveDemographics(patient, form.getLocalContext().getDeathDetails());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage("Data has been modified by another user - screen will be refreshed");
					return false;
				}
				catch (UniqueKeyViolationException e)
				{
					if (form.getLocalContext().getbUpdatePDSIsNotNull()
							&& form.getLocalContext().getbUpdatePDS())
							patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. WDEV-15197

					engine.showMessage(e.getMessage());
					return false;
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (IndexOutOfBoundsException e)
				{
					engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
					return false;
				}

				form.getLocalContext().setDeathDetails(null);
			}
			else
			{
				try
				{
					String[] errors = patient.validate();
					if (errors != null)
					{
						engine.showErrors(errors);
						return false;
					}
					patient = domain.savePatient(patient);
				}
				catch (StaleObjectException e)
				{
					engine.showMessage("Data has been modified by another user - screen will be refreshed");
					//wdev-10485
					displayDemographics();
					//--------
					//populateScreenFromData(patient);
					return false;
				}
				catch (UniqueKeyViolationException e)
				{
					if (form.getLocalContext().getbUpdatePDSIsNotNull()
							&& form.getLocalContext().getbUpdatePDS())
							patient.setSourceOfInformation(RegistrationSourceOfInfo.PDS);//reset the source in patient so the checkForEditedData logic above will kick in again and the verified will be reset again. WDEV-15197
					
					engine.showMessage(e.getMessage());
					return false;
				}
				catch (IndexOutOfBoundsException e)
				{
					engine.showMessage("An error has occured while saving - it is most likely in the list of Patient Identifiers saved.");
					return false;
				} 
				catch (DomainInterfaceException e) 
				{
					engine.showMessage(e.getMessage());
					return false;
				}
			}
		}
		
		form.getLocalContext().setPatient(patient);
		form.getGlobalContext().Core.setPatientShort(patient);
		if (patient!=null)
			if (patient.getGpIsNotNull())	
				form.getGlobalContext().RefMan.setPatientsGP(patient.getGp());
		populateScreenFromData(patient);
		if (bFromDialogClosed)
		{
			form.getLocalContext().setbEventFired(true);
			form.fireCustomControlValueChanged();
		}
		return true;
	}
	
	private boolean checkForEditedData(Patient savedPatient, Patient patient) 
	{
		if (savedPatient == null || patient == null)
			return false;
	
		
		// wdev-6157 cater for empty address as well as null
		if ( (savedPatient.getAddress() == null && patient.getAddressIsNotNull() && !patient.getAddress().toDisplayString().equals(""))
			|| (savedPatient.getAddressIsNotNull() && !savedPatient.getAddress().toDisplayString().equals("") && patient.getAddress() == null) 
			|| (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull()
				&& ! savedPatient.getAddress().toDisplayString().equals(patient.getAddress().toDisplayString())))
			return true;

		if ( (savedPatient.getAddress() == null && patient.getAddressIsNotNull())
				|| (savedPatient.getAddressIsNotNull() && patient.getAddress() == null))
				return true;
			
		if (savedPatient.getAddressIsNotNull() && patient.getAddressIsNotNull() 
			&& (savedPatient.getAddress().getPhone() == null && patient.getAddress().getPhoneIsNotNull()
			|| (savedPatient.getAddress().getPhoneIsNotNull() && patient.getAddress().getPhone() == null) 
			|| (savedPatient.getAddress().getPhoneIsNotNull() && patient.getAddress().getPhoneIsNotNull()
				&& ! savedPatient.getAddress().getPhone().equals(patient.getAddress().getPhone()))))
			return true;
		
		if ( savedPatient.getName() == null && patient.getName() != null)
			return true;

		if ( (savedPatient.getName().getTitle() == null && patient.getName().getTitleIsNotNull())
			|| (savedPatient.getName().getTitleIsNotNull() && patient.getName().getTitle() == null) 
			|| (savedPatient.getName().getTitleIsNotNull() && patient.getName().getTitleIsNotNull()
				&& ! savedPatient.getName().getTitle().equals(patient.getName().getTitle())) )
			return true;
		
		if ( (savedPatient.getName().getForename() == null && patient.getName().getForenameIsNotNull())
			|| (savedPatient.getName().getForenameIsNotNull() && patient.getName().getForename() == null) 
			|| (savedPatient.getName().getForenameIsNotNull() && patient.getName().getForenameIsNotNull()
				&& ! savedPatient.getName().getForename().equals(patient.getName().getForename())) )
			return true;

		if ( (savedPatient.getName().getMiddleName() == null && patient.getName().getMiddleNameIsNotNull())
			|| (savedPatient.getName().getMiddleNameIsNotNull() && patient.getName().getMiddleName() == null) 
			|| (savedPatient.getName().getMiddleNameIsNotNull() && patient.getName().getMiddleNameIsNotNull()
				&& ! savedPatient.getName().getMiddleName().equals(patient.getName().getMiddleName())) )
			return true;

		if ( (savedPatient.getName().getSurname() == null && patient.getName().getSurnameIsNotNull())
			|| (savedPatient.getName().getSurnameIsNotNull() && patient.getName().getSurname() == null) 
			|| (savedPatient.getName().getSurnameIsNotNull() && patient.getName().getSurnameIsNotNull()
				&& ! savedPatient.getName().getSurname().equals(patient.getName().getSurname())) )
			return true;

		if ( (savedPatient.getSex() == null && patient.getSexIsNotNull())
			|| (savedPatient.getSexIsNotNull() && patient.getSex() == null) 
			|| (savedPatient.getSexIsNotNull() && patient.getSexIsNotNull()
				&& ! savedPatient.getSex().toString().equals(patient.getSex().toString())))
			return true;

		if ( (savedPatient.getDob() == null && patient.getDobIsNotNull())
			|| (savedPatient.getDobIsNotNull() && patient.getDob() == null) 
			|| (savedPatient.getDobIsNotNull() && patient.getDobIsNotNull()
				&& ! savedPatient.getDob().toString().equals(patient.getDob().toString())))
			return true;

		if ( (savedPatient.getDod() == null && patient.getDodIsNotNull())
			|| (savedPatient.getDodIsNotNull() && patient.getDod() == null) 
			|| (savedPatient.getDodIsNotNull() && patient.getDodIsNotNull()
				&& ! savedPatient.getDod().toString().equals(patient.getDod().toString())))
			return true;

		if ( (savedPatient.getMaritalStatus() == null && patient.getMaritalStatusIsNotNull())
			|| (savedPatient.getMaritalStatusIsNotNull() && patient.getMaritalStatus() == null) 
			|| (savedPatient.getMaritalStatusIsNotNull() && patient.getMaritalStatusIsNotNull()
				&& ! savedPatient.getMaritalStatus().toString().equals(patient.getMaritalStatus().toString())))
			return true;

		if ( (savedPatient.getOccupation() == null && patient.getOccupationIsNotNull())
			|| (savedPatient.getOccupationIsNotNull() && patient.getOccupation() == null) 
			|| (savedPatient.getOccupationIsNotNull() && patient.getOccupationIsNotNull()
				&& ! savedPatient.getOccupation().toString().equals(patient.getOccupation().toString())))
			return true;

		if ( (savedPatient.getReligion() == null && patient.getReligionIsNotNull())
			|| (savedPatient.getReligionIsNotNull() && patient.getReligion() == null) 
			|| (savedPatient.getReligionIsNotNull() && patient.getReligionIsNotNull()
				&& ! savedPatient.getReligion().toString().equals(patient.getReligion().toString())))
			return true;

		if ( (savedPatient.getNok() == null && patient.getNokIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNok() == null)
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getName() == null && patient.getNok().getNameIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getNameIsNotNull() && patient.getNok().getName() == null) 
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getNameIsNotNull() && patient.getNok().getNameIsNotNull()
				&& ! savedPatient.getNok().getName().toString().equals(patient.getNok().getName().toString())))
			return true;
			
		if ( (savedPatient.getNok() == null && patient.getNokIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNok() == null)
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getAddress() == null && patient.getNok().getAddressIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddress() == null) 
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull()
				&& ! savedPatient.getNok().getAddress().toDisplayString().equals(patient.getNok().getAddress().toDisplayString()))
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull()
				&& savedPatient.getNok().getAddress().getPhone() == null && patient.getNok().getAddress().getPhoneIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull()
				&& savedPatient.getNok().getAddress().getPhoneIsNotNull() && patient.getNok().getAddress().getPhone() == null)
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getAddressIsNotNull() && patient.getNok().getAddressIsNotNull()
				&& savedPatient.getNok().getAddress().getPhoneIsNotNull() && patient.getNok().getAddress().getPhoneIsNotNull()
				&& ! savedPatient.getNok().getAddress().getPhone().equals(patient.getNok().getAddress().getPhone())) )
			return true;
			
		if ( (savedPatient.getNok() == null && patient.getNokIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNok() == null)
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getRelationship() == null && patient.getNok().getRelationshipIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getRelationshipIsNotNull() && patient.getNok().getRelationship() == null) 
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getRelationshipIsNotNull() && patient.getNok().getRelationshipIsNotNull()
				&& ! savedPatient.getNok().getRelationship().equals(patient.getNok().getRelationship())))
			return true;

		if ( (savedPatient.getNok() == null && patient.getNokIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNok() == null)
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getCommChannels() == null && patient.getNok().getCommChannelsIsNotNull())
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getCommChannelsIsNotNull() && patient.getNok().getCommChannels() == null) 
			|| (savedPatient.getNokIsNotNull() && patient.getNokIsNotNull()
				&& savedPatient.getNok().getCommChannelsIsNotNull() && patient.getNok().getCommChannelsIsNotNull()
				&& savedPatient.getNok().getCommChannels().size() > 0 && patient.getNok().getCommChannels().size() >0
				&& ! savedPatient.getNok().getCommChannels().get(0).getCommValue().equals(patient.getNok().getCommChannels().get(0).getCommValue())) )
			return true;
			
		if ( (savedPatient.getGp() == null && patient.getGpIsNotNull())
			|| (savedPatient.getGpIsNotNull() && patient.getGp() == null) 
			|| (savedPatient.getGpIsNotNull() && patient.getGpIsNotNull()
				&& ! savedPatient.getGp().toString().equals(patient.getGp().toString())))
			return true;

		if ( (savedPatient.getGpSurgery() == null && patient.getGpSurgeryIsNotNull())
			|| (savedPatient.getGpSurgeryIsNotNull() && patient.getGpSurgery() == null) 
			|| (savedPatient.getGpSurgeryIsNotNull() && patient.getGpSurgeryIsNotNull()
				&& ! savedPatient.getGpSurgery().toString().equals(patient.getGpSurgery().toString())))
			return true;
		
		
		if (form.getLocalContext().getbIdentifiersEdited())
			return true;

		// WDEV-5928 - BW Modified
		if ((patient.getIdentifiersIsNotNull() && savedPatient.getIdentifiersIsNotNull() && patient.getIdentifiers().size() != savedPatient.getIdentifiers().size())
				|| (patient.getIdentifiersIsNotNull() && !savedPatient.getIdentifiersIsNotNull())
				|| (!patient.getIdentifiersIsNotNull() && savedPatient.getIdentifiersIsNotNull()))
			return true;
		
		//Check values of identifiers
		for(int i = 0 ; savedPatient.getIdentifiersIsNotNull() && i < savedPatient.getIdentifiers().size() ; i++)
		{
			PatientId voSavedIdent = savedPatient.getIdentifiers().get(i);
			// WDEV-5928 - BW Modified
			boolean found=false;
			for(int j = 0 ; patient.getIdentifiersIsNotNull() && j < patient.getIdentifiers().size() ; j++)
			{
				PatientId voIdent = patient.getIdentifiers().get(j);
				if (voSavedIdent.getTypeIsNotNull() 
					&& voIdent.getTypeIsNotNull()
					&& voSavedIdent.getType().equals(voIdent.getType()) )
				{
					found=true;
					if (voSavedIdent.getValueIsNotNull()
						&& voIdent.getValueIsNotNull()
						&& ! voSavedIdent.getValue().equals(voIdent.getValue()) )
						return true;
				}
			}
			if (!found)
				return true;
		}

		if (form.getLocalContext().getbCommChannelsEdited())
			return true;

		//Check values of Commchannels
		// WDEV-5928 - BW Modified
		if ((patient.getCommChannelsIsNotNull() && savedPatient.getCommChannelsIsNotNull() && patient.getCommChannels().size() != savedPatient.getCommChannels().size())
				|| (patient.getCommChannelsIsNotNull() && !savedPatient.getCommChannelsIsNotNull())
				|| (!patient.getCommChannelsIsNotNull() && savedPatient.getCommChannelsIsNotNull()))
			return true;
		
		for(int i = 0 ; savedPatient.getCommChannelsIsNotNull() && i < savedPatient.getCommChannels().size() ; i++)
		{
			CommChannelVo voSavedComm = savedPatient.getCommChannels().get(i);
			// WDEV-5928 - BW Modified
			boolean found=false;
			for(int j = 0 ; patient.getCommChannelsIsNotNull() && j < patient.getCommChannels().size() ; j++)
			{
				CommChannelVo voComm = patient.getCommChannels().get(j);
				
				if (voSavedComm.getChannelTypeIsNotNull() 
					&& voComm.getChannelTypeIsNotNull()
					&& voSavedComm.getChannelType().equals(voComm.getChannelType()) )
				{
					found=true;
					if (voSavedComm.getCommValueIsNotNull()
						&& voComm.getCommValueIsNotNull()
						&& ! voSavedComm.getCommValue().equals(voComm.getCommValue()) )
						return true;
				}
			}
			if (!found)
				return true;
		}

		if ( (savedPatient.getNationalHealthCover() == null && patient.getNationalHealthCoverIsNotNull())
			|| (savedPatient.getNationalHealthCoverIsNotNull() && patient.getNationalHealthCover() == null) 
			|| (savedPatient.getNationalHealthCoverIsNotNull() && patient.getNationalHealthCoverIsNotNull()
				&& ! savedPatient.getNationalHealthCover().toString().equals(patient.getNationalHealthCover().toString())))
			return true;

		return false;
	}
	public Boolean getPDSPatientEdited() 
	{
		if (form.getLocalContext().getbEventFiredIsNotNull()//wdev-6137
			&& form.getLocalContext().getbEventFired())
		{
			form.getLocalContext().setbEventFired(false);
			return true;
		}
		else
			return false;
	}
	
	protected void onBtnDeceasedClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
		{
			return; //WDEV-20015 no longer able to mark as deceased on this screen. only allow Death Details view
			//form.getGlobalContext().Core.setPatientShort(new PatientShort());
		}
		form.getGlobalContext().Core.setParentFormMode(FormMode.VIEW); //WDEV-20015
		engine.open(form.getForms().Clinical.DeathDetails);
	}
	//wdev-19528
	public void setConfigurableFields(DemographicControlsConfigVoCollection collfields)
	{
		if( collfields == null || collfields.size() == 0)
			return;
		
		for(int i = 0; i < collfields.size(); i++ )
		{
			DemographicControlsConfigVo tempVo = collfields.get(i); 
			if( tempVo != null )
			{
				if( TITLE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbTitle().setRequired(tempVo.getIsMandatory());
				}
				else if( FORENAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtForename().setRequired(tempVo.getIsMandatory());
				}
				else if( MIDDLENAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtMiddleName().setRequired(tempVo.getIsMandatory());
				}
				else if( SURNAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtSurname().setRequired(tempVo.getIsMandatory());
				}
				else if( SEX_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbSex().setRequired(tempVo.getIsMandatory());
				}
				else if( DOB_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.pdtDOB().setRequired(tempVo.getIsMandatory());
				}
				else if( MARITAL_STATUS_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbMarital().setRequired(tempVo.getIsMandatory());
				}
				else if( OCCUPATION_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbOccupation().setRequired(tempVo.getIsMandatory());
				}
				else if( RELIGION_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbReligion().setRequired(tempVo.getIsMandatory());
				}
				else if( ETHNIC_ORIGIN_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbEthnic().setRequired(tempVo.getIsMandatory());
				}
				else if( OTHER_ADDRESSES_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtOtherAddress().setRequired(tempVo.getIsMandatory());
									
				}
				else if( COMM_CHANNRLS_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.getLocalContext().setIsGridCommChannelsMandatory(tempVo.getIsMandatory());
					form.getLocalContext().setDemographicControlsConf(tempVo);
				}
				else if( NEXT_OF_KIN_NAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtNOK().setRequired(tempVo.getIsMandatory());
				}
				else if( GP_NAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtGPName().setRequired(tempVo.getIsMandatory());
					
				}
				else if( ELIG_FOR_MED_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().setRequired(tempVo.getIsMandatory());
				}
				else if( MEDICAL_CARD_NO_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().setRequired(tempVo.getIsMandatory());
				}
				else if( PREF_LANGUAGE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().setRequired(tempVo.getIsMandatory());
				}
			}
		}
	}
	//wdev-19528
	public String[] getUIErrorsForConfigurableMode()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		
		if( Boolean.TRUE.equals(form.getLocalContext().getIsGridCommChannelsMandatory() ) )
		{
			boolean ismandatory = true;
			for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
			{
				
				if( ((form.grdCommChannels().getRows().get(i).getcolType() != null) && form.getLocalContext().getDemographicControlsConfigIsNotNull() && form.grdCommChannels().getRows().get(i).getcolType().equals(form.getLocalContext().getDemographicControlsConf().getChannelType())) )
				{
					ismandatory = false;
				}
			}
			
			if( ismandatory == true )
			{
				if( form.getLocalContext().getDemographicControlsConfIsNotNull() && form.getLocalContext().getDemographicControlsConf().getChannelTypeIsNotNull())
					errors.add(form.getLocalContext().getDemographicControlsConf().getChannelType().getIItemText() + "is mandatory");
				else
					errors.add("Please enter a valid Contact type and Value");
				
			}
			
		}
		
		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			// WDEV-2496
			if (((form.grdCommChannels().getRows().get(i).getcolType() != null) && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() == 0)) || (form.grdCommChannels().getRows().get(i).getcolType() != null && form.grdCommChannels().getRows().get(i).getcolContactValue() == null) || (form.grdCommChannels().getRows().get(i).getcolType() == null && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() != 0)))
			{
				errors.add("Please enter a valid Contact type and Value");
				
			}
		}
		
		if( form.cmbTitle().getVisible() && form.cmbTitle().isRequired() && form.cmbTitle().getValue() == null)
		{
			errors.add("Title is mandatory.");
		}
		if( form.txtForename().isVisible() && form.txtForename().isRequired() && (form.txtForename().getValue() == null || form.txtForename().getValue() == ""))
		{
			errors.add("Forename is mandatory.");
		}
		if( form.txtMiddleName().isVisible() && form.txtMiddleName().isRequired() && (form.txtMiddleName().getValue() == null || form.txtMiddleName().getValue() == ""))
		{
			errors.add("Middlename is mandatory.");
		}
		if( form.txtSurname().isVisible() && form.txtSurname().isRequired() && (form.txtSurname().getValue() == null || form.txtSurname().getValue() == ""))
		{
			errors.add("Surname is mandatory.");
		}
		if( form.cmbSex().getVisible() && form.cmbSex().isRequired() && form.cmbSex().getValue() == null)
		{
			errors.add("Sex is mandatory.");
		}
		if( form.pdtDOB().isVisible() && form.pdtDOB().isRequired() && form.pdtDOB().getValue() == null)
		{
			errors.add("DOB is mandatory.");
		}
		if( form.cmbMarital().getVisible() && form.cmbMarital().isRequired() && form.cmbMarital().getValue() == null)
		{
			errors.add("Marital Status is mandatory.");
		}
		if( form.cmbOccupation().getVisible() && form.cmbOccupation().isRequired() && form.cmbOccupation().getValue() == null)
		{
			errors.add("Occupation is mandatory.");
		}
		if( form.cmbReligion().getVisible() && form.cmbReligion().isRequired() && form.cmbReligion().getValue() == null)
		{
			errors.add("Religion is mandatory.");
		}
		if( form.cmbEthnic().getVisible() && form.cmbEthnic().isRequired() && form.cmbEthnic().getValue() == null)
		{
			errors.add("Ethnic Origin is mandatory.");
		}
		
		if( form.pdtDOB().isVisible() && form.pdtDOB().getValue() != null)   //wdev-13521
		{
			if( form.pdtDOB().getValue().isGreaterThan(new Date()))
			{
				errors.add("DOB cannot be in the future");
				
			}
		}
		if( form.dteDod().isVisible() && form.dteDod().getValue() != null)					//wdev-13521
		{
			if (form.dteDod().getValue().isGreaterThan(new Date()) || new DateTime(form.dteDod().getValue(),form.timTod().getValue()).isGreaterThan(new DateTime()))
			{
				errors.add("Date/Time of Death cannot be set to a date/time in the future");
				
			}
		}
		if( form.pdtDOB().isVisible() && form.dteDod().isVisible() && form.pdtDOB().getValue() != null && form.dteDod().getValue() != null)	//wdev-13521
		{
			if( form.dteDod().getValue().isLessThan(form.pdtDOB().getValue()))
			{
				errors.add("DOB cannot be after DOD");
				
			}
		}
		
		if( form.txtNOK().isVisible() && form.txtNOK().isRequired() && (form.txtNOK().getValue() == null || form.txtNOK().getValue() == ""))
		{
			errors.add("Next Of Kin Name is mandatory.");
		}
		if( form.txtGPName().isVisible() && form.txtGPName().isRequired() && (form.txtGPName().getValue() == null || form.txtGPName().getValue() == ""))
		{
			errors.add("GP Name is mandatory.");
		}
		
		if( form.lyrAdditionalDetails().tabMedicalCardIrish().isVisible() && form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().isVisible() && form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().isEnabled() && form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().isRequired() && (form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().getValue() == null  || form.lyrAdditionalDetails().tabMedicalCardIrish().txtHealthActCat().getValue() == ""))
		{
			errors.add("Health Act Cat is mandatory.");
		}
		if( form.lyrAdditionalDetails().tabMedicalCardIrish().isVisible() && form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().isEnabled() && form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().isVisible() && form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().isRequired() && (form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().getValue() == null || form.lyrAdditionalDetails().tabMedicalCardIrish().txtMCNumber().getValue() == ""))
		{
			errors.add("MC Number is mandatory.");
		}
		if( form.lyrAdditionalDetails().tabPLanguage().isVisible() && form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().getVisible() && form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().isEnabled() && form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().isRequired() && form.lyrAdditionalDetails().tabPLanguage().cmbPreferedLanguage().getValue() == null)
		{
			errors.add("Preferred Language is mandatory.");
		}
		
		
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	//WDEV-19682
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getCancelAppointmentsMessageIDIsNotNull()
				&& messageBoxId == form.getLocalContext().getCancelAppointmentsMessageID())
			{
				form.getLocalContext().setbRemovePatientAppointments(DialogResult.YES.equals(result) ? Boolean.TRUE : Boolean.FALSE);
				
				savePatientDemographics();
			}
		
	}	
}
