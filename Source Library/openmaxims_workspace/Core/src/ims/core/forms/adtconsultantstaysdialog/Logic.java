//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5567.19951)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.adtconsultantstaysdialog;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.adtconsultantstaysdialog.GenForm.grdStaysRow;
import ims.core.vo.ConsultantStayLiteVo;
import ims.core.vo.ConsultantStayLiteVoCollection;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	public static class ConsultantStayLiteVoTransferDateComparator implements Comparator<ConsultantStayLiteVo>
	{
		private int order = -1;
		
		public ConsultantStayLiteVoTransferDateComparator()
		{
			this(SortOrder.ASCENDING);	
		}
		public ConsultantStayLiteVoTransferDateComparator(SortOrder sortOrderDate)
		{
			order = SortOrder.DESCENDING.equals(sortOrderDate) ? -1 : 1;		
		}
		public int compare(ConsultantStayLiteVo o1, ConsultantStayLiteVo o2)
		{
			if (o1.getTransferDateTimeIsNotNull() && o2.getTransferDateTimeIsNotNull())
				return o1.getTransferDateTime().compareTo(o2.getTransferDateTime()) * order;
			if (o1.getTransferDateTime() == null)
				return -1 * order;
			if (o2.getTransferDateTime() == null)
				return order;
			
			return 0;
		}
		
	}
	public static class ConsultantStayLiteVoEndDateComparator implements Comparator<ConsultantStayLiteVo>
	{
		private int order = -1;
		
		public ConsultantStayLiteVoEndDateComparator()
		{
			this(SortOrder.ASCENDING);	
		}
		public ConsultantStayLiteVoEndDateComparator(SortOrder sortOrderDate)
		{
			order = SortOrder.DESCENDING.equals(sortOrderDate) ? -1 : 1;		
		}
		public int compare(ConsultantStayLiteVo o1, ConsultantStayLiteVo o2)
		{
			if (o1.getEndDateTimeIsNotNull() && o2.getEndDateTimeIsNotNull())
				return o1.getEndDateTime().compareTo(o2.getEndDateTime()) * order;
			if (o1.getEndDateTime() == null)
				return -1 * order;
			if (o2.getEndDateTime() == null)
				return order;			
			
			return 0;
		}		
	}
	public static class ConsultantStayLiteVoConsultantComparator implements Comparator<ConsultantStayLiteVo>
	{
		private int order = -1;
		
		public ConsultantStayLiteVoConsultantComparator()
		{
			this(SortOrder.ASCENDING);	
		}
		public ConsultantStayLiteVoConsultantComparator(SortOrder sortOrderDate)
		{
			order = SortOrder.DESCENDING.equals(sortOrderDate) ? -1 : 1;		
		}
		public int compare(ConsultantStayLiteVo o1, ConsultantStayLiteVo o2)
		{
			int sortOrder = 0;
			if (o1.getConsultant() == null || o1.getConsultant().getName() == null)
				return -1 * order;

			if (o2.getConsultant() == null || o2.getConsultant().getName() == null)
				return order;

			if (o1.getConsultantIsNotNull() && o2.getConsultantIsNotNull() && o2.getConsultant().getName() != null && o1.getConsultant().getName() != null)
			{

				if (o1.getConsultant().getName().getSurname() == null)
					sortOrder = order * -1;
				if (o2.getConsultant().getName().getSurname() == null)
					sortOrder = order;
				if (o1.getConsultant().getName().getSurnameIsNotNull() && o2.getConsultant().getName().getSurnameIsNotNull())
					sortOrder = order * o1.getConsultant().getName().getSurname().compareToIgnoreCase(o2.getConsultant().getName().getSurname());
				if (0 != sortOrder)
					return sortOrder;
				else
				{
					if (o1.getConsultant().getName().getForename() == null)
						sortOrder = order * -1;
					if (o2.getConsultant().getName().getForename() == null)
						sortOrder = order;
					if (o1.getConsultant().getName().getForenameIsNotNull() && o2.getConsultant().getName().getForenameIsNotNull())			
						sortOrder = order * o1.getConsultant().getName().getForename().compareToIgnoreCase(o2.getConsultant().getName().getForename());
				}				
			}
			return sortOrder;
		}
	}
		
	private static final long serialVersionUID = 1L;
	private static final Boolean IS_CURRENT_STAY = Boolean.TRUE;
	
	private static final int COL_FROM_DATE = 1;
	private static final int COL_TO_DATE = 2;
	private static final int COL_CONSULTANT = 3;
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open()
	{
		InpatientEpisodeLiteVo refInpat = null;
		if (form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
			refInpat = form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode();
		else if (form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
			refInpat = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		ConsultantStayLiteVoCollection coll = domain.getStays(refInpat);
		populateRecordsToGrid(coll);
		form.setMode(FormMode.VIEW);
		
	}
	private void populateRecordsToGrid(ConsultantStayLiteVoCollection coll)
	{
		form.grdStays().getRows().clear();		
		if (coll == null || coll.size() == 0)
			return;
		
		for (int i=0;i<coll.size();i++)
		{
			grdStaysRow row = form.grdStays().getRows().newRow();
			ConsultantStayLiteVo stay = coll.get(i);
			
			row.setColFrom(stay.getTransferDateTimeIsNotNull()  ? stay.getTransferDateTime().toString() : null);
			row.setColTo(stay.getEndDateTimeIsNotNull()  ? stay.getEndDateTime().toString() : null);
			row.setColConsultant(stay.getConsultantIsNotNull()  ? stay.getConsultant().getIMosName() : null);
			row.setColService(stay.getServiceIsNotNull()  ? stay.getService().getServiceName() : null);
			row.setColCategory(stay.getPatientStatusIsNotNull() ? stay.getPatientStatus().getText() : null);
			row.setColSpecialty(stay.getSpecialtyIsNotNull()  ? stay.getSpecialty().toString() : null);		
			row.setColDummy(i == 0 && stay.getEndDateTime() == null ? IS_CURRENT_STAY : false);
			
			row.setValue(stay);
		}	
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onGrdStaysGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException
	{
		sortStays(column);
	}

	private void sortStays(int column)
	{
		ConsultantStayLiteVoCollection values = form.grdStays().getValues();
		if (values.size() <2)
			return;
		
		ConsultantStayLiteVo selValue = form.grdStays().getValue();
		if (column == COL_FROM_DATE)
		{
			form.getLocalContext().setSortOrderFromDate(SortOrder.DESCENDING.equals(form.getLocalContext().getSortOrderFromDate()) ? SortOrder.ASCENDING : SortOrder.DESCENDING);
			form.getLocalContext().setSortOrderToDate(null);
			form.getLocalContext().setSortOrderConsultant(null);
			values.sort(new ConsultantStayLiteVoTransferDateComparator(form.getLocalContext().getSortOrderFromDate()));
		}
		if (column == COL_TO_DATE)
		{
			form.getLocalContext().setSortOrderToDate(SortOrder.DESCENDING.equals(form.getLocalContext().getSortOrderToDate()) ? SortOrder.ASCENDING : SortOrder.DESCENDING);
			form.getLocalContext().setSortOrderFromDate(null);
			form.getLocalContext().setSortOrderConsultant(null);
			values.sort(new ConsultantStayLiteVoEndDateComparator(form.getLocalContext().getSortOrderToDate()));
		}
		if (column == COL_CONSULTANT)
		{
			form.getLocalContext().setSortOrderConsultant(SortOrder.DESCENDING.equals(form.getLocalContext().getSortOrderConsultant()) ? SortOrder.ASCENDING : SortOrder.DESCENDING);
			form.getLocalContext().setSortOrderFromDate(null);
			form.getLocalContext().setSortOrderToDate(null);
			values.sort(new ConsultantStayLiteVoConsultantComparator(form.getLocalContext().getSortOrderConsultant()));
		}		
		populateRecordsToGrid(values);
		if (selValue != null)
		{
			form.grdStays().setValue(selValue);
		}
		updateControlsState();
	}
	private void updateControlsState()
	{
		int noOfStays = form.grdStays().getRows().size();
		form.getContextMenus().Core.hideAllConsultantStaysMenuItems();
		form.getContextMenus().Core.getConsultantStaysRIEItem().setVisible(form.grdStays().getValue() != null && noOfStays > 1);		
	}
	@Override
	protected void onGrdStaysSelectionChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.CoreNamespace.ConsultantStays.RIE:
			initiateMarkAsRIE();
		}
		updateControlsState();
	}
	private void initiateMarkAsRIE()
	{
		if (form.grdStays().getValue() == null)
			return;
		engine.open(form.getForms().Core.RieConfirmationDialog);		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{		
		if (form.getForms().Core.RieConfirmationDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			doRIE();
			open();
		}
	}

	private void doRIE()
	{
		ConsultantStayLiteVo stay = form.grdStays().getValue();
		InpatientEpisodeLiteVo refInpat = null;
		if (form.getGlobalContext().Core.getSelectedBedSpaceStateIsNotNull())
			refInpat = form.getGlobalContext().Core.getSelectedBedSpaceState().getInpatientEpisode();
		else if (form.getGlobalContext().Core.getSelectedWaitingAreaPatientIsNotNull())
			refInpat = form.getGlobalContext().Core.getSelectedWaitingAreaPatient();
		
		String[] validationErrors = stay.validate();
		
		if (validationErrors != null)
		{
			engine.showErrors(validationErrors);
			return;
		}
		try {
			domain.doRIE(refInpat,stay, engine.getFormName(), form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().toPatientRefVo() : null, form.getGlobalContext().Core.getCurrentCareContext() != null ? form.getGlobalContext().Core.getCurrentCareContext().toCareContextRefVo() : null, form.getGlobalContext().Core.getRieMessage());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.getGlobalContext().Core.setYesNoDialogLaunchedFromSelf(true);
			return;
		} catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();
			form.getGlobalContext().Core.setYesNoDialogLaunchedFromSelf(true);
			return;
		}
		form.getGlobalContext().Core.setYesNoDialogLaunchedFromSelf(true);
	}
}
