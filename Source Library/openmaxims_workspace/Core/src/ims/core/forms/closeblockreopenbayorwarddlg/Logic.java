//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.closeblockreopenbayorwarddlg;


import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.BayConfigForWardViewVo;
import ims.core.vo.BayConfigForWardViewVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ReopenBayOutOfHoursVo;
import ims.core.vo.ReopenBayOutOfHoursVoCollection;
import ims.core.vo.WardBayBlockingDetailsVo;
import ims.core.vo.WardBayBlockingDetailsVoCollection;
import ims.core.vo.WardBayClosingDetailsVo;
import ims.core.vo.WardBayClosingDetailsVoCollection;
import ims.core.vo.WardBayConfigForWardViewVo;
import ims.core.vo.enums.CloseBlockReOpenBayWardForWardView;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.vo.ValueObject;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String	COLUMN_BAY					= "0";
	private static final String	COLUMN_BAY_SELECT_BLOCK		= "1";
	private static final String	COLUMN_BAY_SELECT_CLOSE		= "1";
	
	private static final String COLUMN_BAY_STATUS			= "1";
	private static final String	COLUMN_BAY_BLOCKED_CLOSED_DATE	= "2";
	private static final String	COLUMN_BAY_BLOCKED_CLOSED_REASON	= "3";
	private static final String	COLUMN_BAY_SELECT_REOPEN	= "4";
	
	

	
	@Override
	protected void onBtnBlockBaysClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionButtonPressed(form.btnBlockBays());
		if (save())
			engine.close(DialogResult.OK);
		
	}
	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}

	@Override
	protected void onBtnCloseBaysClick() throws PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);		
	}		
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnReopenBaysClick() throws PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
		
	}
	protected void onBtnReOpenClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}

	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		form.getLocalContext().setAction(null);
		form.getLocalContext().setSelectedWard(null);
		
		if(args[0] instanceof CloseBlockReOpenBayWardForWardView)
		{
			form.getLocalContext().setAction((CloseBlockReOpenBayWardForWardView) args[0]);
		}
		
		if( args.length > 1 && args[1] instanceof  LocationLiteVo)
		{
			form.getLocalContext().setSelectedWard((LocationLiteVo) args[1]);					
		}
		if (args.length > 2 && args[2] instanceof Integer && args[2] != null && (Integer)args[2] > 0)
		{
			form.getLocalContext().setSelectedWardAwaitingBedCount((Integer)args[2]);
		}
		initialise(form.getLocalContext().getAction());		
		
		open(form.getLocalContext().getAction());
		
	}
	private void addBayRow(BayConfigForWardViewVo tempVo, CloseBlockReOpenBayWardForWardView action, DynamicGrid grid)
	{	
		if (grid == null || tempVo == null)
			return;

		DynamicGridRow rowd = grid.getRows().newRow();
		rowd.setSelectable(false);
		rowd.setValue(tempVo);
		
		DynamicGridCell bayCell = rowd.getCells().newCell(getColumnBay(COLUMN_BAY,grid), DynamicCellType.LABEL);
		bayCell.setValue(tempVo.getBay().getName());
		bayCell.setTooltip(tempVo.getBay().getName());
		bayCell.setReadOnly(true);
		
		if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action))
		{	
			DynamicGridCell cellSelect = rowd.getCells().newCell(getColumnBay(COLUMN_BAY_SELECT_CLOSE,grid),  DynamicCellType.BOOL);
			cellSelect.setValue(false);
			cellSelect.setReadOnly(false);
			cellSelect.setAutoPostBack(true);

		}
		else if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action))
		{
			DynamicGridCell cellSelect = rowd.getCells().newCell(getColumnBay(COLUMN_BAY_SELECT_BLOCK,grid),  DynamicCellType.BOOL);
			cellSelect.setValue(false);
			cellSelect.setReadOnly(false);
			cellSelect.setAutoPostBack(true);

		}

		else if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
		{
			boolean outOfHoursBay = isBayOutOfOpeningHours(tempVo);
			boolean isClosedBay = WardBayStatus.CLOSED.equals(tempVo.getBayAvailabilityStatus());
			boolean isBlockedBay= WardBayStatus.BLOCKED.equals(tempVo.getBayAvailabilityStatus());
			
			bayCell = rowd.getCells().newCell(getColumnBay(COLUMN_BAY_STATUS,grid), DynamicCellType.LABEL);
			bayCell.setValue(tempVo.getBayAvailabilityStatusIsNotNull() && !outOfHoursBay ? tempVo.getBayAvailabilityStatus().getText() : (outOfHoursBay ? WardBayStatus.CLOSED.getText() + " *" : WardBayStatus.OPEN.getText()));
			bayCell.setTooltip(tempVo.getBayAvailabilityStatusIsNotNull() && !outOfHoursBay ? tempVo.getBayAvailabilityStatus().getText() : (outOfHoursBay ? "Out Of Opening Hours" : WardBayStatus.OPEN.getText()));
			bayCell.setReadOnly(true);

			bayCell = rowd.getCells().newCell(getColumnBay(COLUMN_BAY_BLOCKED_CLOSED_DATE,grid), DynamicCellType.LABEL);
			String dateDisplay = getLatestDateDisplayText(tempVo,isClosedBay,isBlockedBay,outOfHoursBay);
			bayCell.setValue(dateDisplay);
			bayCell.setTooltip(dateDisplay != null ? dateDisplay : null);
			bayCell.setReadOnly(true);

			bayCell = rowd.getCells().newCell(getColumnBay(COLUMN_BAY_BLOCKED_CLOSED_REASON,grid), DynamicCellType.LABEL);
			String reasonDisplay = getLatestReasonDisplayText(tempVo,isClosedBay,isBlockedBay, outOfHoursBay);
			bayCell.setValue(reasonDisplay);
			bayCell.setTooltip(reasonDisplay != null ? reasonDisplay : null);
			bayCell.setReadOnly(true);

			DynamicGridCell cellSelect = rowd.getCells().newCell(getColumnBay(COLUMN_BAY_SELECT_REOPEN,grid),  DynamicCellType.BOOL);
			cellSelect.setValue(false);
			cellSelect.setReadOnly(false);
			cellSelect.setAutoPostBack(true);

		}	
	}
	private boolean allBaysBlockedOrClosed(WardBayConfigForWardViewVo wardBayConfig)
	{
		if (wardBayConfig.getBays() == null)
			return false;
		for (BayConfigForWardViewVo bay : wardBayConfig.getBays())
		{
			if (!Boolean.TRUE.equals(bay.getIsActive()))
				continue;
			if (!WardBayStatus.BLOCKED.equals(bay.getBayAvailabilityStatus()) && !WardBayStatus.CLOSED.equals(bay.getBayAvailabilityStatus()))
				return false;
		}
		return true;
	}

	private boolean allBaysOpen(WardBayConfigForWardViewVo wardBayConfig)
	{
		if (wardBayConfig.getBays() == null || wardBayConfig.getBays().size() == 0)
			return false;
		for (BayConfigForWardViewVo bay : wardBayConfig.getBays())
		{
			if (bay.getBayAvailabilityStatus() != null && !WardBayStatus.OPEN.equals(bay.getBayAvailabilityStatus()))
				return false;
		}
		return true;
	}


	private void clearInstanceControls()
	{
		form.lyrDetails().tabBlockB().ccBlockedByBay().setValue(null);
		form.lyrDetails().tabBlockB().cmbReasonBlockingBay().setValue(null);
		form.lyrDetails().tabBlockB().dtimBlockedDateBay().setValue(null);
		form.lyrDetails().tabBlockB().dtimEstReopenDateBay().setValue(null);
		
		form.lyrDetails().tabBlockW().ccClosedBlockedBy().setValue(null);
		form.lyrDetails().tabBlockW().cmbBlockingReasonWard().setValue(null);
		form.lyrDetails().tabBlockW().dtimBlockedDateWard().setValue(null);
		form.lyrDetails().tabBlockW().dtimEstReopenDateWard().setValue(null);
		
		form.lyrDetails().tabCloseB().dtimClosureDateBayClose().setValue(null);
		form.lyrDetails().tabCloseB().dtimEstReopDateBayClose().setValue(null);
		form.lyrDetails().tabCloseB().ccClosedByBayClose().setValue(null);
		form.lyrDetails().tabCloseB().cmbReasonforClosureBayClose().setValue(null);
				
		form.lyrDetails().tabCloseW().dtimClosureDateWardClose().setValue(null);
		form.lyrDetails().tabCloseW().dtimEstReOpenDateWardClose().setValue(null);
		form.lyrDetails().tabCloseW().ccClosedByWardClose().setValue(null);
		form.lyrDetails().tabCloseW().cmbClosureReasonWardClose().setValue(null);
		
		
	}
	private void clearScreen()
	{
		clearInstanceControls();
		form.lyrDetails().tabBlockB().dyngrdBaysForBlock().getRows().clear();
		form.lyrDetails().tabCloseB().dyngrdBaysForClose().getRows().clear();
		form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getRows().clear();
		
	}	
	private DynamicGridColumn getColumnBay(String identifier, DynamicGrid grid) 
	{
		return grid.getColumns().getByIdentifier(identifier);
	}

	private BayConfigForWardViewVoCollection getFilteredBays(BayConfigForWardViewVoCollection bays, CloseBlockReOpenBayWardForWardView closeBlockReOpenBayWardForWardView)
	{
		if (bays == null)
			return null;
		BayConfigForWardViewVoCollection filteredBays = new BayConfigForWardViewVoCollection();
		boolean canReopenBayOutofHours = engine.hasRight(AppRight.BED_MANAGEMENT_CAN_REOPEN_WARD_BAYS_OOH);
		
		if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(closeBlockReOpenBayWardForWardView))
		{
			for (BayConfigForWardViewVo bay : bays)
			{
				if (Boolean.TRUE.equals(bay.getIsActive()) && (bay.getBayAvailabilityStatus() == null || WardBayStatus.OPEN.equals(bay.getBayAvailabilityStatus()) && bay.getNumOfBedsIsNotNull() &&  ((bay.getNumOfOccupiedBedsIsNotNull() && bay.getNumOfOccupiedBeds() > 0) || form.getLocalContext().getSelectedWardAwaitingBedCountIsNotNull())))
				{
					filteredBays.add(bay);
				}
			}
		}
		else if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(closeBlockReOpenBayWardForWardView))
		{
			for (BayConfigForWardViewVo bay : bays)
			{
				if (Boolean.TRUE.equals(bay.getIsActive()) && (bay.getBayAvailabilityStatus() == null || !WardBayStatus.CLOSED.equals(bay.getBayAvailabilityStatus()) && bay.getNumOfBedsIsNotNull() && (bay.getNumOfOccupiedBeds() == null || bay.getNumOfOccupiedBeds() == 0)))
				{
					filteredBays.add(bay);
				}
			}			
		}
		else if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(closeBlockReOpenBayWardForWardView))
		{
			for (BayConfigForWardViewVo bay : bays)
			{
				boolean isBayOutOfOpeningHrs = isBayOutOfOpeningHours(bay);
				if (Boolean.TRUE.equals(bay.getIsActive()) && (WardBayStatus.CLOSED.equals(bay.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bay.getBayAvailabilityStatus()) || (canReopenBayOutofHours && isBayOutOfOpeningHrs)))
				{
					filteredBays.add(bay);
				}
			}			
		}
		
		return filteredBays.sort();
	}
	private String getLastClosingDateText(Date lastReopenDate,	BayConfigForWardViewVo tempVo)
	{
		Calendar cal = Calendar.getInstance();
		boolean isCurrentDaySunday = Calendar.SUNDAY == cal.get(Calendar.DAY_OF_WEEK);
		boolean isCurrentDaySaturday =  Calendar.SATURDAY == cal.get(Calendar.DAY_OF_WEEK);
		boolean isCurrentDayNotWeekDay = isCurrentDaySaturday || isCurrentDaySunday;

		DateTime lastClosingDateTime = null;

		if (lastReopenDate == null)
		{	
			if (Boolean.TRUE.equals(tempVo.getWeekdaysOnly()))
			{	
				if (isCurrentDayNotWeekDay)
				{
					lastClosingDateTime =  new DateTime(new Date().addDay(isCurrentDaySunday? -2 : -1), tempVo.getClosingTime()); 
				}
				else
				{
					lastClosingDateTime =  new DateTime(new Date().addDay(-1), tempVo.getClosingTime()); 
				}
			}
			else
			{
				lastClosingDateTime =  new DateTime(new Date().addDay(-1), tempVo.getClosingTime()); 
			}
		}	
		else 
		{	
			cal.setTime(lastReopenDate.getDate());
			int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
			isCurrentDaySunday = Calendar.SUNDAY == dayOfWeek;
			isCurrentDaySaturday =  Calendar.SATURDAY == dayOfWeek;
			isCurrentDayNotWeekDay = isCurrentDaySaturday || isCurrentDaySunday;

			if (Boolean.TRUE.equals(tempVo.getWeekdaysOnly()))
			{	
				if (isCurrentDayNotWeekDay)
				{
					lastClosingDateTime =  new DateTime(lastReopenDate.addDay(1), new Time (0,0).isLessOrEqualThan(tempVo.getOpeningTime()) ? new Time (0,0) : tempVo.getClosingTime()); 
				}
			}
			else
			{
				lastClosingDateTime =  new DateTime(lastReopenDate.addDay(1), tempVo.getClosingTime()); 
			}		
		}
		return lastClosingDateTime != null ? lastClosingDateTime.toString() : null;
	}
	private WardBayBlockingDetailsVo getLatestBlockingDetails(ValueObject wardOrBayConfig)
	{
		if (wardOrBayConfig == null || (!(wardOrBayConfig instanceof WardBayConfigForWardViewVo) && !(wardOrBayConfig instanceof BayConfigForWardViewVo)))
			return null;
		if (wardOrBayConfig instanceof WardBayConfigForWardViewVo)
		{
			WardBayConfigForWardViewVo typeCastVo =  (WardBayConfigForWardViewVo) wardOrBayConfig;
			for (int i=0;i<typeCastVo.getBlockingDetails().size();i++)
			{
				if (typeCastVo.getBlockingDetails().get(i) != null && typeCastVo.getBlockingDetails().get(i).getReopenDate() == null)
					return typeCastVo.getBlockingDetails().get(i);
			}
		}
		else if (wardOrBayConfig instanceof BayConfigForWardViewVo)
		{	
			BayConfigForWardViewVo typeCastVo = (BayConfigForWardViewVo) wardOrBayConfig;
			for (int i=0;i<typeCastVo.getBlockingDetails().size();i++)
			{
				if (typeCastVo.getBlockingDetails().get(i) != null && typeCastVo.getBlockingDetails().get(i).getReopenDate() == null)
					return typeCastVo.getBlockingDetails().get(i);
			}
		}
		return null;
	}
	
	private WardBayClosingDetailsVo getLatestClosingDetails(ValueObject wardOrBayConfig)
	{
		if (wardOrBayConfig == null || (!(wardOrBayConfig instanceof WardBayConfigForWardViewVo) && !(wardOrBayConfig instanceof BayConfigForWardViewVo)))
			return null;
		if (wardOrBayConfig instanceof WardBayConfigForWardViewVo)
		{
			WardBayConfigForWardViewVo typeCastVo =  (WardBayConfigForWardViewVo) wardOrBayConfig;
			for (int i=0;i<typeCastVo.getClosingDetails().size();i++)
			{
				if (typeCastVo.getClosingDetails().get(i) != null && typeCastVo.getClosingDetails().get(i).getReopenDate() == null)
					return typeCastVo.getClosingDetails().get(i);
			}
		}
		else if (wardOrBayConfig instanceof BayConfigForWardViewVo)
		{	
			BayConfigForWardViewVo typeCastVo = (BayConfigForWardViewVo) wardOrBayConfig;
			for (int i=0;i<typeCastVo.getClosingDetails().size();i++)
			{
				if (typeCastVo.getClosingDetails().get(i) != null && typeCastVo.getClosingDetails().get(i).getReopenDate() == null)
					return typeCastVo.getClosingDetails().get(i);
			}
		}
		return null;
	}
	private String getLatestDateDisplayText(BayConfigForWardViewVo tempVo, boolean isClosedBay, boolean isBlockedBay, boolean outOfHoursBay)
	{
		if (tempVo == null)
			return null;
		
		if (isClosedBay)
		{	
			WardBayClosingDetailsVo closingDetails = getLatestClosingDetails(tempVo);
			return closingDetails != null ? closingDetails.getClosureDate().toString() : null;
		}
		if (isBlockedBay)
		{	
			WardBayBlockingDetailsVo blockingDetails = getLatestBlockingDetails(tempVo);
			return blockingDetails != null ? blockingDetails.getBlockedDate().toString() : null;
		}	
		if (outOfHoursBay)
		{	
			Date lastReopenDate = getMostRecentReopenDate(tempVo);
			if (lastReopenDate == null || !lastReopenDate.equals(new Date()));
					return  getLastClosingDateText(lastReopenDate, tempVo);
		}
		return null;
	}
	private String getLatestReasonDisplayText(BayConfigForWardViewVo tempVo, boolean isClosedBay, boolean isBlockedBay, boolean outOfHoursBay)
	{	
		if (isClosedBay)
		{	
			WardBayClosingDetailsVo closingDetails = getLatestClosingDetails(tempVo);
			return closingDetails != null &&  closingDetails.getReasonForClosureIsNotNull() ? closingDetails.getReasonForClosure().getText() : null;
		}
		if (isBlockedBay)
		{	
			WardBayBlockingDetailsVo blockingDetails = getLatestBlockingDetails(tempVo);
			return blockingDetails != null && blockingDetails.getReasonForBlockingIsNotNull() ? blockingDetails.getReasonForBlocking().getText() : null;
		}	
		if (outOfHoursBay)
		{	
			return "Currently Out of Opening Hours";
		}
		return null;
	}
	private Date getMostRecentReopenDate(BayConfigForWardViewVo tempVo)
	{
		if (tempVo.getReOpenOutOfHours() == null)
			return null;
		
		ArrayList<Date> dates = new ArrayList<Date>();
		for (int i=0;i<tempVo.getReOpenOutOfHours().size();i++)
		{
			if (tempVo.getReOpenOutOfHours().get(i) != null && tempVo.getReOpenOutOfHours().get(i).getReopenDateIsNotNull())
				dates.add(tempVo.getReOpenOutOfHours().get(i).getReopenDate());
		}
		return dates.size() > 0 ? Collections.max(dates) : null;
		
	}

	private DynamicGrid getRelevantGridControl(CloseBlockReOpenBayWardForWardView action)
	{
		if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(form.getLocalContext().getAction()))
			return form.lyrDetails().tabBlockB().dyngrdBaysForBlock();
		else if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(form.getLocalContext().getAction()))
			return form.lyrDetails().tabCloseB().dyngrdBaysForClose();
		else if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(form.getLocalContext().getAction()))
			return form.lyrDetails().tabReopenB().dyngrdBaysForReopen();
		return null;
	}
	private BayConfigForWardViewVoCollection getSelectedBaysForBlock()
	{
		DynamicGridRowCollection grdBayRows = form.lyrDetails().tabBlockB().dyngrdBaysForBlock().getRows();
		BayConfigForWardViewVoCollection bays = new BayConfigForWardViewVoCollection();
		for (int i=0;i<grdBayRows.size();i++)
		{
			if (grdBayRows.get(i) == null || grdBayRows.get(i).getValue() == null || !(grdBayRows.get(i).getValue() instanceof BayConfigForWardViewVo))
				continue;
			if (Boolean.TRUE.equals(grdBayRows.get(i).getCells().get(getColumnBay(COLUMN_BAY_SELECT_BLOCK, form.lyrDetails().tabBlockB().dyngrdBaysForBlock())).getValue()))
			{	
				BayConfigForWardViewVo gridValue = (BayConfigForWardViewVo)grdBayRows.get(i).getValue();
				bays.add((BayConfigForWardViewVo) gridValue.clone());
			}
		}
		return bays;

	}

	private BayConfigForWardViewVoCollection getSelectedBaysForClosure()
	{
		DynamicGridRowCollection grdBayRows = form.lyrDetails().tabCloseB().dyngrdBaysForClose().getRows();
		BayConfigForWardViewVoCollection bays = new BayConfigForWardViewVoCollection();
		for (int i=0;i<grdBayRows.size();i++)
		{
			if (grdBayRows.get(i) == null || grdBayRows.get(i).getValue() == null || !(grdBayRows.get(i).getValue() instanceof BayConfigForWardViewVo))
				continue;
			if (Boolean.TRUE.equals(grdBayRows.get(i).getCells().get(getColumnBay(COLUMN_BAY_SELECT_CLOSE, form.lyrDetails().tabCloseB().dyngrdBaysForClose())).getValue()))
			{	
				BayConfigForWardViewVo gridValue = (BayConfigForWardViewVo)grdBayRows.get(i).getValue();
				bays.add((BayConfigForWardViewVo) gridValue.clone());;
			}
		}
		return bays;

	}	

	private BayConfigForWardViewVoCollection getSelectedBaysForReopen()
	{
		DynamicGridRowCollection grdBayRows = form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getRows();
		BayConfigForWardViewVoCollection bays = new BayConfigForWardViewVoCollection();
		for (int i=0;i<grdBayRows.size();i++)
		{
			if (grdBayRows.get(i) == null || grdBayRows.get(i).getValue() == null || !(grdBayRows.get(i).getValue() instanceof BayConfigForWardViewVo))
				continue;
			if (Boolean.TRUE.equals(grdBayRows.get(i).getCells().get(getColumnBay(COLUMN_BAY_SELECT_REOPEN,form.lyrDetails().tabReopenB().dyngrdBaysForReopen())).getValue()))
			{	
				BayConfigForWardViewVo gridValue = (BayConfigForWardViewVo)grdBayRows.get(i).getValue();
				bays.add((BayConfigForWardViewVo) gridValue.clone());
			}
		}
		return bays;

	}

	private String[] getUIRules(CloseBlockReOpenBayWardForWardView action)
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action) || CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
		{	
			if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action))
			{			
				if (form.lyrDetails().tabBlockB().ccBlockedByBay().getValue() == null)
				{
					errors.add( "Blocked By is mandatory.");
				}
				if (form.lyrDetails().tabBlockB().dtimBlockedDateBay().getValue() == null)
				{
					errors.add( "Blocked Date/Time is mandatory.");
				}
				if (form.lyrDetails().tabBlockB().dtimBlockedDateBay().getValue() != null && (form.lyrDetails().tabBlockB().dtimBlockedDateBay().getValue().getDate().isGreaterThan(new Date()) || (form.lyrDetails().tabBlockB().dtimBlockedDateBay().getValue().getDate().equals(new Date()) && form.lyrDetails().tabBlockB().dtimBlockedDateBay().getValue().getTime().isGreaterThan(new Time()))))
				{
					errors.add( "Blocked Date/Time cannot be set to a date/time in the future.");
				}
				if (form.lyrDetails().tabBlockB().dtimEstReopenDateBay().getValue() != null && (form.lyrDetails().tabBlockB().dtimEstReopenDateBay().getValue().getDate().isLessThan(new Date()) || (form.lyrDetails().tabBlockB().dtimEstReopenDateBay().getValue().getDate().equals(new Date()) && form.lyrDetails().tabBlockB().dtimEstReopenDateBay().getValue().getTime().isLessThan(new Time()))))
				{
					errors.add( "Estimated Re-Opening Date/Time cannot be earlier than current date/time.");

				}				
			}
			if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
			{
				if (form.lyrDetails().tabReopenB().cmbReasonReopenBay().getValue() == null)
				{
					errors.add( "Reason for Re-Opening is mandatory.");
				}
			}
			BayConfigForWardViewVoCollection bays = CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action)? getSelectedBaysForBlock() : getSelectedBaysForReopen();
			if (bays.size() == 0)
				errors.add( "At least a bay must be selected.");
		}
		else if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action) || CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
		{
			if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action))
			{	
				if (form.lyrDetails().tabCloseB().ccClosedByBayClose().getValue() == null)
				{
					errors.add( "Closed By is mandatory.");
				}
				if (form.lyrDetails().tabCloseB().dtimClosureDateBayClose().getValue() == null)
				{
					errors.add( "Closure Date/Time is mandatory.");
				}
				if (form.lyrDetails().tabCloseB().dtimClosureDateBayClose().getValue() != null && (form.lyrDetails().tabCloseB().dtimClosureDateBayClose().getValue().getDate().isGreaterThan(new Date()) || (form.lyrDetails().tabCloseB().dtimClosureDateBayClose().getValue().getDate().equals(new Date()) && form.lyrDetails().tabCloseB().dtimClosureDateBayClose().getValue().getTime().isGreaterThan(new Time()))))
				{
					errors.add( "Closure Date/Time cannot be set to a date/time in the future.");
				}
				if (form.lyrDetails().tabCloseB().dtimEstReopDateBayClose().getValue() != null && (form.lyrDetails().tabCloseB().dtimEstReopDateBayClose().getValue().getDate().isLessThan(new Date()) || (form.lyrDetails().tabCloseB().dtimEstReopDateBayClose().getValue().getDate().equals(new Date()) && form.lyrDetails().tabCloseB().dtimEstReopDateBayClose().getValue().getTime().isLessThan(new Time()))))
				{
					errors.add( "Estimated Re-Opening Date/Time cannot be earlier than current date/time.");
				}
			}
			if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
			{
				if (form.lyrDetails().tabReopenB().cmbReasonReopenBay().getValue() == null)
				{
					errors.add( "Reason for Re-Opening is mandatory.");
				}
			}
			BayConfigForWardViewVoCollection bays = CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action)? getSelectedBaysForClosure() : getSelectedBaysForReopen();
			if (bays.size() == 0)
				errors.add( "At least a bay must be selected.");
		}

		else if (CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(action))
		{
			if (form.lyrDetails().tabCloseW().dtimClosureDateWardClose().getValue() != null && (form.lyrDetails().tabCloseW().dtimClosureDateWardClose().getValue().getDate().isGreaterThan(new Date()) || (form.lyrDetails().tabCloseW().dtimClosureDateWardClose().getValue().getDate().equals(new Date()) && form.lyrDetails().tabCloseW().dtimClosureDateWardClose().getValue().getTime().isGreaterThan(new Time()))))
			{
				errors.add( "Closure Date/Time cannot be set to a date/time in the future.");
			}
			if (form.lyrDetails().tabCloseW().dtimEstReOpenDateWardClose().getValue() != null && (form.lyrDetails().tabCloseW().dtimEstReOpenDateWardClose().getValue().getDate().isLessThan(new Date()) || (form.lyrDetails().tabCloseW().dtimEstReOpenDateWardClose().getValue().getDate().equals(new Date()) && form.lyrDetails().tabCloseW().dtimEstReOpenDateWardClose().getValue().getTime().isLessThan(new Time()))))
			{
				errors.add( "Estimated Re-Opening Date/Time cannot be earlier than current date/time.");
			}			
		}
		else if (CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(action))
		{			
			if (form.lyrDetails().tabBlockW().dtimBlockedDateWard().getValue() != null && (form.lyrDetails().tabBlockW().dtimBlockedDateWard().getValue().getDate().isGreaterThan(new Date()) || (form.lyrDetails().tabBlockW().dtimBlockedDateWard().getValue().getDate().equals(new Date()) && form.lyrDetails().tabBlockW().dtimBlockedDateWard().getValue().getTime().isGreaterThan(new Time()))))
			{
				errors.add( "Blocked Date/Time cannot be set to a date/time in the future.");
			}
			if (form.lyrDetails().tabBlockW().dtimEstReopenDateWard().getValue() != null && (form.lyrDetails().tabBlockW().dtimEstReopenDateWard().getValue().getDate().isLessThan(new Date()) || (form.lyrDetails().tabBlockW().dtimEstReopenDateWard().getValue().getDate().equals(new Date()) && form.lyrDetails().tabBlockW().dtimEstReopenDateWard().getValue().getTime().isLessThan(new Time()))))
			{
				errors.add( "Estimated Re-Opening Date/Time cannot be earlier than current date/time.");
			}
		}
		if (CloseBlockReOpenBayWardForWardView.REOPEN_WARD.equals(action))
		{
			if (form.lyrDetails().tabReopenW().cmbReopenReasonWard().getValue() == null)
			{
				errors.add( "Reason for Re-Opening is mandatory.");
			}
		}
		if (errors.size() == 0)
			return null;

		return errors.toArray(new String[errors.size()]);
	}


	private void initialise(CloseBlockReOpenBayWardForWardView action)
	{
		
		form.lyrDetails().tabBlockB().ccBlockedByBay().initialize(MosType.ALL);		
		form.lyrDetails().tabBlockB().ccBlockedByBay().isRequired(true);
		form.lyrDetails().tabCloseW().ccClosedByWardClose().initialize(MosType.ALL);		
		form.lyrDetails().tabCloseW().ccClosedByWardClose().isRequired(true);
		form.lyrDetails().tabCloseB().ccClosedByBayClose().initialize(MosType.ALL);		
		form.lyrDetails().tabCloseB().ccClosedByBayClose().isRequired(true);
		form.lyrDetails().tabBlockW().ccClosedBlockedBy().initialize(MosType.ALL);		
		form.lyrDetails().tabBlockW().ccClosedBlockedBy().isRequired(true);
		
		clearScreen();
		setDefaults(action);
			
		initialiseBaysDynGrid(form.getLocalContext().getAction());
		
	}
	
	private void initialiseBaysDynGrid(CloseBlockReOpenBayWardForWardView action)
	{
		form.lyrDetails().tabBlockB().dyngrdBaysForBlock().clear();
		form.lyrDetails().tabCloseB().dyngrdBaysForClose().clear();
		form.lyrDetails().tabReopenB().dyngrdBaysForReopen().clear();
			
		if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action))
		{	
			DynamicGridColumn columnName = form.lyrDetails().tabCloseB().dyngrdBaysForClose().getColumns().newColumn("Bay", COLUMN_BAY);
			columnName.setWidth(450);
			columnName.setAlignment(Alignment.LEFT);
			columnName.setReadOnly(true);

			columnName = form.lyrDetails().tabCloseB().dyngrdBaysForClose().getColumns().newColumn("Select", COLUMN_BAY_SELECT_CLOSE);
			columnName.setWidth(-1);
			columnName.setAlignment(Alignment.CENTER);
			columnName.setHeaderAlignment(Alignment.CENTER);

		}
		else if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action))
		{
			DynamicGridColumn columnName = form.lyrDetails().tabBlockB().dyngrdBaysForBlock().getColumns().newColumn("Bay", COLUMN_BAY);
			columnName.setWidth(450);
			columnName.setAlignment(Alignment.LEFT);
			columnName.setReadOnly(true);

			columnName = form.lyrDetails().tabBlockB().dyngrdBaysForBlock().getColumns().newColumn("Select", COLUMN_BAY_SELECT_BLOCK);
			columnName.setWidth(-1);
			columnName.setAlignment(Alignment.CENTER);
			columnName.setHeaderAlignment(Alignment.CENTER);
		}
		else if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
		{
			DynamicGridColumn columnName = form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getColumns().newColumn("Bay", COLUMN_BAY);
			columnName.setWidth(175);
			columnName.setAlignment(Alignment.LEFT);
			columnName.setReadOnly(true);

			columnName = form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getColumns().newColumn("Status", COLUMN_BAY_STATUS);
			columnName.setWidth(50);
			columnName.setAlignment(Alignment.LEFT);
			columnName.setReadOnly(true);

			columnName = form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getColumns().newColumn("Closed/Blocked Date", COLUMN_BAY_BLOCKED_CLOSED_DATE);
			columnName.setWidth(140);
			columnName.setAlignment(Alignment.LEFT);
			columnName.setReadOnly(true);

			columnName = form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getColumns().newColumn("Closed/Blocked Reason", COLUMN_BAY_BLOCKED_CLOSED_REASON);
			columnName.setWidth(140);
			columnName.setAlignment(Alignment.LEFT);
			columnName.setReadOnly(true);

			columnName = form.lyrDetails().tabReopenB().dyngrdBaysForReopen().getColumns().newColumn("Select", COLUMN_BAY_SELECT_REOPEN);
			columnName.setWidth(-1);
			columnName.setAlignment(Alignment.CENTER);
			columnName.setHeaderAlignment(Alignment.CENTER);			
		}

	}

	private boolean isBayOutOfOpeningHours(BayConfigForWardViewVo bayConfigForWardViewVo)
	{
		if (bayConfigForWardViewVo == null || WardBayStatus.CLOSED.equals(bayConfigForWardViewVo.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayConfigForWardViewVo.getBayAvailabilityStatus()))
				return false;
		Calendar calendar = Calendar.getInstance();
		Date lastReopenDate = getMostRecentReopenDate(bayConfigForWardViewVo);
		
		boolean isCurrentDayWeekDay =  (Calendar.SUNDAY != calendar.get(Calendar.DAY_OF_WEEK) && Calendar.SATURDAY != calendar.get(Calendar.DAY_OF_WEEK));
		boolean isBayOutOfHours = (bayConfigForWardViewVo.getOpeningTimeIsNotNull() && new Time().isLessThan(bayConfigForWardViewVo.getOpeningTime())) || (bayConfigForWardViewVo.getClosingTimeIsNotNull() && new Time().isGreaterThan(bayConfigForWardViewVo.getClosingTime()));
		boolean wasReopenedToday = lastReopenDate != null && new Date().equals(lastReopenDate);
		
		if (isBayOutOfHours && wasReopenedToday)
			return false;
		
		if (Boolean.TRUE.equals(bayConfigForWardViewVo.getWeekdaysOnly()) && !isCurrentDayWeekDay)
			return true;
		return isBayOutOfHours;
	}

	private void open(CloseBlockReOpenBayWardForWardView closeBlockReOpenBayWardForWardView)
	{			
		form.getLocalContext().setWardBayConfig((WardBayConfigForWardViewVo) domain.getWardBayConfigForWard(form.getLocalContext().getSelectedWard()).clone());	
		if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(closeBlockReOpenBayWardForWardView) || CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(closeBlockReOpenBayWardForWardView) ||  CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(closeBlockReOpenBayWardForWardView))
		{
			DynamicGrid grid = getRelevantGridControl(closeBlockReOpenBayWardForWardView); 
			BayConfigForWardViewVoCollection tempColl = form.getLocalContext().getWardBayConfigIsNotNull() ? getFilteredBays(form.getLocalContext().getWardBayConfig().getBays(),closeBlockReOpenBayWardForWardView) : null;
			if( tempColl != null && tempColl.size() > 0)
			{
				for(int i = 0;i < tempColl.size();i++)
				{
					addBayRow(tempColl.get(i), form.getLocalContext().getAction(), grid);
				}
			}
		}
			
		
		
	}
	private BayConfigForWardViewVo populateBayBlockingDetails(BayConfigForWardViewVo bayConfigForSave, WardBayBlockingDetailsVo blockingDetailsVo, boolean isBlockedOrClosed)
	{
		if (bayConfigForSave == null)
			return null;
		if (!isBlockedOrClosed)
		{			
			 if (bayConfigForSave.getBlockingDetails() == null)
				 bayConfigForSave.setBlockingDetails(new WardBayBlockingDetailsVoCollection());
			 bayConfigForSave.getBlockingDetails().add(blockingDetailsVo);
			 bayConfigForSave.setBayAvailabilityStatus(WardBayStatus.BLOCKED);
		}
		return bayConfigForSave;
	}

	private BayConfigForWardViewVo populateBayClosingDetails(BayConfigForWardViewVo bayConfigForSave, WardBayClosingDetailsVo closingDetailsVo, boolean isBlockedOrClosed)
	{
		if (bayConfigForSave == null)
			return null;
		if (!isBlockedOrClosed && (bayConfigForSave.getNumOfOccupiedBeds() == null || bayConfigForSave.getNumOfOccupiedBeds() == 0))
		{			
			 if (bayConfigForSave.getBlockingDetails() == null)
				 bayConfigForSave.setClosingDetails(new WardBayClosingDetailsVoCollection());
			 bayConfigForSave.getClosingDetails().add(closingDetailsVo);
			 bayConfigForSave.setBayAvailabilityStatus(WardBayStatus.CLOSED);
		}
		return bayConfigForSave;
	}
	private WardBayBlockingDetailsVo populateBlockingDetailsFromScreen(CloseBlockReOpenBayWardForWardView action) 
	{
		WardBayBlockingDetailsVo blockingDetailsVo = new WardBayBlockingDetailsVo();
		if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action))
		{	
			blockingDetailsVo.setBlockedBy((MemberOfStaffLiteVo) form.lyrDetails().tabBlockB().ccBlockedByBay().getValue());
			blockingDetailsVo.setBlockedDate(form.lyrDetails().tabBlockB().dtimBlockedDateBay().getValue());
			blockingDetailsVo.setEstimatedReopeningDate(form.lyrDetails().tabBlockB().dtimEstReopenDateBay().getValue());
			blockingDetailsVo.setReasonForBlocking(form.lyrDetails().tabBlockB().cmbReasonBlockingBay().getValue());
		}
		else if (CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(action))
		{
			blockingDetailsVo.setBlockedBy((MemberOfStaffLiteVo) form.lyrDetails().tabBlockW().ccClosedBlockedBy().getValue());
			blockingDetailsVo.setBlockedDate(form.lyrDetails().tabBlockW().dtimBlockedDateWard().getValue());
			blockingDetailsVo.setEstimatedReopeningDate(form.lyrDetails().tabBlockW().dtimEstReopenDateWard().getValue());
			blockingDetailsVo.setReasonForBlocking(form.lyrDetails().tabBlockW().cmbBlockingReasonWard().getValue());
		}

		return blockingDetailsVo;
	}
	private WardBayClosingDetailsVo populateClosingDetailsFromScreen(CloseBlockReOpenBayWardForWardView action)
	{
		WardBayClosingDetailsVo closingDetailsVo = new WardBayClosingDetailsVo();
		if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action))
		{
			closingDetailsVo.setClosedBy((MemberOfStaffLiteVo) form.lyrDetails().tabCloseB().ccClosedByBayClose().getValue());
			closingDetailsVo.setClosureDate(form.lyrDetails().tabCloseB().dtimClosureDateBayClose().getValue());
			closingDetailsVo.setEstimatedReopeningDate(form.lyrDetails().tabCloseB().dtimEstReopDateBayClose().getValue());
			closingDetailsVo.setReasonForClosure(form.lyrDetails().tabCloseB().cmbReasonforClosureBayClose().getValue());
		}
		else if (CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(action))
		{

			closingDetailsVo.setClosedBy((MemberOfStaffLiteVo) form.lyrDetails().tabCloseW().ccClosedByWardClose().getValue());
			closingDetailsVo.setClosureDate(form.lyrDetails().tabCloseW().dtimClosureDateWardClose().getValue());
			closingDetailsVo.setEstimatedReopeningDate(form.lyrDetails().tabCloseW().dtimEstReOpenDateWardClose().getValue());
			closingDetailsVo.setReasonForClosure(form.lyrDetails().tabCloseW().cmbClosureReasonWardClose().getValue());
		}

		return closingDetailsVo;
	}
	

	private WardBayConfigForWardViewVo populateDataFromScreen(CloseBlockReOpenBayWardForWardView action, WardBayConfigForWardViewVo wardBayConfig)
	{
		if (wardBayConfig == null)
			return null;
		WardBayConfigForWardViewVo wardConfigForSave = (WardBayConfigForWardViewVo) wardBayConfig.clone();
		WardBayBlockingDetailsVo blockingDetailsVo = null;
		WardBayClosingDetailsVo closingDetailsVo = null;
		
		if (CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(action))
		{	
			if (!WardBayStatus.BLOCKED.equals(wardBayConfig.getWardAvailabilityStatus()))
			{
				blockingDetailsVo = populateBlockingDetailsFromScreen(form.getLocalContext().getAction()); 

				if (wardConfigForSave.getBlockingDetails() == null)
					wardConfigForSave.setBlockingDetails(new WardBayBlockingDetailsVoCollection());
				wardConfigForSave.getBlockingDetails().add(blockingDetailsVo);
				wardConfigForSave.setWardAvailabilityStatus(WardBayStatus.BLOCKED);

				//update Bays under the Ward
				if (wardConfigForSave.getBaysIsNotNull())
				{
					for (int i=0;i<wardConfigForSave.getBays().size();i++)
					{
						if (wardConfigForSave.getBays().get(i) != null && Boolean.TRUE.equals(wardConfigForSave.getBays().get(i).getBay().getIsActive()));
						{
							BayConfigForWardViewVo bayConfigVo = wardConfigForSave.getBays().get(i);
							populateBayBlockingDetails(bayConfigVo, (WardBayBlockingDetailsVo) blockingDetailsVo.clone(), WardBayStatus.CLOSED.equals(bayConfigVo.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayConfigVo.getBayAvailabilityStatus()));
							//wardConfigForSave.getBays().set(wardConfigForSave.getBays().indexOf(wardConfigForSave.getBays().get(i)), wardConfigForSave.getBays().get(i));

						}
					}
				}
			}
		}
		else if (CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(action))
		{			 
			if (!WardBayStatus.CLOSED.equals(wardBayConfig.getWardAvailabilityStatus()))
			{
				closingDetailsVo = populateClosingDetailsFromScreen(action); 

				if (wardConfigForSave.getClosingDetails() == null)
					wardConfigForSave.setClosingDetails(new WardBayClosingDetailsVoCollection());
				wardConfigForSave.getClosingDetails().add(closingDetailsVo);
				wardConfigForSave.setWardAvailabilityStatus(WardBayStatus.CLOSED);

				//update Bays under the Ward
				if (wardConfigForSave.getBaysIsNotNull())
				{
					for (int i=0;i<wardConfigForSave.getBays().size();i++)
					{
						if (wardConfigForSave.getBays().get(i) != null && Boolean.TRUE.equals(wardConfigForSave.getBays().get(i).getBay().getIsActive()));
						{
							BayConfigForWardViewVo bayConfigVo = wardConfigForSave.getBays().get(i);
							populateBayClosingDetails(bayConfigVo, (WardBayClosingDetailsVo) closingDetailsVo.clone(), WardBayStatus.CLOSED.equals(bayConfigVo.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayConfigVo.getBayAvailabilityStatus()));
							//wardConfigForSave.getBays().set(wardConfigForSave.getBays().indexOf(wardConfigForSave.getBays().get(i)), wardConfigForSave.getBays().get(i));
						}
					}
				}
			}			
		}
		else if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action))
		{

			BayConfigForWardViewVoCollection bays =  getSelectedBaysForBlock();

			if (wardBayConfig.getWardAvailabilityStatus() == null || !WardBayStatus.CLOSED.equals(wardBayConfig.getWardAvailabilityStatus()))
			{
				blockingDetailsVo = populateBlockingDetailsFromScreen(form.getLocalContext().getAction()); 

				//update Bays under the Ward
				if (bays != null && bays.size() > 0)
				{
					for (int i=0;i<bays.size();i++)
					{
						if (bays.get(i) != null && Boolean.TRUE.equals(bays.get(i).getBay().getIsActive()));
						{
							BayConfigForWardViewVo bayToUpdate =  bays.get(i);
							bayToUpdate = populateBayBlockingDetails(bayToUpdate, (WardBayBlockingDetailsVo) blockingDetailsVo.clone(), WardBayStatus.CLOSED.equals(bayToUpdate.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayToUpdate.getBayAvailabilityStatus()));
							wardConfigForSave.getBays().set(wardConfigForSave.getBays().indexOf(bayToUpdate), bayToUpdate);
						}
					}
					if (allBaysBlockedOrClosed(wardConfigForSave))
					{
						if (wardConfigForSave.getBlockingDetails() == null)
							wardConfigForSave.setBlockingDetails(new WardBayBlockingDetailsVoCollection());
						wardConfigForSave.getBlockingDetails().add((WardBayBlockingDetailsVo) blockingDetailsVo.clone());
						wardConfigForSave.setWardAvailabilityStatus(WardBayStatus.BLOCKED);
					}
				}
			}
		} 
		else if (CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(action))
		{
			BayConfigForWardViewVoCollection bays =  getSelectedBaysForReopen();
			boolean atLeastABlockedClosedBaySelected = atLeastOneBayClosedOrBlocked(bays);
			if (bays != null && bays.size() > 0)
			{	
					for (int i=0;i<bays.size();i++)
					{						 
						if (bays.get(i) != null && Boolean.TRUE.equals(bays.get(i).getBay().getIsActive()));
						{
							BayConfigForWardViewVo bayToUpdate = bays.get(i);
							bayToUpdate = populateReopeningDetails(bayToUpdate,WardBayStatus.CLOSED.equals(bayToUpdate.getBayAvailabilityStatus()), WardBayStatus.BLOCKED.equals(bayToUpdate.getBayAvailabilityStatus()), false);
							wardConfigForSave.getBays().set(wardConfigForSave.getBays().indexOf(bayToUpdate), bayToUpdate);
							
						}
					}					
					if (atLeastABlockedClosedBaySelected && (WardBayStatus.BLOCKED.equals(wardConfigForSave.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardConfigForSave.getWardAvailabilityStatus())))
					{
						wardConfigForSave.setWardAvailabilityStatus(WardBayStatus.OPEN);
					}	
					
			}

		}

		else if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action))
		{			
			BayConfigForWardViewVoCollection bays = getSelectedBaysForClosure();

			if (wardBayConfig.getWardAvailabilityStatus() == null || !WardBayStatus.CLOSED.equals(wardBayConfig.getWardAvailabilityStatus()))
			{
				closingDetailsVo = populateClosingDetailsFromScreen(form.getLocalContext().getAction()); 

				//update Bays under the Ward
				if (bays != null && bays.size() > 0)
				{
					for (int i=0;i<bays.size();i++)
					{
						if (bays.get(i) != null && Boolean.TRUE.equals(bays.get(i).getBay().getIsActive()));
						{
							BayConfigForWardViewVo bayToUpdateVo = bays.get(i);
							bayToUpdateVo = populateBayClosingDetails(bayToUpdateVo, (WardBayClosingDetailsVo) closingDetailsVo.clone(), WardBayStatus.CLOSED.equals(bayToUpdateVo.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayToUpdateVo.getBayAvailabilityStatus()));
							wardConfigForSave.getBays().set(wardConfigForSave.getBays().indexOf(bayToUpdateVo), bayToUpdateVo);
						}
					}
					if (allBaysBlockedOrClosed(wardConfigForSave) && form.getLocalContext().getSelectedWardAwaitingBedCount() == null)
					{
						if (wardConfigForSave.getClosingDetails() == null)
							wardConfigForSave.setClosingDetails(new WardBayClosingDetailsVoCollection());
						wardConfigForSave.getClosingDetails().add((WardBayClosingDetailsVo) closingDetailsVo.clone());
						wardConfigForSave.setWardAvailabilityStatus(WardBayStatus.CLOSED);
					}
				}
			}
		}
		else if (CloseBlockReOpenBayWardForWardView.REOPEN_WARD.equals(action))
		{
			populateReopeningDetails(wardConfigForSave, WardBayStatus.CLOSED.equals(wardConfigForSave.getWardAvailabilityStatus()), WardBayStatus.BLOCKED.equals(wardConfigForSave.getWardAvailabilityStatus()));
		}		
		
		 return wardConfigForSave;
	}	
	
	private boolean atLeastOneBayClosedOrBlocked(BayConfigForWardViewVoCollection bays)
	{
		for (BayConfigForWardViewVo bay : bays)
		{
			if (WardBayStatus.BLOCKED.equals(bay.getBayAvailabilityStatus()) || WardBayStatus.CLOSED.equals(bay.getBayAvailabilityStatus()))
					return true;
		}
		return false;
	}

	private BayConfigForWardViewVo populateReopeningDetails(BayConfigForWardViewVo bayConfigForSave, boolean isClosed, boolean isBlocked, boolean bCalledOnWardReopen)
	{
		if (bayConfigForSave == null)
			return null;
		if (isClosed || isBlocked)
		{	
			if (isClosed)
			{	
				WardBayClosingDetailsVo closingDetailVo = getLatestClosingDetails(bayConfigForSave); 

				if (closingDetailVo != null)
				{
					closingDetailVo.setReopenReason(bCalledOnWardReopen ? form.lyrDetails().tabReopenW().cmbReopenReasonWard().getValue() : form.lyrDetails().tabReopenB().cmbReasonReopenBay().getValue());
					closingDetailVo.setReopenDate(new DateTime());
					if (closingDetailVo.getID_WardBayClosingDetails() == null)
					{
						bayConfigForSave.getClosingDetails().add(closingDetailVo);
					}
				}
			}
			if (isBlocked)
			{
				WardBayBlockingDetailsVo blockingDetailVo = getLatestBlockingDetails(bayConfigForSave); 

				if (blockingDetailVo != null)
				{	

					blockingDetailVo.setReopenReason(bCalledOnWardReopen ? form.lyrDetails().tabReopenW().cmbReopenReasonWard().getValue() : form.lyrDetails().tabReopenB().cmbReasonReopenBay().getValue());
					blockingDetailVo.setReopenDate(new DateTime());
					if (blockingDetailVo.getID_WardBayBlockingDetails() == null)
					{
						bayConfigForSave.getBlockingDetails().add(blockingDetailVo);
					}
				}
			}
		}
		if (isBayOutOfOpeningHours(bayConfigForSave))
		{
			if (bayConfigForSave.getReOpenOutOfHours() == null)
				bayConfigForSave.setReOpenOutOfHours(new ReopenBayOutOfHoursVoCollection());
			
			ReopenBayOutOfHoursVo vo = new ReopenBayOutOfHoursVo();
			vo.setReopenDate(new Date());
			vo.setReopenReason(bCalledOnWardReopen ? form.lyrDetails().tabReopenW().cmbReopenReasonWard().getValue() : form.lyrDetails().tabReopenB().cmbReasonReopenBay().getValue());
			bayConfigForSave.getReOpenOutOfHours().add(vo);
			
		}
		bayConfigForSave.setBayAvailabilityStatus(WardBayStatus.OPEN);
		
		return bayConfigForSave;
	}
	private void populateReopeningDetails(WardBayConfigForWardViewVo wardConfigForSave, boolean isClosed, boolean isBlocked)
	{
		if (isClosed)
		{	
			WardBayClosingDetailsVo closingDetailVo = getLatestClosingDetails(wardConfigForSave); 

			if (closingDetailVo != null)
			{
				closingDetailVo.setReopenReason(form.lyrDetails().tabReopenW().cmbReopenReasonWard().getValue());
				closingDetailVo.setReopenDate(new DateTime());
				if (closingDetailVo.getID_WardBayClosingDetails() == null)
				{
					wardConfigForSave.getClosingDetails().add(closingDetailVo);
				}
			}
		}
		if (isBlocked)
		{
			WardBayBlockingDetailsVo blockingDetailVo = getLatestBlockingDetails(wardConfigForSave); 

			if (blockingDetailVo != null)
			{
				blockingDetailVo.setReopenReason(form.lyrDetails().tabReopenW().cmbReopenReasonWard().getValue());
				blockingDetailVo.setReopenDate(new DateTime());
				if (blockingDetailVo.getID_WardBayBlockingDetails() == null)
				{
					wardConfigForSave.getBlockingDetails().add(blockingDetailVo);
				}
			}
		}
		if (wardConfigForSave.getBaysIsNotNull() && wardConfigForSave.getBays().size() > 0)
		{	
			for (int i=0;i<wardConfigForSave.getBays().size();i++)
			{						 
				if (wardConfigForSave.getBays().get(i) != null && !WardBayStatus.OPEN.equals(wardConfigForSave.getBays().get(i)));
				{
					populateReopeningDetails(wardConfigForSave.getBays().get(i),WardBayStatus.CLOSED.equals(wardConfigForSave.getBays().get(i).getBayAvailabilityStatus()), WardBayStatus.BLOCKED.equals(wardConfigForSave.getBays().get(i).getBayAvailabilityStatus()), true);
				}
			}
		}
		wardConfigForSave.setWardAvailabilityStatus(WardBayStatus.OPEN);
	}

	private boolean save()
	{
		WardBayConfigForWardViewVo wardConfigForSave = populateDataFromScreen(form.getLocalContext().getAction(), form.getLocalContext().getWardBayConfig());
		
		String[] uiErrors = getUIRules(form.getLocalContext().getAction());
		
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return false;			
		}
		String[] validationErrors = wardConfigForSave.validate(getUIRules(form.getLocalContext().getAction()));		
		if (validationErrors != null)
		{
			engine.showErrors(validationErrors);
			return false;			
		}
		try
		{
			domain.saveConfiguration(wardConfigForSave);
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		return true;
	}

	private void setDefaults(CloseBlockReOpenBayWardForWardView action)
	{
		MemberOfStaffLiteVo mlite = null;
		if( domain.getMosUser() instanceof MemberOfStaffLiteVo)
		{
			mlite = (MemberOfStaffLiteVo) domain.getMosUser();
		}
		
		if (CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(action))
		{
			form.lyrDetails().tabBlockB().ccBlockedByBay().setValue(mlite);
			form.lyrDetails().tabBlockB().dtimBlockedDateBay().setValue(new DateTime());
		}
		else  if (CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(action))
		{
			form.lyrDetails().tabCloseB().ccClosedByBayClose().setValue(mlite);
			form.lyrDetails().tabCloseB().dtimClosureDateBayClose().setValue(new DateTime());
		}
		else  if (CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(action))
		{
			form.lyrDetails().tabBlockW().ccClosedBlockedBy().setValue(mlite);
			form.lyrDetails().tabBlockW().dtimBlockedDateWard().setValue(new DateTime());
		}
		else  if (CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(action))
		{
			form.lyrDetails().tabCloseW().ccClosedByWardClose().setValue(mlite);
			form.lyrDetails().tabCloseW().dtimClosureDateWardClose().setValue(new DateTime());
		}
	}

	private void updateControlsState()
	{		
		boolean isWardClosed = form.getLocalContext().getWardBayConfigIsNotNull() && WardBayStatus.CLOSED.equals(form.getLocalContext().getWardBayConfig().getWardAvailabilityStatus());
		boolean isWardBlocked = form.getLocalContext().getWardBayConfigIsNotNull() && WardBayStatus.BLOCKED.equals(form.getLocalContext().getWardBayConfig().getWardAvailabilityStatus());
		
		
		form.btnBlockBays().setVisible(CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(form.getLocalContext().getAction()));
		form.btnCloseBays().setVisible(CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(form.getLocalContext().getAction()));
		form.btnReopenBays().setVisible(CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(form.getLocalContext().getAction()));
		form.btnReOpen().setVisible(CloseBlockReOpenBayWardForWardView.REOPEN_WARD.equals(form.getLocalContext().getAction())&& (isWardBlocked || isWardClosed));
		form.btnClose().setVisible(CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(form.getLocalContext().getAction()) || CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(form.getLocalContext().getAction()));
		
		
		form.lyrDetails().tabBlockB().setHeaderVisible(CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabBlockW().setHeaderVisible(CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabCloseB().setHeaderVisible(CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabCloseW().setHeaderVisible(CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabReopenB().setHeaderVisible(CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabReopenW().setHeaderVisible(CloseBlockReOpenBayWardForWardView.REOPEN_WARD.equals(form.getLocalContext().getAction()));
		
		form.lyrDetails().tabBlockB().setVisible(CloseBlockReOpenBayWardForWardView.BLOCK_BAY.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabBlockW().setVisible(CloseBlockReOpenBayWardForWardView.BLOCK_WARD.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabCloseB().setVisible(CloseBlockReOpenBayWardForWardView.CLOSE_BAY.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabCloseW().setVisible(CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabReopenB().setVisible(CloseBlockReOpenBayWardForWardView.REOPEN_BAY.equals(form.getLocalContext().getAction()));
		form.lyrDetails().tabReopenW().setVisible(CloseBlockReOpenBayWardForWardView.REOPEN_WARD.equals(form.getLocalContext().getAction()));
		
		form.btnCancel().setVisible(true);		
		
		form.btnClose().setText(CloseBlockReOpenBayWardForWardView.CLOSE_WARD.equals(form.getLocalContext().getAction()) ? "Close" : "Block");
	}
}
