//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotecomments;

import ims.core.clinical.vo.PatientCaseNoteRefVo;
import ims.core.forms.casenotecomments.GenForm.grdCommentsRow;
import ims.core.forms.casenotecomments.GenForm.grdCommentsRowCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientCaseNoteCommentListVo;
import ims.core.vo.PatientCaseNoteCommentListVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	// main form and form controls specific methods	

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.CaseNoteCommentsMenu.RIE:
				markAsRIE();
				break;
		}
		updateControlsState();		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.OK.equals(result) && form.getForms().Core.RieConfirmationDialog.equals(formName))
		{		
			doRIE(form.grdComments().getValue());
		}
		open();

	}
	@Override
	protected void onGrdCommentsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
		
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		if (searchIsValid(true))
			search(form.getGlobalContext().Core.getPatientCaseNoteFolderRef(), form.qmbLocation().getValue(), form.ccRequestedBy().getValue(), form.dteFrom().getValue(), form.dteTo().getValue());
		updateControlsState();
	}

	@Override
	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		populateLocations(value);		
	}
	//--------------------------
	
	// private methods
	private void addGridRow(PatientCaseNoteCommentListVo patientCaseNoteCommentListVo)
	{
		if (patientCaseNoteCommentListVo == null)
			return;
		
		grdCommentsRow row = form.grdComments().getRows().newRow();
		
		row.setColCommentDate(patientCaseNoteCommentListVo.getAuthoredDate().toString());
		row.setCellColCommentDateTooltip(patientCaseNoteCommentListVo.getAuthoredDate() != null ? patientCaseNoteCommentListVo.getAuthoredDate().toString() : "");
		
		row.setColComment(patientCaseNoteCommentListVo.getComment());
		row.setCellColCommentTooltip(patientCaseNoteCommentListVo.getComment() != null ? patientCaseNoteCommentListVo.getComment() : "");
		
		row.setColLocation(patientCaseNoteCommentListVo.getCaseNoteFolderLocation() != null ? patientCaseNoteCommentListVo.getCaseNoteFolderLocation().getName() : null);
		row.setCellColLocationTooltip(patientCaseNoteCommentListVo.getCaseNoteFolderLocation() != null ? patientCaseNoteCommentListVo.getCaseNoteFolderLocation().getName() : "");
		
		row.setColCommentedBy(patientCaseNoteCommentListVo.getAuthoredBy() != null ? patientCaseNoteCommentListVo.getAuthoredBy().getName().toString() : null);
		row.setCellColCommentedByTooltip(patientCaseNoteCommentListVo.getAuthoredBy() != null ? patientCaseNoteCommentListVo.getAuthoredBy().getName().toString() : "");
		
		row.setColType(patientCaseNoteCommentListVo.getCaseNote() != null && patientCaseNoteCommentListVo.getCaseNote().getTypeIsNotNull() ? patientCaseNoteCommentListVo.getCaseNote().getType().getIItemText() : null);
		row.setCellColTypeTooltip(patientCaseNoteCommentListVo.getCaseNote() != null && patientCaseNoteCommentListVo.getCaseNote().getTypeIsNotNull() ? patientCaseNoteCommentListVo.getCaseNote().getType().getIItemText() : null);
		
		row.setValue(patientCaseNoteCommentListVo);
	}

	private void clearScreen()
	{
		form.qmbLocation().clear();
		form.ccRequestedBy().clear();
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		grdCommentsRowCollection rowsColl = form.grdComments().getRows();
		rowsColl.clear();
		resetTotalLabel(rowsColl.size());
		
	}

	private void doRIE(PatientCaseNoteCommentListVo patientCaseNoteCommentListVo)
	{
		if (patientCaseNoteCommentListVo == null)
			return;

		try 
		{
			domain.markAsRie(patientCaseNoteCommentListVo, engine.getFormName(), form.getGlobalContext().Core.getPatientShort().getID_Patient(), null, null, form.getGlobalContext().Core.getRieMessage());
		}
		catch (StaleObjectException exc)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		
	}

	private void initialize()
	{
		clearScreen();
		form.ccRequestedBy().initialize(MosType.ALL);
		form.btnClose().setImage(form.getImages().Admin.CloseEnabled24);		
	}

	private void markAsRIE()
	{
		if (form.grdComments().getSelectedRow() == null)
			return;
		engine.open(form.getForms().Core.RieConfirmationDialog);
		
	}

	private void open()
	{
		if (searchIsValid(false))
			search(form.getGlobalContext().Core.getPatientCaseNoteFolderRef(), form.qmbLocation().getValue(), form.ccRequestedBy().getValue(), form.dteFrom().getValue(), form.dteTo().getValue());
		form.setMode(FormMode.VIEW);
		
	}

	private void populateLocations(String value)
	{
		if (value == null || value.length() == 0)
			return;

		form.qmbLocation().clear();

		LocationLiteVoCollection locList = domain.listCaseNoteFolderLocations(value);

		if (locList == null)
			return;

		for (int i=0;i<locList.size();i++)
		{
			if (locList.get(i) == null)
				continue;
			form.qmbLocation().newRow(locList.get(i), locList.get(i).getName());
			if (locList.size() == 1)
			{	
				form.qmbLocation().setValue(locList.get(0));
			}
			else
			{	
				form.qmbLocation().showOpened();
			}
		}
	}

	private void populateScreenFromData(PatientCaseNoteCommentListVoCollection commentList)
	{
		for (int i=0; i<commentList.size();i++)
		{
			if (commentList.get(i) == null)
				continue;
			addGridRow(commentList.get(i));
		}
		resetTotalLabel(commentList.size());
	}

	private void resetTotalLabel(int rowCount) 
	{
		form.lblTotal().setValue("Total:  " + String.valueOf(rowCount) + (rowCount == 1 ? " record" : " records"));
		
	}

	private void search(PatientCaseNoteRefVo patientCaseNoteRefVo, LocationLiteVo reqLocation, IMos requestedBy, Date dateFrom, Date dateTo)
	{
		PatientCaseNoteCommentListVoCollection commentList = domain.listComments(patientCaseNoteRefVo, reqLocation, requestedBy, dateFrom, dateTo);

		if (commentList == null || commentList.size() == 0)
		{
			engine.showMessage("No records were found.", "No Data Found",MessageButtons.OK, MessageIcon.INFORMATION);			
			return;
		}
		populateScreenFromData(commentList);	
	}

	private boolean searchIsValid(boolean validateDates)
	{
		grdCommentsRowCollection coll = form.grdComments().getRows();
		coll.clear();
		resetTotalLabel(coll.size());

		if (form.getGlobalContext().Core.getPatientCaseNoteFolderRef() == null || form.getGlobalContext().Core.getPatientCaseNoteFolderRef().getID_PatientCaseNote() == null)
			return false;
		if (validateDates && form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			engine.showMessage("'Date From' cannot be later than 'Date To'.", "Invalid Search Criteria", MessageButtons.OK,MessageIcon.ERROR);
			return false;
		}
		return true;
	}

	private void updateControlsState()
	{
		form.getContextMenus().Core.getCaseNoteCommentsMenuRIEItem().setVisible(form.grdComments().getValue() != null);
	}
}
