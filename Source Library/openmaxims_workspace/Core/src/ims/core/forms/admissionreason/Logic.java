//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.admissionreason;

import ims.core.vo.AdmissionReasonVo;
import ims.core.vo.enums.BedAdmissionValidationType;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormMandatoryLookupMissingException;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{	if (args == null)
			throw new FormMandatoryLookupMissingException("The required BedAdmissionValidationType argument is missing");
		initialise(args);
	}
	private void initialise(Object[] args)
	{
		if (args != null && args.length > 0)
		{
			if (args[0] != null && args[0] instanceof BedAdmissionValidationType)
			{
				form.getLocalContext().setDialogMode((BedAdmissionValidationType) args[0]);
			}
		}
		updateControlsState();
	}
	private void updateControlsState()
	{
		form.cmbReasonOutOfHours().setVisible(BedAdmissionValidationType.OUT_OF_OPENING_HOURS.equals(form.getLocalContext().getDialogMode()));
		form.cmbReasonPrivateBed().setVisible(BedAdmissionValidationType.PRIVATE_BED .equals(form.getLocalContext().getDialogMode()));
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateUI(form.getLocalContext().getDialogMode()))
		{
			form.getGlobalContext().Core.setBedRuleBreachReason(populateDateFromScreen(form.getLocalContext().getDialogMode()));	
			engine.close(DialogResult.OK);
		}
	}
	private boolean validateUI(BedAdmissionValidationType dialogMode)
	{
		if ((BedAdmissionValidationType.OUT_OF_OPENING_HOURS.equals(dialogMode) && form.cmbReasonOutOfHours().getValue() == null) || (BedAdmissionValidationType.PRIVATE_BED.equals(dialogMode) && form.cmbReasonPrivateBed().getValue() == null)) 
		{
			engine.showErrors(new String[] {"Reason is mandatory."});
			return false;
		}
		return true;
	}
	private AdmissionReasonVo populateDateFromScreen(BedAdmissionValidationType dialogMode)
	{		
		AdmissionReasonVo voData = form.getGlobalContext().Core.getBedRuleBreachReason();
		
		if (voData == null)
			voData = new AdmissionReasonVo();
		
		if (BedAdmissionValidationType.OUT_OF_OPENING_HOURS.equals(dialogMode))
		{	
			voData.setReasonForAdmissionOutOfOpeningHours(form.cmbReasonOutOfHours().getValue());
			voData.setReasonForAdmissionOohComment(form.txtComments().getValue());
			voData.setIsOohAllocationValidated(true);
		}	
		else if (BedAdmissionValidationType.PRIVATE_BED.equals(dialogMode))
		{	
			voData.setReasonForPrivateBedAllocation(form.cmbReasonPrivateBed().getValue());
			voData.setReasonForPrivateBedAllocationComment(form.txtComments().getValue());
			voData.setIsPrivateBedAllocationValidated(true);
		}	
		voData.setValidationType(dialogMode.getIItemText());
		return voData;
	}
}
