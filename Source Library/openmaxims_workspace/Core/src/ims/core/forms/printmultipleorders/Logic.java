//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.printmultipleorders;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.lookups.PatIdType;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.PrinterScope;
import ims.ocrr.vo.DftOrderInvestigationVo;
import ims.ocrr.vo.OrderSpecimenListVo;
import ims.ocrr.vo.SpecimenWorkListItemListVo;
import ims.ocrr.vo.SpecimenWorkListItemListVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;

import java.net.MalformedURLException;
import java.net.URL;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final Integer COL_IDENTIFIER = new Integer(1);
	private static final Integer COL_NAME = new Integer(2);
	private static final Integer COL_INVESTIGATION = new Integer(3);
	private static final Integer COL_NO_OF_LABELS_SETS = new Integer(4);
	private static final Integer COL_PRINTER = new Integer(5);
	private static final Integer COL_PREVIEW = new Integer(6);

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void open()
	{
		populateGrid();
	}

	private void populateGrid()
	{
		SpecimenWorkListItemListVoCollection worklistItems = form.getGlobalContext().Core.getSpecimenWorkListItemsForPrint();

		for (int i = 0; i < worklistItems.size(); i++)
		{
			addGridRow(worklistItems.get(i));
		}

	}

	private void addGridRow(SpecimenWorkListItemListVo specimen)
	{
		DynamicGridRow row = form.dyngrdPrint().getRows().newRow();
		row.setSelectable(false);

		String patId = getPatientIdentifier(specimen);
		String patName = getPatientName(specimen);
		String invName = getInvestigationName(specimen);

		DynamicGridCell cell = row.getCells().newCell(getColumn(COL_IDENTIFIER), DynamicCellType.STRING);
		cell.setTooltip(patId);
		cell.setReadOnly(true);
		cell.setValue(patId);

		cell = row.getCells().newCell(getColumn(COL_NAME), DynamicCellType.STRING);
		cell.setTooltip(patName);
		cell.setReadOnly(true);
		cell.setValue(patName);

		cell = row.getCells().newCell(getColumn(COL_INVESTIGATION), DynamicCellType.STRING);
		cell.setTooltip(invName);
		cell.setReadOnly(true);
		cell.setValue(invName);

		if (specimen.getDFTOrderInvestigationIsNotNull() && specimen.getDFTOrderInvestigation().getInvestigationIsNotNull() && specimen.getDFTOrderInvestigation().getInvestigation().getInvestigationIndexIsNotNull() && specimen.getDFTOrderInvestigation().getInvestigation().getInvestigationIndex().getNameIsNotNull())
		{
			cell = row.getCells().newCell(getColumn(COL_NO_OF_LABELS_SETS), DynamicCellType.INT);
			cell.setReadOnly(false);
			cell.setValue(specimen.getDFTOrderInvestigation().getInvestigation().getNoLabelSets());
			cell.setIntMaxLength(2);
		}

		cell = row.getCells().newCell(getColumn(COL_PREVIEW), DynamicCellType.IMAGEBUTTON);
		cell.setValue(form.getImages().Core.ZoomInEnabled16);
		cell.setAutoPostBack(true);

		if (specimen.getSpecimenIsNotNull())
		{
			row.setValue(specimen.getSpecimen());
		}
		else
			row.setValue(specimen.getDFTOrderInvestigation());
	}

	private String getInvestigationName(SpecimenWorkListItemListVo specimen)
	{
		String investigationName = "";

		if (specimen.getSpecimenIsNotNull())
		{
			for (int j = 0; specimen.getSpecimen().getInvestigationsIsNotNull() && j < specimen.getSpecimen().getInvestigations().size(); j++)
			{
				if (specimen.getSpecimen().getInvestigations().get(j).getInvestigationIsNotNull() && specimen.getSpecimen().getInvestigations().get(j).getInvestigation().getInvestigationIndexIsNotNull() && specimen.getSpecimen().getInvestigations().get(j).getInvestigation().getInvestigationIndex().getName() != null)
				{
					investigationName = (investigationName != "" ? investigationName + ", " + specimen.getSpecimen().getInvestigations().get(j).getInvestigation().getInvestigationIndex().getName() : specimen.getSpecimen().getInvestigations().get(j).getInvestigation().getInvestigationIndex().getName());
				}
			}

			return investigationName;
		}
		else if (specimen.getDFTOrderInvestigationIsNotNull() && specimen.getDFTOrderInvestigation().getInvestigationIsNotNull() && specimen.getDFTOrderInvestigation().getInvestigation().getInvestigationIndexIsNotNull() && specimen.getDFTOrderInvestigation().getInvestigation().getInvestigationIndex().getNameIsNotNull())
		{
			investigationName = specimen.getDFTOrderInvestigation().getInvestigation().getInvestigationIndex().getName();
			return investigationName;
		}

		return investigationName;
	}

	private String getPatientIdentifier(SpecimenWorkListItemListVo specimen)
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		if (specimen.getSpecimenIsNotNull() && specimen.getSpecimen().getOrderIsNotNull() && specimen.getSpecimen().getOrder().getPatientIsNotNull() && specimen.getSpecimen().getOrder().getPatient().getIdentifiersIsNotNull())
		{
			PatientIdCollection identifiers = specimen.getSpecimen().getOrder().getPatient().getIdentifiers();

			for (int i = 0; i < identifiers.size(); i++)
			{
				if (identifiers.get(i).getType().equals(dispIdType))
				{
					return identifiers.get(i).getValue();
				}
			}
		}
		else if (specimen.getDFTOrderInvestigationIsNotNull() && specimen.getDFTOrderInvestigation().getOrderDetailsIsNotNull() && specimen.getDFTOrderInvestigation().getOrderDetails().getPatientIsNotNull() && specimen.getDFTOrderInvestigation().getOrderDetails().getPatient().getIdentifiersIsNotNull())
		{
			PatientIdCollection identifiers = specimen.getDFTOrderInvestigation().getOrderDetails().getPatient().getIdentifiers();

			for (int i = 0; i < identifiers.size(); i++)
			{
				if (identifiers.get(i).getType().equals(dispIdType))
				{
					return identifiers.get(i).getValue();
				}
			}
		}

		return "";
	}

	private String getPatientName(SpecimenWorkListItemListVo specimen)
	{
		String patientName = "";
		String surename = "";
		String forename = "";

		if (specimen.getSpecimenIsNotNull() && specimen.getSpecimen().getOrderIsNotNull() && specimen.getSpecimen().getOrder().getPatientIsNotNull() && specimen.getSpecimen().getOrder().getPatient().getNameIsNotNull())
		{
			forename = specimen.getSpecimen().getOrder().getPatient().getName().getForename();
			surename = specimen.getSpecimen().getOrder().getPatient().getName().getSurname();

			patientName = (forename != null ? surename + " " + forename : surename);
			return patientName;
		}
		else if (specimen.getDFTOrderInvestigationIsNotNull() && specimen.getDFTOrderInvestigation().getOrderDetailsIsNotNull() && specimen.getDFTOrderInvestigation().getOrderDetails().getPatientIsNotNull() && specimen.getDFTOrderInvestigation().getOrderDetails().getPatient().getNameIsNotNull())
		{
			forename = specimen.getDFTOrderInvestigation().getOrderDetails().getPatient().getName().getForename();
			surename = specimen.getDFTOrderInvestigation().getOrderDetails().getPatient().getName().getSurname();

			patientName = (forename != null ? surename + " " + forename : surename);
			return patientName;
		}

		return patientName;
	}

	private DynamicGridColumn getColumn(Integer colInvestigation)
	{
		return form.dyngrdPrint().getColumns().getByIdentifier(colInvestigation);
	}

	private void initialise()
	{
		form.ccSelectPrinter().initialize(domain.getCurrentLocation(), PrinterScope.DEFAULT, false);
		form.ccSelectPrinter().setIsRequired(true);
		initialiseGrid();
	}

	private void initialiseGrid()
	{
		form.dyngrdPrint().clear();
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		DynamicGridColumn column = form.dyngrdPrint().getColumns().newColumn(dispIdType.getText(), COL_IDENTIFIER);
		column.setWidth(120);
		column.setCanGrow(true);

		column = form.dyngrdPrint().getColumns().newColumn("Patient", COL_NAME);
		column.setWidth(250);
		column.setCanGrow(true);

		column = form.dyngrdPrint().getColumns().newColumn("Investigation", COL_INVESTIGATION);
		column.setWidth(300);
		column.setCanGrow(true);

		column = form.dyngrdPrint().getColumns().newColumn("Label Sets No.", COL_NO_OF_LABELS_SETS);
		column.setWidth(100);
		column.setCanGrow(true);

		column = form.dyngrdPrint().getColumns().newColumn("Preview", COL_PREVIEW);
		column.setWidth(-1);
		column.setCanGrow(true);

	}

	@Override
	protected void onChkSelectAllPrintersValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.chkSelectAllPrinters().getValue())
		{
			form.ccSelectPrinter().initialize(null, PrinterScope.DEFAULT);
		}
		else
		{
			form.ccSelectPrinter().initialize(domain.getCurrentLocation(), PrinterScope.DEFAULT);
		}
	}

	@Override
	protected void onDyngrdPrintCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		if (cell != null && cell.getRow() != null && cell.getColumn().equals(getColumn(COL_PREVIEW)))
		{
			previewReport(cell.getRow());
		}
	}

	private void previewReport(DynamicGridRow row)
	{
		String result = "";

		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		if (row.getValue() instanceof OrderSpecimenListVo)
		{
			result = previewPathology(row, urlReportServer, client);
		}
		else if (row.getValue() instanceof DftOrderInvestigationVo)
		{
			result = previewDFTReport(row, urlReportServer, client);

			if (result != "")
			{
				engine.openUrl(result);

				String timeSeriesUrlS = ((DftOrderInvestigationVo) row.getValue()).getInvestigation().getInvestigationIndex().getTimeSeriesInstructionsURL();

				if (timeSeriesUrlS != null && timeSeriesUrlS.length() > 0)
				{
					try
					{
						new URL(timeSeriesUrlS);
					}
					catch (MalformedURLException e)
					{
						engine.showErrors(new String[] { "Time Series Instructions URL for " + ((DftOrderInvestigationVo) row.getValue()).getInvestigation().getInvestigationIndex().getName() + " investigation is not set correctly." });
						return;
					}

					engine.openUrl(timeSeriesUrlS);
				}
			}

			return;
		}

		if (result != "")
		{
			engine.openUrl(result);
		}
	}

	private String previewPathology(DynamicGridRow row, String urlReportServer, QueryBuilderClient client)
	{
		String result = "";
		String[] pathologyReport;
		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();

		OrderSpecimenListVo specimen = (OrderSpecimenListVo) row.getValue();
		ServiceLiteVo modality = domain.getModality(specimen);

		if (useModalityReportsConfig)
			pathologyReport = domain.getSystemReportAndTemplateByReportMapping(Category.PATHOLOGY.getID(), modality, Boolean.FALSE);
		else
			pathologyReport = domain.getSystemReportAndTemplateByReportMapping(Category.PATHOLOGY.getID(), null, null);

		if (pathologyReport == null || pathologyReport.length < 2)
		{
			if (useModalityReportsConfig)
				engine.showMessage("I could not get the Pathology report and template! Please link a template against modality '" + modality.getServiceName() + "', dft = FALSE");
			else
				engine.showMessage("I could not get the Pathology report and template! Please set the taxonomy mapping of type REPORT for Category.PATHOLOGY lookup instance with the relevant report Id.");

			return result;
		}

		if (pathologyReport[0] == null || pathologyReport[1] == null)
		{
			engine.showMessage("The Pathology report has not been deployed !");
			return result;
		}

		client.addSeed(new SeedValue("OrderSpecimen_id", specimen.getID_OrderSpecimen(), Integer.class));

		try
		{
			result = client.buildReportAsUrl(pathologyReport[0], pathologyReport[1], urlReportServer, "PDF", "", 1);
			client.getSeeds().clear();
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}

		return result;
	}

	private String previewDFTReport(DynamicGridRow row, String urlReportServer, QueryBuilderClient client)
	{
		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();
		String result = "";
		String[] DFTReport;

		DftOrderInvestigationVo dftInv = (DftOrderInvestigationVo) row.getValue();
		ServiceLiteVo modality = domain.getModality(dftInv.getID_OrderInvestigation());

		if (useModalityReportsConfig)
			DFTReport = domain.getSystemReportAndTemplateByReportMapping(InvEventType.TIME_SERIES.getID(), modality, Boolean.TRUE);
		else
			DFTReport = domain.getSystemReportAndTemplateByReportMapping(InvEventType.TIME_SERIES.getID(), null, null);

		if (DFTReport == null || DFTReport.length < 2)
		{
			if (useModalityReportsConfig)
				engine.showMessage("I could not get the DFT report and template for modality '" + modality.getServiceName() + "', dft=TRUE");
			else
				engine.showMessage("I could not get the DFT report and template! Please set the taxonomy mapping of type REPORT for InvEventType.TIME_SERIES lookup instance with the relevant report Id.");

			return result;
		}

		if (DFTReport[0] == null || DFTReport[1] == null)
		{
			engine.showMessage("The DFT report has not been deployed !");
			return result;
		}

		client.addSeed(new SeedValue("OrderInvestigation_id", dftInv.getID_OrderInvestigation(), Integer.class));

		try
		{
			result = client.buildReportAsUrl(DFTReport[0], DFTReport[1], urlReportServer, "PDF", "", 1);
			client.getSeeds().clear();
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return result;
		}

		return result;
	}

	@Override
	protected void onDyngrdPrintCellValueChanged(ims.framework.controls.DynamicGridCell cell)
	{
		// TODO Add your code here.
	}

	@Override
	protected void onDyngrdPrintRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		// TODO Add your code here.
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.ccSelectPrinter().getSelectedPrinter() == null)
		{
			engine.showMessage("Please select a Printer.");
		}

		try
		{
			doPrint();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	private void doPrint() throws QueryBuilderClientException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();
		ServiceLiteVo modality = null;
		boolean isDFT = false;

		String[] report = null;
		String[] DFTReport = null;
		String[] pathologyReport = null;

		DftOrderInvestigationVo dftInv = null;
		OrderSpecimenListVo pathologyInv = null;

		//make the validations
		for (int i = 0; i < form.dyngrdPrint().getRows().size(); i++)
		{
			
			if (form.dyngrdPrint().getRows().get(i).getValue() instanceof DftOrderInvestigationVo)
			{
				isDFT = true;
				dftInv = ((DftOrderInvestigationVo) form.dyngrdPrint().getRows().get(i).getValue());
			}
			else if (form.dyngrdPrint().getRows().get(i).getValue() instanceof OrderSpecimenListVo)
			{
				isDFT = false;
				pathologyInv = ((OrderSpecimenListVo) form.dyngrdPrint().getRows().get(i).getValue());
			}

			if (useModalityReportsConfig)
			{
				if (isDFT && dftInv != null)
				{
					modality = domain.getModality(dftInv.getID_OrderInvestigation());
				}
				else if (!isDFT && pathologyInv != null)
				{
					modality = domain.getModality(pathologyInv);
				}

				report = domain.getSystemReportAndTemplateByReportMapping(null, modality, isDFT);

				if (!validateModalityReports(report, report, !isDFT, isDFT, modality))
					return;
			}
			else
			{
				if (isDFT)
				{
					DFTReport = domain.getSystemReportAndTemplateByReportMapping(InvEventType.TIME_SERIES.getID(), null, null);

					if (!validateReports(null, DFTReport, false, true))
						return;
				}
				else
				{
					pathologyReport = domain.getSystemReportAndTemplateByReportMapping(Category.PATHOLOGY.getID(), null, null);

					if (!validateReports(pathologyReport, null, true, false))
						return;
				}
			}
		}
		
		
		//do the print
		for (int i = 0; i < form.dyngrdPrint().getRows().size(); i++)
		{
			int noOfCopies = 1;
			client.getSeeds().clear();
			
			if (form.dyngrdPrint().getRows().get(i).getValue() instanceof DftOrderInvestigationVo)
			{
				isDFT = true;
				dftInv = ((DftOrderInvestigationVo) form.dyngrdPrint().getRows().get(i).getValue());
				DynamicGridCell cellNoOfLabelsSet = form.dyngrdPrint().getRows().get(i).getCells().get(getColumn(COL_NO_OF_LABELS_SETS));
				
				if(cellNoOfLabelsSet.getValue() != null && (Integer) cellNoOfLabelsSet.getValue() > 0)
				{
					noOfCopies = (Integer) cellNoOfLabelsSet.getValue();
				}
			}
			else if (form.dyngrdPrint().getRows().get(i).getValue() instanceof OrderSpecimenListVo)
			{
				isDFT = false;
				pathologyInv = ((OrderSpecimenListVo) form.dyngrdPrint().getRows().get(i).getValue());
			}
			
			
			if (useModalityReportsConfig)
			{
				if (isDFT && dftInv != null)
				{
					modality = domain.getModality(dftInv.getID_OrderInvestigation());
					client.addSeed(new SeedValue("OrderInvestigation_id", dftInv.getID_OrderInvestigation(), Integer.class));
				}
				else if (!isDFT && pathologyInv != null)
				{
					modality = domain.getModality(pathologyInv);
					client.addSeed(new SeedValue("OrderSpecimen_id", pathologyInv.getID_OrderSpecimen(), Integer.class));
				}

				report = domain.getSystemReportAndTemplateByReportMapping(null, modality, isDFT);
				client.printReport(report[0], report[1], urlReportServer, form.ccSelectPrinter().getSelectedPrinter().getIPrinterName(), noOfCopies);
			}
			else
			{
				if (isDFT && dftInv != null)
				{
					DFTReport = domain.getSystemReportAndTemplateByReportMapping(InvEventType.TIME_SERIES.getID(), null, null);
					client.addSeed(new SeedValue("OrderInvestigation_id", dftInv.getID_OrderInvestigation(), Integer.class));
					client.printReport(DFTReport[0], DFTReport[1], urlReportServer, form.ccSelectPrinter().getSelectedPrinter().getIPrinterName(), noOfCopies);
				}
				else if (!isDFT && pathologyInv != null)
				{
					pathologyReport = domain.getSystemReportAndTemplateByReportMapping(Category.PATHOLOGY.getID(), null, null);
					client.addSeed(new SeedValue("OrderSpecimen_id", pathologyInv.getID_OrderSpecimen(), Integer.class));
					client.printReport(pathologyReport[0], pathologyReport[1], urlReportServer, form.ccSelectPrinter().getSelectedPrinter().getIPrinterName(), noOfCopies);
				}
			}
		}
		
		engine.close(DialogResult.OK);
	}

	private boolean validateReports(Object[] pathologyReport, String[] DFTReport, boolean isPathology, boolean isDFT)
	{
		if (isPathology)
		{
			if (pathologyReport == null || pathologyReport.length < 2)
			{
				engine.showMessage("I could not get the Pathology report and template! Please set the taxonomy mapping of type REPORT for Category.PATHOLOGY lookup instance with the relevant report Id.");
				return false;
			}

			if (pathologyReport[0] == null || pathologyReport[1] == null)
			{
				engine.showMessage("The Pathology report has not been deployed !");
				return false;
			}
		}

		if (isDFT)
		{
			if (DFTReport == null || DFTReport.length < 2)
			{
				engine.showMessage("I could not get the DFT report and template! Please set the taxonomy mapping of type REPORT for InvEventType.TIME_SERIES lookup instance with the relevant report Id.");
				return false;
			}

			if (DFTReport[0] == null || DFTReport[1] == null)
			{
				engine.showMessage("The DFT report has not been deployed !");
				return false;
			}
		}

		return true;
	}

	private boolean validateModalityReports(String[] pathologyReport, String[] dftReport, boolean isPathology, boolean isDFT, ServiceLiteVo modality)
	{
		if (isPathology)
		{
			if (pathologyReport == null || pathologyReport.length < 2)
			{
				engine.showMessage("No template was linked to modality '" + modality.getServiceName() + "', DFT='False'");
				return false;
			}

			if (pathologyReport[0] == null || pathologyReport[1] == null)
			{
				engine.showMessage("The report/template linked to modality '" + modality.getServiceName() + "', DFT='False' was not deployed !");
				return false;
			}
		}

		if (isDFT)
		{
			if (dftReport == null || dftReport.length < 2)
			{
				engine.showMessage("No template was linked to modality '" + modality.getServiceName() + "', DFT='True'");
				return false;
			}

			if (dftReport[0] == null || dftReport[1] == null)
			{
				engine.showMessage("The report/template linked to modality '" + modality.getServiceName() + "', DFT='True' was not deployed !");
				return false;
			}
		}

		return true;
	}
}
