//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40806.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignsmetrics;

import ims.core.forms.vitalsignsmetrics.GenForm.grpShowByEnumeration;
import ims.core.vo.VSMetrics;
import ims.core.vo.VitalSignsFormsSearchCriteriaVo;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.graphing.GraphingMetrics;
import ims.framework.utils.graphing.GraphingPoint;
import ims.framework.utils.graphing.GraphingPointType;

public class Logic extends BaseLogic
{
	private static final int LIST_BY_DAY			= 1;
	private static final int LIST_BY_DATES			= 2;
	
	protected void onFormOpen() throws FormOpenException
	{
		//WDEV-14429
		if(isVitalSignsMetricsForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoByDay); 
		form.btnUpdate().setEnabled(false);
		
		form.chkBmi().setValue(false);
		form.chkBmi().setVisible(false);
		form.chkHeight().setValue(true);
		form.chkWeight().setValue(true);

		form.grhMetrics().graphingOptions().metrics.setDisplayBMI(form.chkBmi().getValue());
		form.grhMetrics().graphingOptions().metrics.setDisplayHeight(form.chkHeight().getValue());
		form.grhMetrics().graphingOptions().metrics.setDisplayWeight(form.chkWeight().getValue());
						
		form.grhMetrics().showYAxisValues();
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			form.lnkReturn().setTooltip("Return to Baseline Observations");
		}
		else
		{
			form.lnkReturn().setTooltip("Return to Vital Signs");
		}
		//ends here 
		
		if(form.getGlobalContext().Core.getVitalSign() != null  && form.getGlobalContext().Core.getVitalSign().getMetrics() != null)
		{
			form.dteShowByDay().setValue(form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime() != null ? form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime().getDate() : null);//WDEV-13117
			form.getLocalContext().setvitalSign(form.getGlobalContext().Core.getVitalSign());
			displayRecord(form.getGlobalContext().Core.getVitalSign());
			form.btnUpdate().setEnabled(true);			
			listMetrics();	
		}
		else
		{
			//WDEV-19389 - start
			if (isVitalSignsMetrics() && form.getGlobalContext().Core.getVitalSign() == null && form.getGlobalContext().Core.getVitalSignsMetricsSearchCriteriaIsNotNull())
			{
				if (form.getGlobalContext().Core.getVitalSign() == null && !(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().equals(form.getGlobalContext().Core.getVitalSignsMetricsSearchCriteria().getCareContext())))
					form.getGlobalContext().Core.setVitalSignsMetricsSearchCriteria(null);
				
				doSeachCriteria(form.getGlobalContext().Core.getVitalSignsMetricsSearchCriteria());
			}
			else if (isVitalSignsMetricsAlias() && form.getGlobalContext().Core.getVitalSign() == null && form.getGlobalContext().Core.getVitalSignsMetricsAliasSearchCriteriaIsNotNull())
			{
				if (form.getGlobalContext().Core.getVitalSign() == null && !(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().equals(form.getGlobalContext().Core.getVitalSignsMetricsAliasSearchCriteria().getCareContext())))
					form.getGlobalContext().Core.setVitalSignsMetricsAliasSearchCriteria(null);
				
				doSeachCriteria(form.getGlobalContext().Core.getVitalSignsMetricsAliasSearchCriteria());
			}
			else
			{
				try {
    				onRadioButtongrpShowByValueChanged();
    			} catch (PresentationLogicException e) {
    				throw new DomainRuntimeException();
    			}
			}
		}
		//WDEV-19389 - end
				
		updatePrevNextButtons();
		dateIntervalStatus();//WDEV-13117
	}
	
	private void doSeachCriteria(VitalSignsFormsSearchCriteriaVo vitalSignsBPAliasSearchCriteria)
	{
		if (vitalSignsBPAliasSearchCriteria != null)
		{
			try
			{
				setSearchCriteria(vitalSignsBPAliasSearchCriteria);
				onBtnViewClick();
			}
			catch (PresentationLogicException e) {
				throw new DomainRuntimeException();
			}
		}
		else
		{
			try {
				onRadioButtongrpShowByValueChanged();
			} catch (PresentationLogicException e) {
				throw new DomainRuntimeException();
			}
		}
	}

	private boolean isVitalSignsMetrics()
	{
		return engine.getFormName().equals(form.getForms().Core.VitalSignsMetrics);
	}

	private boolean isVitalSignsMetricsAlias()
	{
		return engine.getFormName().equals(form.getForms().Core.VitalSignsMetricsAlias);
	}
	
	private VitalSignsFormsSearchCriteriaVo getSearchCriteria()
	{
		VitalSignsFormsSearchCriteriaVo searchCriteria = new VitalSignsFormsSearchCriteriaVo();
		
		searchCriteria.setViewBy(getViewType());
		searchCriteria.setByDay(form.dteShowByDay().getValue());
		searchCriteria.setFromDate(form.dteFrom().getValue());
		searchCriteria.setToDate(form.dteTo().getValue());
		searchCriteria.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		return searchCriteria;
	}
	
	
	private void setSearchCriteria(VitalSignsFormsSearchCriteriaVo vitalSignsFormsSearchCriteriaVo) throws PresentationLogicException
	{
		setViewType(vitalSignsFormsSearchCriteriaVo.getViewBy());
		onRadioButtongrpShowByValueChanged();
		form.dteShowByDay().setValue(vitalSignsFormsSearchCriteriaVo.getByDay());
		form.dteFrom().setValue(vitalSignsFormsSearchCriteriaVo.getFromDate());
		form.dteTo().setValue(vitalSignsFormsSearchCriteriaVo.getToDate());
	}

	private void setViewType(Integer searchType)
	{
		if (searchType == null)
			return;
		
		switch (searchType)
		{
		case LIST_BY_DAY:
			form.grpShowBy().setValue(grpShowByEnumeration.rdoByDay);
			break;
		case LIST_BY_DATES:
			form.grpShowBy().setValue(grpShowByEnumeration.rdoByDate);
			break;
		}				
	}

	private Integer getViewType()
	{
		grpShowByEnumeration searchType = form.grpShowBy().getValue();
		if (grpShowByEnumeration.rdoByDay.equals(searchType))
		{
			return LIST_BY_DAY;
		}
		if (grpShowByEnumeration.rdoByDate.equals(searchType))
		{
			return LIST_BY_DATES;
		}
		
		return null;
	}

	private void listMetrics() 
	{
		VitalSignsVoCollection voCollVitals = null;
		String subTitle = "";
		
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			voCollVitals = domain.listMetrics(form.dteShowByDay().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Height and Weight Graph for " + form.dteShowByDay().getValue().toString(DateFormat.STANDARD); 
		}
		else
		{
			voCollVitals = domain.listMetrics(form.dteFrom().getValue(),form.dteTo().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Height and Weight Graph between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " +  form.dteTo().getValue().toString(DateFormat.STANDARD);
		}
	 
		form.lblMetrics().setValue(subTitle);
		form.grhMetrics().clearAllPoints();
		
		form.grhMetrics().setPrintHeaderInfo(subTitle + "\r\n" + form.getGlobalContext().Core.getPatientShort().getPatientInfo());		

		VitalSignsVo voVitalSign;
		GraphingMetrics point;
		if(voCollVitals != null && voCollVitals.size() > 0) //WDEV-16175 
		{
			voCollVitals.sort(SortOrder.ASCENDING);
			
			int nIndex = voCollVitals.size() - 1;

			for(int i=0;i<voCollVitals.size();i++)
			{
				voVitalSign = voCollVitals.get(i);
				point = new GraphingMetrics(voVitalSign.getVitalsTakenDateTime(),  voVitalSign.getMetrics().getWeightValue(),  voVitalSign.getMetrics().getHeightValue(), voVitalSign.getMetrics().getBMI(), voVitalSign);
				form.grhMetrics().addPoint(point);	
				
				if(form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
						form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
						voVitalSign.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
					nIndex = i;
			}
			
			form.getLocalContext().setMetrics(voCollVitals);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentMetrics();
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setMetrics(null);
			form.btnUpdate().setEnabled(false);
			
		}
	}

	private void displayCurrentMetrics()
	{
		VitalSignsVoCollection voMetrics = form.getLocalContext().getMetrics();
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		
		if(voMetrics == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voMetrics.size())
			return;

		form.getLocalContext().setvitalSign(voMetrics.get(nIndex.intValue()));
		displayRecord(voMetrics.get(nIndex.intValue()));
		
		updatePrevNextButtons();
	}

	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voMetrics = form.getLocalContext().getMetrics();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);
		
		if(voMetrics == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			return;
		}
		
		if(nIndex.intValue() <= 0)
			form.btnPrev().setEnabled(false);

		if(nIndex.intValue() >= voMetrics.size() - 1)
			form.btnNext().setEnabled(false);
	}

	protected void onRadioButtongrpShowByValueChanged() throws PresentationLogicException 
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			form.dteShowByDay().setEnabled(true);
			form.dteShowByDay().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		}
		else
		{
			form.dteShowByDay().setEnabled(false);
			form.dteShowByDay().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());
		}
		onBtnViewClick();
	}

	protected void onBtnViewClick() throws PresentationLogicException
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			if(form.dteShowByDay().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if(form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;				
			}
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}
		
		//WDEV-19389 
		if (form.getGlobalContext().Core.getVitalSign() == null )
		{
			if (isVitalSignsMetrics())
			{
				form.getGlobalContext().Core.setVitalSignsMetricsSearchCriteria(getSearchCriteria());
			}
			else if (isVitalSignsMetricsAlias())
			{
				form.getGlobalContext().Core.setVitalSignsMetricsAliasSearchCriteria(getSearchCriteria());
			}				
		}
		
		clearFields();
		listMetrics();		
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		VitalSignsVo voVitalSign = form.getLocalContext().getvitalSign();
		
		if((form.decHeight().getValue() == null) && (form.decWeight().getValue() == null))
		{
			voVitalSign.setMetrics(null);
		}
		else
		{
			if ((form.decHeight().getValue() != null && form.decHeight().getValue() < 1) || (form.decWeight().getValue() != null && form.decWeight().getValue() < 1))
			{
				engine.showErrors(new String[] {"Height and Weight values cannot be less than 1."}); //WDEV-18762
				return;
			}
			else
			{
				VSMetrics voMetrics = new VSMetrics();
			
				voMetrics.setHeightValue(form.decHeight().getValue());
				voMetrics.setHeightEstimatedMeasured(Boolean.TRUE);
				voMetrics.setWeightValue(form.decWeight().getValue());
				voMetrics.setWeightEstimatedMeasured(Boolean.TRUE);
				voMetrics.setBMI(bodyMassIndex(form.decHeight().getValue(), form.decWeight().getValue()));
				voMetrics.setSurfaceArea(bodySurfaceArea(form.decHeight().getValue(), form.decWeight().getValue()));
				voMetrics.setPatient(form.getGlobalContext().Core.getPatientShort());
				
				voVitalSign.setMetrics(voMetrics);
			}
		}
	
		String[] arrErrors = voVitalSign.validate();
		if(arrErrors == null)
		{
			try 
			{
				form.getLocalContext().setvitalSign(domain.modifyMetrics(voVitalSign));
			} 
			catch (StaleObjectException e) {
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;	
		}

		form.setMode(FormMode.VIEW);
		
		listMetrics();
	
		displayRecord(form.getLocalContext().getvitalSign());
		
		dateIntervalStatus();
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		displayRecord(form.getLocalContext().getvitalSign());
		form.setMode(FormMode.VIEW);
		
		dateIntervalStatus();
		updatePrevNextButtons();
	}

	private void dateIntervalStatus()
	{
		form.dteShowByDay().setEnabled(GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}

	private void clearFields()
	{
		form.decHeight().setValue(null);
		form.decWeight().setValue(null);
		form.decBMI().setValue(null);
		form.decSurArea().setValue(null);
		form.dteTaken().setValue(null);
		form.timTaken().setValue(null);
		form.txtHcp().setValue("");
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);		
		form.btnUpdate().setEnabled(false);	
		form.dteShowByDay().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		
		form.btnPrev().setEnabled(false);
		form.btnNext().setEnabled(false);
	}

	protected void onBtnCalculateClick() 
	{
	}
		
	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();
		
		if(voVitalSign == null)
			return;

		form.decHeight().setValue(voVitalSign.getMetrics() != null ? voVitalSign.getMetrics().getHeightValue() : null);
		form.decWeight().setValue(voVitalSign.getMetrics() != null ? voVitalSign.getMetrics().getWeightValue() : null);
		form.decBMI().setValue(voVitalSign.getMetrics() != null ? voVitalSign.getMetrics().getBMI() : null);
		form.decSurArea().setValue(voVitalSign.getMetrics() != null ? voVitalSign.getMetrics().getSurfaceArea() : null);	
		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime() != null ? voVitalSign.getVitalsTakenDateTime().getDate() : null);
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime() != null ? voVitalSign.getVitalsTakenDateTime().getTime() : null);
		if(voVitalSign.getAuthoringInformation()!= null && voVitalSign.getAuthoringInformation().getAuthoringHcp()!= null)
			form.txtHcp().setValue(voVitalSign.getAuthoringInformation().getAuthoringHcp().toString());
				
		form.btnUpdate().setEnabled(true);
	}
	
	private void refresh()
	{
		clearFields();
		listMetrics();
		form.setMode(FormMode.VIEW);
	}

	protected void onGrhMetricsPointClicked(GraphingPoint point) 
	{
		if(point.getType() == GraphingPointType.METRICS)
		{ 			
			GraphingMetrics pointMetrics = (GraphingMetrics)point;
			form.getLocalContext().setvitalSign((VitalSignsVo)pointMetrics.getTag());
			displayRecord((VitalSignsVo)pointMetrics.getTag());
			form.btnUpdate().setEnabled(true);
			
			//update the Prev/Next buttons
			VitalSignsVoCollection voTemperatures = form.getLocalContext().getMetrics();
			for(int i = 0; i < voTemperatures.size(); i++)
			{
				if(form.getLocalContext().getvitalSign().getID_VitalSigns().intValue() == voTemperatures.get(i).getID_VitalSigns().intValue())
				{
					form.getLocalContext().setCurrentIndex(new Integer(i));
					updatePrevNextButtons();
					break;
				}
			}
		}		
	}

	protected void onChkHeightValueChanged() throws PresentationLogicException 
	{
		form.grhMetrics().graphingOptions().metrics.setDisplayHeight(form.chkHeight().getValue());
	}

	protected void onChkBmiValueChanged() throws PresentationLogicException 
	{
		form.grhMetrics().graphingOptions().metrics.setDisplayBMI(form.chkBmi().getValue());	
	}

	protected void onChkWeightValueChanged() throws PresentationLogicException
	{
		form.grhMetrics().graphingOptions().metrics.setDisplayWeight(form.chkWeight().getValue());	
	}
	
	private Float bodySurfaceArea(Float height/*cm*/, Float weight/*kg*/)
	{
		if (height == null || weight  == null)
			return null;
		
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(0.20247 * Math.pow(height.floatValue() / 100.0, 0.725) * Math.pow(weight.floatValue(), 0.425)));
	}
	private Float bodyMassIndex(Float height/*cm*/, Float weight/*kg*/)
	{
		if (height == null || weight  == null)
			return null;
		
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(weight.floatValue() / (height.floatValue() / 100.0 * height.floatValue() / 100.0)));
	}
	
	
	protected void onBtnNextClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentMetrics();
	}
	protected void onBtnPrevClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentMetrics();
	}
	
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		//WDEV-14429
		if(isVitalSignsMetricsForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			engine.open(form.getForms().Core.BaselineObservations);
			
		}
		//ends here
		
		else if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}

	//WDEV-14429
	private boolean isVitalSignsMetricsForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsMetricsForTriage))
			return true;
		
		return false;
	}
}
