//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.accepttransfertowarddlg;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.accepttransfertowarddlg.GenForm.ACCCaseFolderYesNoEnumeration;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.HomeLeaveVo;
import ims.core.vo.InPatientEpisodeADTVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteTransferVo;
import ims.core.vo.PatientCaseNoteTransferVoCollection;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.PatientCaseNoteVoCollection;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardStayVo;
import ims.core.vo.WardStayVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.TransferStatus;
import ims.core.vo.lookups.WardType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	private void initialise()
	{
		form.ccConsultant().initialize(MosType.MEDIC);
		form.ccConsultant().isRequired(true);
		form.btnAcceptTransfer().setImage(form.getImages().Core.Transfer);
		form.btnCancel().setImage(form.getImages().Core.Delete);
		
	}
	private void updateControlsState()
	{
		form.chkAllocateBed().setVisible(form.getLocalContext().getSelectedPendingTransferIsNotNull() && form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisodeIsNotNull() && form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisode().getBedIsNotNull());
		form.lblAllocateBed().setVisible(form.getLocalContext().getSelectedPendingTransferIsNotNull() && form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisodeIsNotNull() && form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisode().getBedIsNotNull());
		boolean caseNoteLocationIsVisible = Boolean.TRUE.equals(form.getLocalContext().getIsCaseNoteFolderLocation());//WDEV-22851
		form.ACCCaseFolderYesNo().setVisible(caseNoteLocationIsVisible);
		form.lblCaseNoteLocation().setVisible(caseNoteLocationIsVisible);
	}
	private void open()
	{
		form.getLocalContext().setSelectedPendingTransfer(form.getGlobalContext().Core.getADTPendingTransfer());
		PendingTransfersLiteVo selectedPendingTransfer = form.getLocalContext().getSelectedPendingTransfer();
		
		if(selectedPendingTransfer != null && selectedPendingTransfer.getInpatientEpisodeIsNotNull() && selectedPendingTransfer.getInpatientEpisode().getPasEventIsNotNull())//WDEV-22851
			form.getLocalContext().setIsCaseNoteFolderLocation(domain.isCaseNoteFolderLocation(selectedPendingTransfer.getInpatientEpisode().getPasEvent().getPatient()));
		populateScreenFromData(selectedPendingTransfer);
		updateControlsState();
		
	}
	
	private void populateScreenFromData (PendingTransfersLiteVo selectedPendingTransfer)
	{
		clearScreen();
		
		if (selectedPendingTransfer == null)
			return;
				
		if (selectedPendingTransfer.getServiceIsNotNull())
		{
			form.qmbService().newRow(selectedPendingTransfer.getService(), selectedPendingTransfer.getService().getServiceName());
			form.qmbService().setValue(selectedPendingTransfer.getService());
			form.ccConsultant().initializeResponsibleHcp(MosType.MEDIC, null, selectedPendingTransfer.getService(), null);
		}		
		if(selectedPendingTransfer.getWardTypeIsNotNull())
			form.cmbWardType().setValue(selectedPendingTransfer.getWardType());
		else
			form.cmbWardType().setValue(WardType.MAIN);

		if (selectedPendingTransfer.getConsultantIsNotNull())
			form.ccConsultant().setValue(selectedPendingTransfer.getConsultant());
		else if (selectedPendingTransfer.getInpatientEpisodeIsNotNull() && selectedPendingTransfer.getInpatientEpisode().getPasEventIsNotNull() && selectedPendingTransfer.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
			form.ccConsultant().setValue(selectedPendingTransfer.getInpatientEpisode().getPasEvent().getConsultant());
		
				
		Specialty spec = null;
		if (selectedPendingTransfer.getSpecialtyIsNotNull())
			spec = selectedPendingTransfer.getSpecialty();
		else if (selectedPendingTransfer.getInpatientEpisodeIsNotNull() 
			&& selectedPendingTransfer.getInpatientEpisode().getPasEventIsNotNull() 
			&& selectedPendingTransfer.getInpatientEpisode().getPasEvent().getSpecialtyIsNotNull())
			spec = selectedPendingTransfer.getInpatientEpisode().getPasEvent().getSpecialty();
			
		if (selectedPendingTransfer.getInpatientEpisodeIsNotNull())
		{	
			form.dtimEstDischarge().setValue(selectedPendingTransfer.getInpatientEpisode().getEstDischargeDate());
		}
		if (spec != null)
		{
			form.cmbSpecialty().newRow(spec, spec.getText());	
			form.cmbSpecialty().setValue(spec);
		}
		form.dtimTransferAccept().setValue(new DateTime());
		form.cmbTransfReason().setValue(selectedPendingTransfer.getTransferReason());
		form.txtTransfComment().setValue(selectedPendingTransfer.getTransferComment());
		form.cmbPatientStatus().setValue(selectedPendingTransfer.getPatientStatus());
		//WDEV-21436
		form.chkAllocateBed().setValue(form.chkAllocateBed().isVisible());				
	}

	private void clearScreen() 
	{
		form.ccConsultant().setValue(null);
		form.txtTransfComment().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.cmbTransfReason().setValue(null);
		form.chkAllocateBed().setValue(false);
		form.cmbWardType().setValue(null);
		form.dtimEstDischarge().setValue(null);
		form.dtimTransferAccept().setValue(null);
		
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnAcceptTransferClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (saveTransferNoBed())
			engine.close(DialogResult.OK);
		
	}
	private String[] getUIValidationForTransferIn()
	{
		List<String> errors = new ArrayList<String>();

		if (form.dtimEstDischarge().getValue() != null && form.dtimEstDischarge().getValue().isLessThan(new DateTime()))
			errors.add("Est. Discharge Date/Time cannot be earlier than current date and time.");
		
		//***********************************************************
		if (form.qmbService().getValue() == null)
			errors.add("Service is mandatory");				
		
		if (form.cmbSpecialty().getValue() == null)
			errors.add("Speciality is mandatory.");
		
		if (form.ccConsultant().getValue() == null)
			errors.add("Consultant is mandatory.");
				
		if (form.dtimTransferAccept().getValue() == null)
			errors.add("Transfer Date/Time is mandatory.");
		
		if (form.dtimTransferAccept().getValue() != null && form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisodeIsNotNull() && form.dtimTransferAccept().getValue().isLessThan(form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisode().getAdmissionDateTime()))
		{
			errors.add("Transfer Date/Time cannot be earlier than Admission Date/Time.");
		}
		
		//***********************************************************
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}
	private WardStayVo getCurrentWardStayRecord(WardStayVoCollection wardStays)
	{
		if (wardStays == null || wardStays.size() == 0)
			return null;
		for (WardStayVo wardStayVo : wardStays)
		{
			if (wardStayVo != null && wardStayVo.getTransferOutDateTime() == null)
				return wardStayVo;
		}
		return null;
	}
	private InPatientEpisodeADTVo addNewWardStayAndUpdateCurrent(InPatientEpisodeADTVo voEpisode)
	{
		if (voEpisode == null)
			return null;
		//update of Current Ward Stay
		WardStayVo currentWardStayRecordVo = getCurrentWardStayRecord(voEpisode.getWardStays());
		
		if (currentWardStayRecordVo != null)
		{
			currentWardStayRecordVo.setTransferOutDateTime(form.dtimTransferAccept().getValue());
			voEpisode.getWardStays().set(voEpisode.getWardStays().indexOf(currentWardStayRecordVo), currentWardStayRecordVo);
		}
		
		//new Ward Stay Created on Accepting Transfer
		WardStayVo voWardStay = new WardStayVo();
		voWardStay.setService(form.qmbService().getValue());
		voWardStay.setTransferDateTime(form.dtimTransferAccept().getValue());
		voWardStay.setBedSpace(null);
		voWardStay.setBay(null);
		voWardStay.setPatientStatus(form.cmbPatientStatus().getValue()); //WDEV-20223
		voWardStay.setWard(form.getLocalContext().getSelectedPendingTransfer().getDestinationWard());
		voWardStay.setWardType(form.cmbWardType().getValue());
		voWardStay.setTransferReason(form.cmbTransfReason().getValue());
		voWardStay.setTransferComment(form.txtTransfComment().getValue());
		
		if (voEpisode.getWardStays() == null)
			voEpisode.setWardStays(new WardStayVoCollection());

		voEpisode.getWardStays().add(voWardStay);
		
		return voEpisode;
	}
	private InPatientEpisodeADTVo populateEpisodeDataFromScreen(InPatientEpisodeADTVo voEpisode)
	{
		if (voEpisode == null)
			throw new CodingRuntimeException("voEpisode is null in method populateEpisodeDataFromTransferInTab");

		if (voEpisode.getPasEventIsNotNull())
		{
			if (form.ccConsultant().getValue() instanceof MedicVo)
			{		
				voEpisode.getPasEvent().setConsultant((MedicVo)form.ccConsultant().getValue());
			}
			voEpisode.getPasEvent().setService(form.qmbService().getValue());
			voEpisode.getPasEvent().setSpecialty(form.cmbSpecialty().getValue());
			voEpisode.getPasEvent().setLocation(form.getLocalContext().getSelectedPendingTransfer().getDestinationWard());
		}
		//WDEV-20134
		InPatientEpisodeADTVo voEpisodeToSave = addNewWardStayAndUpdateCurrent(voEpisode);
		
		voEpisodeToSave.setEstDischargeDate(form.dtimEstDischarge().getValue());
		voEpisodeToSave.setWardType(form.cmbWardType().getValue());
		voEpisode.setBed(null); //WDEV-20291 transfer no bed
		
		return voEpisodeToSave;
	}
	
	private boolean saveTransferNoBed()
	{
		InPatientEpisodeADTVo voEpisode = domain.getInpatientEpisodeADT(form.getLocalContext().getSelectedPendingTransfer().getInpatientEpisode());

		// get old bed and set it to avaialable first and then new bed will be
		// set to occupied below
		BedSpaceStateLiteVo voOldBedSpaceStateLite = voEpisode.getBed();
		if (voOldBedSpaceStateLite != null)
		{		
			// move to previous
			if (voOldBedSpaceStateLite.getCurrentBedStatusIsNotNull())
			{
				voOldBedSpaceStateLite.setPreviousBedStatus((BedSpaceStateStatusLiteVo) voOldBedSpaceStateLite.getCurrentBedStatus().clone());
				voOldBedSpaceStateLite.setCurrentBedStatus(new BedSpaceStateStatusLiteVo());
				voOldBedSpaceStateLite.getCurrentBedStatus().setStatusDateTime(new DateTime());
				voOldBedSpaceStateLite.getCurrentBedStatus().setBedStatus(form.chkAllocateBed().getValue() ? BedStatus.FOR_CLEANING : BedStatus.AVAILABLE);
			}
	
			voOldBedSpaceStateLite.setInpatientEpisode(null);
		}

		PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer=null;
		if (ACCCaseFolderYesNoEnumeration.rdoACCYes.equals(form.ACCCaseFolderYesNo().getValue()))
		{
			if (voEpisode != null && voEpisode.getPasEvent() != null && voEpisode.getPasEvent().getPatient() != null)
			{
				PatientCaseNoteVoCollection voCollCaseNotesFolder = domain.getCaseNoteFolders(voEpisode.getPasEvent().getPatient(),null);
			
				collPatientCaseNoteTransfer = new PatientCaseNoteTransferVoCollection();
				for (int i = 0 ; voCollCaseNotesFolder !=null && i < voCollCaseNotesFolder.size() ; i++)
				{
					if(CaseNoteStatus.ACTIVE.equals(voCollCaseNotesFolder.get(i).getStatus())|| CaseNoteStatus.REQUIRES_MERGING.equals(voCollCaseNotesFolder.get(i).getStatus())|| CaseNoteStatus.MARKED_AS_FOUND.equals(voCollCaseNotesFolder.get(i).getStatus()))//WDEV-22851
						collPatientCaseNoteTransfer.add(populatePatCaseNoteTransferFromScreen(voCollCaseNotesFolder.get(i)));
				}	
			}
		}

		voEpisode = populateEpisodeDataFromScreen(voEpisode);
		PendingTransfersLiteVo voPendingTransfer = populatePendingTransferDataFromScreen(form.getLocalContext().getSelectedPendingTransfer());
		HomeLeaveVo voHL = new HomeLeaveVo();

		if(voEpisode.getIsOnHomeLeaveIsNotNull()
			&& voEpisode.getIsOnHomeLeave())
		{
			voHL.setDateReturnedFromHomeLeave(new Date());
			voHL.setTimeReturnedFromHomeLeave(new Time());
		}
		else
			voHL = null;
		
		String[] arrErrors = voPendingTransfer.validate(voEpisode.validate(getUIValidationForTransferIn()));
		if (collPatientCaseNoteTransfer != null)
		{	
			arrErrors = collPatientCaseNoteTransfer.validate(arrErrors);		
		}
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		try
		{	
			form.getGlobalContext().Core.setCurrentCareContext(domain.saveTransferIn(voOldBedSpaceStateLite, voEpisode, voPendingTransfer, voHL, collPatientCaseNoteTransfer));
		}		
		catch (StaleObjectException e)
		{
			engine.close(DialogResult.ABORT);
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setADTPendingTransfer(null);
			form.getGlobalContext().Core.setPatientShort(null);
			return false;
		} 
		catch (DomainInterfaceException e)
		{
			engine.close(DialogResult.ABORT);
			engine.showMessage(e.getMessage());
			form.getGlobalContext().Core.setADTPendingTransfer(null);
			form.getGlobalContext().Core.setPatientShort(null);
			return false;
		}

		form.getGlobalContext().Core.setADTPendingTransfer(null);
		form.getGlobalContext().Core.setPatientShort(null);
		return true;
		
	}
	private PendingTransfersLiteVo populatePendingTransferDataFromScreen(PendingTransfersLiteVo selectedPendingTransfer)
	{
		if (selectedPendingTransfer == null)
			return null;
		selectedPendingTransfer.setPatientStatus(form.cmbPatientStatus().getValue());
		selectedPendingTransfer.setWardType(form.cmbWardType().getValue());
		selectedPendingTransfer.setService(form.qmbService().getValue());
		selectedPendingTransfer.setSpecialty(form.cmbSpecialty().getValue());
		selectedPendingTransfer.setTransferRequestDateTime(form.dtimTransferAccept().getValue());
		selectedPendingTransfer.setCurrentStatus(TransferStatus.TRANSFERRED);
		
		if (form.ccConsultant().getValue() instanceof MedicVo)
		{		
			selectedPendingTransfer.setConsultant((MedicVo)form.ccConsultant().getValue());
		}
		
		return selectedPendingTransfer;
	}
	private PatientCaseNoteTransferVo populatePatCaseNoteTransferFromScreen(PatientCaseNoteVo patientCaseNoteVo)
	{
		
		PatientCaseNoteTransferVo transfer =  new PatientCaseNoteTransferVo();
		
		transfer.setPatient(form.getGlobalContext().Core.getPatientShort());
		transfer.setCaseNote(patientCaseNoteVo);
		transfer.setTransferredFromLocation(patientCaseNoteVo.getCurrentLocation());
		transfer.setTransferredToLocation(form.getLocalContext().getSelectedPendingTransfer().getDestinationWard());
		
		Object mos = domain.getMosUser();
		if(mos != null)	
			transfer.setTransferredBy((MemberOfStaffLiteVo)mos);
		
		transfer.setTransferDate(new DateTime());
		
		PatientCaseNoteCommentSaveVo comment = new PatientCaseNoteCommentSaveVo();
			
		comment.setAuthoredBy((MemberOfStaffLiteVo)mos);
		comment.setAuthoredDate(new DateTime());
		comment.setCaseNote(patientCaseNoteVo);
			
		comment.setComment("Transfer Comment: Patient Casenotes transferred as part of Patient Transfer" );
		comment.setPatient(form.getGlobalContext().Core.getPatientShort());
		comment.setCaseNoteFolderLocation(form.getLocalContext().getSelectedPendingTransfer().getDestinationWard());
		
		transfer.setTansferComment(comment);
				
		return transfer;
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		serviceValueChanged();	
	}
	private void serviceValueChanged()
	{
		populateSpecialty(form.qmbService().getValue());
		form.ccConsultant().clear();
		reInitialiseConsultant(form.qmbService().getValue());
	}
	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateService(value);
		
	}
	private void populateService(String value)
	{
		form.qmbService().clear();
		//WDEV-22789
		form.cmbSpecialty().clear();
		form.ccConsultant().clear();
			
		ServiceLiteVoCollection services = domain.listServices(value);
		
		if (services == null)
		{	
			form.qmbService().showOpened();
			return;
		}		
		for (ServiceLiteVo service : services)
		{
			form.qmbService().newRow(service, service.getServiceName());
		}
		if (services.size() == 1)
		{	
			form.qmbService().setValue(services.get(0));
			serviceValueChanged();
		}
		else
		{
			form.qmbService().showOpened();
		}
	}
	private void reInitialiseConsultant(ServiceLiteVo value)
	{
		if (value == null)
		{	
			form.ccConsultant().initialize(MosType.MEDIC);
		}
		else
		{
			form.ccConsultant().initializeResponsibleHcp(MosType.MEDIC, null, value, null);
		}
	}
	private void populateSpecialty(ServiceLiteVo serviceLiteVo)
	{
		form.cmbSpecialty().clear();
		
		if (serviceLiteVo != null)
		{
			form.cmbSpecialty().newRow(serviceLiteVo.getSpecialty(), serviceLiteVo.getSpecialty().getText());
			form.cmbSpecialty().setValue(serviceLiteVo.getSpecialty());
		}		
	}
}
