//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.nextofkingpidentifierscc;



import java.util.ArrayList;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.nextofkingpidentifierscc.GenForm.Group1Enumeration;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.DemographicControlsConfigVo;
import ims.core.vo.DemographicControlsConfigVoCollection;
import ims.core.vo.NextOfKin;
import ims.core.vo.Patient;
import ims.core.vo.PatientContactPreferenceVo;
import ims.core.vo.PatientId;
import ims.core.vo.PersonAddress;
import ims.core.vo.enums.PatientDetailsTab;
import ims.core.vo.lookups.ChannelType;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import ims.framework.utils.Date;
import ims.utils.textile.Textile;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	//wdev-19528
	private static final String COMM_CHANNRLS_DEMOGR 			= "DEM22";
	private static final String NEXT_OF_KIN_NAME_DEMOGR 		= "DEM23";
	private static final String NEXT_OF_KIN_WORK_PHONE_DEMOGR 	= "DEM24";
	private static final String ALTERN_CONTACTS_DEMOGR 			= "DEM25";
	private static final String PREF_CONTACT_TIMES_DEMOGR 		= "DEM26";
	private static final String PREF_CONTACT_METHOD_DEMOGR 		= "DEM27";
	private static final String PREF_LANGUAGE_DEMOGR 			= "DEM28";
	private static final String COPY_LETTERS_DEMOGR 			= "DEM29";
	private static final String EFFECTIVE_FROM_DATE_DEMOGR 		= "DEM30";
	//--------------------------

	
	
	protected void onImbNOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setCommChannels(listCommChannels());
		form.getLocalContext().setPatientDetailsTabAction(PatientDetailsTab.NOKSTARTACTION);
		form.fireCustomControlValueChanged();
		
		
		
		
	}
	public String setNOK()
	{
		// TODO Auto-generated method stub
		return null;
	}

	
	public Patient getPatient()
	{
		
		return form.getLocalContext().getPatient();
	}
	private void populateScreenFromData(Patient pat)
	{
		if( pat == null )
			return;
		
		form.getLocalContext().setPatient(pat);
		
		form.imbNOK().setTooltip(getNokTooltip(pat));

		
		String szTelephone = "";

		CommChannelVoCollection voCommChannelColl = pat.getCommChannels();

		ims.core.forms.nextofkingpidentifierscc.GenForm.grdCommChannelsRow rowCommChannel;

		if (voCommChannelColl != null)
		{
			for (int i = 0; i < voCommChannelColl.size(); i++)
			{
				CommChannelVo voCommChannel = voCommChannelColl.get(i);

				if (voCommChannel.getChannelTypeIsNotNull())
				{
					rowCommChannel = form.grdCommChannels().getRows().newRow();
					rowCommChannel.setcolType(voCommChannel.getChannelType());
					rowCommChannel.setcolContactValue(voCommChannel.getCommValue());
					rowCommChannel.setValue(voCommChannel);
				}
			}

		}
		
//		//wdev-19232 //WDEV-19302 
//		if( ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue() == true )
//		{
//			boolean createMobilePhoneRow = true;
//			
//			if( voCommChannelColl != null)
//			{
//				for (int i = 0; i < voCommChannelColl.size(); i++)
//				{
//					CommChannelVo voCommChannel = voCommChannelColl.get(i);
//
//					if( voCommChannel.getChannelTypeIsNotNull() && voCommChannel.getChannelType().equals(ims.core.vo.lookups.ChannelType.MOBILE))
//					{
//						createMobilePhoneRow = false;
//					}
//					
//				}
//
//			}
//			
//			if (FormMode.VIEW.equals(form.getMode()) &&  (voCommChannelColl == null || voCommChannelColl.size() == 0))
//			{
//				createMobilePhoneRow = false;
//			}
//			
//			if( createMobilePhoneRow == true)
//			{
//				CommChannelVo temp = new CommChannelVo();
//				temp.setChannelType(ChannelType.MOBILE);
//				temp.setCommValue("Unknown");
//				rowCommChannel = form.grdCommChannels().getRows().newRow();
//				rowCommChannel.setcolType(temp.getChannelType());
//				rowCommChannel.setcolContactValue(temp.getCommValue());
//				rowCommChannel.setValue(temp);
//				
//			}
//			
//		}
//		//----------------------
		
		if (pat.getCommChannelsIsNotNull() && pat.getWorkPhoneNumber() != null)
		{
			szTelephone += "Work Telephone: ";
			szTelephone += pat.getWorkPhoneNumber().getCommValue();
		}

				
		form.cmbPreferedLanguage().setValue(pat.getPrefCommLanguage());
		//WDEV-15957
		form.dteEffectiveFromDate().setValue(pat.getCopyPatientOnCorrespondenceDate());
		if(pat.getCopyPatientOnCorrespondenceIsNotNull())
		{
			if(Boolean.TRUE.equals(pat.getCopyPatientOnCorrespondence()))
			{
				form.Group1().setValue(ims.core.forms.nextofkingpidentifierscc.GenForm.Group1Enumeration.rdoYes);				
			}
			else
			{
				form.Group1().setValue(ims.core.forms.nextofkingpidentifierscc.GenForm.Group1Enumeration.rdoNo);				
			}
		}
		PatientContactPreferenceVo tempPatContctVo  = pat.getAlternativeContact();   
		
		if( tempPatContctVo != null )
		{
			form.txtAlternativecontacts().setValue(tempPatContctVo.getContactName());
			form.cmbPreferredContactTimes().setValue(tempPatContctVo.getPreferredContactTimes());
			form.chkPatientcallbackconsentstatus().setValue(tempPatContctVo.getPatientCallBackConsent());
			form.cmbPreferredContactMethod().setValue(tempPatContctVo.getPreferredContactMethod());
		}
			
		
			
			
		

		
	}
	private String getNokTooltip(Patient pat)
	{
		if (pat == null || pat.getNok() == null)
		{
			if (form.getMode().equals(FormMode.EDIT))
				form.imbNOK().setVisible(true);
			else
				form.imbNOK().setVisible(false);
			return "No NOK Details";
		}

		StringBuffer sbNOKDetails = new StringBuffer();
		if (pat.getNok().getNameIsNotNull())
		{
			form.txtNOK().setValue(pat.getNok().getName().toString());
			sbNOKDetails.append(Textile.setBold("NOK DETAILS") + "\r" + Textile.setBold("NOK Name: ") + pat.getNok().getName().toString());
		}
		if (pat.getNok().getAddressIsNotNull())
		{
			sbNOKDetails.append("\n" + Textile.setBold("Address:"));
			if (pat.getNok().getAddress().getLine1IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine1());
			if (pat.getNok().getAddress().getLine2IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine2());
			if (pat.getNok().getAddress().getLine3IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine3());
			if (pat.getNok().getAddress().getLine4IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine4());
			if (pat.getNok().getAddress().getLine5IsNotNull())
				sbNOKDetails.append("\n" + pat.getNok().getAddress().getLine5());

			if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
			{
				if (pat.getNok().getAddress().getPostCodeIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("Post Code:  ") + pat.getNok().getAddress().getPostCode());
			}
			else if (ims.configuration.gen.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
			{
				if (pat.getNok().getAddress().getCountyIsNotNull())
					sbNOKDetails.append("\n" + Textile.setBold("County:  ") + pat.getNok().getAddress().getCounty());
			}

			if (pat.getNok().getAddress().getPhoneIsNotNull())
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Home): ") + pat.getNok().getAddress().getPhone());
			
		}
		
		//WDEV-15956
		if (pat.getNok().getCommChannelsIsNotNull())
		{
			if (pat.getNok().getWorkPhoneNumber() != null)
			{
				sbNOKDetails.append("\n" + Textile.setBold("Phone (Work): ") + pat.getNok().getWorkPhoneNumber().getCommValue());
				form.txtWorkPhone().setValue(pat.getNok().getWorkPhoneNumber().getCommValue());  //wdev-17883
			}

			if (pat.getNok().getMobile() != null)
				sbNOKDetails.append("\n" + Textile.setBold("Mobile:  ") + pat.getNok().getMobile().getCommValue());
		}
		
		if (pat.getNok().getRelationshipIsNotNull())
			sbNOKDetails.append("\n" + Textile.setBold("Relationship: ") + pat.getNok().getRelationship().getText());

		return new Textile().process(sbNOKDetails.toString());
	}


	
	

	
	public void setPKeyWhenTypeIsInactive(PatientId patid)
	{
		// TODO Auto-generated method stub
		
	}

	
	public Boolean validatePatientDetails(Boolean isNewPatient)
	{
		
		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			// WDEV-2496
			if (((form.grdCommChannels().getRows().get(i).getcolType() != null) && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() == 0)) || (form.grdCommChannels().getRows().get(i).getcolType() != null && form.grdCommChannels().getRows().get(i).getcolContactValue() == null) || (form.grdCommChannels().getRows().get(i).getcolType() == null && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() != 0)))
			{
				engine.showMessage("Please enter a valid Contact type and Value");
				return false;
			}
		}
		//wdev-19353 //WDEV-17705
		/*if( ConfigFlag.UI.SHOW_COPY_LETTERS_TO_PATIENT_CONTROL.getValue() == true )
		{
    		//WDEV-15957,//WDEV-17705
    		if( Group1Enumeration.rdoYes.equals(form.Group1().getValue()) && form.dteEffectiveFromDate().getValue() == null)
    		{
    			engine.showMessage("Effective from Date is mandatory if 'Copy Letters to Patient' is set to 'Yes'");
    			return false;
    		}
		}*/		
		return true;

	}

	
	public void clearScreen()
	{
		form.txtNOK().setValue(null);
		form.txtWorkPhone().setValue(null);
		
		form.grdCommChannels().getRows().clear();
		form.cmbPreferedLanguage().setValue(null);
		form.getLocalContext().setPKeyWhenTypeIsInactive(null);//13611
		
		form.txtAlternativecontacts().setValue(null);
		form.cmbPreferredContactTimes().setValue(null);
		form.chkPatientcallbackconsentstatus().setValue(null);
		form.cmbPreferredContactMethod().setValue(null);
		
	}

		
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		
		if( form.getMode().equals(FormMode.EDIT))
		{
			form.cmbPreferedLanguage().setEnabled(true);
			form.txtAlternativecontacts().setEnabled(true);
			form.cmbPreferredContactTimes().setEnabled(true);
			form.chkPatientcallbackconsentstatus().setEnabled(true);
			form.cmbPreferredContactMethod().setEnabled(true);
			form.imbNOK().setVisible(true);		//wdev-19472
			
		}
		else
		{
			form.cmbPreferedLanguage().setEnabled(false);
			form.txtAlternativecontacts().setEnabled(false);
			form.cmbPreferredContactTimes().setEnabled(false);
			form.chkPatientcallbackconsentstatus().setEnabled(false);
			form.cmbPreferredContactMethod().setEnabled(false);
			
		}
		form.getContextMenus().Core.getIdentifierGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		
		
		form.Group1().setEnabled(FormMode.EDIT.equals(form.getMode()));
		//form.dteEffectiveFromDate().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.dteEffectiveFromDate().setEnabled(FormMode.EDIT.equals(form.getMode()) && Group1Enumeration.rdoYes.equals(form.Group1().getValue())); //WDEV-17705
		
				
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		
		
		
	}
	
	
	
	
	

	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
				
		if (sender.equals(form.grdCommChannels()))
		{
			switch (menuItemID)
			{
				case ims.core.forms.nextofkingpidentifierscc.GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Add :
					ims.core.forms.nextofkingpidentifierscc.GenForm.grdCommChannelsRow rowComm = form.grdCommChannels().getRows().newRow();
					rowComm.setValue(new CommChannelVo());
					form.getLocalContext().setPatientDetailsTabAction(PatientDetailsTab.ADDMENU);
					form.fireCustomControlValueChanged();
					//form.getLocalContext().setbCommChannelsEdited(true);
				break;
				case ims.core.forms.nextofkingpidentifierscc.GenForm.ContextMenus.CoreNamespace.IdentifierGrid.Remove :
					removeCommChannel();
					setRemoveCommunicationMenuVisibility();
					form.getLocalContext().setPatientDetailsTabAction(PatientDetailsTab.REMOVEMENU);
					form.fireCustomControlValueChanged();
					//form.getLocalContext().setbCommChannelsEdited(true);
				break;
			}
		}
		
	}
	private void removeCommChannel()
	{
		int index = form.grdCommChannels().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select a Contact Type to remove");
			return;
		}
		form.grdCommChannels().getRows().remove(index);

	}
	private void setRemoveCommunicationMenuVisibility()
	{
		boolean bVisible = form.grdCommChannels().getSelectedRowIndex() != -1 && form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(bVisible);

	}
		
	public void showHideNOKbutton(Boolean showhide)
	{
		form.imbNOK().setVisible(showhide);
		
	}

	public PatientDetailsTab getAction()
	{
		return form.getLocalContext().getPatientDetailsTabAction();
	}

	
	public void nokButtonAction(PersonAddress address )
	{
		if( address != null)
			form.getGlobalContext().Core.setNOKPersonAddress(address);

		form.getGlobalContext().Core.setCommChannels(listCommChannels());
		
		engine.open(form.getForms().Core.NOKDetails);
		
	}

	
	public void setAction(PatientDetailsTab action)
	{
		form.getLocalContext().setPatientDetailsTabAction(action);
		
	}

		
	public void setvalue(Patient pat)
	{
		populateScreenFromData(pat);
	}
	
	protected void onGrdCommChannelsSelectionChanged() throws PresentationLogicException
	{
		setRemoveCommunicationMenuVisibility();
		
	}
	

	
	public void setValueGridCommChanel(CommChannelVo commChanelValue)
	{
		form.grdCommChannels().setValue(null);
		
	}
	private CommChannelVoCollection listCommChannels()
	{
		CommChannelVoCollection voCommChannelColl = new CommChannelVoCollection();
		ims.core.forms.nextofkingpidentifierscc.GenForm.grdCommChannelsRow rowComm;

		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			rowComm = form.grdCommChannels().getRows().get(i);
			CommChannelVo voCommChannel = rowComm.getValue();
			boolean existCommChannels = false;
			// WDEV-2496
			if (rowComm.getcolType() != null && (rowComm.getcolContactValue() != null && rowComm.getcolContactValue().trim().length() != 0))
			{
				voCommChannel.setChannelType(rowComm.getcolType());
				voCommChannel.setCommValue(rowComm.getcolContactValue());

				for (int k = 0; k < voCommChannelColl.size(); k++)
				{
					if (voCommChannelColl.get(k).getChannelType().equals(rowComm.getcolType()) && voCommChannelColl.get(k).getCommValue().equals(rowComm.getcolContactValue()))
					{
						existCommChannels = true;
						break;
					}
				}

				if (!existCommChannels)
					voCommChannelColl.add(voCommChannel);
			}
		}
		
		//WDEV-19302 
		if( ConfigFlag.UI.SVUH_MANDATORY_DEMOGRAPHIC_ATTRIBUTES.getValue() == true )
		{		
			boolean createMobilePhoneRow = true;
			if( voCommChannelColl != null)
			{
				for (int i = 0; i < voCommChannelColl.size(); i++)
				{
					CommChannelVo voCommChannel = voCommChannelColl.get(i);

					if( voCommChannel.getChannelTypeIsNotNull() && voCommChannel.getChannelType().equals(ims.core.vo.lookups.ChannelType.MOBILE))
					{
						createMobilePhoneRow = false;
					}					
				}

			}
						
			if( createMobilePhoneRow == true)
			{
				ims.core.forms.nextofkingpidentifierscc.GenForm.grdCommChannelsRow rowCommChannel;
				CommChannelVo temp = new CommChannelVo();
				temp.setChannelType(ChannelType.MOBILE);
				temp.setCommValue("Unknown");
				rowCommChannel = form.grdCommChannels().getRows().newRow();
				rowCommChannel.setcolType(temp.getChannelType());
				rowCommChannel.setcolContactValue(temp.getCommValue());
				rowCommChannel.setValue(temp);
				
				voCommChannelColl.add(temp);
			}
			
		}
		//----------------------
		
		return voCommChannelColl;

	}

	
	
	
	public CommChannelVoCollection getListCommChanells()
	{
		
		return listCommChannels();
	}


	public void showHidePreferredLanguageControls(Boolean showhide)
	{
		form.lblPreferredLanguage().setVisible(showhide);
		form.cmbPreferedLanguage().setVisible(showhide);
		
	}

	
	public void showHideCopyLettersToPatientControls(Boolean showhide)
	{
		form.lblCopyLettersToPatient().setVisible(showhide);
		form.Group1().setVisible(ims.core.forms.nextofkingpidentifierscc.GenForm.Group1Enumeration.rdoYes, showhide);
		form.Group1().setVisible(ims.core.forms.nextofkingpidentifierscc.GenForm.Group1Enumeration.rdoNo, showhide);
		form.lblEffectiveFromDate().setVisible(showhide);
		form.dteEffectiveFromDate().setVisible(showhide);
		
		
	}


	
	public Patient getPrefCommLanguageAndCopyPatientOnCor(Patient pat)
	{
		if( pat != null)
		{
			pat.setPrefCommLanguage(form.cmbPreferedLanguage().getValue());
			//WDEV-15957
			if(Group1Enumeration.rdoYes.equals(form.Group1().getValue()))
				pat.setCopyPatientOnCorrespondence(Boolean.TRUE);
			else if(Group1Enumeration.rdoNo.equals(form.Group1().getValue()))
				pat.setCopyPatientOnCorrespondence(Boolean.FALSE);
			else
				pat.setCopyPatientOnCorrespondence(null);
			
			if(pat.getCopyPatientOnCorrespondenceIsNotNull())
				pat.setCopyPatientOnCorrespondenceDate(form.dteEffectiveFromDate().getValue());
			else
				pat.setCopyPatientOnCorrespondenceDate(null);
		}
		
		return pat;
	}


	
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException
	{
		//WDEV-15957
		if( Group1Enumeration.rdoYes.equals(form.Group1().getValue()) && form.dteEffectiveFromDate().getValue() == null)
		{
			form.dteEffectiveFromDate().setValue(new Date());			
		}
		else
		{
			form.dteEffectiveFromDate().setValue(null);			
		}
		form.dteEffectiveFromDate().setEnabled(FormMode.EDIT.equals(form.getMode()) && Group1Enumeration.rdoYes.equals(form.Group1().getValue())); //WDEV-17705
		
	}

	public void showHideIdentifierGridRemoveItem(Boolean showHide)
	{
		form.getContextMenus().Core.getIdentifierGridRemoveItem().setVisible(showHide);
		
	}


	public PatientContactPreferenceVo getPatientContactPreference()
	{
		
		PatientContactPreferenceVo tempPatContctVo = form.getLocalContext().getPatientIsNotNull() ? form.getLocalContext().getPatient().getAlternativeContact():null;
		
		if( tempPatContctVo == null )
			tempPatContctVo = new PatientContactPreferenceVo();
		
		tempPatContctVo.setContactName(form.txtAlternativecontacts().getValue());
		tempPatContctVo.setPreferredContactTimes(form.cmbPreferredContactTimes().getValue());
		tempPatContctVo.setPatientCallBackConsent(form.chkPatientcallbackconsentstatus().getValue());
		tempPatContctVo.setPreferredContactMethod(form.cmbPreferredContactMethod().getValue());
		
		return tempPatContctVo;
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		
		if( FormMode.EDIT.equals(form.getMode()) && formName.equals(form.getForms().Core.NOKDetails) && result.equals(DialogResult.OK))
		{
			NextOfKin nok = form.getGlobalContext().Core.getNOKDetails();
			if (nok == null)
				form.txtNOK().setValue(null);
			else if (nok.getNameIsNotNull()) //WDEV-14004
				form.txtNOK().setValue(nok.getName().toShortForm());
			Patient patient = form.getLocalContext().getPatient();
			if (patient == null)
				patient = new Patient();
			patient.setNok(nok);
			form.imbNOK().setTooltip(getNokTooltip(patient));
			form.getLocalContext().setPatient(patient);
			form.getLocalContext().setPatientDetailsTabAction(PatientDetailsTab.NOKBUTTON);
			form.fireCustomControlValueChanged();
		}
			
		

		
	}
	//wdev-19528
	public void setConfigurableFields(DemographicControlsConfigVoCollection collfields)
	{
		if( collfields == null || collfields.size() == 0)
			return;
		
		for(int i = 0; i < collfields.size(); i++ )
		{
			DemographicControlsConfigVo tempVo = collfields.get(i); 
			if( tempVo != null )
			{
				if( COMM_CHANNRLS_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.getLocalContext().setIsGridCommChannelsMandatory(tempVo.getIsMandatory());
					form.getLocalContext().setDemographicControlsConfig(tempVo);
				}
				else if( NEXT_OF_KIN_NAME_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtNOK().setRequired(tempVo.getIsMandatory());
				}
				else if( NEXT_OF_KIN_WORK_PHONE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtWorkPhone().setRequired(tempVo.getIsMandatory());
				}
				else if( ALTERN_CONTACTS_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtAlternativecontacts().setRequired(tempVo.getIsMandatory());
				}
				else if( PREF_CONTACT_TIMES_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbPreferredContactTimes().setRequired(tempVo.getIsMandatory());
				}
				else if( PREF_CONTACT_METHOD_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbPreferredContactMethod().setRequired(tempVo.getIsMandatory());
				}
				else if( PREF_LANGUAGE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.cmbPreferedLanguage().setRequired(tempVo.getIsMandatory());
				}
				else if( COPY_LETTERS_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.txtCopyLettersToPatient().setRequired(tempVo.getIsMandatory());
				}
				else if( EFFECTIVE_FROM_DATE_DEMOGR.equals(tempVo.getControlIMSID()))
				{
					form.dteEffectiveFromDate().setRequired(tempVo.getIsMandatory());
				}
				
			}
		}
		
	}
	//wdev-19528
	public String[] getUIErrorsForConfigurableMode()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		
		if( Boolean.TRUE.equals(form.getLocalContext().getIsGridCommChannelsMandatory() ) )
		{
			boolean ismandatory = true;
			for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
			{
				
				if( ((form.grdCommChannels().getRows().get(i).getcolType() != null) && form.getLocalContext().getDemographicControlsConfigIsNotNull() && form.grdCommChannels().getRows().get(i).getcolType().equals(form.getLocalContext().getDemographicControlsConfig().getChannelType())) )
				{
					ismandatory = false;
				}
			}
			
			if( ismandatory == true )
			{
				if( form.getLocalContext().getDemographicControlsConfigIsNotNull() && form.getLocalContext().getDemographicControlsConfig().getChannelTypeIsNotNull())
					errors.add(form.getLocalContext().getDemographicControlsConfig().getChannelType().getIItemText() + "is mandatory");
				else
					errors.add("Please enter a valid Contact type and Value");
				
			}
			
		}
		
		for (int i = 0; i < form.grdCommChannels().getRows().size(); i++)
		{
			// WDEV-2496
			if (((form.grdCommChannels().getRows().get(i).getcolType() != null) && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() == 0)) || (form.grdCommChannels().getRows().get(i).getcolType() != null && form.grdCommChannels().getRows().get(i).getcolContactValue() == null) || (form.grdCommChannels().getRows().get(i).getcolType() == null && (form.grdCommChannels().getRows().get(i).getcolContactValue() != null && form.grdCommChannels().getRows().get(i).getcolContactValue().trim().length() != 0)))
			{
				errors.add("Please enter a valid Contact type and Value");
				
			}
		}

		if( form.txtNOK().isVisible() && form.txtNOK().isRequired() && (form.txtNOK().getValue() == null || form.txtNOK().getValue() == ""))
		{
			errors.add("Next Of Kin Name is mandatory.");
		}
		if( form.txtWorkPhone().isVisible() && form.txtWorkPhone().isRequired() && (form.txtWorkPhone().getValue() == null || form.txtWorkPhone().getValue() == ""))
		{
			errors.add("Next Of Kin Work Phone is mandatory.");
		}
		if( form.txtAlternativecontacts().isVisible() && form.txtAlternativecontacts().isRequired() && (form.txtAlternativecontacts().getValue() == null || form.txtAlternativecontacts().getValue() == ""))
		{
			errors.add("Alternative Contacts is mandatory.");
		}
		if( form.cmbPreferredContactTimes().getVisible() && form.cmbPreferredContactTimes().isRequired() && form.cmbPreferredContactTimes().getValue() == null)
		{
			errors.add("Preferred Contact Times is mandatory.");
		}
		if( form.cmbPreferredContactMethod().getVisible() && form.cmbPreferredContactMethod().isRequired() && form.cmbPreferredContactMethod().getValue() == null)
		{
			errors.add("Preferred Contact Method is mandatory.");
		}
		if( form.cmbPreferedLanguage().getVisible() && form.cmbPreferedLanguage().isRequired() && form.cmbPreferedLanguage().getValue() == null)
		{
			errors.add("Preferred Language is mandatory.");
		}
		if( form.txtCopyLettersToPatient().isVisible() && form.txtCopyLettersToPatient().isRequired() && Group1Enumeration.None.equals(form.Group1().getValue()))
		{
			errors.add("Copy Letters to Patient is mandatory.");
		}
		if( form.dteEffectiveFromDate().isVisible() && form.dteEffectiveFromDate().isRequired() && form.dteEffectiveFromDate().isEnabled() && form.dteEffectiveFromDate().getValue() == null )
		{
			errors.add("Effective from Date is mandatory.");
		}
		
		
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	






	
	


	


	


	


	


	
	


	

	

	
}
