//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.uploaddocumentdialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
		RefMan = new RefManContext(context);
		OCRR = new OCRRContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getUploadDocumentActionIsNotNull()
		{
			return !cx_CoreUploadDocumentAction.getValueIsNull(context);
		}
		public ims.core.vo.enums.UploadDocumentAction getUploadDocumentAction()
		{
			return (ims.core.vo.enums.UploadDocumentAction)cx_CoreUploadDocumentAction.getValue(context);
		}
		public void setUploadDocumentAction(ims.core.vo.enums.UploadDocumentAction value)
		{
			cx_CoreUploadDocumentAction.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreUploadDocumentAction = new ims.framework.ContextVariable("Core.UploadDocumentAction", "_cv_Core.UploadDocumentAction");
		public boolean getEpisodeofCareShortIsNotNull()
		{
			return !cx_CoreEpisodeofCareShort.getValueIsNull(context);
		}
		public ims.core.vo.EpisodeofCareShortVo getEpisodeofCareShort()
		{
			return (ims.core.vo.EpisodeofCareShortVo)cx_CoreEpisodeofCareShort.getValue(context);
		}
		public void setEpisodeofCareShort(ims.core.vo.EpisodeofCareShortVo value)
		{
			cx_CoreEpisodeofCareShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreEpisodeofCareShort = new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}
		public void setCurrentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cx_CoreCurrentClinicalContact.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getPatientDocumentIsNotNull()
		{
			return !cx_CorePatientDocument.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVo getPatientDocument()
		{
			return (ims.core.vo.PatientDocumentVo)cx_CorePatientDocument.getValue(context);
		}
		public void setPatientDocument(ims.core.vo.PatientDocumentVo value)
		{
			cx_CorePatientDocument.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientDocument = new ims.framework.ContextVariable("Core.PatientDocument", "_cv_Core.PatientDocument");
		public boolean getPatientDocumentsCollectionForClinicalReferralIsNotNull()
		{
			return !cx_CorePatientDocumentsCollectionForClinicalReferral.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVoCollection getPatientDocumentsCollectionForClinicalReferral()
		{
			return (ims.core.vo.PatientDocumentVoCollection)cx_CorePatientDocumentsCollectionForClinicalReferral.getValue(context);
		}
		public void setPatientDocumentsCollectionForClinicalReferral(ims.core.vo.PatientDocumentVoCollection value)
		{
			cx_CorePatientDocumentsCollectionForClinicalReferral.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientDocumentsCollectionForClinicalReferral = new ims.framework.ContextVariable("Core.PatientDocumentsCollectionForClinicalReferral", "_cv_Core.PatientDocumentsCollectionForClinicalReferral");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");

		private ims.framework.Context context;
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getUploadDocumentsDialogDocumentTypeIsNotNull()
		{
			return !cx_RefManUploadDocumentsDialogDocumentType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.DocumentCategory getUploadDocumentsDialogDocumentType()
		{
			return (ims.core.vo.lookups.DocumentCategory)cx_RefManUploadDocumentsDialogDocumentType.getValue(context);
		}
		public void setUploadDocumentsDialogDocumentType(ims.core.vo.lookups.DocumentCategory value)
		{
			cx_RefManUploadDocumentsDialogDocumentType.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManUploadDocumentsDialogDocumentType = new ims.framework.ContextVariable("RefMan.UploadDocumentsDialogDocumentType", "_cv_RefMan.UploadDocumentsDialogDocumentType");
		public boolean getCatsReferralIsNotNull()
		{
			return !cx_RefManCatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cx_RefManCatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
		{
			cx_RefManCatsReferral.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManCatsReferral = new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral");
		public boolean getCatsReferralWizardIsNotNull()
		{
			return !cx_RefManCatsReferralWizard.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralWizardVo getCatsReferralWizard()
		{
			return (ims.RefMan.vo.CatsReferralWizardVo)cx_RefManCatsReferralWizard.getValue(context);
		}
		public void setCatsReferralWizard(ims.RefMan.vo.CatsReferralWizardVo value)
		{
			cx_RefManCatsReferralWizard.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManCatsReferralWizard = new ims.framework.ContextVariable("RefMan.CatsReferralWizard", "_cv_RefMan.CatsReferralWizard");
		public boolean getCatsReferralHasGpLetterIsNotNull()
		{
			return !cx_RefManCatsReferralHasGpLetter.getValueIsNull(context);
		}
		public Boolean getCatsReferralHasGpLetter()
		{
			return (Boolean)cx_RefManCatsReferralHasGpLetter.getValue(context);
		}
		public void setCatsReferralHasGpLetter(Boolean value)
		{
			cx_RefManCatsReferralHasGpLetter.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManCatsReferralHasGpLetter = new ims.framework.ContextVariable("RefMan.CatsReferralHasGpLetter", "_cv_RefMan.CatsReferralHasGpLetter");

		private ims.framework.Context context;
	}
	public final class OCRRContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private OCRRContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getClinicalResultDetailsExaminDateTimeIsNotNull()
		{
			return !cx_OCRRClinicalResultDetailsExaminDateTime.getValueIsNull(context);
		}
		public ims.framework.utils.DateTime getClinicalResultDetailsExaminDateTime()
		{
			return (ims.framework.utils.DateTime)cx_OCRRClinicalResultDetailsExaminDateTime.getValue(context);
		}
		public void setClinicalResultDetailsExaminDateTime(ims.framework.utils.DateTime value)
		{
			cx_OCRRClinicalResultDetailsExaminDateTime.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRClinicalResultDetailsExaminDateTime = new ims.framework.ContextVariable("OCRR.ClinicalResultDetailsExaminDateTime", "_cv_OCRR.ClinicalResultDetailsExaminDateTime");
		public boolean getDisplayExaminDateTimeIsNotNull()
		{
			return !cx_OCRRDisplayExaminDateTime.getValueIsNull(context);
		}
		public Boolean getDisplayExaminDateTime()
		{
			return (Boolean)cx_OCRRDisplayExaminDateTime.getValue(context);
		}
		public void setDisplayExaminDateTime(Boolean value)
		{
			cx_OCRRDisplayExaminDateTime.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_OCRRDisplayExaminDateTime = new ims.framework.ContextVariable("OCRR.DisplayExaminDateTime", "_cv_OCRR.DisplayExaminDateTime");

		private ims.framework.Context context;
	}

	public CoreContext Core;
	public RefManContext RefMan;
	public OCRRContext OCRR;
}
