//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5540.19885)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.othernamesdialog;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import ims.core.forms.othernamesdialog.GenForm.grdNamesRow;
import ims.core.helper.PdsQuery;
import ims.core.vo.PersonName;
import ims.core.vo.PersonNameCollection;
import ims.core.vo.lookups.NameType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open(args);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(populateDataFromScreen())
		{
			PersonName name = form.getLocalContext().getAddedItem();
			
			if(name != null)
			{
				//newly added
				if(form.getGlobalContext().Core.getOtherNames() == null)
					form.getGlobalContext().Core.setOtherNames(new PersonNameCollection());
					
				form.getGlobalContext().Core.getOtherNames().add(name);
				
				addGridRow(name);
			}
			else
			{
				name = form.getLocalContext().getEditedItem();
				
				//edited
				grdNamesRow row = form.grdNames().getSelectedRow();
				row.setcolSurname(name.getSurname());
				row.setcolForename(name.getForename());
				row.setcolNameType(name.getNameType());
			}
			
			form.setMode(FormMode.VIEW);
			form.grdNames().setValue(name);
		}
		
		updateControlsStatus();
	}
	private boolean populateDataFromScreen()
	{
		if(!validateData())
			return false;

		PersonName name = form.getLocalContext().getAddedItem();
		
		if(name == null)
		{
			name = form.getLocalContext().getEditedItem();
		}

		name.setSurname(form.ctnDetails().txtSurname().getValue());
		name.setForename(form.ctnDetails().txtForename().getValue());
		name.setNameType(form.ctnDetails().cmbType().getValue());
		
		return true;
	}
	
	//WDEV-21991
	private boolean checkConsecutiveSpace(String string) 
	{
		if (string==null)
			return false;

		Pattern pattern = Pattern.compile("\\p{javaWhitespace}{2,}");
		Matcher m = pattern.matcher(string);
		if (m.find())
			return true;
		
		if (Character.isWhitespace(string.charAt(0)) || Character.isWhitespace(string.charAt(string.length() - 1))) {
	        return true;
	    }
		
		return false;
	}
	//WDEV-21991

	private boolean validateData()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if(form.ctnDetails().txtSurname().getValue() == null || form.ctnDetails().txtSurname().getValue().length() == 0)
			errors.add("Surname is mandatory.");
		if(form.ctnDetails().txtForename().getValue() == null || form.ctnDetails().txtForename().getValue().length() == 0)
			errors.add("Forename is mandatory.");
		if(form.ctnDetails().cmbType().getValue() == null)
			errors.add("Name type is mandatory.");
		
		//WDEV-21991
		if (checkConsecutiveSpace(form.ctnDetails().txtSurname().getValue()))
				errors.add("Please remove consecutive and or leading/trailing spaces in Surname");

		if (checkConsecutiveSpace(form.ctnDetails().txtForename().getValue()))
			errors.add("Please remove consecutive and or leading/trailing spaces in Forename");
		//WDEV-21991

		//WDEV-22149, WDEV-22147
		if(form.ctnDetails().cmbType().getValue() != null)
		{
			PdsQuery query = new PdsQuery(null);
			HashMap<NameType, Integer> map = new HashMap<NameType, Integer>();
			
			PersonNameCollection coll = new PersonNameCollection();
			PersonName name = form.getLocalContext().getAddedItem();

			NameType nt = query.getNameTypeByPdsMapping("PREFERRED");
			if(nt != null)
				map.put(nt, 0);
			nt = query.getNameTypeByPdsMapping("L");
			if(nt != null)
				map.put(nt, 0);
			
			NameType useL = nt;
			
			if(form.getGlobalContext().Core.getOtherNames() != null)
			{
    			for(PersonName pn : form.getGlobalContext().Core.getOtherNames())
    			{
    				//don't check names that have object identifiers and type has use="L"
    				if(useL == null || !useL.equals(pn.getNameType()) || pn.getObjectidentifier() == null)
    					coll.add(pn);
    			}
			}
		
    		if(name != null)
    		{
    			//newly added
    			name = (PersonName)name.clone(); //WDEV-23132
    			coll.add(name);
    		}
    		else
    		{
    			name = (PersonName)form.getLocalContext().getEditedItem().clone(); //WDEV-23132
    		}
    		
			name.setSurname(form.ctnDetails().txtSurname().getValue());
			name.setForename(form.ctnDetails().txtForename().getValue());
			name.setNameType(form.ctnDetails().cmbType().getValue());

			//the main patient name should be a lookup with PDS mapping = "L", this is how it is retrieved from PDS
			if(form.getGlobalContext().Core.getPatientShort() != null)
			{
				PersonName pnCloned = (PersonName) form.getGlobalContext().Core.getPatientShort().getName().clone();
    			if(pnCloned.getNameType() == null)
    				pnCloned.setNameType(query.getNameTypeByPdsMapping("L")); 
    			coll.add(pnCloned);
			}
			
			int count;
			for(PersonName pn : coll)
			{
				if(map.containsKey(pn.getNameType()))
				{
					count = map.get(pn.getNameType()) + 1;
					map.put(pn.getNameType(), count);
				}
			}
			
			for(NameType nt1 : map.keySet())
			{
				count = map.get(nt1);
				
				if(count > 1)
					errors.add("The patient cannot have more than one Name of type '" + nt1.getText() + "' !");
			}
		}
			
		if(errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			engine.showErrors(UIErrors);
			return false;
		}
			
		return true;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PersonName selectedName = form.grdNames().getValue();
		
		open(null);
		form.setMode(FormMode.VIEW);
		
		if(selectedName != null)
		{
			form.grdNames().setValue(selectedName);
			onGrdNamesSelectionChanged();
		}
	}
	
	private void open(Object[] args)
	{
		form.grdNames().getRows().clear();
		
		//if(form.getGlobalContext().Core.getOtherNames() == null)
		//	return;
		
		populateScreenFromData(args, form.getGlobalContext().Core.getOtherNames());
		updateControlsStatus();
	}

	private void populateScreenFromData(Object[] args, PersonNameCollection names)
	{
		if(names != null)
		{
    		for(int i = 0; i < names.size(); i++)
    		{
    			PersonName name = names.get(i);
    			
    			addGridRow(name);
    		}
		}
		
		if(args != null && args.length > 0)
		{
			if(args.length > 1 && args[1] instanceof Boolean)
			{
				form.getLocalContext().setCanAddOrEdit((Boolean) args[1]);
			}

			if(args[0] instanceof FormMode)
			{
				form.setMode((FormMode) args[0]);
			}
		}
	}
	private void addGridRow(PersonName name)
	{
		grdNamesRow row = form.grdNames().getRows().newRow();
		
		row.setcolSurname(name.getSurname());
		row.setcolForename(name.getForename());
		row.setcolNameType(name.getNameType());
		
		row.setValue(name);
	}
	private void initialize()
	{
		form.ctnDetails().setCollapsed(true);
	}
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.getLocalContext().setAddedItem(null);
		form.getLocalContext().setEditedItem(form.grdNames().getValue());
		
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.getLocalContext().setAddedItem(new PersonName());
		form.getLocalContext().setEditedItem(null);
		
		clearInputControls();
		form.setMode(FormMode.EDIT);
		form.ctnDetails().cmbType().setEnabled(true);
	}
	private void clearInputControls()
	{
		form.ctnDetails().txtSurname().setValue(null);
		form.ctnDetails().txtForename().setValue(null);
		form.ctnDetails().cmbType().setValue(null);
	}
	@Override
	protected void onGrdNamesSelectionChanged() throws PresentationLogicException
	{
		PersonName name = form.grdNames().getValue();
		displayDetails(name);
		
		updateControlsStatus();
	}
	private void displayDetails(PersonName name)
	{
		if(name == null)
			return;

		form.ctnDetails().txtSurname().setValue(name.getSurname());
		form.ctnDetails().txtForename().setValue(name.getForename());
		form.ctnDetails().cmbType().setValue(name.getNameType());
	}
	@Override
	protected void onFormModeChanged()
	{
		updateControlsStatus();
	}

	private void updateControlsStatus()
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			boolean canAddOrEdit = form.getLocalContext().getCanAddOrEdit() != null ? form.getLocalContext().getCanAddOrEdit() : false;
			form.btnNew().setVisible(canAddOrEdit);
			form.btnEdit().setVisible(canAddOrEdit && form.grdNames().getSelectedRow() != null);
			form.btnClose().setVisible(true);
		}
		else
		{
			if(form.grdNames().getSelectedRow() != null)
			{
				PersonName pn = form.grdNames().getSelectedRow().getValue();
				
				if(pn != null)
					form.ctnDetails().cmbType().setEnabled(pn.getObjectidentifier() == null);
				
				if(form.getLocalContext().getAddedItem() != null)
					form.ctnDetails().cmbType().setEnabled(true);
			}
		}
	}
}
