//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.36 build 2109.20214)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.clinicalnoting;

import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNotesAdditionalVo;
import ims.core.vo.ClinicalNotesShortVo;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.core.vo.lookups.ClinicalNotesStatusCollection;
import ims.core.vo.lookups.ClinicalNotingMode;
import ims.core.vo.lookups.ClinicalNoteType;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.TimeFormat;

public class Logic extends BaseLogic
{
	// Protected methods
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		if (engine.getFormName().equals(form.getForms().Core.ClinicalContactNoting))
		{
			form.getLocalContext().setClinicalContactForm(Boolean.TRUE);
			loadStatusCombo();
		}
		else
		{
			form.getLocalContext().setClinicalContactForm(Boolean.FALSE);
		}
	}
	protected void onBtnCancelNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getClinicalContactForm().booleanValue())
		{
			open();
			return;
		}
		openCallingScreen(DialogResult.CANCEL);
	}

	protected void onBtnSaveNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		saveClinicalNotes();
	}

	protected void onBtnCancelValidateClick()
	{
		if(engine.isDialog())
			openCallingScreen(DialogResult.CANCEL);
		open();
	}

	protected void onBtnSaveValidateClick()
	{
		saveClinicalNotes();
	}

	protected void onBtnCancelCorrectionClick()
	{
		openCallingScreen(DialogResult.CANCEL);
	}

	protected void onBtnSaveCorrectionClick()
	{
		saveClinicalNotes();
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		clearScreen();
		displayClinicalInfo();
		displayCreationInfo();
	}

	private void clearScreen()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.richTextNew().setValue(null);
	}

	private void saveClinicalNotes()
	{
		ClinicalNotesVo voClinicalNotes = form.getLocalContext().getClinicalNotes();
		voClinicalNotes = populateDataFromSreen(voClinicalNotes);
		ClinicalNotesAdditionalVo voAdditional = getVoAdditional(voClinicalNotes);
		if (voClinicalNotes == null)
			voClinicalNotes = new ClinicalNotesVo();

		String errors[] = voClinicalNotes.validate(validateUIRules());
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		errors = voAdditional.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		try
		{
			voClinicalNotes = domain.saveClinicalNotes(voClinicalNotes, voAdditional);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		} catch (UniqueKeyViolationException e) {
			engine.showMessage(e.getMessage());
		}
		if (form.getLocalContext().getClinicalContactForm().booleanValue())
		{
			open();
			return;
		}
	
		form.getGlobalContext().Core.setClinicalNotesShort(domain.getClinicalNotesShort(voClinicalNotes.getID_ClinicalNotes()));
	
		if(engine.isDialog())
			openCallingScreen(DialogResult.OK);
		open();
	}

	private String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();

		if (isModeNew())
		{
			if (form.customControlAuthoringInfo().getValue() == null || (form.customControlAuthoringInfo().getValue().getAuthoringDateTime() == null || form.customControlAuthoringInfo().getValue().getAuthoringHcp() == null))
			{
				listOfErrors.add("Please select the Authoring Date and Time and Hcp");
			}
		}
		
		if (form.richTextNew().getValue() == null)
		{
			listOfErrors.add("Please enter some notes");
		}
		int errorCount = listOfErrors.size();
		if (errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		return result;
	}

	private ClinicalNotesAdditionalVo getVoAdditional(ClinicalNotesVo voClinicalNotes)
	{
		ClinicalNotesAdditionalVo voClinNoteAdditional = getNotesAdditional(voClinicalNotes);
		return voClinNoteAdditional;
	}

	private ClinicalNotesAdditionalVo getNotesAdditional(ClinicalNotesVo voClinicalNotes)
	{
		ClinicalNotesAdditionalVo voAdditional = null;
		if (voClinicalNotes != null && voClinicalNotes.getID_ClinicalNotesIsNotNull())
			voAdditional = domain.getClinicalNotesAdditional(voClinicalNotes.getID_ClinicalNotes());

		return voAdditional != null ? voAdditional : new ClinicalNotesAdditionalVo();
	}

	private ClinicalNotingMode getScreenMode()
	{
		if (form.getLocalContext().getClinicalContactForm().booleanValue())
		{
			if (form.getLocalContext().getClinicalNotesIsNotNull())
				return ClinicalNotingMode.UPDATE;
			else
				return ClinicalNotingMode.NEW;
		}

		return form.getGlobalContext().Core.getClinicalNotingMode();
	}

	private void displayClinicalInfo()
	{
		if (form.getLocalContext().getClinicalContactForm().booleanValue())
		{
			ClinicalNotesVo voClinicalNotes = domain.getClinicalContactNote(form.getGlobalContext().Core.getCurrentClinicalContact());

			form.getLocalContext().setClinicalNotes(voClinicalNotes);

			form.setcustomControlAuthoringInfoEnabled(false);
			
			form.cmbStatus().setEnabled(false);
			form.richTextNew().setEnabled(false);
			form.btnSaveNew().setVisible(false);
			form.btnCancelNew().setVisible(false);

			if (voClinicalNotes != null)
			{
				form.setcustomControlAuthoringInfoEnabled(false);
				if (voClinicalNotes.getAuthoringInfoIsNotNull())
					form.customControlAuthoringInfo().setValue(voClinicalNotes.getAuthoringInfo());

				form.richTextNew().setValue(voClinicalNotes.getClinicalNote());
				form.cmbStatus().setValue(getStatus(voClinicalNotes));

				if(isViewMode())
				{
					boolean isMine = voClinicalNotes.getAuthoringInfoIsNotNull() && voClinicalNotes.getAuthoringInfo().getAuthoringHcpIsNotNull() 
					&& voClinicalNotes.getAuthoringInfo().getAuthoringHcp().equals(domain.getHcpLiteUser());
					form.btnNew().setVisible(false);
					form.btnUpdate().setVisible(isMine);
				}
			}
			else
			{
				if(isViewMode())
				{
					
					form.btnNew().setVisible(true);
					form.btnUpdate().setVisible(false);
				}
			}
			return;
		}

		ClinicalNotesShortVo voClinNotesShort = form.getGlobalContext().Core.getClinicalNotesShort();
		if (voClinNotesShort != null)
		{
			ClinicalNotesVo voClinicalNotes;
			if (voClinNotesShort.getID_ClinicalNotesIsNotNull())
				voClinicalNotes = domain.getClinicalNotes(voClinNotesShort.getID_ClinicalNotes());
			else
				voClinicalNotes = new ClinicalNotesVo();

			form.getLocalContext().setClinicalNotes(voClinicalNotes);

			ClinicalNotingMode mode = getScreenMode();
			if (mode != null)
			{
				if (mode.equals(ClinicalNotingMode.NEW) || mode.equals(ClinicalNotingMode.UPDATE))
				{
					form.setMode(FormMode.EDIT);
					if (voClinicalNotes.getID_ClinicalNotes() == null)
						form.customControlAuthoringInfo().initializeComponent();
					else
					{
						form.setcustomControlAuthoringInfoEnabled(false);
						form.customControlAuthoringInfo().setValue(voClinicalNotes.getAuthoringInfo());
						form.richTextNew().setValue(voClinicalNotes.getClinicalNote());
						form.cmbStatus().setValue(getStatus(voClinicalNotes));
					}
				}
			}
		}
	}

	//WDEV-2380
	private ClinicalNotesStatus getStatus(ClinicalNotesVo voClinicalNotes)
	{
		if(voClinicalNotes == null)
			return null;
		
		if(voClinicalNotes.getCurrentStatusIsNotNull())
			return voClinicalNotes.getCurrentStatus().getStatus();
		
		return null;
	}

	private boolean isViewMode()
	{
		return form.getMode().equals(FormMode.VIEW);
	}

	private void displayCreationInfo()
	{
		ClinicalNotesVo voClinicalNotes = form.getLocalContext().getClinicalNotes();
		StringBuffer notes = new StringBuffer();
		if (voClinicalNotes != null && voClinicalNotes.getID_ClinicalNotesIsNotNull())
		{
			notes.append("Creation:          ");
			notes.append("Recording User:    ");
			notes.append(voClinicalNotes.getSystemInfoIsNotNull() ? voClinicalNotes.getSystemInfo().getCreationUser() : "");
			notes.append(";    ");
			DateTime recDateTime =  voClinicalNotes.getSystemInfo().getCreationDateTime();
			if(recDateTime != null)
			{
				notes.append("Recording Date:   ");
				notes.append(recDateTime.getDate().toString(DateFormat.STANDARD));
				notes.append(";    ");
				notes.append("Recording Time:   ");
				notes.append(recDateTime.getTime().toString(TimeFormat.DEFAULT));
				notes.append(";    ");
			}
		}
	}

	private ClinicalNotesVo populateDataFromSreen(ClinicalNotesVo voClinicalNotes)
	{
		if (voClinicalNotes == null)
			voClinicalNotes = new ClinicalNotesVo();

		ClinicalNotingMode mode = getScreenMode();
		if (mode != null)
		{
			if (mode.equals(ClinicalNotingMode.NEW) || mode.equals(ClinicalNotingMode.UPDATE))
			{
				if (voClinicalNotes.getID_ClinicalNotes() == null)
				{
					voClinicalNotes.setAuthoringInfo(form.customControlAuthoringInfo().getValue());
					voClinicalNotes.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
					voClinicalNotes.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					voClinicalNotes.setIsDerivedNote(Boolean.FALSE);

					if (form.getLocalContext().getClinicalContactForm().booleanValue())
						voClinicalNotes.setNoteType(ClinicalNoteType.CLINICALNOTE);
				}
				else
				{
					if (form.cmbStatus().getValues().indexOf(ClinicalNotesStatus.CORRECTED) < 0)
					{
						form.cmbStatus().newRow(ClinicalNotesStatus.CORRECTED, ClinicalNotesStatus.CORRECTED.toString());
					}
				}
				voClinicalNotes.setClinicalNote(form.richTextNew().getValue());
				
				//WDEV-2380
				if(form.customControlAuthoringInfo().getValue() != null && form.customControlAuthoringInfo().getValue().getAuthoringHcpIsNotNull())
					voClinicalNotes.setDiscipline(form.customControlAuthoringInfo().getValue().getAuthoringHcp().getHcpType());
				
				ClinicalNoteStatusVo voStat = voClinicalNotes.getCurrentStatus();
				if(voStat == null)
					voStat = new ClinicalNoteStatusVo();
				
				ClinicalNotesStatus currentStatus = form.cmbStatus().getValue();
				boolean statusChanged = (currentStatus != null && currentStatus.equals(voStat.getStatus()) == false) || (currentStatus == null && voStat.getStatusIsNotNull());
				if(statusChanged)
				{
					voStat.setStatus(currentStatus);
					voStat.setDateTime(new DateTime());
					voStat.setMOS((MemberOfStaffShortVo)domain.getMosUser());
				}
				
				voClinicalNotes.setCurrentStatus(voStat);
			}
		}
		return voClinicalNotes;
	}

	private void loadStatusCombo()
	{
		// ClinicalNotesStatus
		ClinicalNotesStatusCollection lkpColl = LookupHelper.getClinicalNotesStatus(domain.getLookupService());
		ClinicalNotesStatus clinicalStatus;
		for (int i = 0; i < lkpColl.size(); i++)
		{
			clinicalStatus = lkpColl.get(i);
			if (clinicalStatus.isActive())
			{
				if (isModeNew())
				{
					if (clinicalStatus.equals(ClinicalNotesStatus.CORRECTED))
						continue;
				}
				form.cmbStatus().newRow(clinicalStatus, clinicalStatus.toString());
			}
		}
	}

	private boolean isModeNew()
	{
		ClinicalNotingMode mode = getScreenMode();

		return mode.equals(ClinicalNotingMode.NEW);
	}

	private void openCallingScreen(DialogResult result)
	{
		engine.close(result);
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		form.setcustomControlAuthoringInfoEnabled(true);
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		form.customControlAuthoringInfo().initializeComponent();					// WDEV-13427
		
		form.cmbStatus().setEnabled(true);
		form.richTextNew().setEnabled(true);

		form.btnNew().setVisible(false);
		form.btnUpdate().setVisible(false);
		form.btnSaveNew().setVisible(true);
		form.btnCancelNew().setVisible(true);
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		form.setcustomControlAuthoringInfoEnabled(false);

		form.cmbStatus().setEnabled(true);
		form.richTextNew().setEnabled(true);

		form.btnSaveNew().setVisible(true);
		form.btnCancelNew().setVisible(true);
	}

	protected void onCmbStatusValueChanged() throws PresentationLogicException 
	{
		// TODO Auto-generated method stub
		
	}
}
