//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.62 build 3112.33410)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.warddataview;

import ims.clinical.vo.PatientSECSLiteVo;
import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.clinical.vo.lookups.VTEAssessmentStatusReason;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.BayConfigForWardViewVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HealthyLodgerVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PasEventADTVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVoCollection;
import ims.core.vo.PendingEmergencyAdmissionAdmitVo;
import ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.PendingTransfersLiteVoCollection;
import ims.core.vo.WardBayBlockingDetailsVo;
import ims.core.vo.WardBayClosingDetailsVo;
import ims.core.vo.WardBayConfigForWardViewVo;
import ims.core.vo.WardDataViewPatientVo;
import ims.core.vo.WardDataViewVo;
import ims.core.vo.WardDataViewVoCollection;
import ims.core.vo.WardViewSearchCriteriaVo;
import ims.core.vo.enums.AdmitToWardMode;
import ims.core.vo.enums.CloseBlockReOpenBayWardForWardView;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.WindowParam;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.framework.utils.Time;
import ims.framework.utils.beans.ColorBean;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Pattern;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	public static final String	COLNAME							= "-1";	
	public static final Integer	CURRENT							= -5;
	public static final Integer	INCOMING_ADMISION				= -6;
	public static final Integer	INCOMING_PENDING_TRANSFERS		= -7;
	public static final Integer	OUTGOING_DISCHARGE				= -8;
	public static final Integer	OUTGOING_PENDING_TRANSFERS		= -9;
	
	
	private static final int COL_SURNAME = 0;
	private static final int COL_FORENAME = 1;
	private static final int COL_IDENTIFIER = 2;
	private static final int COL_AGE = 3;
	private static final int COL_BAY = 4;
	private static final int COL_BED_NO = 5;
	private static final int COL_ALERT = 6;
	private static final int COL_INFANT = 7;
	private static final int COL_VTE_STATUS = 8;
	private static final int COL_LODGER = 9;
	private static final int COL_OBS_SCORE = 10;
	

	public static final String RHS_TYPE_PATIENTS_SUMMARY = "Patients Summary";
	public static final String RHS_TYPE_WARD_SUMMARY = "Ward Summary";

	private static final String INTENSE_ORANGE_COLOR_HEXA_CODE = "#FF6600";
	
	public static final class WardViewBedNumberComparator implements Comparator<WardDataViewVo>//WDEV-20550 //WDEV-21014
	{
		private int order =1;
		private final Pattern SPLIT_PATTERN = Pattern.compile("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)");


		public WardViewBedNumberComparator()
		{
			order = 1;
		}
		
		public WardViewBedNumberComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)? -1:1;
		}

		@Override
		public int compare(WardDataViewVo wardData1, WardDataViewVo wardData2)
		{
			if (wardData1.getBay() != null && wardData2.getBay() == null)
				return order;
			
			if (wardData1.getBay() == null && wardData2.getBay() != null)
				return -1 * order;
			
			
			if (wardData1.getBay().equals(wardData2.getBay()))
			{
				if ((wardData1.getBed() == null || wardData1.getBed().getBedNumber() == null) && (wardData2.getBed() == null || wardData2.getBed().getBedNumber() == null))
				{
					if (wardData1.getBay() == null && wardData2.getBay() == null)
						return 0;
					
					return order * wardData1.getBay().getName().toLowerCase().compareTo(wardData2.getBay().getName().toLowerCase());
				}
				
				if ((wardData1.getBed() != null && wardData1.getBed().getBedNumber() != null) && (wardData2.getBed() == null || wardData2.getBed().getBedNumber() == null))
					return order;
				
				if ((wardData1.getBed() == null || wardData1.getBed().getBedNumber() == null) && (wardData2.getBed() != null && wardData2.getBed().getBedNumber() != null))
					return -1 * order;
				
				// Do we need to trim the Bed Number string
				String bedNumber1 = wardData1.getBed().getBedNumber().trim().replace("-" , "").replace(" ", "");
				String bedNumber2 = wardData2.getBed().getBedNumber().trim().replace("-" , "").replace(" ", "");
				
				return order * compareNumberAwareString(bedNumber1, bedNumber2);
			}
			
			return order * wardData1.getBay().getName().toLowerCase().compareTo(wardData2.getBay().getName().toLowerCase());
		}

		
		private int compareNumberAwareString(String bedSpace1, String bedSpace2)
		{
			// Split the Bed Number string into tokens of letters and numbers
			String[] bedSpace1Tokens = SPLIT_PATTERN.split(bedSpace1);
			String[] bedSpace2Tokens = SPLIT_PATTERN.split(bedSpace2);

			// Iterate the minimum number of tokens from splits and compare them
			for (int i = 0; i < bedSpace1Tokens.length && i < bedSpace2Tokens.length; i++)
			{
				// Compare tokens that are both composed of letters
				if (!isNumberParsable(bedSpace1Tokens[i]) && !isNumberParsable(bedSpace2Tokens[i]))
				{
					int comparedResult = bedSpace1Tokens[i].toLowerCase().compareTo(bedSpace2Tokens[i].toLowerCase());
					
					// If the tokens are not equal then we can make a decision on the sort order
					if (comparedResult != 0)
						return comparedResult;
				}

				// Compare tokens that are both composed of numbers
				if (isNumberParsable(bedSpace1Tokens[i]) && isNumberParsable(bedSpace2Tokens[i]))
				{
					Integer bedSpace1Number = Integer.parseInt(bedSpace1Tokens[i]);
					Integer bedSpace2Number = Integer.parseInt(bedSpace2Tokens[i]);
				
					int comparedResult = bedSpace1Number.compareTo(bedSpace2Number);
					
					// If the tokens are not equal then we can make a decision on the sort order
					if (comparedResult != 0)
						return comparedResult; 	// Return the opposite of the result as the bigger number is 
				}
				
				// If the tokens are not composed by letter or by numbers both, then numbers come before letters
				if (isNumberParsable(bedSpace1Tokens[i]) && !isNumberParsable(bedSpace2Tokens[i]))
					return 1;
				
				if (!isNumberParsable(bedSpace1Tokens[i]) && isNumberParsable(bedSpace2Tokens[i]))
					return -1;
			}
			
			// Shorter split comes first in sort order and wins
			if (bedSpace1Tokens.length > bedSpace2Tokens.length)
				return -1;
			
			if (bedSpace1Tokens.length < bedSpace2Tokens.length)
				return 1;
			
			// At this point the strings are equal
			return 0;
		}
		
		
		private boolean isNumberParsable(String input)
		{
		    boolean parsable = true;
		    try
		    {
		        Integer.parseInt(input);
		    }
		    catch(NumberFormatException e)
		    {
		        parsable = false;
		    }
		    return parsable;
		}
	}
	
	
	
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		initializeInpatientDynamicGrid();
		form.ccWardSummary().initialize();
		
		form.imbRefresh().setEnabled(false);		
		loadHospitals();	
		
		if (form.getGlobalContext().Core.getWardDataViewSearchCriteriaIsNotNull())///WDEV-12925 -Start
		{
			form.cmbHospital().setValue(form.getGlobalContext().Core.getWardDataViewSearchCriteria().getHospital());
			loadWardsForSelectedHosp();
			form.cmbWard().setValue(form.getGlobalContext().Core.getWardDataViewSearchCriteria().getWard());
			wardValueChanged(true);
		}///WDEV-12925-End
		else
		{
			//WDEV-15908 - starts here
    		ILocation currentLocation = engine.getCurrentLocation();
    		LocationLiteVo currentHospiptal = domain.getCurrentHospital(currentLocation);
    		form.cmbHospital().setValue(currentHospiptal);
    		
    		loadWardsForSelectedHosp();
    		if(currentLocation instanceof LocationLiteVo)
    		{
    			form.cmbWard().setValue((LocationLiteVo) currentLocation);
    			wardValueChanged(true);
    		}
    		
    		if(form.cmbWard().getValue() == null && form.cmbWard().getValues() != null && form.cmbWard().getValues().size() == 1)
    		{
    			if(form.cmbWard().getValues().get(0) instanceof LocationLiteVo)
    			{
    				form.cmbWard().setValue((LocationLiteVo) form.cmbWard().getValues().get(0));
    				wardValueChanged(true);
    			}
    		}
    		//WDEV-15908 - ends here
		}
		
		form.setMode(FormMode.VIEW);
	}
	

	@Override
	protected void onCcWardSummaryValueChanged() throws PresentationLogicException
	{
		wardValueChanged(false);
	}
	
	@Override
	protected void onBtnAdmitWardClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setWardViewPatientListWard(form.cmbWard().getValue());
		form.getGlobalContext().Core.setWardViewPatientListBay(null);
		
		engine.open(form.getForms().Core.AdmitToWard, new Object[] {AdmitToWardMode.STANDARD});
	}

	
	private void initializeInpatientDynamicGrid()
	{
		form.dyngrdInpatients().getRows().clear();
		//form.dyngrdInpatients().setReadOnly(true); this is not needed as we have buttons on the grid
		form.dyngrdInpatients().setSelectable(true);

		DynamicGridColumn column = form.dyngrdInpatients().getColumns().newColumn("Surname");
		column.setIdentifier(COL_SURNAME);
		column.setWidth(73);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdInpatients().getColumns().newColumn("Forename");
		column.setIdentifier(COL_FORENAME);
		column.setWidth(75);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		column = form.dyngrdInpatients().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_IDENTIFIER);
		column.setWidth(85);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdInpatients().getColumns().newColumn("Age");
		column.setIdentifier(COL_AGE);
		column.setWidth(35);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdInpatients().getColumns().newColumn("Bay");
		column.setIdentifier(COL_BAY);
		column.setWidth(75);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdInpatients().getColumns().newColumn("Bed/Chair No.");
		column.setIdentifier(COL_BED_NO);
		column.setWidth(85);
		column.setCanGrow(false);		
		column.setSortMode(SortMode.MANUAL);
		
		column = form.dyngrdInpatients().getColumns().newColumn(" ");
		column.setIdentifier(COL_ALERT);
		column.setWidth(24);
		column.setCanGrow(false);
		
		column = form.dyngrdInpatients().getColumns().newColumn(" ");
		column.setIdentifier(COL_INFANT);
		column.setWidth(24);
		column.setCanGrow(false);
		
		column = form.dyngrdInpatients().getColumns().newColumn(" ");
		column.setIdentifier(COL_VTE_STATUS);
		column.setWidth(24);
		column.setCanGrow(false);
		
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{	
			column = form.dyngrdInpatients().getColumns().newColumn(" ");
			column.setIdentifier(COL_LODGER);
			column.setWidth(24);
			column.setCanGrow(false);
			column.setAlignment(Alignment.CENTER);

			column = form.dyngrdInpatients().getColumns().newColumn("Score");
			column.setIdentifier(COL_OBS_SCORE);
			column.setWidth(0);
			column.setCanGrow(false);
			column.setSortMode(SortMode.AUTOMATIC);
			column.setHeaderTooltip("Obs. Score");
			column.setVisible(false); //WDEV-22205
		}
	}

	private void populateSearchCriteriaDataFromScreen()///WDEV-12925
	{
		if (form.cmbHospital().getValue() == null)
		{
			form.getGlobalContext().Core.setWardDataViewSearchCriteria(null);
			return;
		}
		WardViewSearchCriteriaVo crit = new WardViewSearchCriteriaVo();
		crit.setHospital(form.cmbHospital().getValue());
		crit.setWard(form.cmbWard().getValue());
		form.getGlobalContext().Core.setWardDataViewSearchCriteria(crit);
	}

	private void loadHospitals()
	{
		LocationLiteVoCollection hospColl = domain.listActiveHospitalsLite();
		if(hospColl != null)
		{
			for(int x = 0; x < hospColl.size(); x++)
			{
				if(hospColl.get(x) != null)
					form.cmbHospital().newRow(hospColl.get(x), hospColl.get(x).getName());
			}
		}
	}

	private void addWard(LocationLiteVo ward) 
	{
		if(ward == null)
			return;
		
		form.cmbWard().newRow(ward, ward.getName());
	}

	
	@Override
	protected void onCmbWardValueChanged() throws PresentationLogicException 
	{		
		wardValueChanged(true);
		populateSearchCriteriaDataFromScreen();///WDEV-12925
	}
	
	private void wardValueChanged(boolean bClearPatientContexts)
	{
		if (bClearPatientContexts)
		{	
			clearPatientSelectionGCs();
		}	
		form.getGlobalContext().Core.setHasWaitingArea(false);
		form.getGlobalContext().Core.setFemaleBedAdmissionWardCount(null);
		form.getGlobalContext().Core.setMaleBedAdmissionWardCount(null);
		form.getGlobalContext().Core.setADTWard(form.cmbWard().getValue());
		form.getGlobalContext().Core.setADTPendingTransfer(null);
		form.getLocalContext().setCountOfBaysOutOfOpeningHours(null);
		form.imbRefresh().setEnabled(false);

		if	(form.cmbWard().getValue() != null)
		{
			WardBayConfigForWardViewVo voWardBayConfig = domain.getWardBayConfigByWard(form.cmbWard().getValue());
			form.getLocalContext().setWardBayConfig(voWardBayConfig);
			if(voWardBayConfig != null)
			{	
				form.getGlobalContext().Core.setHasWaitingArea(voWardBayConfig != null && Boolean.TRUE.equals(voWardBayConfig.getIsWaitingArea()));
				setClosingLabels(voWardBayConfig);
			}	

			form.imbRefresh().setEnabled(true);
		}

		if (ConfigFlag.UI.WARD_VIEW_RHS_TYPE.getValue().equals(RHS_TYPE_WARD_SUMMARY))
		{	
			loadData();
			populateDynamicGridFromData();
		}
		form.ccWardSummary().setValue(form.cmbWard().getValue(), null);
		populateInpatientsGrid();
		updateControlsState();
	}


	private void clearPatientSelectionGCs()
	{		
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			form.getGlobalContext().Core.setSelectingPatientForm(null);
			form.getGlobalContext().Core.setPatientShort(null);
		}
	}

	private void populateInpatientsGrid()
	{
		try
		{
			form.dyngrdInpatients().getRows().clear();

			if(form.cmbWard().getValue() == null)
				return;

			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				fillGridFromHomeLeaveANDInpatRecords();
			}
			else
			{
				// List all beds from ward, regardless if the bed is occupied or not
				// WDEV-21014 numeric sorting by Bed No.
				WardDataViewVoCollection bedsColl = domain.listAllBedsForWard(form.cmbWard().getValue());
				if (bedsColl != null && bedsColl.size() > 1) 
				{
					form.getLocalContext().setSortOrderBedNumber(SortOrder.ASCENDING);
					bedsColl.sort(new WardViewBedNumberComparator(form.getLocalContext().getSortOrderBedNumber()));
				}
				// WDEV-21014  --- end
				listBedSpacesFromWard(bedsColl);
			}
		}
		catch (DomainInterfaceException ex)
		{
			engine.showMessage(ex.getMessage());
		}
	}	

	private void listBedSpacesFromWard(WardDataViewVoCollection wardBeds)
	{
		// Clear grid
		form.dyngrdInpatients().getRows().clear();
		
		if (wardBeds == null)
			return;
		
		for (WardDataViewVo bedSpace : wardBeds)
		{
			if (bedSpace == null)
				continue;
			
			DynamicGridRow bedSpaceRow = form.dyngrdInpatients().getRows().newRow();
			String tooltip = buildRowTooltip(bedSpace);
			
			bedSpaceRow.setValue(bedSpace);
			
			DynamicGridCell cellSurname = bedSpaceRow.getCells().newCell(getColumn(COL_SURNAME), DynamicCellType.STRING);
			cellSurname.setReadOnly(true);
			if (bedSpace.getPatient() != null && bedSpace.getPatient().getName() != null) //WDEV-21817
			{
				cellSurname.setValue(bedSpace.getPatient().getName().getSurname());				
			}
			cellSurname.setTooltip(tooltip);
			
			DynamicGridCell cellForename = bedSpaceRow.getCells().newCell(getColumn(COL_FORENAME), DynamicCellType.STRING);
			cellForename.setReadOnly(true);
			if (bedSpace.getPatient() != null && bedSpace.getPatient().getName() != null) //WDEV-21817
			{
				cellForename.setValue(bedSpace.getPatient().getName().getForename());				
			}
			cellForename.setTooltip(tooltip);
			
			DynamicGridCell cellIdentifier = bedSpaceRow.getCells().newCell(getColumn(COL_IDENTIFIER), DynamicCellType.STRING);
			cellIdentifier.setReadOnly(true);
			if (bedSpace.getPatient() != null && bedSpace.getPatient().getDisplayId() != null)
			{
				cellIdentifier.setValue(bedSpace.getPatient().getDisplayId().getValue());				
			}
			cellIdentifier.setTooltip(tooltip);
			
			DynamicGridCell cellAge = bedSpaceRow.getCells().newCell(getColumn(COL_AGE), DynamicCellType.INT);
			cellAge.setReadOnly(true);
			if (bedSpace.getPatient() != null)
			{
				cellAge.setValue(bedSpace.getPatient().calculateAge());				
			}
			cellAge.setTooltip(tooltip);
			
			DynamicGridCell cellBay = bedSpaceRow.getCells().newCell(getColumn(COL_BAY), DynamicCellType.STRING);
			cellBay.setReadOnly(true);
			if (bedSpace.getBay() != null)
			{
				cellBay.setValue(bedSpace.getBay().getName());
				
				if (tooltip != null && tooltip.length() > 0)
					cellBay.setTooltip(tooltip);			
			}
			
			DynamicGridCell cellBedNo = bedSpaceRow.getCells().newCell(getColumn(COL_BED_NO), DynamicCellType.STRING);
			cellBedNo.setReadOnly(true);
			if (bedSpace.getBed() != null)
			{
				cellBedNo.setValue(bedSpace.getBed().getBedNumber());
				cellBedNo.setTooltip(tooltip);
			}
			
			
			DynamicGridCell cellAlert = bedSpaceRow.getCells().newCell(getColumn(COL_ALERT), DynamicCellType.IMAGE);
			cellAlert.setReadOnly(true);
			if (bedSpace.getPatient() != null && Boolean.TRUE.equals(bedSpace.getPatient().getHasAlerts()))
			{
				cellAlert.setValue(form.getImages().Core.Alert16);
				
			}
			cellAlert.setTooltip(bedSpace.getPatient() != null && Boolean.TRUE.equals(bedSpace.getPatient().getHasAlerts()) ? "Alert(s) present" : tooltip);
			
			DynamicGridCell cellInfants = bedSpaceRow.getCells().newCell(getColumn(COL_INFANT), DynamicCellType.IMAGE);
			cellInfants.setReadOnly(true);
			if (bedSpace.getPatient() != null)
			{
				cellInfants.setValue(calculateInfants(bedSpace.getPatient()));				
			}
			cellInfants.setTooltip(tooltip);

			if (bedSpace.getInpatEpisode() != null && bedSpace.getInpatEpisode().getVTEAssessmentStatus() != null && Boolean.TRUE.equals(ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue()))
			{
				DynamicGridCell cellVTEStatus = bedSpaceRow.getCells().newCell(getColumn(COL_VTE_STATUS), DynamicCellType.IMAGEBUTTON);
				if (VTEAsessmentStatus.COMPLETED.equals(bedSpace.getInpatEpisode().getVTEAssessmentStatus()) && VTEAssessmentStatusReason.EXCLUDED.equals(bedSpace.getInpatEpisode().getVTEAssessmentStatus()))
				{
					cellVTEStatus.setTooltip("VTE Assessment Status: " + bedSpace.getInpatEpisode().getVTEAssessmentStatusReason().getText());
				}
				else
				{
					cellVTEStatus.setTooltip("VTE Assessment Status: " + bedSpace.getInpatEpisode().getVTEAssessmentStatus().getText());
				}
				
				cellVTEStatus.setValue(VTEAsessmentStatus.REQUIRED.equals(bedSpace.getInpatEpisode().getVTEAssessmentStatus()) ? form.getImages().OCRR.Requested : (VTEAsessmentStatus.COMPLETED.equals(bedSpace.getInpatEpisode().getVTEAssessmentStatus()) || VTEAsessmentStatus.VALIDATED.equals(bedSpace.getInpatEpisode().getVTEAssessmentStatus())) ? form.getImages().Core.Tick :(VTEAsessmentStatus.VALIDATION_REQUIRED.equals(bedSpace.getInpatEpisode().getVTEAssessmentStatus()) ? form.getImages().Correspondence.DocumentCompleted16 : null));
			}
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
			{	
				if (bedSpace.getHealthyLodgerDetailsIsNotNull())
				{
					DynamicGridCell cellLodger = bedSpaceRow.getCells().newCell(getColumn(COL_LODGER), DynamicCellType.IMAGE);
					cellLodger.setValue(form.getImages().Core.HealthyLodger16x16);
					cellLodger.setTooltip(createLodgerTooltip(bedSpace.getHealthyLodgerDetails()));
					cellLodger.setReadOnly(true);				
				}
				if (bedSpace.getInpatEpisodeIsNotNull() && bedSpace.getInpatEpisode().getLatestSECSScoreIsNotNull())
				{
					DynamicGridCell cellObsScore = bedSpaceRow.getCells().newCell(getColumn(COL_OBS_SCORE), DynamicCellType.INT);
					cellObsScore.setValue(bedSpace.getInpatEpisode().getLatestSECSScore().getSECSScoreIsNotNull() ?  bedSpace.getInpatEpisode().getLatestSECSScore().getSECSScore().intValue() : null);
					cellObsScore.setTooltip(buildObsScoreDisplay(bedSpace.getInpatEpisode().getLatestSECSScore()));
					cellObsScore.setReadOnly(true);				
				}

				Color rowColour = getRowColour(bedSpace);
				if (rowColour != null)
				{	
					bedSpaceRow.setBackColor(rowColour);
				}
			}

		}			
	}
	//WDEV-22443
	private Color getRowColour(WardDataViewVo bedSpace)
	{
		ColorBean darkOrangeBean = new ColorBean();
		darkOrangeBean.setName("Dark Orange");
		darkOrangeBean.setValue(INTENSE_ORANGE_COLOR_HEXA_CODE);
		Color darkOrange = new Color(darkOrangeBean);
		
		if (bedSpace.getBedSpaceState() != null && bedSpace.getBedSpaceState().getCurrentBedStatus() != null)
		{
			if( BedStatus.FOR_CLEANING.equals(bedSpace.getBedSpaceState().getCurrentBedStatus().getBedStatus()))
				return Color.Magenta;

			else if(BedStatus.CLOSED.equals(bedSpace.getBedSpaceState().getCurrentBedStatus().getBedStatus()))
				return Color.Gray;

			else if(BedStatus.AVAILABLE.equals(bedSpace.getBedSpaceState().getCurrentBedStatus().getBedStatus()))
				return Color.LimeGreen;
		}
		
		//WDEV-22309 
		
		if (bedSpace.getPatientIsNotNull() && bedSpace.getPatient().getDodIsNotNull())
			return Color.Yellow;
		
		if (isPatientOnTrackingMovement(bedSpace))
			return Color.RoyalBlue;		

		if (bedSpace.getInpatEpisodeIsNotNull())
		{			
			if (isPatientOnHomeLeave(bedSpace))
				return Color.LightGray;
			
			if (bedSpace.getPendingTransfer() != null)
				return Color.LightSkyBlue;
			
			/**		Each row in the list will be assigned a background colour according to the bed status: 
			//			White. Occupied. Estimated date/time of discharge >24hrs from current date/time 
			//			Amber. Occupied. Estimated date/time of discharge <24hrs from current date/time 
			//			Red. Occupied. Confirmed discharge  */

			if (bedSpace.getInpatEpisode().isDischargeDueWithin24Hrs())
				return Boolean.TRUE.equals(bedSpace.getInpatEpisode().getIsConfirmedDischarge()) ? Color.Red : darkOrange;	
			
						
		}		
		return null;
	}

	private boolean isPatientOnTrackingMovement(WardDataViewVo bedSpace)
	{
		if (bedSpace == null || bedSpace.getInpatEpisode() == null || bedSpace.getInpatEpisode().getCurrentTrackingMovement() == null)
			return false;
		
		if (Boolean.TRUE.equals(bedSpace.getInpatEpisode().getCurrentTrackingMovement().getPatientReturned()))
			return false;
		
		return true;
	}
	private boolean isPatientOnHomeLeave(WardDataViewVo bedSpace)
	{
		if (bedSpace == null || bedSpace.getInpatEpisode() == null)
			return false;
		
		if (Boolean.TRUE.equals(bedSpace.getInpatEpisode().getIsOnHomeLeave()))
			return true;
		
		return false;
	}
	private String buildObsScoreDisplay(PatientSECSLiteVo latestSECSScore)
	{
		if (latestSECSScore == null)
			return null;
		StringBuilder str = new StringBuilder();
		str.append((latestSECSScore.getOBSProtocolTypeIsNotNull() ? latestSECSScore.getOBSProtocolType().getText() + " Score: "  : "") + (latestSECSScore.getSECSScoreIsNotNull() ? "<b>" + latestSECSScore.getSECSScore().toString() + "</b> "  : "") + (Boolean.TRUE.equals(latestSECSScore.getEscalated()) ?  "<b>(Escalated)</b> " : "<b>(Not Escalated)</b> "));
		return str.toString();
	}
	
	private String createLodgerTooltip(HealthyLodgerVo healthyLodgerDetails)
	{
		String tooltipDisplay = "";
		
		tooltipDisplay  += "Healthy Lodger Present <br/>" + (healthyLodgerDetails.getNameIsNotNull() ? "Name: <b>" + healthyLodgerDetails.getName().toString() + "</b>" : "") + (healthyLodgerDetails.getRelationshipToPatientIsNotNull() ?  "<br/> Relationship: <b>" +  healthyLodgerDetails.getRelationshipToPatient().getText() + "</b>" : "");
		
		return tooltipDisplay;		
	}
	
	private void fillFromInpatRecords() 
	{
		WardDataViewVoCollection voCollWdv = domain.listInpatientsInBedsByWard(form.cmbWard().getValue());
		
		if(voCollWdv != null)
		{
			for (WardDataViewVo voWdv : voCollWdv)
			{
				String tooltip = buildRowTooltip(voWdv);
				
				WardDataViewPatientVo rowValue = new WardDataViewPatientVo();
				
				DynamicGridRow row = form.dyngrdInpatients().getRows().newRow();
				
				PatientLite_IdentifiersVo voPatient = voWdv.getPatient();
				
				rowValue.setPatient(voPatient);
				
				if(voPatient != null)
				{
					DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_SURNAME), DynamicCellType.STRING);
					cellSurname.setTooltip(tooltip);
					cellSurname.setReadOnly(true);
					
					DynamicGridCell cellForename = row.getCells().newCell(getColumn(COL_FORENAME), DynamicCellType.STRING);
					cellForename.setTooltip(tooltip);
					cellForename.setReadOnly(true);
					
					if(voPatient.getNameIsNotNull())
					{
						cellSurname.setValue(voPatient.getName().getSurname());
						cellForename.setValue(voPatient.getName().getForename());
					}
					
					PatientId patId = voPatient.getDisplayId();
					
					DynamicGridCell cellID = row.getCells().newCell(getColumn(COL_IDENTIFIER), DynamicCellType.STRING);
					cellID.setValue(patId != null ? patId.getValue() : null);
					cellID.setTooltip(tooltip);
					cellID.setReadOnly(true);
					
					Integer age = voPatient.calculateAge();
					
					DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_AGE), DynamicCellType.INT);
					cellAge.setTooltip(tooltip);
					cellAge.setReadOnly(true);
					
					if(age != null)
						cellAge.setValue(age);
	
					DynamicGridCell cellAlert = row.getCells().newCell(getColumn(COL_ALERT), DynamicCellType.IMAGE);
					cellAlert.setTooltip(tooltip);
					cellAlert.setReadOnly(true);
					
					if(Boolean.TRUE.equals(voPatient.getHasAlerts()))   //wdev-11083
						cellAlert.setValue(form.getImages().Core.Alert16); //WDEV-18011
					
					DynamicGridCell cellInfants = row.getCells().newCell(getColumn(COL_INFANT), DynamicCellType.IMAGE);
					cellInfants.setValue(calculateInfants(voPatient));
					cellInfants.setTooltip(tooltip);
					cellInfants.setReadOnly(true);
				}
				
				DynamicGridCell cellBay = row.getCells().newCell(getColumn(COL_BAY), DynamicCellType.STRING);
				cellBay.setTooltip(tooltip);
				cellBay.setReadOnly(true);
				
				if(voWdv.getBayIsNotNull())
					cellBay.setValue(voWdv.getBay().getName());
				
				DynamicGridCell cellBedNo = row.getCells().newCell(getColumn(COL_BED_NO), DynamicCellType.STRING);
				cellBedNo.setTooltip(tooltip);
				cellBedNo.setReadOnly(true);
				
				if(voWdv.getBedIsNotNull())
					cellBedNo.setValue(voWdv.getBed().getBedNumber());
				
				if(	voWdv.getInpatEpisodeIsNotNull() && voWdv.getInpatEpisode().getVTEAssessmentStatusIsNotNull()  && ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
				{
					rowValue.setInpatientEpisodeRef(voWdv.getInpatEpisode());
					rowValue.setVteAssessmentStatus(voWdv.getInpatEpisode().getVTEAssessmentStatus());
					rowValue.setVTEAssessmentStatusReason(voWdv.getInpatEpisode().getVTEAssessmentStatusReason());
					
					DynamicGridCell cellVTEStatus = row.getCells().newCell(getColumn(COL_VTE_STATUS), DynamicCellType.IMAGEBUTTON);
					
					if (VTEAsessmentStatus.COMPLETED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) && VTEAssessmentStatusReason.EXCLUDED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatusReason()))
						cellVTEStatus.setTooltip("VTE Assessment Status: " + voWdv.getInpatEpisode().getVTEAssessmentStatusReason().getText());
					else
						cellVTEStatus.setTooltip("VTE Assessment Status: " + voWdv.getInpatEpisode().getVTEAssessmentStatus().getText());
					
					cellVTEStatus.setValue(VTEAsessmentStatus.REQUIRED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) ? form.getImages().OCRR.Requested : (VTEAsessmentStatus.COMPLETED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) || VTEAsessmentStatus.VALIDATED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus())) ? form.getImages().Core.Tick : (VTEAsessmentStatus.VALIDATION_REQUIRED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) ? form.getImages().Correspondence.DocumentCompleted16 : null));
											
				}
				
				rowValue.setPASEvent(voWdv.getPasEvent());
				row.setValue(rowValue);
				
			}
		}
	}

	private DynamicGridColumn getColumn(String identifier)
	{
		return form.dyngrdDisplay().getColumns().getByIdentifier(identifier);
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdInpatients().getColumns().getByIdentifier(identifier);
	}
	
	private void fillGridFromHomeLeaveANDInpatRecords()
	{
		InpatientEpisodeLiteVoCollection voCollHL = form.getLocalContext().getOnHomeLeave();
		
		for (int i=0; i < voCollHL.size() ; i++ )
		{
			InpatientEpisodeLiteVo voHLInpatEpis = voCollHL.get(i);
			
			String tooltip = buildRowTooltip(voHLInpatEpis.getPasEvent(),voHLInpatEpis);
			WardDataViewPatientVo rowValue = new WardDataViewPatientVo();
			
			DynamicGridRow row = form.dyngrdInpatients().getRows().newRow();
			
			PatientLite_IdentifiersVo voPatient = voHLInpatEpis.getPasEvent().getPatient();
			
			rowValue.setPatient(voPatient);
			
			DynamicGridCell cellSurname = row.getCells().newCell(getColumn(COL_SURNAME), DynamicCellType.STRING);
			cellSurname.setTooltip(tooltip);
			cellSurname.setReadOnly(true);
			
			DynamicGridCell cellForename = row.getCells().newCell(getColumn(COL_FORENAME), DynamicCellType.STRING);
			cellForename.setTooltip(tooltip);
			cellForename.setReadOnly(true);
			
			if(voPatient != null)
			{
				if(voPatient.getNameIsNotNull())
				{
					cellSurname.setValue(voPatient.getName().getSurname());
					cellForename.setValue(voPatient.getName().getForename());
				}
				
				PatientId patId = voPatient.getDisplayId();
				
				DynamicGridCell cellID = row.getCells().newCell(getColumn(COL_IDENTIFIER), DynamicCellType.STRING);
				cellID.setValue(patId != null ? patId.getValue() : null);
				cellID.setTooltip(tooltip);
				cellID.setReadOnly(true);
				
							
				Integer age = voPatient.calculateAge();
				
				DynamicGridCell cellAge = row.getCells().newCell(getColumn(COL_AGE), DynamicCellType.INT);
				cellAge.setTooltip(tooltip);
				cellAge.setReadOnly(true);
				
				if(age != null)
					cellAge.setValue(age);

				DynamicGridCell cellAlert = row.getCells().newCell(getColumn(COL_ALERT), DynamicCellType.IMAGE);
				cellAlert.setTooltip(tooltip);
				cellAlert.setReadOnly(true);
				
				// TODO: THIS DOESN'T WORK
//				if (voPatient.getHasActiveAlertsIsNotNull() && voPatient.getHasActiveAlerts())   //wdev-11083
//					cellAlert.setValue(form.getImages().Core.Alert16); //WDEV-18011
					 
				DynamicGridCell cellInfants = row.getCells().newCell(getColumn(COL_INFANT), DynamicCellType.IMAGE);
				cellInfants.setValue(calculateInfants(voPatient));
				cellInfants.setTooltip(tooltip);
				cellInfants.setReadOnly(true);
			}
			
			//wdev-14784
			if(	voHLInpatEpis != null && voHLInpatEpis.getVTEAssessmentStatusIsNotNull() && ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true ) //wdev-15062
			{
				DynamicGridCell cellVTEStatus = row.getCells().newCell(getColumn(COL_VTE_STATUS), DynamicCellType.IMAGEBUTTON);
				
				if (VTEAsessmentStatus.COMPLETED.equals(voHLInpatEpis.getVTEAssessmentStatus()) && VTEAssessmentStatusReason.EXCLUDED.equals(voHLInpatEpis.getVTEAssessmentStatusReason()))
					cellVTEStatus.setTooltip("VTE Assessment Status: " + voHLInpatEpis.getVTEAssessmentStatusReason().getText());
				else
					cellVTEStatus.setTooltip("VTE Assessment Status: " + voHLInpatEpis.getVTEAssessmentStatus().getText());
				
				cellVTEStatus.setValue(VTEAsessmentStatus.REQUIRED.equals(voHLInpatEpis.getVTEAssessmentStatus()) ? form.getImages().OCRR.Requested : (VTEAsessmentStatus.COMPLETED.equals(voHLInpatEpis.getVTEAssessmentStatus()) || VTEAsessmentStatus.VALIDATED.equals(voHLInpatEpis.getVTEAssessmentStatus())) ? form.getImages().Core.Tick : (VTEAsessmentStatus.VALIDATION_REQUIRED.equals(voHLInpatEpis.getVTEAssessmentStatus()) ? form.getImages().Correspondence.DocumentCompleted16 : null));
				
				rowValue.setInpatientEpisodeRef(voHLInpatEpis);
				rowValue.setVteAssessmentStatus(voHLInpatEpis.getVTEAssessmentStatus());
				rowValue.setVTEAssessmentStatusReason(voHLInpatEpis.getVTEAssessmentStatusReason());
			}
			//----------
			
			DynamicGridCell cellBay = row.getCells().newCell(getColumn(COL_BAY), DynamicCellType.STRING);
			cellBay.setValue("");
			cellBay.setTooltip(tooltip);
			cellBay.setReadOnly(true);
			
			DynamicGridCell cellBedNo = row.getCells().newCell(getColumn(COL_BED_NO), DynamicCellType.STRING);
			cellBedNo.setValue("(H)");
			cellBedNo.setTooltip(tooltip);		
			cellBedNo.setReadOnly(true);
					
			rowValue.setPASEvent(voHLInpatEpis.getPasEvent());
			row.setValue(voHLInpatEpis.getPasEvent().getPatient());
			
		}

		fillFromInpatRecords();
		
	}

	private String buildRowTooltip(PasEventADTVo voPE, InpatientEpisodeLiteVo voHLInpatEpis)
	{
		if (voPE == null)
			throw new CodingRuntimeException("voPE cannot be null in method buildRowTooltip");
		
		String consultant = voPE.getConsultantIsNotNull() ? voPE.getConsultant().getIMosName() : "";
		String nhsNo =  voPE.getPatientIsNotNull() && voPE.getPatient().getNHS() != null ?  voPE.getPatient().getNHS().getValue() : "";
		//wdev-14784
		String vteStatus = "";
		//wdev-14784
		if(	voHLInpatEpis != null && voHLInpatEpis.getVTEAssessmentStatusIsNotNull() && ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
		{
			vteStatus = VTEAsessmentStatus.REQUIRED.equals(voHLInpatEpis.getVTEAssessmentStatus()) ? voHLInpatEpis.getVTEAssessmentStatus().getIItemText()  : (VTEAsessmentStatus.INPROGRESS.equals(voHLInpatEpis.getVTEAssessmentStatus()) ? voHLInpatEpis.getVTEAssessmentStatus().getIItemText() : (VTEAsessmentStatus.COMPLETED.equals(voHLInpatEpis.getVTEAssessmentStatus()) ? voHLInpatEpis.getVTEAssessmentStatus().getIItemText() : ""));  //wdev-14858 
		}
		
		//---------
		
		StringBuffer strTooltip = new StringBuffer();
		
		if( ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
		{
			strTooltip.append("<html><head></head><body><p><font color='#FF0000'><strong>Other Detail</strong></font>" +
				"<table width='210' border='0'><tr><td width='70'><font color='#0033FF'>NHS Number: </font></td><td>" +
				nhsNo +
				"</td></tr><tr><td><font color='#0033FF'>Consultant: </font></td><td>" +
				consultant +
				"</td></tr><tr><td><font color='#0033FF'>VTE Assessment Status: </font></td><td>" +
				vteStatus +
				"</td></tr></table></p>" +
				"</body></html>");
		}
		else
		{
			strTooltip.append("<html><head></head><body><p><font color='#FF0000'><strong>Other Detail</strong></font>" +
					"<table width='210' border='0'><tr><td width='70'><font color='#0033FF'>NHS Number: </font></td><td>" +
					nhsNo +
					"</td></tr><tr><td><font color='#0033FF'>Consultant: </font></td><td>" +
					consultant +
					"</td></tr></table></p>" +
					"</body></html>");
		}
		
		return strTooltip.toString();
	}

	private String buildRowTooltip(WardDataViewVo voWdv)
	{
		if (voWdv == null)
			throw new CodingRuntimeException("voWdv cannot be null in method buildRowTooltip");
		
		
		String consultant = voWdv.getPasEventIsNotNull() && voWdv.getPasEvent().getConsultantIsNotNull() ? voWdv.getPasEvent().getConsultant().getIMosName() : null;
		String nhsNo =  voWdv.getPatientIsNotNull() && voWdv.getPatient().getNHS() != null ?  voWdv.getPatient().getNHS().getValue() : null;
		String patientSex =  voWdv.getPatientIsNotNull() && voWdv.getPatient().getSexIsNotNull() ? voWdv.getPatient().getSex().getText() : null;
		String patientDOB =  voWdv.getPatientIsNotNull() && voWdv.getPatient().getDobIsNotNull() ? voWdv.getPatient().getDob().toString() : null;
		String primaryIDLabel = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText();
		String primaryIDValue = voWdv.getPatientIsNotNull() && voWdv.getPatient().getDisplayId() != null ?voWdv.getPatient().getDisplayId().getValue() : null;
		String isOnHomeLeaveNoticeBanner = voWdv.getInpatEpisodeIsNotNull() && Boolean.TRUE.equals(voWdv.getInpatEpisode().getIsOnHomeLeave()) ? "Patient went on Home Leave " + (voWdv.getInpatEpisode().getDateOnHomeLeaveIsNotNull() ?  "on: " +  voWdv.getInpatEpisode().getDateOnHomeLeave().toString() + (voWdv.getInpatEpisode().getTimeOnHomeLeaveIsNotNull() ? " at " + voWdv.getInpatEpisode().getTimeOnHomeLeave().toString() : "") : "") +  (voWdv.getInpatEpisode().getExpectedDateOfReturnIsNotNull() ? "</br>Patient is expected to return on: " + voWdv.getInpatEpisode().getExpectedDateOfReturn().toString() + (voWdv.getInpatEpisode().getExpectedTimeOfReturnIsNotNull() ? " at " + voWdv.getInpatEpisode().getExpectedTimeOfReturn().toString() : "") : "") : null;
		String chairBedlabel = voWdv.getBedIsNotNull() && voWdv.getBed().getBedSpaceTypeIsNotNull() ? voWdv.getBed().getBedSpaceType().getText() : "Bed/Chair";
		
		boolean isMale = voWdv.getPatientIsNotNull()  && Sex.MALE.equals(voWdv.getPatient().getSex());
		boolean isFemale = voWdv.getPatientIsNotNull()  && Sex.FEMALE.equals(voWdv.getPatient().getSex());
		
		String bgcolor = isMale ?  Color.SkyBlue.getBean().getValue() : (isFemale ? "#FFCCCC" : "" ); 
		//wdev-14784
		String vteStatus = "";
		//wdev-14784
		if(	voWdv.getInpatEpisodeIsNotNull() && voWdv.getInpatEpisode().getVTEAssessmentStatusIsNotNull()  && ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() == true) //wdev-15062
		{
			vteStatus = VTEAsessmentStatus.REQUIRED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) ? voWdv.getInpatEpisode().getVTEAssessmentStatus().getIItemText()  : (VTEAsessmentStatus.INPROGRESS.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) ? voWdv.getInpatEpisode().getVTEAssessmentStatus().getIItemText() :(VTEAsessmentStatus.COMPLETED.equals(voWdv.getInpatEpisode().getVTEAssessmentStatus()) ? voWdv.getInpatEpisode().getVTEAssessmentStatus().getIItemText() :"")); //wdev-14858
		}
		
		//WDEV-20367
		String estDischargeDate = voWdv.getInpatEpisodeIsNotNull() && voWdv.getInpatEpisode().getEstDischargeDateIsNotNull() ? voWdv.getInpatEpisode().getEstDischargeDate().toString() : null;
		String confDischargeDate = voWdv.getInpatEpisodeIsNotNull() && voWdv.getInpatEpisode().getConfirmedDischargeDateTimeIsNotNull() ? voWdv.getInpatEpisode().getConfirmedDischargeDateTime().toString() : null;
		//---------
		
		String bedNumber = voWdv.getBedIsNotNull() && voWdv.getBed().getBedNumberIsNotNull()  ? voWdv.getBed().getBedNumber() : null;
		String bedBayName = voWdv.getBayIsNotNull() ? voWdv.getBay().getName() : null;
		
		String bedReadyDate = voWdv.getPendingTransferIsNotNull() && voWdv.getPendingTransfer().getBedAvailableDateTimeIsNotNull() ? voWdv.getPendingTransfer().getBedAvailableDateTime().toString() : "";
		
		boolean bBedClosed  = voWdv.getBedSpaceStateIsNotNull() && voWdv.getBedSpaceState().getCurrentBedStatusIsNotNull() && (BedStatus.FOR_CLEANING.equals(voWdv.getBedSpaceState().getCurrentBedStatus().getBedStatus()) || BedStatus.CLOSED.equals(voWdv.getBedSpaceState().getCurrentBedStatus().getBedStatus()));
		
		String description = voWdv.getBedSpaceState().getBedSpace().getDescription();
		String closureDateTime =  (bBedClosed && voWdv.getBedSpaceState().getCurrentBedStatus().getStatusDateTime() != null) ?  voWdv.getBedSpaceState().getCurrentBedStatus().getStatusDateTime().toString(): null;
		String reasonForClosure = (bBedClosed && voWdv.getBedSpaceState().getCurrentBedStatus().getReasonForClosureIsNotNull()) ? voWdv.getBedSpaceState().getCurrentBedStatus().getReasonForClosure().getText(): null;
			
		String estBedReopenDate = (bBedClosed && voWdv.getBedSpaceState().getCurrentBedStatus().getEstReopeningDateTimeIsNotNull()) ? voWdv.getBedSpaceState().getCurrentBedStatus().getEstReopeningDateTime().toString(): null;
		
		String bedClosedOrForCleaning = bBedClosed ? (BedStatus.FOR_CLEANING.equals(voWdv.getBedSpaceState().getCurrentBedStatus().getBedStatus()) ? chairBedlabel + " Requires Cleaning" : (BedStatus.CLOSED.equals(voWdv.getBedSpaceState().getCurrentBedStatus().getBedStatus()) ? chairBedlabel + " Is Currently Closed": null)) : null;
		String isOnTrackingMovement = isPatientOnTrackingMovement(voWdv) && voWdv.getInpatEpisode().getCurrentTrackingMovement().getMovementType() != null ? "Patient is currently tracked to: " + voWdv.getInpatEpisode().getCurrentTrackingMovement().getMovementType().getText()  + (voWdv.getInpatEpisode().getCurrentTrackingMovement().getLeftWardTime() != null ? " since: " + voWdv.getInpatEpisode().getCurrentTrackingMovement().getLeftWardTime().toString() : "") + (voWdv.getInpatEpisode().getCurrentTrackingMovement().getExpectedReturnTimeIsNotNull() ? "</br>Patient is expected to return on: " + voWdv.getInpatEpisode().getCurrentTrackingMovement().getExpectedReturnTime().toString() : "") : null;
		
		
		StringBuffer strTooltip = new StringBuffer();
		//WDEV-20550 
		strTooltip.append("<html><head></head><body><table " + (bgcolor.length() > 0 ?  "style = \"background-color:" + bgcolor + ";\"" : "" )+  " width='260' border='0'" + "> <tr><td width='260'> <font color='#0000FF'><strong>" +  chairBedlabel + " Details</strong></font></td</tr>"  + 
				(bedBayName != null ? "<tr><td style=\"vertical-align:top\" width=40%><font color='#0033FF'>Bay: </font></td><td>" + bedBayName  + "</td></tr>": "") + 
				(bedNumber != null ? "<tr><td width=40%><font color='#0033FF'> "+ chairBedlabel +" Number: </font></td><td>" + bedNumber  + "</td></tr>": "") +
				(description != null ? "<tr><td style=\"vertical-align:top\" width=40%><font color='#0033FF'>" +  chairBedlabel + " Description: </font></td><td>" + description + "</td></tr>": ""));
		
		if (bBedClosed)
		{
			strTooltip.append((bedClosedOrForCleaning != null ? "<tr><td colspan ='2'> <font color='#FF0000'><strong> " + bedClosedOrForCleaning  +"</strong></font></td</tr>" : "")  +
					(closureDateTime != null ? "<tr><td width=40%><font color='#0033FF'>" + chairBedlabel + " Was Closed on: </font></td><td>" + closureDateTime  + "</td></tr>": "")  +
					(reasonForClosure != null ? "<tr><td width=40%><font color='#0033FF'>Reason for Closure: </font></td><td>" + reasonForClosure  + "</td></tr>": "")  + 
					(estBedReopenDate != null ? "<tr><td width=40%><font color='#0033FF'>Est. Re-Opening Date/Time: </font></td><td>" + estBedReopenDate  + "</td></tr>": ""));
		}
		if (voWdv.getPatientIsNotNull())
		{	
			strTooltip.append("<tr><td width='260'> <font color='#FF0000'><strong>Patient Details</strong></font></td</tr>" + 
					(nhsNo != null ? "<tr><td  width=40%><font color='#0033FF'> " + primaryIDLabel + ":</font></td><td>" + primaryIDValue + "</td></tr>" : "")  +
					(patientSex != null ? "<tr><td width=40%><font color='#0033FF'>Sex: </font></td><td>" + patientSex + "</td></tr>" : "") + 
					(patientDOB != null ? "<tr><td width=40%><font color='#0033FF'>Date of Birth: </font></td><td>" + patientDOB + "</td></tr>" : "") +
					(consultant != null ? "<tr><td width=40%><font color='#0033FF'>Consultant:</font></td><td>" + consultant + "</td></tr>"  : "") +
					(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 
							(estDischargeDate !=  null ? "<tr ><td width=55%><font color='#0033FF'>Est. Discharge Date/Time: </font></td><td>" + estDischargeDate + "</td></tr>" : "") + 
							(confDischargeDate !=  null ? "<tr><td width=55%><font color='#0033FF'>Confirmed Discharge Date: </font></td><td>" +	confDischargeDate + "</td></tr>" : "") +
							(voWdv.getPendingTransferIsNotNull() ? "<tr><td width=55%><font color='#0033FF'>" + chairBedlabel + " Available Date: </font></td><td>" + bedReadyDate + "</td></tr>" : "") + 
							(ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue() && vteStatus.length() > 0 ? "<tr><td width=55%><font color='#0033FF'>VTE Assessment Status: </font></td><td>" + vteStatus +
									"</td></tr>" : "") : "")  
							+ (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? ((isOnHomeLeaveNoticeBanner !=  null ? "<tr><td colspan ='2'><font color='#23238E'><strong> " + isOnHomeLeaveNoticeBanner +  " </strong></font></td></tr>" : "") +
									(isOnTrackingMovement !=  null ? "<tr><td colspan ='2'><font color='#23238E'><strong> " + isOnTrackingMovement +  " </strong></font></td></tr>" : "")) : ""));
		}
		strTooltip.append("</table></body></html>");
			
		return strTooltip.toString();
	}

	private void clearDisplay()
	{
		clearData();		
		form.htmWardStatus().setHTML("");
		form.dyngrdDisplay().clear();
		form.dyngrdInpatients().getRows().clear();
	}

	private void clearData()
	{
		form.getLocalContext().setOnHomeLeave(null);
		form.getLocalContext().setOnTheWard(null);
		form.getLocalContext().setTransfersOut(null);
		form.getLocalContext().setPendingElective(null);
		form.getLocalContext().setPendingEmergency(null);
		form.getLocalContext().setTransfersIn(null);
		form.getLocalContext().setWaitingArea(null);		
	}

	private void initializeDynamicGrid() 
	{	
		DynamicGrid dynGrid = form.dyngrdDisplay();
		dynGrid.clear();
		DynamicGridColumn colPatient = null;	
		colPatient = dynGrid.getColumns().newColumn("Patient", COLNAME);
		colPatient.setWidth(-1);		
		colPatient.setAlignment(Alignment.CENTER);		
	}
	
	private void populateDynamicGridFromData()
	{		
		initializeDynamicGrid();
		
		DynamicGrid dynGrid = form.dyngrdDisplay();		
		DynamicGridRow dynRow = dynGrid.getRows().newRow();
		DynamicGridRow patientRow =null;
		dynRow.setIdentifier(CURRENT);
		dynRow.setReadOnly(false);
		dynRow.setSelectable(false);
		dynRow.setExpanded(true);

		DynamicGridCell cellPatient = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		cellPatient.getItems().clear();
		cellPatient.setBackColor(Color.Bisque);
		cellPatient.setValue("<h3>ON THE WARD</h3>");

		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue()!="WST")//WDEV-14410 
		{
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		
		DynamicGridCell cellHomeLeave = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellHomeLeave.setValue("<h3>Home Leave</h3>");
		cellHomeLeave.setBackColor(Color.Aqua);

		//wdev-13509

		InpatientEpisodeLiteVoCollection voCollHL = form.getLocalContext().getOnHomeLeave();
	    if(voCollHL != null)
	    {
			for (int i=0; i < voCollHL.size() ; i++ )
			{
			    InpatientEpisodeLiteVo voHLInpatEpis = voCollHL.get(i);
			    if(voHLInpatEpis.getIsOnHomeLeaveIsNotNull()
			    	&& voHLInpatEpis.getIsOnHomeLeave())
			    {
			    	dynRow = cellHomeLeave.getRow().getRows().newRow();
			    	dynRow.setSelectable(false);
					dynRow.setExpanded(true);
			    	
					DynamicGridCell cellPatientRow = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor(Color.White);
					cellPatientRow.setIdentifier(CURRENT);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voHLInpatEpis.getPatientString());
					String tooltip = voHLInpatEpis.getPatientString();
					if (voHLInpatEpis.getBedIsNotNull() && voHLInpatEpis.getBed().getBayIsNotNull() && voHLInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voHLInpatEpis.getBed().getBay().getName();
					if (voHLInpatEpis.getVacatedBedNumberIsNotNull() 
						&& voHLInpatEpis.getVacatedBedNumber().toString() != "")
						tooltip+=" Vacated Bed: "+voHLInpatEpis.getVacatedBedNumber();
					if (voHLInpatEpis.getExpectedDateOfReturnIsNotNull())
						tooltip+=" Expected Return : "+voHLInpatEpis.getExpectedDateOfReturn().toString();
					if (voHLInpatEpis.getExpectedTimeOfReturnIsNotNull())
						tooltip+=" at "+ voHLInpatEpis.getExpectedTimeOfReturn().toString();
					cellPatientRow.setTooltip(tooltip);
					if (voHLInpatEpis.getPasEventIsNotNull())
					{
						dynRow.setValue(voHLInpatEpis.getPasEvent().getPatient());
						dynRow.setIdentifier(voHLInpatEpis);
					}
			    }
			}
	    }
		}
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);

		DynamicGridCell cellOutgoingDischarge = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingDischarge.setValue("<b><i>For Discharge</i></b>");
		cellOutgoingDischarge.setBackColor(Color.Aqua);
		
		dynRow = cellOutgoingDischarge.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingOccupiedDueDischarge24h = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingOccupiedDueDischarge24h.setValue("<b><i>Due discharge within 24h</i></b>");
		
		InpatientEpisodeLiteVoCollection voCollInpatEpis = form.getLocalContext().getOnTheWard();
		if(voCollInpatEpis != null)
		{
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
				InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
				
				if(voInpatEpis.isDischargeDueWithin24Hrs())
			    {
					if(voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge())
						continue;
					
					patientRow = cellOutgoingOccupiedDueDischarge24h.getRow().getRows().newRow();
					patientRow.setSelectable(true);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor( Color.fromRGB(255, 105, 0));
					cellPatientRow.setIdentifier(CURRENT);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
					if (voInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voInpatEpis.getPasEvent());
					}
					
			    }
			}
		}
		dynRow = cellOutgoingDischarge.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingConfirmedDischarge24h = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingConfirmedDischarge24h.setValue("<b><i>Confirmed discharge within 24h</i></b>");
		
		if(voCollInpatEpis != null)
		{
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
				InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
				
				if(voInpatEpis.isDischargeDueWithin24Hrs())
			    {
					if(voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge())
					{
						patientRow = cellOutgoingConfirmedDischarge24h.getRow().getRows().newRow();			
						patientRow.setSelectable(true);
						DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
						cellPatientRow.setAutoPostBack(true);
						cellPatientRow.setBackColor(Color.Red);
						cellPatientRow.setIdentifier(CURRENT);
						cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
						if (voInpatEpis.getPasEventIsNotNull())
						{
							patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
							patientRow.setIdentifier(voInpatEpis.getPasEvent());
						}
				    }
			    }
			}
		}

		
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingTransfer = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingTransfer.setValue("<b><i>For Transfer Out</i></b>");
		cellOutgoingTransfer.setBackColor(Color.Aqua);
		
		PendingTransfersLiteVoCollection voCollTransfersOut = form.getLocalContext().getTransfersOut();
		if(voCollTransfersOut != null)
		{
			for (int i=0; i < voCollTransfersOut.size(); i++)
			{
				PendingTransfersLiteVo voTransferOut = voCollTransfersOut.get(i);
				patientRow = cellOutgoingTransfer.getRow().getRows().newRow();	
				patientRow.setSelectable(true);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
				cellPatientRow.setBackColor(Color.LightBlue);
				cellPatientRow.setAutoPostBack(true);		
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voTransferOut.getPatientString());
				if (voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().getPasEventIsNotNull())
				{
					patientRow.setValue(voTransferOut.getInpatientEpisode().getPasEvent().getPatient());
					patientRow.setIdentifier(voTransferOut.getInpatientEpisode().getPasEvent());
				}
			}
		}
	
		dynRow = dynGrid.getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellPatient1 = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		cellPatient1.setBackColor(Color.Bisque);		
		cellPatient1.setValue("<h3>INCOMING</h3>");
				
		dynRow = cellPatient1.getRow().getRows().newRow();;
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellIncomingdmissionEmergency = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellIncomingdmissionEmergency.setValue("<b><i>Emergency Admissions</i></b>");
		
		//from PendingEmergencyAdmission
		PendingEmergencyAdmissionAdmitVoCollection voCollEmergency = form.getLocalContext().getPendingEmergency();
		if(voCollEmergency != null)
		{
			if (voCollEmergency != null)
			{
				for (int i=0; i < voCollEmergency.size(); i++ )
				{
					PendingEmergencyAdmissionAdmitVo voEmergency = voCollEmergency.get(i);
					patientRow = cellIncomingdmissionEmergency.getRow().getRows().newRow();		
					patientRow.setSelectable(true);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);		
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voEmergency.getPatientString());	
					cellPatientRow.setTooltip(voEmergency.getPatientString());
					if (voEmergency.getPasEventIsNotNull())
					{
						patientRow.setValue(voEmergency.getPasEvent().getPatient());
						patientRow.setIdentifier(voEmergency.getPasEvent());
					}
				}
			}
		}
		
		dynRow = cellPatient1.getRow().getRows().newRow();;
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellIncomingdmissionElective = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellIncomingdmissionElective.setValue("<b><i>Elective Admissions</i></b>");
		
		//from PendingElectiveAdmission
		PendingElectiveAdmissionAdmitVoCollection voCollPendingElective = form.getLocalContext().getPendingElective();
		if(voCollPendingElective != null)
		{
			for (int i=0; i < voCollPendingElective.size() ; i++ )
			{
				PendingElectiveAdmissionAdmitVo voPending = voCollPendingElective.get(i);
				patientRow = cellIncomingdmissionElective.getRow().getRows().newRow();	
				patientRow.setSelectable(true);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
				cellPatientRow.setAutoPostBack(true);		
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voPending.getPatientString());			
				cellPatientRow.setTooltip(voPending.getPatientString());
				if (voPending.getPasEventIsNotNull())
				{
					patientRow.setValue(voPending.getPasEvent().getPatient());
					patientRow.setIdentifier(voPending.getPasEvent());
				}
			}
		}

		
		dynRow = cellPatient1.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellPendingTransfers = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellPendingTransfers.setValue("<b><i>For Transfer In</b></i>");
		
		PendingTransfersLiteVoCollection voCollTransfersIn = form.getLocalContext().getTransfersIn();
		if(voCollTransfersIn != null)
		{
			for (int i=0; i < voCollTransfersIn.size(); i++)
			{
				PendingTransfersLiteVo voTransferIn = voCollTransfersIn.get(i);
				
				patientRow = cellPendingTransfers.getRow().getRows().newRow();
				patientRow.setSelectable(true);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
				cellPatientRow.setAutoPostBack(true);			
				cellPatientRow.setIdentifier(INCOMING_PENDING_TRANSFERS);
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voTransferIn.getPatientString());
				if (voTransferIn.getInpatientEpisodeIsNotNull() && voTransferIn.getInpatientEpisode().getPasEventIsNotNull())
				{
					patientRow.setValue(voTransferIn.getInpatientEpisode().getPasEvent().getPatient());
					patientRow.setIdentifier(voTransferIn.getInpatientEpisode().getPasEvent());
				}
			}
		}	
		
		//Waiting Area
		if(form.getGlobalContext().Core.getHasWaitingAreaIsNotNull() && form.getGlobalContext().Core.getHasWaitingArea())
		{
			DynamicGridRow dynWRow = dynGrid.getRows().newRow();
			dynWRow.setReadOnly(false);
			dynWRow.setSelectable(false);
			dynWRow.setExpanded(true);
			DynamicGridRow wRow = null;
			
			DynamicGridCell cellWPatient = dynWRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
			cellWPatient.getItems().clear();
			cellWPatient.setBackColor(Color.Bisque);
			cellWPatient.setValue("<h3>WAITING AREA</h3>");
			
			if(form.getLocalContext().getWaitingAreaIsNotNull() && form.getLocalContext().getWaitingArea().size() > 0)
			{
				InpatientEpisodeLiteVoCollection voCollWaiting = form.getLocalContext().getWaitingArea();
			    if(voCollWaiting != null)
			    {
					for (int i=0; i < voCollWaiting.size() ; i++ )
					{
					    InpatientEpisodeLiteVo voInpatEpis = voCollWaiting.get(i);
					    wRow = cellWPatient.getRow().getRows().newRow();		
					    wRow.setSelectable(true);
						DynamicGridCell cellWRow = wRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
						cellWRow.setAutoPostBack(true);
						cellWRow.setBackColor(Color.White);
						cellWRow.setIdentifier(CURRENT);
						
						cellWRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
						if (voInpatEpis.getPasEventIsNotNull())
						{
							wRow.setValue(voInpatEpis.getPasEvent().getPatient());
							wRow.setIdentifier(voInpatEpis.getPasEvent());
						}
					}
			    }
			}
		}
	
	}
		
	private Image calculateInfants(PatientRefVo patient)
	{
		Image imgNumInfants = null;
		//get number of infants for this patient
		int count = domain.countInfants(patient);
		
		if(count == 1)
			imgNumInfants = form.getImages().Core.Infant1;
		if(count == 2)
			imgNumInfants = form.getImages().Core.Infant2;
		if(count == 3)
			imgNumInfants = form.getImages().Core.Infant3;
		if(count == 4)
			imgNumInfants = form.getImages().Core.Infant4;
		if(count == 5)
			imgNumInfants = form.getImages().Core.Infant5;
		if(count == 6)
			imgNumInfants = form.getImages().Core.Infant6;
		if(count == 7)
			imgNumInfants = form.getImages().Core.Infant7;
		if(count == 8)
			imgNumInfants = form.getImages().Core.Infant8;
		
		return imgNumInfants;
	}

	@SuppressWarnings("unused")
	private boolean isInpatientEpisodeonTransefrOutList(InpatientEpisodeRefVo voInpatEpis)
	{
		if(voInpatEpis == null)
			throw new CodingRuntimeException("voInpatEpis is null in method isInpatientEpisodeonTransefrOutList");
		
		PendingTransfersLiteVoCollection voCollTransfersOut = form.getLocalContext().getTransfersOut();
		if(voCollTransfersOut == null)
			return false;
		
		for(PendingTransfersLiteVo voTransferOut : voCollTransfersOut)
		{
			if(voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().equals(voInpatEpis))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (form.getForms().Core.HealthyLodgerDetails.equals(formName))
		{
			form.getGlobalContext().Core.setHealthyLodgerDetails(null);			
		}
		else
		{			
			if (formName.equals(form.getForms().Core.CloseBlockReOpenBayOrWardDlg) && !DialogResult.CANCEL.equals(result))
			{
				form.getLocalContext().setWardBayConfig(domain.getWardBayConfigByWard(form.cmbWard().getValue()));
				 
				wardValueChanged(false);
			}
			else if (formName.equals(form.getForms().Core.BaysOpeningTimesDlg))
			{
				setClosingLabels(domain.getWardBayConfigByWard(form.cmbWard().getValue()));
			}
			else if (result.equals(DialogResult.OK))
			{
				if (ConfigFlag.UI.WARD_VIEW_RHS_TYPE.equals(RHS_TYPE_WARD_SUMMARY))
				{	
					loadData();
					populateDynamicGridFromData();
				}
				populateInpatientsGrid();
			}
			//WDEV-22655
			else if (formName.equals(form.getForms().Core.BedInfoDialog) && form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getWardIsNotNull())
			{
				form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
			}
			form.ccWardSummary().refresh(form.cmbWard().getValue(), null);
			wardValueChanged(false);			
		}
	}

	private void loadData()
	{
		form.getLocalContext().setOnHomeLeave(form.cmbWard().getValue() == null ? null : domain.listHomeLeaveByWard(form.cmbWard().getValue()));
		form.getLocalContext().setOnTheWard(form.cmbWard().getValue() == null ? null : domain.listInpatientEpisodeByWard(form.cmbWard().getValue()));
		form.getLocalContext().setTransfersOut(form.cmbWard().getValue() == null ? null : domain.listPendingTransfersOutByWard(form.cmbWard().getValue()));
		form.getLocalContext().setPendingElective(form.cmbWard().getValue() == null ? null : domain.listPendingElectiveAdmission(form.cmbWard().getValue()));
		form.getLocalContext().setPendingEmergency(form.cmbWard().getValue() == null ? null : domain.listEmergencyAdmission(form.cmbWard().getValue()));
		form.getLocalContext().setTransfersIn(form.cmbWard().getValue() == null ? null : domain.listPendingTransfersInByWard(form.cmbWard().getValue()));
		form.getLocalContext().setWaitingArea(form.cmbWard().getValue() == null ? null : domain.listWaitingAreaPatientsByWard(form.cmbWard().getValue()));
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		clearDisplay();
		clearPatientSelectionGCs();
		form.imbRefresh().setEnabled(false);
		form.getGlobalContext().Core.setFemaleBedAdmissionWardCount(null);
		form.getGlobalContext().Core.setMaleBedAdmissionWardCount(null);
		loadWardsForSelectedHosp();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
		
		form.ccWardSummary().setValue(form.cmbWard().getValue(), null);
		updateControlsState();
	}

	private void loadWardsForSelectedHosp()
	{
		form.cmbWard().clear();
		
		if(form.cmbHospital().getValue() != null)
		{
			LocationLiteVoCollection wardsColl = domain.listWardsForCurrentLocation(form.cmbHospital().getValue());
			if(wardsColl != null)
			{
				for(int x = 0; x < wardsColl.size(); x++)
				{
					addWard(wardsColl.get(x));
				}
				
				//WDEV-15908 
				if(wardsColl.size() == 1)
				{
					form.cmbWard().setValue(wardsColl.get(0));
					wardValueChanged(true);
				}
			}
		}
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.WardDataView.VIEW_DETAILS:
			viewPatientDetailsInBed();
			break;
			default :
			break;
		}
		updateControlsState();
	}

	private void viewPatientDetailsInBed()
	{
		if (!(form.dyngrdInpatients().getValue() instanceof WardDataViewVo) || ((WardDataViewVo)form.dyngrdInpatients().getValue()).getPatient() == null)
			return;
		boolean hasPendingTransfer = ((WardDataViewVo)form.dyngrdInpatients().getValue()).getPendingTransfer() != null;
		form.getGlobalContext().Core.setADTPendingTransfer(hasPendingTransfer  ? domain.getPendingTransfer(((WardDataViewVo)form.dyngrdInpatients().getValue()).getPendingTransfer()) : null);
		form.getGlobalContext().Core.setSelectedBedSpaceState(domain.getBedSpaceState(((WardDataViewVo)form.dyngrdInpatients().getValue()).getBedSpaceState()));
		engine.open(form.getForms().Core.BedInfoDialog, new Object[]{new Boolean(form.isReadOnly())});
	}

	@Override
	protected void onImbRefreshClick() throws PresentationLogicException
	{
		boolean patSelectionCleared = form.dyngrdInpatients().getValue() == null || (form.dyngrdInpatients().getValue() instanceof WardDataViewVo && ((WardDataViewVo)form.dyngrdInpatients().getValue()).getPatient() == null);
		wardValueChanged(patSelectionCleared);
	}

	@Override
	protected void onDyngrdDisplayRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (row.getValue() instanceof PatientShort)
		{
			form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());			
			form.dyngrdInpatients().setValue(null);
		}
		
		//WDEV-11449 - setting CareContext for EDischarge
		setCareContextIfApplicable(row);
		if (form.getGlobalContext().Core.getCurrentCareContext() == null)
			form.getGlobalContext().Core.setPatientShort((PatientShort) row.getValue());
		
		resetPIDBarText();//WDEV-14476
	}	
	
	private void setCareContextIfApplicable(DynamicGridRow row)
	{
		if(row.getIdentifier() instanceof PASEventRefVo)
			form.getGlobalContext().Core.setCurrentCareContext( domain.getCareContextForPasEvent((PASEventRefVo) row.getIdentifier()));	
		else
			form.getGlobalContext().Core.setCurrentCareContext(null);
	}

	@Override
	protected void onBtnPrintReportClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		
		if(form.cmbWard().getValue()==null)		
		{
			engine.showMessage("Please select a ward !");
			return;
		}
		
		//we need a better way to do this
		Object[] obj = domain.getSystemReportAndTemplate(new Integer(297));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
		client.addSeed(new SeedValue("Ward",  form.cmbWard().getValue().getID_Location().intValue(), Integer.class));		
		client.addSeed(new SeedValue("Consultant",  null, Integer.class));
		client.addSeed(new SeedValue("Specialty",  null, Integer.class));
				
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		engine.openUrl(resultUrl);
		
	}
	
	//WDEV-14476
	private void resetPIDBarText()
	{
		if ( ! form.getGlobalContext().Core.getPatientShortIsNotNull())
			return;
		
		if ( ! form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	}

	@Override
	protected void onDyngrdInpatientsCellButtonClicked(DynamicGridCell cell)
	{
		form.dyngrdInpatients().setValue(cell.getRow().getValue());
		
		if  (form.dyngrdInpatients().getValue() == null)
			return;
		
		inpatientsGridSelectionChanged();
		
		InpatientEpisodeRefVo inpatientEpisode = null;
		VTEAssessmentStatusReason vteStatusReason = null;
		VTEAsessmentStatus vteStatus = null;
		
		if (form.dyngrdInpatients().getValue() instanceof  WardDataViewPatientVo) 
		{
			inpatientEpisode = ((WardDataViewPatientVo)form.dyngrdInpatients().getValue()).getInpatientEpisodeRef();
			vteStatusReason = ((WardDataViewPatientVo)form.dyngrdInpatients().getValue()).getVTEAssessmentStatusReason();
			vteStatus = ((WardDataViewPatientVo)form.dyngrdInpatients().getValue()).getVteAssessmentStatus();
		}
		else if (form.dyngrdInpatients().getValue() instanceof  WardDataViewVo)
		{
			inpatientEpisode = ((WardDataViewVo)form.dyngrdInpatients().getValue()).getInpatEpisode();
			
			if (inpatientEpisode != null)
			{
				vteStatusReason = ((WardDataViewVo)form.dyngrdInpatients().getValue()).getInpatEpisode().getVTEAssessmentStatusReason();
				vteStatus = ((WardDataViewVo)form.dyngrdInpatients().getValue()).getInpatEpisode().getVTEAssessmentStatus();
			}
		}
		
		if  (VTEAssessmentStatusReason.EXCLUDED.equals(vteStatusReason))
			return;
		
		form.getGlobalContext().Core.setInpatientEpisodeForVTERiskAssessmentWorklistVo(domain.getInpatientEpisodeForVTE(inpatientEpisode));
		
		if (VTEAsessmentStatus.REQUIRED.equals(vteStatus))
		{
			engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.EDIT});
		}
		else 
			engine.open(form.getForms().Clinical.VTERiskAssessmentDialog, new Object[] {FormMode.VIEW});
		
	}

	@Override
	protected void onDyngrdInpatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		WardBayConfigForWardViewVo wardBayConfig = form.getLocalContext().getWardBayConfig();
		
		if (wardBayConfig != null && WardBayStatus.CLOSED.equals(wardBayConfig.getWardAvailabilityStatus()))
			return;
		
		if (wardBayConfig != null && row.getValue() instanceof WardDataViewVo)
		{
			WardDataViewVo wardDataView = (WardDataViewVo) row.getValue();
			
			BayConfigForWardViewVo bayConfig = wardBayConfig.getBayConfig(wardDataView.getBay());
			
			if (bayConfig != null && WardBayStatus.CLOSED.equals(bayConfig.getBayAvailabilityStatus()))
				return;
			
			if (wardDataView.getPatient() == null)
			{
				if (WardBayStatus.BLOCKED.equals(wardBayConfig.getWardAvailabilityStatus()))
					return;
				
				if (bayConfig != null && WardBayStatus.BLOCKED.equals(bayConfig.getBayAvailabilityStatus()))
					return;
			}
		}
		
		inpatientsGridSelectionChanged();
	}
	

	private void inpatientsGridSelectionChanged()
	{
		//WDEV-22236	
		if (form.dyngrdInpatients().getValue() instanceof WardDataViewPatientVo)
		{
			CareContextShortVo careContextForPasEvent  = null;
			if (form.dyngrdInpatients().getSelectedRow() != null && ((WardDataViewPatientVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPASEvent() != null)
			{
				careContextForPasEvent = domain.getCareContextForPasEvent(((WardDataViewPatientVo)form.dyngrdInpatients().getSelectedRow().getValue()).getPASEvent());
				form.getGlobalContext().Core.setCurrentCareContext(careContextForPasEvent);
				if (careContextForPasEvent == null)
					form.getGlobalContext().Core.setPatientShort(((WardDataViewPatientVo)form.dyngrdInpatients().getValue()).getPatient() != null ? domain.getPatientShort(((WardDataViewPatientVo)form.dyngrdInpatients().getValue()).getPatient()) : null);
			}			
			form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
			form.dyngrdDisplay().setValue(null);

			resetPIDBarText();//WDEV-14476
		}
		else if (form.dyngrdInpatients().getValue() instanceof WardDataViewVo)
		{
			WardDataViewVo wardDataView = (WardDataViewVo)form.dyngrdInpatients().getValue();
						
			if (wardDataView.getPatientIsNotNull()) //WDEV-22236
			{	
				CareContextShortVo careContextForPasEvent = null;
				if (wardDataView.getPasEvent() != null)
				{
					careContextForPasEvent = domain.getCareContextForPasEvent(wardDataView.getPasEvent());
					form.getGlobalContext().Core.setCurrentCareContext(careContextForPasEvent);
				}
				if (careContextForPasEvent == null) 
					form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(wardDataView.getPatient()));
				form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
				updateControlsState();
				return;
			}	
			WardBayConfigForWardViewVo config = form.getLocalContext().getWardBayConfig();
			if (config != null)
			{	
				if (WardBayStatus.CLOSED.equals(config.getWardAvailabilityStatus()))
					return;
				if (WardBayStatus.BLOCKED.equals(config.getWardAvailabilityStatus()) && wardDataView.getPatient() == null)
					return;
				BayConfigForWardViewVo bayCfg = config.getBayConfig(wardDataView.getBay());
				if (wardDataView.getBayIsNotNull() && bayCfg != null && WardBayStatus.CLOSED.equals(bayCfg.getBayAvailabilityStatus()))
					return;
				if (wardDataView.getBayIsNotNull() && wardDataView.getPatient() == null && bayCfg != null && WardBayStatus.BLOCKED.equals(bayCfg.getBayAvailabilityStatus()))
					return;				
			}			
						
			form.getGlobalContext().Core.setSelectedBedSpaceState(domain.getBedSpaceState(wardDataView.getBedSpaceState()));
			form.getGlobalContext().Core.setADTTransfersIn(domain.listPendingTransfersInByWard(form.cmbWard().getValue()));
			form.getGlobalContext().Core.setADTTransfersOut(domain.listPendingTransfersOutByWard(form.cmbWard().getValue()));		
			form.getGlobalContext().Core.setMaleBedAdmissionWardCount(domain.countMalePatientsOnTheBayForSelectedBedSpace(form.cmbWard().getValue(), wardDataView.getBay()));
			form.getGlobalContext().Core.setFemaleBedAdmissionWardCount(domain.countFemalePatientsOnTheBayForSelectedBedSpace(form.cmbWard().getValue(), wardDataView.getBay()));
			
			if (wardDataView.getPatient() == null)
			{
				form.getGlobalContext().Core.setPatientShort(null);
			}
			engine.open(form.getForms().Core.BedInfoDialog, new Object[]{new Boolean(form.isReadOnly())});
			return;
		}
		updateControlsState();
	}

	private boolean isBayOutOfOpeningHours(BayConfigForWardViewVo bayConfigForWardViewVo)
	{
		if (!Boolean.TRUE.equals(bayConfigForWardViewVo.getIsActive()) && WardBayStatus.CLOSED.equals(bayConfigForWardViewVo.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayConfigForWardViewVo.getBayAvailabilityStatus()))
			return false;
		
		Calendar calendar = Calendar.getInstance();
		Date lastReopenDate = getMostRecentReopenDate(bayConfigForWardViewVo);
		
		boolean isCurrentDayWeekDay =  (Calendar.SUNDAY != calendar.get(Calendar.DAY_OF_WEEK) && Calendar.SATURDAY != calendar.get(Calendar.DAY_OF_WEEK));
		boolean isBayOutOfHours = (bayConfigForWardViewVo.getOpeningTimeIsNotNull() && new Time().isLessThan(bayConfigForWardViewVo.getOpeningTime())) || (bayConfigForWardViewVo.getClosingTimeIsNotNull() && new Time().isGreaterThan(bayConfigForWardViewVo.getClosingTime()));
		boolean wasReopenedToday = new Date().equals(lastReopenDate);
		
		if (isBayOutOfHours && wasReopenedToday)
			return false;
		
		if (Boolean.TRUE.equals(bayConfigForWardViewVo.getWeekdaysOnly()) && !isCurrentDayWeekDay)
			return true;
		return isBayOutOfHours;
	}
	
	private int countActiveBays(WardBayConfigForWardViewVo voWardBayConfig, boolean countAll)
	{
		int count = 0;
		if (voWardBayConfig == null || voWardBayConfig.getBays() == null || voWardBayConfig.getBays().size() == 0)
			return count;
		for (BayConfigForWardViewVo bay : voWardBayConfig.getBays())
		{
			if (Boolean.TRUE.equals(bay.getIsActive()) && (countAll || isBayOutOfOpeningHours(bay)))
			{
				count++;
			}
		}
		return count;
	}
	
	
	@SuppressWarnings("unchecked")
	private Date getMostRecentReopenDate(BayConfigForWardViewVo tempVo)
	{
		if (tempVo.getReOpenOutOfHours() == null)
			return null;
		
		ArrayList<Date> dates = new ArrayList<Date>();
		for (int i=0;i<tempVo.getReOpenOutOfHours().size();i++)
		{
			if (tempVo.getReOpenOutOfHours().get(i) != null && tempVo.getReOpenOutOfHours().get(i).getReopenDateIsNotNull())
				dates.add(tempVo.getReOpenOutOfHours().get(i).getReopenDate());
		}
		return dates.size() > 0 ? Collections.max(dates) : null;
		
	}
	
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.dyngrdDisplay().setVisible(RHS_TYPE_WARD_SUMMARY.equals(ConfigFlag.UI.WARD_VIEW_RHS_TYPE.getValue()));
		form.ccWardSummary().setVisible(RHS_TYPE_PATIENTS_SUMMARY.equals(ConfigFlag.UI.WARD_VIEW_RHS_TYPE.getValue()));
		
		
		WardBayConfigForWardViewVo wardConfig = form.getLocalContext().getWardBayConfig();
		
		boolean bAtLeastABayOutOfHours = isAtLeastABayOutOfHours(wardConfig);
		boolean bCanBlockAtLeastABay = canBlockAtLeastABay(wardConfig);
		boolean bCanCloseAtLeastABay = canCloseAtLeastABay(wardConfig);
		boolean bCanReopen = isAtLeastABayCloseOrBlocked(wardConfig);
		boolean bCanCloseWard = canCloseWard(wardConfig);
		boolean bCanBlockWard = canBlockWard(wardConfig);
		
		form.btnBlockBay().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS));
		form.btnBlockWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS));
		form.btnCloseBay().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS));
		form.btnCloseWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS));
		form.btnReopenBay().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_REOPEN_WARD_BAYS_OOH)));
		form.btnReopenWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && (((wardConfig != null && (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS))))));
		
		form.htmWardStatus().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && wardConfig != null);
				
		form.btnBlockBay().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && wardConfig != null && wardConfig.getBaysIsNotNull() && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) && bCanBlockAtLeastABay)));
		form.btnBlockWard().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) && bCanBlockWard)));
		form.btnCloseBay().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && wardConfig != null && wardConfig.getBaysIsNotNull() && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) && bCanCloseAtLeastABay)));
		form.btnCloseWard().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) && bCanCloseWard)));
		form.btnReopenBay().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && wardConfig != null && wardConfig.getBaysIsNotNull() && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS)) && bCanReopen) || (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_REOPEN_WARD_BAYS_OOH) && bAtLeastABayOutOfHours));
		form.btnReopenWard().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) && wardConfig != null && WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus()))) || (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) && wardConfig != null && WardBayStatus.BLOCKED.equals(wardConfig.getWardAvailabilityStatus())));
	
		form.btnAdmitWard().setEnabled(true);
		form.imbInfo().setVisible(form.cmbWard().getValue() != null && form.getLocalContext().getCountOfBaysOutOfOpeningHoursIsNotNull() && form.getLocalContext().getCountOfBaysOutOfOpeningHours()> 0);
		form.btnAdmitWard().setVisible(form.cmbWard().getValue() != null && isWardAndBaysOpen(form.getLocalContext().getWardBayConfig()));
		form.ccWardSummary().setWardClosedBlocked(!isWardAndBaysOpen(form.getLocalContext().getWardBayConfig()));
		
		form.getContextMenus().Core.hideAllWardDataViewMenuItems();
		form.getContextMenus().Core.getWardDataViewVIEW_DETAILSItem().setVisible(form.dyngrdInpatients().getValue() instanceof WardDataViewVo && ((WardDataViewVo)form.dyngrdInpatients().getValue()).getPatient() != null);
		
		form.btnBedManagementDashboard().setEnabled(Boolean.TRUE.equals(form.cmbHospital().getValue() != null));
		
		if (Boolean.FALSE.equals(form.cmbHospital().getValue() != null))
		{
			form.btnBedManagementDashboard().setTooltip("Hospital must be selected");
		} 
		else
		{
			form.btnBedManagementDashboard().setTooltip("");
		}
	}
	
	
	private boolean isWardAndBaysOpen(WardBayConfigForWardViewVo wardBayConfig)
	{
		if (wardBayConfig == null || wardBayConfig.getBays() == null)
			return true;
		
		if (WardBayStatus.CLOSED.equals(wardBayConfig.getWardAvailabilityStatus()))
			return false;
		
		return true;
	}


	private boolean canBlockWard(WardBayConfigForWardViewVo wardConfig)
	{
		if (wardConfig == null ||  WardBayStatus.BLOCKED.equals(wardConfig.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus()) || wardConfig.getBays() == null || wardConfig.getBays().size() == 0)
			return false;
		
		boolean bFound = false;
		
		for (int i=0; i<wardConfig.getBays().size();i++)
		{
			if (wardConfig.getBays().get(i) == null || wardConfig.getBays().get(i).getNumOfBeds() == null)
				continue;
			if (wardConfig.getBays().get(i).getNumOfOccupiedBeds() != null && wardConfig.getBays().get(i).getNumOfOccupiedBeds() > 0)
			{	
				bFound = true;
				break;
			}	
		}
		if (form.ccWardSummary().getAwaitingBedCount() != null && form.ccWardSummary().getAwaitingBedCount() > 0)
			bFound = true;
		
		return bFound;
	}

	private boolean canCloseWard(WardBayConfigForWardViewVo wardConfig)
	{
		if (wardConfig == null || WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus()) || wardConfig.getBays() == null || wardConfig.getBays().size() == 0)
			return false;
		if (form.ccWardSummary().getAwaitingBedCount() != null && form.ccWardSummary().getAwaitingBedCount() > 0)
			return false;
		for (int i=0; i<wardConfig.getBays().size();i++)
		{
			if (wardConfig.getBays().get(i) == null || wardConfig.getBays().get(i).getNumOfBeds() == null)
				continue;
			if (wardConfig.getBays().get(i).getNumOfOccupiedBeds() != null && wardConfig.getBays().get(i).getNumOfOccupiedBeds() > 0)
				return false;			
		}
		return true;
	}
	private void setClosingLabels(WardBayConfigForWardViewVo voWardBayConfig)
	{		
		if (voWardBayConfig.getWardAvailabilityStatus() == null || WardBayStatus.OPEN.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{
			int countActive = countActiveBays(voWardBayConfig,true);
			int countOutOfHours = countActiveBays(voWardBayConfig,false);
			
			form.getLocalContext().setCountOfBaysOutOfOpeningHours(countOutOfHours);
			String color = countOutOfHours == 0 ?  Color.Green.getBean().getValue() : Color.Red.getBean().getValue();
			
			form.htmWardStatus().setHTML(getWardClosingLabel(countActive,countOutOfHours,color));			
		}
		else if (WardBayStatus.BLOCKED.equals(voWardBayConfig.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{
			String szString = getLatestBlockingClosingDetails(voWardBayConfig, false);
						
			ColorBean amberBean = new ColorBean();
			amberBean.setName("Amber");
			amberBean.setValue(ims.core.forms.wardview.Logic.AMBER_COLOR_HEXA_CODE);
			
			String color = WardBayStatus.BLOCKED.equals(voWardBayConfig.getWardAvailabilityStatus()) ? amberBean.getValue() : Color.Red.getBean().getValue();
			if (szString != null && szString.length() > 30)
			{	
				form.htmWardStatus().setHTML("<div style=\"color:" + color + "; font-size: 16px;\" align=\"center\"><b>" + szString + "</b></div>");
				if (szString.length() >= 52)
				{
					String szStringTooltip = getLatestBlockingClosingDetails(voWardBayConfig, true);
					form.htmWardStatus().setHTML("<div title =\"" + szStringTooltip + "\" style=\"color:"+ color + "; font-size: 16px;\" align=\"center\"><b>" + szString.substring(0,52) + "..." + "</b></div>");					
				}				
			}	
		}		
	}

	private String getWardClosingLabel(int countActive, int countOutOfHours, String color)
	{
		if (countActive == 0 || countOutOfHours == 0)
			return  "<div style=\"color:" + color + "; font-size: 16px;\" align=\"center\"><b>The ward is currently open</b></div> ";
		if (countActive == 1 && countOutOfHours <= countActive)
			return "<div style=\"color:" + color +"; font-size: 16px;\" align=\"center\"><b> The ward is currently out of opening hours</b></div>" ;
		
		return "<div style=\"color:" + color +"; font-size: 16px;\" align=\"center\"><b> The ward has " + String.valueOf(countOutOfHours) + " bay" + (countOutOfHours > 1 ? "s" : "") + " currently out of opening hours </b></div> " ; 
		
	}
	private String getLatestBlockingClosingDetails(WardBayConfigForWardViewVo voWardBayConfig, boolean bLineBreaks)
	{
		if (voWardBayConfig == null)
			return null;
		WardBayBlockingDetailsVo voBlocking = null;
		WardBayClosingDetailsVo voClosing = null;
		if (WardBayStatus.BLOCKED.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{	
			for (int i=0;i<voWardBayConfig.getBlockingDetails().size();i++)
			{
				if (voWardBayConfig.getBlockingDetails().get(i) != null && voWardBayConfig.getBlockingDetails().get(i).getReopenDate() == null)
				{	
					voBlocking = voWardBayConfig.getBlockingDetails().get(i);
					break;
				}	
			}
			return "Ward Blocked on " + voBlocking.getBlockedDate().toString() + " " + (voBlocking.getEstimatedReopeningDateIsNotNull() ? (bLineBreaks ? "\n" : "") + "Expected Re-Opening Time: " + voBlocking.getEstimatedReopeningDate().toString() + " " : "") + (voBlocking.getReasonForBlockingIsNotNull() ? (bLineBreaks ? "\n" : "") + "Reason: " + voBlocking.getReasonForBlocking().getText() + " " : ""); 
		}

		else if (WardBayStatus.CLOSED.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{
			for (int i=0;i<voWardBayConfig.getClosingDetails().size();i++)
			{
				if (voWardBayConfig.getClosingDetails().get(i) != null && voWardBayConfig.getClosingDetails().get(i).getReopenDate() == null)
				{	
					voClosing = voWardBayConfig.getClosingDetails().get(i);
					break;
				}	
			}
			return "Ward Closed on " + voClosing.getClosureDate().toString() + " " + (voClosing.getEstimatedReopeningDateIsNotNull() ? (bLineBreaks ? "\n" : "") + "Expected Re-Opening Time: " + voClosing.getEstimatedReopeningDate().toString() + " " : "") + (voClosing.getReasonForClosureIsNotNull() ? (bLineBreaks ? "\n" : "") + "Reason: " + voClosing.getReasonForClosure().getText() + " " : "");

		}
		return null;
	}
	//WDEV-22920 
	private boolean canBlockAtLeastABay(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		if (WardBayStatus.BLOCKED.equals(wardBayConfigForWardViewVo.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getWardAvailabilityStatus()))
			return false;
		
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()) && (wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus() == null || WardBayStatus.OPEN.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus())) && wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() != null && wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() > 0)
				return true;
		}
				
		if (form.ccWardSummary().getAwaitingBedCount() != null && form.ccWardSummary().getAwaitingBedCount() > 0)
			return true;
		
		return false;
	}
	private boolean isAtLeastABayOutOfHours(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null || !Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()))
				continue;
			if (!WardBayStatus.BLOCKED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) &&  !WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getBays().get(i)) && isBayOutOfOpeningHours(wardBayConfigForWardViewVo.getBays().get(i)))
				return true;
		}
		return false;
	}
	private boolean isAtLeastABayCloseOrBlocked(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null || !Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()))
				continue;
			if (WardBayStatus.BLOCKED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getBays().get(i)) || isBayOutOfOpeningHours(wardBayConfigForWardViewVo.getBays().get(i)))
				return true;
		}
		return false;
	}
	//WDEV-22920 
	private boolean canCloseAtLeastABay(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;		
		if (WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getWardAvailabilityStatus()))
			return false;
		
		int countActiveBays = countActiveBays(wardBayConfigForWardViewVo, true);
		//boolean onlyOneBayOpen = isOnlyOneBayOpen(wardBayConfigForWardViewVo);		
		if (countActiveBays >=1 && form.ccWardSummary().getAwaitingBedCount() != null && form.ccWardSummary().getAwaitingBedCount() > 0)
			return false;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()) && !WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) && (wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() == null || wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() == 0))
				return true;
		}
		return false;
	}
	
	/*private boolean isOnlyOneBayOpen(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		int openCount = 0;
		int activeCount = 0;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()))
			{	
				activeCount ++;
				if ((wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus() == null || WardBayStatus.OPEN.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus())) && !isBayOutOfOpeningHours(wardBayConfigForWardViewVo.getBays().get(i)))
					openCount++;
			}
		}
		return openCount == 1 && activeCount > 1; 
	}*/

	//WDEV-20328 
	@Override
	protected void onBtnReopenWardClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.REOPEN_WARD, form.cmbWard().getValue()}, "Re-Open Ward");		
		
	}

	@Override
	protected void onBtnBlockWardClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.BLOCK_WARD, form.cmbWard().getValue()}, "Block Ward");
	}

	@Override
	protected void onBtnCloseWardClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.CLOSE_WARD, form.cmbWard().getValue()},"Close Ward");
		
	}

	@Override
	protected void onBtnReopenBayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.REOPEN_BAY,form.cmbWard().getValue()},"Re-Open Bay(s)");
		
	}

	@Override
	protected void onBtnCloseBayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.CLOSE_BAY,form.cmbWard().getValue()},"Close Bay(s)");
		
		
	}
	@Override
	protected void onBtnBlockBayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.BLOCK_BAY,form.cmbWard().getValue()}," Block Bay(s)");
		
	}


	@Override
	protected void onDyngrdInpatientsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (form.dyngrdInpatients().getRows().size() <=1)
			return;
		
		if (column.equals(getColumn(COL_BED_NO)))
		{
			WardDataViewVoCollection records = getValuesFromGrid();
			form.getLocalContext().setSortOrderBedNumber(SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderBedNumber())? SortOrder.DESCENDING : SortOrder.ASCENDING);
			records.sort(new WardViewBedNumberComparator(form.getLocalContext().getSortOrderBedNumber()));
			listBedSpacesFromWard(records);
		}
		updateControlsState();
	}


	private WardDataViewVoCollection getValuesFromGrid()
	{
		WardDataViewVoCollection coll = new WardDataViewVoCollection();
		
		for (int i=0; i<form.dyngrdInpatients().getRows().size();i++)
		{
			if (form.dyngrdInpatients().getRows().get(i) != null && form.dyngrdInpatients().getRows().get(i).getValue() instanceof WardDataViewVo)
			{
				coll.add((WardDataViewVo) form.dyngrdInpatients().getRows().get(i).getValue());
			}
		}
		return coll;
	}


	@Override
	protected void onImbInfoClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setADTWard(form.cmbWard().getValue());
		engine.open(form.getForms().Core.BaysOpeningTimesDlg);
		
	}


	@Override
	protected void onBtnBedManagementDashboardClick() throws PresentationLogicException 
	{
		if (form.cmbHospital().getValue() != null)
		{
			if(ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("BED_MANAGEMENT_DASHBOARD_URL config flag was not set.");

				return;
			}
			
			//WDEV-22837
			engine.openDashboard(ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue(), null);
			
			/*
			String url = ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue() + "?HID=" + form.cmbHospital().getValue().getID();
			
			List<WindowParam> params = new ArrayList<WindowParam>();
			params.add(new WindowParam("FullScreen", "false"));
			params.add(new WindowParam("ToolBar", "false"));
			params.add(new WindowParam("StatusBar", "false"));
			params.add(new WindowParam("StatusBar", "false"));
			params.add(new WindowParam("MenuBar", "false"));
			params.add(new WindowParam("AddressBar", "true"));
			params.add(new WindowParam("Resizable", "true"));
			params.add(new WindowParam("Visible", "true"));
			params.add(new WindowParam("Width", "1440"));
			params.add(new WindowParam("Height", "1000"));
			engine.openCustomUrl(url, params, true);
			*/
		}
	}
}
