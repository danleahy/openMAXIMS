//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.bedspacepropertydialog;

import ims.core.forms.bedspacepropertydialog.GenForm.GroupWardTypeEnumeration;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceVo;
import ims.core.vo.lookups.BedSpaceType;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.WardType;
import ims.framework.controls.Bed;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//wdev-11155
		form.setMode(FormMode.EDIT);
		if (args != null && args.length > 0 && args[0] instanceof Boolean)
		{
			if((Boolean)args[0].equals(Boolean.FALSE))
			{				
				form.setMode(FormMode.VIEW);
			}
		}
		//----------
		Bed bed = form.getGlobalContext().Core.getBedSpaceProperty();
		form.getLocalContext().setSelectedBed(bed);
		if (bed != null)
		{			
			Object tag = bed.getIdentifier();
			BedSpaceStateLiteVo bedSpaceState = null;
			BedSpaceVo bedSpace = null;
			if (tag != null && tag instanceof BedSpaceStateLiteVo)
			{
				bedSpaceState = (BedSpaceStateLiteVo) tag;
				
			}
			else 
			{
				bedSpaceState = new BedSpaceStateLiteVo();				
			}
			filterBedSpaceTypeList(bed);
			bedSpace = bedSpaceState.getBedSpaceIsNotNull() ? bedSpaceState.getBedSpace() : new BedSpaceVo();
			if (bedSpace.getID_BedSpace() == null)
				bedSpace.setBedSpaceType(form.cmbBedSpaceType().getValue());
			form.getLocalContext().setSelectedBedSpace(bedSpace);
			form.getLocalContext().setSelectedBedSpaceState(bedSpaceState);
			
			populateScreenFromData(bedSpace);			
		}
		
	}
	
	
	private void filterBedSpaceTypeList(Bed bed)
	{
		if (bed == null)
			return;
		
		if (Bed.WHITE_BED.getType().getImageId() == bed.getType().getImageId())
		{
			form.cmbBedSpaceType().removeRow(BedSpaceType.CHAIR);
			form.cmbBedSpaceType().setValue(BedSpaceType.BED);
		}
		else
		{
			form.cmbBedSpaceType().removeRow(BedSpaceType.BED);
			form.cmbBedSpaceType().removeRow(BedSpaceType.MATERNITY_BED);
			form.cmbBedSpaceType().removeRow(BedSpaceType.COT);
			if (FormMode.EDIT.equals(form.getMode()))
			{			
				form.cmbBedSpaceType().setEnabled(false);
			}
			form.cmbBedSpaceType().setValue(BedSpaceType.CHAIR);
		}
		
	}


	private void populateScreenFromData(BedSpaceVo bedSpace) 
	{
		form.txtDesc().setValue(bedSpace.getDescription());
		form.cmbBedSpaceType().setValue(bedSpace.getBedSpaceType());
		form.txtBedNumber().setValue(bedSpace.getBedNumber());
		form.cmbDependencyLvl().setValue(bedSpace.getDependency());
		form.chkIsPrivate().setValue(bedSpace.getPrivateBed());
		
		if(bedSpace.getWardTypeIsNotNull())
		{
			if(bedSpace.getWardType().equals(WardType.MAIN))
				form.GroupWardType().setValue(GroupWardTypeEnumeration.rdoMain);
			else if(bedSpace.getWardType().equals(WardType.SIDE))
				form.GroupWardType().setValue(GroupWardTypeEnumeration.rdoSide);
		}
		else
			form.GroupWardType().setValue(GroupWardTypeEnumeration.rdoMain);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.cmbBedSpaceType().getValue() == null)
		{
			errors.add("Bed Space Type is mandatory");
		}
		if(form.GroupWardType().getValue() == null)
		{
			errors.add("Main/Side is mandatory");
		}
						
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Bed Space Configuration", searchErrors);
			
			return searchErrors;
		}
		
		return null;
	}
	
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = getUiErrors();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		populateDataFromScreen(form.getLocalContext().getSelectedBedSpace());
		engine.close(DialogResult.OK);
	}

	private void populateDataFromScreen(BedSpaceVo bedSpaceVo) 
	{
		if(bedSpaceVo == null)
			bedSpaceVo = new BedSpaceVo();
		
		bedSpaceVo.setDescription(form.txtDesc().getValue());
		bedSpaceVo.setBedSpaceType(form.cmbBedSpaceType().getValue());
		bedSpaceVo.setWardType(getSelectedWardType());
		bedSpaceVo.setBedNumber(form.txtBedNumber().getValue());
		bedSpaceVo.setDependency(form.cmbDependencyLvl().getValue());
		bedSpaceVo.setPrivateBed(form.chkIsPrivate().getValue());
		
		BedSpaceStateLiteVo bedSpaceState = form.getLocalContext().getSelectedBedSpaceState();
		bedSpaceState.setBedSpace(bedSpaceVo);
		
		BedSpaceStateStatusLiteVo bedSpaceStatus = bedSpaceState.getCurrentBedStatus();
		if(bedSpaceStatus == null)
		{
			bedSpaceStatus = new BedSpaceStateStatusLiteVo();
			bedSpaceStatus.setBedStatus(BedStatus.AVAILABLE);
			bedSpaceStatus.setStatusDateTime(new DateTime());
			bedSpaceState.setCurrentBedStatus(bedSpaceStatus);
		}
		
		Bed bed = form.getGlobalContext().Core.getBedSpaceProperty();
		bed.setIdentifier(bedSpaceState);
	}

	private WardType getSelectedWardType()
	{
		if(form.GroupWardType().getValue().equals(GroupWardTypeEnumeration.rdoMain))
			return WardType.MAIN;
		else if(form.GroupWardType().getValue().equals(GroupWardTypeEnumeration.rdoSide))
			return WardType.SIDE;
		
		return null;
	}
}
