//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.bedavailabilitytimes;

import ims.core.forms.bedavailabilitytimes.GenForm.grdBedSpaceRow;
import ims.core.vo.BedSpaceVo;
import ims.core.vo.BedSpaceVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open()
	{
		populateBedSpaceGrid(domain.getBedSpaces(form.getGlobalContext().Core.getSelectedBay()));
		form.setMode(FormMode.VIEW);
	}

	private void populateBedSpaceGrid(BedSpaceVoCollection bedSpaces)
	{
		form.grdBedSpace().getRows().clear();
		
		if(bedSpaces == null)
			return;
		
		for(BedSpaceVo bed : bedSpaces)
		{
    		grdBedSpaceRow row = form.grdBedSpace().getRows().newRow();
    		row.setColBedSpaceType(bed.getBedSpaceType() != null ? bed.getBedSpaceType().getText() : null);
    		row.setColWardType(bed.getWardType() != null ? bed.getWardType().getText() : null);
    		row.setColBedNumber(bed.getBedNumber());
    		row.setColTextPosition(bed.getTextPosition());
    		row.setColImagePosition(bed.getImagePosition());
    		
    		row.setValue(bed);
		}
	}

	private void initialize()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}
	
	@Override
	protected void onGrdBedSpaceSelectionChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.btnEdit().setEnabled(form.grdBedSpace().getValue() != null);
		
		if(FormMode.EDIT.equals(form.getMode()))
		{
    		form.timMonOpening().setEnabled(form.chkMonday().getValue());
    		form.timMonClosing().setEnabled(form.chkMonday().getValue());
    		
    		form.timTueOpening().setEnabled(form.chkTuesday().getValue());
    		form.timTueClosing().setEnabled(form.chkTuesday().getValue());
    		
    		form.timWedOpening().setEnabled(form.chkWednesday().getValue());
    		form.timWedClosing().setEnabled(form.chkWednesday().getValue());
    		
    		form.timThuOpening().setEnabled(form.chkThursday().getValue());
    		form.timThuClosing().setEnabled(form.chkThursday().getValue());
    		
    		form.timFriOpening().setEnabled(form.chkFriday().getValue());
    		form.timFriClosing().setEnabled(form.chkFriday().getValue());
    		
    		form.timSatOpening().setEnabled(form.chkSaturday().getValue());
    		form.timSatClosing().setEnabled(form.chkSaturday().getValue());
    		
    		form.timSunOpening().setEnabled(form.chkSunday().getValue());
    		form.timSunClosing().setEnabled(form.chkSunday().getValue());
		}
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onChkSundayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkSunday().getValue())
		{
			form.timSunOpening().setValue(null);
			form.timSunClosing().setValue(null);
		}
	}

	@Override
	protected void onChkSaturdayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkSaturday().getValue())
		{
			form.timSatOpening().setValue(null);
			form.timSatClosing().setValue(null);
		}
	}

	@Override
	protected void onChkFridayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkFriday().getValue())
		{
			form.timFriOpening().setValue(null);
			form.timFriClosing().setValue(null);
		}
	}

	@Override
	protected void onChkThursdayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkThursday().getValue())
		{
			form.timThuOpening().setValue(null);
			form.timThuClosing().setValue(null);
		}
	}
	
	@Override
	protected void onChkWednesdayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkWednesday().getValue())
		{
			form.timWedOpening().setValue(null);
			form.timWedClosing().setValue(null);
		}
	}

	@Override
	protected void onChkTuesdayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkTuesday().getValue())
		{
			form.timTueOpening().setValue(null);
			form.timTueClosing().setValue(null);
		}
	}

	@Override
	protected void onChkMondayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		if(!form.chkMonday().getValue())
		{
			form.timMonOpening().setValue(null);
			form.timMonClosing().setValue(null);
		}
	}
}
