//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5332.26009)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotetrackingbatchtransfer;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.casenotetrackingbatchtransfer.GenForm.GroupSearchChosenEnumeration;
import ims.core.vo.PatientCaseNoteBatchTransferVo;
import ims.core.vo.PatientCaseNoteBatchTransferVoCollection;
import ims.core.vo.lookups.PatIdType;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int COL_TRACKING         = 1;
	private static final int COL_IDENTIFIER       = 2;
	private static final int COL_PATIENT          = 3;
	private static final int COL_FOLDER           = 4;
	private static final int COL_CURRENT_LOCATION = 5;
	private static final int COL_TYPE             = 6;
	private static final int COL_STATUS           = 7;
	private static final int COL_SELECT           = 8;

	private boolean flag = true;
	private void initialise()
	{
		form.GroupSearchChosen().setValue(GroupSearchChosenEnumeration.rdoTrackingID);
		form.btnAddTrackingID().setImage(form.getImages().Core.AddFile16);
		form.btnAddPatientID().setImage(form.getImages().Core.AddFile16);
		form.btnTransfer().setImage(form.getImages().Core.transfer_up_down22x22);

		initialiseDynamicGrid();

	}

	private void initialiseDynamicGrid()
	{
		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		// Initialize label with search identifier criteria
		form.lblPatID().setValue(dispIdType.getText() + " :");

		// Initialize Case Note grid
		form.dyngrdCaseNotes().clear();

		DynamicGridColumn column = form.dyngrdCaseNotes().getColumns().newColumn("Tracking ID.", COL_TRACKING);
		column.setWidth(85);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn(dispIdType.getText(), COL_IDENTIFIER);
		column.setWidth(105);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn("Patient Name", COL_PATIENT);
		column.setWidth(150);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn("Folder", COL_FOLDER);
		column.setWidth(50);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn("Type", COL_TYPE);
		column.setWidth(110);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn("Current Location", COL_CURRENT_LOCATION);
		column.setWidth(150);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn("Status", COL_STATUS);
		column.setWidth(110);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdCaseNotes().getColumns().newColumn("Select", COL_SELECT);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		column.setWidth(-1);
		column.setCanGrow(true);

	}

	private void open()
	{
		clearScreen();
		updateControlsState();

	}

	private void clearScreen()
	{
		form.txtPatientID().setValue(null);
		form.txtTrackingID().setValue(null);
		form.dyngrdCaseNotes().getRows().clear();
	}

	private void populateRequests(PatientCaseNoteBatchTransferVoCollection patientCaseNotes)
	{
	

		if ((patientCaseNotes == null || patientCaseNotes.size() == 0) && form.dyngrdCaseNotes().getRows().size()==0)
		{
			engine.showMessage("No Records found.");
			return;
		}

		for (int i = 0; i < patientCaseNotes.size(); i++)
		{
			addRequestToGrid(patientCaseNotes.get(i));
		}
		//WDEV-20122 - Add records count after populate the grid
		form.lblCountTotalRecords().setValue(((Integer)form.dyngrdCaseNotes().getRows().size()).toString());

	}

	private void addRequestToGrid(PatientCaseNoteBatchTransferVo caseNote)
	{
		if (caseNote == null)
			return;

		// Add request to grid
		DynamicGridRow row = form.dyngrdCaseNotes().getRows().newRow();

		// Tracking No cell
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_TRACKING), DynamicCellType.STRING);
		cell.setValue(caseNote.getTrackingID());
		cell.setTooltip(caseNote.getTrackingID());
		cell.setReadOnly(true);

		// Patient Identifier cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_IDENTIFIER), DynamicCellType.STRING);
		cell.setValue(caseNote.getPatient().getDisplayId() != null ? caseNote.getPatient().getDisplayId().getValue() : "");
		cell.setTooltip(caseNote.getPatient().getDisplayId() != null ? caseNote.getPatient().getDisplayId().getValue() : "");
		cell.setReadOnly(true);

		// Patient Name cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_PATIENT), DynamicCellType.STRING);
		cell.setValue(caseNote.getPatient().getName().toString());
		cell.setTooltip(caseNote.getPatient().getName().toString());
		cell.setReadOnly(true);

		// Folder cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_FOLDER), DynamicCellType.STRING);
		cell.setValue(caseNote.getFolder() != null ? caseNote.getFolder().getText() : "");
		cell.setTooltip(caseNote.getFolder() != null ? caseNote.getFolder().getText() : "");
		cell.setReadOnly(true);

		// Case Note Current Location cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CURRENT_LOCATION), DynamicCellType.STRING);
		cell.setValue(caseNote.getCurrentLocation() != null ? caseNote.getCurrentLocation().getName() : "");
		cell.setTooltip(caseNote.getCurrentLocation() != null ? caseNote.getCurrentLocation().getName() : "");
		cell.setReadOnly(true);

		// Case Note Type cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_TYPE), DynamicCellType.STRING);
		cell.setValue(caseNote.getType() != null ? caseNote.getType().getText() : "");
		cell.setTooltip(caseNote.getType() != null ? caseNote.getType().getText() : "");
		cell.setReadOnly(true);

		// Case Note Status cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.STRING);
		cell.setValue(caseNote.getStatus() != null ? caseNote.getStatus().getText() : "");
		cell.setTooltip(caseNote.getStatus() != null ? caseNote.getStatus().getText() : "");
		cell.setReadOnly(true);

		// Case Note Select cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_SELECT), DynamicCellType.BOOL);
		cell.setValue(flag);
		cell.setReadOnly(false);
		cell.setAutoPostBack(Boolean.TRUE);

		row.setValue(caseNote);



	}

	private PatientCaseNoteBatchTransferVoCollection getCaseNotesFromGrid()
	{
		PatientCaseNoteBatchTransferVoCollection caseNotes = new PatientCaseNoteBatchTransferVoCollection();

		for (int i = 0; i < form.dyngrdCaseNotes().getRows().size(); i++)
		{
			DynamicGridCell cell = form.dyngrdCaseNotes().getRows().get(i).getCells().get(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_SELECT));

			if (Boolean.TRUE.equals(cell.getValue()))
			{
				PatientCaseNoteBatchTransferVo caseNote = (PatientCaseNoteBatchTransferVo) form.dyngrdCaseNotes().getRows().get(i).getValue();
				caseNotes.add(caseNote);
			}
		}

		return caseNotes;
	}

	private Integer getPatientIDForIdentifier(String value)
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		return domain.getPatientIdForIdentifier(dispIdType, value);

	}

	private void updateControlsState()
	{
		form.txtTrackingID().setEnabled(GroupSearchChosenEnumeration.rdoTrackingID.equals(form.GroupSearchChosen().getValue()));
		form.btnAddTrackingID().setEnabled(GroupSearchChosenEnumeration.rdoTrackingID.equals(form.GroupSearchChosen().getValue()));
		form.txtPatientID().setEnabled(GroupSearchChosenEnumeration.rdoPatientID.equals(form.GroupSearchChosen().getValue()));
		form.btnAddPatientID().setEnabled(GroupSearchChosenEnumeration.rdoPatientID.equals(form.GroupSearchChosen().getValue()));
		
		if (GroupSearchChosenEnumeration.rdoTrackingID.equals(form.GroupSearchChosen().getValue())) {
			form.btnAddTrackingID().setAsDefaultButton();
			form.txtTrackingID().setFocus();
		}
		else {
			form.btnAddPatientID().setAsDefaultButton();
			form.txtPatientID().setFocus();
		}
		
		
		form.btnTransfer().setEnabled(form.dyngrdCaseNotes().getRows().size() > 0);
		//WDEV-20122
		if(form.dyngrdCaseNotes().getRows().size()==0)
			form.lblCountTotalRecords().setValue("0");

	}
	//WDEV-20122
	private ArrayList<Integer> populatePatientCaseNoteIDsfromGrid() { //WDEV-23877
		if(form.dyngrdCaseNotes().getRows().size() > 0)
		{	
			ArrayList<Integer> trackingIds = new ArrayList<Integer>();
			for(int i=0;i < form.dyngrdCaseNotes().getRows().size();i++)
			{
				PatientCaseNoteBatchTransferVo rowValue = (PatientCaseNoteBatchTransferVo)form.dyngrdCaseNotes().getRows().get(i).getValue();
				trackingIds.add(Integer.valueOf(rowValue.getID_PatientCaseNote())); //WDEV-23877
			}
			return trackingIds;
		}
		return null;
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.CaseNoteBatchTransfer) && DialogResult.OK.equals(result))
		{	
			//WDEV-20122
			ArrayList<Integer> patientCasNotesIDsfromGrid = populatePatientCaseNoteIDsfromGrid(); //WDEV-23877
			form.dyngrdCaseNotes().getRows().clear();
			flag=Boolean.FALSE;
			populateRequests(domain.listCaseNotes(patientCasNotesIDsfromGrid)); //WDEV-23877
			updateControlsState();
		}
	}

	@Override
	protected void onBtnAddPatientIDClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.txtPatientID().getValue() == null)
		{
			engine.showMessage("Patient ID is mandatory.");
			return;
		}

		
		Integer patID = getPatientIDForIdentifier(form.txtPatientID().getValue());

		if (patID == 0)
		{
			engine.showMessage("No Patient found for the given identifier.");
			return;
		}
		
		//WDEV-20122
		populateRequests(domain.listCaseNotes(patID.toString(), null, populatePatientCaseNoteIDsfromGrid())); //WDEV-23877
		form.txtPatientID().setValue(null);

		updateControlsState();
	}

	@Override
	protected void onBtnAddTrackingIDClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.txtTrackingID().getValue() == null)
		{
			engine.showMessage("Tracking ID is mandatory.");
			return;
		}
		if (!Boolean.TRUE.equals(domain.recordExistsForTrackingID(form.txtTrackingID().getValue())))
		{
			engine.showMessage("No Patient Case Note found for the given Tracking ID.");
			return;
		}

		//WDEV-20122
		populateRequests(domain.listCaseNotes(null, form.txtTrackingID().getValue(), populatePatientCaseNoteIDsfromGrid())); //WDEV-23877
		form.txtTrackingID().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	@Override
	protected void onBtnTransferClick() throws PresentationLogicException
	{
		PatientCaseNoteBatchTransferVoCollection selectedCaseNotes = getCaseNotesFromGrid();

		if (selectedCaseNotes == null || selectedCaseNotes.size() == 0)
		{
			engine.showMessage("No records were selected for transfer.");
			return;
		}

		form.getGlobalContext().Core.setPatientCaseNotesForBatchTransfer(getCaseNotesFromGrid());
		engine.open(form.getForms().Core.CaseNoteBatchTransfer);

	}

	@Override
	protected void onRadioButtonGroupSearchChosenValueChanged()
			throws PresentationLogicException 
	{
		form.txtPatientID().setValue(null);
		form.txtTrackingID().setValue(null);
		
		updateControlsState(); 		
	}


}
