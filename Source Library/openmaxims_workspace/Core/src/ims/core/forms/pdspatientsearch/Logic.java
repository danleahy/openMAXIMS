//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Silviu Checherita using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdspatientsearch;

import ims.admin.helper.NHSNumberCalculator;
import ims.admin.helper.SamlParser;
import ims.admin.vo.PDSConfigurationVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.pdspatientsearch.GenForm.lyrSearchLayer.tabLocalSearchContainer;
import ims.core.forms.pdspatientsearch.GenForm.lyrSearchLayer.tabPDSSearchContainer;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.helper.PdsException;
import ims.core.helper.PdsRequestParameters;
import ims.core.helper.PdsRetrievalQueryHelper;
import ims.core.vo.GpShortVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.PDSAddrVo;
import ims.core.vo.PDSAdvancedSearchRequestVo;
import ims.core.vo.PDSAdvancedSearchResultVo;
import ims.core.vo.PDSAdvancedSearchResultVoCollection;
import ims.core.vo.PDSPatientFilterSearchCriteriaVo;
import ims.core.vo.PDSPatientGPVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.PersonAddress;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.PDSAsyncRequestType;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.core.vo.lookups.PDSHistoryDataFlag;
import ims.core.vo.lookups.PDSIgnoreHistoryIndicator;
import ims.core.vo.lookups.PDSSearchStatus;
import ims.core.vo.lookups.PDSSearchType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatIdTypeCollection;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.TimeUnitsSecondsToYears;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAddressProvider;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.vo.ValueObject;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	//------------------------------------------------------------------------------------------------------------------------
	//	Form constants
	//------------------------------------------------------------------------------------------------------------------------

	private static final int COL_IDENTIFIER_IDENT	= 1;
	private static final int COL_SURNAME_IDENT		= 2;
	private static final int COL_FORENAME_IDENT		= 3;
	private static final int COL_SEX_IDENT			= 4;
	private static final int COL_DOB_IDENT			= 5;
	private static final int COL_AGE_IDENT			= 6;
	private static final int COL_ADDRESS_IDENT		= 7;
	private static final int COL_PRIMARY_CARE		= 8;
	private static final int COL_OPTIONAL 			= 9;//WDEV-21622
	
	private static final int TAB_LOCAL_SEARCH		= 1;
	private static final int TAB_PDS_SEARCH			= 2;
	
	private static final int MAX_RUNS_FOR_TIMER		= 10;
	
	private static final String	 DEMOGRAPHICS_TYPE_UK = "UK";//WDEV-21622
	private static final String DEMOGRAPHICS_TYPE_IRISH = "IRISH";
	
	//------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//------------------------------------------------------------------------------------------------------------------------


	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{	
		form.getGlobalContext().Core.setPdsSuccesfullSearch(null);
		form.getGlobalContext().Core.setCheckKeyFieldsOnPDSDemographicsOnOpenFromPdsSearch(null); //WDEV-21414
		
		form.getLocalContext().setPDSConfiguration(domain.getPDSConfiguration());

		if(form.getLocalContext().getPDSConfiguration() == null)
			throw new FormOpenException("Patient Search Configuration is not set.");

//WDEV-21913 Start fintan.kelly 22/04/2015 - changed following if statement to check for non blank rbac role
//		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None") && (engine.getLoggedInRole().getRequiresPDS() && engine.getLoggedInRole().getSpineRbacRole()==null))
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None") && (engine.getLoggedInRole().getRequiresPDS() && !"".equals(engine.getLoggedInRole().getSpineRbacRole())))
//WDEV-21913 End
		{
			//initalise PDS controls
			form.lyrSearch().tabLocalSearch().imbLocalSearchSearch().setPostbackRequirePdsAuthentication(true);
			form.lyrSearch().tabPDSSearch().imbPdsSearchSearch().setPostbackRequirePdsAuthentication(true);
			form.dyngrdSearch().setRowSelectionChangedEventRequirePdsAuthentication(true);
			form.lyrSearch().tabPDSSearch().imbPdsSearchNewPat().setPostbackRequirePdsAuthentication(true);
			
			//WDEV-21810 - Address text not allowed in search, so just display purposes from possible local search.
			form.lyrSearch().tabPDSSearch().txtPdsSearchAddress().setEnabled(false);
			
			// PDS AUTHENTICATION
			PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
			
			//WDEV-21810
			if(!pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_PATIENT_ADVANCED, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml()))
			{
				form.lyrSearch().tabPDSSearch().txtPdsSearchGp().setEnabled(false);
				form.lyrSearch().tabPDSSearch().imbPdsSearchGP().setEnabled(false);				
			}
			else
			{
				form.lyrSearch().tabPDSSearch().txtPdsSearchGp().setEnabled(false);
				form.lyrSearch().tabPDSSearch().imbPdsSearchGP().setEnabled(true);				
			}
			//WDEV-21810
			
			if(!pdsAuth.hasRightsFor(PdsRight.POSTCODE_SEARCH, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml()))
			{
				form.lyrSearch().tabPDSSearch().txtPdsSearchPostcode().setEnabled(false); 
				form.lyrSearch().tabPDSSearch().imbPdsSearchPostcode().setEnabled(false);
			}
			else
			{
				form.lyrSearch().tabPDSSearch().txtPdsSearchPostcode().setEnabled(true);
				form.lyrSearch().tabPDSSearch().imbPdsSearchPostcode().setEnabled(true);
			}
			// END PDS AUTHENTICATION
		}		
		else if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
		{
			form.lyrSearch().tabPDSSearch().txtPdsSearchPostcode().setEnabled(false); 
			form.lyrSearch().tabPDSSearch().imbPdsSearchPostcode().setEnabled(false);
			form.lyrSearch().tabPDSSearch().txtPdsSearchGp().setEnabled(false);
			form.lyrSearch().tabPDSSearch().imbPdsSearchGP().setEnabled(false);
			//WDEV-21810 - Address text not allowed in search, so just display purposes from possible local search.
			form.lyrSearch().tabPDSSearch().txtPdsSearchAddress().setEnabled(false);
		}
		
		//WDEV-22854
		// Clear selected patient when entering the form
		if (ConfigFlag.UI.CLEAR_PATIENT_CONTEXTS_ON_SELECTION_OF_PATIENT_SEARCH_FORM.getValue())
		{
			//Clear the selected patient information in the Engine
			form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(null); //WDEV-22412
			clearSelectedPatientContexts();
			engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		}
		
		initialize();
		open();
	}

	@Override
	protected void onlyrSearchTabChanged(LayerBridge tab) 
	{
		if (tab.equals(form.lyrSearch().tabLocalSearch()) && form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria() != null)
		{
			populateScreenFromSearchCriteria(form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria(), TAB_LOCAL_SEARCH);
			populateGridWithPatients(form.getLocalContext().getLocalPatientShortResultsColl());
			form.dyngrdSearch().setValue(form.getLocalContext().getPatientSelectedOnLocalSearchTab());
		}
		else if (tab.equals(form.lyrSearch().tabPDSSearch()) && form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria() != null)
		{
			populateScreenFromSearchCriteria(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria(), TAB_PDS_SEARCH);
			populateGridWithAdvancedSearchResult(form.getLocalContext().getPDSAdvancedSearchResultColl());
		}
		else if (tab.equals(form.lyrSearch().tabPDSSearch()) && form.getLocalContext().getPatientFoundByNHSOnPDSIsNotNull())
		{
			form.dyngrdSearch().getRows().clear();
			addRowToDynGrid(form.getLocalContext().getPatientFoundByNHSOnPDS());
		}
		updateControlsState();
	}

	@Override
	protected void onBtnSelectClick() throws PresentationLogicException 
	{
		selectPatient();	
	}

	@Override
	protected void onDyngrdSearchRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		if (ConfigFlag.DOM.USE_PDS.getValue().equals("None"))//WDEV-21622
		{
			form.getGlobalContext().Core.setPatientShort(null); //WDEV-22255
			form.getGlobalContext().Core.setPatientToBeDisplayed((PatientShort)form.dyngrdSearch().getValue());
			engine.open(form.getForms().Core.PDSDemographics);
			return;
		}
		
		selectionChanged();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{	
    		case GenForm.ContextMenus.CoreNamespace.PDSPatientSearcchMenu.Select: 
    				selectPatient();
    		break;
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.DuplicatedPatients) && result.equals(DialogResult.OK))
		{
			//DuplicatedPatients global context is used for selected patient !
			PatientLiteVoCollection selected = form.getGlobalContext().Core.getDuplicatedPatients();
			//boolean retrieved = true;
			
			if(selected != null && selected.size() > 0)
			{
				Patient patientToSave = domain.getPatient(selected.get(0));
				Patient pdsPatient = form.getLocalContext().getPdsPatient();
				
				//WDEV-21414
				if(patientToSave.getIdentifiers() == null)
					patientToSave.setIdentifiers(new PatientIdCollection());
				
				if (pdsPatient.getNhsn()!=null)
				{
					patientToSave.getIdentifiers().add(pdsPatient.getNhsn());
					form.getGlobalContext().Core.setCheckKeyFieldsOnPDSDemographicsOnOpenFromPdsSearch(true);
				}
				
				form.getGlobalContext().Core.setPatientShort(patientToSave);
				form.getGlobalContext().Core.setPatientToBeDisplayed(patientToSave);
				form.getGlobalContext().Core.setPdsSuccesfullSearch(Boolean.TRUE);
				
				engine.open(form.getForms().Core.PDSDemographics);
			}
		}
		else if (formName.equals(form.getForms().Core.DuplicatedPatients) && result.equals(DialogResult.CANCEL))
		{
			//create local patient record
			Patient patientToSave = form.getLocalContext().getPdsPatient();
			
			try
			{
				String[] errors = patientToSave.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}
				
				patientToSave = domain.savePatient(patientToSave, false, false);
				
				form.getGlobalContext().Core.setPatientShort(patientToSave);
				form.getGlobalContext().Core.setPatientToBeDisplayed(patientToSave);
				
				form.getGlobalContext().Core.setPdsSuccesfullSearch(Boolean.TRUE);
				engine.open(form.getForms().Core.PDSDemographics);
			}
			catch(Exception e)
			{
				engine.showMessage("Error updating LPI record: " + e.toString(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
				return;
			}
		}
		else if (formName.equals(form.getForms().Core.AddressSelection) && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setAddressResult(form.getGlobalContext().Core.getPersonAddress());
			displayAddress();	

			form.getGlobalContext().Core.setAddressSearchText(null);
			form.getGlobalContext().Core.setPersonAddress(null);
			form.getGlobalContext().Core.setAddressSearchType(null);
		}	
		else if (formName.equals(form.getForms().Core.GPSelection) && result.equals(DialogResult.OK))
		{
			if (form.getGlobalContext().Core.getGPPracticeIsNotNull())
			{
				OrganisationWithSitesVo gpPractice = domain.getGPPractice(form.getGlobalContext().Core.getGPPractice());
				form.lyrSearch().tabPDSSearch().txtPdsSearchGp().setValue(getPracticeCodeBasedOnCodeMappings(gpPractice,TaxonomyType.NAT_LOC_CODE));
			}
		}
	}

	private String getPracticeCodeBasedOnCodeMappings(OrganisationWithSitesVo gpPractice, TaxonomyType taxonomyType)
	{
		if (gpPractice==null)
			return null;
		
		TaxonomyMapCollection collCodeMappings = gpPractice.getCodeMappings();
		for (int i=0; collCodeMappings!=null && i<collCodeMappings.size();i++)
		{
			if (collCodeMappings.get(i)!=null && taxonomyType.equals(collCodeMappings.get(i).getTaxonomyName()))
			{
				return collCodeMappings.get(i).getTaxonomyCode();
			}
		}
		
		return null;
	}

	@Override
	protected void onImbLocalSearchClearClick() throws PresentationLogicException 
	{
		clearSearchFields(TAB_LOCAL_SEARCH, true);
		
		//WDEV-22854
		if (ConfigFlag.UI.PATIENT_SEARCH_CLEAR_ALL_CONTEXTS_ON_SELECTION_OF_CLEAR.getValue())
		{
			form.getGlobalContext().Core.setEpisodeofCareShort(null);
    		form.getGlobalContext().Core.setCurrentCareContext(null);
    		form.getGlobalContext().Core.setCurrentClinicalContact(null);
    		form.getGlobalContext().Clinical.PatientSummary.clearCareSpell();
		}
		
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		form.getGlobalContext().Core.setPatientShort(null); //WDEV-22854
		form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(null); //WDEV-22412
		form.getLocalContext().setPatientSelectedOnLocalSearchTab(null);
		form.getLocalContext().setLocalPatientShortResultsColl(null);
		form.getLocalContext().setPatientFoundByNHSOnPDS(null);
		//WDEV-22341
		form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setVisible(false);
		form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setEnabled(false); //WDEV-22341
		
		form.lyrSearch().tabLocalSearch().txtLocalSearchSurname().setFocus();
	}

	@Override
	protected void onImbLocalSearchSearchClick() throws PresentationLogicException 
	{
		//defaultDoB(form.lyrSearch().tabLocalSearch().pdtLocalSearchDOB().getValue()); //WDEV-21622
		//defaultDoD(form.lyrSearch().tabLocalSearch().pdtLocalSearchDOD().getValue()); //WDEV-21622
		
		if(nonIdentifierFieldEntered())
		{
			form.lyrSearch().tabLocalSearch().txtLocalSeachNHSNo().setValue("");
			form.lyrSearch().tabLocalSearch().txtLocalSearchIdValue().setValue("");
		}
		
		//WDEV-21814
		if (form.lyrSearch().tabPDSSearch().isVisible())
		{
			//user is on the PDS search tab so we must continue with PDS search.
			form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(populateSearchCriteriaFromScreen(TAB_PDS_SEARCH));
			onImbPdsSearchSearchClick();
			return;
		}
		
		if (validateSearchCriteria(TAB_LOCAL_SEARCH,false))
		{
			form.getLocalContext().setisLocalSearchPerformed(true);
			form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(populateSearchCriteriaFromScreen(TAB_LOCAL_SEARCH));
			doLocalSearch();
		}
	}

	@Override
	protected void onImbLocalSearchNewPatClick() throws PresentationLogicException 
	{
		newPatient();
	}

	@Override
	protected void onImbPdsSearchClearClick() throws PresentationLogicException 
	{
		clearSearchFields(TAB_PDS_SEARCH, true);
		form.getLocalContext().setPDSAdvancedSearchResultColl(null);
		form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(null); //WDEV-22412
		
		//WDEV-22854
		if (ConfigFlag.UI.PATIENT_SEARCH_CLEAR_ALL_CONTEXTS_ON_SELECTION_OF_CLEAR.getValue())
		{
			form.getGlobalContext().Core.setEpisodeofCareShort(null);
    		form.getGlobalContext().Core.setCurrentCareContext(null);
    		form.getGlobalContext().Core.setCurrentClinicalContact(null);
    		form.getGlobalContext().Clinical.PatientSummary.clearCareSpell();
		}
	}

	@Override
	protected void onImbPdsSearchSearchClick() throws PresentationLogicException 
	{
		int returnedMatch = -1;
		//WDEV-21813
		if (form.dyngrdSearch().getRows()!=null && form.dyngrdSearch().getRows().size()>1)
		{
			returnedMatch = checkForOneMatchInCurrentList();
			if (returnedMatch == -1)
			{
				form.getLocalContext().setTraceMessageBoxId((engine.showMessage("One match not found in current list. Would you like refine the current search criteria for the list of results displayed?", "Question", MessageButtons.YESNO, MessageIcon.QUESTION)));
			}
			else
			{
				//display one match
				PDSAdvancedSearchResultVo result = (PDSAdvancedSearchResultVo)form.dyngrdSearch().getRows().get(returnedMatch).getValue();
				//DynamicGridRow row = form.dyngrdSearch().getRows().get(returnedMatch - 1);
				form.dyngrdSearch().getRows().clear();
				DynamicGridRow row = form.dyngrdSearch().getRows().newRow();
				
				if (result.getSurname() != null)
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_SURNAME_IDENT), DynamicCellType.STRING);
					cellLabel.setValue(result.getSurname());
				}

				if (result.getForename() != null)
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_FORENAME_IDENT), DynamicCellType.STRING);
					cellLabel.setValue(result.getForename());
				}

				if (result.getNHSNumber() != null) 
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_IDENTIFIER_IDENT), DynamicCellType.STRING);
					cellLabel.setValue(result.getNHSNumber());
				}

				if (result.getGender() != null) 
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_SEX_IDENT), DynamicCellType.STRING);
					cellLabel.setValue(result.getGender().getText());				
				}

				if (result.getDateOfBirth() != null)
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_DOB_IDENT), DynamicCellType.STRING);
					cellLabel.setValue(result.getDateOfBirth().toString(DateFormat.STANDARD));
				}
				
				//WDEV-22452
				if (result.getPDSAddressesIsNotNull())
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_ADDRESS_IDENT), DynamicCellType.STRING);
					String adrStr = "";
					for (PDSAddrVo pdsaddre : result.getPDSAddresses())
					{
						adrStr += pdsaddre.getAddressLines();
					}
					cellLabel.setValue(adrStr);
				}
				//WDEV-22452
				
				row.setValue(result);

				if (result.getDateOfDeath() != null)
				{
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
				}

			}
		}
		else
			doPDSSearch(false, false);	
	}

	
	private int checkForOneMatchInCurrentList() 
	{		
		
		//Surename/DOB and Gender are mandatory for simple search

		if (form.lyrSearch().tabPDSSearch().txtPdsSearchSurname().getValue()==null
			|| form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().getValue()==null
			|| form.lyrSearch().tabPDSSearch().cmbPdsSearchSex().getValue()==null)
		{
			return 0;
		}
		
		int oneMatch = 0;
		boolean SurnameMatch = false;
		boolean ForenameMatch = false;
		boolean DOBMatch = false;
		boolean GenderMatch = false;
		int lastIndexFound = -1;
			
		PDSAdvancedSearchResultVo pat = null;
		
		for (int i=0; i<form.dyngrdSearch().getRows().size(); i++)
		{
			if (form.dyngrdSearch().getRows().get(i).getValue() instanceof PDSAdvancedSearchResultVo)
			{
				pat = (PDSAdvancedSearchResultVo)form.dyngrdSearch().getRows().get(i).getValue();
				
				//check for one match on Surname
				if (pat.getSurnameIsNotNull() && pat.getSurname().toUpperCase().equals(form.lyrSearch().tabPDSSearch().txtPdsSearchSurname().getValue().toUpperCase()))
					SurnameMatch = true;
				else
					SurnameMatch = false;
				
				//check match on Forename
				if (form.lyrSearch().tabPDSSearch().txtPdsSearchForename().getValue()!=null 
						&& !form.lyrSearch().tabPDSSearch().txtPdsSearchForename().getValue().equals(""))
				{
					if (pat.getForenameIsNotNull() && pat.getForename().toUpperCase().equals(form.lyrSearch().tabPDSSearch().txtPdsSearchForename().getValue().toUpperCase()))
						ForenameMatch=true;
					else
						ForenameMatch=false;
				}	
								
				//check for one match on dob
				if (pat.getDateOfBirthIsNotNull())
				{
					Date resultDob = pat.getDateOfBirth();
					
					if (form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().getValue().getDay()!=null
							&& form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().getValue().getMonth()!=null
							&& form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().getValue().getYear()!=null)
					{
						Date searchDob;
						try {
							searchDob = new Date(form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().getValue().toString());
							if (resultDob.equals(searchDob))
								DOBMatch = true;
							else
								DOBMatch = false;							
						} catch (ParseException e) {
							e.printStackTrace();
						}
					}					
					else
						DOBMatch = false;
				}
				else
					DOBMatch = false;

				//check for one match on gender
				if (pat.getGenderIsNotNull() && pat.getGender().equals(form.lyrSearch().tabPDSSearch().cmbPdsSearchSex().getValue()))
					GenderMatch = true;
				else
					GenderMatch = false;

				if (SurnameMatch && ForenameMatch && DOBMatch && GenderMatch)
				{
					oneMatch++;
					lastIndexFound = i;
				}
			}
			
		}
		
		if (oneMatch==1)
			return lastIndexFound;
		
		return -1;
	}

	@Override
	protected void onImbPdsSearchNewPatClick() throws PresentationLogicException 
	{
		// PDS AUTHENTICATION
		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
		if(!pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
		{
			engine.showMessage(pdsAuth.getLastError(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return;
		}
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		// END PDS AUTHENTICATION
		
		newPatient();
	}


	@Override
	protected void onImbPdsSearchGPClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Core.GPSelection);
	}

	@Override
	protected void onImbPdsSearchPostcodeClick() throws PresentationLogicException 
	{
		tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
		IAddressProvider l_addressprovider = engine.getAddressProvider();
		if(l_addressprovider == null)
			throw new PresentationLogicException("Please Configure Address Provider");

		PersonAddress personAddress = new PersonAddress();
		PersonAddress[] personAddressResult = new PersonAddress[0];

		try
		{			
			if (tabPDSSearch.txtPdsSearchPostcode().getValue() != null && !tabPDSSearch.txtPdsSearchPostcode().getValue().equals(""))
			{
				personAddress.setAddressSearchText(tabPDSSearch.txtPdsSearchPostcode().getValue());
				form.getGlobalContext().Core.setAddressSearchType("SEARCH");
			}
			else
			{
				engine.showMessage("Please enter a post code or keywords from the first or second line of the address.","Warning", MessageButtons.OK, MessageIcon.WARNING); //WDEV-21356
				return;
			}
			personAddressResult = (PersonAddress[])l_addressprovider.getAddress(personAddress,form.getGlobalContext().Core.getAddressSearchType(),"",""); // return result or ambiglist
		}
		catch (PresentationLogicException pe)
		{
			engine.showMessage(pe.getMessage(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
		}

		if (personAddressResult != null && personAddressResult.length == 1)
		{
			form.getLocalContext().setAddressResult(personAddressResult[0]);
		}
		else
		{
			form.getGlobalContext().Core.setAddressSearchText(tabPDSSearch.txtPdsSearchPostcode().getValue());
			form.getGlobalContext().Core.setPersonAddress(personAddress);
			engine.open(form.getForms().Core.AddressSelection);
		}
	}

	@Override
	protected void onImbLocalSearchPoscodeClick() throws PresentationLogicException 
	{
		tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
		IAddressProvider l_addressprovider = engine.getAddressProvider();
		if(l_addressprovider == null)
			throw new PresentationLogicException("Please Configure Address Provider");

		PersonAddress personAddress = new PersonAddress();
		PersonAddress[] personAddressResult = new PersonAddress[0];

		try
		{			
			if (tabLocalSearch.txtLocalSearchPostcode().getValue() != null && !tabLocalSearch.txtLocalSearchPostcode().getValue().equals(""))
			{
				personAddress.setAddressSearchText(tabLocalSearch.txtLocalSearchPostcode().getValue());
				form.getGlobalContext().Core.setAddressSearchType("SEARCH");
			}
			else
			{
				engine.showMessage("Please enter a post code or keywords from the first or second line of the address.","Warning", MessageButtons.OK, MessageIcon.WARNING); //WDEV-21356
				return;
			}
			personAddressResult = (PersonAddress[])l_addressprovider.getAddress(personAddress,form.getGlobalContext().Core.getAddressSearchType(),"",""); // return result or ambiglist
		}
		catch (PresentationLogicException pe)
		{
			engine.showMessage(pe.getMessage(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
		}

		if (personAddressResult != null && personAddressResult.length == 1)
		{
			form.getLocalContext().setAddressResult(personAddressResult[0]);
		}
		else
		{
			form.getGlobalContext().Core.setAddressSearchText(tabLocalSearch.txtLocalSearchPostcode().getValue());
			form.getGlobalContext().Core.setPersonAddress(personAddress);
			engine.open(form.getForms().Core.AddressSelection);
		}
	}

	private void doPDSSearch(Boolean launchedFromLocalSearch, Boolean launchedFromPatientSelection)
	{
		// PDS AUTHENTICATION
		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
		if(!pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
		{
			engine.showMessage(pdsAuth.getLastError(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return;
		}
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		// END PDS AUTHENTICATION

		
		if (launchedFromLocalSearch)
		{
			//form.lyrSearch().tabPDSSearch().setHeaderEnabled(true);
			form.lyrSearch().showtabPDSSearch();
			
			populateScreenFromSearchCriteria(form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria(), TAB_PDS_SEARCH);
		}
		
		if (launchedFromPatientSelection)
		{
			setPDSSearchCriteriaWithSelectedPatientDetails(form.getLocalContext().getPatientSelectedOnLocalSearchTab());
			//form.lyrSearch().tabPDSSearch().setHeaderEnabled(true);
			form.lyrSearch().showtabPDSSearch();
		}
		
		
		if (validateSearchCriteria(TAB_PDS_SEARCH,form.lyrSearch().tabPDSSearch().chkPdsSearchAlgorithmicTrace().getValue()))
		{
			form.getGlobalContext().Core.setPDSPatientFilterSearchCriteria(populateSearchCriteriaFromScreen(TAB_PDS_SEARCH));
			form.getLocalContext().setIsPDSSearchPerformed(true);//WDEV-21514
			if (savePDSAdvancedSearchRequest())
			{
				form.setMode(FormMode.EDIT);
				form.getTimers().gettimerAdvancedSearch().setEnabled(true);
				form.getLocalContext().setTimerTimesRun(0);
			}
		}
	}

	private boolean savePDSAdvancedSearchRequest()
	{
		PDSAdvancedSearchRequestVo pdsAdvancedSearchReqToSave=populateAdvancedSearchReqFromScreen();
		
		//WDEV-21819
		if (pdsAdvancedSearchReqToSave==null)
			return false;
		
		String[] errors = pdsAdvancedSearchReqToSave.validate();
					
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			//domain.saveRequest(pdsAdvancedSearchReqToSave);
			form.getLocalContext().setAdvancedRequest(domain.saveRequest(pdsAdvancedSearchReqToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return false;
		}
		
		return true;
	}

	private PDSAdvancedSearchRequestVo populateAdvancedSearchReqFromScreen()
	{
		PDSAdvancedSearchRequestVo pdsAdvancedSearchReq=new PDSAdvancedSearchRequestVo();
		
		tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
		
		//WDEV-21810
		if (isPds())
		{
			// PDS AUTHENTICATION
			boolean advSearchPDS = false;
			PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
			
			if (form.getGlobalContext().Core.getSamlXml()==null)
				form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());			
		
			//WDEV-22623 - Simple trace is replaced with Advanced trace, where the number of records returned are checked and only one allowed for simple trace
			advSearchPDS = pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml());
			// END PDS AUTHENTICATION
			
			if (advSearchPDS)
			{
				SamlParser samlParser;
				try {
					samlParser = new SamlParser();

					PDSConfigurationVo conf = getPdsConfiguration();				
				
					if (form.getGlobalContext().Core.getSamlXmlIsNotNull())
					{							
						samlParser.loadFileContent(form.getGlobalContext().Core.getSamlXml());							
						pdsAdvancedSearchReq.setSDSRoleProfileId(samlParser.getValueForField(SamlParser.UID));							
						pdsAdvancedSearchReq.setSDSUserId(samlParser.getValueForField(SamlParser.UID));							
	
						//generalUpdateRequestPDS.setSDSJobRoleCode(samlParser.getValueForField(SamlParser.NHSJOBROLECODE));
						//WDEV-22262 only need to pass down logged in rbac role
						pdsAdvancedSearchReq.setSDSJobRoleCode(engine.getLoggedInRole().getSpineRbacRole().getRoleCode());
					}
					else if (conf!=null
							&& conf.getPDS_AUTHENTICATIONIsNotNull() 
							&& !conf.getPDS_AUTHENTICATION())
					{					
						pdsAdvancedSearchReq.setSDSJobRoleCode("S0010:G0020:R0050");
						pdsAdvancedSearchReq.setSDSRoleProfileId("R8000");
						pdsAdvancedSearchReq.setSDSUserId("665289892010");
					}
					
					pdsAdvancedSearchReq.setActive(Boolean.TRUE);
					pdsAdvancedSearchReq.setRequestType(PDSAsyncRequestType.ADVANCEDTRACE);
					pdsAdvancedSearchReq.setRequestDate(new DateTime());
					pdsAdvancedSearchReq.setSearchStatus(PDSSearchStatus.SUBMITTED);
					
					//WDEV-21819
					pdsAdvancedSearchReq.setSearchType(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getAlgorithmicTrace() ? PDSSearchType.ALGORITHMIC : PDSSearchType.ALPHANUMERIC);
					
					pdsAdvancedSearchReq.setHistoricDataFlag(Boolean.TRUE.equals(form.getLocalContext().getPDSConfiguration().getTRACE_HISTORY_DATA_INDICATOR()) ?  PDSHistoryDataFlag.Y : PDSHistoryDataFlag.N);
					pdsAdvancedSearchReq.setIgnoreHistoryIndicator(Boolean.TRUE.equals(form.getLocalContext().getPDSConfiguration().getTRACE_ADVANCED_IGNORE_HISTORY()) ?  PDSIgnoreHistoryIndicator.ZERO : PDSIgnoreHistoryIndicator.ZERO);  //To Do
								
					
					//WDEV-21810
					//WDEV-21819
					pdsAdvancedSearchReq.setSurname(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getSurname()!=null ?form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getSurname().toUpperCase():null);
					
					//WDEV-21393
					if (Boolean.TRUE.equals(form.lyrSearch().tabPDSSearch().chkPdsSearchAlgorithmicTrace().getValue()))
					{
						pdsAdvancedSearchReq.setForename(getForename(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getForename()));
						pdsAdvancedSearchReq.setMiddleName(getMiddlename(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getForename()));
					}
					else
					{
						pdsAdvancedSearchReq.setForename(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getForename()!=null?form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getForename().toUpperCase():null);
					}
					pdsAdvancedSearchReq.setGender(form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria().getSex());
					//WDEV-21819
					
					
					PDSConfigurationVo pdsConfig = form.getLocalContext().getPDSConfiguration();
					
					//WDEV-21622
					//WDEV-21818
					//WDEV-21816
					if (form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().getValue())
					{			
						Date dobFrom = getPDSDateFromExtended(tabPDSSearch.pdtPdsSearchDoB().getValue());			
						pdsAdvancedSearchReq.setFromDateOfBirth(dobFrom);
			
						if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()!=null)
							pdsAdvancedSearchReq.setDOBRangeUnit(TimeUnitsSecondsToYears.MONTHS);
						else if (tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()!=null)
							pdsAdvancedSearchReq.setDOBRangeUnit(TimeUnitsSecondsToYears.YEARS);
						
						pdsAdvancedSearchReq.setDOBRangeValue(pdsConfig.getDOB_DATE_RANGE());
						
					}
					else if (tabPDSSearch.pdtPdsSearchDoB().getValue()!=null)
					{
						//WDEV-21816 - check validated previously
						if (tabPDSSearch.pdtPdsSearchDoB().getValue().getDay()==null)
						{
							if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()!=null && tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()!=null)
								pdsAdvancedSearchReq.setDOBPartialSearchBy(TimeUnitsSecondsToYears.MONTHS); //to indicate a partial date month and year
							else if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()==null && tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()!=null)
								pdsAdvancedSearchReq.setDOBPartialSearchBy(TimeUnitsSecondsToYears.YEARS); //to indicate a partial date year
						}
						pdsAdvancedSearchReq.setFromDateOfBirth(getDateFrom(tabPDSSearch.pdtPdsSearchDoB().getValue()));
					}
						
			
					if (form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoD().getValue())
					{		
						Date dodFrom = getPDSDateFromExtended(tabPDSSearch.pdtPdsSearchDoD().getValue());
						pdsAdvancedSearchReq.setFromDateOfDeath(dodFrom);
						
						if (tabPDSSearch.pdtPdsSearchDoD().getValue().getMonth()!=null)
							pdsAdvancedSearchReq.setDODRangeUnit(TimeUnitsSecondsToYears.MONTHS);
						else if (tabPDSSearch.pdtPdsSearchDoD().getValue().getYear()!=null)
							pdsAdvancedSearchReq.setDODRangeUnit(TimeUnitsSecondsToYears.YEARS);
						
						pdsAdvancedSearchReq.setDODRangeValue(pdsConfig.getDOD_DATE_RANGE());
					}
					else if (tabPDSSearch.pdtPdsSearchDoD().getValue()!=null)
					{
						//WDEV-21816
						if (tabPDSSearch.pdtPdsSearchDoD().getValue().getMonth()!=null && tabPDSSearch.pdtPdsSearchDoD().getValue().getYear()!=null)
							pdsAdvancedSearchReq.setDODPartialSearchBy(TimeUnitsSecondsToYears.MONTHS); //to indicate a partial date month and year
						else if (tabPDSSearch.pdtPdsSearchDoD().getValue().getMonth()==null && tabPDSSearch.pdtPdsSearchDoD().getValue().getYear()!=null)
							pdsAdvancedSearchReq.setDODPartialSearchBy(TimeUnitsSecondsToYears.YEARS); //to indicate a partial date year
						
						pdsAdvancedSearchReq.setFromDateOfDeath(getDateFrom(tabPDSSearch.pdtPdsSearchDoD().getValue()));
					}
					//WDEV-21818
					//WDEV-21816	
					
					//WDEV-21810
					pdsAdvancedSearchReq.setPostcode(tabPDSSearch.txtPdsSearchPostcode().getValue()!=null?tabPDSSearch.txtPdsSearchPostcode().getValue().toUpperCase():null);
					pdsAdvancedSearchReq.setGpPracticeCode(tabPDSSearch.txtPdsSearchGp().getValue()!=null?tabPDSSearch.txtPdsSearchGp().getValue().toUpperCase():null);
					//WDEV-21810
//					AddressVo addressVo = new AddressVo();
//					addressVo.setLine1(tabPDSSearch.txtPdsSearchAddress().getValue());
//					pdsAdvancedSearchReq.setAddress(addressVo);
				
					//WDEV-21403
					//PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
					
					//WDEV-21819
					//code moved to earlier processing
					
				} catch (ParserConfigurationException e) {
					engine.showMessage("Unable to get SAML for currently logged in user: " + e.getMessage());
				} catch (SAXException e) {
					engine.showMessage("Unable to get SAML for currently logged in user: " + e.getMessage());
				}					
			}
		}
		//WDEV-21810
		
		return pdsAdvancedSearchReq;
	}
	
	//WDEV-21819
	private boolean checkPunctuationForAlgorithmicSearch(String text) 
	{
		if (text==null || text.length()==0)
			return false;
		
		if (text.contains("'"))
		{
			if (text.indexOf("'")==1)				
				return true;
		}
		
		return false;
	}

	//WDEV-21403
	private boolean textContainPunctuation(String text)
	{
		if (text==null || text.length()==0)
			return false;
		
		if (text.contains("-") || text.contains("'"))
			return true;
		
		return false;
	}

	private boolean isPds()
	{
		return !"None".equals(ConfigFlag.DOM.USE_PDS.getValue());
	}
	
	private PDSConfigurationVo getPdsConfiguration() 
	{
		PdsRetrievalQueryHelper pds = new PdsRetrievalQueryHelper(domain);		
        if (form.getLocalContext().getPDSConfiguration()==null)
        {
        	PDSConfigurationVo conf = pds.getPdsConfiguration();
        	form.getLocalContext().setPDSConfiguration(conf);//WDEV-21326                
        }		
        
        return form.getLocalContext().getPDSConfiguration();
	}

	private Date getPDSDateFromExtended(PartialDate date) 
	{
		int day,month,year = 0;
		Date dateFrom=getDateTo(date);
		
		if (dateFrom==null)
			return dateFrom;
		
		if (date.getDay()==null)
			dateFrom.setDay(1);
		
		if (date.getMonth()==null)
			dateFrom.setMonth(1);
		
		if (date.getYear()==null)
			return null;
			
		return dateFrom;
	}

	//WDEV-21622
	//WDEV-21622
	private Date getDateToExtended(Integer rangeValue, TimeUnitsSecondsToYears rangeType, PartialDate date)
	{
		Date dateFrom=getDateTo(date);
		
		if (rangeValue==null || rangeType==null || dateFrom==null)
			return dateFrom;
		
		Date newDate=null;
		
		if (TimeUnitsSecondsToYears.DAYS.equals(rangeType))
		{
			newDate=dateFrom.addDay(rangeValue);
		}
		else if (TimeUnitsSecondsToYears.MONTHS.equals(rangeType))
		{
			newDate=dateFrom.addMonth(rangeValue);
		}
		else if (TimeUnitsSecondsToYears.YEARS.equals(rangeType))
		{
			newDate=dateFrom.addYear(rangeValue);
		}
		
		return newDate;
	}

	//WDEV-21622
	private Date getDateTo(PartialDate partialDate)
	{
		if (partialDate==null)
			return null;
		
		Integer month = partialDate.getMonth()!=null ? partialDate.getMonth() : 12 ;
		Integer day = partialDate.getDay()!=null ? partialDate.getDay() : Date.getNumberOfDays(partialDate.getYear(), month);
		
		return new Date(partialDate.getYear(), month, day);	
	}

	//WDEV-21622
	private Date getDateFromExtended(Integer rangeValue, TimeUnitsSecondsToYears rangeType, PartialDate date)
	{
		Date dateFrom=getDateFrom(date);
		
		if (rangeValue==null || rangeType==null || dateFrom==null)
			return dateFrom;
		
		Date newDate=null;
		
		if (TimeUnitsSecondsToYears.DAYS.equals(rangeType))
		{
			newDate=dateFrom.addDay(-rangeValue);
		}
		else if (TimeUnitsSecondsToYears.MONTHS.equals(rangeType))
		{
			newDate=dateFrom.addMonth(-rangeValue);
		}
		else if (TimeUnitsSecondsToYears.YEARS.equals(rangeType))
		{
			newDate=dateFrom.addYear(-rangeValue);
		}
		
		return newDate;
	}

	//WDEV-21622
	private Date getDateFrom(PartialDate partialDate)
	{
		if (partialDate==null)
			return null;
		
		Integer day = partialDate.getDay()!=null ? partialDate.getDay() : 1 ;
		Integer month = partialDate.getMonth()!=null ? partialDate.getMonth() : 1 ;
		
		return new Date(partialDate.getYear(), month, day);	
	}
			
	//WDEV-21393
	private String getMiddlename(String txtForenameValue)
	{
		if (txtForenameValue==null || txtForenameValue.length()==0)
			return null;
		
		if (!txtForenameValue.contains(" "))
		{
			return null;
		}
		
		String txtMiddlename = "";
		
		int spaceIndex = txtForenameValue.indexOf(" ");
		if (spaceIndex>0)
		{
			txtMiddlename=txtForenameValue.substring(spaceIndex+1, txtForenameValue.length());
		}
		
		//WDEV-21810
		return (txtMiddlename!=null?txtMiddlename.toUpperCase():null);
	}

	//WDEV-21393
	private String getForename(String txtForenameValue)
	{
		if (txtForenameValue==null || txtForenameValue.length()==0)
			return null;
		
		if (!txtForenameValue.contains(" "))
		{
			return txtForenameValue;
		}
		
		String txtForename ="";
		
		int spaceIndex = txtForenameValue.indexOf(" ");
		if (spaceIndex>0)
		{
			txtForename=txtForenameValue.substring(0, spaceIndex);
		}
		
		//WDEV-21810
		return (txtForename!=null?txtForename.toUpperCase():null);
	}

	@Override
	protected void onChkLocalSearchSwapNamesChanged() throws PresentationLogicException 
	{
		//WDEV-22341
//		swapNames(TAB_LOCAL_SEARCH);
//		form.getLocalContext().setisLocalSearchPerformed(true);
//		form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(populateSearchCriteriaFromScreen(TAB_LOCAL_SEARCH));
//		doLocalSearch();
		if (form.lyrSearch().tabLocalSearch().txtLocalSearchForename() !=null
				&& form.lyrSearch().tabLocalSearch().txtLocalSearchForename() !=null)
		{
			swapNames(TAB_LOCAL_SEARCH);
			form.getLocalContext().setisLocalSearchPerformed(true);
			form.getGlobalContext().Core.setLocalPatientFilterSearchCriteria(populateSearchCriteriaFromScreen(TAB_LOCAL_SEARCH));
			doLocalSearch();
			
			//form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setValue(Boolean.FALSE);
		} //WDEV-22431
	}

	@Override
	protected void onChkPdsSearchSwapNamesChanged() throws PresentationLogicException 
	{
		swapNames(TAB_PDS_SEARCH);
	}

	@Override
	protected void onDyngrdSearchColumnHeaderClicked(DynamicGridColumn column) 
	{
		if(column.getIdentifier().equals(COL_DOB_IDENT))
		{
			PatientShort temp = null;
			if (form.dyngrdSearch().getValue() instanceof PatientShort)
				temp = (PatientShort) form.dyngrdSearch().getValue();
			
			Boolean isSortModeDescending = form.getLocalContext().getSortOrderDoB() == null || !form.getLocalContext().getSortOrderDoB().equals(SortOrder.ASCENDING);
			form.getLocalContext().setSortOrderDoB(isSortModeDescending ? SortOrder.ASCENDING : SortOrder.DESCENDING);
			populateGridWithPatients(manualSortDOB(form.getLocalContext().getSortOrderDoB()));
			form.dyngrdSearch().setValue(temp);
		}
	}

	@Override
	protected void onChkExtendedDoDValueChanged() throws PresentationLogicException 
	{
		//defaultDoD(form.lyrSearch().tabLocalSearch().pdtLocalSearchDOD().getValue());
		//WDEV-21622
		if (!form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoB().getValue())
		{
			return;
		}
		PartialDate dodValue = form.lyrSearch().tabLocalSearch().pdtLocalSearchDOD().getValue();
		if (TimeUnitsSecondsToYears.MONTHS.equals(form.getLocalContext().getPDSConfiguration().getDOD_DATE_RANGE_TYPE()) && (dodValue==null || (dodValue!=null  && dodValue.getMonth()==null)))
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoD().setValue(null);
			engine.showMessage("Please enter a month and a year for Date Of Death for extended search .", "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
		else if (TimeUnitsSecondsToYears.YEARS.equals(form.getLocalContext().getPDSConfiguration().getDOD_DATE_RANGE_TYPE()) && (dodValue==null || (dodValue!=null  && dodValue.getYear()==null)))
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoD().setValue(null);
			engine.showMessage("Please enter a year for Date Of Death for extended search. ", "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
	}

	@Override
	protected void onChkExtendedDoBValueChanged() throws PresentationLogicException 
	{
		//defaultDoB(form.lyrSearch().tabLocalSearch().pdtLocalSearchDOB().getValue());
		//WDEV-21622
		if (!form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoB().getValue())
		{
			return;
		}
		PartialDate dobValue = form.lyrSearch().tabLocalSearch().pdtLocalSearchDOB().getValue();
		
		if (TimeUnitsSecondsToYears.MONTHS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getMonth()==null)))
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoB().setValue(null);
			engine.showMessage("Please enter a month and a year for Date Of Birth for extended search .", "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
		else if (TimeUnitsSecondsToYears.YEARS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getYear()==null)))
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoB().setValue(null);
			engine.showMessage("Please enter a year for Date Of Birth for extended search. ", "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
	}

	//WDEV-21622
	@Override
	protected void onChkPdsSearchExtendedDoDValueChanged() throws PresentationLogicException
	{
		//WDEV-21810
	}

	//WDEV-21622
	@Override
	protected void onChkPdsSearchExtendedDoBValueChanged() throws PresentationLogicException
	{		
		if (!form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().getValue())
		{
			return;
		}

		//WDEV-21816
		PartialDate dobValue = form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().getValue();
		
		if (dobValue==null)
		{
			engine.showMessage("Please enter a partial Date of Birth for extended search. ", "Error", MessageButtons.OK, MessageIcon.ERROR);
			form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().setValue(false);
		}
		
		//WDEV-21810
		//no need to report this to the user. Just ignore.
//		if (dobValue.getDay()!=null)
//		{
//			engine.showMessage("Please remove day from partial Date of Birth for extended search. ", "Error", MessageButtons.OK, MessageIcon.ERROR);
//			form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().setValue(false);
//		}
		
		
//		if (TimeUnitsSecondsToYears.DAYS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getDay()==null)))
//		{
//			form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().setValue(null);
//			engine.showMessage("Please enter a full Date of Birth for extended search. ", "Error", MessageButtons.OK, MessageIcon.ERROR);
//		}
//		else if (TimeUnitsSecondsToYears.MONTHS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getMonth()==null)))
//		{
//			form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().setValue(null);
//			engine.showMessage("Please enter a month and a year for Date Of Birth for extended search .", "Error", MessageButtons.OK, MessageIcon.ERROR);
//		}
//		else if (TimeUnitsSecondsToYears.YEARS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getYear()==null)))
//		{
//			form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().setValue(null);
//			engine.showMessage("Please enter a year for Date Of Birth for extended search. ", "Error", MessageButtons.OK, MessageIcon.ERROR);
//		}
		
		//WDEV-21816
		
	}
	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{	
		
		form.getLocalContext().setTimerTimesRun(form.getLocalContext().getTimerTimesRun() + 1);

		//following lines used for testing locally.
//		form.getTimers().gettimerAdvancedSearch().setEnabled(false);
//		form.getLocalContext().setTimerMessageBoxID((engine.showMessage("Timer was called for " + MAX_RUNS_FOR_TIMER + " times. Would you like to cancel the search?", "Question", MessageButtons.YESNO, MessageIcon.QUESTION)));
		
		if (form.getLocalContext().getTimerTimesRunIsNotNull() && form.getLocalContext().getTimerTimesRun() < MAX_RUNS_FOR_TIMER)
			form.getTimers().gettimerAdvancedSearch().setEnabled(true);
		else if (form.getLocalContext().getTimerTimesRunIsNotNull() && form.getLocalContext().getTimerTimesRun() == MAX_RUNS_FOR_TIMER)
		{
			form.getTimers().gettimerAdvancedSearch().setEnabled(false);
			form.getLocalContext().setTimerMessageBoxID((engine.showMessage("Timer was called for " + MAX_RUNS_FOR_TIMER + " times. Would you like to cancel the search?", "Question", MessageButtons.YESNO, MessageIcon.QUESTION)));
		}
		
		PDSAdvancedSearchRequestVo req = domain.getPDSAdvancedSearchRequest(form.getLocalContext().getAdvancedRequest());
		
		//WDEV-21810
		if (PDSSearchStatus.COMPLETE.equals(req.getSearchStatus()) || PDSSearchStatus.ERROR.equals(req.getSearchStatus()))
		{
			form.setMode(FormMode.VIEW);
			form.getTimers().gettimerAdvancedSearch().setEnabled(false);
			
			boolean hasUserAdvancedTraceRBAC = true; 
			
			// PDS AUTHENTICATION
    		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
    		if(!pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_PATIENT_ADVANCED, PdsCheck.CHECK_ACTIVITY, form.getGlobalContext().Core.getSamlXml()))
    		{
    			hasUserAdvancedTraceRBAC = false;
    		}
			// END PDS AUTHENTICATION
			
			PDSAdvancedSearchResultVoCollection searchResults = req.getSearchResultIsNotNull() ?  req.getSearchResult() : null;

			//WDEV-21810
			if (PDSSearchStatus.COMPLETE.equals(req.getSearchStatus()))
			{
				if (Boolean.TRUE.equals(form.getLocalContext().getIsPDSSearchStartedOnSelectingLocalRecord()) && searchResults!=null && searchResults.size()>1 && !hasUserAdvancedTraceRBAC )
				{
					form.getLocalContext().setContinueWithLocalPatientMessageBoxId(engine.showMessage("Multiple records returned, please refine search criteria or continue with the local record. Do you want to continue with local record?","Information", MessageButtons.YESNO , MessageIcon.QUESTION)); //TO DO
					return;
				}
			}
			
			if (PDSSearchStatus.ERROR.equals(req.getSearchStatus()))
			{
				//WDEV-21867
				if (searchResults!=null && searchResults.size()==1 && searchResults.get(0).getPdsErrProcessingCodeIsNotNull() 
								&& searchResults.get(0).getPdsErrProcessingCode().equals("P"))
				{
					// WDEV-21954 - only prompt if local record found
					if (form.getLocalContext().getPatientSelectedOnLocalSearchTabIsNotNull())
					{
						form.getLocalContext().setContinueWithLocalPatientMessageBoxId(engine.showMessage(searchResults.get(0).getPdsErrQueryResponseCode() + "\r\nDo you want to continue with local record?","Information", MessageButtons.YESNO , MessageIcon.QUESTION)); //TO DO
					}
					else
					{
						engine.showMessage(searchResults.get(0).getPdsErrQueryResponseCode());
					}
				}
				//WDEV-21867
			}
			//WDEV-21810
			
			form.getLocalContext().setPDSAdvancedSearchResultColl(searchResults!=null && searchResults.size()>0 ? searchResults : null);			
			populateGridWithAdvancedSearchResult(searchResults);
		}
		else if (PDSSearchStatus.CANCELLED.equals(req.getSearchStatus()) || PDSSearchStatus.ERROR.equals(req.getSearchStatus()))
		{
			form.setMode(FormMode.VIEW);
			form.getTimers().gettimerAdvancedSearch().setEnabled(false);
			form.lyrSearch().showtabLocalSearch();
			form.lyrSearch().tabPDSSearch().setHeaderEnabled(false);
			engine.showMessage(req.getComment(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
		}	
	}

	//------------------------------------------------------------------------------------------------------------------------
	//	Form initializations functions
	//------------------------------------------------------------------------------------------------------------------------

	private void createLocalBackOffice(PDSBackOfficeType type, String errorDescription, PDSBackOfficeWorkPriority priority)
	{
		try
		{
			PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
			
			helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PDS_SYNC_REQUIRED,  "Local patient not found on PDS", PDSBackOfficeWorkPriority.P1);
		}
		catch (PdsException e1)
		{
			e1.printStackTrace();
			String err = "Error creating BackOfficeItemAndNotification: " + e1.toString();
			engine.showMessage(err,"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
		}
	}

	public void open() throws PresentationLogicException
	{
		if (form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria() != null)
		{
			form.lyrSearch().showtabLocalSearch();
			populateScreenFromSearchCriteria(form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria(), TAB_LOCAL_SEARCH);
		}
		//WDEV-22341
		else
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setVisible(false);
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setEnabled(false);
		} //WDEV-22341
		
		updateControlsState();
	}


	private void initialize()
	{
		form.getTimers().gettimerAdvancedSearch().setInterval(form.getLocalContext().getPDSConfiguration().getADVANCED_SEARCH_TIMER_INTERVAL());

		form.getLocalContext().setDefaultPatIdType(PatIdType.getNegativeInstance(ims.configuration.gen.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.lyrSearch().tabLocalSearch().cmbLocalSearchIdType().setValue(form.getLocalContext().getDefaultPatIdType());

		form.lyrSearch().tabPDSSearch().setHeaderVisible(!"None".equals(ConfigFlag.DOM.USE_PDS.getValue()));
		form.lyrSearch().tabLocalSearch().cmbLocalSearchCounty().setVisible(!DEMOGRAPHICS_TYPE_UK.equals(ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue())); //WDEV-21622
		form.lyrSearch().tabLocalSearch().lblCounty().setVisible(!DEMOGRAPHICS_TYPE_UK.equals(ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue())); //WDEV-21622
		
		form.lyrSearch().tabLocalSearch().lblNHSNo().setVisible(!DEMOGRAPHICS_TYPE_IRISH.equals(ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue()));
		form.lyrSearch().tabLocalSearch().txtLocalSeachNHSNo().setVisible(!DEMOGRAPHICS_TYPE_IRISH.equals(ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue()));
		
		form.lyrSearch().tabLocalSearch().lblPostcode().setVisible(ConfigFlag.UI.DEMOGRAPHICS_USE_POSTCODE.getValue());
		form.lyrSearch().tabLocalSearch().txtLocalSearchPostcode().setVisible(ConfigFlag.UI.DEMOGRAPHICS_USE_POSTCODE.getValue());
		form.lyrSearch().tabLocalSearch().imbLocalSearchPoscode().setVisible(ConfigFlag.UI.DEMOGRAPHICS_USE_POSTCODE.getValue());
		
		form.lyrSearch().tabLocalSearch().txtLocalSearchSurname().setFocus();
		
		initializeDynamicGrid();
	}

	private void initializeDynamicGrid() 
	{
		form.dyngrdSearch().clear();
		form.dyngrdSearch().setSelectable(true);
		form.dyngrdSearch().setReadOnly(true);

		PatIdType displayPatIdType = PatIdType.getNegativeInstance(ims.configuration.gen.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		boolean bDisplayOptionalCol = ConfigFlag.UI.DISPLAY_OPTIONAL_COLUMN_PATIENT_SEARCH.getValue(); //WDEV-21622
		
		DynamicGridColumn column = form.dyngrdSearch().getColumns().newColumn(displayPatIdType.toString(), COL_IDENTIFIER_IDENT);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdSearch().getColumns().newColumn("Surname", COL_SURNAME_IDENT);
		column.setWidth(75);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdSearch().getColumns().newColumn("Forename", COL_FORENAME_IDENT);
		column.setWidth(75);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdSearch().getColumns().newColumn("Sex", COL_SEX_IDENT);
		column.setWidth(50);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdSearch().getColumns().newColumn("DOB", COL_DOB_IDENT);
		column.setWidth(70);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdSearch().getColumns().newColumn("Age", COL_AGE_IDENT);
		column.setWidth(35);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdSearch().getColumns().newColumn("Address", COL_ADDRESS_IDENT);
		column.setWidth(150);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdSearch().getColumns().newColumn("Primary Care", COL_PRIMARY_CARE);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		//WDEV-21622
		if (bDisplayOptionalCol)
			column.setWidth(150);
		else
			column.setWidth(-1);
		
		if (bDisplayOptionalCol)
		{
			String strOptional = "Ward"; // Default Column Name
			if(ConfigFlag.UI.PAT_SEARCH_OPTIONAL_COL_TYPE.getValue().equalsIgnoreCase("CONTACT")) 
			{
				strOptional = "Contact No.";
			}
			column = form.dyngrdSearch().getColumns().newColumn(strOptional);
			column.setIdentifier(COL_OPTIONAL);
			column.setWidth(-1);
			column.setSortMode(SortMode.AUTOMATIC);
		}
	}

	//------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//------------------------------------------------------------------------------------------------------------------------

	private void clearSearchFields(int tabPdsPatientSearch, boolean bClearIdentifier)
	{

		switch (tabPdsPatientSearch)
		{
		case TAB_LOCAL_SEARCH:

				clearTabLocalSearchCriteria(bClearIdentifier);
			break;

		case TAB_PDS_SEARCH:

			clearTabPDSSearchCriteria();
			break;
		}
		
		updateControlsState();
		//form.dyngrdSearch().getRows().clear();
		//form.getGlobalContext().Core.setPDSPatientFilterSearchCriteria(null);
	}

	private void clearTabPDSSearchCriteria()
	{
		tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();

		tabPDSSearch.txtPdsSearchSurname().setValue("");
		tabPDSSearch.txtPdsSearchForename().setValue("");
		tabPDSSearch.chkPdsSearchIncludeAlias().setValue(false);
		tabPDSSearch.chkPdsSearchSwap().setValue(false);
		tabPDSSearch.cmbPdsSearchSex().setValue(null);
		tabPDSSearch.pdtPdsSearchDoB().setValue(null);
		tabPDSSearch.chkPdsSearchExtendedDoB().setValue(false);

		tabPDSSearch.txtPdsSearchPostcode().setValue("");
		tabPDSSearch.txtPdsSearchAddress().setValue("");
		tabPDSSearch.txtPdsSearchGp().setValue("");
		tabPDSSearch.pdtPdsSearchDoD().setValue(null);
		tabPDSSearch.chkPdsSearchExtendedDoD().setValue(false);
		tabPDSSearch.chkPdsSearchAlgorithmicTrace().setValue(false);
		form.dyngrdSearch().getRows().clear();
		
	}
	
	private boolean nonIdentifierFieldEntered()
	{
		tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
		
		if(tabLocalSearch.txtLocalSearchSurname().getValue() != null && tabLocalSearch.txtLocalSearchSurname().getValue().length() > 0)
		{
			return true;
		}
		
		if(tabLocalSearch.txtLocalSearchForename().getValue() != null && tabLocalSearch.txtLocalSearchForename().getValue().length() > 0)
		{
			return true;
		}
		
		if(tabLocalSearch.cmbLocalSearchSex().getValue() != null)
		{
			return true;
		}
		
		if(tabLocalSearch.txtLocalSearchPostcode().getValue() != null && tabLocalSearch.txtLocalSearchPostcode().getValue().length() > 0)
		{
			return true;
		}
		
		if(tabLocalSearch.cmbLocalSearchCounty().getValue() != null)
		{
			return true;
		}
		
		if(tabLocalSearch.txtLocalSearchAddress().getValue() != null && tabLocalSearch.txtLocalSearchAddress().getValue().length() > 0)
		{
			return true;
		}
		
		if(tabLocalSearch.pdtLocalSearchDOB().getValue() != null)
		{
			return true;
		}
		
		if(tabLocalSearch.pdtLocalSearchDOD().getValue() != null)
		{
			return true;
		}
		
		return false;
	}

	private void clearTabLocalSearchCriteria(boolean bClearIdentifier)
	{
		tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();

		if(bClearIdentifier)
		{
			tabLocalSearch.txtLocalSearchIdValue().setValue("");
			tabLocalSearch.txtLocalSeachNHSNo().setValue("");
			tabLocalSearch.cmbLocalSearchIdType().setValue(form.getLocalContext().getDefaultPatIdType()); //WDEV-21762
		}

		tabLocalSearch.txtLocalSearchSurname().setValue("");
		tabLocalSearch.txtLocalSearchForename().setValue("");
		tabLocalSearch.chkLocalSearchIncludeAlias().setValue(false);
		tabLocalSearch.chkLocalSearchSwapNames().setValue(false);

		tabLocalSearch.cmbLocalSearchSex().setValue(null);
		tabLocalSearch.txtLocalSearchPostcode().setValue("");
		tabLocalSearch.cmbLocalSearchCounty().setValue(null);
		tabLocalSearch.txtLocalSearchAddress().setValue("");

		tabLocalSearch.pdtLocalSearchDOB().setValue(null);
		tabLocalSearch.chkLocalSearchExtendedDoB().setValue(false);
		tabLocalSearch.pdtLocalSearchDOD().setValue(null);
		tabLocalSearch.chkLocalSearchExtendedDoD().setValue(false);

		form.dyngrdSearch().getRows().clear();
	}

	private boolean validateSearchCriteria(int tabPdsPatientSearch,boolean isAlgorithmicSearch)
	{
		ArrayList<String> errorList = new ArrayList<String>();
		Date todayDate = new Date();
		tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
		
		//WDEV-21819
		//No need to check for RBAC to intiate search as this replaces Simple Search and access is checked on the return results
		if (textContainPunctuation(tabPDSSearch.txtPdsSearchSurname().getValue()) || textContainPunctuation(tabPDSSearch.txtPdsSearchForename().getValue()))
		{
			//WDEV-21819 - check to use wildcharacters or algorithmic
			if (checkPunctuationForAlgorithmicSearch(tabPDSSearch.txtPdsSearchSurname().getValue()))
			{								
				//pdsAdvancedSearchReq.setSearchType(PDSSearchType.ALGORITHMIC); //do this on populateSearchCriteriaFromScreen
				isAlgorithmicSearch = true;
			}
//			else
//			{
//				//replace supported punctuations with wildcard and continue with alphanumeric search
//				//String str = tabPDSSearch.txtPdsSearchSurname().getValue().replaceAll("'", "*");
//				//str = str.replaceAll("-", "*");
//				//pdsAdvancedSearchReq.setSurname(str); //do this on populateSearchCriteriaFromScreen
//			}
			//WDEV-21819 - check to use wildcharacters or algorithmic						
		}
		//WDEV-21819

		switch (tabPdsPatientSearch)
		{
		case TAB_LOCAL_SEARCH:

			
			tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();

			if ((tabLocalSearch.txtLocalSearchIdValue().getValue() != null && tabLocalSearch.txtLocalSearchIdValue().getValue().length() > 0) || tabLocalSearch.txtLocalSeachNHSNo().getValue() != null)
			{
				if(tabLocalSearch.txtLocalSeachNHSNo().getValue() != null)
					tabLocalSearch.txtLocalSearchIdValue().setValue(null);

				if (tabLocalSearch.txtLocalSearchIdValue().getValue() != null && tabLocalSearch.txtLocalSearchIdValue().getValue().length() > 0 && tabLocalSearch.cmbLocalSearchIdType().getValue() == null)
				{
					errorList.add("Please select a Patient ID Type.");
				}

				if(!ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL"))
					clearSearchFields(TAB_LOCAL_SEARCH, false);
				else if (tabLocalSearch.txtLocalSearchIdValue().getValue() != null && tabLocalSearch.txtLocalSearchIdValue().getValue().length() > 0 && tabLocalSearch.cmbLocalSearchIdType().getValue() != null && !tabLocalSearch.cmbLocalSearchIdType().getValue().equals(PatIdType.NHSN) && tabLocalSearch.txtLocalSeachNHSNo().getValue() == null)
					clearSearchFields(TAB_LOCAL_SEARCH, false);
				
			}
			else if (tabLocalSearch.txtLocalSearchPostcode().getValue() == null || tabLocalSearch.txtLocalSearchPostcode().getValue().trim().length() == 0)
			{
				//WDEV-22602
				String nonReplacedCharsForSearchRegEx = ConfigFlag.GEN.PATIENT_SEARCH_ALLOW_NUMERIC_CHARS.getValue() ? "[^a-zA-Z0-9%\\-]" :"[^a-zA-Z%\\-]";

				if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL"))
						&& (tabLocalSearch.txtLocalSearchSurname().getValue() == null || tabLocalSearch.txtLocalSearchSurname().getValue().replaceAll(nonReplacedCharsForSearchRegEx, "").length() == 0))
				{
					errorList.add("Please enter a valid Surname.");
				}
				else if (tabLocalSearch.txtLocalSearchSurname().getValue() == null || tabLocalSearch.txtLocalSearchSurname().getValue().length() == 0)
				{
					errorList.add("Please enter a valid Surname.");
				}

				if((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL"))
						&&(ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue())
						&&(tabLocalSearch.txtLocalSearchForename().getValue() == null || tabLocalSearch.txtLocalSearchForename().getValue().replaceAll(nonReplacedCharsForSearchRegEx, "").length() == 0))
				{
					errorList.add("Please enter a valid Forename.");
				}

				else if((ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue())&&
						(tabLocalSearch.txtLocalSearchForename().getValue() == null || tabLocalSearch.txtLocalSearchForename().getValue().length() == 0))
				{
					errorList.add("Please enter a valid Forename.");
				}
				if (tabLocalSearch.pdtLocalSearchDOB().getValue() != null && tabLocalSearch.pdtLocalSearchDOB().getValue().isGreaterThan(todayDate))
	    		{
					errorList.add("Date of Birth cannot be set to a date in the future.");
	    		}
	    		if (tabLocalSearch.pdtLocalSearchDOD().getValue() != null && tabLocalSearch.pdtLocalSearchDOD().getValue().isGreaterThan(todayDate))
	    		{
	    			errorList.add("Date of Death cannot be set to a date in the future.");
	    		}
			}	
			
			//validate the NHS Number
			String nhsNumber = "";
			
			if (tabLocalSearch.txtLocalSeachNHSNo().getValue() != null)
			{
				nhsNumber = tabLocalSearch.txtLocalSeachNHSNo().getValue();
			}
			else if (PatIdType.NHSN.equals(tabLocalSearch.cmbLocalSearchIdType().getValue()) && tabLocalSearch.txtLocalSearchIdValue().getValue() != null)
			{
				nhsNumber = tabLocalSearch.txtLocalSearchIdValue().getValue();
			}
			
			String nospacesString = nhsNumber.replace(" ", "");

			if (nospacesString.length() > 0)
			{
				if (nospacesString.length() != 10)
				{
					errorList.add("The NHS number provided does not have the correct length.");
				}
				else if (!NHSNumberCalculator.calcNHSNumber9N(nospacesString.substring(0, 9)).contains(nospacesString.toString()))
				{
					errorList.add("The NHS number provided is invalid.");
				}
			}
			
			//WDEV-21622
			if (form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoB().getValue())
			{
				PartialDate dobValue = form.lyrSearch().tabLocalSearch().pdtLocalSearchDOB().getValue();
    			if (TimeUnitsSecondsToYears.DAYS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getDay()==null)))
    			{
    				errorList.add("Please enter a full Date of Birth for extended search. ");
    			}
    			else if (TimeUnitsSecondsToYears.MONTHS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getMonth()==null)))
    			{
    				errorList.add("Please enter a month and a year for Date Of Birth for extended search .");
    			}
    			else if (TimeUnitsSecondsToYears.YEARS.equals(form.getLocalContext().getPDSConfiguration().getDOB_DATE_RANGE_TYPE()) && (dobValue==null || (dobValue!=null  && dobValue.getYear()==null)))
    			{
    				errorList.add("Please enter a year for Date Of Birth for extended search. ");
    			}
			}	
    		
			if (form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoD().getValue())
			{
				PartialDate dodValue = form.lyrSearch().tabLocalSearch().pdtLocalSearchDOD().getValue();
    			if (TimeUnitsSecondsToYears.DAYS.equals(form.getLocalContext().getPDSConfiguration().getDOD_DATE_RANGE_TYPE()) &&(dodValue==null || (dodValue!=null  && dodValue.getDay()==null)))
    			{
    				errorList.add("Please enter a full Date of Death for extended search. ");
    			}
    			else if (TimeUnitsSecondsToYears.MONTHS.equals(form.getLocalContext().getPDSConfiguration().getDOD_DATE_RANGE_TYPE()) && (dodValue==null || (dodValue!=null  && dodValue.getMonth()==null)))
    			{
    				errorList.add("Please enter a month and a year for Date Of Death for extended search .");
    			}
    			else if (TimeUnitsSecondsToYears.YEARS.equals(form.getLocalContext().getPDSConfiguration().getDOD_DATE_RANGE_TYPE()) && (dodValue==null || (dodValue!=null  && dodValue.getYear()==null)))
    			{
    				errorList.add("Please enter a year for Date Of Death for extended search. ");
    			}
			}
			break;

		case TAB_PDS_SEARCH:

			//WDEV-21819
			if (isAlgorithmicSearch)
			{
				errorList.addAll(validateAlgorithmicSearchCriteria(errorList));
			}
			else
			{
				errorList.addAll(validateAlphanumericSearchCriteria(errorList));
			}
			//WDEV-21819
			
			break;
		}

		if (errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[errorList.size()]));
			return false;
		}
		return true;
	}

	//WDEV-21819
	private Collection<? extends String> validateAlphanumericSearchCriteria(
			ArrayList<String> errorListIn) 
	{
		ArrayList<String> errorList = errorListIn;
		tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
		Date todayDate = new Date();
		
		//WDEV-21810
		//Alphanumeric search , which is default
		
		//WDEV-21794 - Simple search is not implemented on request and in place we implement Advanced search limiting to a one record result 
		//Surname
		if (tabPDSSearch.txtPdsSearchSurname().isRequired() && tabPDSSearch.txtPdsSearchSurname().getValue() == null)
		{	        			
			errorList.add("Please enter a Surname.");
		}
		
		if (tabPDSSearch.pdtPdsSearchDoB().isRequired() && tabPDSSearch.pdtPdsSearchDoB().getValue() == null)
		{
			//WDEV-21810
			//DOB always required
			errorList.add("Please enter a Date Of Birth.");
		}
		//WDEV-21809
		else
		{
			//WDEV-21816 partial dates allowed for single date
			//Partial MMYYYY DOB
			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getDay()!=null
					&& (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()==null || tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null))
			{
				//If day supplied, then full date must be supplied
				errorList.add("Please enter Month/Year for Date Of Birth.");
			}
			
			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()!=null
					&& tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null)
			{
				//If Month supplied, then Year must be supplied
				errorList.add("Please enter Year for Partial Date Of Birth.");
			}
			
		}

		//WDEV-21810
		PartialDate dodValue = form.lyrSearch().tabPDSSearch().pdtPdsSearchDoD().getValue();
		if (dodValue!=null)
		{
			//WDEV-21816 partial dates allowed for single date
			//Partial MMYYYY DOB required
			if (tabPDSSearch.pdtPdsSearchDoD().getValue().getDay()!=null
					&& (tabPDSSearch.pdtPdsSearchDoD().getValue().getMonth()==null || tabPDSSearch.pdtPdsSearchDoD().getValue().getYear()==null))
			{
				//If day supplied, then full date must be supplied
				errorList.add("Please enter Month/Year for Date Of Death.");
			}								
			
			if (tabPDSSearch.pdtPdsSearchDoD().getValue().getMonth()!=null
					&& tabPDSSearch.pdtPdsSearchDoD().getValue().getYear()==null)
			{
				//If Month supplied, then Year must be supplied
				errorList.add("Please enter Year for Partial Date Of Death.");
			}
			
			//WDEV-21816			
		}
		//WDEV-21810
		//WDEV-21387

		//WDEV-21809
		if (tabPDSSearch.cmbPdsSearchSex().isRequired() && tabPDSSearch.cmbPdsSearchSex().getValue() == null)
		{
			errorList.add("Please enter a Sex.");
		}
		//WDEV-21794 - Simple search is not implemented on request and in place we implement Advanced search limiting to a one record result

		//WDEV-21813
		if (tabPDSSearch.txtPdsSearchSurname().getValue()!=null && textContainWildcards(tabPDSSearch.txtPdsSearchSurname().getValue()) && !isWildCardNotPrecededWithTwoCharacters(tabPDSSearch.txtPdsSearchSurname().getValue()))
		{
			errorList.add("Wildcards from Surname should be preceded with minimum two characters. ");
		}
		        		
		if (tabPDSSearch.txtPdsSearchForename().getValue()!=null && textContainWildcards(tabPDSSearch.txtPdsSearchForename().getValue()) && !isWildCardNotPrecededWithTwoCharacters(tabPDSSearch.txtPdsSearchForename().getValue()))
		{
			errorList.add("Wildcards from Forename should be preceded with minimum two characters. ");
		}
		
		if (tabPDSSearch.txtPdsSearchPostcode().getValue()!=null && textContainWildcards(tabPDSSearch.txtPdsSearchPostcode().getValue()) && !isWildCardNotPrecededWithTwoCharacters(tabPDSSearch.txtPdsSearchPostcode().getValue()))
		{
			errorList.add("Wildcards from PostCode should be preceded with minimum two characters. ");
		}
		//WDEV-21813
		
		
		if (tabPDSSearch.pdtPdsSearchDoB().getValue() != null && tabPDSSearch.pdtPdsSearchDoB().getValue().isGreaterThan(todayDate))
		{
			errorList.add("Date of Birth cannot be set to a date in the future.");
		}
		if (tabPDSSearch.pdtPdsSearchDoD().getValue() != null && tabPDSSearch.pdtPdsSearchDoD().getValue().isGreaterThan(todayDate))
		{
			errorList.add("Date of Death cannot be set to a date in the future.");
		}      
		
		//WDEV-21810
		if (tabPDSSearch.pdtPdsSearchDoD().getValue() != null && tabPDSSearch.pdtPdsSearchDoD().getValue().isLessThan(tabPDSSearch.pdtPdsSearchDoB().getValue()))
		{
			errorList.add("Date of Death cannot be less than the Date of Birth.");
		}    
		
		return errorList;
	}
	//WDEV-21819
	
	//WDEV-21819
	private Collection<? extends String> validateAlgorithmicSearchCriteria(
			ArrayList<String> errorListIn) 
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
		boolean combinationSearchPDS1 = tabPDSSearch.txtPdsSearchSurname().getValue()!=null && tabPDSSearch.txtPdsSearchForename().getValue()!=null && tabPDSSearch.pdtPdsSearchDoB().getValue()!=null;
		boolean combinationSearchPDS2 = tabPDSSearch.txtPdsSearchSurname().getValue()!=null && tabPDSSearch.cmbPdsSearchSex().getValue()!=null && tabPDSSearch.pdtPdsSearchDoB().getValue()!=null && tabPDSSearch.txtPdsSearchPostcode().getValue()!=null;
		boolean combinationSearchPDS3 = tabPDSSearch.txtPdsSearchForename().getValue()!=null && tabPDSSearch.cmbPdsSearchSex().getValue()!=null && tabPDSSearch.pdtPdsSearchDoB().getValue()!=null && tabPDSSearch.txtPdsSearchPostcode().getValue()!=null;
		
		//WDEV-21814
		if (!(combinationSearchPDS1 || combinationSearchPDS2 || combinationSearchPDS3))
		{
			errorList.add("One of these combinations should be made to have a valid search criteria: \n- Surname, Forename, DOB (or DOB range); \n- Surname, Sex, DOB , PostCode; \n- Forename, Sex, DOB , PostCode;");    
		}
		
		if (textContainWildcards(tabPDSSearch.txtPdsSearchSurname().getValue()))
		{
			errorList.add("Please remove wildcards from Surname.");
		}
		
		if (textContainWildcards(tabPDSSearch.txtPdsSearchForename().getValue()))
		{
			errorList.add("Please remove wildcards from Forename.");
		}
		
		if (textContainWildcards(tabPDSSearch.txtPdsSearchPostcode().getValue()))
		{
			errorList.add("Please remove wildcards from PostCode");
		}
		
		//minimum search criteria for Algorithmic search
		//Family Name, Given Name, Date of Birth 
		//Family Name, Gender, Date of Birth, Postcode  				
		//Given Name, Gender, Date of Birth, Postcode 	
		
		//Given Name, Gender, Date of Birth, Postcode
		if (tabPDSSearch.txtPdsSearchSurname().isRequired() && tabPDSSearch.txtPdsSearchSurname().getValue() == null)
		{
			//WDEV-21794 Implementation Update
			//Given Name, Gender, Date of Birth, Postcode
    		if (tabPDSSearch.txtPdsSearchForename().isRequired() && tabPDSSearch.txtPdsSearchForename().getValue() == null) //WDEV-21445
    		{	        			
    			errorList.add("Please enter a Forename.");
    		}
			if (tabPDSSearch.cmbPdsSearchSex().isRequired() && tabPDSSearch.cmbPdsSearchSex().getValue() == null)
    		{
    			errorList.add("Please enter a Sex.");
    		}
    		if (tabPDSSearch.pdtPdsSearchDoB().isRequired() && tabPDSSearch.pdtPdsSearchDoB().getValue() == null)
    		{	        			
    			errorList.add("Please enter a Date Of Birth.");
    		}
    		else
    		{
    			//WDEV-21816 partial dates allowed for single date
    			//Partial MMYYYY DOB
    			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getDay()!=null
    					&& (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()==null || tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null))
    			{
    				//If day supplied, then full date must be supplied
    				errorList.add("Please enter Month/Year for Date Of Birth.");
    			}
    			
    			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()!=null
    					&& tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null)
    			{
    				//If Month supplied, then Year must be supplied
    				errorList.add("Please enter Year for Partial Date Of Birth.");
    			}    			
    		}
    		if (tabPDSSearch.txtPdsSearchPostcode().getValue()!=null)
    		{
    			errorList.add("Wildcards from PostCode should be preceded with minimum two characters. ");
    		}
		}
		else if (tabPDSSearch.txtPdsSearchForename().getValue() != null)
		{
			//WDEV-21794 Implementation Update
			//Family Name, Given Name, Date of Birth										
    		if (tabPDSSearch.pdtPdsSearchDoB().isRequired() && tabPDSSearch.pdtPdsSearchDoB().getValue() == null)
    		{
    			errorList.add("Please enter a Date Of Birth.");
    		}
    		else if (tabPDSSearch.pdtPdsSearchDoB().isRequired() && tabPDSSearch.pdtPdsSearchDoB().getValue() != null)
    		{
    			//WDEV-21816 partial dates allowed for single date
    			//Partial MMYYYY DOB
    			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getDay()!=null
    					&& (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()==null || tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null))
    			{
    				//If day supplied, then full date must be supplied
    				errorList.add("Please enter Month/Year for Date Of Birth.");
    			}
    			
    			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()!=null
    					&& tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null)
    			{
    				//If Month supplied, then Year must be supplied
    				errorList.add("Please enter Year for Partial Date Of Birth.");
    			}    	
    			
    			//SN - SPINE still returns an error on search sciteria when Gender is missing, so including it as mandatory.
    			if (tabPDSSearch.cmbPdsSearchSex().isRequired() && tabPDSSearch.cmbPdsSearchSex().getValue() == null)
        		{
        			errorList.add("Please enter a Sex.");
        		}

    		}
    		else
    		{
    			
    			//Family Name, Gender, Date of Birth, Postcode
//				if (tabPDSSearch.cmbPdsSearchSex().getValue() == null)
//        		{
//        			errorList.add("Please enter a Sex.");
//        		}
    			//WDEV-21816 partial dates allowed for single date
    			//Partial MMYYYY DOB
    			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getDay()!=null
    					&& (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()==null || tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null))
    			{
    				//If day supplied, then full date must be supplied
    				errorList.add("Please enter Month/Year for Date Of Birth.");
    			}
    			
    			if (tabPDSSearch.pdtPdsSearchDoB().getValue().getMonth()!=null
    					&& tabPDSSearch.pdtPdsSearchDoB().getValue().getYear()==null)
    			{
    				//If Month supplied, then Year must be supplied
    				errorList.add("Please enter Year for Partial Date Of Birth.");
    			}    			
    			
    		}	        			
		}
		
		return errorList;
	}
	//WDEV-21819

	//WDEV-21403
	private boolean isWildCardNotPrecededWithTwoCharacters(String text)
	{
		//WDEV-21819
		int j = 0;
		if (text!=null)
		{
			String str = "";
			String[] strArr = text.split("[*]");
			if (strArr!=null && strArr.length>0)
			{
				for (int i=0; i<strArr.length; i++)
				{
					if(strArr[i]!=null && strArr[i].length()<2)
						return false;
				}
			}
			else if ((strArr==null||strArr.length==0) && text.contains("*"))
				return false;
		}
		
		return true;
	}

	private boolean textContainWildcards(String text)
	{
		if (text==null || text.length()==0)
			return false;
		
		if (text.contains("*") || text.contains("%"))
			return true;
		
		return false;
	}

	//	private boolean roleHasPDSRights()
	//	{
	//		IAppRole role = engine.getLoggedInRole();
	//		//harcode
	//		if (role != null && 1==1)
	//		{
	//			return true;
	//		}
	//		return false;
	//	}

	private void updateControlsState()
	{
		boolean rowSelected = form.dyngrdSearch().getSelectedRow() != null;
		form.btnSelect().setVisible(rowSelected && !ConfigFlag.DOM.USE_PDS.getValue().equals("None")); //WDEV-21622
		form.lyrSearch().tabLocalSearch().imbLocalSearchNewPat().setEnabled(ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue() && Boolean.TRUE.equals(form.getLocalContext().getisLocalSearchPerformed())); //WDEV-21622
		updateControlsStatePDSSearchCriteria();
		//Boolean notUsingPDS = ConfigFlag.DOM.USE_PDS.getValue().equals("None");
		//form.lyrSearch().tabPDSSimpleSearch().setHeaderVisible(!notUsingPDS);
		//form.lyrSearch().tabPDSAdvancedSearch().setHeaderVisible(!notUsingPDS);
		
		updateContextMenusState();
	}

	private void updateControlsStatePDSSearchCriteria()
	{
		boolean hasUserAdvancedTraceRBAC = true; //TO DO -
		boolean isAlgorithmicSearch = form.lyrSearch().tabPDSSearch().chkPdsSearchAlgorithmicTrace().getValue();
		form.lyrSearch().tabPDSSearch().txtPdsSearchSurname().setRequired(hasUserAdvancedTraceRBAC && !isAlgorithmicSearch);
		form.lyrSearch().tabPDSSearch().cmbPdsSearchSex().setRequired(hasUserAdvancedTraceRBAC && !isAlgorithmicSearch);
		form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().setRequired(hasUserAdvancedTraceRBAC && !isAlgorithmicSearch);
		//WDEV-21814 - Forename is not mandatory
		//form.lyrSearch().tabPDSSearch().txtPdsSearchForename().setRequired(hasUserAdvancedTraceRBAC && !isAlgorithmicSearch); //WDEV-21445		
		boolean isEditMode = FormMode.EDIT.equals(form.getMode());
		
		form.lyrSearch().tabLocalSearch().setHeaderEnabled(!isEditMode);
		form.lyrSearch().settabPDSSearchEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().setHeaderEnabled(!isEditMode && Boolean.TRUE.equals(form.getLocalContext().getIsPDSSearchPerformed())); //WDEV-21514
		
		form.lyrSearch().tabPDSSearch().txtPdsSearchSurname().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().txtPdsSearchForename().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().chkPdsSearchIncludeAlias().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().chkPdsSearchSwap().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().cmbPdsSearchSex().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().pdtPdsSearchDoB().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoB().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().txtPdsSearchPostcode().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		form.lyrSearch().tabPDSSearch().imbPdsSearchPostcode().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		//WDEV-21810
		//form.lyrSearch().tabPDSSearch().txtPdsSearchAddress().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);		
		//form.lyrSearch().tabPDSSearch().txtPdsSearchGp().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		form.lyrSearch().tabPDSSearch().imbPdsSearchGP().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		form.lyrSearch().tabPDSSearch().pdtPdsSearchDoD().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		form.lyrSearch().tabPDSSearch().chkPdsSearchExtendedDoD().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		form.lyrSearch().tabPDSSearch().chkPdsSearchAlgorithmicTrace().setEnabled(!isEditMode && hasUserAdvancedTraceRBAC);
		form.lyrSearch().tabPDSSearch().imbPdsSearchSearch().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().imbPdsSearchClear().setEnabled(!isEditMode);
		form.lyrSearch().tabPDSSearch().imbPdsSearchNewPat().setEnabled(!isEditMode);
		form.dyngrdSearch().setEnabled(!isEditMode);
		
	}

	private void updateContextMenusState() 
	{
		boolean rowSelected = form.dyngrdSearch().getValue() != null;
		form.getContextMenus().Core.getPDSPatientSearcchMenuSelectItem().setVisible(rowSelected && !ConfigFlag.DOM.USE_PDS.getValue().equals("None"));  //WDEV-21622
	}


	private void doLocalSearch()
	{
		form.dyngrdSearch().getRows().clear();
		form.getLocalContext().setPatientSelectedOnLocalSearchTab(null);
		PatientShortCollection psColl = null;

		//WDEV-22854
		if(ConfigFlag.UI.ON_PATIENT_SEARCH_CLEAR_SELECTED_PATIENT_CONTEXTS.getValue() == true)
		{	
			form.getGlobalContext().Core.setPatientFilter(null);
			clearSelectedPatientContexts();
		}
		
		// Clear selected patient when entering the form
		if (ConfigFlag.UI.CLEAR_PATIENT_CONTEXTS_ON_SELECTION_OF_PATIENT_SEARCH_FORM.getValue())
		{
			//Clear the selected patient information in the Engine
			clearSelectedPatientContexts();
			engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		}
				
		//Local search is allowed without PDS authentication.
		try 
		{
			if (engine.hasRight(AppRight.CAN_INACTIVATE_PATIENT))
			{
				psColl = domain.listAllPatients(form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria());	
			}
			else

			{
				psColl = domain.listActivePatients(form.getGlobalContext().Core.getLocalPatientFilterSearchCriteria());
			}
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return;
		}

		form.getLocalContext().setLocalPatientShortResultsColl(psColl!=null && psColl.size()>0 ? psColl : null);
		
		if (psColl.size() == 0) 
		{
			String nhsNumber = form.lyrSearch().tabLocalSearch().txtLocalSeachNHSNo().getValue()!=null ? form.lyrSearch().tabLocalSearch().txtLocalSeachNHSNo().getValue() : (PatIdType.NHSN.equals(form.lyrSearch().tabLocalSearch().cmbLocalSearchIdType().getValue()) && form.lyrSearch().tabLocalSearch().txtLocalSearchIdValue().getValue()!=null) ? form.lyrSearch().tabLocalSearch().txtLocalSearchIdValue().getValue() : null ;
			
			if (!"None".equals(ConfigFlag.DOM.USE_PDS.getValue()) && nhsNumber!=null)
			{
				form.lyrSearch().showtabPDSSearch();
				clearTabPDSSearchCriteria();
				form.getGlobalContext().Core.setPDSPatientFilterSearchCriteria(null);

				// WDEV-21913 start April 15 2015 fkelly Added PDS AUTHENTICATION for synchronous calls.  These are made when only the NHS Number of ID Value is used in the search criteria
				PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
				if(!pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
				{
					engine.showMessage(pdsAuth.getLastError(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
					return;
				}
				// WDEV-21913 end
				
				Patient patVo = searchInPDSAfterNHS(nhsNumber);
				form.getLocalContext().setPatientFoundByNHSOnPDS(patVo);
				
				if (patVo!=null)
				{
					addRowToDynGrid(patVo);
				}
				else
				{
					form.lyrSearch().showtabLocalSearch(); //WDEV-21257
					engine.showMessage("No patients found matching search criteria. ","Information", MessageButtons.OK, MessageIcon.INFORMATION); //WDEV-21356  //WDEV-21622
				}
			}
			else if (!"None".equals(ConfigFlag.DOM.USE_PDS.getValue()) && nhsNumber==null)
			{
				form.dyngrdSearch().getRows().clear();
				doPDSSearch(true, false);
			}
			else
			{
				engine.showMessage("No patients found matching search criteria. ","Information", MessageButtons.OK, MessageIcon.INFORMATION); //WDEV-21356  //WDEV-21622
			}	
			
			form.lblTotal().setValue("Total : " + form.dyngrdSearch().getRows().size());
		}	
		else
		{
			populateGridWithPatients(psColl);
		}
		
		updateControlsState();
	}

	
	//WDEV-22854
	private void clearSelectedPatientContexts()
	{
		//Clear the selected patient information in the Engine
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Core.setPatientToBeDisplayed(null);
	}
	
	public String displayPrimaryCare(PDSPatientGPVo gp)
	{
		if (gp == null)
			return "";



		java.lang.StringBuffer sb = new java.lang.StringBuffer("");

		if (gp.getGp() != null) 
		{
			GpShortVo gpVo = domain.getGP(gp.getGp());

			if ( gpVo != null && gpVo.getName() != null)
			{
				sb.append("GP: ");
				if (gpVo.getName().getSurname() != null && gpVo.getName().getSurname().length() > 0)
				{
					sb.append(gpVo.getName().getSurname() + " ");
				}
				if (gpVo.getName().getForename() != null && gpVo.getName().getForename().length() > 0)
				{
					sb.append(gpVo.getName().getForename());
				}

				sb.append(", ");
			}

			if (gpVo.getNationalCode() != null && gpVo.getNationalCode().length() > 0)
				sb.append("National GP Code: " + gpVo.getNationalCode() + ", ");
		}

		if (gp.getPractice() != null) 
		{
			OrganisationWithSitesVo gpPractice = domain.getGPPractice(gp.getPractice());
			if (gpPractice != null)
			{

				sb.append("Practice: " + gpPractice.getName() + ", ");

				if (gpPractice.getNationalLocCode() != null && gpPractice.getNationalLocCode().length() > 0)
				{
					sb.append("Practice Code: " + gpPractice.getNationalLocCode());
				}
			}
		}

		if (sb.length() > 0)
		{
			if (sb.toString().trim().length() > 0 && sb.toString().trim().endsWith(","))	
				sb.setLength(sb.toString().trim().length() - 1);
			sb.append("   ");
		}
		return sb.toString();
	}
	
	private void addRowToDynGrid(ValueObject patient)
	{
		if (patient==null)
			return;
		
		DynamicGridRow row = form.dyngrdSearch().getRows().newRow();
		
		if (patient instanceof Patient)
		{
			row.setValue((Patient)patient);
		}
		else if (patient instanceof PatientShort)
		{
			row.setValue((PatientShort)patient);
		}
			
		PatientShort ps = (PatientShort)patient;

		if (ps.getName() != null)
		{
			if (ps.getName().getSurnameIsNotNull() ) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_SURNAME_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(ps.getName().getSurname());
				cellLabel.setTooltip(ps.getName().getSurname()); //WDEV-21622

				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}

			if (ps.getName().getForenameIsNotNull() ) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_FORENAME_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(ps.getName().getForename());
				cellLabel.setTooltip(ps.getName().getForename()); //WDEV-21622
				
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
		}

		if (ps.getDisplayId() != null) 
		{
			DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_IDENTIFIER_IDENT), DynamicCellType.STRING);
			cellLabel.setValue(ps.getDisplayId().getValue());

			StringBuffer patientIdentifiers = new StringBuffer();
			PatientIdCollection identifiers = ps.getIdentifiers();

			if (identifiers != null)
			{
				for (int a = 0; a < identifiers.size(); a++)
				{
					patientIdentifiers.append("<b>" + identifiers.get(a).getType().toString() + ":</b> " + identifiers.get(a).getValue() + "<br>");
				}
			}

			cellLabel.setTooltip(patientIdentifiers.toString());

			if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
				cellLabel.setTooltip(ps.getNTPFDisplayString());
		}
		else
		{
			if(PatIdType.getNegativeInstance(ims.configuration.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).equals(ims.core.vo.lookups.PatIdType.MRNNUM) && ps.getPatId(ims.core.vo.lookups.PatIdType.MRNNUM) == null )
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_IDENTIFIER_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(ps.getMRNStatusIsNotNull() ? ps.getMRNStatus().getIItemText() : null );
				cellLabel.setTooltip(ps.getMRNStatusIsNotNull() ? ps.getMRNStatus().getIItemText() : null );
			}
		}

		if (ps.getSex() != null) 
		{
			DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_SEX_IDENT), DynamicCellType.STRING);
			cellLabel.setValue(ps.getSex().getText());				

			if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
				cellLabel.setTooltip(ps.getNTPFDisplayString());
		}

		if (ps.getAge() != null)
		{
			DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_AGE_IDENT), DynamicCellType.INT);
			cellLabel.setValue(ps.getAge());

			if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
				cellLabel.setTooltip(ps.getNTPFDisplayString());
		}
		if (ps.getDob() != null)
		{
			DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_DOB_IDENT), DynamicCellType.STRING);
			cellLabel.setValue(ps.getDob().toString(DateFormat.STANDARD));

			if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
				cellLabel.setTooltip(ps.getNTPFDisplayString());
		}
		if (ps.getAddress() != null)
		{
			DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_ADDRESS_IDENT), DynamicCellType.STRING);
			cellLabel.setValue(ps.getAddress().toDisplayString());
			cellLabel.setTooltip(ps.getAddress().toDisplayString()); //WDEV-21622
			
			if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
				cellLabel.setTooltip(ps.getNTPFDisplayString());
		}
		
		if (ps.getPDSPatientGP() != null)
		{
			DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_PRIMARY_CARE), DynamicCellType.STRING);
			cellLabel.setValue(displayPrimaryCare(ps.getPDSPatientGP()));
			cellLabel.setTooltip(displayPrimaryCare(ps.getPDSPatientGP()));
		}
		
		//WDEV-21622
		if (ConfigFlag.UI.DISPLAY_OPTIONAL_COLUMN_PATIENT_SEARCH.getValue())
		{
			if(ConfigFlag.UI.PAT_SEARCH_OPTIONAL_COL_TYPE.getValue().equalsIgnoreCase("CONTACT"))  
			{
				if (ps.getCommChannelsIsNotNull() && ps.getMobile() != null)
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_OPTIONAL), DynamicCellType.STRING);
					cellLabel.setValue(ps.getMobile().getCommValue());

					//Using this as there is no specific flag to say this is NTPF!!!
					if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
						cellLabel.setTooltip(ps.getNTPFDisplayString());
				}
			}
			else if (ps.getWard() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_OPTIONAL), DynamicCellType.STRING);
				cellLabel.setValue(ps.getWard().toString());

				//Using this as there is no specific flag to say this is NTPF!!!
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
		}
		
		if(ps.getAssociatedPatientIsNotNull())
		{
			row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
		}

		if (ps.getIsDead().booleanValue())
		{
			row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
		}

		if (Boolean.FALSE.equals(ps.getIsActive()) && ps.getAssociatedPatient()==null) //WDEV-21588
		{
			if (engine.hasRight(AppRight.CAN_INACTIVATE_PATIENT))
			{
				if (form.getLocalContext().getPDSConfiguration().getInactivePatientRecordBgColour() != null)
				{
					row.setBackColor(form.getLocalContext().getPDSConfiguration().getInactivePatientRecordBgColour());
				}
			}
		}
	}

	private Patient searchInPDSAfterNHS(String nhs) 
	{
		
		PdsRequestParameters params = new PdsRequestParameters(form.getGlobalContext().Core.getSamlXml(), engine.getLoggedInRole());
		PdsRetrievalQueryHelper helper = new PdsRetrievalQueryHelper(domain);
		try
		{
			Patient patVo = helper.makeRequest(params, nhs, PdsRetrievalQueryHelper.HistoricDataIndicator.ON);
			form.getLocalContext().setIsPDSSearchPerformed(patVo!=null);//WDEV-21514
			return patVo;	
		}
		catch (PdsException e)
		{
			e.printStackTrace();
			engine.showMessage("Error calling PdsRetrievalQuery: " + e.toString(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return null;
		}
	}

	private void displayAddress() 
	{
		if (form.lyrSearch().tabLocalSearch().isVisible())
		{
			tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
    		if (form.getLocalContext().getAddressResult() != null)
    		{
    			if (form.getLocalContext().getAddressResult().getLine1() != null && form.getLocalContext().getAddressResult().getLine1().length() > 0)
    			{
    				tabLocalSearch.txtLocalSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine1());
    			}
    			else if (form.getLocalContext().getAddressResult().getLine2() != null && form.getLocalContext().getAddressResult().getLine2().length() > 0)
    			{
    				tabLocalSearch.txtLocalSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine2());
    			}
    			else if (form.getLocalContext().getAddressResult().getLine3() != null && form.getLocalContext().getAddressResult().getLine3().length() > 0)
    			{
    				tabLocalSearch.txtLocalSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine3());
    			}
    			else if(form.getLocalContext().getAddressResult().getLine4() != null && form.getLocalContext().getAddressResult().getLine4().length() > 0)
    			{
    				tabLocalSearch.txtLocalSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine4());
    			}
    			else if (form.getLocalContext().getAddressResult().getLine5() != null && form.getLocalContext().getAddressResult().getLine5().length() > 0)
    			{
    				tabLocalSearch.txtLocalSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine5());
    			}
    
    			if (form.getLocalContext().getAddressResult().getPostCode() != null)
    			{
    				tabLocalSearch.txtLocalSearchPostcode().setValue(form.getLocalContext().getAddressResult().getPostCode());
    			}
    
    			if (form.getLocalContext().getAddressResult().getCounty() != null)
    			{
    				tabLocalSearch.cmbLocalSearchCounty().setValue(form.getLocalContext().getAddressResult().getCounty());
    			}
    		}
		}
		else if (form.lyrSearch().tabPDSSearch().isVisible())
		{
			tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
    		if (form.getLocalContext().getAddressResult() != null)
    		{
    			if (form.getLocalContext().getAddressResult().getLine1() != null && form.getLocalContext().getAddressResult().getLine1().length() > 0)
    			{
    				tabPDSSearch.txtPdsSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine1());
    			}
    			else if (form.getLocalContext().getAddressResult().getLine2() != null && form.getLocalContext().getAddressResult().getLine2().length() > 0)
    			{
    				tabPDSSearch.txtPdsSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine2());
    			}
    			else if (form.getLocalContext().getAddressResult().getLine3() != null && form.getLocalContext().getAddressResult().getLine3().length() > 0)
    			{
    				tabPDSSearch.txtPdsSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine3());
    			}
    			else if(form.getLocalContext().getAddressResult().getLine4() != null && form.getLocalContext().getAddressResult().getLine4().length() > 0)
    			{
    				tabPDSSearch.txtPdsSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine4());
    			}
    			else if (form.getLocalContext().getAddressResult().getLine5() != null && form.getLocalContext().getAddressResult().getLine5().length() > 0)
    			{
    				tabPDSSearch.txtPdsSearchAddress().setValue(form.getLocalContext().getAddressResult().getLine5());
    			}
    			if (form.getLocalContext().getAddressResult().getPostCode() != null)
    			{
    				tabPDSSearch.txtPdsSearchPostcode().setValue(form.getLocalContext().getAddressResult().getPostCode());
    			}
    
    		}
		}
	}

	/*
	private boolean minimumSimpleSearchCriteriaEntered() 
	{	
		Boolean notUsingPDS = !ConfigFlag.DOM.USE_PDS.getValue().equals("None");
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria() == null)
		{
			if (notUsingPDS)
				errorList.add("No patients found.");
			else
				errorList.add("No patients found on Local Search.\nPlease enter minimimum search requirement for PDS (Surname, Sex, DoB)");
			engine.showErrors(errorList.toArray(new String[0]));
			return false;
		}

		PDSPatientFilterSearchCriteriaVo searchCriteria = form.getGlobalContext().Core.getPDSPatientFilterSearchCriteria();
		if (notUsingPDS)
		{
			errorList.add("No patients found.");
		}
		else
		{

			if ((searchCriteria.getSurname() == null)
					|| (searchCriteria.getSex() == null)
					|| (searchCriteria.getDob() == null))
			{
				errorList.add("No patients found on Local Search.\nPlease enter minimimum search requirement for PDS (Surname, Sex, DoB)");
			}
		}

		if (errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[0]));
			return false;
		}
		return true;
	}
	*/

	private void populateGridWithPatients(PatientShortCollection psColl)
	{
		form.dyngrdSearch().getRows().clear();

		if (psColl==null || psColl.size()==0)
			return;
		
		for (PatientShort ps : psColl)
		{
			addRowToDynGrid(ps);
		}
		form.lblTotal().setValue("Total : " + form.dyngrdSearch().getRows().size());
	}

	private void populateGridWithAdvancedSearchResult(PDSAdvancedSearchResultVoCollection reqColl)
	{
		form.dyngrdSearch().getRows().clear();

		if (reqColl==null || reqColl.size()==0)
			return ;
		
		if (Boolean.TRUE.equals(form.getLocalContext().getPDSConfiguration().getSYNCHRONISE_WITH_BACKOFFICE()))
		{
			form.htmWarning().setHTML("<font color=\"red\">Local Patient details will be overwritten from PDS on selection.</font>");
		}
		
		
		for (PDSAdvancedSearchResultVo result : reqColl)
		{
			DynamicGridRow row = form.dyngrdSearch().getRows().newRow();

			if (result.getSurname() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_SURNAME_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(result.getSurname());
			}

			if (result.getForename() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_FORENAME_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(result.getForename());
			}

			if (result.getNHSNumber() != null) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_IDENTIFIER_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(result.getNHSNumber());
			}

			if (result.getGender() != null) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_SEX_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(result.getGender().getText());				
			}

			if (result.getDateOfBirth() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_DOB_IDENT), DynamicCellType.STRING);
				cellLabel.setValue(result.getDateOfBirth().toString(DateFormat.STANDARD));
			}
			
			//WDEV-22452
			if (result.getPDSAddressesIsNotNull())
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdSearch().getColumns().getByIdentifier(COL_ADDRESS_IDENT), DynamicCellType.STRING);
				String adrStr = "";
				for (PDSAddrVo pdsaddre : result.getPDSAddresses())
				{
					adrStr += pdsaddre.getAddressLines();
				}
				cellLabel.setValue(adrStr);
			}
			//WDEV-22452
			
			row.setValue(result);

			if (result.getDateOfDeath() != null)
			{
				row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
			}
		}
		form.lblTotal().setValue("Total : " + form.dyngrdSearch().getRows().size());
		
	}

	private PDSPatientFilterSearchCriteriaVo populateSearchCriteriaFromScreen(int tabPdsPatientSearch)
	{
		PDSPatientFilterSearchCriteriaVo voPatFilter = new PDSPatientFilterSearchCriteriaVo();
		PatientId pid = new PatientId();

		switch (tabPdsPatientSearch)
		{
    		case TAB_LOCAL_SEARCH:
    			tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
    			voPatFilter.setSearchTab(TAB_LOCAL_SEARCH);
    
    			if ((tabLocalSearch.txtLocalSearchIdValue().getValue() != null && tabLocalSearch.txtLocalSearchIdValue().getValue().length() > 0) || tabLocalSearch.txtLocalSeachNHSNo().getValue() != null)
    			{
    				if(tabLocalSearch.txtLocalSearchIdValue().getValue() != null && tabLocalSearch.txtLocalSearchIdValue().getValue().length() > 0)
    				{
    					if (tabLocalSearch.cmbLocalSearchIdType().getValue() == null)
    					{
    						engine.showMessage("Please select a Patient ID Type.","Warning", MessageButtons.OK, MessageIcon.WARNING); //WDEV-21356
    						return null;
    					}
    					pid.setType(tabLocalSearch.cmbLocalSearchIdType().getValue());	
    					pid.setValue(tabLocalSearch.txtLocalSearchIdValue().getValue());			
    					voPatFilter.setPersId(pid);
    				}

    				voPatFilter.setNHSNumber(tabLocalSearch.txtLocalSeachNHSNo().getValue());
    
    				if(ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL") && (PatIdType.NHSN.equals(tabLocalSearch.cmbLocalSearchIdType().getValue()) || tabLocalSearch.txtLocalSeachNHSNo().getValue() != null))
    				{
    					voPatFilter.setSurname(tabLocalSearch.txtLocalSearchSurname().getValue());    					
//    					voPatFilter.setForename(tabLocalSearch.txtLocalSearchForename().getValue());
    					voPatFilter.setIncludeAlias(tabLocalSearch.chkLocalSearchIncludeAlias().getValue());
    					voPatFilter.setSwapNames(tabLocalSearch.chkLocalSearchSwapNames().getValue());
    					voPatFilter.setSex(tabLocalSearch.cmbLocalSearchSex().getValue());
    					voPatFilter.setPostCode(tabLocalSearch.txtLocalSearchPostcode().getValue());
    					voPatFilter.setCounty(tabLocalSearch.cmbLocalSearchCounty().getValue());
    					voPatFilter.setAddress(tabLocalSearch.txtLocalSearchAddress().getValue());
    					voPatFilter.setDob(tabLocalSearch.pdtLocalSearchDOB().getValue());
    					voPatFilter.setExtendedDoB(tabLocalSearch.chkLocalSearchExtendedDoB().getValue());
    					voPatFilter.setDoD(tabLocalSearch.pdtLocalSearchDOD().getValue());
    					voPatFilter.setExtendedDoD(tabLocalSearch.chkLocalSearchExtendedDoD().getValue());
    					//WDEV-21813
    					voPatFilter.setSurnameOrig(tabLocalSearch.txtLocalSearchSurname().getValue());
    					voPatFilter.setForenameOrig(tabLocalSearch.txtLocalSearchForename().getValue());    					
    					voPatFilter.setPostcodeOrig(tabLocalSearch.txtLocalSearchPostcode().getValue());    					
    				}
    			}
    			else
    			{
    				voPatFilter.setSurname(tabLocalSearch.txtLocalSearchSurname().getValue());
    				voPatFilter.setForename(tabLocalSearch.txtLocalSearchForename().getValue());
    				voPatFilter.setIncludeAlias(tabLocalSearch.chkLocalSearchIncludeAlias().getValue());
    				voPatFilter.setSwapNames(tabLocalSearch.chkLocalSearchSwapNames().getValue());
    				voPatFilter.setSex(tabLocalSearch.cmbLocalSearchSex().getValue());
    				voPatFilter.setPostCode(tabLocalSearch.txtLocalSearchPostcode().getValue());
    				voPatFilter.setCounty(tabLocalSearch.cmbLocalSearchCounty().getValue());
    				voPatFilter.setAddress(tabLocalSearch.txtLocalSearchAddress().getValue());
    				voPatFilter.setDob(tabLocalSearch.pdtLocalSearchDOB().getValue());
    				voPatFilter.setExtendedDoB(tabLocalSearch.chkLocalSearchExtendedDoB().getValue());
    				voPatFilter.setDoD(tabLocalSearch.pdtLocalSearchDOD().getValue());
    				voPatFilter.setExtendedDoD(tabLocalSearch.chkLocalSearchExtendedDoD().getValue());
    				//WDEV-21813
					voPatFilter.setSurnameOrig(tabLocalSearch.txtLocalSearchSurname().getValue());
					voPatFilter.setForenameOrig(tabLocalSearch.txtLocalSearchForename().getValue());    					
					voPatFilter.setPostcodeOrig(tabLocalSearch.txtLocalSearchPostcode().getValue());    				
    			}
    			break;
    
    		case TAB_PDS_SEARCH:
    
    			tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
    
    			voPatFilter.setSearchTab(TAB_PDS_SEARCH);
    			
    			voPatFilter.setPersId(pid);
    
    			voPatFilter.setSurname(tabPDSSearch.txtPdsSearchSurname().getValue());
    			voPatFilter.setForename(tabPDSSearch.txtPdsSearchForename().getValue());
    			voPatFilter.setIncludeAlias(tabPDSSearch.chkPdsSearchIncludeAlias().getValue());
    			voPatFilter.setSwapNames(tabPDSSearch.chkPdsSearchSwap().getValue());
    			voPatFilter.setSex(tabPDSSearch.cmbPdsSearchSex().getValue());
    			voPatFilter.setDob(tabPDSSearch.pdtPdsSearchDoB().getValue());
    			voPatFilter.setExtendedDoB(tabPDSSearch.chkPdsSearchExtendedDoB().getValue());
    			voPatFilter.setPostCode(tabPDSSearch.txtPdsSearchPostcode().getValue());
    			voPatFilter.setAddress(tabPDSSearch.txtPdsSearchAddress().getValue());
    			voPatFilter.setGP(tabPDSSearch.txtPdsSearchGp().getValue());
    			voPatFilter.setDoD(tabPDSSearch.pdtPdsSearchDoD().getValue());
    			voPatFilter.setExtendedDoD(tabPDSSearch.chkPdsSearchExtendedDoD().getValue());
    			voPatFilter.setAlgorithmicTrace(tabPDSSearch.chkPdsSearchAlgorithmicTrace().getValue());
    			
				//WDEV-21813
				voPatFilter.setSurnameOrig(tabPDSSearch.txtPdsSearchSurname().getValue());
				voPatFilter.setForenameOrig(tabPDSSearch.txtPdsSearchForename().getValue());    					
				voPatFilter.setPostcodeOrig(tabPDSSearch.txtPdsSearchPostcode().getValue());    				
    			
    			
    			//WDEV-21819
    			//No need to check for RBAC to intiate search as this replaces Simple Search and access is checked on the return results
    			if (textContainPunctuation(tabPDSSearch.txtPdsSearchSurname().getValue()) || textContainPunctuation(tabPDSSearch.txtPdsSearchForename().getValue()))
    			{
    				//WDEV-21819 - check to use wildcharacters or algorithmic
    				if (checkPunctuationForAlgorithmicSearch(tabPDSSearch.txtPdsSearchSurname().getValue()))
    				{								
    					voPatFilter.setAlgorithmicTrace(true); //do this on populateSearchCriteriaFromScreen
    				}
    				else
    				{    					
    					if (!tabPDSSearch.chkPdsSearchAlgorithmicTrace().getValue())
    					{
	    					//replace supported punctuations with wildcard and continue with alphanumeric search
    						String str = tabPDSSearch.txtPdsSearchSurname().getValue().replaceAll("'", "*");
	    					str = str.replaceAll("-", "*");
	    					voPatFilter.setSurname(str); //do this on populateSearchCriteriaFromScreen
    					}
    					else
    						voPatFilter.setSurname(tabPDSSearch.txtPdsSearchSurname().getValue());
	    				
    				}
    				//WDEV-21819 - check to use wildcharacters or algorithmic						
    			}
    			//WDEV-21819
    			
    			break;
		}
		return voPatFilter;
	}

	private void populateScreenFromSearchCriteria(PDSPatientFilterSearchCriteriaVo searchCriteria, int searchTab)
	{
		if (searchCriteria == null)
			return;	
		
		switch (searchTab)
		{
		case TAB_LOCAL_SEARCH:

			tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
			clearSearchFields(TAB_LOCAL_SEARCH, true);

			tabLocalSearch.txtLocalSeachNHSNo().setValue(searchCriteria.getNHSNumber());

			if (searchCriteria.getPersId() != null && searchCriteria.getPersId().getType()!=null && searchCriteria.getPersId().getValue()!=null)
			{
				tabLocalSearch.cmbLocalSearchIdType().newRow(searchCriteria.getPersId().getType(), searchCriteria.getPersId().getValue());
				tabLocalSearch.cmbLocalSearchIdType().setValue(searchCriteria.getPersId().getType());
				tabLocalSearch.txtLocalSearchIdValue().setValue(searchCriteria.getPersId().getIdValue());
			}

			//WDEV-21813
			tabLocalSearch.txtLocalSearchSurname().setValue(searchCriteria.getSurnameOrig());
			tabLocalSearch.txtLocalSearchForename().setValue(searchCriteria.getForenameOrig());
			//WDEV-21813			
			tabLocalSearch.chkLocalSearchIncludeAlias().setValue(searchCriteria.getIncludeAlias());
			tabLocalSearch.chkLocalSearchSwapNames().setValue(searchCriteria.getSwapNames());
			enableDisableSwapSurnameForenameCheckbox(); //WDEV-22341

			if (searchCriteria.getSex() != null)
			{
				tabLocalSearch.cmbLocalSearchSex().newRow(searchCriteria.getSex(), searchCriteria.getSex().toString());
				tabLocalSearch.cmbLocalSearchSex().setValue(searchCriteria.getSex());
			}
			
			//WDEV-21813
			tabLocalSearch.txtLocalSearchPostcode().setValue(searchCriteria.getPostcodeOrig());
			//WDEV-21813

			if (searchCriteria.getCounty() != null)
			{
				tabLocalSearch.cmbLocalSearchCounty().newRow(searchCriteria.getCounty(), searchCriteria.getCounty().toString());
				tabLocalSearch.cmbLocalSearchCounty().setValue(searchCriteria.getCounty());
			}

			tabLocalSearch.txtLocalSearchAddress().setValue(searchCriteria.getAddress());
			tabLocalSearch.pdtLocalSearchDOB().setValue(searchCriteria.getDob());
			tabLocalSearch.chkLocalSearchExtendedDoB().setValue(searchCriteria.getExtendedDoB());
			tabLocalSearch.pdtLocalSearchDOD().setValue(searchCriteria.getDoD());
			tabLocalSearch.chkLocalSearchExtendedDoD().setValue(searchCriteria.getExtendedDoD());
			break;

		case TAB_PDS_SEARCH:

			tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
			clearSearchFields(TAB_PDS_SEARCH, true);

			//WDEV-21813			
			tabPDSSearch.txtPdsSearchSurname().setValue(searchCriteria.getSurnameOrig());
			tabPDSSearch.txtPdsSearchForename().setValue(searchCriteria.getForenameOrig());
			//WDEV-21813			
			
			tabPDSSearch.chkPdsSearchIncludeAlias().setValue(searchCriteria.getIncludeAlias());
			tabPDSSearch.chkPdsSearchSwap().setValue(searchCriteria.getSwapNames());

			if (searchCriteria.getSex() != null)
			{
				tabPDSSearch.cmbPdsSearchSex().newRow(searchCriteria.getSex(), searchCriteria.getSex().toString());
				tabPDSSearch.cmbPdsSearchSex().setValue(searchCriteria.getSex());
			}

			tabPDSSearch.pdtPdsSearchDoB().setValue(searchCriteria.getDob());
			tabPDSSearch.chkPdsSearchExtendedDoB().setValue(searchCriteria.getExtendedDoB());
			//WDEV-21810
			tabPDSSearch.chkPdsSearchExtendedDoD().setValue(searchCriteria.getExtendedDoD());
			
			//WDEV-21813
			tabPDSSearch.txtPdsSearchPostcode().setValue(searchCriteria.getPostcodeOrig());
			//WDEV-21813
			
			tabPDSSearch.txtPdsSearchAddress().setValue(searchCriteria.getAddress());
			tabPDSSearch.txtPdsSearchGp().setValue(searchCriteria.getGP());
			tabPDSSearch.pdtPdsSearchDoD().setValue(searchCriteria.getDoD());
			tabPDSSearch.chkPdsSearchAlgorithmicTrace().setValue(searchCriteria.getAlgorithmicTrace());
		}
	}


	private void swapNames(int tabPdsPatientSearch)
	{
		switch (tabPdsPatientSearch)
		{
		case TAB_LOCAL_SEARCH:
			tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
			if (Boolean.TRUE.equals(tabLocalSearch.chkLocalSearchSwapNames().getValue()) && (tabLocalSearch.txtLocalSearchSurname().getValue() != null || tabLocalSearch.txtLocalSearchForename().getValue() != null))
			{
				String temp = tabLocalSearch.txtLocalSearchSurname().getValue();
				tabLocalSearch.txtLocalSearchSurname().setValue(tabLocalSearch.txtLocalSearchForename().getValue());
				tabLocalSearch.txtLocalSearchForename().setValue(temp);
				//doSearch();
			}

			break;

		case TAB_PDS_SEARCH:
			tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
			if (Boolean.TRUE.equals(tabPDSSearch.chkPdsSearchSwap().getValue()) && (tabPDSSearch.txtPdsSearchSurname().getValue() != null || tabPDSSearch.txtPdsSearchForename().getValue() != null))
			{
				String temp = tabPDSSearch.txtPdsSearchSurname().getValue();
				tabPDSSearch.txtPdsSearchSurname().setValue(tabPDSSearch.txtPdsSearchForename().getValue());
				tabPDSSearch.txtPdsSearchForename().setValue(temp);
				//doSearch();
			}

			break;
		}
	}

	private PatientShortCollection manualSortDOB(SortOrder sortOrder)
	{
		PatientShortCollection tempColl = new PatientShortCollection();

		for(int i = 0;i < form.dyngrdSearch().getRows().size();i++)
		{
			tempColl.add((PatientShort) form.dyngrdSearch().getRows().get(i).getValue());
		}
		form.dyngrdSearch().getRows().clear();
		tempColl.sort(new DobComparator(sortOrder));
		return tempColl;
	}

	public class DobComparator implements Comparator
	{
		private int direction = 1;

		public DobComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public DobComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
		}
		public int compare(Object ob1, Object ob2) 
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;
			if(ob1 instanceof PatientShort )
			{
				PatientShort ps1 = (PatientShort)ob1;
				pdate1 = ps1.getDob();
			}
			if(ob2 instanceof PatientShort)
			{
				PatientShort ps2 = (PatientShort)ob2;
				pdate2 = ps2.getDob();
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;

			return 0;
		}
	}

	private void defaultDoB(PartialDate value)
	{	
		if (value == null)
			return;

		PartialDate newDate = value;
		boolean isExtendedDoBChecked = form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoB().getValue();
		if (isExtendedDoBChecked)
		{
			if (value.getDay() == null && value.getMonth() == null)
				newDate = new PartialDate(value.getYear(), 1,1);
			else if (value.getDay() == null && value.getMonth() != null)
				newDate = new PartialDate(value.getYear(), value.getMonth() ,1);
			else if (value.getDay() != null && value.getMonth() == null)
				newDate = new PartialDate(value.getYear(), 1 ,1);
		}
		form.lyrSearch().tabLocalSearch().pdtLocalSearchDOB().setValue(newDate);
	}

	private void defaultDoD(PartialDate value)
	{	
		if (value == null)
			return;

		PartialDate newDate = value;
		boolean isExtendedDoDChecked = form.lyrSearch().tabLocalSearch().chkLocalSearchExtendedDoD().getValue();
		if (isExtendedDoDChecked)
		{
			if (value.getDay() == null && value.getMonth() == null)
				newDate = new PartialDate(value.getYear(), 1,1);
			else if (value.getDay() == null && value.getMonth() != null)
				newDate = new PartialDate(value.getYear(), value.getMonth() ,1);
			else if (value.getDay() != null && value.getMonth() == null)
				newDate = new PartialDate(value.getYear(), 1 ,1);
		}
		form.lyrSearch().tabLocalSearch().pdtLocalSearchDOD().setValue(newDate);
	}
	
	private boolean typeIsActive(PatIdType type) {
		PatIdTypeCollection collTypes = ims.core.vo.lookups.LookupHelper.getPatIdType(domain.getLookupService());

		for (int i = 0; i < collTypes.size(); i++)
		{
			if(collTypes.get(i).equals(type))
				return true;
		}
		return false;
	}

	
	private boolean isNHSVerified(PatientShort pat)
	{
		PatientIdCollection identifers = pat.getIdentifiers();
		
		if (identifers != null)
		{
			for (int i = 0; i < identifers.size(); i++)
			{
				ims.core.vo.PatientId id = identifers.get(i);
				if(typeIsActive(id.getType()))
				{
					if ((!id.getVerifiedIsNotNull() || (id.getVerifiedIsNotNull() && !id.getVerified())) && id.getType().equals(PatIdType.NHSN))
					{
						return false;
					}
				}
			}
		}
		return true;
	}


	private void selectPatient()
	{
		PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
		if ("None".equals(ConfigFlag.DOM.USE_PDS.getValue())) //WDEV-21365
		{
			form.getGlobalContext().Core.setPatientShort((PatientShort)form.dyngrdSearch().getValue());
			form.getGlobalContext().Core.setPatientToBeDisplayed((PatientShort)form.dyngrdSearch().getValue());
			engine.open(form.getForms().Core.PDSDemographics);
			return;
		}
//		else if (!"None".equals(ConfigFlag.DOM.USE_PDS.getValue()) && !(pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null)))
//		{
//			PDSAdvancedSearchResultVo result = ((PDSAdvancedSearchResultVo)form.dyngrdSearch().getValue());
//			String nhsNumber = result.getNHSNumber();
//			openPDSDemographicsForPatientBasedOnNHS(nhsNumber);
//		}
		
		if (form.dyngrdSearch().getValue()!=null && form.dyngrdSearch().getValue() instanceof PatientShort && ((PatientShort)form.dyngrdSearch().getValue()).getID_PatientIsNotNull())
		{
			//WDEV-21392
			PatientShort selectedPatient = (PatientShort)form.dyngrdSearch().getValue();
			form.getLocalContext().setPatientSelectedOnLocalSearchTab(selectedPatient);
			PatientId nhsPID = selectedPatient.getNhsn();
			Integer scn = selectedPatient.getSCN();
			String nhsNumber = nhsPID!=null ? nhsPID.getIdValue() : null;
			//WDEV-22321
			//WDEV-21862 - For BW - If local NHS Number but not synchronised, i.e. no scn , then force a search by nhs number on pds to verify.
			if (nhsNumber!=null && /*scn!=null && scn!=0 &&*/ !isNHSVerified(selectedPatient))  //WDEV-21414 //WDEV-22290
			{
				//openPDSDemographicsForPatientBasedOnNHS(nhsNumber);
				Patient patVo = searchInPDSAfterNHS(nhsNumber);
				if (patVo != null && !isNHSVerified(selectedPatient))
				{
					form.lyrSearch().showtabPDSSearch();
					form.dyngrdSearch().getRows().clear();
					addRowToDynGrid(patVo);
				}
				else
				{
					openPDSDemographicsForPatientBasedOnNHS(nhsNumber);
				}
			}
			//WDEV-22321
			else if (nhsNumber!=null && ((scn != null && scn != 0)  &&  isNHSVerified(selectedPatient)))
			{
				openPDSDemographicsForPatientBasedOnNHS(nhsNumber);
			}
			//WDEV-22321
			else if (nhsNumber!=null && (scn!=null && scn == 0))
			{
				openPDSDemographicsForPatientBasedOnNHS(nhsNumber);
			}
			//WDEV-22498
			//WDEV-21392
			else 
			{	
				// PDS AUTHENTICATION
				if(pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, null))
				{
					//try search on PDS without nhs number
					form.dyngrdSearch().getRows().clear();
					form.getLocalContext().setIsPDSSearchStartedOnSelectingLocalRecord(true);
					doPDSSearch(false, true);
				}
				else
				{
					//continue with local patient
	    			form.getGlobalContext().Core.setPatientShort(selectedPatient);
	    			form.getGlobalContext().Core.setPatientToBeDisplayed(selectedPatient);
	    			form.getLocalContext().setPatientSavedLocally(null);
	    			form.getGlobalContext().Core.setPdsSuccesfullSearch(Boolean.FALSE);
	    			engine.open(form.getForms().Core.PDSDemographics);					
				}
			}
		}
		else if (form.dyngrdSearch().getValue()!=null && form.dyngrdSearch().getValue() instanceof Patient && ((Patient)form.dyngrdSearch().getValue()).getID_Patient()==null)
		{
			if (savePDSPatientLocally((Patient)form.dyngrdSearch().getValue()))
			{
    			form.getGlobalContext().Core.setPatientShort((PatientShort)form.getLocalContext().getPatientSavedLocally());
    			form.getGlobalContext().Core.setPatientToBeDisplayed((PatientShort)form.getLocalContext().getPatientSavedLocally());
    			form.getLocalContext().setPatientSavedLocally(null);
    			form.getGlobalContext().Core.setPdsSuccesfullSearch(Boolean.TRUE);
    			engine.open(form.getForms().Core.PDSDemographics);
			}
		}
		else if (form.dyngrdSearch().getValue()!=null && form.dyngrdSearch().getValue() instanceof  PDSAdvancedSearchResultVo)
		{
			PDSAdvancedSearchResultVo result = ((PDSAdvancedSearchResultVo)form.dyngrdSearch().getValue());
			String nhsNumber = result.getNHSNumber();
			openPDSDemographicsForPatientBasedOnNHS(nhsNumber);
		}
	}


	private void setPDSSearchCriteriaWithSelectedPatientDetails(PatientShort selectedPatient)
	{
		tabPDSSearchContainer tabPds = form.lyrSearch().tabPDSSearch();
		
		if (selectedPatient.getName() != null)
		{
			if (selectedPatient.getName().getSurnameIsNotNull() ) 
			{ 
				tabPds.txtPdsSearchSurname().setValue(selectedPatient.getName().getSurname());
			}

			if (selectedPatient.getName().getForenameIsNotNull() ) 
			{
				tabPds.txtPdsSearchForename().setValue(selectedPatient.getName().getForename());
			}
		}

		if (selectedPatient.getSex() != null) 
		{
			
			tabPds.cmbPdsSearchSex().setValue(selectedPatient.getSex());				
		}
		
		if (selectedPatient.getDob() != null)
		{
			tabPds.pdtPdsSearchDoB().setValue(selectedPatient.getDob());
		}
	}

	private void openPDSDemographicsForPatientBasedOnNHS(String nhsNumber)
	{
		if (nhsNumber==null)
			return;
		
		boolean succesfullyRetrieved = false;
		
		//ClassCastException
		//form.getGlobalContext().Core.setPatientShort(patVo);
		//form.getGlobalContext().Core.setPatientToBeDisplayed(patVo);
		if(form.dyngrdSearch().getValue() instanceof PatientShort)
		{
			form.getGlobalContext().Core.setPatientShort((PatientShort)form.dyngrdSearch().getValue());
			form.getGlobalContext().Core.setPatientToBeDisplayed((PatientShort)form.dyngrdSearch().getValue());
		}
		else if(form.dyngrdSearch().getValue() instanceof PDSAdvancedSearchResultVo)
		{
			Patient patVo = searchInPDSAfterNHS(nhsNumber);
	
			String[] errors = patVo.validate();
			
			if (errors!=null && errors.length>0)
			{
				engine.showErrors(errors);
				return;
			}
			
			//WDEV-21414
			if (savePDSPatientLocally(patVo))
			{
    			form.getGlobalContext().Core.setPatientShort((PatientShort)form.getLocalContext().getPatientSavedLocally());
    			form.getGlobalContext().Core.setPatientToBeDisplayed((PatientShort)form.getLocalContext().getPatientSavedLocally());
    			form.getLocalContext().setPatientSavedLocally(null);
    			form.getGlobalContext().Core.setPdsSuccesfullSearch(Boolean.TRUE);
			}
			else
				return;  // WDEV-21866  return at this point, if false returned from savePDSPatientLocally, it indicates Duplicates patients found and that dialog will be launched.
		}
		
		engine.open(form.getForms().Core.PDSDemographics);
	}

	private void selectionChanged()
	{
		updateControlsState();
	}

	private boolean savePDSPatientLocally(Patient patientToSave) //WDEV-21414
	{
		if (patientToSave==null)
			return false;
		
		PatientLiteVoCollection patients = null;
		
		if(patientToSave.getNhsn() != null && patientToSave.getNhsn().getIdValue() != null && patientToSave.getNhsn().getIdValue().length() > 0)
			patients = domain.listPatientsByIdentifier(patientToSave.getNhsn());
		
		//WDEV-22290
		if(patients != null && patients.size() > 1)
		{
			form.getLocalContext().setPdsPatient(patientToSave);
			form.getGlobalContext().Core.setDuplicatedPatients(patients);
			engine.open(form.getForms().Core.DuplicatedPatients);
			return false;
		}
		else if  (patients == null || (patients != null && patients.size() == 0))
		{
			try
			{
				patients = domain.listPatientsByKeyFields(patientToSave.getName().getSurname(), patientToSave.getName().getForename(), patientToSave.getDob() != null ? patientToSave.getDob().toInteger() : null, patientToSave.getSex());
			}
			catch (DomainInterfaceException e1)
			{
				e1.printStackTrace();
				engine.showMessage("Error listing patients by key fields: " + e1.toString(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
				return false;
			}
			
			if(patients != null && patients.size() > 0)
			{
				form.getLocalContext().setPdsPatient(patientToSave);
				form.getGlobalContext().Core.setDuplicatedPatients(patients);
				engine.open(form.getForms().Core.DuplicatedPatients);
				return false;
			}
		}
		else if (patients != null && patients.size() == 1)
		{
			//exact match, no need to save local
			form.getLocalContext().setPatientSavedLocally(domain.getPatient(patients.get(0)));
			return true;
		}
		//WDEV-22290
		
		//WDEV-21392
		if (patientToSave.getPatientIdentifier(PatIdType.NHSN)!=null)
			patientToSave.getPatientIdentifier(PatIdType.NHSN).setVerified(true);			
		//WDEV-21392
		
		patientToSave.setIsActive(true);
		String[] errors = patientToSave.validate();
					
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			patientToSave = domain.savePatient(patientToSave, false, false);
			form.getLocalContext().setPatientSavedLocally(patientToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return false;
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage("Error saving PDS patient to local DB: " + e.toString(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage("Error saving PDS patient to local DB: " + e.toString(),"Error", MessageButtons.OK, MessageIcon.ERROR); //WDEV-21356
			return false;
		}
		
		return true;
	}

	private void newPatient()
	{
		PatientShort voPatShort = new PatientShort();
		form.getGlobalContext().Core.setPatientToBeDisplayed(voPatShort);
		setPatientFilterDetails(); //WDEV-21680
		form.getGlobalContext().Core.setPatientShort(null);
		
		engine.open(form.getForms().Core.PDSDemographics);
	}

	//WDEV-21680
	protected void setPatientFilterDetails() //WDEV-21680
	{
		PatientFilter voPatFilter = new PatientFilter();
		
		if (form.lyrSearch().tabLocalSearch().isVisible())
		{
			tabLocalSearchContainer tabLocalSearch = form.lyrSearch().tabLocalSearch();
    		voPatFilter.setForename(tabLocalSearch.txtLocalSearchForename().getValue());
    		voPatFilter.setSurname(tabLocalSearch.txtLocalSearchSurname().getValue());
    		voPatFilter.setSex(tabLocalSearch.cmbLocalSearchSex().getValue());
    		voPatFilter.setDob(tabLocalSearch.pdtLocalSearchDOB().getValue());	
		}
		else if (form.lyrSearch().tabPDSSearch().isVisible())
		{	
		 	tabPDSSearchContainer tabPDSSearch = form.lyrSearch().tabPDSSearch();
			voPatFilter.setForename(tabPDSSearch.txtPdsSearchForename().getValue());
			voPatFilter.setSurname(tabPDSSearch.txtPdsSearchSurname().getValue());
			voPatFilter.setSex(tabPDSSearch.cmbPdsSearchSex().getValue());
			voPatFilter.setDob(tabPDSSearch.pdtPdsSearchDoB().getValue());	
    		
		}
		
		form.getGlobalContext().Core.setPatientFilter(voPatFilter);
	}
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onChkPdsSearchAlgorithmicTraceValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getContinueWithLocalPatientMessageBoxId()!=null && form.getLocalContext().getContinueWithLocalPatientMessageBoxId() == messageBoxId && DialogResult.YES.equals(result))
		{
			form.lyrSearch().showtabLocalSearch();
			
			createLocalBackOffice(PDSBackOfficeType.PDS_SYNC_REQUIRED,"Local patient not found on PDS",PDSBackOfficeWorkPriority.P1);
			
			form.getGlobalContext().Core.setPatientShort(form.getLocalContext().getPatientSelectedOnLocalSearchTab());
			form.getGlobalContext().Core.setPatientToBeDisplayed(form.getLocalContext().getPatientSelectedOnLocalSearchTab());
		
			engine.open(form.getForms().Core.PDSDemographics);
		}
		else if (form.getLocalContext().getTimerMessageBoxID() != null && form.getLocalContext().getTimerMessageBoxID() == messageBoxId && DialogResult.YES.equals(result))
		{
			form.setMode(FormMode.VIEW);
			form.getTimers().gettimerAdvancedSearch().setEnabled(false);
			
			// WDEV-21955 - Need to be able to continue with the local patient if there is one - cate backoffice entry etc..
			if (form.getLocalContext().getPatientSelectedOnLocalSearchTabIsNotNull())
			{
				createLocalBackOffice(PDSBackOfficeType.PDS_SYNC_REQUIRED,"Local patient not found on PDS or PDS Search Cancelled",PDSBackOfficeWorkPriority.P1);
				form.getGlobalContext().Core.setPatientShort(form.getLocalContext().getPatientSelectedOnLocalSearchTab());
				form.getGlobalContext().Core.setPatientToBeDisplayed(form.getLocalContext().getPatientSelectedOnLocalSearchTab());
				engine.open(form.getForms().Core.PDSDemographics);
			}
		}
		else if (form.getLocalContext().getTimerMessageBoxID() != null && form.getLocalContext().getTimerMessageBoxID() == messageBoxId && DialogResult.NO.equals(result))
		{
			form.getLocalContext().setTimerTimesRun(0);
			form.getTimers().gettimerAdvancedSearch().setEnabled(true);
		}
		else  if (form.getLocalContext().getTraceMessageBoxId() != null && form.getLocalContext().getTraceMessageBoxId() == messageBoxId && DialogResult.NO.equals(result))
		{
			doPDSSearch(false, false);
		}		
	}

	// WDEV-22341
	@Override
	protected void onTxtLocalSearchForenameValueChanged() throws PresentationLogicException
	{
		enableDisableSwapSurnameForenameCheckbox();		
	}

	// WDEV-22341
	@Override
	protected void onTxtLocalSearchSurnameValueChanged() throws PresentationLogicException
	{
		enableDisableSwapSurnameForenameCheckbox();
	}
	
	// WDEV-22341
	protected void enableDisableSwapSurnameForenameCheckbox()
	{
		/*
		 * Swap Surname and Forename checkbox should only be enabled if BOTH Surname or Forename are populated
		 */
		if (form.lyrSearch().tabLocalSearch().txtLocalSearchForename().getValue() != null
				&& form.lyrSearch().tabLocalSearch().txtLocalSearchSurname().getValue() != null)
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setVisible(true);
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setEnabled(true);
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setValue(Boolean.FALSE);
		}
		else
		{
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setVisible(false);
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setEnabled(false);
			form.lyrSearch().tabLocalSearch().chkLocalSearchSwapNames().setValue(Boolean.FALSE);
		}
		
	}
}
