//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotetracking;

import ims.core.forms.casenotetracking.GenForm.grdCaseNoteVolumesRow;
import ims.core.forms.casenotetracking.GenForm.ctnDetailsContainer.grdTransferSummaryRow;
import ims.core.vo.CaseNoteFolderVoCollection;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		try 
		{
			open();
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
	}
	
	private void open() throws DomainInterfaceException 
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull()
			&& form.getGlobalContext().Core.getPatientShort().getPatId(PatIdType.HOSPNUM) != null)
			fillVolumeGrid(domain.listCaseNotes(form.getGlobalContext().Core.getPatientShort().getPatId(PatIdType.HOSPNUM).getValue(), "VOLUME", ""));

		updateContextMenu();
	}

	private void fillVolumeGrid(CaseNoteFolderVoCollection volColl) 
	{
		form.grdCaseNoteVolumes().getRows().clear();
		form.ctnDetails().grdTransferSummary().getRows().clear();
		
		if (volColl == null || volColl.size() == 0)
			return;
		
		for (int i = 0 ; i < volColl.size() ; i++)
		{
			grdCaseNoteVolumesRow row = form.grdCaseNoteVolumes().getRows().newRow();
			
			row.setcolVolume(volColl.get(i).getVolume());
			row.setcolDate(volColl.get(i).getLocDate() != null ? volColl.get(i).getLocDate().toString() : "0");
			row.setcolLocation(volColl.get(i).getLocationIsNotNull() && volColl.get(i).getLocation().length() > 0 ? volColl.get(i).getLocation() : "Unknown");
			row.setcolComments(volColl.get(i).getComments());
			row.setValue(volColl.get(i));
		}
	}

	@Override
	protected void onGrdTransferSummarySelectionChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onGrdCaseNoteVolumesSelectionChanged()
	{
		try 
		{
			openVolumeHistory(form.grdCaseNoteVolumes().getSelectedRow().getcolVolume().toString());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		updateContextMenu();
	}
	private void updateContextMenu()
	{
		form.getContextMenus().Core.hideAllCaseNoteMenuMenuItems();
		if (form.grdCaseNoteVolumes().getSelectedRow() != null)
			form.getContextMenus().Core.getCaseNoteMenuTRANSFERItem().setVisible(true);
	}

	private void openVolumeHistory(String vol) throws DomainInterfaceException 
	{
		fillHistoryGrid(domain.listCaseNotes(form.getGlobalContext().Core.getPatientShort().getPatId(PatIdType.HOSPNUM).getValue(), "HISTORY", vol));
	}

	private void fillHistoryGrid(CaseNoteFolderVoCollection volColl) 
	{
		form.ctnDetails().grdTransferSummary().getRows().clear();
		if (volColl == null || volColl.size() == 0)
			return;
		
		for (int i = 0 ; i < volColl.size() ; i++)
		{
			grdTransferSummaryRow row = form.ctnDetails().grdTransferSummary().getRows().newRow();
			
			row.setcolDate(volColl.get(i).getLocDateIsNotNull() ? (volColl.get(i).getLocTimeIsNotNull() ? volColl.get(i).getLocDate().toString() + " " +  volColl.get(i).getLocTime().toString() : volColl.get(i).getLocDate().toString()) : "");
			row.setcolFrom(volColl.get(i).getLocation());
			row.setcolTo(volColl.get(i).getMoveTo());
			row.setcolRecordingUser(volColl.get(i).getUNAM());
			
			DateTime dtRecording = null;
			if (volColl.get(i).getRDAT() != null)
				dtRecording = new DateTime(volColl.get(i).getRDAT(), volColl.get(i).getRTIM());
			
			row.setcolRecDateTime(dtRecording != null ? dtRecording.toString() : "");
			row.setValue(volColl.get(i));
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.CaseNoteMenu.TRANSFER:
				transferNotes();					
				break;
		}
	}
	
	private void transferNotes()
	{
		if (form.grdCaseNoteVolumes().getSelectedRow() != null)
		{
			form.getGlobalContext().Core.setCurrentCaseFolderLocation(form.grdCaseNoteVolumes().getSelectedRow().getcolLocation().toString());
			
			engine.open(form.getForms().Core.CaseNoteTransferDialog);
		}
		else
			updateContextMenu();
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.CaseNoteTransferDialog) 
			&& form.grdCaseNoteVolumes().getSelectedRow() != null
			&& form.grdCaseNoteVolumes().getSelectedRow().getValue() != null
			&& result.equals(DialogResult.OK))
		{
			if (form.getGlobalContext().Core.getCaseFolderChangeIsNotNull())
			{
				form.getGlobalContext().Core.getCaseFolderChange().setVolume(form.grdCaseNoteVolumes().getSelectedRow().getcolVolume().toString());
				form.getGlobalContext().Core.getCaseFolderChange().setLocation(form.grdCaseNoteVolumes().getSelectedRow().getcolLocation().toString());
				form.getGlobalContext().Core.getCaseFolderChange().setUNAM(engine.getLoggedInUser().getUsername());//"SU");
				
				try 
				{
					domain.saveCaseNote(form.getGlobalContext().Core.getCaseFolderChange());
				} 
				catch (DomainInterfaceException e) 
				{
					engine.showMessage(e.getMessage());
				} 
				catch (StaleObjectException e) 
				{
					engine.showMessage(e.getMessage());
				}
				
				try 
				{
					open();
				} 
				catch (DomainInterfaceException e) 
				{
					engine.showMessage(e.getMessage());
					return;
				}
			}
		}

	}

	@Override
	protected void onGrdCaseNoteVolumesSelectionCleared() throws PresentationLogicException
	{
		form.ctnDetails().grdTransferSummary().getRows().clear();
		updateContextMenu();
	}
}

