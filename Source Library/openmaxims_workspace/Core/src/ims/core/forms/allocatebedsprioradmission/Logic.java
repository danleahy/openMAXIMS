//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Mara Iroaie using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.allocatebedsprioradmission;

import java.text.ParseException;

import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AdmissionDetailLiteVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceVo;
import ims.core.vo.BedSpaceVoCollection;
import ims.core.vo.FloorBedSpaceLayoutVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.BedStatus;
import ims.framework.controls.Bed;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.Position;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		populateScreenFromdata();
		
	}
	private void populateScreenFromdata()
	{
		BedSpaceStateLiteVo bedState = form.getGlobalContext().Core.getSelectedBedSpaceState();
		
		form.cmbWard().newRow(bedState.getWard(), bedState.getWard().getName());
		form.cmbWard().setValue(bedState.getWard());
		
		form.cmbBay().newRow(bedState.getBay(), bedState.getBay().getName());
		form.cmbBay().setValue(bedState.getBay());
		
		form.dteBed().setValue(new Date());
		
		loadSelectedLayout(form.cmbBay().getValue());
		
	}
	
	private void loadSelectedLayout(LocationLiteVo selectedBay)
	{
		form.bedPlanner1().clear();
		
		if (selectedBay == null)
			return;
		
		BedSpaceVoCollection bedsColl = null;		
		
		FloorBedSpaceLayoutVo layout = domain.listLayoutForCurrentBay(selectedBay);
		if(layout != null && layout.getFloorLayout() != null)
		{
			form.bedPlanner1().setPlan(layout.getFloorLayout().getVml());
			
			if(layout.getBedSpaces() != null)
			{
				bedsColl = new BedSpaceVoCollection();
				for(int x = 0; x < layout.getBedSpaces().size(); x++)
				{
					BedSpaceVo bedVo = layout.getBedSpaces().get(x);
					if(bedVo != null)
					{
						Bed bed = null;
						try
						{
							bed = new Bed(bedVo.getID_BedSpace(), Bed.WHITE.getType(), bedVo.getVml(),Position.parse(bedVo.getTextPosition()), Position.parse(bedVo.getImagePosition()));
							bed.setColor(Bed.WHITE);
						}
						catch (ParseException e)
						{
							throw new CodingRuntimeException("Parse exception on Bed Planner");
						}
						
						bed.setIdentifier(bedVo);
						
						//WDEV-8272
						if(bedVo.getBedNumberIsNotNull())
							bed.setNumber(bedVo.getBedNumber());

						BedSpaceStateLiteVo state = form.getGlobalContext().Core.getSelectedBedSpaceState();
						
						//WDEV-18538
						BedSpaceStateStatusLiteVo currentStataus=null;
						if (state!=null)
						{
							currentStataus = state.getCurrentBedStatus();
						}
						
						if (currentStataus!=null && currentStataus.getBedStatusIsNotNull())//WDEV-18538
						{
							if (currentStataus.getBedStatus().equals(BedStatus.AVAILABLE))
							{
								bed.setColor(bed.PINK);	
							}
							else if (currentStataus.getBedStatus().equals(BedStatus.OCCUPIED))
							{
								bed.setColor(bed.GREEN);
							}
						}
						
						if(state != null)
						{
							if(state.getInpatientEpisodeIsNotNull())
							{
								if(state.getInpatientEpisode().getPasEventIsNotNull())
								{
									if(state.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
									{
										PatientLite_IdentifiersVo patient = state.getInpatientEpisode().getPasEvent().getPatient();
										
										String text = "";
										if(patient.getNameIsNotNull())
											text += patient.getName().toShortForm();
										
										if(state.getInpatientEpisode().getPasEvent().getConsultantIsNotNull())
											text += "<br>" + state.getInpatientEpisode().getPasEvent().getConsultant().getIMosName();
										
										bed.setText(text);

									}
								}
							}
						}
						
						bed.setNumber(bed.getNumber());
						
						bed.setTooltip(bedVo.getDescription());
							
						form.bedPlanner1().addBed(bed);
						bedsColl.add(bedVo);
					}
				}
			}			
		}
		
	}
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onCmbBayValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onCmbWardValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
}
