//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientjourneycomponent;

import ims.RefMan.vo.CatsReferralForPatientJourneyVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.JourneyForPatientJourneyVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.enums.PatientJourneyAction;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.pathways.vo.PathwayHistoryVoCollection;
import ims.pathways.vo.PathwayRTTCurrentStatusVo;
import ims.pathways.vo.PathwayRTTCurrentStatusVoCollection;
import ims.pathways.vo.PauseDetailsVo;
import ims.pathways.vo.PauseDetailsVoCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void initialise(CatsReferralRefVo catsReferral)
	{
		form.lblPathway().setVisible(false);//WDEV-21179
		form.lbl2().setVisible(false);//WDEV-21179
		populateScrenFromData(catsReferral);
	}

	private void populateScrenFromData(CatsReferralRefVo catsReferral)
	{
		CatsReferralForPatientJourneyVo catsRef = domain.getCatsReferral(catsReferral);

		if (catsRef == null)
			return;
		
		StringBuffer referralLabel = new StringBuffer();
		
		referralLabel.append( catsRef.getReferralDetails() != null && catsRef.getReferralDetails().getDateOfReferral() != null ? catsRef.getReferralDetails().getDateOfReferral().toString() : "");
		referralLabel.append( catsRef.getUrgency() != null ? (referralLabel.length() > 0 ? " - " + catsRef.getUrgency().getText() : catsRef.getUrgency().getText()) : "");
		referralLabel.append( catsRef.getReferralDetails() != null && catsRef.getReferralDetails().getService() != null ? (referralLabel.length() > 0 ? " - " + catsRef.getReferralDetails().getService().getServiceName() : catsRef.getReferralDetails().getService().getServiceName()) : "");
		referralLabel.append( catsRef.getReferralDetails() != null && catsRef.getReferralDetails() .getReferringConsultant() != null ? (referralLabel.length() > 0 ? " - " + catsRef.getReferralDetails() .getReferringConsultant().toString() : catsRef.getReferralDetails() .getReferringConsultant().toString()) : "");
		
		form.lblReferral().setValue(referralLabel.toString().length() > 50 ? referralLabel.toString().substring(0, 50) + "..." : referralLabel.toString());
		form.lblReferral().setTooltip(referralLabel.toString());
		
		populatePathway(catsRef.getJourney());
		populateRTTCurrentStatus(catsRef.getJourney());
		form.lblRttBreachDate().setValue(!Boolean.TRUE.equals(catsRef.getIsEmergencyReferral()) && catsRef.getReferralDetails() != null && catsRef.getReferralDetails().getEnd18WW() != null ? catsRef.getReferralDetails().getEnd18WW().toString() : "");
		populateAdjustedDate(catsRef);
		
		form.ccPatientJourney().hideAllCMExceptViewClockHistory(Boolean.TRUE);
		
		if (catsRef.getJourney() == null)
			form.ccPatientJourney().clear();
		else
			form.ccPatientJourney().setValue(domain.getPatientJourney(catsRef.getJourney()));
		
		form.getLocalContext().setJourney(catsRef.getJourney());
		
	}

	private void populateAdjustedDate(CatsReferralForPatientJourneyVo catsReferral)
	{
		if (catsReferral == null || catsReferral.getJourney() == null || catsReferral.getJourney().getCurrentClock() == null || catsReferral.getReferralDetails() == null )
		{
			form.lbl5().setVisible(false);
			form.lblAdjustedDate().setVisible(false);
			return;
		}
		
		JourneyForPatientJourneyVo journey = catsReferral.getJourney();
		Date breachDate =  catsReferral.getReferralDetails().getEnd18WW();
		
		PauseDetailsVoCollection pauseDetColl = journey.getCurrentClock().getPauseDetails();
		
		int nrOfDays = 0;
		
		if (pauseDetColl != null && pauseDetColl.size() > 0)
		{	
			for (int i = 0; i < pauseDetColl.size(); i++)
			{	
				PauseDetailsVo pauseDet = pauseDetColl.get(i);
				
				if (pauseDet.getActive() && pauseDet.getPauseStartIsNotNull() && pauseDet.getPauseStopIsNotNull() && pauseDet.getPauseStart().isLessThan(pauseDet.getPauseStop()))
					nrOfDays = nrOfDays + (int) Date.daysBetween(pauseDet.getPauseStart(), pauseDet.getPauseStop());
			}
		}
		
		form.lblAdjustedDate().setValue(nrOfDays != 0 && breachDate != null ? breachDate.addDay(nrOfDays).toString() : "");
		
		// WDEV-21127 Label should not be visible if no adjustment
		if (!form.lblAdjustedDate().getValue().equals(""))
			form.lbl5().setVisible(true);
		else
			form.lbl5().setVisible(false);
	}

	private void populatePathway(JourneyForPatientJourneyVo journey)
	{
		if (journey == null || journey.getPathway() == null)
			return ;
		
		ArrayList<String> listOfPreviousPathways = new ArrayList<String>();
		
		form.lblPathway().setValue(journey.getPathway().toString());
		
		PathwayHistoryVoCollection voHistory = journey.getPathwayHistory();
		
		for (int i = voHistory.size() - 1 ; i >= 0 ; i-- )
		{
			if (voHistory.get(i) == null)
				continue;
			
			StringBuffer text = new StringBuffer();
			
			text.append(voHistory.get(i).getPathway().toString());		
			text.append(voHistory.get(i).getSystemInformation().getCreationUser()!= null ? " - " + voHistory.get(i).getSystemInformation().getCreationUser(): ""); //WDEV-20078
			text.append(voHistory.get(i).getSystemInformation().getCreationUser()!= null? ", " + voHistory.get(i).getSystemInformation().getCreationDateTime(): ""); //WDEV-20078			
			
			listOfPreviousPathways.add(text.toString());
		}	
		
		if (listOfPreviousPathways.size() > 0)
		{
			String result = "";

			for (int i = 0; i < listOfPreviousPathways.size(); i++ )
				result = result + listOfPreviousPathways.get(i) + "<br>";

			form.lblPathway().setTooltip(result.toString());
		}
		
	}

	private void populateRTTCurrentStatus(JourneyForPatientJourneyVo journey)
	{

		if (journey == null || journey.getCurrentClock() == null)
		{
			form.lblRttCurrentStatus().setValue(null);//WDEV-20888
			return;
		}
		
		PathwayRTTCurrentStatusVo currentRTTStatus = journey.getCurrentClock().getCurrentRTTStatus();
		PathwayRTTCurrentStatusVoCollection rttHistory = journey.getCurrentClock().getRTTStatusHistory();
		
		if (rttHistory != null && rttHistory.size() > 0)
			rttHistory.sort(SortOrder.DESCENDING);
		
		if (Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && currentRTTStatus != null)
		{
			if (currentRTTStatus != null)
				form.lblRttCurrentStatus().setValue(currentRTTStatus.getRTTStatus().getNationalCode() != null ?  currentRTTStatus.getRTTStatus().getNationalCode().toString() + ". " + currentRTTStatus.getRTTStatus().getDescription() : currentRTTStatus.getRTTStatus().getDescription());
			
			String rttHistoryTooltip = formatRTTStatusHistoryTooltip(true, currentRTTStatus);
			
    		if (rttHistory != null && rttHistory.size() > 0)
    		{
    			if (rttHistory.size() > 1 || ( rttHistory.size() == 1 && !rttHistory.get(0).equals(currentRTTStatus)) )
    				rttHistoryTooltip += "RTT Status History: <br>";
    			
    			for (int i = rttHistory.get(0).equals(currentRTTStatus) ? 1 : 0 ; i < rttHistory.size(); i++)
    			{    				
    				rttHistoryTooltip += formatRTTStatusHistoryTooltip(false, rttHistory.get(i));
    			}					
    		}
    		
    		form.lblRttCurrentStatus().setTooltip(rttHistoryTooltip);
		}		
	}
	
	private String formatRTTStatusHistoryTooltip(boolean currentStatus, PathwayRTTCurrentStatusVo statusDetails)
	{	
		String tooltip = "";
		
		if (statusDetails != null)
		{	
    		if (Boolean.TRUE.equals(currentStatus))
    			tooltip = "RTT Current Status: <br>";
    		
    		String hcpName = statusDetails.getStatusBy() != null && statusDetails.getStatusBy().getName() != null ? statusDetails.getStatusBy().getName().toString() : "";
    		
    		String rttStatusDetails = "";
    		
    		if (statusDetails.getRTTStatusIsNotNull())
    			rttStatusDetails = statusDetails.getRTTStatus().getNationalCode() != null ?  statusDetails.getRTTStatus().getNationalCode().toString() + ". " + statusDetails.getRTTStatus().getDescription() : statusDetails.getRTTStatus().getDescription();
    			
    		tooltip += statusDetails.getStatusDateTime()+ " - " + hcpName + " - " + rttStatusDetails + "<br>";  
		}
		
  		return tooltip;
	}

	@Override
	protected void onCcPatientJourneyValueChanged() throws PresentationLogicException
	{
		if (PatientJourneyAction.VIEWCLOCKHISTORY.equals(form.ccPatientJourney().getLastAction()))
		{
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(form.getLocalContext().getJourney());
			engine.open(form.getForms().Pathways.PatientJourneyClock);
			
		}
	}
}
