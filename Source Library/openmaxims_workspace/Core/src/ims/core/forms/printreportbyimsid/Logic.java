//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.forms.printreportbyimsid;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.io.File;
import java.security.SecureRandom;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		form.btnPrint().setEnabled(form.ccPrinter().getSelectedPrinter() != null);
	}

	private void initialize(Object[] args) 
	{
		form.getLocalContext().setCurrentLocation(domain.getCurrentLocation());
		
		//wdev-14713
		String locname = null;
		if( form.getLocalContext().getCurrentLocation() != null )
		{
			locname = form.getLocalContext().getCurrentLocation().getName();
			if( locname != null && locname.length() > 65)
				locname = locname.substring(0, 64);
		}
		form.lblLocation().setValue(form.getLocalContext().getCurrentLocation() != null ? locname : "No location selected");	//wdev-14713
		form.lblLocation().setTooltip(form.getLocalContext().getCurrentLocation() != null ? form.getLocalContext().getCurrentLocation().getName() : "No location selected"); //wdev-14713
		
		form.ccPrinter().initialize(form.getLocalContext().getCurrentLocation(), PrinterScope.DEFAULT);
		form.chkListAll().setValue(false);
		
		form.chkStoreCopy().setVisible(form.getGlobalContext().Core.getPatientShort() != null);
		
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof String)
			{
				form.getLocalContext().setCareContextSeedName((String) args[0]);
			}
			
			if(args[1] instanceof Integer)
			{
				form.getLocalContext().setCareContextSeedValue((Integer) args[1]);
			}
		}
	}
	
	@Override
	protected void onBtnPreviewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		print(true);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		print(false);
	}

	private void print(boolean buildAsURL) 
	{
		if(form.getLocalContext().getCareContextSeedName() == null || form.getLocalContext().getCareContextSeedValue() == null)
			return;
		
		//WDEV-17687 WDEV-19074
		if (!buildAsURL && form.ccPrinter().getSelectedPrinter() == null)
		{
			engine.showMessage("Printer is mandatory.");
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		QueryBuilderClient cl = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
			
		Object[] obj = domain.getSystemReportAndTemplate(form.getGlobalContext().Core.getImsReportId());
			
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}

		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
				return;
		}
			
		cl.addSeed(new SeedValue(form.getLocalContext().getCareContextSeedName(), form.getLocalContext().getCareContextSeedValue(), Integer.class));	

		String url = null;
		byte[] reportContent = null;
		
		try
		{
			if(buildAsURL)
			{
				url = cl.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);
				
				if(form.chkStoreCopy().getValue())
				{
					reportContent = cl.buildReport((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1);
				}
			}
			else
			{
				reportContent = cl.buildReport((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, form.ccPrinter().getSelectedPrinter().getIPrinterName(), 1);
			}
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Error printing report: " + e.getMessage());
			return;
		}
		
		if(buildAsURL)
		{
			engine.openUrl(url);
			
			if(form.chkStoreCopy().getValue())
			{
				savePatientDocument(reportContent);
			}
		}
		else
		{
			if(form.chkStoreCopy().getValue())
			{
				if (savePatientDocument(reportContent))
				{
					engine.close(DialogResult.OK);
				}	
			}
			else
			{
				engine.close(DialogResult.OK);
			}
		}
	}
	
	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
	
	private boolean savePatientDocument(byte[] reportContent) 
	{
		if (reportContent == null)
			return false;
		
		PatientDocumentVo patientDocumentToSave = populatePatientDocumentVo(reportContent);
    		
    	// Validate Patient Assessment and Patient Document records
    	String[] errors = patientDocumentToSave.validate();
    	if (errors != null && errors.length > 0)
    	{
    		engine.showErrors(errors);
    		return false;
    	}

		try
		{
			domain.savePatientDocument(patientDocumentToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			
			StringBuilder path = new StringBuilder();
			
			path.append(ConfigFlag.GEN.PDF_STORE_PATH.getValue());
			
			if(!(path.toString().endsWith("/") || path.toString().endsWith("\\")))
				path.append("/");
			
			path.append(patientDocumentToSave.getServerDocument().getFileName());
			
			// Attempt to delete uploaded document if stale occurs
			File file = new File(path.toString());
			
			if (file.exists() && file.canWrite())
				file.delete();
			
			return false;
		}
		
		return true;
	}
	
	private PatientDocumentVo populatePatientDocumentVo(byte[] reportContent)
	{
		if (reportContent==null)
			return null;

		// Create Patient Document VO
		PatientDocumentVo patientDocument = new PatientDocumentVo();

		patientDocument.setPatient(form.getGlobalContext().Core.getPatientShort());

		patientDocument.setEpisodeofCare(form.getGlobalContext().Core.getCurrentCareContext()!=null ? form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare() : null);
		patientDocument.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
		patientDocument.setName("TCI Details");
		
		patientDocument.setServerDocument(populateServerDocument(reportContent));
		patientDocument.setCreationType(DocumentCreationType.GENERATED);
	
		patientDocument.setCategory(DocumentCategory.ADHOC_DOCUMENT);
	
		patientDocument.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		
		patientDocument.setRecordingUser(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		patientDocument.setRecordingDateTime(new DateTime());
		patientDocument.setAuthoringHCP(domain.getHcpLiteUser() instanceof HcpLiteVo ? (HcpRefVo)domain.getHcpLiteUser() : null);
		patientDocument.setAuthoringDateTime(new DateTime());
		
		// Create a new PatientDocumentStatusVo
		PatientDocumentStatusVo status = new PatientDocumentStatusVo();
		status.setCorrespondenceStatus(DocumentStatus.COMPLETED);
		status.setRecordingUser(patientDocument.getRecordingUser());
		status.setRecordingDateTime(patientDocument.getRecordingDateTime());

		patientDocument.setCurrentDocumentStatus(status);
		patientDocument.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
		patientDocument.getDocumentStatusHistory().add(status);
		
		patientDocument.setDocumentDate(form.getGlobalContext().Core.getCurrentCareContext() != null && form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime()!=null ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate() : patientDocument.getRecordingDateTime().getDate());
		patientDocument.setResponsibleHCP(form.getGlobalContext().Core.getCurrentCareContext() != null  && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP() : null);
		patientDocument.setSpecialty(form.getGlobalContext().Core.getCurrentCareContext() != null  && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getSpecialty() : null);
		
		return patientDocument;
	}

	private ServerDocumentVo populateServerDocument(byte[] reportContent)
	{
		String fileName = generateName() + ".pdf";
		
		engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), reportContent, fileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/");//WDEV-15470
		
		String path = null;
		
		int year  = new DateTime().getDate().getYear();
		int month = new DateTime().getDate().getMonth();
		int day   = new DateTime().getDate().getDay();
		
		if(fileName != null && fileName.length() > 0)
			path = year + "/" + month + "/" + day + "/" + fileName;//WDEV-15470

		// Create Server document VO if uploads succeeds
		ServerDocumentVo document = new ServerDocumentVo();
		document.setFileName(path);
		document.setFileType(FileType.PDF);
		
		return document;
	}

	@Override
	protected void onChkListAllValueChanged() throws PresentationLogicException 
	{
		form.ccPrinter().initialize(form.chkListAll().getValue() ? null : form.getLocalContext().getCurrentLocation(), PrinterScope.DEFAULT);
		updateControlsState();
	}

	@Override
	protected void onCcPrinterValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}
}
