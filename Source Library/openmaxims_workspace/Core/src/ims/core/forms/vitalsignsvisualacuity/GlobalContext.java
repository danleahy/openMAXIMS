//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.vitalsignsvisualacuity;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}
		public void setCurrentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cx_CoreCurrentClinicalContact.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");
		public boolean getVitalSignIsNotNull()
		{
			return !cx_CoreVitalSign.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignsVo getVitalSign()
		{
			return (ims.core.vo.VitalSignsVo)cx_CoreVitalSign.getValue(context);
		}
		public void setVitalSign(ims.core.vo.VitalSignsVo value)
		{
			cx_CoreVitalSign.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreVitalSign = new ims.framework.ContextVariable("Core.VitalSign", "_cv_Core.VitalSign");
		public boolean getIdFormIsNotNull()
		{
			return !cx_CoreIdForm.getValueIsNull(context);
		}
		public Integer getIdForm()
		{
			return (Integer)cx_CoreIdForm.getValue(context);
		}
		public void setIdForm(Integer value)
		{
			cx_CoreIdForm.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreIdForm = new ims.framework.ContextVariable("Core.IdForm", "_cv_Core.IdForm");
		public boolean getVitalSignsVisualAcuitySearchCriteriaIsNotNull()
		{
			return !cx_CoreVitalSignsVisualAcuitySearchCriteria.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignsFormsSearchCriteriaVo getVitalSignsVisualAcuitySearchCriteria()
		{
			return (ims.core.vo.VitalSignsFormsSearchCriteriaVo)cx_CoreVitalSignsVisualAcuitySearchCriteria.getValue(context);
		}
		public void setVitalSignsVisualAcuitySearchCriteria(ims.core.vo.VitalSignsFormsSearchCriteriaVo value)
		{
			cx_CoreVitalSignsVisualAcuitySearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreVitalSignsVisualAcuitySearchCriteria = new ims.framework.ContextVariable("Core.VitalSignsVisualAcuitySearchCriteria", "_cvp_Core.VitalSignsVisualAcuitySearchCriteria");
		public boolean getVitalSignsVisualAcuityAlisSearchCriteriaIsNotNull()
		{
			return !cx_CoreVitalSignsVisualAcuityAlisSearchCriteria.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignsFormsSearchCriteriaVo getVitalSignsVisualAcuityAlisSearchCriteria()
		{
			return (ims.core.vo.VitalSignsFormsSearchCriteriaVo)cx_CoreVitalSignsVisualAcuityAlisSearchCriteria.getValue(context);
		}
		public void setVitalSignsVisualAcuityAlisSearchCriteria(ims.core.vo.VitalSignsFormsSearchCriteriaVo value)
		{
			cx_CoreVitalSignsVisualAcuityAlisSearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreVitalSignsVisualAcuityAlisSearchCriteria = new ims.framework.ContextVariable("Core.VitalSignsVisualAcuityAlisSearchCriteria", "_cvp_Core.VitalSignsVisualAcuityAlisSearchCriteria");

		private ims.framework.Context context;
	}

	public CoreContext Core;
}
