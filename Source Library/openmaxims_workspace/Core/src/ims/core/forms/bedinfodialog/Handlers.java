//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bedinfodialog;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbTransferReasonLookup();
	abstract protected void defaultcmbTransferReasonLookupValue();
	abstract protected void bindcmbWardTypeLookup();
	abstract protected void defaultcmbWardTypeLookupValue();
	abstract protected void bindcmbPatientCategoryLookup();
	abstract protected void defaultcmbPatientCategoryLookupValue();
	abstract protected void bindcmbOutTransfReasonLookup();
	abstract protected void defaultcmbOutTransfReasonLookupValue();
	abstract protected void bindcmbOutWardTypeLookup();
	abstract protected void defaultcmbOutWardTypeLookupValue();
	abstract protected void bindcmbPatientCategoryConsultantLookup();
	abstract protected void defaultcmbPatientCategoryConsultantLookupValue();
	abstract protected void bindcmbMovementTypeLookup();
	abstract protected void defaultcmbMovementTypeLookupValue();
	abstract protected void bindcmbReasonForExtStayLookup();
	abstract protected void defaultcmbReasonForExtStayLookupValue();
	abstract protected void bindcmbTransportDetLookup();
	abstract protected void defaultcmbTransportDetLookupValue();
	abstract protected void bindcmbReasonCannotGoLoungeLookup();
	abstract protected void defaultcmbReasonCannotGoLoungeLookupValue();
	abstract protected void bindcmbDischargeReasonForClosureLookup();
	abstract protected void defaultcmbDischargeReasonForClosureLookupValue();
	abstract protected void bindcmbDischargeDestinationLookup();
	abstract protected void defaultcmbDischargeDestinationLookupValue();
	abstract protected void bindcmbMethodDischargeLookup();
	abstract protected void defaultcmbMethodDischargeLookupValue();
	abstract protected void bindcmbCloseReasonLookup();
	abstract protected void defaultcmbCloseReasonLookupValue();
	abstract protected void bindcmbInfantTransferReasonLookup();
	abstract protected void defaultcmbInfantTransferReasonLookupValue();
	abstract protected void bindcmbInfantWardTypeLookup();
	abstract protected void defaultcmbInfantWardTypeLookupValue();
	abstract protected void bindcmbInfantDischargeDestLookup();
	abstract protected void defaultcmbInfantDischargeDestLookupValue();
	abstract protected void bindcmbInfantMethodDischargeLookup();
	abstract protected void defaultcmbInfantMethodDischargeLookupValue();
	abstract protected void bindcmbSourceOfEmergencyReferralLookup();
	abstract protected void defaultcmbSourceOfEmergencyReferralLookupValue();
	abstract protected void bindcmbPatientCategLookup();
	abstract protected void defaultcmbPatientCategLookupValue();
	abstract protected void bindcmbSourceOfReferralLookup();
	abstract protected void defaultcmbSourceOfReferralLookupValue();
	abstract protected void bindcmbAdmWardTypeLookup();
	abstract protected void defaultcmbAdmWardTypeLookupValue();
	abstract protected void bindcmbMethodOfAdmissionLookup();
	abstract protected void defaultcmbMethodOfAdmissionLookupValue();
	abstract protected void bindcmbSourceOfAdmissionLookup();
	abstract protected void defaultcmbSourceOfAdmissionLookupValue();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrDetailTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onBtnEditPatientClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelTransferClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrTransferTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onQmbInServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbInServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTransferReasonValueSet(Object value);
	abstract protected void onRadioButtonTICaseFolderYesNoValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcInConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbWardTypeValueSet(Object value);
	abstract protected void onGrdTransferInSelEctionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbOutServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbOutServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPatientCategoryValueSet(Object value);
	abstract protected void oncmbOutTransfReasonValueSet(Object value);
	abstract protected void onCcOutConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbOutWardTypeValueSet(Object value);
	abstract protected void onCmbOutHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbConsultantServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbConsultantServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPatientCategoryConsultantValueSet(Object value);
	abstract protected void onCcConsultantAcceptingValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTransferClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelTrackingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbMovementTypeValueSet(Object value);
	abstract protected void onBtnPatReturnedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveTrackingClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonDelayedDischargeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReadyToLeaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelEstDischClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveEstDischClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDtimNewEstDischDateValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbReasonForExtStayValueSet(Object value);
	abstract protected void onBtnReviseEstDischDateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbUpdateReasonClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveReasonClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddReasonClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdDischReasonRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnConfirmReadyForDischargeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTransportDetValueSet(Object value);
	abstract protected void oncmbReasonCannotGoLoungeValueSet(Object value);
	abstract protected void onRadioButtonDischargeLoungeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonFitForDischargeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntEstRevisedStayValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnClearEstimateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteEstDischargeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveEstDischargeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUndoConfirmedDischargedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUndoReadyToLeaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnMarkAsDeceasedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDischargeReasonForClosureValueSet(Object value);
	abstract protected void onBtnVTERiskAssesssmentClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAllocateForCleaningValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtongrpDeferredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDischargeDestinationValueSet(Object value);
	abstract protected void oncmbMethodDischargeValueSet(Object value);
	abstract protected void onCmbMethodDischargeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnDischargeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelHLClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAdmitClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcAdmitValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnHomeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUnretainClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditHomeLeaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelSendHLClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReturnFromLeaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelReturnHLClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAssignClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReOpenClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCloseReasonValueSet(Object value);
	abstract protected void onBtnSwitchBedsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnInternalTransferClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPatientsGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPatientsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrInfantsTabChanged(ims.framework.LayerBridge tab);
	abstract protected void oncmbInfantTransferReasonValueSet(Object value);
	abstract protected void onCcInfantConsultantValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnInfantTransferClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbInfantWardTypeValueSet(Object value);
	abstract protected void onCmbInfantHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnMarkInfantDeceasedClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnInfantDischargeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbInfantDischargeDestValueSet(Object value);
	abstract protected void oncmbInfantMethodDischargeValueSet(Object value);
	abstract protected void onCmbInfantMethodDischargeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInfantsGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInfantsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnConsultantStaysClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseAdmissionClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditAdmissionClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelAdmissionClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddHealthyLodgerClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbHealthyLodgerClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSourceOfEmergencyReferralValueSet(Object value);
	abstract protected void oncmbPatientCategValueSet(Object value);
	abstract protected void oncmbSourceOfReferralValueSet(Object value);
	abstract protected void oncmbAdmWardTypeValueSet(Object value);
	abstract protected void oncmbMethodOfAdmissionValueSet(Object value);
	abstract protected void oncmbSourceOfAdmissionValueSet(Object value);

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.lyrDetail().tabPatient().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabPatientActivated();
			}
		});
		this.form.lyrDetail().tabTransfer().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabTransferActivated();
			}
		});
		this.form.lyrDetail().tabTracking().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabTrackingActivated();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabReadyForDischargeActivated();
			}
		});
		this.form.lyrDetail().tabDischarge().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabDischargeActivated();
			}
		});
		this.form.lyrDetail().tabAdmission().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabAdmissionActivated();
			}
		});
		this.form.lyrDetail().tabHomeLeave().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabHomeLeaveActivated();
			}
		});
		this.form.lyrDetail().tabHomeLeaveReturn().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabHomeLeaveReturnActivated();
			}
		});
		this.form.lyrDetail().tabHLeaveReturnCancel().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabHLeaveReturnCancelActivated();
			}
		});
		this.form.lyrDetail().tabCloseBed().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabCloseBedActivated();
			}
		});
		this.form.lyrDetail().tabBedMove().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabBedMoveActivated();
			}
		});
		this.form.lyrDetail().tabInfants().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabInfantsActivated();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailtabAdmissionDetailActivated();
			}
		});
		this.form.lyrDetail().tabPatient().btnEditPatient().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditPatientClick();
			}
		});
		this.form.lyrDetail().tabTransfer().btnCancelTransfer().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelTransferClick();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTransfertabInActivated();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTransfertabOutActivated();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrTransfertabConsultantActivated();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().qmbInService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbInServiceValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().qmbInService().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbInServiceTextSubmited(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbTransferReason().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTransferReasonValueSet(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().TICaseFolderYesNo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonTICaseFolderYesNoValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().setccInConsultantValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcInConsultantValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbWardTypeValueSet(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().grdTransferIn().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdTransferInSelEctionChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().qmbOutService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbOutServiceValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().qmbOutService().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbOutServiceTextSubmited(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbPatientCategory().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatientCategoryValueSet(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutTransfReason().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbOutTransfReasonValueSet(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().setccOutConsultantValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcOutConsultantValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbOutWardTypeValueSet(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutHospital().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbOutHospitalValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().qmbConsultantService().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbConsultantServiceValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().qmbConsultantService().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbConsultantServiceTextSubmited(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().cmbPatientCategoryConsultant().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatientCategoryConsultantValueSet(value);
			}
		});
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant().setccConsultantAcceptingValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcConsultantAcceptingValueChanged();
			}
		});
		this.form.lyrDetail().tabTransfer().btnTransfer().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTransferClick();
			}
		});
		this.form.lyrDetail().tabTracking().btnCancelTracking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelTrackingClick();
			}
		});
		this.form.lyrDetail().tabTracking().cmbMovementType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbMovementTypeValueSet(value);
			}
		});
		this.form.lyrDetail().tabTracking().btnPatReturned().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPatReturnedClick();
			}
		});
		this.form.lyrDetail().tabTracking().btnSaveTracking().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveTrackingClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().DelayedDischarge().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonDelayedDischargeValueChanged();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnReadyToLeave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReadyToLeaveClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnCancelEstDisch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelEstDischClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnSaveEstDisch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveEstDischClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().dtimNewEstDischDate().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDtimNewEstDischDateValueChanged();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().cmbReasonForExtStay().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReasonForExtStayValueSet(value);
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnReviseEstDischDate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReviseEstDischDateClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().imbUpdateReason().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbUpdateReasonClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().imbRemoveReason().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveReasonClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().imbAddReason().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddReasonClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().dyngrdDischReason().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdDischReasonRowSelectionChanged(row);
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnConfirmReadyForDischarge().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnConfirmReadyForDischargeClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().cmbTransportDet().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTransportDetValueSet(value);
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().cmbReasonCannotGoLounge().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReasonCannotGoLoungeValueSet(value);
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().DischargeLounge().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonDischargeLoungeValueChanged();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().FitForDischarge().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonFitForDischargeValueChanged();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().intEstRevisedStay().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntEstRevisedStayValueChanged();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnClearEstimate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnClearEstimateClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().dteEstDischarge().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteEstDischargeValueChanged();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnSaveEstDischarge().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveEstDischargeClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnUndoConfirmedDischarged().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUndoConfirmedDischargedClick();
			}
		});
		this.form.lyrDetail().tabReadyForDischarge().btnUndoReadyToLeave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUndoReadyToLeaveClick();
			}
		});
		this.form.lyrDetail().tabDischarge().btnMarkAsDeceased().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnMarkAsDeceasedClick();
			}
		});
		this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDischargeReasonForClosureValueSet(value);
			}
		});
		this.form.lyrDetail().tabDischarge().btnVTERiskAssesssment().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnVTERiskAssesssmentClick();
			}
		});
		this.form.lyrDetail().tabDischarge().chkAllocateForCleaning().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAllocateForCleaningValueChanged();
			}
		});
		this.form.lyrDetail().tabDischarge().grpDeferred().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtongrpDeferredValueChanged();
			}
		});
		this.form.lyrDetail().tabDischarge().cmbDischargeDestination().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDischargeDestinationValueSet(value);
			}
		});
		this.form.lyrDetail().tabDischarge().cmbMethodDischarge().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbMethodDischargeValueSet(value);
			}
		});
		this.form.lyrDetail().tabDischarge().cmbMethodDischarge().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbMethodDischargeValueChanged();
			}
		});
		this.form.lyrDetail().tabDischarge().btnDischarge().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnDischargeClick();
			}
		});
		this.form.lyrDetail().tabAdmission().btnCancelHL().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelHLClick();
			}
		});
		this.form.lyrDetail().tabAdmission().btnAdmit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAdmitClick();
			}
		});
		this.form.lyrDetail().tabAdmission().setccAdmitValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcAdmitValueChanged();
			}
		});
		this.form.lyrDetail().tabHomeLeave().btnHome().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnHomeClick();
			}
		});
		this.form.lyrDetail().tabHomeLeaveReturn().btnUnretain().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUnretainClick();
			}
		});
		this.form.lyrDetail().tabHomeLeaveReturn().btnEditHomeLeave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditHomeLeaveClick();
			}
		});
		this.form.lyrDetail().tabHomeLeaveReturn().btnCancelSendHL().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelSendHLClick();
			}
		});
		this.form.lyrDetail().tabHomeLeaveReturn().btnReturnFromLeave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReturnFromLeaveClick();
			}
		});
		this.form.lyrDetail().tabHLeaveReturnCancel().btnCancelReturnHL().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelReturnHLClick();
			}
		});
		this.form.lyrDetail().tabCloseBed().btnAssign().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAssignClick();
			}
		});
		this.form.lyrDetail().tabCloseBed().btnReOpen().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReOpenClick();
			}
		});
		this.form.lyrDetail().tabCloseBed().btnClose().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseClick();
			}
		});
		this.form.lyrDetail().tabCloseBed().cmbCloseReason().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCloseReasonValueSet(value);
			}
		});
		this.form.lyrDetail().tabBedMove().btnSwitchBeds().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSwitchBedsClick();
			}
		});
		this.form.lyrDetail().tabBedMove().btnInternalTransfer().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnInternalTransferClick();
			}
		});
		this.form.lyrDetail().tabBedMove().grdPatients().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPatientsGridHeaderClicked(column);
			}
		});
		this.form.lyrDetail().tabBedMove().grdPatients().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPatientsSelectionChanged();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrInfantstabInfantTransferActivated();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrInfantstabInfantDischargeActivated();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantTransferReason().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInfantTransferReasonValueSet(value);
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().setccInfantConsultantValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcInfantConsultantValueChanged();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().btnInfantTransfer().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnInfantTransferClick();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInfantWardTypeValueSet(value);
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantHospital().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbInfantHospitalValueChanged();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().btnMarkInfantDeceased().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnMarkInfantDeceasedClick();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().btnInfantDischarge().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnInfantDischargeClick();
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInfantDischargeDestValueSet(value);
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInfantMethodDischargeValueSet(value);
			}
		});
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbInfantMethodDischargeValueChanged();
			}
		});
		this.form.lyrDetail().tabInfants().grdInfants().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInfantsGridHeaderClicked(column);
			}
		});
		this.form.lyrDetail().tabInfants().grdInfants().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInfantsSelectionChanged();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().btnConsultantStays().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnConsultantStaysClick();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().btnCloseAdmission().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseAdmissionClick();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().btnEditAdmission().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditAdmissionClick();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().btnCancelAdmission().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelAdmissionClick();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().btnAddHealthyLodger().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddHealthyLodgerClick();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().imbHealthyLodger().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbHealthyLodgerClick();
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfEmergencyReferral().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSourceOfEmergencyReferralValueSet(value);
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().cmbPatientCateg().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatientCategValueSet(value);
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSourceOfReferralValueSet(value);
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAdmWardTypeValueSet(value);
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbMethodOfAdmissionValueSet(value);
			}
		});
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSourceOfAdmissionValueSet(value);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbTransferReasonLookup();
		bindcmbWardTypeLookup();
		bindcmbPatientCategoryLookup();
		bindcmbOutTransfReasonLookup();
		bindcmbOutWardTypeLookup();
		bindcmbPatientCategoryConsultantLookup();
		bindcmbMovementTypeLookup();
		bindcmbReasonForExtStayLookup();
		bindcmbTransportDetLookup();
		bindcmbReasonCannotGoLoungeLookup();
		bindcmbDischargeReasonForClosureLookup();
		bindcmbDischargeDestinationLookup();
		bindcmbMethodDischargeLookup();
		bindcmbCloseReasonLookup();
		bindcmbInfantTransferReasonLookup();
		bindcmbInfantWardTypeLookup();
		bindcmbInfantDischargeDestLookup();
		bindcmbInfantMethodDischargeLookup();
		bindcmbSourceOfEmergencyReferralLookup();
		bindcmbPatientCategLookup();
		bindcmbSourceOfReferralLookup();
		bindcmbAdmWardTypeLookup();
		bindcmbMethodOfAdmissionLookup();
		bindcmbSourceOfAdmissionLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbTransferReasonLookup();
		bindcmbWardTypeLookup();
		bindcmbPatientCategoryLookup();
		bindcmbOutTransfReasonLookup();
		bindcmbOutWardTypeLookup();
		bindcmbPatientCategoryConsultantLookup();
		bindcmbMovementTypeLookup();
		bindcmbReasonForExtStayLookup();
		bindcmbTransportDetLookup();
		bindcmbReasonCannotGoLoungeLookup();
		bindcmbDischargeReasonForClosureLookup();
		bindcmbDischargeDestinationLookup();
		bindcmbMethodDischargeLookup();
		bindcmbCloseReasonLookup();
		bindcmbInfantTransferReasonLookup();
		bindcmbInfantWardTypeLookup();
		bindcmbInfantDischargeDestLookup();
		bindcmbInfantMethodDischargeLookup();
		bindcmbSourceOfEmergencyReferralLookup();
		bindcmbPatientCategLookup();
		bindcmbSourceOfReferralLookup();
		bindcmbAdmWardTypeLookup();
		bindcmbMethodOfAdmissionLookup();
		bindcmbSourceOfAdmissionLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbTransferReasonLookupValue();
		defaultcmbWardTypeLookupValue();
		defaultcmbPatientCategoryLookupValue();
		defaultcmbOutTransfReasonLookupValue();
		defaultcmbOutWardTypeLookupValue();
		defaultcmbPatientCategoryConsultantLookupValue();
		defaultcmbMovementTypeLookupValue();
		defaultcmbReasonForExtStayLookupValue();
		defaultcmbTransportDetLookupValue();
		defaultcmbReasonCannotGoLoungeLookupValue();
		defaultcmbDischargeReasonForClosureLookupValue();
		defaultcmbDischargeDestinationLookupValue();
		defaultcmbMethodDischargeLookupValue();
		defaultcmbCloseReasonLookupValue();
		defaultcmbInfantTransferReasonLookupValue();
		defaultcmbInfantWardTypeLookupValue();
		defaultcmbInfantDischargeDestLookupValue();
		defaultcmbInfantMethodDischargeLookupValue();
		defaultcmbSourceOfEmergencyReferralLookupValue();
		defaultcmbPatientCategLookupValue();
		defaultcmbSourceOfReferralLookupValue();
		defaultcmbAdmWardTypeLookupValue();
		defaultcmbMethodOfAdmissionLookupValue();
		defaultcmbSourceOfAdmissionLookupValue();
	}
	private void onlyrDetailtabPatientActivated()
	{
		this.form.lyrDetail().showtabPatient();
		onlyrDetailTabChanged(this.form.lyrDetail().tabPatient());
	}
	private void onlyrDetailtabTransferActivated()
	{
		this.form.lyrDetail().showtabTransfer();
		onlyrDetailTabChanged(this.form.lyrDetail().tabTransfer());
	}
	private void onlyrDetailtabTrackingActivated()
	{
		this.form.lyrDetail().showtabTracking();
		onlyrDetailTabChanged(this.form.lyrDetail().tabTracking());
	}
	private void onlyrDetailtabReadyForDischargeActivated()
	{
		this.form.lyrDetail().showtabReadyForDischarge();
		onlyrDetailTabChanged(this.form.lyrDetail().tabReadyForDischarge());
	}
	private void onlyrDetailtabDischargeActivated()
	{
		this.form.lyrDetail().showtabDischarge();
		onlyrDetailTabChanged(this.form.lyrDetail().tabDischarge());
	}
	private void onlyrDetailtabAdmissionActivated()
	{
		this.form.lyrDetail().showtabAdmission();
		onlyrDetailTabChanged(this.form.lyrDetail().tabAdmission());
	}
	private void onlyrDetailtabHomeLeaveActivated()
	{
		this.form.lyrDetail().showtabHomeLeave();
		onlyrDetailTabChanged(this.form.lyrDetail().tabHomeLeave());
	}
	private void onlyrDetailtabHomeLeaveReturnActivated()
	{
		this.form.lyrDetail().showtabHomeLeaveReturn();
		onlyrDetailTabChanged(this.form.lyrDetail().tabHomeLeaveReturn());
	}
	private void onlyrDetailtabHLeaveReturnCancelActivated()
	{
		this.form.lyrDetail().showtabHLeaveReturnCancel();
		onlyrDetailTabChanged(this.form.lyrDetail().tabHLeaveReturnCancel());
	}
	private void onlyrDetailtabCloseBedActivated()
	{
		this.form.lyrDetail().showtabCloseBed();
		onlyrDetailTabChanged(this.form.lyrDetail().tabCloseBed());
	}
	private void onlyrDetailtabBedMoveActivated()
	{
		this.form.lyrDetail().showtabBedMove();
		onlyrDetailTabChanged(this.form.lyrDetail().tabBedMove());
	}
	private void onlyrDetailtabInfantsActivated()
	{
		this.form.lyrDetail().showtabInfants();
		onlyrDetailTabChanged(this.form.lyrDetail().tabInfants());
	}
	private void onlyrDetailtabAdmissionDetailActivated()
	{
		this.form.lyrDetail().showtabAdmissionDetail();
		onlyrDetailTabChanged(this.form.lyrDetail().tabAdmissionDetail());
	}
	private void onlyrTransfertabInActivated()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().showtabIn();
		onlyrTransferTabChanged(this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn());
	}
	private void onlyrTransfertabOutActivated()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().showtabOut();
		onlyrTransferTabChanged(this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut());
	}
	private void onlyrTransfertabConsultantActivated()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().showtabConsultant();
		onlyrTransferTabChanged(this.form.lyrDetail().tabTransfer().lyrTransfer().tabConsultant());
	}
	private void onlyrInfantstabInfantTransferActivated()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().showtabInfantTransfer();
		onlyrInfantsTabChanged(this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer());
	}
	private void onlyrInfantstabInfantDischargeActivated()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().showtabInfantDischarge();
		onlyrInfantsTabChanged(this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
