//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bedinfodialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPatientContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 552, 392, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(0404 -12456789)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 456, 392, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Tel Work:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 104, 88, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "20/01/1970", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOD:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 552, 32, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alert Details", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 456, 32, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alerts:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 552, 368, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(0404 -12456789)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 552, 240, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 456, 368, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Tel Home:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 456, 240, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Name:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 552, 344, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 552, 328, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 5", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 552, 312, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 4", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 552, 296, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 3", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 552, 280, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 2", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 552, 264, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 1", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 456, 264, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Address:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 104, 368, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(0404 -12456789)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 368, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Telephone:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 104, 240, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 240, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Name:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 104, 344, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 104, 328, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 5", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 104, 312, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 4", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 104, 296, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 3", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 104, 280, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 2", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 104, 264, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 1", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Address:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 351, 64, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Male", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 303, 64, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gender:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 104, 216, 167, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Local Authority of Residence", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 216, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "L.A.R:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 104, 192, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 104, 176, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 5", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 104, 160, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 4", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 104, 144, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 3", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 104, 128, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 2", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 104, 112, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 1", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 228, 64, 19, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "38", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 104, 64, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "20/01/1970", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 252, 40, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "123456", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "123456", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 196, 64, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Age:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 196, 40, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NHS No.:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital No.:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 248, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(2)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public Label lblNOKWorkPhone()
			{
				return (Label)super.getControl(0);
			}
			public Label lblDOD()
			{
				return (Label)super.getControl(2);
			}
			public Label lblDODlabel()
			{
				return (Label)super.getControl(3);
			}
			public Label lblAlerts()
			{
				return (Label)super.getControl(4);
			}
			public Label lblNOKPhoneInfo()
			{
				return (Label)super.getControl(6);
			}
			public Label lblNOKNameInfo()
			{
				return (Label)super.getControl(7);
			}
			public Label lblNokPostCode()
			{
				return (Label)super.getControl(10);
			}
			public Label lblNOKAddress5Info()
			{
				return (Label)super.getControl(11);
			}
			public Label lblNOKAddress4Info()
			{
				return (Label)super.getControl(12);
			}
			public Label lblNOKAddress3Info()
			{
				return (Label)super.getControl(13);
			}
			public Label lblNOKAddress2Info()
			{
				return (Label)super.getControl(14);
			}
			public Label lblNOKAddress1Info()
			{
				return (Label)super.getControl(15);
			}
			public Label lblGPPhoneInfo()
			{
				return (Label)super.getControl(17);
			}
			public Label lblGPNameInfo()
			{
				return (Label)super.getControl(19);
			}
			public Label lblGPPostCode()
			{
				return (Label)super.getControl(21);
			}
			public Label lblGPAddress5Info()
			{
				return (Label)super.getControl(22);
			}
			public Label lblGPAddress4Info()
			{
				return (Label)super.getControl(23);
			}
			public Label lblGPAddress3Info()
			{
				return (Label)super.getControl(24);
			}
			public Label lblGPAddress2Info()
			{
				return (Label)super.getControl(25);
			}
			public Label lblGPAddress1Info()
			{
				return (Label)super.getControl(26);
			}
			public Label lblGenderInfo()
			{
				return (Label)super.getControl(28);
			}
			public Label lblLARInfo()
			{
				return (Label)super.getControl(30);
			}
			public Label lblPatientPostcodeInfo()
			{
				return (Label)super.getControl(32);
			}
			public Label lblPatientAddress5Info()
			{
				return (Label)super.getControl(33);
			}
			public Label lblPatientAddress4Info()
			{
				return (Label)super.getControl(34);
			}
			public Label lblPatientAddress3Info()
			{
				return (Label)super.getControl(35);
			}
			public Label lblPatientAddress2Info()
			{
				return (Label)super.getControl(36);
			}
			public Label lblPatientAddress1Info()
			{
				return (Label)super.getControl(37);
			}
			public Label lblAgeInfo()
			{
				return (Label)super.getControl(38);
			}
			public Label lblDOBInfo()
			{
				return (Label)super.getControl(39);
			}
			public Label lblNHSNoInfo()
			{
				return (Label)super.getControl(40);
			}
			public Label lblDisplayIdInfo()
			{
				return (Label)super.getControl(41);
			}
			public Label lblDisplayId()
			{
				return (Label)super.getControl(46);
			}
			public Label lblPatientNameInfo()
			{
				return (Label)super.getControl(47);
			}
			public Button btnEditPatient()
			{
				return (Button)super.getControl(48);
			}
		}
		public static class tabTransferContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrTransferLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabInContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbTransferReasonComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.TransferReason value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.TransferReason value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.TransferReason getValue()
						{
							return (ims.core.vo.lookups.TransferReason)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.TransferReason value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbCCOInSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PASSpecialty getValue()
						{
							return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PASSpecialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbWardTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.WardType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.WardType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.WardType getValue()
						{
							return (ims.core.vo.lookups.WardType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.WardType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class qmbInServiceComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.ServiceLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.ServiceLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.ServiceLiteVo getValue()
						{
							return (ims.core.vo.ServiceLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.ServiceLiteVo value)
						{
							super.control.setValue(value);
						}
						public void setEditedText(String text)
						{
							super.control.setEditedText(text);
						}
						public String getEditedText()
						{
							return super.control.getEditedText();
						}
					}
					public static class grdTransferInRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdTransferInRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColNameReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColNameReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColNameOpened()
						{
							super.row.showOpened(0);
						}
						public String getColName()
						{
							return (String)super.row.get(0);
						}
						public void setColName(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColNameTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColWardReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColWardReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColWardOpened()
						{
							super.row.showOpened(1);
						}
						public String getColWard()
						{
							return (String)super.row.get(1);
						}
						public void setColWard(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColWardTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColSpecialtyReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColSpecialtyReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColSpecialtyOpened()
						{
							super.row.showOpened(2);
						}
						public String getColSpecialty()
						{
							return (String)super.row.get(2);
						}
						public void setColSpecialty(String value)
						{
							super.row.set(2, value);
						}
						public void setCellColSpecialtyTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColConsultantReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColConsultantReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColConsultantOpened()
						{
							super.row.showOpened(3);
						}
						public String getColConsultant()
						{
							return (String)super.row.get(3);
						}
						public void setColConsultant(String value)
						{
							super.row.set(3, value);
						}
						public void setCellColConsultantTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public void setColRequestDateReadOnly(boolean value)
						{
							super.row.setReadOnly(4, value);
						}
						public boolean isColRequestDateReadOnly()
						{
							return super.row.isReadOnly(4);
						}
						public void showColRequestDateOpened()
						{
							super.row.showOpened(4);
						}
						public String getColRequestDate()
						{
							return (String)super.row.get(4);
						}
						public void setColRequestDate(String value)
						{
							super.row.set(4, value);
						}
						public void setCellColRequestDateTooltip(String value)
						{
							super.row.setTooltip(4, value);
						}
						public ims.core.vo.PendingTransfersLiteVo getValue()
						{
							return (ims.core.vo.PendingTransfersLiteVo)super.row.getValue();
						}
						public void setValue(ims.core.vo.PendingTransfersLiteVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdTransferInRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdTransferInRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdTransferInRow get(int index)
						{
							return new grdTransferInRow(super.collection.get(index));
						}
						public grdTransferInRow newRow()
						{
							return new grdTransferInRow(super.collection.newRow());
						}
						public grdTransferInRow newRow(boolean autoSelect)
						{
							return new grdTransferInRow(super.collection.newRow(autoSelect));
						}
						public grdTransferInRow newRowAt(int index)
						{
							return new grdTransferInRow(super.collection.newRowAt(index));
						}
						public grdTransferInRow newRowAt(int index, boolean autoSelect)
						{
							return new grdTransferInRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdTransferInGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.core.vo.PendingTransfersLiteVoCollection getValues()
						{
							ims.core.vo.PendingTransfersLiteVoCollection listOfValues = new ims.core.vo.PendingTransfersLiteVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.PendingTransfersLiteVo getValue()
						{
							return (ims.core.vo.PendingTransfersLiteVo)super.grid.getValue();
						}
						public void setValue(ims.core.vo.PendingTransfersLiteVo value)
						{
							super.grid.setValue(value);
						}
						public grdTransferInRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdTransferInRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdTransferInRowCollection getRows()
						{
							return new grdTransferInRowCollection(super.grid.getRows());
						}
						public grdTransferInRow getRowByValue(ims.core.vo.PendingTransfersLiteVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdTransferInRow(row);
						}
						public void setColNameHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColNameHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColWardHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColWardHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColSpecialtyHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColSpecialtyHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColConsultantHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColConsultantHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
						public void setColRequestDateHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(4, value);
						}
						public String getColRequestDateHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(4);
						}
					}
				
					public static class TICaseFolderYesNoRadioButton extends RadioButtonBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
						{
							if(startTabIndex == null)
								throw new RuntimeException("Invalid startTabIndex ");
							RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 225, 351, 48, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
							control.addButton(0, anchoringHelper50.getX(), anchoringHelper50.getY(), anchoringHelper50.getWidth(), "No", startTabIndex.intValue() + 16);
							RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 182, 351, 48, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
							control.addButton(1, anchoringHelper51.getX(), anchoringHelper51.getY(), anchoringHelper51.getWidth(), "Yes", startTabIndex.intValue() + 15);
						}
						public void setText(TICaseFolderYesNoEnumeration option, String value)
						{
							if(option != null && option.id >= 0 && value != null)
								control.setText(option.id, value);
						}
						public TICaseFolderYesNoEnumeration getValue()
						{
							switch (super.control.getValue())
							{
								case -1: return TICaseFolderYesNoEnumeration.None;
								case 0: return TICaseFolderYesNoEnumeration.rdoTINo;
								case 1: return TICaseFolderYesNoEnumeration.rdoTIYes;
							}
							return null;
						}
						public void setValue(TICaseFolderYesNoEnumeration value)
						{
							if(value != null)
								super.control.setValue(value.id);
							else
								super.control.setValue(TICaseFolderYesNoEnumeration.None.id);
						}
						public boolean isEnabled(TICaseFolderYesNoEnumeration option)
						{
							return super.control.isEnabled(option.id);
						}
						public void setEnabled(TICaseFolderYesNoEnumeration option, boolean value)
						{
							super.control.setEnabled(option.id, value);
						}
						public boolean isVisible(TICaseFolderYesNoEnumeration option)
						{
							return super.control.isVisible(option.id);
						}
						public void setVisible(TICaseFolderYesNoEnumeration option, boolean value)
						{
							super.control.setVisible(option.id, value);
						}
						public void setVisible(boolean value)
						{
							super.control.setVisible(value);
						}
						public void setEnabled(boolean value)
						{
							super.control.setEnabled(value);
						}
					}
					public static class TICaseFolderYesNoEnumeration implements java.io.Serializable
					{
						private static final long serialVersionUID = 1L;
						public static TICaseFolderYesNoEnumeration None = new TICaseFolderYesNoEnumeration(-1);
						public static TICaseFolderYesNoEnumeration rdoTINo = new TICaseFolderYesNoEnumeration(0);
						public static TICaseFolderYesNoEnumeration rdoTIYes = new TICaseFolderYesNoEnumeration(1);
						private TICaseFolderYesNoEnumeration(int id)
						{
							this.id = id;
						}
						public boolean equals(Object o)
						{
							return this.id == ((TICaseFolderYesNoEnumeration)o).id;
						}
						private int id;
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 120, 253, 280, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
						ims.framework.FormUiLogic m_ccInConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper52.getSize(), instance1, startTabIndex.intValue() + 6, skipContextValidation);
						//ims.framework.Control m_ccInConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(120), new Integer(253), new Integer(280), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_ccInConsultantForm, instance1 } );
						ims.framework.Control m_ccInConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1050),  new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 6), m_ccInConsultantForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccInConsultantControl);
						Menu[] menus1 = m_ccInConsultantForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Service:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 308, 112, 26, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Allocate Source\nBed for Cleaning:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 404, 283, 101, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Transfer Comment:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 404, 255, 107, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Reason for Transfer:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 272, 351, 48, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comment:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 351, 178, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Update Case Note Folder Location:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 404, 228, 128, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Est. Discharge Date/Time:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 404, 200, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Ward Type:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 283, 106, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Transfer Date/Time:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 228, 52, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Specialty:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 8, 255, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Consultant:", new Integer(0), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 536, 283, 240, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 328, 349, 448, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 536, 226, 136, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 536, 226, 136, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 120, 281, 136, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 536, 253, 240, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						ComboBox m_cmbTransferReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbTransferReasonTemp);
						cmbTransferReasonComboBox cmbTransferReason = (cmbTransferReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransferReasonComboBox.class, m_cmbTransferReasonTemp);
						super.addComboBox(cmbTransferReason);
						RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 120, 226, 264, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
						ComboBox m_cmbCCOInSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbCCOInSpecialtyTemp);
						cmbCCOInSpecialtyComboBox cmbCCOInSpecialty = (cmbCCOInSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOInSpecialtyComboBox.class, m_cmbCCOInSpecialtyTemp);
						super.addComboBox(cmbCCOInSpecialty);
						RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 536, 198, 240, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						ComboBox m_cmbWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbWardTypeTemp);
						cmbWardTypeComboBox cmbWardType = (cmbWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardTypeComboBox.class, m_cmbWardTypeTemp);
						super.addComboBox(cmbWardType);
						RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 120, 226, 264, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ComboBox m_cmbInSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInSpecialtyTemp);
						cmbInSpecialtyComboBox cmbInSpecialty = (cmbInSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInSpecialtyComboBox.class, m_cmbInSpecialtyTemp);
						super.addComboBox(cmbInSpecialty);
				
						// Query ComboBox Controls
						RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 120, 198, 264, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
						ComboBox m_qmbInServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
						addControl(m_qmbInServiceTemp);
						qmbInServiceComboBox qmbInService = (qmbInServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbInServiceComboBox.class, m_qmbInServiceTemp);
						super.addComboBox(qmbInService);
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 120, 320, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 8, 6, 768, 186, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdTransferInTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdTransferInTemp);
						grdTransferInGrid grdTransferIn = (grdTransferInGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTransferInGrid.class, m_grdTransferInTemp);
						grdTransferIn.addStringColumn("Patient Name", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Current Ward", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Specialty", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Consultant", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Request Date", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdTransferIn);
				
						// RadioButton Controls
						RadioButton tmpTICaseFolderYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
						super.addControl(tmpTICaseFolderYesNo);
						TICaseFolderYesNoRadioButton TICaseFolderYesNo = (TICaseFolderYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(TICaseFolderYesNoRadioButton.class, tmpTICaseFolderYesNo);
						TICaseFolderYesNo.setContext(startTabIndex, designSize, runtimeSize);
						super.addRadioButton(TICaseFolderYesNo);
					}
		
					public ims.core.forms.mosquery.IComponent ccInConsultant()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccInConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccInConsultantVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccInConsultantVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccInConsultantEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccInConsultantEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblAllocateBedTransf()
					{
						return (Label)super.getControl(2);
					}
					public Label lblTICaseComment()
					{
						return (Label)super.getControl(5);
					}
					public Label lblTIUpdateCasefolder()
					{
						return (Label)super.getControl(6);
					}
					public Label lblTransferInEstDischargeDate()
					{
						return (Label)super.getControl(7);
					}
					public Label lbl2()
					{
						return (Label)super.getControl(8);
					}
					public Label lbl5()
					{
						return (Label)super.getControl(9);
					}
					public Label lbl9()
					{
						return (Label)super.getControl(10);
					}
					public Label lbl10()
					{
						return (Label)super.getControl(11);
					}
					public TextBox txtTransferComment()
					{
						return (TextBox)super.getControl(12);
					}
					public TextBox txtTICaseComment()
					{
						return (TextBox)super.getControl(13);
					}
					public DateControl dteDischarge()
					{
						return (DateControl)super.getControl(14);
					}
					public DateTimeControl dtimEstDischarge()
					{
						return (DateTimeControl)super.getControl(15);
					}
					public DateTimeControl dtimTransfer()
					{
						return (DateTimeControl)super.getControl(16);
					}
					public cmbTransferReasonComboBox cmbTransferReason()
					{
						return (cmbTransferReasonComboBox)super.getComboBox(0);
					}
					public cmbCCOInSpecialtyComboBox cmbCCOInSpecialty()
					{
						return (cmbCCOInSpecialtyComboBox)super.getComboBox(1);
					}
					public cmbWardTypeComboBox cmbWardType()
					{
						return (cmbWardTypeComboBox)super.getComboBox(2);
					}
					public cmbInSpecialtyComboBox cmbInSpecialty()
					{
						return (cmbInSpecialtyComboBox)super.getComboBox(3);
					}
					public qmbInServiceComboBox qmbInService()
					{
						return (qmbInServiceComboBox)super.getComboBox(4);
					}
					public CheckBox chkAllocateSourceBed()
					{
						return (CheckBox)super.getControl(22);
					}
					public grdTransferInGrid grdTransferIn()
					{
						return (grdTransferInGrid)super.getGrid(0);
					}
					public TICaseFolderYesNoRadioButton TICaseFolderYesNo()
					{
						return (TICaseFolderYesNoRadioButton)super.getRadioButton(0);
					}
				}
				public static class tabOutContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbPatientCategoryComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PatientStatus getValue()
						{
							return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PatientStatus value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutTransfReasonComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.TransferReason value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.TransferReason value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.TransferReason getValue()
						{
							return (ims.core.vo.lookups.TransferReason)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.TransferReason value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbCCOOutSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PASSpecialty getValue()
						{
							return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PASSpecialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutTransferComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutWardTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.WardType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.WardType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.WardType getValue()
						{
							return (ims.core.vo.lookups.WardType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.WardType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutHospitalComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public static class qmbOutServiceComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.ServiceLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.ServiceLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.ServiceLiteVo getValue()
						{
							return (ims.core.vo.ServiceLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.ServiceLiteVo value)
						{
							super.control.setValue(value);
						}
						public void setEditedText(String text)
						{
							super.control.setEditedText(text);
						}
						public String getEditedText()
						{
							return super.control.getEditedText();
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 444, 190, 344, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ims.framework.FormUiLogic m_ccOutConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper76.getSize(), instance1, startTabIndex.intValue() + 24, skipContextValidation);
						//ims.framework.Control m_ccOutConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(444), new Integer(190), new Integer(344), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 24), m_ccOutConsultantForm, instance1 } );
						ims.framework.Control m_ccOutConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1076),  new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 24), m_ccOutConsultantForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccOutConsultantControl);
						Menu[] menus1 = m_ccOutConsultantForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 331, 136, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 331, 330, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed Available Date:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 331, 219, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Category:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 2, 329, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Longer in Bed:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 331, 273, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 331, 247, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer Reason:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 186, 301, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Logged In MOS>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 2, 301, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer By:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 2, 11, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Hospital:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 331, 192, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 331, 164, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 2, 273, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer Requested Date/Time:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 331, 11, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dest. Hospital:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 331, 42, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Destination Ward: ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 2, 75, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Ward:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 331, 108, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Type:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 444, 273, 328, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.GET, "", ""}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 444, 328, 152, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 186, 271, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 444, 217, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbPatientCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbPatientCategoryTemp);
						cmbPatientCategoryComboBox cmbPatientCategory = (cmbPatientCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientCategoryComboBox.class, m_cmbPatientCategoryTemp);
						super.addComboBox(cmbPatientCategory);
						RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 444, 245, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbOutTransfReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutTransfReasonTemp);
						cmbOutTransfReasonComboBox cmbOutTransfReason = (cmbOutTransfReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutTransfReasonComboBox.class, m_cmbOutTransfReasonTemp);
						super.addComboBox(cmbOutTransfReason);
						RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 444, 162, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbCCOOutSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbCCOOutSpecialtyTemp);
						cmbCCOOutSpecialtyComboBox cmbCCOOutSpecialty = (cmbCCOOutSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOOutSpecialtyComboBox.class, m_cmbCCOOutSpecialtyTemp);
						super.addComboBox(cmbCCOOutSpecialty);
						RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 444, 162, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbOutSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbOutSpecialtyTemp);
						cmbOutSpecialtyComboBox cmbOutSpecialty = (cmbOutSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutSpecialtyComboBox.class, m_cmbOutSpecialtyTemp);
						super.addComboBox(cmbOutSpecialty);
						RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 444, 40, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbOutTransferTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutTransferTemp);
						cmbOutTransferComboBox cmbOutTransfer = (cmbOutTransferComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutTransferComboBox.class, m_cmbOutTransferTemp);
						super.addComboBox(cmbOutTransfer);
						RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 444, 106, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbOutWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutWardTypeTemp);
						cmbOutWardTypeComboBox cmbOutWardType = (cmbOutWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutWardTypeComboBox.class, m_cmbOutWardTypeTemp);
						super.addComboBox(cmbOutWardType);
						RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 444, 9, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbOutHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutHospitalTemp);
						cmbOutHospitalComboBox cmbOutHospital = (cmbOutHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutHospitalComboBox.class, m_cmbOutHospitalTemp);
						super.addComboBox(cmbOutHospital);
				
						// Query ComboBox Controls
						RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 444, 134, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_qmbOutServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
						addControl(m_qmbOutServiceTemp);
						qmbOutServiceComboBox qmbOutService = (qmbOutServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbOutServiceComboBox.class, m_qmbOutServiceTemp);
						super.addComboBox(qmbOutService);
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 186, 331, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				
						// HTML Viewer Controls
						RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 88, 75, 224, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
						RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 88, 11, 224, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
					}
		
					public ims.core.forms.mosquery.IComponent ccOutConsultant()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccOutConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccOutConsultantVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccOutConsultantVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccOutConsultantEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccOutConsultantEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblBedReadyTime()
					{
						return (Label)super.getControl(2);
					}
					public Label lblPatientCategory()
					{
						return (Label)super.getControl(3);
					}
					public Label lblNoBed()
					{
						return (Label)super.getControl(4);
					}
					public Label lblLoggedInHcp()
					{
						return (Label)super.getControl(7);
					}
					public Label lbl22()
					{
						return (Label)super.getControl(11);
					}
					public TextBox txtOutTransfComment()
					{
						return (TextBox)super.getControl(17);
					}
					public DateTimeControl dtimBedReady()
					{
						return (DateTimeControl)super.getControl(18);
					}
					public DateTimeControl dtimOutTransfer()
					{
						return (DateTimeControl)super.getControl(19);
					}
					public cmbPatientCategoryComboBox cmbPatientCategory()
					{
						return (cmbPatientCategoryComboBox)super.getComboBox(0);
					}
					public cmbOutTransfReasonComboBox cmbOutTransfReason()
					{
						return (cmbOutTransfReasonComboBox)super.getComboBox(1);
					}
					public cmbCCOOutSpecialtyComboBox cmbCCOOutSpecialty()
					{
						return (cmbCCOOutSpecialtyComboBox)super.getComboBox(2);
					}
					public cmbOutSpecialtyComboBox cmbOutSpecialty()
					{
						return (cmbOutSpecialtyComboBox)super.getComboBox(3);
					}
					public cmbOutTransferComboBox cmbOutTransfer()
					{
						return (cmbOutTransferComboBox)super.getComboBox(4);
					}
					public cmbOutWardTypeComboBox cmbOutWardType()
					{
						return (cmbOutWardTypeComboBox)super.getComboBox(5);
					}
					public cmbOutHospitalComboBox cmbOutHospital()
					{
						return (cmbOutHospitalComboBox)super.getComboBox(6);
					}
					public qmbOutServiceComboBox qmbOutService()
					{
						return (qmbOutServiceComboBox)super.getComboBox(7);
					}
					public CheckBox chkNoLongerBed()
					{
						return (CheckBox)super.getControl(28);
					}
					public HTMLViewer htmWard()
					{
						return (HTMLViewer)super.getControl(29);
					}
					public HTMLViewer htmHospital()
					{
						return (HTMLViewer)super.getControl(30);
					}
				}
				public static class tabConsultantContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbPatientCategoryConsultantComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PatientStatus getValue()
						{
							return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PatientStatus value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbCCOConsultantSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PASSpecialty getValue()
						{
							return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PASSpecialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbConsultantSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class qmbConsultantServiceComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.ServiceLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.ServiceLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.ServiceLiteVo getValue()
						{
							return (ims.core.vo.ServiceLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.ServiceLiteVo value)
						{
							super.control.setValue(value);
						}
						public void setEditedText(String text)
						{
							super.control.setEditedText(text);
						}
						public String getEditedText()
						{
							return super.control.getEditedText();
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 296, 192, 344, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ims.framework.FormUiLogic m_ccConsultantAcceptingForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper107.getSize(), instance1, startTabIndex.intValue() + 35, skipContextValidation);
						//ims.framework.Control m_ccConsultantAcceptingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(296), new Integer(192), new Integer(344), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 35), m_ccConsultantAcceptingForm, instance1 } );
						ims.framework.Control m_ccConsultantAcceptingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1108),  new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 35), m_ccConsultantAcceptingForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccConsultantAcceptingControl);
						Menu[] menus1 = m_ccConsultantAcceptingForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 144, 126, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Accepting Service:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 144, 261, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Category :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 296, 94, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Consultant>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 144, 94, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Consultant :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 144, 227, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Transfer :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 144, 160, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Accepting Specialty :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 144, 194, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Accepting Consultant :", new Integer(1), null, new Integer(0)}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 296, 225, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 296, 259, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbPatientCategoryConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbPatientCategoryConsultantTemp);
						cmbPatientCategoryConsultantComboBox cmbPatientCategoryConsultant = (cmbPatientCategoryConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientCategoryConsultantComboBox.class, m_cmbPatientCategoryConsultantTemp);
						super.addComboBox(cmbPatientCategoryConsultant);
						RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 296, 158, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbCCOConsultantSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbCCOConsultantSpecialtyTemp);
						cmbCCOConsultantSpecialtyComboBox cmbCCOConsultantSpecialty = (cmbCCOConsultantSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOConsultantSpecialtyComboBox.class, m_cmbCCOConsultantSpecialtyTemp);
						super.addComboBox(cmbCCOConsultantSpecialty);
						RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 296, 158, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbConsultantSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbConsultantSpecialtyTemp);
						cmbConsultantSpecialtyComboBox cmbConsultantSpecialty = (cmbConsultantSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbConsultantSpecialtyComboBox.class, m_cmbConsultantSpecialtyTemp);
						super.addComboBox(cmbConsultantSpecialty);
				
						// Query ComboBox Controls
						RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 296, 124, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_qmbConsultantServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
						addControl(m_qmbConsultantServiceTemp);
						qmbConsultantServiceComboBox qmbConsultantService = (qmbConsultantServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantServiceComboBox.class, m_qmbConsultantServiceTemp);
						super.addComboBox(qmbConsultantService);
					}
		
					public ims.core.forms.mosquery.IComponent ccConsultantAccepting()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccConsultantAcceptingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccConsultantAcceptingVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccConsultantAcceptingVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccConsultantAcceptingEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccConsultantAcceptingEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblConsService()
					{
						return (Label)super.getControl(1);
					}
					public Label lblPatientCategoryConsultant()
					{
						return (Label)super.getControl(2);
					}
					public Label lblCurrentCons()
					{
						return (Label)super.getControl(3);
					}
					public Label lbl6()
					{
						return (Label)super.getControl(6);
					}
					public DateTimeControl dtimConsultantTransfer()
					{
						return (DateTimeControl)super.getControl(8);
					}
					public cmbPatientCategoryConsultantComboBox cmbPatientCategoryConsultant()
					{
						return (cmbPatientCategoryConsultantComboBox)super.getComboBox(0);
					}
					public cmbCCOConsultantSpecialtyComboBox cmbCCOConsultantSpecialty()
					{
						return (cmbCCOConsultantSpecialtyComboBox)super.getComboBox(1);
					}
					public cmbConsultantSpecialtyComboBox cmbConsultantSpecialty()
					{
						return (cmbConsultantSpecialtyComboBox)super.getComboBox(2);
					}
					public qmbConsultantServiceComboBox qmbConsultantService()
					{
						return (qmbConsultantServiceComboBox)super.getComboBox(3);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 12, 8, 792, 400, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabIn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"In", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabInContainer m_tabInContainer = (tabInContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInContainer.class, m_tabIn, factory);
					super.addContainer(m_tabIn, m_tabInContainer);
					ims.framework.utils.SizeInfo m_tabInDesignSize = new ims.framework.utils.SizeInfo(792, 400);
					ims.framework.utils.SizeInfo m_tabInRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper120.getWidth(), anchoringHelper120.getHeight());
					m_tabInContainer.setContext(form, appForm, m_tabIn, loader, form_images_local, startControlID, m_tabInDesignSize, m_tabInRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 12, 8, 792, 400, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabOut = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Out", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabOutContainer m_tabOutContainer = (tabOutContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutContainer.class, m_tabOut, factory);
					super.addContainer(m_tabOut, m_tabOutContainer);
					ims.framework.utils.SizeInfo m_tabOutDesignSize = new ims.framework.utils.SizeInfo(792, 400);
					ims.framework.utils.SizeInfo m_tabOutRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper121.getWidth(), anchoringHelper121.getHeight());
					m_tabOutContainer.setContext(form, appForm, m_tabOut, loader, form_images_local, startControlID, m_tabOutDesignSize, m_tabOutRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 12, 8, 792, 400, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabConsultant = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Consultant", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabConsultantContainer m_tabConsultantContainer = (tabConsultantContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConsultantContainer.class, m_tabConsultant, factory);
					super.addContainer(m_tabConsultant, m_tabConsultantContainer);
					ims.framework.utils.SizeInfo m_tabConsultantDesignSize = new ims.framework.utils.SizeInfo(792, 400);
					ims.framework.utils.SizeInfo m_tabConsultantRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper122.getWidth(), anchoringHelper122.getHeight());
					m_tabConsultantContainer.setContext(form, appForm, m_tabConsultant, loader, form_images_local, startControlID, m_tabConsultantDesignSize, m_tabConsultantRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabIn().setVisible(false);
					tabOut().setVisible(false);
					tabConsultant().setVisible(false);
				}
				public void settabInEnabled(boolean value)
				{
					tabIn().setEnabled(value);
				}
				public void settabOutEnabled(boolean value)
				{
					tabOut().setEnabled(value);
				}
				public void settabConsultantEnabled(boolean value)
				{
					tabConsultant().setEnabled(value);
				}
				public void showtabIn()
				{
					tabOut().setVisible(false);
					tabConsultant().setVisible(false);
					tabIn().setVisible(true);
				}
				public void showtabOut()
				{
					tabIn().setVisible(false);
					tabConsultant().setVisible(false);
					tabOut().setVisible(true);
				}
				public void showtabConsultant()
				{
					tabIn().setVisible(false);
					tabOut().setVisible(false);
					tabConsultant().setVisible(true);
				}
		
				public tabInContainer tabIn()
				{
					return (tabInContainer)super.layers.get(0);
				}
				public tabOutContainer tabOut()
				{
					return (tabOutContainer)super.layers.get(1);
				}
				public tabConsultantContainer tabConsultant()
				{
					return (tabConsultantContainer)super.layers.get(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrTransferLayer m_lyrTransferLayer = (lyrTransferLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTransferLayer.class, this, factory);
				super.addLayer(m_lyrTransferLayer);
				m_lyrTransferLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 676, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public lyrTransferLayer lyrTransfer()
			{
				return (lyrTransferLayer)super.getLayer(0);
			}
			public Button btnCancelTransfer()
			{
				return (Button)super.getControl(3);
			}
			public Button btnTransfer()
			{
				return (Button)super.getControl(4);
			}
		}
		public static class tabTrackingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbMovementTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TrackingMovementType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TrackingMovementType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TrackingMovementType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TrackingMovementType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TrackingMovementType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TrackingMovementType getValue()
				{
					return (ims.core.vo.lookups.TrackingMovementType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TrackingMovementType value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 158, 186, 167, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Return Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 158, 146, 199, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time Patient Left the Ward: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 158, 106, 151, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tracking Movement Type:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 680, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1129), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 400, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Patient Returned", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 362, 184, 172, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 362, 144, 172, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 362, 104, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbMovementTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbMovementTypeTemp);
				cmbMovementTypeComboBox cmbMovementType = (cmbMovementTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMovementTypeComboBox.class, m_cmbMovementTypeTemp);
				super.addComboBox(cmbMovementType);
			}

			public Label lblTrackingExpReturnTim()
			{
				return (Label)super.getControl(0);
			}
			public Label lblTrackingLeftWardTim()
			{
				return (Label)super.getControl(1);
			}
			public Label lblTrackingMoveType()
			{
				return (Label)super.getControl(2);
			}
			public Button btnCancelTracking()
			{
				return (Button)super.getControl(3);
			}
			public Button btnPatReturned()
			{
				return (Button)super.getControl(4);
			}
			public Button btnSaveTracking()
			{
				return (Button)super.getControl(5);
			}
			public DateTimeControl dtimExpectedReturn()
			{
				return (DateTimeControl)super.getControl(6);
			}
			public DateTimeControl dtimLeftWard()
			{
				return (DateTimeControl)super.getControl(7);
			}
			public cmbMovementTypeComboBox cmbMovementType()
			{
				return (cmbMovementTypeComboBox)super.getComboBox(0);
			}
		}
		public static class tabReadyForDischargeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbReasonForExtStayComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ExtendedLengthOfStayReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ExtendedLengthOfStayReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ExtendedLengthOfStayReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ExtendedLengthOfStayReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ExtendedLengthOfStayReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ExtendedLengthOfStayReason getValue()
				{
					return (ims.core.vo.lookups.ExtendedLengthOfStayReason)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ExtendedLengthOfStayReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTransportDetComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.lookups.ApptTransportType getValue()
				{
					return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReasonCannotGoLoungeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ReasonCannotGoDischargeLounge getValue()
				{
					return (ims.core.vo.lookups.ReasonCannotGoDischargeLounge)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ReasonCannotGoDischargeLounge value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class DelayedDischargeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 592, 143, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper134.getX(), anchoringHelper134.getY(), anchoringHelper134.getWidth(), "No", startTabIndex.intValue() + 58);
					RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 544, 143, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper135.getX(), anchoringHelper135.getY(), anchoringHelper135.getWidth(), "Yes", startTabIndex.intValue() + 57);
				}
				public void setText(DelayedDischargeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public DelayedDischargeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return DelayedDischargeEnumeration.None;
						case 0: return DelayedDischargeEnumeration.rdoDelayedDischNo;
						case 1: return DelayedDischargeEnumeration.rdoDelayedDischYes;
					}
					return null;
				}
				public void setValue(DelayedDischargeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(DelayedDischargeEnumeration.None.id);
				}
				public boolean isEnabled(DelayedDischargeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(DelayedDischargeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(DelayedDischargeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(DelayedDischargeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class DelayedDischargeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static DelayedDischargeEnumeration None = new DelayedDischargeEnumeration(-1);
				public static DelayedDischargeEnumeration rdoDelayedDischNo = new DelayedDischargeEnumeration(0);
				public static DelayedDischargeEnumeration rdoDelayedDischYes = new DelayedDischargeEnumeration(1);
				private DelayedDischargeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((DelayedDischargeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class DischargeLoungeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 362, 360, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper136.getX(), anchoringHelper136.getY(), anchoringHelper136.getWidth(), "No", startTabIndex.intValue() + 71);
					RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 306, 360, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper137.getX(), anchoringHelper137.getY(), anchoringHelper137.getWidth(), "Yes", startTabIndex.intValue() + 70);
				}
				public void setText(DischargeLoungeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public DischargeLoungeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return DischargeLoungeEnumeration.None;
						case 0: return DischargeLoungeEnumeration.rdoLoungeNo;
						case 1: return DischargeLoungeEnumeration.rdoLoungeYes;
					}
					return null;
				}
				public void setValue(DischargeLoungeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(DischargeLoungeEnumeration.None.id);
				}
				public boolean isEnabled(DischargeLoungeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(DischargeLoungeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(DischargeLoungeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(DischargeLoungeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class DischargeLoungeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static DischargeLoungeEnumeration None = new DischargeLoungeEnumeration(-1);
				public static DischargeLoungeEnumeration rdoLoungeNo = new DischargeLoungeEnumeration(0);
				public static DischargeLoungeEnumeration rdoLoungeYes = new DischargeLoungeEnumeration(1);
				private DischargeLoungeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((DischargeLoungeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class FitForDischargeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 352, 143, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper138.getX(), anchoringHelper138.getY(), anchoringHelper138.getWidth(), "No", startTabIndex.intValue() + 56);
					RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 304, 143, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper139.getX(), anchoringHelper139.getY(), anchoringHelper139.getWidth(), "Yes", startTabIndex.intValue() + 54);
				}
				public void setText(FitForDischargeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public FitForDischargeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return FitForDischargeEnumeration.None;
						case 0: return FitForDischargeEnumeration.rdoFitNo;
						case 1: return FitForDischargeEnumeration.rdoFitYes;
					}
					return null;
				}
				public void setValue(FitForDischargeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(FitForDischargeEnumeration.None.id);
				}
				public boolean isEnabled(FitForDischargeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(FitForDischargeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(FitForDischargeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(FitForDischargeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class FitForDischargeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static FitForDischargeEnumeration None = new FitForDischargeEnumeration(-1);
				public static FitForDischargeEnumeration rdoFitNo = new FitForDischargeEnumeration(0);
				public static FitForDischargeEnumeration rdoFitYes = new FitForDischargeEnumeration(1);
				private FitForDischargeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((FitForDischargeEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 16, 23, 784, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Estimated Discharge Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 784, 101, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Reason(s) for Delayed Discharge", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 67, 267, 211, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1137), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Confirmed Date/Time for Discharge:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 67, 298, 211, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Ready to Leave Decision Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 548, 6, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<los>>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 188, 6, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "dd/mm/yyyy - hh:mm", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 92, 6, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 372, 6, 178, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Length of Stay (days):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 305, 46, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "dd/mm/yyyy - hh:mm", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 68, 77, 219, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(anchoringHelper149.getX()), new Integer(anchoringHelper149.getY()), new Integer(anchoringHelper149.getWidth()), new Integer(anchoringHelper149.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "New Estimated Discharge Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 68, 109, 212, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(anchoringHelper150.getX()), new Integer(anchoringHelper150.getY()), new Integer(anchoringHelper150.getWidth()), new Integer(anchoringHelper150.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Extended Length of Stay:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 64, 46, 237, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(anchoringHelper151.getX()), new Integer(anchoringHelper151.getY()), new Integer(anchoringHelper151.getWidth()), new Integer(anchoringHelper151.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Estimated Discharge Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 424, 143, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(anchoringHelper152.getX()), new Integer(anchoringHelper152.getY()), new Integer(anchoringHelper152.getWidth()), new Integer(anchoringHelper152.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delayed Discharge?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 67, 328, 64, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(anchoringHelper153.getX()), new Integer(anchoringHelper153.getY()), new Integer(anchoringHelper153.getWidth()), new Integer(anchoringHelper153.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Transport:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 67, 386, 50, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1149), new Integer(anchoringHelper154.getX()), new Integer(anchoringHelper154.getY()), new Integer(anchoringHelper154.getWidth()), new Integer(anchoringHelper154.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 67, 360, 234, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper155.getX()), new Integer(anchoringHelper155.getY()), new Integer(anchoringHelper155.getWidth()), new Integer(anchoringHelper155.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Patient Able to Go to Discharge Lounge?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 66, 143, 243, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper156.getX()), new Integer(anchoringHelper156.getY()), new Integer(anchoringHelper156.getWidth()), new Integer(anchoringHelper156.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is the Patient Medically Fit for Discharge?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 180, 167, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper157.getX()), new Integer(anchoringHelper157.getY()), new Integer(anchoringHelper157.getWidth()), new Integer(anchoringHelper157.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Ready Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 180, 78, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper158.getX()), new Integer(anchoringHelper158.getY()), new Integer(anchoringHelper158.getWidth()), new Integer(anchoringHelper158.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Revised Stay:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 180, 110, 155, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper159.getX()), new Integer(anchoringHelper159.getY()), new Integer(anchoringHelper159.getWidth()), new Integer(anchoringHelper159.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Discharge Date:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 67, 295, 228, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper160.getX()), new Integer(anchoringHelper160.getY()), new Integer(anchoringHelper160.getWidth()), new Integer(anchoringHelper160.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Ready to Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 676, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper161.getX()), new Integer(anchoringHelper161.getY()), new Integer(anchoringHelper161.getWidth()), new Integer(anchoringHelper161.getHeight()), new Integer(startTabIndex.intValue() + 76), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper162.getX()), new Integer(anchoringHelper162.getY()), new Integer(anchoringHelper162.getWidth()), new Integer(anchoringHelper162.getHeight()), new Integer(startTabIndex.intValue() + 75), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 452, 43, 224, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper163.getX()), new Integer(anchoringHelper163.getY()), new Integer(anchoringHelper163.getWidth()), new Integer(anchoringHelper163.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Revise Estimated Discharge Date/Time", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 67, 264, 228, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper164.getX()), new Integer(anchoringHelper164.getY()), new Integer(anchoringHelper164.getWidth()), new Integer(anchoringHelper164.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Confirm Patient is Ready for Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper165.getX()), new Integer(anchoringHelper165.getY()), new Integer(anchoringHelper165.getWidth()), new Integer(anchoringHelper165.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 676, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper166.getX()), new Integer(anchoringHelper166.getY()), new Integer(anchoringHelper166.getWidth()), new Integer(anchoringHelper166.getHeight()), new Integer(startTabIndex.intValue() + 78), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 67, 264, 228, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(anchoringHelper167.getX()), new Integer(anchoringHelper167.getY()), new Integer(anchoringHelper167.getWidth()), new Integer(anchoringHelper167.getHeight()), new Integer(startTabIndex.intValue() + 64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Undo Confirmed Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 67, 295, 228, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(anchoringHelper168.getX()), new Integer(anchoringHelper168.getY()), new Integer(anchoringHelper168.getWidth()), new Integer(anchoringHelper168.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Undo Ready to Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 632, 141, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(anchoringHelper169.getX()), new Integer(anchoringHelper169.getY()), new Integer(anchoringHelper169.getWidth()), new Integer(anchoringHelper169.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 744, 183, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(anchoringHelper170.getX()), new Integer(anchoringHelper170.getY()), new Integer(anchoringHelper170.getWidth()), new Integer(anchoringHelper170.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 400, 360, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(anchoringHelper171.getX()), new Integer(anchoringHelper171.getY()), new Integer(anchoringHelper171.getWidth()), new Integer(anchoringHelper171.getHeight()), new Integer(startTabIndex.intValue() + 171), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 392, 140, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(anchoringHelper172.getX()), new Integer(anchoringHelper172.getY()), new Integer(anchoringHelper172.getWidth()), new Integer(anchoringHelper172.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 356, 164, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1168), new Integer(anchoringHelper173.getX()), new Integer(anchoringHelper173.getY()), new Integer(anchoringHelper173.getWidth()), new Integer(anchoringHelper173.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 356, 108, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(anchoringHelper174.getX()), new Integer(anchoringHelper174.getY()), new Integer(anchoringHelper174.getWidth()), new Integer(anchoringHelper174.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 306, 296, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(anchoringHelper175.getX()), new Integer(anchoringHelper175.getY()), new Integer(anchoringHelper175.getWidth()), new Integer(anchoringHelper175.getHeight()), new Integer(startTabIndex.intValue() + 68), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 305, 75, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(anchoringHelper176.getX()), new Integer(anchoringHelper176.getY()), new Integer(anchoringHelper176.getWidth()), new Integer(anchoringHelper176.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 306, 265, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper177.getX()), new Integer(anchoringHelper177.getY()), new Integer(anchoringHelper177.getWidth()), new Integer(anchoringHelper177.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 305, 107, 246, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbReasonForExtStayTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper178.getX()), new Integer(anchoringHelper178.getY()), new Integer(anchoringHelper178.getWidth()), new Integer(anchoringHelper178.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReasonForExtStayTemp);
				cmbReasonForExtStayComboBox cmbReasonForExtStay = (cmbReasonForExtStayComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonForExtStayComboBox.class, m_cmbReasonForExtStayTemp);
				super.addComboBox(cmbReasonForExtStay);
				RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 306, 328, 246, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTransportDetTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper179.getX()), new Integer(anchoringHelper179.getY()), new Integer(anchoringHelper179.getWidth()), new Integer(anchoringHelper179.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTransportDetTemp);
				cmbTransportDetComboBox cmbTransportDet = (cmbTransportDetComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportDetComboBox.class, m_cmbTransportDetTemp);
				super.addComboBox(cmbTransportDet);
				RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 306, 384, 246, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbReasonCannotGoLoungeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper180.getX()), new Integer(anchoringHelper180.getY()), new Integer(anchoringHelper180.getWidth()), new Integer(anchoringHelper180.getHeight()), new Integer(startTabIndex.intValue() + 73), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbReasonCannotGoLoungeTemp);
				cmbReasonCannotGoLoungeComboBox cmbReasonCannotGoLounge = (cmbReasonCannotGoLoungeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonCannotGoLoungeComboBox.class, m_cmbReasonCannotGoLoungeTemp);
				super.addComboBox(cmbReasonCannotGoLounge);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 356, 140, 160, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper181.getX()), new Integer(anchoringHelper181.getY()), new Integer(anchoringHelper181.getWidth()), new Integer(anchoringHelper181.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Confirm Discharge", Boolean.FALSE, null}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 40, 182, 704, 70, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper182.getX()), new Integer(anchoringHelper182.getY()), new Integer(anchoringHelper182.getWidth()), new Integer(anchoringHelper182.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 476, 76, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper183.getX()), new Integer(anchoringHelper183.getY()), new Integer(anchoringHelper183.getWidth()), new Integer(anchoringHelper183.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(2)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 756, 210, 20, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper184.getX()), new Integer(anchoringHelper184.getY()), new Integer(anchoringHelper184.getWidth()), new Integer(anchoringHelper184.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Update, form_images_local.Core.UpdateDisabled, "Update", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 756, 234, 20, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper185.getX()), new Integer(anchoringHelper185.getY()), new Integer(anchoringHelper185.getWidth()), new Integer(anchoringHelper185.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Minus, form_images_local.Core.MinusDisabled, "Remove", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 756, 186, 20, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper186.getX()), new Integer(anchoringHelper186.getY()), new Integer(anchoringHelper186.getWidth()), new Integer(anchoringHelper186.getHeight()), new Integer(startTabIndex.intValue() + 60), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.Plus, form_images_local.Core.PlusDisabled, "Add", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpDelayedDischarge = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpDelayedDischarge);
				DelayedDischargeRadioButton DelayedDischarge = (DelayedDischargeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(DelayedDischargeRadioButton.class, tmpDelayedDischarge);
				DelayedDischarge.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(DelayedDischarge);
				RadioButton tmpDischargeLounge = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpDischargeLounge);
				DischargeLoungeRadioButton DischargeLounge = (DischargeLoungeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(DischargeLoungeRadioButton.class, tmpDischargeLounge);
				DischargeLounge.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(DischargeLounge);
				RadioButton tmpFitForDischarge = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpFitForDischarge);
				FitForDischargeRadioButton FitForDischarge = (FitForDischargeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(FitForDischargeRadioButton.class, tmpFitForDischarge);
				FitForDischarge.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(FitForDischarge);
			}

			public Panel pnlEstDischargeDetails()
			{
				return (Panel)super.getControl(0);
			}
			public Panel pnlDelayReason()
			{
				return (Panel)super.getControl(1);
			}
			public Label lblConfirmedDischargeDate()
			{
				return (Label)super.getControl(2);
			}
			public Label lblReadyToLeaveDate()
			{
				return (Label)super.getControl(3);
			}
			public Label lblCurrentLengthOfStayVal()
			{
				return (Label)super.getControl(4);
			}
			public Label lblAdmDateTimeVal()
			{
				return (Label)super.getControl(5);
			}
			public Label lblAdmDateTime()
			{
				return (Label)super.getControl(6);
			}
			public Label lblCurrentStay()
			{
				return (Label)super.getControl(7);
			}
			public Label lblCurrentEstDischDateVal()
			{
				return (Label)super.getControl(8);
			}
			public Label lblNewEstDischDate()
			{
				return (Label)super.getControl(9);
			}
			public Label lblReasonForExtendedLOS()
			{
				return (Label)super.getControl(10);
			}
			public Label lblCurrentEstDischDate()
			{
				return (Label)super.getControl(11);
			}
			public Label lblDelayedDischarge()
			{
				return (Label)super.getControl(12);
			}
			public Label lblTransportDet()
			{
				return (Label)super.getControl(13);
			}
			public Label lblReasonCannotGoLounge()
			{
				return (Label)super.getControl(14);
			}
			public Label lblAbleToGotoLounge()
			{
				return (Label)super.getControl(15);
			}
			public Label lblFitForDischarge()
			{
				return (Label)super.getControl(16);
			}
			public Label lblDischargeReadyDate()
			{
				return (Label)super.getControl(17);
			}
			public Label lblEstRevisedStay()
			{
				return (Label)super.getControl(18);
			}
			public Label lblEstDischargeDate()
			{
				return (Label)super.getControl(19);
			}
			public Button btnReadyToLeave()
			{
				return (Button)super.getControl(20);
			}
			public Button btnCancelEstDisch()
			{
				return (Button)super.getControl(21);
			}
			public Button btnSaveEstDisch()
			{
				return (Button)super.getControl(22);
			}
			public Button btnReviseEstDischDate()
			{
				return (Button)super.getControl(23);
			}
			public Button btnConfirmReadyForDischarge()
			{
				return (Button)super.getControl(24);
			}
			public Button btnClearEstimate()
			{
				return (Button)super.getControl(25);
			}
			public Button btnSaveEstDischarge()
			{
				return (Button)super.getControl(26);
			}
			public Button btnUndoConfirmedDischarged()
			{
				return (Button)super.getControl(27);
			}
			public Button btnUndoReadyToLeave()
			{
				return (Button)super.getControl(28);
			}
			public TextBox txtDelayedDischargeRequired()
			{
				return (TextBox)super.getControl(29);
			}
			public TextBox txtReasDelayDischRequired()
			{
				return (TextBox)super.getControl(30);
			}
			public TextBox txtLoungeRequired()
			{
				return (TextBox)super.getControl(31);
			}
			public TextBox txtFitRequired()
			{
				return (TextBox)super.getControl(32);
			}
			public DateControl dteDischargeReady()
			{
				return (DateControl)super.getControl(33);
			}
			public DateControl dteEstDischarge()
			{
				return (DateControl)super.getControl(34);
			}
			public DateTimeControl dtimReadyToLeave()
			{
				return (DateTimeControl)super.getControl(35);
			}
			public DateTimeControl dtimNewEstDischDate()
			{
				return (DateTimeControl)super.getControl(36);
			}
			public DateTimeControl dtimConfirmedDischargeDate()
			{
				return (DateTimeControl)super.getControl(37);
			}
			public cmbReasonForExtStayComboBox cmbReasonForExtStay()
			{
				return (cmbReasonForExtStayComboBox)super.getComboBox(0);
			}
			public cmbTransportDetComboBox cmbTransportDet()
			{
				return (cmbTransportDetComboBox)super.getComboBox(1);
			}
			public cmbReasonCannotGoLoungeComboBox cmbReasonCannotGoLounge()
			{
				return (cmbReasonCannotGoLoungeComboBox)super.getComboBox(2);
			}
			public CheckBox chkConfirm()
			{
				return (CheckBox)super.getControl(41);
			}
			public DynamicGrid dyngrdDischReason()
			{
				return (DynamicGrid)super.getControl(42);
			}
			public IntBox intEstRevisedStay()
			{
				return (IntBox)super.getControl(43);
			}
			public ImageButton imbUpdateReason()
			{
				return (ImageButton)super.getControl(44);
			}
			public ImageButton imbRemoveReason()
			{
				return (ImageButton)super.getControl(45);
			}
			public ImageButton imbAddReason()
			{
				return (ImageButton)super.getControl(46);
			}
			public DelayedDischargeRadioButton DelayedDischarge()
			{
				return (DelayedDischargeRadioButton)super.getRadioButton(0);
			}
			public DischargeLoungeRadioButton DischargeLounge()
			{
				return (DischargeLoungeRadioButton)super.getRadioButton(1);
			}
			public FitForDischargeRadioButton FitForDischarge()
			{
				return (FitForDischargeRadioButton)super.getRadioButton(2);
			}
		}
		public static class tabDischargeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDischargeReasonForClosureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ReasonForBedClosure getValue()
				{
					return (ims.core.vo.lookups.ReasonForBedClosure)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDeferredReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.CancellationTypeReasonVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.CancellationTypeReasonVo getValue()
				{
					return (ims.scheduling.vo.CancellationTypeReasonVo)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.CancellationTypeReasonVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDischargeDestinationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.coe.vo.lookups.DischargeDestination value)
				{
					return super.control.removeRow(value);
				}
				public ims.coe.vo.lookups.DischargeDestination getValue()
				{
					return (ims.coe.vo.lookups.DischargeDestination)super.control.getValue();
				}
				public void setValue(ims.coe.vo.lookups.DischargeDestination value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMethodDischargeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MethodOfDischarge value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MethodOfDischarge getValue()
				{
					return (ims.core.vo.lookups.MethodOfDischarge)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MethodOfDischarge value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class grpPatientTreatedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper187 = new RuntimeAnchoring(designSize, runtimeSize, 428, 240, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper187.getX(), anchoringHelper187.getY(), anchoringHelper187.getWidth(), "No", -1);
					RuntimeAnchoring anchoringHelper188 = new RuntimeAnchoring(designSize, runtimeSize, 364, 240, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper188.getX(), anchoringHelper188.getY(), anchoringHelper188.getWidth(), "Yes", -1);
				}
				public void setText(grpPatientTreatedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpPatientTreatedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpPatientTreatedEnumeration.None;
						case 0: return grpPatientTreatedEnumeration.rdoNoTreatment;
						case 1: return grpPatientTreatedEnumeration.rdoYesTreated;
					}
					return null;
				}
				public void setValue(grpPatientTreatedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpPatientTreatedEnumeration.None.id);
				}
				public boolean isEnabled(grpPatientTreatedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpPatientTreatedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpPatientTreatedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpPatientTreatedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpPatientTreatedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpPatientTreatedEnumeration None = new grpPatientTreatedEnumeration(-1);
				public static grpPatientTreatedEnumeration rdoNoTreatment = new grpPatientTreatedEnumeration(0);
				public static grpPatientTreatedEnumeration rdoYesTreated = new grpPatientTreatedEnumeration(1);
				private grpPatientTreatedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpPatientTreatedEnumeration)o).id;
				}
				private int id;
			}
		
			public static class grpDeferredRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper189 = new RuntimeAnchoring(designSize, runtimeSize, 428, 176, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper189.getX(), anchoringHelper189.getY(), anchoringHelper189.getWidth(), "No", startTabIndex.intValue() + 86);
					RuntimeAnchoring anchoringHelper190 = new RuntimeAnchoring(designSize, runtimeSize, 364, 176, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper190.getX(), anchoringHelper190.getY(), anchoringHelper190.getWidth(), "Yes", startTabIndex.intValue() + 85);
				}
				public void setText(grpDeferredEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpDeferredEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpDeferredEnumeration.None;
						case 0: return grpDeferredEnumeration.rdoNoDeferred;
						case 1: return grpDeferredEnumeration.rdoYesDeferred;
					}
					return null;
				}
				public void setValue(grpDeferredEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpDeferredEnumeration.None.id);
				}
				public boolean isEnabled(grpDeferredEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpDeferredEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpDeferredEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpDeferredEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpDeferredEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpDeferredEnumeration None = new grpDeferredEnumeration(-1);
				public static grpDeferredEnumeration rdoNoDeferred = new grpDeferredEnumeration(0);
				public static grpDeferredEnumeration rdoYesDeferred = new grpDeferredEnumeration(1);
				private grpDeferredEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpDeferredEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper191 = new RuntimeAnchoring(designSize, runtimeSize, 148, 240, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper191.getX()), new Integer(anchoringHelper191.getY()), new Integer(anchoringHelper191.getWidth()), new Integer(anchoringHelper191.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Was the Patient Treated?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper192 = new RuntimeAnchoring(designSize, runtimeSize, 148, 272, 154, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper192.getX()), new Integer(anchoringHelper192.getY()), new Integer(anchoringHelper192.getWidth()), new Integer(anchoringHelper192.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allocate Bed For Cleaning:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper193 = new RuntimeAnchoring(designSize, runtimeSize, 148, 330, 202, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(anchoringHelper193.getX()), new Integer(anchoringHelper193.getY()), new Integer(anchoringHelper193.getWidth()), new Integer(anchoringHelper193.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Re-opening  Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper194 = new RuntimeAnchoring(designSize, runtimeSize, 148, 298, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1188), new Integer(anchoringHelper194.getX()), new Integer(anchoringHelper194.getY()), new Integer(anchoringHelper194.getWidth()), new Integer(anchoringHelper194.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Closure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper195 = new RuntimeAnchoring(designSize, runtimeSize, 148, 210, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1189), new Integer(anchoringHelper195.getX()), new Integer(anchoringHelper195.getY()), new Integer(anchoringHelper195.getWidth()), new Integer(anchoringHelper195.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deferred Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper196 = new RuntimeAnchoring(designSize, runtimeSize, 148, 176, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1190), new Integer(anchoringHelper196.getX()), new Integer(anchoringHelper196.getY()), new Integer(anchoringHelper196.getWidth()), new Integer(anchoringHelper196.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Was Deferred?>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper197 = new RuntimeAnchoring(designSize, runtimeSize, 148, 114, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1191), new Integer(anchoringHelper197.getX()), new Integer(anchoringHelper197.getY()), new Integer(anchoringHelper197.getWidth()), new Integer(anchoringHelper197.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Death:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper198 = new RuntimeAnchoring(designSize, runtimeSize, 148, 146, 169, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1192), new Integer(anchoringHelper198.getX()), new Integer(anchoringHelper198.getY()), new Integer(anchoringHelper198.getWidth()), new Integer(anchoringHelper198.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Actual Discharge Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper199 = new RuntimeAnchoring(designSize, runtimeSize, 148, 82, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1193), new Integer(anchoringHelper199.getX()), new Integer(anchoringHelper199.getY()), new Integer(anchoringHelper199.getWidth()), new Integer(anchoringHelper199.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Destination:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper200 = new RuntimeAnchoring(designSize, runtimeSize, 148, 50, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1194), new Integer(anchoringHelper200.getX()), new Integer(anchoringHelper200.getY()), new Integer(anchoringHelper200.getWidth()), new Integer(anchoringHelper200.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Method of Discharge:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper201 = new RuntimeAnchoring(designSize, runtimeSize, 546, 106, 58, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1195), new Integer(anchoringHelper201.getX()), new Integer(anchoringHelper201.getY()), new Integer(anchoringHelper201.getWidth()), new Integer(anchoringHelper201.getHeight()), new Integer(startTabIndex.intValue() + 83), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mark as Deceased", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper202 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1196), new Integer(anchoringHelper202.getX()), new Integer(anchoringHelper202.getY()), new Integer(anchoringHelper202.getWidth()), new Integer(anchoringHelper202.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " VTE Risk Assessment", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper203 = new RuntimeAnchoring(designSize, runtimeSize, 676, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1197), new Integer(anchoringHelper203.getX()), new Integer(anchoringHelper203.getY()), new Integer(anchoringHelper203.getWidth()), new Integer(anchoringHelper203.getHeight()), new Integer(startTabIndex.intValue() + 91), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper204 = new RuntimeAnchoring(designSize, runtimeSize, 468, 238, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1198), new Integer(anchoringHelper204.getX()), new Integer(anchoringHelper204.getY()), new Integer(anchoringHelper204.getWidth()), new Integer(anchoringHelper204.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper205 = new RuntimeAnchoring(designSize, runtimeSize, 531, 112, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1199), new Integer(anchoringHelper205.getX()), new Integer(anchoringHelper205.getY()), new Integer(anchoringHelper205.getWidth()), new Integer(anchoringHelper205.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper206 = new RuntimeAnchoring(designSize, runtimeSize, 468, 174, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1200), new Integer(anchoringHelper206.getX()), new Integer(anchoringHelper206.getY()), new Integer(anchoringHelper206.getWidth()), new Integer(anchoringHelper206.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper207 = new RuntimeAnchoring(designSize, runtimeSize, 364, 112, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1201), new Integer(anchoringHelper207.getX()), new Integer(anchoringHelper207.getY()), new Integer(anchoringHelper207.getWidth()), new Integer(anchoringHelper207.getHeight()), new Integer(startTabIndex.intValue() + 81), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper208 = new RuntimeAnchoring(designSize, runtimeSize, 364, 328, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1202), new Integer(anchoringHelper208.getX()), new Integer(anchoringHelper208.getY()), new Integer(anchoringHelper208.getWidth()), new Integer(anchoringHelper208.getHeight()), new Integer(startTabIndex.intValue() + 90), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper209 = new RuntimeAnchoring(designSize, runtimeSize, 364, 144, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1203), new Integer(anchoringHelper209.getX()), new Integer(anchoringHelper209.getY()), new Integer(anchoringHelper209.getWidth()), new Integer(anchoringHelper209.getHeight()), new Integer(startTabIndex.intValue() + 84), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper210 = new RuntimeAnchoring(designSize, runtimeSize, 364, 296, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDischargeReasonForClosureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1204), new Integer(anchoringHelper210.getX()), new Integer(anchoringHelper210.getY()), new Integer(anchoringHelper210.getWidth()), new Integer(anchoringHelper210.getHeight()), new Integer(startTabIndex.intValue() + 89), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDischargeReasonForClosureTemp);
				cmbDischargeReasonForClosureComboBox cmbDischargeReasonForClosure = (cmbDischargeReasonForClosureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeReasonForClosureComboBox.class, m_cmbDischargeReasonForClosureTemp);
				super.addComboBox(cmbDischargeReasonForClosure);
				RuntimeAnchoring anchoringHelper211 = new RuntimeAnchoring(designSize, runtimeSize, 364, 208, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDeferredReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1205), new Integer(anchoringHelper211.getX()), new Integer(anchoringHelper211.getY()), new Integer(anchoringHelper211.getWidth()), new Integer(anchoringHelper211.getHeight()), new Integer(startTabIndex.intValue() + 87), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDeferredReasonTemp);
				cmbDeferredReasonComboBox cmbDeferredReason = (cmbDeferredReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDeferredReasonComboBox.class, m_cmbDeferredReasonTemp);
				super.addComboBox(cmbDeferredReason);
				RuntimeAnchoring anchoringHelper212 = new RuntimeAnchoring(designSize, runtimeSize, 364, 80, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDischargeDestinationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1206), new Integer(anchoringHelper212.getX()), new Integer(anchoringHelper212.getY()), new Integer(anchoringHelper212.getWidth()), new Integer(anchoringHelper212.getHeight()), new Integer(startTabIndex.intValue() + 80), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDischargeDestinationTemp);
				cmbDischargeDestinationComboBox cmbDischargeDestination = (cmbDischargeDestinationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeDestinationComboBox.class, m_cmbDischargeDestinationTemp);
				super.addComboBox(cmbDischargeDestination);
				RuntimeAnchoring anchoringHelper213 = new RuntimeAnchoring(designSize, runtimeSize, 364, 48, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbMethodDischargeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1207), new Integer(anchoringHelper213.getX()), new Integer(anchoringHelper213.getY()), new Integer(anchoringHelper213.getWidth()), new Integer(anchoringHelper213.getHeight()), new Integer(startTabIndex.intValue() + 79), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbMethodDischargeTemp);
				cmbMethodDischargeComboBox cmbMethodDischarge = (cmbMethodDischargeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodDischargeComboBox.class, m_cmbMethodDischargeTemp);
				super.addComboBox(cmbMethodDischarge);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper214 = new RuntimeAnchoring(designSize, runtimeSize, 364, 272, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1208), new Integer(anchoringHelper214.getX()), new Integer(anchoringHelper214.getY()), new Integer(anchoringHelper214.getWidth()), new Integer(anchoringHelper214.getHeight()), new Integer(startTabIndex.intValue() + 88), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper215 = new RuntimeAnchoring(designSize, runtimeSize, 495, 112, 36, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1209), new Integer(anchoringHelper215.getX()), new Integer(anchoringHelper215.getY()), new Integer(anchoringHelper215.getWidth()), new Integer(anchoringHelper215.getHeight()), new Integer(startTabIndex.intValue() + 82), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
		
				// RadioButton Controls
				RadioButton tmpgrpPatientTreated = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1210), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpgrpPatientTreated);
				grpPatientTreatedRadioButton grpPatientTreated = (grpPatientTreatedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpPatientTreatedRadioButton.class, tmpgrpPatientTreated);
				grpPatientTreated.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpPatientTreated);
				RadioButton tmpgrpDeferred = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1211), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpDeferred);
				grpDeferredRadioButton grpDeferred = (grpDeferredRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpDeferredRadioButton.class, tmpgrpDeferred);
				grpDeferred.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpDeferred);
			}

			public Label lblWasPatientTreated()
			{
				return (Label)super.getControl(0);
			}
			public Label lblAllocateForCleaning()
			{
				return (Label)super.getControl(1);
			}
			public Label lblEstimatedReopening()
			{
				return (Label)super.getControl(2);
			}
			public Label lblReasonForClosure()
			{
				return (Label)super.getControl(3);
			}
			public Label lblDeferredReason()
			{
				return (Label)super.getControl(4);
			}
			public Label lblDereferred()
			{
				return (Label)super.getControl(5);
			}
			public Label lblDischargeDod()
			{
				return (Label)super.getControl(6);
			}
			public Label lblDischargeDateTime()
			{
				return (Label)super.getControl(7);
			}
			public Button btnMarkAsDeceased()
			{
				return (Button)super.getControl(10);
			}
			public Button btnVTERiskAssesssment()
			{
				return (Button)super.getControl(11);
			}
			public Button btnDischarge()
			{
				return (Button)super.getControl(12);
			}
			public TextBox txtPatientTreated()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtDODMandatory()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtDeferred()
			{
				return (TextBox)super.getControl(15);
			}
			public DateControl dteDod()
			{
				return (DateControl)super.getControl(16);
			}
			public DateTimeControl dtimDischargeEstimatedReopening()
			{
				return (DateTimeControl)super.getControl(17);
			}
			public DateTimeControl dtimDischarge()
			{
				return (DateTimeControl)super.getControl(18);
			}
			public cmbDischargeReasonForClosureComboBox cmbDischargeReasonForClosure()
			{
				return (cmbDischargeReasonForClosureComboBox)super.getComboBox(0);
			}
			public cmbDeferredReasonComboBox cmbDeferredReason()
			{
				return (cmbDeferredReasonComboBox)super.getComboBox(1);
			}
			public cmbDischargeDestinationComboBox cmbDischargeDestination()
			{
				return (cmbDischargeDestinationComboBox)super.getComboBox(2);
			}
			public cmbMethodDischargeComboBox cmbMethodDischarge()
			{
				return (cmbMethodDischargeComboBox)super.getComboBox(3);
			}
			public CheckBox chkAllocateForCleaning()
			{
				return (CheckBox)super.getControl(23);
			}
			public TimeControl timTod()
			{
				return (TimeControl)super.getControl(24);
			}
			public grpPatientTreatedRadioButton grpPatientTreated()
			{
				return (grpPatientTreatedRadioButton)super.getRadioButton(0);
			}
			public grpDeferredRadioButton grpDeferred()
			{
				return (grpDeferredRadioButton)super.getRadioButton(1);
			}
		}
		public static class tabAdmissionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper216 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 818, 456, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccAdmitForm = loader.loadComponent(102291, appForm, startControlID * 10 + 4000, anchoringHelper216.getSize(), instance1, startTabIndex.intValue() + 92, skipContextValidation);
				//ims.framework.Control m_ccAdmitControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1212), new Integer(4), new Integer(8), new Integer(818), new Integer(456), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 92), m_ccAdmitForm, instance1 } );
				ims.framework.Control m_ccAdmitControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1213),  new Integer(anchoringHelper216.getX()), new Integer(anchoringHelper216.getY()), new Integer(anchoringHelper216.getWidth()), new Integer(anchoringHelper216.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 92), m_ccAdmitForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAdmitControl);
				Menu[] menus1 = m_ccAdmitForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper217 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1214), new Integer(anchoringHelper217.getX()), new Integer(anchoringHelper217.getY()), new Integer(anchoringHelper217.getWidth()), new Integer(anchoringHelper217.getHeight()), new Integer(startTabIndex.intValue() + 154), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel\nHome Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper218 = new RuntimeAnchoring(designSize, runtimeSize, 676, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1215), new Integer(anchoringHelper218.getX()), new Integer(anchoringHelper218.getY()), new Integer(anchoringHelper218.getWidth()), new Integer(anchoringHelper218.getHeight()), new Integer(startTabIndex.intValue() + 155), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Admit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.core.forms.bedadmissioncomponent.IComponent ccAdmit()
			{
				return (ims.core.forms.bedadmissioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAdmitValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAdmitVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAdmitVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAdmitEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAdmitEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnCancelHL()
			{
				return (Button)super.getControl(1);
			}
			public Button btnAdmit()
			{
				return (Button)super.getControl(2);
			}
		}
		public static class tabHomeLeaveContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper219 = new RuntimeAnchoring(designSize, runtimeSize, 260, 240, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1216), new Integer(anchoringHelper219.getX()), new Integer(anchoringHelper219.getY()), new Integer(anchoringHelper219.getWidth()), new Integer(anchoringHelper219.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Retain Patient's Bed:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper220 = new RuntimeAnchoring(designSize, runtimeSize, 260, 209, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1217), new Integer(anchoringHelper220.getX()), new Integer(anchoringHelper220.getY()), new Integer(anchoringHelper220.getWidth()), new Integer(anchoringHelper220.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Time of Return:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper221 = new RuntimeAnchoring(designSize, runtimeSize, 260, 178, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1218), new Integer(anchoringHelper221.getX()), new Integer(anchoringHelper221.getY()), new Integer(anchoringHelper221.getWidth()), new Integer(anchoringHelper221.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Date of Return:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper222 = new RuntimeAnchoring(designSize, runtimeSize, 260, 122, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1219), new Integer(anchoringHelper222.getX()), new Integer(anchoringHelper222.getY()), new Integer(anchoringHelper222.getWidth()), new Integer(anchoringHelper222.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time on Home Leave:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper223 = new RuntimeAnchoring(designSize, runtimeSize, 260, 90, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1220), new Integer(anchoringHelper223.getX()), new Integer(anchoringHelper223.getY()), new Integer(anchoringHelper223.getWidth()), new Integer(anchoringHelper223.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date on Home Leave:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper224 = new RuntimeAnchoring(designSize, runtimeSize, 680, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1221), new Integer(anchoringHelper224.getX()), new Integer(anchoringHelper224.getY()), new Integer(anchoringHelper224.getWidth()), new Integer(anchoringHelper224.getHeight()), new Integer(startTabIndex.intValue() + 163), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Home Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper225 = new RuntimeAnchoring(designSize, runtimeSize, 428, 176, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1222), new Integer(anchoringHelper225.getX()), new Integer(anchoringHelper225.getY()), new Integer(anchoringHelper225.getWidth()), new Integer(anchoringHelper225.getHeight()), new Integer(startTabIndex.intValue() + 160), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper226 = new RuntimeAnchoring(designSize, runtimeSize, 428, 88, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1223), new Integer(anchoringHelper226.getX()), new Integer(anchoringHelper226.getY()), new Integer(anchoringHelper226.getWidth()), new Integer(anchoringHelper226.getHeight()), new Integer(startTabIndex.intValue() + 156), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper227 = new RuntimeAnchoring(designSize, runtimeSize, 428, 240, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1224), new Integer(anchoringHelper227.getX()), new Integer(anchoringHelper227.getY()), new Integer(anchoringHelper227.getWidth()), new Integer(anchoringHelper227.getHeight()), new Integer(startTabIndex.intValue() + 162), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper228 = new RuntimeAnchoring(designSize, runtimeSize, 428, 207, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1225), new Integer(anchoringHelper228.getX()), new Integer(anchoringHelper228.getY()), new Integer(anchoringHelper228.getWidth()), new Integer(anchoringHelper228.getHeight()), new Integer(startTabIndex.intValue() + 161), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				RuntimeAnchoring anchoringHelper229 = new RuntimeAnchoring(designSize, runtimeSize, 428, 120, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1226), new Integer(anchoringHelper229.getX()), new Integer(anchoringHelper229.getY()), new Integer(anchoringHelper229.getWidth()), new Integer(anchoringHelper229.getHeight()), new Integer(startTabIndex.intValue() + 158), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
			}

			public Label lblRetainBedHL()
			{
				return (Label)super.getControl(0);
			}
			public Button btnHome()
			{
				return (Button)super.getControl(5);
			}
			public DateControl dteHLReturnDate()
			{
				return (DateControl)super.getControl(6);
			}
			public DateControl dteHLDate()
			{
				return (DateControl)super.getControl(7);
			}
			public CheckBox chkHLRetainBed()
			{
				return (CheckBox)super.getControl(8);
			}
			public TimeControl timHLReturnTime()
			{
				return (TimeControl)super.getControl(9);
			}
			public TimeControl timHLTime()
			{
				return (TimeControl)super.getControl(10);
			}
		}
		public static class tabHomeLeaveReturnContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper230 = new RuntimeAnchoring(designSize, runtimeSize, 516, 122, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1227), new Integer(anchoringHelper230.getX()), new Integer(anchoringHelper230.getY()), new Integer(anchoringHelper230.getWidth()), new Integer(anchoringHelper230.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<HL Time>>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper231 = new RuntimeAnchoring(designSize, runtimeSize, 442, 122, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1228), new Integer(anchoringHelper231.getX()), new Integer(anchoringHelper231.getY()), new Integer(anchoringHelper231.getWidth()), new Integer(anchoringHelper231.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<HL Return>>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper232 = new RuntimeAnchoring(designSize, runtimeSize, 227, 122, 189, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1229), new Integer(anchoringHelper232.getX()), new Integer(anchoringHelper232.getY()), new Integer(anchoringHelper232.getWidth()), new Integer(anchoringHelper232.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient is expected to return on:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper233 = new RuntimeAnchoring(designSize, runtimeSize, 516, 90, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1230), new Integer(anchoringHelper233.getX()), new Integer(anchoringHelper233.getY()), new Integer(anchoringHelper233.getWidth()), new Integer(anchoringHelper233.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<HL Time>>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper234 = new RuntimeAnchoring(designSize, runtimeSize, 442, 90, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1231), new Integer(anchoringHelper234.getX()), new Integer(anchoringHelper234.getY()), new Integer(anchoringHelper234.getWidth()), new Integer(anchoringHelper234.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<HL Date>>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper235 = new RuntimeAnchoring(designSize, runtimeSize, 227, 90, 185, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1232), new Integer(anchoringHelper235.getX()), new Integer(anchoringHelper235.getY()), new Integer(anchoringHelper235.getWidth()), new Integer(anchoringHelper235.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient is on Home Leave since:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper236 = new RuntimeAnchoring(designSize, runtimeSize, 227, 224, 197, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1233), new Integer(anchoringHelper236.getX()), new Integer(anchoringHelper236.getY()), new Integer(anchoringHelper236.getWidth()), new Integer(anchoringHelper236.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time of Return from Home Leave:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper237 = new RuntimeAnchoring(designSize, runtimeSize, 227, 192, 196, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1234), new Integer(anchoringHelper237.getX()), new Integer(anchoringHelper237.getY()), new Integer(anchoringHelper237.getWidth()), new Integer(anchoringHelper237.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Return from Home Leave:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper238 = new RuntimeAnchoring(designSize, runtimeSize, 400, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1235), new Integer(anchoringHelper238.getX()), new Integer(anchoringHelper238.getY()), new Integer(anchoringHelper238.getWidth()), new Integer(anchoringHelper238.getHeight()), new Integer(startTabIndex.intValue() + 165), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Vacate Bed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper239 = new RuntimeAnchoring(designSize, runtimeSize, 264, 149, 288, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1236), new Integer(anchoringHelper239.getX()), new Integer(anchoringHelper239.getY()), new Integer(anchoringHelper239.getWidth()), new Integer(anchoringHelper239.getHeight()), new Integer(startTabIndex.intValue() + 164), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit Home Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper240 = new RuntimeAnchoring(designSize, runtimeSize, 680, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1237), new Integer(anchoringHelper240.getX()), new Integer(anchoringHelper240.getY()), new Integer(anchoringHelper240.getWidth()), new Integer(anchoringHelper240.getHeight()), new Integer(startTabIndex.intValue() + 167), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel\nHome Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper241 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1238), new Integer(anchoringHelper241.getX()), new Integer(anchoringHelper241.getY()), new Integer(anchoringHelper241.getWidth()), new Integer(anchoringHelper241.getHeight()), new Integer(startTabIndex.intValue() + 166), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Return from Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper242 = new RuntimeAnchoring(designSize, runtimeSize, 442, 191, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1239), new Integer(anchoringHelper242.getX()), new Integer(anchoringHelper242.getY()), new Integer(anchoringHelper242.getWidth()), new Integer(anchoringHelper242.getHeight()), new Integer(startTabIndex.intValue() + 157), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper243 = new RuntimeAnchoring(designSize, runtimeSize, 442, 224, 36, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1240), new Integer(anchoringHelper243.getX()), new Integer(anchoringHelper243.getY()), new Integer(anchoringHelper243.getWidth()), new Integer(anchoringHelper243.getHeight()), new Integer(startTabIndex.intValue() + 159), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
			}

			public Label lblHlReturnTime()
			{
				return (Label)super.getControl(0);
			}
			public Label lblHLReturnDate()
			{
				return (Label)super.getControl(1);
			}
			public Label lblPatientHlReturnExp()
			{
				return (Label)super.getControl(2);
			}
			public Label lblHLTime()
			{
				return (Label)super.getControl(3);
			}
			public Label lblHLDate()
			{
				return (Label)super.getControl(4);
			}
			public Label lblPatientHlReturn()
			{
				return (Label)super.getControl(5);
			}
			public Label lblHLTimeReturn()
			{
				return (Label)super.getControl(6);
			}
			public Label lblHLDateReturn()
			{
				return (Label)super.getControl(7);
			}
			public Button btnUnretain()
			{
				return (Button)super.getControl(8);
			}
			public Button btnEditHomeLeave()
			{
				return (Button)super.getControl(9);
			}
			public Button btnCancelSendHL()
			{
				return (Button)super.getControl(10);
			}
			public Button btnReturnFromLeave()
			{
				return (Button)super.getControl(11);
			}
			public DateControl dteHLDateReturn()
			{
				return (DateControl)super.getControl(12);
			}
			public TimeControl timHLTimeOfReturn()
			{
				return (TimeControl)super.getControl(13);
			}
		}
		public static class tabHLeaveReturnCancelContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper244 = new RuntimeAnchoring(designSize, runtimeSize, 12, 8, 792, 304, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1241), new Integer(anchoringHelper244.getX()), new Integer(anchoringHelper244.getY()), new Integer(anchoringHelper244.getWidth()), new Integer(anchoringHelper244.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Last Home Leave Dispatch Details:", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper245 = new RuntimeAnchoring(designSize, runtimeSize, 246, 252, 196, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1242), new Integer(anchoringHelper245.getX()), new Integer(anchoringHelper245.getY()), new Integer(anchoringHelper245.getWidth()), new Integer(anchoringHelper245.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Returned from Home Leave:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper246 = new RuntimeAnchoring(designSize, runtimeSize, 246, 174, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1243), new Integer(anchoringHelper246.getX()), new Integer(anchoringHelper246.getY()), new Integer(anchoringHelper246.getWidth()), new Integer(anchoringHelper246.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Retained Patient's Bed:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper247 = new RuntimeAnchoring(designSize, runtimeSize, 246, 220, 195, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1244), new Integer(anchoringHelper247.getX()), new Integer(anchoringHelper247.getY()), new Integer(anchoringHelper247.getWidth()), new Integer(anchoringHelper247.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Returned from Home Leave:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper248 = new RuntimeAnchoring(designSize, runtimeSize, 246, 145, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1245), new Integer(anchoringHelper248.getX()), new Integer(anchoringHelper248.getY()), new Integer(anchoringHelper248.getWidth()), new Integer(anchoringHelper248.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Time of Return:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper249 = new RuntimeAnchoring(designSize, runtimeSize, 246, 114, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1246), new Integer(anchoringHelper249.getX()), new Integer(anchoringHelper249.getY()), new Integer(anchoringHelper249.getWidth()), new Integer(anchoringHelper249.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Date of Return:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper250 = new RuntimeAnchoring(designSize, runtimeSize, 246, 83, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1247), new Integer(anchoringHelper250.getX()), new Integer(anchoringHelper250.getY()), new Integer(anchoringHelper250.getWidth()), new Integer(anchoringHelper250.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time on Home Leave:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper251 = new RuntimeAnchoring(designSize, runtimeSize, 246, 52, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1248), new Integer(anchoringHelper251.getX()), new Integer(anchoringHelper251.getY()), new Integer(anchoringHelper251.getWidth()), new Integer(anchoringHelper251.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date on Home Leave:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper252 = new RuntimeAnchoring(designSize, runtimeSize, 680, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1249), new Integer(anchoringHelper252.getX()), new Integer(anchoringHelper252.getY()), new Integer(anchoringHelper252.getWidth()), new Integer(anchoringHelper252.getHeight()), new Integer(startTabIndex.intValue() + 168), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel       \nReturn from Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper253 = new RuntimeAnchoring(designSize, runtimeSize, 442, 218, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1250), new Integer(anchoringHelper253.getX()), new Integer(anchoringHelper253.getY()), new Integer(anchoringHelper253.getWidth()), new Integer(anchoringHelper253.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper254 = new RuntimeAnchoring(designSize, runtimeSize, 442, 112, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1251), new Integer(anchoringHelper254.getX()), new Integer(anchoringHelper254.getY()), new Integer(anchoringHelper254.getWidth()), new Integer(anchoringHelper254.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper255 = new RuntimeAnchoring(designSize, runtimeSize, 442, 50, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1252), new Integer(anchoringHelper255.getX()), new Integer(anchoringHelper255.getY()), new Integer(anchoringHelper255.getWidth()), new Integer(anchoringHelper255.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper256 = new RuntimeAnchoring(designSize, runtimeSize, 442, 176, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1253), new Integer(anchoringHelper256.getX()), new Integer(anchoringHelper256.getY()), new Integer(anchoringHelper256.getWidth()), new Integer(anchoringHelper256.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper257 = new RuntimeAnchoring(designSize, runtimeSize, 442, 250, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1254), new Integer(anchoringHelper257.getX()), new Integer(anchoringHelper257.getY()), new Integer(anchoringHelper257.getWidth()), new Integer(anchoringHelper257.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				RuntimeAnchoring anchoringHelper258 = new RuntimeAnchoring(designSize, runtimeSize, 442, 143, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1255), new Integer(anchoringHelper258.getX()), new Integer(anchoringHelper258.getY()), new Integer(anchoringHelper258.getWidth()), new Integer(anchoringHelper258.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				RuntimeAnchoring anchoringHelper259 = new RuntimeAnchoring(designSize, runtimeSize, 442, 81, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1256), new Integer(anchoringHelper259.getX()), new Integer(anchoringHelper259.getY()), new Integer(anchoringHelper259.getWidth()), new Integer(anchoringHelper259.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
			}

			public Label lblCancelHlRetainBed()
			{
				return (Label)super.getControl(2);
			}
			public Button btnCancelReturnHL()
			{
				return (Button)super.getControl(8);
			}
			public DateControl dteHLReturn()
			{
				return (DateControl)super.getControl(9);
			}
			public DateControl dteExpHLReturn()
			{
				return (DateControl)super.getControl(10);
			}
			public DateControl dteOnHomeLeave()
			{
				return (DateControl)super.getControl(11);
			}
			public CheckBox chkPatientBedRetained()
			{
				return (CheckBox)super.getControl(12);
			}
			public TimeControl timHLReturn()
			{
				return (TimeControl)super.getControl(13);
			}
			public TimeControl timExpHLReturn()
			{
				return (TimeControl)super.getControl(14);
			}
			public TimeControl timOnHomeLeave()
			{
				return (TimeControl)super.getControl(15);
			}
		}
		public static class tabCloseBedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbLastChangedUserComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCloseReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ReasonForBedClosure getValue()
				{
					return (ims.core.vo.lookups.ReasonForBedClosure)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbUserComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper260 = new RuntimeAnchoring(designSize, runtimeSize, 140, 106, 196, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1257), new Integer(anchoringHelper260.getX()), new Integer(anchoringHelper260.getY()), new Integer(anchoringHelper260.getWidth()), new Integer(anchoringHelper260.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed Status Last Changed by User:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper261 = new RuntimeAnchoring(designSize, runtimeSize, 140, 74, 215, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1258), new Integer(anchoringHelper261.getX()), new Integer(anchoringHelper261.getY()), new Integer(anchoringHelper261.getWidth()), new Integer(anchoringHelper261.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time Bed Status Last Changed:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper262 = new RuntimeAnchoring(designSize, runtimeSize, 140, 266, 199, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1259), new Integer(anchoringHelper262.getX()), new Integer(anchoringHelper262.getY()), new Integer(anchoringHelper262.getWidth()), new Integer(anchoringHelper262.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Re-opening Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper263 = new RuntimeAnchoring(designSize, runtimeSize, 140, 234, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1260), new Integer(anchoringHelper263.getX()), new Integer(anchoringHelper263.getY()), new Integer(anchoringHelper263.getWidth()), new Integer(anchoringHelper263.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Closure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper264 = new RuntimeAnchoring(designSize, runtimeSize, 140, 202, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1261), new Integer(anchoringHelper264.getX()), new Integer(anchoringHelper264.getY()), new Integer(anchoringHelper264.getWidth()), new Integer(anchoringHelper264.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Closure Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper265 = new RuntimeAnchoring(designSize, runtimeSize, 140, 170, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1262), new Integer(anchoringHelper265.getX()), new Integer(anchoringHelper265.getY()), new Integer(anchoringHelper265.getWidth()), new Integer(anchoringHelper265.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Closed By:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper266 = new RuntimeAnchoring(designSize, runtimeSize, 316, 416, 152, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1263), new Integer(anchoringHelper266.getX()), new Integer(anchoringHelper266.getY()), new Integer(anchoringHelper266.getWidth()), new Integer(anchoringHelper266.getHeight()), new Integer(startTabIndex.intValue() + 177), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Requires Cleaning", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper267 = new RuntimeAnchoring(designSize, runtimeSize, 16, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1264), new Integer(anchoringHelper267.getX()), new Integer(anchoringHelper267.getY()), new Integer(anchoringHelper267.getWidth()), new Integer(anchoringHelper267.getHeight()), new Integer(startTabIndex.intValue() + 176), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Re-Open", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper268 = new RuntimeAnchoring(designSize, runtimeSize, 676, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1265), new Integer(anchoringHelper268.getX()), new Integer(anchoringHelper268.getY()), new Integer(anchoringHelper268.getWidth()), new Integer(anchoringHelper268.getHeight()), new Integer(startTabIndex.intValue() + 178), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Close Bed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper269 = new RuntimeAnchoring(designSize, runtimeSize, 356, 72, 172, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1266), new Integer(anchoringHelper269.getX()), new Integer(anchoringHelper269.getY()), new Integer(anchoringHelper269.getWidth()), new Integer(anchoringHelper269.getHeight()), new Integer(startTabIndex.intValue() + 169), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper270 = new RuntimeAnchoring(designSize, runtimeSize, 356, 264, 172, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1267), new Integer(anchoringHelper270.getX()), new Integer(anchoringHelper270.getY()), new Integer(anchoringHelper270.getWidth()), new Integer(anchoringHelper270.getHeight()), new Integer(startTabIndex.intValue() + 175), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper271 = new RuntimeAnchoring(designSize, runtimeSize, 356, 200, 172, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1268), new Integer(anchoringHelper271.getX()), new Integer(anchoringHelper271.getY()), new Integer(anchoringHelper271.getWidth()), new Integer(anchoringHelper271.getHeight()), new Integer(startTabIndex.intValue() + 173), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper272 = new RuntimeAnchoring(designSize, runtimeSize, 356, 104, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbLastChangedUserTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1269), new Integer(anchoringHelper272.getX()), new Integer(anchoringHelper272.getY()), new Integer(anchoringHelper272.getWidth()), new Integer(anchoringHelper272.getHeight()), new Integer(startTabIndex.intValue() + 170), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLastChangedUserTemp);
				cmbLastChangedUserComboBox cmbLastChangedUser = (cmbLastChangedUserComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLastChangedUserComboBox.class, m_cmbLastChangedUserTemp);
				super.addComboBox(cmbLastChangedUser);
				RuntimeAnchoring anchoringHelper273 = new RuntimeAnchoring(designSize, runtimeSize, 356, 232, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbCloseReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1270), new Integer(anchoringHelper273.getX()), new Integer(anchoringHelper273.getY()), new Integer(anchoringHelper273.getWidth()), new Integer(anchoringHelper273.getHeight()), new Integer(startTabIndex.intValue() + 174), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCloseReasonTemp);
				cmbCloseReasonComboBox cmbCloseReason = (cmbCloseReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCloseReasonComboBox.class, m_cmbCloseReasonTemp);
				super.addComboBox(cmbCloseReason);
				RuntimeAnchoring anchoringHelper274 = new RuntimeAnchoring(designSize, runtimeSize, 356, 168, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbUserTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1271), new Integer(anchoringHelper274.getX()), new Integer(anchoringHelper274.getY()), new Integer(anchoringHelper274.getWidth()), new Integer(anchoringHelper274.getHeight()), new Integer(startTabIndex.intValue() + 172), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbUserTemp);
				cmbUserComboBox cmbUser = (cmbUserComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUserComboBox.class, m_cmbUserTemp);
				super.addComboBox(cmbUser);
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper275 = new RuntimeAnchoring(designSize, runtimeSize, 140, 144, 416, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1272), new Integer(anchoringHelper275.getX()), new Integer(anchoringHelper275.getY()), new Integer(anchoringHelper275.getWidth()), new Integer(anchoringHelper275.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			}

			public Label lblBedStatusChangeUser()
			{
				return (Label)super.getControl(0);
			}
			public Label lblBedStatusChangeDte()
			{
				return (Label)super.getControl(1);
			}
			public Label lblEstReOpenDT()
			{
				return (Label)super.getControl(2);
			}
			public Label lbReason()
			{
				return (Label)super.getControl(3);
			}
			public Label lblCloseDT()
			{
				return (Label)super.getControl(4);
			}
			public Label lblClosedBy()
			{
				return (Label)super.getControl(5);
			}
			public Button btnAssign()
			{
				return (Button)super.getControl(6);
			}
			public Button btnReOpen()
			{
				return (Button)super.getControl(7);
			}
			public Button btnClose()
			{
				return (Button)super.getControl(8);
			}
			public DateTimeControl dtimLastChanged()
			{
				return (DateTimeControl)super.getControl(9);
			}
			public DateTimeControl dtimEstReOpen()
			{
				return (DateTimeControl)super.getControl(10);
			}
			public DateTimeControl dtimClose()
			{
				return (DateTimeControl)super.getControl(11);
			}
			public cmbLastChangedUserComboBox cmbLastChangedUser()
			{
				return (cmbLastChangedUserComboBox)super.getComboBox(0);
			}
			public cmbCloseReasonComboBox cmbCloseReason()
			{
				return (cmbCloseReasonComboBox)super.getComboBox(1);
			}
			public cmbUserComboBox cmbUser()
			{
				return (cmbUserComboBox)super.getComboBox(2);
			}
		}
		public static class tabBedMoveContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdPatientsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColBedNumberReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColBedNumberReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColBedNumberOpened()
				{
					super.row.showOpened(0);
				}
				public String getColBedNumber()
				{
					return (String)super.row.get(0);
				}
				public void setColBedNumber(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColBedNumberTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColBayReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColBayReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColBayOpened()
				{
					super.row.showOpened(1);
				}
				public String getColBay()
				{
					return (String)super.row.get(1);
				}
				public void setColBay(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColBayTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(2);
				}
				public String getColSurname()
				{
					return (String)super.row.get(2);
				}
				public void setColSurname(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(3);
				}
				public String getColForename()
				{
					return (String)super.row.get(3);
				}
				public void setColForename(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(4);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(4);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(5);
				}
				public String getColSex()
				{
					return (String)super.row.get(5);
				}
				public void setColSex(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(6);
				}
				public String getColAge()
				{
					return (String)super.row.get(6);
				}
				public void setColAge(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(7);
				}
				public String getColDOB()
				{
					return (String)super.row.get(7);
				}
				public void setColDOB(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientsRow get(int index)
				{
					return new grdPatientsRow(super.collection.get(index));
				}
				public grdPatientsRow newRow()
				{
					return new grdPatientsRow(super.collection.newRow());
				}
				public grdPatientsRow newRow(boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRow(autoSelect));
				}
				public grdPatientsRow newRowAt(int index)
				{
					return new grdPatientsRow(super.collection.newRowAt(index));
				}
				public grdPatientsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(4, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdPatientsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientsRowCollection getRows()
				{
					return new grdPatientsRowCollection(super.grid.getRows());
				}
				public grdPatientsRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientsRow(row);
				}
				public void setColBedNumberHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColBedNumberHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColBayHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColBayHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper276 = new RuntimeAnchoring(designSize, runtimeSize, 675, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1273), new Integer(anchoringHelper276.getX()), new Integer(anchoringHelper276.getY()), new Integer(anchoringHelper276.getWidth()), new Integer(anchoringHelper276.getHeight()), new Integer(startTabIndex.intValue() + 180), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Swap Beds", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper277 = new RuntimeAnchoring(designSize, runtimeSize, 675, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1274), new Integer(anchoringHelper277.getX()), new Integer(anchoringHelper277.getY()), new Integer(anchoringHelper277.getWidth()), new Integer(anchoringHelper277.getHeight()), new Integer(startTabIndex.intValue() + 179), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Transfer to Bed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper278 = new RuntimeAnchoring(designSize, runtimeSize, 13, 11, 790, 390, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPatientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1275), new Integer(anchoringHelper278.getX()), new Integer(anchoringHelper278.getY()), new Integer(anchoringHelper278.getWidth()), new Integer(anchoringHelper278.getHeight()), new Integer(startTabIndex.intValue() + 72), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientsTemp);
				grdPatientsGrid grdPatients = (grdPatientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsGrid.class, m_grdPatientsTemp);
				grdPatients.addStringColumn("Bed/Chair Number", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Bay", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Surname", 0, 0, 115, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Forename", 0, 0, 110, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("NHS No.", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Sex", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Age", 0, 0, 60, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPatients);
			}

			public Button btnSwitchBeds()
			{
				return (Button)super.getControl(0);
			}
			public Button btnInternalTransfer()
			{
				return (Button)super.getControl(1);
			}
			public grdPatientsGrid grdPatients()
			{
				return (grdPatientsGrid)super.getGrid(0);
			}
		}
		public static class tabInfantsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrInfantsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabInfantTransferContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbInfantTransferReasonComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.TransferReason value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.TransferReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.TransferReason value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.TransferReason getValue()
						{
							return (ims.core.vo.lookups.TransferReason)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.TransferReason value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantWardComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantWardTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.WardType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.WardType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.WardType getValue()
						{
							return (ims.core.vo.lookups.WardType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.WardType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantHospitalComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper279 = new RuntimeAnchoring(designSize, runtimeSize, 451, 92, 345, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ims.framework.FormUiLogic m_ccInfantConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper279.getSize(), instance1, startTabIndex.intValue() + 186, skipContextValidation);
						//ims.framework.Control m_ccInfantConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1276), new Integer(451), new Integer(92), new Integer(345), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 186), m_ccInfantConsultantForm, instance1 } );
						ims.framework.Control m_ccInfantConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1277),  new Integer(anchoringHelper279.getX()), new Integer(anchoringHelper279.getY()), new Integer(anchoringHelper279.getWidth()), new Integer(anchoringHelper279.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 186), m_ccInfantConsultantForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccInfantConsultantControl);
						Menu[] menus1 = m_ccInfantConsultantForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper280 = new RuntimeAnchoring(designSize, runtimeSize, 332, 178, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1278), new Integer(anchoringHelper280.getX()), new Integer(anchoringHelper280.getY()), new Integer(anchoringHelper280.getWidth()), new Integer(anchoringHelper280.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper281 = new RuntimeAnchoring(designSize, runtimeSize, 332, 151, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1279), new Integer(anchoringHelper281.getX()), new Integer(anchoringHelper281.getY()), new Integer(anchoringHelper281.getWidth()), new Integer(anchoringHelper281.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer Reason:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper282 = new RuntimeAnchoring(designSize, runtimeSize, 189, 178, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1280), new Integer(anchoringHelper282.getX()), new Integer(anchoringHelper282.getY()), new Integer(anchoringHelper282.getWidth()), new Integer(anchoringHelper282.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Logged In MOS>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper283 = new RuntimeAnchoring(designSize, runtimeSize, 3, 178, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1281), new Integer(anchoringHelper283.getX()), new Integer(anchoringHelper283.getY()), new Integer(anchoringHelper283.getWidth()), new Integer(anchoringHelper283.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer By:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper284 = new RuntimeAnchoring(designSize, runtimeSize, 110, 8, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1282), new Integer(anchoringHelper284.getX()), new Integer(anchoringHelper284.getY()), new Integer(anchoringHelper284.getWidth()), new Integer(anchoringHelper284.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Hospital>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper285 = new RuntimeAnchoring(designSize, runtimeSize, 3, 8, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1283), new Integer(anchoringHelper285.getX()), new Integer(anchoringHelper285.getY()), new Integer(anchoringHelper285.getWidth()), new Integer(anchoringHelper285.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Hospital:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper286 = new RuntimeAnchoring(designSize, runtimeSize, 332, 94, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1284), new Integer(anchoringHelper286.getX()), new Integer(anchoringHelper286.getY()), new Integer(anchoringHelper286.getWidth()), new Integer(anchoringHelper286.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper287 = new RuntimeAnchoring(designSize, runtimeSize, 332, 122, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1285), new Integer(anchoringHelper287.getX()), new Integer(anchoringHelper287.getY()), new Integer(anchoringHelper287.getWidth()), new Integer(anchoringHelper287.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper288 = new RuntimeAnchoring(designSize, runtimeSize, 3, 151, 184, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1286), new Integer(anchoringHelper288.getX()), new Integer(anchoringHelper288.getY()), new Integer(anchoringHelper288.getWidth()), new Integer(anchoringHelper288.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer Requested Date/Time:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper289 = new RuntimeAnchoring(designSize, runtimeSize, 332, 8, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1287), new Integer(anchoringHelper289.getX()), new Integer(anchoringHelper289.getY()), new Integer(anchoringHelper289.getWidth()), new Integer(anchoringHelper289.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital: ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper290 = new RuntimeAnchoring(designSize, runtimeSize, 332, 36, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1288), new Integer(anchoringHelper290.getX()), new Integer(anchoringHelper290.getY()), new Integer(anchoringHelper290.getWidth()), new Integer(anchoringHelper290.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Destination Ward: ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper291 = new RuntimeAnchoring(designSize, runtimeSize, 110, 36, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1289), new Integer(anchoringHelper291.getX()), new Integer(anchoringHelper291.getY()), new Integer(anchoringHelper291.getWidth()), new Integer(anchoringHelper291.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Ward>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper292 = new RuntimeAnchoring(designSize, runtimeSize, 3, 36, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1290), new Integer(anchoringHelper292.getX()), new Integer(anchoringHelper292.getY()), new Integer(anchoringHelper292.getWidth()), new Integer(anchoringHelper292.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Ward:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper293 = new RuntimeAnchoring(designSize, runtimeSize, 332, 65, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1291), new Integer(anchoringHelper293.getX()), new Integer(anchoringHelper293.getY()), new Integer(anchoringHelper293.getWidth()), new Integer(anchoringHelper293.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Type:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper294 = new RuntimeAnchoring(designSize, runtimeSize, 654, 218, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1292), new Integer(anchoringHelper294.getX()), new Integer(anchoringHelper294.getY()), new Integer(anchoringHelper294.getWidth()), new Integer(anchoringHelper294.getHeight()), new Integer(startTabIndex.intValue() + 193), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper295 = new RuntimeAnchoring(designSize, runtimeSize, 451, 178, 329, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1293), new Integer(anchoringHelper295.getX()), new Integer(anchoringHelper295.getY()), new Integer(anchoringHelper295.getWidth()), new Integer(anchoringHelper295.getHeight()), new Integer(startTabIndex.intValue() + 192), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.GET, "", ""}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper296 = new RuntimeAnchoring(designSize, runtimeSize, 191, 149, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1294), new Integer(anchoringHelper296.getX()), new Integer(anchoringHelper296.getY()), new Integer(anchoringHelper296.getWidth()), new Integer(anchoringHelper296.getHeight()), new Integer(startTabIndex.intValue() + 190), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper297 = new RuntimeAnchoring(designSize, runtimeSize, 451, 149, 329, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbInfantTransferReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1295), new Integer(anchoringHelper297.getX()), new Integer(anchoringHelper297.getY()), new Integer(anchoringHelper297.getWidth()), new Integer(anchoringHelper297.getHeight()), new Integer(startTabIndex.intValue() + 191), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbInfantTransferReasonTemp);
						cmbInfantTransferReasonComboBox cmbInfantTransferReason = (cmbInfantTransferReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantTransferReasonComboBox.class, m_cmbInfantTransferReasonTemp);
						super.addComboBox(cmbInfantTransferReason);
						RuntimeAnchoring anchoringHelper298 = new RuntimeAnchoring(designSize, runtimeSize, 451, 120, 329, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbInfantSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1296), new Integer(anchoringHelper298.getX()), new Integer(anchoringHelper298.getY()), new Integer(anchoringHelper298.getWidth()), new Integer(anchoringHelper298.getHeight()), new Integer(startTabIndex.intValue() + 188), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbInfantSpecialtyTemp);
						cmbInfantSpecialtyComboBox cmbInfantSpecialty = (cmbInfantSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantSpecialtyComboBox.class, m_cmbInfantSpecialtyTemp);
						super.addComboBox(cmbInfantSpecialty);
						RuntimeAnchoring anchoringHelper299 = new RuntimeAnchoring(designSize, runtimeSize, 451, 34, 329, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbInfantWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1297), new Integer(anchoringHelper299.getX()), new Integer(anchoringHelper299.getY()), new Integer(anchoringHelper299.getWidth()), new Integer(anchoringHelper299.getHeight()), new Integer(startTabIndex.intValue() + 183), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantWardTemp);
						cmbInfantWardComboBox cmbInfantWard = (cmbInfantWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantWardComboBox.class, m_cmbInfantWardTemp);
						super.addComboBox(cmbInfantWard);
						RuntimeAnchoring anchoringHelper300 = new RuntimeAnchoring(designSize, runtimeSize, 451, 63, 329, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbInfantWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1298), new Integer(anchoringHelper300.getX()), new Integer(anchoringHelper300.getY()), new Integer(anchoringHelper300.getWidth()), new Integer(anchoringHelper300.getHeight()), new Integer(startTabIndex.intValue() + 184), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantWardTypeTemp);
						cmbInfantWardTypeComboBox cmbInfantWardType = (cmbInfantWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantWardTypeComboBox.class, m_cmbInfantWardTypeTemp);
						super.addComboBox(cmbInfantWardType);
						RuntimeAnchoring anchoringHelper301 = new RuntimeAnchoring(designSize, runtimeSize, 451, 8, 329, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbInfantHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1299), new Integer(anchoringHelper301.getX()), new Integer(anchoringHelper301.getY()), new Integer(anchoringHelper301.getWidth()), new Integer(anchoringHelper301.getHeight()), new Integer(startTabIndex.intValue() + 182), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantHospitalTemp);
						cmbInfantHospitalComboBox cmbInfantHospital = (cmbInfantHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantHospitalComboBox.class, m_cmbInfantHospitalTemp);
						super.addComboBox(cmbInfantHospital);
					}
		
					public ims.core.forms.mosquery.IComponent ccInfantConsultant()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccInfantConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccInfantConsultantVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccInfantConsultantVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccInfantConsultantEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccInfantConsultantEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblInfantMos()
					{
						return (Label)super.getControl(3);
					}
					public Label lblInfantCurrentHosp()
					{
						return (Label)super.getControl(5);
					}
					public Label lbl39()
					{
						return (Label)super.getControl(8);
					}
					public Label lblInfantCurrentWard()
					{
						return (Label)super.getControl(12);
					}
					public Button btnInfantTransfer()
					{
						return (Button)super.getControl(15);
					}
					public TextBox txtInfantTransfComment()
					{
						return (TextBox)super.getControl(16);
					}
					public DateTimeControl dtimInfantTransferRequest()
					{
						return (DateTimeControl)super.getControl(17);
					}
					public cmbInfantTransferReasonComboBox cmbInfantTransferReason()
					{
						return (cmbInfantTransferReasonComboBox)super.getComboBox(0);
					}
					public cmbInfantSpecialtyComboBox cmbInfantSpecialty()
					{
						return (cmbInfantSpecialtyComboBox)super.getComboBox(1);
					}
					public cmbInfantWardComboBox cmbInfantWard()
					{
						return (cmbInfantWardComboBox)super.getComboBox(2);
					}
					public cmbInfantWardTypeComboBox cmbInfantWardType()
					{
						return (cmbInfantWardTypeComboBox)super.getComboBox(3);
					}
					public cmbInfantHospitalComboBox cmbInfantHospital()
					{
						return (cmbInfantHospitalComboBox)super.getComboBox(4);
					}
				}
				public static class tabInfantDischargeContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbInfantDischargeDestComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.coe.vo.lookups.DischargeDestination value)
						{
							return super.control.removeRow(value);
						}
						public ims.coe.vo.lookups.DischargeDestination getValue()
						{
							return (ims.coe.vo.lookups.DischargeDestination)super.control.getValue();
						}
						public void setValue(ims.coe.vo.lookups.DischargeDestination value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantMethodDischargeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.MethodOfDischarge value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.MethodOfDischarge getValue()
						{
							return (ims.core.vo.lookups.MethodOfDischarge)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.MethodOfDischarge value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper302 = new RuntimeAnchoring(designSize, runtimeSize, 89, 98, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1300), new Integer(anchoringHelper302.getX()), new Integer(anchoringHelper302.getY()), new Integer(anchoringHelper302.getWidth()), new Integer(anchoringHelper302.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Death:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper303 = new RuntimeAnchoring(designSize, runtimeSize, 89, 130, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1301), new Integer(anchoringHelper303.getX()), new Integer(anchoringHelper303.getY()), new Integer(anchoringHelper303.getWidth()), new Integer(anchoringHelper303.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date/Time:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper304 = new RuntimeAnchoring(designSize, runtimeSize, 89, 66, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1302), new Integer(anchoringHelper304.getX()), new Integer(anchoringHelper304.getY()), new Integer(anchoringHelper304.getWidth()), new Integer(anchoringHelper304.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Destination:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper305 = new RuntimeAnchoring(designSize, runtimeSize, 89, 34, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1303), new Integer(anchoringHelper305.getX()), new Integer(anchoringHelper305.getY()), new Integer(anchoringHelper305.getWidth()), new Integer(anchoringHelper305.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Method of Discharge:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper306 = new RuntimeAnchoring(designSize, runtimeSize, 529, 90, 58, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1304), new Integer(anchoringHelper306.getX()), new Integer(anchoringHelper306.getY()), new Integer(anchoringHelper306.getWidth()), new Integer(anchoringHelper306.getHeight()), new Integer(startTabIndex.intValue() + 198), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mark as Deceased", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
						RuntimeAnchoring anchoringHelper307 = new RuntimeAnchoring(designSize, runtimeSize, 654, 218, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1305), new Integer(anchoringHelper307.getX()), new Integer(anchoringHelper307.getY()), new Integer(anchoringHelper307.getWidth()), new Integer(anchoringHelper307.getHeight()), new Integer(startTabIndex.intValue() + 200), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper308 = new RuntimeAnchoring(designSize, runtimeSize, 508, 96, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1306), new Integer(anchoringHelper308.getX()), new Integer(anchoringHelper308.getY()), new Integer(anchoringHelper308.getWidth()), new Integer(anchoringHelper308.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper309 = new RuntimeAnchoring(designSize, runtimeSize, 305, 96, 165, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1307), new Integer(anchoringHelper309.getX()), new Integer(anchoringHelper309.getY()), new Integer(anchoringHelper309.getWidth()), new Integer(anchoringHelper309.getHeight()), new Integer(startTabIndex.intValue() + 196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper310 = new RuntimeAnchoring(designSize, runtimeSize, 305, 128, 165, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1308), new Integer(anchoringHelper310.getX()), new Integer(anchoringHelper310.getY()), new Integer(anchoringHelper310.getWidth()), new Integer(anchoringHelper310.getHeight()), new Integer(startTabIndex.intValue() + 199), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper311 = new RuntimeAnchoring(designSize, runtimeSize, 305, 64, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInfantDischargeDestTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1309), new Integer(anchoringHelper311.getX()), new Integer(anchoringHelper311.getY()), new Integer(anchoringHelper311.getWidth()), new Integer(anchoringHelper311.getHeight()), new Integer(startTabIndex.intValue() + 195), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantDischargeDestTemp);
						cmbInfantDischargeDestComboBox cmbInfantDischargeDest = (cmbInfantDischargeDestComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantDischargeDestComboBox.class, m_cmbInfantDischargeDestTemp);
						super.addComboBox(cmbInfantDischargeDest);
						RuntimeAnchoring anchoringHelper312 = new RuntimeAnchoring(designSize, runtimeSize, 305, 32, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInfantMethodDischargeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1310), new Integer(anchoringHelper312.getX()), new Integer(anchoringHelper312.getY()), new Integer(anchoringHelper312.getWidth()), new Integer(anchoringHelper312.getHeight()), new Integer(startTabIndex.intValue() + 194), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantMethodDischargeTemp);
						cmbInfantMethodDischargeComboBox cmbInfantMethodDischarge = (cmbInfantMethodDischargeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantMethodDischargeComboBox.class, m_cmbInfantMethodDischargeTemp);
						super.addComboBox(cmbInfantMethodDischarge);
				
						// Time Controls
						RuntimeAnchoring anchoringHelper313 = new RuntimeAnchoring(designSize, runtimeSize, 473, 96, 36, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1311), new Integer(anchoringHelper313.getX()), new Integer(anchoringHelper313.getY()), new Integer(anchoringHelper313.getWidth()), new Integer(anchoringHelper313.getHeight()), new Integer(startTabIndex.intValue() + 197), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
					}
		
					public Label lblInfantDod()
					{
						return (Label)super.getControl(0);
					}
					public Label lblInfantDischargeDateTime()
					{
						return (Label)super.getControl(1);
					}
					public Button btnMarkInfantDeceased()
					{
						return (Button)super.getControl(4);
					}
					public Button btnInfantDischarge()
					{
						return (Button)super.getControl(5);
					}
					public TextBox txtInfantDODMandatory()
					{
						return (TextBox)super.getControl(6);
					}
					public DateControl dteInfantDod()
					{
						return (DateControl)super.getControl(7);
					}
					public DateTimeControl dtimInfantDischarge()
					{
						return (DateTimeControl)super.getControl(8);
					}
					public cmbInfantDischargeDestComboBox cmbInfantDischargeDest()
					{
						return (cmbInfantDischargeDestComboBox)super.getComboBox(0);
					}
					public cmbInfantMethodDischargeComboBox cmbInfantMethodDischarge()
					{
						return (cmbInfantMethodDischargeComboBox)super.getComboBox(1);
					}
					public TimeControl timInfantTod()
					{
						return (TimeControl)super.getControl(11);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper314 = new RuntimeAnchoring(designSize, runtimeSize, 6, 168, 804, 296, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabInfantTransfer = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1312), new Integer(anchoringHelper314.getX()), new Integer(anchoringHelper314.getY()), new Integer(anchoringHelper314.getWidth()), new Integer(anchoringHelper314.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Transfer", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabInfantTransferContainer m_tabInfantTransferContainer = (tabInfantTransferContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInfantTransferContainer.class, m_tabInfantTransfer, factory);
					super.addContainer(m_tabInfantTransfer, m_tabInfantTransferContainer);
					ims.framework.utils.SizeInfo m_tabInfantTransferDesignSize = new ims.framework.utils.SizeInfo(804, 296);
					ims.framework.utils.SizeInfo m_tabInfantTransferRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper314.getWidth(), anchoringHelper314.getHeight());
					m_tabInfantTransferContainer.setContext(form, appForm, m_tabInfantTransfer, loader, form_images_local, startControlID, m_tabInfantTransferDesignSize, m_tabInfantTransferRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper315 = new RuntimeAnchoring(designSize, runtimeSize, 6, 168, 804, 296, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabInfantDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1313), new Integer(anchoringHelper315.getX()), new Integer(anchoringHelper315.getY()), new Integer(anchoringHelper315.getWidth()), new Integer(anchoringHelper315.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Discharge", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabInfantDischargeContainer m_tabInfantDischargeContainer = (tabInfantDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInfantDischargeContainer.class, m_tabInfantDischarge, factory);
					super.addContainer(m_tabInfantDischarge, m_tabInfantDischargeContainer);
					ims.framework.utils.SizeInfo m_tabInfantDischargeDesignSize = new ims.framework.utils.SizeInfo(804, 296);
					ims.framework.utils.SizeInfo m_tabInfantDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper315.getWidth(), anchoringHelper315.getHeight());
					m_tabInfantDischargeContainer.setContext(form, appForm, m_tabInfantDischarge, loader, form_images_local, startControlID, m_tabInfantDischargeDesignSize, m_tabInfantDischargeRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabInfantTransfer().setVisible(false);
					tabInfantDischarge().setVisible(false);
				}
				public void settabInfantTransferEnabled(boolean value)
				{
					tabInfantTransfer().setEnabled(value);
				}
				public void settabInfantDischargeEnabled(boolean value)
				{
					tabInfantDischarge().setEnabled(value);
				}
				public void showtabInfantTransfer()
				{
					tabInfantDischarge().setVisible(false);
					tabInfantTransfer().setVisible(true);
				}
				public void showtabInfantDischarge()
				{
					tabInfantTransfer().setVisible(false);
					tabInfantDischarge().setVisible(true);
				}
		
				public tabInfantTransferContainer tabInfantTransfer()
				{
					return (tabInfantTransferContainer)super.layers.get(0);
				}
				public tabInfantDischargeContainer tabInfantDischarge()
				{
					return (tabInfantDischargeContainer)super.layers.get(1);
				}
			}
			public static class grdInfantsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInfantsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColLocationReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColLocationOpened()
				{
					super.row.showOpened(4);
				}
				public String getColLocation()
				{
					return (String)super.row.get(4);
				}
				public void setColLocation(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColLocationTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInfantsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInfantsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInfantsRow get(int index)
				{
					return new grdInfantsRow(super.collection.get(index));
				}
				public grdInfantsRow newRow()
				{
					return new grdInfantsRow(super.collection.newRow());
				}
				public grdInfantsRow newRow(boolean autoSelect)
				{
					return new grdInfantsRow(super.collection.newRow(autoSelect));
				}
				public grdInfantsRow newRowAt(int index)
				{
					return new grdInfantsRow(super.collection.newRowAt(index));
				}
				public grdInfantsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInfantsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInfantsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdInfantsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInfantsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInfantsRowCollection getRows()
				{
					return new grdInfantsRowCollection(super.grid.getRows());
				}
				public grdInfantsRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInfantsRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrInfantsLayer m_lyrInfantsLayer = (lyrInfantsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrInfantsLayer.class, this, factory);
				super.addLayer(m_lyrInfantsLayer);
				m_lyrInfantsLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper316 = new RuntimeAnchoring(designSize, runtimeSize, 16, 11, 784, 152, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdInfantsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1314), new Integer(anchoringHelper316.getX()), new Integer(anchoringHelper316.getY()), new Integer(anchoringHelper316.getWidth()), new Integer(anchoringHelper316.getHeight()), new Integer(startTabIndex.intValue() + 181), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInfantsTemp);
				grdInfantsGrid grdInfants = (grdInfantsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInfantsGrid.class, m_grdInfantsTemp);
				grdInfants.addStringColumn("Surname", 0, 0, 145, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("Forename", 0, 0, 125, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("NHS No.", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("Sex", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("Location", 0, 0, 125, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("DOB", 0, 0, -1, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInfants);
			}

			public lyrInfantsLayer lyrInfants()
			{
				return (lyrInfantsLayer)super.getLayer(0);
			}
			public grdInfantsGrid grdInfants()
			{
				return (grdInfantsGrid)super.getGrid(0);
			}
		}
		public static class tabAdmissionDetailContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAdmWardComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSourceOfEmergencyReferralComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SourceOfEmergencyReferral value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SourceOfEmergencyReferral getValue()
				{
					return (ims.core.vo.lookups.SourceOfEmergencyReferral)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SourceOfEmergencyReferral value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPatientCategComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatientStatus getValue()
				{
					return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSourceOfReferralComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SourceOfReferral value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SourceOfReferral getValue()
				{
					return (ims.core.vo.lookups.SourceOfReferral)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SourceOfReferral value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbWardComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAdmWardTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.WardType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.WardType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.WardType getValue()
				{
					return (ims.core.vo.lookups.WardType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.WardType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMethodOfAdmissionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MethodOfAdmission value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MethodOfAdmission getValue()
				{
					return (ims.core.vo.lookups.MethodOfAdmission)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MethodOfAdmission value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSourceOfAdmissionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SourceOfAdmission value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SourceOfAdmission getValue()
				{
					return (ims.core.vo.lookups.SourceOfAdmission)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SourceOfAdmission value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAdmSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class CaseFolderYesNoRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper317 = new RuntimeAnchoring(designSize, runtimeSize, 222, 310, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper317.getX(), anchoringHelper317.getY(), anchoringHelper317.getWidth(), "No", -1);
					RuntimeAnchoring anchoringHelper318 = new RuntimeAnchoring(designSize, runtimeSize, 174, 310, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper318.getX(), anchoringHelper318.getY(), anchoringHelper318.getWidth(), "Yes", -1);
				}
				public void setText(CaseFolderYesNoEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public CaseFolderYesNoEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return CaseFolderYesNoEnumeration.None;
						case 0: return CaseFolderYesNoEnumeration.rdoNo;
						case 1: return CaseFolderYesNoEnumeration.rdoYes;
					}
					return null;
				}
				public void setValue(CaseFolderYesNoEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(CaseFolderYesNoEnumeration.None.id);
				}
				public boolean isEnabled(CaseFolderYesNoEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(CaseFolderYesNoEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(CaseFolderYesNoEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(CaseFolderYesNoEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class CaseFolderYesNoEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static CaseFolderYesNoEnumeration None = new CaseFolderYesNoEnumeration(-1);
				public static CaseFolderYesNoEnumeration rdoNo = new CaseFolderYesNoEnumeration(0);
				public static CaseFolderYesNoEnumeration rdoYes = new CaseFolderYesNoEnumeration(1);
				private CaseFolderYesNoEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((CaseFolderYesNoEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper319 = new RuntimeAnchoring(designSize, runtimeSize, 602, 225, 222, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccReferringConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 6000, anchoringHelper319.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1315), new Integer(602), new Integer(225), new Integer(222), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(-1), m_ccReferringConsultantForm, instance1 } );
				ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1316),  new Integer(anchoringHelper319.getX()), new Integer(anchoringHelper319.getY()), new Integer(anchoringHelper319.getWidth()), new Integer(anchoringHelper319.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(-1), m_ccReferringConsultantForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReferringConsultantControl);
				Menu[] menus1 = m_ccReferringConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper320 = new RuntimeAnchoring(designSize, runtimeSize, 174, 136, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 7000, anchoringHelper320.getSize(), instance2, -1, skipContextValidation);
				//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1317), new Integer(174), new Integer(136), new Integer(312), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(-1), m_ccConsultantForm, instance2 } );
				ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1318),  new Integer(anchoringHelper320.getX()), new Integer(anchoringHelper320.getY()), new Integer(anchoringHelper320.getWidth()), new Integer(anchoringHelper320.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(-1), m_ccConsultantForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccConsultantControl);
				Menu[] menus2 = m_ccConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper321 = new RuntimeAnchoring(designSize, runtimeSize, 5, 18, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1319), new Integer(anchoringHelper321.getX()), new Integer(anchoringHelper321.getY()), new Integer(anchoringHelper321.getWidth()), new Integer(anchoringHelper321.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admitting Ward:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper322 = new RuntimeAnchoring(designSize, runtimeSize, 489, 197, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1320), new Integer(anchoringHelper322.getX()), new Integer(anchoringHelper322.getY()), new Integer(anchoringHelper322.getWidth()), new Integer(anchoringHelper322.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Healthy Lodger:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper323 = new RuntimeAnchoring(designSize, runtimeSize, 5, 197, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1321), new Integer(anchoringHelper323.getX()), new Integer(anchoringHelper323.getY()), new Integer(anchoringHelper323.getWidth()), new Integer(anchoringHelper323.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Emergency Referral:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper324 = new RuntimeAnchoring(designSize, runtimeSize, 5, 78, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1322), new Integer(anchoringHelper324.getX()), new Integer(anchoringHelper324.getY()), new Integer(anchoringHelper324.getWidth()), new Integer(anchoringHelper324.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper325 = new RuntimeAnchoring(designSize, runtimeSize, 5, 285, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1323), new Integer(anchoringHelper325.getX()), new Integer(anchoringHelper325.getY()), new Integer(anchoringHelper325.getWidth()), new Integer(anchoringHelper325.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is Self-Admit Patient:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper326 = new RuntimeAnchoring(designSize, runtimeSize, 489, 167, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1324), new Integer(anchoringHelper326.getX()), new Integer(anchoringHelper326.getY()), new Integer(anchoringHelper326.getWidth()), new Integer(anchoringHelper326.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Chaplain:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper327 = new RuntimeAnchoring(designSize, runtimeSize, 270, 310, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1325), new Integer(anchoringHelper327.getX()), new Integer(anchoringHelper327.getY()), new Integer(anchoringHelper327.getWidth()), new Integer(anchoringHelper327.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Comment:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper328 = new RuntimeAnchoring(designSize, runtimeSize, 5, 310, 178, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1326), new Integer(anchoringHelper328.getX()), new Integer(anchoringHelper328.getY()), new Integer(anchoringHelper328.getWidth()), new Integer(anchoringHelper328.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Update Case Note Folder Location:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper329 = new RuntimeAnchoring(designSize, runtimeSize, 489, 108, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1327), new Integer(anchoringHelper329.getX()), new Integer(anchoringHelper329.getY()), new Integer(anchoringHelper329.getWidth()), new Integer(anchoringHelper329.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Category:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper330 = new RuntimeAnchoring(designSize, runtimeSize, 489, 227, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1328), new Integer(anchoringHelper330.getX()), new Integer(anchoringHelper330.getY()), new Integer(anchoringHelper330.getWidth()), new Integer(anchoringHelper330.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referring Consultant:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper331 = new RuntimeAnchoring(designSize, runtimeSize, 5, 227, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1329), new Integer(anchoringHelper331.getX()), new Integer(anchoringHelper331.getY()), new Integer(anchoringHelper331.getWidth()), new Integer(anchoringHelper331.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source Of Referral:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper332 = new RuntimeAnchoring(designSize, runtimeSize, 489, 138, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1330), new Integer(anchoringHelper332.getX()), new Integer(anchoringHelper332.getY()), new Integer(anchoringHelper332.getWidth()), new Integer(anchoringHelper332.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Est. Discharge Date:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper333 = new RuntimeAnchoring(designSize, runtimeSize, 489, 18, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1331), new Integer(anchoringHelper333.getX()), new Integer(anchoringHelper333.getY()), new Integer(anchoringHelper333.getWidth()), new Integer(anchoringHelper333.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ward Type:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper334 = new RuntimeAnchoring(designSize, runtimeSize, 5, 48, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1332), new Integer(anchoringHelper334.getX()), new Integer(anchoringHelper334.getY()), new Integer(anchoringHelper334.getWidth()), new Integer(anchoringHelper334.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Ward:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper335 = new RuntimeAnchoring(designSize, runtimeSize, 489, 78, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1333), new Integer(anchoringHelper335.getX()), new Integer(anchoringHelper335.getY()), new Integer(anchoringHelper335.getWidth()), new Integer(anchoringHelper335.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Method of Admission:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper336 = new RuntimeAnchoring(designSize, runtimeSize, 489, 48, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1334), new Integer(anchoringHelper336.getX()), new Integer(anchoringHelper336.getY()), new Integer(anchoringHelper336.getWidth()), new Integer(anchoringHelper336.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Source of Admission: ", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper337 = new RuntimeAnchoring(designSize, runtimeSize, 5, 257, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1335), new Integer(anchoringHelper337.getX()), new Integer(anchoringHelper337.getY()), new Integer(anchoringHelper337.getWidth()), new Integer(anchoringHelper337.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Admission:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper338 = new RuntimeAnchoring(designSize, runtimeSize, 5, 167, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1336), new Integer(anchoringHelper338.getX()), new Integer(anchoringHelper338.getY()), new Integer(anchoringHelper338.getWidth()), new Integer(anchoringHelper338.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Date/Time:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper339 = new RuntimeAnchoring(designSize, runtimeSize, 5, 108, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1337), new Integer(anchoringHelper339.getX()), new Integer(anchoringHelper339.getY()), new Integer(anchoringHelper339.getWidth()), new Integer(anchoringHelper339.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper340 = new RuntimeAnchoring(designSize, runtimeSize, 5, 138, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1338), new Integer(anchoringHelper340.getX()), new Integer(anchoringHelper340.getY()), new Integer(anchoringHelper340.getWidth()), new Integer(anchoringHelper340.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper341 = new RuntimeAnchoring(designSize, runtimeSize, 260, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1339), new Integer(anchoringHelper341.getX()), new Integer(anchoringHelper341.getY()), new Integer(anchoringHelper341.getWidth()), new Integer(anchoringHelper341.getHeight()), new Integer(startTabIndex.intValue() + 201), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Consultant Stays", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper342 = new RuntimeAnchoring(designSize, runtimeSize, 680, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1340), new Integer(anchoringHelper342.getX()), new Integer(anchoringHelper342.getY()), new Integer(anchoringHelper342.getWidth()), new Integer(anchoringHelper342.getHeight()), new Integer(startTabIndex.intValue() + 204), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper343 = new RuntimeAnchoring(designSize, runtimeSize, 400, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1341), new Integer(anchoringHelper343.getX()), new Integer(anchoringHelper343.getY()), new Integer(anchoringHelper343.getWidth()), new Integer(anchoringHelper343.getHeight()), new Integer(startTabIndex.intValue() + 202), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Edit Admission", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper344 = new RuntimeAnchoring(designSize, runtimeSize, 540, 416, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1342), new Integer(anchoringHelper344.getX()), new Integer(anchoringHelper344.getY()), new Integer(anchoringHelper344.getWidth()), new Integer(anchoringHelper344.getHeight()), new Integer(startTabIndex.intValue() + 203), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Cancel Admission", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper345 = new RuntimeAnchoring(designSize, runtimeSize, 650, 196, 152, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1343), new Integer(anchoringHelper345.getX()), new Integer(anchoringHelper345.getY()), new Integer(anchoringHelper345.getWidth()), new Integer(anchoringHelper345.getHeight()), new Integer(startTabIndex.intValue() + 189), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add Healthy Lodger", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper346 = new RuntimeAnchoring(designSize, runtimeSize, 326, 308, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1344), new Integer(anchoringHelper346.getX()), new Integer(anchoringHelper346.getY()), new Integer(anchoringHelper346.getWidth()), new Integer(anchoringHelper346.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper347 = new RuntimeAnchoring(designSize, runtimeSize, 174, 255, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1345), new Integer(anchoringHelper347.getX()), new Integer(anchoringHelper347.getY()), new Integer(anchoringHelper347.getWidth()), new Integer(anchoringHelper347.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper348 = new RuntimeAnchoring(designSize, runtimeSize, 602, 136, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1346), new Integer(anchoringHelper348.getX()), new Integer(anchoringHelper348.getY()), new Integer(anchoringHelper348.getWidth()), new Integer(anchoringHelper348.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper349 = new RuntimeAnchoring(designSize, runtimeSize, 602, 136, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1347), new Integer(anchoringHelper349.getX()), new Integer(anchoringHelper349.getY()), new Integer(anchoringHelper349.getWidth()), new Integer(anchoringHelper349.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper350 = new RuntimeAnchoring(designSize, runtimeSize, 174, 165, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1348), new Integer(anchoringHelper350.getX()), new Integer(anchoringHelper350.getY()), new Integer(anchoringHelper350.getWidth()), new Integer(anchoringHelper350.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper351 = new RuntimeAnchoring(designSize, runtimeSize, 174, 16, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAdmWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1349), new Integer(anchoringHelper351.getX()), new Integer(anchoringHelper351.getY()), new Integer(anchoringHelper351.getWidth()), new Integer(anchoringHelper351.getHeight()), new Integer(startTabIndex.intValue() + 205), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAdmWardTemp);
				cmbAdmWardComboBox cmbAdmWard = (cmbAdmWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmWardComboBox.class, m_cmbAdmWardTemp);
				super.addComboBox(cmbAdmWard);
				RuntimeAnchoring anchoringHelper352 = new RuntimeAnchoring(designSize, runtimeSize, 174, 195, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSourceOfEmergencyReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1350), new Integer(anchoringHelper352.getX()), new Integer(anchoringHelper352.getY()), new Integer(anchoringHelper352.getWidth()), new Integer(anchoringHelper352.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSourceOfEmergencyReferralTemp);
				cmbSourceOfEmergencyReferralComboBox cmbSourceOfEmergencyReferral = (cmbSourceOfEmergencyReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfEmergencyReferralComboBox.class, m_cmbSourceOfEmergencyReferralTemp);
				super.addComboBox(cmbSourceOfEmergencyReferral);
				RuntimeAnchoring anchoringHelper353 = new RuntimeAnchoring(designSize, runtimeSize, 174, 76, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1351), new Integer(anchoringHelper353.getX()), new Integer(anchoringHelper353.getY()), new Integer(anchoringHelper353.getWidth()), new Integer(anchoringHelper353.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbServiceTemp);
				cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
				super.addComboBox(cmbService);
				RuntimeAnchoring anchoringHelper354 = new RuntimeAnchoring(designSize, runtimeSize, 602, 106, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbPatientCategTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1352), new Integer(anchoringHelper354.getX()), new Integer(anchoringHelper354.getY()), new Integer(anchoringHelper354.getWidth()), new Integer(anchoringHelper354.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatientCategTemp);
				cmbPatientCategComboBox cmbPatientCateg = (cmbPatientCategComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientCategComboBox.class, m_cmbPatientCategTemp);
				super.addComboBox(cmbPatientCateg);
				RuntimeAnchoring anchoringHelper355 = new RuntimeAnchoring(designSize, runtimeSize, 174, 225, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSourceOfReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1353), new Integer(anchoringHelper355.getX()), new Integer(anchoringHelper355.getY()), new Integer(anchoringHelper355.getWidth()), new Integer(anchoringHelper355.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSourceOfReferralTemp);
				cmbSourceOfReferralComboBox cmbSourceOfReferral = (cmbSourceOfReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfReferralComboBox.class, m_cmbSourceOfReferralTemp);
				super.addComboBox(cmbSourceOfReferral);
				RuntimeAnchoring anchoringHelper356 = new RuntimeAnchoring(designSize, runtimeSize, 174, 46, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1354), new Integer(anchoringHelper356.getX()), new Integer(anchoringHelper356.getY()), new Integer(anchoringHelper356.getWidth()), new Integer(anchoringHelper356.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbWardTemp);
				cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
				super.addComboBox(cmbWard);
				RuntimeAnchoring anchoringHelper357 = new RuntimeAnchoring(designSize, runtimeSize, 602, 16, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbAdmWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1355), new Integer(anchoringHelper357.getX()), new Integer(anchoringHelper357.getY()), new Integer(anchoringHelper357.getWidth()), new Integer(anchoringHelper357.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAdmWardTypeTemp);
				cmbAdmWardTypeComboBox cmbAdmWardType = (cmbAdmWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmWardTypeComboBox.class, m_cmbAdmWardTypeTemp);
				super.addComboBox(cmbAdmWardType);
				RuntimeAnchoring anchoringHelper358 = new RuntimeAnchoring(designSize, runtimeSize, 602, 76, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbMethodOfAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1356), new Integer(anchoringHelper358.getX()), new Integer(anchoringHelper358.getY()), new Integer(anchoringHelper358.getWidth()), new Integer(anchoringHelper358.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbMethodOfAdmissionTemp);
				cmbMethodOfAdmissionComboBox cmbMethodOfAdmission = (cmbMethodOfAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodOfAdmissionComboBox.class, m_cmbMethodOfAdmissionTemp);
				super.addComboBox(cmbMethodOfAdmission);
				RuntimeAnchoring anchoringHelper359 = new RuntimeAnchoring(designSize, runtimeSize, 602, 46, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbSourceOfAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1357), new Integer(anchoringHelper359.getX()), new Integer(anchoringHelper359.getY()), new Integer(anchoringHelper359.getWidth()), new Integer(anchoringHelper359.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSourceOfAdmissionTemp);
				cmbSourceOfAdmissionComboBox cmbSourceOfAdmission = (cmbSourceOfAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfAdmissionComboBox.class, m_cmbSourceOfAdmissionTemp);
				super.addComboBox(cmbSourceOfAdmission);
				RuntimeAnchoring anchoringHelper360 = new RuntimeAnchoring(designSize, runtimeSize, 174, 106, 296, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAdmSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1358), new Integer(anchoringHelper360.getX()), new Integer(anchoringHelper360.getY()), new Integer(anchoringHelper360.getWidth()), new Integer(anchoringHelper360.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAdmSpecialtyTemp);
				cmbAdmSpecialtyComboBox cmbAdmSpecialty = (cmbAdmSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmSpecialtyComboBox.class, m_cmbAdmSpecialtyTemp);
				super.addComboBox(cmbAdmSpecialty);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper361 = new RuntimeAnchoring(designSize, runtimeSize, 602, 199, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1359), new Integer(anchoringHelper361.getX()), new Integer(anchoringHelper361.getY()), new Integer(anchoringHelper361.getWidth()), new Integer(anchoringHelper361.getHeight()), new Integer(startTabIndex.intValue() + 74), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper362 = new RuntimeAnchoring(designSize, runtimeSize, 174, 287, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1360), new Integer(anchoringHelper362.getX()), new Integer(anchoringHelper362.getY()), new Integer(anchoringHelper362.getWidth()), new Integer(anchoringHelper362.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper363 = new RuntimeAnchoring(designSize, runtimeSize, 602, 169, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1361), new Integer(anchoringHelper363.getX()), new Integer(anchoringHelper363.getY()), new Integer(anchoringHelper363.getWidth()), new Integer(anchoringHelper363.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper364 = new RuntimeAnchoring(designSize, runtimeSize, 622, 195, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1362), new Integer(anchoringHelper364.getX()), new Integer(anchoringHelper364.getY()), new Integer(anchoringHelper364.getWidth()), new Integer(anchoringHelper364.getHeight()), new Integer(startTabIndex.intValue() + 185), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.HealthyLodger16x16, form_images_local.Core.Lodger16x16Disabled, "View Healthy Lodger Details", Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpCaseFolderYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1363), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpCaseFolderYesNo);
				CaseFolderYesNoRadioButton CaseFolderYesNo = (CaseFolderYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(CaseFolderYesNoRadioButton.class, tmpCaseFolderYesNo);
				CaseFolderYesNo.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(CaseFolderYesNo);
			}

			public ims.core.forms.mosquery.IComponent ccReferringConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReferringConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReferringConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReferringConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReferringConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReferringConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblAdmWardAdmDetail()
			{
				return (Label)super.getControl(2);
			}
			public Label lblHealthyLodger()
			{
				return (Label)super.getControl(3);
			}
			public Label lblSourceOfEmergRefAdmDetail()
			{
				return (Label)super.getControl(4);
			}
			public Label lblService()
			{
				return (Label)super.getControl(5);
			}
			public Label lblSelfAdmitPatient()
			{
				return (Label)super.getControl(6);
			}
			public Label lblChaplain()
			{
				return (Label)super.getControl(7);
			}
			public Label lblCaseComment()
			{
				return (Label)super.getControl(8);
			}
			public Label lblUpdateCasefolder()
			{
				return (Label)super.getControl(9);
			}
			public Label lblPatientCategAdmDetails()
			{
				return (Label)super.getControl(10);
			}
			public Label lblRefConsultantAdmDetail()
			{
				return (Label)super.getControl(11);
			}
			public Label lblSourceOfRefAdmDetail()
			{
				return (Label)super.getControl(12);
			}
			public Label lblEstDischDateAdmDetail()
			{
				return (Label)super.getControl(13);
			}
			public Label lblWardTypeAdmDetail()
			{
				return (Label)super.getControl(14);
			}
			public Label lblWardAdmDetail()
			{
				return (Label)super.getControl(15);
			}
			public Label lblMethodAdmDetail()
			{
				return (Label)super.getControl(16);
			}
			public Label lblSourceAdmDetail()
			{
				return (Label)super.getControl(17);
			}
			public Label lblReasonAdmDetail()
			{
				return (Label)super.getControl(18);
			}
			public Label lblAdmDateAdmDetail()
			{
				return (Label)super.getControl(19);
			}
			public Label lblSpecialtyAdmDetail()
			{
				return (Label)super.getControl(20);
			}
			public Label lblConsultantAdmDetail()
			{
				return (Label)super.getControl(21);
			}
			public Button btnConsultantStays()
			{
				return (Button)super.getControl(22);
			}
			public Button btnCloseAdmission()
			{
				return (Button)super.getControl(23);
			}
			public Button btnEditAdmission()
			{
				return (Button)super.getControl(24);
			}
			public Button btnCancelAdmission()
			{
				return (Button)super.getControl(25);
			}
			public Button btnAddHealthyLodger()
			{
				return (Button)super.getControl(26);
			}
			public TextBox txtCaseComment()
			{
				return (TextBox)super.getControl(27);
			}
			public TextBox txtReasonForAdmission()
			{
				return (TextBox)super.getControl(28);
			}
			public DateControl dteAdmEstDischarge()
			{
				return (DateControl)super.getControl(29);
			}
			public DateTimeControl dtimAdmEstDischarge()
			{
				return (DateTimeControl)super.getControl(30);
			}
			public DateTimeControl dtimAdmission()
			{
				return (DateTimeControl)super.getControl(31);
			}
			public cmbAdmWardComboBox cmbAdmWard()
			{
				return (cmbAdmWardComboBox)super.getComboBox(0);
			}
			public cmbSourceOfEmergencyReferralComboBox cmbSourceOfEmergencyReferral()
			{
				return (cmbSourceOfEmergencyReferralComboBox)super.getComboBox(1);
			}
			public cmbServiceComboBox cmbService()
			{
				return (cmbServiceComboBox)super.getComboBox(2);
			}
			public cmbPatientCategComboBox cmbPatientCateg()
			{
				return (cmbPatientCategComboBox)super.getComboBox(3);
			}
			public cmbSourceOfReferralComboBox cmbSourceOfReferral()
			{
				return (cmbSourceOfReferralComboBox)super.getComboBox(4);
			}
			public cmbWardComboBox cmbWard()
			{
				return (cmbWardComboBox)super.getComboBox(5);
			}
			public cmbAdmWardTypeComboBox cmbAdmWardType()
			{
				return (cmbAdmWardTypeComboBox)super.getComboBox(6);
			}
			public cmbMethodOfAdmissionComboBox cmbMethodOfAdmission()
			{
				return (cmbMethodOfAdmissionComboBox)super.getComboBox(7);
			}
			public cmbSourceOfAdmissionComboBox cmbSourceOfAdmission()
			{
				return (cmbSourceOfAdmissionComboBox)super.getComboBox(8);
			}
			public cmbAdmSpecialtyComboBox cmbAdmSpecialty()
			{
				return (cmbAdmSpecialtyComboBox)super.getComboBox(9);
			}
			public CheckBox chkHealthyLodger()
			{
				return (CheckBox)super.getControl(42);
			}
			public CheckBox chkSelfAdmitPatient()
			{
				return (CheckBox)super.getControl(43);
			}
			public CheckBox chkChaplain()
			{
				return (CheckBox)super.getControl(44);
			}
			public ImageButton imbHealthyLodger()
			{
				return (ImageButton)super.getControl(45);
			}
			public CaseFolderYesNoRadioButton CaseFolderYesNo()
			{
				return (CaseFolderYesNoRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper365 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPatient = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1364), new Integer(anchoringHelper365.getX()), new Integer(anchoringHelper365.getY()), new Integer(anchoringHelper365.getWidth()), new Integer(anchoringHelper365.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Patient Details", new Integer(startControlID.intValue() + 2), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPatientContainer m_tabPatientContainer = (tabPatientContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientContainer.class, m_tabPatient, factory);
			super.addContainer(m_tabPatient, m_tabPatientContainer);
			ims.framework.utils.SizeInfo m_tabPatientDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabPatientRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper365.getWidth(), anchoringHelper365.getHeight());
			m_tabPatientContainer.setContext(form, appForm, m_tabPatient, loader, form_images_local, startControlID, m_tabPatientDesignSize, m_tabPatientRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper366 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTransfer = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1365), new Integer(anchoringHelper366.getX()), new Integer(anchoringHelper366.getY()), new Integer(anchoringHelper366.getWidth()), new Integer(anchoringHelper366.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Transfer", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTransferContainer m_tabTransferContainer = (tabTransferContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTransferContainer.class, m_tabTransfer, factory);
			super.addContainer(m_tabTransfer, m_tabTransferContainer);
			ims.framework.utils.SizeInfo m_tabTransferDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabTransferRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper366.getWidth(), anchoringHelper366.getHeight());
			m_tabTransferContainer.setContext(form, appForm, m_tabTransfer, loader, form_images_local, startControlID, m_tabTransferDesignSize, m_tabTransferRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper367 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTracking = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1366), new Integer(anchoringHelper367.getX()), new Integer(anchoringHelper367.getY()), new Integer(anchoringHelper367.getWidth()), new Integer(anchoringHelper367.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Tracking", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTrackingContainer m_tabTrackingContainer = (tabTrackingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTrackingContainer.class, m_tabTracking, factory);
			super.addContainer(m_tabTracking, m_tabTrackingContainer);
			ims.framework.utils.SizeInfo m_tabTrackingDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabTrackingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper367.getWidth(), anchoringHelper367.getHeight());
			m_tabTrackingContainer.setContext(form, appForm, m_tabTracking, loader, form_images_local, startControlID, m_tabTrackingDesignSize, m_tabTrackingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper368 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabReadyForDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1367), new Integer(anchoringHelper368.getX()), new Integer(anchoringHelper368.getY()), new Integer(anchoringHelper368.getWidth()), new Integer(anchoringHelper368.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Ready for Discharge", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabReadyForDischargeContainer m_tabReadyForDischargeContainer = (tabReadyForDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReadyForDischargeContainer.class, m_tabReadyForDischarge, factory);
			super.addContainer(m_tabReadyForDischarge, m_tabReadyForDischargeContainer);
			ims.framework.utils.SizeInfo m_tabReadyForDischargeDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabReadyForDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper368.getWidth(), anchoringHelper368.getHeight());
			m_tabReadyForDischargeContainer.setContext(form, appForm, m_tabReadyForDischarge, loader, form_images_local, startControlID, m_tabReadyForDischargeDesignSize, m_tabReadyForDischargeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper369 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1368), new Integer(anchoringHelper369.getX()), new Integer(anchoringHelper369.getY()), new Integer(anchoringHelper369.getWidth()), new Integer(anchoringHelper369.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDischargeContainer m_tabDischargeContainer = (tabDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeContainer.class, m_tabDischarge, factory);
			super.addContainer(m_tabDischarge, m_tabDischargeContainer);
			ims.framework.utils.SizeInfo m_tabDischargeDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper369.getWidth(), anchoringHelper369.getHeight());
			m_tabDischargeContainer.setContext(form, appForm, m_tabDischarge, loader, form_images_local, startControlID, m_tabDischargeDesignSize, m_tabDischargeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper370 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAdmission = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1369), new Integer(anchoringHelper370.getX()), new Integer(anchoringHelper370.getY()), new Integer(anchoringHelper370.getWidth()), new Integer(anchoringHelper370.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Admit", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAdmissionContainer m_tabAdmissionContainer = (tabAdmissionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAdmissionContainer.class, m_tabAdmission, factory);
			super.addContainer(m_tabAdmission, m_tabAdmissionContainer);
			ims.framework.utils.SizeInfo m_tabAdmissionDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabAdmissionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper370.getWidth(), anchoringHelper370.getHeight());
			m_tabAdmissionContainer.setContext(form, appForm, m_tabAdmission, loader, form_images_local, startControlID, m_tabAdmissionDesignSize, m_tabAdmissionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper371 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHomeLeave = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1370), new Integer(anchoringHelper371.getX()), new Integer(anchoringHelper371.getY()), new Integer(anchoringHelper371.getWidth()), new Integer(anchoringHelper371.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Home Leave", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHomeLeaveContainer m_tabHomeLeaveContainer = (tabHomeLeaveContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHomeLeaveContainer.class, m_tabHomeLeave, factory);
			super.addContainer(m_tabHomeLeave, m_tabHomeLeaveContainer);
			ims.framework.utils.SizeInfo m_tabHomeLeaveDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabHomeLeaveRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper371.getWidth(), anchoringHelper371.getHeight());
			m_tabHomeLeaveContainer.setContext(form, appForm, m_tabHomeLeave, loader, form_images_local, startControlID, m_tabHomeLeaveDesignSize, m_tabHomeLeaveRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper372 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHomeLeaveReturn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1371), new Integer(anchoringHelper372.getX()), new Integer(anchoringHelper372.getY()), new Integer(anchoringHelper372.getWidth()), new Integer(anchoringHelper372.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Return from Leave", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHomeLeaveReturnContainer m_tabHomeLeaveReturnContainer = (tabHomeLeaveReturnContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHomeLeaveReturnContainer.class, m_tabHomeLeaveReturn, factory);
			super.addContainer(m_tabHomeLeaveReturn, m_tabHomeLeaveReturnContainer);
			ims.framework.utils.SizeInfo m_tabHomeLeaveReturnDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabHomeLeaveReturnRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper372.getWidth(), anchoringHelper372.getHeight());
			m_tabHomeLeaveReturnContainer.setContext(form, appForm, m_tabHomeLeaveReturn, loader, form_images_local, startControlID, m_tabHomeLeaveReturnDesignSize, m_tabHomeLeaveReturnRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper373 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHLeaveReturnCancel = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1372), new Integer(anchoringHelper373.getX()), new Integer(anchoringHelper373.getY()), new Integer(anchoringHelper373.getWidth()), new Integer(anchoringHelper373.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Cancel Return from Leave", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHLeaveReturnCancelContainer m_tabHLeaveReturnCancelContainer = (tabHLeaveReturnCancelContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHLeaveReturnCancelContainer.class, m_tabHLeaveReturnCancel, factory);
			super.addContainer(m_tabHLeaveReturnCancel, m_tabHLeaveReturnCancelContainer);
			ims.framework.utils.SizeInfo m_tabHLeaveReturnCancelDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabHLeaveReturnCancelRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper373.getWidth(), anchoringHelper373.getHeight());
			m_tabHLeaveReturnCancelContainer.setContext(form, appForm, m_tabHLeaveReturnCancel, loader, form_images_local, startControlID, m_tabHLeaveReturnCancelDesignSize, m_tabHLeaveReturnCancelRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper374 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCloseBed = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1373), new Integer(anchoringHelper374.getX()), new Integer(anchoringHelper374.getY()), new Integer(anchoringHelper374.getWidth()), new Integer(anchoringHelper374.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Bed/Chair Maintenance", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCloseBedContainer m_tabCloseBedContainer = (tabCloseBedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCloseBedContainer.class, m_tabCloseBed, factory);
			super.addContainer(m_tabCloseBed, m_tabCloseBedContainer);
			ims.framework.utils.SizeInfo m_tabCloseBedDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabCloseBedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper374.getWidth(), anchoringHelper374.getHeight());
			m_tabCloseBedContainer.setContext(form, appForm, m_tabCloseBed, loader, form_images_local, startControlID, m_tabCloseBedDesignSize, m_tabCloseBedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper375 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabBedMove = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1374), new Integer(anchoringHelper375.getX()), new Integer(anchoringHelper375.getY()), new Integer(anchoringHelper375.getWidth()), new Integer(anchoringHelper375.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Bed/Chair Move", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBedMoveContainer m_tabBedMoveContainer = (tabBedMoveContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBedMoveContainer.class, m_tabBedMove, factory);
			super.addContainer(m_tabBedMove, m_tabBedMoveContainer);
			ims.framework.utils.SizeInfo m_tabBedMoveDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabBedMoveRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper375.getWidth(), anchoringHelper375.getHeight());
			m_tabBedMoveContainer.setContext(form, appForm, m_tabBedMove, loader, form_images_local, startControlID, m_tabBedMoveDesignSize, m_tabBedMoveRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper376 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInfants = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1375), new Integer(anchoringHelper376.getX()), new Integer(anchoringHelper376.getY()), new Integer(anchoringHelper376.getWidth()), new Integer(anchoringHelper376.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Infants", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInfantsContainer m_tabInfantsContainer = (tabInfantsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInfantsContainer.class, m_tabInfants, factory);
			super.addContainer(m_tabInfants, m_tabInfantsContainer);
			ims.framework.utils.SizeInfo m_tabInfantsDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabInfantsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper376.getWidth(), anchoringHelper376.getHeight());
			m_tabInfantsContainer.setContext(form, appForm, m_tabInfants, loader, form_images_local, startControlID, m_tabInfantsDesignSize, m_tabInfantsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper377 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAdmissionDetail = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1376), new Integer(anchoringHelper377.getX()), new Integer(anchoringHelper377.getY()), new Integer(anchoringHelper377.getWidth()), new Integer(anchoringHelper377.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Admission Detail", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAdmissionDetailContainer m_tabAdmissionDetailContainer = (tabAdmissionDetailContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAdmissionDetailContainer.class, m_tabAdmissionDetail, factory);
			super.addContainer(m_tabAdmissionDetail, m_tabAdmissionDetailContainer);
			ims.framework.utils.SizeInfo m_tabAdmissionDetailDesignSize = new ims.framework.utils.SizeInfo(824, 496);
			ims.framework.utils.SizeInfo m_tabAdmissionDetailRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper377.getWidth(), anchoringHelper377.getHeight());
			m_tabAdmissionDetailContainer.setContext(form, appForm, m_tabAdmissionDetail, loader, form_images_local, startControlID, m_tabAdmissionDetailDesignSize, m_tabAdmissionDetailRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
		}
		public void settabPatientEnabled(boolean value)
		{
			tabPatient().setEnabled(value);
		}
		public void settabTransferEnabled(boolean value)
		{
			tabTransfer().setEnabled(value);
		}
		public void settabTrackingEnabled(boolean value)
		{
			tabTracking().setEnabled(value);
		}
		public void settabReadyForDischargeEnabled(boolean value)
		{
			tabReadyForDischarge().setEnabled(value);
		}
		public void settabDischargeEnabled(boolean value)
		{
			tabDischarge().setEnabled(value);
		}
		public void settabAdmissionEnabled(boolean value)
		{
			tabAdmission().setEnabled(value);
		}
		public void settabHomeLeaveEnabled(boolean value)
		{
			tabHomeLeave().setEnabled(value);
		}
		public void settabHomeLeaveReturnEnabled(boolean value)
		{
			tabHomeLeaveReturn().setEnabled(value);
		}
		public void settabHLeaveReturnCancelEnabled(boolean value)
		{
			tabHLeaveReturnCancel().setEnabled(value);
		}
		public void settabCloseBedEnabled(boolean value)
		{
			tabCloseBed().setEnabled(value);
		}
		public void settabBedMoveEnabled(boolean value)
		{
			tabBedMove().setEnabled(value);
		}
		public void settabInfantsEnabled(boolean value)
		{
			tabInfants().setEnabled(value);
		}
		public void settabAdmissionDetailEnabled(boolean value)
		{
			tabAdmissionDetail().setEnabled(value);
		}
		public void showtabPatient()
		{
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabPatient().setVisible(true);
		}
		public void showtabTransfer()
		{
			tabPatient().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabTransfer().setVisible(true);
		}
		public void showtabTracking()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabTracking().setVisible(true);
		}
		public void showtabReadyForDischarge()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabReadyForDischarge().setVisible(true);
		}
		public void showtabDischarge()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabDischarge().setVisible(true);
		}
		public void showtabAdmission()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabAdmission().setVisible(true);
		}
		public void showtabHomeLeave()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabHomeLeave().setVisible(true);
		}
		public void showtabHomeLeaveReturn()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabHomeLeaveReturn().setVisible(true);
		}
		public void showtabHLeaveReturnCancel()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabHLeaveReturnCancel().setVisible(true);
		}
		public void showtabCloseBed()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabCloseBed().setVisible(true);
		}
		public void showtabBedMove()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabBedMove().setVisible(true);
		}
		public void showtabInfants()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabInfants().setVisible(true);
		}
		public void showtabAdmissionDetail()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabTracking().setVisible(false);
			tabReadyForDischarge().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabHomeLeaveReturn().setVisible(false);
			tabHLeaveReturnCancel().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(true);
		}

		public tabPatientContainer tabPatient()
		{
			return (tabPatientContainer)super.layers.get(0);
		}
		public tabTransferContainer tabTransfer()
		{
			return (tabTransferContainer)super.layers.get(1);
		}
		public tabTrackingContainer tabTracking()
		{
			return (tabTrackingContainer)super.layers.get(2);
		}
		public tabReadyForDischargeContainer tabReadyForDischarge()
		{
			return (tabReadyForDischargeContainer)super.layers.get(3);
		}
		public tabDischargeContainer tabDischarge()
		{
			return (tabDischargeContainer)super.layers.get(4);
		}
		public tabAdmissionContainer tabAdmission()
		{
			return (tabAdmissionContainer)super.layers.get(5);
		}
		public tabHomeLeaveContainer tabHomeLeave()
		{
			return (tabHomeLeaveContainer)super.layers.get(6);
		}
		public tabHomeLeaveReturnContainer tabHomeLeaveReturn()
		{
			return (tabHomeLeaveReturnContainer)super.layers.get(7);
		}
		public tabHLeaveReturnCancelContainer tabHLeaveReturnCancel()
		{
			return (tabHLeaveReturnCancelContainer)super.layers.get(8);
		}
		public tabCloseBedContainer tabCloseBed()
		{
			return (tabCloseBedContainer)super.layers.get(9);
		}
		public tabBedMoveContainer tabBedMove()
		{
			return (tabBedMoveContainer)super.layers.get(10);
		}
		public tabInfantsContainer tabInfants()
		{
			return (tabInfantsContainer)super.layers.get(11);
		}
		public tabAdmissionDetailContainer tabAdmissionDetail()
		{
			return (tabAdmissionDetailContainer)super.layers.get(12);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(856, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper378 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 840, 125, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1377), new Integer(anchoringHelper378.getX()), new Integer(anchoringHelper378.getY()), new Integer(anchoringHelper378.getWidth()), new Integer(anchoringHelper378.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper379 = new RuntimeAnchoring(designSize, runtimeSize, 448, 8, 392, 110, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1378), new Integer(anchoringHelper379.getX()), new Integer(anchoringHelper379.getY()), new Integer(anchoringHelper379.getWidth()), new Integer(anchoringHelper379.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"", new Integer(2), ""}));

		// Layer Clasess
		lyrDetailLayer m_lyrDetailLayer = (lyrDetailLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailLayer.class, this, factory);
		super.addLayer(m_lyrDetailLayer);
		m_lyrDetailLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper380 = new RuntimeAnchoring(designSize, runtimeSize, 284, 56, 288, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1379), new Integer(anchoringHelper380.getX()), new Integer(anchoringHelper380.getY()), new Integer(anchoringHelper380.getWidth()), new Integer(anchoringHelper380.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Patient Details to Display", new Integer(1), null, new Integer(2)}));
		RuntimeAnchoring anchoringHelper381 = new RuntimeAnchoring(designSize, runtimeSize, 560, 78, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1380), new Integer(anchoringHelper381.getX()), new Integer(anchoringHelper381.getY()), new Integer(anchoringHelper381.getWidth()), new Integer(anchoringHelper381.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Number Text", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper382 = new RuntimeAnchoring(designSize, runtimeSize, 454, 78, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1381), new Integer(anchoringHelper382.getX()), new Integer(anchoringHelper382.getY()), new Integer(anchoringHelper382.getWidth()), new Integer(anchoringHelper382.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed Number:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper383 = new RuntimeAnchoring(designSize, runtimeSize, 560, 97, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1382), new Integer(anchoringHelper383.getX()), new Integer(anchoringHelper383.getY()), new Integer(anchoringHelper383.getWidth()), new Integer(anchoringHelper383.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Name", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper384 = new RuntimeAnchoring(designSize, runtimeSize, 454, 97, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1383), new Integer(anchoringHelper384.getX()), new Integer(anchoringHelper384.getY()), new Integer(anchoringHelper384.getWidth()), new Integer(anchoringHelper384.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Destination Ward:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper385 = new RuntimeAnchoring(designSize, runtimeSize, 560, 21, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1384), new Integer(anchoringHelper385.getX()), new Integer(anchoringHelper385.getY()), new Integer(anchoringHelper385.getWidth()), new Integer(anchoringHelper385.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper386 = new RuntimeAnchoring(designSize, runtimeSize, 454, 40, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1385), new Integer(anchoringHelper386.getX()), new Integer(anchoringHelper386.getY()), new Integer(anchoringHelper386.getWidth()), new Integer(anchoringHelper386.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty: ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper387 = new RuntimeAnchoring(designSize, runtimeSize, 560, 59, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1386), new Integer(anchoringHelper387.getX()), new Integer(anchoringHelper387.getY()), new Integer(anchoringHelper387.getWidth()), new Integer(anchoringHelper387.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "20/06/2008 10:00", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper388 = new RuntimeAnchoring(designSize, runtimeSize, 560, 40, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1387), new Integer(anchoringHelper388.getX()), new Integer(anchoringHelper388.getY()), new Integer(anchoringHelper388.getWidth()), new Integer(anchoringHelper388.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty Text", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper389 = new RuntimeAnchoring(designSize, runtimeSize, 454, 21, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1388), new Integer(anchoringHelper389.getX()), new Integer(anchoringHelper389.getY()), new Integer(anchoringHelper389.getWidth()), new Integer(anchoringHelper389.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant: ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper390 = new RuntimeAnchoring(designSize, runtimeSize, 454, 59, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1389), new Integer(anchoringHelper390.getX()), new Integer(anchoringHelper390.getY()), new Integer(anchoringHelper390.getWidth()), new Integer(anchoringHelper390.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Discharge:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper391 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1390), new Integer(anchoringHelper391.getX()), new Integer(anchoringHelper391.getY()), new Integer(anchoringHelper391.getWidth()), new Integer(anchoringHelper391.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lblAddress2", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper392 = new RuntimeAnchoring(designSize, runtimeSize, 24, 80, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1391), new Integer(anchoringHelper392.getX()), new Integer(anchoringHelper392.getY()), new Integer(anchoringHelper392.getWidth()), new Integer(anchoringHelper392.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lblAddress1", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper393 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 102, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1392), new Integer(anchoringHelper393.getX()), new Integer(anchoringHelper393.getY()), new Integer(anchoringHelper393.getWidth()), new Integer(anchoringHelper393.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lblPatient", new Integer(1), null, new Integer(2)}));
		RuntimeAnchoring anchoringHelper394 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 94, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1393), new Integer(anchoringHelper394.getX()), new Integer(anchoringHelper394.getY()), new Integer(anchoringHelper394.getWidth()), new Integer(anchoringHelper394.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital No.:", new Integer(0), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper395 = new RuntimeAnchoring(designSize, runtimeSize, 120, 10, 104, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1394), new Integer(anchoringHelper395.getX()), new Integer(anchoringHelper395.getY()), new Integer(anchoringHelper395.getWidth()), new Integer(anchoringHelper395.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1234567890", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper396 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 69, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1395), new Integer(anchoringHelper396.getX()), new Integer(anchoringHelper396.getY()), new Integer(anchoringHelper396.getWidth()), new Integer(anchoringHelper396.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NHS No.:", new Integer(0), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper397 = new RuntimeAnchoring(designSize, runtimeSize, 120, 32, 104, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1396), new Integer(anchoringHelper397.getX()), new Integer(anchoringHelper397.getY()), new Integer(anchoringHelper397.getWidth()), new Integer(anchoringHelper397.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1234567890", new Integer(1), null, new Integer(1)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlPatientDetails()
	{
		return (Panel)super.getControl(0);
	}
	public Panel pnlInpatientDetails()
	{
		return (Panel)super.getControl(1);
	}
	public lyrDetailLayer lyrDetail()
	{
		return (lyrDetailLayer)super.getLayer(0);
	}
	public Label lblNoPatient()
	{
		return (Label)super.getControl(15);
	}
	public Label lblBedNumberText()
	{
		return (Label)super.getControl(16);
	}
	public Label lblBedNumber()
	{
		return (Label)super.getControl(17);
	}
	public Label lblWardBanner()
	{
		return (Label)super.getControl(18);
	}
	public Label lblDestWard()
	{
		return (Label)super.getControl(19);
	}
	public Label lblConsultantBanner()
	{
		return (Label)super.getControl(20);
	}
	public Label lblSpecialty()
	{
		return (Label)super.getControl(21);
	}
	public Label lblEstDsichargeBanner()
	{
		return (Label)super.getControl(22);
	}
	public Label lblSpecialtyBanner()
	{
		return (Label)super.getControl(23);
	}
	public Label lblConsultant()
	{
		return (Label)super.getControl(24);
	}
	public Label lblDischarge()
	{
		return (Label)super.getControl(25);
	}
	public Label lblAddress2Banner()
	{
		return (Label)super.getControl(26);
	}
	public Label lblAddress1Banner()
	{
		return (Label)super.getControl(27);
	}
	public Label lblPatientNameBanner()
	{
		return (Label)super.getControl(28);
	}
	public Label lblHosp()
	{
		return (Label)super.getControl(29);
	}
	public Label lblHospitalNoBanner()
	{
		return (Label)super.getControl(30);
	}
	public Label lblNhs()
	{
		return (Label)super.getControl(31);
	}
	public Label lblNhsNoBanner()
	{
		return (Label)super.getControl(32);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
			RefMan = new RefManForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectItems = new LocalFormName(102229);
				DemographicsDialog = new LocalFormName(102321);
				TransferCancellation = new LocalFormName(102475);
				AdmissionReason = new LocalFormName(102481);
				AdmissionGenderWarningDialog = new LocalFormName(102429);
				PDSDemographicsDialog = new LocalFormName(102494);
				HealthyLodgerDetails = new LocalFormName(102498);
				HomeLeaveDetailsDialog = new LocalFormName(102503);
				ADTUpdateAdmissionDetail = new LocalFormName(102511);
				ADTConsultantStaysDialog = new LocalFormName(102512);
			}
			public final FormName SelectItems;
			public final FormName DemographicsDialog;
			public final FormName TransferCancellation;
			public final FormName AdmissionReason;
			public final FormName AdmissionGenderWarningDialog;
			public final FormName PDSDemographicsDialog;
			public final FormName HealthyLodgerDetails;
			public final FormName HomeLeaveDetailsDialog;
			public final FormName ADTUpdateAdmissionDetail;
			public final FormName ADTConsultantStaysDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				VTERiskAssessmentDialog = new LocalFormName(123238);
				DeathDetails = new LocalFormName(123135);
			}
			public final FormName VTERiskAssessmentDialog;
			public final FormName DeathDetails;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				PatientElectiveListAndTCIForCancellationDialog = new LocalFormName(134235);
				ElectiveListDetails = new LocalFormName(134283);
			}
			public final FormName PatientElectiveListAndTCIForCancellationDialog;
			public final FormName ElectiveListDetails;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Critical = new ImageHelper(102249, "Images/Core/Critical.gif", new Integer(16), new Integer(16));
				Transfer = new ImageHelper(102323, "Images/Core/transfer.png", new Integer(23), new Integer(23));
				Discharge = new ImageHelper(102324, "Images/Core/discharge.png", new Integer(23), new Integer(23));
				HomeLeave = new ImageHelper(102326, "Images/Core/homeleave.png", new Integer(23), new Integer(23));
				ReturnFromHome = new ImageHelper(102325, "Images/Core/returnhome.png", new Integer(23), new Integer(23));
				ClinicalData = new ImageHelper(102327, "Images/Core/clinicaldata.png", new Integer(23), new Integer(23));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				Save = new ImageHelper(102199, "Images/Core/Save.gif", new Integer(18), new Integer(18));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				OK24 = new ImageHelper(102574, "Images/Core/ok24.png", new Integer(24), new Integer(24));
				Undo24x24 = new ImageHelper(102575, "Images/Core/undo_24x24.png", new Integer(24), new Integer(24));
				Minus = new ImageHelper(102118, "Images/Core/minus.gif", new Integer(16), new Integer(16));
				MinusDisabled = new ImageHelper(102119, "Images/Core/minus_disabled.gif", new Integer(16), new Integer(16));
				Plus = new ImageHelper(102116, "Images/Core/plus.gif", new Integer(16), new Integer(16));
				PlusDisabled = new ImageHelper(102117, "Images/Core/plus_disabled.gif", new Integer(16), new Integer(16));
				Update = new ImageHelper(102306, "Images/Core/update.gif", new Integer(16), new Integer(16));
				UpdateDisabled = new ImageHelper(102307, "Images/Core/update_disabled.gif", new Integer(16), new Integer(16));
				HealthyLodger16x16 = new ImageHelper(102647, "Images/Core/lodger16x16.png", new Integer(16), new Integer(16));
				Lodger16x16Disabled = new ImageHelper(102649, "Images/Core/lodger16x16disabled.png", new Integer(16), new Integer(16));
				HomeLeaveCancel = new ImageHelper(102653, "Images/Core/homeleavecancel.png", new Integer(23), new Integer(23));
				homeleaveupdate24x24 = new ImageHelper(102655, "Images/Core/home_write_24.png", new Integer(24), new Integer(24));
				homeleavenext24x24 = new ImageHelper(102659, "Images/Core/home_next_24.png", new Integer(24), new Integer(24));
				ConsultantStay24 = new ImageHelper(102682, "Images/Core/stethoscope_clock_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Critical;
			public final ims.framework.utils.Image Transfer;
			public final ims.framework.utils.Image Discharge;
			public final ims.framework.utils.Image HomeLeave;
			public final ims.framework.utils.Image ReturnFromHome;
			public final ims.framework.utils.Image ClinicalData;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image Save;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image OK24;
			public final ims.framework.utils.Image Undo24x24;
			public final ims.framework.utils.Image Minus;
			public final ims.framework.utils.Image MinusDisabled;
			public final ims.framework.utils.Image Plus;
			public final ims.framework.utils.Image PlusDisabled;
			public final ims.framework.utils.Image Update;
			public final ims.framework.utils.Image UpdateDisabled;
			public final ims.framework.utils.Image HealthyLodger16x16;
			public final ims.framework.utils.Image Lodger16x16Disabled;
			public final ims.framework.utils.Image HomeLeaveCancel;
			public final ims.framework.utils.Image homeleaveupdate24x24;
			public final ims.framework.utils.Image homeleavenext24x24;
			public final ims.framework.utils.Image ConsultantStay24;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				StaffBlack = new ImageHelper(103128, "Images/Admin/user_black.png", new Integer(16), new Integer(16));
				BedClose24 = new ImageHelper(103263, "Images/Admin/hospital_bed_close_24.png", new Integer(24), new Integer(24));
				BedNext24 = new ImageHelper(103265, "Images/Admin/hospital_bed_next_24.png", new Integer(24), new Integer(24));
				BedOK24 = new ImageHelper(103266, "Images/Admin/hospital_bed_ok_24.png", new Integer(24), new Integer(24));
				BedReload24 = new ImageHelper(103264, "Images/Admin/hospital_bed_reload_24.png", new Integer(24), new Integer(24));
				BedRefresh24 = new ImageHelper(103262, "Images/Admin/hospital_bed_refresh_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image StaffBlack;
			public final ims.framework.utils.Image BedClose24;
			public final ims.framework.utils.Image BedNext24;
			public final ims.framework.utils.Image BedOK24;
			public final ims.framework.utils.Image BedReload24;
			public final ims.framework.utils.Image BedRefresh24;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_BedStatus = new ims.framework.ContextVariable("BedStatus", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__BedStatus_" + componentIdentifier + "");
			cxl_Hospitals = new ims.framework.ContextVariable("Hospitals", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__Hospitals_" + componentIdentifier + "");
			cxl_PendingTransferOut = new ims.framework.ContextVariable("PendingTransferOut", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier + "");
			cxl_CloseBedStatus = new ims.framework.ContextVariable("CloseBedStatus", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier + "");
			cxl_RtpStat = new ims.framework.ContextVariable("RtpStat", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__RtpStat_" + componentIdentifier + "");
			cxl_PlBlk = new ims.framework.ContextVariable("PlBlk", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PlBlk_" + componentIdentifier + "");
			cxl_Infants = new ims.framework.ContextVariable("Infants", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__Infants_" + componentIdentifier + "");
			cxl_PendingInfantTransfer = new ims.framework.ContextVariable("PendingInfantTransfer", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier + "");
			cxl_IsReadOnly = new ims.framework.ContextVariable("IsReadOnly", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__IsReadOnly_" + componentIdentifier + "");
			cxl_ShowVTERiskAssessmentButton = new ims.framework.ContextVariable("ShowVTERiskAssessmentButton", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__ShowVTERiskAssessmentButton_" + componentIdentifier + "");
			cxl_InpatientEpForVTERiskAssessmentVo = new ims.framework.ContextVariable("InpatientEpForVTERiskAssessmentVo", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier + "");
			cxl_VTEShouldCreate = new ims.framework.ContextVariable("VTEShouldCreate", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTEShouldCreate_" + componentIdentifier + "");
			cxl_VTERiskAssessmentShortVo = new ims.framework.ContextVariable("VTERiskAssessmentShortVo", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentShortVo_" + componentIdentifier + "");
			cxl_MessageBoxAdmission = new ims.framework.ContextVariable("MessageBoxAdmission", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxAdmission_" + componentIdentifier + "");
			cxl_MessageBoxDischarge = new ims.framework.ContextVariable("MessageBoxDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDischarge_" + componentIdentifier + "");
			cxl_PatientElectiveListDischarge = new ims.framework.ContextVariable("PatientElectiveListDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier + "");
			cxl_MessageBoxPELCheck = new ims.framework.ContextVariable("MessageBoxPELCheck", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxPELCheck_" + componentIdentifier + "");
			cxl_InpatientEpisodeSpecialty = new ims.framework.ContextVariable("InpatientEpisodeSpecialty", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpisodeSpecialty_" + componentIdentifier + "");
			cxl_TabFocused = new ims.framework.ContextVariable("TabFocused", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TabFocused_" + componentIdentifier + "");
			cxl_MessageBoxAdmissionApptsExist = new ims.framework.ContextVariable("MessageBoxAdmissionApptsExist", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxAdmissionApptsExist_" + componentIdentifier + "");
			cxl_DeathDetailsOnDischarge = new ims.framework.ContextVariable("DeathDetailsOnDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier + "");
			cxl_TempMotherPatient = new ims.framework.ContextVariable("TempMotherPatient", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier + "");
			cxl_bCancelPatientAppointments = new ims.framework.ContextVariable("bCancelPatientAppointments", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__bCancelPatientAppointments_" + componentIdentifier + "");
			cxl_CancelAppointmentsMessageID = new ims.framework.ContextVariable("CancelAppointmentsMessageID", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CancelAppointmentsMessageID_" + componentIdentifier + "");
			cxl_MessageBoxMoveCaseNotes = new ims.framework.ContextVariable("MessageBoxMoveCaseNotes", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxMoveCaseNotes_" + componentIdentifier + "");
			cxl_PatientCaseNotesCollection = new ims.framework.ContextVariable("PatientCaseNotesCollection", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientCaseNotesCollection_" + componentIdentifier + "");
			cxl_WardConfig = new ims.framework.ContextVariable("WardConfig", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier + "");
			cxl_AdmissionDetails = new ims.framework.ContextVariable("AdmissionDetails", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier + "");
			cxl_MessageBoxBayGenderMismatch = new ims.framework.ContextVariable("MessageBoxBayGenderMismatch", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxBayGenderMismatch_" + componentIdentifier + "");
			cxl_MessageBoxBayMixedGender = new ims.framework.ContextVariable("MessageBoxBayMixedGender", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxBayMixedGender_" + componentIdentifier + "");
			cxl_MessageBoxWardBayAvailability = new ims.framework.ContextVariable("MessageBoxWardBayAvailability", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxWardBayAvailability_" + componentIdentifier + "");
			cxl_bWasReviseEstDischargeDatePressed = new ims.framework.ContextVariable("bWasReviseEstDischargeDatePressed", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__bWasReviseEstDischargeDatePressed_" + componentIdentifier + "");
			cxl_bWasConfirmPatientDischPressed = new ims.framework.ContextVariable("bWasConfirmPatientDischPressed", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__bWasConfirmPatientDischPressed_" + componentIdentifier + "");
			cxl_bHasHomeLeaveReturns = new ims.framework.ContextVariable("bHasHomeLeaveReturns", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__bHasHomeLeaveReturns_" + componentIdentifier + "");
			cxl_HomeLeaveToReOpen = new ims.framework.ContextVariable("HomeLeaveToReOpen", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier + "");
			cxl_SortOrderBedNo = new ims.framework.ContextVariable("SortOrderBedNo", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__SortOrderBedNo_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedPatientTransferOut = new ims.framework.ContextVariable("MessageBoxDeceasedPatientTransferOut", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedPatientTransferOut_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedPatientTransferConsultant = new ims.framework.ContextVariable("MessageBoxDeceasedPatientTransferConsultant", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedPatientTransferConsultant_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedReturnFromLeave = new ims.framework.ContextVariable("MessageBoxDeceasedReturnFromLeave", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedReturnFromLeave_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedReadyForDischarge = new ims.framework.ContextVariable("MessageBoxDeceasedReadyForDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedReadyForDischarge_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedHomeLeave = new ims.framework.ContextVariable("MessageBoxDeceasedHomeLeave", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedHomeLeave_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedBedMove = new ims.framework.ContextVariable("MessageBoxDeceasedBedMove", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedBedMove_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedReturnFromLeaveAdmit = new ims.framework.ContextVariable("MessageBoxDeceasedReturnFromLeaveAdmit", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedReturnFromLeaveAdmit_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedEditHomeLeave = new ims.framework.ContextVariable("MessageBoxDeceasedEditHomeLeave", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedEditHomeLeave_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedVacateBedHomeLeave = new ims.framework.ContextVariable("MessageBoxDeceasedVacateBedHomeLeave", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedVacateBedHomeLeave_" + componentIdentifier + "");
			cxl_MessageBoxVTENotCompletedOnDischarge = new ims.framework.ContextVariable("MessageBoxVTENotCompletedOnDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxVTENotCompletedOnDischarge_" + componentIdentifier + "");
			cxl_bWasReadyToLeavePressed = new ims.framework.ContextVariable("bWasReadyToLeavePressed", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__bWasReadyToLeavePressed_" + componentIdentifier + "");
			cxl_MessageBoxUndoReadyToLeave = new ims.framework.ContextVariable("MessageBoxUndoReadyToLeave", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxUndoReadyToLeave_" + componentIdentifier + "");
			cxl_MessageBoxUndoConfirmedDischarge = new ims.framework.ContextVariable("MessageBoxUndoConfirmedDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxUndoConfirmedDischarge_" + componentIdentifier + "");
			cxl_SortOrderInfantsDOB = new ims.framework.ContextVariable("SortOrderInfantsDOB", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__SortOrderInfantsDOB_" + componentIdentifier + "");
			cxl_SortOrderBedMoveDOB = new ims.framework.ContextVariable("SortOrderBedMoveDOB", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__SortOrderBedMoveDOB_" + componentIdentifier + "");
			cxl_SortOrderBedMoveAge = new ims.framework.ContextVariable("SortOrderBedMoveAge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__SortOrderBedMoveAge_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedTrackingSend = new ims.framework.ContextVariable("MessageBoxDeceasedTrackingSend", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedTrackingSend_" + componentIdentifier + "");
			cxl_MessageBoxDeceasedTrackingReturn = new ims.framework.ContextVariable("MessageBoxDeceasedTrackingReturn", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDeceasedTrackingReturn_" + componentIdentifier + "");
			cxl_MessageBoxHomeLeaveTrackingSend = new ims.framework.ContextVariable("MessageBoxHomeLeaveTrackingSend", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxHomeLeaveTrackingSend_" + componentIdentifier + "");
			cxl_MessageBoxCancelAdmissionSent = new ims.framework.ContextVariable("MessageBoxCancelAdmissionSent", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxCancelAdmissionSent_" + componentIdentifier + "");
			cxl_ShowMessageBoxReviseEstDischargeDate = new ims.framework.ContextVariable("ShowMessageBoxReviseEstDischargeDate", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__ShowMessageBoxReviseEstDischargeDate_" + componentIdentifier + "");
			cxl_AnsweredYesOnDemographicsCancelFutureAppts = new ims.framework.ContextVariable("AnsweredYesOnDemographicsCancelFutureAppts", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AnsweredYesOnDemographicsCancelFutureAppts_" + componentIdentifier + "");
			cxl_IsCaseNoteFolderVisible = new ims.framework.ContextVariable("IsCaseNoteFolderVisible", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__IsCaseNoteFolderVisible_" + componentIdentifier + "");
		}
		
		public boolean getBedStatusIsNotNull()
		{
			return !cxl_BedStatus.getValueIsNull(context);
		}
		public ims.core.vo.lookups.BedStatus getBedStatus()
		{
			return (ims.core.vo.lookups.BedStatus)cxl_BedStatus.getValue(context);
		}
		public void setBedStatus(ims.core.vo.lookups.BedStatus value)
		{
			cxl_BedStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BedStatus = null;
		public boolean getHospitalsIsNotNull()
		{
			return !cxl_Hospitals.getValueIsNull(context);
		}
		public ims.core.vo.LocationLiteVoCollection getHospitals()
		{
			return (ims.core.vo.LocationLiteVoCollection)cxl_Hospitals.getValue(context);
		}
		public void setHospitals(ims.core.vo.LocationLiteVoCollection value)
		{
			cxl_Hospitals.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Hospitals = null;
		public boolean getPendingTransferOutIsNotNull()
		{
			return !cxl_PendingTransferOut.getValueIsNull(context);
		}
		public ims.core.vo.PendingTransfersLiteVo getPendingTransferOut()
		{
			return (ims.core.vo.PendingTransfersLiteVo)cxl_PendingTransferOut.getValue(context);
		}
		public void setPendingTransferOut(ims.core.vo.PendingTransfersLiteVo value)
		{
			cxl_PendingTransferOut.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingTransferOut = null;
		public boolean getCloseBedStatusIsNotNull()
		{
			return !cxl_CloseBedStatus.getValueIsNull(context);
		}
		public ims.core.vo.BedSpaceStateStatusVo getCloseBedStatus()
		{
			return (ims.core.vo.BedSpaceStateStatusVo)cxl_CloseBedStatus.getValue(context);
		}
		public void setCloseBedStatus(ims.core.vo.BedSpaceStateStatusVo value)
		{
			cxl_CloseBedStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CloseBedStatus = null;
		public boolean getRtpStatIsNotNull()
		{
			return !cxl_RtpStat.getValueIsNull(context);
		}
		public String getRtpStat()
		{
			return (String)cxl_RtpStat.getValue(context);
		}
		public void setRtpStat(String value)
		{
			cxl_RtpStat.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RtpStat = null;
		public boolean getPlBlkIsNotNull()
		{
			return !cxl_PlBlk.getValueIsNull(context);
		}
		public String getPlBlk()
		{
			return (String)cxl_PlBlk.getValue(context);
		}
		public void setPlBlk(String value)
		{
			cxl_PlBlk.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PlBlk = null;
		public boolean getInfantsIsNotNull()
		{
			return !cxl_Infants.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeLiteVoCollection getInfants()
		{
			return (ims.core.vo.InpatientEpisodeLiteVoCollection)cxl_Infants.getValue(context);
		}
		public void setInfants(ims.core.vo.InpatientEpisodeLiteVoCollection value)
		{
			cxl_Infants.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Infants = null;
		public boolean getPendingInfantTransferIsNotNull()
		{
			return !cxl_PendingInfantTransfer.getValueIsNull(context);
		}
		public ims.core.vo.PendingTransfersLiteVo getPendingInfantTransfer()
		{
			return (ims.core.vo.PendingTransfersLiteVo)cxl_PendingInfantTransfer.getValue(context);
		}
		public void setPendingInfantTransfer(ims.core.vo.PendingTransfersLiteVo value)
		{
			cxl_PendingInfantTransfer.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingInfantTransfer = null;
		public boolean getIsReadOnlyIsNotNull()
		{
			return !cxl_IsReadOnly.getValueIsNull(context);
		}
		public Boolean getIsReadOnly()
		{
			return (Boolean)cxl_IsReadOnly.getValue(context);
		}
		public void setIsReadOnly(Boolean value)
		{
			cxl_IsReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsReadOnly = null;
		public boolean getShowVTERiskAssessmentButtonIsNotNull()
		{
			return !cxl_ShowVTERiskAssessmentButton.getValueIsNull(context);
		}
		public Boolean getShowVTERiskAssessmentButton()
		{
			return (Boolean)cxl_ShowVTERiskAssessmentButton.getValue(context);
		}
		public void setShowVTERiskAssessmentButton(Boolean value)
		{
			cxl_ShowVTERiskAssessmentButton.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowVTERiskAssessmentButton = null;
		public boolean getInpatientEpForVTERiskAssessmentVoIsNotNull()
		{
			return !cxl_InpatientEpForVTERiskAssessmentVo.getValueIsNull(context);
		}
		public ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo getInpatientEpForVTERiskAssessmentVo()
		{
			return (ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo)cxl_InpatientEpForVTERiskAssessmentVo.getValue(context);
		}
		public void setInpatientEpForVTERiskAssessmentVo(ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo value)
		{
			cxl_InpatientEpForVTERiskAssessmentVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientEpForVTERiskAssessmentVo = null;
		public boolean getVTEShouldCreateIsNotNull()
		{
			return !cxl_VTEShouldCreate.getValueIsNull(context);
		}
		public Boolean getVTEShouldCreate()
		{
			return (Boolean)cxl_VTEShouldCreate.getValue(context);
		}
		public void setVTEShouldCreate(Boolean value)
		{
			cxl_VTEShouldCreate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VTEShouldCreate = null;
		public boolean getVTERiskAssessmentShortVoIsNotNull()
		{
			return !cxl_VTERiskAssessmentShortVo.getValueIsNull(context);
		}
		public ims.clinical.vo.VTERiskAssessmentShortVo getVTERiskAssessmentShortVo()
		{
			return (ims.clinical.vo.VTERiskAssessmentShortVo)cxl_VTERiskAssessmentShortVo.getValue(context);
		}
		public void setVTERiskAssessmentShortVo(ims.clinical.vo.VTERiskAssessmentShortVo value)
		{
			cxl_VTERiskAssessmentShortVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VTERiskAssessmentShortVo = null;
		public boolean getMessageBoxAdmissionIsNotNull()
		{
			return !cxl_MessageBoxAdmission.getValueIsNull(context);
		}
		public Integer getMessageBoxAdmission()
		{
			return (Integer)cxl_MessageBoxAdmission.getValue(context);
		}
		public void setMessageBoxAdmission(Integer value)
		{
			cxl_MessageBoxAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxAdmission = null;
		public boolean getMessageBoxDischargeIsNotNull()
		{
			return !cxl_MessageBoxDischarge.getValueIsNull(context);
		}
		public Integer getMessageBoxDischarge()
		{
			return (Integer)cxl_MessageBoxDischarge.getValue(context);
		}
		public void setMessageBoxDischarge(Integer value)
		{
			cxl_MessageBoxDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDischarge = null;
		public boolean getPatientElectiveListDischargeIsNotNull()
		{
			return !cxl_PatientElectiveListDischarge.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListBedAdmissionVo getPatientElectiveListDischarge()
		{
			return (ims.RefMan.vo.PatientElectiveListBedAdmissionVo)cxl_PatientElectiveListDischarge.getValue(context);
		}
		public void setPatientElectiveListDischarge(ims.RefMan.vo.PatientElectiveListBedAdmissionVo value)
		{
			cxl_PatientElectiveListDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveListDischarge = null;
		public boolean getMessageBoxPELCheckIsNotNull()
		{
			return !cxl_MessageBoxPELCheck.getValueIsNull(context);
		}
		public Integer getMessageBoxPELCheck()
		{
			return (Integer)cxl_MessageBoxPELCheck.getValue(context);
		}
		public void setMessageBoxPELCheck(Integer value)
		{
			cxl_MessageBoxPELCheck.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxPELCheck = null;
		public boolean getInpatientEpisodeSpecialtyIsNotNull()
		{
			return !cxl_InpatientEpisodeSpecialty.getValueIsNull(context);
		}
		public ims.core.vo.lookups.Specialty getInpatientEpisodeSpecialty()
		{
			return (ims.core.vo.lookups.Specialty)cxl_InpatientEpisodeSpecialty.getValue(context);
		}
		public void setInpatientEpisodeSpecialty(ims.core.vo.lookups.Specialty value)
		{
			cxl_InpatientEpisodeSpecialty.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientEpisodeSpecialty = null;
		public boolean getTabFocusedIsNotNull()
		{
			return !cxl_TabFocused.getValueIsNull(context);
		}
		public ims.core.vo.enums.BedDialogPatientDataTabs getTabFocused()
		{
			return (ims.core.vo.enums.BedDialogPatientDataTabs)cxl_TabFocused.getValue(context);
		}
		public void setTabFocused(ims.core.vo.enums.BedDialogPatientDataTabs value)
		{
			cxl_TabFocused.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TabFocused = null;
		public boolean getMessageBoxAdmissionApptsExistIsNotNull()
		{
			return !cxl_MessageBoxAdmissionApptsExist.getValueIsNull(context);
		}
		public Integer getMessageBoxAdmissionApptsExist()
		{
			return (Integer)cxl_MessageBoxAdmissionApptsExist.getValue(context);
		}
		public void setMessageBoxAdmissionApptsExist(Integer value)
		{
			cxl_MessageBoxAdmissionApptsExist.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxAdmissionApptsExist = null;
		public boolean getDeathDetailsOnDischargeIsNotNull()
		{
			return !cxl_DeathDetailsOnDischarge.getValueIsNull(context);
		}
		public ims.core.vo.DeathDetailsVo getDeathDetailsOnDischarge()
		{
			return (ims.core.vo.DeathDetailsVo)cxl_DeathDetailsOnDischarge.getValue(context);
		}
		public void setDeathDetailsOnDischarge(ims.core.vo.DeathDetailsVo value)
		{
			cxl_DeathDetailsOnDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeathDetailsOnDischarge = null;
		public boolean getTempMotherPatientIsNotNull()
		{
			return !cxl_TempMotherPatient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getTempMotherPatient()
		{
			return (ims.core.vo.PatientShort)cxl_TempMotherPatient.getValue(context);
		}
		public void setTempMotherPatient(ims.core.vo.PatientShort value)
		{
			cxl_TempMotherPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TempMotherPatient = null;
		public boolean getbCancelPatientAppointmentsIsNotNull()
		{
			return !cxl_bCancelPatientAppointments.getValueIsNull(context);
		}
		public Boolean getbCancelPatientAppointments()
		{
			return (Boolean)cxl_bCancelPatientAppointments.getValue(context);
		}
		public void setbCancelPatientAppointments(Boolean value)
		{
			cxl_bCancelPatientAppointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bCancelPatientAppointments = null;
		public boolean getCancelAppointmentsMessageIDIsNotNull()
		{
			return !cxl_CancelAppointmentsMessageID.getValueIsNull(context);
		}
		public Integer getCancelAppointmentsMessageID()
		{
			return (Integer)cxl_CancelAppointmentsMessageID.getValue(context);
		}
		public void setCancelAppointmentsMessageID(Integer value)
		{
			cxl_CancelAppointmentsMessageID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CancelAppointmentsMessageID = null;
		public boolean getMessageBoxMoveCaseNotesIsNotNull()
		{
			return !cxl_MessageBoxMoveCaseNotes.getValueIsNull(context);
		}
		public Integer getMessageBoxMoveCaseNotes()
		{
			return (Integer)cxl_MessageBoxMoveCaseNotes.getValue(context);
		}
		public void setMessageBoxMoveCaseNotes(Integer value)
		{
			cxl_MessageBoxMoveCaseNotes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxMoveCaseNotes = null;
		public boolean getPatientCaseNotesCollectionIsNotNull()
		{
			return !cxl_PatientCaseNotesCollection.getValueIsNull(context);
		}
		public ims.core.vo.PatientCaseNoteVoCollection getPatientCaseNotesCollection()
		{
			return (ims.core.vo.PatientCaseNoteVoCollection)cxl_PatientCaseNotesCollection.getValue(context);
		}
		public void setPatientCaseNotesCollection(ims.core.vo.PatientCaseNoteVoCollection value)
		{
			cxl_PatientCaseNotesCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientCaseNotesCollection = null;
		public boolean getWardConfigIsNotNull()
		{
			return !cxl_WardConfig.getValueIsNull(context);
		}
		public ims.core.vo.WardConfigLiteVo getWardConfig()
		{
			return (ims.core.vo.WardConfigLiteVo)cxl_WardConfig.getValue(context);
		}
		public void setWardConfig(ims.core.vo.WardConfigLiteVo value)
		{
			cxl_WardConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WardConfig = null;
		public boolean getAdmissionDetailsIsNotNull()
		{
			return !cxl_AdmissionDetails.getValueIsNull(context);
		}
		public ims.core.vo.AdmissionDetailVo getAdmissionDetails()
		{
			return (ims.core.vo.AdmissionDetailVo)cxl_AdmissionDetails.getValue(context);
		}
		public void setAdmissionDetails(ims.core.vo.AdmissionDetailVo value)
		{
			cxl_AdmissionDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdmissionDetails = null;
		public boolean getMessageBoxBayGenderMismatchIsNotNull()
		{
			return !cxl_MessageBoxBayGenderMismatch.getValueIsNull(context);
		}
		public Integer getMessageBoxBayGenderMismatch()
		{
			return (Integer)cxl_MessageBoxBayGenderMismatch.getValue(context);
		}
		public void setMessageBoxBayGenderMismatch(Integer value)
		{
			cxl_MessageBoxBayGenderMismatch.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxBayGenderMismatch = null;
		public boolean getMessageBoxBayMixedGenderIsNotNull()
		{
			return !cxl_MessageBoxBayMixedGender.getValueIsNull(context);
		}
		public Integer getMessageBoxBayMixedGender()
		{
			return (Integer)cxl_MessageBoxBayMixedGender.getValue(context);
		}
		public void setMessageBoxBayMixedGender(Integer value)
		{
			cxl_MessageBoxBayMixedGender.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxBayMixedGender = null;
		public boolean getMessageBoxWardBayAvailabilityIsNotNull()
		{
			return !cxl_MessageBoxWardBayAvailability.getValueIsNull(context);
		}
		public Integer getMessageBoxWardBayAvailability()
		{
			return (Integer)cxl_MessageBoxWardBayAvailability.getValue(context);
		}
		public void setMessageBoxWardBayAvailability(Integer value)
		{
			cxl_MessageBoxWardBayAvailability.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxWardBayAvailability = null;
		public boolean getbWasReviseEstDischargeDatePressedIsNotNull()
		{
			return !cxl_bWasReviseEstDischargeDatePressed.getValueIsNull(context);
		}
		public Boolean getbWasReviseEstDischargeDatePressed()
		{
			return (Boolean)cxl_bWasReviseEstDischargeDatePressed.getValue(context);
		}
		public void setbWasReviseEstDischargeDatePressed(Boolean value)
		{
			cxl_bWasReviseEstDischargeDatePressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bWasReviseEstDischargeDatePressed = null;
		public boolean getbWasConfirmPatientDischPressedIsNotNull()
		{
			return !cxl_bWasConfirmPatientDischPressed.getValueIsNull(context);
		}
		public Boolean getbWasConfirmPatientDischPressed()
		{
			return (Boolean)cxl_bWasConfirmPatientDischPressed.getValue(context);
		}
		public void setbWasConfirmPatientDischPressed(Boolean value)
		{
			cxl_bWasConfirmPatientDischPressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bWasConfirmPatientDischPressed = null;
		public boolean getbHasHomeLeaveReturnsIsNotNull()
		{
			return !cxl_bHasHomeLeaveReturns.getValueIsNull(context);
		}
		public Boolean getbHasHomeLeaveReturns()
		{
			return (Boolean)cxl_bHasHomeLeaveReturns.getValue(context);
		}
		public void setbHasHomeLeaveReturns(Boolean value)
		{
			cxl_bHasHomeLeaveReturns.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bHasHomeLeaveReturns = null;
		public boolean getHomeLeaveToReOpenIsNotNull()
		{
			return !cxl_HomeLeaveToReOpen.getValueIsNull(context);
		}
		public ims.core.vo.HomeLeaveVo getHomeLeaveToReOpen()
		{
			return (ims.core.vo.HomeLeaveVo)cxl_HomeLeaveToReOpen.getValue(context);
		}
		public void setHomeLeaveToReOpen(ims.core.vo.HomeLeaveVo value)
		{
			cxl_HomeLeaveToReOpen.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HomeLeaveToReOpen = null;
		public boolean getSortOrderBedNoIsNotNull()
		{
			return !cxl_SortOrderBedNo.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderBedNo()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderBedNo.getValue(context);
		}
		public void setSortOrderBedNo(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderBedNo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderBedNo = null;
		public boolean getMessageBoxDeceasedPatientTransferOutIsNotNull()
		{
			return !cxl_MessageBoxDeceasedPatientTransferOut.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedPatientTransferOut()
		{
			return (Integer)cxl_MessageBoxDeceasedPatientTransferOut.getValue(context);
		}
		public void setMessageBoxDeceasedPatientTransferOut(Integer value)
		{
			cxl_MessageBoxDeceasedPatientTransferOut.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedPatientTransferOut = null;
		public boolean getMessageBoxDeceasedPatientTransferConsultantIsNotNull()
		{
			return !cxl_MessageBoxDeceasedPatientTransferConsultant.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedPatientTransferConsultant()
		{
			return (Integer)cxl_MessageBoxDeceasedPatientTransferConsultant.getValue(context);
		}
		public void setMessageBoxDeceasedPatientTransferConsultant(Integer value)
		{
			cxl_MessageBoxDeceasedPatientTransferConsultant.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedPatientTransferConsultant = null;
		public boolean getMessageBoxDeceasedReturnFromLeaveIsNotNull()
		{
			return !cxl_MessageBoxDeceasedReturnFromLeave.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedReturnFromLeave()
		{
			return (Integer)cxl_MessageBoxDeceasedReturnFromLeave.getValue(context);
		}
		public void setMessageBoxDeceasedReturnFromLeave(Integer value)
		{
			cxl_MessageBoxDeceasedReturnFromLeave.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedReturnFromLeave = null;
		public boolean getMessageBoxDeceasedReadyForDischargeIsNotNull()
		{
			return !cxl_MessageBoxDeceasedReadyForDischarge.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedReadyForDischarge()
		{
			return (Integer)cxl_MessageBoxDeceasedReadyForDischarge.getValue(context);
		}
		public void setMessageBoxDeceasedReadyForDischarge(Integer value)
		{
			cxl_MessageBoxDeceasedReadyForDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedReadyForDischarge = null;
		public boolean getMessageBoxDeceasedHomeLeaveIsNotNull()
		{
			return !cxl_MessageBoxDeceasedHomeLeave.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedHomeLeave()
		{
			return (Integer)cxl_MessageBoxDeceasedHomeLeave.getValue(context);
		}
		public void setMessageBoxDeceasedHomeLeave(Integer value)
		{
			cxl_MessageBoxDeceasedHomeLeave.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedHomeLeave = null;
		public boolean getMessageBoxDeceasedBedMoveIsNotNull()
		{
			return !cxl_MessageBoxDeceasedBedMove.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedBedMove()
		{
			return (Integer)cxl_MessageBoxDeceasedBedMove.getValue(context);
		}
		public void setMessageBoxDeceasedBedMove(Integer value)
		{
			cxl_MessageBoxDeceasedBedMove.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedBedMove = null;
		public boolean getMessageBoxDeceasedReturnFromLeaveAdmitIsNotNull()
		{
			return !cxl_MessageBoxDeceasedReturnFromLeaveAdmit.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedReturnFromLeaveAdmit()
		{
			return (Integer)cxl_MessageBoxDeceasedReturnFromLeaveAdmit.getValue(context);
		}
		public void setMessageBoxDeceasedReturnFromLeaveAdmit(Integer value)
		{
			cxl_MessageBoxDeceasedReturnFromLeaveAdmit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedReturnFromLeaveAdmit = null;
		public boolean getMessageBoxDeceasedEditHomeLeaveIsNotNull()
		{
			return !cxl_MessageBoxDeceasedEditHomeLeave.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedEditHomeLeave()
		{
			return (Integer)cxl_MessageBoxDeceasedEditHomeLeave.getValue(context);
		}
		public void setMessageBoxDeceasedEditHomeLeave(Integer value)
		{
			cxl_MessageBoxDeceasedEditHomeLeave.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedEditHomeLeave = null;
		public boolean getMessageBoxDeceasedVacateBedHomeLeaveIsNotNull()
		{
			return !cxl_MessageBoxDeceasedVacateBedHomeLeave.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedVacateBedHomeLeave()
		{
			return (Integer)cxl_MessageBoxDeceasedVacateBedHomeLeave.getValue(context);
		}
		public void setMessageBoxDeceasedVacateBedHomeLeave(Integer value)
		{
			cxl_MessageBoxDeceasedVacateBedHomeLeave.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedVacateBedHomeLeave = null;
		public boolean getMessageBoxVTENotCompletedOnDischargeIsNotNull()
		{
			return !cxl_MessageBoxVTENotCompletedOnDischarge.getValueIsNull(context);
		}
		public Integer getMessageBoxVTENotCompletedOnDischarge()
		{
			return (Integer)cxl_MessageBoxVTENotCompletedOnDischarge.getValue(context);
		}
		public void setMessageBoxVTENotCompletedOnDischarge(Integer value)
		{
			cxl_MessageBoxVTENotCompletedOnDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxVTENotCompletedOnDischarge = null;
		public boolean getbWasReadyToLeavePressedIsNotNull()
		{
			return !cxl_bWasReadyToLeavePressed.getValueIsNull(context);
		}
		public Boolean getbWasReadyToLeavePressed()
		{
			return (Boolean)cxl_bWasReadyToLeavePressed.getValue(context);
		}
		public void setbWasReadyToLeavePressed(Boolean value)
		{
			cxl_bWasReadyToLeavePressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bWasReadyToLeavePressed = null;
		public boolean getMessageBoxUndoReadyToLeaveIsNotNull()
		{
			return !cxl_MessageBoxUndoReadyToLeave.getValueIsNull(context);
		}
		public Integer getMessageBoxUndoReadyToLeave()
		{
			return (Integer)cxl_MessageBoxUndoReadyToLeave.getValue(context);
		}
		public void setMessageBoxUndoReadyToLeave(Integer value)
		{
			cxl_MessageBoxUndoReadyToLeave.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxUndoReadyToLeave = null;
		public boolean getMessageBoxUndoConfirmedDischargeIsNotNull()
		{
			return !cxl_MessageBoxUndoConfirmedDischarge.getValueIsNull(context);
		}
		public Integer getMessageBoxUndoConfirmedDischarge()
		{
			return (Integer)cxl_MessageBoxUndoConfirmedDischarge.getValue(context);
		}
		public void setMessageBoxUndoConfirmedDischarge(Integer value)
		{
			cxl_MessageBoxUndoConfirmedDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxUndoConfirmedDischarge = null;
		public boolean getSortOrderInfantsDOBIsNotNull()
		{
			return !cxl_SortOrderInfantsDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderInfantsDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderInfantsDOB.getValue(context);
		}
		public void setSortOrderInfantsDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderInfantsDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderInfantsDOB = null;
		public boolean getSortOrderBedMoveDOBIsNotNull()
		{
			return !cxl_SortOrderBedMoveDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderBedMoveDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderBedMoveDOB.getValue(context);
		}
		public void setSortOrderBedMoveDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderBedMoveDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderBedMoveDOB = null;
		public boolean getSortOrderBedMoveAgeIsNotNull()
		{
			return !cxl_SortOrderBedMoveAge.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderBedMoveAge()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderBedMoveAge.getValue(context);
		}
		public void setSortOrderBedMoveAge(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderBedMoveAge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderBedMoveAge = null;
		public boolean getMessageBoxDeceasedTrackingSendIsNotNull()
		{
			return !cxl_MessageBoxDeceasedTrackingSend.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedTrackingSend()
		{
			return (Integer)cxl_MessageBoxDeceasedTrackingSend.getValue(context);
		}
		public void setMessageBoxDeceasedTrackingSend(Integer value)
		{
			cxl_MessageBoxDeceasedTrackingSend.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedTrackingSend = null;
		public boolean getMessageBoxDeceasedTrackingReturnIsNotNull()
		{
			return !cxl_MessageBoxDeceasedTrackingReturn.getValueIsNull(context);
		}
		public Integer getMessageBoxDeceasedTrackingReturn()
		{
			return (Integer)cxl_MessageBoxDeceasedTrackingReturn.getValue(context);
		}
		public void setMessageBoxDeceasedTrackingReturn(Integer value)
		{
			cxl_MessageBoxDeceasedTrackingReturn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDeceasedTrackingReturn = null;
		public boolean getMessageBoxHomeLeaveTrackingSendIsNotNull()
		{
			return !cxl_MessageBoxHomeLeaveTrackingSend.getValueIsNull(context);
		}
		public Integer getMessageBoxHomeLeaveTrackingSend()
		{
			return (Integer)cxl_MessageBoxHomeLeaveTrackingSend.getValue(context);
		}
		public void setMessageBoxHomeLeaveTrackingSend(Integer value)
		{
			cxl_MessageBoxHomeLeaveTrackingSend.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxHomeLeaveTrackingSend = null;
		public boolean getMessageBoxCancelAdmissionSentIsNotNull()
		{
			return !cxl_MessageBoxCancelAdmissionSent.getValueIsNull(context);
		}
		public Integer getMessageBoxCancelAdmissionSent()
		{
			return (Integer)cxl_MessageBoxCancelAdmissionSent.getValue(context);
		}
		public void setMessageBoxCancelAdmissionSent(Integer value)
		{
			cxl_MessageBoxCancelAdmissionSent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxCancelAdmissionSent = null;
		public boolean getShowMessageBoxReviseEstDischargeDateIsNotNull()
		{
			return !cxl_ShowMessageBoxReviseEstDischargeDate.getValueIsNull(context);
		}
		public Boolean getShowMessageBoxReviseEstDischargeDate()
		{
			return (Boolean)cxl_ShowMessageBoxReviseEstDischargeDate.getValue(context);
		}
		public void setShowMessageBoxReviseEstDischargeDate(Boolean value)
		{
			cxl_ShowMessageBoxReviseEstDischargeDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowMessageBoxReviseEstDischargeDate = null;
		public boolean getAnsweredYesOnDemographicsCancelFutureApptsIsNotNull()
		{
			return !cxl_AnsweredYesOnDemographicsCancelFutureAppts.getValueIsNull(context);
		}
		public Boolean getAnsweredYesOnDemographicsCancelFutureAppts()
		{
			return (Boolean)cxl_AnsweredYesOnDemographicsCancelFutureAppts.getValue(context);
		}
		public void setAnsweredYesOnDemographicsCancelFutureAppts(Boolean value)
		{
			cxl_AnsweredYesOnDemographicsCancelFutureAppts.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnsweredYesOnDemographicsCancelFutureAppts = null;
		public boolean getIsCaseNoteFolderVisibleIsNotNull()
		{
			return !cxl_IsCaseNoteFolderVisible.getValueIsNull(context);
		}
		public Boolean getIsCaseNoteFolderVisible()
		{
			return (Boolean)cxl_IsCaseNoteFolderVisible.getValue(context);
		}
		public void setIsCaseNoteFolderVisible(Boolean value)
		{
			cxl_IsCaseNoteFolderVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsCaseNoteFolderVisible = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[337];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ID", "ID_Location");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-NAME", "Name");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISACTIVE", "IsActive");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-TYPE", "Type");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-CASENOTEFOLDERLOCATION", "CaseNoteFolderLocation");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISCONFIRMEDDISCHARGE", "IsConfirmedDischarge");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-CONFIRMEDDISCHARGEDATETIME", "ConfirmedDischargeDateTime");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISMATERNITYINPATIENT", "IsMaternityInpatient");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISONHOMELEAVE", "IsOnHomeLeave");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VACATEDBEDNUMBER", "VacatedBedNumber");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTEASSESSMENTSTATUSREASON", "VTEAssessmentStatusReason");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-TIMEONHOMELEAVE", "TimeOnHomeLeave");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISREADYTOLEAVE", "IsReadyToLeave");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-READYTOLEAVEDECISIONDATETIME", "ReadyToLeaveDecisionDateTime");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Core.VTERiskAssessmentShortVo", "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Core.VTERiskAssessmentShortVo", "BO-1072100100-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEDATETIME", "DischargeDateTime");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ISACTIVE", "IsActive");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEDESTINATION", "DischargeDestination");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASTREATMENTDEFERRED", "WasTreatmentDeferred");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-EIGHTEENWEEKCLOCKSTOPPED", "EighteenWeekClockStopped");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ADMISSIONDETAIL", "AdmissionDetail");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASDIAGNOSTICDEFERRED", "WasDiagnosticDeferred");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASTREATMENTGIVEN", "WasTreatmentGiven");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DEREFERREDREASON", "DeferredReason");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGINGWARD", "DischargingWard");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ISMATERNITY", "IsMaternity");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-NOOFINFANTS", "NoOfInfants");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-COMMENT", "Comment");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Core.HealthyLodgerDetails", "BO-1014100029-ID", "ID_HealthyLodger");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_Core.HealthyLodgerDetails", "BO-1014100029-RELATIONSHIPTOPATIENT", "RelationshipToPatient");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-ID", "ID_DeathDetails");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-DEATHPLACEOFDEATH", "DeathPlaceofDeath");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-DEATHCAUSEESTABLISHED", "DeathCauseEstablished");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-CANCERRELATEDDEATH", "CancerRelatedDeath");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-DEATHCODEDISCREPENCY", "DeathCodeDiscrepency");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-REFERREDTOCORRONER", "ReferredToCorroner");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_Core.DeathDetails", "BO-1003100060-POSTMORTEM", "PostMortem");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-ID", "ID_PendingTransfers");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-TRANSFERREQUESTDATETIME", "TransferRequestDateTime");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-CURRENTSTATUS", "CurrentStatus");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-WARDTYPE", "WardType");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-CONSULTANT", "Consultant");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-SPECIALTY", "Specialty");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-PASSPECIALTY", "PASSpecialty");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-TRANSFERREASON", "TransferReason");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-TRANSFERCOMMENT", "TransferComment");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-PATIENTSTATUS", "PatientStatus");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_Core.ADTPendingTransfer", "BO-1014100013-BEDAVAILABLEDATETIME", "BedAvailableDateTime");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-ID", "ID_HomeLeave");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-TIMEONHOMELEAVE", "TimeOnHomeLeave");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-DATERETURNEDFROMHOMELEAVE", "DateReturnedFromHomeLeave");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-TIMERETURNEDFROMHOMELEAVE", "TimeReturnedFromHomeLeave");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-VACATEDBEDNUMBER", "VacatedBedNumber");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_Core.HomeLeaveDetails", "BO-1014100017-BEDRETAINED", "BedRetained");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_Core.WardViewPatientListWard", "BO-1007100007-ID", "ID_Location");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-ID", "ID_PendingTransfers");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-TRANSFERREQUESTDATETIME", "TransferRequestDateTime");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-CURRENTSTATUS", "CurrentStatus");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-WARDTYPE", "WardType");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-CONSULTANT", "Consultant");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-SPECIALTY", "Specialty");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-PASSPECIALTY", "PASSpecialty");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-TRANSFERREASON", "TransferReason");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-TRANSFERCOMMENT", "TransferComment");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-PATIENTSTATUS", "PatientStatus");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-BEDAVAILABLEDATETIME", "BedAvailableDateTime");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-ID", "ID_BedSpaceStateStatus");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-BEDSTATUS", "BedStatus");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-STATUSDATETIME", "StatusDateTime");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-REASONFORCLOSURE", "ReasonForClosure");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-ESTREOPENINGDATETIME", "EstReopeningDateTime");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-ID", "ID_PendingTransfers");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-TRANSFERREQUESTDATETIME", "TransferRequestDateTime");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-CURRENTSTATUS", "CurrentStatus");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-WARDTYPE", "WardType");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-CONSULTANT", "Consultant");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-SPECIALTY", "Specialty");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-PASSPECIALTY", "PASSpecialty");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-TRANSFERREASON", "TransferReason");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-TRANSFERCOMMENT", "TransferComment");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-PATIENTSTATUS", "PatientStatus");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-BEDAVAILABLEDATETIME", "BedAvailableDateTime");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-PASEVENT", "PasEvent");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUSREASON", "VTEAssessmentStatusReason");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-CONFIRMEDDISCHARGEDATETIME", "ConfirmedDischargeDateTime");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ISONHOMELEAVE", "IsOnHomeLeave");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-TIMEONHOMELEAVE", "TimeOnHomeLeave");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ISCONFIRMEDDISCHARGE", "IsConfirmedDischarge");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentShortVo_" + componentIdentifier, "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentShortVo_" + componentIdentifier, "BO-1072100100-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-SUBJECTTO28DAYRULE", "SubjectTo28DayRule");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-RULE28DAYSTATUS", "Rule28DayStatus");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-RULE28DAYPERIODSTART", "Rule28DayPeriodStart");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-ID", "ID_DeathDetails");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-DEATHPLACEOFDEATH", "DeathPlaceofDeath");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-DEATHCAUSEESTABLISHED", "DeathCauseEstablished");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-CANCERRELATEDDEATH", "CancerRelatedDeath");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-DEATHCODEDISCREPENCY", "DeathCodeDiscrepency");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-REFERREDTOCORRONER", "ReferredToCorroner");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__DeathDetailsOnDischarge_" + componentIdentifier, "BO-1003100060-POSTMORTEM", "PostMortem");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__TempMotherPatient_" + componentIdentifier, "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier, "BO-1014100014-ID", "ID_WardBayConfig");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier, "BO-1014100014-MAINSPECIALTY", "MainSpecialty");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier, "BO-1014100014-ISWAITINGAREA", "IsWaitingArea");
			fields[304] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier, "BO-1014100014-NUMOFBEDS", "NumOfBeds");
			fields[305] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier, "BO-1014100014-NUMOFOCCUPIEDBEDS", "NumOfOccupiedBeds");
			fields[306] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__WardConfig_" + componentIdentifier, "BO-1014100014-WARDSTATUS", "WardAvailabilityStatus");
			fields[307] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-ID", "ID_AdmissionDetail");
			fields[308] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[309] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-BED", "Bed");
			fields[310] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-SPECIALTY", "Specialty");
			fields[311] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-WARDTYPE", "WardType");
			fields[312] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-METHODOFADMISSION", "MethodOfAdmission");
			fields[313] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-SOURCEOFADMISSION", "SourceOfAdmission");
			fields[314] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-REASONFORADMISSION", "ReasonForAdmission");
			fields[315] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[316] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-ISCHAPLAINREQUIRED", "IsChaplainRequired");
			fields[317] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-PATIENTSTATUS", "PatientStatus");
			fields[318] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-UPDATECFL", "UpdateCFL");
			fields[319] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[320] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-CASEFOLDERCOMMENTS", "CaseFolderComments");
			fields[321] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-EXTENDEDLENGTHOFSTAYREASON", "ExtendedLengthOfStayReason");
			fields[322] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-MEDICALLYFITFORDISCHARGE", "MedicallyFitForDischarge");
			fields[323] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-PATIENTREQUIRESTRANSPORT", "PatientRequiresTransport");
			fields[324] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-ABLETOGODISCHARGELOUNGE", "AbleToGoDischargeLounge");
			fields[325] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-REASONCANNOTGODISCHARGELOUNGE", "ReasonCannotGoDischargeLounge");
			fields[326] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-SELFADMITPATIENT", "SelfAdmitPatient");
			fields[327] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__AdmissionDetails_" + componentIdentifier, "BO-1014100008-SOURCEOFEMERGENCYREFERRAL", "SourceOfEmergencyReferral");
			fields[328] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-ID", "ID_HomeLeave");
			fields[329] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[330] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-TIMEONHOMELEAVE", "TimeOnHomeLeave");
			fields[331] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[332] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[333] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-DATERETURNEDFROMHOMELEAVE", "DateReturnedFromHomeLeave");
			fields[334] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-TIMERETURNEDFROMHOMELEAVE", "TimeReturnedFromHomeLeave");
			fields[335] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-VACATEDBEDNUMBER", "VacatedBedNumber");
			fields[336] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__HomeLeaveToReOpen_" + componentIdentifier, "BO-1014100017-BEDRETAINED", "BedRetained");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
