//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.forms.pdsrelativessynchronization;

import ims.core.helper.PdsException;
import ims.core.helper.PdsQuery;
import ims.core.vo.lookups.PDSBackOfficeType;
import ims.core.vo.lookups.PDSBackOfficeWorkPriority;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ccRelativesSynchronization().setRelatives(form.getGlobalContext().Core.getPdsRelativesSynchronization());
		form.ccRelativesSynchronization().initialize();
	}
	@Override
	protected void onBtnConfirmClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setPdsRelativesSynchronization(form.ccRelativesSynchronization().getRelatives());
		form.getGlobalContext().Core.setSynchronizeRelatives(true);
		engine.close(DialogResult.CONFIRM);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		int count = 0;
		
		try
		{
			count = domain.countBackOfficeEntries(PDSBackOfficeType.PATIENT_PDS_REL_SYN, form.getGlobalContext().Core.getPatientShort());
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			
			engine.showMessage("Error getting back office entries for current patient!", "Error", MessageButtons.OK);
			return;
		}
		
		if(count == 0)
		{
			PdsQuery helper = new PdsQuery(domain);
			
			helper.setPatientInContext(form.getGlobalContext().Core.getPatientShort());
			if(form.getGlobalContext().Core.getPatientShort().getNhsn() != null)
			{
    			String nhs = form.getGlobalContext().Core.getPatientShort().getNhsn().getValue();
    			
    			if(nhs != null)
    				nhs = nhs.replace(" ", "");
    			
    			helper.setNhsNumber(nhs);
			}
			
			try
			{
				helper.createBackOfficeItemAndNotification(PDSBackOfficeType.PATIENT_PDS_REL_SYN, "Patient Relatives update deferred.", PDSBackOfficeWorkPriority.P2);
			}
			catch (PdsException e)
			{
				e.printStackTrace();
				String err = "Error creating BackOfficeItemAndNotification: " + e.toString();
				engine.showMessage(err, "Error", MessageButtons.OK);
				return;
			}
		}
		
		form.getGlobalContext().Core.setPdsRelativesSynchronization(null);
		form.getGlobalContext().Core.setSynchronizeRelatives(null);
		engine.close(DialogResult.CANCEL);
	}
}
