//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.62 build 3112.33410)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.wardview;

import ims.clinical.vo.lookups.VTEAsessmentStatus;
import ims.clinical.vo.lookups.VTEAssessmentStatusReason;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.vo.AdmissionDetailMotherVo;
import ims.core.vo.BayConfigForWardViewVo;
import ims.core.vo.BayConfigVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateShortVo;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceVo;
import ims.core.vo.BedSpaceVoCollection;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.FloorBedSpaceLayoutVo;
import ims.core.vo.HealthyLodgerVo;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.InpatientEpisodeShortVo;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientElectiveListForWardViewVo;
import ims.core.vo.PatientElectiveListForWardViewVoCollection;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVoCollection;
import ims.core.vo.PendingEmergencyAdmissionAdmitVo;
import ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.PendingTransfersLiteVoCollection;
import ims.core.vo.WardBayBlockingDetailsVo;
import ims.core.vo.WardBayClosingDetailsVo;
import ims.core.vo.WardBayConfigForWardViewVo;
import ims.core.vo.WardBedStateVo;
import ims.core.vo.WardBedStateVoCollection;
import ims.core.vo.WardViewSearchCriteriaVo;
import ims.core.vo.enums.AdmitToWardMode;
import ims.core.vo.enums.BedInfoAction;
import ims.core.vo.enums.CloseBlockReOpenBayWardForWardView;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.WardBayStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.WindowParam;
import ims.framework.controls.Bed;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.Position;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Image;
import ims.framework.utils.Time;
import ims.framework.utils.beans.ColorBean;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	public static final String	COLNAME							= "-1";	
	public static final Integer	CURRENT							= -5;
	public static final Integer	INCOMING_ADMISION				= -6;
	public static final Integer	INCOMING_PENDING_TRANSFERS		= -7;
	public static final Integer	OUTGOING_DISCHARGE				= -8;
	public static final Integer	OUTGOING_PENDING_TRANSFERS		= -9;
	public static final Integer	HOME_LEAVE						= -10;
	
	public static final String RHS_TYPE_PATIENTS_SUMMARY = "Patients Summary";
	public static final String RHS_TYPE_WARD_SUMMARY = "Ward Summary";
	
	public static final String AMBER_COLOR_HEXA_CODE = "#FFBF00";
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		initialise();
		loadHospitals();

		if (engine.isDialog())
		{
			if (form.getGlobalContext().Core.getCurrentInPatientListWardIsNotNull())
			{
				clearDisplay(false);

				LocMostVo voLoc = domain.getLocation(form.getGlobalContext().Core.getCurrentInPatientListWard());
				//WDEV-20272 -1
				form.cmbHospital().setValue(getHospitalLocation(voLoc));
				loadWardsForSelectedHosp();
				if (!form.cmbWard().getValues().contains(voLoc))
				{
					form.cmbWard().newRow(voLoc, voLoc.getName());
				}
				form.cmbWard().setValue(voLoc);
				
				wardValueChanged();
			}
			if (form.getGlobalContext().Core.getSelectedBayIsNotNull())
			{
				LocationLiteVo bayToDefaultIn = getSelectedBay(form.cmbBay().getValues());
				if (bayToDefaultIn != null)
				{
					form.cmbBay().setValue(bayToDefaultIn);
					bayValueChanged();								
				}
				populateSearchCriteriaDataFromScreen();
			}
			return;
		}
		
		if (form.getGlobalContext().Core.getWardViewSearchCriteriaIsNotNull())///WDEV-12925 - Start
		{
			form.cmbHospital().setValue(form.getGlobalContext().Core.getWardViewSearchCriteria().getHospital());
			loadWardsForSelectedHosp();
			form.cmbWard().setValue(form.getGlobalContext().Core.getWardViewSearchCriteria().getWard());
			wardValueChanged();
			form.cmbBay().setValue(form.getGlobalContext().Core.getWardViewSearchCriteria().getBay());
			bayValueChanged();
			
		
		}///WDEV-12925 - End
		else
		{
    		//WDEV-15908 - starts here
    		ILocation currentLocation = engine.getCurrentLocation();
    		LocationLiteVo currentHospiptal = domain.getCurrentHospital(currentLocation);
    		form.cmbHospital().setValue(currentHospiptal);
    		
    		loadWardsForSelectedHosp();
    		if(currentLocation instanceof LocationLiteVo)
    		{
    			form.cmbWard().setValue((LocationLiteVo) currentLocation);
    			wardValueChanged();
    		}
    		
    		if(form.cmbWard().getValue() == null && form.cmbWard().getValues() != null && form.cmbWard().getValues().size() == 1)
    		{
    			if(form.cmbWard().getValues().get(0) instanceof LocationLiteVo)
    			{
    				form.cmbWard().setValue((LocationLiteVo) form.cmbWard().getValues().get(0));
    				wardValueChanged();
    			}
    		}
    		//WDEV-15908 - ends here
		}
	}

	
	private LocationLiteVo getSelectedBay(ArrayList<LocationLiteVo> values)
	{
		if (values.size() < 2)
			return null;
		for (int i=0;i<values.size();i++)
		{
			if (values.get(i) instanceof LocationLiteVo && ((LocationLiteVo)values.get(i)).getID_Location().equals(form.getGlobalContext().Core.getSelectedBay().getID_Location()))
					return values.get(i);
		}
		return null;
	}


	private LocMostVo getHospitalLocation(LocMostVo voLoc) {
		
			if(voLoc.getParentLocationIsNotNull())
			{
				 return getHospitalLocation(voLoc.getParentLocation());
			}
		return LocationType.HOSP.equals(voLoc.getType()) ? voLoc : null;
	}

	private void initialise()
	{
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.WARDVIEW_TIMER_INTERVAL.getValue());
		form.lblMainSpecialty().setValue("");
		form.lblMainSpecialty().setTooltip("");
		form.htmWardStatus().setHTML("");
		form.imbRefresh().setEnabled(false);
		form.btnClose().setVisible(isAlias());//WDEV-20276 -2
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			form.getGlobalContext().Core.setSelectingPatientForm(null);
			form.getGlobalContext().Core.setPatientShort(null);
		}
		form.ccPatientSummary().initialize();
		form.dyngrdDisplay().setVisible(ConfigFlag.UI.WARD_VIEW_RHS_TYPE.getValue().equals(RHS_TYPE_WARD_SUMMARY));
		form.ccPatientSummary().setVisible(ConfigFlag.UI.WARD_VIEW_RHS_TYPE.getValue().equals(RHS_TYPE_PATIENTS_SUMMARY));
	}


	private boolean isAlias()
	{
		return engine.getFormName().equals(form.getForms().Core.WardViewDialog);
	}
	private void loadHospitals()
	{
		LocationLiteVoCollection hospColl = domain.listActiveHospitalsLite();
		if(hospColl != null)
		{
			for(int x = 0; x < hospColl.size(); x++)
			{
				if(hospColl.get(x) != null)
					form.cmbHospital().newRow(hospColl.get(x), hospColl.get(x).getName());
			}
		}
	}

	private void addWard(LocationLiteVo ward) 
	{
		if(ward == null)
			return;
		
		form.cmbWard().newRow(ward, ward.getName());
	}

	
	@Override
	protected void onCmbWardValueChanged() throws PresentationLogicException 
	{		
		wardValueChanged();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
		
	}
	
	private void wardValueChanged()
	{
		clearDisplay(false);
		form.imbRefresh().setEnabled(false);
		form.htmWardStatus().setHTML("");
		form.lblMainSpecialty().setValue("");
		form.lblMainSpecialty().setTooltip("");
		WardBayConfigForWardViewVo voWardBayConfig = null;
		if(form.cmbWard().getValue() != null)
		{
			voWardBayConfig = domain.getWardBayConfigByWard(form.cmbWard().getValue());
			if (voWardBayConfig != null)
			{	
				if (voWardBayConfig.getMainSpecialtyIsNotNull())
				{
					form.lblMainSpecialty().setValue(voWardBayConfig.getMainSpecialty().getText().length() > 20 ? voWardBayConfig.getMainSpecialty().getText().substring(0, 20) + "..." : voWardBayConfig.getMainSpecialty().getText());
					form.lblMainSpecialty().setTooltip((voWardBayConfig.getMainSpecialty().getText().length() > 20 ? "Main Specialty: <b>" + voWardBayConfig.getMainSpecialty().getText() + "</b><br/>" : "") + "Other Specialties: <b>" + voWardBayConfig.getSpecialtiesTooltip() + "</b>");
				}				
				form.getGlobalContext().Core.setHasWaitingArea(Boolean.TRUE.equals(voWardBayConfig.getIsWaitingArea()));	
			}			
		}
		
		loadBaysForSelectedWard(voWardBayConfig);
		form.getLocalContext().setWardBayConfig(voWardBayConfig);
		setClosingLabels(voWardBayConfig);
		form.getGlobalContext().Core.setADTWard(form.cmbWard().getValue());
		//WDEV-19982
				
		loadData();
		populateDynamicGridFromData();
		
		form.ccPatientSummary().setValue(form.cmbWard().getValue(), form.cmbBay().getValue());
		
		//WDEV-20328
		updateWardBayClosingControlsState();				
	}

	private void updateWardBayClosingControlsState()
	{	
		WardBayConfigForWardViewVo wardConfig = form.getLocalContext().getWardBayConfig();
	
		boolean bAtLeastABayOutOfHours = isAtLeastABayOutOfHours(wardConfig);
		boolean bCanBlockAtLeastABay = canBlockAtLeastABay(wardConfig);
		boolean bCanCloseAtLeastABay = canCloseAtLeastABay(wardConfig);
		boolean bCanReopen = isAtLeastABayCloseOrBlocked(wardConfig);
		boolean bCanCloseWard = canCloseWard(wardConfig);
		boolean bCanBlockWard = canBlockWard(wardConfig);
		
		form.btnBlockBay().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS));
		form.btnBlockWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS));
		form.btnCloseBay().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS));
		form.btnCloseWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS));
		form.btnReopenBay().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_REOPEN_WARD_BAYS_OOH)));
		form.btnReopenWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && (((wardConfig != null && (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS))))));
		
		form.htmWardStatus().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && wardConfig != null);
				
		form.btnBlockBay().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && wardConfig != null && wardConfig.getBaysIsNotNull() && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) && bCanBlockAtLeastABay)));
		form.btnBlockWard().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) && bCanBlockWard)));
		form.btnCloseBay().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") &&  form.cmbWard().getValue() != null && wardConfig != null && wardConfig.getBaysIsNotNull() && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) && bCanCloseAtLeastABay)));
		form.btnCloseWard().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) && bCanCloseWard)));
		form.btnReopenBay().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && wardConfig != null && wardConfig.getBaysIsNotNull() && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) || engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS)) && bCanReopen) || (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_REOPEN_WARD_BAYS_OOH) && bAtLeastABayOutOfHours));
		form.btnReopenWard().setEnabled(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null && ((engine.hasRight(AppRight.BED_MANAGEMENT_CAN_CLOSE_WARD_BAYS) && wardConfig != null && WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus()))) || (engine.hasRight(AppRight.BED_MANAGEMENT_CAN_BLOCK_WARD_BAYS) && wardConfig != null && WardBayStatus.BLOCKED.equals(wardConfig.getWardAvailabilityStatus())));
		
		form.btnAdmitToWard().setEnabled(true);
		form.btnAdmitToWard().setVisible(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && form.cmbWard().getValue() != null
											&& isWardAndBaysOpen(form.getLocalContext().getWardBayConfig()));
		form.ccPatientSummary().setWardClosedBlocked(!isWardAndBaysOpen(form.getLocalContext().getWardBayConfig()));
		
		form.btnBedManagementDashboard().setEnabled(Boolean.TRUE.equals(form.cmbHospital().getValue() != null));
		
		if (Boolean.FALSE.equals(form.cmbHospital().getValue() != null))
		{
			form.btnBedManagementDashboard().setTooltip("Hospital must be selected");
		} 
		else
		{
			form.btnBedManagementDashboard().setTooltip("");
		}
	}

	private boolean isWardAndBaysOpen(WardBayConfigForWardViewVo wardBayConfig)
	{
		if (wardBayConfig == null)
			return true;
		
		if (WardBayStatus.CLOSED.equals(wardBayConfig.getWardAvailabilityStatus()))
			return false;
		
		if (wardBayConfig.getBays() == null)
			return true;
		
		return true;
	}
	
	//WDEV-22920 
	private boolean canBlockWard(WardBayConfigForWardViewVo wardConfig)
	{
		if (wardConfig == null || WardBayStatus.BLOCKED.equals(wardConfig.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus())|| wardConfig.getBays() == null || wardConfig.getBays().size() == 0)
			return false;
		
		boolean bFound = false;
		
		for (int i=0; i<wardConfig.getBays().size();i++)
		{
			if (wardConfig.getBays().get(i) == null || wardConfig.getBays().get(i).getNumOfBeds() == null)
				continue;
			if (wardConfig.getBays().get(i).getNumOfOccupiedBeds() != null && wardConfig.getBays().get(i).getNumOfOccupiedBeds() > 0)
			{	
				bFound = true;
				break;
			}	
		}
		if (form.ccPatientSummary().getAwaitingBedCount() != null && form.ccPatientSummary().getAwaitingBedCount() > 0)
			bFound = true;
		
		return bFound;
	}
	
	//WDEV-22920 
	private boolean canCloseWard(WardBayConfigForWardViewVo wardConfig)
	{
		if (wardConfig == null || WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus()) || wardConfig.getBays() == null || wardConfig.getBays().size() == 0)
			return false;
		if (form.ccPatientSummary().getAwaitingBedCount() != null && form.ccPatientSummary().getAwaitingBedCount() > 0)
			return false;
		for (int i=0; i<wardConfig.getBays().size();i++)
		{
			if (wardConfig.getBays().get(i) == null || wardConfig.getBays().get(i).getNumOfBeds() == null)
				continue;
			if (wardConfig.getBays().get(i).getNumOfOccupiedBeds() != null && wardConfig.getBays().get(i).getNumOfOccupiedBeds() > 0)
				return false;			
		}		
		return true;
	}

	private boolean isAtLeastABayCloseOrBlocked(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (WardBayStatus.BLOCKED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) || isBayOutOfOpeningHours(wardBayConfigForWardViewVo.getBays().get(i)))
				return true;
		}
		return false;
	}
	private boolean isAtLeastABayOutOfHours(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (!WardBayStatus.BLOCKED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) &&  !WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getBays().get(i)) && isBayOutOfOpeningHours(wardBayConfigForWardViewVo.getBays().get(i)))
				return true;
		}
		return false;
	}
	private boolean isBayOutOfOpeningHours(BayConfigForWardViewVo bayConfigForWardViewVo)
	{
		if (bayConfigForWardViewVo == null || WardBayStatus.CLOSED.equals(bayConfigForWardViewVo.getBayAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(bayConfigForWardViewVo.getBayAvailabilityStatus()))
			return false;
		
		Calendar calendar = Calendar.getInstance();
		Date lastReopenDate = getMostRecentReopenDate(bayConfigForWardViewVo);
		
		boolean isCurrentDayWeekDay =  (Calendar.SUNDAY != calendar.get(Calendar.DAY_OF_WEEK) && Calendar.SATURDAY != calendar.get(Calendar.DAY_OF_WEEK));
		boolean isBayOutOfHours = (bayConfigForWardViewVo.getOpeningTimeIsNotNull() && new Time().isLessThan(bayConfigForWardViewVo.getOpeningTime())) || (bayConfigForWardViewVo.getClosingTimeIsNotNull() && new Time().isGreaterThan(bayConfigForWardViewVo.getClosingTime()));
		boolean wasReopenedToday = new Date().equals(lastReopenDate);
		
		if (isBayOutOfHours && wasReopenedToday)
			return false;
		
		if (Boolean.TRUE.equals(bayConfigForWardViewVo.getWeekdaysOnly()) && !isCurrentDayWeekDay)
			return true;
		return isBayOutOfHours;
	}
	
	private Date getMostRecentReopenDate(BayConfigForWardViewVo tempVo)
	{
		if (tempVo.getReOpenOutOfHours() == null)
			return null;
		
		ArrayList<Date> dates = new ArrayList<Date>();
		for (int i=0;i<tempVo.getReOpenOutOfHours().size();i++)
		{
			if (tempVo.getReOpenOutOfHours().get(i) != null && tempVo.getReOpenOutOfHours().get(i).getReopenDateIsNotNull())
				dates.add(tempVo.getReOpenOutOfHours().get(i).getReopenDate());
		}
		return dates.size() > 0 ? Collections.max(dates) : null;
		
	}
	//WDEV-22920 
	private boolean canCloseAtLeastABay(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		if (WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getWardAvailabilityStatus()))
			return false;
		if (form.cmbBay().getValues().size() >=1 && form.ccPatientSummary().getAwaitingBedCount() != null && form.ccPatientSummary().getAwaitingBedCount() > 0)
			return false;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()) && !WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus()) && (wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() == null || wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() == 0))
				return true;
		}
		return false;
	}
	/*private boolean isOnlyOneBayOpen(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		int openCount = 0;
		int activeCount = 0;
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()))
			{	
				activeCount ++;
				if ((wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus() == null || WardBayStatus.OPEN.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus())) && !isBayOutOfOpeningHours(wardBayConfigForWardViewVo.getBays().get(i)))
					openCount++;
			}
		}
		return openCount == 1 && activeCount > 1; 
	}*/

	//WDEV-22920 
	private boolean canBlockAtLeastABay(WardBayConfigForWardViewVo wardBayConfigForWardViewVo)
	{
		if (wardBayConfigForWardViewVo == null || wardBayConfigForWardViewVo.getBays() == null || wardBayConfigForWardViewVo.getBays().size() == 0)
			return false;
		if (WardBayStatus.BLOCKED.equals(wardBayConfigForWardViewVo.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardBayConfigForWardViewVo.getWardAvailabilityStatus()))
			return false;
		
		for (int i=0; i<wardBayConfigForWardViewVo.getBays().size();i++)
		{
			if (wardBayConfigForWardViewVo.getBays().get(i) == null)
				continue;
			if (Boolean.TRUE.equals(wardBayConfigForWardViewVo.getBays().get(i).getIsActive()) && (wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus() == null || WardBayStatus.OPEN.equals(wardBayConfigForWardViewVo.getBays().get(i).getBayAvailabilityStatus())) && wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() != null && wardBayConfigForWardViewVo.getBays().get(i).getNumOfOccupiedBeds() > 0)
				return true;
		}
		if (form.ccPatientSummary().getAwaitingBedCount() != null && form.ccPatientSummary().getAwaitingBedCount() > 0)
			return true;
		
		return false;
	}
	private void clearDisplay(boolean bValueSelectionCleared)
	{
		clearData(bValueSelectionCleared); //WDEV-20811
		form.dyngrdDisplay().clear();
		form.bedPlanner().clear();
				
		if(!bValueSelectionCleared)
		{
			form.lblMainSpecialty().setValue("");
			form.lblMainSpecialty().setTooltip("");
		}
	}
	private void clearData(boolean bValueSelectionCleared)
	{
		form.getLocalContext().setOnHomeLeave(null);
		form.getLocalContext().setOnTheWard(null);
		form.getLocalContext().setTransfersOut(null);
		form.getLocalContext().setPendingElective(null);
		form.getLocalContext().setPatientElectiveList(null);		//wdev-18936
		form.getLocalContext().setPendingEmergency(null);
		form.getLocalContext().setTransfersIn(null);
		form.getLocalContext().setWaitingArea(null);
		form.getGlobalContext().Core.setADTTransfersIn(null);
		form.getGlobalContext().Core.setADTTransfersOut(null);
		if (!bValueSelectionCleared) //WDEV-20811
		{	
			form.getGlobalContext().Core.setHasWaitingArea(false);
		}
		form.getGlobalContext().Core.setADTPendingTransfer(null);
	}

	protected void updateContextMenuState()
	{
		form.getContextMenus().Core.hideAllWardViewMenuItems();
		if(form.dyngrdDisplay().getSelectedRow() == null)
			return;
		
		form.getContextMenus().Core.getWardViewCANCEL_TRANSFERItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof PendingTransfersLiteVo);
		form.getContextMenus().Core.getWardViewTRANSFERItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo);
		//form.getContextMenus().Core.getWardViewDISCHARGEItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo);
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == false) //wdev-18936
		{
			form.getContextMenus().Core.getWardViewASSIGNWARDItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof PendingElectiveAdmissionAdmitVo);
		}
		else
		{
			form.getContextMenus().Core.getWardViewASSIGNWARDItem().setVisible(form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof PatientElectiveListForWardViewVo);	//wdev-18936
		}
		
		//wdev-13509
		InpatientEpisodeLiteVo voInpat = null;
		if (form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo)
			voInpat  = (InpatientEpisodeLiteVo)form.dyngrdDisplay().getSelectedRow().getIdentifier();
		
		if (voInpat != null
			&& voInpat.getIsOnHomeLeaveIsNotNull()
			&& voInpat.getIsOnHomeLeave())
		{
			form.getContextMenus().Core.getWardViewTRANSFERItem().setVisible(true);
			form.getContextMenus().Core.getWardViewDISCHARGEItem().setVisible(true);
		}
	}

	private void loadBaysForSelectedWard(WardBayConfigForWardViewVo voWardBayConfig) 
	{	
		form.cmbBay().clear();		
		if (form.cmbWard().getValue() == null || voWardBayConfig == null)
			return;
		
		
		LocationLiteVoCollection baysColl = domain.listBaysForCurrentWard(form.cmbWard().getValue());
		if(baysColl != null)
		{
			LocationLiteVoCollection baysCollSorted = baysColl.sort(true); //WDEV-20228
			for(int x = 0; x < baysCollSorted.size(); x++)
			{
				if(isfloorBedSpaceLayoutActive(voWardBayConfig, baysCollSorted.get(x)))
					addBays(baysCollSorted.get(x));
			}
			
			if (form.cmbBay().getValues().size() == 1)
			{
				form.cmbBay().setValue((LocationLiteVo) form.cmbBay().getValues().get(0));
				bayValueChanged();
			}
		}
	}

	private boolean isfloorBedSpaceLayoutActive(WardBayConfigForWardViewVo voWardBayConfig, LocationLiteVo voBay)
	{
		if (voWardBayConfig == null|| voBay == null)
			return false;
		
		if(voWardBayConfig.getBaysIsNotNull())
		{
			for(BayConfigVo voBayConfig : voWardBayConfig.getBays())
			{
				if (Boolean.TRUE.equals(voBay.getIsActive()) && voBayConfig.getBay().equals(voBay))
				{
					if(voBayConfig.getFloorBedSpaceLayoutIsNotNull() && voBayConfig.getFloorBedSpaceLayout().getStatusIsNotNull())
						if(voBayConfig.getFloorBedSpaceLayout().getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
							return true;
				}
			}
		}		
		return false;
	}

	private void addBays(LocationLiteVo bay) 
	{
		if(bay == null)
			return;
		
		form.cmbBay().newRow(bay, bay.getName());
	}

	@Override
	protected void onBedPlannerBedClicked(Bed bed) 
	{
		form.getGlobalContext().Core.setSelectedWaitingAreaPatient(null);
		form.getGlobalContext().Core.setBedInfoAction(null);
		form.dyngrdDisplay().setValue(null);
		
		if (bed != null && bed.getIdentifier() != null)
		{			
			BedSpaceStateLiteVo bedSpaceState = domain.getBedSpaceState((BedSpaceVo) bed.getIdentifier());
			WardBayConfigForWardViewVo wardConfig = form.getLocalContext().getWardBayConfig();
		
			if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") && wardConfig != null)
			{
				if (bedSpaceState != null && (WardBayStatus.CLOSED.equals(wardConfig.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(wardConfig.getBayConfig(form.cmbBay().getValue()).getBayAvailabilityStatus())))
					return;
				if (bedSpaceState != null && bedSpaceState.getCurrentBedStatusIsNotNull() && BedStatus.AVAILABLE.equals(bedSpaceState.getCurrentBedStatus().getBedStatus()) &&  (WardBayStatus.BLOCKED.equals(wardConfig.getWardAvailabilityStatus()) || WardBayStatus.BLOCKED.equals(wardConfig.getBayConfig(form.cmbBay().getValue()).getBayAvailabilityStatus())))
					return;
			}

			form.getGlobalContext().Core.setPatientShort(null);
			form.getGlobalContext().Core.setSelectedBedSpaceState(bedSpaceState);
							
			if(bedSpaceState != null && bedSpaceState.getInpatientEpisode() != null && bedSpaceState.getInpatientEpisode().getPasEventIsNotNull())
			{
				//WDEV-22236
				CareContextShortVo careContextForPasEvent = domain.getCareContextForPasEvent(bedSpaceState.getInpatientEpisode().getPasEvent());
				form.getGlobalContext().Core.setCurrentCareContext(careContextForPasEvent);
				if (careContextForPasEvent == null && bedSpaceState.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
				{	
					form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(bedSpaceState.getInpatientEpisode().getPasEvent().getPatient()));
				}	
				if (bedSpaceState.getInpatientEpisode().getPasEvent().getPatientIsNotNull())
				{
					form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());					
				}	
			}
			
			
		}
		
		resetPIDBarText();//WDEV-14476 
		
		//WDEV-9790
		engine.open(form.getForms().Core.BedInfoDialog, new Object[]{new Boolean(form.isReadOnly())});
	}
	
	private DynamicGridColumn getColumn(String identifier)
	{
		return form.dyngrdDisplay().getColumns().getByIdentifier(identifier);
	}

	private void initializeDynamicGrid() 
	{	
		DynamicGrid dynGrid = form.dyngrdDisplay();
		dynGrid.clear();
		DynamicGridColumn colPatient = null;	
		colPatient = dynGrid.getColumns().newColumn("Patient", COLNAME);
		colPatient.setWidth(250);		
		colPatient.setAlignment(Alignment.CENTER);		
	}
	
	private void populateDynamicGridFromData()
	{		
		initializeDynamicGrid();
		
		DynamicGrid dynGrid = form.dyngrdDisplay();		
		DynamicGridRow dynRow = dynGrid.getRows().newRow();
		DynamicGridRow patientRow =null;
		dynRow.setIdentifier(CURRENT);
		dynRow.setReadOnly(false);
		dynRow.setSelectable(false);
		dynRow.setExpanded(true);
		
		DynamicGridCell cellPatient = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		cellPatient.getItems().clear();
		cellPatient.setBackColor(Color.Bisque);
		cellPatient.setValue("<h3>ON THE WARD</h3>");
			
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue()!="WST")//WDEV-14410
		{	
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellHomeLeave = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellHomeLeave.setValue("<b><i>Home Leave</i></b>");
		cellHomeLeave.setBackColor(Color.Aqua);

	    InpatientEpisodeLiteVoCollection voCollHL = form.getLocalContext().getOnHomeLeave();
	    if(voCollHL != null)
	    {
			for (int i=0; i < voCollHL.size() ; i++ )
			{
			    InpatientEpisodeLiteVo voHLInpatEpis = voCollHL.get(i);
			    if(voHLInpatEpis.getIsOnHomeLeaveIsNotNull()
			    	&& voHLInpatEpis.getIsOnHomeLeave())
			    {
			    	patientRow = cellHomeLeave.getRow().getRows().newRow();
			    	patientRow.setSelectable(true);
			    	
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor(Color.White);
					cellPatientRow.setIdentifier(HOME_LEAVE);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voHLInpatEpis.getPatientString());
					String tooltip = voHLInpatEpis.getPatientString();
					if (voHLInpatEpis.getBedIsNotNull() && voHLInpatEpis.getBed().getBayIsNotNull() && voHLInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voHLInpatEpis.getBed().getBay().getName();
					if (voHLInpatEpis.getVacatedBedNumberIsNotNull() 
						&& voHLInpatEpis.getVacatedBedNumber().toString() != "")
						tooltip+=" Vacated Bed: "+voHLInpatEpis.getVacatedBedNumber();
					if (voHLInpatEpis.getExpectedDateOfReturnIsNotNull())
						tooltip+=" Expected Return : "+voHLInpatEpis.getExpectedDateOfReturn().toString();
					if (voHLInpatEpis.getExpectedTimeOfReturnIsNotNull())
						tooltip+=" at "+ voHLInpatEpis.getExpectedTimeOfReturn().toString();
					cellPatientRow.setTooltip(tooltip);
					if (voHLInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voHLInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voHLInpatEpis);
					}
			    }
			}
	    }
		}
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingOcupied = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingOcupied.setValue("<b><i>Current</i></b>");
		cellOutgoingOcupied.setBackColor(Color.Aqua);
		
	    InpatientEpisodeLiteVoCollection voCollInpatEpis = form.getLocalContext().getOnTheWard();
	    if(voCollInpatEpis != null)
	    {
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
			    InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
			    if(!voInpatEpis.isDischargeDueWithin24Hrs())
			    {
			    	patientRow = cellOutgoingOcupied.getRow().getRows().newRow();			
			    	//patientRow.setSelectable(false);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor(Color.White);
					cellPatientRow.setIdentifier(CURRENT);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
					String tooltip = voInpatEpis.getPatientString();
					if (voInpatEpis.getBedIsNotNull() && voInpatEpis.getBed().getBayIsNotNull() && voInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voInpatEpis.getBed().getBay().getName();
					cellPatientRow.setTooltip(tooltip);
					if (voInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voInpatEpis.getPasEvent());
					}
			    }
			}
	    }

		
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingDischarge = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingDischarge.setValue("<b><i>For Discharge</i></b>");
		cellOutgoingDischarge.setBackColor(Color.Aqua);
		
		dynRow = cellOutgoingDischarge.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingOccupiedDueDischarge24h = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingOccupiedDueDischarge24h.setValue("<b><i>Due discharge within 24h</i></b>");
		
		if(voCollInpatEpis != null)
		{
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
				InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
				
				if(voInpatEpis.isDischargeDueWithin24Hrs())
			    {
					if(voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge())
						continue;
					
					patientRow = cellOutgoingOccupiedDueDischarge24h.getRow().getRows().newRow();	
					//patientRow.setSelectable(false);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);
					cellPatientRow.setBackColor( Color.fromRGB(255, 105, 0));
					cellPatientRow.setIdentifier(CURRENT);
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
					String tooltip = voInpatEpis.getPatientString();
					if (voInpatEpis.getBedIsNotNull() && voInpatEpis.getBed().getBayIsNotNull() && voInpatEpis.getBed().getBay().getNameIsNotNull())
						tooltip+=" Bay: "+voInpatEpis.getBed().getBay().getName();
					cellPatientRow.setTooltip(tooltip);
					if (voInpatEpis.getPasEventIsNotNull())
					{
						patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
						patientRow.setIdentifier(voInpatEpis.getPasEvent());
					}
			    }
			}
		}
		dynRow = cellOutgoingDischarge.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingConfirmedDischarge24h = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingConfirmedDischarge24h.setValue("<b><i>Confirmed discharge within 24h</i></b>");
		
		if(voCollInpatEpis != null)
		{
			for (int i=0; i < voCollInpatEpis.size() ; i++ )
			{
				InpatientEpisodeLiteVo voInpatEpis = voCollInpatEpis.get(i);
				
				if(voInpatEpis.isDischargeDueWithin24Hrs())
			    {
					if(voInpatEpis.getIsConfirmedDischargeIsNotNull() && voInpatEpis.getIsConfirmedDischarge())
					{
						patientRow = cellOutgoingConfirmedDischarge24h.getRow().getRows().newRow();			
						//patientRow.setSelectable(false);
						DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
						cellPatientRow.setAutoPostBack(true);
						cellPatientRow.setBackColor(Color.Red);
						cellPatientRow.setIdentifier(CURRENT);
						cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
						String tooltip = voInpatEpis.getPatientString();
						if (voInpatEpis.getBedIsNotNull() && voInpatEpis.getBed().getBayIsNotNull() && voInpatEpis.getBed().getBay().getNameIsNotNull())
							tooltip+=" Bay: "+voInpatEpis.getBed().getBay().getName();
						cellPatientRow.setTooltip(voInpatEpis.getPatientString());
						if (voInpatEpis.getPasEventIsNotNull())
						{
							patientRow.setValue(voInpatEpis.getPasEvent().getPatient());
							patientRow.setIdentifier(voInpatEpis.getPasEvent());
						}
				    }
			    }
			}
		}

		
		dynRow = cellPatient.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellOutgoingTransfer = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellOutgoingTransfer.setValue("<b><i>For Transfer Out</i></b>");
		cellOutgoingTransfer.setBackColor(Color.Aqua);
		
		PendingTransfersLiteVoCollection voCollTransfersOut = form.getLocalContext().getTransfersOut();
		if(voCollTransfersOut != null)
		{
			for (int i=0; i < voCollTransfersOut.size(); i++)
			{
				PendingTransfersLiteVo voTransferOut = voCollTransfersOut.get(i);
				patientRow = cellOutgoingTransfer.getRow().getRows().newRow();		
				//patientRow.setSelectable(false);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
				cellPatientRow.setBackColor(Color.LightBlue);
				cellPatientRow.setAutoPostBack(true);		
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voTransferOut.getPatientString());
				String tooltip = voTransferOut.getPatientString();
				if (voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().getBedIsNotNull() && voTransferOut.getInpatientEpisode().getBed().getBayIsNotNull() && voTransferOut.getInpatientEpisode().getBed().getBay().getNameIsNotNull())
					tooltip+=" Bay: "+voTransferOut.getInpatientEpisode().getBed().getBay().getName();
				cellPatientRow.setTooltip(tooltip);
				if (voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().getPasEventIsNotNull())
				{
					patientRow.setValue(voTransferOut.getInpatientEpisode().getPasEvent().getPatient());
					patientRow.setIdentifier(voTransferOut.getInpatientEpisode().getPasEvent());
				}
			}
		}
	
		dynRow = dynGrid.getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellPatient1 = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		cellPatient1.setBackColor(Color.Bisque);		
		cellPatient1.setValue("<h3>INCOMING</h3>");
				
		dynRow = cellPatient1.getRow().getRows().newRow();;
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellIncomingdmissionEmergency = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellIncomingdmissionEmergency.setValue("<b><i>Emergency Admissions</i></b>");
		
		//from PendingEmergencyAdmission
		PendingEmergencyAdmissionAdmitVoCollection voCollEmergency = form.getLocalContext().getPendingEmergency();
		if(voCollEmergency != null)
		{
			if (voCollEmergency != null)
			{
				for (int i=0; i < voCollEmergency.size(); i++ )
				{
					PendingEmergencyAdmissionAdmitVo voEmergency = voCollEmergency.get(i);
					patientRow = cellIncomingdmissionEmergency.getRow().getRows().newRow();		
					///patientRow.setSelectable(false);
					DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
					cellPatientRow.setAutoPostBack(true);		
					cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voEmergency.getPatientString());	
					cellPatientRow.setTooltip(voEmergency.getPatientString());
					if (voEmergency.getPasEventIsNotNull())
					{
						patientRow.setValue(voEmergency.getPasEvent().getPatient());
						patientRow.setIdentifier(voEmergency.getPasEvent());
					}
				}
			}
		}
		
		
		dynRow = cellPatient1.getRow().getRows().newRow();;
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellIncomingdmissionElective = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellIncomingdmissionElective.setValue("<b><i>Elective Admissions</i></b>");
		
		//wdev-18936
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == true)
		{
			//from PatientElectiveList
			PatientElectiveListForWardViewVoCollection voCollPatientElectiveList = form.getLocalContext().getPatientElectiveList(); //WDEV-19719 misspelling fixed in variable name
			if( voCollPatientElectiveList != null )
			{
				for(int k = 0; k < voCollPatientElectiveList.size();k++)
				{
					PatientElectiveListForWardViewVo voPatientElectList = voCollPatientElectiveList.get(k);
					patientRow = cellIncomingdmissionElective.getRow().getRows().newRow();	
    				patientRow.setSelectable(true);
    				patientRow.setIdentifier(voPatientElectList);
    				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
    				cellPatientRow.setAutoPostBack(true);		
    				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voPatientElectList.getPatientString());			
    				cellPatientRow.setTooltip(voPatientElectList.getPatientString());
    				if (voPatientElectList.getReferralIsNotNull() && voPatientElectList.getReferral().getCareContextIsNotNull() && (voPatientElectList.getReferral().getCareContext().getPasEventIsNotNull() || voPatientElectList.getTCIDetailsIsNotNull())) //WDEV-19719
    				{
    					patientRow.setValue(voPatientElectList.getReferral().getCareContext().getPasEventIsNotNull() ? voPatientElectList.getReferral().getCareContext().getPasEvent().getPatient() : voPatientElectList.getReferral().getPatient()); //WDEV-19719
    					//patientRow.setIdentifier(voPending.getPasEvent());
    				}
				}
			}
		}
		else
		{
    		//from PendingElectiveAdmission
    		PendingElectiveAdmissionAdmitVoCollection voCollPendingElective = form.getLocalContext().getPendingElective();
    		if(voCollPendingElective != null)
    		{
    			for (int i=0; i < voCollPendingElective.size() ; i++ )
    			{
    				PendingElectiveAdmissionAdmitVo voPending = voCollPendingElective.get(i);
    				patientRow = cellIncomingdmissionElective.getRow().getRows().newRow();	
    				patientRow.setSelectable(true);
    				patientRow.setIdentifier(voPending);
    				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
    				cellPatientRow.setAutoPostBack(true);		
    				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voPending.getPatientString());			
    				cellPatientRow.setTooltip(voPending.getPatientString());
    				if (voPending.getPasEventIsNotNull())
    				{
    					patientRow.setValue(voPending.getPasEvent().getPatient());
    					//patientRow.setIdentifier(voPending.getPasEvent());
    				}
    			}
    		}
		}
		//----------------------------
		

		
		dynRow = cellPatient1.getRow().getRows().newRow();
		dynRow.setExpanded(true);
		dynRow.setSelectable(false);
		DynamicGridCell cellPendingTransfers = dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);				
		cellPendingTransfers.setValue("<b><i>For Transfer In</b></i>");
		
		PendingTransfersLiteVoCollection voCollTransfersIn = form.getLocalContext().getTransfersIn();
		if(voCollTransfersIn != null)
		{
			for (int i=0; i < voCollTransfersIn.size(); i++)
			{
				PendingTransfersLiteVo voTransferIn = voCollTransfersIn.get(i);
				patientRow = cellPendingTransfers.getRow().getRows().newRow();		
				//patientRow.setSelectable(true);
				patientRow.setIdentifier(voTransferIn);
				DynamicGridCell cellPatientRow = patientRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
				cellPatientRow.setAutoPostBack(true);			
				cellPatientRow.setIdentifier(INCOMING_PENDING_TRANSFERS);
				cellPatientRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" + voTransferIn.getPatientString());			
				cellPatientRow.setTooltip(voTransferIn.getPatientString());
				if (voTransferIn.getInpatientEpisodeIsNotNull() && voTransferIn.getInpatientEpisode().getPasEventIsNotNull())
				{
					patientRow.setValue(voTransferIn.getInpatientEpisode().getPasEvent().getPatient());
				}
			}
		}	
		
		//Waiting Area
		if(form.getGlobalContext().Core.getHasWaitingAreaIsNotNull() && form.getGlobalContext().Core.getHasWaitingArea())
		{
			DynamicGridRow dynWRow = dynGrid.getRows().newRow();
			dynWRow.setReadOnly(false);
			dynWRow.setSelectable(false);
			dynWRow.setExpanded(true);
			DynamicGridRow wRow = null;
			
			DynamicGridCell cellWPatient = dynWRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
			cellWPatient.getItems().clear();
			cellWPatient.setBackColor(Color.Bisque);
			cellWPatient.setValue("<h3>WAITING AREA</h3>");
			
			if(form.getLocalContext().getWaitingAreaIsNotNull() && form.getLocalContext().getWaitingArea().size() > 0)
			{
				InpatientEpisodeLiteVoCollection voCollWaiting = form.getLocalContext().getWaitingArea();
			    if(voCollWaiting != null)
			    {
					for (int i=0; i < voCollWaiting.size() ; i++ )
					{
					    InpatientEpisodeLiteVo voInpatEpis = voCollWaiting.get(i);
					    wRow = cellWPatient.getRow().getRows().newRow();
					    wRow.setIdentifier(voInpatEpis);
					    //wRow.setSelectable(false);
						DynamicGridCell cellWRow = wRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);		
						cellWRow.setAutoPostBack(true);
						cellWRow.setBackColor(Color.White);
						cellWRow.setIdentifier(CURRENT);
						
						cellWRow.setValue("<img src = " + form.getImages().Core.Person.getImagePath() + "> &nbsp;&nbsp;" +  voInpatEpis.getPatientString());
						cellWRow.setTooltip(voInpatEpis.getPatientString());
						if (voInpatEpis.getPasEventIsNotNull())
						{
							wRow.setValue(voInpatEpis.getPasEvent().getPatient());
						}
					}
			    }
			}
		}
	}

	private void loadSelectedLayout()
	{
		try
		{
		// Clear Bed Planner control
		form.bedPlanner().clear();
		
		// If no Bay is selected - terminate function
		if (form.cmbBay().getValue() == null)
			return;

		// Get Bed Space layout
		FloorBedSpaceLayoutVo layout = domain.listLayoutForCurrentBay(form.cmbBay().getValue());
		
		
		BedSpaceVoCollection bedsColl = null;		
		

		if (layout != null && layout.getFloorLayout() != null)
		{
			// Populate Bed Planner control 
			form.bedPlanner().setPlan(layout.getFloorLayout().getVml());
			
			// Get Bed Space collection
			WardBedStateVoCollection bedSpacesStates = domain.listBedSpacesState(layout.getBedSpaces());
			
			try
			{
				if (bedSpacesStates != null)
				{
					bedsColl = new BedSpaceVoCollection();

					for (WardBedStateVo bedSpaceState : bedSpacesStates)
					{
						BedSpaceVo bedSpace = bedSpaceState.getBedSpace();

						if (bedSpace != null)
						{
							// Create Bed control on layout
							Bed bed = new Bed(bedSpace.getID_BedSpace(), bedSpace.isChair() ? Bed.WHITE_CHAIR.getType() : Bed.WHITE_BED.getType(), bedSpace.getVml(), Position.parse(bedSpace.getTextPosition()), Position.parse(bedSpace.getImagePosition()));
							// Set up default colour
							bed.setColor(bedSpace.isChair() ? Bed.WHITE_CHAIR : Bed.WHITE_BED);
							bed.setColor(getBedColor(bedSpace.isChair(), bedSpaceState.getBedSpaceState()));
							// Set Bed number
							bed.setNumber(bedSpace.getBedNumber());
							// Set Bed control identifier
							bed.setIdentifier(bedSpace);


							if (bedSpaceState.getBedSpaceState() != null && bedSpaceState.getBedSpaceState().getInpatientEpisode() != null)
							{
								bed.setText(getBedSpaceText(bedSpaceState.getBedSpaceState()));


								if (Boolean.TRUE.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getIsMaternityInpatient()))
								{
									Image numberOfInfants = calculateInfants(bedSpaceState.getBedSpaceState().getInpatientEpisode());
									if (numberOfInfants != null) bed.addAttachedImage(numberOfInfants, "Number of Infants");
								}
								else if (bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent() != null
											&& bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent().getPatient() != null						// Only return mother for the patient
											&& bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent().getPatient().calculateAge() != null			// with age under 1 year old
											&& bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent().getPatient().calculateAge() < 1)
								{
									//check if selected is an infant - if so get the mothers admission details and add image with tooltip of admission details
									AdmissionDetailMotherVo mothersAdmission = domain.getMothersAdmission(bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent().getPatient());
									if (mothersAdmission != null)
									{
										bed.addAttachedImage(form.getImages().Core.Maternity, createAdmissionTooltip(mothersAdmission));
									}
								}
								if (Boolean.TRUE.equals(bedSpaceState.getBedSpaceState().getIsMaternity()))	
								{
									bed.addAttachedImage(form.getImages().Core.Person, "Maternity");
								}


								if (bedSpaceState.getBedSpaceState().getInpatientEpisode().getHealthyLodgerDetails() != null)
								{
									bed.addAttachedImage(form.getImages().Core.HealthyLodger16x16, createLodgerTooltip(bedSpaceState.getBedSpaceState().getInpatientEpisode().getHealthyLodgerDetails()));
								}

								if (bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent().getPatient() != null
										&& Boolean.TRUE.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getPasEvent().getPatient().getHasAlerts()))
								{
									bed.addAttachedImage(form.getImages().Core.Alert16, "Alert(s) present");
								}

								if (Boolean.TRUE.equals(ConfigFlag.UI.VTE_RISK_ASSESSMENT_FUNCTIONALITY.getValue()))
								{
									if (VTEAsessmentStatus.REQUIRED.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus()))
									{
										bed.addAttachedImage(form.getImages().OCRR.Requested, "VTE Assessment Status: " + bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus().getIItemText());
									}
									else if( VTEAsessmentStatus.INPROGRESS.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus()))
									{
										bed.addAttachedImage(form.getImages().OCRR.InProgress,"VTE Assessment Status: " + bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus().getIItemText());
									}
									else if( VTEAsessmentStatus.VALIDATION_REQUIRED.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus()))
									{
										bed.addAttachedImage(form.getImages().Correspondence.DocumentCompleted16,"VTE Assessment Status: " + bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus().getIItemText());
									}
									else if( VTEAsessmentStatus.VALIDATED.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus()) || VTEAsessmentStatus.COMPLETED.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus()))
									{
										bed.addAttachedImage(form.getImages().Core.Tick,"VTE Assessment Status: " + (VTEAsessmentStatus.COMPLETED.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus()) && VTEAssessmentStatusReason.EXCLUDED.equals(bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatusReason()) ? bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatusReason().getIItemText() : bedSpaceState.getBedSpaceState().getInpatientEpisode().getVTEAssessmentStatus().getIItemText()));
									}
								}
							}


							bed.setTooltip(getBedTooltip(bedSpace, bedSpaceState.getBedSpaceState()));

							// Add Bed control to Bed Planner control 
							form.bedPlanner().addBed(bed);

							bedsColl.add(bedSpace);
						}
					}
				}
			}
			catch (ParseException e)
			{
				throw new CodingRuntimeException("Parse exception on Bed Planner");
			}
		}

		form.getLocalContext().setBedsCollection(bedsColl);
		}
		catch (DomainInterfaceException ex)
		{
			engine.showMessage(ex.getMessage());
		}
	}


	private String getBedTooltip(BedSpaceVo bedSpace, BedSpaceStateShortVo bedState)
	{
		if (bedSpace == null)
			return null;
			
		StringBuilder tooltip = new StringBuilder();
		
		if (!ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			if (bedSpace.getDescription() != null)
				tooltip.append("<b>Description : </b> ").append(bedSpace.getDescription()).append("<br>");

			if (bedState != null && bedState.getCurrentBedStatus() != null 
				&& (BedStatus.FOR_CLEANING.equals(bedState.getCurrentBedStatus().getBedStatus()) || BedStatus.CLOSED.equals(bedState.getCurrentBedStatus().getBedStatus())))
			{
				if (bedState.getCurrentBedStatus().getStatusDateTime() != null)
				tooltip.append("<b>Closure Date/Time: </b>").append(bedState.getCurrentBedStatus().getStatusDateTime().toString()).append("<br/>");
				
				if (bedState.getCurrentBedStatus().getReasonForClosure() != null)
					tooltip.append("<b>Reason for Closure: </b>").append(bedState.getCurrentBedStatus().getReasonForClosure()).append("<br/>");
					
				if (bedState.getCurrentBedStatus().getEstReopeningDateTime() != null)
					tooltip.append("<b>Estimated Re-Opening Date/Time: </b>").append(bedState.getCurrentBedStatus().getEstReopeningDateTime());
			}
		}
		else if (bedState != null && ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS"))
		{
			tooltip.append(buildBedTooltip(bedState));
		}
		else
		{
			tooltip.append(bedSpace.getDescription());
		}
		
		return tooltip.toString();
	}


	private String getBedSpaceText(BedSpaceStateShortVo bedSpaceState)
	{
		PatientLite_IdentifiersVo patient = bedSpaceState.getInpatientEpisode().getPasEvent().getPatient();
		
		StringBuilder text = new StringBuilder();
		if (patient.getName() != null)
			text.append(patient.getName().toShortForm());
		
		if (bedSpaceState.getInpatientEpisode().getPasEvent().getConsultant() != null)
			text.append("<br>").append(bedSpaceState.getInpatientEpisode().getPasEvent().getConsultant().getIMosName());
		
		String bedText = text.toString();
		return bedText;
	}

	private Bed getBedColor(Boolean chair, BedSpaceStateShortVo bedSpaceState)
	{
		if (bedSpaceState == null)
			return Boolean.TRUE.equals(chair) ? Bed.WHITE_CHAIR : Bed.WHITE_BED;
		
		BedSpaceStateStatusLiteVo bedStateStatus = bedSpaceState.getCurrentBedStatus();
		
		if (bedStateStatus == null || bedStateStatus.getBedStatus() == null)
			return Boolean.TRUE.equals(chair) ? Bed.WHITE_CHAIR : Bed.WHITE_BED;
		
		
		if (BedStatus.AVAILABLE.equals(bedStateStatus.getBedStatus()))
			return Boolean.TRUE.equals(chair) ? Bed.GREEN_CHAIR : Bed.GREEN_BED;
		
		if (BedStatus.CLOSED.equals(bedStateStatus.getBedStatus()))
			return Boolean.TRUE.equals(chair) ? Bed.DARKGRAY_CHAIR : Bed.DARKGRAY_BED;
		
		if (BedStatus.FOR_CLEANING.equals(bedStateStatus.getBedStatus()))
			return Boolean.TRUE.equals(chair) ? Bed.PINK_CHAIR : Bed.PINK_BED;
		
		
		if (BedStatus.OCCUPIED.equals(bedStateStatus.getBedStatus()))
		{
			if (isPatientDead(bedSpaceState.getInpatientEpisode()))
				return Boolean.TRUE.equals(chair) ? Bed.YELLOW_CHAIR : Bed.YELLOW_BED;
			
			if (isPatientOnTrackingMove(bedSpaceState.getInpatientEpisode()))
				return Boolean.TRUE.equals(chair) ? Bed.DARKBLUE_CHAIR : Bed.DARKBLUE_BED;
			
			if (isPatientOnHomeLeaveWithBedRetained(bedSpaceState.getInpatientEpisode()))
				return Boolean.TRUE.equals(chair) ? Bed.GREY_CHAIR : Bed.GREY_BED;
			
			if (bedSpaceState.getInpatientEpisode() != null)
			{
				if (isInpatientEpisodeonTransefrOutList(bedSpaceState.getInpatientEpisode()))
					return Boolean.TRUE.equals(chair) ? Bed.LIGHTBLUE_CHAIR : Bed.LIGHTBLUE_BED;	
				
				if (bedSpaceState.getInpatientEpisode().isDischargeDueWithin24Hrs())
				{
					if (Boolean.TRUE.equals(bedSpaceState.getInpatientEpisode().getIsConfirmedDischarge()))
						return Boolean.TRUE.equals(chair) ? Bed.RED_CHAIR : Bed.RED_BED;
					
					return Boolean.TRUE.equals(chair) ? Bed.ORANGE_CHAIR : Bed.ORANGE_BED;
				}
			}					
		}
		
		return Boolean.TRUE.equals(chair) ? Bed.WHITE_CHAIR : Bed.WHITE_BED;
	}


	private boolean isPatientOnTrackingMove(InpatientEpisodeShortVo inpatientEpisode)
	{
		if (inpatientEpisode == null || inpatientEpisode.getCurrentTrackingMovement() == null)
			return false;
		
		if (Boolean.TRUE.equals(inpatientEpisode.getCurrentTrackingMovement().getPatientReturned()))
			return false;
		
		return true;
	}

	
	private String createLodgerTooltip(HealthyLodgerVo healthyLodgerDetails)
	{
		StringBuilder tooltipDisplay = new StringBuilder();
		
		tooltipDisplay.append("Healthy Lodger Present");
		if (healthyLodgerDetails.getName() != null)
			tooltipDisplay.append("<br/>Name: <b>").append(healthyLodgerDetails.getName().toString()).append("</b>");
		if (healthyLodgerDetails.getRelationshipToPatient() != null)
			tooltipDisplay.append("<br/>Relationship: <b>").append(healthyLodgerDetails.getRelationshipToPatient().getText()).append("</b>");
		
		return tooltipDisplay.toString();
	}


	private boolean isPatientOnHomeLeaveWithBedRetained(InpatientEpisodeShortVo inpatientEpisode)
	{
		if (inpatientEpisode == null)
			return false;
		
		return Boolean.TRUE.equals(inpatientEpisode.getIsOnHomeLeave());
	}


	private String buildBedTooltip(BedSpaceStateShortVo bedState)
	{
		if (bedState == null)
			throw new CodingRuntimeException("bedSpaceState cannot be null in method buildRowTooltip");
				
		String estDischargeDate =  bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getEstDischargeDateIsNotNull() ?  bedState.getInpatientEpisode().getEstDischargeDate().toString() : null;
		String confDischargeDate =  bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getConfirmedDischargeDateTimeIsNotNull() ? bedState.getInpatientEpisode().getConfirmedDischargeDateTime().toString() : null;
		
		String consultant = bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getPasEventIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getConsultantIsNotNull() ? bedState.getInpatientEpisode().getPasEvent().getConsultant().getIMosName() : null;		
		String patientSex =  bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatientIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatient().getSexIsNotNull() ? bedState.getInpatientEpisode().getPasEvent().getPatient().getSex().getText() : null;
		String patientDOB =  bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatientIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatient().getDobIsNotNull() ? bedState.getInpatientEpisode().getPasEvent().getPatient().getDob().toString() : null;
		String chairBedlabel = bedState.getBedSpaceIsNotNull() && bedState.getBedSpace().getBedSpaceTypeIsNotNull() ? bedState.getBedSpace().getBedSpaceType().getText() : "Bed/Chair";
		
		boolean isMale = bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getPasEventIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatientIsNotNull()  && Sex.MALE.equals(bedState.getInpatientEpisode().getPasEvent().getPatient().getSex());
		boolean isFemale = bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getPasEventIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatientIsNotNull()  && Sex.FEMALE.equals(bedState.getInpatientEpisode().getPasEvent().getPatient().getSex());
		
		String bgcolor = isMale ?  Color.SkyBlue.getBean().getValue() : (isFemale ? "#FFCCCC" : "" ); 
					
		String bedNumber = bedState.getBedSpaceIsNotNull() && bedState.getBedSpace().getBedNumberIsNotNull()  ? bedState.getBedSpace().getBedNumber() : null;
		String bedBayName = bedState.getBayIsNotNull() ? bedState.getBay().getName() : null;
		
		String primaryIDLabel = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()).getText();
		String primaryIDValue = bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatientIsNotNull() && bedState.getInpatientEpisode().getPasEvent().getPatient().getDisplayId() != null ?  bedState.getInpatientEpisode().getPasEvent().getPatient().getDisplayId().getValue() : null;
		
		StringBuffer strTooltip = new StringBuffer();
		
		boolean bBedClosed  = bedState.getCurrentBedStatusIsNotNull() && (BedStatus.FOR_CLEANING.equals(bedState.getCurrentBedStatus().getBedStatus()) || BedStatus.CLOSED.equals(bedState.getCurrentBedStatus().getBedStatus()));
			
		String description = bedState.getBedSpace().getDescription();
		String closureDateTime = (bBedClosed && bedState.getCurrentBedStatus().getStatusDateTime() != null) ?  bedState.getCurrentBedStatus().getStatusDateTime().toString(): null;
		String reasonForClosure = (bBedClosed && bedState.getCurrentBedStatus().getReasonForClosureIsNotNull()) ? bedState.getCurrentBedStatus().getReasonForClosure().getText(): null;
			
		String estBedReopenDate = (bBedClosed && bedState.getCurrentBedStatus().getEstReopeningDateTimeIsNotNull()) ? bedState.getCurrentBedStatus().getEstReopeningDateTime().toString(): null;
		String isOnHomeLeaveNoticeBanner = bedState.getInpatientEpisodeIsNotNull() && Boolean.TRUE.equals(bedState.getInpatientEpisode().getIsOnHomeLeave()) ? "Patient went on Home Leave " + (bedState.getInpatientEpisode().getDateOnHomeLeaveIsNotNull() ?  "on: " +  bedState.getInpatientEpisode().getDateOnHomeLeave().toString() + (bedState.getInpatientEpisode().getTimeOnHomeLeaveIsNotNull() ? " at " + bedState.getInpatientEpisode().getTimeOnHomeLeave().toString() : "") : "") +  (bedState.getInpatientEpisode().getExpectedDateOfReturnIsNotNull() ? " <br/>Patient is expected to return on: " + bedState.getInpatientEpisode().getExpectedDateOfReturn().toString() + (bedState.getInpatientEpisode().getExpectedTimeOfReturnIsNotNull() ? " at " + bedState.getInpatientEpisode().getExpectedTimeOfReturn().toString() : "") : "") : null;
		String bedClosedOrForCleaning = bBedClosed ? (BedStatus.FOR_CLEANING.equals(bedState.getCurrentBedStatus().getBedStatus()) ? chairBedlabel + " Requires Cleaning" : (BedStatus.CLOSED.equals(bedState.getCurrentBedStatus().getBedStatus()) ? chairBedlabel + " Is Currently Closed": null)) : null;
		//WDEV-22205
		//String obsScoreInfo = bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getLatestSECSScoreIsNotNull() ?  buildObsScoreDisplay(bedState.getInpatientEpisode().getLatestSECSScore()) : null;
		String bedReadyDate = bedState.getInpatientEpisodeIsNotNull() && bedState.getInpatientEpisode().getAssociatedPendingTransferIsNotNull() && bedState.getInpatientEpisode().getAssociatedPendingTransfer().getBedAvailableDateTimeIsNotNull() ? bedState.getInpatientEpisode().getAssociatedPendingTransfer().getBedAvailableDateTime().toString() :  "";
		
		String isOnTrackingMovement = isPatientOnTrackingMove(bedState.getInpatientEpisode()) && bedState.getInpatientEpisode().getCurrentTrackingMovement().getMovementType() != null ? "Patient is currently tracked to: " + bedState.getInpatientEpisode().getCurrentTrackingMovement().getMovementType().getText()  + (bedState.getInpatientEpisode().getCurrentTrackingMovement().getLeftWardTime() != null ? " since: " + bedState.getInpatientEpisode().getCurrentTrackingMovement().getLeftWardTime().toString() : "") + (bedState.getInpatientEpisode().getCurrentTrackingMovement().getExpectedReturnTimeIsNotNull() ? "</br>Patient is expected to return on: " + bedState.getInpatientEpisode().getCurrentTrackingMovement().getExpectedReturnTime().toString() : "") : null;
		
		strTooltip.append("<html><head></head><body><table " + (bgcolor.length() > 0 ?  "style = \"background-color:" + bgcolor + ";\"" : "" )+  " width='260' border='0'" + "> <tr><td width='260'> <font color='#0000FF'><strong>"  + chairBedlabel +  " Details</strong></font></td</tr>"  + 
				(bedBayName != null ? "<tr><td style=\"vertical-align:top\" width=40%><font color='#0033FF'>Bay: </font></td><td>" + bedBayName  + "</td></tr>": "") + 
				(bedNumber != null ? "<tr><td width=40%><font color='#0033FF'> " + chairBedlabel + " Number: </font></td><td>" + bedNumber + "</td></tr>": "") +
				(description != null ? "<tr><td style=\"vertical-align:top\" width=40%><font color='#0033FF'>" + chairBedlabel + " Description: </font></td><td>" + description + "</td></tr>": ""));
		
		if (bBedClosed)
		{
			strTooltip.append((bedClosedOrForCleaning != null ? "<tr><td colspan ='2'> <font color='#FF0000'><strong> " + bedClosedOrForCleaning  +"</strong></font></td</tr>" : "")  +
					(closureDateTime != null ? "<tr><td width=40%><font color='#0033FF'>"  + chairBedlabel +  " Was Closed on: </font></td><td>" + closureDateTime  + "</td></tr>": "")  +
					(reasonForClosure != null ? "<tr><td width=40%><font color='#0033FF'>Reason for Closure: </font></td><td>" + reasonForClosure  + "</td></tr>": "")  + 
					(estBedReopenDate != null ? "<tr><td width=40%><font color='#0033FF'>Est. Re-Opening Date/Time: </font></td><td>" + estBedReopenDate  + "</td></tr>": ""));
		}
		if (bedState.getInpatientEpisodeIsNotNull())
		{	
			strTooltip.append("<tr><td width='260'> <font color='#FF0000'><strong>Patient Details</strong></font></td</tr>" + 
					(primaryIDValue != null ? "<tr><td  width=40%><font color='#0033FF'> " + primaryIDLabel + ":</font></td><td>" + primaryIDValue + "</td></tr>" : "")  +
					(patientSex != null ? "<tr><td width=40%><font color='#0033FF'>Sex: </font></td><td>" + patientSex + "</td></tr>" : "") + 
					(patientDOB != null ? "<tr><td width=40%><font color='#0033FF'>Date of Birth: </font></td><td>" + patientDOB + "</td></tr>" : "") +
					(consultant != null ? "<tr><td width=40%><font color='#0033FF'>Consultant:</font></td><td>" + consultant + "</td></tr>"  : "") +
					(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? 
							(estDischargeDate !=  null ? "<tr ><td width=55%><font color='#0033FF'>Est. Discharge Date/Time: </font></td><td>" + estDischargeDate + "</td></tr>" : "") + 
							(confDischargeDate !=  null ? "<tr><td width=55%><font color='#0033FF'>Confirmed Discharge Date: </font></td><td>" + confDischargeDate + "</td></tr>" : "") + 
							(bedState.getInpatientEpisode().getAssociatedPendingTransferIsNotNull() ? "<tr><td width=55%><font color='#0033FF'>" + chairBedlabel + " Available Date: </font></td><td>" + bedReadyDate + "</td></tr>" : "") +
							(isOnHomeLeaveNoticeBanner !=  null ? "<tr><td colspan ='2'><font color='#23238E'><strong> " + isOnHomeLeaveNoticeBanner +  " </strong></font></td></tr>" : "") +
							(isOnTrackingMovement !=  null ? "<tr><td colspan ='2'><font color='#23238E'><strong> " + isOnTrackingMovement +  " </strong></font></td></tr>" : "") /**+
							(obsScoreInfo !=  null ? "<tr><td colspan ='2'><font color='#23238E'><strong> " + obsScoreInfo +  " </strong></font></td></tr>" : "")*/ : ""));
							
		}
		strTooltip.append("</table></body></html>");
			
		return strTooltip.toString();
	}
	/**private String buildObsScoreDisplay(PatientSecsMinVo patientSECSScore)
	{
		if (patientSECSScore == null)
			return null;
		StringBuilder str = new StringBuilder();
		str.append((patientSECSScore.getOBSProtocolTypeIsNotNull() ? "<b>" + patientSECSScore.getOBSProtocolType().getText() + " Score: </b> "  : "") + (patientSECSScore.getSECSScoreIsNotNull() ? "<b>" + patientSECSScore.getSECSScore().toString() + "</b> "  : "") + (Boolean.TRUE.equals(patientSECSScore.getEscalated()) ?  "<b>(Escalated)</b> " : "<b>(Not Escalated)</b> "));
		return str.toString();
	}*/


	private boolean isPatientDead(InpatientEpisodeShortVo inpatientEpisode)
	{
		if(inpatientEpisode == null || inpatientEpisode.getPasEvent() == null)
			return false;
		
		if(inpatientEpisode.getPasEvent().getPatient().getDod() != null)
			return true;
		
		return false;
	}

	private String createAdmissionTooltip(AdmissionDetailMotherVo admissionDetail)
	{
		if (admissionDetail == null)
			throw new CodingRuntimeException("voAdmission cannot be null in method createAdmissionTooltip");
		
		StringBuffer strTooltip = new StringBuffer();
		String patient = admissionDetail.getPatientString();
		String admissionDateTime = admissionDetail.getAdmissionDateTimeIsNotNull() ?  admissionDetail.getAdmissionDateTime().toString(true) : "";
		String ward = admissionDetail.getWardIsNotNull() ? admissionDetail.getWard().getName() : "[DISCHARGED]";
		String bedNo = admissionDetail.getBedIsNotNull() && admissionDetail.getBed().getBedNumberIsNotNull() ? admissionDetail.getBed().getBedNumber() : "";
		String consultant = admissionDetail.getConsultantIsNotNull() ? admissionDetail.getConsultant().getIMosName() : "";
		String specialty = admissionDetail.getSpecialtyIsNotNull() ? admissionDetail.getSpecialty().getText(): "";
		
		strTooltip.append("<html><head></head><body><p><font color='#FF0000'><strong>Mother's Current Admission Detail</strong></font>" +
				"<table width='240' border='0'><tr><td width='84'><font color='#0033FF'>Patient: </font></td><td>" +
				patient +
				"</td></tr><tr><td><font color='#0033FF'>Adm. Date/Time: </font></td><td>" +
				admissionDateTime +
				"</td></tr><tr><td><font color='#0033FF'>Ward: </font></td><td>" +
				ward +
				"</td></tr><tr><td><font color='#0033FF'>Bed No.: </font></td><td>" +
				bedNo +
				"</td></tr><tr><td><font color='#0033FF'>Consultant: </font></td><td>" +
				consultant +
				"</td></tr><tr><td><font color='#0033FF'>Specialty: </font></td><td>" +
				specialty +
				"</td></tr></table></p>" +
				"</body></html>");
		
		return strTooltip.toString();
	}

	private Image calculateInfants(InpatientEpisodeShortVo inpatientEpisode)
	{
		Image imgNumInfants = null;
		//get number of infants for this patient
		int count = domain.countInfants(inpatientEpisode.getPasEvent().getPatient());
		
		if(count == 1)
			imgNumInfants = form.getImages().Core.Infant1;
		if(count == 2)
			imgNumInfants = form.getImages().Core.Infant2;
		if(count == 3)
			imgNumInfants = form.getImages().Core.Infant3;
		if(count == 4)
			imgNumInfants = form.getImages().Core.Infant4;
		if(count == 5)
			imgNumInfants = form.getImages().Core.Infant5;
		if(count == 6)
			imgNumInfants = form.getImages().Core.Infant6;
		if(count == 7)
			imgNumInfants = form.getImages().Core.Infant7;
		if(count == 8)
			imgNumInfants = form.getImages().Core.Infant8;
		
		return imgNumInfants;
	}

	private boolean isInpatientEpisodeonTransefrOutList(InpatientEpisodeRefVo voInpatEpis)
	{
		if(voInpatEpis == null)
			return false;
		
		PendingTransfersLiteVoCollection voCollTransfersOut = form.getLocalContext().getTransfersOut();
		if(voCollTransfersOut == null)
			return false;
		
		for(PendingTransfersLiteVo voTransferOut : voCollTransfersOut)
		{
			if(voTransferOut.getInpatientEpisodeIsNotNull() && voTransferOut.getInpatientEpisode().equals(voInpatEpis))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onDyngrdDisplayRowSelectionChanged(DynamicGridRow row) 
	{
		if (row.getValue() instanceof PatientShort)
		{
			form.getGlobalContext().Core.setSelectingPatientForm(engine.getFormName());
			form.getGlobalContext().Core.setPatientShort((PatientShort) row.getValue());
		}
		
		//WDEV-11449 - setting CareContext for EDischarge
		setCareContextIfApplicable(row);
			
		updateContextMenuState();	
	}

	
	protected void setCareContextIfApplicable(DynamicGridRow row)
	{
		if(row.getIdentifier() instanceof PASEventRefVo)
			form.getGlobalContext().Core.setCurrentCareContext( domain.getCareContextForPasEvent((PASEventRefVo) row.getIdentifier()));	
		else if(row.getIdentifier() instanceof PendingTransfersLiteVo)
		{
			if(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisodeIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisode().getPasEvent()));
		}
		else if(row.getIdentifier() instanceof PendingTransfersLiteVo)
		{
			if(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisodeIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((PendingTransfersLiteVo)row.getIdentifier()).getInpatientEpisode().getPasEvent()));
		}
		else if(row.getIdentifier() instanceof InpatientEpisodeLiteVo)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((InpatientEpisodeLiteVo)row.getIdentifier()).getPasEvent()));
		}
		else if(row.getIdentifier() instanceof PendingElectiveAdmissionAdmitVo)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextForPasEvent(((PendingElectiveAdmissionAdmitVo)row.getIdentifier()).getPasEvent()));
		}
		else
			form.getGlobalContext().Core.setCurrentCareContext(null);
		
		resetPIDBarText();//WDEV-14476 
		
	}
	
	//WDEV-14476
	private void resetPIDBarText()
	{
		if ( ! form.getGlobalContext().Core.getPatientShortIsNotNull())
			return;
		
		if ( ! form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.TransferCancellation) ) //WDEV-20326
		{
			if (DialogResult.OK.equals(result))
			{	
				PendingTransfersLiteVo voTransfer = form.getGlobalContext().Core.getADTPendingTransfer();
				try
				{
					domain.cancelTransfer(voTransfer, form.cmbWard().getValue()); //WDEV-10421
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					bayValueChanged();
					return;
				}
				catch (ForeignKeyViolationException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}

				bayValueChanged();
			}
		}
		else if (formName.equals(form.getForms().Core.CloseBlockReOpenBayOrWardDlg) && !DialogResult.CANCEL.equals(result)) //WDEV-20328
		{
			form.getLocalContext().setWardBayConfig(domain.getWardBayConfigByWard(form.cmbWard().getValue()));
			updateWardBayClosingControlsState();
			setClosingLabels(form.getLocalContext().getWardBayConfig());
		}
		else
		{	
			//WDEV-22655
			if (!DialogResult.OK.equals(result) && formName.equals(form.getForms().Core.BedInfoDialog) && form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getWardIsNotNull())
			{
				form.getGlobalContext().Core.setPatientShort(form.getGlobalContext().Core.getPatientShort());
			}
			loadData();
			loadSelectedLayout();
			populateDynamicGridFromData();
			updateContextMenuState();
			updateWardBayClosingControlsState();
		}	

		form.ccPatientSummary().refresh(form.cmbWard().getValue(), form.cmbBay().getValue());
		updateWardBayClosingControlsState();
	}
	
	
	@Override
	protected void onCcPatientSummaryValueChanged() throws PresentationLogicException
	{
		bayValueChanged();
	}
	
	
	private void setClosingLabels(WardBayConfigForWardViewVo voWardBayConfig)
	{
		String color = "";
		form.htmWardStatus().setHTML("");
		int baysSize = form.cmbBay().getValues().size();
		if (voWardBayConfig == null)
			return;
		if (voWardBayConfig.getWardAvailabilityStatus() == null || WardBayStatus.OPEN.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{	
			if (form.cmbBay().getValue() == null || baysSize <=1)
			{
				int count = countBaysOutOfHours(voWardBayConfig); //WDEV-21060
				color = count == 0 ?  Color.Green.getBean().getValue(): Color.Red.getBean().getValue();
				
				form.htmWardStatus().setHTML(count == 0 ? "<div style=\"color:" + color + "; font-size: 16px;\" align=\"center\"><b>The ward is currently open</b></div> " : (baysSize == 1 ? "<div style=\"color:" + color +"; font-size: 16px;\" align=\"center\"><b> The ward is currently out of opening hours </b></div> " : "<div style=\"color:" + color +"; font-size: 16px;\" align=\"center\"><b> The ward has " + String.valueOf(count) + " bay" + (count > 1 ? "s" : "") + " currently out of opening hours </b></div> "));				
			}	
			else
			{	
				BayConfigForWardViewVo selectedBayConfig = voWardBayConfig.getBayConfig(form.cmbBay().getValue());
				setClosingLabelsForBay(selectedBayConfig,baysSize);
			}

		}
		else if (WardBayStatus.BLOCKED.equals(voWardBayConfig.getWardAvailabilityStatus()) || WardBayStatus.CLOSED.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{
			String szString = getLatestBlockingClosingDetails(voWardBayConfig);
			ColorBean amberBean = new ColorBean();
			amberBean.setName("Amber");
			amberBean.setValue(AMBER_COLOR_HEXA_CODE);
			
			color = WardBayStatus.BLOCKED.equals(voWardBayConfig.getWardAvailabilityStatus()) ? amberBean.getValue() : Color.Red.getBean().getValue();			

			if (szString != null && szString.length() > 30)
			{	
				form.htmWardStatus().setHTML("<div style=\"color:" + color + "; font-size: 16px;\" align=\"center\"><b>" + szString + "</b></div>");
				if (szString.length() >= 62)
				{
					form.htmWardStatus().setHTML("<div title =\"" + szString + "\" style=\"color:"+ color + "; font-size: 16px;\" align=\"center\"><b>" + szString.substring(0,58) + "..." + "</b></div>");					
				}				
			}	
		}		
	}
	//WDEV-21060
	private int countBaysOutOfHours(WardBayConfigForWardViewVo voWardBayConfig)
	{
		int count = 0;
		if (voWardBayConfig == null || voWardBayConfig.getBays() == null || voWardBayConfig.getBays().size() == 0)
			return count;
		for (BayConfigForWardViewVo bay : voWardBayConfig.getBays())
		{
			if (Boolean.TRUE.equals(bay.getIsActive()) && isBayOutOfOpeningHours(bay) && isfloorBedSpaceLayoutActive(voWardBayConfig, bay.getBay()))
			{
				count++;
			}
		}
		return count;
	}
	private void setClosingLabelsForBay(BayConfigForWardViewVo selectedBayConfig, int baysSize)
	{
		String color = "";
		form.htmWardStatus().setHTML("");

		if (selectedBayConfig == null || !Boolean.TRUE.equals(selectedBayConfig.getIsActive()))			
			return;
		
		boolean isBayOutOfOpeningHours = isBayOutOfOpeningHours(selectedBayConfig) && isfloorBedSpaceLayoutActive(form.getLocalContext().getWardBayConfig(), selectedBayConfig.getBay());		
		
		if (selectedBayConfig.getBayAvailabilityStatus() == null || WardBayStatus.OPEN.equals(selectedBayConfig.getBayAvailabilityStatus()))
		{	
			color = isBayOutOfOpeningHours ? Color.Red.getBean().getValue() : Color.Green.getBean().getValue();
			form.htmWardStatus().setHTML("<div style=\"color:" + color + "; font-size: 16px;\" align=\"center\"><b>  The" + (baysSize == 1 ? " ward " : " bay ")    + "is currently " +  (isBayOutOfOpeningHours ?  "out of opening hours (opening time: " + (selectedBayConfig.getOpeningTimeIsNotNull() ? selectedBayConfig.getOpeningTime().toString() : "") + ")" : "open ") + "</b></div> ");
						
		}
		else if (WardBayStatus.BLOCKED.equals(selectedBayConfig.getBayAvailabilityStatus()) || WardBayStatus.CLOSED.equals(selectedBayConfig.getBayAvailabilityStatus()))
		{
			String szString = getLatestBlockingClosingDetailsForBay(selectedBayConfig,baysSize);
			ColorBean amberBean = new ColorBean();
			amberBean.setName("Amber");
			amberBean.setValue(AMBER_COLOR_HEXA_CODE);
			
			color = WardBayStatus.BLOCKED.equals(selectedBayConfig.getBayAvailabilityStatus()) ?  amberBean.getValue() : Color.Red.getBean().getValue();

			if (szString != null && szString.length() >= 30)
			{	
				form.htmWardStatus().setHTML("<div style=\"color:" + color + "; font-size: 16px;\" align=\"center\"><b>" + szString + "</b></div>");
				if (szString.length() >= 63)
				{
					form.htmWardStatus().setHTML("<div title =\"" + szString + "\" style=\"color:"+ color + "; font-size: 16px;\" align=\"center\"><b>" + szString.substring(0,59) + "..." + "</b></div>");					
				}				
			}	
		}		
	}


	private String getLatestBlockingClosingDetails(WardBayConfigForWardViewVo voWardBayConfig)
	{
		if (voWardBayConfig == null)
			return null;
		WardBayBlockingDetailsVo voBlocking = null;
		WardBayClosingDetailsVo voClosing = null;
		if (WardBayStatus.BLOCKED.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{	
			for (int i=0;i<voWardBayConfig.getBlockingDetails().size();i++)
			{
				if (voWardBayConfig.getBlockingDetails().get(i) != null && voWardBayConfig.getBlockingDetails().get(i).getReopenDate() == null)
				{	
					voBlocking = voWardBayConfig.getBlockingDetails().get(i);
					break;
				}	
			}
			return "Ward Blocked on " + voBlocking.getBlockedDate().toString() + (voBlocking.getEstimatedReopeningDateIsNotNull() ? " Expected Re-Opening Time: " + voBlocking.getEstimatedReopeningDate().toString() : "") + (voBlocking.getReasonForBlockingIsNotNull() ? " Reason: " + voBlocking.getReasonForBlocking().getText() : ""); 
		}

		else if (WardBayStatus.CLOSED.equals(voWardBayConfig.getWardAvailabilityStatus()))
		{
			for (int i=0;i<voWardBayConfig.getClosingDetails().size();i++)
			{
				if (voWardBayConfig.getClosingDetails().get(i) != null && voWardBayConfig.getClosingDetails().get(i).getReopenDate() == null)
				{	
					voClosing = voWardBayConfig.getClosingDetails().get(i);
					break;
				}	
			}
			return "Ward Closed on " + voClosing.getClosureDate().toString() + (voClosing.getEstimatedReopeningDateIsNotNull() ? " Expected Re-Opening Time: " + voClosing.getEstimatedReopeningDate().toString() : "") + (voClosing.getReasonForClosureIsNotNull() ? " Reason: " + voClosing.getReasonForClosure().getText() : "");

		}
		return null;
	}
	private String getLatestBlockingClosingDetailsForBay(BayConfigForWardViewVo bayConfig, int baysSize)
	{
		if (bayConfig == null)
			return null;
		WardBayBlockingDetailsVo voBlocking = null;
		WardBayClosingDetailsVo voClosing = null;
		if (WardBayStatus.BLOCKED.equals(bayConfig.getBayAvailabilityStatus()))
		{	
			for (int i=0;i<bayConfig.getBlockingDetails().size();i++)
			{
				if (bayConfig.getBlockingDetails().get(i) != null && bayConfig.getBlockingDetails().get(i).getReopenDate() == null)
				{	
					voBlocking = bayConfig.getBlockingDetails().get(i);
					break;
				}	
			}
			return (baysSize == 1 ? "Ward" : "Bay") +  " Blocked on " + voBlocking.getBlockedDate().toString() + (voBlocking.getEstimatedReopeningDateIsNotNull() ? " Expected Re-Opening Time: " + voBlocking.getEstimatedReopeningDate().toString() : "") + (voBlocking.getReasonForBlockingIsNotNull() ? " Reason: " + voBlocking.getReasonForBlocking().getText() : ""); 
		}

		else if (WardBayStatus.CLOSED.equals(bayConfig.getBayAvailabilityStatus()))
		{
			for (int i=0;i<bayConfig.getClosingDetails().size();i++)
			{
				if (bayConfig.getClosingDetails().get(i) != null && bayConfig.getClosingDetails().get(i).getReopenDate() == null)
				{	
					voClosing = bayConfig.getClosingDetails().get(i);
					break;
				}	
			}
			return (baysSize == 1 ? "Ward" : "Bay") + " Closed on " + voClosing.getClosureDate().toString() + (voClosing.getEstimatedReopeningDateIsNotNull() ? " Expected Re-Opening Time: " + voClosing.getEstimatedReopeningDate().toString() : "") + (voClosing.getReasonForClosureIsNotNull() ? " Reason: " + voClosing.getReasonForClosure().getText() : "");

		}
		return null;
	}	
	@Override
	protected void onCmbBayValueChanged() throws PresentationLogicException 
	{
		bayValueChanged();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
	}

	private void bayValueChanged() 
	{
		form.imbRefresh().setEnabled(false);
		if(form.cmbBay().getValue() == null)
		{
			clearDisplay(true);
			updateContextMenuState();
			setClosingLabelsForBay(null,0);
			setClosingLabels(form.getLocalContext().getWardBayConfig());

			loadData();
			populateDynamicGridFromData();
			return;
		}
		
		form.imbRefresh().setEnabled(true);
		loadData();
		loadSelectedLayout();
		populateDynamicGridFromData();
		updateContextMenuState();
		updateWardBayClosingControlsState();
		
		form.ccPatientSummary().setValue(form.cmbWard().getValue(), form.cmbBay().getValue());
	}

	private void loadData()
	{
		//large amount of domain calls that should not be done on Taunton where just the counts are displayed
		if (ConfigFlag.UI.WARD_VIEW_RHS_TYPE.getValue().equals(RHS_TYPE_WARD_SUMMARY)) 
		{	
			form.getLocalContext().setOnHomeLeave(form.cmbWard().getValue() == null ? null : domain.listHomeLeaveByWard(form.cmbWard().getValue()));
			form.getLocalContext().setOnTheWard(form.cmbWard().getValue() == null ? null : domain.listInpatientEpisodeByWard(form.cmbWard().getValue()));
			form.getLocalContext().setPendingElective(form.cmbWard().getValue() == null ? null : domain.listPendingElectiveAdmission(form.cmbWard().getValue()));
			form.getLocalContext().setPatientElectiveList(form.cmbWard().getValue() == null ? null : domain.listPatientElectiveListForWardViewVo(form.cmbWard().getValue(), new Date()));	//wdev-18936, wdev-19115
			form.getLocalContext().setPendingEmergency(form.cmbWard().getValue() == null ? null : domain.listEmergencyAdmission(form.cmbWard().getValue()));
			form.getLocalContext().setWaitingArea(form.cmbWard().getValue() == null ? null : domain.listWaitingAreaPatientsByWard(form.cmbWard().getValue()));
		}
		
		form.getLocalContext().setTransfersOut(form.cmbWard().getValue() == null ? null : domain.listPendingTransfersOutByWard(form.cmbWard().getValue()));
		form.getLocalContext().setTransfersIn(form.cmbWard().getValue() == null ? null : domain.listPendingTransfersInByWard(form.cmbWard().getValue()));
		form.getGlobalContext().Core.setADTTransfersIn(form.getLocalContext().getTransfersIn());
		form.getGlobalContext().Core.setADTTransfersOut(form.getLocalContext().getTransfersOut());
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")) //WDEV-20328
		{	
			form.getLocalContext().setWardBayConfig(form.cmbWard().getValue() == null  ? null :domain.getWardBayConfigByWard(form.cmbWard().getValue()));
			setClosingLabels(form.getLocalContext().getWardBayConfig());			
		}		
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		clearDisplay(false);
		form.imbRefresh().setEnabled(false);
		form.cmbBay().clear();//WDEV-15908 
		loadWardsForSelectedHosp();
		populateSearchCriteriaDataFromScreen();///WDEV-12925
		
		form.ccPatientSummary().setValue(form.cmbWard().getValue(), form.cmbBay().getValue());
	}

	private void loadWardsForSelectedHosp()
	{
		form.cmbWard().clear();
		
		if(form.cmbHospital().getValue() != null)
		{
			LocationLiteVoCollection wardsColl = domain.listWardsForCurrentLocation(form.cmbHospital().getValue());
			if(wardsColl != null)
			{
				for(int x = 0; x < wardsColl.size(); x++)
				{
					addWard(wardsColl.get(x));
				}
				
				//WDEV-15908 
				if(wardsColl.size() == 1)
				{
					form.cmbWard().setValue(wardsColl.get(0));
					wardValueChanged();
				}
			}
		}
		updateWardBayClosingControlsState();
	}
	
	private void populateSearchCriteriaDataFromScreen()///WDEV-12925
	{
		// If the Ward View was opened as a dialog then do not save the Search Criteria
		if (engine.isDialog())
		{	
			updateContextMenuState();//WDEV-20276 -1
			return;
		}
		if (form.cmbHospital().getValue() == null)
		{
			form.getGlobalContext().Core.setWardViewSearchCriteria(null);
			updateContextMenuState(); //WDEV-14586
			return;
		}
		WardViewSearchCriteriaVo crit = new WardViewSearchCriteriaVo();
		crit.setHospital(form.cmbHospital().getValue());
		crit.setWard(form.cmbWard().getValue());
		crit.setBay(form.cmbBay().getValue());
		form.getGlobalContext().Core.setWardViewSearchCriteria(crit);
		updateContextMenuState(); //WDEV-14586
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.WardView.TRANSFER:
				form.getGlobalContext().Core.setSelectedBedSpaceState(null);
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.TRANSFERWAITINGAREAPATIENT); 
				if(form.dyngrdDisplay().getSelectedRow() != null && form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo)
				{
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient((InpatientEpisodeLiteVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
					engine.open(form.getForms().Core.BedInfoDialog);
				}
			break;
			case GenForm.ContextMenus.CoreNamespace.WardView.DISCHARGE:
				form.getGlobalContext().Core.setSelectedBedSpaceState(null);
				form.getGlobalContext().Core.setBedInfoAction(BedInfoAction.DISCHARGEWAITINGAREAPATIENT); 
				if(form.dyngrdDisplay().getSelectedRow() != null && form.dyngrdDisplay().getSelectedRow().getIdentifier() instanceof InpatientEpisodeLiteVo)
				{
					form.getGlobalContext().Core.setSelectedWaitingAreaPatient((InpatientEpisodeLiteVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
					engine.open(form.getForms().Core.BedInfoDialog);
				}
			break;
			case GenForm.ContextMenus.CoreNamespace.WardView.CANCEL_TRANSFER:
				cancelTransfer();
			break;
			case GenForm.ContextMenus.CoreNamespace.WardView.ASSIGNWARD:
				
				if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() == true )	//wdev-18936
				{
					form.getGlobalContext().Core.setPatientElectiveListForWardViewVo((PatientElectiveListForWardViewVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
				}
				else
					form.getGlobalContext().Core.setPendingElectiveAdmission((PendingElectiveAdmissionAdmitVo) form.dyngrdDisplay().getSelectedRow().getIdentifier());
				
				engine.open(form.getForms().Core.AssignWard);
			break;
			default :
			break;
		}
	}

	private void cancelTransfer()
	{
		if(form.dyngrdDisplay().getSelectedRow() == null || form.dyngrdDisplay().getSelectedRow().getIdentifier() == null)
			throw new CodingRuntimeException("No Pending Transfer selected in method cancelTransfer");
		
		PendingTransfersLiteVo voTransfer = (PendingTransfersLiteVo)form.dyngrdDisplay().getSelectedRow().getIdentifier();
		if (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")) //WDEV-20326
		{	
			form.getGlobalContext().Core.setADTPendingTransfer(voTransfer);
			engine.open(form.getForms().Core.TransferCancellation);
		}
		else
		{
			try
			{
				domain.cancelTransfer(voTransfer, form.cmbWard().getValue()); //WDEV-10421
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				bayValueChanged();
				return;
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}

			bayValueChanged();
		}
	}

	@Override
	protected void onImbRefreshClick() throws PresentationLogicException
	{
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbRefresh().setTooltip("Click button to start the automatic refresh of Ward View");	
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			form.imbRefresh().setTooltip("Click button to stop the automatic refresh of Ward View");
			form.getTimers().gettimerSearch().setEnabled(true);
			form.imbRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
			bayValueChanged();
		}
		
		enableSearchCriteria(!form.getTimers().gettimerSearch().isEnabled());
	}

	private void enableSearchCriteria(boolean bEnable)
	{
		form.cmbHospital().setEnabled(bEnable);
		form.cmbWard().setEnabled(bEnable);
		form.cmbBay().setEnabled(bEnable);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		bayValueChanged();
	}

	@Override
	protected void onBtnPrintReportClick() throws PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		
		if(form.cmbWard().getValue()==null)		
		{
			engine.showMessage("Please select a ward !");
			return;
		}
		
		//we need a better way to do this
		Object[] obj = domain.getSystemReportAndTemplate(new Integer(297));
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
		client.addSeed(new SeedValue("Ward",  form.cmbWard().getValue().getID_Location().intValue(), Integer.class));		
		client.addSeed(new SeedValue("Consultant",  null, Integer.class));
		client.addSeed(new SeedValue("Specialty",  null, Integer.class));
		
		
		String resultUrl = "";
		try
		{
			resultUrl = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		engine.openUrl(resultUrl);
		
	}
	
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}
	//WDEV-20328 
	@Override
	protected void onBtnReopenWardClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.REOPEN_WARD, form.cmbWard().getValue()}, "Re-Open Ward");		
		
	}

	@Override
	protected void onBtnBlockWardClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.BLOCK_WARD, form.cmbWard().getValue(),form.ccPatientSummary().getAwaitingBedCount()}, "Block Ward");
	}

	@Override
	protected void onBtnCloseWardClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.CLOSE_WARD, form.cmbWard().getValue(),form.ccPatientSummary().getAwaitingBedCount()},"Close Ward");
		
	}

	@Override
	protected void onBtnReopenBayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.REOPEN_BAY,form.cmbWard().getValue()},"Re-Open Bay(s)");
		
	}

	@Override
	protected void onBtnCloseBayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.CLOSE_BAY,form.cmbWard().getValue(), form.ccPatientSummary().getAwaitingBedCount()},"Close Bay(s)");
		
		
	}
	@Override
	protected void onBtnBlockBayClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CloseBlockReOpenBayOrWardDlg, new Object[]{CloseBlockReOpenBayWardForWardView.BLOCK_BAY,form.cmbWard().getValue(),form.ccPatientSummary().getAwaitingBedCount()}," Block Bay(s)");
		
	}

	@Override
	protected void onBtnAdmitToWardClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setWardViewPatientListWard(form.cmbWard().getValue());
		form.getGlobalContext().Core.setWardViewPatientListBay(form.cmbBay().getValue());
		
		engine.open(form.getForms().Core.AdmitToWard, new Object[] {AdmitToWardMode.STANDARD});
	}


	@Override
	protected void onBtnBedManagementDashboardClick() throws PresentationLogicException 
	{
		if (form.cmbHospital().getValue() != null)
		{
			if(ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("BED_MANAGEMENT_DASHBOARD_URL config flag was not set.");

				return;
			}
			
			//WDEV-22837
			engine.openDashboard(ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue(), null);
			
			/*
			String url = ConfigFlag.GEN.BED_MANAGEMENT_DASHBOARD_URL.getValue() + "?HID=" + form.cmbHospital().getValue().getID();
			
			List<WindowParam> params = new ArrayList<WindowParam>();
			params.add(new WindowParam("FullScreen", "false"));
			params.add(new WindowParam("ToolBar", "false"));
			params.add(new WindowParam("StatusBar", "false"));
			params.add(new WindowParam("StatusBar", "false"));
			params.add(new WindowParam("MenuBar", "false"));
			params.add(new WindowParam("AddressBar", "true"));
			params.add(new WindowParam("Resizable", "true"));
			params.add(new WindowParam("Visible", "true"));
			params.add(new WindowParam("Width", "1440"));
			params.add(new WindowParam("Height", "1000"));
			engine.openCustomUrl(url, params, true);
			*/
		}
	}
	
	protected void onBedPlannerBedAttachedImageClicked(Bed bed) 
	{	
		engine.showMessage("Test 'BedAttachedImageClicked' event : Bed id: " + bed.getId() + ", clicked image id: " + bed.getClickedImageId());
	}
}
