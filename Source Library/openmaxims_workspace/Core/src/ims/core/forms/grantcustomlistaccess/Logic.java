//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.grantcustomlistaccess;

import ims.core.forms.grantcustomlistaccess.GenForm.CustomListAccessEnumeration;
import ims.core.vo.CustomListVo;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}

	private void initialize()
	{
		setLabelText();
		form.CustomListAccess().setValue(null);
		form.getLocalContext().setSelectedCustomList(form.getGlobalContext().Core.getCustomList());
		setAccessType(form.getLocalContext().getSelectedCustomList());


	}
	private void setAccessType(CustomListVo selectedCustomList)
	{
		if (selectedCustomList == null)
			return;

		form.CustomListAccess().setValue(CustomListAccessEnumeration.rdoPrivate); //default

		if (Boolean.TRUE.equals(selectedCustomList.getIsReadOnly()) && selectedCustomList.getIsFullAccess() == null)
			form.CustomListAccess().setValue(CustomListAccessEnumeration.rdoReadOnlyAll);

		else if (selectedCustomList.getIsReadOnly() == null && Boolean.TRUE.equals(selectedCustomList.getIsFullAccess()))
			form.CustomListAccess().setValue(CustomListAccessEnumeration.rdoFull);

		else
		{
			form.CustomListAccess().setValue(CustomListAccessEnumeration.rdoPrivate);
		}

	}
	private void setLabelText()
	{
		String listNameForDisplay = form.getGlobalContext().Core.getCustomListIsNotNull() ? form.getGlobalContext().Core.getCustomList().getListName() != null && form.getGlobalContext().Core.getCustomList().getListName().length() > 50 ? form.getGlobalContext().Core.getCustomList().getListName().substring(0, 40) + "..." :form.getGlobalContext().Core.getCustomList().getListName() : "";  
		form.lblMessage().setValue("Please select the type of access to be granted for '" + listNameForDisplay + "' custom list:");

	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		CustomListVo selectedList = form.getLocalContext().getSelectedCustomList();

		if (selectedList != null)
		{	
			if (CustomListAccessEnumeration.rdoPrivate.equals(form.CustomListAccess().getValue()))
			{
				selectedList.setIsReadOnly(null);
				selectedList.setIsFullAccess(null);
			}

			else if (CustomListAccessEnumeration.rdoReadOnlyAll.equals(form.CustomListAccess().getValue()))
			{
				selectedList.setIsReadOnly(Boolean.TRUE);
				selectedList.setIsFullAccess(null);
			}

			else if (CustomListAccessEnumeration.rdoFull.equals(form.CustomListAccess().getValue()))
			{
				selectedList.setIsReadOnly(null);
				selectedList.setIsFullAccess(Boolean.TRUE);
			}
		}
		form.getGlobalContext().Core.setCustomList(selectedList);
		engine.close(DialogResult.OK);
	}
}
