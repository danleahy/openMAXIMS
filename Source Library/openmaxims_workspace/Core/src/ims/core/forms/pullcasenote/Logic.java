//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.pullcasenote;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.pullcasenote.GenForm.GroupSearchChosenEnumeration;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteRequestShortVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	
	private static final int COL_TRACKING			= 1;
	private static final int COL_IDENTIFIER			= 2;
	private static final int COL_PATIENT			= 3;
	private static final int COL_FOLDER				= 4;
	private static final int COL_CURRENT_LOCATION	= 5;
	private static final int COL_REQUESTED_BY_DATE	= 6;
	private static final int COL_REQUESTED_LOCATION	= 7;


	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form Event handlers
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the form
		initialize();
		// Present the form to user
		open();
	}

	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(null);
		
		if (DialogResult.OK.equals(result) && form.getForms().Core.CaseNoteOpenRequestForPatient.equals(formName))
		{
			if (alreadyInGrid(form.getGlobalContext().Core.getSelectedPatientCaseNoteRequestToPull()))
			{
				engine.showMessage("Request for Case Note Folder is already selected.");
				return;
			}
			
			addRequestToGrid(form.getGlobalContext().Core.getSelectedPatientCaseNoteRequestToPull());
		}
		
		updateControlsState();
	}


	@Override
	protected void onRadioButtonGroupSearchChosenValueChanged() throws PresentationLogicException
	{
		form.txtPatientID().setValue(null);
		form.txtTrackingID().setValue(null);
		
		updateControlsState();
	}


	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (GroupSearchChosenEnumeration.rdoTrackingID.equals(form.GroupSearchChosen().getValue()))
			searchByTrackingID();
		else if (GroupSearchChosenEnumeration.rdoPatientID.equals(form.GroupSearchChosen().getValue()))
			searchByPatientID();
		
		updateControlsState();//WDEV-21319
	}


	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}


	@Override
	protected void onBtnCompleteTransfersClick() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Get requests from grid
			PatientCaseNoteRequestShortVoCollection requests = getRequestsFromGrid();

			MemberOfStaffLiteVo mos = (MemberOfStaffLiteVo) domain.getMosUser();

			// Perform transfers
			if (Boolean.TRUE.equals(domain.saveTransfers(requests, mos)))
				engine.close(DialogResult.OK);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
	
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}


	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	
	private void initialize()
	{
		// Initialize search type
		form.GroupSearchChosen().setValue(GroupSearchChosenEnumeration.rdoTrackingID);
		
		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		// Initialize label with search identifier criteria
		form.lblPatID().setValue(dispIdType.getText());
		
		// Initialize Case Note grid
		form.dyngrdCaseNotes().clear();
		
		DynamicGridColumn column = form.dyngrdCaseNotes().getColumns().newColumn("Tracking No", COL_TRACKING);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip("Tracking No");
		
		column = form.dyngrdCaseNotes().getColumns().newColumn(dispIdType.getText(), COL_IDENTIFIER);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip(dispIdType.getText());
		
		column = form.dyngrdCaseNotes().getColumns().newColumn("Patient Name", COL_PATIENT);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip("Patient Name");
		
		column = form.dyngrdCaseNotes().getColumns().newColumn("Folder", COL_FOLDER);
		column.setWidth(100);
		column.setCanGrow(false);
		column.setHeaderTooltip("Folder");
		
		column = form.dyngrdCaseNotes().getColumns().newColumn("Current Location", COL_CURRENT_LOCATION);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip("Current Location");
		
		column = form.dyngrdCaseNotes().getColumns().newColumn("Required By", COL_REQUESTED_BY_DATE);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip("Required By Date");
		
		column = form.dyngrdCaseNotes().getColumns().newColumn("Requested Location", COL_REQUESTED_LOCATION);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip("Requested Location");
	}

	
	private void open()
	{
		clearScreen();
		
		updateControlsState();
	}


	private void searchByPatientID()
	{
		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		// Get Patient record by identifier
		PatientShort patient = domain.getPatientForIdentifier(dispIdType, form.txtPatientID().getValue());
		
		// If no Patient was found - display message to user and end search
		if (patient == null)
		{
			engine.showMessage("No patient was found for given identifier.");
			return;
		}
		
		// If a patient was found then open dialog with patient case note requests
		form.getGlobalContext().Core.setPatientShort(patient);
		engine.open(form.getForms().Core.CaseNoteOpenRequestForPatient);
	}

	
	private void searchByTrackingID()
	{
		PatientCaseNoteRequestShortVo request = null;
		
		// Step 1 - Search for requests with "Printed Pull list Date"
		// Step 2 - Get the earliest "Required by" date from requests
		PatientCaseNoteRequestShortVoCollection requests = domain.listPulledRequestsForTrackingID(form.txtTrackingID().getValue());
		
		if (requests != null && requests.size() > 0)
		{
			request = requests.get(0);
		}
		
		if (alreadyInGrid(request))
		{
			engine.showMessage("Request for Case Note Folder is already selected.");
			return;
		}

		// Step 3.1 - Add the selected request
		if (request != null)
		{
			addRequestToGrid(request);
		}
		else
		{
			// Step 3.2 - Open dialog with open requests if no records where found
			// Get Patient for Tracking ID
			PatientShort patient = domain.getPatientForTracking(form.txtTrackingID().getValue());
			
			if (patient == null)
			{
				engine.showMessage("No Patient with a Case Note Folder for giving Tracking ID was found.");
				return;
			}
				
			form.getGlobalContext().Core.setPatientShort(patient);
			engine.open(form.getForms().Core.CaseNoteOpenRequestForPatient);
		}
	}

	private void updateTotal()
	{
		form.lblTotal().setValue("Total: " + form.dyngrdCaseNotes().getRows().size());
	}

	private void clearScreen()
	{
		form.txtTrackingID().setValue(null);
		
		form.dyngrdCaseNotes().getRows().clear();
		
		updateTotal();
	}


	private void addRequestToGrid(PatientCaseNoteRequestShortVo request)
	{
		if (request == null)
			return;
		
		// Add request to grid
		DynamicGridRow row = form.dyngrdCaseNotes().getRows().newRow(); 
		
		// Tracking No cell
		DynamicGridCell cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_TRACKING), DynamicCellType.STRING);
		cell.setValue(request.getCaseNote().getTrackingID());
		cell.setTooltip(request.getCaseNote().getTrackingID());
		
		// Patient Identifier cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_IDENTIFIER), DynamicCellType.STRING);
		cell.setValue(request.getPatient().getDisplayId() != null ? request.getPatient().getDisplayId().getValue() : "");
		cell.setTooltip(request.getPatient().getDisplayId() != null ? request.getPatient().getDisplayId().getValue() : "");
		
		// Patient Name cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_PATIENT), DynamicCellType.STRING);
		cell.setValue(request.getPatient().getName().toString());
		cell.setTooltip(request.getPatient().getName().toString());
		
		// Folder cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_FOLDER), DynamicCellType.STRING);
		cell.setValue(request.getCaseNote().getFolder().getText());
		cell.setTooltip(request.getCaseNote().getFolder().getText());
		
		// Case Note Current Location cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CURRENT_LOCATION), DynamicCellType.STRING);
		cell.setValue(request.getCaseNote().getCurrentLocation().getName());
		cell.setTooltip(request.getCaseNote().getCurrentLocation().getName());
		
		// Case Note Required By date cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_REQUESTED_BY_DATE), DynamicCellType.STRING);
		cell.setValue(request.getRequiredByDate().getDate().toString());
		cell.setTooltip(request.getRequiredByDate().getDate().toString());
		
		// Case Note Requested For Location cell
		cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_REQUESTED_LOCATION), DynamicCellType.STRING);
		cell.setValue(request.getRequestedForLocation().getName());
		cell.setTooltip(request.getRequestedForLocation().getName());
		
		row.setValue(request);
		
		updateTotal();
	}


	private boolean alreadyInGrid(PatientCaseNoteRequestShortVo request)
	{
		if (request == null || request.getCaseNote() == null)
			return false;
			
		for (int i = 0; i < form.dyngrdCaseNotes().getRows().size(); i++)
		{
			PatientCaseNoteRequestShortVo gridRequest = (PatientCaseNoteRequestShortVo) form.dyngrdCaseNotes().getRows().get(i).getValue();
			
			if (request.equals(gridRequest) || request.getCaseNote().equals(gridRequest.getCaseNote()))
				return true;
		}

		return false;
	}


	private PatientCaseNoteRequestShortVoCollection getRequestsFromGrid()
	{
		PatientCaseNoteRequestShortVoCollection requests = new PatientCaseNoteRequestShortVoCollection();
		
		for (int i = 0; i < form.dyngrdCaseNotes().getRows().size(); i++)
		{
			PatientCaseNoteRequestShortVo gridRequest = (PatientCaseNoteRequestShortVo) form.dyngrdCaseNotes().getRows().get(i).getValue();
			
			requests.add(gridRequest);
		}

		return requests;
	}


	private void updateControlsState()
	{
		form.txtTrackingID().setEnabled(GroupSearchChosenEnumeration.rdoTrackingID.equals(form.GroupSearchChosen().getValue()));
		form.txtPatientID().setEnabled(GroupSearchChosenEnumeration.rdoPatientID.equals(form.GroupSearchChosen().getValue()));
		
		form.btnCompleteTransfers().setEnabled(form.dyngrdCaseNotes().getRows().size() > 0);
		
		form.getContextMenus().Core.getPullCaseNoteMenuREMOVEItem().setVisible(form.dyngrdCaseNotes().getValue() != null);
	}


	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.PullCaseNoteMenu.REMOVE:
				form.dyngrdCaseNotes().getRows().remove(form.dyngrdCaseNotes().getSelectedRow());
				updateTotal();
			break;
		}
		
		updateControlsState();
	}


	@Override
	protected void onDyngrdCaseNotesRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
	}
}
