//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotearchiveordestroy;

import ims.core.vo.CaseNoteRequestsColumnWidthVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.enums.PatientCaseNoteFolderProcessAction;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	/* form main methods -------------*/

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		boolean hasRelevantArgument = args != null && args.length > 0 && args[0] != null && args[0] instanceof PatientCaseNoteFolderProcessAction;
		if (args == null || args.length == 0 || !hasRelevantArgument)
			throw new FormOpenException("This dialog requires a PatientCaseNoteFolderProcessAction argument to function correctly." );
		
		form.getLocalContext().setDialogFunctionMode((PatientCaseNoteFolderProcessAction) args[0]);
		initialize(form.getLocalContext().getDialogFunctionMode());
		
		open();
	}
	@Override
	protected void onBtnActionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	
	// form main methods -------------
	
	// private methods --------------------
	private void open() 
	{
		populateScreenFromData(form.getLocalContext().getDialogFunctionMode(),form.getLocalContext().getCaseNoteToProcess());
		
	}
	private void populateScreenFromData(PatientCaseNoteFolderProcessAction dialogFunctionMode,	PatientCaseNoteVo caseNoteToProcess)
	{
		if (caseNoteToProcess == null)
			return;
		
		if (PatientCaseNoteFolderProcessAction.ARCHIVE.equals(dialogFunctionMode))
		{
			form.lyrArchDestr().tabPageArchive().cmbTypeArch().setValue(caseNoteToProcess.getType());
			
			if (caseNoteToProcess.getCurrentLocation() != null)
			{
				form.lyrArchDestr().tabPageArchive().qmbLocationArch().newRow(caseNoteToProcess.getCurrentLocation(), caseNoteToProcess.getCurrentLocation().getName());
				form.lyrArchDestr().tabPageArchive().qmbLocationArch().setValue(caseNoteToProcess.getCurrentLocation());
			}
			form.lyrArchDestr().tabPageArchive().cmbStatusArch().setValue(CaseNoteStatus.ARCHIVED);
			
			form.lyrArchDestr().tabPageArchive().txtTrackingIDArch().setValue(caseNoteToProcess.getTrackingID());		
		}
		
		else if (PatientCaseNoteFolderProcessAction.DESTROY.equals(dialogFunctionMode))
		{
			form.lyrArchDestr().tabPageDestroy().cmbTypeDestr().setValue(caseNoteToProcess.getType());
			
			if (caseNoteToProcess.getCurrentLocation() != null)
			{
				form.lyrArchDestr().tabPageDestroy().qmbLocDestr().newRow(caseNoteToProcess.getCurrentLocation(), caseNoteToProcess.getCurrentLocation().getName());
				form.lyrArchDestr().tabPageDestroy().qmbLocDestr().setValue(caseNoteToProcess.getCurrentLocation());
			}
			form.lyrArchDestr().tabPageDestroy().cmbStatusDestr().setValue(CaseNoteStatus.DESTROYED);
			
			form.lyrArchDestr().tabPageDestroy().txtTrackingIDDestr().setValue(caseNoteToProcess.getTrackingID());	
		}
		else if (PatientCaseNoteFolderProcessAction.SCAN.equals(dialogFunctionMode))
		{
			form.lyrArchDestr().tabPageScan().cmbScannedType().setValue(caseNoteToProcess.getType());
			
			if (caseNoteToProcess.getCurrentLocation() != null)
			{
				form.lyrArchDestr().tabPageScan().qmbScannedLocation().newRow(caseNoteToProcess.getCurrentLocation(), caseNoteToProcess.getCurrentLocation().getName());
				form.lyrArchDestr().tabPageScan().qmbScannedLocation().setValue(caseNoteToProcess.getCurrentLocation());
			}
			
			form.lyrArchDestr().tabPageScan().cmbScannedStatus().setValue(CaseNoteStatus.SCANNED);
			form.lyrArchDestr().tabPageScan().txtScannedTrackingId().setValue(caseNoteToProcess.getTrackingID());	
		}
		
	}
	private void initialize(PatientCaseNoteFolderProcessAction dialogFunctionMode)
	{
		if (dialogFunctionMode == null)
			return;
		
		CaseNoteRequestsColumnWidthVo columnWidths = getColumnsSize();
		
		form.btnCancel().setImage(form.getImages().Emergency.CORECTNOTE16);
		form.ccOpenRequests().initialize(Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, columnWidths);
		form.ccOpenRequests().setValue(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getPatientCaseNoteFolderRef());
		form.getLocalContext().setCaseNoteToProcess(domain.getPatientCaseNote(form.getGlobalContext().Core.getPatientCaseNoteFolderRef()));
				
		Object mosUser = domain.getMosUser();
		
		if (PatientCaseNoteFolderProcessAction.ARCHIVE.equals(dialogFunctionMode))
		{
			engine.setCaption("Archive Case Note Folder");
			form.btnAction().setText(" Archive Folder");
			form.btnAction().setImage(form.getImages().Core.Archive_24);
			
			form.lyrArchDestr().showtabPageArchive();
			form.lyrArchDestr().tabPageArchive().dtimArch().setValue(new DateTime());
			form.lyrArchDestr().tabPageArchive().ccArchivedBy().initialize(MosType.ALL);
			form.lyrArchDestr().tabPageArchive().ccArchivedBy().isRequired(Boolean.TRUE);
			form.lyrArchDestr().tabPageArchive().ccArchivedBy().setValue(mosUser != null ? (IMos) mosUser : null);			
		}
		else if (PatientCaseNoteFolderProcessAction.DESTROY.equals(dialogFunctionMode))
		{
			engine.setCaption("Destroy Case Note Folder");
			form.btnAction().setText(" Destroy Folder");
			form.btnAction().setImage(form.getImages().Core.Destroy24);
			
			form.lyrArchDestr().showtabPageDestroy();
			form.lyrArchDestr().tabPageDestroy().dtimDestroy().setValue(new DateTime());
			form.lyrArchDestr().tabPageDestroy().ccDestroyedBy().initialize(MosType.ALL);
			form.lyrArchDestr().tabPageDestroy().ccDestroyedBy().isRequired(Boolean.TRUE);
			form.lyrArchDestr().tabPageDestroy().ccDestroyedBy().setValue(mosUser != null ? (IMos) mosUser : null);
		}
		else if (PatientCaseNoteFolderProcessAction.SCAN.equals(dialogFunctionMode))
		{
			engine.setCaption("Scan Case Note Folder");
			form.btnAction().setText(" Scan Folder");
			form.btnAction().setImage(form.getImages().Core.scanner24x24);
			
			form.lyrArchDestr().showtabPageScan();
			form.lyrArchDestr().tabPageScan().dtimScanned().setValue(new DateTime());
			form.lyrArchDestr().tabPageScan().ccScannedBy().initialize(MosType.ALL);
			form.lyrArchDestr().tabPageScan().ccScannedBy().isRequired(Boolean.TRUE);
			form.lyrArchDestr().tabPageScan().ccScannedBy().setValue(mosUser != null ? (IMos) mosUser : null);
		}
		
	}
	
	private CaseNoteRequestsColumnWidthVo getColumnsSize()
	{
		CaseNoteRequestsColumnWidthVo colTypeVo = new CaseNoteRequestsColumnWidthVo();
		colTypeVo.setColumnTypeWidth(100);
		colTypeVo.setColumnRequestDateWidth(100);
		colTypeVo.setColumnRequestLocationWidth(160);
		colTypeVo.setColumnImage(22);
		colTypeVo.setColumnRequestByWidth(-1);
					
		return colTypeVo;
		
	}	
	
	private boolean save()
	{
		PatientCaseNoteVo caseNoteToSave = populateDataFromScreen(form.getLocalContext().getDialogFunctionMode(),form.getLocalContext().getCaseNoteToProcess());
		
		if (caseNoteToSave == null)
			return false;
		
		String[] errors = caseNoteToSave.validate(validateUIRules(form.getLocalContext().getDialogFunctionMode(),caseNoteToSave));
		
		if (errors != null)
		{
			engine.showErrors("Validation Errors",errors);
			return false;
		}
		
		try
		{			
			domain.saveCaseNoteAndProcessRequests(caseNoteToSave, form.getLocalContext().getDialogFunctionMode());
			
		}
		catch (DomainInterfaceException e)
		{
		
		}
		catch (StaleObjectException exc)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		return true;
		
	}
	
	private String[] validateUIRules(PatientCaseNoteFolderProcessAction dialogFunctionMode, PatientCaseNoteVo currentCaseNote)
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (PatientCaseNoteFolderProcessAction.ARCHIVE.equals(dialogFunctionMode))
		{
			if (form.lyrArchDestr().tabPageArchive().dtimArch().getValue() == null)
			{
				errors.add("'Archive Date' is mandatory.");				
			}
			if (form.lyrArchDestr().tabPageArchive().dtimArch().getValue() != null && form.lyrArchDestr().tabPageArchive().dtimArch().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("'Archive Date' cannot be in the future.");				
			}
			if (form.lyrArchDestr().tabPageArchive().dtimArch().getValue() != null && form.lyrArchDestr().tabPageArchive().dtimArch().getValue().isLessThan(currentCaseNote.getCreationDate()))
			{
				errors.add("'Archive Date' cannot be earlier than creation date of this Case Note Folder.");				
			}
			if (form.lyrArchDestr().tabPageArchive().ccArchivedBy().getValue() == null)
			{
				errors.add("'Archived By' is mandatory.");				
			}
		}
		else if (PatientCaseNoteFolderProcessAction.DESTROY.equals(dialogFunctionMode))
		{
			if (form.lyrArchDestr().tabPageDestroy().dtimDestroy().getValue() == null)
			{
				errors.add("'Destroy Date' is mandatory.");				
			}
			if (form.lyrArchDestr().tabPageDestroy().dtimDestroy().getValue() != null && form.lyrArchDestr().tabPageDestroy().dtimDestroy().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("'Destroy Date' cannot be in the future.");				
			}
			if (form.lyrArchDestr().tabPageDestroy().dtimDestroy().getValue() != null && form.lyrArchDestr().tabPageDestroy().dtimDestroy().getValue().isLessThan(currentCaseNote.getCreationDate()))
			{
				errors.add("'Destroy Date' cannot be earlier than creation date of this Case Note Folder.");	
			}	
			if (form.lyrArchDestr().tabPageDestroy().ccDestroyedBy().getValue() == null)
			{
				errors.add("'Destroyed By' is mandatory.");				
			}			
		}
		else if (PatientCaseNoteFolderProcessAction.SCAN.equals(dialogFunctionMode))
		{
			if (form.lyrArchDestr().tabPageScan().dtimScanned().getValue() == null)
			{
				errors.add("'Scan Date' is mandatory.");				
			}
			if (form.lyrArchDestr().tabPageScan().dtimScanned().getValue() != null && form.lyrArchDestr().tabPageScan().dtimScanned().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("'Scan Date' cannot be in the future.");				
			}
			if (form.lyrArchDestr().tabPageScan().dtimScanned().getValue() != null && form.lyrArchDestr().tabPageScan().dtimScanned().getValue().isLessThan(currentCaseNote.getCreationDate()))
			{
				errors.add("'Scan Date' cannot be earlier than creation date of this Case Note Folder.");	
			}	
			if (form.lyrArchDestr().tabPageScan().ccScannedBy().getValue() == null)
			{
				errors.add("'Scanned By' is mandatory.");				
			}			
		}
		
		if (errors.size() == 0)
			return null;
		
		return errors.toArray(new String[errors.size()]);		
	}
	
	private PatientCaseNoteVo populateDataFromScreen(PatientCaseNoteFolderProcessAction dialogFunctionMode,PatientCaseNoteVo caseNoteToSave)
	{
		if (caseNoteToSave == null)
			return null;

		caseNoteToSave = (PatientCaseNoteVo) caseNoteToSave.clone();

		if (PatientCaseNoteFolderProcessAction.ARCHIVE.equals(dialogFunctionMode))
		{
			caseNoteToSave.setArchivedDate(form.lyrArchDestr().tabPageArchive().dtimArch().getValue());
			caseNoteToSave.setType(form.lyrArchDestr().tabPageArchive().cmbTypeArch().getValue());
			caseNoteToSave.setArchivedBy((MemberOfStaffLiteVo) form.lyrArchDestr().tabPageArchive().ccArchivedBy().getValue());
			caseNoteToSave.setCurrentLocation(form.lyrArchDestr().tabPageArchive().qmbLocationArch().getValue());
			caseNoteToSave.setStatus(form.lyrArchDestr().tabPageArchive().cmbStatusArch().getValue());
			caseNoteToSave.setTrackingID(form.lyrArchDestr().tabPageArchive().txtTrackingIDArch().getValue());
			caseNoteToSave.setArchivedComment(form.lyrArchDestr().tabPageArchive().txtCommentsArch().getValue());

		}		
		else if (PatientCaseNoteFolderProcessAction.DESTROY.equals(dialogFunctionMode))
		{
			caseNoteToSave.setDestroyedDate(form.lyrArchDestr().tabPageDestroy().dtimDestroy().getValue());
			caseNoteToSave.setType(form.lyrArchDestr().tabPageDestroy().cmbTypeDestr().getValue());
			caseNoteToSave.setDestroyedBy((MemberOfStaffLiteVo) form.lyrArchDestr().tabPageDestroy().ccDestroyedBy().getValue());
			caseNoteToSave.setCurrentLocation(form.lyrArchDestr().tabPageDestroy().qmbLocDestr().getValue());
			caseNoteToSave.setStatus(form.lyrArchDestr().tabPageDestroy().cmbStatusDestr().getValue());
			caseNoteToSave.setTrackingID(form.lyrArchDestr().tabPageDestroy().txtTrackingIDDestr().getValue());
			caseNoteToSave.setDestroyedComment(form.lyrArchDestr().tabPageDestroy().txtCommentsDestr().getValue());
		}
		else if (PatientCaseNoteFolderProcessAction.SCAN.equals(dialogFunctionMode))
		{
			
			caseNoteToSave.setScannedDate(form.lyrArchDestr().tabPageScan().dtimScanned().getValue());
			caseNoteToSave.setType(form.lyrArchDestr().tabPageScan().cmbScannedType().getValue());
			caseNoteToSave.setScannedBy((MemberOfStaffLiteVo) form.lyrArchDestr().tabPageScan().ccScannedBy().getValue());
			caseNoteToSave.setCurrentLocation(form.lyrArchDestr().tabPageScan().qmbScannedLocation().getValue());
			caseNoteToSave.setStatus(form.lyrArchDestr().tabPageScan().cmbScannedStatus().getValue());
			caseNoteToSave.setTrackingID(form.lyrArchDestr().tabPageScan().txtScannedTrackingId().getValue());
			caseNoteToSave.setScannedComment(form.lyrArchDestr().tabPageScan().txtScanComments().getValue());
		}
		
		if (caseNoteToSave.getArchivedCommentIsNotNull() || caseNoteToSave.getDestroyedCommentIsNotNull() || caseNoteToSave.getScannedCommentIsNotNull())
		{	
			PatientCaseNoteCommentSaveVo currentCommentToSet = populateCurrentCommentData(dialogFunctionMode, caseNoteToSave);
			caseNoteToSave.setCurrentComment(currentCommentToSet);
		}

		return caseNoteToSave;
		
	}
	
	private PatientCaseNoteCommentSaveVo populateCurrentCommentData(PatientCaseNoteFolderProcessAction dialogFunctionMode, PatientCaseNoteVo caseNoteToSave)
	{
		PatientCaseNoteCommentSaveVo commentVo = new PatientCaseNoteCommentSaveVo();
		
		if (PatientCaseNoteFolderProcessAction.ARCHIVE.equals(dialogFunctionMode))
		{
			commentVo.setAuthoredBy(caseNoteToSave.getArchivedBy());
			commentVo.setAuthoredDate(caseNoteToSave.getArchivedDate());
			commentVo.setComment("Archive Comment: " + caseNoteToSave.getArchivedComment());
			
		}
		else if (PatientCaseNoteFolderProcessAction.DESTROY.equals(dialogFunctionMode))
		{
			commentVo.setAuthoredBy(caseNoteToSave.getDestroyedBy());
			commentVo.setAuthoredDate(caseNoteToSave.getDestroyedDate());
			commentVo.setComment("Destroy Comment: " + caseNoteToSave.getDestroyedComment());
			
		}
		else if (PatientCaseNoteFolderProcessAction.SCAN.equals(dialogFunctionMode))
		{
			commentVo.setAuthoredBy(caseNoteToSave.getScannedBy());
			commentVo.setAuthoredDate(caseNoteToSave.getScannedDate());
			commentVo.setComment("Scan Comment: " + caseNoteToSave.getScannedComment());
			
		}
		
		commentVo.setCaseNote(caseNoteToSave);
		commentVo.setCaseNoteFolderLocation(caseNoteToSave.getCurrentLocation());
		commentVo.setPatient(caseNoteToSave.getPatient());
	
		return commentVo;	
	}
	
	private void updateControlsState() 
	{
		// TODO update controls state
		
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}
}
