//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.printevolvelabel;

import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.EpisodeOfCareForEvolveLabelsVo;
import ims.core.vo.EpisodeOfCareForEvolveLabelsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int EVOLVE_REPORT_IMSID = 295; 

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	private void initialize() throws PresentationLogicException 
	{
		form.ccResponsableHCP().initialize(MosType.HCP);
		form.ccResponsableHCP().isRequired(true);
		
		form.ccPrinter().initialize(domain.getCurrentLocation(), PrinterScope.DEFAULT, false);
		
		bindEpisodesCombo();
	}

	private void bindEpisodesCombo() 
	{
		form.cmbEpisode().clear();
		
		EpisodeOfCareForEvolveLabelsVoCollection episodes = domain.listEpisodesByPatient(form.getGlobalContext().Core.getPatientShort());
		
		if(episodes == null)
			return;
		
		for(EpisodeOfCareForEvolveLabelsVo episode:episodes)
		{
			if(episode == null)
				continue;
			
			form.cmbEpisode().newRow(episode, episode.toString());
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateRules())
			printReport();
	}

	private void printReport() throws PresentationLogicException 
	{
		String queryServerUrl = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String reportServerUrl = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		Object[] obj = domain.getSystemReportAndTemplate(EVOLVE_REPORT_IMSID);
		
		QueryBuilderClient client = new QueryBuilderClient(queryServerUrl, engine.getSessionId()); 
		
		client.addSeed(new SeedValue("PATIENT_ID", form.getGlobalContext().Core.getPatientShort().getID_Patient(), Integer.class));	
		client.addSeed(new SeedValue("Responsible_HCP", form.ccResponsableHCP().getValue().getIMosHcpId(), Integer.class));
		client.addSeed(new SeedValue("Ward", form.qmbWard().getValue() != null ? form.qmbWard().getValue().getID_Location() : null, Integer.class));
		client.addSeed(new SeedValue("Document_Category", form.cmbDocumentCategory().getValue().getID(), Integer.class));
		client.addSeed(new SeedValue("Episode", form.cmbEpisode().getValue() != null ? form.cmbEpisode().getValue().getID_EpisodeOfCare() : null, Integer.class));

		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}

		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		
		try
		{					
			boolean printSuccess = client.printReport((String)obj[0], (String)obj[1], reportServerUrl, form.ccPrinter().getSelectedPrinter().getIPrinterName(), 1);
			
			if(printSuccess)
				engine.close(DialogResult.OK);
		}
		catch (QueryBuilderClientException ex)
		{
			engine.showMessage("Error creating report: " + ex.getMessage());
			return;
		}		
	}

	private boolean validateRules() 
	{
		if(!validateReportConfigFlags())
			return false;
		
		if(!validateUIRules())
			return false;
		
		return true;
	}

	private boolean validateUIRules() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if(form.ccResponsableHCP().getValue() == null)
		{
			errors.add("Responsible HCP is mandatory.");
		}
		if(form.cmbDocumentCategory().getValue() == null)
		{
			errors.add("Document Category is mandatory.");
		}
		
		if (form.ccPrinter().getSelectedPrinter() == null)
		{
			errors.add("No printer selected.");
		}
		
		if(errors.size() == 0)
			return true;
		
		engine.showErrors(errors.toArray(new String[errors.size()]));
		
		return false;
	}

	private boolean validateReportConfigFlags() 
	{
		String queryServerUrl = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String reportServerUrl = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		ArrayList<String> errors = new ArrayList<String>();
		
		if(queryServerUrl == null || queryServerUrl.length() == 0 || queryServerUrl.equals(ConfigFlag.GEN.QUERY_SERVER_URL.getDefaultValue()))
		{
			errors.add("The config flag QUERY_SERVER_URL is not set!");
		}
		
		if(reportServerUrl == null || reportServerUrl.length() == 0 || reportServerUrl.equals(ConfigFlag.GEN.REPORT_SERVER_URL.getDefaultValue()))
		{
			errors.add("The config flag REPORT_SERVER_URL is not set !");
		}
		
		if(errors.size() == 0)
			return true;
		
		engine.showErrors(errors.toArray(new String[errors.size()]));
		
		return false;
	}

	@Override
	protected void onQmbWardTextSubmited(String value) throws PresentationLogicException 
	{
		bindWard(value);
	}

	private void bindWard(String value) 
	{
		form.qmbWard().setValue(null);
		form.qmbWard().clear();
		
		LocationLiteVoCollection locations = domain.listWard(value);
		
		if(locations == null)
			return;
		
		for(LocationLiteVo location : locations)
		{
			if(location == null)
				continue;
			
			form.qmbWard().newRow(location, location.getName());
		}
		
		if(locations.size() > 0)
			form.qmbWard().showOpened();
	}
}
