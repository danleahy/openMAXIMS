//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.casenotesworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSearchLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCaseNoteRequestContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class chklistReasonForReqCheckedListBox extends CheckedListBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.CaseNoteReasonForRequest value, boolean checked, boolean enabled)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, enabled));
				}
				public void newRow(ims.core.vo.lookups.CaseNoteReasonForRequest value)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor()));
				}
				public void newRow(ims.core.vo.lookups.CaseNoteReasonForRequest value, boolean checked)
				{
					super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, true));
				}
				public ims.core.vo.lookups.CaseNoteReasonForRequestCollection getValues()
				{
					ListItemCollection checkedItems = super.control.getCheckedItems();
					if(checkedItems.size() == 0)
						return null;
					ims.core.vo.lookups.CaseNoteReasonForRequestCollection items = new ims.core.vo.lookups.CaseNoteReasonForRequestCollection();
					for(int x = 0; x < checkedItems.size(); x++)
					{
						items.add((ims.core.vo.lookups.CaseNoteReasonForRequest)checkedItems.get(x).getValue());
					}
					return items;
				}
				public void setValues(ims.core.vo.lookups.CaseNoteReasonForRequestCollection values)
				{
					if(values == null)
						super.control.setCheckedItems(null);
					else
					{
						ListItemCollection checkedItems = new ListItemCollection();
						for(int x = 0; x < values.size(); x++)
						{
							ListItem item = new ListItem();
							item.setValue(values.get(x));
							checkedItems.add(item);
						}
						super.control.setCheckedItems(checkedItems);
					}
				}
			}
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbClinicNameComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.ProfileLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.ProfileLiteVo getValue()
				{
					return (ims.scheduling.vo.ProfileLiteVo)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbReqLocationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbListOwnerComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 505, 7, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Reason for Request:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 11, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 83, 72, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requesting  \nLocation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 35, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 59, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 158, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested for Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 254, 160, 12, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "to:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 186, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requests for:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 220, 186, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requests Overdue by:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 376, 186, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "days", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 115, 186, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "days time", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 672, 64, 136, 68, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Case Notes Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 274, 156, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 128, 156, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 86, 11, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 86, 37, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbClinicNameTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbClinicNameTemp);
				qmbClinicNameComboBox qmbClinicName = (qmbClinicNameComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicNameComboBox.class, m_qmbClinicNameTemp);
				super.addComboBox(qmbClinicName);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 86, 89, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbReqLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbReqLocationTemp);
				qmbReqLocationComboBox qmbReqLocation = (qmbReqLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReqLocationComboBox.class, m_qmbReqLocationTemp);
				super.addComboBox(qmbReqLocation);
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 86, 63, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbListOwnerTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbListOwnerTemp);
				qmbListOwnerComboBox qmbListOwner = (qmbListOwnerComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbListOwnerComboBox.class, m_qmbListOwnerTemp);
				super.addComboBox(qmbListOwner);
		
				// CheckedListBox Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 505, 24, 153, 109, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				CheckedListBox m_chklistReasonForReqTemp = (CheckedListBox)factory.getControl(CheckedListBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT, null, Boolean.FALSE, null, new Integer(startTabIndex.intValue() + 10), Boolean.FALSE, null});
				addControl(m_chklistReasonForReqTemp);
				chklistReasonForReqCheckedListBox chklistReasonForReq = (chklistReasonForReqCheckedListBox)CheckedListBoxFlyweightFactory.getInstance().createCheckedListBoxBridge(chklistReasonForReqCheckedListBox.class, m_chklistReasonForReqTemp);
				super.addCheckedListBox(chklistReasonForReq);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 505, 184, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Include Completed Requests", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 86, 115, 168, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Case Notes in Medical Records", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 86, 184, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 348, 184, 23, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 720, 16, 40, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 768, 16, 40, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Admin.RefreshEnabled24, form_images_local.Admin.RefreshDisabled24, "Auto Refresh", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 672, 16, 40, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Button btnCaseNotesDashboard()
			{
				return (Button)super.getControl(11);
			}
			public DateControl dteToRequests()
			{
				return (DateControl)super.getControl(12);
			}
			public DateControl dteFromRequests()
			{
				return (DateControl)super.getControl(13);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(0);
			}
			public qmbClinicNameComboBox qmbClinicName()
			{
				return (qmbClinicNameComboBox)super.getComboBox(1);
			}
			public qmbReqLocationComboBox qmbReqLocation()
			{
				return (qmbReqLocationComboBox)super.getComboBox(2);
			}
			public qmbListOwnerComboBox qmbListOwner()
			{
				return (qmbListOwnerComboBox)super.getComboBox(3);
			}
			public chklistReasonForReqCheckedListBox chklistReasonForReq()
			{
				return (chklistReasonForReqCheckedListBox)super.getCheckedListBox(0);
			}
			public CheckBox chkIncludeCompleteRequests()
			{
				return (CheckBox)super.getControl(19);
			}
			public CheckBox chkCaseNoteMedicalRecords()
			{
				return (CheckBox)super.getControl(20);
			}
			public IntBox intRequestTimespan()
			{
				return (IntBox)super.getControl(21);
			}
			public IntBox intRequestOverdue()
			{
				return (IntBox)super.getControl(22);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(23);
			}
			public ImageButton imbAutoRefresh()
			{
				return (ImageButton)super.getControl(24);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(25);
			}
		}
		public static class tabCaseNoteByLocationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbHospitalByLocationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbLocByLocComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupRequestsByLocationRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 85, 91, 344, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper27.getX(), anchoringHelper27.getY(), anchoringHelper27.getWidth(), "Show \"Open Requests\" for Case Notes at the Current Location", startTabIndex.intValue() + 18);
				}
				public void setText(GroupRequestsByLocationEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupRequestsByLocationEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupRequestsByLocationEnumeration.None;
						case 0: return GroupRequestsByLocationEnumeration.rdoOpenRequestsForCaseNotesCurrrentLocation;
					}
					return null;
				}
				public void setValue(GroupRequestsByLocationEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupRequestsByLocationEnumeration.None.id);
				}
				public boolean isEnabled(GroupRequestsByLocationEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupRequestsByLocationEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupRequestsByLocationEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupRequestsByLocationEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupRequestsByLocationEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupRequestsByLocationEnumeration None = new GroupRequestsByLocationEnumeration(-1);
				public static GroupRequestsByLocationEnumeration rdoOpenRequestsForCaseNotesCurrrentLocation = new GroupRequestsByLocationEnumeration(0);
				private GroupRequestsByLocationEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupRequestsByLocationEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 251, 186, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "days", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 186, 200, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "In the current location for the last:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 254, 160, 12, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "to:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 158, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested for Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 33, 64, 37, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current \nLocation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 11, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 672, 64, 136, 68, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Case Notes Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 274, 156, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 128, 156, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 86, 11, 400, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbHospitalByLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbHospitalByLocationTemp);
				cmbHospitalByLocationComboBox cmbHospitalByLocation = (cmbHospitalByLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalByLocationComboBox.class, m_cmbHospitalByLocationTemp);
				super.addComboBox(cmbHospitalByLocation);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 86, 37, 400, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbLocByLocTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbLocByLocTemp);
				qmbLocByLocComboBox qmbLocByLoc = (qmbLocByLocComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbLocByLocComboBox.class, m_qmbLocByLocTemp);
				super.addComboBox(qmbLocByLoc);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 87, 67, 208, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"&nbsp;Case Notes in Medical Records", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 219, 184, 28, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 672, 16, 40, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 768, 16, 40, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Admin.RefreshEnabled24, form_images_local.Admin.RefreshDisabled24, "Auto Refresh", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 720, 16, 40, 40, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupRequestsByLocation = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupRequestsByLocation);
				GroupRequestsByLocationRadioButton GroupRequestsByLocation = (GroupRequestsByLocationRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRequestsByLocationRadioButton.class, tmpGroupRequestsByLocation);
				GroupRequestsByLocation.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupRequestsByLocation);
			}

			public Button btnCaseNotesDashboardSec()
			{
				return (Button)super.getControl(6);
			}
			public DateControl dteToByLocation()
			{
				return (DateControl)super.getControl(7);
			}
			public DateControl dteFromByLocation()
			{
				return (DateControl)super.getControl(8);
			}
			public cmbHospitalByLocationComboBox cmbHospitalByLocation()
			{
				return (cmbHospitalByLocationComboBox)super.getComboBox(0);
			}
			public qmbLocByLocComboBox qmbLocByLoc()
			{
				return (qmbLocByLocComboBox)super.getComboBox(1);
			}
			public CheckBox chkCaseNotesMedicalRecordsByLocation()
			{
				return (CheckBox)super.getControl(11);
			}
			public IntBox intLastDaysOffset()
			{
				return (IntBox)super.getControl(12);
			}
			public ImageButton imbSearchByLoc()
			{
				return (ImageButton)super.getControl(13);
			}
			public ImageButton imbAutoRefreshByLoc()
			{
				return (ImageButton)super.getControl(14);
			}
			public ImageButton imbClearByLoc()
			{
				return (ImageButton)super.getControl(15);
			}
			public GroupRequestsByLocationRadioButton GroupRequestsByLocation()
			{
				return (GroupRequestsByLocationRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 232, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabCaseNoteRequest = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Case Note Requests", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCaseNoteRequestContainer m_tabCaseNoteRequestContainer = (tabCaseNoteRequestContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCaseNoteRequestContainer.class, m_tabCaseNoteRequest, factory);
			super.addContainer(m_tabCaseNoteRequest, m_tabCaseNoteRequestContainer);
			ims.framework.utils.SizeInfo m_tabCaseNoteRequestDesignSize = new ims.framework.utils.SizeInfo(832, 232);
			ims.framework.utils.SizeInfo m_tabCaseNoteRequestRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper44.getWidth(), anchoringHelper44.getHeight());
			m_tabCaseNoteRequestContainer.setContext(form, appForm, m_tabCaseNoteRequest, loader, form_images_local, contextMenus, startControlID, m_tabCaseNoteRequestDesignSize, m_tabCaseNoteRequestRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 232, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabCaseNoteByLocation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Case Notes By Location", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCaseNoteByLocationContainer m_tabCaseNoteByLocationContainer = (tabCaseNoteByLocationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCaseNoteByLocationContainer.class, m_tabCaseNoteByLocation, factory);
			super.addContainer(m_tabCaseNoteByLocation, m_tabCaseNoteByLocationContainer);
			ims.framework.utils.SizeInfo m_tabCaseNoteByLocationDesignSize = new ims.framework.utils.SizeInfo(832, 232);
			ims.framework.utils.SizeInfo m_tabCaseNoteByLocationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper45.getWidth(), anchoringHelper45.getHeight());
			m_tabCaseNoteByLocationContainer.setContext(form, appForm, m_tabCaseNoteByLocation, loader, form_images_local, contextMenus, startControlID, m_tabCaseNoteByLocationDesignSize, m_tabCaseNoteByLocationRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCaseNoteRequest().setVisible(false);
			tabCaseNoteByLocation().setVisible(false);
		}
		public void settabCaseNoteRequestEnabled(boolean value)
		{
			tabCaseNoteRequest().setEnabled(value);
		}
		public void settabCaseNoteByLocationEnabled(boolean value)
		{
			tabCaseNoteByLocation().setEnabled(value);
		}
		public void showtabCaseNoteRequest()
		{
			tabCaseNoteByLocation().setVisible(false);
			tabCaseNoteRequest().setVisible(true);
		}
		public void showtabCaseNoteByLocation()
		{
			tabCaseNoteRequest().setVisible(false);
			tabCaseNoteByLocation().setVisible(true);
		}

		public tabCaseNoteRequestContainer tabCaseNoteRequest()
		{
			return (tabCaseNoteRequestContainer)super.layers.get(0);
		}
		public tabCaseNoteByLocationContainer tabCaseNoteByLocation()
		{
			return (tabCaseNoteByLocationContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CaseNoteWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CaseNoteWorklistSearchCriteriaVo' of the global context variable 'Core.CaseNoteWorklistSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.AutoRefreshSearch = factory.createTimer(0, 0, false);
		form.addTimer(timers.AutoRefreshSearch);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuCaseNotesWorklistMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 1, "View case note details", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5890001)))
			contextMenus.Core.contextMenuCaseNotesWorklistMenu.add(contextMenus.Core.contextMenuCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem);
		contextMenus.Core.contextMenuCaseNotesWorklistMenuPULL_CASE_NOTESItem = factory.createMenuItem(startControlID.intValue() + 2, "Pull case notes", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5890002)))
			contextMenus.Core.contextMenuCaseNotesWorklistMenu.add(contextMenus.Core.contextMenuCaseNotesWorklistMenuPULL_CASE_NOTESItem);
		contextMenus.Core.contextMenuCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem = factory.createMenuItem(startControlID.intValue() + 3, "Transfer case notes", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5890003)))
			contextMenus.Core.contextMenuCaseNotesWorklistMenu.add(contextMenus.Core.contextMenuCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem);
		contextMenus.Core.contextMenuCaseNotesWorklistMenuCOMPLETE_REQUESTItem = factory.createMenuItem(startControlID.intValue() + 4, "Complete Request", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5890004)))
			contextMenus.Core.contextMenuCaseNotesWorklistMenu.add(contextMenus.Core.contextMenuCaseNotesWorklistMenuCOMPLETE_REQUESTItem);
		contextMenus.Core.contextMenuCaseNotesWorklistMenuCANCEL_REQUESTItem = factory.createMenuItem(startControlID.intValue() + 5, "Cancel Request", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5890005)))
			contextMenus.Core.contextMenuCaseNotesWorklistMenu.add(contextMenus.Core.contextMenuCaseNotesWorklistMenuCANCEL_REQUESTItem);
		contextMenus.Core.contextMenuCaseNotesWorklistMenuBATCH_TRANSFERItem = factory.createMenuItem(startControlID.intValue() + 6, "Batch Transfer", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5890006)))
			contextMenus.Core.contextMenuCaseNotesWorklistMenu.add(contextMenus.Core.contextMenuCaseNotesWorklistMenuBATCH_TRANSFERItem);
		form.registerMenu(contextMenus.Core.contextMenuCaseNotesWorklistMenu);


		// Layer Clasess
		lyrSearchLayer m_lyrSearchLayer = (lyrSearchLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSearchLayer.class, this, factory);
		super.addLayer(m_lyrSearchLayer);
		m_lyrSearchLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 556, 556, 134, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Cancel Request", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 693, 556, 134, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Complete Request", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 419, 556, 134, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Batch Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 282, 556, 134, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Transfer Case Notes", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 145, 556, 134, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Pull Case Notes", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 556, 134, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "View Case Note Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 832, 304, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Core.contextMenuCaseNotesWorklistMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrSearchLayer lyrSearch()
	{
		return (lyrSearchLayer)super.getLayer(0);
	}
	public Button btnCancelRequest()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCompleteRequest()
	{
		return (Button)super.getControl(3);
	}
	public Button btnBatchTransfer()
	{
		return (Button)super.getControl(4);
	}
	public Button btnTransferCaseNotes()
	{
		return (Button)super.getControl(5);
	}
	public Button btnPullCaseNotes()
	{
		return (Button)super.getControl(6);
	}
	public Button btnViewCaseNotes()
	{
		return (Button)super.getControl(7);
	}
	public DynamicGrid dyngrdCaseNotes()
	{
		return (DynamicGrid)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				CaseNoteTransfer = new LocalFormName(102454);
				CaseNoteDetails = new LocalFormName(102456);
				PullCaseNote = new LocalFormName(102464);
				CaseNoteTrackingBatchTransferDialog = new LocalFormName(102474);
			}
			public final FormName CaseNoteTransfer;
			public final FormName CaseNoteDetails;
			public final FormName PullCaseNote;
			public final FormName CaseNoteTrackingBatchTransferDialog;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				RefreshDisabled24 = new ImageHelper(103367, "Images/Admin/refresh_disabled_24.png", new Integer(24), new Integer(24));
				RefreshEnabled24 = new ImageHelper(103366, "Images/Admin/refresh_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image RefreshDisabled24;
			public final ims.framework.utils.Image RefreshEnabled24;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
				Complete_Request16 = new ImageHelper(102631, "Images/Core/insert_row_ok_16.png", new Integer(16), new Integer(16));
				Edit_Request16 = new ImageHelper(102627, "Images/Core/insert_row_write_16.png", new Integer(16), new Integer(16));
				Edit_Request24 = new ImageHelper(102628, "Images/Core/insert_row_write_24.png", new Integer(24), new Integer(24));
				Complete_Request24 = new ImageHelper(102632, "Images/Core/insert_row_ok_24.png", new Integer(24), new Integer(24));
				OpenRequest24 = new ImageHelper(102636, "Images/Core/Open_Request_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
			public final ims.framework.utils.Image Complete_Request16;
			public final ims.framework.utils.Image Edit_Request16;
			public final ims.framework.utils.Image Edit_Request24;
			public final ims.framework.utils.Image Complete_Request24;
			public final ims.framework.utils.Image OpenRequest24;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedCaseNoteRequest = new ims.framework.ContextVariable("SelectedCaseNoteRequest", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier + "");
			cxl_DeniedMenuActions = new ims.framework.ContextVariable("DeniedMenuActions", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__DeniedMenuActions_" + componentIdentifier + "");
			cxl_SortRequiredBy = new ims.framework.ContextVariable("SortRequiredBy", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SortRequiredBy_" + componentIdentifier + "");
			cxl_SortPatient = new ims.framework.ContextVariable("SortPatient", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SortPatient_" + componentIdentifier + "");
			cxl_CancelRequestMessageBoxId = new ims.framework.ContextVariable("CancelRequestMessageBoxId", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__CancelRequestMessageBoxId_" + componentIdentifier + "");
			cxl_CurrentMOS = new ims.framework.ContextVariable("CurrentMOS", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__CurrentMOS_" + componentIdentifier + "");
			cxl_SortDOB = new ims.framework.ContextVariable("SortDOB", prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SortDOB_" + componentIdentifier + "");
		}
		
		public boolean getSelectedCaseNoteRequestIsNotNull()
		{
			return !cxl_SelectedCaseNoteRequest.getValueIsNull(context);
		}
		public ims.core.vo.CaseNoteForWorklistVo getSelectedCaseNoteRequest()
		{
			return (ims.core.vo.CaseNoteForWorklistVo)cxl_SelectedCaseNoteRequest.getValue(context);
		}
		public void setSelectedCaseNoteRequest(ims.core.vo.CaseNoteForWorklistVo value)
		{
			cxl_SelectedCaseNoteRequest.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCaseNoteRequest = null;
		public boolean getDeniedMenuActionsIsNotNull()
		{
			return !cxl_DeniedMenuActions.getValueIsNull(context);
		}
		public ims.admin.vo.MenuActionVoCollection getDeniedMenuActions()
		{
			return (ims.admin.vo.MenuActionVoCollection)cxl_DeniedMenuActions.getValue(context);
		}
		public void setDeniedMenuActions(ims.admin.vo.MenuActionVoCollection value)
		{
			cxl_DeniedMenuActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeniedMenuActions = null;
		public boolean getSortRequiredByIsNotNull()
		{
			return !cxl_SortRequiredBy.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortRequiredBy()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortRequiredBy.getValue(context);
		}
		public void setSortRequiredBy(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortRequiredBy.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortRequiredBy = null;
		public boolean getSortPatientIsNotNull()
		{
			return !cxl_SortPatient.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortPatient()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortPatient.getValue(context);
		}
		public void setSortPatient(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortPatient = null;
		public boolean getCancelRequestMessageBoxIdIsNotNull()
		{
			return !cxl_CancelRequestMessageBoxId.getValueIsNull(context);
		}
		public Integer getCancelRequestMessageBoxId()
		{
			return (Integer)cxl_CancelRequestMessageBoxId.getValue(context);
		}
		public void setCancelRequestMessageBoxId(Integer value)
		{
			cxl_CancelRequestMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CancelRequestMessageBoxId = null;
		public boolean getCurrentMOSIsNotNull()
		{
			return !cxl_CurrentMOS.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffLiteVo getCurrentMOS()
		{
			return (ims.core.vo.MemberOfStaffLiteVo)cxl_CurrentMOS.getValue(context);
		}
		public void setCurrentMOS(ims.core.vo.MemberOfStaffLiteVo value)
		{
			cxl_CurrentMOS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentMOS = null;
		public boolean getSortDOBIsNotNull()
		{
			return !cxl_SortDOB.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortDOB()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortDOB.getValue(context);
		}
		public void setSortDOB(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortDOB.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortDOB = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CaseNotesWorklistMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW_CASE_NOTE_DETAILS = 1;
				public static final int PULL_CASE_NOTES = 2;
				public static final int TRANSFER_CASE_NOTES = 3;
				public static final int COMPLETE_REQUEST = 4;
				public static final int CANCEL_REQUEST = 5;
				public static final int BATCH_TRANSFER = 6;
			}
			public void disableAllCaseNotesWorklistMenuMenuItems()
			{
				this.contextMenuCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem.setEnabled(false);
				this.contextMenuCaseNotesWorklistMenuPULL_CASE_NOTESItem.setEnabled(false);
				this.contextMenuCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem.setEnabled(false);
				this.contextMenuCaseNotesWorklistMenuCOMPLETE_REQUESTItem.setEnabled(false);
				this.contextMenuCaseNotesWorklistMenuCANCEL_REQUESTItem.setEnabled(false);
				this.contextMenuCaseNotesWorklistMenuBATCH_TRANSFERItem.setEnabled(false);
			}
			public void hideAllCaseNotesWorklistMenuMenuItems()
			{
				this.contextMenuCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem.setVisible(false);
				this.contextMenuCaseNotesWorklistMenuPULL_CASE_NOTESItem.setVisible(false);
				this.contextMenuCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem.setVisible(false);
				this.contextMenuCaseNotesWorklistMenuCOMPLETE_REQUESTItem.setVisible(false);
				this.contextMenuCaseNotesWorklistMenuCANCEL_REQUESTItem.setVisible(false);
				this.contextMenuCaseNotesWorklistMenuBATCH_TRANSFERItem.setVisible(false);
			}
			private Menu contextMenuCaseNotesWorklistMenu;
			public ReadOnlyMenuItem getCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem()
			{
				return this.contextMenuCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem;
			}
			private MenuItem contextMenuCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem;
			public ReadOnlyMenuItem getCaseNotesWorklistMenuPULL_CASE_NOTESItem()
			{
				return this.contextMenuCaseNotesWorklistMenuPULL_CASE_NOTESItem;
			}
			private MenuItem contextMenuCaseNotesWorklistMenuPULL_CASE_NOTESItem;
			public ReadOnlyMenuItem getCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem()
			{
				return this.contextMenuCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem;
			}
			private MenuItem contextMenuCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem;
			public ReadOnlyMenuItem getCaseNotesWorklistMenuCOMPLETE_REQUESTItem()
			{
				return this.contextMenuCaseNotesWorklistMenuCOMPLETE_REQUESTItem;
			}
			private MenuItem contextMenuCaseNotesWorklistMenuCOMPLETE_REQUESTItem;
			public ReadOnlyMenuItem getCaseNotesWorklistMenuCANCEL_REQUESTItem()
			{
				return this.contextMenuCaseNotesWorklistMenuCANCEL_REQUESTItem;
			}
			private MenuItem contextMenuCaseNotesWorklistMenuCANCEL_REQUESTItem;
			public ReadOnlyMenuItem getCaseNotesWorklistMenuBATCH_TRANSFERItem()
			{
				return this.contextMenuCaseNotesWorklistMenuBATCH_TRANSFERItem;
			}
			private MenuItem contextMenuCaseNotesWorklistMenuBATCH_TRANSFERItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer AutoRefreshSearch;
		public Timer getAutoRefreshSearch()
		{
			return AutoRefreshSearch;
		}
		public void enableAll()
		{
			AutoRefreshSearch.setEnabled(true);
		}
		public void disableAll()
		{
			AutoRefreshSearch.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[159];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCaseNoteFolderRef", "BO-1003100130-ID", "ID_PatientCaseNote");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCaseNoteFolderRef", "BO-1003100130-TYPE", "Type");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCaseNoteFolderRef", "BO-1003100130-FOLDER", "Folder");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCaseNoteFolderRef", "BO-1003100130-TRACKINGID", "TrackingID");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Core.CaseNoteRequestRef", "BO-1003100131-ID", "ID_PatientCaseNoteRequest");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-ID", "ID_PatientCaseNote");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-TYPE", "Type");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-STATUS", "Status");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-TRACKINGID", "TrackingID");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-CREATIONDATE", "CreationDate");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-FOLDER", "Folder");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__SelectedCaseNoteRequest_" + componentIdentifier, "BO-1003100130-LASTTRANSFERDATE", "LastTransferDate");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__CurrentMOS_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__CurrentMOS_" + componentIdentifier, "BO-1006100006-INITIALS", "Initials");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CaseNotesWorklist.__internal_x_context__CurrentMOS_" + componentIdentifier, "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
