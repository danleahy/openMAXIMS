//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.casenotesworklist;

import ims.admin.vo.MenuActionVo;
import ims.admin.vo.MenuActionVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.casenotesworklist.GenForm.lyrSearchLayer.tabCaseNoteByLocationContainer.GroupRequestsByLocationEnumeration;
import ims.core.vo.CaseNoteForWorklistVo;
import ims.core.vo.CaseNoteForWorklistVoCollection;
import ims.core.vo.CaseNoteRequestForWorklistVo;
import ims.core.vo.CaseNoteWorklistSearchCriteriaVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationForCaseNoteWorklistVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteTypeVo;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.WindowParam;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_IDENTIFIER						= 1;
	private static final int COL_PATIENT						= 2;
	private static final int COL_DOB							= 3;
	private static final int COL_SEX							= 4;
	private static final int COL_CASE_NOTE_CURRENT_LOCATION		= 5;
	private static final int COL_CASE_NOTE_FOLDER				= 6;
	private static final int COL_CASE_NOTE_TRACKING_NO			= 7;
	private static final int COL_CASE_NOTE_LAST_TRANSFER_DATE	= 8;
	private static final int COL_CASE_NOTE_REQUIRED_BY_DATE		= 9;
	private static final int COL_CASE_NOTE_REQUESTOR_LOCATION	= 10;
	private static final int COL_CASE_NOTE_REQUEST_STATUS_IMG	= 11;		//wdev-20063
	

	private static final int INTERVAL_SECONDS = 5;
	
	private static final int TAB_CASE_NOTE_REQUESTS		= 1;
	private static final int TAB_CASE_NOTE_BY_LOCATION	= 2;

	
	private static final int CASE_NOTE_IN_LOCATION						= 1;
	private static final int OPEN_REQUESTS_IN_LOCATION					= 2;
	private static final int OPEN_REQUESTS_FOR_CASE_NOTE_IN_LOCATIION	= 3;
	
	private static final int VIEW_CASE_NOTE_DETAILS = 5890001;
	private static final int PULL_CASE_NOTES = 5890002;
	private static final int TRANSFER_CASE_NOTES = 5890003;
	private static final int COMPLETE_REQUEST = 5890004;
	private static final int CANCEL_REQUEST = 5890005;
	private static final int BATCH_TRANSFER = 5890006;//WDEV-21098
	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form Event handlers
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();

		open();
	}

	
	@Override
	protected void onlyrSearchTabChanged(ims.framework.LayerBridge tab)
	{
		engine.setCaption(tab.equals(form.lyrSearch().tabCaseNoteRequest()) ? "CaseNote Requests Work List " : "CaseNotes By Location Work List");
		
		form.getTimers().getAutoRefreshSearch().setEnabled(false);
		
		if(tab.equals(form.lyrSearch().tabCaseNoteByLocation()))
			form.getGlobalContext().Core.setCaseNoteRequestRef(null);//WDEV-21010
		
		if (tab.equals(form.lyrSearch().tabCaseNoteRequest())
				&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null
				&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab().equals(TAB_CASE_NOTE_REQUESTS))
		{
			search(TAB_CASE_NOTE_REQUESTS, false, true);
		}
		else if (tab.equals(form.lyrSearch().tabCaseNoteByLocation())
				&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null
				&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab().equals(TAB_CASE_NOTE_BY_LOCATION))
		{
			search(TAB_CASE_NOTE_BY_LOCATION, false, true);
		}
		else
		{
			form.dyngrdCaseNotes().getRows().clear();

			form.getGlobalContext().Core.setPatientShort(null);
		}
		
		updateControlsState();
	}


	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		open();
	}


	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		open();
	}



	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form Event Handlers for Case Note Requests
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		if (validateSearchCriteria(TAB_CASE_NOTE_REQUESTS))
		{
			form.getGlobalContext().Core.setCaseNoteWorklistSearchCriteria(populateSearchCriteriaFromScreen(TAB_CASE_NOTE_REQUESTS));
			search(TAB_CASE_NOTE_REQUESTS, true, true);
		}
		
		updateControlsState();
	}


	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		form.getTimers().getAutoRefreshSearch().setEnabled(false);
		clearScreen(TAB_CASE_NOTE_REQUESTS, false);
		
		if (form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null
				&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab() == TAB_CASE_NOTE_REQUESTS)
		{
			form.getGlobalContext().Core.setCaseNoteWorklistSearchCriteria(null);
		}
		
		updateControlsState();
	}


	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		// Toggle timer
		form.getTimers().getAutoRefreshSearch().setEnabled(!form.getTimers().getAutoRefreshSearch().isEnabled());
		
		if(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null)
		{
			form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().setWasTimerOn(form.getTimers().getAutoRefreshSearch().isEnabled());
		}
				
		updateControlsState();
	}
	

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		updateHospitalSelection(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue());
	}
	

	@Override
	protected void onQmbClinicNameValueChanged() throws PresentationLogicException
	{
		updateClinicSelection();
		updateControlsState();		
	}


	@Override
	protected void onQmbClinicNameTextSubmited(String value) throws PresentationLogicException
	{
		if (form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue() == null)
			return;
		populateClinics(domain.listClinicsForHospital(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue(),value));		
	}

	@Override
	protected void onQmbListOwnerTextSubmited(String value) throws PresentationLogicException
	{
		populateListOwners(domain.listHcp(value));
	}


	@Override
	protected void onQmbListOwnerValueChanged() throws PresentationLogicException
	{
		updateListOwnerSelection();		
	}
	
	@Override
	protected void onQmbReqLocationTextSubmited(String value) throws PresentationLogicException
	{
		if (form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue() == null) //WDEV-21507
		{		
			return;
		}
		populateRequestorLocation(domain.listRequestorLocation(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue() ,value));
	}



	@Override
	protected void onDteFromRequestsValueChanged() throws PresentationLogicException
	{
		// Clear 'Requests for x days time'
		form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().setValue(null);
		// Clear 'Requests overdue by x days'
		form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().setValue(null);
	}


	@Override
	protected void onDteToRequestsValueChanged() throws PresentationLogicException
	{
		// Clear 'Requests for x days time'
		form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().setValue(null);
		// Clear 'Requests overdue by x days'
		form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().setValue(null);
	}


	@Override
	protected void onIntRequestTimespanValueChanged() throws PresentationLogicException
	{
		Integer timespanDays = form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().getValue();
		
		if (timespanDays != null)
		{
			// Set 'From date' to current date
			form.lyrSearch().tabCaseNoteRequest().dteFromRequests().setValue(new Date());
			// Set 'To date' to current date plus timespan value
			form.lyrSearch().tabCaseNoteRequest().dteToRequests().setValue(new Date().addDay(timespanDays));
			
			// Clear 'Request overdue by x days'
			form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().setValue(null);
		}
	}


	@Override
	protected void onIntRequestOverdueValueChanged() throws PresentationLogicException
	{
		Integer overdueDays = form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().getValue();
		
		if (overdueDays != null)
		{
			// Clear 'From date' to current date
			form.lyrSearch().tabCaseNoteRequest().dteFromRequests().setValue(null);
			
			// Set 'To date' to current date minus overdue days
			form.lyrSearch().tabCaseNoteRequest().dteToRequests().setValue(new Date().addDay(-overdueDays));
			
			// Clear 'Requests for x days time'
			form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().setValue(null);
		}
	}
	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form Event Handlers for Case Note by Locations
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------



	@Override
	protected void onImbSearchByLocClick() throws PresentationLogicException
	{
		if (validateSearchCriteria(TAB_CASE_NOTE_BY_LOCATION))
		{
			form.getGlobalContext().Core.setCaseNoteWorklistSearchCriteria(populateSearchCriteriaFromScreen(TAB_CASE_NOTE_BY_LOCATION));
			search(TAB_CASE_NOTE_BY_LOCATION, true, true);
		}
		
		updateControlsState();
	}


	@Override
	protected void onImbClearByLocClick() throws PresentationLogicException
	{
		form.getTimers().getAutoRefreshSearch().setEnabled(false);
		clearScreen(TAB_CASE_NOTE_BY_LOCATION, false);
		
		if (form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null
				&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab() == TAB_CASE_NOTE_BY_LOCATION)
		{
			form.getGlobalContext().Core.setCaseNoteWorklistSearchCriteria(null);
		}
		
		updateControlsState();
	}


	@Override
	protected void onImbAutoRefreshByLocClick() throws PresentationLogicException
	{
		// Toggle timer
		form.getTimers().getAutoRefreshSearch().setEnabled(!form.getTimers().getAutoRefreshSearch().isEnabled());
		
		if(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null)
		{
			form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().setWasTimerOn(form.getTimers().getAutoRefreshSearch().isEnabled());
		}
		
		updateControlsState();
	}


	@Override
	protected void onCmbHospitalByLocationValueChanged() throws PresentationLogicException
	{
		updateHospitalByLocationSelection(form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().getValue());
	}


	@Override
	protected void onQmbLocByLocTextSubmited(String value) throws PresentationLogicException
	{
		populateCurrentLocation(domain.listCaseNoteLocation(form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().getValue(), value));
	}


	@Override
	protected void onQmbLocByLocValueChanged() throws PresentationLogicException
	{
		updateSelectedLocation(form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().getValue());
	}


	@Override
	protected void onDteFromByLocationValueChanged() throws PresentationLogicException
	{
		// Clear 'In the current location for the last x days'
		form.lyrSearch().tabCaseNoteByLocation().intLastDaysOffset().setValue(null);
	}


	@Override
	protected void onDteToByLocationValueChanged() throws PresentationLogicException
	{
		// Clear 'In the current location for the last x days'
		form.lyrSearch().tabCaseNoteByLocation().intLastDaysOffset().setValue(null);
	}

	
	@Override
	protected void onIntLastDaysOffsetValueChanged() throws PresentationLogicException
	{
		Integer lastDaysOffset = form.lyrSearch().tabCaseNoteByLocation().intLastDaysOffset().getValue();
		
		if (lastDaysOffset != null)
		{
			form.lyrSearch().tabCaseNoteByLocation().dteFromByLocation().setValue(new Date().addDay(-lastDaysOffset));
			form.lyrSearch().tabCaseNoteByLocation().dteToByLocation().setValue(new Date());
		}
	}



	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers for buttons at the bottom of the form
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	
	@Override
	protected void onBtnViewCaseNotesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.CaseNoteDetails, new Object[] { form.dyngrdCaseNotes().getValue() });
	}


	@Override
	protected void onBtnPullCaseNotesClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.PullCaseNote);
	}

	
	@Override
	protected void onBtnTransferCaseNotesClick() throws PresentationLogicException
	{
		transferCaseNoteAction();
	}


	private void transferCaseNoteAction() {
		if (form.dyngrdCaseNotes().getSelectedRow() == null)
			throw new CodingRuntimeException("Transfer Case Note should not be enabled in this situation.");
		
		CaseNoteForWorklistVo caseNote = (CaseNoteForWorklistVo) form.dyngrdCaseNotes().getSelectedRow().getValue();
		
		PatientCaseNoteTypeVo caseNoteType = new PatientCaseNoteTypeVo(caseNote.getID_PatientCaseNote(), caseNote.getVersion_PatientCaseNote());
		caseNoteType.setType(caseNote.getType());
		caseNoteType.setCurrentLocation(caseNote.getCurrentLocation());
		caseNoteType.setFolder(caseNote.getFolder());
		
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(caseNoteType);
		
		engine.open(form.getForms().Core.CaseNoteTransfer);
	}


	
	
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form Presentation functions
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------

	private void initialize()
	{
		Object mosUser = domain.getMosUser();
		if(mosUser instanceof MemberOfStaffLiteVo)
		{
			form.getLocalContext().setCurrentMOS((MemberOfStaffLiteVo) mosUser);
		}
		
		form.getTimers().getAutoRefreshSearch().setInterval(INTERVAL_SECONDS);
		
		form.lyrSearch().tabCaseNoteByLocation().GroupRequestsByLocation().setValue(GroupRequestsByLocationEnumeration.rdoOpenRequestsForCaseNotesCurrrentLocation);
		
		form.getLocalContext().setDeniedMenuActions(getDeniedActionForCurrentUser());
		
		populateHospitals(domain.listHospitals());
		
		initializeCaseNoteGrid();
	}
	
	
	private void initializeCaseNoteGrid()
	{
		form.dyngrdCaseNotes().clear();
		
		form.dyngrdCaseNotes().setHeaderHeight(50);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		// Patient Identifier column
		DynamicGridColumn column = form.dyngrdCaseNotes().getColumns().newColumn(dispIdType.getText(), COL_IDENTIFIER);
		column.setWidth(85); //WDEV-22912
		column.setCanGrow(true);
		column.setHeaderTooltip(dispIdType.getText());
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Patient Name column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Patient Name", COL_PATIENT);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setHeaderTooltip("Patient Name");
		column.setSortMode(SortMode.MANUAL);
		
		// Patient DOB column
		column = form.dyngrdCaseNotes().getColumns().newColumn("DOB", COL_DOB);
		column.setWidth(65);
		column.setCanGrow(false);
		column.setHeaderTooltip("DOB");
		column.setSortMode(SortMode.MANUAL);
		
		// Patient Sex column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Sex", COL_SEX);
		column.setWidth(45);
		column.setCanGrow(false);
		column.setHeaderTooltip("Sex");
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Case Note - Current Location column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Current\nLocation", COL_CASE_NOTE_CURRENT_LOCATION);
		column.setWidth(80);
		column.setCanGrow(true);
		column.setHeaderTooltip("Current Location");
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Case Note - Folder column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Folder", COL_CASE_NOTE_FOLDER);
		column.setWidth(45);
		column.setCanGrow(false);
		column.setHeaderTooltip("Folder");
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Case Note - Tracking No column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Tracking No", COL_CASE_NOTE_TRACKING_NO);
		column.setWidth(65);
		column.setCanGrow(false);
		column.setHeaderTooltip("Tracking No");
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Case Note - Last Transfer Date column - WDEV-22891
		column = form.dyngrdCaseNotes().getColumns().newColumn("Last Transfered", COL_CASE_NOTE_LAST_TRANSFER_DATE);
		column.setWidth(95);
		column.setCanGrow(false);
		column.setHeaderTooltip("Last Transfered Date");
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Case Note - Required By Date column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Required By", COL_CASE_NOTE_REQUIRED_BY_DATE);
		column.setWidth(95);
		column.setCanGrow(false);
		column.setHeaderTooltip("Required By");
		column.setSortMode(SortMode.MANUAL);
		
		// Case Note - Request for Location column
		column = form.dyngrdCaseNotes().getColumns().newColumn("Requesting Location", COL_CASE_NOTE_REQUESTOR_LOCATION);//WDEV-22751
		column.setWidth(90);	//was -1
		column.setCanGrow(true);
		column.setHeaderTooltip("Requesting Location");//WDEV-22751
		column.setSortMode(SortMode.AUTOMATIC);
		
		// Case Note - Request Status oustanding or cimpleted
		column = form.dyngrdCaseNotes().getColumns().newColumn(" ", COL_CASE_NOTE_REQUEST_STATUS_IMG);
		column.setWidth(-1);
		column.setCanGrow(true);
		column.setHeaderTooltip("Request Status");
	}

	public void open() throws PresentationLogicException
	{
		// Check for saved search criteria
		if (form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null)
		{
			// Show tab saved in search criteria
			switch (form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab())
			{
				case TAB_CASE_NOTE_REQUESTS:
					form.lyrSearch().showtabCaseNoteRequest();
					break;
					
				case TAB_CASE_NOTE_BY_LOCATION:
					form.lyrSearch().showtabCaseNoteByLocation();
					break;
			}
			
			
			// Fill in saved search criteria
			populateScreenFromSearchCriteria(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria());
			
			// Search after search criteria & Populate results to screen
			search(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab(), false, false);
			//Reselect last selected record in grid only if not a new button search
			if (form.getLocalContext().getSelectedCaseNoteRequestIsNotNull())
			{
				form.dyngrdCaseNotes().setValue(form.getLocalContext().getSelectedCaseNoteRequest());
				
				selectionChanged();
			}
			
			
			form.getTimers().getAutoRefreshSearch().setEnabled(Boolean.TRUE.equals(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getWasTimerOn()));
		}
		
		// Update controls state
		updateControlsState();
	}
	

	private void search(int tabCaseNoteRequests, boolean showMessage, boolean fromButton)
	{
		if (fromButton)
			form.getLocalContext().setSelectedCaseNoteRequest(null);
		
		CaseNoteForWorklistVoCollection results = domain.searchCaseNoteRequest(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria());
		
		if (showMessage && (results == null || results.size() == 0))
		{
			engine.showMessage("No results found for search criteria.");
		}
		
		populateCaseNoteRequests(results);
	}

	
	private CaseNoteWorklistSearchCriteriaVo populateSearchCriteriaFromScreen(int tabCaseNoteRequests)
	{
		CaseNoteWorklistSearchCriteriaVo searchCriteria = new CaseNoteWorklistSearchCriteriaVo();

		switch (tabCaseNoteRequests)
		{
			case TAB_CASE_NOTE_REQUESTS:
				
				searchCriteria.setSearchTab(TAB_CASE_NOTE_REQUESTS);
				searchCriteria.setHospital(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue());
				searchCriteria.setClinicName(form.lyrSearch().tabCaseNoteRequest().qmbClinicName().getValue());
				searchCriteria.setListOwner(form.lyrSearch().tabCaseNoteRequest().qmbListOwner().getValue());
				searchCriteria.setRequestorLocation(form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().getValue());
				searchCriteria.setCaseNotesInMedicalRecords(form.lyrSearch().tabCaseNoteRequest().chkCaseNoteMedicalRecords().getValue());
				searchCriteria.setRequestFromDate(form.lyrSearch().tabCaseNoteRequest().dteFromRequests().getValue());
				searchCriteria.setRequestToDate(form.lyrSearch().tabCaseNoteRequest().dteToRequests().getValue());
				searchCriteria.setRequestForDays(form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().getValue());
				searchCriteria.setRequestOverdueDays(form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().getValue());
				searchCriteria.setRequestReasons(form.lyrSearch().tabCaseNoteRequest().chklistReasonForReq().getValues());
				searchCriteria.setIncludeCompletedRequests(form.lyrSearch().tabCaseNoteRequest().chkIncludeCompleteRequests().getValue());
				
				break;
				
				
			case TAB_CASE_NOTE_BY_LOCATION:
				
				searchCriteria.setSearchTab(TAB_CASE_NOTE_BY_LOCATION);
				searchCriteria.setHospitalByLocation(form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().getValue());
				searchCriteria.setCurrentLocation(form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().getValue());
				searchCriteria.setCaseNotesInMedicalRecordsByLocation(form.lyrSearch().tabCaseNoteByLocation().chkCaseNotesMedicalRecordsByLocation().getValue());

				if(GroupRequestsByLocationEnumeration.rdoOpenRequestsForCaseNotesCurrrentLocation.equals(form.lyrSearch().tabCaseNoteByLocation().GroupRequestsByLocation().getValue()))
				{
					searchCriteria.setCaseNoteByLocationOption(OPEN_REQUESTS_FOR_CASE_NOTE_IN_LOCATIION);
				}
				
				searchCriteria.setPeriodInCurrentLocationFrom(form.lyrSearch().tabCaseNoteByLocation().dteFromByLocation().getValue());
				searchCriteria.setPeriodInCurrentLocationTo(form.lyrSearch().tabCaseNoteByLocation().dteToByLocation().getValue());
				searchCriteria.setInCurrentLocationForLastDays(form.lyrSearch().tabCaseNoteByLocation().intLastDaysOffset().getValue());
				
				break;
		}
		
		return searchCriteria;
	}
	

	private void populateScreenFromSearchCriteria(CaseNoteWorklistSearchCriteriaVo searchCriteria)
	{
		if (searchCriteria == null)
			return;
		
		switch (searchCriteria.getSearchTab())
		{
			case TAB_CASE_NOTE_REQUESTS:
				
				clearScreen(TAB_CASE_NOTE_REQUESTS, true);
				
				form.lyrSearch().tabCaseNoteRequest().cmbHospital().setValue(searchCriteria.getHospital());
				
				if (searchCriteria.getClinicName() != null)
				{
					form.lyrSearch().tabCaseNoteRequest().qmbClinicName().newRow(searchCriteria.getClinicName(), searchCriteria.getClinicName().getName());
					form.lyrSearch().tabCaseNoteRequest().qmbClinicName().setValue(searchCriteria.getClinicName());
				}
				
				if (searchCriteria.getListOwner() != null)
				{
					form.lyrSearch().tabCaseNoteRequest().qmbListOwner().newRow(searchCriteria.getListOwner(), searchCriteria.getListOwner().getName().toString());
					form.lyrSearch().tabCaseNoteRequest().qmbListOwner().setValue(searchCriteria.getListOwner());
				}
				
				if (searchCriteria.getRequestorLocation() != null)
				{
					form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().newRow(searchCriteria.getRequestorLocation(), searchCriteria.getRequestorLocation().getName());
					form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().setValue(searchCriteria.getRequestorLocation());
				}
				
				form.lyrSearch().tabCaseNoteRequest().chkCaseNoteMedicalRecords().setValue(searchCriteria.getCaseNotesInMedicalRecords());
				
				form.lyrSearch().tabCaseNoteRequest().dteFromRequests().setValue(searchCriteria.getRequestFromDate());
				form.lyrSearch().tabCaseNoteRequest().dteToRequests().setValue(searchCriteria.getRequestToDate());
				
				form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().setValue(searchCriteria.getRequestForDays());
				form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().setValue(searchCriteria.getRequestOverdueDays());
				
				form.lyrSearch().tabCaseNoteRequest().chkIncludeCompleteRequests().setValue(searchCriteria.getIncludeCompletedRequests());
				
				form.lyrSearch().tabCaseNoteRequest().chklistReasonForReq().setValues(searchCriteria.getRequestReasons());
								
				break;
				
				
			case TAB_CASE_NOTE_BY_LOCATION:
				
				clearScreen(TAB_CASE_NOTE_BY_LOCATION, true);
				
				form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().setValue(searchCriteria.getHospitalByLocation());
				
				if (searchCriteria.getCurrentLocation() != null)
				{
					form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().newRow(searchCriteria.getCurrentLocation(), searchCriteria.getCurrentLocation().getName());
					form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().setValue(searchCriteria.getCurrentLocation());
				}
				
				if (searchCriteria.getCaseNoteByLocationOption() == null)
				{
					form.lyrSearch().tabCaseNoteByLocation().GroupRequestsByLocation().setValue(GroupRequestsByLocationEnumeration.None);
				}
				else if (searchCriteria.getCaseNoteByLocationOption().equals(OPEN_REQUESTS_FOR_CASE_NOTE_IN_LOCATIION))
				{
					form.lyrSearch().tabCaseNoteByLocation().GroupRequestsByLocation().setValue(GroupRequestsByLocationEnumeration.rdoOpenRequestsForCaseNotesCurrrentLocation);
				}
				
				break;
		}
	}
	//WDEV-20394
	private String getName(ims.core.vo.PersonName personName)
	{
		if(personName ==null)
			return null;

		StringBuilder name = new StringBuilder();

		if (personName.getSurname() != null)
			name.append(personName.getSurname()).append(" ");

		if (personName.getForename() != null)
			name.append(personName.getForename()).append(" ");

		if (personName.getTitle() != null)
			name.append(personName.getTitle().getText());


		return name.toString();
}


	private void populateCaseNoteRequests(CaseNoteForWorklistVoCollection caseNotes)
	{
		form.dyngrdCaseNotes().getRows().clear();
		if (form.getLocalContext().getSelectedCaseNoteRequest() == null)
			form.getGlobalContext().Core.setPatientShort(null);

		if (caseNotes == null)
			return;
		
			
		for (CaseNoteForWorklistVo caseNote : caseNotes)
		{
			DynamicGridRow row = form.dyngrdCaseNotes().getRows().newRow();
			
			// Patient ID cell
			DynamicGridCell cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_IDENTIFIER), DynamicCellType.STRING);
			cell.setValue(caseNote.getPatient().getDisplayId() != null ? caseNote.getPatient().getDisplayId().getValue() : "");
			cell.setTooltip(caseNote.getPatient().getDisplayId() != null ? caseNote.getPatient().getDisplayId().getValue() : "");
			
			// Patient Name cell
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_PATIENT), DynamicCellType.STRING);
			String name = getName(caseNote.getPatient().getName());//WDEV-20394
			cell.setValue(name);
			cell.setTooltip(name);
			
			// Patient DOB cell
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_DOB), DynamicCellType.STRING);
			cell.setValue(caseNote.getPatient().getDob() != null ? caseNote.getPatient().getDob().toString() : "");
			cell.setTooltip(caseNote.getPatient().getDob() != null ? caseNote.getPatient().getDob().toString() : "");
			
			// Patient Sex cell
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_SEX), DynamicCellType.STRING);
			cell.setValue(caseNote.getPatient().getSex() != null ? caseNote.getPatient().getSex().toString() : "");
			cell.setTooltip(caseNote.getPatient().getSex() != null ? caseNote.getPatient().getSex().toString() : "");
			
			// Case Note Current Location cell
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_CURRENT_LOCATION), DynamicCellType.STRING);
			cell.setValue(caseNote.getCurrentLocation().getName());
			cell.setTooltip(getLocationTooltip(caseNote.getCurrentLocation()));
			
			// Case Note Folder cell
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_FOLDER), DynamicCellType.STRING);
			cell.setValue(caseNote.getFolder().getText());
			cell.setTooltip(caseNote.getFolder().getText());
			
			// Case Note Tracking No cell
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_TRACKING_NO), DynamicCellType.STRING);
			cell.setValue(caseNote.getTrackingID());
			cell.setTooltip(caseNote.getTrackingID());

			// Case Note Request cells
			if (caseNote.getCaseNoteRequest() != null)
			{
				// Case Note Requested By date cell
				cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_REQUIRED_BY_DATE), DynamicCellType.STRING);
				//cell.setValue(caseNote.getCaseNoteRequest().getRequiredByDate().getDate().toString());
				//cell.setTooltip(caseNote.getCaseNoteRequest().getRequiredByDate().getDate().toString());
				cell.setValue(caseNote.getCaseNoteRequest().getRequiredByDate().toString());
				cell.setTooltip(getDateTooltip(caseNote.getCaseNoteRequest()));
				
				// Case Note Requested for Location cell
				cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_REQUESTOR_LOCATION), DynamicCellType.STRING);
				cell.setValue(caseNote.getCaseNoteRequest().getRequestedForLocation().toString());
				cell.setTooltip(getLocationTooltip(caseNote.getCaseNoteRequest().getRequestedForLocation()));
			}

			
			cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_LAST_TRANSFER_DATE), DynamicCellType.DATETIME);
			cell.setValue(caseNote.getLastTransferDate());
			
							
			// Case Note Request cells
			if (caseNote.getCaseNoteRequest() != null)
			{
				//wdev-20063
				// Image for Case Note Request Status
				if( caseNote.getCaseNoteRequest().getRequestStatusIsNotNull() )
				{
					cell = row.getCells().newCell(form.dyngrdCaseNotes().getColumns().getByIdentifier(COL_CASE_NOTE_REQUEST_STATUS_IMG), DynamicCellType.IMAGE);
					if( caseNote.getCaseNoteRequest().getRequestStatus().equals(CaseNoteRequestStatus.OPEN))
					{
						cell.setValue(form.getImages().Core.OpenRequest24);
						cell.setTooltip("<b>Request Status: </b>" + caseNote.getCaseNoteRequest().getRequestStatus().getIItemText());
					}
					else if( caseNote.getCaseNoteRequest().getRequestStatus().equals(CaseNoteRequestStatus.COMPLETED))
					{
						cell.setValue(form.getImages().Core.Complete_Request24);
						cell.setTooltip("<b>Request Status: </b>"+ caseNote.getCaseNoteRequest().getRequestStatus().getIItemText());
					}
					else
					{
						cell.setValue(null);
						cell.setTooltip(null);
					}
					
				}
				
				
			}
			
			row.setValue(caseNote);
		}
	}


	private String getLocationTooltip(LocationForCaseNoteWorklistVo loc)
	{
		if(loc == null)
			return null;
		
		StringBuffer tooltip = new StringBuffer();
		
		tooltip.append(loc.getName());
		
		if(loc.getAddress() != null)
		{
			if(loc.getAddress().getPhone() != null)
			{
				tooltip.append("<br><b>Phone No:</b> ");
				tooltip.append(loc.getAddress().getPhone());
			}
			
			if(loc.getAddress().getFax() != null)
			{
				tooltip.append("<br><b>Fax No:</b> ");
				tooltip.append(loc.getAddress().getFax());
			}
		}
		
		return tooltip.toString();
	}


	private String getDateTooltip(CaseNoteRequestForWorklistVo caseNoteRequest)
	{
		if(caseNoteRequest == null)
			return null;
		
		StringBuffer tooltip = new StringBuffer();
		
		tooltip.append("<b>Recording Date:</b> ");
		tooltip.append(caseNoteRequest.getSystemInformation().getCreationDateTime());
		
		if(caseNoteRequest.getRequiredByDate() != null)
		{
			tooltip.append("<br><b>Required By:</b> ");
			tooltip.append(caseNoteRequest.getRequiredByDate());
		}
		
		return tooltip.toString();
	}


	private boolean validateSearchCriteria(int tabCaseNoteRequests)
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		switch (tabCaseNoteRequests)
		{
			case TAB_CASE_NOTE_REQUESTS:
				
				if (form.lyrSearch().tabCaseNoteRequest().dteFromRequests().getValue() != null
						&& form.lyrSearch().tabCaseNoteRequest().dteToRequests().getValue() != null
						&& form.lyrSearch().tabCaseNoteRequest().dteFromRequests().getValue().isGreaterThan(form.lyrSearch().tabCaseNoteRequest().dteToRequests().getValue()))
				{
					errorList.add("Request date From cannot be set after To date.");
				}
				
				break;
				
			case TAB_CASE_NOTE_BY_LOCATION:
				
				if (form.lyrSearch().tabCaseNoteByLocation().dteFromByLocation().getValue() != null
						&& form.lyrSearch().tabCaseNoteByLocation().dteToByLocation().getValue() != null
						&& form.lyrSearch().tabCaseNoteByLocation().dteFromByLocation().getValue().isGreaterThan(form.lyrSearch().tabCaseNoteByLocation().dteToByLocation().getValue()))
				{
					errorList.add("Request date From cannot be set after TO date.");
				}
				
				if (form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().getValue() == null)
				{
					errorList.add("Current Location is mandatory.");
				}
				
				break;
		}
		
		
		if (errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[errorList.size()]));
			return false;
		}
		
		return true;
	}


	private void populateRequestorLocation(LocationLiteVoCollection locations)
	{
		form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().clear();
		
		if (locations == null)
			return;
		
		for (LocationLiteVo location : locations)
		{
			form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().newRow(location, location.getName());
		}
		
		
		if (locations.size() == 1)
		{
			form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().setValue(locations.get(0));
		}
		else
		{
			form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().showOpened();
		}
	}


	private void populateClinics(ProfileLiteVoCollection profiles)
	{
		// Clear Clinic query-combo
		form.lyrSearch().tabCaseNoteRequest().qmbClinicName().clear();
		
		// If clinics null - terminate
		if (profiles == null)
		{	
			form.lyrSearch().tabCaseNoteRequest().qmbClinicName().showOpened();
			return;
		}
		
		// Fill clinics into  query-combo
		for (ProfileLiteVo profile : profiles)
		{
			form.lyrSearch().tabCaseNoteRequest().qmbClinicName().newRow(profile, profile.getName());
		}
		
		if (profiles.size() == 1)
		{
			form.lyrSearch().tabCaseNoteRequest().qmbClinicName().setValue(profiles.get(0));
			updateClinicSelection();
		}
		else
		{
			form.lyrSearch().tabCaseNoteRequest().qmbClinicName().showOpened();
		}
	}






	private void populateCurrentLocation(LocationLiteVoCollection locations)
	{
		form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().clear();
		
		if (locations == null)
		{
			form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().showOpened();
			return;
		}
		
		for (LocationLiteVo location : locations)
		{
			form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().newRow(location, location.getName());
		}
		
		if (locations.size() == 1)
		{
			form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().setValue(locations.get(0));
			updateSelectedLocation(locations.get(0));
		}
		else
		{
			form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().showOpened();
		}
	}
	
	
	private void populateListOwners(HcpLiteVoCollection hcpCollection)
	{
		form.lyrSearch().tabCaseNoteRequest().qmbListOwner().clear();
		
		if (hcpCollection == null)
			return;
		
		for (HcpLiteVo hcp : hcpCollection)
		{
			form.lyrSearch().tabCaseNoteRequest().qmbListOwner().newRow(hcp, hcp.getName() != null ? hcp.getName().toString() : "<Unknown HCP>");
		}
		
		if (hcpCollection.size() == 1)
		{
			form.lyrSearch().tabCaseNoteRequest().qmbListOwner().setValue(hcpCollection.get(0));
		}
		else
		{
			form.lyrSearch().tabCaseNoteRequest().qmbListOwner().showOpened();
		}
	}

	
	private void clearScreen(int searchTabSelected, boolean keepSelection)
	{
		switch (searchTabSelected)
		{
			case TAB_CASE_NOTE_REQUESTS:
				
				form.lyrSearch().tabCaseNoteRequest().cmbHospital().setValue(null);
				form.lyrSearch().tabCaseNoteRequest().qmbClinicName().clear();
				form.lyrSearch().tabCaseNoteRequest().qmbListOwner().clear();
				form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().clear();
				form.lyrSearch().tabCaseNoteRequest().chkCaseNoteMedicalRecords().setValue(false);
				form.lyrSearch().tabCaseNoteRequest().dteFromRequests().setValue(null);
				form.lyrSearch().tabCaseNoteRequest().dteToRequests().setValue(null);
				form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().setValue(null);
				form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().setValue(null);
				form.lyrSearch().tabCaseNoteRequest().chkIncludeCompleteRequests().setValue(null);
				
				form.lyrSearch().tabCaseNoteRequest().chklistReasonForReq().setValues(null);
				
				break;
				
			case TAB_CASE_NOTE_BY_LOCATION:
				
				form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().setValue(null);
				form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().clear();
				form.lyrSearch().tabCaseNoteByLocation().chkCaseNotesMedicalRecordsByLocation().setValue(null);
				form.lyrSearch().tabCaseNoteByLocation().GroupRequestsByLocation().setValue(GroupRequestsByLocationEnumeration.rdoOpenRequestsForCaseNotesCurrrentLocation);
				form.lyrSearch().tabCaseNoteByLocation().dteFromByLocation().setValue(null);
				form.lyrSearch().tabCaseNoteByLocation().dteToByLocation().setValue(null);
				form.lyrSearch().tabCaseNoteByLocation().intLastDaysOffset().setValue(null);
				
				break;
		}
		
		form.dyngrdCaseNotes().getRows().clear();
		if (!keepSelection)
		{	
			form.getLocalContext().setSelectedCaseNoteRequest(null);
			form.getGlobalContext().Core.setPatientShort(null);
		}	
	}


	@Override
	protected void onDyngrdCaseNotesRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		selectionChanged();
		
		updateControlsState();
	}


	private void selectionChanged()
	{
		if (form.dyngrdCaseNotes().getSelectedRow() != null)
		{
			CaseNoteForWorklistVo caseNote = (CaseNoteForWorklistVo) form.dyngrdCaseNotes().getSelectedRow().getValue();
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(caseNote.getPatient()));
			form.getLocalContext().setSelectedCaseNoteRequest(caseNote);
		}
	}


	private void populateHospitals(LocationLiteVoCollection hospitals)
	{
		// Clear hospital combo
		form.lyrSearch().tabCaseNoteRequest().cmbHospital().clear();
		form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().clear();
		
		// If no hospitals - terminate function
		if (hospitals == null)
		{
			updateHospitalSelection(null);
			return;
		}
		
		
		// Fill hospitals into combo
		for (LocationLiteVo hospital : hospitals)
		{
			form.lyrSearch().tabCaseNoteRequest().cmbHospital().newRow(hospital, hospital.getName());
			form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().newRow(hospital, hospital.getName());
		}
		

		// 1 - Look into search criteria
		if (form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null)
		{
			form.lyrSearch().tabCaseNoteRequest().cmbHospital().setValue(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getHospital());
			form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().setValue(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getHospitalByLocation());
		}
		else
		{
			// 2 - Get logged in hospital
			LocationLiteVo currentHospital = domain.getLoggedInHospital(engine.getCurrentLocation());
			
			// Default in logged in hospital
			form.lyrSearch().tabCaseNoteRequest().cmbHospital().setValue(currentHospital);
			form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().setValue(currentHospital);
		}
		
		updateHospitalSelection(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue());
	}


	private void updateHospitalSelection(LocationLiteVo hospital)
	{
		//WDEV-21507
		form.lyrSearch().tabCaseNoteRequest().qmbClinicName().clear();
		form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().clear();
		
		updateControlsState();
	}
	
	
	private void updateHospitalByLocationSelection(LocationLiteVo value)
	{
		form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().clear();
		
		updateControlsState();
	}
	
	
	private void updateControlsState()
	{
		boolean timerIsDisabled = !form.getTimers().getAutoRefreshSearch().isEnabled();
		
		MenuActionVoCollection  deniedActions = form.getLocalContext().getDeniedMenuActions();
		
		boolean enableViewCaseNoteDetailsButton = true;
		boolean enablePullCaseNotesButton = true;
		boolean enableTransferCaseNotesButton = true;
		boolean enableCompleteRequest = true;
		boolean enableCancelRequest = true;
		boolean enableBatchTransfer  = true;
		
		for (int i = 0; deniedActions != null && i < deniedActions.size(); i++)
		{
			MenuActionVo action = deniedActions.get(i);
			
			if (action == null)
				continue;
			
			if (VIEW_CASE_NOTE_DETAILS == action.getID_MenuAction())
			{
				enableViewCaseNoteDetailsButton = false;
			}
			else if (PULL_CASE_NOTES == action.getID_MenuAction())
			{
				enablePullCaseNotesButton = false;
			}
			else if (TRANSFER_CASE_NOTES == action.getID_MenuAction())
			{
				enableTransferCaseNotesButton = false;
			}
			//WDEV-21098
			else if(BATCH_TRANSFER == action.getID_MenuAction())
			{
				enableBatchTransfer = false;
			}
			else if (COMPLETE_REQUEST == action.getID_MenuAction())
			{
				enableCompleteRequest = false;
			}
			else if (CANCEL_REQUEST == action.getID_MenuAction())
			{
				enableCancelRequest = false;
			}
		}
		
		form.getContextMenus().Core.hideAllCaseNotesWorklistMenuMenuItems();
		
		// Timer buttons
		form.lyrSearch().tabCaseNoteRequest().imbAutoRefresh().setEnabled(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null
							&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab() == TAB_CASE_NOTE_REQUESTS);
		
		form.lyrSearch().tabCaseNoteByLocation().imbAutoRefreshByLoc().setEnabled(form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria() != null
							&& form.getGlobalContext().Core.getCaseNoteWorklistSearchCriteria().getSearchTab() == TAB_CASE_NOTE_BY_LOCATION);
		
		
		form.lyrSearch().tabCaseNoteRequest().imbAutoRefresh().setEnabledImage(form.getTimers().getAutoRefreshSearch().isEnabled() ? form.getImages().Core.TimerStopEnabled24 : form.getImages().Admin.RefreshEnabled24);
		form.lyrSearch().tabCaseNoteRequest().imbAutoRefresh().setTooltip(form.getTimers().getAutoRefreshSearch().isEnabled() ? "Stop autorefresh" : "Start autorefresh");
		form.lyrSearch().tabCaseNoteRequest().imbSearch().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().imbClear().setEnabled(timerIsDisabled);
		
		form.lyrSearch().tabCaseNoteByLocation().imbAutoRefreshByLoc().setEnabledImage(form.getTimers().getAutoRefreshSearch().isEnabled() ? form.getImages().Core.TimerStopEnabled24 : form.getImages().Admin.RefreshEnabled24);
		form.lyrSearch().tabCaseNoteByLocation().imbAutoRefreshByLoc().setTooltip(form.getTimers().getAutoRefreshSearch().isEnabled() ? "Stop autorefresh" : "Start autorefresh");
		form.lyrSearch().tabCaseNoteByLocation().imbSearchByLoc().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteByLocation().imbClearByLoc().setEnabled(timerIsDisabled);
		
		form.lyrSearch().tabCaseNoteRequest().cmbHospital().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().qmbClinicName().setEnabled(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue() != null && timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().qmbListOwner().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().qmbReqLocation().setEnabled(form.lyrSearch().tabCaseNoteRequest().cmbHospital().getValue() != null && timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().chkCaseNoteMedicalRecords().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().dteFromRequests().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().dteToRequests().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().intRequestOverdue().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().intRequestTimespan().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().chkIncludeCompleteRequests().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteRequest().chklistReasonForReq().setEnabled(timerIsDisabled);
		
		form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteByLocation().qmbLocByLoc().setEnabled(form.lyrSearch().tabCaseNoteByLocation().cmbHospitalByLocation().getValue() != null && timerIsDisabled);
		form.lyrSearch().tabCaseNoteByLocation().chkCaseNotesMedicalRecordsByLocation().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteByLocation().dteFromByLocation().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteByLocation().dteToByLocation().setEnabled(timerIsDisabled);
		form.lyrSearch().tabCaseNoteByLocation().intLastDaysOffset().setEnabled(timerIsDisabled);
		
		form.lyrSearch().tabCaseNoteByLocation().GroupRequestsByLocation().setEnabled(false);
		
		//WDEV-20394 WDEV-21089
		boolean isViewCaseNotesActive = form.dyngrdCaseNotes().getSelectedRow() != null && enableViewCaseNoteDetailsButton;
		boolean isCancelRequestActive =(form.dyngrdCaseNotes().getValue() instanceof CaseNoteForWorklistVo  
											&& ((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getValue()).getCaseNoteRequest() != null 
											&& CaseNoteRequestStatus.OPEN.equals(((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getValue()).getCaseNoteRequest().getRequestStatus())
											&& enableCancelRequest);

		boolean isTransferCaseNotesActive = form.dyngrdCaseNotes().getSelectedRow() != null && enableTransferCaseNotesButton && form.lyrSearch().tabCaseNoteByLocation().isVisible();
		
		boolean isCompleteRequestActive = form.dyngrdCaseNotes().getValue() instanceof CaseNoteForWorklistVo  
											&& ((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getValue()).getCaseNoteRequest() != null 
											&& CaseNoteRequestStatus.OPEN.equals(((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getValue()).getCaseNoteRequest().getRequestStatus()) 
											&& enableCompleteRequest;
		
		form.btnViewCaseNotes().setEnabled(isViewCaseNotesActive);
		form.btnPullCaseNotes().setEnabled(enablePullCaseNotesButton);
		form.btnTransferCaseNotes().setEnabled(isTransferCaseNotesActive);
		form.btnBatchTransfer().setEnabled(enableBatchTransfer);//WDEV-21098
		form.btnCompleteRequest().setEnabled(isCompleteRequestActive);
		form.btnCancelRequest().setEnabled(isCancelRequestActive);
		
		//WDEV-20394 -Context menu 
		form.getContextMenus().Core.getCaseNotesWorklistMenuCANCEL_REQUESTItem().setVisible(isCancelRequestActive);
		form.getContextMenus().Core.getCaseNotesWorklistMenuVIEW_CASE_NOTE_DETAILSItem().setVisible(isViewCaseNotesActive);
		form.getContextMenus().Core.getCaseNotesWorklistMenuTRANSFER_CASE_NOTESItem().setVisible(isTransferCaseNotesActive);
		form.getContextMenus().Core.getCaseNotesWorklistMenuBATCH_TRANSFERItem().setVisible(enableBatchTransfer);//WDEV-21098
		form.getContextMenus().Core.getCaseNotesWorklistMenuCOMPLETE_REQUESTItem().setVisible(isCompleteRequestActive);
		form.getContextMenus().Core.getCaseNotesWorklistMenuPULL_CASE_NOTESItem().setVisible(enablePullCaseNotesButton);
	}


	private void updateClinicSelection()
	{
		// Clear list owners
		form.lyrSearch().tabCaseNoteRequest().qmbListOwner().clear();
	}


	private void updateListOwnerSelection()
	{
		form.lyrSearch().tabCaseNoteRequest().qmbClinicName().setValue(null);
	}


	private void updateWardSelection()
	{
		form.lyrSearch().tabCaseNoteRequest().qmbClinicName().setValue(null);
		form.lyrSearch().tabCaseNoteRequest().qmbListOwner().setValue(null);
	}

	
	private void updateSelectedLocation(LocationLiteVo value)
	{
		updateControlsState();
	}

	private  MenuActionVoCollection getDeniedActionForCurrentUser()
	{
		MenuActionVoCollection deniedActions = new MenuActionVoCollection();
		
		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if(currentForm == null)
			return null;
		
		IAppRole role = engine.getLoggedInRole();
		
		if(role == null)
			return null;
		
		for(MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if(menuAction == null)
				continue;
			
			if(!role.hasMenuActionRight(currentForm, menuAction))
			{
				deniedActions.add(menuAction);
			}
		}
		
		return deniedActions;
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			//WDEV-20394
			case GenForm.ContextMenus.CoreNamespace.CaseNotesWorklistMenu.CANCEL_REQUEST:
			{
				form.getLocalContext().setCancelRequestMessageBoxId(engine.showMessage("Are you sure you want to Cancel the selected request?" , "", MessageButtons.YESNO, MessageIcon.QUESTION));
				break;
			}
			case GenForm.ContextMenus.CoreNamespace.CaseNotesWorklistMenu.COMPLETE_REQUEST:
			{
				completeRequestAction();
				break;
			}
			case GenForm.ContextMenus.CoreNamespace.CaseNotesWorklistMenu.PULL_CASE_NOTES:
			{
				engine.open(form.getForms().Core.PullCaseNote);
				break;
			}
			case GenForm.ContextMenus.CoreNamespace.CaseNotesWorklistMenu.TRANSFER_CASE_NOTES:
			{
				transferCaseNoteAction();
				break;
			}
			//WDEV-21098
			case GenForm.ContextMenus.CoreNamespace.CaseNotesWorklistMenu.BATCH_TRANSFER:
			{
				engine.open(form.getForms().Core.CaseNoteTrackingBatchTransferDialog);
				break;
			}
			case GenForm.ContextMenus.CoreNamespace.CaseNotesWorklistMenu.VIEW_CASE_NOTE_DETAILS:
			{
				engine.open(form.getForms().Core.CaseNoteDetails, new Object[] { form.dyngrdCaseNotes().getValue() });
				break;
			}
		}
		updateControlsState();
		//WDEV-20394 - end
	}
	//wdev-19773
	private CaseNoteForWorklistVoCollection manualSortRequiredBy(SortOrder sortOrder)
	{
		CaseNoteForWorklistVoCollection tempColl = new CaseNoteForWorklistVoCollection();
		
		for(int i = 0;i < form.dyngrdCaseNotes().getRows().size();i++)
		{
			tempColl.add((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getRows().get(i).getValue());
		}
		form.dyngrdCaseNotes().getRows().clear();
		tempColl.sort(new RequiredByComparator(sortOrder));
		return tempColl;
	}
	
	public class RequiredByComparator implements Comparator
	{
		private int direction = 1;
		
		public RequiredByComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public RequiredByComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if(ob1 instanceof CaseNoteForWorklistVo )
			{
				CaseNoteForWorklistVo cn1 = (CaseNoteForWorklistVo)ob1;
				pdate1 = cn1.getCaseNoteRequestIsNotNull() ? cn1.getCaseNoteRequest().getRequiredByDate():null;
			}
			if(ob2 instanceof CaseNoteForWorklistVo)
			{
				CaseNoteForWorklistVo cn2 = (CaseNoteForWorklistVo)ob2;
				pdate2 = cn2.getCaseNoteRequestIsNotNull() ? cn2.getCaseNoteRequest().getRequiredByDate():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
	public class PatientComparator implements Comparator
	{
		private int direction = 1;
		
		public PatientComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public PatientComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			ims.core.vo.PersonName p1 = null;
			ims.core.vo.PersonName p2 = null;
			if(ob1 instanceof CaseNoteForWorklistVo )
			{
				CaseNoteForWorklistVo cn1 = (CaseNoteForWorklistVo)ob1;
				p1 = cn1.getPatient() != null ? cn1.getPatient().getName() : null;
			}
			if(ob2 instanceof CaseNoteForWorklistVo)
			{
				CaseNoteForWorklistVo cn2 = (CaseNoteForWorklistVo)ob2;
				p2 = cn2.getPatient() != null ? cn2.getPatient().getName() : null;
			}
			
			if(p1 != null )
				return  p1.compareTo(p2)*direction;
			if(p2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
	public class DOBComparator implements Comparator
	{
		private int direction = 1;
		
		public DOBComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DOBComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PartialDate dob1 = null;
			PartialDate dob2 = null;
			if(ob1 instanceof CaseNoteForWorklistVo )
			{
				CaseNoteForWorklistVo cn1 = (CaseNoteForWorklistVo)ob1;
				dob1 = cn1.getPatient() != null ? cn1.getPatient().getDob() : null;
			}
			if(ob2 instanceof CaseNoteForWorklistVo)
			{
				CaseNoteForWorklistVo cn2 = (CaseNoteForWorklistVo)ob2;
				dob2 = cn2.getPatient() != null ? cn2.getPatient().getDob() : null;
			}
			
			if(dob1 != null )
				return  dob1.compareTo(dob2)*direction;
			if(dob2 != null)
				return (-1)*direction;
			
			return 0;
		}
	}

	//wdev-19773
	protected void onDyngrdCaseNotesColumnHeaderClicked(DynamicGridColumn column)
	{
		if(column.getIdentifier().equals(COL_CASE_NOTE_REQUIRED_BY_DATE))
		{
			
			if (form.getLocalContext().getSortRequiredBy() == null || !form.getLocalContext().getSortRequiredBy().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortRequiredBy(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortRequiredBy(SortOrder.DESCENDING);
					
			populateCaseNoteRequests(manualSortRequiredBy(form.getLocalContext().getSortRequiredBy()));
						
		}
		
		else if(column.getIdentifier().equals(COL_PATIENT))
		{
			if (form.getLocalContext().getSortPatient() == null || !form.getLocalContext().getSortPatient().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortPatient(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortPatient(SortOrder.DESCENDING);
					
			populateCaseNoteRequests(manualSortPatient(form.getLocalContext().getSortPatient()));
		}
		
		else if(column.getIdentifier().equals(COL_DOB))
		{
			if (form.getLocalContext().getSortDOB() == null || !form.getLocalContext().getSortDOB().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortDOB(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortDOB(SortOrder.DESCENDING);
					
			populateCaseNoteRequests(manualSortDOB(form.getLocalContext().getSortDOB()));
		}
	}

	private CaseNoteForWorklistVoCollection manualSortDOB(SortOrder sortDOB)
	{
		CaseNoteForWorklistVoCollection tempColl = new CaseNoteForWorklistVoCollection();
		
		for(int i = 0;i < form.dyngrdCaseNotes().getRows().size();i++)
		{
			tempColl.add((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getRows().get(i).getValue());
		}
		form.dyngrdCaseNotes().getRows().clear();
		tempColl.sort(new DOBComparator(sortDOB));
		return tempColl;
	}

	private CaseNoteForWorklistVoCollection manualSortPatient(SortOrder sortPatient)
	{
		CaseNoteForWorklistVoCollection tempColl = new CaseNoteForWorklistVoCollection();
		
		for(int i = 0;i < form.dyngrdCaseNotes().getRows().size();i++)
		{
			tempColl.add((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getRows().get(i).getValue());
		}
		form.dyngrdCaseNotes().getRows().clear();
		tempColl.sort(new PatientComparator(sortPatient));
		return tempColl;
	}


	//WDEV-20115
	@Override
	protected void onBtnBatchTransferClick() throws PresentationLogicException {
	
		engine.open(form.getForms().Core.CaseNoteTrackingBatchTransferDialog);
	}


	@Override
	protected void onBtnCompleteRequestClick() throws PresentationLogicException
	{
		completeRequestAction();
	}

	private void completeRequestAction()
	{
		CaseNoteForWorklistVo caseNote = (CaseNoteForWorklistVo) form.dyngrdCaseNotes().getSelectedRow().getValue();
		
		PatientCaseNoteTypeVo caseNoteType = new PatientCaseNoteTypeVo(caseNote.getID_PatientCaseNote(), caseNote.getVersion_PatientCaseNote());
		caseNoteType.setType(caseNote.getType());
		caseNoteType.setCurrentLocation(caseNote.getCurrentLocation());
		caseNoteType.setFolder(caseNote.getFolder());
		
		form.getGlobalContext().Core.setPatientCaseNoteFolderRef(caseNoteType);
		
		form.getGlobalContext().Core.setCaseNoteRequestRef(caseNote.getCaseNoteRequest());
		
		engine.open(form.getForms().Core.CaseNoteTransfer);
	}

	@Override
	protected void onBtnCancelRequestClick() throws PresentationLogicException
	{
		form.getLocalContext().setCancelRequestMessageBoxId(engine.showMessage("Are you sure you want to Cancel the selected request?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
	}


	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getCancelRequestMessageBoxId() != null && form.getLocalContext().getCancelRequestMessageBoxId().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result))
			{
				if(cancelRequest())
					open();
			}
		}
	}
	
	private boolean cancelRequest() throws PresentationLogicException
	{
		if(!(form.dyngrdCaseNotes().getValue() instanceof CaseNoteForWorklistVo))
			return false;
		
		try 
		{
			boolean value = domain.cancelRequest(((CaseNoteForWorklistVo) form.dyngrdCaseNotes().getValue()).getCaseNoteRequest(), form.getLocalContext().getCurrentMOS());
			form.getGlobalContext().Core.setCaseNoteRequestRef(null);
			
			return value;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	}


	@Override
	protected void onBtnCaseNotesDashboardClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("CASENOTE_DASHBOARD_URL config flag was not set.");
			return;
		}
		
		//WDEV-22837
		engine.openDashboard(ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue(), null);
		
		/*
		String url = ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
		*/
	}


	@Override
	protected void onBtnCaseNotesDashboardSecClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("CASENOTE_DASHBOARD_URL config flag was not set.");
			return;
		}
		
		//WDEV-22837
		engine.openDashboard(ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue(), null);

		/*
		String url = ConfigFlag.GEN.CASENOTE_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
		*/
	}
}
