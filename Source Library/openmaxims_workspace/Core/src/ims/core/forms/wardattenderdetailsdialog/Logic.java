//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.wardattenderdetailsdialog;

import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.wardattenderdetailsdialog.GenForm.grdProceduresRow;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.WardAttenderOutcomeVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
		
	}

	private void initialise()
	{
		form.ccSeenBy().initialize(MosType.HCP);
	}

	private void open()
	{
		form.getLocalContext().setAppointment(domain.getAppointment(form.getGlobalContext().Scheduling.getBookingAppointmentRef()));
		populateScreenFromData(form.getLocalContext().getAppointment());
		
		if (form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getWardAttendanceOutcome() != null)
		{
			form.setMode(FormMode.VIEW);
		}
		else
			form.setMode(FormMode.EDIT);
	}

	private void populateScreenFromData(WardAttenderOutcomeVo appointment)
	{
		
		if(appointment == null)
			return;
		
		form.ccSeenBy().setValue(appointment.getSeenBy() != null ? appointment.getSeenBy() : (HcpLiteVo) domain.getHcpLiteUser());
		form.timSeen().setValue(appointment.getSeenTime() != null ? appointment.getSeenTime() : new Time());
		form.cmbOutcome().setValue(appointment.getWardAttendanceOutcome());
		form.txtComment().setValue(appointment.getWardAttendanceOutcomeComment());
		
		populateProceduresGrid(appointment.getOutpatientProcedures());
		
	}

	private void populateProceduresGrid(PatientProcedureForAppointmentOutcomeVoCollection procedures)
	{
		form.grdProcedures().getRows().clear();
		
		if(procedures == null)
			return;
		
		for(PatientProcedureForAppointmentOutcomeVo proc : procedures)
		{
			addPatientProcedureRow(proc, null);
		}
	}

	private void addPatientProcedureRow(PatientProcedureForAppointmentOutcomeVo patientProcedure, grdProceduresRow row)
	{
		if(patientProcedure == null)
			return;
		
		if(row == null)
		   row = form.grdProcedures().getRows().newRow();
		
		row.setColDate(patientProcedure.getProcDate() != null ? patientProcedure.getProcDate().toDate() : null);
		row.setColProcedureName(patientProcedure.getProcedure() != null ? patientProcedure.getProcedure().getProcedureName() : patientProcedure.getProcedureDescription());
		row.setColLaterality(patientProcedure.getProcLaterality() != null ? patientProcedure.getProcLaterality().getText() : null);
		row.setColSite(patientProcedure.getSiteText());
		row.setColPerformedBy(patientProcedure.getPeformedBy() !=null ? patientProcedure.getPeformedBy().getIHcpName() : null);
		row.setColPrimary(Boolean.TRUE.equals(patientProcedure.getIsPrimary()));
		
		row.setValue(patientProcedure);
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().RefMan.hideAllAppointmentOutcomeProcedureMenuMenuItems();
		
		WardAttenderOutcomeVo appointment = form.getLocalContext().getAppointment();
		
		boolean showDiagnosisProceduresOptions = appointment != null;

		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuSELECTItem().setVisible(showDiagnosisProceduresOptions);
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuADDItem().setVisible(showDiagnosisProceduresOptions);
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuEDITItem().setVisible(showDiagnosisProceduresOptions && form.grdProcedures().getValue() != null);
		form.getContextMenus().RefMan.getAppointmentOutcomeProcedureMenuREMOVEItem().setVisible(showDiagnosisProceduresOptions && form.grdProcedures().getValue() != null);
		
		form.ccSeenBy().isRequired(FormMode.EDIT.equals(form.getMode()));
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getWardAttendanceOutcome() != null)
			open();
		else
			engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
		
	}

	private boolean save()
	{
		
		WardAttenderOutcomeVo outcome = populateDataFromScreen(form.getLocalContext().getAppointment());
		
		String[] errors = outcome.validate(validateUIRules());
		
		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return false;
		}

		try
		{	
			domain.saveBookingAppointment(outcome);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
		
	}
	
	private String[] validateUIRules()
	{
		ArrayList<String> errorList = new ArrayList<String>();

		if (form.ccSeenBy().getValue() == null)
		{
			errorList.add("Seen By is mandatory.");
		}
		
		if (form.cmbOutcome().getValue() == null)
		{
			errorList.add("Outcome is mandatory.");
		}
		
		if (errorList.size() > 0)
			return errorList.toArray(new String[errorList.size()]);
		
		return null;
	}

	private WardAttenderOutcomeVo populateDataFromScreen(WardAttenderOutcomeVo appointment)
	{
		if (appointment == null)
			return null;
		
		appointment.setSeenBy((HcpLiteVo) form.ccSeenBy().getValue());
		appointment.setWardAttendanceHcpType(form.ccSeenBy().getValue() != null ? ((HcpLiteVo) form.ccSeenBy().getValue()).getHcpType() : null);
		appointment.setSeenTime(form.timSeen().getValue());
		appointment.setOutpatientProcedures(getPatientProcedures());
		appointment.setWardAttendanceOutcome(form.cmbOutcome().getValue());
		appointment.setWardAttendanceOutcomeComment(form.txtComment().getValue());
		
		if (Status_Reason.ARRIVAL.equals(appointment.getApptStatus()))
			updateBooking(appointment, Status_Reason.SEEN, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
		
		return appointment;
		
	}

	private void updateBooking(WardAttenderOutcomeVo appointment, Status_Reason status, AppointmentTrackingStatus trackingStatus)
	{
		
		appointment.setApptStatus(status);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(appointment.getAppointmentDate());
		voStatus.setApptTime(appointment.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(status);
		
		Appointment_StatusVoCollection voCollStatusHistory = appointment.getApptStatusHistory();
		
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		appointment.setCurrentStatusRecord(voStatus); 
		appointment.setApptStatusHistory(voCollStatusHistory);
		
		populateAppointmentWithTrackingStatus(appointment, trackingStatus);
		
	}
	
	private void populateAppointmentWithTrackingStatus(WardAttenderOutcomeVo appointment, AppointmentTrackingStatus trackingStatus) 
	{
		if(appointment == null || trackingStatus == null)
			return;
		
		Appt_Tracking_Status_HistoryVoCollection trackingCollection = appointment.getApptTrackingStatusHistory();
		
		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();
		
		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(appointment.getAppointmentDate());
		newTrackingStatus.setApptTime(appointment.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());
		
		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);
		
		trackingCollection.add(newTrackingStatus);
		appointment.setApptTrackingStatusHistory(trackingCollection);
	}
	
	@Override
	protected void onGrdProceduresSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.SELECT:
				selectProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.ADD:
				addProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.EDIT:
				editProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.AppointmentOutcomeProcedureMenu.REMOVE:
				form.grdProcedures().removeSelectedRow();
				updateControlsState();
			break;
		}
		
	}

	private void selectProcedure()
	{
		form.getGlobalContext().RefMan.setSelectedProceduresApptOutcomeList(getPatientProcedures());
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureSelectionDialog);
		
	}

	private PatientProcedureForAppointmentOutcomeVoCollection getPatientProcedures()
	{
		if (form.grdProcedures().getRows().size() == 0)
			return null;
		
		PatientProcedureForAppointmentOutcomeVoCollection procedures = new PatientProcedureForAppointmentOutcomeVoCollection();
		
		for (int i = 0; i < form.grdProcedures().getRows().size(); i++)
		{
			procedures.add(form.grdProcedures().getRows().get(i).getValue());
		}
		
		return procedures;
	}

	private void addProcedure()
	{
		form.getLocalContext().setEditProcedure(false);
		
		form.getGlobalContext().RefMan.setPatientProcedureForAppointmentOutcome(null);
		
		Specialty specialty = null;
		
		if(form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getSession() != null && form.getLocalContext().getAppointment().getSession().getService() != null)
		{
			specialty = form.getLocalContext().getAppointment().getSession().getService().getSpecialty();
		}
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureDialog, new Object[] {specialty, form.getLocalContext().getAppointment().getSeenBy(), form.getLocalContext().getAppointment().getAppointmentDate()});
		
	}

	private void editProcedure()
	{
		form.getLocalContext().setEditProcedure(true);
		
		form.getGlobalContext().RefMan.setPatientProcedureForAppointmentOutcome(form.grdProcedures().getValue());
		
		Specialty specialty = null;
		
		if(form.getLocalContext().getAppointment() != null && form.getLocalContext().getAppointment().getSession() != null && form.getLocalContext().getAppointment().getSession().getService() != null)
		{
			specialty = form.getLocalContext().getAppointment().getSession().getService().getSpecialty();
		}
		
		engine.open(form.getForms().RefMan.AppointmentOutcomeProcedureDialog, new Object[] {specialty, form.getLocalContext().getAppointment().getSeenBy(), form.getLocalContext().getAppointment().getAppointmentDate()});
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().RefMan.AppointmentOutcomeProcedureDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if (form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome().getIsPrimary()))
			{
				uncheckPreviousPrimary();
			}

			if (Boolean.TRUE.equals(form.getLocalContext().getEditProcedure()))
			{
				addPatientProcedureRow(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome(), form.grdProcedures().getSelectedRow());
			}
			else
			{
				addPatientProcedureRow(form.getGlobalContext().RefMan.getPatientProcedureForAppointmentOutcome(), null);
			}
		}
		else if (form.getForms().RefMan.AppointmentOutcomeProcedureSelectionDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			addSelectedPatientProcedures();
		}
		
	}

	private void addSelectedPatientProcedures()
	{
		if(form.getGlobalContext().RefMan.getSelectedProceduresApptOutcomeList() == null)
			return;
		
		form.grdProcedures().getRows().clear();
		
		for(PatientProcedureForAppointmentOutcomeVo procedure : form.getGlobalContext().RefMan.getSelectedProceduresApptOutcomeList())
		{
			if(form.grdProcedures().getRowByValue(procedure) ==  null)
				addPatientProcedureRow(procedure, null);
		}
		
	}

	private void uncheckPreviousPrimary()
	{
		for(int i=0; i<form.grdProcedures().getRows().size(); i++)
		{
			form.grdProcedures().getRows().get(i).getValue().setIsPrimary(null);
			form.grdProcedures().getRows().get(i).setColPrimary(false);
		}
		
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}
}
