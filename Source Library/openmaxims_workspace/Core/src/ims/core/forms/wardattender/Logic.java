//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.wardattender;

import ims.admin.vo.AppointmentTrackingstatusColourConfigVo;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.ReferralLetterDetailsClinicListListVo;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.PdsAuthenticationHelper;
import ims.core.helper.PdsAuthenticationHelper.PdsCheck;
import ims.core.helper.PdsAuthenticationHelper.PdsRight;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardAttenderAppointmentVo;
import ims.core.vo.WardAttenderAppointmentVoCollection;
import ims.core.vo.WardAttenderSearchCriteriaVo;
import ims.core.vo.lookups.Language;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.LateTimeArrivalRecordVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo;
import ims.scheduling.vo.SessionForWardAttenderVo;
import ims.scheduling.vo.SessionForWardAttenderVoCollection;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.Status_ReasonCollection;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	private static final String	COLUMN_ICP	             	= "0";
	private static final String	COLUMN_OUTCOME			    = "1";
	private static final String	COLUMN_ICAB                 = "2";
	private static final String	COLUMN_IDENTIFIER     	    = "3";
	private static final String	COLUMN_SURNAME     		    = "4";
	private static final String	COLUMN_FORENAME   		    = "5";
	private static final String COLUMN_SEX 		            = "6";
	private static final String	COLUMN_DOB                  = "7";
	private static final String	COLUMN_CONSULTANT		    = "8";
	private static final String	COLUMN_TRACKING_TIME        = "9";
	private static final String	COLUMN_ACTIVITY_IMAGE     	= "10";
	private static final String	COLUMN_ACTIVITY_TYPE     	= "11";
	private static final String	COLUMN_APPT_TIME   		    = "12";
	private static final String COLUMN_BOOKING_COMMENTS 	= "13";
	private static final String	COLUMN_APPT_LETTER_PRINTED  = "14";
	private static final String	COLUMN_INTERPRETER_REQUIRED = "15";
	private static final String	COLUMN_STATUS           	= "16";
	private static final String	COLUMN_CONTACT_DETAILS  	= "17";


	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None"))
			form.dyngrdResults().setRowSelectionChangedEventRequirePdsAuthentication(true);
		
		initialise(args);
		open(true);
	}

	private void initialise(Object[] args)
	{
		if (args != null && args.length > 0)
		{
			if (args[0] instanceof Integer)
				form.getLocalContext().setWardViewSearchType((Integer) args[0]);
		}
		form.dteDate().setValue(new Date());
		form.getGlobalContext().RefMan.setLinkedAppointmentsCollection(null);
		
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.CLINICLISTWITHICP_TIMER_INTERVAL.getValue());
		form.imbAutoRefresh().setEnabled(false);
		form.imbAutoRefresh().setTooltip("This button will be enabled once a valid search of Ward Attenders is performed"); //WDEV-22660 
		form.getLocalContext().setWasTimerEnabled(false);

		boolean isOpenedAsDialog = engine.isDialog();
		//WDEV-22711
		form.getLocalContext().setbWardViewDialogPreviousOpened(domain.isAdmissionScreenAlreadyOpened());

		populateHospitalCombo();
		bindWardAttenderStatus();
		ILocation currentLocation = engine.getCurrentLocation();

		//form is opened from ward view or ward data view, default the ward and hospital
		if (isOpenedAsDialog)
		{
			if (form.getGlobalContext().Core.getWardViewPatientListWard() != null)
			{	
				LocMostVo location = domain.getLocation(form.getGlobalContext().Core.getWardViewPatientListWard());

				if (location != null && LocationType.WARD.equals(location.getType()))
				{
					//WDEV-22589
					LocationLiteVo hospitalForLocation = getHospitalForLocation(location);
					if (hospitalForLocation != null && !form.cmbHospital().getValues().contains(hospitalForLocation))
						form.cmbHospital().newRow(hospitalForLocation, hospitalForLocation.toString());
					form.cmbHospital().setValue(hospitalForLocation);
					//WDEV-22589
					loadClinics();
					loadWards();

					form.cmbWard().setValue(location);
				}
			}
			if (form.getLocalContext().getWardViewSearchTypeIsNotNull())
			{
				form.cmbStatus().setValue(getDefaultStatus(form.getLocalContext().getWardViewSearchType()));
			}
			engine.clearPatientContextInformation(); //WDEV-21030
		}
		//if the logged in location is a Ward, try and default the Hospital
		else if (form.cmbHospital().getValue() == null && currentLocation != null)
		{

			LocMostVo location = domain.getLocation((LocationRefVo)currentLocation);

			if (location != null && LocationType.WARD.equals(location.getType()))
			{
				form.cmbHospital().setValue(getHospitalForLocation(location));
				loadClinics();
				loadWards();
			}
		}

		createDynamicGridSlots();

		if (!isOpenedAsDialog)
		{	
			populateSearchCriteriaFromGC();
		}
		else
		{
			form.getGlobalContext().Core.setWardAttenderSearchCriteria(null);
		}

	}

	private Status_Reason getDefaultStatus(Integer wardViewSearchType)
	{
		if (wardViewSearchType.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_STILL_TO_ARRIVE))
			return Status_Reason.BOOKED;
		if (wardViewSearchType.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_ARRIVED))
			return Status_Reason.ARRIVAL;
		if (wardViewSearchType.equals(ims.core.forms.wardviewpatientsummarycomponent.Logic.ROW_SEEN))
			return Status_Reason.SEEN;
		
		return null;
	}

	private void bindWardAttenderStatus()
	{
		Status_ReasonCollection coll = new Status_ReasonCollection();
		
		coll.add(Status_Reason.BOOKED);
		coll.add(Status_Reason.ARRIVAL);
		coll.add(Status_Reason.SEEN);
		coll.add(Status_Reason.DNA);
		coll.add(Status_Reason.ADMITTED);		
		
		for (int i = 0; i<coll.size() ; i++)
		{
			form.cmbStatus().newRow(coll.get(i), Status_Reason.BOOKED.equals(coll.get(i)) ? "Still to Arrive" : coll.get(i).getText());
		}
	}

	private LocationLiteVo getHospitalForLocation(LocMostVo location)
	{

		if (LocationType.HOSP.equals(location.getType()))
			return  location;

		while (location.getParentLocation() != null)
		{
			location = location.getParentLocation();

			if (LocationType.HOSP.equals(location.getType()))
				return  location;

		}

		return  null;
	}

	private void populateSearchCriteriaFromGC()
	{
		WardAttenderSearchCriteriaVo searchCriteria = form.getGlobalContext().Core.getWardAttenderSearchCriteria();

		if (searchCriteria == null)
			return;

		form.cmbHospital().setValue(searchCriteria.getHospital());

		if( form.cmbHospital().getValue() != null)
		{
			loadWards();
		}	

		if (searchCriteria.getService() != null)
		{
			form.qmbService().newRow(searchCriteria.getService(), searchCriteria.getService().getServiceName());
			form.qmbService().setValue(searchCriteria.getService());
		}

		form.dteDate().setValue(searchCriteria.getDate());

		if(form.cmbHospital().getValue() != null && form.dteDate().getValue() != null)
			loadClinics();

		form.cmbClinic().setValue(searchCriteria.getClinic());
		form.cmbWard().setValue(searchCriteria.getWard());
		form.cmbStatus().setValue(searchCriteria.getStatus());	

	}

	private void toggleTimer(boolean fromButton)
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			if(!validateSearch())
				return;
		}

		boolean reinstateTimer = form.getLocalContext().getWasTimerEnabled();

		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to Start the Automatic Refresh");	

			form.getLocalContext().setWasTimerEnabled(false);

			if(form.getGlobalContext().Core.getWardAttenderSearchCriteria() != null )
				form.getGlobalContext().Core.getWardAttenderSearchCriteria().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to Stop the Automatic Refresh");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);

				form.getLocalContext().setWasTimerEnabled(true);

				if(form.getGlobalContext().Core.getWardAttenderSearchCriteria() != null )
					form.getGlobalContext().Core.getWardAttenderSearchCriteria().setWasTimerOn(true);

				//enable the stopping button
				form.imbAutoRefresh().setEnabled(true);
			}
		}


		boolean enableControls = !form.getTimers().gettimerSearch().isEnabled();

		form.cmbHospital().setEnabled(enableControls);
		form.cmbClinic().setEnabled(enableControls);
		form.qmbService().setEnabled(enableControls);
		form.dteDate().setEnabled(enableControls);
		form.cmbWard().setEnabled(enableControls);
		form.cmbStatus().setEnabled(enableControls); //WDEV-21085
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);

	}

	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();

		MemberOfStaffRefVo mosUser = (MemberOfStaffRefVo) domain.getMosUser();
		ILocation currentLocation = engine.getCurrentLocation();

		LocationLiteVoCollection hospitals = domain.getActiveHospitals(mosUser);

		if (hospitals!=null)
		{
			for (LocationLiteVo item: hospitals)
			{
				form.cmbHospital().newRow(item, item.getName());

				if(currentLocation != null  && currentLocation.getID() == item.getID_Location().intValue() && form.dteDate().getValue() != null)
				{
					form.cmbHospital().setValue(item);
				}
			}
		}

		loadClinics();
		loadWards();
	}

	private void loadWards()
	{
		form.cmbWard().clear();

		if (form.cmbHospital().getValue() == null)
			return;

		LocationLiteVoCollection wards = domain.getWardsForHospital(form.cmbHospital().getValue());

		if (wards == null)
			return;

		for (LocationLiteVo item: wards)
		{
			form.cmbWard().newRow(item, item.getName());

		}
	}

	private WardAttenderSearchCriteriaVo populateSearchCriteriaVo()
	{
		WardAttenderSearchCriteriaVo searchCriteria = new WardAttenderSearchCriteriaVo();

		if (form.cmbHospital().getValue() != null)
			searchCriteria.setHospital(form.cmbHospital().getValue());

		if (form.cmbClinic().getValue() != null)
			searchCriteria.setClinic(form.cmbClinic().getValue());

		if (form.dteDate().getValue() != null)
			searchCriteria.setDate(form.dteDate().getValue());

		if (form.qmbService().getValue() != null)
			searchCriteria.setService(form.qmbService().getValue());

		searchCriteria.setWard(form.cmbWard().getValue());
		searchCriteria.setWasTimerOn(form.getLocalContext().getWasTimerEnabled());
		searchCriteria.setStatus(form.cmbStatus().getValue());
		
		return searchCriteria;

	}

	private void createDynamicGridSlots()
	{
		form.dyngrdResults().getColumns().clear();
		form.dyngrdResults().setHeaderHeight(45);
		form.dyngrdResults().setSelectable(true);

		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		DynamicGridColumn column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_ICP);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_OUTCOME);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_ICAB);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn(dispIdType.getText(), COLUMN_IDENTIFIER);

		column.setWidth(85);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Surname", COLUMN_SURNAME);

		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Forename", COLUMN_FORENAME);

		column.setWidth(70);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Sex", COLUMN_SEX);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("D.O.B", COLUMN_DOB);

		column.setWidth(65);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn("Consultant", COLUMN_CONSULTANT);

		column.setWidth(85);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Time", COLUMN_TRACKING_TIME);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_ACTIVITY_IMAGE);

		column.setWidth(25);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		column.setSortMode(SortMode.NONE);

		column = form.dyngrdResults().getColumns().newColumn("Activity\nType", COLUMN_ACTIVITY_TYPE);

		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn("Appt.\nTime", COLUMN_APPT_TIME);

		column.setWidth(40);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(false);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_BOOKING_COMMENTS);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_APPT_LETTER_PRINTED);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_INTERPRETER_REQUIRED);

		column.setWidth(23);
		column.setAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		column.setCanGrow(false);
		//column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdResults().getColumns().newColumn("Status", COLUMN_STATUS);

		column.setWidth(50);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdResults().getColumns().newColumn(" ", COLUMN_CONTACT_DETAILS);

		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.NONE);

	}

	private void open(boolean bCalledFromOpen)
	{
		if (form.getGlobalContext().Core.getWardAttenderSearchCriteria() != null)
		{
			Boolean wasTimerOn = form.getGlobalContext().Core.getWardAttenderSearchCriteria() != null && Boolean.TRUE.equals(form.getGlobalContext().Core.getWardAttenderSearchCriteria().getWasTimerOn());

			search(false);

			if (Boolean.TRUE.equals(wasTimerOn))
			{
				form.getLocalContext().setWasTimerEnabled(true);
				toggleTimer(false);
			}
		}
		else	//wdev-21464 //WDEV-22589
		{
			if (engine.isDialog())
			{	
				if (bCalledFromOpen && (form.cmbHospital().getValue() == null || form.dteDate().getValue() == null))
				{	
					form.dyngrdResults().getRows().clear();
					updateControlsState();
					return;
				}	
				search(true);
			}	
		}

		updateControlsState();

	}

	private void updateControlsState()
	{
		form.getContextMenus().Core.hideAllWardAttenderCMMenuItems();

		boolean isNotACurrentInpatient = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && domain.isNotACurrentInpatient(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getPatient());
		boolean hasAppointmentOutcome = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && ((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getWardAttendanceOutcome() != null;

		boolean apptStatusBooked = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && Status_Reason.BOOKED.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getApptStatus());
		boolean apptStatusArrival = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && Status_Reason.ARRIVAL.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getApptStatus());
		boolean apptStatusSeen = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && Status_Reason.SEEN.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getApptStatus());
		boolean apptStatusNotSeen = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && Status_Reason.NOT_SEEN.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getApptStatus());
		boolean apptStatusDNA = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && Status_Reason.DNA.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getApptStatus());

		
		boolean showArrivedMenuItem = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo
		&& apptStatusBooked && ((WardAttenderAppointmentVo)form.dyngrdResults().getSelectedRow().getValue()).getAppointmentDate() != null
		&& ((WardAttenderAppointmentVo)form.dyngrdResults().getSelectedRow().getValue()).getAppointmentDate().isLessOrEqualThan(new Date());

		boolean showSeenMenuItem = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo
		&& apptStatusArrival && ((WardAttenderAppointmentVo)form.dyngrdResults().getSelectedRow().getValue()).getAppointmentDate() != null
		&& ((WardAttenderAppointmentVo)form.dyngrdResults().getSelectedRow().getValue()).getAppointmentDate().isLessOrEqualThan(new Date());	

		boolean showUndoSeenMenuItem = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && Status_Reason.SEEN.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getValue()).getApptStatus())
		&& !hasAppointmentOutcome;
		boolean showUndoDNAMenuItem = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && apptStatusDNA && !hasAppointmentOutcome;
		boolean showUndoArrivalMenuItem = form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && apptStatusArrival && !hasAppointmentOutcome;
		
		//WDEV-22711
		boolean isWardViewDialogPreviousOpened = Boolean.TRUE.equals(form.getLocalContext().getbWardViewDialogPreviousOpened());
		
		
		form.getContextMenus().Core.getWardAttenderCMADMITItem().setVisible(form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo 
				&& Status_Reason.SEEN.equals(((WardAttenderAppointmentVo) form.dyngrdResults().getSelectedRow().getValue()).getApptStatus()) 
				&& isNotACurrentInpatient 
				&& !isWardViewDialogPreviousOpened); //WDEV-22711

		form.getContextMenus().Core.getWardAttenderCMOUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue()) && (apptStatusArrival || apptStatusSeen) && !hasAppointmentOutcome );

		form.getContextMenus().Core.getWardAttenderCMVIEW_OUTCOMEItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.APPOINTMENT_OUTCOME_ENABLED.getValue())
				&& (apptStatusDNA || apptStatusArrival || apptStatusSeen || apptStatusNotSeen) && hasAppointmentOutcome);	

		form.getContextMenus().Core.getWardAttenderCMARRIVEDItem().setVisible(showArrivedMenuItem);

		form.getContextMenus().Core.getWardAttenderCMSEENItem().setVisible(showSeenMenuItem);

		form.getContextMenus().Core.getWardAttenderCMCANCEL_REBOOKItem().setVisible(form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && apptStatusBooked );

		form.getContextMenus().Core.getWardAttenderCMDNAItem().setVisible(form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo 
				&& apptStatusBooked && new Date().isGreaterOrEqualThan(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getAppointmentDate()));

		//form.getContextMenus().Core.getWardAttenderCMVISIT_COMPLETEItem().setVisible(getCurrentTrackingStatus() != null && !AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE.equals(getCurrentTrackingStatus()));

		form.getContextMenus().Core.getWardAttenderCMUNDO_DNAItem().setVisible(showUndoDNAMenuItem);
		form.getContextMenus().Core.getWardAttenderCMUNDO_ARRIVALItem().setVisible(showUndoArrivalMenuItem);
		form.getContextMenus().Core.getWardAttenderCMUNDO_SEENItem().setVisible(showUndoSeenMenuItem);

		boolean isOpenedAsDialog = engine.isDialog();
		
		form.btnClose().setVisible(isOpenedAsDialog);
		form.dteDate().setEnabled(!isOpenedAsDialog && !form.getTimers().gettimerSearch().isEnabled());
		form.cmbStatus().setEnabled(!isOpenedAsDialog && !form.getTimers().gettimerSearch().isEnabled());
	}

	/*
	private AppointmentTrackingStatus getCurrentTrackingStatus() 
	{

		if(form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo && ((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getCurrentApptTrakingStatus() != null && !AppointmentTrackingStatus.UNDO_ARRIVAL.equals(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getCurrentApptTrakingStatus().getTrackingStatus()))
			return ((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getCurrentApptTrakingStatus().getTrackingStatus();

		return null;
	}
	 */

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.ADMIT:

			form.getGlobalContext().Core.setCurrentInPatientListWard(domain.getAppointmentLocation((WardAttenderAppointmentVo)form.dyngrdResults().getValue()));
			engine.open(form.getForms().Core.WardViewDialog);

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.ARRIVED:

			arriveBooking();

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.SEEN:

			markAsSeen();

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.OUTCOME:

			engine.open(form.getForms().Core.WardAttenderDetailsDialog, new Object[] {FormMode.EDIT});

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.VIEW_OUTCOME:

			engine.open(form.getForms().Core.WardAttenderDetailsDialog, new Object[] {FormMode.VIEW});

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.VISIT_COMPLETE:

			visitComplete();

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.CANCEL_REBOOK:

			cancelAppointment((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

			break;	

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.DNA:

			dnaPatient();

			break;	

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.UNDO_ARRIVAL:

			form.getLocalContext().setUndoArrivalMessageBoxId(engine.showMessage("Are you sure you want to Undo this Arrival ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.UNDO_SEEN:

			form.getLocalContext().setUndoSeenMessageBoxId(engine.showMessage("Are you sure you want to Undo the Seen status?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));

			break;

		case GenForm.ContextMenus.CoreNamespace.WardAttenderCM.UNDO_DNA:

			form.getLocalContext().setUndoDNAMessageBoxId(engine.showMessage("Are you sure you want to Undo the DNA status?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));

			break;
		}
	}

	private void markAsSeen()
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

		if (Status_Reason.ARRIVAL.equals(voBook.getApptStatus()))
		{
			form.getLocalContext().setWasArrivedSelected(false);
			engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Seen Time"} );
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search(false);//WDEV-21763
		}

	}

	private void visitComplete()
	{
		updateTrackingStatus(AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE);
		search(false);//WDEV-21763

	}

	private void updateTrackingStatus(AppointmentTrackingStatus trackingStatus)
	{
		if(trackingStatus == null)
			return;

		Booking_AppointmentVo voBooking = domain.getBookingAppt((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}

		if(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		if (trackingStatus.equals(AppointmentTrackingStatus.PATIENT_VISIT_COMPLETE) && voBooking != null && Status_Reason.ARRIVAL.equals(voBooking.getApptStatus()))
		{
			//mark it as seen first
			updateBookingWithSeenStatus(voBooking);
		}

		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);

		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		try 
		{
			domain.saveBookingAppointment(voBooking);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			search(false);//WDEV-21763
			return;
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		} 

	}

	private void updateBookingWithSeenStatus(Booking_AppointmentVo voBooking) 
	{
		voBooking.setApptStatus(Status_Reason.SEEN);

		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(Status_Reason.SEEN);

		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();

		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);

		if (voBooking.getSeenTime() == null)
			voBooking.setSeenTime(new Time());

		populateAppointmentWithTrackingStatus(voBooking, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT);
	}

	private void cancelAppointment(WardAttenderAppointmentVo  appointment) 
	{
		Booking_AppointmentVo voAppt = domain.getBookingAppt((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

		if (voAppt != null && voAppt.getApptStatus() != null && appointment != null && appointment.getApptStatus() != null && !voAppt.getApptStatus().equals(appointment.getApptStatus()))
		{
			engine.showMessage("The appointment's status has already been changed.");
			search(false);//WDEV-21763
			return;
		}

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

		if (voAppt != null && Status_Reason.BOOKED.equals(voAppt.getApptStatus()) && !isTheatreAppt)
		{
			form.getLocalContext().setAppointmentToCancel(appointment);
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt);

			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity != null ? voServiceAndActivity.getSlotActivity() : null);
			form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity != null ? voServiceAndActivity.getSessionService() : null);
			form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
			form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());

			engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
		}

	}

	private void dnaPatient()
	{
		updateBooking(Status_Reason.DNA, null, false);
		search(false);

	}

	private void arriveBooking()
	{
		if (!ConfigFlag.DOM.USE_PDS.getValue().equals("None")) 
		{ 
			// PDS AUTHENTICATION
			PdsAuthenticationHelper pdsAuth = new PdsAuthenticationHelper(engine, domain);
			if(pdsAuth.hasRightsFor(PdsRight.PDS_SEARCH_FOR_PATIENT, PdsCheck.CHECK_ALL, form.getGlobalContext().Core.getSamlXml()))
			{
				engine.open(form.getForms().Core.PDSDemographicsDialog, new Object[] {Boolean.FALSE});
				return;
			}
			// END PDS AUTHENTICATION
			
			demographicsHandler();
		}
		else
		{
			//demographicsHandler();
			engine.open(form.getForms().Core.PDSDemographicsDialog, new Object[] {Boolean.FALSE});
			return;
		}
	}

	private void updateBooking(Status_Reason stat, AppointmentTrackingStatus trackingStatus, boolean requiresNewTCI)
	{
		Booking_AppointmentVo voBooking = domain.getBookingAppt((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

		if (voBooking == null)
		{
			engine.showMessage("No Booking Found.");
			return;
		}

		if(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}

		CatsReferralListVo voCats = domain.getCatsReferral((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

		if (voCats == null)
		{
			engine.showMessage("No Referral Found.");
			return;
		}

		PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;

		Boolean isUndoDNA = Status_Reason.DNA.equals(voBooking.getApptStatus()) && Status_Reason.BOOKED.equals(stat);
		Boolean isUndoArrival = Status_Reason.ARRIVAL.equals(voBooking.getApptStatus()) && Status_Reason.BOOKED.equals(stat);



		form.getGlobalContext().Core.getPatientShort().calculateAge();
		boolean isPaediatricPatient = form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAge()<= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
		boolean isFirstApptActivityforDNA = stat.equals(Status_Reason.DNA) && !isPaediatricPatient && canBeDNAed(voBooking.getApptStatus(), voBooking.getSession().getSessionDate())&& Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && voBooking.getActivityIsNotNull() && voBooking.getActivity().getFirstAppointment();
		SessionSlotVo sessionSlot = null;

		if (stat.equals(Status_Reason.DNA))
		{
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			{

				patientElectiveList = domain.getPatientElectiveList((WardAttenderAppointmentVo)form.dyngrdResults().getValue());

				if (patientElectiveList != null)
				{
					TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();

					// Update the TCI record
					if (currentTCI != null)
					{
						TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();

						outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
						outcomeDNA.setStatusDateTime(new DateTime());
						outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());

						currentTCI.setCurrentOutcome(outcomeDNA);
						currentTCI.getOutcomeHistory().add(outcomeDNA);
						currentTCI.setIsActive(Boolean.FALSE);

						patientElectiveList.getTCIHistory().add(currentTCI);
					}

					// Update the status for PatientElective
					if (requiresNewTCI == true)
					{
						ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();

						requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
						requiresNewTCIStatus.setStatusDateTime(new DateTime());
						requiresNewTCIStatus.setStatusComment(null);
						requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
						requiresNewTCIStatus.setRemovalReason(null);
						requiresNewTCIStatus.setRemovalOtherReason(null);    					

						patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
						patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
					}
				}
			}


			if(voBooking.getIsCABBooking() == null || Boolean.FALSE.equals(voBooking.getIsCABBooking()))
			{
				if(voBooking.getSessionSlotIsNotNull())
				{

					sessionSlot = (SessionSlotVo) voBooking.getSessionSlot();
					sessionSlot.setStatus(Status_Reason.DNA);
					sessionSlot.validate();
				}
			}
		}

		voBooking.setApptStatus(stat);
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		
		//WDEV-21088
		LateTimeArrivalRecordVo lateArrivalRecord = form.getGlobalContext().Scheduling.getLateArrivalRecord();
		if(lateArrivalRecord != null)
			{
			voStatus.setCareProfessionalNotReadyToSee(lateArrivalRecord.getCareProfessionalNotReadyToSee());
			voStatus.setCareProfessionalReadyToSee(lateArrivalRecord.getCareProfessionalReadyToSee());
			voStatus.setCouldnotbeseen(lateArrivalRecord.getCouldNotBeSeen());
			}
		
		voStatus.setApptDate(voBooking.getAppointmentDate());
		voStatus.setApptTime(voBooking.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(stat);

		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();

		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();

		voCollStatusHistory.add(voStatus);
		voBooking.setCurrentStatusRecord(voStatus); 
		voBooking.setApptStatusHistory(voCollStatusHistory);

		if (stat.equals(Status_Reason.ARRIVAL))
		{	
			//WDEV-21088
			if(lateArrivalRecord!=null)
				voBooking.setArrivalTime(lateArrivalRecord.getArrivalTime());
			else
				voBooking.setArrivalTime(form.getGlobalContext().RefMan.getChosenTime());
			form.getGlobalContext().Scheduling.setLateArrivalRecord(null);

			voBooking.setSeenBy(null);
			voBooking.setSeenTime(null);
		}
		else if (stat.equals(Status_Reason.SEEN))
		{

			voBooking.setSeenBy((HcpRefVo) domain.getHcpLiteUser());
			voBooking.setSeenTime(form.getGlobalContext().RefMan.getChosenTime());
		}
		else if (stat.equals(Status_Reason.BOOKED))
		{
			voBooking.setArrivalTime(null);
			voBooking.setOutcome(null);
			voBooking.setOutcomeComments(null);
			voBooking.setRequiresRebook(false);
		}

		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);

		String[] error = voBooking.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		error = voCats.validate(error);
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		try 
		{
			domain.saveWardAttendance(voBooking, voCats, sessionSlot, patientElectiveList, isFirstApptActivityforDNA, isUndoDNA, isUndoArrival);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}

	}

	private void populateAppointmentWithTrackingStatus(Booking_AppointmentVo voBooking, AppointmentTrackingStatus trackingStatus) 
	{
		if(voBooking == null || trackingStatus == null)
			return;

		Appt_Tracking_Status_HistoryVoCollection trackingCollection = voBooking.getApptTrackingStatusHistory();

		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();

		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(voBooking.getAppointmentDate());
		newTrackingStatus.setApptTime(voBooking.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());

		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);

		trackingCollection.add(newTrackingStatus);
		voBooking.setApptTrackingStatusHistory(trackingCollection);
	}

	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (Status_Reason.BOOKED.equals(apptStatus) && dateSession != null) 
		{

			if(new Date().isGreaterOrEqualThan(dateSession))
			{
				return true;
			}
		}

		return false;
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateServices(value);

	}

	private void populateServices(String value)
	{

		form.qmbService().clear();

		ServiceLiteVoCollection coll = domain.listServices(value);

		if(coll == null || coll.size() == 0)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			if (coll.get(i) == null)
				continue;

			form.qmbService().newRow(coll.get(i), coll.get(i).getServiceName());

			if (coll.size() == 1)
			{	
				form.qmbService().setValue(coll.get(0));
			}
			else
			{	
				form.qmbService().showOpened();
			}
		}
	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		toggleTimer(true);
	}

	@Override
	protected void onDteDateValueChanged() throws PresentationLogicException
	{
		loadClinics();
	}
	
	private void loadClinics()
	{
		form.cmbClinic().clear();
		form.cmbClinic().setTooltip(null); //WDEV-22660

		if (form.cmbHospital().getValue() == null || form.dteDate().getValue() == null)
			return;

		SessionForWardAttenderVoCollection clinics = domain.listClinics(form.cmbHospital().getValue(), form.dteDate().getValue());

		if (clinics == null)
			return;

		for (SessionForWardAttenderVo item: clinics)
		{
			StringBuffer sb = new StringBuffer();

			sb.append(item.getName());
			sb.append(" - ");
			sb.append(item.getSessionDate());

			form.cmbClinic().newRow(item, sb.toString());

			if(engine.getCurrentLocation() != null && item.getSchLocation() != null)
			{
				if (engine.getCurrentLocation().getID() == item.getSchLocation().getID_Location())
					form.cmbClinic().setValue(item);
			}

		}

		if (clinics.size() == 1)
			form.cmbClinic().setValue(clinics.get(0));

		form.cmbClinic().setTooltip(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getDescription() : null);

	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		loadClinics();
		loadWards();

	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		form.cmbHospital().setValue(null);
		form.cmbClinic().clear();
		form.cmbClinic().setTooltip(null); //WDEV-22660 
		form.cmbWard().clear();
		form.qmbService().clear();
		form.imbAutoRefresh().setEnabled(false);
		form.imbAutoRefresh().setTooltip("This button will be enabled once a valid search of Ward Attenders is performed");
		form.dyngrdResults().getRows().clear();
		if (!engine.isDialog())
		{	
			form.dteDate().setValue(null);
			form.cmbStatus().setValue(null);
		}	
		form.getGlobalContext().Core.setWardAttenderSearchCriteria(null);

		clearGlobalContexts();
	}

	private void clearGlobalContexts()
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setPatientShort(null);

	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		search(true);

	}

	private void search(boolean isFromButton)
	{
		form.imbAutoRefresh().setEnabled(false);
		form.imbAutoRefresh().setTooltip("This button will be enabled once a valid search of Ward Attenders is performed");
		clearGlobalContexts();
		if (!isFromButton && (form.cmbHospital().getValue() == null || form.dteDate().getValue() == null) || !validateSearch())
		{
			form.dyngrdResults().getRows().clear();
			updateControlsState();
			return;
		}

		form.getGlobalContext().Core.setWardAttenderSearchCriteria(populateSearchCriteriaVo());

		WardAttenderAppointmentVoCollection list = domain.listWardAttendances(form.getGlobalContext().Core.getWardAttenderSearchCriteria());

		populateResults(list, isFromButton);

		updateControlsState();
	}

	private void populateResults(WardAttenderAppointmentVoCollection list, boolean isFromBtn)
	{
		form.dyngrdResults().getRows().clear();
				
		if (isFromBtn && (list == null || list.size() == 0))
		{
			engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}

		form.imbAutoRefresh().setEnabled(true);
		form.imbAutoRefresh().setTooltip("Click button to Start the Automatic Refresh");

		StringBuffer strTooltip = new StringBuffer();

		for (int i = 0; i < list.size(); i++)
		{
			WardAttenderAppointmentVo wardAttendance = list.get(i);

			if (wardAttendance == null)
				continue;

			DynamicGridRow newDynamicRow = form.dyngrdResults().getRows().newRow();

			boolean hasBookingComments = wardAttendance != null && wardAttendance.getBookingCommentsIsNotNull() && wardAttendance.getBookingComments().length() > 0;

			strTooltip.delete(0, strTooltip.length());

			strTooltip.append("<b>Booking Details :</b> " + wardAttendance.getPatient().getPatientNameAndIdInfo());

			if (hasBookingComments)
				strTooltip.append("<br><b>Booking Comments :</b> " + wardAttendance.getBookingComments());

			if(wardAttendance != null && wardAttendance.getWardAttendanceOutcome() != null)
				strTooltip.append("<br><b>Appointment Outcome :</b> " + wardAttendance.getWardAttendanceOutcome().getText());

			if (wardAttendance != null && wardAttendance.getWardAttendanceOutcomeComment() != null)
				strTooltip.append("<br><b>Outcome Comment:</b> " + wardAttendance.getWardAttendanceOutcomeComment());

			if(wardAttendance != null && wardAttendance.getComments() != null)
				strTooltip.append("<br><b>Appointment Comments:</b> " + wardAttendance.getComments());

			if (wardAttendance.getReferral() != null && wardAttendance.getReferral().getReferralDetails() != null)
			{
				if (wardAttendance.getReferral().getCurrentRTTStatus() != null && wardAttendance.getReferral().getCurrentRTTStatus().getRTTStatus() != null)
				{
					strTooltip.append("<br><b>RTT Status:</b> ").append(wardAttendance.getReferral().getCurrentRTTStatus().getRTTStatus().getDescription());
				}

				if(wardAttendance.getReferral().getReferralDetails().getEnd18WW() != null)
				{
					strTooltip.append("<br><b>RTT Breach Date:</b> " + wardAttendance.getReferral().getReferralDetails().getEnd18WW().toString());
				}

				if (wardAttendance.getReferral().getReferralDetails().getDadUbrn() != null)
					strTooltip.append("<br><b>UBRN:</b> " + wardAttendance.getReferral().getReferralDetails().getDadUbrn());
			}			


			String IcpTooltip = "";

			if (wardAttendance.getICPInfo() != null)
			{
				if(Boolean.TRUE.equals(wardAttendance.getICPInfo().getHasOutstandingNursingActions()))
				{
					IcpTooltip += "Nursing Action Required for ICP : " + (wardAttendance.getICPInfo().getICPIsNotNull() ? wardAttendance.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if (Boolean.TRUE.equals(wardAttendance.getICPInfo().getHasOutstandingClinicalActions()))
				{
					IcpTooltip += "Medical Action Required for ICP: "  + (wardAttendance.getICPInfo().getICPIsNotNull() ? wardAttendance.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if (Boolean.TRUE.equals(wardAttendance.getICPInfo().getHasOutstandingPhysioActions()))
				{
					IcpTooltip += "Physio Action Required for ICP: "  + (wardAttendance.getICPInfo().getICPIsNotNull() ? wardAttendance.getICPInfo().getICP().getName().toString() : "") + "<br>";
				}

				if(Boolean.TRUE.equals(wardAttendance.getICPInfo().getHasOutstandingAdminActions()))
				{
					IcpTooltip += "Admin Action Required for ICP: "  + (wardAttendance.getICPInfo().getICPIsNotNull() ? wardAttendance.getICPInfo().getICP().getName().toString() : "")+ "<br>";
				}
			}

			DynamicGridCell cellICP = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ICP), DynamicCellType.IMAGE);
			cellICP.setReadOnly(true);
			cellICP.setValue(wardAttendance.getICPInfo() != null ? form.getImages().ICP.ICP : null);
			cellICP.setTooltip(IcpTooltip.length() > 0 ? IcpTooltip + "<br>" + strTooltip : strTooltip.toString());

			DynamicGridCell cellOutcome = newDynamicRow.getCells().newCell(getColumnById(COLUMN_OUTCOME), DynamicCellType.IMAGE);
			cellOutcome.setReadOnly(true);

			if (Boolean.TRUE.equals(wardAttendance.getHasElectiveList()))
			{
				cellOutcome.setValue(form.getImages().Core.UI16);
				cellOutcome.setTooltip("Waiting list entry");
			}
			else if (Boolean.TRUE.equals(wardAttendance.getWardAttendanceOutcome() != null))
			{
				cellOutcome.setValue(form.getImages().Scheduling.appointment_outcome_16);
				cellOutcome.setTooltip("Appointment Outcome: " + wardAttendance.getWardAttendanceOutcome().getText());
			}

			cellICP.setValue(wardAttendance.getICPInfo() != null ? form.getImages().ICP.ICP : null);

			DynamicGridCell cellICAB = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ICAB), DynamicCellType.IMAGE);
			cellICAB.setReadOnly(true);
			cellICAB.setValue(wardAttendance.getReferral() != null && Boolean.TRUE.equals(wardAttendance.getReferral().getIsCAB()) ? form.getImages().OCRR.LetterC : null);

			DynamicGridCell cellIdentifier = newDynamicRow.getCells().newCell(getColumnById(COLUMN_IDENTIFIER), DynamicCellType.STRING);
			cellIdentifier.setReadOnly(true);

			if (wardAttendance.getPatient() != null && wardAttendance.getPatient().getDisplayId() != null)
				cellIdentifier.setValue(wardAttendance.getPatient().getDisplayId().getValue());

			cellIdentifier.setTooltip(strTooltip.toString());

			DynamicGridCell cellSurname = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SURNAME), DynamicCellType.STRING);
			cellSurname.setReadOnly(true);
			cellSurname.setValue(wardAttendance.getPatient() != null && wardAttendance.getPatient().getName() != null  ? wardAttendance.getPatient().getName().getSurname() : "");
			cellSurname.setTooltip(strTooltip.toString());

			DynamicGridCell cellForename = newDynamicRow.getCells().newCell(getColumnById(COLUMN_FORENAME), DynamicCellType.STRING);
			cellForename.setReadOnly(true);
			cellForename.setValue(wardAttendance.getPatient() != null && wardAttendance.getPatient().getName() != null  ? wardAttendance.getPatient().getName().getForename() : "");
			cellForename.setTooltip(strTooltip.toString());

			DynamicGridCell cellSex = newDynamicRow.getCells().newCell(getColumnById(COLUMN_SEX), DynamicCellType.STRING);
			cellSex.setReadOnly(true);
			cellSex.setValue(wardAttendance.getPatient() != null && wardAttendance.getPatient().getSex() != null  ? wardAttendance.getPatient().getSex().toString() : "");
			cellSex.setTooltip(wardAttendance.getPatient() != null && wardAttendance.getPatient().getSex() != null ? wardAttendance.getPatient().getSex().toString() + "<br><br>" + strTooltip : strTooltip.toString());

			DynamicGridCell cellDOB = newDynamicRow.getCells().newCell(getColumnById(COLUMN_DOB), DynamicCellType.STRING);
			cellDOB.setReadOnly(true);
			cellDOB.setValue(wardAttendance.getPatient() != null && wardAttendance.getPatient().getDob() != null  ? wardAttendance.getPatient().getDob().toString() : "");
			cellDOB.setTooltip(strTooltip.toString());

			DynamicGridCell cellConsultant = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CONSULTANT), DynamicCellType.STRING);
			cellConsultant.setReadOnly(true);

			if (wardAttendance.getSession() != null && wardAttendance.getSession().getListOwners() != null && wardAttendance.getSession().getListOwners().size() > 0  
					&& wardAttendance.getSession().getListOwners().get(0).getHcp() != null && wardAttendance.getSession().getListOwners().get(0).getHcp().getName() != null)
			{
				cellConsultant.setValue(wardAttendance.getSession().getListOwners().get(0).getHcp().getName().toString());
				cellConsultant.setTooltip(wardAttendance.getSession().getListOwners().get(0).getHcp().getName().toString() + "<br><br>" + strTooltip);
			}
			else
				cellConsultant.setTooltip(strTooltip.toString());

			DynamicGridCell cellTrackingTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_TRACKING_TIME), DynamicCellType.TIME);
			cellTrackingTime.setReadOnly(true);
			cellTrackingTime.setValue((wardAttendance.getCurrentApptTrakingStatus() != null && wardAttendance.getCurrentApptTrakingStatus().getStatusChangeDateTime() != null) ? wardAttendance.getCurrentApptTrakingStatus().getStatusChangeDateTime().getTime() : null);
			cellTrackingTime.setTooltip((wardAttendance.getCurrentApptTrakingStatus() != null && wardAttendance.getCurrentApptTrakingStatus().getStatusChangeDateTime() != null) ? wardAttendance.getCurrentApptTrakingStatus().getStatusChangeDateTime().toString() + "<br><br>" + strTooltip : strTooltip.toString());

			DynamicGridCell cellActivityImage = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY_IMAGE), DynamicCellType.IMAGE);
			cellActivityImage.setReadOnly(true);
			cellActivityImage.setValue(wardAttendance.getActivity() != null && wardAttendance.getActivity().getActivityImage() != null ? engine.getRegisteredImage(wardAttendance.getActivity().getActivityImage().getID_AppImage().intValue()) : null);

			DynamicGridCell cellActivityType = newDynamicRow.getCells().newCell(getColumnById(COLUMN_ACTIVITY_TYPE), DynamicCellType.STRING);
			cellActivityType.setReadOnly(true);
			cellActivityType.setValue(wardAttendance.getActivity() != null  ? wardAttendance.getActivity().getName() : null);
			cellActivityType.setTooltip(wardAttendance.getActivity() != null ? wardAttendance.getActivity().getName() + "<br><br>" + strTooltip : strTooltip.toString());

			DynamicGridCell cellApptTime = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_TIME), DynamicCellType.TIME);
			cellApptTime.setReadOnly(true);
			cellApptTime.setValue(wardAttendance.getApptStartTime() != null ? wardAttendance.getApptStartTime() : null);
			cellApptTime.setTooltip(strTooltip.toString());

			DynamicGridCell cellBookingComments = newDynamicRow.getCells().newCell(getColumnById(COLUMN_BOOKING_COMMENTS), DynamicCellType.IMAGE);
			cellBookingComments.setReadOnly(true);
			cellBookingComments.setValue(hasBookingComments ? form.getImages().Emergency.CommentNotes16x16 : null);
			cellBookingComments.setTooltip(hasBookingComments ? "Booking Comments: <b>" + wardAttendance.getBookingComments().trim() : "");

			DynamicGridCell cellApptLetterPrinted = newDynamicRow.getCells().newCell(getColumnById(COLUMN_APPT_LETTER_PRINTED), DynamicCellType.IMAGE);
			cellApptLetterPrinted.setReadOnly(true);
			cellApptLetterPrinted.setValue(Boolean.TRUE.equals(wardAttendance.getWasPrinted()) ? form.getImages().Correspondence.Printer : null);
			cellApptLetterPrinted.setTooltip(getTooltipForColAppLetterPrinted(wardAttendance));

			DynamicGridCell cellInterpreterReq = newDynamicRow.getCells().newCell(getColumnById(COLUMN_INTERPRETER_REQUIRED), DynamicCellType.IMAGE);
			cellInterpreterReq.setReadOnly(true);

			if (wardAttendance.getReferral() != null && wardAttendance.getReferral().getReferralDetails() != null && YesNo.YES.equals(wardAttendance.getReferral().getReferralDetails().getInterpreterRequired()))
			{
				cellInterpreterReq.setValue(form.getImages().RefMan.interpreter18x18);
				cellInterpreterReq.setTooltip(getInterpreterDetailsDisplay(wardAttendance.getReferral().getReferralDetails()));
			}

			DynamicGridCell cellStatus = newDynamicRow.getCells().newCell(getColumnById(COLUMN_STATUS), DynamicCellType.STRING);
			cellStatus.setReadOnly(true);
			cellStatus.setValue(wardAttendance.getApptStatus() != null ? wardAttendance.getApptStatus().toString() : "");
			cellStatus.setTooltip(wardAttendance.getApptStatus() != null ? wardAttendance.getApptStatus().toString() + "<br><br>" + strTooltip : strTooltip.toString());

			String contactDetailsTooltip = "";

			if (wardAttendance.getPatient() != null)
			{
				CommChannelVoCollection voCommChannelColl = wardAttendance.getPatient().getCommChannels();	

				if (voCommChannelColl != null && voCommChannelColl.size() > 0)
				{

					for (int k = 0; k < voCommChannelColl.size(); k++)
					{
						if (voCommChannelColl.get(k) == null)
							continue;

						CommChannelVo voCommChannel = voCommChannelColl.get(k);

						if (voCommChannel.getChannelType() != null)
						{
							contactDetailsTooltip += "<b>Contact Type: </b>" + voCommChannel.getChannelType() + ", <b>Contact Value: </b>" + voCommChannel.getCommValue() + "<br>";

						}
					}
				}
			}

			if (contactDetailsTooltip.length() > 0)
			{
				DynamicGridCell cellContactDetails = newDynamicRow.getCells().newCell(getColumnById(COLUMN_CONTACT_DETAILS), DynamicCellType.IMAGEBUTTON);
				cellContactDetails.setReadOnly(false);
				cellContactDetails.setAutoPostBack(true);
				cellContactDetails.setValue(form.getImages().RefMan.HandSet16);
				cellContactDetails.setTooltip(contactDetailsTooltip);
			}

			if (wardAttendance.getApptStatusIsNotNull())//WDEV-22730
			{
				Status_Reason status_ReasonInstance = ims.scheduling.vo.lookups.LookupHelper.getStatus_ReasonInstance(this.domain.getLookupService(), wardAttendance.getApptStatus().getID());
				newDynamicRow.setBackColor(status_ReasonInstance != null ? status_ReasonInstance.getColor(): null);
			}

			newDynamicRow.setValue(wardAttendance);
		}
	}

	private String getInterpreterDetailsDisplay(ReferralLetterDetailsClinicListListVo referralDetails)
	{
		if (referralDetails == null)
			return null;

		String szTooltip = "";

		if (YesNo.YES.equals(referralDetails.getInterpreterRequired()))
		{
			szTooltip += referralDetails.getLanguageIsNotNull() || referralDetails.getOtherLanguageIsNotNull() ? "<b/>Requires Interpreter<br/> Language:</b> " + (referralDetails.getLanguage() != null ?  (Language.OTHER.equals(referralDetails.getLanguage()) ?  (referralDetails.getOtherLanguage() != null ? referralDetails.getOtherLanguage() : "") : referralDetails.getLanguage().getText()): "") : "";

		}
		return szTooltip;
	}

	private String getTooltipForColAppLetterPrinted(WardAttenderAppointmentVo outpatientEpisode)
	{
		if (outpatientEpisode==null || !Boolean.TRUE.equals(outpatientEpisode.getWasPrinted()))
		{
			return null;
		}

		String str="Appointment Letter was printed ";

		str+=(outpatientEpisode.getBookingLetterIsNotNull() && outpatientEpisode.getBookingLetter().getRecordingUser()!=null ? "<br><b>User:  </b>" + outpatientEpisode.getBookingLetter().getRecordingUser().getIMosName() : "");  

		str+=(outpatientEpisode.getBookingLetterIsNotNull() && outpatientEpisode.getBookingLetter().getRecordingDateTime()!=null ? "<br><b>Date/Time: </b>" + outpatientEpisode.getBookingLetter().getRecordingDateTime() : "");  

		return str;

	}

	private boolean validateSearch()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();


		if(form.dteDate().getValue() == null)
			uiErrors.add("Please enter a Date");

		if(form.cmbHospital().getValue() == null)
			uiErrors.add("Please select a Hospital");

		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}

		return true;
	}

	@Override
	protected void onDyngrdResultsCellButtonClicked(DynamicGridCell cell)
	{
		if( cell.getColumn().equals(getColumnById(COLUMN_CONTACT_DETAILS)))
		{
			if( form.dyngrdResults().getValue() != null && form.dyngrdResults().getValue() instanceof WardAttenderAppointmentVo)
			{
				engine.open(form.getForms().Clinical.PatientContactDlg, new Object[] {((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getPatient()});
			}
		}

	}

	@Override
	protected void onDyngrdResultsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		form.getGlobalContext().Core.setSamlXml(engine.getSAMLXmlContent());
		
		if (((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getReferral() != null)
		{
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getReferral()));
		} 

		form.getGlobalContext().Core.setPatientShort(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getPatient());
		form.getGlobalContext().Scheduling.setBookingAppointmentRef((WardAttenderAppointmentVo)form.dyngrdResults().getSelectedRow().getValue());
		form.getGlobalContext().ICP.setPatientICPRecord(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getICPInfo());
		form.getGlobalContext().RefMan.setCatsReferral(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getReferral());
		form.getGlobalContext().Scheduling.setWardAttendance(((WardAttenderAppointmentVo)form.dyngrdResults().getValue()).getIsWardAttendance());

		updateControlsState();

	}

	@Override
	protected void onDyngrdResultsColumnHeaderClicked(DynamicGridColumn column)
	{
		if (column.equals(getColumnById(COLUMN_DOB)))
		{
			if(form.getLocalContext().getSortOrderDOB() == null)
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);

			WardAttenderAppointmentVoCollection results = new WardAttenderAppointmentVoCollection();

			for (int i = 0 ; i < form.dyngrdResults().getRows().size(); i++)
				results.add(((WardAttenderAppointmentVo) form.dyngrdResults().getRows().get(i).getValue()));	
			
			if (results.size() < 2)
				return;
			
			results.sort(new DOBComparator(form.getLocalContext().getSortOrderDOB()));

			form.getLocalContext().setSortOrderDOB(form.getLocalContext().getSortOrderDOB().equals(SortOrder.ASCENDING) ? SortOrder.DESCENDING : SortOrder.ASCENDING);

			populateResults(results,false);
		}

	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(cancelAndRebook() == false)
					search(false);
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
			}

			form.getLocalContext().setAppointmentToCancel(null);
			return;

		}
		else if ((formName.equals(form.getForms().Scheduling.AppointmentArrivalDialog) || formName.equals(form.getForms().RefMan.ArrivalSeenTimeDialog)) && result.equals(DialogResult.OK))
		{
			arrivalHandler();
		}
		else if (formName.equals(form.getForms().Core.PDSDemographicsDialog))
		{
			demographicsHandler();
		}
		else if(formName.equals(form.getForms().Core.WardViewDialog))//WDEV-21763
		{
			search(false);
		}
		//WDEV-22757
		else if (DialogResult.OK.equals(result) && form.getForms().Core.WardAttenderDetailsDialog.equals(formName))
		{
			search(false);
		}
	}

	private void demographicsHandler()
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt((WardAttenderAppointmentVo)form.dyngrdResults().getValue());
		
		if (Status_Reason.BOOKED.equals(voBook.getApptStatus()))
		{
			Date appointmentDate =  voBook.getAppointmentDate()!= null ? voBook.getAppointmentDate(): new Date();
			Time apptStartTime = voBook.getApptStartTime()!= null ? voBook.getApptStartTime(): new Time();
			DateTime apptDataTime = new DateTime(appointmentDate, apptStartTime);
			DateTime nowDateTime = new DateTime();
			if(nowDateTime.isGreaterThan(apptDataTime))
			{
				form.getLocalContext().setWasArrivedSelected(true);
				engine.open(form.getForms().Scheduling.AppointmentArrivalDialog,new Object[]{apptDataTime});
			}
			else if(appointmentDate.isGreaterOrEqualThan(new Date()))
			{
				form.getLocalContext().setWasArrivedSelected(true);
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog,new Object[]{"Arrival Time"});
			}
		}
		else 
		{
			engine.showMessage("This appointment's status has already changed.");
			search(false);
		}
	}

	private void arrivalHandler() 
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getWasArrivedSelected()))
			updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
		else
			updateBooking(Status_Reason.SEEN, AppointmentTrackingStatus.PATIENT_SEEN_BY_CONSULTANT, false);

		search(false);
	}

	private boolean cancelAndRebook()
	{
		Booking_AppointmentVo voAppt = cancelAppt(false);

		if( voAppt == null)
		{
			return false;
		}

		// rebook
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
		{	
			if( voAppt.getTheatreBooking() == null)
			{
				rebookAppt(voAppt, null);
				return true;
			}

			return false;
		}
		return false;

	}

	private void rebookAppt(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{		
		if (isReferralEndOfCare())
			return;

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

		if (voAppt != null && voAppt.getApptStatus() != null && voFromGrid != null && voFromGrid.getApptStatus() != null
				&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
		}
		else if ( voAppt != null && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && !isTheatreAppt
				&& (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);

			bookAppt();
		}
	}

	private void bookAppt()
	{
		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog, false); //WDEV-22308
	}

	private boolean isReferralEndOfCare()
	{
		CatsReferralCurrentStatusVo referral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (referral != null && referral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(referral.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}

	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		int repeats = 0;

		do
		{
			try 
			{
				WardAttenderAppointmentVo voAppt = form.getLocalContext().getAppointmentToCancel();

				if(voAppt == null)
					return null;

				Booking_AppointmentVo voApptFull = domain.getBookingAppt(voAppt);

				if (voApptFull.getApptStatus() != null && voAppt.getApptStatus() != null
						&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return null;
				}

				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					// wdev-6034
					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
					if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
					{
						voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
						if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
							voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
					}

					if(Status_Reason.HOSPITALCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numProviderCancellations = 0;

						if(voApptFull.getNumProviderCancellations() != null)
						{
							numProviderCancellations = voApptFull.getNumProviderCancellations();
						}
						numProviderCancellations += 1;

						voApptFull.setNumProviderCancellations(numProviderCancellations);
					}

					if(Status_Reason.PATIENTCANCELLED.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason()))
					{
						int numPatientCancellations = 0;

						if(voApptFull.getNumPatientCancellations() != null)
						{
							numPatientCancellations = voApptFull.getNumPatientCancellations();
						}
						numPatientCancellations += 1;

						voApptFull.setNumPatientCancellations(numPatientCancellations);
					}
				}

				if (voApptFull.getSessionSlotIsNotNull() && voApptFull.getSessionIsNotNull())
					voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus());

				voApptFull.setLinkedApptsToBeCancelled(form.getGlobalContext().RefMan.getLinkedAppointmentsCollection());

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return null;
				}

				if (tciCancelation)
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
				else
					voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");

				domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull);

				if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
				{
					domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason(), form.getGlobalContext().Scheduling.getApptCancelStatus().getComment(), Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
				}

				return voApptFull;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		while (repeats < 0);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");		
		return null;
	}

	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}

		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}


		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();

		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();


		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.dyngrdResults().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		search(false);

	}

	@Override
	protected void onCmbClinicValueChanged() throws PresentationLogicException
	{
		form.cmbClinic().setTooltip(form.cmbClinic().getValue() != null ? form.cmbClinic().getValue().getDescription() : null);

	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getUndoArrivalMessageBoxIdIsNotNull() && form.getLocalContext().getUndoArrivalMessageBoxId().equals(messageBoxId) && DialogResult.YES.equals(result))

		{
			form.getLocalContext().setUndoArrivalMessageBoxId(null);
			updateBooking(Status_Reason.BOOKED, null, false);
			search(false);//WDEV-21763
		}
		else if (form.getLocalContext().getUndoDNAMessageBoxId() != null && form.getLocalContext().getUndoDNAMessageBoxId().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			form.getLocalContext().setUndoDNAMessageBoxId(null);
			updateBooking(Status_Reason.BOOKED, null, false);
			search(false);//WDEV-21763
		}
		else if (form.getLocalContext().getUndoSeenMessageBoxId() != null && form.getLocalContext().getUndoSeenMessageBoxId().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			form.getLocalContext().setUndoSeenMessageBoxId(null);
			updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
			search(false);//WDEV-21763
		}

	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);

	}

	public static class DOBComparator implements Comparator
	{
		private int direction = 1;

		public DOBComparator ()
		{
			this(SortOrder.ASCENDING);
		}

		public DOBComparator (ims.framework.enumerations.SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}

		public int compare(Object ob1, Object ob2)
		{
			PartialDate rez1 = null;
			PartialDate rez2 = null;

			if(ob1 instanceof WardAttenderAppointmentVo )
			{
				WardAttenderAppointmentVo ps1 = (WardAttenderAppointmentVo)ob1;
				rez1 = (ps1.getPatient() != null && ps1.getPatient().getDob() != null ) ? ps1.getPatient().getDob() : null;
			}

			if(ob2 instanceof WardAttenderAppointmentVo)
			{
				WardAttenderAppointmentVo ps2 = (WardAttenderAppointmentVo)ob2;
				rez2 = (ps2.getPatient() != null && ps2.getPatient().getDob() != null) ? ps2.getPatient().getDob() : null;
			}

			if(rez1 != null && rez2 != null)
				return  rez1.compareTo(rez2)*direction;

			if(rez1 != null && rez2 == null)
				return  direction;

			if(rez2 != null && rez1 == null)
				return (-1)*direction;

			return 0;

		}

	}
}
