//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.inpatientepisodemaintenance;


import ims.admin.vo.MenuActionVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.domain.impl.InpatientEpisodeMaintenanceImpl;
import ims.core.forms.inpatientepisodemaintenance.GenForm.ctn1Container.grdConsultantTransfersGridRow;
import ims.core.forms.inpatientepisodemaintenance.GenForm.ctn1Container.grdWardTransfersGridRow;
import ims.core.forms.inpatientepisodemaintenance.GenForm.grdCurrentAdmissionDetailsRow;
import ims.core.forms.inpatientepisodemaintenance.GenForm.grdHistoricalInpatientEpisodesRow;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.vo.ConsultantStayVo;
import ims.core.vo.ConsultantStayVoCollection;
import ims.core.vo.DischargedEpisodeMaintenanceVo;
import ims.core.vo.DischargedEpisodeMaintenanceVoCollection;
import ims.core.vo.InpatientEpisodeMaintenanceVo;
import ims.core.vo.InpatientMaintenanceSummaryVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardStayVo;
import ims.core.vo.WardStayVoCollection;
import ims.core.vo.enums.InpatientEpisodeMaintenanceActions;
import ims.core.vo.enums.MosType;
import ims.core.vo.enums.WardConsultationSpecialtyTransfer;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.SourceOfReferral;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.CancellationTypeReasonVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;



public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int  WARD 			= 1;
	private static final int  CONSULTANT 	= 2;
	private enum EpisodeType {ADMISSION,DISCHARGE} 

	private static final int RIE_EPISODE = 6490001;
	private static final int CANCEL_DISCHARGE = 6490002; //WDEV-22925
	private static final int RIE_WARD_STAY = 5490003;
	private static final int RIE_CONSULTANT_STAY = 5500003;
	
	protected void onFormModeChanged()
	{
	}
	
	public void initialize() throws FormOpenException
	{
		form.ctn1().ccConsultant().initialize(MosType.MEDIC);
		form.ctn1().ccReferringConsultant().initialize(MosType.MEDIC);
//		form.ctn1().cmbAdmissionType().setRequired(true);
//		form.ctn1().cmbHospital().setRequired(true);
//		form.ctn1().cmbWard().setRequired(true);
//		form.ctn1().cmbWardType().setRequired(true);
//		form.ctn1().cmbService().setRequired(true);
//		form.ctn1().cmbSpecialty().setRequired(true);
		form.ctn1().ccConsultant().isRequired(Boolean.TRUE);
//		form.ctn1().cmbSourceOfAdmission().setRequired(true);
//		form.ctn1().cmbMethodOfAdmission().setRequired(true);
//		form.ctn1().dtimAdmission().setRequired(true);
//		form.ctn1().dtimEstDischargeDate().setRequired(true);
//		form.ctn1().cmbPatientCategory().setRequired(true);
		form.getLocalContext().setDeniedActions(listDeniedActionForCurrentUser());//WDEV-22833
		setLocalContextsDeniedAction();//WDEV-22958
	}
	
	private void setLocalContextsDeniedAction() 
	{
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(InpatientEpisodeMaintenanceActions.RIE_WARD_STAY.equals(form.getLocalContext().getDeniedActions().get(i)))
				form.getLocalContext().setIsRieWardStayDenied(true);
			
			else if(InpatientEpisodeMaintenanceActions.RIE_CONSULTANT_STAY.equals(form.getLocalContext().getDeniedActions().get(i)))
				form.getLocalContext().setIsRieConsultantStayDenied(true);
		}
		
	}
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if( result.equals(DialogResult.OK))
		{
			if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVoIsNotNull() )
			{
				if( WARD == form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getAction() )
				{
					grdWardTransfersGridRow row = form.ctn1().grdWardTransfersGrid().getSelectedRow();
					if(row==null)
						row = form.ctn1().grdWardTransfersGrid().getRows().newRow();
					WardStayVo stay= row.getValue();					
					if(stay==null)
						stay= new WardStayVo();
					boolean isTheMostRecentStay = stay.getID_WardStayIsNotNull() && form.grdHistoricalInpatientEpisodes().getValue() != null && stay.getTransferOutDateTime() != null && stay.getTransferOutDateTime().equals(form.grdHistoricalInpatientEpisodes().getValue().getDischargeDateTime());
					
					if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getWardIsNotNull())
					{
						row.setColumnWard(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getWard().getName());
						stay.setWard(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getWard());
					}
					if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateFromIsNotNull())
					{
						row.setColumnDateFrom(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateFrom().getDate());
						stay.setTransferDateTime(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateFrom());
					}
					if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateToIsNotNull())
					{
						row.setColumnDateTo(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateTo().getDate());
						stay.setTransferOutDateTime((form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateTo()));
					}
					if(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getServiceIsNotNull())
					{
						row.setColumnService(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getService().getServiceName());
						stay.setService(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getService());
					}
					if(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getCategoryIsNotNull())
					{
						row.setColumnPatientCategory(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getCategory().getText());
						stay.setPatientStatus(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getCategory());
					}
					
					if(form.grdCurrentAdmissionDetails().getSelectedRow()!=null)
					{
						InpatientEpisodeMaintenanceVo episode = form.grdCurrentAdmissionDetails().getSelectedRow().getValue();
						episode.getWardStays().add(stay);
						if(form.ctn1().grdWardTransfersGrid().getSelectedRowIndex()==0) //update ward
						{
							episode.getPasEvent().setLocation(stay.getWard());
						}
						if(form.ctn1().grdWardTransfersGrid().getSelectedRowIndex()==form.ctn1().grdWardTransfersGrid().getRows().size()-1 //update admission date Time
								&&stay!=null&&stay.getTransferDateTime()!=null)
						{
							episode.getPasEvent().setEventDateTime(stay.getTransferDateTime());
							episode.setAdmissionDateTime(stay.getTransferDateTime());
						}
						try {
							domain.saveAdmissionDetails(episode);
							open();
							if(episode.getPasEventIsNotNull())
							{
								PatientShort patient =domain.getPatientShort(episode.getPasEvent().getPatient());
								new ResetPIDBarHelper(engine, patient ,null);
							}
						} catch (StaleObjectException e) {
							e.printStackTrace();
							engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
							open();
							return;
						}
					}
					else if(form.grdHistoricalInpatientEpisodes().getSelectedRow()!=null)
					{
						DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getSelectedRow().getValue();
						episode.getWardStays().add(stay);
						
						WardStayVoCollection sortWardStays = null;
						if(episode.getWardStaysIsNotNull() && episode.getWardStays().size() > 0)//WDEV-23057
						{
							if( stay != null && episode.getWardStays().size() == 1 &&  episode.getWardStays().get(0)!= null)
							{
								LocationLiteVo admissionWard = episode.getWardStays().get(0).getWard();
								episode.setAdmissionWard(admissionWard);
								episode.setDischargingWard(admissionWard);
								episode.getPasEvent().setLocation(admissionWard);
							}
							else if(stay!= null && episode.getWardStays().size() > 1)
							{
								sortWardStays = episode.getWardStays().sort(new wardStayComparator());
								if(stay.getTransferOutDateTimeIsNotNull() && 
										((sortWardStays.get(0) != null && stay.getTransferOutDateTime().equals(sortWardStays.get(0).getTransferOutDateTime()))
										|| (stay.getTransferOutDateTime().isGreaterOrEqualThan(episode.getDischargeDateTime()))))
									episode.setDischargingWard(stay.getWard());
								
								if(stay.getTransferOutDateTimeIsNotNull()&& sortWardStays.get(sortWardStays.size()-1) != null && stay.getTransferOutDateTime().equals(sortWardStays.get(sortWardStays.size()-1).getTransferOutDateTime()))
								{
									LocationLiteVo firstAdmisionWard = stay.getWard();
									episode.setAdmissionWard(firstAdmisionWard);
									episode.getPasEvent().setLocation(firstAdmisionWard);
								}
							}

						}
						//episode.setDischargingWard(getDischargingWard(episode,stay,isTheMostRecentStay));
						if(form.ctn1().grdWardTransfersGrid().getSelectedRowIndex()==0) //update ward
						{
							episode.getPasEvent().setLocation(stay.getWard());
						}
						if(form.ctn1().grdWardTransfersGrid().getSelectedRowIndex()==form.ctn1().grdWardTransfersGrid().getRows().size()-1 //update admission date Time
								&&stay!=null&&stay.getTransferDateTime()!=null)
						{
							episode.getPasEvent().setEventDateTime(stay.getTransferDateTime());
						}						
						try 
						{
							form.getLocalContext().setselectedDischargedEpisode(domain.saveDischargedEpisode(episode,null));
							open();
						} 
						catch (StaleObjectException e)
						{
							e.printStackTrace();
							engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
							open();
							return;
						}
					}
				}
				else if( CONSULTANT == form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getAction() )
				{
					grdConsultantTransfersGridRow row = form.ctn1().grdConsultantTransfersGrid().getSelectedRow();
					if(row==null)
						row = form.ctn1().grdConsultantTransfersGrid().getRows().newRow();
					ConsultantStayVo stay=row.getValue();
					if(stay==null)
						stay = new ConsultantStayVo();
					if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getConsultantIsNotNull())
					{
						row.setColumnConsultant(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getConsultant().getIMosName());
						stay.setConsultant(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getConsultant());
					}
					
					if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateFromIsNotNull())
					{
						row.setColumnDateFrom(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateFrom().getDate());
						stay.setTransferDateTime(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateFrom());
					}
					if( form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateToIsNotNull())
					{
						row.setColumnDateTo(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateTo().getDate());
						stay.setEndDateTime(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getDateTo());
					}
					if(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getSpecialtyIsNotNull())
					{
						row.setColSpeciality(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getSpecialty().getText());
						stay.setSpecialty(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getSpecialty());
					}
					if(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getServiceIsNotNull())
					{
						row.setColService(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getService().getServiceName());
						stay.setService(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getService());
					}
					if(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getCategoryIsNotNull())
					{
						row.setColumnCategory(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getCategory().getText());
						stay.setPatientStatus(form.getGlobalContext().Core.getWardConsultantSpecialtyTransferVo().getCategory());
					}

					
					
//					if(form.ctn1().grdWardTransfersGrid().getSelectedRowIndex()==0) //update consultant
					boolean updateConsultant = form.ctn1().grdConsultantTransfersGrid().getSelectedRowIndex()==0;	
					
					
					stay.setCodingStatus(CodingStatus.FORREVIEW);
					saveEpisode(stay,updateConsultant);
					open();
				}
			}
		}
	}
	
	private LocationLiteVo getDischargingWard(DischargedEpisodeMaintenanceVo episode, WardStayVo stay, boolean isTheMostRecentStay)
	{
		if (episode == null)			
			return null;
		
		LocationLiteVo dischargingWard = episode.getDischargingWard();
		LocationLiteVo newDischargingWard = null;
		if (stay.getID_WardStay() == null && stay.getTransferOutDateTimeIsNotNull() && stay.getTransferOutDateTime().isGreaterOrEqualThan(episode.getDischargeDateTime()))
			newDischargingWard = stay.getWard();
		else if (isTheMostRecentStay && stay.getTransferOutDateTimeIsNotNull() && stay.getTransferOutDateTime().isGreaterOrEqualThan(episode.getDischargeDateTime()))
			newDischargingWard = stay.getWard();
		
		return newDischargingWard != null ? newDischargingWard : dischargingWard;
	}

	//WDEV-22833
	private List<InpatientEpisodeMaintenanceActions> listDeniedActionForCurrentUser() 
	{
		List<InpatientEpisodeMaintenanceActions> deniedActions = new ArrayList<InpatientEpisodeMaintenanceActions>();
		
		AppFormForTrackingVo currentForm = domain.getFormMenuAction(engine.getFormName().getID());
		
		if(currentForm == null)
			return null;
		
		IAppRole role = engine.getLoggedInRole();
		
		if(role == null)
			return null;
		
		for(MenuActionVo menuAction : currentForm.getMenuActions())
		{
			if(menuAction == null)
				continue;
			
			if(!role.hasMenuActionRight(currentForm, menuAction))
			{
				InpatientEpisodeMaintenanceActions mappedAction = getMappedAction(menuAction);
				
				if(mappedAction != null)
				{
					deniedActions.add(mappedAction);
				}
			}
		}
		
		return deniedActions;
	}
	
	private boolean isDeniedAction(InpatientEpisodeMaintenanceActions episodeAction) 
	{
		if(episodeAction == null)
			return false;
		
		if(form.getLocalContext().getDeniedActions() == null || form.getLocalContext().getDeniedActions().size() == 0)
			return false;
		
		for(int i=0; i<form.getLocalContext().getDeniedActions().size(); i++)
		{
			if(episodeAction.equals(form.getLocalContext().getDeniedActions().get(i)))
				return true;
		}
		
		return false;
	}
	
	private InpatientEpisodeMaintenanceActions getMappedAction(MenuActionVo menuAction) 
	{
		if(menuAction == null || menuAction.getID_MenuAction() == null)
			return null;
		
		if(RIE_EPISODE == menuAction.getID_MenuAction())
			return InpatientEpisodeMaintenanceActions.RIE;
		else if(CANCEL_DISCHARGE == menuAction.getID_MenuAction()) //WDEV-22925
			return InpatientEpisodeMaintenanceActions.CANCEL_DISCHARGE;
		else if(RIE_WARD_STAY == menuAction.getID_MenuAction())////WDEV-22958
			return InpatientEpisodeMaintenanceActions.RIE_WARD_STAY;
		else if(RIE_CONSULTANT_STAY == menuAction.getID_MenuAction())
			return InpatientEpisodeMaintenanceActions.RIE_CONSULTANT_STAY;//WDEV-22958 end
		//WDEV-22958 end
		return null;
	}
	//end WDEV-22833
	
	private void saveEpisode(ConsultantStayVo stay,boolean updateConsultant) throws PresentationLogicException{
		if(form.grdCurrentAdmissionDetails().getSelectedRow()!=null)
		{
			InpatientEpisodeMaintenanceVo episode = form.grdCurrentAdmissionDetails().getSelectedRow().getValue();
			if(stay!=null)
			{
				episode.getConsultantStays().add(stay);
				if(episode.getPasEventIsNotNull()&&updateConsultant)
				{
					MedicWithMappingsLiteVo medic=domain.getMedicWithMappingsLiteVoFromIMos(stay.getConsultant());
					episode.getPasEvent().setConsultant(medic);
					episode.setConsultantHcpRef(medic);
				}
			}
			try {
				domain.saveAdmissionDetails(episode);
				open();
			} catch (StaleObjectException e) {
				e.printStackTrace();
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
		}
		else if(form.grdHistoricalInpatientEpisodes().getSelectedRow()!=null)
		{
			DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getSelectedRow().getValue();
			if(stay!=null)
			{
				episode.getConsultantStays().add(stay);
				if(episode.getPasEventIsNotNull()&&updateConsultant)
				{
					MedicWithMappingsLiteVo medic=domain.getMedicWithMappingsLiteVoFromIMos(stay.getConsultant());
					episode.getPasEvent().setConsultant(medic);
				}
			}
			try {
				form.getLocalContext().setselectedDischargedEpisode(domain.saveDischargedEpisode(episode,null));
				open();
			} catch (StaleObjectException e) {
				e.printStackTrace();
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
		}
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.WardTransferForInpatientEpisodeMaintenance.ADD:
				onBtnAddWardTransferClick();
			break;
			case GenForm.ContextMenus.CoreNamespace.WardTransferForInpatientEpisodeMaintenance.EDIT:
				onBtnEditWardTransferClick();
			break;
			case GenForm.ContextMenus.CoreNamespace.WardTransferForInpatientEpisodeMaintenance.RIE:
				onBtnRIEWardTransferClick();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.ConsultantTransferForInpatientEpisodeMaintenance.ADD:
				onBtnAddConsultantTransferClick();
			break;
			case GenForm.ContextMenus.CoreNamespace.ConsultantTransferForInpatientEpisodeMaintenance.EDIT:
				onBtnEditConsultantTransferClick();
			break;
			case GenForm.ContextMenus.CoreNamespace.ConsultantTransferForInpatientEpisodeMaintenance.RIE:
				onBtnRIEConsultantTransferClick();
			break;
			
			
		
		}
	}
	private void open()throws PresentationLogicException
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			form.setMode(FormMode.VIEW);			
			enableCurrentInpatientEpisodesActions(false);
			enableHistoricalInpatientEpisodesActions(false);
			form.btnAddHistoricalInpatientEpisodes().setEnabled(true);
			PatientRefVo patient = form.getGlobalContext().Core.getPatientShort();
			InpatientMaintenanceSummaryVo summary = domain.summary(patient);
			if(summary!=null)
			{
				populateCurrentAdmissionDetailsGrid(summary.getCurrentInpatientEpisode());
				populateHistoricalInpatientEpisodesGrid(summary.getDischargedEpisodes().sort(new dateDischargedEpisodeMaintenanceVoComparator()));
			}
			updateContextMenus();
			clearAdmissionDetailsPanelValues();
			setAdmissionDetailsPanelRW(false,EpisodeType.ADMISSION);
			clearDischargeDetailsPanelValues();
			setDischargeDetailsPanelRW(false);
			form.grdCurrentAdmissionDetails().setEnabled(true);
			form.grdHistoricalInpatientEpisodes().setEnabled(true);
			form.ctn1().grdWardTransfersGrid().getRows().clear();
			form.ctn1().grdConsultantTransfersGrid().getRows().clear();
			if(form.getLocalContext().getselectedDischargedEpisodeIsNotNull())
			{
				form.grdHistoricalInpatientEpisodes().setValue(form.getLocalContext().getselectedDischargedEpisode());
				OnHistoricDetailsSelectionChanged();
			}
			
			
			
//			if(form.getLocalContext().getSelectedDischargedEpisodeRowIsNotNull())
//			{
//				Integer selectedRow = form.getLocalContext().getSelectedDischargedEpisodeRow();
//				if(form.getLocalContext().getSelectedDischargedEpisodeRowIsNotNull()
//						&&form.grdHistoricalInpatientEpisodes().getRows().size()>0)
//				{
//					form.grdHistoricalInpatientEpisodes().setValue(form.grdHistoricalInpatientEpisodes().getRows().get(selectedRow).getValue());
//					OnHistoricDetailsSelectionChanged();
//				}
//			}
			if(form.getLocalContext().getSelectedInpatientEpisodeIsNotNull()
					&&form.getLocalContext().getSelectedInpatientEpisode())
			{
				if(form.grdCurrentAdmissionDetails().getRows().size()>0)
				{
					form.grdCurrentAdmissionDetails().setValue(form.grdCurrentAdmissionDetails().getRows().get(0).getValue());
					OnCurrentDetailsSelectionChanged();
				}
			}	
			//WDEV-22833
			form.btnRieHistoricaInpatientEpisodes().setVisible(FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InpatientEpisodeMaintenanceActions.RIE));
			form.btnCancelDischarge().setVisible(FormMode.VIEW.equals(form.getMode()) && !isDeniedAction(InpatientEpisodeMaintenanceActions.CANCEL_DISCHARGE)); //WDEV-22925
		}
	}
	private void setDischargeDetailsPanelRW(boolean value)
	{
		form.ctn1().cmbMethodOfDischarge().setEnabled(value);
		form.ctn1().cmbDischargeDestination().setEnabled(value);
		form.ctn1().dtimActualDischarge().setEnabled(value);
		form.ctn1().chkTreatmentDefferred().setEnabled(value);
		form.ctn1().cmbTreatmentDeferredReason().setEnabled(false);
		form.ctn1().cmbTreatmentDeferredReason().setRequired(Boolean.TRUE.equals(form.ctn1().chkTreatmentDefferred().getValue()));//WDEV-23088
		form.ctn1().btnDischargeDetailsSave().setVisible(value);
		form.ctn1().btnDischargeDetailsCancel().setVisible(value);
		form.ctn1().btnEditDischDet().setVisible(!value && form.grdHistoricalInpatientEpisodes().getValue() != null);
	}
	private void setAdmissionDetailsPanelRW(boolean value,EpisodeType episodeType)
	{
		form.ctn1().cmbAdmissionType().setEnabled(value);
		form.ctn1().cmbHospital().setEnabled(value);
		form.ctn1().cmbWard().setEnabled(value);
		form.ctn1().cmbWardType().setEnabled(value);
		form.ctn1().ccConsultant().setEnabled(value);
		form.ctn1().cmbSpecialty().setEnabled(value);
		form.ctn1().cmbService().setEnabled(value);
		form.ctn1().cmbSourceOfAdmission().setEnabled(value);
		form.ctn1().cmbMethodOfAdmission().setEnabled(value);
		form.ctn1().dtimAdmission().setEnabled(value);
		form.ctn1().dtimEstDischargeDate().setEnabled(value);
		form.ctn1().chkChaplain().setEnabled(value);
		form.ctn1().chkMaternity().setEnabled(value);
		//form.ctn1().txtReasonForAdmission().setEnabled(value);
		form.ctn1().cmbSourceOfReferral().setEnabled(value);
		form.ctn1().cmbSourceofEmerReferrral().setEnabled(value);
		form.ctn1().ccReferringConsultant().setEnabled(false);
		form.ctn1().cmbPatientCategory().setEnabled(value);
		if(episodeType==EpisodeType.ADMISSION)
		{
			form.ctn1().btnAdmissionDetailsSave().setVisible(false);
			form.ctn1().btnAdmissionDetailsCancel().setVisible(false);
			form.ctn1().btnEditAdmissionDetails().setVisible(false);
		}
		else if(episodeType==EpisodeType.DISCHARGE)
		{
			form.ctn1().btnAdmissionDetailsSave().setVisible(false);
			form.ctn1().btnAdmissionDetailsCancel().setVisible(false);
			form.ctn1().btnEditAdmissionDetails().setVisible(false);

		}
	}

	private void clearDischargeDetailsPanelValues()
	{
		form.ctn1().cmbMethodOfDischarge().setValue(null);
		form.ctn1().cmbDischargeDestination().setValue(null);
		form.ctn1().dtimActualDischarge().setValue(null);
		form.ctn1().chkTreatmentDefferred().setValue(null);
		form.ctn1().cmbTreatmentDeferredReason().setValue(null);
	}
	private void clearAdmissionDetailsPanelValues()
	{
		form.ctn1().cmbAdmissionType().setValue(null);
		form.ctn1().cmbHospital().setValue(null);
		form.ctn1().cmbWard().clear();
		form.ctn1().cmbWardType().setValue(null);
		form.ctn1().ccConsultant().setValue(null);
		form.ctn1().cmbSpecialty().clear();
		form.ctn1().cmbService().setValue(null);
		form.ctn1().cmbSourceOfAdmission().setValue(null);
		form.ctn1().cmbMethodOfAdmission().setValue(null);
		form.ctn1().dtimAdmission().setValue(null);
		form.ctn1().dtimEstDischargeDate().setValue(null);
		form.ctn1().chkChaplain().setValue(null);
		form.ctn1().chkMaternity().setValue(null);
		form.ctn1().txtReasonForAdmission().setValue(null);
		form.ctn1().cmbSourceOfReferral().setValue(null);
		form.ctn1().cmbSourceofEmerReferrral().setValue(null);
		form.ctn1().ccReferringConsultant().setValue(null);
		form.ctn1().cmbPatientCategory().setValue(null);
		form.ctn1().grdWardTransfersGrid().getRows().clear();
		form.ctn1().grdConsultantTransfersGrid().getRows().clear();
		form.ctn1().btnEditAdmissionDetails().setVisible(false);
		enableStays(false);		
		form.ctn1().btnEditDischDet().setVisible(false);
	}

	//WDEV-22880  //WDEV-22877 
	private void populateAdmissionDetailsPanelFromPasEvent(PasEventVo pasEvent, WardStayVo admissionWardStay, LocationLiteVo admittingWard) 
	{
		if(pasEvent != null)
		{
			if(pasEvent.getEventTypeIsNotNull())
			{
				form.ctn1().cmbAdmissionType().setValue(pasEvent.getEventType());
//				if(PasEventType.EMERGENCY.getID()==pasEvent.getEventType().getID())
//				{
//					form.ctn1().btnEditAdmissionDetails().setEnabled(true);
//				}else
//				{
					form.ctn1().btnEditAdmissionDetails().setEnabled(false);
//				}
			}
			if(pasEvent.getConsultantIsNotNull())
			{
				form.ctn1().ccConsultant().setValue(pasEvent.getConsultant().getMos());
			}
			if (admittingWard != null)
			{
				form.ctn1().cmbWard().newRow(admittingWard, admittingWard.getName());
				form.ctn1().cmbWard().setValue(admittingWard);
				
				LocationLiteVo parentHosp = domain.getHospitalForLocation(admittingWard);//WDEV-23057
				if (parentHosp != null && !form.ctn1().cmbHospital().getValues().contains(parentHosp))
					form.ctn1().cmbHospital().newRow(parentHosp, parentHosp.getName());
				form.ctn1().cmbHospital().setValue(parentHosp);
			}
			else if (pasEvent.getLocationIsNotNull())
			{
				form.ctn1().cmbWard().newRow(pasEvent.getLocation(), pasEvent.getLocation().getName());
				form.ctn1().cmbWard().setValue(pasEvent.getLocation());
				
				LocationLiteVo parentHosp = domain.getHospitalForLocation(pasEvent.getLocation());
				if (parentHosp != null && !form.ctn1().cmbHospital().getValues().contains(parentHosp))
					form.ctn1().cmbHospital().newRow(parentHosp, parentHosp.getName());
				form.ctn1().cmbHospital().setValue(parentHosp);

			}
			
			if (admissionWardStay != null)
			{				
				if (admissionWardStay.getServiceIsNotNull())
				{
					if (!form.ctn1().cmbService().getValues().contains(admissionWardStay.getService()))
						form.ctn1().cmbService().newRow(admissionWardStay.getService(), admissionWardStay.getService().getServiceName());
					form.ctn1().cmbService().setValue(admissionWardStay.getService());
					if (admissionWardStay.getService().getSpecialtyIsNotNull())
					{
						if (!form.ctn1().cmbSpecialty().getValues().contains(admissionWardStay.getService().getSpecialty()))
							form.ctn1().cmbSpecialty().newRow(admissionWardStay.getService().getSpecialty(), admissionWardStay.getService().getSpecialty().getText());
						form.ctn1().cmbSpecialty().setValue(admissionWardStay.getService().getSpecialty());
					}
				}
			}
			else
			{
				if (pasEvent.getSpecialtyIsNotNull())
				{
					if (!form.ctn1().cmbSpecialty().getValues().contains(pasEvent.getSpecialty()))
						form.ctn1().cmbSpecialty().newRow(pasEvent.getSpecialty(), pasEvent.getSpecialty().getText());
					form.ctn1().cmbSpecialty().setValue(pasEvent.getSpecialty());
				}

				if (pasEvent.getServiceIsNotNull())
				{
					if (!form.ctn1().cmbService().getValues().contains(pasEvent.getService()))
						form.ctn1().cmbService().newRow(pasEvent.getService(), pasEvent.getService().getServiceName());
					form.ctn1().cmbService().setValue(pasEvent.getService());
				}
			}
			if (pasEvent.getSourceOfReferralIsNotNull())
				form.ctn1().cmbSourceOfReferral().setValue(pasEvent.getSourceOfReferral());
		}
	}
	

	
	private void enableStays(boolean value)
	{
		form.getContextMenus().Core.hideAllConsultantTransferForInpatientEpisodeMaintenanceMenuItems();
		form.getContextMenus().Core.hideAllWardTransferForInpatientEpisodeMaintenanceMenuItems();
		form.ctn1().btnAddConsultantTransfer().setVisible(false);
		form.ctn1().btnAddWardTransfer().setVisible(false);
		form.ctn1().btnEditWardTransfer().setVisible(false);
		form.ctn1().btnRIEWardTransfer().setVisible(false);
		form.ctn1().btnEditConsultantTransfer().setVisible(false);
		form.ctn1().btnRIEConsultantTransfer().setVisible(false);	
		
		form.ctn1().grdWardTransfersGrid().setEnabled(FormMode.VIEW.equals(form.getMode()));
		form.ctn1().grdConsultantTransfersGrid().setEnabled(FormMode.VIEW.equals(form.getMode()));
		
		if (form.grdCurrentAdmissionDetails().getValue() !=null)
			return;
		
		form.ctn1().btnAddConsultantTransfer().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdHistoricalInpatientEpisodes().getValue() != null);
		form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceADDItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdHistoricalInpatientEpisodes().getValue() != null);
		if (form.ctn1().grdConsultantTransfersGrid().getValue() != null)
		{	
			form.ctn1().btnEditConsultantTransfer().setVisible(value);
			form.ctn1().btnRIEConsultantTransfer().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsRieConsultantStayDenied()) && value);	
			form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceEDITItem().setVisible(value);
			form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceRIEItem().setVisible(value);
		}

		form.ctn1().btnAddWardTransfer().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdHistoricalInpatientEpisodes().getValue() != null);
		form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceADDItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdHistoricalInpatientEpisodes().getValue() != null);
		if (form.ctn1().grdWardTransfersGrid().getValue() != null)
		{	
			form.ctn1().btnEditWardTransfer().setVisible(value);
			form.ctn1().btnRIEWardTransfer().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsRieWardStayDenied()) && value);
			form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceEDITItem().setVisible(value);
			form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceRIEItem().setVisible(value);
		}
	}
	
	private void allowEditEmergencyAdmission()
	{
		form.setMode(FormMode.EDIT);
		form.ctn1().cmbSourceOfAdmission().setEnabled(true);
		form.ctn1().cmbMethodOfAdmission().setEnabled(true);
//		form.ctn1().dtimAdmission().setEnabled(true);
//		form.ctn1().dteEstDischargeDate().setEnabled(true);
//		form.ctn1().chkChaplain().setEnabled(true);
//		form.ctn1().chkMaternity().setEnabled(true);
		//form.ctn1().txtReasonForAdmission().setEnabled(true);
		form.ctn1().cmbSourceOfReferral().setEnabled(true);
		if(form.ctn1().cmbSourceOfAdmission().getValue()!=null
				&&SourceOfReferral.CONSULTANT.getID()==  form.ctn1().cmbSourceOfAdmission().getValue().getID())
		{
			form.ctn1().ccReferringConsultant().setEnabled(true);
		}
		form.ctn1().btnAdmissionDetailsSave().setVisible(true);
		form.ctn1().btnAdmissionDetailsCancel().setVisible(true);
		form.ctn1().btnEditAdmissionDetails().setVisible(false);
		enableStayButtons(false);		
	}
	
	private void enableStayButtons(boolean enable)
	{
		form.getContextMenus().Core.hideAllConsultantTransferForInpatientEpisodeMaintenanceMenuItems();
		form.getContextMenus().Core.hideAllWardTransferForInpatientEpisodeMaintenanceMenuItems();
				
		form.ctn1().btnAddConsultantTransfer().setVisible(false);
		form.ctn1().btnAddWardTransfer().setVisible(false);
		form.ctn1().btnEditWardTransfer().setVisible(false);
		form.ctn1().btnRIEWardTransfer().setVisible(false);
		form.ctn1().btnEditConsultantTransfer().setVisible(false);
		form.ctn1().btnRIEConsultantTransfer().setVisible(false);	
		
		if (form.grdCurrentAdmissionDetails().getValue() != null)
			return;
		
		form.ctn1().btnAddConsultantTransfer().setVisible(enable && form.grdHistoricalInpatientEpisodes().getValue() != null);
		form.ctn1().btnAddWardTransfer().setVisible(enable && form.grdHistoricalInpatientEpisodes().getValue() != null);
				
		form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceADDItem().setVisible(enable && form.grdHistoricalInpatientEpisodes().getValue() != null);
		form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceADDItem().setVisible(enable && form.grdHistoricalInpatientEpisodes().getValue() != null);
				
		if (form.ctn1().grdConsultantTransfersGrid().getValue() != null)
		{		
			form.ctn1().btnEditConsultantTransfer().setVisible(enable);				
			form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceEDITItem().setVisible(enable);
			form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceRIEItem().setVisible(enable);
			form.ctn1().btnRIEConsultantTransfer().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsRieConsultantStayDenied()) && enable);
			form.ctn1().btnEditConsultantTransfer().setVisible(enable);
		}

		if (form.ctn1().grdWardTransfersGrid().getValue() != null)
		{	
			form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceEDITItem().setVisible(enable);
			form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceRIEItem().setVisible(enable);
			form.ctn1().btnEditWardTransfer().setVisible(enable);
			form.ctn1().btnRIEWardTransfer().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getIsRieWardStayDenied()) && enable);
		}

	}
	
	
	
	private void populateCurrentAdmissionDetailsGrid(InpatientEpisodeMaintenanceVo episode)
	{
		form.grdCurrentAdmissionDetails().getRows().clear();
		if(episode!=null)
		{
			grdCurrentAdmissionDetailsRow row = form.grdCurrentAdmissionDetails().getRows().newRow();
			if(episode.getPasEventIsNotNull())
			{
				if(episode.getPasEvent().getEventDateTimeIsNotNull())
				{
					row.setColumnAdmDate(episode.getPasEvent().getEventDateTime().getDate());
				}
				if(episode.getPasEvent().getLocationIsNotNull())
				{
					row.setColumnCurrentWard(episode.getPasEvent().getLocation().getName());
					row.setCellColumnCurrentWardTooltip(episode.getPasEvent().getLocation().getName());//WDEV-22948
				}
				if(episode.getPasEvent().getSpecialtyIsNotNull())
				{
					row.setColumnSpecialty(episode.getPasEvent().getSpecialty().getText());
					row.setCellColumnSpecialtyTooltip(episode.getPasEvent().getSpecialty().getText());//WDEV-22948
				}
				if(episode.getPasEvent().getConsultantIsNotNull())
				{
					row.setColumnRespHcp(episode.getPasEvent().getConsultant().getName().toStringSurnameFirst());
					row.setCellColumnRespHcpTooltip(episode.getPasEvent().getConsultant().getName().toStringSurnameFirst());//WDEV-22948
				}
				if(episode.getEstDischargeDateIsNotNull())
				{
					row.setColumnEstDischarge(episode.getEstDischargeDate().getDate());
				}
			}
			row.setValue(episode);
		}
		
		
		
		
	}
	private void populateHistoricalInpatientEpisodesGrid(DischargedEpisodeMaintenanceVoCollection episodes)
	{
		if(episodes!=null)
		{
			form.grdHistoricalInpatientEpisodes().getRows().clear();
			for (DischargedEpisodeMaintenanceVo episode : episodes)
			{
				grdHistoricalInpatientEpisodesRow row = form.grdHistoricalInpatientEpisodes().getRows().newRow();
				populateRowFromEpisode(row,episode);
			}
		}
	}
	
	private void populateRowFromEpisode(grdHistoricalInpatientEpisodesRow row, DischargedEpisodeMaintenanceVo episode)
	{
		if(episode!=null)
		{
			if(episode.getPasEventIsNotNull())
			{
				if(episode.getPasEvent().getEventDateTimeIsNotNull())
				{
					row.setColumnAdmDate(episode.getPasEvent().getEventDateTime().getDate());
				}				
				if(episode.getPasEvent().getSpecialtyIsNotNull())
				{
					row.setColumnSpecialty(episode.getPasEvent().getSpecialty().getText());
					row.setCellColumnSpecialtyTooltip(episode.getPasEvent().getSpecialty().getText());//WDEV-22948
				}
				if(episode.getPasEvent().getConsultantIsNotNull())
				{
					row.setColumnRespHcp(episode.getPasEvent().getConsultant().getMos().getName().toStringSurnameFirst());
					row.setCellColumnRespHcpTooltip(episode.getPasEvent().getConsultant().getMos().getName().toStringSurnameFirst());//WDEV-22948
				}
			}
			if(episode.getDischargeDateTimeIsNotNull())
			{
				row.setColumnDischDate(episode.getDischargeDateTime().getDate());
			}
			//WDEV-22959
			if(episode.getDischargingWardIsNotNull())
			{
				row.setColumnDischargingWard(episode.getDischargingWard().getName());
				row.setCellColumnDischargingWardTooltip(episode.getDischargingWard().getName());//WDEV-22948
			}
			row.setValue(episode);
		}
	}
	
	
	
	private void updateContextMenus()
	{
		form.getContextMenus().Core.hideAllConsultantTransferForInpatientEpisodeMaintenanceMenuItems();
		form.getContextMenus().Core.hideAllWardTransferForInpatientEpisodeMaintenanceMenuItems();
		
		if (FormMode.EDIT.equals(form.getMode()) || form.grdCurrentAdmissionDetails().getValue() != null)
			return;
		
		form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceADDItem().setVisible(true);
		if (form.ctn1().grdWardTransfersGrid().getValue() != null)
		{	
			form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceEDITItem().setVisible(true);
			form.getContextMenus().Core.getWardTransferForInpatientEpisodeMaintenanceRIEItem().setVisible(true);
		}
		form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceADDItem().setVisible(true);
		if (form.ctn1().grdConsultantTransfersGrid().getValue() != null)
		{		
			form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceEDITItem().setVisible(true);
			form.getContextMenus().Core.getConsultantTransferForInpatientEpisodeMaintenanceRIEItem().setVisible(true);
		}	
	}


	
	protected void onBtnRIEConsultantTransferClick() throws PresentationLogicException
	{
		if(form.ctn1().grdConsultantTransfersGrid().getSelectedRow()==null)
		{
			engine.showMessage("Please select a Stay to RIE.");
			return;
		}
		if(form.ctn1().grdConsultantTransfersGrid().getSelectedRowIndex()==0)
		{
			engine.showMessage("Most recent stay cannot be RIE'ed");
			return;
		}
		form.getLocalContext().setRieConsultantStayMessageBoxID(engine.showMessage("Are you sure you want to RIE this stay?", "" , MessageButtons.YESNO, MessageIcon.QUESTION));
//		rieConsultantStay();
	}

	private void rieConsultantStay() throws PresentationLogicException {
		ConsultantStayVo consultantStay = form.ctn1().grdConsultantTransfersGrid().getValue();
		try {
			domain.rIEConsultantStay(consultantStay, form.grdHistoricalInpatientEpisodes().getValue());
		} catch (StaleObjectException e) {
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		open();
	}

	protected void onBtnEditConsultantTransferClick() throws PresentationLogicException
	{
		if(form.ctn1().grdConsultantTransfersGrid().getSelectedRow()==null)
		{
			engine.showMessage("Please select a Stay to Edit.");
			return;
		}
		ConsultantStayVo consultantStay = form.ctn1().grdConsultantTransfersGrid().getValue();
		boolean isDischargedEpisodeSelected = form.grdHistoricalInpatientEpisodes().getValue() != null; //WDEV-23203
		engine.open(form.getForms().Core.WardConsultantSpecialtyTransferDlg, new Object[]{WardConsultationSpecialtyTransfer.CONSULTATION,consultantStay,getConsultantStays(), isDischargedEpisodeSelected},"Edit Consultant Stay"); //WDEV-23203
		
	}

	
	protected void onBtnAddConsultantTransferClick() throws PresentationLogicException
	{
		form.ctn1().grdConsultantTransfersGrid().setValue(null);
		boolean isDischargedEpisodeSelected = form.grdHistoricalInpatientEpisodes().getValue() != null; //WDEV-23203
		engine.open(form.getForms().Core.WardConsultantSpecialtyTransferDlg, new Object[]{WardConsultationSpecialtyTransfer.CONSULTATION,null,getConsultantStays(), isDischargedEpisodeSelected},"Add Consultant Stay"); //WDEV-23203
	}

	
	protected void onBtnRIEWardTransferClick() throws PresentationLogicException
	{
		if(form.ctn1().grdWardTransfersGrid().getSelectedRow()==null)
		{
			engine.showMessage("Please select a Stay to RIE.");
			return;
		}
		if(form.ctn1().grdWardTransfersGrid().getSelectedRowIndex()==0)
		{
			engine.showMessage("Most recent stay cannot be RIE'ed");
			return;
		}
		form.getLocalContext().setRieWardStayMessageBoxID(engine.showMessage("Are you sure you want to RIE this stay?", "" , MessageButtons.YESNO, MessageIcon.QUESTION));
//		rieWardStay();
	}

	private void rieWardStay() throws PresentationLogicException{
		WardStayVo stay = form.ctn1().grdWardTransfersGrid().getValue();
		try {
			domain.rIEWardStay(stay);
		} catch (StaleObjectException e) {
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		open();
	}

	
	protected void onBtnEditWardTransferClick() throws PresentationLogicException
	{
		if(form.ctn1().grdWardTransfersGrid().getSelectedRow()==null)
		{
			engine.showMessage("Please select a Stay to Edit.");
			return;
		}
		WardStayVo stay = form.ctn1().grdWardTransfersGrid().getValue();		
		boolean isDischargedEpisodeSelected = form.grdHistoricalInpatientEpisodes().getValue() != null;
		engine.open(form.getForms().Core.WardConsultantSpecialtyTransferDlg, new Object[]{WardConsultationSpecialtyTransfer.WARD,stay,getWardStays(), isDischargedEpisodeSelected},"Edit Ward Stay"); //WDEV-23203
	}

	
	protected void onBtnAddWardTransferClick() throws PresentationLogicException
	{
		form.ctn1().grdWardTransfersGrid().setValue(null);
		boolean isDischargedEpisodeSelected = form.grdHistoricalInpatientEpisodes().getValue() != null;
		DateTime admissionDateTime = form.ctn1().dtimAdmission().getValue();
		engine.open(form.getForms().Core.WardConsultantSpecialtyTransferDlg, new Object[]{WardConsultationSpecialtyTransfer.WARD,null,getWardStays(),isDischargedEpisodeSelected,admissionDateTime},"Add Ward Stay");
	}

	protected void OnHistoricDetailsSelectionChanged()throws PresentationLogicException
	{
		form.getLocalContext().setSelectedDischargedEpisodeRow(null);
		form.getLocalContext().setselectedDischargedEpisode(null);
		form.getLocalContext().setSelectedInpatientEpisode(null);
		form.grdCurrentAdmissionDetails().setValue(null);
		clearAdmissionDetailsPanelValues();
		clearDischargeDetailsPanelValues();
		form.ctn1().grdWardTransfersGrid().getRows().clear();
		form.ctn1().grdConsultantTransfersGrid().getRows().clear();
		enableHistoricalInpatientEpisodesActions(false);
		enableCurrentInpatientEpisodesActions(false);
		if(form.grdHistoricalInpatientEpisodes().getSelectedRow()!=null)
		{
		loadHospitals();
		populateWardCombo(form.ctn1().cmbHospital().getValue());
		populateAllServices();
		enableStays(true);
		bindTreatmentDiagnosisDereferredReason(domain.listCancellationTypeReason());
		DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getSelectedRow().getValue();
		form.getLocalContext().setSelectedDischargedEpisodeRow(form.grdHistoricalInpatientEpisodes().getSelectedRowIndex());
		form.getLocalContext().setselectedDischargedEpisode(form.grdHistoricalInpatientEpisodes().getValue());		
		//WDEV-22877
		if (episode != null)
		{
			//WDEV-22877
			WardStayVo admissionWardStay = getAdmissionWardStay(episode.getAdmissionDateTime(), episode.getWardStays());
			populateAdmissionDetailsPanelFromPasEvent(episode.getPasEvent(),admissionWardStay,episode.getAdmissionWard());
			enableHistoricalInpatientEpisodesActions(true);
			if(episode.getWardTypeIsNotNull())
				form.ctn1().cmbWardType().setValue(episode.getWardType());
			if(episode.getSourceOfAdmissionIsNotNull())
				form.ctn1().cmbSourceOfAdmission().setValue(episode.getSourceOfAdmission());
			if(episode.getMethodOfAdmissionIsNotNull())
				form.ctn1().cmbMethodOfAdmission().setValue(episode.getMethodOfAdmission());
			if(episode.getAdmissionDateTimeIsNotNull())
			{
				form.ctn1().dtimAdmission().setValue(episode.getAdmissionDateTime());
			}
			if(episode.getEstDischargeDateIsNotNull())
			{
				form.ctn1().dtimEstDischargeDate().setValue(episode.getEstDischargeDate());
			}
			if(episode.getReasonForAdmissionIsNotNull())
				form.ctn1().txtReasonForAdmission().setValue(episode.getReasonForAdmission());
			
			if(episode.getPasEventIsNotNull()&&episode.getPasEvent().getEventTypeIsNotNull())
			{
				form.ctn1().cmbAdmissionType().setValue(episode.getPasEvent().getEventType());
			}
			if(episode.getIsChaplainRequiredIsNotNull())
			{
				form.ctn1().chkChaplain().setValue(episode.getIsChaplainRequired());
			}
			
			if(episode.getPatientCategoryIsNotNull())
			{
				form.ctn1().cmbPatientCategory().setValue(episode.getPatientCategory());
			}
			
			if(episode.getReferringConsultantIsNotNull())
			{
				form.ctn1().ccReferringConsultant().setValue(episode.getReferringConsultant());
			}
			if(episode.getServiceIsNotNull())
			{
				form.ctn1().cmbService().setValue(episode.getService());
			}
			if(episode.getSourceOfEmergencyReferralIsNotNull())
			{
				form.ctn1().cmbSourceofEmerReferrral().setValue(episode.getSourceOfEmergencyReferral());
			}
			if(episode.getWardStaysIsNotNull())
			{
				WardStayVoCollection wardStays = episode.getWardStays().sort(new wardStayComparator());
				for (WardStayVo stay : wardStays)
				{
					grdWardTransfersGridRow row = form.ctn1().grdWardTransfersGrid().getRows().newRow();
					populateWardRowFromStay(row,stay);
				}
			}
			if(episode.getConsultantStaysIsNotNull())
			{
				ConsultantStayVoCollection consultantStays= episode.getConsultantStays().sort(new consultantStayComparator());
				for (ConsultantStayVo stay : consultantStays)
				{
					grdConsultantTransfersGridRow row = form.ctn1().grdConsultantTransfersGrid().getRows().newRow();
					populateConsultantRowFromStay(row,stay);
				}
			}
			populateDischargeDetails(episode);
			form.ctn1().btnEditAdmissionDetails().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdCurrentAdmissionDetails().getValue() != null);
			form.ctn1().btnEditDischDet().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.grdHistoricalInpatientEpisodes().getValue() != null);
		}
		}
	}
	
	private WardStayVo getAdmissionWardStay(DateTime admissionDate, WardStayVoCollection stays)
	{
		if (admissionDate == null || stays == null)
			return null;
		for (WardStayVo vo : stays)
		{
			if (admissionDate.equals(vo.getTransferDateTime()))
				return vo;
		}
		return null;
	}

	class wardStayComparator implements Comparator<WardStayVo> {
	    @Override
	    public int compare(WardStayVo a, WardStayVo b) {
	    	if(a!=null&&b!=null
	    			&&a.getTransferDateTime()!=null&&b.getTransferDateTime()!=null)
	    	{
		    		return a.getTransferDateTime().isGreaterThan( b.getTransferDateTime()) ? -1 : a.getTransferDateTime().equals(b.getTransferDateTime()) ? 0 : 1;
	    	}
    		return 0;
	    }
	}
	

	class consultantStayComparator implements Comparator<ConsultantStayVo> {
	    @Override
	    public int compare(ConsultantStayVo a, ConsultantStayVo b) {
	    	if(a!=null&&b!=null
	    			&&a.getTransferDateTime()!=null&&b.getTransferDateTime()!=null)
	    	{
		    		return a.getTransferDateTime().isGreaterThan( b.getTransferDateTime()) ? -1 : a.getTransferDateTime().equals(b.getTransferDateTime()) ? 0 : 1;
	    	}
    		return 0;
	    }
	}


	private void populateDischargeDetails(DischargedEpisodeMaintenanceVo episode)
	{
		if(episode!=null)
		{
			if(episode.getMethodOfDischargeIsNotNull())
			{
				form.ctn1().cmbMethodOfDischarge().setValue(episode.getMethodOfDischarge());
			}
			if(episode.getDischargeDestinationIsNotNull())
			{
				form.ctn1().cmbDischargeDestination().setValue(episode.getDischargeDestination());
			}
			if(episode.getDischargeDateTimeIsNotNull())
			{
				form.ctn1().dtimActualDischarge().setValue(episode.getDischargeDateTime());
			}
			if(episode.getWasTreatmentDeferredIsNotNull())
			{
				form.ctn1().chkTreatmentDefferred().setValue(episode.getWasTreatmentDeferred());
			}
			if(episode.getDeferredReasonIsNotNull())
			{
				form.ctn1().cmbTreatmentDeferredReason().setValue(domain.getDeferredReason(episode.getDeferredReason()));
			}
		}
	}

	private void enableHistoricalInpatientEpisodesActions(boolean value)
	{
		form.btnRieHistoricaInpatientEpisodes().setEnabled(value);
		form.btnAddHistoricalInpatientEpisodes().setEnabled(value);
		form.btnCancelDischarge().setEnabled(value);
		form.ctn1().btnEditDischDet().setVisible(value);
	}
	
	private void enableCurrentInpatientEpisodesActions(boolean value)
	{
		form.btnRieCurrentAdmissionDetails().setEnabled(value);		
	}
	
	protected void OnCurrentDetailsSelectionChanged()throws PresentationLogicException
	{
		form.getLocalContext().setSelectedInpatientEpisode(null);
		form.getLocalContext().setSelectedDischargedEpisodeRow(null);
		form.getLocalContext().setselectedDischargedEpisode(null);
		form.grdHistoricalInpatientEpisodes().setValue(null);
		form.ctn1().grdWardTransfersGrid().getRows().clear();
		form.ctn1().grdConsultantTransfersGrid().getRows().clear();
		clearAdmissionDetailsPanelValues();
		clearDischargeDetailsPanelValues();
		loadHospitals();
		populateWardCombo(form.ctn1().cmbHospital().getValue());
		populateAllServices();
		enableStays(false);
		enableHistoricalInpatientEpisodesActions(false);
		enableCurrentInpatientEpisodesActions(false);
		
		InpatientEpisodeMaintenanceVo episode = form.grdCurrentAdmissionDetails().getSelectedRow().getValue();
		if (episode != null)
		{
			//WDEV-22877
			WardStayVo admissionWardStay = getAdmissionWardStay(episode.getAdmissionDateTime(), episode.getWardStays());
			form.getLocalContext().setSelectedInpatientEpisode(true);
			enableCurrentInpatientEpisodesActions(true);
			populateAdmissionDetailsPanelFromPasEvent(episode.getPasEvent(), admissionWardStay, episode.getAdmissionWard());
			if(episode.getWardTypeIsNotNull())
				form.ctn1().cmbWardType().setValue(episode.getWardType());
			if(episode.getSourceOfAdmissionIsNotNull())
				form.ctn1().cmbSourceOfAdmission().setValue(episode.getSourceOfAdmission());
			if(episode.getMethodOfAdmissionIsNotNull())
				form.ctn1().cmbMethodOfAdmission().setValue(episode.getMethodOfAdmission());
			if(episode.getAdmissionDateTimeIsNotNull())
			{
				form.ctn1().dtimAdmission().setValue(episode.getAdmissionDateTime());
			}
			if(episode.getEstDischargeDateIsNotNull())
			{
				form.ctn1().dtimEstDischargeDate().setValue(episode.getEstDischargeDate());
			}
			if(episode.getReasonForAdmissionIsNotNull())
				form.ctn1().txtReasonForAdmission().setValue(episode.getReasonForAdmission());
			
			if(episode.getPasEventIsNotNull()&&episode.getPasEvent().getEventTypeIsNotNull())
			{
				form.ctn1().cmbAdmissionType().setValue(episode.getPasEvent().getEventType());
			}
			if(episode.getIsChaplainRequiredIsNotNull())
			{
				form.ctn1().chkChaplain().setValue(episode.getIsChaplainRequired());
			}
			if(episode.getIsMaternityInpatientIsNotNull())
			{
				form.ctn1().chkMaternity().setValue(episode.getIsMaternityInpatient());
			}
			if(episode.getPatientStatusIsNotNull())
			{
				form.ctn1().cmbPatientCategory().setValue(episode.getPatientStatus());
			}
			if(episode.getReferringConsultantIsNotNull())
			{
				form.ctn1().ccReferringConsultant().setValue(episode.getReferringConsultant().getMos());
			}
			if(episode.getServiceIsNotNull())
			{
				form.ctn1().cmbService().setValue(episode.getService());
			}
			if(episode.getSourceOfEmergencyReferral() != null)
			{
				form.ctn1().cmbSourceofEmerReferrral().setValue(episode.getSourceOfEmergencyReferral());
			}
			if(episode.getWardStaysIsNotNull())
			{
				WardStayVoCollection  sortedStays = episode.getWardStays().sort(new dateWardStayComparator());
				
				for (WardStayVo stay :sortedStays )
				{
					grdWardTransfersGridRow row = form.ctn1().grdWardTransfersGrid().getRows().newRow();
					populateWardRowFromStay(row,stay);
				}
			}
			if(episode.getConsultantStaysIsNotNull())
			{
				ConsultantStayVoCollection sortedStays = episode.getConsultantStays().sort(new dateConsultantStayComparator());
				for (ConsultantStayVo stay : sortedStays)
				{
					grdConsultantTransfersGridRow row = form.ctn1().grdConsultantTransfersGrid().getRows().newRow();
					populateConsultantRowFromStay(row,stay);
				}
			}
		}
	}
	
//	dateWardStayComparator
	class dateWardStayComparator implements Comparator<WardStayVo> {
	    @Override
	    public int compare(WardStayVo a, WardStayVo b) {
	    	if(a.getTransferDateTimeIsNotNull()&&b.getTransferDateTimeIsNotNull())
	    	{
	    		return a.getTransferDateTime().isGreaterThan( b.getTransferDateTime()) ? -1 : a.getTransferDateTime().equals(b.getTransferDateTime()) ? 0 : 1;
	    	}
	    	else
	    	{
	    		return 0;
	    	}
	    }
	}
	
//	dateConsultantStayComparator
	class dateConsultantStayComparator implements Comparator<ConsultantStayVo> {
	    @Override
	    public int compare(ConsultantStayVo a, ConsultantStayVo b) {
	    	if(a.getTransferDateTimeIsNotNull()&&b.getTransferDateTimeIsNotNull())
	    	{
	    		return a.getTransferDateTime().isGreaterThan( b.getTransferDateTime()) ? -1 : a.getTransferDateTime().equals(b.getTransferDateTime()) ? 0 : 1;
	    	}
	    	else
	    	{
	    		return 0;
	    	}
	    }
	}
	
	
//	DischargedEpisodeMaintenanceVo
	class dateDischargedEpisodeMaintenanceVoComparator implements Comparator<DischargedEpisodeMaintenanceVo> {
	    @Override
	    public int compare(DischargedEpisodeMaintenanceVo a, DischargedEpisodeMaintenanceVo b) {
	    	if(a.getDischargeDateTimeIsNotNull()&&b.getDischargeDateTimeIsNotNull())
	    	{
	    		return a.getDischargeDateTime().isGreaterThan( b.getDischargeDateTime()) ? -1 : a.getDischargeDateTime().equals(b.getDischargeDateTime()) ? 0 : 1;
	    	}
	    	else
	    	{
	    		return 0;
	    	}
	    }
	}
	
	
	
	
	
	private void populateConsultantRowFromStay(grdConsultantTransfersGridRow row, ConsultantStayVo stay)
	{
		if(stay!=null)
		{
			if(stay.getConsultantIsNotNull())
			{
				row.setColumnConsultant(stay.getConsultant().getIMosName());
				row.setCellColumnConsultantTooltip(stay.getConsultant().getIMosName());//WDEV-22948
			}
			if(stay.getTransferDateTimeIsNotNull())
			{
				row.setColumnDateFrom(stay.getTransferDateTime().getDate());
			}
			if(stay.getEndDateTimeIsNotNull())
			{
				row.setColumnDateTo(stay.getEndDateTime().getDate());
			}
			if(stay.getServiceIsNotNull())
			{
				row.setColService(stay.getService().getServiceName());
				row.setCellColServiceTooltip(stay.getService().getServiceName());//WDEV-22948
			}
			if(stay.getSpecialtyIsNotNull())
			{
				row.setColSpeciality(stay.getSpecialty().getText());
				row.setCellColSpecialityTooltip(stay.getSpecialty().getText());//WDEV-22948
			}
			if(stay.getPatientStatusIsNotNull())
			{
				row.setColumnCategory(stay.getPatientStatus().getText());
			}
			row.setValue(stay);
		}
	}
	
	
	private void populateWardRowFromStay(grdWardTransfersGridRow row,WardStayVo stay)
	{
		if(stay!=null)
		{
			if(stay.getWardIsNotNull())
			{
				row.setColumnWard(stay.getWard().getName());
				row.setCellColumnWardTooltip(stay.getWard().getName());//WDEV-22948
			}
			if(stay.getTransferDateTimeIsNotNull())
			{
				row.setColumnDateFrom(stay.getTransferDateTime().getDate());
			}
			if(stay.getTransferOutDateTimeIsNotNull())
			{
				row.setColumnDateTo(stay.getTransferOutDateTime().getDate());
			}
			if(stay.getPatientStatusIsNotNull())
			{
				row.setColumnPatientCategory(stay.getPatientStatus().getText());
			}
			if(stay.getServiceIsNotNull())
			{
				row.setColumnService(stay.getService().getServiceName());
				row.setCellColumnServiceTooltip(stay.getService().getServiceName());//WDEV-22948
			}
			row.setValue(stay);
		}
	}

	protected void onBtnEditAdmissionDetailsClick()	throws PresentationLogicException 
	{
//		setAdmissionDetailsPanelRW(true);
		allowEditEmergencyAdmission();
		
		
	}

	protected void OnBtnAdmissionDetailsCancel() throws PresentationLogicException {
		open();
		enableStayButtons(true);	
	}

	protected void OnBtnAdmissionDetailsSave() throws PresentationLogicException {
		setAdmissionDetailsPanelRW(false,EpisodeType.ADMISSION);
		if(form.grdCurrentAdmissionDetails().getSelectedRow()!=null&&form.grdCurrentAdmissionDetails().getSelectedRow().getValue()!=null)
		{
			InpatientEpisodeMaintenanceVo episode = form.grdCurrentAdmissionDetails().getSelectedRow().getValue();
			if(form.ctn1().cmbSourceOfAdmission()!=null)
				episode.setSourceOfAdmission(form.ctn1().cmbSourceOfAdmission().getValue());
			if(form.ctn1().cmbMethodOfAdmission()!=null)
				episode.setMethodOfAdmission(form.ctn1().cmbMethodOfAdmission().getValue());
			//episode.setReasonForAdmission(form.ctn1().txtReasonForAdmission().getValue());
			if(form.ctn1().cmbSourceOfReferral()!=null
				&&episode.getPasEvent()!=null)
			{
				episode.getPasEvent().setSourceOfReferral(form.ctn1().cmbSourceOfReferral().getValue());
			}
			if(form.ctn1().ccConsultant().getValue()!=null)
			{
				episode.setConsultantHcpRef(new MedicRefVo(form.ctn1().ccConsultant().getValue().getIMosId(),0));
			}
			if(form.ctn1().ccReferringConsultant().getValue()!=null)
			{
				episode.setReferringHcpRef(new MedicRefVo(form.ctn1().ccReferringConsultant().getValue().getIMosHcpId(),0));
			}
			try {
				domain.saveAdmissionDetails(episode);
				open();
			} catch (StaleObjectException e) {
				e.printStackTrace();
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			enableStayButtons(true);
		}
	}

	protected void OnBtnDischargeDetailsCancel() throws PresentationLogicException {
		open();
		enableStayButtons(true);		
	}
	
	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.ctn1().cmbAdmissionType().getValue()==null)
		{
			uiErrors.add("'Admission Type' is mandatory.");
		}
		if(form.ctn1().cmbHospital().getValue()==null)
		{
			uiErrors.add("'Hospital' is mandatory.");
		}
		if(form.ctn1().cmbWard().getValue()==null)
		{
			uiErrors.add("'Ward' is mandatory.");
		}
		if(form.ctn1().cmbWardType().getValue()==null)
		{
			uiErrors.add("'Ward Type' is mandatory.");
		}
		if(form.ctn1().cmbService().getValue()==null)
		{
			uiErrors.add("'Service' is mandatory.");
		}
		if(form.ctn1().cmbSpecialty().getValue()==null)
		{
			uiErrors.add("'Specialty' is mandatory.");
		}
		if(form.ctn1().ccConsultant().getValue()==null)
		{
			uiErrors.add("'Consultant' is mandatory.");
		}
		if(form.ctn1().cmbSourceOfAdmission().getValue()==null)
		{
			uiErrors.add("'Source of Admission' is mandatory.");
		}
		if(form.ctn1().cmbMethodOfAdmission().getValue()==null)
		{
			uiErrors.add("'Method of Admission' is mandatory.");
		}
		if(form.ctn1().dtimAdmission().getValue()==null)
		{
			uiErrors.add("'Admission Date / Time' is mandatory.");
		}
		if(form.ctn1().dtimEstDischargeDate().getValue()==null)
		{
			uiErrors.add("'Est. Discharge Date' is mandatory.");
		}
		if(form.ctn1().cmbPatientCategory().getValue()==null)
		{
			uiErrors.add("'Patient Category' is mandatory.");
		}
		if(Boolean.TRUE.equals(form.ctn1().chkTreatmentDefferred().getValue()) && form.ctn1().cmbTreatmentDeferredReason().getValue() == null)//WDEV-23088
			uiErrors.add("'Reason' is mandatory.");
			
		
		//WDEV-22857
		if (form.ctn1().dtimAdmission().getValue() != null && form.ctn1().dtimActualDischarge().getValue() != null && form.ctn1().dtimAdmission().getValue().isGreaterThan(form.ctn1().dtimActualDischarge().getValue()))
		{
			uiErrors.add("'Discharge Date/Time' cannot be earlier than 'Admission Date/Time'. ");
		}
		//WDEV-22857 ends here
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}
	
	
	protected void OnBtnDischargeDetailsSave() throws PresentationLogicException 
	{
		String[] errors = validateUIRules();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		DischargedEpisodeMaintenanceVo episode = null;
		
		boolean allFieldsEmpty = true;
		if(form.grdHistoricalInpatientEpisodes().getSelectedRow()!=null)
			episode = form.grdHistoricalInpatientEpisodes().getSelectedRow().getValue();
		if(episode==null)
		{
			episode= new DischargedEpisodeMaintenanceVo();
		}

		boolean treatmentDeferred_InitialValue = episode != null ? Boolean.TRUE.equals(episode.getWasTreatmentDeferred()) : false;
		
		
		PasEventVo pasEvent =null;
		if(episode.getPasEvent()==null)
		{
			pasEvent = new PasEventVo();
			pasEvent.setPasEventId(createPasEventID());
			episode.setPasEvent(pasEvent);
		}
		else
		{
			pasEvent=episode.getPasEvent();
		}
		pasEvent.setPatient(form.getGlobalContext().Core.getPatientShort());
		pasEvent.setEventType(form.ctn1().cmbAdmissionType().getValue());
		if(form.ctn1().cmbWard().getValue()!=null)
			allFieldsEmpty=false;
		pasEvent.setLocation(form.ctn1().cmbWard().getValue());
		//WDEV-22959 
		if (episode.getID_DischargedEpisode() == null)
		
			episode.setDischargingWard(form.ctn1().cmbWard().getValue());
		
		if(episode.getWardStaysIsNotNull() && episode.getWardStays().size()>0)
		{
			WardStayVoCollection sortWardsByDate = episode.getWardStays().sort(new wardStayComparator());
			WardStayVo wardStayVo = sortWardsByDate.get(sortWardsByDate.size()-1);
			wardStayVo.setWard(form.ctn1().cmbWard().getValue());	
			episode.getWardStays().add(wardStayVo);
		}
		
		
		episode.setAdmissionWard(form.ctn1().cmbWard().getValue());//WDEV-23057
		if(form.ctn1().ccConsultant().getValue()!=null)
			allFieldsEmpty=false;
		MedicVo medic = domain.getMedicVoFromIMos(form.ctn1().ccConsultant().getValue());
		if(form.ctn1().dtimAdmission().getValue()!=null)
			allFieldsEmpty=false;
		pasEvent.setEventDateTime(form.ctn1().dtimAdmission().getValue());
		if(form.ctn1().cmbSpecialty().getValue()!=null)
			allFieldsEmpty=false;
		pasEvent.setSpecialty(form.ctn1().cmbSpecialty().getValue());
		pasEvent.setSourceOfReferral(form.ctn1().cmbSourceOfReferral().getValue());
		pasEvent.setEventType(form.ctn1().cmbAdmissionType().getValue());
		if(form.ctn1().dtimActualDischarge().getValue()!=null)
			allFieldsEmpty=false;
		episode.setDischargeDateTime(form.ctn1().dtimActualDischarge().getValue());
		episode.setIsActive(true);
		episode.setDischargeDestination(form.ctn1().cmbDischargeDestination().getValue());
		episode.setMethodOfDischarge(form.ctn1().cmbMethodOfDischarge().getValue());

		episode.setDeferredReason(form.ctn1().cmbTreatmentDeferredReason().getValue() != null ? form.ctn1().cmbTreatmentDeferredReason().getValue().getCancellationReason() : null);
		episode.setDeferredReasonConfig(form.ctn1().cmbTreatmentDeferredReason().getValue());
		episode.setWasTreatmentDeferred(form.ctn1().chkTreatmentDefferred().getValue());

		
		InpatientEpisodeMaintenanceVo inPatDetails=null;
		inPatDetails = new InpatientEpisodeMaintenanceVo();
		
		inPatDetails.setWardType(form.ctn1().cmbWardType().getValue());
		if(medic!=null)
		{
			inPatDetails.setConsultantHcpRef(new MedicRefVo( medic.getIHcpId(),0));
		}
		inPatDetails.setService(form.ctn1().cmbService().getValue());
		inPatDetails.setSourceOfAdmission(form.ctn1().cmbSourceOfAdmission().getValue());
		inPatDetails.setMethodOfAdmission(form.ctn1().cmbMethodOfAdmission().getValue());
		inPatDetails.setAdmissionDateTime(form.ctn1().dtimAdmission().getValue());
		inPatDetails.setEstDischargeDate(form.ctn1().dtimEstDischargeDate().getValue());
		inPatDetails.setIsChaplainRequired(form.ctn1().chkChaplain().getValue());
		inPatDetails.setIsMaternityInpatient(form.ctn1().chkMaternity().getValue());
		inPatDetails.setReasonForAdmission(form.ctn1().txtReasonForAdmission().getValue());
		MedicVo referringMedic = domain.getMedicVoFromIMos(form.ctn1().ccReferringConsultant().getValue());
		inPatDetails.setReferringConsultant(referringMedic);
		inPatDetails.setPatientStatus(form.ctn1().cmbPatientCategory().getValue());
		inPatDetails.setSourceOfEmergencyReferral(form.ctn1().cmbSourceofEmerReferrral().getValue());
		if(allFieldsEmpty==true)
		{
			engine.showMessage("At least one of the following must be populated: Ward, Consultant, Admit Date Time, Discharge Date Time or Specialty");
			return;
		}
		
		
		boolean treatmentDeferred_FinalValue = episode != null ? Boolean.TRUE.equals(episode.getWasTreatmentDeferred()) : false;

		
		try
		{
			form.getLocalContext().setselectedDischargedEpisode(domain.saveDischargedEpisode(episode,inPatDetails, treatmentDeferred_InitialValue, treatmentDeferred_FinalValue));
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		
		if (form.getLocalContext().getselectedDischargedEpisode() != null
				&& InpatientEpisodeMaintenanceImpl.RESPONSE_NOT_THE_LATEST.equals(form.getLocalContext().getselectedDischargedEpisode().getDischargeTreatmentDeferredResponse()))
		{
			engine.showMessage("RTT Status and Clock were not updated as they have been progressed.");
		}
		
		
		open();
		enableStayButtons(true);
	}

	protected void OnBtnDischargeDetailsEdit() throws PresentationLogicException
	{
		LocationLiteVo previousWard = form.ctn1().cmbWard().getValue();
		populateWardCombo(form.ctn1().cmbHospital().getValue());
		form.ctn1().cmbWard().setValue(previousWard);
		form.setMode(FormMode.EDIT);
		enableHistoricalInpatientEpisodesActions(false);
		form.getLocalContext().setSelectedInpatientEpisode(null);
		form.grdCurrentAdmissionDetails().setValue(null);
		updateControlsAddEpisode();
		if(Boolean.TRUE.equals(form.ctn1().chkTreatmentDefferred().getValue()))
		{
			form.ctn1().cmbTreatmentDeferredReason().setEnabled(true);
		}
		else
		{
			form.ctn1().cmbTreatmentDeferredReason().setEnabled(false);
		}
		if(form.ctn1().cmbSourceOfReferral().getValue() != null
				&&SourceOfReferral.CONSULTANT.getID() == form.ctn1().cmbSourceOfReferral().getValue().getID())
		{
			form.ctn1().ccReferringConsultant().setEnabled(true);
		}
		else
		{
			form.ctn1().ccReferringConsultant().setEnabled(false);
		}
		enableStayButtons(false);		
	}

	protected void OnBtnCancelCurrentAdmission() throws PresentationLogicException 
	{
		if(form.grdCurrentAdmissionDetails().getSelectedRow()==null)
		{
			engine.showMessage("Please select an episode to cancel");
			return;
		}
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		String[] errors = patient.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
		form.getLocalContext().setCancelAdmissionMessageBoxID(engine.showMessage("Are you sure you want to cancel the current admission?", "" , MessageButtons.YESNO, MessageIcon.QUESTION));			
	}

	private void cancelCurrentAdmission(PatientShort patient) throws PresentationLogicException {
		try
		{
			domain.cancelCurrentAdmission(patient);
		} catch (StaleObjectException e) {
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		} catch (ForeignKeyViolationException e) {
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			open();
			return;
		}
		open();
		new ResetPIDBarHelper(engine, patient ,null);
	}

	@Override
	protected void OnBtnDischargedEpisodeAdd() throws PresentationLogicException {
		
		addDischargedEpisInstance();
	}

	private void addDischargedEpisInstance()
	{
		form.setMode(FormMode.EDIT);
		form.grdCurrentAdmissionDetails().setValue(null);
		form.grdHistoricalInpatientEpisodes().setValue(null);
		clearDischargeDetailsPanelValues();
		clearAdmissionDetailsPanelValues();
		loadHospitals();
		populateWardCombo(form.ctn1().cmbHospital().getValue());
		populateAllServices();
		bindTreatmentDiagnosisDereferredReason(domain.listCancellationTypeReason());
		updateControlsAddEpisode();
		enableHistoricalInpatientEpisodesActions(false);		
	}
	private void updateControlsAddEpisode()
	{		
		form.grdCurrentAdmissionDetails().setEnabled(FormMode.VIEW.equals(form.getMode()));	
		form.grdHistoricalInpatientEpisodes().setEnabled(false);		
		setAdmissionDetailsPanelRW(true,EpisodeType.DISCHARGE);
		form.ctn1().btnAdmissionDetailsSave().setVisible(false);
		form.ctn1().btnAdmissionDetailsCancel().setVisible(false);
		form.ctn1().btnEditAdmissionDetails().setVisible(false);		
		setDischargeDetailsPanelRW(true);		
	}	
	@Override
	protected void OnBtnDischargedEpisodeCancel()throws PresentationLogicException {
		if(form.grdHistoricalInpatientEpisodes().getSelectedRow()==null)
		{
			engine.showMessage("Please select an episode to cancel");
			return;
		}
		
		if(form.grdHistoricalInpatientEpisodes().getSelectedRowIndex()!=0)
		{
			engine.showMessage("Only the most recent discharge can be cancelled.");
			return;
		}
		if(form.grdCurrentAdmissionDetails().getRows().size()>0)
		{
			engine.showMessage("Cannot cancel discharge while patient is a current inpatient");
			return;
		}
		form.getLocalContext().setCancelDischargeMessageBoxID(engine.showMessage("Are you sure you want to cancel this discharged episode?", "" , MessageButtons.YESNO, MessageIcon.QUESTION));
		return;
//		cancelDischarge();
		
	}

	private void cancelDischarge() throws PresentationLogicException{
		DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getValue();
		String [] errors = episode.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
		try {
			domain.cancelDischarge(episode);
		} catch (StaleObjectException e) {
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		open();
		if(episode.getPasEventIsNotNull())
		{
			PatientShort patient =domain.getPatientShort(episode.getPasEvent().getPatient());
			new ResetPIDBarHelper(engine, patient ,null);
		}

	}

	@Override
	protected void OnBtnDischargedEpisodeRIE() throws PresentationLogicException {
		if(form.grdHistoricalInpatientEpisodes().getSelectedRow()==null)
		{
			engine.showMessage("Please select an episode to RIE");
			return;
		}
		form.getLocalContext().setRieDischargeMessageBoxID(engine.showMessage("Are you sure you want to RIE this discharged episode?", "" , MessageButtons.YESNO, MessageIcon.QUESTION));
	}

	private void rieDischarge() throws PresentationLogicException {
		DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getValue();
		try {
			domain.rieDischargedEpisode(episode);
			open();
		} catch (StaleObjectException e) {
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
	}

	
	private void populateAllServices()
	{
		form.ctn1().cmbService().clear();
		ServiceLiteVoCollection services = domain.getServices();
		if (services != null)
		{
			for (ServiceLiteVo service : services)
			{
				form.ctn1().cmbService().newRow(service, service.getServiceName());
			}
			if (services.size() == 1)
			{	
				form.ctn1().cmbService().setValue(services.get(0));				
			}	
		}
	}

	private void populateWardCombo(LocationLiteVo hospVo)
	{
		form.ctn1().cmbWard().clear();
		LocationLiteVoCollection temColl = domain.listWards(form.ctn1().cmbHospital().getValue());
		if( temColl != null && temColl.size() > 0 )
		{
			for(int i = 0; i < temColl.size();i++)
			{
				form.ctn1().cmbWard().newRow(temColl.get(i),temColl.get(i).getName());
			}
			
			if( temColl.size() == 1 )
			{
				form.ctn1().cmbWard().setValue(temColl.get(0));
			}
		}
	}
	private void loadHospitals()
	{
		form.ctn1().cmbHospital().clear();
		LocationLiteVoCollection temColl = domain.listActiveHospitals();
		if( temColl != null && temColl.size() > 0 )
		{
			for(int i = 0; i < temColl.size();i++)
			{
				form.ctn1().cmbHospital().newRow(temColl.get(i),temColl.get(i).getName());
			}
			
			if( temColl.size() == 1 )
			{
				form.ctn1().cmbHospital().setValue(temColl.get(0));				
			}
		}
	}
	private WardStayVoCollection getWardStays()
	{
		if(form.grdCurrentAdmissionDetails().getSelectedRow()!=null)
		{
			InpatientEpisodeMaintenanceVo episode = form.grdCurrentAdmissionDetails().getSelectedRow().getValue();
			return episode.getWardStays();
		}
		else if(form.grdHistoricalInpatientEpisodes().getSelectedRow()!=null)
		{
			DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getSelectedRow().getValue();
			return episode.getWardStays();
		}
		else
		{
			return null;
		}
	}

	private ConsultantStayVoCollection getConsultantStays()
	{
		if(form.grdCurrentAdmissionDetails().getSelectedRow()!=null)
		{
			InpatientEpisodeMaintenanceVo episode = form.grdCurrentAdmissionDetails().getSelectedRow().getValue();
			return episode.getConsultantStays();
		}
		else if(form.grdHistoricalInpatientEpisodes().getSelectedRow()!=null)
		{
			DischargedEpisodeMaintenanceVo episode = form.grdHistoricalInpatientEpisodes().getSelectedRow().getValue();
			return episode.getConsultantStays();
		}
		else
		{
			return null;
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if( form.getLocalContext().getCancelAdmissionMessageBoxIDIsNotNull() && messageBoxId == form.getLocalContext().getCancelAdmissionMessageBoxID())
		{
			if (DialogResult.YES.equals(result))
			{
				PatientShort patient = form.getGlobalContext().Core.getPatientShort();
				String[] errors = patient.validate();
				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return ;
				}
				cancelCurrentAdmission(patient);
				new ResetPIDBarHelper(engine, domain.getPatientShort(patient), null); //WDEV-22568
				form.getLocalContext().setSelectedInpatientEpisode(null);
			}
		}
		else if( form.getLocalContext().getRieConsultantStayMessageBoxIDIsNotNull() 
				&& messageBoxId == form.getLocalContext().getRieConsultantStayMessageBoxID()
				&&DialogResult.YES.equals(result))
		{
			rieConsultantStay();
		}
		else if( form.getLocalContext().getRieWardStayMessageBoxIDIsNotNull() 
				&& messageBoxId == form.getLocalContext().getRieWardStayMessageBoxID()
				&&DialogResult.YES.equals(result))
		{
			rieWardStay();
		}
		else if( form.getLocalContext().getRieDischargeMessageBoxIDIsNotNull() 
				&& messageBoxId == form.getLocalContext().getRieDischargeMessageBoxID()
				&&DialogResult.YES.equals(result))
		{
			rieDischarge();
			form.getLocalContext().setSelectedDischargedEpisodeRow(null);
			form.getLocalContext().setselectedDischargedEpisode(null);
		}
		else if( form.getLocalContext().getCancelDischargeMessageBoxIDIsNotNull() 
				&& messageBoxId == form.getLocalContext().getCancelDischargeMessageBoxID()
				&&DialogResult.YES.equals(result))
		{
			cancelDischarge();
			form.getLocalContext().setSelectedDischargedEpisodeRow(null);
			form.getLocalContext().setselectedDischargedEpisode(null);
		}

	}
	
	private String createPasEventID()
	{
		 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssmmm");
		 Date date = new Date();
		 return form.getGlobalContext().Core.getPatientShort().getID_Patient().toString()+dateFormat.format(date);
	}

	@Override
	protected void onChkTreatmentDefferredValueChanged() throws PresentationLogicException
	{
		if(Boolean.TRUE.equals(form.ctn1().chkTreatmentDefferred().getValue()))
		{
			form.ctn1().cmbTreatmentDeferredReason().setEnabled(true);
		}
		else
		{
			form.ctn1().cmbTreatmentDeferredReason().setValue(null);
			form.ctn1().cmbTreatmentDeferredReason().setEnabled(false);
		}
		form.ctn1().cmbTreatmentDeferredReason().setRequired(Boolean.TRUE.equals(form.ctn1().chkTreatmentDefferred().getValue()));//WDEV-23088
	}

	@Override
	protected void onCmbSourceOfReferralValueChanged()throws PresentationLogicException {
		if(form.ctn1().cmbSourceOfReferral().getValue()!=null
				&&SourceOfReferral.CONSULTANT.getID()== form.ctn1().cmbSourceOfReferral().getValue().getID())
		{
			form.ctn1().ccReferringConsultant().setEnabled(true);
		}
		else
		{
			form.ctn1().ccReferringConsultant().setValue(null);
			form.ctn1().ccReferringConsultant().setEnabled(false);
		}
		
	}

	private void bindTreatmentDiagnosisDereferredReason(CancellationTypeReasonVoCollection listDereferedReasons)
	{
		form.ctn1().cmbTreatmentDeferredReason().clear();
		
		if (listDereferedReasons == null)
			return;
		
		for (CancellationTypeReasonVo reason : listDereferedReasons)
		{
			form.ctn1().cmbTreatmentDeferredReason().newRow(reason, reason.getCancellationReason().getText());
		}
	}
	
	//WDEV-20878
	@Override
	protected void onCmbHospitalValueChanged()	throws PresentationLogicException
	{
		form.ctn1().cmbWard().clear();
		populateWardCombo(form.ctn1().cmbHospital().getValue());		
	}


	@Override
	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		bindSpecialty(form.ctn1().cmbService().getValue());			
	}

	private void bindSpecialty(ServiceLiteVo value)
	{
		form.ctn1().cmbSpecialty().clear();
		if (value == null)
			return;
		if (value.getSpecialtyIsNotNull())
		{	
			form.ctn1().cmbSpecialty().newRow(value.getSpecialty(), value.getSpecialty().getText());
			form.ctn1().cmbSpecialty().setValue(value.getSpecialty());
		}		
	}
	//WDEV-20878 -- ends here

	@Override
	protected void onCurrentAdmissionDetailsSelectionCleared()	throws PresentationLogicException
	{
		form.getLocalContext().setSelectedInpatientEpisode(null);
		form.grdCurrentAdmissionDetails().setValue(null);
		form.ctn1().grdWardTransfersGrid().getRows().clear();
		form.ctn1().grdConsultantTransfersGrid().getRows().clear();
		clearAdmissionDetailsPanelValues();
		enableStays(false);		
		enableCurrentInpatientEpisodesActions(false);
		form.btnAddHistoricalInpatientEpisodes().setEnabled(true);
	}

	@Override
	protected void onGrdWardTransfersGridSelectionChanged()	throws PresentationLogicException
	{
		form.ctn1().grdConsultantTransfersGrid().setValue(null);
		enableStayButtons(FormMode.VIEW.equals(form.getMode()));
		updateContextMenus();
		
	}

	@Override
	protected void onGrdConsultantTransfersGridSelectionChanged() throws PresentationLogicException
	{
		form.ctn1().grdWardTransfersGrid().setValue(null);
		enableStayButtons(FormMode.VIEW.equals(form.getMode()));
		updateContextMenus();
	}

}
