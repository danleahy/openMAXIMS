//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.inpatientepisodemaintenance;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctn1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbSourceofEmerReferrralComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.SourceOfEmergencyReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.SourceOfEmergencyReferral value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.SourceOfEmergencyReferral getValue()
			{
				return (ims.core.vo.lookups.SourceOfEmergencyReferral)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.SourceOfEmergencyReferral value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbHospitalComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.LocationLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.LocationLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.LocationLiteVo getValue()
			{
				return (ims.core.vo.LocationLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.LocationLiteVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbPatientCategoryComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.PatientStatus getValue()
			{
				return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.PatientStatus value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbServiceComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.ServiceLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.ServiceLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.ServiceLiteVo getValue()
			{
				return (ims.core.vo.ServiceLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.ServiceLiteVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSpecialtyComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.Specialty value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.Specialty value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.Specialty getValue()
			{
				return (ims.core.vo.lookups.Specialty)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.Specialty value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbWardTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.WardType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.WardType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.WardType getValue()
			{
				return (ims.core.vo.lookups.WardType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.WardType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbWardComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.LocationLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.LocationLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.LocationLiteVo getValue()
			{
				return (ims.core.vo.LocationLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.LocationLiteVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbAdmissionTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.PasEventType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.PasEventType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.PasEventType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.PasEventType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.PasEventType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.PasEventType getValue()
			{
				return (ims.core.vo.lookups.PasEventType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.PasEventType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSourceOfReferralComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.SourceOfReferral value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.SourceOfReferral getValue()
			{
				return (ims.core.vo.lookups.SourceOfReferral)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.SourceOfReferral value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbMethodOfAdmissionComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MethodOfAdmission value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MethodOfAdmission getValue()
			{
				return (ims.core.vo.lookups.MethodOfAdmission)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MethodOfAdmission value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSourceOfAdmissionComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.SourceOfAdmission value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.SourceOfAdmission getValue()
			{
				return (ims.core.vo.lookups.SourceOfAdmission)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.SourceOfAdmission value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbDischargeDestinationComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.coe.vo.lookups.DischargeDestination value)
			{
				return super.control.removeRow(value);
			}
			public ims.coe.vo.lookups.DischargeDestination getValue()
			{
				return (ims.coe.vo.lookups.DischargeDestination)super.control.getValue();
			}
			public void setValue(ims.coe.vo.lookups.DischargeDestination value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbMethodOfDischargeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MethodOfDischarge value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MethodOfDischarge getValue()
			{
				return (ims.core.vo.lookups.MethodOfDischarge)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MethodOfDischarge value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbTreatmentDeferredReasonComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.scheduling.vo.CancellationTypeReasonVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.scheduling.vo.CancellationTypeReasonVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.scheduling.vo.CancellationTypeReasonVo getValue()
			{
				return (ims.scheduling.vo.CancellationTypeReasonVo)super.control.getValue();
			}
			public void setValue(ims.scheduling.vo.CancellationTypeReasonVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdWardTransfersGridRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdWardTransfersGridRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColumnWardReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColumnWardReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColumnWardOpened()
			{
				super.row.showOpened(0);
			}
			public String getColumnWard()
			{
				return (String)super.row.get(0);
			}
			public void setColumnWard(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColumnWardTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColumnDateFromReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColumnDateFromReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColumnDateFromOpened()
			{
				super.row.showOpened(1);
			}
			public ims.framework.utils.Date getColumnDateFrom()
			{
				return (ims.framework.utils.Date)super.row.get(1);
			}
			public void setColumnDateFrom(ims.framework.utils.Date value)
			{
				super.row.set(1, value);
			}
			public void setCellColumnDateFromTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColumnDateToReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColumnDateToReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColumnDateToOpened()
			{
				super.row.showOpened(2);
			}
			public ims.framework.utils.Date getColumnDateTo()
			{
				return (ims.framework.utils.Date)super.row.get(2);
			}
			public void setColumnDateTo(ims.framework.utils.Date value)
			{
				super.row.set(2, value);
			}
			public void setCellColumnDateToTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColumnServiceReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColumnServiceReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColumnServiceOpened()
			{
				super.row.showOpened(3);
			}
			public String getColumnService()
			{
				return (String)super.row.get(3);
			}
			public void setColumnService(String value)
			{
				super.row.set(3, value);
			}
			public void setCellColumnServiceTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColumnPatientCategoryReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColumnPatientCategoryReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showColumnPatientCategoryOpened()
			{
				super.row.showOpened(4);
			}
			public String getColumnPatientCategory()
			{
				return (String)super.row.get(4);
			}
			public void setColumnPatientCategory(String value)
			{
				super.row.set(4, value);
			}
			public void setCellColumnPatientCategoryTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public ims.core.vo.WardStayVo getValue()
			{
				return (ims.core.vo.WardStayVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.WardStayVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdWardTransfersGridRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdWardTransfersGridRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdWardTransfersGridRow get(int index)
			{
				return new grdWardTransfersGridRow(super.collection.get(index));
			}
			public grdWardTransfersGridRow newRow()
			{
				return new grdWardTransfersGridRow(super.collection.newRow());
			}
			public grdWardTransfersGridRow newRow(boolean autoSelect)
			{
				return new grdWardTransfersGridRow(super.collection.newRow(autoSelect));
			}
			public grdWardTransfersGridRow newRowAt(int index)
			{
				return new grdWardTransfersGridRow(super.collection.newRowAt(index));
			}
			public grdWardTransfersGridRow newRowAt(int index, boolean autoSelect)
			{
				return new grdWardTransfersGridRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdWardTransfersGridGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			public ims.core.vo.WardStayVoCollection getValues()
			{
				ims.core.vo.WardStayVoCollection listOfValues = new ims.core.vo.WardStayVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.WardStayVo getValue()
			{
				return (ims.core.vo.WardStayVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.WardStayVo value)
			{
				super.grid.setValue(value);
			}
			public grdWardTransfersGridRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdWardTransfersGridRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdWardTransfersGridRowCollection getRows()
			{
				return new grdWardTransfersGridRowCollection(super.grid.getRows());
			}
			public grdWardTransfersGridRow getRowByValue(ims.core.vo.WardStayVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdWardTransfersGridRow(row);
			}
			public void setColumnWardHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColumnWardHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColumnDateFromHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColumnDateFromHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColumnDateToHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColumnDateToHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColumnServiceHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColumnServiceHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColumnPatientCategoryHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColumnPatientCategoryHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
		}
		public static class grdConsultantTransfersGridRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdConsultantTransfersGridRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColumnConsultantReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColumnConsultantReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColumnConsultantOpened()
			{
				super.row.showOpened(0);
			}
			public String getColumnConsultant()
			{
				return (String)super.row.get(0);
			}
			public void setColumnConsultant(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColumnConsultantTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColumnDateFromReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColumnDateFromReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColumnDateFromOpened()
			{
				super.row.showOpened(1);
			}
			public ims.framework.utils.Date getColumnDateFrom()
			{
				return (ims.framework.utils.Date)super.row.get(1);
			}
			public void setColumnDateFrom(ims.framework.utils.Date value)
			{
				super.row.set(1, value);
			}
			public void setCellColumnDateFromTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColumnDateToReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColumnDateToReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColumnDateToOpened()
			{
				super.row.showOpened(2);
			}
			public ims.framework.utils.Date getColumnDateTo()
			{
				return (ims.framework.utils.Date)super.row.get(2);
			}
			public void setColumnDateTo(ims.framework.utils.Date value)
			{
				super.row.set(2, value);
			}
			public void setCellColumnDateToTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColServiceReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColServiceReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColServiceOpened()
			{
				super.row.showOpened(3);
			}
			public String getColService()
			{
				return (String)super.row.get(3);
			}
			public void setColService(String value)
			{
				super.row.set(3, value);
			}
			public void setCellColServiceTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColSpecialityReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColSpecialityReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showColSpecialityOpened()
			{
				super.row.showOpened(4);
			}
			public String getColSpeciality()
			{
				return (String)super.row.get(4);
			}
			public void setColSpeciality(String value)
			{
				super.row.set(4, value);
			}
			public void setCellColSpecialityTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public void setColumnCategoryReadOnly(boolean value)
			{
				super.row.setReadOnly(5, value);
			}
			public boolean isColumnCategoryReadOnly()
			{
				return super.row.isReadOnly(5);
			}
			public void showColumnCategoryOpened()
			{
				super.row.showOpened(5);
			}
			public String getColumnCategory()
			{
				return (String)super.row.get(5);
			}
			public void setColumnCategory(String value)
			{
				super.row.set(5, value);
			}
			public void setCellColumnCategoryTooltip(String value)
			{
				super.row.setTooltip(5, value);
			}
			public ims.core.vo.ConsultantStayVo getValue()
			{
				return (ims.core.vo.ConsultantStayVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.ConsultantStayVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdConsultantTransfersGridRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdConsultantTransfersGridRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdConsultantTransfersGridRow get(int index)
			{
				return new grdConsultantTransfersGridRow(super.collection.get(index));
			}
			public grdConsultantTransfersGridRow newRow()
			{
				return new grdConsultantTransfersGridRow(super.collection.newRow());
			}
			public grdConsultantTransfersGridRow newRow(boolean autoSelect)
			{
				return new grdConsultantTransfersGridRow(super.collection.newRow(autoSelect));
			}
			public grdConsultantTransfersGridRow newRowAt(int index)
			{
				return new grdConsultantTransfersGridRow(super.collection.newRowAt(index));
			}
			public grdConsultantTransfersGridRow newRowAt(int index, boolean autoSelect)
			{
				return new grdConsultantTransfersGridRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdConsultantTransfersGridGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			public ims.core.vo.ConsultantStayVoCollection getValues()
			{
				ims.core.vo.ConsultantStayVoCollection listOfValues = new ims.core.vo.ConsultantStayVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.ConsultantStayVo getValue()
			{
				return (ims.core.vo.ConsultantStayVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.ConsultantStayVo value)
			{
				super.grid.setValue(value);
			}
			public grdConsultantTransfersGridRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdConsultantTransfersGridRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdConsultantTransfersGridRowCollection getRows()
			{
				return new grdConsultantTransfersGridRowCollection(super.grid.getRows());
			}
			public grdConsultantTransfersGridRow getRowByValue(ims.core.vo.ConsultantStayVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdConsultantTransfersGridRow(row);
			}
			public void setColumnConsultantHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColumnConsultantHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColumnDateFromHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColumnDateFromHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColumnDateToHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColumnDateToHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColServiceHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColServiceHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColSpecialityHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColSpecialityHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
			public void setColumnCategoryHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(5, value);
			}
			public String getColumnCategoryHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(5);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 5, 368, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Admission Details", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 808, 368, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Discharge Details", new Integer(2), ""}));
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 156, 397, 203, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_ccReferringConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 20, skipContextValidation);
			//ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(156), new Integer(397), new Integer(203), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 20), m_ccReferringConsultantForm, instance1 } );
			ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 20), m_ccReferringConsultantForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccReferringConsultantControl);
			Menu[] menus1 = m_ccReferringConsultantForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 156, 174, 203, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 10, skipContextValidation);
			//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(156), new Integer(174), new Integer(203), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 10), m_ccConsultantForm, instance2 } );
			ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 10), m_ccConsultantForm, instance2, Boolean.FALSE } );
			super.addControl(m_ccConsultantControl);
			Menu[] menus2 = m_ccConsultantForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 14, 351, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Emer. Referral:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 14, 305, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Maternity:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 14, 329, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Chaplain:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 14, 56, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 14, 423, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Category:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 14, 399, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referring Consultant:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 14, 279, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Est. Discharge Date :", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 14, 128, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 14, 32, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 14, 375, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Referral:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 14, 351, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason For Admission:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 14, 255, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 14, 231, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Method of Admission:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 14, 207, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Admission:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 14, 152, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 14, 176, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 14, 104, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 14, 80, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 488, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Stays:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 640, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant Stays:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 136, 976, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 14, 929, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 14, 907, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Deferred:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 14, 884, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 14, 859, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Destination:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 14, 834, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Method of Discharge:", new Integer(1), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 164, 768, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 85, 768, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 6, 768, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 164, 616, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 85, 616, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 6, 616, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 285, 459, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 205, 459, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 14, 457, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 285, 959, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 205, 959, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 14, 957, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 156, 349, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 156, 277, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 156, 253, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 156, 882, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 156, 349, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSourceofEmerReferrralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSourceofEmerReferrralTemp);
			cmbSourceofEmerReferrralComboBox cmbSourceofEmerReferrral = (cmbSourceofEmerReferrralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceofEmerReferrralComboBox.class, m_cmbSourceofEmerReferrralTemp);
			super.addComboBox(cmbSourceofEmerReferrral);
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 156, 54, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbHospitalTemp);
			cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
			super.addComboBox(cmbHospital);
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 156, 421, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbPatientCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbPatientCategoryTemp);
			cmbPatientCategoryComboBox cmbPatientCategory = (cmbPatientCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientCategoryComboBox.class, m_cmbPatientCategoryTemp);
			super.addComboBox(cmbPatientCategory);
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 156, 126, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbServiceTemp);
			cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
			super.addComboBox(cmbService);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 156, 150, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbSpecialtyTemp);
			cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
			super.addComboBox(cmbSpecialty);
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 156, 102, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbWardTypeTemp);
			cmbWardTypeComboBox cmbWardType = (cmbWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardTypeComboBox.class, m_cmbWardTypeTemp);
			super.addComboBox(cmbWardType);
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 156, 78, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbWardTemp);
			cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
			super.addComboBox(cmbWard);
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 156, 30, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbAdmissionTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbAdmissionTypeTemp);
			cmbAdmissionTypeComboBox cmbAdmissionType = (cmbAdmissionTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmissionTypeComboBox.class, m_cmbAdmissionTypeTemp);
			super.addComboBox(cmbAdmissionType);
			RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 156, 373, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSourceOfReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSourceOfReferralTemp);
			cmbSourceOfReferralComboBox cmbSourceOfReferral = (cmbSourceOfReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfReferralComboBox.class, m_cmbSourceOfReferralTemp);
			super.addComboBox(cmbSourceOfReferral);
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 156, 229, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbMethodOfAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbMethodOfAdmissionTemp);
			cmbMethodOfAdmissionComboBox cmbMethodOfAdmission = (cmbMethodOfAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodOfAdmissionComboBox.class, m_cmbMethodOfAdmissionTemp);
			super.addComboBox(cmbMethodOfAdmission);
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 156, 205, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSourceOfAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbSourceOfAdmissionTemp);
			cmbSourceOfAdmissionComboBox cmbSourceOfAdmission = (cmbSourceOfAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfAdmissionComboBox.class, m_cmbSourceOfAdmissionTemp);
			super.addComboBox(cmbSourceOfAdmission);
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 156, 857, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbDischargeDestinationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbDischargeDestinationTemp);
			cmbDischargeDestinationComboBox cmbDischargeDestination = (cmbDischargeDestinationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeDestinationComboBox.class, m_cmbDischargeDestinationTemp);
			super.addComboBox(cmbDischargeDestination);
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 156, 832, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbMethodOfDischargeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbMethodOfDischargeTemp);
			cmbMethodOfDischargeComboBox cmbMethodOfDischarge = (cmbMethodOfDischargeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodOfDischargeComboBox.class, m_cmbMethodOfDischargeTemp);
			super.addComboBox(cmbMethodOfDischarge);
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 156, 927, 187, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbTreatmentDeferredReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbTreatmentDeferredReasonTemp);
			cmbTreatmentDeferredReasonComboBox cmbTreatmentDeferredReason = (cmbTreatmentDeferredReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentDeferredReasonComboBox.class, m_cmbTreatmentDeferredReasonTemp);
			super.addComboBox(cmbTreatmentDeferredReason);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 156, 305, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 156, 329, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 157, 909, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 504, 368, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdWardTransfersGridTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdWardTransfersGridTemp);
			grdWardTransfersGridGrid grdWardTransfersGrid = (grdWardTransfersGridGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWardTransfersGridGrid.class, m_grdWardTransfersGridTemp);
			grdWardTransfersGrid.addStringColumn("Ward", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdWardTransfersGrid.addDateColumn("Date From", 0, 0, 75, true, true, null, false, 0, true);
			grdWardTransfersGrid.addDateColumn("Date To", 0, 0, 75, true, true, null, false, 0, true);
			grdWardTransfersGrid.addStringColumn("Service", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdWardTransfersGrid.addStringColumn("Category", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdWardTransfersGrid);
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 8, 656, 368, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdConsultantTransfersGridTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdConsultantTransfersGridTemp);
			grdConsultantTransfersGridGrid grdConsultantTransfersGrid = (grdConsultantTransfersGridGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConsultantTransfersGridGrid.class, m_grdConsultantTransfersGridTemp);
			grdConsultantTransfersGrid.addStringColumn("Consultant", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdConsultantTransfersGrid.addDateColumn("Date From", 0, 0, 75, true, true, null, false, 0, true);
			grdConsultantTransfersGrid.addDateColumn("Date To", 0, 0, 75, true, true, null, false, 0, true);
			grdConsultantTransfersGrid.addStringColumn("Service", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdConsultantTransfersGrid.addStringColumn("Specialty", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdConsultantTransfersGrid.addStringColumn("Category", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdConsultantTransfersGrid);
		}
		public ims.core.forms.mosquery.IComponent ccReferringConsultant()
		{
			return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
		}
		public void setccReferringConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
		}
		public void setccReferringConsultantVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setVisible(value);
		}
		public boolean isccReferringConsultantVisible()
		{
			return ((ims.framework.Control)super.getControl(2)).isVisible();
		}
		public void setccReferringConsultantEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(2)).setEnabled(value);
		}
		public boolean isccReferringConsultantEnabled()
		{
			return ((ims.framework.Control)super.getControl(2)).isEnabled();
		}
		public ims.core.forms.mosquery.IComponent ccConsultant()
		{
			return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
		}
		public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
		}
		public void setccConsultantVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(3)).setVisible(value);
		}
		public boolean isccConsultantVisible()
		{
			return ((ims.framework.Control)super.getControl(3)).isVisible();
		}
		public void setccConsultantEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(3)).setEnabled(value);
		}
		public boolean isccConsultantEnabled()
		{
			return ((ims.framework.Control)super.getControl(3)).isEnabled();
		}
		public Label lbl4()
		{
			return (Label)super.getControl(8);
		}
		public Label lbl3()
		{
			return (Label)super.getControl(9);
		}
		public Label lbl2()
		{
			return (Label)super.getControl(10);
		}
		public Label lbl9()
		{
			return (Label)super.getControl(25);
		}
		public Label lbl8()
		{
			return (Label)super.getControl(26);
		}
		public Label lbl7()
		{
			return (Label)super.getControl(27);
		}
		public Label lbl6()
		{
			return (Label)super.getControl(28);
		}
		public Label lbl5()
		{
			return (Label)super.getControl(29);
		}
		public Button btnRIEConsultantTransfer()
		{
			return (Button)super.getControl(30);
		}
		public Button btnEditConsultantTransfer()
		{
			return (Button)super.getControl(31);
		}
		public Button btnAddConsultantTransfer()
		{
			return (Button)super.getControl(32);
		}
		public Button btnRIEWardTransfer()
		{
			return (Button)super.getControl(33);
		}
		public Button btnEditWardTransfer()
		{
			return (Button)super.getControl(34);
		}
		public Button btnAddWardTransfer()
		{
			return (Button)super.getControl(35);
		}
		public Button btnAdmissionDetailsCancel()
		{
			return (Button)super.getControl(36);
		}
		public Button btnAdmissionDetailsSave()
		{
			return (Button)super.getControl(37);
		}
		public Button btnEditAdmissionDetails()
		{
			return (Button)super.getControl(38);
		}
		public Button btnDischargeDetailsCancel()
		{
			return (Button)super.getControl(39);
		}
		public Button btnDischargeDetailsSave()
		{
			return (Button)super.getControl(40);
		}
		public Button btnEditDischDet()
		{
			return (Button)super.getControl(41);
		}
		public TextBox txtReasonForAdmission()
		{
			return (TextBox)super.getControl(42);
		}
		public DateTimeControl dtimEstDischargeDate()
		{
			return (DateTimeControl)super.getControl(43);
		}
		public DateTimeControl dtimAdmission()
		{
			return (DateTimeControl)super.getControl(44);
		}
		public DateTimeControl dtimActualDischarge()
		{
			return (DateTimeControl)super.getControl(45);
		}
		public cmbSourceofEmerReferrralComboBox cmbSourceofEmerReferrral()
		{
			return (cmbSourceofEmerReferrralComboBox)super.getComboBox(0);
		}
		public cmbHospitalComboBox cmbHospital()
		{
			return (cmbHospitalComboBox)super.getComboBox(1);
		}
		public cmbPatientCategoryComboBox cmbPatientCategory()
		{
			return (cmbPatientCategoryComboBox)super.getComboBox(2);
		}
		public cmbServiceComboBox cmbService()
		{
			return (cmbServiceComboBox)super.getComboBox(3);
		}
		public cmbSpecialtyComboBox cmbSpecialty()
		{
			return (cmbSpecialtyComboBox)super.getComboBox(4);
		}
		public cmbWardTypeComboBox cmbWardType()
		{
			return (cmbWardTypeComboBox)super.getComboBox(5);
		}
		public cmbWardComboBox cmbWard()
		{
			return (cmbWardComboBox)super.getComboBox(6);
		}
		public cmbAdmissionTypeComboBox cmbAdmissionType()
		{
			return (cmbAdmissionTypeComboBox)super.getComboBox(7);
		}
		public cmbSourceOfReferralComboBox cmbSourceOfReferral()
		{
			return (cmbSourceOfReferralComboBox)super.getComboBox(8);
		}
		public cmbMethodOfAdmissionComboBox cmbMethodOfAdmission()
		{
			return (cmbMethodOfAdmissionComboBox)super.getComboBox(9);
		}
		public cmbSourceOfAdmissionComboBox cmbSourceOfAdmission()
		{
			return (cmbSourceOfAdmissionComboBox)super.getComboBox(10);
		}
		public cmbDischargeDestinationComboBox cmbDischargeDestination()
		{
			return (cmbDischargeDestinationComboBox)super.getComboBox(11);
		}
		public cmbMethodOfDischargeComboBox cmbMethodOfDischarge()
		{
			return (cmbMethodOfDischargeComboBox)super.getComboBox(12);
		}
		public cmbTreatmentDeferredReasonComboBox cmbTreatmentDeferredReason()
		{
			return (cmbTreatmentDeferredReasonComboBox)super.getComboBox(13);
		}
		public CheckBox chkMaternity()
		{
			return (CheckBox)super.getControl(60);
		}
		public CheckBox chkChaplain()
		{
			return (CheckBox)super.getControl(61);
		}
		public CheckBox chkTreatmentDefferred()
		{
			return (CheckBox)super.getControl(62);
		}
		public grdWardTransfersGridGrid grdWardTransfersGrid()
		{
			return (grdWardTransfersGridGrid)super.getGrid(0);
		}
		public grdConsultantTransfersGridGrid grdConsultantTransfersGrid()
		{
			return (grdConsultantTransfersGridGrid)super.getGrid(1);
		}
	}
	public static class grdHistoricalInpatientEpisodesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdHistoricalInpatientEpisodesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnAdmDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnAdmDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnAdmDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getColumnAdmDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColumnAdmDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnAdmDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDischargingWardReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDischargingWardReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDischargingWardOpened()
		{
			super.row.showOpened(1);
		}
		public String getColumnDischargingWard()
		{
			return (String)super.row.get(1);
		}
		public void setColumnDischargingWard(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnDischargingWardTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnSpecialtyReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnSpecialtyOpened()
		{
			super.row.showOpened(2);
		}
		public String getColumnSpecialty()
		{
			return (String)super.row.get(2);
		}
		public void setColumnSpecialty(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnSpecialtyTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnRespHcpReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnRespHcpReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnRespHcpOpened()
		{
			super.row.showOpened(3);
		}
		public String getColumnRespHcp()
		{
			return (String)super.row.get(3);
		}
		public void setColumnRespHcp(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnRespHcpTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnDischDateReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnDischDateReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnDischDateOpened()
		{
			super.row.showOpened(4);
		}
		public ims.framework.utils.Date getColumnDischDate()
		{
			return (ims.framework.utils.Date)super.row.get(4);
		}
		public void setColumnDischDate(ims.framework.utils.Date value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnDischDateTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.DischargedEpisodeMaintenanceVo getValue()
		{
			return (ims.core.vo.DischargedEpisodeMaintenanceVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.DischargedEpisodeMaintenanceVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdHistoricalInpatientEpisodesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdHistoricalInpatientEpisodesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdHistoricalInpatientEpisodesRow get(int index)
		{
			return new grdHistoricalInpatientEpisodesRow(super.collection.get(index));
		}
		public grdHistoricalInpatientEpisodesRow newRow()
		{
			return new grdHistoricalInpatientEpisodesRow(super.collection.newRow());
		}
		public grdHistoricalInpatientEpisodesRow newRow(boolean autoSelect)
		{
			return new grdHistoricalInpatientEpisodesRow(super.collection.newRow(autoSelect));
		}
		public grdHistoricalInpatientEpisodesRow newRowAt(int index)
		{
			return new grdHistoricalInpatientEpisodesRow(super.collection.newRowAt(index));
		}
		public grdHistoricalInpatientEpisodesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdHistoricalInpatientEpisodesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdHistoricalInpatientEpisodesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.DischargedEpisodeMaintenanceVoCollection getValues()
		{
			ims.core.vo.DischargedEpisodeMaintenanceVoCollection listOfValues = new ims.core.vo.DischargedEpisodeMaintenanceVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.DischargedEpisodeMaintenanceVo getValue()
		{
			return (ims.core.vo.DischargedEpisodeMaintenanceVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.DischargedEpisodeMaintenanceVo value)
		{
			super.grid.setValue(value);
		}
		public grdHistoricalInpatientEpisodesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdHistoricalInpatientEpisodesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdHistoricalInpatientEpisodesRowCollection getRows()
		{
			return new grdHistoricalInpatientEpisodesRowCollection(super.grid.getRows());
		}
		public grdHistoricalInpatientEpisodesRow getRowByValue(ims.core.vo.DischargedEpisodeMaintenanceVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdHistoricalInpatientEpisodesRow(row);
		}
		public void setColumnAdmDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnAdmDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnDischargingWardHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDischargingWardHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnRespHcpHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnRespHcpHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnDischDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnDischDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdCurrentAdmissionDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdCurrentAdmissionDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnAdmDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnAdmDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnAdmDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getColumnAdmDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColumnAdmDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnAdmDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnCurrentWardReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnCurrentWardReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnCurrentWardOpened()
		{
			super.row.showOpened(1);
		}
		public String getColumnCurrentWard()
		{
			return (String)super.row.get(1);
		}
		public void setColumnCurrentWard(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnCurrentWardTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnSpecialtyReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnSpecialtyOpened()
		{
			super.row.showOpened(2);
		}
		public String getColumnSpecialty()
		{
			return (String)super.row.get(2);
		}
		public void setColumnSpecialty(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnSpecialtyTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnRespHcpReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnRespHcpReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnRespHcpOpened()
		{
			super.row.showOpened(3);
		}
		public String getColumnRespHcp()
		{
			return (String)super.row.get(3);
		}
		public void setColumnRespHcp(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnRespHcpTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnEstDischargeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnEstDischargeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnEstDischargeOpened()
		{
			super.row.showOpened(4);
		}
		public ims.framework.utils.Date getColumnEstDischarge()
		{
			return (ims.framework.utils.Date)super.row.get(4);
		}
		public void setColumnEstDischarge(ims.framework.utils.Date value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnEstDischargeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.InpatientEpisodeMaintenanceVo getValue()
		{
			return (ims.core.vo.InpatientEpisodeMaintenanceVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.InpatientEpisodeMaintenanceVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdCurrentAdmissionDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdCurrentAdmissionDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdCurrentAdmissionDetailsRow get(int index)
		{
			return new grdCurrentAdmissionDetailsRow(super.collection.get(index));
		}
		public grdCurrentAdmissionDetailsRow newRow()
		{
			return new grdCurrentAdmissionDetailsRow(super.collection.newRow());
		}
		public grdCurrentAdmissionDetailsRow newRow(boolean autoSelect)
		{
			return new grdCurrentAdmissionDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdCurrentAdmissionDetailsRow newRowAt(int index)
		{
			return new grdCurrentAdmissionDetailsRow(super.collection.newRowAt(index));
		}
		public grdCurrentAdmissionDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdCurrentAdmissionDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdCurrentAdmissionDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.InpatientEpisodeMaintenanceVoCollection getValues()
		{
			ims.core.vo.InpatientEpisodeMaintenanceVoCollection listOfValues = new ims.core.vo.InpatientEpisodeMaintenanceVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.InpatientEpisodeMaintenanceVo getValue()
		{
			return (ims.core.vo.InpatientEpisodeMaintenanceVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.InpatientEpisodeMaintenanceVo value)
		{
			super.grid.setValue(value);
		}
		public grdCurrentAdmissionDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdCurrentAdmissionDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdCurrentAdmissionDetailsRowCollection getRows()
		{
			return new grdCurrentAdmissionDetailsRowCollection(super.grid.getRows());
		}
		public grdCurrentAdmissionDetailsRow getRowByValue(ims.core.vo.InpatientEpisodeMaintenanceVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdCurrentAdmissionDetailsRow(row);
		}
		public void setColumnAdmDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnAdmDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnCurrentWardHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnCurrentWardHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnRespHcpHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnRespHcpHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnEstDischargeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnEstDischargeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuDischargedEpisodesMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuDischargedEpisodesMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 1, "Rie Discharged Episode", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6490001)))
			contextMenus.Core.contextMenuDischargedEpisodesMenu.add(contextMenus.Core.contextMenuDischargedEpisodesMenuRIEItem);
		contextMenus.Core.contextMenuDischargedEpisodesMenuCANCEL_DISCHARGEItem = factory.createMenuItem(startControlID.intValue() + 2, "Cancel Discharge", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6490002)))
			contextMenus.Core.contextMenuDischargedEpisodesMenu.add(contextMenus.Core.contextMenuDischargedEpisodesMenuCANCEL_DISCHARGEItem);
		form.registerMenu(contextMenus.Core.contextMenuDischargedEpisodesMenu);
		contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenance = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenanceADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5490001)))
			contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenance.add(contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenanceADDItem);
		contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenanceEDITItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5490002)))
			contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenance.add(contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenanceEDITItem);
		contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenanceRIEItem = factory.createMenuItem(startControlID.intValue() + 5, "Rie", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5490003)))
			contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenance.add(contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenanceRIEItem);
		form.registerMenu(contextMenus.Core.contextMenuWardTransferForInpatientEpisodeMaintenance);
		contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenance = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenanceADDItem = factory.createMenuItem(startControlID.intValue() + 6, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5500001)))
			contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenance.add(contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenanceADDItem);
		contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenanceEDITItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5500002)))
			contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenance.add(contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenanceEDITItem);
		contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenanceRIEItem = factory.createMenuItem(startControlID.intValue() + 8, "Rie", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5500003)))
			contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenance.add(contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenanceRIEItem);
		form.registerMenu(contextMenus.Core.contextMenuConsultantTransferForInpatientEpisodeMaintenance);


		// Container Clasess
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 440, 16, 400, 600, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctn1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctn1);
		ctn1Container ctn1 = (ctn1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctn1Container.class, m_ctn1, factory);
		ims.framework.utils.SizeInfo m_ctn1DesignSize = new ims.framework.utils.SizeInfo(400, 600);
		ims.framework.utils.SizeInfo m_ctn1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper66.getWidth(), anchoringHelper66.getHeight());
		ctn1.setContext(form, appForm, m_ctn1, loader, contextMenus, startControlID, m_ctn1DesignSize, m_ctn1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn1);

		// Label Controls
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharged Episodes:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Admission Details:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 168, 608, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Cancel Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 88, 608, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 8, 608, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "RIE", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 8, 107, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 432, 440, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdHistoricalInpatientEpisodesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuDischargedEpisodesMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdHistoricalInpatientEpisodesTemp);
		grdHistoricalInpatientEpisodesGrid grdHistoricalInpatientEpisodes = (grdHistoricalInpatientEpisodesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHistoricalInpatientEpisodesGrid.class, m_grdHistoricalInpatientEpisodesTemp);
		grdHistoricalInpatientEpisodes.addDateColumn("Adm. Date", 0, 0, 80, true, true, null, false, 0, true);
		grdHistoricalInpatientEpisodes.addStringColumn("Discharging Ward", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdHistoricalInpatientEpisodes.addStringColumn("Specialty", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdHistoricalInpatientEpisodes.addStringColumn("Resp. HCP", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdHistoricalInpatientEpisodes.addDateColumn("Disch. Date", 0, 0, -1, true, true, null, false, 0, true);
		super.addGrid(grdHistoricalInpatientEpisodes);
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 432, 80, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdCurrentAdmissionDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdCurrentAdmissionDetailsTemp);
		grdCurrentAdmissionDetailsGrid grdCurrentAdmissionDetails = (grdCurrentAdmissionDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCurrentAdmissionDetailsGrid.class, m_grdCurrentAdmissionDetailsTemp);
		grdCurrentAdmissionDetails.addDateColumn("Adm. Date", 0, 0, 80, true, true, null, false, 0, true);
		grdCurrentAdmissionDetails.addStringColumn("Current Ward", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCurrentAdmissionDetails.addStringColumn("Specialty", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCurrentAdmissionDetails.addStringColumn("Resp. HCP", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCurrentAdmissionDetails.addDateColumn("Est. Discharge", 0, 0, -1, true, true, null, false, 0, true);
		super.addGrid(grdCurrentAdmissionDetails);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctn1Container ctn1()
	{
		return (ctn1Container)super.getContainer(0);
	}
	public Button btnCancelDischarge()
	{
		return (Button)super.getControl(3);
	}
	public Button btnAddHistoricalInpatientEpisodes()
	{
		return (Button)super.getControl(4);
	}
	public Button btnRieHistoricaInpatientEpisodes()
	{
		return (Button)super.getControl(5);
	}
	public Button btnRieCurrentAdmissionDetails()
	{
		return (Button)super.getControl(6);
	}
	public grdHistoricalInpatientEpisodesGrid grdHistoricalInpatientEpisodes()
	{
		return (grdHistoricalInpatientEpisodesGrid)super.getGrid(0);
	}
	public grdCurrentAdmissionDetailsGrid grdCurrentAdmissionDetails()
	{
		return (grdCurrentAdmissionDetailsGrid)super.getGrid(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				WardConsultantSpecialtyTransferDlg = new LocalFormName(102431);
			}
			public final FormName WardConsultantSpecialtyTransferDlg;
		}

		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CancelAdmissionMessageBoxID = new ims.framework.ContextVariable("CancelAdmissionMessageBoxID", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__CancelAdmissionMessageBoxID_" + componentIdentifier + "");
			cxl_CancelDischargeMessageBoxID = new ims.framework.ContextVariable("CancelDischargeMessageBoxID", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__CancelDischargeMessageBoxID_" + componentIdentifier + "");
			cxl_RieDischargeMessageBoxID = new ims.framework.ContextVariable("RieDischargeMessageBoxID", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__RieDischargeMessageBoxID_" + componentIdentifier + "");
			cxl_RieWardStayMessageBoxID = new ims.framework.ContextVariable("RieWardStayMessageBoxID", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__RieWardStayMessageBoxID_" + componentIdentifier + "");
			cxl_RieConsultantStayMessageBoxID = new ims.framework.ContextVariable("RieConsultantStayMessageBoxID", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__RieConsultantStayMessageBoxID_" + componentIdentifier + "");
			cxl_SelectedInpatientEpisode = new ims.framework.ContextVariable("SelectedInpatientEpisode", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__SelectedInpatientEpisode_" + componentIdentifier + "");
			cxl_SelectedDischargedEpisodeRow = new ims.framework.ContextVariable("SelectedDischargedEpisodeRow", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__SelectedDischargedEpisodeRow_" + componentIdentifier + "");
			cxl_selectedDischargedEpisode = new ims.framework.ContextVariable("selectedDischargedEpisode", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier + "");
			cxl_DeniedActions = new ims.framework.ContextVariable("DeniedActions", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__DeniedActions_" + componentIdentifier + "");
			cxl_IsRieWardStayDenied = new ims.framework.ContextVariable("IsRieWardStayDenied", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__IsRieWardStayDenied_" + componentIdentifier + "");
			cxl_IsRieConsultantStayDenied = new ims.framework.ContextVariable("IsRieConsultantStayDenied", prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__IsRieConsultantStayDenied_" + componentIdentifier + "");
		}
		
		public boolean getCancelAdmissionMessageBoxIDIsNotNull()
		{
			return !cxl_CancelAdmissionMessageBoxID.getValueIsNull(context);
		}
		public Integer getCancelAdmissionMessageBoxID()
		{
			return (Integer)cxl_CancelAdmissionMessageBoxID.getValue(context);
		}
		public void setCancelAdmissionMessageBoxID(Integer value)
		{
			cxl_CancelAdmissionMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CancelAdmissionMessageBoxID = null;
		public boolean getCancelDischargeMessageBoxIDIsNotNull()
		{
			return !cxl_CancelDischargeMessageBoxID.getValueIsNull(context);
		}
		public Integer getCancelDischargeMessageBoxID()
		{
			return (Integer)cxl_CancelDischargeMessageBoxID.getValue(context);
		}
		public void setCancelDischargeMessageBoxID(Integer value)
		{
			cxl_CancelDischargeMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CancelDischargeMessageBoxID = null;
		public boolean getRieDischargeMessageBoxIDIsNotNull()
		{
			return !cxl_RieDischargeMessageBoxID.getValueIsNull(context);
		}
		public Integer getRieDischargeMessageBoxID()
		{
			return (Integer)cxl_RieDischargeMessageBoxID.getValue(context);
		}
		public void setRieDischargeMessageBoxID(Integer value)
		{
			cxl_RieDischargeMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RieDischargeMessageBoxID = null;
		public boolean getRieWardStayMessageBoxIDIsNotNull()
		{
			return !cxl_RieWardStayMessageBoxID.getValueIsNull(context);
		}
		public Integer getRieWardStayMessageBoxID()
		{
			return (Integer)cxl_RieWardStayMessageBoxID.getValue(context);
		}
		public void setRieWardStayMessageBoxID(Integer value)
		{
			cxl_RieWardStayMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RieWardStayMessageBoxID = null;
		public boolean getRieConsultantStayMessageBoxIDIsNotNull()
		{
			return !cxl_RieConsultantStayMessageBoxID.getValueIsNull(context);
		}
		public Integer getRieConsultantStayMessageBoxID()
		{
			return (Integer)cxl_RieConsultantStayMessageBoxID.getValue(context);
		}
		public void setRieConsultantStayMessageBoxID(Integer value)
		{
			cxl_RieConsultantStayMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RieConsultantStayMessageBoxID = null;
		public boolean getSelectedInpatientEpisodeIsNotNull()
		{
			return !cxl_SelectedInpatientEpisode.getValueIsNull(context);
		}
		public Boolean getSelectedInpatientEpisode()
		{
			return (Boolean)cxl_SelectedInpatientEpisode.getValue(context);
		}
		public void setSelectedInpatientEpisode(Boolean value)
		{
			cxl_SelectedInpatientEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInpatientEpisode = null;
		public boolean getSelectedDischargedEpisodeRowIsNotNull()
		{
			return !cxl_SelectedDischargedEpisodeRow.getValueIsNull(context);
		}
		public Integer getSelectedDischargedEpisodeRow()
		{
			return (Integer)cxl_SelectedDischargedEpisodeRow.getValue(context);
		}
		public void setSelectedDischargedEpisodeRow(Integer value)
		{
			cxl_SelectedDischargedEpisodeRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDischargedEpisodeRow = null;
		public boolean getselectedDischargedEpisodeIsNotNull()
		{
			return !cxl_selectedDischargedEpisode.getValueIsNull(context);
		}
		public ims.core.vo.DischargedEpisodeMaintenanceVo getselectedDischargedEpisode()
		{
			return (ims.core.vo.DischargedEpisodeMaintenanceVo)cxl_selectedDischargedEpisode.getValue(context);
		}
		public void setselectedDischargedEpisode(ims.core.vo.DischargedEpisodeMaintenanceVo value)
		{
			cxl_selectedDischargedEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedDischargedEpisode = null;
		public boolean getDeniedActionsIsNotNull()
		{
			return !cxl_DeniedActions.getValueIsNull(context);
		}
		public java.util.List<ims.core.vo.enums.InpatientEpisodeMaintenanceActions> getDeniedActions()
		{
			return (java.util.List<ims.core.vo.enums.InpatientEpisodeMaintenanceActions>)cxl_DeniedActions.getValue(context);
		}
		public void setDeniedActions(java.util.List<ims.core.vo.enums.InpatientEpisodeMaintenanceActions> value)
		{
			cxl_DeniedActions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeniedActions = null;
		public boolean getIsRieWardStayDeniedIsNotNull()
		{
			return !cxl_IsRieWardStayDenied.getValueIsNull(context);
		}
		public Boolean getIsRieWardStayDenied()
		{
			return (Boolean)cxl_IsRieWardStayDenied.getValue(context);
		}
		public void setIsRieWardStayDenied(Boolean value)
		{
			cxl_IsRieWardStayDenied.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRieWardStayDenied = null;
		public boolean getIsRieConsultantStayDeniedIsNotNull()
		{
			return !cxl_IsRieConsultantStayDenied.getValueIsNull(context);
		}
		public Boolean getIsRieConsultantStayDenied()
		{
			return (Boolean)cxl_IsRieConsultantStayDenied.getValue(context);
		}
		public void setIsRieConsultantStayDenied(Boolean value)
		{
			cxl_IsRieConsultantStayDenied.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRieConsultantStayDenied = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class DischargedEpisodesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int RIE = 1;
				public static final int CANCEL_DISCHARGE = 2;
			}
			public void disableAllDischargedEpisodesMenuMenuItems()
			{
				this.contextMenuDischargedEpisodesMenuRIEItem.setEnabled(false);
				this.contextMenuDischargedEpisodesMenuCANCEL_DISCHARGEItem.setEnabled(false);
			}
			public void hideAllDischargedEpisodesMenuMenuItems()
			{
				this.contextMenuDischargedEpisodesMenuRIEItem.setVisible(false);
				this.contextMenuDischargedEpisodesMenuCANCEL_DISCHARGEItem.setVisible(false);
			}
			private Menu contextMenuDischargedEpisodesMenu;
			public ReadOnlyMenuItem getDischargedEpisodesMenuRIEItem()
			{
				return this.contextMenuDischargedEpisodesMenuRIEItem;
			}
			private MenuItem contextMenuDischargedEpisodesMenuRIEItem;
			public ReadOnlyMenuItem getDischargedEpisodesMenuCANCEL_DISCHARGEItem()
			{
				return this.contextMenuDischargedEpisodesMenuCANCEL_DISCHARGEItem;
			}
			private MenuItem contextMenuDischargedEpisodesMenuCANCEL_DISCHARGEItem;
			public final class WardTransferForInpatientEpisodeMaintenance implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 3;
				public static final int EDIT = 4;
				public static final int RIE = 5;
			}
			public void disableAllWardTransferForInpatientEpisodeMaintenanceMenuItems()
			{
				this.contextMenuWardTransferForInpatientEpisodeMaintenanceADDItem.setEnabled(false);
				this.contextMenuWardTransferForInpatientEpisodeMaintenanceEDITItem.setEnabled(false);
				this.contextMenuWardTransferForInpatientEpisodeMaintenanceRIEItem.setEnabled(false);
			}
			public void hideAllWardTransferForInpatientEpisodeMaintenanceMenuItems()
			{
				this.contextMenuWardTransferForInpatientEpisodeMaintenanceADDItem.setVisible(false);
				this.contextMenuWardTransferForInpatientEpisodeMaintenanceEDITItem.setVisible(false);
				this.contextMenuWardTransferForInpatientEpisodeMaintenanceRIEItem.setVisible(false);
			}
			private Menu contextMenuWardTransferForInpatientEpisodeMaintenance;
			public ReadOnlyMenuItem getWardTransferForInpatientEpisodeMaintenanceADDItem()
			{
				return this.contextMenuWardTransferForInpatientEpisodeMaintenanceADDItem;
			}
			private MenuItem contextMenuWardTransferForInpatientEpisodeMaintenanceADDItem;
			public ReadOnlyMenuItem getWardTransferForInpatientEpisodeMaintenanceEDITItem()
			{
				return this.contextMenuWardTransferForInpatientEpisodeMaintenanceEDITItem;
			}
			private MenuItem contextMenuWardTransferForInpatientEpisodeMaintenanceEDITItem;
			public ReadOnlyMenuItem getWardTransferForInpatientEpisodeMaintenanceRIEItem()
			{
				return this.contextMenuWardTransferForInpatientEpisodeMaintenanceRIEItem;
			}
			private MenuItem contextMenuWardTransferForInpatientEpisodeMaintenanceRIEItem;
			public final class ConsultantTransferForInpatientEpisodeMaintenance implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 6;
				public static final int EDIT = 7;
				public static final int RIE = 8;
			}
			public void disableAllConsultantTransferForInpatientEpisodeMaintenanceMenuItems()
			{
				this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceADDItem.setEnabled(false);
				this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceEDITItem.setEnabled(false);
				this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceRIEItem.setEnabled(false);
			}
			public void hideAllConsultantTransferForInpatientEpisodeMaintenanceMenuItems()
			{
				this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceADDItem.setVisible(false);
				this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceEDITItem.setVisible(false);
				this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceRIEItem.setVisible(false);
			}
			private Menu contextMenuConsultantTransferForInpatientEpisodeMaintenance;
			public ReadOnlyMenuItem getConsultantTransferForInpatientEpisodeMaintenanceADDItem()
			{
				return this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceADDItem;
			}
			private MenuItem contextMenuConsultantTransferForInpatientEpisodeMaintenanceADDItem;
			public ReadOnlyMenuItem getConsultantTransferForInpatientEpisodeMaintenanceEDITItem()
			{
				return this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceEDITItem;
			}
			private MenuItem contextMenuConsultantTransferForInpatientEpisodeMaintenanceEDITItem;
			public ReadOnlyMenuItem getConsultantTransferForInpatientEpisodeMaintenanceRIEItem()
			{
				return this.contextMenuConsultantTransferForInpatientEpisodeMaintenanceRIEItem;
			}
			private MenuItem contextMenuConsultantTransferForInpatientEpisodeMaintenanceRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[154];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.WardConsultantSpecialtyTransferVo", "BO-1014100005-ID", "ID_ConsultantStay");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-DISCHARGEDATETIME", "DischargeDateTime");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-ISACTIVE", "IsActive");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-DISCHARGEDESTINATION", "DischargeDestination");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-ADMISSIONTYPE", "AdmissionType");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-ADMISSIONDETAIL", "AdmissionDetail");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-WASTREATMENTDEFERRED", "WasTreatmentDeferred");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.InpatientEpisodeMaintenance.__internal_x_context__selectedDischargedEpisode_" + componentIdentifier, "BO-1014100006-DEREFERREDREASON", "DeferredReason");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
