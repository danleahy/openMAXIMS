//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5462.26911)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.forms.healthylodgerdetails;

import java.util.ArrayList;

import ims.core.vo.HealthyLodgerVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.NameType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		form.btnSave().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.btnCancel().setText(FormMode.EDIT.equals(form.getMode()) ? "Cancel" : "Close");
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getGlobalContext().Core.getHealthyLodgerDetails() != null && form.getGlobalContext().Core.getHealthyLodgerDetails().getID_HealthyLodgerIsNotNull());
		form.btnRemove().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getGlobalContext().Core.getHealthyLodgerDetails() != null && form.getGlobalContext().Core.getHealthyLodgerDetails().getID_HealthyLodgerIsNotNull());
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open(args);
	}
	private void open(Object[] args)
	{
		populateScreenFromData(form.getGlobalContext().Core.getHealthyLodgerDetails());
		form.setMode(FormMode.EDIT);
		if (args != null && args.length > 0 && args[0] instanceof FormMode)
			form.setMode((FormMode) args[0]);
		
	}
	private void populateScreenFromData(HealthyLodgerVo healthyLodgerDetails)
	{
		clearScreen();

		if (healthyLodgerDetails == null)
			return;

		if (healthyLodgerDetails.getNameIsNotNull())
		{	
			form.txtLodgerForename().setValue(healthyLodgerDetails.getName().getForename());
			form.txtLodgerMiddlename().setValue(healthyLodgerDetails.getName().getMiddleName());
			form.txtLodgerSurname().setValue(healthyLodgerDetails.getName().getSurname());
			form.cmbLodgerTitle().setValue(healthyLodgerDetails.getName().getTitle());
		}

		form.cmbLodgerRelationship().setValue(healthyLodgerDetails.getRelationshipToPatient());

	}
	private void clearScreen()
	{
		form.txtLodgerForename().setValue(null);
		form.txtLodgerMiddlename().setValue(null);
		form.txtLodgerSurname().setValue(null);
		form.cmbLodgerTitle().setValue(null);
		form.cmbLodgerRelationship().setValue(null);
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateUi())
		{
			form.getGlobalContext().Core.setHealthyLodgerDetails(populateDataFromScreen(form.getGlobalContext().Core.getHealthyLodgerDetails()));
			engine.close(DialogResult.OK);
		}
	}
	private boolean validateUi()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.txtLodgerSurname().getValue() == null)
			errors.add("Surname is mandatory.");
		if (form.cmbLodgerRelationship().getValue() == null)
			errors.add("Relationship to Patient is mandatory.");
		
		if (errors.size() > 0)
		{	
			engine.showErrors(errors.toArray(new String[errors.size()]));
			return false;
		}
		
		return true;
	}
	private HealthyLodgerVo populateDataFromScreen(HealthyLodgerVo healthyLodgerDetails)
	{
		if (healthyLodgerDetails == null)
			healthyLodgerDetails = new HealthyLodgerVo();
		healthyLodgerDetails.setRelationshipToPatient(form.cmbLodgerRelationship().getValue());
		healthyLodgerDetails.setName(populateLodgerNameDataFromScreen(healthyLodgerDetails));
		
		return healthyLodgerDetails;
		
	}
	private PersonName populateLodgerNameDataFromScreen(HealthyLodgerVo healthyLodgerDetails)
	{
		PersonName lodgerName = healthyLodgerDetails.getName() == null ? new PersonName() : (PersonName) healthyLodgerDetails.getName().clone();
		
		lodgerName.setSurname(form.txtLodgerSurname().getValue());
		lodgerName.setForename(form.txtLodgerForename().getValue());
		lodgerName.setMiddleName(form.txtLodgerMiddlename().getValue());
		lodgerName.setTitle(form.cmbLodgerTitle().getValue());
		lodgerName.setNameType(NameType.CURRENT);
		lodgerName.setUppers();
		
		return lodgerName;		
	}
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
	}
	@Override
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setHealthyLodgerDetails(null);
		engine.close(DialogResult.OK);		
	}
}
