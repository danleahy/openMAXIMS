//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.pendingemergencyadmissionrequest;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.PendingEmergencyAdmissionRequest.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.PendingEmergencyAdmissionRequest domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbPatientCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPatientCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientStatus existingInstance = (ims.core.vo.lookups.PatientStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatientStatus)
		{
			ims.core.vo.lookups.PatientStatus instance = (ims.core.vo.lookups.PatientStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientStatus existingInstance = (ims.core.vo.lookups.PatientStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPatientCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientCategoryLookup()
	{
		this.form.cmbPatientCategory().clear();
		ims.core.vo.lookups.PatientStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatientStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPatientCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientCategoryLookupValue(int id)
	{
		ims.core.vo.lookups.PatientStatus instance = ims.core.vo.lookups.LookupHelper.getPatientStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPatientCategory().setValue(instance);
	}
	protected final void defaultcmbPatientCategoryLookupValue()
	{
		this.form.cmbPatientCategory().setValue((ims.core.vo.lookups.PatientStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatientStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PatientStatus.TYPE_ID));
	}
	protected final void oncmbTransferReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTransferReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest existingInstance = (ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransferReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest)
		{
			ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest instance = (ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransferReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest existingInstance = (ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTransferReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransferReasonLookup()
	{
		this.form.cmbTransferReason().clear();
		ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequestCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTransferReasonForPendingEmergencyAdmissionRequest(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTransferReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransferReasonLookupValue(int id)
	{
		ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest instance = ims.core.vo.lookups.LookupHelper.getTransferReasonForPendingEmergencyAdmissionRequestInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTransferReason().setValue(instance);
	}
	protected final void defaultcmbTransferReasonLookupValue()
	{
		this.form.cmbTransferReason().setValue((ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest.class, engine.getFormName().getID(), ims.core.vo.lookups.TransferReasonForPendingEmergencyAdmissionRequest.TYPE_ID));
	}
	protected final void oncmbSourceOfReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSourceOfReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SourceOfEmergencyReferral existingInstance = (ims.core.vo.lookups.SourceOfEmergencyReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSourceOfReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.SourceOfEmergencyReferral)
		{
			ims.core.vo.lookups.SourceOfEmergencyReferral instance = (ims.core.vo.lookups.SourceOfEmergencyReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSourceOfReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SourceOfEmergencyReferral existingInstance = (ims.core.vo.lookups.SourceOfEmergencyReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSourceOfReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSourceOfReferralLookup()
	{
		this.form.cmbSourceOfReferral().clear();
		ims.core.vo.lookups.SourceOfEmergencyReferralCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSourceOfEmergencyReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSourceOfReferralLookupValue(int id)
	{
		ims.core.vo.lookups.SourceOfEmergencyReferral instance = ims.core.vo.lookups.LookupHelper.getSourceOfEmergencyReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSourceOfReferral().setValue(instance);
	}
	protected final void defaultcmbSourceOfReferralLookupValue()
	{
		this.form.cmbSourceOfReferral().setValue((ims.core.vo.lookups.SourceOfEmergencyReferral)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.SourceOfEmergencyReferral.class, engine.getFormName().getID(), ims.core.vo.lookups.SourceOfEmergencyReferral.TYPE_ID));
	}
	protected final void oncmbTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PendingEmergencyAdmissionType existingInstance = (ims.core.vo.lookups.PendingEmergencyAdmissionType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PendingEmergencyAdmissionType)
		{
			ims.core.vo.lookups.PendingEmergencyAdmissionType instance = (ims.core.vo.lookups.PendingEmergencyAdmissionType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PendingEmergencyAdmissionType existingInstance = (ims.core.vo.lookups.PendingEmergencyAdmissionType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTypeLookup()
	{
		this.form.cmbType().clear();
		ims.core.vo.lookups.PendingEmergencyAdmissionTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPendingEmergencyAdmissionType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PendingEmergencyAdmissionType instance = ims.core.vo.lookups.LookupHelper.getPendingEmergencyAdmissionTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbType().setValue(instance);
	}
	protected final void defaultcmbTypeLookupValue()
	{
		this.form.cmbType().setValue((ims.core.vo.lookups.PendingEmergencyAdmissionType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PendingEmergencyAdmissionType.class, engine.getFormName().getID(), ims.core.vo.lookups.PendingEmergencyAdmissionType.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.PendingEmergencyAdmissionRequest domain;
}
