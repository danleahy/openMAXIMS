//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.wardconsultantspecialtytransferdlg;


import ims.core.vo.ConsultantStayVo;
import ims.core.vo.ConsultantStayVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardConsultantSpecialtyTransferVo;
import ims.core.vo.WardStayVo;
import ims.core.vo.WardStayVoCollection;
import ims.core.vo.enums.WardConsultationSpecialtyTransfer;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int  WARD 			= 1;
	private static final int  CONSULTANT 	= 2;
	private static final int  SPECIALTY 	= 3;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
//		form.ccConsultant().isRequired(true);
		WardStayVo wardStay =null;
		ConsultantStayVo consultantStay = null;
		if(args[0] instanceof WardConsultationSpecialtyTransfer)
		{
			form.getLocalContext().setAction((WardConsultationSpecialtyTransfer) args[0]);
			//WDEV-23203
			form.dtimDateFrom().setRequired(WardConsultationSpecialtyTransfer.WARD.equals(form.getLocalContext().getAction()) || WardConsultationSpecialtyTransfer.CONSULTATION.equals(form.getLocalContext().getAction()));
			if(WardConsultationSpecialtyTransfer.CONSULTATION.equals(form.getLocalContext().getAction()))
				form.ccConsultant().initializeMedic(null, null);
			// end WDEV-23203
		}
		if(args.length>1&&args[1]!=null)
		{
			if(args[1] instanceof WardStayVo)
			{
				wardStay = (WardStayVo)args[1];
				form.getLocalContext().setWardStay(wardStay);
			}
			if(args[1] instanceof ConsultantStayVo)
			{
				consultantStay = (ConsultantStayVo)args[1];
				form.getLocalContext().setConsultantStay(consultantStay);
			}
		}
		if(args.length>2&&args[2]!=null)
		{
			if(args[2] instanceof WardStayVoCollection)
			{
				form.getLocalContext().setWardStays((WardStayVoCollection)args[2]);
			}
			if(args[2] instanceof ConsultantStayVoCollection)
			{
				form.getLocalContext().setConsultantStays((ConsultantStayVoCollection)args[2]);
			}
		}
		if (args.length > 3 && args[3] != null)
		{
			if (args[3] instanceof Boolean)
				form.getLocalContext().setbIsForDischargedEpisode((Boolean) args[3]);
		}
		if (args.length > 4 && args[4] != null)
		{
			if (args[4] instanceof DateTime)
				form.getLocalContext().setAdmissionDateTime((DateTime) args[4]);
		}
		open(consultantStay, wardStay);
	}
	private void open(ConsultantStayVo consultantStay,WardStayVo wardStay)
	{
		if (WardConsultationSpecialtyTransfer.WARD.equals(form.getLocalContext().getAction()))
		{
			form.lblHospital().setVisible(true);
			form.cmbHospital().setVisible(true);
			form.lblWard().setVisible(true);
			form.cmbWard().setVisible(true);
			form.lblConsultant().setVisible(false);
			form.ccConsultant().setVisible(false);
			form.lblSpecialty().setVisible(false);
			form.cmbSpecialty().setVisible(false);
			form.lblService().setVisible(true);
			form.cmbService().setVisible(true);
			form.dtimDateTo().setRequired(Boolean.TRUE.equals(form.getLocalContext().getbIsForDischargedEpisode()));
			populateHospitalCombo();
			populateServiceCombo();
			if (wardStay != null)
			{
				if (wardStay.getWard() != null)
				{	
					//WDEV-21215 - added Hospital combo
					LocationLiteVo hosp = domain.getParentHospital(wardStay.getWard());
					if (hosp != null && !form.cmbHospital().getValues().contains(hosp))
					{	
						form.cmbHospital().newRow(hosp, hosp.getName());
					}	
					form.cmbHospital().setValue(hosp);
					populateWardCombo();
					if (!form.cmbWard().getValues().contains(wardStay.getWard()))
					{		
						form.cmbWard().newRow(wardStay.getWard(), wardStay.getWard().getName());
					}
					form.cmbWard().setValue(wardStay.getWard());
				}
				form.dtimDateFrom().setValue(wardStay.getTransferDateTime());
				form.dtimDateTo().setValue(wardStay.getTransferOutDateTime());
				form.cmbCategory().setValue(wardStay.getPatientStatus());
				if (wardStay.getService() != null)
				{
					form.cmbService().newRow(wardStay.getService(), wardStay.getService().getServiceName());
					form.cmbService().setValue(wardStay.getService());
				}
			}

			
		}
		else if( WardConsultationSpecialtyTransfer.CONSULTATION.equals(form.getLocalContext().getAction()) )
		{
			form.lblHospital().setVisible(false);
			form.cmbHospital().setVisible(false);
			form.lblWard().setVisible(false);
			form.cmbWard().setVisible(false);
			form.lblConsultant().setVisible(true);
			form.ccConsultant().setVisible(true);
			
			form.lblSpecialty().setVisible(true);
			form.cmbSpecialty().setVisible(true);
			
			form.lblService().setVisible(true);
			form.cmbService().setVisible(true);
		
			
			form.lblCategory().setVisible(true);
			form.cmbCategory().setVisible(true);
			form.dtimDateTo().setRequired(Boolean.TRUE.equals(form.getLocalContext().getbIsForDischargedEpisode())); //WDEV-23203
			populateServiceCombo();
			if (consultantStay != null)
			{
				form.ccConsultant().setValue(consultantStay.getConsultant());
				form.dtimDateFrom().setValue(consultantStay.getTransferDateTime());
				form.dtimDateTo().setValue(consultantStay.getEndDateTime());
				if (consultantStay.getService() != null)
				{
					form.cmbService().newRow(consultantStay.getService(),consultantStay.getService().getServiceName());
					form.cmbService().setValue(consultantStay.getService());
				}
				if (consultantStay.getSpecialty() != null)
				{	
					form.cmbSpecialty().newRow(consultantStay.getSpecialty(),consultantStay.getSpecialty().getText());	
					form.cmbSpecialty().setValue(consultantStay.getSpecialty());
				}
				form.cmbCategory().setValue(consultantStay.getPatientStatus());
				
			}
		}
		else if( WardConsultationSpecialtyTransfer.SPECIALTY.equals(form.getLocalContext().getAction()) )
		{
			form.lblWard().setVisible(false);
			form.cmbWard().setVisible(false);
			form.lblConsultant().setVisible(false);
			form.ccConsultant().setVisible(false);
			form.lblSpecialty().setVisible(true);
			form.cmbSpecialty().setVisible(true);
		}
		
	}
	private void bindSpecialty(ServiceLiteVo value)
	{
		form.cmbSpecialty().clear();
		if (value == null)
			return;
		if (value.getSpecialtyIsNotNull())
		{	
			form.cmbSpecialty().newRow(value.getSpecialty(), value.getSpecialty().getText());
			form.cmbSpecialty().setValue(value.getSpecialty());
		}		
	}
	private void populateWardCombo()
	{
		form.cmbWard().clear();
		if (form.cmbHospital().getValue() == null)
			return;
		LocationLiteVoCollection temColl = domain.listWardsForHospital(form.cmbHospital().getValue());
		if (temColl != null && temColl.size() > 0 )
		{
			for(int i = 0; i < temColl.size();i++)
			{
				form.cmbWard().newRow(temColl.get(i),temColl.get(i).getName());
			}
			if( temColl.size() == 1 )
			{
				form.cmbWard().setValue(temColl.get(0));
			}
		}
	}
	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();
		LocationLiteVoCollection temColl = domain.listActiveHospitals();
		if( temColl != null && temColl.size() > 0 )
		{
			for(int i = 0; i < temColl.size();i++)
			{
				form.cmbHospital().newRow(temColl.get(i),temColl.get(i).getName());
			}
			if( temColl.size() == 1 )
			{
				form.cmbHospital().setValue(temColl.get(0));
			}
		}
	}
	private void populateServiceCombo()
	{
		form.cmbService().clear();
		ServiceLiteVoCollection temColl = domain.listServices();
		if( temColl != null && temColl.size() > 0 )
		{
			for(int i = 0; i < temColl.size();i++)
			{
				form.cmbService().newRow(temColl.get(i),temColl.get(i).getServiceName());
			}
			if( temColl.size() == 1 )
			{
				form.cmbService().setValue(temColl.get(0));
			}
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WardConsultantSpecialtyTransferVo tempVo = new WardConsultantSpecialtyTransferVo();
		tempVo.setDateFrom(form.dtimDateFrom().getValue());
		tempVo.setDateTo(form.dtimDateTo().getValue());
		
		if( WardConsultationSpecialtyTransfer.WARD.equals(form.getLocalContext().getAction()) )
		{
			tempVo.setWard(form.cmbWard().getValue());
			tempVo.setAction(WARD);
			tempVo.setCategory(form.cmbCategory().getValue());
			tempVo.setService(form.cmbService().getValue());
			String overlappingStayMessage = checkForOverLappingWardStay(tempVo,form.getLocalContext().getWardStays());
			if(null!=overlappingStayMessage)
			{
				engine.showMessage(overlappingStayMessage);
				return;
			}
			if(form.cmbHospital().getValue() == null)//WDEV-23057
			{
				engine.showMessage("Hospital is mandatory.");
				return;
			}
			if(form.cmbWard().getValue() == null)
			{
				engine.showMessage("Ward is mandatory.");//WDEV-23057
				return;
			}
			if(form.dtimDateFrom().getValue() == null)
			{
				engine.showMessage("Date From is mandatory.");//WDEV-23057
				return;
			}	
			
		}
		else if( WardConsultationSpecialtyTransfer.CONSULTATION.equals(form.getLocalContext().getAction()) )
		{
			IMos iConsultant = form.ccConsultant().getValue();
			MedicVo medic = domain.getMedicVoFromIMos(iConsultant);
			tempVo.setConsultant(medic);
			tempVo.setAction(CONSULTANT);
			tempVo.setSpecialty(form.cmbSpecialty().getValue());
			tempVo.setService(form.cmbService().getValue());
			tempVo.setCategory(form.cmbCategory().getValue());
			String overlappingStayMessage = checkForOverLappingConsultantStay(tempVo,form.getLocalContext().getConsultantStays());
			//WDEV-23203
			if (form.dtimDateFrom().getValue() == null)
			{
				engine.showMessage("Date From is mandatory.");
				return;
			}
			// end WDEV-23203
			if(null!=overlappingStayMessage)
			{
				engine.showMessage(overlappingStayMessage);
				return;
			}
			if(tempVo.getDateFrom()==null&&tempVo.getDateTo()==null&&tempVo.getConsultant()==null&&tempVo.getService()==null&&tempVo.getSpecialty()==null&&tempVo.getCategory()==null)
			{
				engine.showMessage("At least one field should be populated before saving stay");
				return;
			}
			
		}
		else if( WardConsultationSpecialtyTransfer.SPECIALTY.equals(form.getLocalContext().getAction()) )
		{
			tempVo.setSpecialty(form.cmbSpecialty().getValue());
			tempVo.setAction(SPECIALTY);
		}
		
		if (form.getLocalContext().getAdmissionDateTimeIsNotNull() && (form.getLocalContext().getWardStay() == null || form.getLocalContext().getConsultantStay() == null)  && tempVo.getDateFromIsNotNull() && tempVo.getDateFrom().isLessThan(form.getLocalContext().getAdmissionDateTime()))
		{
			engine.showMessage("Date From cannot be earlier than Admission Date of the episode.");
			return;
		}
		if (form.getLocalContext().getAdmissionDateTimeIsNotNull() && (form.getLocalContext().getWardStay() == null || form.getLocalContext().getConsultantStay() == null) && tempVo.getDateToIsNotNull() && tempVo.getDateTo().isLessThan(form.getLocalContext().getAdmissionDateTime()))
		{
			engine.showMessage("Date To cannot be earlier than Admission Date of the episode.");
			return;
		}
		if (Boolean.TRUE.equals(form.getLocalContext().getbIsForDischargedEpisode()) && tempVo.getDateTo() == null)
		{
			engine.showMessage("Date To is mandatory for discharged episodes.");
			return;
		}
		if(tempVo.getDateToIsNotNull()&&tempVo.getDateFromIsNotNull()&&tempVo.getDateTo().isLessOrEqualThan(tempVo.getDateFrom()))
		{
			engine.showMessage("Date To must be later than Date From");
			return;
		}
		
		form.getGlobalContext().Core.setWardConsultantSpecialtyTransferVo(tempVo);
		engine.close(DialogResult.OK);
	}
	
	private String checkForOverLappingWardStay(WardConsultantSpecialtyTransferVo wardConsultantSpecialtyTransferVo,WardStayVoCollection stays)
	{
		if(stays!=null
				&&wardConsultantSpecialtyTransferVo!=null)
		{
			for (WardStayVo wardStayVo : stays) {
				if(wardStayVo!=null&&wardStayVo.getID_WardStay()!=null
						&&form.getLocalContext().getWardStayIsNotNull()&&form.getLocalContext().getWardStay()!=null
						&&wardStayVo.getID_WardStay()!=form.getLocalContext().getWardStay().getID_WardStay())
				{
					if(wardStayVo.getTransferDateTimeIsNotNull()&&wardStayVo.getTransferOutDateTimeIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateFromIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateFrom().isGreaterThan(wardStayVo.getTransferDateTime())
							&&wardConsultantSpecialtyTransferVo.getDateFrom().isLessThan(wardStayVo.getTransferOutDateTime()))
					{
						return "From Date overlaps with existing stay";
					}
					if(wardStayVo.getTransferDateTimeIsNotNull()&&wardStayVo.getTransferOutDateTimeIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateToIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateTo().isGreaterThan(wardStayVo.getTransferDateTime())
							&&wardConsultantSpecialtyTransferVo.getDateTo().isLessThan(wardStayVo.getTransferOutDateTime()))
		
					{
						return "To Date overlaps with existing stay";
					}
				}
			}
		}
		return null;
	}

	private String checkForOverLappingConsultantStay(WardConsultantSpecialtyTransferVo wardConsultantSpecialtyTransferVo,ConsultantStayVoCollection stays)
	{
		if(stays!=null)
		{
			for (ConsultantStayVo stayVo : stays) {
				if(stayVo!=null&&stayVo.getID_ConsultantStay()!=null
						&&form.getLocalContext().getWardStayIsNotNull()&&form.getLocalContext().getWardStay()!=null
						&&stayVo.getID_ConsultantStay()!=form.getLocalContext().getWardStay().getID_WardStay())
				{
					if(stayVo.getTransferDateTimeIsNotNull()&&stayVo.getEndDateTimeIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateFromIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateFrom().isGreaterThan(stayVo.getTransferDateTime())
							&&wardConsultantSpecialtyTransferVo.getDateFrom().isLessThan(stayVo.getEndDateTime()))
					{
						return "From Date overlaps with existing stay";
					}
					if(stayVo.getTransferDateTimeIsNotNull()&&stayVo.getEndDateTimeIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateToIsNotNull()
							&&wardConsultantSpecialtyTransferVo.getDateTo().isGreaterThan(stayVo.getTransferDateTime())
							&&wardConsultantSpecialtyTransferVo.getDateTo().isLessThan(stayVo.getEndDateTime()))
		
					{
						return "To Date overlaps with existing stay";
					}
				}
			}
		}
		return null;
	}
	@Override
	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		if (!WardConsultationSpecialtyTransfer.WARD.equals(form.getLocalContext().getAction()))
		{
			bindSpecialty(form.cmbService().getValue());
		}		
	}
	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		populateWardCombo();
		
	}
	
}
