//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseBedAdmissionComponentImpl extends DomainImpl implements ims.core.domain.BedAdmissionComponent, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validatelistPendingElectiveAdmission(ims.core.resource.place.vo.LocationRefVo voLocation)
	{
	}

	@SuppressWarnings("unused")
	public void validatesaveAdmissionAndUpdateList(ims.core.vo.AdmissionDetailVo admissionDetail, ims.core.vo.BedSpaceStateLiteVo voBedSpaceState, ims.core.vo.CareSpellAdmitVo careSpell, ims.core.vo.CatsReferralEmergencyAdmissionVo referral, ims.core.vo.WardStayVo wardStay, ims.core.vo.ConsultantStayVo voConsStay, ims.core.vo.PendingElectiveAdmissionAdmitVo voElective, ims.core.vo.PendingEmergencyAdmissionAdmitVo voEmergency, ims.core.vo.PendingElectiveAdmissionAdmitVo voTCIMaternity, ims.core.vo.CatsReferralPendingEmergencyNonEDAdmissionListVo pendingEmergencyAdmission, ims.core.vo.enums.AdmissionType admitType, ims.core.vo.AdmissionReasonVo admissionReasonVo, ims.core.vo.WardMixedSexBreachVo wardMixedSexBreachVo, ims.core.admin.pas.vo.WardBayConfigRefVo wardbayConfigRef, ims.core.vo.PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistEmergencyAdmission(ims.core.resource.place.vo.LocationRefVo location)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistPlannedElectiveAdmission(ims.framework.utils.Date dateFrom, ims.framework.utils.Date dateTo, ims.core.resource.place.vo.LocationRefVo ward)
	{
	}

	@SuppressWarnings("unused")
	public void validatesearchPatients(ims.core.vo.PatientFilter filter)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistWaitingAreaPatientsByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
	}

	@SuppressWarnings("unused")
	public void validategetAdmissionDetailByPasEvent(ims.core.admin.pas.vo.PASEventRefVo pasEvent)
	{
		if(pasEvent == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'pasEvent' of type 'ims.core.admin.pas.vo.PASEventRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validateallocateBed(ims.core.vo.BedSpaceStateLiteVo bedSpace, ims.core.vo.InpatientEpisodeLiteVo inpatientEpisode, ims.core.vo.AdmissionDetailVo admissionDetail, ims.core.vo.HomeLeaveVo voHomeLeave, ims.core.vo.AdmissionReasonVo admissionReasonVo, ims.core.vo.WardMixedSexBreachVo wardMixedSexBreachVo)
	{
		if(bedSpace == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'bedSpace' of type 'ims.core.vo.BedSpaceStateLiteVo' cannot be null.");
		if(inpatientEpisode == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'inpatientEpisode' of type 'ims.core.vo.InpatientEpisodeLiteVo' cannot be null.");
		if(admissionDetail == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'admissionDetail' of type 'ims.core.vo.AdmissionDetailVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatelistSpecialtiesFromConSpc(String consultantMapping)
	{
		if(consultantMapping == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'consultantMapping' of type 'String' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPasMappingFromConsultant(ims.vo.interfaces.IMos mos)
	{
		if(mos == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'mos' of type 'ims.vo.interfaces.IMos' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatecheckForPatientAlreadyAdmited(ims.core.patient.vo.PatientRefVo voPatient)
	{
		if(voPatient == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'voPatient' of type 'ims.core.patient.vo.PatientRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatient(ims.core.vo.PatientShort patient)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistOpenEpisodesForPatient(ims.core.patient.vo.PatientRefVo patient)
	{
		if(patient == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patient' of type 'ims.core.patient.vo.PatientRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetSpecialtyMappingFromPASSpecialty(String szMapping)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistCCOSpecialtiesFromConSpc(String consultantMapping)
	{
		if(consultantMapping == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'consultantMapping' of type 'String' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPASSpecialtyMappingFromSpecialty(String szMapping)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCCOSpecialtyMappingFromPASSpecialty(ims.core.vo.lookups.PASSpecialty pasSpecialty)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistHomeLeavesByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasHomeLeavesByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
	}

	@SuppressWarnings("unused")
	public void validategetInpatientEpisode(ims.core.admin.pas.vo.InpatientEpisodeRefVo inpatientRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetBedSpaceState(ims.core.admin.pas.vo.BedSpaceStateRefVo bedRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistPatientElective(ims.core.resource.place.vo.LocationRefVo ward, ims.framework.utils.Date fromDate, ims.framework.utils.Date toDate, ims.core.resource.place.vo.LocationRefVo hospital)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientElectiveAdmission(ims.RefMan.vo.PatientElectiveListRefVo patientElectiveLlist)
	{
	}

	@SuppressWarnings("unused")
	public void validatesaveTCIAdmissionAndUpdateList(ims.RefMan.vo.PatientElectiveListBedAdmissionVo electiveAdmission, ims.core.vo.BedSpaceStateLiteVo bedSpaceState, ims.core.vo.WardStayVo wardStay, ims.core.vo.ConsultantStayVo consultant, ims.core.vo.AdmissionReasonVo admissionReasonVo, ims.core.vo.WardMixedSexBreachVo wardMixedSexBreachVo, ims.core.admin.pas.vo.WardBayConfigRefVo wardbayCfgRef, ims.core.vo.PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientShort(ims.core.patient.vo.PatientRefVo patient)
	{
	}

	@SuppressWarnings("unused")
	public void validategetMedic(ims.core.resource.people.vo.HcpRefVo hcp)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasPatientElectiveListToCancel(ims.core.patient.vo.PatientRefVo patient, ims.RefMan.vo.PatientElectiveListRefVo electiveElist, ims.core.clinical.vo.ServiceRefVo service)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientElectiveListToCancel(ims.core.patient.vo.PatientRefVo patient, ims.RefMan.vo.PatientElectiveListRefVo electiveElist, ims.core.clinical.vo.ServiceRefVo service)
	{
	}

	@SuppressWarnings("unused")
	public void validateisPatientAnInpatient(ims.core.patient.vo.PatientRefVo patient)
	{
	}

	@SuppressWarnings("unused")
	public void validategetHcpFromIMos(ims.vo.interfaces.IMos iMos)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCodeCCGFromPostalCode(String postCode)
	{
	}

	@SuppressWarnings("unused")
	public void validategetContractByCCG(String codeCCG)
	{
	}

	@SuppressWarnings("unused")
	public void validategetServicesBySpecialty(ims.core.vo.lookups.Specialty specialty)
	{
	}

	@SuppressWarnings("unused")
	public void validatesaveEmergencyAdmissionInElectiveCase(ims.core.vo.AdmissionDetailVo admission, ims.core.vo.CareSpellVo careSpell, ims.core.vo.CatsReferralEmergencyAdmissionVo catsReferral, ims.core.vo.BedSpaceStateLiteVo bedSpaceState, ims.core.vo.WardStayVo wardStay, ims.core.vo.ConsultantStayVo consultant, ims.core.vo.AdmissionReasonVo admissionReasonVo, ims.core.vo.WardMixedSexBreachVo wardMixedSexBreachVo, ims.core.admin.pas.vo.WardBayConfigRefVo wardbayCfg, ims.core.vo.PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer)
	{
	}

	@SuppressWarnings("unused")
	public void validategetHospitalLoc(ims.core.resource.place.vo.LocationRefVo locRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasPatientAppointmentsWithinNextMonth(ims.core.patient.vo.PatientRefVo patient)
	{
	}

	@SuppressWarnings("unused")
	public void validatecreateCaseNoteRequests(ims.RefMan.vo.PatientElectiveListRefVo patientElectiveList)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasPatientTCIForSameService(ims.core.patient.vo.PatientRefVo patientRef, ims.core.clinical.vo.ServiceRefVo serviceRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetContractServiceLocConf(ims.core.configuration.vo.ContractConfigRefVo contractRef, ims.core.clinical.vo.ServiceRefVo serviceRef)
	{
	}

	@SuppressWarnings("unused")
	public void validateupdateOccupiedBedsForWardAndBay(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bayOne, ims.core.resource.place.vo.LocationRefVo bayTwo)
	{
	}

	@SuppressWarnings("unused")
	public void validategetBayConfig(ims.core.resource.place.vo.LocationRefVo bayRef)
	{
	}

	@SuppressWarnings("unused")
	public void validateautomaticDischarge(ims.core.admin.pas.vo.PendingEmergencyAdmissionRefVo pendingEmergencyAdmission, ims.framework.utils.DateTime admissionDateTime, ims.core.vo.HcpLiteVo consultant)
	{
	}

	@SuppressWarnings("unused")
	public void validategetTrackingForPendingEmergency(ims.core.admin.pas.vo.PendingEmergencyAdmissionRefVo pendingEmergency)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistWardAttenders(ims.core.resource.place.vo.LocationRefVo ward, ims.framework.utils.Date date)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasPatientActiveSelfAdmitAlert(ims.core.patient.vo.PatientRefVo patientRefVo)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCaseNoteFolders(ims.core.patient.vo.PatientRefVo patientRef, ims.core.resource.place.vo.LocationRefVo locationRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistServices(String value)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistMedicsForService(ims.core.clinical.vo.ServiceRefVo service, String name)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistPendingEmergencies(ims.framework.utils.Date dteFrom, ims.framework.utils.Date dteTo, ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo hospital)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPendingEmergencyAdmission(ims.RefMan.vo.CatsReferralRefVo pendingEmergency)
	{
	}

	@SuppressWarnings("unused")
	public void validatecancelHomeLeave(ims.core.vo.BedSpaceStateLiteVo voBedSpaceState, ims.core.vo.InpatientEpisodeLiteVo voInpEpis)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasPatientTCIWithinNextMonth(ims.core.patient.vo.PatientRefVo patientRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistPendingEmergencyTheatreRecords(ims.framework.utils.Date dteFrom, ims.framework.utils.Date dteTo, ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo hospital)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCareSpellForAdmission(ims.core.admin.vo.CareContextRefVo careContext)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCareSpellForAdmission(ims.RefMan.vo.CatsReferralRefVo referral)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCareSpellForAdmission(ims.scheduling.vo.Booking_AppointmentRefVo appointment)
	{
	}

	@SuppressWarnings("unused")
	public void validategetReferralForAdmission(ims.RefMan.vo.CatsReferralRefVo referral)
	{
	}

	@SuppressWarnings("unused")
	public void validategetReferralForAdmission(ims.scheduling.vo.Booking_AppointmentRefVo appointment)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientForCCG(ims.core.patient.vo.PatientRefVo patientRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatient(ims.core.patient.vo.PatientRefVo ref)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCareContextShort(ims.core.patient.vo.PatientRefVo patRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCCGCodeForCurrentLocationOrg(ims.framework.interfaces.ILocation iCurrentLoc)
	{
	}

	@SuppressWarnings("unused")
	public void validatecreateCaseNoteFolderIfNone(ims.core.patient.vo.PatientRefVo patient)
	{
	}

	@SuppressWarnings("unused")
	public void validatereturnFromHomeLeaveToWardWaitingArea(ims.core.vo.InpatientEpisodeLiteVo inpatientEpisode, ims.core.vo.AdmissionDetailVo admissionDetail, ims.core.vo.HomeLeaveVo voHomeLeave)
	{
		if(inpatientEpisode == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'inpatientEpisode' of type 'ims.core.vo.InpatientEpisodeLiteVo' cannot be null.");
		if(admissionDetail == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'admissionDetail' of type 'ims.core.vo.AdmissionDetailVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetAdmissionDetails(ims.core.admin.pas.vo.AdmissionDetailRefVo admissionDetailsRef)
	{
	}

	@SuppressWarnings("unused")
	public void validateupdateAdmissionDetailWithHealthyLodgerInfo(ims.core.vo.AdmissionDetailVo admissionDetailToSave, ims.core.vo.HealthyLodgerVo healthyLodgerDetails)
	{
	}

	@SuppressWarnings("unused")
	public void validateisCaseNoteFolderLocation(ims.core.patient.vo.PatientRefVo patientRef)
	{
	}
}
