//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.domain.BedAdmissionComponent;
import ims.core.domain.BedInfoDialog;
import ims.core.domain.WardViewPatientSummaryComponent;
import ims.core.domain.base.impl.BaseAssignBedToHomeLeaveInpatientImpl;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.WardConfigLiteVo;
import ims.core.vo.domain.AdmissionDetailVoAssembler;
import ims.core.vo.domain.BedSpaceStateLiteVoAssembler;
import ims.core.vo.domain.InpatientEpisodeLiteVoAssembler;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;

import java.util.List;

public class AssignBedToHomeLeaveInpatientImpl extends BaseAssignBedToHomeLeaveInpatientImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.BedSpaceStateLiteVoCollection listAvailableBedSpaces(ims.core.resource.place.vo.LocationRefVo wardRef)
	{
		if (wardRef == null)
			return null;
		
		StringBuilder hql = new StringBuilder();
		DomainFactory factory = getDomainFactory();
		hql.append("select bedspacest from BedSpaceState as bedspacest left join bedspacest.ward as ward left join bedspacest.bay as bay left join bedspacest.currentBedStatus as currentStatus left join currentStatus.bedStatus as status where ward.id = :WARD_ID and status.id = :AVAILABLE_BED_STATUS and bay.isActive = :IS_ACTIVE AND bay.id in (select bayloc.id from BayConfig bconfig left join bconfig.bay as bayloc left join bconfig.floorBedSpaceLayout as flayout left join flayout.status as stat where stat.id = :STATUS_ID) ");
		
		List<?> recordList = factory.find(hql.toString(), new String[]{"WARD_ID", "AVAILABLE_BED_STATUS", "IS_ACTIVE", "STATUS_ID"}, new Object[]{wardRef.getID_Location(),BedStatus.AVAILABLE.getID(), Boolean.TRUE,PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if (recordList == null || recordList.isEmpty())
			return null;
		
		return BedSpaceStateLiteVoAssembler.createBedSpaceStateLiteVoCollectionFromBedSpaceState(recordList);
	}

	public ims.core.vo.AdmissionDetailVo getAdmissionDetail(ims.core.admin.pas.vo.PASEventRefVo pasEventRef)
	{
		if (pasEventRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		
		return AdmissionDetailVoAssembler.create((AdmissionDetail) factory.findFirst("select adm from AdmissionDetail adm left join adm.pasEvent as pevent where pevent.id = :PASEVENT_ID", "PASEVENT_ID", pasEventRef.getID_PASEvent()));
	}

	/**
	* returnFromLeaveToBed
	*/
	public void returnFromLeaveToBed(ims.core.vo.BedSpaceStateLiteVo voBedSpaceState, ims.core.vo.InpatientEpisodeLiteVo voInpat, ims.core.vo.AdmissionDetailVo voAdmission, ims.core.vo.HomeLeaveVo voHomeLeave, ims.core.vo.AdmissionReasonVo voAdmissionReason, ims.core.vo.WardMixedSexBreachVo voWardMixedBreached) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		BedAdmissionComponent bedAdmissionImpl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		bedAdmissionImpl.allocateBed(voBedSpaceState, voInpat, voAdmission, voHomeLeave, voAdmissionReason, voWardMixedBreached);
	}

	public ims.core.vo.InpatientEpisodeLiteVo getInpatientEpisodeLite(ims.core.admin.pas.vo.InpatientEpisodeRefVo voInpat)
	{
		if (voInpat == null)
			return null;
		return InpatientEpisodeLiteVoAssembler.create((InpatientEpisode) getDomainFactory().getDomainObject(InpatientEpisode.class, voInpat.getID_InpatientEpisode()));
	}
	
	public WardConfigLiteVo getWardConfig(LocationRefVo selectedWardRef)
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.getWardConfig(selectedWardRef);
	}

	public Integer countMaleInpatients(LocationRefVo ward, LocationRefVo bay)
	{
		WardViewPatientSummaryComponent wardSummaryImpl = (WardViewPatientSummaryComponent) getDomainImpl(WardViewPatientSummaryComponentImpl.class);
		return wardSummaryImpl.countMalePatientsOnTheWard(ward, bay);
	}
	
	public Integer countFemaleInpatients(LocationRefVo ward, LocationRefVo bay)
	{
		WardViewPatientSummaryComponent wardSummaryImpl = (WardViewPatientSummaryComponent) getDomainImpl(WardViewPatientSummaryComponentImpl.class);
		return wardSummaryImpl.countFemalePatientsOnTheWard(ward, bay);
	}
}
