//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.RefMan.domain.objects.CATSReferralStatus;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.domain.CatsReferralStatusVoAssembler;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.core.admin.pas.domain.objects.PendingNoEDEmergencyAdmit;
import ims.core.domain.base.impl.BaseCancelPendingAdmissionReasonImpl;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.CatsReferralRepatriationForCancellationVo;
import ims.core.vo.PendingEmergencyAdmissionCancellationVo;
import ims.core.vo.PendingEmergencyAdmissionStatusVo;
import ims.core.vo.lookups.CancelPendingAdmissionReason;
import ims.core.vo.lookups.PendingAdmissionStatus;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.core.vo.domain.CatsReferralRepatriationForCancellationVoAssembler;
import ims.core.vo.domain.PendingEmergencyAdmissionCancellationVoAssembler;
import ims.domain.DomainObject;
import ims.domain.exceptions.StaleObjectException;

public class CancelPendingAdmissionReasonImpl extends BaseCancelPendingAdmissionReasonImpl
{

	private static final long serialVersionUID = 1L;

	
	@Override
	public Boolean cancelPendingAdmissionRequest(CatsReferralRefVo pendingEmergencyAdmission,CancelPendingAdmissionReason cancelReason, String cancelComment, MemberOfStaffRefVo mosUser) throws StaleObjectException 
	{
		if (pendingEmergencyAdmission == null || pendingEmergencyAdmission.getID_CatsReferral() == null)
			throw new CodingRuntimeException("The referral must exist and recorded.");
		DomainObject domainObject = getDomainFactory().getDomainObject(CatsReferral.class, pendingEmergencyAdmission.getID_CatsReferral()); 
		
		CatsReferral domCatsReferral = (CatsReferral) domainObject;
		
		CatsReferralRepatriationForCancellationVo referralForCancellation = CatsReferralRepatriationForCancellationVoAssembler.create(domCatsReferral);
		
		
		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
		
		currentStatus.setReferralStatus(ReferralApptStatus.REFERRAL_REJECTED);
		currentStatus.setAuthoringUser(mosUser);
		currentStatus.setStatusDateTime(new DateTime());
		
		PendingEmergencyAdmissionCancellationVo repatriationRequest = referralForCancellation.getRepatriationRequest();
		
		PendingEmergencyAdmissionStatusVo status = new PendingEmergencyAdmissionStatusVo();
		status.setStatus(PendingAdmissionStatus.CANCELLED);
		status.setCancelReason(cancelReason);
		status.setCancelReasonComment(cancelComment);
		
		repatriationRequest.setCurrentStatus(status);
		
		PendingNoEDEmergencyAdmit domPendingEmergencyAdmission = PendingEmergencyAdmissionCancellationVoAssembler.extractPendingNoEDEmergencyAdmit(getDomainFactory(), repatriationRequest);
		
		CATSReferralStatus extractCATSReferralStatus = CatsReferralStatusVoAssembler.extractCATSReferralStatus(getDomainFactory(),currentStatus );
		domCatsReferral.setCurrentStatus(extractCATSReferralStatus);
		domCatsReferral.getStatusHistory().add(extractCATSReferralStatus);
		domCatsReferral.setRepatriationRequest(domPendingEmergencyAdmission);
		getDomainFactory().save(domCatsReferral);

		return Boolean.TRUE;
	}
}
