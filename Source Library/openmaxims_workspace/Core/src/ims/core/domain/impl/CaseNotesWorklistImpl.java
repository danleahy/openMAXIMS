//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.domain.objects.PatientCaseNote;
import ims.core.clinical.domain.objects.PatientCaseNoteRequest;
import ims.core.clinical.vo.PatientCaseNoteRequestRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.domain.PatientCaseNotes;
import ims.core.domain.base.impl.BaseCaseNotesWorklistImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CaseNoteForWorklistVo;
import ims.core.vo.CaseNoteForWorklistVoCollection;
import ims.core.vo.CaseNoteRequestForWorklistVo;
import ims.core.vo.CaseNoteWorklistSearchCriteriaVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.CaseNoteForWorklistVoAssembler;
import ims.core.vo.domain.CaseNoteRequestForWorklistVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.CaseNoteReasonForRequest;
import ims.core.vo.lookups.CaseNoteRequestCancellationReason;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.domain.ProfileLiteVoAssembler;
import ims.scheduling.vo.lookups.SchProfileType;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;



public class CaseNotesWorklistImpl extends BaseCaseNotesWorklistImpl
{
	private static final long serialVersionUID = 1L;

	private static final int TAB_CASE_NOTE_REQUESTS = 1;
	private static final int TAB_CASE_NOTE_BY_LOCATION = 2;
	
	private static final int CASE_NOTE_IN_LOCATION = 1;
	private static final int OPEN_REQUESTS_IN_LOCATION = 2;
	private static final int OPEN_REQUESTS_FOR_CASE_NOTE_IN_LOCATIION = 3;

	
	public PatientShort getPatientShort(PatientRefVo patient)
	{
		if (patient == null || patient.getID_Patient() == null)
			return null;
		
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patient.getID_Patient()));
	}

	
	public LocationLiteVoCollection listHospitals()
	{
		OrganisationAndLocation orgLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLoc.listActiveHospitalsLite();
	}
	

	public ProfileLiteVoCollection listClinicsForHospital(LocationRefVo hospital, String name)
	{
		if (hospital == null || hospital.getID_Location() == null)
			return null;
		//http://jira/browse/WDEV-21222
		OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class); 
		String ids = impl.getChildLocationsIdsForLocation(hospital.getBoId(), null, Boolean.TRUE, Boolean.FALSE);
		
		StringBuilder query = new StringBuilder("SELECT profile");
		query.append(" FROM Sch_Profile AS profile LEFT JOIN profile.schLocation AS loc ");
		query.append(" WHERE");
		query.append(" loc.id in ( " + ids + " ) AND (profile.profileType.id = :OUTPATIENT_PROFILE) AND (profile.isActive = :isActive) AND (profile.caseNoteFolderLocation != null)");
		
		//WDEV-21735
		if (name != null)
		{
			query.append(" AND UPPER(profile.name) like :NAME");
		}
		
		query.append(" ORDER BY profile.name ASC");   //wdev-20063
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("OUTPATIENT_PROFILE");
		paramValues.add(SchProfileType.OUTPATIENT.getID());
		paramNames.add("isActive");//wdev-20063
		paramValues.add(Boolean.TRUE);//wdev-20063
		
		//WDEV-21735 
		if (name != null)
		{
			paramNames.add("NAME");
			paramValues.add(getNameStr(name, true)); //WDEV-22880
		}
		
		return ProfileLiteVoAssembler.createProfileLiteVoCollectionFromSch_Profile(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}
	
//	private String getLocationsIdsForHospital(LocationRefVo hospital)
//	{
//		DomainFactory factory = getDomainFactory();
//		Location doLocation = (Location) factory.getDomainObject(Location.class, hospital.getID_Location());
//
//		ArrayList<Location> locations = new ArrayList<Location>();
//		buildLocationsList(doLocation, locations);
//		
//		String ids = "";
//		
//		for (int i = 0; i < locations.size(); i++)
//		{
//
//			if (locations.get(i) == null || locations.get(i).getId() == null)
//				continue;
//
//			if (ids == "")
//				ids += locations.get(i).getId().toString();
//			else
//				ids += ", " + locations.get(i).getId().toString();
//
//		}	
//		
//		return ids;
//	}

//	private void buildLocationsList(Location location, ArrayList<Location> listItems)
//	{
//		if (Boolean.TRUE.equals(location.isIsActive()) && Boolean.FALSE.equals(location.isIsVirtual()))
//		{
//			listItems.add(location);
//		}
//		
//		Iterator<?> it = location.getLocations().iterator();
//		
//		while (it.hasNext())
//		{
//			Location doLocation = (Location) it.next();
//			buildLocationsList(doLocation, listItems);
//		}
//	}

	public LocationLiteVoCollection listCaseNoteLocation(LocationRefVo hospital, String name)
	{
		if(name != null)
		{
			name = name.replace("%", "");
			
			if(name.length() == 0)
				name = "%";
		}
		
		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location) factory.getDomainObject(Location.class, hospital.getID_Location());
		ArrayList listItems = new ArrayList();
		
		buildLocation(doLocation, listItems, name);
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(listItems).sort();
	}
	
	private void buildLocation(Location location, ArrayList<Location> listItems, String name)
	{
		Iterator<?> it = location.getLocations().iterator();
		
		while(it.hasNext())
		{
			Location doLocation = (Location) it.next();
		
			if(Boolean.TRUE.equals(doLocation.isIsActive()) && (name == null || name.equals("%") || doLocation.getUpperName().indexOf(name.toUpperCase()) >= 0)	&& Boolean.TRUE.equals(doLocation.isCaseNoteFolderLocation()))
			{
				listItems.add(doLocation);
			}
			
			buildLocation(doLocation, listItems, name);
		}
	}

	
	public LocationLiteVo getLoggedInHospital(ILocation currentLocation)
	{
		OrganisationAndLocation orgLoc = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLoc.getHospitalLiteForLocation(currentLocation);
	}
	
	public LocationLiteVoCollection listWardsForHospital(LocationRefVo hospital, String wardName)
	{
		OrganisationAndLocation orgLoc = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLoc.listActiveWardsForHospitalByNameLite(hospital, wardName);
	}


	public LocationLiteVoCollection listRequestorLocation(LocationRefVo hospital, String locationName)
	{
		//http://jira/browse/WDEV-21222
		OrganisationAndLocation orgLoc = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);//http://jira/browse/WDEV-21222
		//return orgLoc.listRequestorLocation(hospital,locationName);
		
		//wdev-22284
		return orgLoc.listRequestorLocationWithOrWithoutVirtualLocIncludeWards(hospital, locationName, null, Boolean.TRUE);
		//-----end wdev-22284
	}
	
	
	public HcpLiteVoCollection listHcp(String name)
	{
		if (name == null || name.length() == 0)
			return null;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String query = "SELECT hcp FROM Hcp AS hcp LEFT JOIN hcp.mos AS mos WHERE mos.name.upperSurname LIKE :NAME AND hcp.isActive = 1 ORDER BY mos.name.upperSurname";
		
		paramNames.add("NAME");
		paramValues.add(getNameStr(name, true)); //WDEV-22880
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}
	//WDEV-22880
	private String getNameStr(String name, boolean containsMatch)
	{
		if (name == null)
			return "";
		String[] arr = null;
		if (name.contains("%"))
		{
			arr = name.split("%");
			if (arr.length > 0)
			{	
				List<String> lst = new ArrayList<String>(Arrays.asList(arr));
				lst.removeAll(Collections.singleton(""));
				name = lst.get(0);
			}	
			else
				name = "%";
		}
		return (containsMatch && (arr == null || arr.length > 0) ? "%" : "") + name.trim().toUpperCase() + "%";	
	}
	public CaseNoteForWorklistVoCollection searchCaseNoteRequest(CaseNoteWorklistSearchCriteriaVo searchCriteria)
	{
		if (searchCriteria == null || searchCriteria.getSearchTab() == null)
			return null;
		
		List<?> searchResults = null;
		
		switch (searchCriteria.getSearchTab())
		{
			case TAB_CASE_NOTE_REQUESTS:
				searchResults = searchCaseNoteByRequest(searchCriteria);
				break;
				
			case TAB_CASE_NOTE_BY_LOCATION:
				searchResults = searchCaseNoteByLocation(searchCriteria);
				break;
		}
		
		CaseNoteForWorklistVoCollection results = new CaseNoteForWorklistVoCollection();
		if (searchResults != null && searchResults.size() > 0)
		{
			for (int i = 0; i < searchResults.size(); i++)
			{
				Object[] resultObject = (Object []) searchResults.get(i);
				CaseNoteForWorklistVo caseNote = null;

				if (resultObject[0] instanceof PatientCaseNote)
				{
					caseNote = CaseNoteForWorklistVoAssembler.create((PatientCaseNote) resultObject[0]);
				}
				
				
				boolean searchCaseNoteByLocation = searchCriteria.getSearchTab() != null && searchCriteria.getSearchTab().equals(TAB_CASE_NOTE_BY_LOCATION)
														&& searchCriteria.getCaseNoteByLocationOption() != null 
														&& searchCriteria.getCaseNoteByLocationOption().equals(CASE_NOTE_IN_LOCATION);
				
				if (!searchCaseNoteByLocation)
				{
					if (resultObject[1] instanceof PatientCaseNoteRequest)
					{
						CaseNoteRequestForWorklistVo request = CaseNoteRequestForWorklistVoAssembler.create((PatientCaseNoteRequest)resultObject[1]);
						caseNote.setCaseNoteRequest(request);
					}
				}
				
				results.add(caseNote);
			}
		}
		
		return results;
	}


	private List<?> searchCaseNoteByRequest(CaseNoteWorklistSearchCriteriaVo searchCriteria)
	{
		StringBuilder query = new StringBuilder("SELECT caseNote, request");
		query.append(" FROM PatientCaseNoteRequest AS request LEFT JOIN request.caseNote AS caseNote");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		
		query.append(" LEFT JOIN request.requestStatus AS status ");
		query.append(" LEFT JOIN request.reasonForRequest AS reasons ");
		query.append(" LEFT JOIN request.requestedForLocation AS requestedLocation ");
		
		if (Boolean.TRUE.equals(searchCriteria.getCaseNotesInMedicalRecords()))
		{
			query.append(" LEFT JOIN caseNote.currentLocation AS currentLocation LEFT JOIN currentLocation.type AS locType ");
		}
		
		if (searchCriteria.getClinicName() != null || searchCriteria.getListOwner() != null)
		{
			query.append(" LEFT JOIN request.appointment AS appt LEFT JOIN appt.session AS sess LEFT JOIN sess.sch_Profile AS profile ");
			query.append(" LEFT JOIN sess.listOwners AS owners LEFT JOIN owners.hcp AS hcp ");
		}
		
		if (searchCriteria.getWard() != null)
		{
			query.append(" LEFT JOIN request.tCIDetail AS tciDetails LEFT JOIN tciDetails.tCIWard AS ward ");
		}
		
		query.append(" WHERE ");
		
		
		// Conditions for Case Note Request status
		query.append(" status.id IN (").append(CaseNoteRequestStatus.OPEN.getID());
		if (Boolean.TRUE.equals(searchCriteria.getIncludeCompletedRequests()))
		{
			query.append(", ").append(CaseNoteRequestStatus.COMPLETED.getID());
		}
		query.append(") ");

		String conditionLink = " AND ";
		
		
		// Conditions for Required By Date
		if (searchCriteria.getRequestFromDate() != null || searchCriteria.getRequestToDate() != null)
		{
			query.append(conditionLink).append(" (");
			conditionLink = "";
			
			// Condition for From Date
			if (searchCriteria.getRequestFromDate() != null)
			{
				query.append(conditionLink);
				query.append(" request.requiredByDate >= :REQUEST_DATE_FROM ");
				
				paramNames.add("REQUEST_DATE_FROM");
				paramValues.add(searchCriteria.getRequestFromDate().getDate());
				
				conditionLink = " AND ";
			}
			
			// Condition for To Date
			if (searchCriteria.getRequestToDate() != null)
			{
				Date searchDate = ((Date)searchCriteria.getRequestToDate().clone()).addDay(1);
				query.append(conditionLink);				
				query.append(" request.requiredByDate < :REQUEST_DATE_TO "); //WDEV-20790
				
				paramNames.add("REQUEST_DATE_TO");
				paramValues.add(searchDate.getDate()); //WDEV-20790
				
				conditionLink = " AND ";
			}
			
			query.append(") ");
		}
		
		
		if (searchCriteria.getClinicName() != null || searchCriteria.getWard() != null || searchCriteria.getListOwner() != null)
		{
			query.append(conditionLink).append(" (");
			conditionLink = "";

			// Conditions for Clinic Name (Profile)
			if (searchCriteria.getClinicName() != null)
			{
				query.append(conditionLink);
				query.append(" profile.id = :PROFILE_ID ");

				paramNames.add("PROFILE_ID");
				paramValues.add(searchCriteria.getClinicName().getID_Sch_Profile());

				conditionLink = " OR ";
			}
			
			// Conditions for List Owner
			if (searchCriteria.getListOwner() != null)
			{
				query.append(conditionLink);
				query.append(" hcp.id = :OWNER_ID ");
				
				paramNames.add("OWNER_ID");
				paramValues.add(searchCriteria.getListOwner().getID_Hcp());
			}
			
			// Condition for Ward
			if (searchCriteria.getWard() != null)
			{
				query.append(conditionLink);
				query.append(" ward.id = :WARD_ID ");
				
				paramNames.add("WARD_ID");
				paramValues.add(searchCriteria.getWard().getID());
				
				conditionLink = " AND ";
			}
			
			query.append(") ");
			
			conditionLink = " AND ";
		}
		
		
		// Condition for Requester Location
		if (searchCriteria.getRequestorLocation() != null)
		{
			//wdev-20063
			//http://jira/browse/WDEV-21222
			OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
			String locationsIds = impl.getChildLocationsIdsForLocation(searchCriteria.getRequestorLocation().getBoId(), null, Boolean.TRUE, null, null, Boolean.TRUE);
			
			query.append(conditionLink);
			query.append(" requestedLocation.id IN (");
			
			query.append(locationsIds);
			
			query.append(") ");
			//--------
			/*query.append(conditionLink);
			query.append(" requestedLocation.id = :LOCATION_ID ");
			
			paramNames.add("LOCATION_ID");
			paramValues.add(searchCriteria.getRequestorLocation().getID());
			
			conditionLink = " AND ";*/
		}
		
		if(searchCriteria.getClinicName() == null && searchCriteria.getWard() == null && searchCriteria.getListOwner() == null && searchCriteria.getRequestorLocation() == null && searchCriteria.getHospital() != null)//only Hospital is selected
		{
			//http://jira/browse/WDEV-21222
			OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
			String locationsIds = impl.getChildLocationsIdsForLocation(searchCriteria.getHospital().getBoId(), null, Boolean.TRUE, null, null, Boolean.TRUE);
			
			query.append(conditionLink);
			query.append(" requestedLocation.id IN (");
			
			query.append(locationsIds);
			
			query.append(") ");
		}
		
		// Condition for Request Reasons
		if (searchCriteria.getRequestReasons() != null && searchCriteria.getRequestReasons().size() > 0)
		{
			query.append(conditionLink);
			query.append(" reasons.id IN (");
			
			for (int i = 0; i < searchCriteria.getRequestReasons().size(); i++)
			{
				CaseNoteReasonForRequest reason = searchCriteria.getRequestReasons().get(i);
				query.append(reason.getID()).append(i < searchCriteria.getRequestReasons().size() - 1 ? ", " : "");
			}
			
			query.append(") ");
		}
		
		// Condition for Case Note to be in Medical Records
		if (Boolean.TRUE.equals(searchCriteria.getCaseNotesInMedicalRecords()))
		{
			query.append(conditionLink);
			query.append(" locType.id = :LOCATION_TYPE ");
			
			paramNames.add("LOCATION_TYPE");
			paramValues.add(LocationType.MEDICAL_RECORDS.getID());
			
			conditionLink = " AND ";
		}
		
		
		query.append(" ORDER BY request.requiredByDate");
		
		return getDomainFactory().find(query.toString(), paramNames, paramValues, ConfigFlag.DOM.CASE_NOTE_SEARCH_MAX_SIZE.getValue());
	}
	//wdev-20063
	/**
	 * Method wil step into the structure and retrieve from all sub-levels items that match the search criteria
	 * 
	 * @param type
	 * @param parentLocation
	 * @param isActive
	 * @param referringHospital
	 * @param treatingHosp
	 * @param name
	 * @return
	 */
	@SuppressWarnings("unchecked")
	/*private List listLocationsByParentLocation(LocationType type, LocationRefVo parentLocation, Boolean isActive, Boolean referringHospital, Boolean treatingHosp, String name, Boolean bRequestorLocationsOnly)
	{
		//WDEV-6887
		if(name != null)
		{
			String[] arr = null;
			if(name.contains("%"))
			{
				arr = name.split("%");
				if(arr.length > 0)
					name = arr[0] + "%";
				else
					name = "%";
			}
		}

		if(parentLocation == null)
			return listLocations(type, isActive, referringHospital, treatingHosp, name, bRequestorLocationsOnly);
		
		DomainFactory factory = getDomainFactory();
		Location doLocation = (Location) factory.getDomainObject(Location.class, parentLocation.getID_Location());
		ArrayList<Location> listItems = new ArrayList<Location>();
		buildLocationsList(doLocation, listItems, type, isActive, referringHospital, treatingHosp, name, bRequestorLocationsOnly);

		return listItems;
	}

	private void buildLocationsList(Location location, ArrayList<Location> listItems, LocationType type, Boolean isActive, Boolean referringHospital, Boolean treatingHosp, String name, Boolean bRequestorLocationsOnly)
	{
		Iterator<?> it = location.getLocations().iterator();
		while(it.hasNext())
		{
			Location doLocation = (Location) it.next();
			if((type == null || doLocation.getType().equals(getDomLookup(type))) 
				&& doLocation.isIsActive().equals(isActive) 
				&& (referringHospital == null || doLocation.isReferringHospital().equals(referringHospital)) 
				&& (treatingHosp == null || doLocation.isTreatingHosp().equals(treatingHosp)) 
				&& (name == null || name.equals("%") || doLocation.getUpperName().indexOf(name.toUpperCase()) > -1)
				&& doLocation.isIsVirtual().equals(Boolean.FALSE) )//wdev-2730
			{
				//wdev-20063
				if (bRequestorLocationsOnly 
						&& ( ( doLocation.getType().equals(getDomLookup(LocationType.CLINIC)) || doLocation.getType().equals(getDomLookup(LocationType.WARD)) )
								||  doLocation.isCaseNoteFolderLocation() == null 
								|| (doLocation.isCaseNoteFolderLocation() != null && ! doLocation.isCaseNoteFolderLocation()) ) ) 
					continue;
				
				listItems.add(doLocation);
			}
			
			buildLocationsList(doLocation, listItems, type, isActive, referringHospital, treatingHosp, name, bRequestorLocationsOnly);
		}
	}
	
	private List<?> listLocations(LocationType locType, Boolean activeOnly, Boolean includeReferringHosp, Boolean includeTreatingHosp, String name, Boolean bRequestorLocationsOnly)
	{
		DomainFactory factory = getDomainFactory();
		
		List<?> locations;

		String hql = " from Location loc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		if (locType != null)
		{
			condStr.append(andStr + " loc.type = :locType");
			markers.add("locType");
			values.add(getDomLookup(locType));
			andStr = " and ";
		}
		if (activeOnly != null && activeOnly.booleanValue())
		{
			condStr.append(andStr + " loc.isActive = :active");
			markers.add("active");
			values.add(activeOnly);
			andStr = " and ";
		}
		if (includeReferringHosp != null && includeReferringHosp.booleanValue())
		{
			condStr.append(andStr + " loc.referringHospital = :referring");
			markers.add("referring");
			values.add(includeReferringHosp);
			andStr = " and ";
		}
		if (includeTreatingHosp != null && includeTreatingHosp.booleanValue())
		{
			condStr.append(andStr + " loc.treatingHosp = :treating");
			markers.add("treating");
			values.add(includeTreatingHosp);
			andStr = " and ";
		}		
		if (name != null)
		{
			condStr.append(andStr + " loc.upperName like :name");
			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";
		}
		
		//WDEV-7175 - exclude surgeries
		if(locType == null || locType != LocationType.SURGERY)
		{
			condStr.append(andStr + " loc.type <> :surgery ");
			markers.add("surgery");
			values.add(getDomLookup(LocationType.SURGERY));
			andStr = " and ";
		}
		
		//If requestor locations - exclude Wards and Clinics - wdev-20063
		if (bRequestorLocationsOnly)
		{
			//WDEV-20923
//			condStr.append(andStr + " ( loc.type <> :wards and loctype <> :clinics)");
			condStr.append(andStr + " ( loc.type <> :wards and loc.type <> :clinics)"); //WDEV-20923

			markers.add("wards");
			values.add(getDomLookup(LocationType.WARD));
			markers.add("clinics");
			values.add(getDomLookup(LocationType.CLINIC));
			andStr = " and ";
		}
		
		//wdev-2730
		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		if (andStr.equals(" and "))
		{
			hql += " where ";
		}

		hql += condStr.toString();
		hql += " ORDER BY loc.upperName";						// WDEV-13930
		locations = factory.find(hql, markers, values);
		return locations;
	}
	
	*/
	//--------------
	
	private List<?> searchCaseNoteByLocation(CaseNoteWorklistSearchCriteriaVo searchCriteria)
	{
		StringBuilder query = new StringBuilder("SELECT caseNote, request");
		query.append(" FROM PatientCaseNoteRequest AS request RIGHT JOIN request.caseNote AS caseNote");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		query.append(" LEFT JOIN caseNote.currentLocation AS currentLocation LEFT JOIN currentLocation.type AS currentLocType ");
		query.append(" LEFT JOIN request.requestedForLocation AS requestedLocation ");
		query.append(" LEFT JOIN caseNote.status AS status LEFT JOIN request.requestStatus AS requestStatus ");
		
		
		if (searchCriteria == null)
			return null;
		
		query.append(" WHERE ");
		String conditionLink = "";
		

		if (searchCriteria.getHospitalByLocation() != null && searchCriteria.getCurrentLocation() != null)
		{
			if(searchCriteria.getCaseNoteByLocationOption() != null)
			{
    			switch (searchCriteria.getCaseNoteByLocationOption())
    			{
    				case CASE_NOTE_IN_LOCATION:
    					query.append(conditionLink);
    					
    					query.append(" currentLocation.id = :LOCATION ");
    					query.append(" AND status.id IN (");
    					query.append(CaseNoteStatus.ACTIVE.getID()).append(",").append(CaseNoteStatus.MARKED_AS_FOUND.getID()).append(",").append(CaseNoteStatus.REQUIRES_MERGING.getID());
    					query.append(")");
    										
    					paramNames.add("LOCATION");
    					paramValues.add(searchCriteria.getCurrentLocation().getID());
    					
    					conditionLink = " AND ";
    					break;
    					
    				case OPEN_REQUESTS_IN_LOCATION:
    					query.append(conditionLink);
    
    					query.append(" requestedLocation.id = :LOCATION AND requestStatus.id = :REQUEST_OPEN AND request is not null ");
    					query.append(" AND status.id IN (");
    					query.append(CaseNoteStatus.ACTIVE.getID()).append(",").append(CaseNoteStatus.MARKED_AS_FOUND.getID()).append(",").append(CaseNoteStatus.REQUIRES_MERGING.getID());
    					query.append(")");
    					
    					paramNames.add("LOCATION");
    					paramValues.add(searchCriteria.getCurrentLocation().getID());
    					
    					paramNames.add("REQUEST_OPEN");
    					paramValues.add(CaseNoteRequestStatus.OPEN.getID());
    					
    					conditionLink = " AND ";
    					break;
    					
    				case OPEN_REQUESTS_FOR_CASE_NOTE_IN_LOCATIION:
    					query.append(conditionLink);
    					
    					query.append(" currentLocation.id = :LOCATION AND requestStatus.id = :REQUEST_OPEN AND request is not null ");
    					query.append(" AND status.id IN (");
    					query.append(CaseNoteStatus.ACTIVE.getID()).append(",").append(CaseNoteStatus.MARKED_AS_FOUND.getID()).append(",").append(CaseNoteStatus.REQUIRES_MERGING.getID());
    					query.append(")");
    					
    					paramNames.add("LOCATION");
    					paramValues.add(searchCriteria.getCurrentLocation().getID());
    					
    					paramNames.add("REQUEST_OPEN");
    					paramValues.add(CaseNoteRequestStatus.OPEN.getID());
    					
    					conditionLink = " AND ";
    					break;
    			}
			}
		}
		
		
		if (Boolean.TRUE.equals(searchCriteria.getCaseNotesInMedicalRecordsByLocation()))
		{
			query.append(conditionLink);
			query.append(" currentLocType.id = :LOCATION_TYPE ");
			
			paramNames.add("LOCATION_TYPE");
			paramValues.add(LocationType.MEDICAL_RECORDS.getID());
			
			conditionLink = " AND ";
		}
		
		
		if (searchCriteria.getPeriodInCurrentLocationFrom() != null)
		{
			query.append(conditionLink);
			query.append(" request.requiredByDate >= :DATE_FROM "); //WDEV-23258
			
			paramNames.add("DATE_FROM");
			paramValues.add(searchCriteria.getPeriodInCurrentLocationFrom().getDate());
			
			conditionLink = " AND ";
		}
		
		if (searchCriteria.getPeriodInCurrentLocationTo() != null)
		{
			Date searchDate = ((Date)searchCriteria.getPeriodInCurrentLocationTo().clone()).addDay(1);
			query.append(conditionLink);
			
			query.append(" request.requiredByDate < :DATE_TO "); //WDEV-20790 //WDEV-23258
			
			paramNames.add("DATE_TO");
			paramValues.add(searchDate.getDate()); //WDEV-20790
			
			conditionLink = " AND ";
		}
		
		query.append(" ORDER BY request.requiredByDate"); ////WDEV-23258

		
		return getDomainFactory().find(query.toString(), paramNames, paramValues, ConfigFlag.DOM.CASE_NOTE_SEARCH_MAX_SIZE.getValue());		
	}


	public AppFormForTrackingVo getFormMenuAction(Integer formId)
	{
		if(formId == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formId);
		
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}


	public Boolean cancelRequest(PatientCaseNoteRequestRefVo request, MemberOfStaffRefVo mos) throws StaleObjectException
	{
		PatientCaseNotes impl = (PatientCaseNotes) getDomainImpl(PatientCaseNotesImpl.class);
		return impl.cancelRequest(request, mos, CaseNoteRequestCancellationReason.CANCELLED_BY_USER);
	}


}
