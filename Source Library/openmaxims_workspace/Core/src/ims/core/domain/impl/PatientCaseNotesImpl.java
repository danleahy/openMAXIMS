//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.vo.CaseNoteTrackingConfigVo;
import ims.admin.vo.domain.CaseNoteTrackingConfigVoAssembler;
import ims.RefMan.vo.TCIForPatientElectiveListRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.domain.objects.PatientCaseNote;
import ims.core.clinical.domain.objects.PatientCaseNoteComment;
import ims.core.clinical.domain.objects.PatientCaseNoteRequest;
import ims.core.clinical.vo.PatientCaseNoteRefVo;
import ims.core.clinical.vo.PatientCaseNoteRequestRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.domain.objects.CaseNoteTrackingConfig;
import ims.core.domain.base.impl.BasePatientCaseNotesImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientCaseNoteCommentListVoCollection;
import ims.core.vo.PatientCaseNoteCommentSaveVo;
import ims.core.vo.PatientCaseNoteListVo;
import ims.core.vo.PatientCaseNoteListVoCollection;
import ims.core.vo.PatientCaseNoteRequestForCheckingVo;
import ims.core.vo.PatientCaseNoteRequestForCheckingVoCollection;
import ims.core.vo.PatientCaseNoteRequestVo;
import ims.core.vo.PatientCaseNoteRequestVoCollection;
import ims.core.vo.PatientCaseNoteVo;
import ims.core.vo.PatientCaseNoteVoCollection;
import ims.core.vo.PatientLiteVo;
import ims.core.vo.PatientLite_IdentifiersVo;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffShortVoAssembler;
import ims.core.vo.domain.PatientCaseNoteCommentListVoAssembler;
import ims.core.vo.domain.PatientCaseNoteCommentSaveVoAssembler;
import ims.core.vo.domain.PatientCaseNoteListVoAssembler;
import ims.core.vo.domain.PatientCaseNoteRequestForCheckingVoAssembler;
import ims.core.vo.domain.PatientCaseNoteRequestVoAssembler;
import ims.core.vo.domain.PatientCaseNoteVoAssembler;
import ims.core.vo.domain.PatientLite_IdentifiersVoAssembler;
import ims.core.vo.lookups.CaseNoteReasonForRequest;
import ims.core.vo.lookups.CaseNoteRequestCancellationReason;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.CaseNoteType;
import ims.core.vo.lookups.FolderCaseNote;
import ims.core.vo.lookups.FolderCaseNoteCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Booking_AppointmentRefVo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class PatientCaseNotesImpl extends BasePatientCaseNotesImpl
{
	private static final long serialVersionUID = 1L;
	
	private static final String DUMMY_TRACKING_ID = "-1";

	public PatientCaseNoteListVoCollection listCaseNoteFolders(PatientRefVo patient, Boolean currentOnly)
	{
		if(patient == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select patCaseNote from PatientCaseNote as patCaseNote where patCaseNote.patient.id = :PatId";
		
		List<?> listCaseNote = factory.find(query, new String[] {"PatId"}, new Object[] {patient.getID_Patient()});
		
		return PatientCaseNoteListVoAssembler.createPatientCaseNoteListVoCollectionFromPatientCaseNote(listCaseNote);
	}

	public PatientCaseNoteVo getCaseNoteFolder(PatientCaseNoteRefVo caseNote) 
	{
		if(caseNote == null || caseNote.getID_PatientCaseNote() == null)
			return null;
		
		return PatientCaseNoteVoAssembler.create((PatientCaseNote) getDomainFactory().getDomainObject(PatientCaseNote.class, caseNote.getID_PatientCaseNote()));
	}
	
	private void checkForTypeAndFolder(PatientCaseNoteVo caseNote) throws UniqueKeyViolationException, DomainInterfaceException
	{
		if(caseNote == null || caseNote.getPatient() == null || caseNote.getType() == null || caseNote.getFolder() == null)
			return;
		
		if(CaseNoteType.PERMANENT.equals(caseNote.getType()))
		{
			String query = "select caseNoteFolder from PatientCaseNote as caseNoteFolder left join caseNoteFolder.patient as pat left join caseNoteFolder.type as ty left join caseNoteFolder.folder as fl where pat.id = :PatId and ty.id = :TypeId and fl.id = :FolderId and caseNoteFolder.status.id <> :Destroyed";		//wdev-19968
			List<?> caseNoteFolderList = getDomainFactory().find(query, new String[] {"PatId", "TypeId", "FolderId","Destroyed"}, new Object[] {caseNote.getPatient().getID_Patient(), caseNote.getType().getID(), caseNote.getFolder().getID(),CaseNoteStatus.DESTROYED.getID()});											//wdev-19968
			
			if(caseNoteFolderList != null && caseNoteFolderList.size() > 0)
				throw new UniqueKeyViolationException("A Case Note Folder with Type = " + caseNote.getType().getText() + " and Folder = " + caseNote.getFolder() + " already exist.");
		}
		else if(CaseNoteType.TEMPORARY.equals(caseNote.getType()))
		{
			String queryTemp1 = "select caseNoteFolder from PatientCaseNote as caseNoteFolder left join caseNoteFolder.patient as pat left join caseNoteFolder.type as ty left join caseNoteFolder.folder as fl where pat.id = :PatId and ty.id = :TypeId and fl.id = :FolderId ";
			List<?> caseNoteFolderTempList1 = getDomainFactory().find(queryTemp1, new String[] {"PatId", "TypeId", "FolderId"}, new Object[] {caseNote.getPatient().getID_Patient(), CaseNoteType.PERMANENT.getID(), caseNote.getFolder().getID()});
			
			if(caseNoteFolderTempList1 == null || caseNoteFolderTempList1.size() == 0)
				throw new DomainInterfaceException("Cannot create a Temporary Case Note with Folder = " + caseNote.getFolder().getText() + " because there isn't a Permanent Case Note Folder with Folder = " + caseNote.getFolder().getText());
			
			String queryTemp2 = "select caseNoteFolder from PatientCaseNote as caseNoteFolder left join caseNoteFolder.patient as pat left join caseNoteFolder.folder as fl left join caseNoteFolder.status as st where pat.id = :PatId and fl.id = :FolderId and st.id = :ActiveStatus";
			List<?> caseNoteFolderTempList2 = getDomainFactory().find(queryTemp2, new String[] {"PatId", "FolderId", "ActiveStatus"}, new Object[] {caseNote.getPatient().getID_Patient(), caseNote.getFolder().getID(), CaseNoteStatus.ACTIVE.getID()});
			
			if(caseNoteFolderTempList2 != null && caseNoteFolderTempList2.size() > 0)
				throw new UniqueKeyViolationException("A Case Note Folder with Folder = " + caseNote.getFolder().getText() + " and Active status already exist.");
			
			String queryTemp3 = "select caseNoteFolder from PatientCaseNote as caseNoteFolder left join caseNoteFolder.patient as pat left join caseNoteFolder.folder as fl left join caseNoteFolder.status as st where pat.id = :PatId and fl.id = :FolderId and st.id = :MissingStatus";
			List<?> caseNoteFolderTempList3 = getDomainFactory().find(queryTemp3, new String[] {"PatId", "FolderId", "MissingStatus"}, new Object[] {caseNote.getPatient().getID_Patient(), caseNote.getFolder().getID(), CaseNoteStatus.MISSING.getID()});
			
			if(caseNoteFolderTempList3 == null || caseNoteFolderTempList3.size() == 0)
				throw new UniqueKeyViolationException("Cannot create a Temporary Case Note with Folder = " + caseNote.getFolder().getText() + " because there isn't a Case Note Folder with Folder = " + caseNote.getFolder().getText() + " and Status = " + CaseNoteStatus.MISSING.getText());
		}
	}

	private String formatTrackingId(Integer value, int len)
	{
		StringBuffer formatStr = new StringBuffer();
		for (int i=0; i<len; i++)
		{
			formatStr.append("0");
		}
		
		return new java.text.DecimalFormat(formatStr.toString()).format(value);
	}

	public LocationLiteVoCollection listCaseNoteLocations(String value) 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listCaseNoteFolderLocations(value);
	}

	public PatientCaseNoteRequestVo getCaseNoteRequests(PatientCaseNoteRequestRefVo caseNoteRequests)
	{
		if(caseNoteRequests == null || caseNoteRequests.getID_PatientCaseNoteRequest() == null)
			return null;
		
		return PatientCaseNoteRequestVoAssembler.create((PatientCaseNoteRequest) getDomainFactory().getDomainObject(PatientCaseNoteRequest.class, caseNoteRequests.getID_PatientCaseNoteRequest()));
	}

	public PatientCaseNoteRequestVo saveCaseNoteRequest(PatientCaseNoteRequestVo caseNoteRequest) throws StaleObjectException 
	{
		if(caseNoteRequest == null)
			throw new CodingRuntimeException("Cannot save a null PatientCaseNoteRequestVo.");
		
		if(!caseNoteRequest.isValidated())
			throw new CodingRuntimeException("PatientCaseNoteRequestVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		PatientCaseNoteRequest doCaseNoteRequest = PatientCaseNoteRequestVoAssembler.extractPatientCaseNoteRequest(factory, caseNoteRequest);
		factory.save(doCaseNoteRequest);
		
		if(caseNoteRequest.getID_PatientCaseNoteRequest() == null)
		{
			PatientCaseNote doCaseNote = (PatientCaseNote) factory.getDomainObject(PatientCaseNote.class, caseNoteRequest.getCaseNote().getID_PatientCaseNote());
			
			if(doCaseNote.getOpenRequests() == null)
			{
				doCaseNote.setOpenRequests(new ArrayList<PatientCaseNoteRequest>());
			}
			
			doCaseNote.getOpenRequests().add(doCaseNoteRequest);
			
			factory.save(doCaseNote);
		}
		
		return PatientCaseNoteRequestVoAssembler.create(doCaseNoteRequest);
	}

	public PatientCaseNoteVo archiveScanDestroyCaseNoteFolder(PatientCaseNoteVo caseNoteFolder, CaseNoteStatus requestStatus) throws StaleObjectException 
	{
		if(caseNoteFolder == null)
			throw new CodingRuntimeException("Cannot save a null PatientCaseNoteVo.");
		
		if(!caseNoteFolder.isValidated())
			throw new CodingRuntimeException("PatientCaseNoteVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select req from PatientCaseNote as pcs left join pcs.openRequests as req where pcs.id = :CaseNoteFolderId "; 
		
		List<?> reqList = factory.find(query, new String[] {"CaseNoteFolderId"}, new Object[] {caseNoteFolder.getID_PatientCaseNote()});
		
		if(reqList != null && reqList.size() > 0)
		{
			for(int i=0; i<reqList.size(); i++)
			{
				if(!(reqList.get(i) instanceof PatientCaseNoteRequest))
					continue;
				
				PatientCaseNoteRequest req = (PatientCaseNoteRequest) reqList.get(i);
				
				req.setRequestStatus(getDomLookup(CaseNoteRequestStatus.CANCELLED));
				
				req.setCancelledBy(MemberOfStaffLiteVoAssembler.extractMemberOfStaff(factory, getCancelledBy(caseNoteFolder, requestStatus)));
				req.setCancelledDate(getCancellationDate(caseNoteFolder, requestStatus));
				req.setCancellationReason(getDomLookup(getCancellationReason(requestStatus)));
				
				factory.save(req);
			}
		}
		
		caseNoteFolder.setOpenRequests(null);
		PatientCaseNote doCaseNote = PatientCaseNoteVoAssembler.extractPatientCaseNote(factory, caseNoteFolder);
		factory.save(doCaseNote);
		
		return PatientCaseNoteVoAssembler.create(doCaseNote);
	}

	private CaseNoteRequestCancellationReason getCancellationReason(CaseNoteStatus requestStatus) 
	{
		if(requestStatus == null)
			return null;
		
		if(CaseNoteStatus.ARCHIVED.equals(requestStatus))
		{
			return CaseNoteRequestCancellationReason.CASENOTE_ARCHIVED;
		}
		else if(CaseNoteStatus.SCANNED.equals(requestStatus))
		{
			return CaseNoteRequestCancellationReason.CASENOTE_SCANNED;
		}
		else if(CaseNoteStatus.DESTROYED.equals(requestStatus))
		{
			return CaseNoteRequestCancellationReason.CASENOTE_DESTROYED;
		}
		
		return null;
	}

	private Date getCancellationDate(PatientCaseNoteVo caseNoteFolder,	CaseNoteStatus requestStatus) 
	{
		if(caseNoteFolder == null)
			return null;
		
		if(CaseNoteStatus.ARCHIVED.equals(requestStatus))
		{
			return caseNoteFolder.getArchivedDate() != null ? caseNoteFolder.getArchivedDate().getJavaDate() : null;
		}
		else if(CaseNoteStatus.SCANNED.equals(requestStatus))
		{
			return caseNoteFolder.getScannedDate() != null ? caseNoteFolder.getScannedDate().getJavaDate() : null;
		}
		else if(CaseNoteStatus.DESTROYED.equals(requestStatus))
		{
			return caseNoteFolder.getDestroyedDate() != null ? caseNoteFolder.getDestroyedDate().getJavaDate() : null;
		}
		
		return null;
	}

	private MemberOfStaffLiteVo getCancelledBy(PatientCaseNoteVo caseNoteFolder, CaseNoteStatus requestStatus) 
	{
		if(caseNoteFolder == null)
			return null;
		
		if(CaseNoteStatus.ARCHIVED.equals(requestStatus))
		{
			return caseNoteFolder.getArchivedBy();
		}
		else if(CaseNoteStatus.SCANNED.equals(requestStatus))
		{
			return caseNoteFolder.getScannedBy();
		}
		else if(CaseNoteStatus.DESTROYED.equals(requestStatus))
		{
			return caseNoteFolder.getDestroyedBy();
		}
		
		return null;
	}
	
	public CaseNoteTrackingConfigVo getTrackingConfig()
	{
		String hql = "select cnconf from CaseNoteTrackingConfig as cnconf";
		DomainFactory factory = getDomainFactory();
		
		List<?> results = factory.find(hql);
		
		if (results == null || results.size() == 0)
			return null;
		
		return CaseNoteTrackingConfigVoAssembler.create((CaseNoteTrackingConfig) results.get(0));
	}

	public PatientCaseNoteRequestForCheckingVoCollection checkIfThereAreRequests(PatientCaseNoteRefVo caseNote, PatientCaseNoteRequestRefVo currentRequest, LocationRefVo location, DateTime reqDate) 
	{
		if(caseNote == null || caseNote.getID_PatientCaseNote() == null)
			throw new CodingRuntimeException("Cannnot return the list of existing requests for a null PatientCaseNoteId.");
		
		if(location == null || location.getID_Location() == null)
			throw new CodingRuntimeException("Cannnot return the list of existing requests for a null Requesting Location Id.");
		
		if(reqDate == null)
			throw new CodingRuntimeException("Cannnot return the list of existing requests for a null Required By Date.");
		
		int offset = 24;
		
		CaseNoteTrackingConfigVo config = getTrackingConfig();
		if(config != null && config.getCaseNoteRequestOffset() != null)
		{
			offset = config.getCaseNoteRequestOffset();
		}
		
		DateTime fromDate = (DateTime) reqDate.clone();
		fromDate.addHours(-offset);
		
		DateTime toDate = (DateTime) reqDate.clone();
		toDate.addHours(offset);
		
		DomainFactory factory = getDomainFactory();
		String query = "select req from PatientCaseNoteRequest as req left join req.caseNote as cs left join req.requestedForLocation as loc left join req.requestStatus as status where cs.id = :CaseNoteId and loc.id = :ReqLoc and req.requiredByDate between :DateFrom and :DateTo and status.id = :OpenStatus";
		
		if(currentRequest != null && currentRequest.getID_PatientCaseNoteRequest() != null)
		{
			query += " and req.id <> " + currentRequest.getID_PatientCaseNoteRequest();
		}
		List<?> reqList = factory.find(query, new String[] {"CaseNoteId", "ReqLoc", "DateFrom", "DateTo", "OpenStatus"}, new Object[] {caseNote.getID_PatientCaseNote(), location.getID_Location(), fromDate.getJavaDate(), toDate.getJavaDate(), CaseNoteRequestStatus.OPEN.getID()});
		
		return PatientCaseNoteRequestForCheckingVoAssembler.createPatientCaseNoteRequestForCheckingVoCollectionFromPatientCaseNoteRequest(reqList);
	}

	public PatientCaseNoteRequestVo saveCaseNoteRequest(PatientCaseNoteRequestVo request, PatientCaseNoteRequestForCheckingVoCollection requestedThatNeedsToBeCancelled) throws StaleObjectException 
	{
		if(request == null)
			throw new CodingRuntimeException("Cannot save a null PatientCaseNoteRequestVo.");
		
		if(!request.isValidated())
			throw new CodingRuntimeException("PatientCaseNoteRequestVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		PatientCaseNoteRequest doCaseNoteRequest = PatientCaseNoteRequestVoAssembler.extractPatientCaseNoteRequest(factory, request);
		factory.save(doCaseNoteRequest);
		
		PatientCaseNote doCaseNote = null;
			
		if(request.getID_PatientCaseNoteRequest() == null || (requestedThatNeedsToBeCancelled != null && requestedThatNeedsToBeCancelled.size() > 0))
		{
			doCaseNote = (PatientCaseNote) factory.getDomainObject(PatientCaseNote.class, request.getCaseNote().getID_PatientCaseNote());
		}
		
		if(request.getID_PatientCaseNoteRequest() == null && doCaseNote != null)
		{
			if(doCaseNote.getOpenRequests() == null)
			{
				doCaseNote.setOpenRequests(new ArrayList<PatientCaseNoteRequest>());
			}
			
			doCaseNote.getOpenRequests().add(doCaseNoteRequest);
		}
		
		if(requestedThatNeedsToBeCancelled != null && requestedThatNeedsToBeCancelled.size() > 0 && doCaseNote != null)
		{
			for(PatientCaseNoteRequestForCheckingVo req : requestedThatNeedsToBeCancelled)
			{
				if(req == null)
					continue;
			
				PatientCaseNoteRequest doReq = PatientCaseNoteRequestForCheckingVoAssembler.extractPatientCaseNoteRequest(factory, req);
				factory.save(doReq);
				
				doCaseNote.getOpenRequests().remove(doReq);
			}
		}
		
		if(doCaseNote != null)
		{
			factory.save(doCaseNote);
		}
		
		return PatientCaseNoteRequestVoAssembler.create(doCaseNoteRequest);
	}

	public AppFormForTrackingVo getFormMenuAction(Integer formId)
	{
		if(formId == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formId);
		
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}
	
	//WDEV-21207
	public LocationLiteVo getTrackingConfigLocation()
	{
		CaseNoteTrackingConfigVo caseNoteTRackingConf = getTrackingConfig();
		if(caseNoteTRackingConf != null && caseNoteTRackingConf.getDefaultCaseNoteFolderLocation() != null && caseNoteTRackingConf.getDefaultCaseNoteFolderLocation() instanceof LocationLiteVo)
			return (LocationLiteVo) caseNoteTRackingConf.getDefaultCaseNoteFolderLocation();
		
		return null;
	}
	
	public PatientCaseNoteRequestVoCollection saveAutomaticCaseNoteRequests(PatientLiteVo patient, MemberOfStaffLiteVo mos, LocationLiteVo location, DateTime requiredBydate, Booking_AppointmentRefVo appointment, TCIForPatientElectiveListRefVo tci) throws StaleObjectException, DomainInterfaceException, UniqueKeyViolationException
	{
		FolderCaseNoteCollection lookupColl = LookupHelper.getFolderCaseNote(getLookupService());
		
		//WDEV-19923
		if (lookupColl == null || lookupColl.size() == 0 || lookupColl.get(0) == null)
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Session slot has CaseNoteFolderLocation set but Case Note Requests were not created as FolderCaseNote lookup was not configured. " );
			return null;
		}
		
		PatientCaseNoteListVoCollection	patientCaseNotes = getCaseNotesForPatient(patient);
		
		PatientCaseNoteListVoCollection scannedCaseNotes =  new PatientCaseNoteListVoCollection();
		PatientCaseNoteListVoCollection activeCaseNotes = new PatientCaseNoteListVoCollection();
		PatientCaseNoteListVoCollection foundCaseNotes = new PatientCaseNoteListVoCollection();
		PatientCaseNoteListVoCollection reqMergingCaseNotes = new PatientCaseNoteListVoCollection();
		PatientCaseNoteListVoCollection missingCaseNotes = new PatientCaseNoteListVoCollection();
		PatientCaseNoteListVoCollection requiresCaseNotes = new PatientCaseNoteListVoCollection();
		
		for (int i = 0; patientCaseNotes != null && i < patientCaseNotes.size(); i++)
		{
			PatientCaseNoteListVo patientCaseNote = patientCaseNotes.get(i);
			
			if (CaseNoteStatus.SCANNED.equals(patientCaseNote.getStatus()))
			{
				scannedCaseNotes.add(patientCaseNote);
			}
			else if (CaseNoteStatus.ACTIVE.equals(patientCaseNote.getStatus()))
			{
				activeCaseNotes.add(patientCaseNote);
			}
			else if (CaseNoteStatus.MARKED_AS_FOUND.equals(patientCaseNote.getStatus()))
			{
				foundCaseNotes.add(patientCaseNote);
			}
			else if (CaseNoteStatus.REQUIRES_MERGING.equals(patientCaseNote.getStatus()))
			{
				reqMergingCaseNotes.add(patientCaseNote);
			}
			else if (CaseNoteStatus.MISSING.equals(patientCaseNote.getStatus()))
			{
				missingCaseNotes.add(patientCaseNote);
			}
			else if (CaseNoteStatus.REQUIRES_CASE_NOTES.equals(patientCaseNote.getStatus()))
			{
				requiresCaseNotes.add(patientCaseNote);
			}
		}
		
		if (scannedCaseNotes != null && scannedCaseNotes.size() > 0)
			return null;
		
		PatientCaseNoteListVoCollection caseNotesToCreateRequestsFor = null;
		
		if (activeCaseNotes != null && activeCaseNotes.size() > 0)
		{
			caseNotesToCreateRequestsFor = activeCaseNotes;
		}
		else if (foundCaseNotes != null && foundCaseNotes.size() > 0)
		{
			caseNotesToCreateRequestsFor = foundCaseNotes;
		}
		else if (reqMergingCaseNotes != null && reqMergingCaseNotes.size() > 0)
		{
			caseNotesToCreateRequestsFor = reqMergingCaseNotes;
		}
		else if (missingCaseNotes != null && missingCaseNotes.size() > 0)
		{
			caseNotesToCreateRequestsFor = missingCaseNotes;
		}
		else if (requiresCaseNotes != null && requiresCaseNotes.size() > 0)
		{
			caseNotesToCreateRequestsFor = requiresCaseNotes;
			
		}
		else
		{
			caseNotesToCreateRequestsFor = new PatientCaseNoteListVoCollection();
			
			PatientCaseNoteVo record = createAutomatedCaseNote(patient, mos, location);
			if(record != null)
			{
				caseNotesToCreateRequestsFor.add(saveCaseNoteFolder(record));
			}
		}

		PatientCaseNoteRequestVoCollection caseNoteRequests = null;

		if (caseNotesToCreateRequestsFor != null && caseNotesToCreateRequestsFor.size() > 0)
		{
			caseNoteRequests = new PatientCaseNoteRequestVoCollection();

			for (int i = 0; i < caseNotesToCreateRequestsFor.size(); i++)
			{
				//check if this request is already added and don't create it again
				/* WDEV-20969 removed this check
				PatientCaseNoteRequestForCheckingVoCollection activeRequests = checkIfThereAreRequests(caseNotesToCreateRequestsFor.get(i), null, location, requiredBydate);
				
				if (activeRequests != null && activeRequests.size() > 0)
				{
					continue;
				}
				*/
				
				PatientCaseNoteRequestVo patientCaseNoteRequestVo = new PatientCaseNoteRequestVo();

				patientCaseNoteRequestVo.setCreationDate(new DateTime());
				patientCaseNoteRequestVo.setRequestStatus(CaseNoteRequestStatus.OPEN);
				patientCaseNoteRequestVo.setRequiredByDate(requiredBydate);
				patientCaseNoteRequestVo.setRequestedForLocation(location);

				if (patientCaseNoteRequestVo.getID_PatientCaseNoteRequest() == null)
				{
					PatientLite_IdentifiersVo patientIdentifiers = PatientLite_IdentifiersVoAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patient.getID_Patient()));
					
					patientCaseNoteRequestVo.setPatient(patientIdentifiers);
					patientCaseNoteRequestVo.setCaseNote(caseNotesToCreateRequestsFor.get(i));
				}

				patientCaseNoteRequestVo.setRequestedBy(mos);
				
				if(appointment != null)
				{
					patientCaseNoteRequestVo.setAppointment(appointment);
					//WDEV-20964
					patientCaseNoteRequestVo.setReasonForRequest(CaseNoteReasonForRequest.OUTPATIENT);
				}
				
				if(tci != null)
				{
					patientCaseNoteRequestVo.setTCIDetail(tci);
					//WDEV-20964
					patientCaseNoteRequestVo.setReasonForRequest(CaseNoteReasonForRequest.TCI);
				}
				
				String[] errors = patientCaseNoteRequestVo.validate();
				if(errors != null && errors.length > 0)
				{
					super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "PatientCaseNoteRequestVo is not validated: " + errorsToString(errors));
					continue;
				}
				
				caseNoteRequests.add(saveCaseNoteRequest(patientCaseNoteRequestVo));
			}
		}

		return caseNoteRequests;
	}

	private String errorsToString(String[] errors)
	{
		if(errors == null)
			return "";
		
		StringBuffer text = new StringBuffer();
		
		for(int i=0; i<errors.length; i++)
		{
			if(errors[i] == null)
				continue;
			
			text.append(text.length() > 0 ? "," : "");
			text.append(errors[i]);
		}
		
		return text.toString();
	}

	private PatientCaseNoteListVoCollection getCaseNotesForPatient(PatientLiteVo patient)
	{
		if(patient == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select patCaseNote from PatientCaseNote as patCaseNote where patCaseNote.patient.id = :PatId";
		
		List<?> listCaseNote = factory.find(query, new String[] {"PatId"}, new Object[] {patient.getID_Patient()});
		
		return PatientCaseNoteListVoAssembler.createPatientCaseNoteListVoCollectionFromPatientCaseNote(listCaseNote);
	}

	public Boolean cancelRequest(PatientCaseNoteRequestRefVo request, MemberOfStaffRefVo mos, CaseNoteRequestCancellationReason cancellationReason) throws StaleObjectException 
	{
		if(request == null || request.getID_PatientCaseNoteRequest() == null)
			return false;
		
		if(mos == null || mos.getID_MemberOfStaff() == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		PatientCaseNoteRequest doRequest = (PatientCaseNoteRequest) factory.getDomainObject(PatientCaseNoteRequest.class, request.getID_PatientCaseNoteRequest());
		
		if (doRequest.getVersion() > request.getVersion_PatientCaseNoteRequest())//WDEV-20394
			throw new StaleObjectException(doRequest,ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue().toString());
		
		doRequest.setRequestStatus(getDomLookup(CaseNoteRequestStatus.CANCELLED));
		doRequest.setCancelledBy((MemberOfStaff) factory.getDomainObject(MemberOfStaff.class, mos.getID_MemberOfStaff()));
		doRequest.setCancelledDate(new Date());
		doRequest.setCancellationReason(cancellationReason != null ? getDomLookup(cancellationReason) : null); //WDEV-20989
		
		factory.save(doRequest);
		
		String query = "select caseN from PatientCaseNoteRequest as req left join req.caseNote as caseN where req.id = :ReqId";
		List<?> listCaseNote = factory.find(query, new String[] {"ReqId"}, new Object[] {request.getID_PatientCaseNoteRequest()});
		
		if(listCaseNote != null && listCaseNote.size() > 0)
		{
			PatientCaseNote doCaseNote = (PatientCaseNote) listCaseNote.get(0);
			
			if(doCaseNote != null && doCaseNote.getOpenRequests() != null)
			{
				doCaseNote.getOpenRequests().remove(doRequest);
				
				factory.save(doCaseNote);
			}
		}
		
		return true;
	}

	public void mergeVolumes(PatientCaseNoteRefVo caseNoteFrom, PatientCaseNoteRefVo caseNoteTo) throws StaleObjectException
	{
		if (caseNoteFrom == null || caseNoteTo == null)
			return;
		
		DomainFactory factory = getDomainFactory();

		PatientCaseNote domCaseNoteFrom = (PatientCaseNote) factory.getDomainObject(PatientCaseNote.class, caseNoteFrom.getID_PatientCaseNote());
		PatientCaseNote domCaseNoteTo = (PatientCaseNote) factory.getDomainObject(PatientCaseNote.class, caseNoteTo.getID_PatientCaseNote());

		if (domCaseNoteFrom.getOpenRequests() != null && domCaseNoteFrom.getOpenRequests().size() > 0)
		{
			for (int i = 0; i < domCaseNoteFrom.getOpenRequests().size(); i++)
			{

				if (domCaseNoteTo.getOpenRequests() == null)
					domCaseNoteTo.setOpenRequests(new ArrayList());

				// update the request and add it to the CaseNote
				PatientCaseNoteRequest request = (PatientCaseNoteRequest) domCaseNoteFrom.getOpenRequests().get(i);
				request.setCaseNote(domCaseNoteTo);

				domCaseNoteTo.getOpenRequests().add(request);
			}
		}
		//WDEV-21606
		if (Arrays.asList(CaseNoteStatus.MARKED_AS_FOUND.getID(), CaseNoteStatus.REQUIRES_MERGING.getID()).contains(domCaseNoteTo.getStatus().getId()))
		{
			domCaseNoteTo.setStatus(getDomLookup(CaseNoteStatus.ACTIVE));
		}
		PatientCaseNoteCommentListVoCollection caseNoteComments = getCommentsForCaseNote(caseNoteFrom);
		
		if (caseNoteComments != null && caseNoteComments.size() > 0)
		{
			for (int a = 0; a < caseNoteComments.size(); a++)
			{
				if (caseNoteComments.get(a) == null)
					continue;
				
				PatientCaseNoteComment domComment = (PatientCaseNoteComment) factory.getDomainObject(PatientCaseNoteComment.class, caseNoteComments.get(a).getID_PatientCaseNoteComment());
				
				domComment.setCaseNote(domCaseNoteTo);
				
				factory.save(domComment);
			}
		}
		
		MemberOfStaff domainMOS = null;
		Object mosUser = getMosUser();

		if (mosUser instanceof MemberOfStaffShortVo)
		{
			domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory, ((MemberOfStaffShortVo) getMosUser()));
		}

		domCaseNoteFrom.setMergedBy(domainMOS);
		domCaseNoteFrom.setMergedDate(new Date());
		domCaseNoteFrom.setMergedFrom(domCaseNoteTo);
		domCaseNoteFrom.setStatus(getDomLookup(CaseNoteStatus.MERGED));

		factory.save(domCaseNoteTo);
		factory.save(domCaseNoteFrom);
	}

	private PatientCaseNoteCommentListVoCollection getCommentsForCaseNote(PatientCaseNoteRefVo caseNote)
	{
		if(caseNote == null || caseNote.getID_PatientCaseNote() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select comment from PatientCaseNoteComment as comment left join comment.caseNote as caseN where caseN.id = :caseNoteId";
		List<?> listComments = factory.find(query, new String[] {"caseNoteId"}, new Object[] {caseNote.getID_PatientCaseNote()});
		
		return PatientCaseNoteCommentListVoAssembler.createPatientCaseNoteCommentListVoCollectionFromPatientCaseNoteComment(listComments);
		
	}

	public PatientCaseNoteVo saveCaseNoteFolder(PatientCaseNoteVo caseNote)	throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if(caseNote == null)
			throw new CodingRuntimeException("Cannot save a null PatientCaseNoteVo.");
		
		if(!caseNote.isValidated())
			throw new CodingRuntimeException("PatientCaseNoteVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		PatientCaseNoteCommentSaveVo comments = null;
		if(caseNote.getID_PatientCaseNote() == null)
		{
			checkForTypeAndFolder(caseNote);
			
			if(caseNote.getCurrentComment() != null)
			{
				comments = (PatientCaseNoteCommentSaveVo) caseNote.getCurrentComment().clone();
				caseNote.setCurrentComment(null);
			}
		}
		
		PatientCaseNote doCaseNote = PatientCaseNoteVoAssembler.extractPatientCaseNote(factory, caseNote);
		
		if(caseNote.getID_PatientCaseNote() == null)
		{
			if(caseNote.getPatient() != null && caseNote.getPatient().getID_Patient() != null)
			{
				Patient pat = (Patient) factory.getDomainObject(Patient.class, caseNote.getPatient().getID_Patient());
				
				if(pat != null)
				{
					pat.setCurrentCaseNoteLocation(doCaseNote.getCurrentLocation());
					pat.setCaseNoteLastTransferDate(doCaseNote.getCreationDate());
					
					factory.save(pat);
				}
			}
			
			if(CaseNoteType.TEMPORARY.equals(caseNote.getType()))
			{
				String query = "select req from PatientCaseNoteRequest as req left join req.caseNote as patcn where patcn.patient.id = :Patient and patcn.folder.id = :Folder and patcn.status.id = :Missing and req.requestStatus.id = :OpenRequest";
				List doRequests = factory.find(query, new String[] {"Patient", "Folder", "Missing", "OpenRequest"}, new Object[] {caseNote.getPatient().getID_Patient(), caseNote.getFolder().getID(), CaseNoteStatus.MISSING.getID(), CaseNoteRequestStatus.OPEN.getID()});
				
				if(doRequests != null && doRequests.size() > 0)
				{
					for(int i=0; i<doRequests.size(); i++)
					{
						if(!(doRequests.get(i) instanceof PatientCaseNoteRequest))
							continue;
						
						PatientCaseNoteRequest req = (PatientCaseNoteRequest) doRequests.get(i);
						
						PatientCaseNote oldCaseNote = req.getCaseNote();
						
						if(oldCaseNote != null && oldCaseNote.getOpenRequests() != null)
						{
							oldCaseNote.getOpenRequests().remove(req);
							factory.save(oldCaseNote);
						}
						
						req.setCaseNote(doCaseNote);
						
						factory.save(req);
						
						if(doCaseNote.getOpenRequests() == null)
							doCaseNote.setOpenRequests(new ArrayList());
						
						doCaseNote.getOpenRequests().add(req);
					}
				}
			}
		}
		
		factory.save(doCaseNote);
		
		CaseNoteTrackingConfigVo config = getTrackingConfig();
		
		if(caseNote.getID_PatientCaseNote() == null)
		{
			if(config != null && config.getTrackingIdNoOfDigits() != null)
			{
				doCaseNote.setTrackingID(formatTrackingId(doCaseNote.getId(), config.getTrackingIdNoOfDigits()));
			}
			else
			{
				doCaseNote.setTrackingID(doCaseNote.getId().toString());
			}
			
			if(comments != null)
			{
				PatientCaseNoteComment doComments = PatientCaseNoteCommentSaveVoAssembler.extractPatientCaseNoteComment(factory, comments);
				doComments.setCaseNote(doCaseNote);
			
				doCaseNote.setCurrentComment(doComments);
			}
			
			factory.save(doCaseNote);
		}
		
		return PatientCaseNoteVoAssembler.create(doCaseNote);
	}

	public Boolean checkIfThereIsACaseNoteFolderCreated(PatientRefVo patient, CaseNoteStatus status, FolderCaseNote folder,	PatientCaseNoteRefVo selectedCaseNoteFolder) 
	{
		if(patient == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String query = "select count(patCaseNote.id) from PatientCaseNote as patCaseNote where patCaseNote.patient.id = :PatId";
		markers.add("PatId");
		values.add(patient.getID_Patient());
		
		if(status != null)
		{
			query += " and patCaseNote.status.id = :StatusId";
			markers.add("StatusId");
			values.add(status.getID());
		}
		
		if(selectedCaseNoteFolder != null)
		{
			query += " and patCaseNote.id <> :SelectedCaseNote";
			markers.add("SelectedCaseNote");
			values.add(selectedCaseNoteFolder.getID_PatientCaseNote());
		}
		
		if(folder != null)
		{
			query += " and patCaseNote.folder.id = :FolderId";
			markers.add("FolderId");
			values.add(folder.getID());
		}
		
		Object[] count = factory.find(query, markers, values).toArray();
		
		if(count != null && count.length > 0)
			return ((Long) count[0]).intValue() > 0 ? true : false;
		
		return false;
	}

	public PatientCaseNoteVo changeFromTemporaryToPermanent(PatientCaseNoteVo caseNote) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if(caseNote == null)
			throw new CodingRuntimeException("Cannot save a null PatientCaseNoteVo.");
		
		if(!caseNote.isValidated())
			throw new CodingRuntimeException("PatientCaseNoteVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		PatientCaseNote doCaseNote = PatientCaseNoteVoAssembler.extractPatientCaseNote(factory, caseNote);
		
		String query = "select patCaseNote from PatientCaseNote as patCaseNote where patCaseNote.patient.id = :PatId and patCaseNote.type.id = :Permanentid and patCaseNote.status.id = :MissingId and patCaseNote.folder.id = :FolderId";
		List<?> permanentCaseNotesList = factory.find(query, new String[] {"PatId", "Permanentid", "MissingId", "FolderId"}, new Object[] {caseNote.getPatient().getID_Patient(), CaseNoteType.PERMANENT.getID(), CaseNoteStatus.MISSING.getID(), caseNote.getFolder().getID()});
		
		if(permanentCaseNotesList != null && permanentCaseNotesList.size() > 0)
		{
			for(int i=0; i<permanentCaseNotesList.size(); i++)
			{
				PatientCaseNote caseNotePermanent = (PatientCaseNote) permanentCaseNotesList.get(i);
				
				if(caseNotePermanent == null)
					continue;
				
				if(caseNotePermanent.getOpenRequests() != null)
				{
					for(int j=0; j<caseNotePermanent.getOpenRequests().size(); j++)
					{
						if(!(caseNotePermanent.getOpenRequests().get(j) instanceof PatientCaseNoteRequest))
							continue;
						
						PatientCaseNoteRequest req = (PatientCaseNoteRequest) caseNotePermanent.getOpenRequests().get(j);
						req.setCaseNote(doCaseNote);
						factory.save(req);
						
						if(doCaseNote.getOpenRequests() == null)
						{
							doCaseNote.setOpenRequests(new ArrayList<PatientCaseNoteRequest>());
						}
						doCaseNote.getOpenRequests().add(req);
					}
				}
			}
		}
		
		factory.save(doCaseNote);
		
		return PatientCaseNoteVoAssembler.create(doCaseNote);
	}

	//WDEV-20023
	public PatientCaseNoteVoCollection getCaseNoteFolders(PatientRefVo patientRef, LocationRefVo locationRef)
	{
		if(patientRef == null && locationRef==null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hqlConditions = new StringBuffer();
		
		StringBuffer hql = new StringBuffer("select patCaseNote from PatientCaseNote as patCaseNote  ");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = "";
		
		if (patientRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" patCaseNote.patient.id = :PatId ");
			markers.add("PatId");
			values.add(patientRef.getID_Patient());
			andStr = " and ";
		}
		
		if (locationRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" patCaseNote.currentLocation.id = :LocId ");
			markers.add("LocId");
			values.add(locationRef.getID_Location());
			andStr = " and ";
		}
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}

		List<?> listCaseNote = factory.find((hql.toString() + hqlConditions.toString() ).toString(), markers, values);
		
		return PatientCaseNoteVoAssembler.createPatientCaseNoteVoCollectionFromPatientCaseNote(listCaseNote);
	}

	public PatientCaseNoteVo createAutomatedCaseNote(PatientRefVo patient, MemberOfStaffRefVo mos, LocationLiteVo location)
	{
		if(patient == null)
			return null;
		
		PatientCaseNoteVo caseNoteFolder = new PatientCaseNoteVo();
		
		caseNoteFolder.setType(CaseNoteType.PERMANENT);
		caseNoteFolder.setPatient(patient);
		
		CaseNoteTrackingConfigVo config = getTrackingConfig();
		
		if (config != null && config.getDefaultFolderForAutomaticCaseNote() != null)
		{
			caseNoteFolder.setFolder(config.getDefaultFolderForAutomaticCaseNote());
		}
		else
		{
			FolderCaseNoteCollection lookupColl = LookupHelper.getFolderCaseNote(getLookupService());
			caseNoteFolder.setFolder(lookupColl.get(0));
		}
		
		caseNoteFolder.setStatus(CaseNoteStatus.REQUIRES_CASE_NOTES);
		
		//WDEV-21207
		if(getTrackingConfigLocation() != null)
		{
			location = getTrackingConfigLocation();
		}
		
		if(location == null)
			return null;
		
		caseNoteFolder.setCurrentLocation(location);
		caseNoteFolder.setTrackingID(DUMMY_TRACKING_ID);
		
		if(mos == null)
		{
			Object mosUser = getMosUser();
			
			if(mosUser instanceof MemberOfStaffRefVo)
			{
				mos = (MemberOfStaffRefVo) mosUser;
			}
		}
		
		if(mos == null)
			return null;
		
		caseNoteFolder.setCreatedBy(mos);
		caseNoteFolder.setCreationDate(new DateTime());
		
		caseNoteFolder.validate();
		
		return caseNoteFolder;
	}

	//WDEV-21973
	public void createCaseNoteFolderIfNone(PatientRefVo patient)
	{
		if (patientHasCaseNoteFolder(patient))
			return;
		
		PatientCaseNoteVo record = createAutomatedCaseNote(patient, null, null);
		
		if(record != null)
		{
			try
			{
				saveCaseNoteFolder(record);
			}
			catch (DomainInterfaceException e)
			{
				e.printStackTrace();
			}
			catch (StaleObjectException e)
			{
				e.printStackTrace();
			}
			catch (UniqueKeyViolationException e)
			{
				e.printStackTrace();
			}
		}
	}
	
	private boolean patientHasCaseNoteFolder(PatientRefVo patient)
	{
		if(patient == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select count (patCaseNote.id) from PatientCaseNote as patCaseNote where patCaseNote.patient.id = :PatId";
		
		List<?> count = factory.find(query, new String[] {"PatId"}, new Object[] {patient.getID_Patient()});
		
		if (count != null && count.size() > 0 && ((Long) count.get(0)).intValue() > 0)
			return true;
		
		return false;
	}

	public Boolean isCaseNoteRequestStale(PatientCaseNoteRequestRefVo caseNoteRequest)
	{
		if(caseNoteRequest == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> request = factory.find("select request.id from PatientCaseNoteRequest as request where request.id = :RequestID and request.version > :RequestVersion", new String[] {"RequestID", "RequestVersion"}, new Object[] {caseNoteRequest.getID_PatientCaseNoteRequest(), caseNoteRequest.getVersion_PatientCaseNoteRequest()});
		
		if(request != null && request.size() > 0)
			return true;
		
		return false;
	}
}
