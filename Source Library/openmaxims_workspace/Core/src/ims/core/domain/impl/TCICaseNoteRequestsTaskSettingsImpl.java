//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.configuration.domain.objects.TCIRequestsBatch;
import ims.core.domain.base.impl.BaseTCICaseNoteRequestsTaskSettingsImpl;
import ims.core.vo.domain.TCIRequestsBatchSettingsVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class TCICaseNoteRequestsTaskSettingsImpl extends BaseTCICaseNoteRequestsTaskSettingsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.TCIRequestsBatchSettingsVo saveConfiguration(ims.core.vo.TCIRequestsBatchSettingsVo settingsVo) throws ims.domain.exceptions.StaleObjectException
	{
		if (settingsVo == null)
			throw new CodingRuntimeException("Invalid Configuration.");
		if (!settingsVo.isValidated())
			throw new CodingRuntimeException("Configuration not validated.");
		
		DomainFactory domainFactory = getDomainFactory();
		
		TCIRequestsBatch tciRequestDO = TCIRequestsBatchSettingsVoAssembler.extractTCIRequestsBatch(domainFactory, settingsVo);
		
		domainFactory.save(tciRequestDO);
		
		return TCIRequestsBatchSettingsVoAssembler.create(tciRequestDO);		
	}

	public ims.core.vo.TCIRequestsBatchSettingsVo getConfiguration(ims.admin.vo.ConfiguredJobVo jobVo)
	{
		if (jobVo == null)
			throw new CodingRuntimeException("The job argument is null or invalid.");
		
		DomainFactory jobFactory = getDomainFactory();
		
		TCIRequestsBatch tciReqDO = TCIRequestsBatch.getTCIRequestsBatchFromConfiguredJobDetails(jobFactory, jobVo.getBoId());
		
		return TCIRequestsBatchSettingsVoAssembler.create(tciReqDO);
	}
}
