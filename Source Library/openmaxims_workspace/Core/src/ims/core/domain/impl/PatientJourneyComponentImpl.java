//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5443.18271)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.util.List;

import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralForPatientJourneyVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.domain.CatsReferralForPatientJourneyVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.domain.base.impl.BasePatientJourneyComponentImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.pathways.configuration.vo.PathwayRefVo;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.vo.PatientJourneyInterfaceVo;
import ims.pathways.vo.PatientPathwayJourneyRefVo;
import ims.pathways.vo.domain.PatientJourneyEventInterfaceVoAssembler;
import ims.pathways.vo.domain.PatientJourneyInterfaceVoAssembler;
import ims.pathways.vo.domain.PatientJourneyTargetInterfaceVoAssembler;

public class PatientJourneyComponentImpl extends BasePatientJourneyComponentImpl
{

	private static final long serialVersionUID = 1L;

	public CatsReferralForPatientJourneyVo getCatsReferral(CatsReferralRefVo catsReferral)
	{
		return CatsReferralForPatientJourneyVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral()));
	}

	public PatientJourneyInterfaceVo getPatientJourney(PatientPathwayJourneyRefVo journey)
	{
		if (journey == null)
			throw new DomainRuntimeException("Invalid Journey");

		DomainFactory factory = getDomainFactory();

		PatientJourneyInterfaceVo vo = PatientJourneyInterfaceVoAssembler.create((PatientPathwayJourney) factory.getDomainObject(journey));

		if (vo == null)
			throw new DomainRuntimeException("Journey not found");

		vo.setJourneyEvents(PatientJourneyEventInterfaceVoAssembler.createPatientJourneyEventInterfaceVoCollectionFromPatientEvent(factory.find("from PatientEvent pe where pe.journey.id = " + journey.getID_PatientPathwayJourney() + " order by pe.eventDateTime, pe.id", ConfigFlag.UI.MAX_NO_OF_PATIENT_JOURNEY_EVENTS_LISTED.getValue())));
		vo.setPathwayTargets(PatientJourneyTargetInterfaceVoAssembler.createPatientJourneyTargetInterfaceVoCollectionFromPatientJourneyTarget(listCurrentPathwayJourneyTargets(factory, journey, vo.getPathway())));
		return vo;
	}

	private List listCurrentPathwayJourneyTargets(DomainFactory factory, PatientPathwayJourneyRefVo profile, PathwayRefVo pathway)
	{
		return factory.find(" from PatientJourneyTarget pt where pt.journeyClock = pt.pathwayJourney.currentClock and pt.pathwayJourney.id = " + profile.getID_PatientPathwayJourney() + " and pt.pathwayTarget.pathway.id = " + pathway.getID_Pathway());
	}

}
