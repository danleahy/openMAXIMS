//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import ims.core.domain.base.impl.BasePrintEvolveLabelImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.EpisodeOfCareForEvolveLabelsVo;
import ims.core.vo.EpisodeOfCareForEvolveLabelsVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.EpisodeOfCareForEvolveLabelsVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class PrintEvolveLabelImpl extends BasePrintEvolveLabelImpl
{
	private static final long serialVersionUID = 1L;

	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List<?> lst = factory.find("select r.reportXml, t.templateXml from ReportBo as r left join r.templates as t where (r.imsId= :imsid) order by t.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1]};
		}
		
		return result;
	}

	public EpisodeOfCareForEvolveLabelsVoCollection listEpisodesByPatient(PatientRefVo patient) 
	{
		if(patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("Cannot list Episodes of Care by a null Patient Id.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select ep from EpisodeOfCare as ep left join ep.careSpell as cs left join cs.patient as p where p.id = :PatientId order by ep.startDate desc";
		List<?> episodes = factory.find(query, new String[] {"PatientId"}, new Object[] {patient.getID_Patient()});
		
		EpisodeOfCareForEvolveLabelsVoCollection episodesVo = EpisodeOfCareForEvolveLabelsVoAssembler.createEpisodeOfCareForEvolveLabelsVoCollectionFromEpisodeOfCare(episodes);
		
		if(episodes != null)
		{
			for(EpisodeOfCareForEvolveLabelsVo episode : episodesVo)
			{
				//get the primary diagnosis if it exists
				String primaryHql = "select distinct primary.diagnosisDescription from CsPrimaryDiagnosis as csp left join csp.diagnosis as primary where (csp.episodeOfCare.id = :episId and csp.isActive = :status)";
				List<?> diagnosisNames = getDomainFactory().find(primaryHql, new String[]{"episId", "status"}, new Object[]{ episode.getID_EpisodeOfCare(), Boolean.TRUE});
				if(diagnosisNames != null && diagnosisNames.size() > 0)
				{
					String strDisplay = "";
					int i=0;
					Iterator it = diagnosisNames.iterator();
					while(it.hasNext())
					{
						if(i > 0)
							strDisplay += ", ";	
						
						strDisplay += (String)it.next();
						i++;
					}
					
					if(strDisplay.equals(""))
						strDisplay = "unknown";
						
					episode.setPrimaryDiagnosis(" - " + strDisplay + " - ");
				}
				else
					episode.setPrimaryDiagnosis(" - unknown - ");
			}
		}
		
		return episodesVo;
	}

	public LocationLiteVoCollection listWard(String name) 
	{
		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		
		String query = "from Location l where l.type.id = :LocationType and l.isActive = 1 and l.isVirtual = 0";
		markers.add("LocationType");
		values.add(LocationType.WARD.getID());
		
		if (name != null)
		{
			query += " and l.upperName like :name"; 
			markers.add("name");
			values.add(name.toUpperCase() + "%");
		}
		
		query += " order by l.upperName asc"; //WDEV-20219 l.name
		List<?> locations = factory.find(query, markers, values);
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(locations);
	}
}
