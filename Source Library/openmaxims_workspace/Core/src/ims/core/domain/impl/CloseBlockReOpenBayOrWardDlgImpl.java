//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.pas.domain.objects.WardBayConfig;
import ims.core.domain.WardView;
import ims.core.domain.base.impl.BaseCloseBlockReOpenBayOrWardDlgImpl;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.WardBayConfigForWardViewVo;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.WardBayConfigForWardViewVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class CloseBlockReOpenBayOrWardDlgImpl extends BaseCloseBlockReOpenBayOrWardDlgImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection listBaysForCurrentWard(ims.framework.interfaces.ILocation location)
	{
		if(location == null )
			throw new DomainRuntimeException("Invalid ILocation");
		
		String hql = "from Location loc where loc.type = " + LocationType.BAY.getId() + " and loc.isActive = 1 and loc.parentLocation.id = " + location.getID();		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(getDomainFactory().find(hql));
	
	}

	public WardBayConfigForWardViewVo getWardBayConfigForWard(LocationRefVo loc)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getWardBayConfigByWard(loc);
	}

	public WardBayConfigForWardViewVo saveConfiguration(WardBayConfigForWardViewVo wardConfigVo) throws StaleObjectException
	{
		if (wardConfigVo == null)
			throw new CodingRuntimeException("Invalid Argument. Cannot save a null WardBayConfigForWardViewVo object.");
		if (!wardConfigVo.isValidated())
			throw new CodingRuntimeException("Invalid Argument. Cannot save a invalid WardBayConfigForWardViewVo object.");
		DomainFactory factory = getDomainFactory();
		
		WardBayConfig savedconfigDO = (WardBayConfig) factory.getDomainObject(WardBayConfig.class, wardConfigVo.getID_WardBayConfig());
		
		if (savedconfigDO.getVersion() > wardConfigVo.getVersion_WardBayConfig())
			throw new StaleObjectException(savedconfigDO, "The configuration has been changed by another user.");
		
		WardBayConfig configDO = WardBayConfigForWardViewVoAssembler.extractWardBayConfig(factory, wardConfigVo);
		
		factory.save(configDO);
		
		return WardBayConfigForWardViewVoAssembler.create(configDO);
		
	}
}
