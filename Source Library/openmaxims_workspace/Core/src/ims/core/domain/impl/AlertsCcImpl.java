//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.domain.objects.PatientNoAlertInfo;
import ims.core.domain.base.impl.BaseAlertsCcImpl;
import ims.core.vo.domain.PatientAlertLiteVoAssembler;
import ims.core.vo.domain.PatientNoAlertInfoForTriageVoAssembler;
import ims.core.vo.lookups.AlertAccessRights;
import ims.core.vo.lookups.AlertType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAlertsAccess;
import ims.framework.interfaces.IAppRole;

import java.util.ArrayList;
import java.util.List;

public class AlertsCcImpl extends BaseAlertsCcImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.PatientAlertLiteVoCollection listAlerts(ims.core.patient.vo.PatientRefVo patient, IAppRole role)
	{
		if(patient == null)
			throw new CodingRuntimeException("Cannot list Patient Alerts on null Patient Id.");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select patAlrt from PatientAlert patAlrt left join patAlrt.alertType as alertType ");
		hql.append(" where patAlrt.patient.id = :patient");
		names.add("patient");
		values.add(patient.getID_Patient());
		
		hql.append (" and patAlrt.isCurrentlyActiveAlert = :isActive");
		names.add("isActive");
		values.add(Boolean.TRUE);
		
		String alertCategoryIds = getAlertCategoryIds(role);
		if(alertCategoryIds == null || alertCategoryIds.length() == 0)
			return null;
		
		hql.append (" and alertType.parent is not null and alertType.parent.id in (");
		hql.append(alertCategoryIds);
		hql.append(")");
		
		hql.append(" order by patAlrt.systemInformation.creationDateTime desc");
	
		List<?> list = factory.find(hql.toString(), names,values);
		return(PatientAlertLiteVoAssembler.createPatientAlertLiteVoCollectionFromPatientAlert(list));
	}
	
	private String getAlertCategoryIds(IAppRole role)
	{
		IAlertsAccess[] alertsAccessList = role.getAlertsAccessList();
		
		String ids = "";
		
		for(int i=0; i<alertsAccessList.length; i++)
		{
			IAlertsAccess alertAccess = alertsAccessList[i];
			
			if(alertAccess == null)
				continue;
			
			if(!(alertAccess.getIAlertType() instanceof AlertType) || !(alertAccess.getIAccess() instanceof AlertAccessRights))
				continue;
			
			AlertType alertType = (AlertType) alertAccess.getIAlertType();
			AlertAccessRights access = (AlertAccessRights) alertAccess.getIAccess();
			
			if(AlertAccessRights.READ_ONLY.equals(access) || AlertAccessRights.READ_WRITE.equals(access))
			{
				ids += (ids.length() > 0 ? "," : "") + alertType.getID();
			}
		}
		
		return ids.length() > 0 ? ids : null;
	}

	public ims.core.vo.PatientNoAlertInfoForTriageVo getPatientNoAlertInfo(ims.core.patient.vo.PatientRefVo patient)
	{
		if(patient == null || !patient.getID_PatientIsNotNull())
			throw new CodingRuntimeException("Cannot get PatientNoAllergyInfo on null Patient Id.");
		
		DomainFactory factory = getDomainFactory();
		
		PatientNoAlertInfo patientNoAllergyInfo = PatientNoAlertInfo.getPatientNoAlertInfoFromPatient(factory, patient.getID_Patient());
		return PatientNoAlertInfoForTriageVoAssembler.create(patientNoAllergyInfo);
	}

	public ims.core.vo.PatientNoAlertInfoForTriageVo savePatientNoAlertInfo(ims.core.vo.PatientNoAlertInfoForTriageVo patientNoAlertInfo) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(patientNoAlertInfo == null)
			throw new CodingRuntimeException("Cannot save a null PatientNoAlertInfo.");
		
		if(!patientNoAlertInfo.isValidated())
			throw new CodingRuntimeException("PatientNoAlertInfo is not validated");
		
		DomainFactory factory = getDomainFactory();
		
		PatientNoAlertInfo doPatientNoAlertInfo = PatientNoAlertInfoForTriageVoAssembler.extractPatientNoAlertInfo(factory, patientNoAlertInfo);
		
		try
		{
			factory.save(doPatientNoAlertInfo);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		return PatientNoAlertInfoForTriageVoAssembler.create(doPatientNoAlertInfo);
	}
}
