//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.util.List;

import ims.core.clinical.vo.PatientCaseNoteRefVo;
import ims.core.domain.PatientCaseNotes;
import ims.core.domain.base.impl.BaseCaseNoteFolderCcImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CaseNoteFolderCcConfigVo;
import ims.core.vo.CaseNoteFolderCcConfigVoCollection;
import ims.core.vo.PatientCaseNoteListVoCollection;
import ims.core.vo.domain.PatientCaseNoteListVoAssembler;
import ims.core.vo.lookups.CaseNoteStatus;
import ims.core.vo.lookups.FolderCaseNote;
import ims.domain.DomainFactory;

public class CaseNoteFolderCcImpl extends BaseCaseNoteFolderCcImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.PatientCaseNoteListVoCollection listCaseNoteFolders(ims.core.patient.vo.PatientRefVo patient, String types, String statuses)
	{
		if(patient == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select patCaseNote from PatientCaseNote as patCaseNote left join patCaseNote.type as types left join patCaseNote.status as statuses where patCaseNote.patient.id = :PatId";
		
		if(types != null && types.length() > 0)
		{
			query += " and types.id in (" + types + ")"; 
		}
		
		if(statuses != null && statuses.length() > 0)
		{
			query += " and statuses.id in (" + statuses + ")"; 
		}
		
		query += " order by patCaseNote.creationDate asc";
		
		List<?> listCaseNote = factory.find(query, new String[] {"PatId"}, new Object[] {patient.getID_Patient()});
		
		return PatientCaseNoteListVoAssembler.createPatientCaseNoteListVoCollectionFromPatientCaseNote(listCaseNote);
	}

	public PatientCaseNoteListVoCollection listCaseNoteFolders(PatientRefVo patient, CaseNoteFolderCcConfigVoCollection configs) 
	{
		if(patient == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select patCaseNote from PatientCaseNote as patCaseNote left join patCaseNote.type as types left join patCaseNote.status as statuses where patCaseNote.patient.id = :PatId";
		
		if(configs != null)
		{
			query += " and (";
			
			for(int i=0; i<configs.size(); i++)
			{
				CaseNoteFolderCcConfigVo config = configs.get(i);
				
				if(config == null)
					continue;
				
				if(config.getType() != null )
				{
					query += "(types.id = " + config.getType().getID();
					
					if(config.getStatuses() != null && config.getStatuses().size() > 0)
					{
						query += " and statuses.id in (";
						for(int j=0; j<config.getStatuses().size(); j++)
						{
							if(config.getStatuses().getIndex(j) == null)
								continue;
							
							query += (j > 0 && (j <= config.getStatuses().size() - 1) ? "," : "") + config.getStatuses().getIndex(j).getID();
						}
						
						query += ")";
					}
					
					query += ")" + (i<configs.size() - 1 ? " or " : "");
				}
			}
			
			query += ")";
		}
		
		query += " order by patCaseNote.creationDate asc";
		
		List<?> listCaseNote = factory.find(query, new String[] {"PatId"}, new Object[] {patient.getID_Patient()});
		
		return PatientCaseNoteListVoAssembler.createPatientCaseNoteListVoCollectionFromPatientCaseNote(listCaseNote);
	}

	public Boolean checkIfThereIsACaseNoteFolderCreated(PatientRefVo patient, CaseNoteStatus status, FolderCaseNote folder,	PatientCaseNoteRefVo selectedCaseNoteFolder) 
	{
		PatientCaseNotes impl = (PatientCaseNotes) getDomainImpl(PatientCaseNotesImpl.class);
		return impl.checkIfThereIsACaseNoteFolderCreated(patient, status, folder, selectedCaseNoteFolder);
	}
}
