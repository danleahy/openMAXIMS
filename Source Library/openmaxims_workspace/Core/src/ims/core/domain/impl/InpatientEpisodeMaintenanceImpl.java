//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Michael Noonan using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ElectiveListStatus;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.RTTManagementGridValueVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ElectiveListStatusReason;
import ims.clinical.domain.objects.AwaitingHistology;
import ims.clinical.domain.objects.CodingComment;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.domain.objects.BedSpaceStateStatus;
import ims.core.admin.pas.domain.objects.ConsultantStay;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.domain.objects.HomeLeave;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.domain.objects.PendingAdmissionStatus;
import ims.core.admin.pas.domain.objects.PendingEmergencyAdmission;
import ims.core.admin.pas.domain.objects.PendingNoEDEmergencyAdmit;
import ims.core.admin.pas.domain.objects.TransferHistory;
import ims.core.admin.pas.domain.objects.WardStay;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.domain.ADT;
import ims.core.domain.BedAdmissionComponent;
import ims.core.domain.BedInfoDialog;
import ims.core.domain.WardConsultantSpecialtyTransferDlg;
import ims.core.domain.WardView;
import ims.core.domain.base.impl.BaseInpatientEpisodeMaintenanceImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextInterfaceVo;
import ims.core.vo.ConsultantStayVo;
import ims.core.vo.DischargedEpisodeMaintenanceVo;
import ims.core.vo.DischargedEpisodeMaintenanceVoCollection;
import ims.core.vo.InpatientEpisodeMaintenanceVo;
import ims.core.vo.InpatientMaintenanceSummaryVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardStayVo;
import ims.core.vo.domain.ConsultantStayVoAssembler;
import ims.core.vo.domain.DischargedEpisodeMaintenanceVoAssembler;
import ims.core.vo.domain.InpatientEpisodeMaintenanceVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.domain.MedicWithMappingsLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.domain.WardStayVoAssembler;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.MethodOfAdmission;
import ims.core.vo.lookups.MsgUpdateType;
import ims.core.vo.lookups.PatientStatus;
import ims.core.vo.lookups.SourceOfAdmission;
import ims.core.vo.lookups.SourceOfEmergencyReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.WardType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.domain.objects.TrackingAttendanceStatus;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppUser;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PathwayRTTStatus;
import ims.pathways.domain.objects.PathwaysRTTClockImpact;
import ims.pathways.domain.objects.PatientEvent;
import ims.pathways.vo.PathwayRTTStatusRefVo;
import ims.pathways.vo.PathwaysRTTClockImpactRefVo;
import ims.pathways.vo.lookups.EventStatus;
import ims.pathways.vo.lookups.RTTClockState;
import ims.scheduling.domain.objects.Appointment_Status;
import ims.scheduling.domain.objects.CancellationTypeReason;
import ims.scheduling.domain.objects.PendingEmergencyTheatre;
import ims.scheduling.vo.CancellationTypeReasonVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;
import ims.scheduling.vo.domain.CancellationTypeReasonVoAssembler;
import ims.scheduling.vo.lookups.CancelAppointmentReason;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;
import ims.scheduling.vo.lookups.Rule28DayStatus;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;


public class InpatientEpisodeMaintenanceImpl extends BaseInpatientEpisodeMaintenanceImpl
{

	private static final long serialVersionUID = 1L;
	
	
	public static final Integer RESPONSE_SUCCESS					= -50;
	public static final Integer RESPONSE_RTT_NOT_IN_USE				= -53;
	public static final Integer RESPONSE_REFERRAL_NOT_SUBJECT_RTT	= -54;
	public static final Integer RESPONSE_NOT_THE_LATEST				= -55;

	/**
	* Gets current and discharged episodes for patient
	*/
	public ims.core.vo.InpatientMaintenanceSummaryVo summary(ims.core.patient.vo.PatientRefVo patient)
	{
		DomainFactory factory = getDomainFactory();
		ADT adt = (ADT)getDomainImpl(ADTImpl.class);
		InpatientEpisode episode = adt.getCurrentAdmission(patient);
		InpatientMaintenanceSummaryVo summary = new InpatientMaintenanceSummaryVo();
		summary.setCurrentInpatientEpisode(InpatientEpisodeMaintenanceVoAssembler.create(episode));
		
		AdmissionDetail doAdmissionDetail=null;
		if(episode!=null && episode.getPasEvent()!=null)
		{
			List<AdmissionDetail> admList = factory.find("from AdmissionDetail adm where adm.pasEvent.id = " + episode.getPasEvent().getId());
			if(admList != null && admList.size() > 0)
			{
				doAdmissionDetail =  (AdmissionDetail) admList.get(0);
			}
			//WDEV-22877
			if (doAdmissionDetail != null && doAdmissionDetail.getAdmissionWard() != null)
			{
				summary.getCurrentInpatientEpisode().setAdmissionWard(LocationLiteVoAssembler.create(doAdmissionDetail.getAdmissionWard()));
			}
			if (doAdmissionDetail != null && doAdmissionDetail.getSourceOfAdmission() != null)
			{
				Integer lookupId = doAdmissionDetail.getSourceOfAdmission().getId();
				SourceOfAdmission sourceOfAdmission = (SourceOfAdmission)getLookupService().getLookupInstance(SourceOfAdmission.class, lookupId);
				if(sourceOfAdmission != null)
				{
					summary.getCurrentInpatientEpisode().setSourceOfAdmission(sourceOfAdmission);
				}
			}
			if(doAdmissionDetail != null && doAdmissionDetail.getMethodOfAdmission()!=null )
			{
				Integer lookupId = doAdmissionDetail.getMethodOfAdmission().getId();
				MethodOfAdmission methodOfAdmission = (MethodOfAdmission)getLookupService().getLookupInstance(MethodOfAdmission.class, lookupId);
				if(methodOfAdmission != null)
				{
					summary.getCurrentInpatientEpisode().setMethodOfAdmission(methodOfAdmission);
				}
			}
			if(doAdmissionDetail != null&&doAdmissionDetail.getEstDischargeDate()!=null)
			{
				summary.getCurrentInpatientEpisode().setEstDischargeDate(new DateTime(doAdmissionDetail.getEstDischargeDate()));
			}
			if(doAdmissionDetail != null)
			{
				summary.getCurrentInpatientEpisode().setIsChaplainRequired(doAdmissionDetail.isIsChaplainRequired());
			}
			if(doAdmissionDetail != null&&doAdmissionDetail.getPatientStatus()!=null)
			{
				Integer lookupId = doAdmissionDetail.getPatientStatus().getId();
				PatientStatus patientStatus = (PatientStatus)getLookupService().getLookupInstance(PatientStatus.class, lookupId);
				if(patientStatus != null)
				{
					summary.getCurrentInpatientEpisode().setPatientStatus(patientStatus);
				}
			}
			
			if(doAdmissionDetail != null&&doAdmissionDetail.getReferringConsultant()!=null)
			{
				summary.getCurrentInpatientEpisode().setReferringConsultant(MedicVoAssembler.create(doAdmissionDetail.getReferringConsultant()));
			}
			if(doAdmissionDetail!=null&&doAdmissionDetail.getService()!=null)
			{
				summary.getCurrentInpatientEpisode().setService(ServiceLiteVoAssembler.create(doAdmissionDetail.getService()));
			}
			if (doAdmissionDetail != null && doAdmissionDetail.getSourceOfEmergencyReferral() != null)
			{
				Integer lookupId = doAdmissionDetail.getSourceOfEmergencyReferral().getId();
				SourceOfEmergencyReferral sourceOfEmergencyReferral = (SourceOfEmergencyReferral)getLookupService().getLookupInstance(SourceOfEmergencyReferral.class,lookupId);
				if (sourceOfEmergencyReferral != null)
				{	
					summary.getCurrentInpatientEpisode().setSourceOfEmergencyReferral(sourceOfEmergencyReferral);
				}
			}
			
		}
		summary.setDischargedEpisodes(getDischargedEpisodes(patient));
		return summary;
	}
	
	
	private DischargedEpisodeMaintenanceVoCollection getDischargedEpisodes(PatientRefVo patVo) 
	{
		DomainFactory factory = getDomainFactory();
		String hql = "from DischargedEpisode de where de.pasEvent.patient.id = :pat and (de.isRIE is null or de.isRIE = false)";
		List<?> l = factory.find(hql, new String[] {"pat"}, new Object[] {patVo.getBoId()});
		DischargedEpisodeMaintenanceVoCollection coll =  new DischargedEpisodeMaintenanceVoCollection();
		if(l!=null)
		{
			for (Object object : l)
			{
				DischargedEpisode episode = (DischargedEpisode)object;
				DischargedEpisodeMaintenanceVo episodeVo = DischargedEpisodeMaintenanceVoAssembler.create(episode);
				AdmissionDetail admissionDetail= episode.getAdmissionDetail();
//				if(episode.getDereferredReason()!=null
//						&&episode.getDereferredReason().getCancellationReason()!=null)
//				{
//					Integer lookupId = episode.getDereferredReason().getCancellationReason().getId();
//					CancelAppointmentReason reason = (CancelAppointmentReason)getLookupService().getLookupInstance(CancelAppointmentReason.class,lookupId);
//					episodeVo.setTreatmentDeferredReason(reason);
//				}
				if(admissionDetail!=null &&episodeVo!=null)
				{
					if(admissionDetail.getWardType()!=null)
					{
						Integer lookupId = admissionDetail.getWardType().getId();
						WardType wardType=(WardType)getLookupService().getLookupInstance(WardType.class, lookupId);
						episodeVo.setWardType(wardType);
					}
					if(admissionDetail.getService()!=null)
					{
						ServiceLiteVo service=ServiceLiteVoAssembler.create(admissionDetail.getService());
						episodeVo.setService(service);
					}
					if(admissionDetail.getSourceOfAdmission()!=null)
					{
						Integer lookupId = admissionDetail.getSourceOfAdmission().getId();
						SourceOfAdmission sourceOfAdmission = (SourceOfAdmission)getLookupService().getLookupInstance(SourceOfAdmission.class, lookupId);
						episodeVo.setSourceOfAdmission(sourceOfAdmission);
					}
					if(admissionDetail.getMethodOfAdmission()!=null)
					{
						Integer lookupId = admissionDetail.getMethodOfAdmission().getId();
						MethodOfAdmission methodOfAdmission = (MethodOfAdmission)getLookupService().getLookupInstance(MethodOfAdmission.class, lookupId);
						episodeVo.setMethodOfAdmission(methodOfAdmission);
					}
					if(admissionDetail.getAdmissionDateTime()!=null)
					{
						episodeVo.setAdmissionDateTime(new DateTime(admissionDetail.getAdmissionDateTime()));
					}
					if(admissionDetail.getEstDischargeDate()!=null)
					{
						episodeVo.setEstDischargeDate(new DateTime(admissionDetail.getEstDischargeDate()));
					}
					episodeVo.setIsChaplainRequired(admissionDetail.isIsChaplainRequired());
					episodeVo.setReasonForAdmission(admissionDetail.getReasonForAdmission());
					if(admissionDetail.getReferringConsultant()!=null)
					{
						Medic medic = admissionDetail.getReferringConsultant();
						MedicVo medicVo =  MedicVoAssembler.create(medic);	
						episodeVo.setReferringConsultant(medicVo);
					}
					if(admissionDetail.getPatientStatus()!=null)
					{
						Integer lookupId = admissionDetail.getPatientStatus().getId();
						PatientStatus patientStatus = (PatientStatus)getLookupService().getLookupInstance(PatientStatus.class,lookupId);
						episodeVo.setPatientCategory(patientStatus);		
					}
					if (admissionDetail.getSourceOfEmergencyReferral() != null)
					{
						Integer lookupId = admissionDetail.getSourceOfEmergencyReferral().getId();
						SourceOfEmergencyReferral sourceOfEmergencyReferral = (SourceOfEmergencyReferral)getLookupService().getLookupInstance(SourceOfEmergencyReferral.class,lookupId);
						episodeVo.setSourceOfEmergencyReferral(sourceOfEmergencyReferral);						
					}
					//WDEV-22877 
					if (admissionDetail.getAdmissionWard() != null)
					{
						episodeVo.setAdmissionWard(LocationLiteVoAssembler.create(admissionDetail.getAdmissionWard()));
					}
					
					coll.add(episodeVo);
				}	
				
			}
		}
		return coll;
		
	}


	public void saveAdmissionDetails(InpatientEpisodeMaintenanceVo episode)	throws StaleObjectException
	{
		if(episode!=null)
		{
			DomainFactory factory=getDomainFactory();
			InpatientEpisode episodeDom=InpatientEpisodeMaintenanceVoAssembler.extractInpatientEpisode(factory, episode);
			Medic consultant = null;
			if(episode.getConsultantHcpRef()!=null&&episode.getConsultantHcpRef().getBoId()!=null)
				{
				consultant =(Medic)factory.getDomainObject(Medic.class, episode.getConsultantHcpRef().getBoId());
				}
			Medic referringMedic = null;
			if(episode.getReferringHcpRef()!=null&&episode.getReferringHcpRef().getBoId()!=null)
				{
				referringMedic = (Medic)factory.getDomainObject(Medic.class,episode.getReferringHcpRef().getBoId());
				}
			if(episodeDom.getPasEvent()!=null&&consultant!=null)
			{
				episodeDom.getPasEvent().setConsultant(consultant);
				if(episodeDom.getPasEvent().getPatient()!=null)
				{
					episodeDom.getPasEvent().getPatient().setCurrentResponsibleConsultant(consultant);
				}
			}
			if(episodeDom.getPasEvent().getPatient()!=null)
			{
				episodeDom.getPasEvent().getPatient().setWard(episodeDom.getPasEvent().getLocation());
			}
			if(episodeDom.getBed()!=null)
			{
				episodeDom.getBed().setInpatientEpisode(null);
			}
			// Make the bed available WDEV-20324
			BedSpaceState doBedSpaceState = episodeDom.getBed();
			if(doBedSpaceState != null)
			{
				doBedSpaceState.setPreviousBedStatus(doBedSpaceState.getCurrentBedStatus());
				doBedSpaceState.setCurrentBedStatus(new BedSpaceStateStatus());
				doBedSpaceState.getCurrentBedStatus().setBedStatus(getDomLookup(BedStatus.AVAILABLE));
				doBedSpaceState.getCurrentBedStatus().setStatusDateTime(new DateTime().getJavaDate());
				doBedSpaceState.setInpatientEpisode(null);
				factory.save(doBedSpaceState);	
			}
			episodeDom.setBed(null);
			factory.save(episodeDom);
			
			AdmissionDetail doAdmissionDetail=null;
			List<AdmissionDetail> admList = factory.find("from AdmissionDetail adm where adm.pasEvent.id = " + episodeDom.getPasEvent().getId());
			if(admList != null && admList.size() > 0)
			{
				doAdmissionDetail =  (AdmissionDetail) admList.get(0);
			}
			if(doAdmissionDetail != null)
			{
				doAdmissionDetail.setConsultant(consultant);
				doAdmissionDetail.setSourceOfAdmission(getDomLookup(episode.getSourceOfAdmission()));
				doAdmissionDetail.setMethodOfAdmission(getDomLookup(episode.getMethodOfAdmission()));
				doAdmissionDetail.setReferringConsultant(referringMedic);
				if (episode.getSourceOfEmergencyReferral() != null)
				doAdmissionDetail.setSourceOfEmergencyReferral(getDomLookup(episode.getSourceOfEmergencyReferral()));
			}
			factory.save(doAdmissionDetail);
			ADT adt = (ADT)getDomainImpl(ADTImpl.class);
			adt.triggerUpdateAdmissionEvent(episode.getPasEvent(),MsgUpdateType.ADMISSION);//http://jira/browse/WDEV-22831
		}
	}


	public void cancelCurrentAdmission(PatientShort patient)  throws ForeignKeyViolationException, StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		ADT adt = (ADT)getDomainImpl(ADTImpl.class);
		InpatientEpisode episode = adt.getCurrentAdmission(patient);
		AdmissionDetail doAdmissionDetail=null;
		if(episode!=null
				&&episode.getPasEvent()!=null
				&&episode.getPasEvent().getId()!=null)
		{
			List<AdmissionDetail> admList = factory.find("from AdmissionDetail adm where adm.pasEvent.id = " + episode.getPasEvent().getId());
			if(admList != null && admList.size() > 0)
			{
				doAdmissionDetail =  (AdmissionDetail) admList.get(0);
			}
			if(doAdmissionDetail!=null)
			{
				PatientElectiveList patientElectiveList = getPatientElectiveList(getDomainFactory(), doAdmissionDetail);
				if(patientElectiveList!=null)
				{
					if(patientElectiveList.getElectiveListStatusHistory().size()>1)
					{
						patientElectiveList.setElectiveListStatus(getStatusPriorToAdmission(patientElectiveList.getElectiveListStatusHistory()));
						//patientElectiveList.setAnticipatedStay(null); //??
						if(patientElectiveList.getTCIDetails()!=null)
						{
							patientElectiveList.getTCIDetails().setIsActive(true);
							patientElectiveList.getTCIDetails().setCurrentOutcome(null);
							patientElectiveList.getTCIDetails().setAdmissionDetail(null);
							if(patientElectiveList.getTCIDetails().getAppointment()!=null)//WDEV-22329
							{
								Appointment_Status status = new Appointment_Status();
								status.setStatus(getDomLookup(Status_Reason.BOOKED)); 
								patientElectiveList.getTCIDetails().getAppointment().setApptStatus(getDomLookup(Status_Reason.BOOKED));
								status.setStatusChangeDateTime(new Date());
								//WDEV-23185
								if (patientElectiveList.getTCIDetails().getAppointment().getSession() != null)
								{
									status.setSession(patientElectiveList.getTCIDetails().getAppointment().getSession());
								} //WDEV-23185
								patientElectiveList.getTCIDetails().getAppointment().setCurrentStatusRecord(status);
								patientElectiveList.getTCIDetails().getAppointment().getApptStatusHistory().add(status);
							}
						}
					}
					else
					{
						patientElectiveList.setElectiveListStatus(null);
					}
					
					if(patientElectiveList.getElectiveListReason()!=null && patientElectiveList.getElectiveListReason().getId() == ElectiveListReason.TREATMENT.getId())
					{
						if (patientElectiveList.getPathwayClock() != null)
							patientElectiveList.getPathwayClock().setStopDate(null);
					}
					factory.save(patientElectiveList);
				}
				else // not elective so start trying the others! http://jira/browse/WDEV-22329
				{
					PendingEmergencyAdmission pendingEmergencyAdmission = getPendingEmergencyAdmission(factory, doAdmissionDetail);	
					if(pendingEmergencyAdmission!=null)
					{
						pendingEmergencyAdmission.setAdmissionStatus(getDomLookup(EmergencyAdmissionStatus.DTA));
						pendingEmergencyAdmission.setConclusionDate(null);
						factory.save(pendingEmergencyAdmission);
						Tracking tracking = getTracking(factory, pendingEmergencyAdmission);
						tracking.setRequiringDischargeDocumentationReview(null);
						tracking.setIsDischarged(null);
						TrackingAttendanceStatus oldStatus= tracking.getCurrentStatus();
						
						TrackingAttendanceStatus newStatus = new TrackingAttendanceStatus();
						if(oldStatus!=null)
						{
							newStatus.setPatient(oldStatus.getPatient());
							newStatus.setEpisode(oldStatus.getEpisode());
							newStatus.setAttendance(oldStatus.getAttendance());
							newStatus.setTrackingArea(oldStatus.getTrackingArea());
							newStatus.setPrevTrackingArea(oldStatus.getPrevTrackingArea());
							newStatus.setStatusDatetime(new Date());
							IAppUser user = getDomainFactory().getDomainSession().getUser();
							if(user!=null)
							{
								MemberOfStaff mosMemberOfStaff = (MemberOfStaff)factory.getDomainObject(MemberOfStaff.class,user.getMosId());
								newStatus.setCreatedBy(mosMemberOfStaff);
							}
							newStatus.setStatus(getDomLookup(TrackingStatus.DECISION_TO_ADMIT));
							newStatus.setPrevStatus(oldStatus.getStatus());
							tracking.setCurrentStatus(newStatus);
							tracking.setCurrentArea(oldStatus.getTrackingArea());
							oldStatus.getAttendance().setEndDateTime(null); //reopen the care context
						}
						tracking.getAttendance().setDischargingHCP(null);
						tracking.getAttendance().setDischargeDateTime(null);
						tracking.getAttendance().setOutcome(null);
						tracking.getAttendance().setConclusionDateTime(null);
						factory.save(tracking);
					}
					else
					{
						PendingNoEDEmergencyAdmit pendingNoEDEmergencyAdmit = getPendingNoEDEmergencyAdmit(factory,doAdmissionDetail);
						if(pendingNoEDEmergencyAdmit!=null)
						{
							PendingAdmissionStatus pendingAdmissionStatus = new PendingAdmissionStatus();
							pendingAdmissionStatus.setStatus(getDomLookup(ims.core.vo.lookups.PendingAdmissionStatus.CREATED));
							pendingNoEDEmergencyAdmit.setCurrentStatus(pendingAdmissionStatus);
							pendingNoEDEmergencyAdmit.getStatusHistory().add(pendingAdmissionStatus);
							factory.save(pendingNoEDEmergencyAdmit);
						}
						else
						{
							PendingEmergencyTheatre pendingEmergencyTheatre = getPendingEmergencyTheatre(factory,doAdmissionDetail);
							if(pendingEmergencyTheatre!=null)
							{
								if(pendingEmergencyTheatre.getTheatreAppointmentBooked()!=null)
								{
									pendingEmergencyTheatre.setCurrentStatus(getDomLookup(PendingEmergencyTheatreStatus.THEATRE_SLOT_BOOKED));
								}
								else
								{
									pendingEmergencyTheatre.setCurrentStatus(getDomLookup(PendingEmergencyTheatreStatus.THEATRE_SLOT_TO_BE_BOOKED));
								}
								factory.save(pendingEmergencyTheatre);
							}
						}
					}
				}
				
				if(doAdmissionDetail.getAdmissionRTTOutcome()!=null)
				{
					RTTManagementGridValueVo rttMngtVo = new RTTManagementGridValueVo();
					rttMngtVo.setClockImpactRef(new PathwaysRTTClockImpactRefVo(doAdmissionDetail.getAdmissionRTTOutcome().getId(), doAdmissionDetail.getAdmissionRTTOutcome().getVersion()));
					
					if (doAdmissionDetail.getAdmissionRTTOutcome().getFinalRTTStatus() != null)
					{
						rttMngtVo.setRttStatus(new PathwayRTTStatusRefVo(doAdmissionDetail.getAdmissionRTTOutcome().getFinalRTTStatus().getId(),doAdmissionDetail.getAdmissionRTTOutcome().getFinalRTTStatus().getVersion()));
					}
					
					String catRefQuery="select ref from CatsReferral as ref left join ref.admissions as ad where ad.id = " + doAdmissionDetail.getId();
					List <CatsReferral> refList = factory.find(catRefQuery);
					CatsReferral catsReferral = null;
					if(refList != null && refList.size() > 0)
					{
						catsReferral =  (CatsReferral) refList.get(0);
					}
					
					if(catsReferral!=null)
					{
						rttMngtVo.setCatsReferral(new CatsReferralRefVo(catsReferral.getId(),catsReferral.getVersion()));
					}
					undoRTTEvent(rttMngtVo);
				}
				
				
				updateOccupiedBedsForWardAndBay(episode,doAdmissionDetail);
			}
			
	//		remove admission from CATS REferral
	//		TCIOutcomeforPatientElectiveList
	//		WardBayConfig
	//		BayConfig
// now in adt.cancelAdmission			adt.triggerCancelAdmissionEvent( new PASEventRefVo( episode.getPasEvent().getId(),episode.getPasEvent().getVersion()));
		}
		adt.cancelAdmission(patient);
	}

	
	//http://jira/browse/WDEV-22329
	private PendingEmergencyTheatre getPendingEmergencyTheatre(DomainFactory factory, AdmissionDetail doAdmissionDetail)
	{
		if(doAdmissionDetail==null)
			return null;
		String query = "select pet from PendingEmergencyTheatre as pet left join pet.admissionDetail as ad where  (pet.isRIE is null or pet.isRIE = false) and ad.id = "+doAdmissionDetail.getId();
		List <PendingEmergencyTheatre> petList = factory.find(query);
		PendingEmergencyTheatre pendingEmergencyTheatre = null;
		if(petList!=null && petList.size()>0)
		{
			pendingEmergencyTheatre = (PendingEmergencyTheatre)petList.get(0);
		}
		return pendingEmergencyTheatre;
	}

	//http://jira/browse/WDEV-22329
	private PendingNoEDEmergencyAdmit getPendingNoEDEmergencyAdmit(DomainFactory factory, AdmissionDetail doAdmissionDetail)
	{
		if(doAdmissionDetail==null)
			return null;
		String query = "select pnoed from PendingNoEDEmergencyAdmit as pnoed left join pnoed.admissionDetail as ad where (pnoed.isRIE is null or pnoed.isRIE = false) and ad.id = "+doAdmissionDetail.getId();
		List <PendingNoEDEmergencyAdmit> petList = factory.find(query);
		PendingNoEDEmergencyAdmit pendingNoEDEmergencyAdmit = null;
		if(petList!=null && petList.size()>0)
		{
			pendingNoEDEmergencyAdmit = (PendingNoEDEmergencyAdmit)petList.get(0);
		}
		return pendingNoEDEmergencyAdmit;
	}

	//http://jira/browse/WDEV-22329
	private void updateOccupiedBedsForWardAndBay(InpatientEpisode episode,  AdmissionDetail doAdmissionDetail) throws StaleObjectException
	{
		if(doAdmissionDetail!=null
			&&doAdmissionDetail.getWard()!=null
			&&doAdmissionDetail.getWard().getId()!=null
			&&episode!=null
			&&episode.getBed()!=null
			&&episode.getBed().getBay()!=null)
		{
			LocationLiteVo locBay = LocationLiteVoAssembler.create(episode.getBed().getBay());
			updateOccupiedBedsForWardAndBay(new LocationRefVo(doAdmissionDetail.getWard().getId(),doAdmissionDetail.getWard().getVersion()),
				locBay,null);
		}
	}
	
	
	//http://jira/browse/WDEV-22329
	private void updateOccupiedBedsForWardAndBay(LocationRefVo ward, LocationRefVo bayOne, LocationRefVo bayTwo) throws StaleObjectException
	{
		WardView implWardView = (WardView) getDomainImpl(WardViewImpl.class);
		implWardView.updateOccupiedBedsForWardAndBay(ward, bayOne, bayTwo);
		
	}

	//http://jira/browse/WDEV-22329
	private PendingEmergencyAdmission getPendingEmergencyAdmission(DomainFactory factory, AdmissionDetail doAdmissionDetail) {
		if(doAdmissionDetail==null||doAdmissionDetail.getPasEvent()==null)
			return null;
		String pemQuery="select pea from PendingEmergencyAdmission as pea left join pea.pasEvent as pasevent where (pea.isRIE is null or pea.isRIE = false) and pasevent.id = "+doAdmissionDetail.getPasEvent().getId();
		List <PendingEmergencyAdmission> pemList = factory.find(pemQuery);
		PendingEmergencyAdmission pendingEmergencyAdmission = null;
		if(pemList != null && pemList.size() > 0)
		{
			pendingEmergencyAdmission =  (PendingEmergencyAdmission) pemList.get(0);
		}
		return pendingEmergencyAdmission;
	}
	
	//http://jira/browse/WDEV-22329
	private Tracking getTracking(DomainFactory factory, PendingEmergencyAdmission pea)
	{
		String trackingQuery="select track from Tracking as track left join track.associatedPendingEmergencyAdmission as pea where (track.isRIE is null or track.isRIE = false) and pea.id = "+pea.getId();
		List <Tracking> trackList = factory.find(trackingQuery);
		Tracking tracking = null;
		if(trackList != null && trackList.size() > 0)
		{
			tracking =  (Tracking) trackList.get(0);
		}
		return tracking;
	}
	
	private ElectiveListStatus getStatusPriorToAdmission(List<ElectiveListStatus> history)
	{
		Collections.sort(history, new dateComparator());
		for (ElectiveListStatus electiveListStatus : history) {
			if(WaitingListStatus.ADMITTED.getID() != electiveListStatus.getElectiveListStatus().getId())
				return electiveListStatus;
		}
		return null;
	}
	
	
	private ElectiveListStatus getStatusPriorToDischargeWithTreatmentDeferred(List<ElectiveListStatus> history)
	{
		Collections.sort(history, new dateComparator());
		for (ElectiveListStatus electiveListStatus : history) {
			if(WaitingListStatus.REQUIRES_TCI.getID() != electiveListStatus.getElectiveListStatus().getId())
				return electiveListStatus;
		}
		return null;
	}
	
	
	class dateComparator implements Comparator<ElectiveListStatus> {
	    @Override
	    public int compare(ElectiveListStatus a, ElectiveListStatus b) {
	        return a.getStatusDateTime().after(  b.getStatusDateTime()) ? -1 : a.getStatusDateTime().equals( b.getStatusDateTime()) ? 0 : 1;
	    }
	}
	
	private TCIOutcomeForPatientElectiveList getPriorOutcome(List<TCIOutcomeForPatientElectiveList> history)
	{
		Collections.sort(history, new OutcomeDateComparator());
		for(TCIOutcomeForPatientElectiveList outcome:history)
		{
			if(AdmissionOfferOutcome.PATIENT_ADMITTED_TREATMENT_DEFERRED_5.getID()!=outcome.getOutcome().getId())
				return outcome;
		}
		return null;
	}
	
	class OutcomeDateComparator implements Comparator<TCIOutcomeForPatientElectiveList>
	{
		public int compare (TCIOutcomeForPatientElectiveList a,TCIOutcomeForPatientElectiveList b)
		{
			return a.getStatusDateTime().after(  b.getStatusDateTime()) ? -1 : a.getStatusDateTime().equals( b.getStatusDateTime()) ? 0 : 1;
		}
		
	}


	public DischargedEpisodeMaintenanceVo saveDischargedEpisode(DischargedEpisodeMaintenanceVo episode, InpatientEpisodeMaintenanceVo inPatDetails) throws StaleObjectException
	{
		return saveDischargedEpisode(episode, inPatDetails, null, null);
	}

	public DischargedEpisodeMaintenanceVo saveDischargedEpisode(DischargedEpisodeMaintenanceVo episode, InpatientEpisodeMaintenanceVo admissionDetailsVo,
																Boolean initialTreatementDeferredState, Boolean finalTreatmentDeferredState) throws StaleObjectException
	{
		DischargedEpisodeMaintenanceVo returnVal = null;
		if (episode != null)
		{
			DomainFactory factory = getDomainFactory();
			DischargedEpisode episodeDom=DischargedEpisodeMaintenanceVoAssembler.extractDischargedEpisode(factory, episode);
			if(admissionDetailsVo!=null)
			{
				AdmissionDetail admissionDetails = null;
				if(episodeDom.getAdmissionDetail()==null)
				{
					admissionDetails = new AdmissionDetail();	
				}
				else
				{
					admissionDetails=episodeDom.getAdmissionDetail();
				}
				Location extractLocation = LocationLiteVoAssembler.extractLocation(factory, episode.getAdmissionWard());//WDEV-23057
				admissionDetails.setAdmissionWard(extractLocation);
				admissionDetails.setSourceOfAdmission(getDomLookup(admissionDetailsVo.getSourceOfAdmission()));
				admissionDetails.setMethodOfAdmission(getDomLookup(admissionDetailsVo.getMethodOfAdmission()));
				if(admissionDetailsVo.getAdmissionDateTime()!=null)
					admissionDetails.setAdmissionDateTime(admissionDetailsVo.getAdmissionDateTime().getJavaDate());
				if(admissionDetailsVo.getEstDischargeDate()!=null)
					admissionDetails.setEstDischargeDate(admissionDetailsVo.getEstDischargeDate().getJavaDate());
				admissionDetails.setIsChaplainRequired(admissionDetailsVo.getIsChaplainRequired());
				admissionDetails.setReasonForAdmission(admissionDetailsVo.getReasonForAdmission());
				admissionDetails.setService(ServiceLiteVoAssembler.extractService(factory,  admissionDetailsVo.getService()));
				if(episode.getPasEvent()!=null) //http://jira/browse/WDEV-21727
				{
					admissionDetails.setSpecialty(getDomLookup(episode.getPasEvent().getSpecialty()));
				}
				
				if(admissionDetailsVo.getConsultantHcpRef()!=null)
				{
					admissionDetails.setConsultant((Medic)factory.getDomainObject(admissionDetailsVo.getConsultantHcpRef()));
				}
				if(admissionDetailsVo.getReferringHcpRef()!=null)
				{
					admissionDetails.setReferringConsultant((Medic)factory.getDomainObject(admissionDetailsVo.getReferringHcpRef()));
				}
				if(admissionDetailsVo.getReferringConsultant()!=null)
				{
					admissionDetails.setReferringConsultant((Medic)factory.getDomainObject(admissionDetailsVo.getReferringConsultant()));
				}
				else
				{
					admissionDetails.setReferringConsultant(null);
				}
				admissionDetails.setPatientStatus(getDomLookup(admissionDetailsVo.getPatientStatus()));
				admissionDetails.setWardType(getDomLookup(admissionDetailsVo.getWardType()));
				admissionDetails.setIsChaplainRequired(admissionDetailsVo.getIsChaplainRequired());
				if (admissionDetailsVo.getSourceOfEmergencyReferral() != null)
				{	
					admissionDetails.setSourceOfEmergencyReferral(getDomLookup(admissionDetailsVo.getSourceOfEmergencyReferral()));
				}
				admissionDetails.setPasEvent(episodeDom.getPasEvent());
				episodeDom.setAdmissionDetail(admissionDetails);
				if(episodeDom.getPasEvent()!=null)
				{
					episodeDom.getPasEvent().setConsultant(admissionDetails.getConsultant());
					episodeDom.getPasEvent().setService(admissionDetails.getService()); //http://jira/browse/WDEV-21727
				}
				episodeDom.setIsCoded(false);
				if (admissionDetails!=null&&admissionDetails.getId()!=null
						&&Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
				{
					PatientElectiveList patientElectiveList = getPatientElectiveList(factory, admissionDetails);
					if (patientElectiveList != null)
					{
						// If there are no other elective list to be cancelled
						boolean treatmentDeferred = episodeDom.isWasTreatmentDeferred()!=null?episodeDom.isWasTreatmentDeferred():false;
						ElectiveListStatus electiveStatus = new ElectiveListStatus();
						IAppUser user = getDomainFactory().getDomainSession().getUser();
						if(user!=null)
						{
							MemberOfStaff mosMemberOfStaff = (MemberOfStaff)factory.getDomainObject(MemberOfStaff.class,user.getMosId());
							electiveStatus.setAuthoringUser(mosMemberOfStaff);
						}
						electiveStatus.setStatusDateTime(new DateTime().getJavaDate());
						if (treatmentDeferred)
						{
							electiveStatus.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
						}
						else
						{
							electiveStatus.setElectiveListStatus(getDomLookup(WaitingListStatus.REMOVED));
							electiveStatus.setRemovalReason(getDomLookup(ElectiveListStatusReason.PATIENT_ADMITTED_ELECTIVELY));
							//Start http://jira/browse/WDEV-23290
							patientElectiveList.setSubjectTo28DayRule(null);
							patientElectiveList.setRule28DayStatus(null);
							patientElectiveList.setRule28DayPeriodStart(null);
							TCIForPatientElectiveList tci = getTCIForPatientElectiveList(factory, admissionDetails);
							if(tci!=null)
							{
								if(tci.getRule28DayStatus()!=null
									&&tci.getRule28DayStatus().getId()==Rule28DayStatus.ACTIVE.getID())
								{
									tci.setRule28DayStatus(null);
								}
								if(tci.getRule28DayPeriodStart()!=null)
								{
									tci.setRule28DayPeriodStart(null);
								}
								tci.setIsActive(Boolean.FALSE);
							}
							//End http://jira/browse/WDEV-23290
						}
						patientElectiveList.setElectiveListStatus(electiveStatus);
						patientElectiveList.getElectiveListStatusHistory().add(electiveStatus);
					}
				}
			}
			
			episodeDom.getAdmissionDetail().setCodingStatus(getDomLookup(CodingStatus.FORREVIEW));
			episodeDom.getAdmissionDetail().setAdmissionWard(LocationLiteVoAssembler.extractLocation(factory, episode.getAdmissionWard()));//WDEV-23057
			factory.save(episodeDom);
			returnVal = DischargedEpisodeMaintenanceVoAssembler.create(episodeDom);
			
			
			// If the Treatment Deferred was changed then update the RTT Status accordingly
			if (initialTreatementDeferredState != null && finalTreatmentDeferredState != null && !initialTreatementDeferredState.equals(finalTreatmentDeferredState))
			{
				// Case 1 - Treatment was marked initially as deferred, but was changed on edit (to Treatment given)
				if (Boolean.FALSE.equals(finalTreatmentDeferredState))
				{
					// The process to set the clock & RTT Status for a treatment given - only works
					// if the clock & status were not progressed
					Integer responseCode = setJourneyClockAndStatusToTreatmentGiven(episode);
					
					returnVal.setDischargeTreatmentDeferredResponse(responseCode);
				}
				// Case 2 - Treatment was marked initially as given, but was changed on edit (to Treatment deferred)
				else if (Boolean.TRUE.equals(finalTreatmentDeferredState))
				{
					// The process to revert the clock & RTT Status to initial point of the Admission - only works
					// if the clock & status were not progressed
					Integer responseCode = setJourneyClockAndStatusToInitialPointOfAdmission(episode);
					
					returnVal.setDischargeTreatmentDeferredResponse(responseCode);
				}
			}
			
			
			ADT adt = (ADT)getDomainImpl(ADTImpl.class);
			if(episode.getID_DischargedEpisode()==null) // New Episode 
			{
				adt.triggerAdmissionEvent(new PASEventRefVo(episodeDom.getPasEvent().getId(),episodeDom.getPasEvent().getVersion()));
				adt.triggerDischargeEvent(new PASEventRefVo(episodeDom.getPasEvent().getId(),episodeDom.getPasEvent().getVersion()));
			}
			else
			{
				adt.triggerUpdateAdmissionEvent(new PASEventRefVo(episodeDom.getPasEvent().getId(),episodeDom.getPasEvent().getVersion()),MsgUpdateType.DISCHARGE);//http://jira/browse/WDEV-22831
			}
		}
		return returnVal;
	}


	private Integer setJourneyClockAndStatusToInitialPointOfAdmission(DischargedEpisodeMaintenanceVo episode)
	{
		// TODO Auto-generated method stub
		return null;
	}


	@SuppressWarnings({ "rawtypes", "unchecked" })
	private Integer setJourneyClockAndStatusToTreatmentGiven(DischargedEpisodeMaintenanceVo episode) throws StaleObjectException
	{
		if (!Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()))
			return RESPONSE_RTT_NOT_IN_USE;
		
		// Get the Cats Referral && Admission Details records
		AdmissionDetail admissionDetails = (AdmissionDetail) getDomainFactory().getDomainObject(AdmissionDetail.class, episode.getAdmissionDetail().getID_AdmissionDetail());
		
		if (admissionDetails == null || admissionDetails.getAdmissionRTTOutcome() == null)
			return RESPONSE_NOT_THE_LATEST;
		
		StringBuilder queryTheReferral = new StringBuilder("SELECT referral FROM CatsReferral AS referral LEFT JOIN referral.admissions AS admission ");
		queryTheReferral.append(" WHERE admission.id = :ADMISSION ");
		CatsReferral referral = (CatsReferral) getDomainFactory().findFirst(queryTheReferral.toString(), "ADMISSION", admissionDetails.getId());
		
		
		if (referral == null || !Boolean.TRUE.equals(referral.isRTTClockImpact())
				|| referral.getJourney() == null)
			return RESPONSE_REFERRAL_NOT_SUBJECT_RTT;
		

		if (referral.getJourney().getCurrentClock() == null
				|| !referral.getJourney().getCurrentClock().getId().equals(admissionDetails.getAdmissionRTTOutcome().getFinalClock().getId())
				|| (referral.getJourney().getCurrentClock().getCurrentRTTStatus() == null && admissionDetails.getAdmissionRTTOutcome().getInitialRTTStatus() != null)
				|| !referral.getJourney().getCurrentClock().getCurrentRTTStatus().getId().equals(admissionDetails.getAdmissionRTTOutcome().getInitialRTTStatus().getId()))
			return RESPONSE_NOT_THE_LATEST;
		
		
		if (RTTClockState.NOT_PRESENT.getID() == admissionDetails.getAdmissionRTTOutcome().getFinalClockState().getId())
			referral.getJourney().setCurrentClock(null);
		
		if (RTTClockState.STARTED.getID() == admissionDetails.getAdmissionRTTOutcome().getFinalClockState().getId())
			referral.getJourney().getCurrentClock().setStopDate(null);
		
		if (RTTClockState.STOPPED.getID() == admissionDetails.getAdmissionRTTOutcome().getFinalClockState().getId() && referral.getJourney().getCurrentClock().getStopDate() == null)
			referral.getJourney().getCurrentClock().setStopDate(new Date());
		
		
		PathwayRTTStatus initialRTTStatus = admissionDetails.getAdmissionRTTOutcome().getInitialRTTStatus();
		PathwayRTTStatus finalRTTStatus = admissionDetails.getAdmissionRTTOutcome().getFinalRTTStatus();
		
		
		referral.getJourney().getCurrentClock().setCurrentRTTStatus(finalRTTStatus);
		
		if (referral.getJourney().getCurrentClock().getRTTStatusHistory() == null)
			referral.getJourney().getCurrentClock().setRTTStatusHistory(new ArrayList());
		
		if (!referral.getJourney().getCurrentClock().getRTTStatusHistory().contains(finalRTTStatus))
			referral.getJourney().getCurrentClock().getRTTStatusHistory().add(finalRTTStatus);
		
		referral.setCurrentRTTStatus(finalRTTStatus);
		
		
		getDomainFactory().save(referral);
		
		
		return RESPONSE_SUCCESS;
	}


	private PatientElectiveList getPatientElectiveList(DomainFactory factory,AdmissionDetail admissionDetails)
	{
		String pelQuery="select pel from PatientElectiveList as pel left join pel.admissions as ad where ad.id = "+admissionDetails.getId();
		List <PatientElectiveList> pelList = factory.find(pelQuery);
		PatientElectiveList patientElectiveList = null;
		if(pelList != null && pelList.size() > 0)
		{
			patientElectiveList =  (PatientElectiveList) pelList.get(0);
		}
		if(patientElectiveList==null)
		{
			String pel2Query = "select p1_1 from PatientElectiveList as p1_1 left join p1_1.tCIDetails as t1_1 left join t1_1.admissionDetail as a1_1 where t1_1.admissionDetail.id = "+admissionDetails.getId();
			List <PatientElectiveList> pelList2 = factory.find(pel2Query);
			if(pelList2 != null && pelList2.size() > 0)
			{
				patientElectiveList =  (PatientElectiveList) pelList2.get(0);
			}
		}
		if(patientElectiveList==null)
		{
			String pel2Query = "select p1_1 from PatientElectiveList as p1_1 left join p1_1.tCIHistory as t1_1 left join t1_1.admissionDetail as a1_1 where t1_1.admissionDetail.id = "+admissionDetails.getId();
			List <PatientElectiveList> pelList2 = factory.find(pel2Query);
			if(pelList2 != null && pelList2.size() > 0)
			{
				patientElectiveList =  (PatientElectiveList) pelList2.get(0);
			}
		}
		return patientElectiveList;
	}
	
	public ServiceLiteVoCollection getServices()
	{
		String query = "SELECT serv FROM Service AS serv  WHERE serv.isActive = 1 AND serv.specialty is not null";
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find(query));
	}
	

	public ServiceLiteVoCollection getServicesBySpecialty(Specialty specialty)
	{
		BedAdmissionComponent bedAdmissionComponent = (BedAdmissionComponent)getDomainImpl(BedAdmissionComponentImpl.class);
		return bedAdmissionComponent.getServicesBySpecialty( specialty);
	}


	public LocationLiteVoCollection listWards(ILocation iLoc)
	{
		if(iLoc == null)
			return null;
		
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		LocationRefVo voRef = new LocationRefVo();
		voRef.setID_Location(iLoc.getID());
		return implLoc.listActiveWardsForHospitalLite(voRef).sort();
	}


	public void rieDischargedEpisode(DischargedEpisodeMaintenanceVo episode)
			throws StaleObjectException {
		if(episode!=null)
		{
			DomainFactory factory = getDomainFactory();
			DischargedEpisode episodeDom=DischargedEpisodeMaintenanceVoAssembler.extractDischargedEpisode(factory, episode);
			episodeDom.setIsRIE(true);
		for (Object obj : episodeDom.getWardStays()) {
			WardStay stay = (WardStay)obj;
			stay.setIsRIE(true);
		}
		
		for (Object obj : episodeDom.getConsultantStays()) {
			ConsultantStay stay = (ConsultantStay)obj;
			stay.setIsRIE(true);
		}

		for (Object obj : episodeDom.getHomeLeaves()) {
			HomeLeave leave = (HomeLeave)obj;
			leave.setIsRIE(true);
		}
		if(episodeDom.getVTERiskAssessment()!=null)
		{
			episodeDom.getVTERiskAssessment().setIsRIE(true);
		}
		
		if(episodeDom.getAdmissionDetail()!=null)
		{
			episodeDom.getAdmissionDetail().setIsRIE(true);
			if(episodeDom.getAdmissionDetail().getTransferHistory()!=null)
			{
				for(Object obj :episodeDom.getAdmissionDetail().getTransferHistory())
				{
					TransferHistory history = (TransferHistory)obj;
					history.setIsRIE(true);
				}
			}
			if(episodeDom.getAdmissionDetail().getCodingComments()!=null)
			{
				for (Object obj:episodeDom.getAdmissionDetail().getCodingComments())
				{
					CodingComment codingComments = (CodingComment)obj;
					codingComments.setIsRIE(true);
				}
			}
			if(episodeDom.getAdmissionDetail().getAwaitingHistology()!=null)
			{
				for (Object obj:episodeDom.getAdmissionDetail().getAwaitingHistology())
				{
					AwaitingHistology awaitingHistology = (AwaitingHistology)obj;
					awaitingHistology.setIsRIE(true);
				}
				
			}
		}
		if(episodeDom.getExtendedDetails()!=null)
		{
			episodeDom.getExtendedDetails().setIsRIE(true);
		}
		
		if(episodeDom.getCodingDelay()!=null)
		{
			episodeDom.getCodingDelay().setIsRIE(true);
		}
		factory.save(episodeDom);
		}
	}


	@Override
	public void rIEConsultantStay(ConsultantStayVo stay, DischargedEpisodeMaintenanceVo dischargedEpisode) throws StaleObjectException{
		DomainFactory factory = getDomainFactory();
		ConsultantStay stayDom = ConsultantStayVoAssembler.extractConsultantStay(factory, stay);
		stayDom.setIsRIE(true);
		factory.save(stayDom);
		
		if(dischargedEpisode != null)
		{
			DischargedEpisode episodeDom = (DischargedEpisode) factory.getDomainObject(DischargedEpisode.class, dischargedEpisode.getID_DischargedEpisode());
			episodeDom.getAdmissionDetail().setCodingStatus(getDomLookup(CodingStatus.FORREVIEW));
			factory.save(episodeDom);
		}
	}


	@Override
	public void rIEWardStay(WardStayVo stay) throws StaleObjectException {
		DomainFactory factory = getDomainFactory();
		WardStay stayDom = WardStayVoAssembler.extractWardStay(factory, stay);
		stayDom.setIsRIE(true);
		factory.save(stayDom);
	}


	@Override //http://jira/browse/WDEV-22430
	public void cancelDischarge(DischargedEpisodeMaintenanceVo episode)	throws StaleObjectException {
		if(episode==null)
			return;
		if(episode.getAdmissionDetailIsNotNull())
		{
			AdmissionDetail admissionDetail = (AdmissionDetail)getDomainFactory().getDomainObject(AdmissionDetail.class, episode.getAdmissionDetail().getBoId());
			PatientElectiveList patientElectiveList = getPatientElectiveList(getDomainFactory(), admissionDetail);
			TCIForPatientElectiveList tci = getTCIForPatientElectiveList(getDomainFactory(), admissionDetail);
			if(patientElectiveList!=null)
			{
				boolean isTreatement = ElectiveListReason.TREATMENT.getId()==patientElectiveList.getElectiveListReason().getId();
				boolean isDiagnostic = ElectiveListReason.DIAGNOSTIC.getId()==patientElectiveList.getElectiveListReason().getId();
				
				boolean treatmentDeferred = false;
				boolean diagnosticDeferred = false;
				
				DischargedEpisode dischargedEpisode = (DischargedEpisode)getDomainFactory().getDomainObject(episode);
				if(dischargedEpisode!=null)
				{
					if(dischargedEpisode.isWasTreatmentDeferred()!=null)
					{
						treatmentDeferred = isTreatement &&dischargedEpisode.isWasTreatmentDeferred().booleanValue();
					}
					if(dischargedEpisode.isWasDiagnosticDeferred()!=null)
					{
						diagnosticDeferred = isDiagnostic && dischargedEpisode.isWasDiagnosticDeferred().booleanValue();
					}
				}

				if ((treatmentDeferred || diagnosticDeferred) 
					&& (dischargedEpisode.getDereferredReason() != null && Boolean.TRUE.equals(IsNonMedicalReason(tci))))
				{
				
					if(patientElectiveList.isSubjectTo28DayRule()!=null
							&&Boolean.TRUE.equals(patientElectiveList.isSubjectTo28DayRule()))
					{
						patientElectiveList.setSubjectTo28DayRule(null);
					}
					if(patientElectiveList.getRule28DayStatus()!=null
						&&patientElectiveList.getRule28DayStatus().getId()==Rule28DayStatus.ACTIVE.getID())
					{
						patientElectiveList.setRule28DayStatus(null);
					}
					if(patientElectiveList.getRule28DayPeriodStart()!=null)
					{
						patientElectiveList.setRule28DayPeriodStart(null);
					}
					if(tci!=null)
					{
						if(tci.getRule28DayStatus()!=null
							&&tci.getRule28DayStatus().getId()==Rule28DayStatus.ACTIVE.getID())
						{
							tci.setRule28DayStatus(null);
						}
						if(tci.getRule28DayPeriodStart()!=null)
						{
							tci.setRule28DayPeriodStart(null);
						}
						tci.setIsActive(Boolean.FALSE);  //http://jira/browse/WDEV-23290 (D)
						
						TCIOutcomeForPatientElectiveList priorOutcome = getPriorOutcome(tci.getOutcomeHistory());
						if(priorOutcome!=null)
						{
							tci.getCurrentOutcome().setIsRIE(Boolean.TRUE);
							tci.setCurrentOutcome(priorOutcome);
						}
					}
					patientElectiveList.setTCIDetails(tci);
					
					ElectiveListStatus priorElectiveListStatus = getStatusPriorToDischargeWithTreatmentDeferred(patientElectiveList.getElectiveListStatusHistory());
					if(priorElectiveListStatus!=null)
					{
						patientElectiveList.getElectiveListStatus().setIsRIE(Boolean.TRUE);
						patientElectiveList.setElectiveListStatus(priorElectiveListStatus);
					}
					getDomainFactory().save(patientElectiveList);
				}
			}
		}
		ADT impl =(ADT)getDomainImpl(ADTImpl.class);
		PatientShort patient = episode.getPasEvent().getPatient();
		patient.validate();
		PASEventRefVo pasEvt=episode.getPasEvent();
		CareContextInterfaceVo voCareContext =null;
		
		if (pasEvt != null)
		{
			voCareContext = impl.getCareContextByPasEvent(pasEvt);
			if (voCareContext != null)
			{
				voCareContext.setEndDateTime(null);
				voCareContext.setBedNumber(null);
			}
		}
		try {
			impl.triggerCancelDischargeEvent(pasEvt);
			impl.cancelDischarge(patient, episode, voCareContext);
			
		} catch (ForeignKeyViolationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private TCIForPatientElectiveList getTCIForPatientElectiveList(DomainFactory factory, AdmissionDetail doAdmissionDetail)
	{
		if(doAdmissionDetail==null)
			return null;
		String query = "select tci from TCIForPatientElectiveList as tci left join tci.admissionDetail as ad where  (tci.isRIE is null or tci.isRIE = false) and ad.id = "+doAdmissionDetail.getId();
		List <TCIForPatientElectiveList> tciList = factory.find(query);
		TCIForPatientElectiveList tci = null;
		if(tciList!=null && tciList.size()>0)
		{
			tci = (TCIForPatientElectiveList)tciList.get(0);
		}
		return tci;
	}


//	private Boolean IsNonMedicalReason(TCIForPatientElectiveList tci)
//	{
//	if(tci!=null
//		&&tci.getCurrentOutcome()!=null
//		&&tci.getCurrentOutcome().getOutcome()!=null
//			&&tci.getCurrentOutcome().getOutcome().getId()==AdmissionOfferOutcome.PATIENT_ADMITTED_TREATMENT_DEFERRED_5.getId())
//			 return Boolean.TRUE;
//	else
//		return null;
//	}
	
	private Boolean IsNonMedicalReason(TCIForPatientElectiveList tci)
	{
	if(tci!=null && tci.getCurrentOutcome()!=null)
		return tci.getCurrentOutcome().isCancelledForNonMedicalReason();
	else
		return null;
	}
	

//	private Boolean IsNonMedicalReason(LookupInstance dereferredReason)
//	{
//	String hqlQuery = "select c1_1.isNonMedicalReason from CancellationTypeReason as c1_1 left join c1_1.cancellationReason as l1_1 where (c1_1.isRIE is null or c1_1.isRIE = false) and(l1_1.id = :LOOKUPID) ";
//	List<?> results = getDomainFactory().find(hqlQuery,new String[]{"LOOKUPID"},new Object[] {dereferredReason.getId()});
//	if (results == null || results.isEmpty())
//		return null;
//	else
//		return (Boolean)results.get(0);
//	}


	public MedicVo getMedicVoFromIMos(IMos mos) {
		WardConsultantSpecialtyTransferDlg wardConsultantSpecialtyTransferDlg = (WardConsultantSpecialtyTransferDlg)getDomainImpl(WardConsultantSpecialtyTransferDlgImpl.class);
		return wardConsultantSpecialtyTransferDlg.getMedicVoFromIMos(mos);
	}


	public MedicWithMappingsLiteVo getMedicWithMappingsLiteVoFromIMos(IMos iMos)
	{
		if(iMos == null)
			return null;
		DomainFactory factory = getDomainFactory();
		MemberOfStaff mos =(MemberOfStaff)factory.getDomainObject(MemberOfStaff.class, iMos.getIMosId());
		Hcp hcp = mos.getHcp();
		Medic medic = (Medic)factory.getDomainObject(Medic.class, hcp.getId());
		return MedicWithMappingsLiteVoAssembler.create(medic);
	}


	public CancellationTypeReasonVoCollection listCancellationTypeReason()
	{
		BedInfoDialog impl = (BedInfoDialog)getDomainImpl(BedInfoDialogImpl.class);
		return impl.listCancellationTypeReason();
	}

	
	public PatientShort getPatientShort(PatientRefVo patientRef)
	{
		DomainFactory factory = getDomainFactory();
		if (patientRef != null)
		{
			Patient patient = (Patient)	factory.getDomainObject(patientRef);
			return PatientShortAssembler.create(patient);
		}
		
		return null;
	}
	//WDEV-20878 
	public LocationLiteVoCollection listActiveHospitals()
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveHospitalsLite();	
	}
	
	public LocationLiteVo getHospitalForLocation(ILocation iLocation)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.getHospitalLiteForLocation(iLocation);	
	}
	//WDEV-20878 -- END 


	public CancellationTypeReasonVo getDeferredReason(CancelAppointmentReason reason)
	{
		String query = "SELECT reasonConfig FROM CancellationTypeReason AS reasonConfig left join reasonConfig.cancellationType as ctype where ctype.id = :PROVIDER_CANCELLATION and (reasonConfig.tCITheatre = 1  OR reasonConfig.outpatients  <> 1) and reasonConfig.cancellationReason.id = :REASON";
		
		List<?> results = getDomainFactory().find(query,new String[]{"PROVIDER_CANCELLATION", "REASON"},new Object[] {Status_Reason.HOSPITALCANCELLED.getID(),reason.getID()});
		if (results == null || results.isEmpty())
			return null;
		
		return CancellationTypeReasonVoAssembler.create((CancellationTypeReason) results.get(0));
	}


	/*
	 * Copied from RTT Management move once RTT manamgement is checked in(non-Javadoc)
	 * @see ims.core.domain.InpatientEpisodeMaintenance#undoRTTEvent(ims.RefMan.vo.RTTManagementGridValueVo)
	 */
	@Override
	public void undoRTTEvent(RTTManagementGridValueVo event) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		if(event!=null)
		{
			java.util.Date statusDateTime =null; 
			java.util.Date startDateTime =null;
			java.util.Date endDateTime =null;
			
			if(event.getRttStatus()!=null)
			{
				PathwayRTTStatus statusDom = (PathwayRTTStatus)factory.getDomainObject(event.getRttStatus());
				if(statusDom!=null)
				{
					statusDateTime=statusDom.getStatusDateTime();
					Calendar cal = new  GregorianCalendar();
					cal.setTime(statusDom.getStatusDateTime());
					cal.add(Calendar.MINUTE, 1);
					endDateTime = cal.getTime();
					cal.add(Calendar.MINUTE,-2);
					startDateTime =cal.getTime();
					
					
					statusDom.setIsRIE(true);
					factory.save(statusDom);
				}
			}
			PathwaysRTTClockImpact clockImpactDom =null;
			if(event.getClockImpactRef()!=null)
			{
				clockImpactDom = (PathwaysRTTClockImpact)factory.getDomainObject(event.getClockImpactRef());
				if(clockImpactDom!=null)
				{
					clockImpactDom.setIsRIE(true);
					if(clockImpactDom.isClockStopped())
					{
						clockImpactDom.getFinalClock().setStopDate(null);
					}
					else if(clockImpactDom.isClockStarted())
					{
						clockImpactDom.getFinalClock().setStartDate(null);
					}
					
					if(event.getCatsReferralIsNotNull())
					{
						CatsReferral referral =(CatsReferral)factory.getDomainObject(event.getCatsReferral());
						if(referral!=null)
						{
							referral.setCurrentRTTStatus(clockImpactDom.getInitialRTTStatus());
							if(referral.getJourney()!=null
								&&referral.getJourney().getCurrentClock()!=null)
							{
								referral.getJourney().getCurrentClock().setCurrentRTTStatus(clockImpactDom.getInitialRTTStatus());
							}
							factory.save(referral);
						}
					}
					
					String hql ="select p1_1 from PatientEvent as p1_1 left join p1_1.event as e1_1 left join p1_1.journey as p2_1, PathwaysRTTClockImpact as p3_1 left join p3_1.outcomeEvent as r1_1 left join r1_1.event as e2_1 left join p3_1.journey as p4_1"+
							" where	(p3_1.id = :clockID) and e1_1=e2_1 and p2_1=p4_1 and p1_1.eventDateTime between :startTime and :endTime order by p1_1.id desc";
					List l = factory.find(hql,new String[]{"clockID","startTime","endTime"},new Object[]{clockImpactDom.getId(),startDateTime,endDateTime});
					if(l!=null && l.size()>0)
					{
						PatientEvent patientEvent = (PatientEvent)l.get(0);
						patientEvent.setIsRIE(true);
						patientEvent.setEventStatus(getDomLookup(EventStatus.RIE));
						factory.save(patientEvent);
					}
					
					
					
					if(clockImpactDom.getFinalClock()!=null && isAllStatusHistoryRIEed(clockImpactDom.getFinalClock()))
					{
						clockImpactDom.getFinalClock().setIsRIE(true);
						if(clockImpactDom.getJourney()!=null)
						{
							clockImpactDom.getJourney().setCurrentClock(clockImpactDom.getInitialClock());
							if(clockImpactDom.getJourney().getCurrentClock()!=null) //WDEV-20886
							{
								clockImpactDom.getJourney().getCurrentClock().setCurrentRTTStatus(clockImpactDom.getInitialRTTStatus());
							}
						}
					}
					
					factory.save(clockImpactDom);	
				}
			}
			else if(event.getClockIsNotNull()) // If there was no clock impact and all events are RIE'ed RIE the clock
			{
				PathwayClock pathwayClock=(PathwayClock)factory.getDomainObject( event.getClock());
				if(pathwayClock!=null)
				{
				if(isAllStatusHistoryRIEed(pathwayClock))
				{
					pathwayClock.setIsRIE(true);
					factory.save(pathwayClock);
				}
				}
			}
		}
	}
	
	private boolean isAllStatusHistoryRIEed(PathwayClock finalClock)
	{
		boolean allRIEed = true; 
		List<PathwayRTTStatus>  list = finalClock.getRTTStatusHistory();
		if(list!=null)
		{			 
			for (PathwayRTTStatus pathwayRTTStatus : list)
			{
				if(pathwayRTTStatus.getIsRIE()==null||Boolean.FALSE.equals(pathwayRTTStatus.getIsRIE()))
					return false;
			}
		}
		return allRIEed;
	}
	
	//WDEV-22833
	public AppFormForTrackingVo getFormMenuAction(Integer formID)
	{
		if(formID == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formID);
		
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}
}
