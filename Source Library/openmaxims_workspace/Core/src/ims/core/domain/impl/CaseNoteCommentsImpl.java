//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.domain.base.impl.BaseCaseNoteCommentsImpl;
import ims.core.vo.domain.PatientCaseNoteCommentListVoAssembler;
import ims.core.vo.lookups.CaseNoteCommentType;
import ims.domain.DomainFactory;

import java.util.ArrayList;
import java.util.List;

public class CaseNoteCommentsImpl extends BaseCaseNoteCommentsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.PatientCaseNoteCommentListVoCollection listComments(ims.core.clinical.vo.PatientCaseNoteRefVo caseNoteRef, ims.core.vo.LocationLiteVo locationVo, ims.vo.interfaces.IMos reqBy, ims.framework.utils.Date dteFrom, ims.framework.utils.Date dteTo)
	{
		StringBuilder hql = new StringBuilder();
		StringBuilder conditions = new StringBuilder();
		String andStr =" AND ";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		hql.append(" select cncomment from PatientCaseNoteComment as cncomment left join cncomment.caseNote as cnote left join cncomment.noteType as noteType ");
		
		conditions.append(" noteType.id = :NoteType " );
		paramNames.add("NoteType");
		paramValues.add(CaseNoteCommentType.CASENOTE.getID());
		
		if (caseNoteRef != null)
		{
			conditions.append(andStr).append(" cnote.id = :CNOTE_ID" );
			paramNames.add("CNOTE_ID");
			paramValues.add(caseNoteRef.getID_PatientCaseNote().intValue());
			andStr = " AND";			
		}
		
		if (locationVo != null)
		{
			hql.append(" left join cncomment.caseNoteFolderLocation as loc");
			conditions.append(andStr).append(" loc.id = :REQLOCATION_ID" );
			paramNames.add("REQLOCATION_ID");
			paramValues.add(locationVo.getID_Location().intValue());
			andStr = " AND";
		}
		
		if (reqBy != null)
		{
			hql.append(" left join cncomment.authoredBy as reqMos");
			conditions.append(andStr).append(" reqMos.id = :REQMOS_ID" );
			paramNames.add("REQMOS_ID");
			paramValues.add(reqBy.getIMosId().intValue());
			andStr = " AND";
		}
		
		if (dteFrom != null)
		{
			conditions.append(andStr).append(" cncomment.authoredDate >= :REQDATE_FROM" );
			paramNames.add("REQDATE_FROM");
			paramValues.add(dteFrom.getDate());
			andStr = " AND";
		}
		
		if (dteTo != null)
		{
			conditions.append(andStr).append(" cncomment.authoredDate < :REQDATE_TO" );
			paramNames.add("REQDATE_TO");
			paramValues.add(dteTo.addDay(1).getDate());
			andStr = " AND";
		}
		
		if (paramNames.size() > 0)
		{
			hql.append(" WHERE" ).append(conditions.toString());
		}
		
		hql.append(" order by cncomment.authoredDate asc");
		
		DomainFactory factory = getDomainFactory();
		
		List<?> commentList = factory.find(hql.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray());
		
		return PatientCaseNoteCommentListVoAssembler.createPatientCaseNoteCommentListVoCollectionFromPatientCaseNoteComment(commentList);		
	}

	public ims.core.vo.LocationLiteVoCollection listCaseNoteFolderLocations(String strVal)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listCaseNoteFolderLocations(strVal);
	}
}
