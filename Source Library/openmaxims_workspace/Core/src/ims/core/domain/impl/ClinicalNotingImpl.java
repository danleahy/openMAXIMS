//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.36 build 2109.20214)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.domain.objects.ClinicalNotes;
import ims.core.clinical.domain.objects.ClinicalNotesAdditional;
import ims.core.vo.ClinicalContactVo;
import ims.core.vo.ClinicalNotesAdditionalVo;
import ims.core.vo.ClinicalNotesAdditionalVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.ClinicalNotesVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.domain.ClinicalContactVoAssembler;
import ims.core.vo.domain.ClinicalNotesAdditionalVoAssembler;
import ims.core.vo.domain.ClinicalNotesShortVoAssembler;
import ims.core.vo.domain.ClinicalNotesVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;

public class ClinicalNotingImpl extends DomainImpl implements ims.core.domain.ClinicalNoting, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public ims.core.vo.ClinicalNotesVo getClinicalNotes(Integer notesId)
	{
		if(notesId != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalNotes doClinicalNotes = (ClinicalNotes)factory.getDomainObject(ClinicalNotes.class, notesId);
			return ClinicalNotesVoAssembler.create(doClinicalNotes);
		}
		return null;
	}
	
	public ims.core.vo.ClinicalNotesVo saveClinicalNotes(ims.core.vo.ClinicalNotesVo voClinicalNotes, ClinicalNotesAdditionalVo voClinicalNotesAdditional) throws ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		if (voClinicalNotes == null)
			throw new RuntimeException("Cannot save null value for voClinicalNotes");
		if(!voClinicalNotes.isValidated())
			throw new CodingRuntimeException("ClinicalNotesVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		if (voClinicalNotes.getID_ClinicalNotes() == null)//Inserting a record
		{
			ClinicalNotesVo voCN = getClinicalContactNote(voClinicalNotes.getClinicalContact());
			if(voCN != null)
				throw new UniqueKeyViolationException("A record exists for this clinical contact, the screen will be refreshed");
		}
		
		ClinicalNotes doNote = ClinicalNotesVoAssembler.extractClinicalNotes(factory, voClinicalNotes);
		factory.save(doNote);
		
		if(voClinicalNotesAdditional != null)
		{
			if(!voClinicalNotesAdditional.isValidated())
				throw new CodingRuntimeException("ClinicalNotesAdditionalVo has not been validated");
			
			ClinicalNotesAdditional doClinNotesAdditional = ClinicalNotesAdditionalVoAssembler.extractClinicalNotesAdditional(factory, voClinicalNotesAdditional);
			doClinNotesAdditional.setClinialNotes(doNote);
			factory.save(doClinNotesAdditional);
		}
		
		return ClinicalNotesVoAssembler.create(doNote);
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public ClinicalContactVo getClinicalContact(Integer id) 
	{
		if(id != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalContact doClinicalContact = (ClinicalContact) factory.getDomainObject(ClinicalContact.class, id);
			return ClinicalContactVoAssembler.create(doClinicalContact);
		}
		return null;
	}

	public ClinicalNotesAdditionalVo getClinicalNotesAdditional(Integer clinicalNotesId) 
	{
		if (clinicalNotesId == null)
			throw new RuntimeException("Cannot get ClinicalNotesAdditionalVo for null clinicalNotesId");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ClinicalNotesAdditional noteadd where "); 
		String andStr = " ";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql.append(andStr + " noteadd.clinialNotes.id = :clinicNoteId");
 		markers.add("clinicNoteId");
		values.add(clinicalNotesId);
		andStr = " and ";	

		List listAdditional = factory.find(hql.toString(), markers,values);
		if(listAdditional != null && listAdditional.size() > 0)
		{ 
			ClinicalNotesAdditionalVoCollection voColl = ClinicalNotesAdditionalVoAssembler.createClinicalNotesAdditionalVoCollectionFromClinicalNotesAdditional(listAdditional);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		
		return null;
	}

	public ClinicalNotesVo getClinicalContactNote(ClinicalContactRefVo refClinicalContact) 
	{
		if (refClinicalContact == null)
			throw new RuntimeException("Cannot get ClinicalNotesVo for null ClinicalContactRefVo");
		
		DomainFactory factory = getDomainFactory();
		
		String hql = " from ClinicalNotes note "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
			
		if (refClinicalContact != null)
		{
			condStr.append(andStr + " (note.clinicalContact.id = :contactId )");
 			markers.add("contactId");
			values.add(refClinicalContact.getID_ClinicalContact());
			andStr = " and ";				
		}
		
		condStr.append(andStr);
		condStr.append(" note.noteType = :noteType");
		markers.add("noteType");
		values.add(getDomLookup(ims.core.vo.lookups.ClinicalNoteType.CLINICALNOTE));
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		
		ClinicalNotesVoCollection collClinicalNotesVo = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(factory.find(hql,markers,values));		
		if(collClinicalNotesVo!=null && collClinicalNotesVo.size() > 0)
			return collClinicalNotesVo.get(0);
		
		return null;
	}
	
	public ims.core.vo.ClinicalNotesShortVo getClinicalNotesShort(Integer id)
	{
		if(id != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalNotes doCareContext = (ClinicalNotes)factory.getDomainObject(ClinicalNotes.class, id);
			return ClinicalNotesShortVoAssembler.create(doCareContext);
		}
		return null;
	}
}
