//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.domain.CaseNoteTracking;
import ims.core.vo.CaseNoteFolderVo;
import ims.core.vo.CaseNoteFolderVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.dto.DTODomainImplementation;
import ims.dto.Result;
import ims.dto.ResultException;
import ims.dto.client.Casenote;
import ims.dto.client.Casenote.CasenoteRecord;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;

import java.text.ParseException;

public class CaseNoteTrackingImpl extends DTODomainImplementation implements CaseNoteTracking
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.CaseNoteFolderVo getCaseNoteFolderLocation(String strHospNum)
	{
		return null;
	}

	public CaseNoteFolderVoCollection listCaseNotes(String szHospnum, String szType, String szVolume) throws DomainInterfaceException
	{
		Casenote cnRec = null;
		try
		{
			cnRec = (Casenote) getDTOInstance(Casenote.class);
		}
		catch(ResultException e)
		{
			throw new DomainInterfaceException("Failed to Connect to PAS - Please check Configuration", e);
		}

		cnRec.Filter.clear();
		if (szHospnum == null)
		{
			throw new DomainRuntimeException("CaseNote Listt call must contain valid interface identifier");
		}

		cnRec.Filter.clear();
		cnRec.Filter.Hospnum = szHospnum;
		cnRec.Filter.List_type = szType; //VOLUME or HISTORY
		cnRec.EditFilter.IncludeHospnum = true;
		cnRec.EditFilter.IncludeList_type = true;

		if (szVolume != "")
		{
			cnRec.Filter.Vol = szVolume;
			cnRec.EditFilter.IncludeVol = true;
		}
		
		Result result = cnRec.list();
		if (result != null 
			&& result.getId() < 0 
			&& result.getId() != -2)
			throw new DomainRuntimeException("Error getting Case Note details for patient " + szHospnum + "\nError - " + result.getMessage());

		CaseNoteFolderVoCollection voColl = new CaseNoteFolderVoCollection();
		
		for(int i =0 ; i < cnRec.DataCollection.count() ; i++)
		{
			ims.core.vo.CaseNoteFolderVo voCaseNote = new CaseNoteFolderVo();
			
			CasenoteRecord rec = cnRec.DataCollection.get(i);
			
			voCaseNote.setVolume(rec.Vol);
			voCaseNote.setLocation(rec.Curr_loc);
			voCaseNote.setMoveTo(rec.Move_to);
			try 
			{
				voCaseNote.setLocDate(rec.Loc_date != "" ? new DateTime(rec.Loc_date).getDate() : null);
				voCaseNote.setRDAT(rec.Rdat != "" ? new DateTime(rec.Rdat).getDate(): null);
			} 
			catch (ParseException e) 
			{
				e.printStackTrace();
			}
			
			voCaseNote.setLocTime(rec.Loc_time != "" ? new Time(rec.Loc_time, TimeFormat.FLAT6) : null);
			voCaseNote.setRTIM(rec.Rtim != "" ? new Time(rec.Rtim, TimeFormat.FLAT6) : null);

			voCaseNote.setComments(rec.Comm);
			voCaseNote.setUNAM(rec.Unam);
		
			voColl.add(voCaseNote);
		}
		return voColl;
	}

	public ims.core.vo.CaseNoteFolderVo saveCaseNote(ims.core.vo.CaseNoteFolderVo voCaseNote) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		Casenote cnRec = null;
		try
		{
			cnRec = (Casenote) getDTOInstance(Casenote.class);
		}
		catch(ResultException e)
		{
			throw new DomainInterfaceException("Failed to Connect to PAS - Please check Configuration", e);
		}
		
		cnRec.DataCollection.add();
		CasenoteRecord dtoCN = cnRec.DataCollection.get(0);

		dtoCN.Vol = voCaseNote.getVolume();
		dtoCN.Curr_loc = voCaseNote.getLocation();
		dtoCN.Move_to = voCaseNote.getMoveTo();
		dtoCN.Loc_date = voCaseNote.getLocDate().toString(DateFormat.ISO);
		dtoCN.Loc_time = voCaseNote.getLocTime().toString(TimeFormat.FLAT6);
		dtoCN.Comm = voCaseNote.getComments();
		dtoCN.Unam = voCaseNote.getUNAM();
		dtoCN.Rdat = voCaseNote.getRDAT().toString(DateFormat.ISO);
		dtoCN.Rtim = voCaseNote.getRTIM().toString(TimeFormat.FLAT6);
		dtoCN.Hospnum = voCaseNote.getHOSPNUM();
		
		Result result = cnRec.update();
		if(result != null && result.getId() < 0)
			throw new DomainInterfaceException("Attempt to save to CaseNote failed " + result.getMessage());
		
		return null;
	}

}
