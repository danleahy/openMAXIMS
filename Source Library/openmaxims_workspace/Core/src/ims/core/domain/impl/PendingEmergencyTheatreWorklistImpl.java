//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.core.domain.base.impl.BasePendingEmergencyTheatreWorklistImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.domain.objects.PendingEmergencyTheatre;
import ims.scheduling.vo.PendingEmergencyTheatreListVo;
import ims.scheduling.vo.PendingEmergencyTheatreListVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.PendingEmergencyTheatreWorklistSearchCriteriaVo;
import ims.scheduling.vo.domain.PendingEmergencyTheatreListVoAssembler;
import ims.scheduling.vo.domain.PendingEmergencyTheatreVoAssembler;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;

import java.io.Serializable;
import java.util.ArrayList;

public class PendingEmergencyTheatreWorklistImpl extends BasePendingEmergencyTheatreWorklistImpl
{

	private static final long serialVersionUID = 1L;

	public LocationLiteVoCollection listActiveHospitals(String name)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " from Location loc where loc.isActive = :active and loc.isVirtual = :isVirtual and loc.type = :locType ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		
		markers.add("active");
		values.add(Boolean.TRUE);
		
		markers.add("isVirtual");
		values.add(Boolean.FALSE);
				
		markers.add("locType");
		values.add(getDomLookup(LocationType.HOSP));
		
		if (name != null)
		{
			hql += ("  and loc.upperName like :hospitalName");
			markers.add("hospitalName");
			values.add(name.toUpperCase() + "%");
		}
		
		hql += " ORDER BY loc.upperName";					
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(factory.find(hql, markers, values));
	}

	public LocationLiteVoCollection getWardsForHospital(ims.core.resource.place.vo.LocationRefVo location, String name)
	{
		if (location == null)
			return null;
		
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveWardsForHospitalByNameLite(location, name);
	}

	public PendingEmergencyTheatreListVoCollection listPendingEmergencyTheatreRecords(PendingEmergencyTheatreWorklistSearchCriteriaVo searchCriteria)
	{
		DomainFactory factory = getDomainFactory();

		String hql = "select PET from PendingEmergencyTheatre as PET left join PET.currentStatus as status ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		String andStr = " where (status.id = :slotToBeBookedStatusID or (status.id = :admittedStatusID and PET.theatreAppointmentBooked is null))";
		
		markers.add("slotToBeBookedStatusID");
		values.add(PendingEmergencyTheatreStatus.THEATRE_SLOT_TO_BE_BOOKED.getID());
		
		markers.add("admittedStatusID");
		values.add(PendingEmergencyTheatreStatus.ADMITTED.getID());
		
		if (searchCriteria != null)
		{
			
			if (searchCriteria.getServices() != null && searchCriteria.getServices().size() > 0)
			{
				String ids = getServicesIds(searchCriteria.getServices());
				
				hql += (" left join PET.service as serv ");
				andStr += (" and serv.id in ( " + ids + " ) ");
				
			}
			
			if (Boolean.TRUE.equals(searchCriteria.getExcludeEndoscopyProcedures()))
			{
				andStr += (" and (( PET.isEndoscopyProcedure = 0 or PET.isEndoscopyProcedure is null) or (PET.secondaryProcedure is not null and (PET.isEndoscopyProcedure = 0 or PET.isEndoscopyProcedure is null)))");
			}
			else if (Boolean.TRUE.equals(searchCriteria.getListOnlyEndoscopyProcedures()))
			{
				andStr += (" and PET.isEndoscopyProcedure = 1 or PET.isEndoscopySecondProcedure = 1");
			}
			
			if (searchCriteria.getResponsibleHCP() != null)
			{
				hql += (" left join PET.responsibleHCP as respHCP ");
				andStr += (" and respHCP.id = :respHcpID ");
				
				markers.add("respHcpID");
				values.add(searchCriteria.getResponsibleHCP().getID_Hcp());
			}
			
			if (searchCriteria.getUrgencyCategory() != null)
			{
				andStr += (" and PET.urgencyCategory.id = :urgencyCategoryID ");
				
				markers.add("urgencyCategoryID");
				values.add(searchCriteria.getUrgencyCategory().getID());
			}
			
			boolean bothSelected = Boolean.TRUE.equals(searchCriteria.getInpatientsOnly()) && Boolean.TRUE.equals(searchCriteria.getNotCurrentlyAnInpatient());
			boolean noneSelected = !Boolean.TRUE.equals(searchCriteria.getInpatientsOnly()) && !Boolean.TRUE.equals(searchCriteria.getNotCurrentlyAnInpatient());
			
			if ( !bothSelected && !noneSelected )
			{
				hql += (" left join PET.patient as pat ");
				
				if (Boolean.TRUE.equals(searchCriteria.getInpatientsOnly()))
				{
					andStr += (" and pat.ward is not null ");
				
				}
				else if (Boolean.TRUE.equals(searchCriteria.getNotCurrentlyAnInpatient()))
				{
					andStr += (" and pat.ward is null ");
				
				}
			}
			
			if (searchCriteria.getExpectedHospital() != null)
			{
				hql += (" left join PET.expectedHospital as hospital ");
				andStr += (" and hospital.id = :expectedHospitalID ");
				
				markers.add("expectedHospitalID");
				values.add(searchCriteria.getExpectedHospital().getID());
			}
			
			if (searchCriteria.getExpectedWard() != null)
			{
				hql += (" left join PET.expectedWard as ward ");
				andStr += (" and ward.id = :expectedWardID ");
				
				markers.add("expectedWardID");
				values.add(searchCriteria.getExpectedWard().getID());
			}
			
			if (searchCriteria.getExpectedDate() != null)
			{
				andStr += (" and PET.expectedDateTime between :expectedDateTime1 and :expectedDateTime2 ");
				
				
				DateTime startDateTime = new DateTime(searchCriteria.getExpectedDate(),  new Time(00, 00, 00));
				DateTime endDateTime = new DateTime(searchCriteria.getExpectedDate(),  new Time(23, 59, 59));
				
				markers.add("expectedDateTime1");
				values.add(startDateTime.getJavaDate());
				
				markers.add("expectedDateTime2");
				values.add(endDateTime.getJavaDate());
				
			}
			
			andStr += (" order by PET.systemInformation.creationDateTime asc ");
			
			hql += andStr.toString();
		}				
		
		return PendingEmergencyTheatreListVoAssembler.createPendingEmergencyTheatreListVoCollectionFromPendingEmergencyTheatre(factory.find(hql, markers, values));
	}

	private String getServicesIds(ServiceShortVoCollection services)
	{
		String ids = "";
		
		for (int i = 0; i < services.size(); i++)
		{

			if (services.get(i) == null || services.get(i).getID_Service() == null)
				continue;

			if (ids == "")
				ids += services.get(i).getID_Service().toString();
			else
				ids += ", " + services.get(i).getID_Service().toString();

		}	
		
		return ids.length() > 0 ? ids : "NULL";
	}

	public PatientShort getPatientShort(PatientRefVo patient)
	{
		if (patient == null || patient.getID_Patient() == null)
			return null;
		
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patient.getID_Patient()));
	}

	public PendingEmergencyTheatreVo getPendingEmergencyTheatre(PendingEmergencyTheatreRefVo pendingEmergencyTheatre)
	{
		if (pendingEmergencyTheatre == null || pendingEmergencyTheatre.getID_PendingEmergencyTheatre() == null)
			return null;
		
		return PendingEmergencyTheatreVoAssembler.create((PendingEmergencyTheatre) getDomainFactory().getDomainObject(PendingEmergencyTheatre.class, pendingEmergencyTheatre.getID_PendingEmergencyTheatre()));
	}

	public void savePendingEmergencyTheatre(PendingEmergencyTheatreVo pendingEmergencyTheatre) throws StaleObjectException
	{
		if (pendingEmergencyTheatre == null)
			throw new CodingRuntimeException("Cannot save null Pending Emergency Theatre record");
		
		DomainFactory factory = getDomainFactory();		
		PendingEmergencyTheatre domainPendingEmergencyTheatre = PendingEmergencyTheatreVoAssembler.extractPendingEmergencyTheatre(factory, pendingEmergencyTheatre);
		
		factory.save(domainPendingEmergencyTheatre);		
	}
	
	public CatsReferralRefVo getCatsReferral(PendingEmergencyTheatreListVo pendingEmergencyTheatreListVo)
	{
	   if (pendingEmergencyTheatreListVo == null || pendingEmergencyTheatreListVo.getCatsReferral() == null)
		   return null;
	   CatsReferral catsDO = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, pendingEmergencyTheatreListVo.getCatsReferral().getID_CatsReferral());
	   
	   if (catsDO == null)
		   return null;	   
	   return new CatsReferralRefVo(catsDO.getId(), catsDO.getVersion());
	}
}
