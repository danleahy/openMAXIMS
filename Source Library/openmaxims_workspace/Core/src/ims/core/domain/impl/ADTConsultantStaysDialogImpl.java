//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5567.19951)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.ADT;
import ims.core.domain.base.impl.BaseADTConsultantStaysDialogImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.vo.ConsultantStayLiteVo;
import ims.core.vo.ConsultantStayLiteVoCollection;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.domain.ConsultantStayLiteVoAssembler;
import ims.core.vo.lookups.MsgUpdateType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class ADTConsultantStaysDialogImpl extends BaseADTConsultantStaysDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.ConsultantStayLiteVoCollection getStays(ims.core.admin.pas.vo.InpatientEpisodeRefVo inpatEpRef)
	{
		if (inpatEpRef == null)
			return null;
		StringBuilder hql = new StringBuilder();
		
		hql.append("select stay from InpatientEpisode inpat left join inpat.consultantStays as stay WHERE (stay.isRIE is null or stay.isRIE = 0) and inpat.id = :ID ORDER BY stay.transferDateTime desc" );
		ims.domain.DomainFactory factory = getDomainFactory();
		
		List<?> results = factory.find(hql.toString(),"ID",inpatEpRef.getID_InpatientEpisode());
		if (results == null || results.isEmpty())
			return null;
		return ConsultantStayLiteVoAssembler.createConsultantStayLiteVoCollectionFromConsultantStay(results);
	}

	public void doRIE(InpatientEpisodeLiteVo voInpat, ConsultantStayLiteVo stay, ims.framework.FormName formName,PatientRefVo patientRef,CareContextRefVo careContextRef, String reasonForRie) throws StaleObjectException, DomainInterfaceException
	{	
		if (stay == null)
			throw new CodingRuntimeException("stay argument cannot be null in method doRIE()");
		if (!stay.isValidated())
			throw new CodingRuntimeException("stay argument is not validated in method doRIE()");

		DomainFactory domainFactory = getDomainFactory();
		
		String countStaysHql = "select count(stay.id) from InpatientEpisode as inpatepis left join inpatepis.consultantStays as stay where (stay.isRIE is null or stay.isRIE = 0) and inpatepis.id = :ID";
		
		Long count = domainFactory.countWithHQL(countStaysHql, new String[]{"ID"}, new Object[]{voInpat.getID_InpatientEpisode()});
		if (count != null && count.intValue() == 1)
		{
			throw new DomainRuntimeException(" The last consultant stay for the episode cannot be marked as RIE.");	
		}
		
		markAsRie(stay, formName, patientRef.getID_Patient(), null, careContextRef != null ? careContextRef.getID_CareContext() : null, reasonForRie);
				
		if (voInpat.getConsultantStays().size() > 1 && stay.getEndDateTime() == null)
		{
			ConsultantStayLiteVo stayVo = getLastClosedStay(voInpat,stay);
			if (stayVo != null)
			{	
				stayVo.setEndDateTime(null);
				domainFactory.save(ConsultantStayLiteVoAssembler.extractConsultantStay(domainFactory, stayVo));

				if (voInpat.getPasEvent() != null)
				{	
					PASEvent doPASEvent = (PASEvent) domainFactory.getDomainObject(PASEvent.class, voInpat.getPasEvent().getID_PASEvent());
					Medic doMedic = getMedic(domainFactory, stayVo.getConsultant());
					doPASEvent.setConsultant(doMedic);
					doPASEvent.getPatient().setCurrentResponsibleConsultant(doMedic);
					//WDEV-23422
					if (stayVo.getSpecialtyIsNotNull())
					{
						doPASEvent.setSpecialty(getDomLookup(stayVo.getSpecialty()));
					} //WDEV-23422

					domainFactory.save(doPASEvent);
					
					ADT impl = (ADT) getDomainImpl(ADTImpl.class);   
					impl.triggerUpdateAdmissionEvent(new PASEventRefVo(doPASEvent.getId(), doPASEvent.getVersion()),MsgUpdateType.CONSULTANT);//http://jira/browse/WDEV-22831
				}
			}		
		}		
	}

	private Medic getMedic(DomainFactory domainFactory, MedicVo consultant)
	{
		return (Medic) domainFactory.getDomainObject(Medic.class, consultant.getID_Hcp());
	}
	
	private ConsultantStayLiteVo getLastClosedStay(InpatientEpisodeLiteVo voInpat, ConsultantStayLiteVo stay)
	{
		if (voInpat.getConsultantStays() == null || voInpat.getConsultantStays().size() == 0)
			return null;
		String hql = " select stay from InpatientEpisode inp left join inp.consultantStays as stay where inp.id = :ID and stay.id <> :STAY_ID order by stay.endDateTime desc";
		List<?>list = getDomainFactory().find(hql,new String[]{"ID","STAY_ID"},new Object[]{voInpat.getID_InpatientEpisode(), stay.getID_ConsultantStay()});
		if (list == null || list.isEmpty())
			return null;
		ConsultantStayLiteVoCollection coll = ConsultantStayLiteVoAssembler.createConsultantStayLiteVoCollectionFromConsultantStay(list);
		
		return coll.get(0);
	}
}
