//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.clinical.domain.objects.FilmPacket;
import ims.core.domain.base.impl.BaseFilmTrackingImpl;
import ims.core.vo.domain.FilmPacketVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

import java.util.ArrayList;

public class FilmTrackingImpl extends BaseFilmTrackingImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.FilmPacketVoCollection listFilmPackets(ims.core.patient.vo.PatientRefVo patientRefVo)
	{
		if (patientRefVo == null)
			throw new RuntimeException("Cannot get FilmPacketVoCollection for null patient");

		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> params = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String hql = "from FilmPacket fp where fp.patient.id = :patientId";
		
		params.add("patientId");
		values.add(patientRefVo.getID_Patient());
		
		return FilmPacketVoAssembler.createFilmPacketVoCollectionFromFilmPacket(factory.find(hql, params, values));
	}

	public ims.core.vo.FilmPacketVo saveFilmTracking(ims.core.vo.FilmPacketVo voFilm) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if (!voFilm.isValidated())
		{
			throw new DomainRuntimeException("voFilm has not been validated");
		}
		DomainFactory factory = getDomainFactory();
		FilmPacket doFilm = FilmPacketVoAssembler.extractFilmPacket(factory, voFilm);
		
		factory.save(doFilm);
		return FilmPacketVoAssembler.create(doFilm);
	}

	public ims.core.vo.FilmPacketVo getFilmTracking(ims.core.vo.FilmPacketVo voFilm)
	{
		if (voFilm == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		FilmPacket domFilm = (FilmPacket)factory.getDomainObject(FilmPacket.class,voFilm.getID_FilmPacket());
		return  FilmPacketVoAssembler.create(domFilm); 
	}
}
