//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.configuration.domain.objects.PrivateInsuranceCompany;
import ims.core.domain.base.impl.BasePrivateInsuranceCompaniesImpl;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.domain.PrivateInsuranceCompanyVoAssembler;
import ims.core.vo.domain.TaxonomyMapAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

public class PrivateInsuranceCompaniesImpl extends BasePrivateInsuranceCompaniesImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Retrieves a PrivateInsuranceCompanyVo
	*/
	public ims.core.vo.PrivateInsuranceCompanyVoCollection listPrivateInsuranceCompanyVo(Boolean active)
	{
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from PrivateInsuranceCompany pic ");
		
		if (active.equals(Boolean.TRUE))
		{
			hql.append (" where pic.isActive = :isActive");
			names.add("isActive");
			values.add(Boolean.TRUE);	
		}
		
		hql.append(" order by pic.upperName asc"); //WDEV-20219 upper(pic.name)
		
		List list = factory.find(hql.toString(), names,values);
		return(PrivateInsuranceCompanyVoAssembler.createPrivateInsuranceCompanyVoCollectionFromPrivateInsuranceCompany(list));
	}

	/**
	* Saves a PrivateInsuranceCompanyVo
	*/
	public ims.core.vo.PrivateInsuranceCompanyVo savePrivateInsuranceCompanyVo(ims.core.vo.PrivateInsuranceCompanyVo privateInsuranceCompanyVo) throws ims.domain.exceptions.StaleObjectException
	{
//		 Check for value to save
		if (privateInsuranceCompanyVo == null)
			throw new DomainRuntimeException("Domain Error - Can not save a null privateInsuranceCompanyVo record");
		
		// Check for validated record
		if (!privateInsuranceCompanyVo.isValidated())
			throw new DomainRuntimeException("Domain Error - privateInsuranceCompanyVo record must be validated before save");
		
		DomainFactory factory = getDomainFactory();
		PrivateInsuranceCompany privateInsuranceCompany = PrivateInsuranceCompanyVoAssembler.extractPrivateInsuranceCompany(factory, privateInsuranceCompanyVo);
		privateInsuranceCompany.getCodeMappings().clear();
		
		List mappings = TaxonomyMapAssembler.extractTaxonomyMapList(factory, privateInsuranceCompanyVo.getCodeMappings());
		privateInsuranceCompany.setCodeMappings(mappings);
		factory.save(privateInsuranceCompany);
		
		privateInsuranceCompanyVo = PrivateInsuranceCompanyVoAssembler.create(privateInsuranceCompany);
		
		return privateInsuranceCompanyVo;
	}

	/**
	* getPrivateInsuranceCompanyVo
	*/
	public ims.core.vo.PrivateInsuranceCompanyVo getPrivateInsuranceCompanyVo(ims.core.configuration.vo.PrivateInsuranceCompanyRefVo privateInsuranceCompanyRefVo)
	{
		if (privateInsuranceCompanyRefVo == null || !privateInsuranceCompanyRefVo.getID_PrivateInsuranceCompanyIsNotNull())
			return null;
		PrivateInsuranceCompany pim = (PrivateInsuranceCompany) getDomainFactory().getDomainObject(PrivateInsuranceCompany.class, privateInsuranceCompanyRefVo.getID_PrivateInsuranceCompany());
		return PrivateInsuranceCompanyVoAssembler.create(pim);
	}
}
