//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.domain.base.impl.BaseWardViewPatientSummaryComponentImpl;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.PendingAdmissionStatus;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.TransferStatus;
import ims.core.vo.lookups.WaitingListStatus;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Date;

public class WardViewPatientSummaryComponentImpl extends BaseWardViewPatientSummaryComponentImpl
{

	private static final long serialVersionUID = 1L;

	
	public Integer countPatientsOnTheWard(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (inpat.id) FROM InpatientEpisode AS inpat LEFT JOIN inpat.bed AS bed WHERE inpat.pasEvent.location.id = :WARD_ID AND bed is not null AND (inpat.isOnHomeLeave is null OR inpat.isOnHomeLeave = 0)";
		
		String[] paramNames = new String[] {"WARD_ID"};
		Object[] paramValues = new Object[] {ward.getID_Location()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}
	//WDEV-21059
	public Integer countMalePatientsOnTheWard(LocationRefVo ward, LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder query = new StringBuilder("SELECT COUNT (inpat.id) ");
		query.append(" FROM PendingTransfers AS pendTrans RIGHT JOIN pendTrans.inpatientEpisode AS inpat LEFT JOIN inpat.bed AS bed ");
		query.append(" LEFT JOIN inpat.pasEvent AS pas LEFT JOIN pas.patient AS patient ");
		query.append(" WHERE ");
		query.append(" bed is not null AND bed.ward.id = :WARD_ID "); 
		
		paramNames.add("WARD_ID");
		paramValues.add(ward.getID_Location());
		
		if (bay != null)
		{
			query.append(" AND bed.bay.id = :BAY_ID ");
			paramNames.add("BAY_ID");
			paramValues.add(bay.getID_Location());
		}				
		query.append(" AND patient.sex.id = :MALE_SEX ");
		
		paramNames.add("MALE_SEX");
		paramValues.add(Sex.MALE.getID());
				

		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));
	}

	//WDEV-21059
	public Integer countFemalePatientsOnTheWard(LocationRefVo ward, LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder query = new StringBuilder("SELECT COUNT (inpat.id) ");
		query.append(" FROM PendingTransfers AS pendTrans RIGHT JOIN pendTrans.inpatientEpisode AS inpat LEFT JOIN inpat.bed AS bed ");
		query.append(" LEFT JOIN inpat.pasEvent AS pas LEFT JOIN pas.patient AS patient ");
		query.append(" WHERE ");
		query.append(" bed is not null AND bed.ward.id = :WARD_ID "); 
		
		paramNames.add("WARD_ID");
		paramValues.add(ward.getID_Location());
		
		if (bay != null)
		{
			query.append(" AND bed.bay.id = :BAY_ID ");
			paramNames.add("BAY_ID");
			paramValues.add(bay.getID_Location());
		}				
		query.append(" AND patient.sex.id = :FEMALE_SEX ");
		
		paramNames.add("FEMALE_SEX");
		paramValues.add(Sex.FEMALE.getID());				

		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));
	}

	
	public Integer countPatientsAwaitingBedOnWard(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (inpat.id) FROM InpatientEpisode AS inpat LEFT JOIN inpat.bed AS bed WHERE inpat.pasEvent.location.id = :WARD_ID AND bed is null AND (inpat.isOnHomeLeave is null OR inpat.isOnHomeLeave = 0) AND (inpat.isReadyToLeave is null OR inpat.isReadyToLeave = 0)";
		
		String[] paramNames = new String[] {"WARD_ID"};
		Object[] paramValues = new Object[] {ward.getID_Location()};

		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}


	public Integer countPatientsOnHomeLeave(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (inpat.id) FROM InpatientEpisode AS inpat LEFT JOIN inpat.homeLeaves as hl WHERE inpat.pasEvent.location.id = :WARD_ID AND inpat.isOnHomeLeave = 1 AND (hl.isRIE is null OR hl.isRIE = 0) AND (hl.bedRetained is null OR  hl.bedRetained = 0) AND hl.dateReturnedFromHomeLeave is null";
		
		String[] paramNames = new String[] {"WARD_ID"};
		Object[] paramValues = new Object[] {ward.getID_Location()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}
	//WDEV-20363
	public Integer countPatientsOnHomeLeaveWithBedRetained(LocationRefVo ward, LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (inpat.id) FROM BedSpaceState as bspace LEFT JOIN bspace.inpatientEpisode AS inpat LEFT JOIN inpat.homeLeaves as hl LEFT JOIN inpat.bed as bd WHERE bspace.ward.id = :WARD_ID AND inpat.isOnHomeLeave = 1 AND (hl.isRIE is null OR hl.isRIE = 0) AND hl.bedRetained = 1 and hl.dateReturnedFromHomeLeave is null and hl.timeReturnedFromHomeLeave is null and bd is not null";
		
		String[] paramNames = new String[] {"WARD_ID"};
		Object[] paramValues = new Object[] {ward.getID_Location()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}
	
	public Integer countPatientsToBeDischargedWithin24Hours(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		//WDEV-21316
		String query = "SELECT COUNT (inpat.id) FROM InpatientEpisode AS inpat WHERE inpat.pasEvent.location.id = :WARD_ID AND inpat.estDischargeDate <= :DATE_24H AND ((inpat.isReadyToLeave is null OR inpat.isReadyToLeave = 0) AND inpat.readyToLeaveDecisionDateTime is null) AND ((inpat.isConfirmedDischarge = 0 OR inpat.isConfirmedDischarge is null) AND inpat.confirmedDischargeDateTime is null)";
		
		String[] paramNames = new String[] {"WARD_ID", "DATE_24H"};
		Object[] paramValues = new Object[] {ward.getID_Location(), new ims.framework.utils.DateTime().addHours(24).getJavaDate()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}

	
	public Integer countPatientsWithDischargedConfirmedIn24hours(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (inpat.id) FROM InpatientEpisode AS inpat WHERE inpat.pasEvent.location.id = :WARD_ID AND inpat.confirmedDischargeDateTime <= :DATE_24H AND inpat.isConfirmedDischarge = 1 AND ((inpat.isReadyToLeave is null OR inpat.isReadyToLeave = 0) AND inpat.readyToLeaveDecisionDateTime is null)";
		
		String[] paramNames = new String[] {"WARD_ID", "DATE_24H"};
		Object[] paramValues = new Object[] {ward.getID_Location(), new ims.framework.utils.DateTime().addHours(24).getJavaDate()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}

	//WDEV-20984 
	public Integer countPatientsReadyToLeave(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{		
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (inpat.id) FROM InpatientEpisode AS inpat WHERE inpat.pasEvent.location.id = :WARD_ID AND inpat.isReadyToLeave = 1 and inpat.readyToLeaveDecisionDateTime <= :TODAY_HIGH ";
		
		String[] paramNames = new String[] {"WARD_ID", "TODAY_HIGH"};
		Object[] paramValues = new Object[] {ward.getID_Location(), new ims.framework.utils.DateTime().addHours(24).getJavaDate()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}

	public Integer countPatientsStillToArrive(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;

		StringBuilder query = new StringBuilder("SELECT COUNT(patient.id) ");
		query.append(" FROM Booking_Appointment AS appointment LEFT JOIN appointment.session AS session LEFT JOIN session.schLocation AS location ");
		query.append(" LEFT JOIN appointment.patient AS patient ");
		query.append(" LEFT JOIN appointment.currentStatusRecord AS currentStatus LEFT JOIN currentStatus.status AS status ");
		
		query.append(" WHERE ");
		
		query.append(" location.id = :WARD_ID ");
		query.append(" AND status.id = :STATUS_ID ");
		query.append(" AND appointment.isWardAttendance = 1 ");
		query.append(" AND appointment.appointmentDate = :TODAY ");
		String[] paramNames = new String[] { "WARD_ID", "STATUS_ID", "TODAY" };
		Object[] paramValues = new Object[] {ward.getID_Location(), Status_Reason.BOOKED.getID(), new ims.framework.utils.Date().getDate()};
		
		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames, paramValues);
	}

	public Integer countPatientsArrived(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		StringBuilder query = new StringBuilder("SELECT COUNT(patient.id) ");
		query.append(" FROM Booking_Appointment AS appointment LEFT JOIN appointment.session AS session LEFT JOIN session.schLocation AS location ");
		query.append(" LEFT JOIN appointment.patient AS patient ");
		query.append(" LEFT JOIN appointment.currentStatusRecord AS currentStatus LEFT JOIN currentStatus.status AS status ");
		
		query.append(" WHERE ");
		
		query.append(" location.id = :WARD_ID ");
		query.append(" AND status.id = :STATUS_ID ");
		query.append(" AND appointment.isWardAttendance = 1 ");
		query.append(" AND appointment.appointmentDate = :TODAY ");
		
		String[] paramNames = new String[] {"WARD_ID", "STATUS_ID", "TODAY"};
		Object[] paramValues = new Object[] {ward.getID_Location(), Status_Reason.ARRIVAL.getID(), new ims.framework.utils.Date().getDate()};
		
		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames, paramValues);
	}

	public Integer countPatientsSeen(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		StringBuilder query = new StringBuilder("SELECT COUNT (patient.id)");
		query.append(" FROM Booking_Appointment AS appointment LEFT JOIN appointment.session AS session LEFT JOIN session.schLocation AS location ");
		query.append(" LEFT JOIN appointment.patient AS patient ");
		query.append(" LEFT JOIN appointment.currentStatusRecord AS currentStatus LEFT JOIN currentStatus.status AS status ");
		
		query.append(" WHERE ");
		
		query.append(" location.id = :WARD_ID ");
		query.append(" AND status.id = :STATUS_ID ");
		query.append(" AND appointment.isWardAttendance = 1 ");
		query.append(" AND appointment.appointmentDate = :TODAY ");
		
		String[] paramNames = new String[] {"WARD_ID", "STATUS_ID", "TODAY"};
		Object[] paramValues = new Object[] {ward.getID_Location(), Status_Reason.SEEN.getID(), new ims.framework.utils.Date().getDate()};
		
		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames, paramValues);
	}

	public Integer countPatientsForTransferOut(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (pendTrans.id) FROM PendingTransfers AS pendTrans LEFT JOIN pendTrans.inpatientEpisode AS inpat WHERE inpat.pasEvent.location.id = :WARD_ID AND pendTrans.currentStatus.id = :STATUS ";
		
		String[] paramNames = new String[] {"WARD_ID", "STATUS"};
		Object[] paramValues = new Object[] {ward.getID_Location(), TransferStatus.PENDING.getID()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}

	public Integer countPatientsForTransferIn(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (pendTrans.id) FROM PendingTransfers AS pendTrans LEFT JOIN pendTrans.inpatientEpisode AS inpat WHERE pendTrans.destinationWard.id = :WARD_ID AND pendTrans.currentStatus.id = :STATUS ";
		
		String[] paramNames = new String[] {"WARD_ID", "STATUS"};
		Object[] paramValues = new Object[] {ward.getID_Location(), TransferStatus.PENDING.getID()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}

	public Integer countPatientsForEDAdmissions(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;

		String query = "SELECT COUNT (pendEmergency.id) FROM PendingEmergencyAdmission AS pendEmergency WHERE pendEmergency.allocatedWard.id = :WARD_ID AND (pendEmergency.admissionStatus.id = :DISCHARGED_STATUS OR pendEmergency.admissionStatus.id = :DTA_STATUS)";
		
		String[] paramNames = new String[] {"WARD_ID", "DISCHARGED_STATUS", "DTA_STATUS"};
		Object[] paramValues = new Object[] {ward.getID_Location(), EmergencyAdmissionStatus.DISCHARGED.getID(), EmergencyAdmissionStatus.DTA.getID()};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}


	public Integer countPatientsForEmergencyAdmissions(LocationRefVo ward, LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		StringBuilder query = new StringBuilder("SELECT COUNT (ref.id) FROM CatsReferral AS ref LEFT JOIN ref.repatriationRequest AS pendAdmit ");
		query.append(" LEFT JOIN pendAdmit.ward AS ward LEFT JOIN pendAdmit.currentStatus AS pendAdmitStatus LEFT JOIN pendAdmitStatus.status AS status ");
		query.append(" WHERE ");
		query.append(" ward.id = :WARD_ID AND status.id = :STATUS_ID ");
		query.append(" and (pendAdmit.proposedTransferDate IS NULL or pendAdmit.proposedTransferDate < :DATETO)"); //WDEV-21085 
		
		String[] paramNames = new String[] {"WARD_ID", "STATUS_ID", "DATETO" };
		Object[] paramValues = new Object[] {ward.getID_Location(), PendingAdmissionStatus.CREATED.getID(), new ims.framework.utils.Date().addDay(1).getDate()};
		
		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames, paramValues);
	}

	
	public Integer countPatientsForTCIAdmissions(ims.core.resource.place.vo.LocationRefVo ward, ims.core.resource.place.vo.LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		StringBuilder query = new StringBuilder("SELECT COUNT (pel.id) FROM PatientElectiveList AS pel ");
		query.append("LEFT JOIN pel.electiveListStatus AS els LEFT JOIN els.electiveListStatus AS elStatus ");
		query.append("LEFT JOIN pel.tCIDetails AS tci LEFT JOIN tci.tCIWard AS ward ");
		query.append("LEFT JOIN pel.patient AS patient ");
		
		query.append("WHERE ward.id = :WARD_ID AND elStatus.id = :TCI_GIVEN AND tci.isActive = 1 AND tci.currentOutcome is null ");
		query.append( " AND tci.tCIDate = :TODAY");
		
		String[] paramNames = new String[] {"WARD_ID", "TCI_GIVEN", "TODAY"};
		Object[] paramValues = new Object[] {ward.getID_Location(), WaitingListStatus.TCI_GIVEN.getID(), new ims.framework.utils.Date().getDate()};
		
		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames, paramValues);
	}


	public Integer countPatientsOutlinerSpecialty(LocationRefVo ward, LocationRefVo bay)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		StringBuilder query = new StringBuilder("SELECT COUNT (inpat.id) ");
		query.append(" FROM PendingTransfers AS pendTrans RIGHT JOIN pendTrans.inpatientEpisode AS inpat ");
		query.append(" LEFT JOIN inpat.pasEvent AS pas LEFT JOIN pas.patient AS patient ");
		query.append(" LEFT JOIN pas.specialty AS inpatSpecialty ");
		query.append(" LEFT JOIN inpat.bed AS bed ");
		
		query.append(" WHERE pendTrans.id is null ");
		query.append(" AND inpat.pasEvent.location.id = :WARD_ID");
		query.append(" AND (inpat.isReadyToLeave is null OR inpat.isReadyToLeave = 0)");
		query.append(" AND (inpatSpecialty is null OR inpatSpecialty.id NOT IN (");
		
			query.append("SELECT wardSpecialty.id FROM WardBayConfig AS wardConfig LEFT JOIN wardConfig.ward AS ward LEFT JOIN wardConfig.specialties AS spec LEFT JOIN spec.instance AS wardSpecialty WHERE ward.id = :WARD_ID ");
		
		query.append(")");
		query.append(")");
		
		String[] paramNames = new String[] {"WARD_ID"};
		Object[] paramValues = new Object[] {ward.getID_Location()};
		
		return (int) getDomainFactory().countWithHQL(query.toString(), paramNames, paramValues);
	}

	public Integer countPatientsForPET(LocationRefVo ward)
	{
		if (ward == null || ward.getID_Location() == null)
			return 0;
		
		String query = "SELECT COUNT (pet.id) FROM PendingEmergencyTheatre AS pet LEFT JOIN pet.patient AS pat LEFT JOIN pet.expectedWard AS expWard LEFT JOIN pet.currentStatus as status WHERE pat.ward is null and expWard.id = :WARD_ID and status.id <> :REMOVED_STATUS_ID and status.id <> :ADMITED_STATUS_ID and pet.expectedDateTime between :CURRENTDATE_LOW and :CURRENTDATE_HIGH";
		
		String[] paramNames = new String[] {"WARD_ID", "REMOVED_STATUS_ID", "ADMITED_STATUS_ID", "CURRENTDATE_LOW", "CURRENTDATE_HIGH"};
		Date startDateTime = new ims.framework.utils.Date().getDate();
		Date endDateTime = new DateTime(new ims.framework.utils.Date(),  new Time(23, 59, 59)).getJavaDate();
		Object[] paramValues = new Object[] {ward.getID_Location(), PendingEmergencyTheatreStatus.REMOVED.getID(), PendingEmergencyTheatreStatus.ADMITTED.getID(), startDateTime,endDateTime};
		
		return (int) getDomainFactory().countWithHQL(query, paramNames, paramValues);
	}
}
