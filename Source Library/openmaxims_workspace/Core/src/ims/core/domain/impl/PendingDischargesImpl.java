//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.70 build 3300.22643)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.vo.BedSpaceStateRefVo;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.domain.BedInfoDialog;
import ims.core.domain.WardView;
import ims.core.domain.base.impl.BasePendingDischargesImpl;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.InpatientEpisodeForPendingDischargesVo;
import ims.core.vo.InpatientEpisodeForPendingDischargesVoCollection;
import ims.core.vo.InpatientEpisodeLiteVo;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PendingDischargesVo;
import ims.core.vo.domain.InpatientEpisodeForPendingDischargesVoAssembler;
import ims.core.vo.domain.LocMostVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.DomainFactory;
import ims.domain.hibernate3.IMSCriteria;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class PendingDischargesImpl extends BasePendingDischargesImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpLiteVoCollection listHCPs(HcpFilter filter)
	{
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return implHcpAdmin.listHcpLite(filter);
	}

	public ims.core.vo.InpatientEpisodeForPendingDischargesVoCollection listPendingDischarges(ims.core.vo.PendingDischargesVo dischargeData)
	{
		if (dischargeData == null)
			throw new CodingRuntimeException("Invalid dischargeData");

		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		boolean isCaseSensitivePatIdSearch = ConfigFlag.DOM.CASE_SENSITIVE_PATID.getValue(); //WDEV-18817

		StringBuffer sb = new StringBuffer();
		String andStr = "";

		String hql = ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS") ? "select ip, (select wcfg.wardStatus from WardBayConfig wcfg WHERE wcfg.ward.id = ip.pasEvent.location.id) from InpatientEpisode as ip " : "select ip from InpatientEpisode as ip ";

		String strSearchSurname = "";
		String strSearchForename = "";

		if (dischargeData.getHospitalNumberIsNotNull())
		{
			hql += " join ip.pasEvent.patient.identifiers as ids ";
			
			String idVal = dischargeData.getHospitalNumber().trim();			
			if (dischargeData.getIDType().equals(PatIdType.NHSN))
				idVal = dischargeData.getHospitalNumber().replace(" ", "");//wdev-7305
			if (!isCaseSensitivePatIdSearch) //WDEV-18817
			{	
				idVal = idVal.toUpperCase();
			}
			if (dischargeData.getIDType().equals(PatIdType.NHSN))
			{
				sb.append(andStr + (!isCaseSensitivePatIdSearch ? " UPPER(ids.value)" : " ids.value") + " like :idnum "); //WDEV-18817
				idVal += "%";
			}
			else
				sb.append(andStr + (!isCaseSensitivePatIdSearch ? " UPPER(ids.value)" : " ids.value") + " = :idnum"); //WDEV-18817

			markers.add("idnum");
			andStr = " and ";
			sb.append(andStr + " ids.type = :idtype");
			markers.add("idtype");

			values.add(idVal);
			values.add(getDomLookup(dischargeData.getIDType()));
		}
		else
		{
			if(dischargeData.getForenameIsNotNull())
			{
				sb.append(andStr + " ip.pasEvent.patient.name.upperForename like :patFore");
				markers.add("patFore");
				andStr = " and ";
				
				strSearchForename = dischargeData.getForename().toUpperCase().trim();
				strSearchForename = strSearchForename.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchForename.length() >= 40)
				{
					strSearchForename = strSearchForename.substring(0,40);
					strSearchForename += '%';
				}
				else
				{
					strSearchForename += '%';
				}
				values.add(strSearchForename);
	
			}
	
			if(dischargeData.getSurnameIsNotNull())
			{
				sb.append(andStr + " ip.pasEvent.patient.name.upperSurname like :patSur");
				markers.add("patSur");
				andStr = " and ";
	
				strSearchSurname = dischargeData.getSurname().toUpperCase().trim();
				strSearchSurname = strSearchSurname.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchSurname.length() >= 40)
				{
					strSearchSurname = strSearchSurname.substring(0,40);
					strSearchSurname += '%';
				}
				else
				{
					strSearchSurname += '%';
				}
				values.add(strSearchSurname);
			}
		}//WDEV-13065
		//WDEV-22319
		String orStr = "";
		boolean atLeastTwoPendingDischargesTypeTicked = atLeastTwoPendingDischargesTypeTicked(dischargeData);
		if (Boolean.TRUE.equals(dischargeData.getPotentialDischarge()) || Boolean.TRUE.equals(dischargeData.getConfirmedDischarge()) || Boolean.TRUE.equals(dischargeData.getReadyToLeave()))
		{
			sb.append(andStr);
		}	
		//WDEV-22298
		if (atLeastTwoPendingDischargesTypeTicked)
		{
			sb.append("(");
		}
		if (Boolean.TRUE.equals(dischargeData.getPotentialDischarge()))
		{	
			sb.append(" ip.estDischargeDate is not null ");
			orStr = " OR ";
			andStr = " and ";
		}	
		if (Boolean.TRUE.equals(dischargeData.getConfirmedDischarge()))
		{	
			sb.append((atLeastTwoPendingDischargesTypeTicked ? orStr : "") + " (ip.isConfirmedDischarge = :CONFIRMED and ip.confirmedDischargeDateTime is not null)");
			orStr = " OR ";
			andStr = " and ";
		}	
		if (Boolean.TRUE.equals(dischargeData.getReadyToLeave()))
		{	
			sb.append((atLeastTwoPendingDischargesTypeTicked ? orStr : "") + " (ip.isReadyToLeave = :CONFIRMED and ip.readyToLeaveDecisionDateTime is not null)");
			orStr = " OR ";
			andStr = " and ";
		}	
		if (Boolean.TRUE.equals(dischargeData.getConfirmedDischarge()) || Boolean.TRUE.equals(dischargeData.getReadyToLeave()))
		{	
			markers.add("CONFIRMED");
			values.add(Boolean.TRUE);			
		}
		if (atLeastTwoPendingDischargesTypeTicked)
		{
			sb.append(")");
		}		
		//WDEV-22319
		if (dischargeData.getEstDischargeDateIsNotNull())
		{			
			sb.append(andStr);
			orStr = "";
			if (atLeastTwoPendingDischargesTypeTicked)
			{
				sb.append("(");
			}		
			if (Boolean.TRUE.equals(dischargeData.getPotentialDischarge()))
			{
				sb.append("(ip.estDischargeDate <= :estDate and ip.estDischargeDate >= :todayDate)");
				orStr = " OR ";
				andStr = " and ";	
			}

			if (Boolean.TRUE.equals(dischargeData.getConfirmedDischarge()))
			{					
				sb.append(orStr + " (ip.confirmedDischargeDateTime  <= :estDate and ip.confirmedDischargeDateTime >= :todayDate)");
				orStr = " OR ";
				andStr = " and ";

			}
			if (Boolean.TRUE.equals(dischargeData.getReadyToLeave()))
			{					
				sb.append(orStr + " (ip.readyToLeaveDecisionDateTime  <= :estDate and ip.readyToLeaveDecisionDateTime >= :todayDate)");
				orStr = " OR ";
				andStr = " and ";

			}	
			if (atLeastTwoPendingDischargesTypeTicked)
			{
				sb.append(")");
			}
			
			DateTime today =  new DateTime();			
			markers.add("estDate");
			values.add(dischargeData.getEstDischargeDate().getJavaDate());
			markers.add("todayDate");
			values.add(today.getJavaDate());
		}
		//WDEV-22319 -- end
		//WDEV-20258
		if (dischargeData.getWardIsNotNull())
		{
			sb.append(andStr + " ip.pasEvent.location.id = :ward");
			markers.add("ward");
			values.add(dischargeData.getWard().getID_Location());
			andStr = " and ";
		}
		else if (dischargeData.getCurrentHospitalIsNotNull())
		{			
			LocationLiteVoCollection wards = getWards(dischargeData.getCurrentHospital().getID_Location());
			if (wards != null && wards.size() > 0)
			{	
				sb.append(andStr + " (ip.pasEvent.location.id in " + getWardIds(wards));	
				sb.append(" OR");
			}
			sb.append((wards != null && wards.size() > 0 ? "":andStr) + " ip.pasEvent.location.parentLocation.id = :hosp" + (wards != null && wards.size() > 0 ? ")":""));
			markers.add("hosp");
			values.add(dischargeData.getCurrentHospital().getID_Location());
			andStr = " and ";
		}		
		
		//WDEV-20258 --- end of
		
		hql += " where ";
		hql += sb.toString();
		if  (ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("MAXIMS")) //WDEV-20328
		{
			List<?> results = factory.find(hql.toString(), markers, values);
			if (results == null || results.isEmpty())
				return null;
			InpatientEpisodeForPendingDischargesVoCollection collResults = new  InpatientEpisodeForPendingDischargesVoCollection();
			for (int i = 0; i<results.size();i++)
			{
				if (results.get(i) instanceof Object[])
				{
					Object[] ret = (Object[]) results.get(i);
					InpatientEpisodeForPendingDischargesVo vo = new InpatientEpisodeForPendingDischargesVo();
					if (ret[0] instanceof InpatientEpisode)
					{	
						//WDEV-22567
						InpatientEpisode doInpat = (InpatientEpisode) ret[0];
						if (doInpat != null && doInpat.getPasEvent() != null && doInpat.getPasEvent().getPatient() != null && doInpat.getPasEvent().getPatient().getAssociatedPatient() != null)
						{
							ims.core.patient.domain.objects.Patient mergedToPatient = doInpat.getPasEvent().getPatient().getAssociatedPatient();
							doInpat.getPasEvent().setPatient(mergedToPatient);
						}
						vo = InpatientEpisodeForPendingDischargesVoAssembler.create(doInpat);
					}
					if (ret[1] instanceof LookupInstance)
					{	
						vo.setWardStatus(ims.core.vo.lookups.LookupHelper.getWardBayStatusInstance(getLookupService(), ((LookupInstance) ret[1]).getId()));
					}
					collResults.add(vo);					
				}					
			}
			return collResults;
		}
		return InpatientEpisodeForPendingDischargesVoAssembler.createInpatientEpisodeForPendingDischargesVoCollectionFromInpatientEpisode(factory.find(hql.toString(), markers, values));
	}
	private boolean atLeastTwoPendingDischargesTypeTicked(PendingDischargesVo dischargeData)
	{
		return ((Boolean.TRUE.equals(dischargeData.getPotentialDischarge()) && Boolean.TRUE.equals(dischargeData.getConfirmedDischarge())) || (Boolean.TRUE.equals(dischargeData.getPotentialDischarge()) && Boolean.TRUE.equals(dischargeData.getReadyToLeave())) || (Boolean.TRUE.equals(dischargeData.getConfirmedDischarge()) && Boolean.TRUE.equals(dischargeData.getReadyToLeave())));
	}

	//WDEV-20258
	private String getWardIds(LocationLiteVoCollection wards)
	{
		if (wards == null || wards.size() == 0)
			return "";
		
		StringBuilder idList = new StringBuilder();
		idList.append("(");
		
		for (int i=0; i<wards.size();i++)
		{
			if (wards.get(i) == null)
				continue;
			idList.append(wards.get(i).getID_Location().toString()).append(i == wards.size() - 1 ? ")": ", ");			
		}
		
		return idList.toString();
	}
	
	public LocationLiteVoCollection getActiveHospitals() 
	{	
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc=new IMSCriteria (Location.class,factory);
		imsc.equal("this.type.id", LocationType.HOSP.getID());
		imsc.equal("this.isActive", true);
		imsc.equal("this.isVirtual", false); //WDEV-21549
		List hospitals=imsc.find();
		if (hospitals.size()>0)
		{
			return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(hospitals).sort(); //WDEV-21074
		}
		return null;
			
	}

	
	public LocationLiteVoCollection getWards(Integer hospital) 
	{
		DomainFactory factory = getDomainFactory();
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		LocationRefVo loc=new LocationRefVo();
		loc.setID_Location(hospital);
		LocShortMappingsVoCollection wards = impl.listActiveWardsForHospital(loc);
		LocationLiteVoCollection locations=new LocationLiteVoCollection();

		if (wards.size()>0)
		{
			for (int i=0;i<wards.size();i++)
			{
				LocationLiteVo location=new LocationLiteVo();
				location=wards.get(i);
				locations.add(location);
			}
			
		}
		return locations;
		
	}

	public LocMostVo getLocation(LocationRefVo voLocRef)
	{
		DomainFactory factory = getDomainFactory();
		return LocMostVoAssembler.create((Location) factory.getDomainObject(Location.class, voLocRef.getID_Location()));
	}	
	//WDEV-20707
	public LocationLiteVo getCurrentHospital(ILocation location) 
	{
		WardView impl = (WardView)getDomainImpl(WardViewImpl.class);
		return impl.getCurrentHospital(location);
	}
	public CareContextShortVo getCurrentCareContext(PASEventRefVo pasEventRef)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getCareContextForPasEvent(pasEventRef);
	}
	//WDEV-22926
	public InpatientEpisodeLiteVo getWaitingAreaPatient(InpatientEpisodeRefVo inpatRef)
	{
		if (inpatRef == null)
			return null;
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.getInpatientEpisodeLiteVoById(inpatRef);
	}

	public BedSpaceStateLiteVo getBedSpaceStateForInpatient(BedSpaceStateRefVo bedSpaceStateRef)
	{
		if (bedSpaceStateRef == null)
			return null;
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.getBedSpaceState(bedSpaceStateRef);	
	}
	//WDEV-22926  -- end here
}
