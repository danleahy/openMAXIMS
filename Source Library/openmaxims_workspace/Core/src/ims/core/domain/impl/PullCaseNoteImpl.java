//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.vo.CaseNoteTrackingConfigVo;
import ims.admin.vo.domain.CaseNoteTrackingConfigVoAssembler;
import ims.core.configuration.domain.objects.CaseNoteTrackingConfig;
import ims.core.domain.CaseNoteTransfer;
import ims.core.domain.base.impl.BasePullCaseNoteImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteRequestShortVoCollection;
import ims.core.vo.PatientCaseNoteTransferVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.PatientCaseNoteRequestShortVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;


public class PullCaseNoteImpl extends BasePullCaseNoteImpl
{

	private static final long serialVersionUID = 1L;


	public CaseNoteTrackingConfigVo getCaseNoteTrackingConfiguration()
	{
		String query = "SELECT configuration FROM CaseNoteTrackingConfig AS configuration";
		
		return CaseNoteTrackingConfigVoAssembler.create((CaseNoteTrackingConfig) getDomainFactory().findFirst(query));
	}


	public PatientCaseNoteRequestShortVoCollection listPulledRequestsForTrackingID(String trackingID)
	{
		if (trackingID == null || trackingID.length() == 0)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT request ");
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("FROM PatientCaseNoteRequest AS request LEFT JOIN request.caseNote AS caseNote ");
		query.append("LEFT JOIN request.requestStatus AS requestStatus LEFT JOIN caseNote.status AS noteStatus ");
		
		query.append(" WHERE ");
		
		query.append(" request.printedPullListDate is not null ");
		query.append(" AND caseNote.trackingID = :TRACKING_ID ");
//		query.append(" AND requestStatus.id = :OPEN_REQUEST ");
//		query.append(" AND noteStatus.id IN (:NOTE_ACTIVE, :NOTE_FOUND, :NOTE_REQUIRES_MERGING) ");
		
		paramNames.add("TRACKING_ID");
		paramValues.add(trackingID);
//		paramNames.add("OPEN_REQUEST");
//		paramValues.add(CaseNoteRequestStatus.OPEN.getID());
//		paramNames.add("NOTE_ACTIVE");
//		paramValues.add(CaseNoteStatus.ACTIVE.getID());
//		paramNames.add("NOTE_FOUND");
//		paramValues.add(CaseNoteStatus.MARKED_AS_FOUND.getID());
//		paramNames.add("NOTE_REQUIRES_MERGING");
//		paramValues.add(CaseNoteStatus.REQUIRES_MERGING.getID());
		
		query.append(" ORDER BY request.requiredByDate ");
		
		return PatientCaseNoteRequestShortVoAssembler.createPatientCaseNoteRequestShortVoCollectionFromPatientCaseNoteRequest(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	
	public Boolean saveTransfers(PatientCaseNoteRequestShortVoCollection requests, MemberOfStaffLiteVo mos) throws StaleObjectException, DomainInterfaceException
	{
		if (requests == null || requests.size() == 0)
		{
			return Boolean.FALSE;
		}
		
		
		if (mos == null)
		{
			return Boolean.FALSE;
		}
		
		
		CaseNoteTransfer caseNoteImpl = (CaseNoteTransfer) getDomainImpl(CaseNoteTransferImpl.class);

		
		for (PatientCaseNoteRequestShortVo request : requests)
		{
			PatientCaseNoteTransferVo transfer = new PatientCaseNoteTransferVo();
			
			transfer.setPatient(request.getPatient());
			transfer.setCaseNote(request.getCaseNote());
			transfer.setTransferredFromLocation(request.getCaseNote().getCurrentLocation());
			transfer.setTransferredToLocation(request.getRequestedForLocation());
			transfer.setTransferredBy(mos);
			transfer.setTransferDate(new DateTime());
			
			String[] errors = transfer.validate();
			
			if (errors != null && errors.length > 0)
				continue;

			PatientCaseNoteRequestShortVoCollection transferRequestCollection = new PatientCaseNoteRequestShortVoCollection();
			transferRequestCollection.add(request);
			
			
			caseNoteImpl.saveTransfer(transfer, transferRequestCollection, false);
		}

		return Boolean.TRUE;
	}


	public PatientShort getPatientForTracking(String trackingID)
	{
		if (trackingID == null)
			return null;
		
		String query = "SELECT patient FROM PatientCaseNote AS caseNote LEFT JOIN caseNote.patient AS patient WHERE caseNote.trackingID = :TRACKING_ID";
		
		return PatientShortAssembler.create((Patient) getDomainFactory().findFirst(query.toString(), "TRACKING_ID", trackingID));
	}


	public PatientShort getPatientForIdentifier(PatIdType identifierType, String identifierValue)
	{
		if (identifierType == null || identifierValue == null)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT patient FROM Patient AS patient LEFT JOIN patient.identifiers AS ident LEFT JOIN ident.type AS identType");
		query.append(" WHERE ident.value = :ID_VALUE AND identType.id = :ID_TYPE AND (patient.isRIE is null OR patient.isRIE = 0) ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ID_VALUE");		paramValues.add(identifierValue);
		paramNames.add("ID_TYPE");		paramValues.add(identifierType.getID());
		
		return PatientShortAssembler.create((Patient) getDomainFactory().findFirst(query.toString(), paramNames, paramValues));
	}
}
