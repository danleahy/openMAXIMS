//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.clinical.domain.objects.PatientCaseNoteRequest;
import ims.core.clinical.domain.objects.PatientCaseNoteTransfer;
import ims.core.domain.base.impl.BaseCaseNoteTransferHistoryImpl;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientCaseNoteRequestForTransferHistoryVo;
import ims.core.vo.PatientCaseNoteRequestForTransferHistoryVoCollection;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteTransfersFilterVo;
import ims.core.vo.domain.MemberOfStaffMinVoAssembler;
import ims.core.vo.domain.PatientCaseNoteRequestShortVoAssembler;
import ims.core.vo.domain.PatientCaseNoteTransferListVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class CaseNoteTransferHistoryImpl extends BaseCaseNoteTransferHistoryImpl
{

	private static final long serialVersionUID = 1L;

	public PatientCaseNoteRequestForTransferHistoryVoCollection listTransfers(PatientCaseNoteTransfersFilterVo filterVo)
	{
		if (filterVo == null || filterVo.getPatientCaseNote() == null || filterVo.getPatientCaseNote().getID_PatientCaseNote() == null)
			throw new CodingRuntimeException(" The search argument cannot be null or hold a null PatientCaseNote reference.");
		
		StringBuilder mainHql = new StringBuilder();
		StringBuilder conditions = new StringBuilder();
		String andStr ="";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		mainHql.append("SELECT transf,req from PatientCaseNoteRequest as req RIGHT JOIN req.transferThatCompletedRequest as transf ");
		
		if (filterVo.getPatientCaseNoteIsNotNull())
		{
			conditions.append(andStr).append(" transf.caseNote.id = :CASENOTE_ID");
			paramNames.add("CASENOTE_ID");
			paramValues.add(filterVo.getPatientCaseNote().getID_PatientCaseNote());
			andStr = " AND";
		}
		if (filterVo.getLocationIsNotNull())
		{
			conditions.append(andStr).append(" (transf.transferredFromLocation.id = :LOCATION_ID OR transf.transferredToLocation.id = :LOCATION_ID)" );
			paramNames.add("LOCATION_ID");
			paramValues.add(filterVo.getLocation().getID_Location());
			andStr = " AND";
		}
		
		if (filterVo.getTransferredByIsNotNull())
		{
			conditions.append(andStr).append(" transf.transferredBy.id = :TRANSFMOS_ID" );
			paramNames.add("TRANSFMOS_ID");
			paramValues.add(filterVo.getTransferredBy().getID_MemberOfStaff());
			andStr = " AND";
		}
		
		if (filterVo.getRequestedByIsNotNull())
		{			
			conditions.append(andStr).append(" req.requestedBy.id = :REQMOS_ID" );
			paramNames.add("REQMOS_ID");
			paramValues.add(filterVo.getRequestedBy().getID_MemberOfStaff());
			andStr = " AND";
		}
		
		if (filterVo.getDateFromIsNotNull())
		{
			conditions.append(andStr).append(" transf.transferDate >= :DATE_FROM" );
			paramNames.add("DATE_FROM");
			paramValues.add(filterVo.getDateFrom().getDate());
			andStr = " AND";
		}
		
		if (filterVo.getDateToIsNotNull())
		{
			conditions.append(andStr).append(" transf.transferDate < :DATE_TO" );
			paramNames.add("DATE_TO");
			paramValues.add(filterVo.getDateTo().addDay(1).getDate());
			andStr = " AND";
		}
		
		if (paramNames.size() > 0)
		{
			mainHql.append(" WHERE" ).append(conditions.toString());
		}
		
		mainHql.append(" order by transf.transferDate desc");
		
		List<?> list = getDomainFactory().find(mainHql.toString(),paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));
		Iterator it = list.iterator();
		
		PatientCaseNoteRequestForTransferHistoryVoCollection voColl = new PatientCaseNoteRequestForTransferHistoryVoCollection();

		while (it.hasNext())
		{
			Object[] itemInList = (Object[]) it.next();
			PatientCaseNoteRequestForTransferHistoryVo voRec = new PatientCaseNoteRequestForTransferHistoryVo();
			
		
			if (itemInList[0] instanceof PatientCaseNoteTransfer)
			{	
				PatientCaseNoteTransfer transferDO = (PatientCaseNoteTransfer) itemInList[0];
				voRec.setCaseNoteTransfer(PatientCaseNoteTransferListVoAssembler.create(transferDO));
			}
			if (itemInList[1] instanceof PatientCaseNoteRequest)
			{	
				PatientCaseNoteRequest caseNoteRequestDO = (PatientCaseNoteRequest) itemInList[1];
				PatientCaseNoteRequestShortVo caseNoteReqVo = PatientCaseNoteRequestShortVoAssembler.create(caseNoteRequestDO);
				voRec.setCaseNote(caseNoteReqVo.getCaseNote());
				voRec.setRequestedBy(MemberOfStaffMinVoAssembler.create(caseNoteRequestDO.getRequestedBy()));
				voRec.setRequestedDate(caseNoteReqVo.getCreationDate());
				voRec.setRequestReason(caseNoteReqVo.getReasonForRequest());
			}
			voColl.add(voRec);
		}
		return voColl;
	}

	public LocationLiteVoCollection listCaseNoteFolderLocations(String locName)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listCaseNoteFolderLocations(locName);
	}

}
