//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ovidiu Roibu using IMS Development Environment (version 1.80 build 5567.19951)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.vo.PatientElectiveTCIBedManagerCommentVo;
import ims.RefMan.vo.TCIForPatientElectiveListRefVo;
import ims.RefMan.vo.domain.PatientElectiveTCIBedManagerCommentVoAssembler;
import ims.clinical.vo.domain.ReferralLetterDetailsVoAssembler;
import ims.core.clinical.domain.objects.PatientCaseNoteRequest;
import ims.core.clinical.domain.objects.ReferralLetterDetails;
import ims.core.domain.base.impl.BaseReAssignWardDialogImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientCaseNoteRequestForReassignWardVo;
import ims.core.vo.PatientCaseNoteRequestForReassignWardVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PatientCaseNoteRequestForReassignWardVoAssembler;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;

public class ReAssignWardImpl extends BaseReAssignWardDialogImpl
{

	private static final long serialVersionUID = 1L;

	
	public LocationLiteVoCollection listActiveHospitalsLite() 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveHospitalsLite();
	}
	
	public LocationLiteVoCollection listWards(LocationRefVo hospitalRef, String searchText) 
	{
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return implLoc.listActiveWardsForHospitalByNameLite(hospitalRef, searchText);
	}	
	
	public LocationLiteVoCollection listCaseNoteFolderLocations(LocationRefVo hospitalRef, String searchText)
	{
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return implLoc.listLocationsByTheParentLocation(null, hospitalRef, true, null, null, true, searchText);
	}

	public PatientElectiveTCIBedManagerCommentVo saveTCIDetails(PatientElectiveTCIBedManagerCommentVo tciDetails, PatientRefVo patient, LocationLiteVo caseNoteFolderLoc) throws StaleObjectException 
	{	
		if (tciDetails == null)
			throw new DomainRuntimeException("Cannot save null record.");
		if (!tciDetails.isValidated())
			throw new DomainRuntimeException("Record not validated.");
	
		DomainFactory factory = getDomainFactory();
		
	    TCIForPatientElectiveList domtciDetails = PatientElectiveTCIBedManagerCommentVoAssembler.extractTCIForPatientElectiveList(factory, tciDetails);
			
		factory.save(domtciDetails);
		
		PatientCaseNoteRequestForReassignWardVoCollection collCaseNotes = listPatCaseNoteRequest(tciDetails, patient);
		
		for (PatientCaseNoteRequestForReassignWardVo caseNote : collCaseNotes)
		{
			if (caseNote.getTCIDetail() != null)
			{
				caseNote.getTCIDetail().setTCIWard(tciDetails.getTCIWard());
				caseNote.getTCIDetail().setTCIHospital(tciDetails.getTCIHospital());
			}
			
			if (caseNoteFolderLoc != null)
			{
				caseNote.setRequestedForLocation(caseNoteFolderLoc);
			}
			else
			{
				caseNote.setRequestedForLocation(tciDetails.getTCIWard());
			}
			
			PatientCaseNoteRequest domPatCaseNoteReq = PatientCaseNoteRequestForReassignWardVoAssembler.extractPatientCaseNoteRequest(factory, caseNote);
			factory.save(domPatCaseNoteReq);
		}
		
		return PatientElectiveTCIBedManagerCommentVoAssembler.create(domtciDetails);
		
	}
	
	public PatientCaseNoteRequestForReassignWardVoCollection listPatCaseNoteRequest(PatientElectiveTCIBedManagerCommentVo tciDetails, PatientRefVo  patient)
	{
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>(); 
		
		StringBuilder query = new StringBuilder(" select patCaseNoteReq from PatientCaseNoteRequest as patCaseNoteReq left join patCaseNoteReq.tCIDetail as tciDet where ");
	
		String andStr = " ";
		
		if (patient != null)
		{
			query.append(" patCaseNoteReq.patient.id = :patID ");
			paramNames.add("patID");
			paramValues.add(patient.getID_Patient());
		}	
		
		if (tciDetails != null)
		{	
			andStr = " and ";
			query.append(andStr + " tciDet.id = :tciID ");
			paramNames.add("tciID");
			paramValues.add(tciDetails.getID_TCIForPatientElectiveList());
		}
		
		query.append(andStr + " patCaseNoteReq.requestStatus.id = :reqStatus ");
		paramNames.add("reqStatus");
		paramValues.add(CaseNoteRequestStatus.OPEN.getId());
		
		
		return PatientCaseNoteRequestForReassignWardVoAssembler.createPatientCaseNoteRequestForReassignWardVoCollectionFromPatientCaseNoteRequest(getDomainFactory().find(query.toString(), paramNames, paramValues));
		
	}

	public PatientElectiveTCIBedManagerCommentVo getTCIDetails(TCIForPatientElectiveListRefVo tciRef)
	{
		if (tciRef == null || tciRef.getID_TCIForPatientElectiveList() == null)
			return null;

		return PatientElectiveTCIBedManagerCommentVoAssembler.create((TCIForPatientElectiveList) getDomainFactory().getDomainObject(tciRef));
	}

}
