//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.vo.CaseNoteTrackingConfigVo;
import ims.core.clinical.domain.objects.PatientCaseNote;
import ims.core.clinical.domain.objects.PatientCaseNoteRequest;
import ims.core.clinical.domain.objects.PatientCaseNoteTransfer;
import ims.core.clinical.vo.PatientCaseNoteRequestRefVo;
import ims.core.domain.PatientCaseNotes;
import ims.core.domain.base.impl.BaseCaseNoteTransferImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientCaseNoteRequestShortVo;
import ims.core.vo.PatientCaseNoteRequestShortVoCollection;
import ims.core.vo.PatientCaseNoteTransferVo;
import ims.core.vo.domain.PatientCaseNoteRequestShortVoAssembler;
import ims.core.vo.domain.PatientCaseNoteTransferVoAssembler;
import ims.core.vo.lookups.CaseNoteRequestStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

public class CaseNoteTransferImpl extends BaseCaseNoteTransferImpl
{
	private static final long serialVersionUID = 1L;

	public LocationLiteVoCollection listCaseNoteLocations(String value)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listCaseNoteFolderLocations(value);
	}

	public PatientCaseNoteRequestShortVo getCaseNoteRequests(PatientCaseNoteRequestRefVo caseNoteRequests) 
	{
		if(caseNoteRequests == null || caseNoteRequests.getID_PatientCaseNoteRequest() == null)
			return null;
		
		return PatientCaseNoteRequestShortVoAssembler.create((PatientCaseNoteRequest) getDomainFactory().getDomainObject(PatientCaseNoteRequest.class, caseNoteRequests.getID_PatientCaseNoteRequest()));
	}

	public CaseNoteTrackingConfigVo getTrackingConfig() 
	{
		PatientCaseNotes impl = (PatientCaseNotes) getDomainImpl(PatientCaseNotesImpl.class);
		return impl.getTrackingConfig();
	}

	public void saveTransfer(PatientCaseNoteTransferVo transfer, PatientCaseNoteRequestShortVoCollection requests, Boolean sameLocation) throws StaleObjectException 
	{
		if(!Boolean.TRUE.equals(sameLocation) && transfer == null)
			throw new CodingRuntimeException("Cannot save a null PatientCaseNoteTransferVo.");
		
		if (!Boolean.TRUE.equals(sameLocation) && !transfer.isValidated())
			throw new CodingRuntimeException("PatientCaseNoteTransferVo isn't validated.");

		DomainFactory factory = getDomainFactory();
		
		PatientCaseNoteTransfer domainTransfer = PatientCaseNoteTransferVoAssembler.extractPatientCaseNoteTransfer(factory, transfer);
		
		if(!Boolean.TRUE.equals(sameLocation))
		{
			factory.save(domainTransfer);
		}
		
		PatientCaseNote domainCaseNote =((PatientCaseNote) factory.getDomainObject(PatientCaseNote.class, transfer.getCaseNote().getID_PatientCaseNote()));

		if (requests != null && requests.size() > 0)
		{
			for (int i = 0; i < requests.size(); i ++)
			{
				PatientCaseNoteRequest domainRequest = PatientCaseNoteRequestShortVoAssembler.extractPatientCaseNoteRequest(factory, requests.get(i));
				
				domainRequest.setRequestStatus(getDomLookup(CaseNoteRequestStatus.COMPLETED));
				domainRequest.setTransferThatCompletedRequest(!Boolean.TRUE.equals(sameLocation) ? domainTransfer : null);
				domainRequest.setPrintedPullListDate(null);
				
				factory.save(domainRequest);
				
				domainCaseNote.getOpenRequests().remove(domainRequest);
			}
		}
		
		domainCaseNote.setLastTransferDate(new DateTime().getJavaDate());
		domainCaseNote.setCurrentLocation(domainTransfer.getTransferredToLocation());
		
		factory.save(domainCaseNote);
		
		if(domainCaseNote.getPatient() != null && domainCaseNote.getPatient().getId() != null)
		{
			Patient pat = (Patient) factory.getDomainObject(Patient.class, domainCaseNote.getPatient().getId());
			
			if(pat != null)
			{
				pat.setCurrentCaseNoteLocation(domainTransfer.getTransferredToLocation());
				pat.setCaseNoteLastTransferDate(domainTransfer.getTransferDate());
			
				factory.save(pat);
			}
		}
	}


}
