//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3509.17128)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.clinical.vo.domain.InpatientEpisodeForVTERiskAsessmentVoAssembler;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.domain.objects.HealthyLodger;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.domain.objects.PendingTransfers;
import ims.core.admin.pas.vo.BedSpaceStateRefVo;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.pas.vo.PendingTransfersRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.domain.Alerts;
import ims.core.domain.BedAdmissionComponent;
import ims.core.domain.WardDataView;
import ims.core.domain.WardView;
import ims.core.domain.WardViewPatientSummaryComponent;
import ims.core.layout.domain.objects.BedSpace;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.WardBayConfigForWardViewVo;
import ims.core.vo.WardDataViewVo;
import ims.core.vo.WardDataViewVoCollection;
import ims.core.vo.domain.BedSpaceStateListVoAssembler;
import ims.core.vo.domain.BedSpaceStateLiteVoAssembler;
import ims.core.vo.domain.BedSpaceVoAssembler;
import ims.core.vo.domain.HealthyLodgerVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PasEventADTVoAssembler;
import ims.core.vo.domain.PatientLite_IdentifiersVoAssembler;
import ims.core.vo.domain.PendingTransferForBedReadyDetailsVoAssembler;
import ims.core.vo.domain.PendingTransfersLiteVoAssembler;
import ims.core.vo.domain.VTERiskAssessmentWorklistVoAssembler;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.TransferStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.dto.DTODomainImplementation;
import ims.dto.Result;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.vo.interfaces.IVTERiskAssessment;

import java.util.Iterator;
import java.util.List;

public class WardDataViewImpl extends DTODomainImplementation implements WardDataView
{

	private static final long serialVersionUID = 1L;

	/**
	 * listWardsForCurrentLocation
	 */
	public ims.core.vo.LocationLiteVoCollection listWardsForCurrentLocation(ims.framework.interfaces.ILocation parentLocation)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listWardsForCurrentLocation(parentLocation);
	}

	/**
	 * getBedSpaceState
	 */
	public ims.core.vo.BedSpaceStateLiteVo getBedSpaceState(ims.core.layout.vo.BedSpaceRefVo bed)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getBedSpaceState(bed);	
	}

	/**
	 * listInpatientEpisodeByWard
	 */
	public ims.core.vo.InpatientEpisodeLiteVoCollection listInpatientEpisodeByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listInpatientEpisodeByWard(ward);	
	}

	/**
	 * listPendingElectiveAdmission
	 */
	public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection listPendingElectiveAdmission(ims.core.resource.place.vo.LocationRefVo voLocation)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listPendingElectiveAdmission(voLocation);	
	}

	/**
	 * listEmergencyAdmission
	 */
	public ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection listEmergencyAdmission(ims.core.resource.place.vo.LocationRefVo location)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listEmergencyAdmission(location);	
	}

	/**
	 * listPendingTransfersInByWard
	 */
	public ims.core.vo.PendingTransfersLiteVoCollection listPendingTransfersInByWard(ims.core.resource.place.vo.LocationRefVo destWard)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listPendingTransfersInByWard(destWard);	
	}

	/**
	 * listPendingTransfersOutByWard
	 */
	public ims.core.vo.PendingTransfersLiteVoCollection listPendingTransfersOutByWard(ims.core.resource.place.vo.LocationRefVo currentLocation)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listPendingTransfersOutByWard(currentLocation);	
	}

	public ims.core.vo.LocationLiteVoCollection listActiveHospitalsLite()
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listActiveHospitalsLite();	
	}

	/**
	 * getWardBayConfig
	 */
	public WardBayConfigForWardViewVo getWardBayConfigByWard(ims.core.resource.place.vo.LocationRefVo ward) //WDEV-20328
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getWardBayConfigByWard(ward);
	}

	/**
	 * listWaitingAreaPatientsByWard
	 */
	public ims.core.vo.InpatientEpisodeLiteVoCollection listWaitingAreaPatientsByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listWaitingAreaPatientsByWard(ward);
	}

	public ims.core.vo.LocMostVo getLocation(ims.core.resource.place.vo.LocationRefVo voLocRef)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getLocation(voLocRef);
	}

	/**
	 * countInfants (WDEV-7722)
	 */
	public int countInfants(ims.core.patient.vo.PatientRefVo patient)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.countInfants(patient);
	}

	/**
	 * A list of all the occupied beds and associated inpatients across a ward
	 */
	public WardDataViewVoCollection listInpatientsInBedsByWard(LocationRefVo ward)
	{
		if (ward == null || ward.getID_Location() == null)
			throw new CodingRuntimeException("ward is null or id not provided in method listInpatientsInBedsByWard");

		WardDataViewVoCollection voCollWdv = new WardDataViewVoCollection();

		String hql = "select bed, pat, bay, pe,inpatEpis from BedSpaceState as bedSpaceState left join bedSpaceState.bedSpace as bed left join bedSpaceState.currentBedStatus as currentStatus left join bedSpaceState.inpatientEpisode as inpatEpis left join inpatEpis.pasEvent as pe left join pe.patient as pat left join bedSpaceState.bay as bay " +
		"where (bedSpaceState.ward.id = :wardId and bedSpaceState.inpatientEpisode is not null  and currentStatus.bedStatus = :occupied)";

		List wdvList = getDomainFactory().find(hql, new String[]{"wardId","occupied"}, new Object[]{ward.getID_Location(), getDomLookup(BedStatus.OCCUPIED)});
		if(wdvList != null && wdvList.size() > 0)
		{
			Iterator it = wdvList.iterator();
			while(it.hasNext())
			{
				Object[] item = (Object[])it.next();
				BedSpace doBed = (BedSpace) item[0];
				Patient doPat = (Patient) item[1];
				Location doBay = (Location) item[2];
				PASEvent doPe = (PASEvent) item[3];
				InpatientEpisode doInpat = (InpatientEpisode) item[4]; //wdev-14784

				WardDataViewVo voWardDv = new WardDataViewVo(); 
				voWardDv.setBed(BedSpaceVoAssembler.create(doBed));
				voWardDv.setBay(LocationLiteVoAssembler.create(doBay));
				voWardDv.setPatient(PatientLite_IdentifiersVoAssembler.create(doPat));
				voWardDv.getPatient().setHasAlerts(doPat.getPatientAlerts() != null && doPat.getPatientAlerts().size() > 0 ? true : false);
				voWardDv.setInpatEpisode(InpatientEpisodeForVTERiskAsessmentVoAssembler.create(doInpat)); //wdev-14784
				//wdev-11083

				Iterator<ims.core.clinical.domain.objects.PatientAlert> patAlert = doPat.getPatientAlerts().iterator();

				boolean flagHasAlerts = false;
				while(patAlert != null && patAlert.hasNext())
				{					
					if(Boolean.TRUE.equals(patAlert.next().isIsCurrentlyActiveAlert()))
					{
						flagHasAlerts = true;
						break;

					}
				}
				voWardDv.getPatient().setHasAlerts(flagHasAlerts);
				//end wdev-11083
				voWardDv.setPasEvent(PasEventADTVoAssembler.create(doPe));

				voCollWdv.add(voWardDv);
			}
		}

		voCollWdv.sort();
		return voCollWdv;
	}



	public WardDataViewVoCollection listAllBedsForWard(LocationRefVo ward) throws DomainInterfaceException
	{
		if (ward == null || ward.getID_Location() == null)
			return null;

		WardDataViewVoCollection voCollWdv = new WardDataViewVoCollection();

		StringBuilder query = new StringBuilder("SELECT bed, pat, bay, pe, inpatEpis, bedSpaceState, pendTrans ");

		query.append(" FROM PendingTransfers AS pendTrans RIGHT JOIN pendTrans.inpatientEpisode AS inpatEpis ");
		query.append(" RIGHT JOIN inpatEpis.bed AS bedSpaceState LEFT JOIN bedSpaceState.bedSpace AS bed ");
		query.append(" LEFT JOIN bedSpaceState.currentBedStatus AS currentStatus ");
		query.append(" LEFT JOIN inpatEpis.pasEvent AS pe LEFT JOIN pe.patient AS pat LEFT JOIN bedSpaceState.bay AS bay ");
		query.append(" WHERE bedSpaceState.ward.id = :WARD_ID AND bedSpaceState.ward.isActive = :ACTIVE "); //WDEV-21026 
		query.append(" AND bay.isActive = :ACTIVE"); //WDEV-21026 
		query.append(" ORDER BY currentStatus.bedStatus.id, bed.bedNumber"); //WDEV-21026 

		try
		{

			List<?> wdvList = getDomainFactory().find(query.toString(), new String[]{"WARD_ID", "ACTIVE"}, new Object[] {ward.getID_Location(), Boolean.TRUE});

			String hqllodger = "select admPe.id,admPe.version,hl from AdmissionDetail adm left join adm.pasEvent as admPe left join adm.healthyLodger as hl where admPe.id in (select pe.id from InpatientEpisode AS inpatEpis LEFT JOIN inpatEpis.pasEvent AS pe where pe.location.id = :WARD_ID)"; //WDEV-21026
			List <?> hldgList = getDomainFactory().find(hqllodger, "WARD_ID", ward.getID_Location());

			if(wdvList != null && wdvList.size() > 0)
			{
				Iterator<?> it = wdvList.iterator();
				while(it.hasNext())
				{
					Object[] item = (Object[])it.next();
					BedSpace doBed = (BedSpace) item[0];
					Patient doPat = (Patient) item[1];
					Location doBay = (Location) item[2];
					PASEvent doPe = (PASEvent) item[3];
					InpatientEpisode doInpat = (InpatientEpisode) item[4]; //wdev-14784
					BedSpaceState doBedSpaceState = (BedSpaceState) item[5];
					PendingTransfers doPendingTransfer = (PendingTransfers) item[6];

					WardDataViewVo voWardDv = new WardDataViewVo(); 
					voWardDv.setBed(BedSpaceVoAssembler.create(doBed));
					voWardDv.setBay(LocationLiteVoAssembler.create(doBay));
					//WDEV-22567
					if (doPat != null && doPat.getAssociatedPatient() != null)
					{
						doPat = doPat.getAssociatedPatient();
					}

					voWardDv.setPatient(PatientLite_IdentifiersVoAssembler.create(doPat));
					if (doPat != null)
					{
						voWardDv.getPatient().setHasAlerts(doPat.getPatientAlerts() != null && doPat.getPatientAlerts().size() > 0 ? true : false);
					}
					voWardDv.setInpatEpisode(InpatientEpisodeForVTERiskAsessmentVoAssembler.create(doInpat)); //wdev-14784
					//wdev-11083

					if (doPat != null)
					{
						Iterator<ims.core.clinical.domain.objects.PatientAlert> patAlert = doPat.getPatientAlerts().iterator();

						boolean flagHasAlerts = false;
						while(patAlert != null && patAlert.hasNext())
						{					
							if(Boolean.TRUE.equals(patAlert.next().isIsCurrentlyActiveAlert()))
							{
								flagHasAlerts = true;
								break;

							}
						}
						voWardDv.getPatient().setHasAlerts(flagHasAlerts);
					}
					//end wdev-11083
					voWardDv.setPasEvent(PasEventADTVoAssembler.create(doPe));
					//WDEV-20222
					if (doPe != null)
					{
						Iterator<?> hldgIterator = hldgList.iterator();

						while (hldgIterator.hasNext())
						{
							Object[] value =(Object[]) hldgIterator.next();

							if (((Object[])value).length >= 3 &&  ((Object[])value)[2] instanceof HealthyLodger)
							{	
								if (((Object[])value)[0] instanceof Integer && ((Object[])value)[1] instanceof Integer)
								{
									Integer id = (Integer) ((Object[])value)[0];
									Integer ver = (Integer) ((Object[])value)[1];
									PASEventRefVo peRef = new PASEventRefVo(id, ver);

									if (peRef.getID_PASEventIsNotNull() && peRef.getID_PASEvent().equals(doPe.getId()))
									{								
										voWardDv.setHealthyLodgerDetails(HealthyLodgerVoAssembler.create((HealthyLodger)((Object[])value)[2]));								
									}
								}	
							}
						}				
					}
					voWardDv.setBedSpaceState(BedSpaceStateListVoAssembler.create(doBedSpaceState));

					if (doPendingTransfer != null) //WDEV-21083
					{
						voWardDv.setPendingTransfer(PendingTransferForBedReadyDetailsVoAssembler.create(doPendingTransfer));
					}

					voCollWdv.add(voWardDv);
				}
			}

			//		voCollWdv.sort();
			return voCollWdv;
		}
		catch (Exception ex)
		{
			throw new DomainInterfaceException("Search failed while trying to retrieve results. Please search again.");
		}
	}


	public CareContextShortVo getCareContextForPasEvent(PASEventRefVo pasEvent)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getCareContextForPasEvent(pasEvent);
	}

	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;

		DomainFactory factory = getDomainFactory();

		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});

		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();

			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}

		return result;
	}

	public ims.dto.client.Patient getCCODTOPatient(String pkey) throws DomainInterfaceException 
	{
		if(pkey == null)
			throw new DomainRuntimeException("Cannot get Patient for null pkey");

		ims.dto.client.Patient patient = (ims.dto.client.Patient)getDTOInstance(ims.dto.client.Patient.class);
		patient.Filter.clear();
		patient.Filter.Pkey = pkey;

		Result result = patient.get();
		if (result != null)
		{
			if(result.getId() == -2)
				throw new DomainInterfaceException("Error Getting Patient Details for pkey = " + pkey);

			throw new DomainInterfaceException(result.getMessage());
		}

		if (patient.DataCollection.count()!= 1)
			throw new DomainInterfaceException("Failed to get patient record.");

		return patient;
	}

	public InpatientEpisodeLiteVoCollection listHomeLeaveByWard(LocationRefVo ward) 
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listHomeLeaveByWard(ward);
	}

	//WDEV-14476
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeRefVo)
	{
		Alerts impl = (Alerts) getDomainImpl(AlertsImpl.class);
		return impl.getPIDDiagnosisInfo(careContextRefVo, episodeRefVo);
	}

	//WDEV-15908
	public LocationLiteVo getCurrentHospital(ILocation location) 
	{
		if(location == null)
			return null;

		DomainFactory factory = getDomainFactory();

		Location currentHospital = getHospital((Location) factory.getDomainObject(Location.class, location.getID()));

		if(currentHospital instanceof LocSite)
			return LocationLiteVoAssembler.create((Location) currentHospital);

		return null;
	}

	//WDEV-15908
	private Location getHospital(Location doLocation)
	{
		if(doLocation == null)
			return null;

		if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return doLocation;

		while(doLocation.getParentLocation() != null) 
		{
			doLocation = doLocation.getParentLocation();
			if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return doLocation;
		}

		return null;
	}

	public IVTERiskAssessment getInpatientEpisodeForVTE(InpatientEpisodeRefVo inpatientEpisodeRef)
	{
		if(inpatientEpisodeRef == null)
			throw new CodingRuntimeException("Cannot get InpatientEpisode on null Id.");

		return (IVTERiskAssessment) VTERiskAssessmentWorklistVoAssembler.create((InpatientEpisode) getDomainFactory().getDomainObject(InpatientEpisode.class, inpatientEpisodeRef.getID_InpatientEpisode()));
	}


	public BedSpaceStateLiteVo getBedSpaceState(BedSpaceStateRefVo bedSpaceState)
	{
		if (bedSpaceState == null || bedSpaceState.getID_BedSpaceState() == null)
			return null;

		return BedSpaceStateLiteVoAssembler.create((BedSpaceState) getDomainFactory().getDomainObject(BedSpaceState.class, bedSpaceState.getID_BedSpaceState()));
	}
	//WDEV-21059
	public Integer countFemalePatientsOnTheBayForSelectedBedSpace(LocationRefVo wardRef, LocationRefVo bayRef)
	{		
		WardViewPatientSummaryComponent impl = (WardViewPatientSummaryComponent) getDomainImpl(WardViewPatientSummaryComponentImpl.class);
		return impl.countFemalePatientsOnTheWard(wardRef, bayRef);
	}

	public Integer countMalePatientsOnTheBayForSelectedBedSpace(LocationRefVo wardRef, LocationRefVo bayRef)
	{
		WardViewPatientSummaryComponent impl = (WardViewPatientSummaryComponent) getDomainImpl(WardViewPatientSummaryComponentImpl.class);
		return impl.countMalePatientsOnTheWard(wardRef, bayRef);
	}
	//WDEV-21059 -- end


	public PatientShort getPatientShort(PatientRefVo patRef)
	{
		BedAdmissionComponent impl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		return impl.getPatientShort(patRef);
	}
	//WDEV-21508
	public PendingTransfersLiteVo getPendingTransfer(PendingTransfersRefVo pendingTransferRef)
	{
		if (pendingTransferRef == null)
			return null;
		DomainFactory factory = getDomainFactory();

		PendingTransfers doPendingTransfer = (PendingTransfers) factory.getDomainObject(PendingTransfers.class, pendingTransferRef.getID_PendingTransfers());
		if (doPendingTransfer != null && TransferStatus.PENDING.getID() == doPendingTransfer.getCurrentStatus().getId())
			return PendingTransfersLiteVoAssembler.create(doPendingTransfer);

		return null;
	}
}
