//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.util.List;

import ims.core.domain.base.impl.BasePDSRelativesSynchronizationImpl;
import ims.core.vo.lookups.PDSBackOfficeWorkStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class PDSRelativesSynchronizationImpl extends BasePDSRelativesSynchronizationImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* countBackOfficeEntries by type and patient
	*/
	public Integer countBackOfficeEntries(ims.vo.LookupInstVo type, ims.core.patient.vo.PatientRefVo patient) throws ims.domain.exceptions.DomainInterfaceException
	{
		if(type == null || patient == null)
			throw new CodingRuntimeException("countBackOfficeEntries: type and patient must not be null !");
		
		DomainFactory factory = getDomainFactory(); 
		
		String filter = "select count (p1_1.id) from PDSBackOfficeItem as p1_1 where (p1_1.patient.id = :patient and p1_1.type.id = :type and p1_1.currentStatus.id <> :status)";
		
		List list = factory.find(filter, new String[]{"type", "patient", "status"}, new Object[]{type.getId(), patient.getID_Patient(), PDSBackOfficeWorkStatus.COMPLETED.getId()});
		
		int count = 0;
		if(list.size() > 0)
		{
			if(list.get(0) instanceof Integer)
				count = ((Integer)list.get(0)).intValue();
			else
				count = ((Long)list.get(0)).intValue();
		}
		
		return count;
	}
}
