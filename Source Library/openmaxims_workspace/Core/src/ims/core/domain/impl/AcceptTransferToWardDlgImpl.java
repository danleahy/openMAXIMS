//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.domain.objects.PendingTransfers;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.domain.AdmitToWard;
import ims.core.domain.BedAdmissionComponent;
import ims.core.domain.BedInfoDialog;
import ims.core.domain.base.impl.BaseAcceptTransferToWardDlgImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.InPatientEpisodeADTVo;
import ims.core.vo.PatientCaseNoteTransferVoCollection;
import ims.core.vo.PatientCaseNoteVoCollection;
import ims.core.vo.PendingTransfersLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.WardConfigLiteVo;
import ims.core.vo.domain.InPatientEpisodeADTVoAssembler;
import ims.core.vo.domain.PendingTransfersLiteVoAssembler;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.CodingRuntimeException;

public class AcceptTransferToWardDlgImpl extends BaseAcceptTransferToWardDlgImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.CareContextShortVo saveTransferIn(ims.core.vo.BedSpaceStateLiteVo voOldBedSpaceStateLite, ims.core.vo.InPatientEpisodeADTVo voInpatientEpisode, ims.core.vo.PendingTransfersLiteVo voPending, ims.core.vo.HomeLeaveVo voHL ,PatientCaseNoteTransferVoCollection collPatientCaseNoteTransfer) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		PendingTransfersLiteVo transferVo = getPendingTransfer(voPending);
		if (transferVo == null || (transferVo.getVersion_PendingTransfers()  > voPending.getVersion_PendingTransfers()))
			throw new DomainInterfaceException("This transfer has been already processed");
		
		 BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		 return impl.saveTransferIn(voOldBedSpaceStateLite, voInpatientEpisode, voPending, voHL, null, null, collPatientCaseNoteTransfer);
	}

	public ims.core.vo.PendingTransfersLiteVo getPendingTransfer(ims.core.admin.pas.vo.PendingTransfersRefVo pendingTransfersRef)
	{
		if (pendingTransfersRef == null)
			throw new CodingRuntimeException("Invalid argument specified.");
		
		DomainFactory factory = getDomainFactory();
		
		PendingTransfers pendingTransferDO = (PendingTransfers) factory.getDomainObject(PendingTransfers.class, pendingTransfersRef.getID_PendingTransfers());
		
		if (pendingTransferDO == null)
			return null;
		
		return PendingTransfersLiteVoAssembler.create(pendingTransferDO);
		
	}

	public InPatientEpisodeADTVo getInpatientEpisodeADT(InpatientEpisodeRefVo inpatientEpisodeRef)
	{
		if (inpatientEpisodeRef == null)
			throw new CodingRuntimeException("Invalid argument specified.");
		
		DomainFactory factory = getDomainFactory();
		
		InpatientEpisode inpatientEpisode = (InpatientEpisode) factory.getDomainObject(InpatientEpisode.class, inpatientEpisodeRef.getID_InpatientEpisode());
		
		if (inpatientEpisode == null)
			return null;
		
		return InPatientEpisodeADTVoAssembler.create(inpatientEpisode);
	}
	
	public WardConfigLiteVo getWardConfig(LocationRefVo locationRef)
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		
		return impl.getWardConfig(locationRef);
	}


	public SpecialtyCollection listSpecialtiesForConsultant(String mapping) throws DomainInterfaceException
	{
		BedAdmissionComponent impl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		return impl.listSpecialtiesFromConSpc(mapping);
	}

	
	public ServiceLiteVoCollection listServices(String name)
	{
		BedAdmissionComponent impl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		return impl.listServices(name);
	}

	@Override
	public PatientCaseNoteVoCollection getCaseNoteFolders(PatientRefVo patientRef, LocationRefVo locationRef) 
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.getCaseNoteFolders(patientRef, locationRef);
	}

	@Override
	public Boolean isCaseNoteFolderLocation(PatientRefVo patientRef)
	{
		if(patientRef== null)
			return false;
		
		AdmitToWard	 impl =(AdmitToWard)getDomainImpl(AdmitToWardImpl.class);
		return impl.isCaseNoteFolderLocation(patientRef);	
	}
}
