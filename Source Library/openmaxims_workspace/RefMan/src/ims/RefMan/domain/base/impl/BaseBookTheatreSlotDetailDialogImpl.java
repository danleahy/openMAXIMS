//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseBookTheatreSlotDetailDialogImpl extends DomainImpl implements ims.RefMan.domain.BookTheatreSlotDetailDialog, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validatesaveTheatreBooking(ims.scheduling.vo.Sch_BookingTheatreVo booking, ims.RefMan.vo.CatsReferralRefVo catsReferral, ims.scheduling.vo.SessionParentChildSlotRefVoCollection voCollChildSlots, ims.scheduling.vo.SessionParentChildSlotVo voSessParentChildSlot, ims.scheduling.vo.lookups.TheatreType theatreType, ims.RefMan.vo.ReferralERODForBookTheatreVo regerralEROD, ims.RefMan.vo.PatientElectiveListVo patientElectiveListToSave, ims.scheduling.vo.PendingEmergencyTheatreVo pendingEmergencyTheatre, ims.framework.utils.Date previousEarliestDateOffered)
	{
	}

	@SuppressWarnings("unused")
	public void validategetBookingTheatreAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		if(appt == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'appt' of type 'ims.scheduling.vo.Booking_AppointmentRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetPatientICP(ims.core.admin.vo.CareContextRefVo careContext)
	{
		if(careContext == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'careContext' of type 'ims.core.admin.vo.CareContextRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesavePatientICP(ims.icp.vo.PatientICPFullVo icp)
	{
		if(icp == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'icp' of type 'ims.icp.vo.PatientICPFullVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatehasTheatreEROD(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
	}

	@SuppressWarnings("unused")
	public void validategetReferralERODByAppointment(ims.scheduling.vo.Booking_AppointmentRefVo apptRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetCatsReferral(ims.RefMan.vo.CatsReferralRefVo catsReferralRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistWardsForCurrentLocation(ims.framework.interfaces.ILocation location)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientElectiveList(ims.core.patient.vo.PatientRefVo patientRef, ims.RefMan.vo.CatsReferralRefVo catsRef, ims.core.clinical.vo.ServiceRefVo serviceRef, ims.core.clinical.vo.ProcedureRefVo procedureRef, String listIdHcp, ims.RefMan.vo.CatsReferralForNewElectivListEntryVo catsReferralWithPathwayClock, Boolean nonDiagnosticELE)
	{
	}

	@SuppressWarnings("unused")
	public void validategetHCPMin(ims.core.resource.people.vo.HcpRefVo hcpRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetHCPLiteVo(ims.core.resource.people.vo.HcpRefVo hcpRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientElectiveListsOnFormOpen(ims.RefMan.vo.CatsReferralRefVo catsRef, ims.core.clinical.vo.ServiceRefVo serviceRef, String listIdHcp, Boolean nonDiagnosticELE, ims.RefMan.vo.CatsReferralForNewElectivListEntryVo getPatientElectiveList)
	{
	}

	@SuppressWarnings("unused")
	public void validategetElectiveListConfigurationOnFormOpen(ims.core.clinical.vo.ServiceRefVo serviceRef, ims.core.resource.place.vo.LocationRefVo locationRef, String listIdHcp)
	{
	}

	@SuppressWarnings("unused")
	public void validategetParentHospitalLocation(ims.core.resource.place.vo.LocationRefVo wardLoc)
	{
	}

	@SuppressWarnings("unused")
	public void validatehasNonDiagnosticPatientElectiveList(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatientElectiveListByRefId(ims.RefMan.vo.PatientElectiveListRefVo patientElectiveListRefVo)
	{
	}

	@SuppressWarnings("unused")
	public void validatecreateCaseNoteRequests(Integer tciId, ims.core.vo.LocationLiteVo caseNoteFolderLoc)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistProcedures(String filter)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPendingEmergencyTheatre(ims.scheduling.vo.PendingEmergencyTheatreRefVo pendingEmergencyTheatre)
	{
	}

	@SuppressWarnings("unused")
	public void validategetEROD(ims.RefMan.vo.ReferralERODRefVo erod)
	{
	}

	@SuppressWarnings("unused")
	public void validategetSessionTheatreProcedureRemaining(ims.scheduling.vo.SessionTheatreProceduresRemaniningRefVo sessionTheatreProcedureRemaining)
	{
	}
}
