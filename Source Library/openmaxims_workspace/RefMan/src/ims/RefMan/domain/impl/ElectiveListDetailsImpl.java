//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.vo.lookups.HardCodedEvents;
import ims.RefMan.domain.ERODDialog;
import ims.RefMan.domain.ReferralAppointmentDetailsComponent;
import ims.RefMan.domain.base.impl.BaseElectiveListDetailsImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ElectiveListStatus;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.BookingAppointmentForTCIVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PatientElectiveListDetailsVo;
import ims.RefMan.vo.PatientElectiveListNotesVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.ReferralERODDetailsVo;
import ims.RefMan.vo.ReferralERODRefVo;
import ims.RefMan.vo.TCIForPatientElectiveListDetailsVo;
import ims.RefMan.vo.TCIForReferralBookingVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.domain.BookingAppointmentForTCIVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListDetailsVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListVoAssembler;
import ims.RefMan.vo.domain.TCIForReferralBookingVoAssembler;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.vo.ElectiveListConfigurationRefVo;
import ims.core.domain.PatientCaseNotes;
import ims.core.domain.impl.PatientCaseNotesImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientCaseNoteRequestVoCollection;
import ims.core.vo.PatientLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffShortVoAssembler;
import ims.core.vo.domain.PatientListVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.QueueType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.hl7adtout.domain.objects.ElectiveListMessageQueue;
import ims.ocrr.vo.lookups.OrderMessageStatus;
import ims.pathways.configuration.domain.objects.Event;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.domain.objects.PauseDetails;
import ims.pathways.vo.EventLiteVo;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.domain.EventLiteVoAssembler;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.lookups.EventStatus;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.SessionParentChildSlot;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.SessionParentChildSlotRefVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class ElectiveListDetailsImpl extends BaseElectiveListDetailsImpl
{
	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.PatientElectiveListDetailsVo get(ims.RefMan.vo.PatientElectiveListRefVo patientElectiveListRef)
	{
		if(patientElectiveListRef == null || patientElectiveListRef.getID_PatientElectiveList() == null)
			return null;
		
		return PatientElectiveListDetailsVoAssembler.create((PatientElectiveList) getDomainFactory().getDomainObject(PatientElectiveList.class, patientElectiveListRef.getID_PatientElectiveList()));
	}

	public LocationLiteVoCollection listHospitalsByElectiveList(ElectiveListConfigurationRefVo electiveListConfig, String name)
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " select loc from ElectiveListConfiguration as electiveListConf left join electiveListConf.listLocations as listLocations left join listLocations.listLocation as loc where electiveListConf.id = :electiveList and loc.isActive = 1 and loc.type = :locType ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " and ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		
		markers.add("electiveList");
		values.add(electiveListConfig.getID_ElectiveListConfiguration());
		
		markers.add("locType");
		values.add(getDomLookup(LocationType.HOSP));
		
		if (name != null)
		{
			condStr.append(andStr + " loc.upperName like :name");
			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";
		}
		
		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		hql += condStr.toString();
		hql += " ORDER BY loc.upperName";					
		List locations = factory.find(hql, markers, values);
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(locations);
	}

	public LocationLiteVoCollection listWards(String name, LocationRefVo locationRef)
	{
		if(locationRef == null)
			throw new CodingRuntimeException("Cannot get Location on null on null LocationRef.");
		
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveWardsForHospitalByNameLite(locationRef, name);
	}

	//WDEV-23350
//	public PatientElectiveListDetailsVo save(PatientElectiveListDetailsVo patientElectiveList, TCIForPatientElectiveListDetailsVo previousTCI, Date previousEarliestDateOffered) throws StaleObjectException
	public PatientElectiveListDetailsVo save(PatientElectiveListDetailsVo patientElectiveList, TCIForPatientElectiveListDetailsVo previousTCI, Date previousEarliestDateOffered, Boolean createOutcomeHistory) throws StaleObjectException
	{
		if (patientElectiveList == null)
			throw new CodingRuntimeException("Cannot save null PatientElectiveListDetailsVo");
		
		if(!patientElectiveList.isValidated())
			throw new CodingRuntimeException("PatientElectiveListDetailsVo is not validated");

		DomainFactory factory = getDomainFactory();
		
		//WDEV-23350
		/*
		 * Need to 'save' previous TCI Time and TCI Ward before domainPatElectiveList is assembled
		 */
		String preSavePELTCITime = null;
		Location preSavePELTCIWard = null;
		
		if (patientElectiveList != null && createOutcomeHistory != null)
		{
			PatientElectiveList preSavePatientElectiveList = (PatientElectiveList) factory.getDomainObject(PatientElectiveList.class, patientElectiveList.getBoId()); 
			if (preSavePatientElectiveList.getTCIDetails() != null
					&& preSavePatientElectiveList.getTCIDetails().getTCITime() != null)
				preSavePELTCITime = preSavePatientElectiveList.getTCIDetails().getTCITime();
			if (preSavePatientElectiveList.getTCIDetails() != null
					&& preSavePatientElectiveList.getTCIDetails().getTCIWard() != null)
				preSavePELTCIWard = preSavePatientElectiveList.getTCIDetails().getTCIWard();
		} //WDEV-23350

		
		boolean isPlannedList = ElectiveAdmissionType.PLANNED_TYPE13.equals(patientElectiveList.getElectiveAdmissionType());
		
		PatientElectiveList domainPatElectiveList = PatientElectiveListDetailsVoAssembler.extractPatientElectiveList(factory, patientElectiveList);
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, domainPatElectiveList.getReferral().getId());
		
		Boolean isDiagnostic = domainPatElectiveList != null 
								&& domainPatElectiveList.getElectiveListReason() != null 
								&& domainPatElectiveList.getElectiveListReason().getId() == ElectiveListReason.DIAGNOSTIC.getID() ? true : false;
		Boolean saveReferral = false;
		
		boolean createPatientEvent = false;
		
		if(domainPatElectiveList != null  && domainPatElectiveList.getEROD() != null)
		{
			if (!isPlannedList
					&& !isDiagnostic 
					&& (domainPatElectiveList.getEROD().getId() == null 
						|| (doCatsReferral.getJourney() != null 
								&& doCatsReferral.getJourney().getCurrentClock() != null 
								&& doCatsReferral.getJourney().getCurrentClock().getCurrentPause() == null)))
			{
    			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
    			{
    				PauseDetails doPauseDetails = new PauseDetails();
    				doPauseDetails.setPauseStart(domainPatElectiveList.getEROD().getERODDate1());
					doPauseDetails.setPauseStop(domainPatElectiveList.getEROD().getPatAvailFromDate());
					doPauseDetails.setActive(true);
    				
    				doCatsReferral.getJourney().getCurrentClock().setCurrentPause(doPauseDetails);
    				
    				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() == null)
    					doCatsReferral.getJourney().getCurrentClock().setPauseDetails(new java.util.ArrayList());
    				
    				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(doPauseDetails);
    				
        			if (ConfigFlag.DOM.PATHWAY_ENTITY_EVENT_FUNCTIONALITY.getValue() && doCatsReferral != null && doCatsReferral.getJourney() != null)			
        			{
        				createPatientEvent = true;    			
        			}
    			}
			}
			else if(!isPlannedList && !isDiagnostic && domainPatElectiveList.getEROD().getId() != null)
			{
				if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
    			{
					boolean shouldPauseBeAddedToHistory = false;
				
					PauseDetails currentPause = doCatsReferral.getJourney().getCurrentClock().getCurrentPause();
					PauseDetails notUpdatedCurrentPause = clonePause(currentPause);
					
					if (currentPause != null && Boolean.TRUE.equals(currentPause.isActive()) 
							&& (currentPause.getPauseStart().equals(domainPatElectiveList.getEROD().getERODDate1()) 
									|| (previousEarliestDateOffered != null 
										&& currentPause.getPauseStart().equals(previousEarliestDateOffered.getDate()))))
					{
						if(!currentPause.getPauseStart().equals(domainPatElectiveList.getEROD().getERODDate1()))
						{
							currentPause.setPauseStart(domainPatElectiveList.getEROD().getERODDate1());
						}
						
						currentPause.setPauseStop(domainPatElectiveList.getEROD().getPatAvailFromDate());
					}
					else if (currentPause == null || Boolean.FALSE.equals(currentPause.isActive()))
					{
						// Current Pause is null, so create a new one to store the EROD details
						currentPause = new PauseDetails();
						currentPause.setPauseStart(domainPatElectiveList.getEROD().getERODDate1());
						currentPause.setPauseStop(domainPatElectiveList.getEROD().getPatAvailFromDate());
						currentPause.setActive(domainPatElectiveList.getEROD().isIsActive());
						doCatsReferral.getJourney().getCurrentClock().setCurrentPause(currentPause);
						
						shouldPauseBeAddedToHistory = true;
					}
					
					if(shouldPauseBeAddedToHistory)
					{
						if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() == null)
							doCatsReferral.getJourney().getCurrentClock().setPauseDetails(new java.util.ArrayList());
						
						doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(currentPause);
					}
					else
					{
    					List<PauseDetails> pauses = doCatsReferral.getJourney().getCurrentClock().getPauseDetails();
    					if (pauses != null && pauses.size() > 0)
    					{
    						for (int i=0; i<pauses.size(); i++)
    						{
    							PauseDetails pause = pauses.get(i);
    							//if (pause.getPauseStart().equals(domainPatElectiveList.getEROD().getERODDate1()) || (previousEarliestDateOffered != null && pause.getPauseStart().equals(previousEarliestDateOffered.getDate())) && Boolean.TRUE.equals(pause.isActive()))
    							if(pause.equals(notUpdatedCurrentPause) && Boolean.TRUE.equals(pause.isActive()))
    							{
    								if(!pause.getPauseStart().equals(domainPatElectiveList.getEROD().getERODDate1()))
    								{
    									pause.setPauseStart(domainPatElectiveList.getEROD().getERODDate1());
    								}
    								
    								pause.setPauseStop(domainPatElectiveList.getEROD().getPatAvailFromDate());
    								
    								break;
    							}
    						}
    					}
					}
    			}
			}
			else if(isPlannedList && !isDiagnostic && domainPatElectiveList.getEROD() != null)
			{
				if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
    			{
					ReferralEROD domErod = domainPatElectiveList.getEROD();
					
					if (domErod != null && domErod.getERODType().getId() == ERODType.ELECTIVE.getId())
					{
						PathwayClock domClock = doCatsReferral.getJourney().getCurrentClock();
						PauseDetails currentPause = domClock.getCurrentPause();
						if (currentPause != null && currentPause.isActive() && currentPause.getPauseStart().equals(domErod.getERODDate1()))
							currentPause.setActive(false);
						
						List pauseDetails = domClock.getPauseDetails();
						if (pauseDetails != null && pauseDetails.size() > 0)
						{
							for (int i=0; i<pauseDetails.size(); i++)
							{
								PauseDetails pause = (PauseDetails) pauseDetails.get(i);
								if (pause != null && pause.isActive() && pause.getPauseStart().equals(domErod.getERODDate1()))
								{
									pause.setActive(false);
								}
							}
						}
					}
    			}
			}
			
			ReferralEROD doErod = setSequenceToErod(domainPatElectiveList.getEROD(), doCatsReferral.getElectiveEROD());
			doCatsReferral.getElectiveEROD().add(doErod);
							
			saveReferral = true;
		}
	
		if(previousTCI != null)
		{
			if(domainPatElectiveList != null && domainPatElectiveList.getTCIHistory() != null)
			{
				for(int i=0; i<domainPatElectiveList.getTCIHistory().size(); i++)
				{
					TCIForPatientElectiveList rec = (TCIForPatientElectiveList) domainPatElectiveList.getTCIHistory().get(i);
					
					if(rec != null && rec.getId().equals(previousTCI.getID_TCIForPatientElectiveList()))
					{
						rec.set_28DayTCIDateOffered(previousTCI.getDayTCIDate28Offered().getDate());
						rec.set_28DateOfOffer(previousTCI.getDate28OfOffer().getDate());
						rec.set_28ReasonDeclined(getDomLookup(previousTCI.getReasonDeclined28()));
					}
				}
			}
		}
		
		//WDEV-23350
		if (createOutcomeHistory != null)
		{
			TCIForPatientElectiveList doTCIDetails = domainPatElectiveList.getTCIDetails();
			TCIForPatientElectiveList newTCIDetails = new TCIForPatientElectiveList();
			
			newTCIDetails.setTCIDate(doTCIDetails.getTCIDate());
			if (preSavePELTCITime != null)
			{
				newTCIDetails.setTCITime(preSavePELTCITime);
				if (!(preSavePELTCITime.trim().equals(doTCIDetails.getTCITime().trim())))
				{
					newTCIDetails.setComments("TCI Time changed from " + preSavePELTCITime.trim() + " to " + doTCIDetails.getTCITime().trim());
				}
			}
			else
			{
				newTCIDetails.setTCITime(doTCIDetails.getTCITime());
			}
			newTCIDetails.setTCIOfferMethod(doTCIDetails.getTCIOfferMethod());
			newTCIDetails.setDateTCIOffered(doTCIDetails.getDateTCIOffered());
			newTCIDetails.setDateTCIAccepted(doTCIDetails.getDateTCIAccepted());
			newTCIDetails.setAppointment(doTCIDetails.getAppointment());
			newTCIDetails.setSession(doTCIDetails.getSession());
			newTCIDetails.setRTTBreachReason(doTCIDetails.getRTTBreachReason());
			newTCIDetails.setPlanningElective(doTCIDetails.getPlanningElective());
			newTCIDetails.setTCIHospital(doTCIDetails.getTCIHospital());
			if (preSavePELTCIWard != null)
			{
				newTCIDetails.setTCIWard(preSavePELTCIWard);
				if (!(preSavePELTCIWard.equals(doTCIDetails.getTCIWard())))
				{ 
					if (newTCIDetails.getComments() != null)
					{
						newTCIDetails.setComments(newTCIDetails.getComments() + "/TCI Ward changed from " + preSavePELTCIWard.getName().trim() + " to " + doTCIDetails.getTCIWard().getName().trim());
					}
					else
					{
						newTCIDetails.setComments("TCI Ward changed from " + preSavePELTCIWard.getName() + " to " + doTCIDetails.getTCIWard().getName());
					}
				}
			}
			else
			{
				newTCIDetails.setTCIWard(doTCIDetails.getTCIWard());
			}
			newTCIDetails.setTCIBed(doTCIDetails.getTCIBed());
			newTCIDetails.setTCIConsultant(doTCIDetails.getTCIConsultant());
			
			TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
			
			newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.TCI_AMENDED));
			MemberOfStaff domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
			newOutcome.setChangeBy(domainMOS);
			newOutcome.setStatusDateTime(new java.util.Date());
			
			if(newTCIDetails.getOutcomeHistory() == null)
				newTCIDetails.setOutcomeHistory(new ArrayList());
			newTCIDetails.getOutcomeHistory().add(newOutcome);

			newTCIDetails.setCurrentOutcome(newOutcome);
			newTCIDetails.setIsActive(Boolean.FALSE);
			newTCIDetails.setAdmissionDetail(doTCIDetails.getAdmissionDetail());
			newTCIDetails.setBedManagerComment(doTCIDetails.getBedManagerComment());
			newTCIDetails.setDay28BreachReason(doTCIDetails.getDay28BreachReason());
			newTCIDetails.setDay28BreachComment(doTCIDetails.getDay28BreachComment());
			newTCIDetails.setPlannedTCIDate(doTCIDetails.getPlannedTCIDate());
			newTCIDetails.setCancelMsgProcessed(doTCIDetails.isCancelMsgProcessed());
			newTCIDetails.setWasReasonable28dayOfferMade(doTCIDetails.isWasReasonable28dayOfferMade());
			newTCIDetails.set_28DayTCIDateOffered(doTCIDetails.get_28DayTCIDateOffered());
			newTCIDetails.set_28DateOfOffer(doTCIDetails.get_28DateOfOffer());
			newTCIDetails.set_28ReasonDeclined(doTCIDetails.get_28ReasonDeclined());
			newTCIDetails.setSubjectTo28DayRule(doTCIDetails.isSubjectTo28DayRule());
			newTCIDetails.setRule28DayStatus(doTCIDetails.getRule28DayStatus());
			newTCIDetails.setRule28DayPeriodStart(doTCIDetails.getRule28DayPeriodStart());
			
			
			
			if (domainPatElectiveList.getTCIHistory() == null)
				domainPatElectiveList.setTCIHistory(new ArrayList());
							
			domainPatElectiveList.getTCIHistory().add(newTCIDetails);
		
		} //WDEV-23350
		
		factory.save(domainPatElectiveList);
		
		/*if(domainPatElectiveList != null && !isDiagnostic && domainPatElectiveList.getTCIDetails() != null && domainPatElectiveList.getTCIDetails().getTCIDate() != null)
		{
			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null && doCatsReferral.getJourney().getCurrentClock().getCurrentPause() != null)
			{
				PauseDetails currentPause = doCatsReferral.getJourney().getCurrentClock().getCurrentPause();
				
				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() != null)
				{
					for(int i=0; i<doCatsReferral.getJourney().getCurrentClock().getPauseDetails().size(); i++)
					{
						PauseDetails pause = (PauseDetails) doCatsReferral.getJourney().getCurrentClock().getPauseDetails().get(i);
						if(currentPause.equals(pause) && Boolean.TRUE.equals(pause.isActive()))
						{
							doCatsReferral.getJourney().getCurrentClock().getPauseDetails().remove(i);
							break;
						}
					}
				}
				
				currentPause.setPauseStop(domainPatElectiveList.getTCIDetails().getTCIDate());
				
				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() == null)
					doCatsReferral.getJourney().getCurrentClock().setPauseDetails(new java.util.ArrayList());
				
				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(currentPause);	
			}
			
			saveReferral = true;
		}*/
		
		if (saveReferral)
			factory.save(doCatsReferral);
		
		if(createPatientEvent)
		{
			EventLiteVo hardCodedEvent = getHardCodedEvent(HardCodedEvents.PATHWAYPAUSED.getID());
			createPatientEvent(doCatsReferral, hardCodedEvent, domainPatElectiveList.getEROD().getERODDate1());	
		}
		
		return PatientElectiveListDetailsVoAssembler.create(domainPatElectiveList);
	}
	
	private PauseDetails clonePause(PauseDetails pause)
	{
		if(pause == null)
			return null;
		
		PauseDetails newPause = new PauseDetails();
		newPause.setPauseStart(pause.getPauseStart());
		newPause.setPauseStop(pause.getPauseStop());
		newPause.setActive(pause.isActive());
		
		return newPause;
	}

	private ReferralEROD setSequenceToErod(ReferralEROD erod, List theatreEROD)
	{
		if(erod == null)
			return null;
		
		if(erod.getId() != null)
			return erod;
		
		int sequence = 0;
		
		if(theatreEROD != null)
		{
			for(int i=0; i<theatreEROD.size(); i++)
			{
				if(theatreEROD.get(i) instanceof ReferralEROD)
				{
					ReferralEROD savedErod = (ReferralEROD) theatreEROD.get(i);
					
					if(savedErod.getSequence() != null && sequence < savedErod.getSequence())
						sequence = savedErod.getSequence();
				}
			}
		}
		
		sequence++;
		
		erod.setSequence(sequence);
		
		return erod;
	}

	
	private void createPatientEvent(CatsReferral doCatsReferral, EventLiteVo hardCodedEvent, java.util.Date erodStartDate) throws StaleObjectException
	{
		PatientPathwayJourney patientJBo = doCatsReferral != null ? doCatsReferral.getJourney() : null;

		if (patientJBo != null && hardCodedEvent != null)
		{				
			PatientEventVo patEvent = new PatientEventVo();
			
			patEvent.setPatient((PatientRefVo)PatientListVoAssembler.create(doCatsReferral.getPatient()));
			patEvent.setEvent(hardCodedEvent);
			patEvent.setEventDateTime(erodStartDate != null ? new DateTime(erodStartDate) : new DateTime());
			patEvent.setEventStatus(EventStatus.ACTIVE);
			patEvent.setJourney(PatientJourneyVoAssembler.create(patientJBo));
			
			HL7PathwayIf implPath = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
			try
			{
				implPath.instantiatePatientEvent(patEvent);
			}
			catch (DomainInterfaceException e)
			{
				throw new DomainRuntimeException("Domain Error occured in save Event " + e.getMessage(), e);
			}
		}		
	}
	
	private EventLiteVo getHardCodedEvent(int event_Id)
	{
		StringBuilder hqlBuilder = new StringBuilder("select event from Event as event left join event.status as s where event.id = :eventID and s.id = :statusID ");
		
		List <?> list = getDomainFactory().find(hqlBuilder.toString(),new String[] {"eventID", "statusID"},new Object[] {event_Id, PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if (list == null || list.size() == 0)
			return null;
		
		return EventLiteVoAssembler.create((Event)list.get(0));	
	}

	public void createCaseNoteRequests(PatientElectiveListDetailsVo patientElectiveList, PatientShort patient)
	{
		if (patientElectiveList == null)
			return;
		
		Integer tciId = patientElectiveList.getTCIDetails().getID_TCIForPatientElectiveList();
		LocationLiteVo hospital = patientElectiveList.getTCIDetails().getTCIHospital();
		
		if (tciId == null || hospital == null)
			return;
		
		TCIForPatientElectiveList domTciDetails = (TCIForPatientElectiveList) getDomainFactory().getDomainObject(TCIForPatientElectiveList.class, tciId);
		
		if (domTciDetails == null)
			return;
		
		LocationLiteVo caseNoteFolderLocRef = null;
		
		if (patientElectiveList.getElectiveList() != null && patientElectiveList.getElectiveList().getID_ElectiveListConfiguration() != null)
		{

			DomainFactory factory = getDomainFactory();
			
			String query = "select ll.caseNoteFolderLocation from ElectiveListConfiguration as elc left join elc.listLocations as ll left join ll.listLocation as lll where elc.id = :ElectiveListConfigID and lll.id = :HospitalId";

			List<?> caseNoteLocList = factory.find(query, new String[] { "ElectiveListConfigID", "HospitalId" }, new Object[] { patientElectiveList.getElectiveList().getID_ElectiveListConfiguration(), hospital.getID() });

			if (caseNoteLocList != null && caseNoteLocList.size() > 0 && caseNoteLocList.get(0) != null)
			{
				caseNoteFolderLocRef = LocationLiteVoAssembler.create((Location) caseNoteLocList.get(0));
			}

		}
		
		TCIForReferralBookingVo tci = TCIForReferralBookingVoAssembler.create(domTciDetails);
		
		//WDEV-21951
		if (caseNoteFolderLocRef == null && tci.getTCIWard() != null && Boolean.TRUE.equals(tci.getTCIWard().getCaseNoteFolderLocation()))
		{
			caseNoteFolderLocRef = tci.getTCIWard();
		}
		
		if (caseNoteFolderLocRef != null  && tci.getTCIDate() != null)
		{
			if (tci.getTCITime() != null)
			{
				if (tci.getTCIDate().isGreaterThan(new Date()) || (tci.getTCIDate().equals(new Date()) && tci.getTCITime().isGreaterOrEqualThan(new Time())))
				{
					saveAutomatedCaseNoteRequests(patient, tci, caseNoteFolderLocRef);
				}
			}
			else
			{
				if (tci.getTCIDate().isGreaterOrEqualThan(new Date()))
				{
					saveAutomatedCaseNoteRequests(patient, tci, caseNoteFolderLocRef);
				}
			}
		}
	}
	
	private PatientCaseNoteRequestVoCollection saveAutomatedCaseNoteRequests(PatientShort patient, TCIForReferralBookingVo tci, LocationLiteVo location) //WDEV-20064
	{
		PatientCaseNoteRequestVoCollection savedCaseNotesRequests = null;
		
		DateTime dateTimeRequired = new DateTime();
		
		dateTimeRequired.setDateTime(tci.getTCIDate(), tci.getTCITime());
		
		PatientLiteVo patientLite = new PatientLiteVo(patient.getID_Patient(),patient.getVersion_Patient());
		
		try
		{
			savedCaseNotesRequests = saveAutomatedCaseNoteRequest(patientLite, (MemberOfStaffLiteVo) getMosUser(), location, dateTimeRequired, tci);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
		}
		
		return savedCaseNotesRequests;
	}
	
	private PatientCaseNoteRequestVoCollection saveAutomatedCaseNoteRequest(PatientLiteVo patient, MemberOfStaffLiteVo mos, LocationLiteVo location, DateTime requiredByDate, TCIForReferralBookingVo tci) throws StaleObjectException, DomainInterfaceException, UniqueKeyViolationException
	{
		PatientCaseNotes impl = (PatientCaseNotes) getDomainImpl(PatientCaseNotesImpl.class);
		return impl.saveAutomaticCaseNoteRequests(patient, mos, location, requiredByDate, null, tci);
	}

	//WDEV-19704 Create message queue trigger record(s) for each provider system for A05 HL7 message 
	public void triggerElectiveListEvent(PatientElectiveListRefVo patientElectiveList) throws StaleObjectException
	{
		if (patientElectiveList == null)
			return;
		
		PatientElectiveListVo patientElectList = PatientElectiveListVoAssembler.create((PatientElectiveList) getDomainFactory().getDomainObject(PatientElectiveList.class, patientElectiveList.getID_PatientElectiveList()));
		
		if(patientElectList != null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.ELECTIVELIST.getId()+")";

			java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				ElectiveListMessageQueue messageQueue = new ElectiveListMessageQueue();
				messageQueue.setPatientElectiveList((PatientElectiveList)factory.getDomainObject(patientElectList));
				messageQueue.setProviderSystem(providerSystem);
				messageQueue.setWasProcessed(Boolean.FALSE);
				messageQueue.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				messageQueue.setQueueType(getDomLookup(QueueType.ELECTIVELIST));

				if (patientElectList.getElectiveListStatusIsNotNull()
						&& patientElectList.getElectiveListStatus().getElectiveListStatusIsNotNull())
				{
					if ((WaitingListStatus.TCI_GIVEN.getId() == patientElectList.getElectiveListStatus().getElectiveListStatus().getID()
							//WDEV-20795 Ensure that A05 is created when elective list is SUSPENDED and TCI is created!
							|| WaitingListStatus.SUSPENDED.getId() == patientElectList.getElectiveListStatus().getElectiveListStatus().getID())
						&& patientElectList.getTCIDetailsIsNotNull()
						&& patientElectList.getTCIDetails().getTCIDateIsNotNull())
					{
						messageQueue.setMsgType(getDomLookup(MsgEventType.A05));
					}
					if ((WaitingListStatus.REQUIRES_TCI.getId() == patientElectList.getElectiveListStatus().getElectiveListStatus().getID())
							//WDEV-20795 Create A38 when elective list status is SUSPENDED and TCI is being cancelled
							|| WaitingListStatus.SUSPENDED.getId() == patientElectList.getElectiveListStatus().getElectiveListStatus().getID())
					{
						Boolean unProcessedCancelledTCI = checkForUnprocessedCancelledTCIForPatElectList(patientElectList);
						if(unProcessedCancelledTCI)
						{
							messageQueue.setMsgType(getDomLookup(MsgEventType.A38));
						}
					}
				}
				
				if (messageQueue.getMsgType() != null)
				{
					factory.save(messageQueue);
				}
			}
		} //WDEV-20680
	}
	
	//WDEV-20680
	private Boolean checkForUnprocessedCancelledTCIForPatElectList(PatientElectiveListVo patientElectList)
	{
		DomainFactory factory = getDomainFactory();
		
		PatientElectiveList patReferral = (PatientElectiveList) factory.getDomainObject(patientElectList);

		// Following check probably not needed..
		if(patReferral.getTCIDetails() != null
				&& patReferral.getTCIDetails().getTCIDate() != null)
		{
			// An active TCI exists for the referral
			return false;
		}
		
		// Check to see if a cancelled TCI exists for the referral
		java.util.List<TCIForPatientElectiveList> histPatElectListTCI = patReferral.getTCIHistory();
		
		if(histPatElectListTCI == null)
			return false;
		
		// Loop thru historic TCI(s) and check for unprocessed row
		for (TCIForPatientElectiveList tciDetail : histPatElectListTCI)
		{
			if (tciDetail.isCancelMsgProcessed() == null
					|| tciDetail.isCancelMsgProcessed()  == Boolean.FALSE)
			{
				return true;
			}
		}			
		return false;
	} //WDEV-20680

	public PatientElectiveListDetailsVo markERODAsRIE(PatientElectiveListDetailsVo patientElectiveList, FormName formName, String comment) throws StaleObjectException
	{
		if(patientElectiveList == null || patientElectiveList.getEROD() == null)
			throw new CodingRuntimeException("Cannot mark as RIE a null EROD.");
		
		ReferralERODDetailsVo erod = patientElectiveList.getEROD();
		Integer patientId = patientElectiveList.getPatient() != null ? patientElectiveList.getPatient().getID_Patient() : null;
		
		patientElectiveList.setEROD(null);
		DomainFactory factory = getDomainFactory();
		
		PatientElectiveList domainPatElectiveList = PatientElectiveListDetailsVoAssembler.extractPatientElectiveList(factory, patientElectiveList);
		
		factory.save(domainPatElectiveList);
		
		markAsRie(erod, formName, patientId, null, null, comment);
		
		return PatientElectiveListDetailsVoAssembler.create(domainPatElectiveList);
	}

	public void cancelTCI(PatientElectiveListRefVo patientWaitingListRef, TCIOutcomeForPatientElectiveListVo tciOutcome, Booking_AppointmentRefVo theatreApptThatIsNotCancelled) throws StaleObjectException
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		impl.cancelTCI(patientWaitingListRef, tciOutcome, theatreApptThatIsNotCancelled);
	}

	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		return impl.getBookingAppointment(appt);
	}

	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws StaleObjectException, DomainInterfaceException
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo appt) throws StaleObjectException
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral, appt);
	}

	public void updateCatsReferralCancelStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		impl.updateCatsReferralCancelStatus(catsReferral);
	}

	public void dnaTCI(PatientElectiveListRefVo patientElectiveList, Booking_AppointmentRefVo theatreThatIsNotDNA) throws StaleObjectException
	{
		if (patientElectiveList == null)
			throw new CodingRuntimeException("Cannot mark the TCI as DNA on null PatientElectiveList.");

		DomainFactory factory = getDomainFactory();
		
		MemberOfStaff domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));

		PatientElectiveList domWaitingList = (PatientElectiveList) factory.getDomainObject(patientElectiveList);
		
		ElectiveListStatus status = new ElectiveListStatus();
		status.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
		status.setAuthoringUser(domainMOS);
		status.setStatusDateTime(new java.util.Date());
		
		domWaitingList.setElectiveListStatus(status);
		
		if(domWaitingList.getElectiveListStatusHistory() == null)
			domWaitingList.setElectiveListStatusHistory(new ArrayList());
	
		domWaitingList.getElectiveListStatusHistory().add(status);
		
		TCIForPatientElectiveList doTCIDetails = domWaitingList.getTCIDetails();
		domWaitingList.setTCIDetails(null);
	
		TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
		
		newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4));
		newOutcome.setChangeBy(domainMOS);
		newOutcome.setStatusDateTime(new java.util.Date());
			
		doTCIDetails.setCurrentOutcome(newOutcome);
		
		if(doTCIDetails.getOutcomeHistory() == null)
			doTCIDetails.setOutcomeHistory(new ArrayList());
		
		doTCIDetails.getOutcomeHistory().add(newOutcome);
		
		if(domWaitingList.getTCIHistory() == null)
			domWaitingList.setTCIHistory(new ArrayList());
		
		domWaitingList.getTCIHistory().add(doTCIDetails);
		
		if(theatreThatIsNotDNA != null && theatreThatIsNotDNA.getID_Booking_Appointment() != null)
		{
			domWaitingList.setTheatreAppointment((Booking_Appointment) factory.getDomainObject(Booking_Appointment.class, theatreThatIsNotDNA.getID_Booking_Appointment()));
		}
		
		factory.save(domWaitingList);
	}

	public SessionParentChildSlotVo getSession(SessionParentChildSlotRefVo sessionParentSlot)
	{
		// TODO Auto-generated method stub
		return null;
	}

	public void dnaAppointment(Booking_AppointmentVo appt, CatsReferralRefVo cats) throws StaleObjectException
	{
		if (appt == null)
			throw new CodingRuntimeException("voAppt is null in method dnaAppointment");
		if (!appt.isValidated())
			throw new CodingRuntimeException("voAppt has not been validated in method dnaAppointment");
		
		DomainFactory factory = getDomainFactory();	
		Booking_Appointment doAppt = Booking_AppointmentVoAssembler.extractBooking_Appointment(factory, appt);
		
		SessionParentChildSlot slot = doAppt.getParentChildSlot();
		if(slot != null)
		{
			slot.setStatus(getDomLookup(Status_Reason.DNA));
			slot.setAppointment(null);
			factory.save(slot);
		}
		
		doAppt.setParentChildSlot(null);
		
		factory.save(doAppt);
		
	}

	public void inactivatePause(CatsReferralRefVo referral, ReferralERODRefVo erod) throws StaleObjectException
	{
		ERODDialog impl = (ERODDialog) getDomainImpl(ERODDialogImpl.class);
		impl.inactivatePause(referral, erod);
	}

	public PatientElectiveListDetailsVo savePatientElectiveListNotes(PatientElectiveListDetailsVo patientElectiveList) throws StaleObjectException
	{
		if (patientElectiveList == null)
			throw new CodingRuntimeException("Cannot save null PatientElectiveListDetailsVo");
		
		if(!patientElectiveList.isValidated())
			throw new CodingRuntimeException("PatientElectiveListDetailsVo is not validated");

		DomainFactory factory = getDomainFactory();
		PatientElectiveList domainPatElectiveList = PatientElectiveListDetailsVoAssembler.extractPatientElectiveList(factory, patientElectiveList);
		
		factory.save(domainPatElectiveList);
		
		return PatientElectiveListDetailsVoAssembler.create(domainPatElectiveList);
	}

	public Boolean isStaleNote(PatientElectiveListNotesVo patientElectiveListNote)
	{
		if(patientElectiveListNote == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> refNotes = factory.find("select note.id from NotesForPatientElectiveList as note where note.id = :PatNoteID and note.version > :PatNoteVersion", new String[] {"PatNoteID", "PatNoteVersion"}, new Object[] {patientElectiveListNote.getID_NotesForPatientElectiveList(), patientElectiveListNote.getVersion_NotesForPatientElectiveList()});
		
		if(refNotes != null && refNotes.size() > 0)
			return true;
		
		return false;
	}

	public Boolean isERODStale(ReferralERODRefVo referralERODRef)
	{
		if(referralERODRef == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> refErods = factory.find("select re.id from ReferralEROD as re where re.id = :ReferralERODId and re.version > :ReferralERODVersion", new String[] {"ReferralERODId", "ReferralERODVersion"}, new Object[] {referralERODRef.getID_ReferralEROD(), referralERODRef.getVersion_ReferralEROD()});
		
		if(refErods != null && refErods.size() > 0)
			return true;
		
		return false;
	}

	public BookingAppointmentForTCIVo getTCIAppointment(Booking_AppointmentRefVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			return null;
		
		return BookingAppointmentForTCIVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(Booking_Appointment.class, appt.getID_Booking_Appointment()));
	}

	public Boolean isLoggedInUserMedicByHcpAndService(HcpRefVo hCpRef, ServiceRefVo serviceRef)
	{
		if( hCpRef == null || serviceRef == null)
			return false;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder query = new StringBuilder("select distinct m1_1 from Medic as m1_1 left join m1_1.serviceFunction as h1_1 left join h1_1.service as s1_1 where(m1_1.id = :hcpId and s1_1.id = :serviceId and m1_1.isHCPaResponsibleHCP = 1)");
		
		paramNames.add("hcpId");		
		paramValues.add(hCpRef.getID_Hcp());
		paramNames.add("serviceId");		
		paramValues.add(serviceRef.getID_Service());
		
		List hcps = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		if( hcps != null && hcps.size() > 0)
		{
			return true;	
		}
		
		return false; 
	}

	public Integer countHospitalsFromElectiveListConfiguration(ElectiveListConfigurationRefVo electiveListConfiguration)
	{
		if(electiveListConfiguration == null || electiveListConfiguration.getID_ElectiveListConfiguration() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();

		String hql = "select count(loc.id) from ElectiveListConfiguration as electiveListConf left join electiveListConf.listLocations as listLocations left join listLocations.listLocation as loc where electiveListConf.id = :electiveList and loc.isActive = 1 and loc.type = :locType and loc.isVirtual =:isVirtual";
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		
		markers.add("electiveList");
		values.add(electiveListConfiguration.getID_ElectiveListConfiguration());
		
		markers.add("locType");
		values.add(getDomLookup(LocationType.HOSP));
		
		markers.add("isVirtual");
		values.add(Boolean.FALSE);
		
		Object[] count = factory.find(hql, markers, values).toArray();
		
		if(count != null && count.length > 0)
			return ((Long) count[0]).intValue();
		
		return 0;
	}

	//wdev-22465
	public HcpLiteVo getHCPByMedic(HcpRefVo hcpRef)
	{
		if( hcpRef == null)
			return null;
		
		Hcp doHcp = (Hcp) getDomainFactory().getDomainObject(Hcp.class, hcpRef.getID_Hcp());
		
		return HcpLiteVoAssembler.create(doHcp);
	}
	//WDEV-22889
	public AppFormForTrackingVo getFormMenuAction(Integer formId)
	{
		if(formId == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formId);
		
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}
}
