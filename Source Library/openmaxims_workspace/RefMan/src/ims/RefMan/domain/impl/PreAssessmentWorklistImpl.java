//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BasePreAssessmentWorklistImpl;
import ims.RefMan.vo.PatientElectiveListForPreAssessmentWorklistVoCollection;
import ims.RefMan.vo.PreAssessmentWorklistSearchCriteriaVo;
import ims.RefMan.vo.domain.PatientElectiveListForPreAssessmentWorklistVoAssembler;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.WaitingCardAdmissionType;
import ims.clinical.domain.ClinicalCoding;
import ims.clinical.domain.impl.ClinicalCodingImpl;
import ims.clinical.vo.lookups.PreAssessmentInformationRequiredCollection;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.List;

public class PreAssessmentWorklistImpl extends BasePreAssessmentWorklistImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.ServiceShortVoCollection listServices(String serviceName)
	{
		StringBuilder hqlBuilder = new StringBuilder("select s1_1 from ReferralService as r1_1 left join r1_1.referralServices as s1_1 where s1_1.upperName like :servName and s1_1.isActive = 1 ");
		
		List <?> dos = getDomainFactory().find(hqlBuilder.toString(),"servName",serviceName.toUpperCase()+"%");
		
		if (dos == null || dos.size() == 0)
			return null;
		
		return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(dos); 
	}

	public ims.core.vo.ProcedureLiteVoCollection listProcedure(String procName) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding) getDomainImpl(ClinicalCodingImpl.class);
		return impl.listProcLiteVo(procName);
	}

	public PatientElectiveListForPreAssessmentWorklistVoCollection listPreAssessments(PreAssessmentWorklistSearchCriteriaVo searchCriteria)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hqlConditions = new StringBuffer();
		StringBuffer hqlJoins = new StringBuffer();
		
		StringBuffer hql = new StringBuffer(" select patElective from PatientElectiveList as patElective left join patElective.electiveListStatus as elStatus  ");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String andStr = "";
		
		hqlConditions.append(andStr);
		hqlConditions.append(" patElective.preAssessmentRequired = 1 and elStatus.electiveListStatus.id <> :Status and ( patElective.requiresVetting = 0 or patElective.requiresVetting is null ) ");		//wdev-21152
		markers.add("Status");
		values.add(WaitingListStatus.REMOVED.getID());
		
		andStr = " and ";
		
		if (searchCriteria.getServiceIsNotNull() || (searchCriteria.getServices() != null && searchCriteria.getServices().size() > 0))
		{
			hqlConditions.append(andStr);
			hqlJoins.append(" left join patElective.electiveList as electiveListConfig  ");
			hqlConditions.append(" (electiveListConfig.service.id in (" + getServicesIDs(searchCriteria) + "))");
			andStr = " and ";
		}
		
		if (searchCriteria.getProcedureIsNotNull())	
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" (patElective.primaryProcedure.id = :procedureID OR patElective.secondaryProcedure.id  = :procedureID) ");
			markers.add("procedureID");
			values.add(searchCriteria.getProcedure().getID_Procedure());
			andStr = " and ";
		}
		
		if (searchCriteria.getAnaestheticTypeIsNotNull())	
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" (patElective.anaestheticType.id = :anaestheticTypeID) ");
			markers.add("anaestheticTypeID");
			values.add(searchCriteria.getAnaestheticType().getID());
			andStr = " and ";
		}
		
		if (searchCriteria.getUrgencyIsNotNull())
		{
			hqlConditions.append(andStr);
			hqlJoins.append(" left join patElective.priority as priority ");
			hqlConditions.append(" (priority.id = :Urgency) ");
			markers.add("Urgency");
			values.add(searchCriteria.getUrgency().getID());	
			andStr = " and ";
		}
		//WDEV-22781
		if (searchCriteria.getPatientIdentifierIsNotNull())
		{
			hqlConditions.append(andStr);
			hqlJoins.append(" left join patElective.patient as patient left join patient.identifiers as ids ");
			hqlConditions.append(" (ids.value = :idValue AND ids.type = :idType) ");
			markers.add("idValue");
			markers.add("idType");
			values.add(searchCriteria.getPatientIdentifier());	
			values.add(getDomLookup(searchCriteria.getPatIdType()));
			andStr = " and ";
		}
		//WDEV-22781 ends here
		
		if (searchCriteria.getBreachDateFromIsNotNull())
		{
			hqlConditions.append(andStr);
			hqlJoins.append(" left join patElective.referral as catsRef left join catsRef.referralDetails as refDetails ");
			hqlConditions.append(" (refDetails.end18WW >= :fromdate) ");
			markers.add("fromdate");
			values.add(new DateTime(searchCriteria.getBreachDateFrom(), new Time("00:00:00")).getJavaDate());
			andStr = " and ";
		}
		
		if (searchCriteria.getBreachDateToIsNotNull())
		{
			hqlConditions.append(andStr);
			hqlJoins.append(" left join patElective.referral as catsRef left join catsRef.referralDetails as refDetails ");
			hqlConditions.append(" (refDetails.end18WW <= :todate) ");
			markers.add("todate");
			values.add(new DateTime(searchCriteria.getBreachDateTo(), new Time("23:59:00")).getJavaDate()); //WDEV-21037
			andStr = " and ";
		}
		
		if (searchCriteria.getTheatreTypeIsNotNull())
		{
			hqlConditions.append(andStr);
			hqlJoins.append(" left join patElective.preAssessmentOutcome as preAssessmentOutcome ");
			hqlConditions.append("( ( preAssessmentOutcome is not null AND preAssessmentOutcome.theatreType.id = :theatreType) OR (preAssessmentOutcome is null AND patElective.requiredTheatreType.id = :theatreType)) ");
			markers.add("theatreType");
			values.add(searchCriteria.getTheatreType().getID());	
			andStr = " and ";
		}
		
		StringBuffer hqlConditionsOR = new StringBuffer();
		String orStr = "";
		if (searchCriteria.getPreAssessmentRequired()) //those that does not have preAssessmentOutcome saved and no PreAssessment Booked
		{
			hqlConditionsOR.append(orStr);
			hqlJoins.append(" left join patElective.preAssessmentOutcome as preAssessmentOutcome ");
			hqlConditionsOR.append(" (patElective.preAssessmentOutcome is null AND patElective.preAssessmentAppointment is null) "); //WDEV-21037
			orStr = " OR ";
		}
		
		if (searchCriteria.getNotFitForSurgery())
		{
			hqlConditionsOR.append(orStr);
			hqlJoins.append(" left join patElective.preAssessmentOutcome as preAssessmentOutcome ");
			hqlConditionsOR.append(" (preAssessmentOutcome.fitToProceed = 0) ");	
			orStr = " OR ";
		}
		
		if (searchCriteria.getFitForSurgery())
		{
			hqlConditionsOR.append(orStr);
			hqlJoins.append(" left join patElective.preAssessmentOutcome as preAssessmentOutcome ");
			hqlConditionsOR.append(" (preAssessmentOutcome.fitToProceed = 1) ");
			orStr = " OR ";
		}
		
		if (searchCriteria.getPreAssessmentOutcomePending())
		{
			if (searchCriteria.getWaitingForIsNotNull() && searchCriteria.getWaitingFor().size()>0)
			{
				hqlConditionsOR.append(orStr);
    			hqlJoins.append(" left join patElective.preAssessmentOutcome as preAssessmentOutcome left join preAssessmentOutcome.waitingForDetails as waitingForDet left join waitingForDet.informationToBeReceived as infoReceived");
    			hqlConditionsOR.append(" (preAssessmentOutcome is not null AND preAssessmentOutcome.fitToProceed is null AND (infoReceived.id in (" + getWaitingForIDs(searchCriteria.getWaitingFor()) + ") AND (waitingForDet.received is null OR waitingForDet.received = 0))) ");
    			orStr = " OR ";
			}
			else
			{
				hqlConditionsOR.append(orStr);
    			hqlJoins.append(" left join patElective.preAssessmentOutcome as preAssessmentOutcome  ");
    			hqlConditionsOR.append(" (preAssessmentOutcome.detailsOutstanding=1 AND preAssessmentOutcome.fitToProceed is null)");
    			orStr = " OR ";
			}
		}
		
		//WDEV-21037
		if (searchCriteria.getPastAppointment()) 
		{
			hqlConditionsOR.append(orStr);
			hqlJoins.append(" left join patElective.preAssessmentAppointment as preAssessmentAppt ");
			hqlConditionsOR.append(" (patElective.preAssessmentOutcome is null AND preAssessmentAppt.appointmentDate < :ApptTodayDate ) "); 
			markers.add("ApptTodayDate");
			values.add(new DateTime().getJavaDate());
			orStr = " OR ";
		}
		
		if (searchCriteria.getFutureAppointment()) 
		{
			hqlConditionsOR.append(orStr);
			hqlJoins.append(" left join patElective.preAssessmentAppointment as preAssessmentAppt ");
			hqlConditionsOR.append(" (patElective.preAssessmentOutcome is null AND preAssessmentAppt.appointmentDate > :ApptTodayDate ) "); 
			markers.add("ApptTodayDate");
			values.add(new DateTime().getJavaDate());
			orStr = " OR ";
		}
		
		if (hqlConditionsOR.length() > 0)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" ( " + hqlConditionsOR + " ) ");
		}
		
		//WDEV-21037
		
		StringBuffer hqlConditionsElectiveListTypeOR = new StringBuffer();
		orStr = "";
		if (searchCriteria.getWaitingList()) 
		{
			hqlConditionsElectiveListTypeOR.append(orStr);
			hqlConditionsElectiveListTypeOR.append(" (patElective.electiveAdmissionType.id = :WaitingListType OR patElective.electiveAdmissionType.id = :BookedListType) ");
			markers.add("WaitingListType");
			values.add(ElectiveAdmissionType.ELECTIVE_TYPE11.getID());
			markers.add("BookedListType");
			values.add(ElectiveAdmissionType.BOOKED_TYPE12.getID());	
			orStr = " OR ";
		}
		
		if (searchCriteria.getSurveillancePlannedList()) 
		{
			hqlConditionsElectiveListTypeOR.append(orStr);
			hqlConditionsElectiveListTypeOR.append(" (patElective.electiveAdmissionType.id = :PlannedList   ");
			markers.add("PlannedList");
			values.add(ElectiveAdmissionType.PLANNED_TYPE13.getID());	
			orStr = " OR ";
			
			
			if (searchCriteria.getPlannedFromIsNotNull())
			{
				hqlConditionsElectiveListTypeOR.append(andStr);
								
				hqlConditionsElectiveListTypeOR.append(" (patElective.plannedDate >= :fromdate) ");		//wdev-21440
				markers.add("fromdate");
				values.add(new DateTime(searchCriteria.getPlannedFrom(), new Time("00:00:00")).getJavaDate());
				andStr = " and ";

			}
			
			if (searchCriteria.getPlannedToIsNotNull())
			{
				hqlConditionsElectiveListTypeOR.append(andStr);
								
				hqlConditionsElectiveListTypeOR.append(" (patElective.plannedDate <= :todate) ");			//wdev-21440	
				markers.add("todate");
				values.add(new DateTime(searchCriteria.getPlannedTo(), new Time("23:59:59")).getJavaDate()); 
				andStr = " and ";

			}

			hqlConditionsElectiveListTypeOR.append(" )");
			
		}
		
		if (hqlConditionsElectiveListTypeOR.length() > 0)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" ( " + hqlConditionsElectiveListTypeOR + " ) ");
		}
		
		/*if (searchCriteria.getPlannedFromIsNotNull())
		{
			hqlConditions.append(andStr);
						
			//hqlJoins.append(" left join patElective.tCIDetails as tciDet ");
			//hqlConditions.append(" (tciDet.plannedTCIDate >= :fromdate) ");
			hqlConditions.append(" (patElective.plannedDate >= :fromdate) ");		//wdev-21440
			markers.add("fromdate");
			values.add(new DateTime(searchCriteria.getPlannedFrom(), new Time("00:00:00")).getJavaDate());
			andStr = " and ";

		}
		
		if (searchCriteria.getPlannedToIsNotNull())
		{
			hqlConditions.append(andStr);
			//hqlJoins.append(" left join patElective.tCIDetails as tciDet ");
			//hqlConditions.append(" (tciDet.plannedTCIDate <= :todate) ");
			hqlConditions.append(" (patElective.plannedDate <= :todate) ");			//wdev-21440	
			markers.add("todate");
			values.add(new DateTime(searchCriteria.getPlannedTo(), new Time("23:59:59")).getJavaDate()); 
			andStr = " and ";

		}*/
		
		if (searchCriteria.getAddedToday())
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" (patElective.dateOnList >= :Today1 AND patElective.dateOnList <= :Today2) ");
			markers.add("Today1");
			values.add(new DateTime(new Date(), new Time("00:00:00")).getJavaDate()); 
			markers.add("Today2");
			values.add(new DateTime(new Date(), new Time("23:59:00")).getJavaDate()); 
			andStr = " and ";
		}
		//WDEV-23462
		if (searchCriteria.getIncludeEndoscopy())
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" patElective.admissionType.id = :AdmissionType ");
			markers.add("AdmissionType");
			values.add(WaitingCardAdmissionType.ENDOSCOPY.getID());
			andStr = " and ";
		}
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}
		
		List<?> list = factory.find((hql.toString() + hqlJoins.toString() + hqlConditions.toString() + "  ").toString(), markers, values,2000); //order by refDetails.end18WW asc

		if (list == null || list.size() == 0)
			return null;

		return PatientElectiveListForPreAssessmentWorklistVoAssembler.createPatientElectiveListForPreAssessmentWorklistVoCollectionFromPatientElectiveList(list);
		
	}
	
	private String getWaitingForIDs(PreAssessmentInformationRequiredCollection waitingForColl)
	{
		if(waitingForColl == null || waitingForColl.size()==0)
		return null;
	
		StringBuffer ids = new StringBuffer();
	
    	for(int i=0;i<waitingForColl.size();i++)
		{
			if(waitingForColl.get(i) == null)
				continue;
			
			if(ids.length() > 0)
				ids.append(",");
			
			ids.append(waitingForColl.get(i).getID());
		}
    
    	return ids.toString();
	}

	private String getServicesIDs(PreAssessmentWorklistSearchCriteriaVo searchCriteria) 
	{
		if(searchCriteria == null)
			return null;
		
		if(searchCriteria.getService() == null && searchCriteria.getServices() == null)
			return null;
		
		StringBuffer ids = new StringBuffer();
		
		if(searchCriteria.getService() != null)
		{
			ids.append(searchCriteria.getService().getID_Service());
		}
		else if(searchCriteria.getServices() != null)
		{
			for( ServiceShortVo service : searchCriteria.getServices())
			{
				if(service == null)
					continue;
				
				if(ids.length() > 0)
					ids.append(",");
				
				ids.append(service.getID_Service());
			}
		}

		return ids.toString();
	}

	public PatientShort getPatientShortVo(PatientRefVo patientRef)
	{
		if (patientRef == null)
			throw new RuntimeException("Cannot get PatientShortVo for null CareContextRefVo");

		Patient doPatient = (Patient) getDomainFactory().getDomainObject(Patient.class, patientRef.getID_Patient());
		return PatientShortAssembler.create(doPatient);
	}

	public CareContextShortVo getCareContextShortVo(CareContextRefVo careContextRef)
	{
		if (careContextRef == null)
			throw new RuntimeException("Cannot get CareContextShortVo for null CareContextRefVo");

		CareContext doCareContext = (CareContext) getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext());
		return CareContextShortVoAssembler.create(doCareContext);
	}
	
}
