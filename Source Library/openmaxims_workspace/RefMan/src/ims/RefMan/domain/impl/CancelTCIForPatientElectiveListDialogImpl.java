//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseCancelTCIForPatientElectiveListDialogImpl;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.domain.ElectiveTCIForReferralDetailsVoAssembler;
import ims.RefMan.vo.domain.TCIOutcomeForPatientElectiveListVoAssembler;
import ims.clinical.domain.objects.PeriOpAnaesthticSignInTim;
import ims.clinical.domain.objects.PeriOpPatientArrivedTime;
import ims.clinical.domain.objects.PeriOpPatientLeftTheatre;
import ims.clinical.domain.objects.PeriOpPatientSentTime;
import ims.clinical.domain.objects.PeriOpReadyForDischargeTi;
import ims.clinical.domain.objects.PeriOpReadyForSurgeryTime;
import ims.clinical.domain.objects.PeriOpSafetyBriefTime;
import ims.clinical.domain.objects.PeriOpSurgeryStartTime;
import ims.clinical.domain.objects.PeriOpSurgeryStopTime;
import ims.clinical.domain.objects.PeriOpTimeOutComplete;
import ims.clinical.domain.objects.PeriOpTimeOutOfRecoveryTi;
import ims.clinical.vo.PeriOpAnaesthticSignInTimVo;
import ims.clinical.vo.PeriOpPatientArrivedTimeVo;
import ims.clinical.vo.PeriOpPatientLeftTheatreVo;
import ims.clinical.vo.PeriOpPatientSentTimeVo;
import ims.clinical.vo.PeriOpReadyForDischargeVo;
import ims.clinical.vo.PeriOpReadyForSurgeryTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSurgeryStartTimeVo;
import ims.clinical.vo.PeriOpSurgeryStopTimeVo;
import ims.clinical.vo.PeriOpTimeOutCompleteVo;
import ims.clinical.vo.PeriOpTimeOutOfRecoveryVo;
import ims.clinical.vo.domain.PeriOpAnaesthticSignInTimVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientArrivedTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientLeftTheatreVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientSentTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForDischargeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForSurgeryTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSafetyBriefTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStartTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStopTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutCompleteVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutOfRecoveryVoAssembler;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;
import ims.scheduling.vo.domain.CancellationTypeReasonVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.List;

public class CancelTCIForPatientElectiveListDialogImpl extends BaseCancelTCIForPatientElectiveListDialogImpl
{
	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.ElectiveTCIForReferralDetailsVo getTCIDetails(Integer tciId)
	{
		if(tciId == null)
			throw new CodingRuntimeException("Cannot get TCI on null Id.");
		
		return ElectiveTCIForReferralDetailsVoAssembler.create((TCIForPatientElectiveList) getDomainFactory().getDomainObject(TCIForPatientElectiveList.class, tciId));
	}
	
	//WDEV-19446 - structured TCI cancellation reason 
	public CancellationTypeReasonVoCollection getCancellationReasons(Status_Reason typeReasonVo)
	{
		if (typeReasonVo == null)
			return null;
		
		String hql = " from CancellationTypeReason as cnclReason where cnclReason.cancellationType.id = :CANCELTYPE_ID and cnclReason.tCITheatre = 1 order by cnclReason.cancellationReason.text asc "; //WDEV-20595, WDEV-22723
		
		DomainFactory domainFactory = getDomainFactory();
		
		List <?> list = domainFactory.find(hql, new String[]{"CANCELTYPE_ID"}, new Object[]{getDomLookup(typeReasonVo).getId()});
		
		if (list == null || list.size() == 0)
			return null;
		
		return CancellationTypeReasonVoAssembler.createCancellationTypeReasonVoCollectionFromCancellationTypeReason(list);
	}

	/*private Status_Reason getMappedTypeReason(AdmissionOfferOutcome typeReasonVo)
	{
		if (typeReasonVo == null)
			return null;
		
		if (AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6.equals(typeReasonVo) || AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7.equals(typeReasonVo))
			return Status_Reason.HOSPITALCANCELLED;
		else if (AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(typeReasonVo))
			return Status_Reason.PATIENTCANCELLED;
		
		return null;
	}
	//WDEV-19446 ---------------ends here	
	*/
	
	public MemberOfStaffLiteVo getMemberOfStaff(MemberOfStaffRefVo memberOfStaff)
	{
		if(memberOfStaff == null || memberOfStaff.getID_MemberOfStaff() == null)
			return null;
		
		return MemberOfStaffLiteVoAssembler.create((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, memberOfStaff.getID_MemberOfStaff()));
	}
	
	public TCIOutcomeForPatientElectiveListVo save(TCIOutcomeForPatientElectiveListVo tciOutcome) throws StaleObjectException
	{
		if(tciOutcome == null)
			throw new CodingRuntimeException("Cannot save a null TCIOutcomeForPatientElectiveListVo.");
		
		if(!tciOutcome.isValidated())
			throw new CodingRuntimeException("TCIOutcomeForPatientElectiveListVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		TCIOutcomeForPatientElectiveList doTciOutcome = TCIOutcomeForPatientElectiveListVoAssembler.extractTCIOutcomeForPatientElectiveList(factory, tciOutcome);
		
		factory.save(doTciOutcome);
		
		return TCIOutcomeForPatientElectiveListVoAssembler.create(doTciOutcome);
	}

	//WDEV-22778
	public Boolean isAnyTimeRecordedAgainstCaseDetails(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method isAnyTimeRecordedAgainstCaseDetails");
		
		PeriOpSafetyBriefTimeVo safetyBriefTime = PeriOpSafetyBriefTimeVoAssembler.create(PeriOpSafetyBriefTime.getPeriOpSafetyBriefTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (safetyBriefTime!=null)
			return true;
		
		PeriOpReadyForSurgeryTimeVo anaesRFS = PeriOpReadyForSurgeryTimeVoAssembler.create(PeriOpReadyForSurgeryTime.getPeriOpReadyForSurgeryTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (anaesRFS!=null)
			return true;
		
		PeriOpAnaesthticSignInTimVo anaesthticSignInTime = PeriOpAnaesthticSignInTimVoAssembler.create(PeriOpAnaesthticSignInTim.getPeriOpAnaesthticSignInTimFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (anaesthticSignInTime!=null)
			return true;
		
		PeriOpPatientArrivedTimeVo patientArrivedTime = PeriOpPatientArrivedTimeVoAssembler.create(PeriOpPatientArrivedTime.getPeriOpPatientArrivedTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (patientArrivedTime!=null)
			return true;
		
		PeriOpPatientLeftTheatreVo patientLeftTheatre = PeriOpPatientLeftTheatreVoAssembler.create(PeriOpPatientLeftTheatre.getPeriOpPatientLeftTheatreFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (patientLeftTheatre!=null)
			return true;
		
		PeriOpPatientSentTimeVo patientSentTime = PeriOpPatientSentTimeVoAssembler.create(PeriOpPatientSentTime.getPeriOpPatientSentTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (patientSentTime!=null)
			return true;
		
		PeriOpReadyForDischargeVo readyForDischarge = PeriOpReadyForDischargeVoAssembler.create(PeriOpReadyForDischargeTi.getPeriOpReadyForDischargeTiFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (readyForDischarge!=null)
			return true;
		
		PeriOpSurgeryStartTimeVo surgeryStartTime = PeriOpSurgeryStartTimeVoAssembler.create(PeriOpSurgeryStartTime.getPeriOpSurgeryStartTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (surgeryStartTime!=null)
			return true;
		
		PeriOpSurgeryStopTimeVo surgeryStopTime = PeriOpSurgeryStopTimeVoAssembler.create(PeriOpSurgeryStopTime.getPeriOpSurgeryStopTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (surgeryStopTime!=null)
			return true;
		
		PeriOpTimeOutCompleteVo timeOutComplete = PeriOpTimeOutCompleteVoAssembler.create(PeriOpTimeOutComplete.getPeriOpTimeOutCompleteFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (timeOutComplete!=null)
			return true;
		
		PeriOpTimeOutOfRecoveryVo timeOutOfRecovery = PeriOpTimeOutOfRecoveryVoAssembler.create(PeriOpTimeOutOfRecoveryTi.getPeriOpTimeOutOfRecoveryTiFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (timeOutOfRecovery!=null)
			return true;
		
		return false;
	}
}
