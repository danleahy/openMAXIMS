//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.65 build 3160.29066)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.MosAdmin;
import ims.admin.domain.Service;
import ims.admin.domain.impl.MosAdminImpl;
import ims.admin.domain.impl.ServiceImpl;
import ims.admin.vo.lookups.HardCodedEvents;
import ims.RefMan.domain.BookAppointment;
import ims.RefMan.domain.CancerTypeConfig;
import ims.RefMan.domain.ContractConfiguration;
import ims.RefMan.domain.ReferralStatusList;
import ims.RefMan.domain.SecondOpinionDialog;
import ims.RefMan.domain.base.impl.BaseReferralWizardImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.vo.CancerTypeConfigVo;
import ims.RefMan.vo.CancerTypeItemConfigVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.ReferralUrgencyUpdatesVo;
import ims.RefMan.vo.ReferralUrgencyUpdatesVoCollection;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.lookups.CancerType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.Referral;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.ContractConfig;
import ims.core.configuration.vo.ContractConfigRefVo;
import ims.core.domain.CareSpellDialog;
import ims.core.domain.impl.CareSpellDialogImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareSpellVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.Patient;
import ims.core.vo.ServiceVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.GpShortVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.lookups.PollStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ReferralType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ocrr.orderingresults.domain.objects.OcsOrderSession;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.pathways.configuration.domain.objects.Event;
import ims.pathways.configuration.domain.objects.RTTStatusPoint;
import ims.pathways.configuration.vo.TargetRefVo;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PathwayRTTStatus;
import ims.pathways.domain.objects.PathwaysRTTClockImpact;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.domain.objects.RTTStatusEventMap;
import ims.pathways.vo.EventLiteVo;
import ims.pathways.vo.PathwayClockVo;
import ims.pathways.vo.PathwayClockVoCollection;
import ims.pathways.vo.PathwayRTTStatusRefVoCollection;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.PatientJourneyVo;
import ims.pathways.vo.PatientPathwayJourneyRefVo;
import ims.pathways.vo.RTTStatusEventMapVo;
import ims.pathways.vo.RTTStatusPointLiteVo;
import ims.pathways.vo.domain.EventLiteVoAssembler;
import ims.pathways.vo.domain.PathwayRTTStatusVoAssembler;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.domain.RTTStatusEventMapVoAssembler;
import ims.pathways.vo.domain.RTTStatusPointLiteVoAssembler;
import ims.pathways.vo.lookups.EventStatus;
import ims.pathways.vo.lookups.PatientTargetStatus;
import ims.pathways.vo.lookups.RTTClockImpactSource;
import ims.pathways.vo.lookups.RTTClockState;
import ims.scheduling.domain.ExclusionDates;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.impl.ExclusionDatesImpl;
import ims.scheduling.domain.impl.OCSExternalEventsImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.ExclusionDatesVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class ReferralWizardImpl extends BaseReferralWizardImpl implements SecondOpinionDialog
{
	private static final long serialVersionUID = 1L;
	
	private static final int GP_SOURCE_OF_REFERRAL_NAT_CODE = 10;
	private static final int OTHER_SOURCE_OF_REFERRAL_NAT_CODE = 12;
	private static final int NATIONAL_CODE_FOR_REJECTED_REFERRL = 98;//WDEV-23586
	
	private static final int TWO_WEEK_WAIT_TO_1ST_APP = 14;			//wdev-20946

	public Patient getPatient(PatientRefVo patient)  
	{
		if(patient == null || patient.getID_Patient() == null)
			return  null;
				
		return PatientAssembler.create((ims.core.patient.domain.objects.Patient)getDomainFactory().getDomainObject(patient));
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo voCatsRef) 
	{
		
		CatsReferral domReferral = (CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral());
		CatsReferralWizardVo voCatsReferral =  CatsReferralWizardVoAssembler.create(domReferral);
		
		// WDEV-20119 Need to check from PatientJourney if this is a consultant upgrade - get the CancerDate
		if (voCatsReferral.getUrgencyIsNotNull() && voCatsReferral.getUrgency().getId() == ReferralUrgency.CONSULTANT_UPGRADE.getId()
				&& domReferral.getJourney() != null && !Boolean.TRUE.equals(domReferral.getJourney().getIsRIE()))
		{
			if (domReferral.getJourney().getCancerPathwayDate() != null)
				voCatsReferral.setConsultantUpgradeDate(new ims.framework.utils.Date(domReferral.getJourney().getCancerPathwayDate()));
		}
		//WDEV-21176
		voCatsReferral.setHasPatientJourneyLinked(domReferral.getJourney() != null && !Boolean.TRUE.equals(domReferral.getJourney().getIsRIE()));
		return voCatsReferral;
	}

	public CatsReferralWizardVo saveCatsReferral(CatsReferralWizardVo record) throws DomainInterfaceException, StaleObjectException 
	{
		if(record == null)
			throw new DomainRuntimeException("Invalid referral wizard to save");
		if(!record.isValidated())
			throw new DomainRuntimeException("Record not validated before save");
		
		boolean diagnosticReferral = record.getContract() != null && ReferralManagementContractType.DIAGNOSTIC.equals(record.getContract().getContractType());
		
		return saveReferraDetails(record, diagnosticReferral);
		
//		boolean isNewCatsReferral = record.getID_CatsReferral() == null;
//		DomainFactory factory = getDomainFactory();
//		
//		//wdev-18432
//		//12. On saving the Referral, If PathwayID is entered in the Referral Transfer Object, this will be saved as the PathwayID in the CatsReferral as well as the ExtClockId in the 
//		//PathwayClock. If this is not entered, the PathwayId will be the CatsReferralId formatted prepended with ORG Code. The field size is 20 characters and will be formatted with 3 
//		//characters containing the organisation code followed by 0 padded CatsReferral Id. 
//		//e.g. OrganisationCode = MK1, CatsReferral.id = 3421 - PathwayID = MK100000000000003421 
//
//		CatsReferral domainObject = null;
//
//		if (record.getPathwayID() == null )
//		{
//			if (record.getID_CatsReferral() == null)//wdev-18550
//			{
//				domainObject = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record);
//				record = CatsReferralWizardVoAssembler.create(domainObject);
//			}
//
//			String orgCode = "";
//			String szZeros = "";
//			String allZeros = "00000000000000000000";//20 chars
//
//			if (record.getReferralDetails() != null
//				&& record.getReferralDetails().getReferrerType() != null)
//			{
//				if(record.getReferralDetails().getReferrerType().equals(SourceOfReferral.TRANSFER))
//					orgCode = record.getReferralTransfer().getOTherOrganisationCode();
//				else
//					orgCode = record.getReferralDetails().getPCT();
//			}
//			
//			//WDEV-18816
//			if (orgCode.length() <= allZeros.length())
//				szZeros = allZeros.subSequence(0, allZeros.length() - orgCode.length()).toString();
//			
//			if (szZeros.length() < record.getID_CatsReferral().toString().length())
//				szZeros = "";
//			else
//				szZeros = szZeros.subSequence(0, szZeros.length() - record.getID_CatsReferral().toString().length()).toString();
//			
//			String pathwayId = orgCode + szZeros + record.getID_CatsReferral().toString();
//			
//			record.setPathwayID(pathwayId.length() > 20 ? pathwayId.subSequence(0, 19).toString(): pathwayId);
//		}
//
//		// Save PatientJourney for this referral
//		PatientPathwayJourney journey = createJourney(factory,record);
//		domainObject = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record);
//		domainObject.setJourney(journey);
//		
//		PathwayRTTStatus rttStatus = null;
//		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && isNewCatsReferral && Boolean.TRUE.equals(record.getRTTClockImpact()))
//		{
//			rttStatus = createPathwayRTTStatus(domainObject);
//			domainObject.setCurrentRTTStatus(rttStatus);
//		}
//		
//		factory.save(domainObject);
//		
//		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && isNewCatsReferral && Boolean.TRUE.equals(record.getRTTClockImpact()))
//		{
//			RTTStatusEventMapVo rttMap = getRTTStatusEventMap(rttStatus.getRTTStatus());
//			
//			if(rttMap != null && rttMap.getEvent() != null)
//			{
//				PatientEventVo patEvent = new PatientEventVo();
//				patEvent.setPatient(record.getPatient());
//				patEvent.setEvent(rttMap.getEvent());
//				patEvent.setEventDateTime(new DateTime());
//				patEvent.setEventStatus(EventStatus.ACTIVE);
//				patEvent.setJourney(PatientJourneyVoAssembler.create(domainObject.getJourney()));
//				
//				HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
//				impl.instantiatePatientEvent(patEvent);
//			}
//		}
//				
//		return CatsReferralWizardVoAssembler.create(domainObject);
	}

	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createPathwayRTTStatus(CatsReferral record, Date eventDateTime) throws DomainInterfaceException
	{
		if(!ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
			return null;
		
		if(record == null)
			return null;
		
		int nationalCode = OTHER_SOURCE_OF_REFERRAL_NAT_CODE;
		
		if(record.getReferralDetails() != null && record.getReferralDetails().getReferrerType() != null && SourceOfReferral.GP.getID() == record.getReferralDetails().getReferrerType().getId())
		{
			nationalCode = GP_SOURCE_OF_REFERRAL_NAT_CODE;
		}
		
		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		
		//WDEV-19383
		if (rttStatusPoint == null)
			throw new DomainInterfaceException("No RTT Status Point was found for National Code: " + nationalCode);
		
		Object mos = getMosUser();
		MemberOfStaff doMos = null;
		
		if(mos instanceof MemberOfStaffLiteVo)
		{
			doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
		}
		
		PathwayRTTStatus pathwayRTTStatus = new PathwayRTTStatus();
		pathwayRTTStatus.setRTTStatus(rttStatusPoint);
		pathwayRTTStatus.setStatusBy(doMos);
		pathwayRTTStatus.setStatusDateTime(eventDateTime);
		
		if(record.getJourney() != null && record.getJourney().getCurrentClock() != null)
    	{
			record.getJourney().getCurrentClock().setCurrentRTTStatus(pathwayRTTStatus);
    			
    		if(record.getJourney().getCurrentClock().getRTTStatusHistory() == null)
    			record.getJourney().getCurrentClock().setRTTStatusHistory(new java.util.ArrayList());
    			
    		record.getJourney().getCurrentClock().getRTTStatusHistory().add(pathwayRTTStatus);
    		
    	}
		
		return pathwayRTTStatus;
	}
	
	//WDEV-20383 //WDEV-23189
	private void resetRTTStatus(CatsReferral record)
	{
		if (record == null || record.getJourney() == null || record.getJourney().getCurrentClock() == null)
			return;

		// CurrentRTTStatus and StatusDateTime are mandatory
		if(record.getReferralTransfer() != null && record.getReferralTransfer().getCurrentRTTStatus() != null && record.getReferralTransfer().getRTTStatusDate() != null)
		{
			PathwayRTTStatus currentRTTStatus = new PathwayRTTStatus();
			if(record.getJourney().getCurrentClock().getCurrentRTTStatus() == null)
				record.getJourney().getCurrentClock().setCurrentRTTStatus(currentRTTStatus);
			record.getJourney().getCurrentClock().getCurrentRTTStatus().setRTTStatus(record.getReferralTransfer().getCurrentRTTStatus());
			record.getJourney().getCurrentClock().getCurrentRTTStatus().setStatusDateTime(record.getReferralTransfer().getRTTStatusDate());
			
			if(record.getCurrentRTTStatus() == null)
				record.setCurrentRTTStatus(currentRTTStatus);
			record.getCurrentRTTStatus().setRTTStatus(record.getReferralTransfer().getCurrentRTTStatus());
			record.getCurrentRTTStatus().setStatusDateTime(record.getReferralTransfer().getRTTStatusDate());
		}
	}

	private RTTStatusEventMapVo getRTTStatusEventMap(RTTStatusPoint rttStatusPoint)
	{
		if(rttStatusPoint == null)
			return null;
		
		String query = "select rttMap from RTTStatusEventMap as rttMap left join rttMap.currentRTTStatus as rtt where rtt.id = :RTTStatusPoint and rttMap.event is not null and rttMap.active = 1 and rttMap.encounterType is null";
		List<?> listRTTMap = getDomainFactory().find(query, new String[] {"RTTStatusPoint"}, new Object[] {rttStatusPoint.getId()});
		
		if(listRTTMap != null && listRTTMap.size() > 0 && listRTTMap.get(0) instanceof RTTStatusEventMap)
		{
			return RTTStatusEventMapVoAssembler.create((RTTStatusEventMap) listRTTMap.get(0));
		}
		
		return null;
	}

	private RTTStatusPoint getRTTStatusPoint(int nationalCode)
	{
		String query = "select rtt from RTTStatusPoint as rtt where rtt.nationalCode = :NationalCode";
		
		List<?> rttList = getDomainFactory().find(query, new String[] {"NationalCode"}, new Object[] {nationalCode});
		
		if(rttList != null && rttList.size() > 0 && rttList.get(0) instanceof RTTStatusPoint)
		{
			return (RTTStatusPoint) rttList.get(0);
		}
		
		return null;
	}

	// WDEV-17927 
	private PatientPathwayJourney createJourney(DomainFactory factory, CatsReferralWizardVo referral) 
	{
		// Only create the patient journey if the flag specified to do this.
		// WDEV-18483 - the patient journey gets created regardless of Elective List flag value
		//if (!ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		//	return null;
		
		// If a patientjourney already exists for the referral, then don't create a new one
		if (referral != null && referral.getID_CatsReferralIsNotNull())
		{
			CatsReferral domReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral());
			if (domReferral != null && domReferral.getJourney() != null)
				return domReferral.getJourney();
		}
		
		PatientJourneyVo journey = new PatientJourneyVo();
				
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		try 
		{
			// Create the holding referral first
			Referral domReferral = new Referral();
			domReferral.setAuthoringDateTime(new java.util.Date());			
			//WDEV-18395
			if (referral.getPathwayID()!=null && !referral.getPathwayID().equals(""))
				domReferral.setClockId(referral.getPathwayID());
			else
				domReferral.setClockId("MAXIMS_1");
			domReferral.setReferralType(factory.getLookupInstance(ReferralType.INTERNAL.getId()));
			
			// WDEV-23419  Include user Id as part of external referral key
			int userId=0;
			ims.framework.interfaces.IAppUser user = super.getLoggedInUser();
			if (user != null)
				userId = user.getUserId();
			domReferral.setExtReferralKey("IMS_" + userId + "_" + new java.util.Date().getTime()); // WDEV-23419 Include UserId

			domReferral.setPatient((ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, referral.getPatient().getID_Patient()));
			
			// New Patient - need to save it
			if (referral.getPatientIsNotNull() && !referral.getPatient().getID_PatientIsNotNull())
			{
				ims.core.patient.domain.objects.Patient domPatient = PatientAssembler.extractPatient(factory, referral.getPatient());
				factory.save(domPatient);
				domReferral.setPatient(domPatient);
				Patient voPatient = PatientAssembler.create(domPatient);
				journey.setPatient(voPatient);
			}
			else
			{
				domReferral.setPatient(PatientAssembler.extractPatient(factory, referral.getPatient()));
				journey.setPatient(referral.getPatient());

			}
			factory.save(domReferral);
						
			journey.setReferral(new ReferralRefVo(domReferral.getId(), domReferral.getVersion()));
			
			if (referral.getReferralDetailsIsNotNull())
			{
				ims.framework.utils.Date journeyStartDate = referral.getReferralTransferIsNotNull() && referral.getReferralTransfer().getRTTStartDate() != null ?  referral.getReferralTransfer().getRTTStartDate() : referral.getReferralDetails().getDateOfReferral();
				journey.setStartDate(journeyStartDate);
			}
			
			journey.setExtReferralKey(domReferral.getExtReferralKey());
						
			// WDEV-20636
			// If Urgency is 2WW or Consultant Upgrade or  National Sccreening is source of referral we need to set the isCancerPathway flag on the Journey
			if ((referral.getUrgencyIsNotNull() && referral.getUrgency().getID() == ReferralUrgency.TWO_WEEK_WAIT.getID())
				||  (referral.getUrgencyIsNotNull() && referral.getUrgency().getID() == ReferralUrgency.CONSULTANT_UPGRADE.getID())
				||	(referral.getReferralDetailsIsNotNull() && referral.getReferralDetails().getReferrerTypeIsNotNull() && referral.getReferralDetails().getReferrerType().getID() == SourceOfReferral.NATIONAL_SCREENING.getID()))
			{
				journey.setIsCancerPathway(true);
				journey.setCancerPathwayDate(journey.getStartDate());
			}
			
			
			if(Boolean.TRUE.equals(referral.getRTTClockImpact()))
			{
    			PathwayClockVo clock = new PathwayClockVo();
    			clock.setExtClockId(domReferral.getClockId());
    			clock.setExtClockName("MaximsClock_1");
    			clock.setStartDate(referral.getReferralTransferIsNotNull() && referral.getReferralTransfer().getRTTStartDate() != null ?  referral.getReferralTransfer().getRTTStartDate() : journey.getStartDate()); //WDEV-23189
    			clock.setTargetClockEnd(getTargetClockEnd(clock.getStartDate(), referral));
    			journey.setCurrentClock(clock);
    			if (!journey.getClockHistoryIsNotNull())
    				journey.setClockHistory(new PathwayClockVoCollection());
    			journey.getClockHistory().add(clock);
			}
			
			// Services specialty - if not set then use Emergency
			if (referral.getReferralDetailsIsNotNull() && referral.getReferralDetails().getServiceIsNotNull() && referral.getReferralDetails().getService().getSpecialtyIsNotNull())
				journey = impl.createPatientJourney(journey, null, referral.getReferralDetails().getService().getSpecialty(), null,null);			
			else	
				journey = impl.createPatientJourney(journey, null, Specialty.EMERGENCY, null,null);
			
			return PatientJourneyVoAssembler.extractPatientPathwayJourney(factory, journey);
		} 
		catch (DomainInterfaceException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Domain Interface Exception occurred creating patient journey - " + e.getMessage());
			return null;
		} 
		catch (StaleObjectException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Stale Object Exception occurred creating patient journey - " + e.getMessage());
			return null;
		}
		
		
		
	}

	private ims.framework.utils.Date getTargetClockEnd(ims.framework.utils.Date date, CatsReferralWizardVo referral)
	{
		ims.framework.utils.Date startDate = date.copy();

		int daysToRttBreachDate = 0;

		if (referral != null && referral.getReferralDetails() != null)
		{
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(referral.getContract(), referral.getReferralDetails().getService());

			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysToRTTBreachDate() != null)
			{
				daysToRttBreachDate = contrServiceLocationConf.getDaysToRTTBreachDate();
			}
			else if (referral.getContract() != null)
			{
				daysToRttBreachDate = referral.getContract().getDaysToRTTBreachDate();
			}
		}

		return startDate.addDay(daysToRttBreachDate);
	}

	public HcpLiteVo getHcpLiteById(HcpRefVo refId)
	{
		if(refId == null)
			throw new CodingRuntimeException("null refId passed to getHcpById() !");

		DomainFactory factory = getDomainFactory();
		
		ims.core.resource.people.domain.objects.Hcp boHcp = (ims.core.resource.people.domain.objects.Hcp)factory.getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, refId.getID_Hcp());
		
		return HcpLiteVoAssembler.create(boHcp);
	}

	public CatsReferralWizardVo saveCareSpellAndReferralDetails(CatsReferralWizardVo referVo, CareSpellVo voCareSpell, Boolean bDiagnosticReferral) throws StaleObjectException, DomainInterfaceException
	{
		CareSpellDialog careSpell = (CareSpellDialog) getDomainImpl(CareSpellDialogImpl.class);
		CareSpellVo doCareSpell = careSpell.saveCareSpell(voCareSpell);		
	
		if (doCareSpell != null
			&& doCareSpell.getEpisodesIsNotNull()
			&& doCareSpell.getEpisodes().size() > 0
			&& doCareSpell.getEpisodes().get(0).getCareContextsIsNotNull()
			&& doCareSpell.getEpisodes().get(0).getCareContexts().size() > 0)
		{
			referVo.setCareContext(doCareSpell.getEpisodes().get(0).getCareContexts().get(0));
			
			//WDEV-18194
			if (referVo.getReferralDetails() != null && referVo.getReferralDetails().getTransportRequirements() != null)
			{
				referVo.getReferralDetails().getTransportRequirements().setCareContext(doCareSpell.getEpisodes().get(0).getCareContexts().get(0));
			}
			
			referVo = saveReferraDetails(referVo, bDiagnosticReferral);
		}
		else
			referVo = null;
				
		
		return referVo;
	}	
	
	/**
	 * WDEV-18452, WDEV-18548
	 * We have created the patient journey, we now need to check the urgency of the referral
	 * if it is Two Week Wait or Consultant Upgrade, we want to instantiate the event that will
	 * bring the 62 day target into scope
	 * @param referral
	 * @param prevReferralUrgency 
	 * @param journey
	 * @param hl7Impl 
	 * @throws StaleObjectException 
	 * @throws DomainInterfaceException 
	 */
	public void check62dayTarget(CatsReferralWizardVo referral, ReferralUrgency prevReferralUrgency, CancerType prevCancerType) throws DomainInterfaceException, StaleObjectException  //WDEV-19700 
	{
		// Only create the patient journey if the flag specified to do this.
		if (!ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			return;
		
		DomainFactory factory = getDomainFactory();
					
		if (referral != null && (referral.getUrgency() == null || (referral.getUrgencyIsNotNull() 
				&& !referral.getUrgency().equals(ReferralUrgency.CONSULTANT_UPGRADE)
				&& !referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT)
				&& !referral.getUrgency().equals(ReferralUrgency.NATIONAL_SCREENING)))) //WDEV-19700
		{
			// WDEV-20575
			boolean cancerTypeChange=false;
			// Two Week wait might be the same, but cancer type might change
			if ( referral.getUrgencyIsNotNull() && referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT) && prevReferralUrgency.equals(ReferralUrgency.TWO_WEEK_WAIT) 
					&& prevCancerType != null && referral.getCancerType()!=null && prevCancerType.equals(referral.getCancerType()))
					cancerTypeChange=true;

			
			// We may be looking at a downgrade, so if previous is one of these we also want to check below
			if (!cancerTypeChange && prevReferralUrgency != null 
					&& prevReferralUrgency.getId() != ReferralUrgency.CONSULTANT_UPGRADE.getId()
					&& prevReferralUrgency.getId() != ReferralUrgency.TWO_WEEK_WAIT.getId()
					&& prevReferralUrgency.getId() != ReferralUrgency.NATIONAL_SCREENING.getId()) //WDEV-19700
			{
				return;	
			}
			
			
			//if (prevReferralUrgency == null || referral.getUrgency() ==  null)
				//return;
		}
		
		// Only perform the following checks if the urgency value has changed
		if (prevReferralUrgency != null && prevReferralUrgency.getId() == referral.getUrgency().getId() && (!referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT) && !referral.getUrgency().equals(ReferralUrgency.NATIONAL_SCREENING)))
			return;
			
		//WDEV-19700
		// Only perform the following checks if changing the target
		if (prevCancerType != null && referral.getCancerType() !=null)
		{
			String pasTargetPrevCancerType = getPASTargetByCancerType(prevCancerType);
			if (pasTargetPrevCancerType != null && pasTargetPrevCancerType.equals(getPASTargetByCancerType(referral.getCancerType()))) //WDEV-21015
				return;
		}

		// Get the Patient Journey from referral
		CatsReferral domReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral());
		
		if (domReferral.getJourney()==null) //WDEV-20944
			return;
		
		//WDEV-21309
		if (domReferral.getJourney().getCurrentClock() != null)
			factory.refresh(domReferral.getJourney().getCurrentClock());
		
		HL7PathwayIf hl7Impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
			
		PatientEventVo patientEvent = new PatientEventVo();
		patientEvent.setEventDateTime(new DateTime());
		
		String eventTargetPASMapping=null;
		TargetRefVo target = null; //WDEV-19700
		
		if (referral != null && referral.getUrgencyIsNotNull() && referral.getUrgency().equals(ReferralUrgency.CONSULTANT_UPGRADE))
		{
			// Find the event that needs to be instantiated - PAS mapping of type CONS is required for Consultant Upgrade
			try 
			{
				ims.pathways.vo.EventVo pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "CONS");
				if (pthwEvent == null)
					return;
				patientEvent.setEvent(pthwEvent);
				patientEvent.setEventDateTime(new DateTime(referral.getConsUpgradeDate()));
			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Consultant Upgrade - Pas mapping = CONS");
				return;
			}
		}
		else if (referral != null && referral.getUrgencyIsNotNull() && (referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT) || ReferralUrgency.NATIONAL_SCREENING.equals(referral.getUrgency()))) // WDEV-19700
		{
			// Find the event that needs to be instantiated - PAS mapping of type TWO is required for Two Week Wait
			try 
			{
				CancerTypeItemConfigVo cancerTypeItemConfig = getCancerTypeItemConfig(referral.getCancerType());
				
				// If there is already an active PatientEvent for Consultant Upgrade type and 62 day target is in scope, we do not want to instantiate this one
				//TargetRefVo target = null; WDEV-19700

				if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay31Target()))
				{
					target = hl7Impl.getTargetByTaxonomyMap(TaxonomyType.PAS, "31D");
					eventTargetPASMapping="31D";
				}
				else if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay62Target()))
				{
					target = hl7Impl.getTargetByTaxonomyMap(TaxonomyType.PAS, "62D");
					eventTargetPASMapping="62D";
				}
				
				StringBuffer hql = new StringBuffer(" select pev from PatientEvent pev join pev.event ev join ev.taxonomyMaps tx ");
				
				if (target != null)
				{
					hql.append(" join pev.patientTarget pjt ");
				}
				
				// WDEV-20416 We only check this for the 62 day target as we could also have a 31day target to instantiate
				if( eventTargetPASMapping != null && eventTargetPASMapping.equals("62D"))
				{
					hql.append(" where pev.journey = :journey and pev.eventStatus.id = :status " +
								" and ev.status.id = :evstatus and tx.taxonomyName = :taxType and tx.taxonomyCode = :taxCode");
					ArrayList<String> labels = new ArrayList<String>();
					ArrayList<Object> values = new ArrayList<Object>();
					labels.add("journey");
					labels.add("status");
					labels.add("evstatus");
					labels.add("taxType");
					labels.add("taxCode");
					values.add(domReferral.getJourney());
					values.add(EventStatus.ACTIVE.getId());
					values.add(PreActiveActiveInactiveStatus.ACTIVE.getId());
					values.add(getDomLookup(TaxonomyType.PAS));
					values.add("CONS");
				
					if (target != null)
					{
						hql.append(" and pjt.pathwayTarget.target.id = :target and pjt.currentStatus.status.id = :inscope ");
						labels.add("target");
						labels.add("inscope");
						values.add(target.getID_Target());
						values.add(PatientTargetStatus.INSCOPE.getId());
					}
				
					List lst = factory.find(hql.toString(), labels, values);
					if (lst != null && lst.size() > 1) 
					{
						//WDEV-19700
						if (referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT))
						{
							super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "TwoWeekWait will not be instantiated as PatientEvent already found for Consultant Upgrade");
						}
						else if ( ReferralUrgency.NATIONAL_SCREENING.equals(referral.getUrgency()))
						{
							super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "National Screening will not be instantiated as PatientEvent already found for Consultant Upgrade");
						}
						return;
					}
				} // End WDEV-20416
				
				//WDEV-19700
				ims.pathways.vo.EventVo pthwEvent = null;
				
				if (referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT))
				{
					pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "TWO");
					if (pthwEvent == null)
					{
						if (target != null)
						{
							// WDEV-20416 - If event not found look for the target
							hl7Impl.bringTargetIntoScopeWithoutEvent(target, new PatientPathwayJourneyRefVo(domReferral.getJourney().getId(), domReferral.getJourney().getVersion()), new ims.framework.utils.Date());
							return;
						}
						else
						{			
							super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Two Week Wait - Pas mapping = TWO");
							return;
						}
					}
				}
				else if ( ReferralUrgency.NATIONAL_SCREENING.equals(referral.getUrgency()))
				{
					pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "NSC");
					if (pthwEvent == null)
					{
						if (target != null)
						{
							// WDEV-20416 - If event not found look for the target
							hl7Impl.bringTargetIntoScopeWithoutEvent(target, new PatientPathwayJourneyRefVo(domReferral.getJourney().getId(), domReferral.getJourney().getVersion()), new ims.framework.utils.Date());
							return;
						}
						else
						{			
							super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for National Screening - Pas mapping = NSC");
							return;
						}
					}
				}
			
				patientEvent.setEvent(pthwEvent);
				patientEvent.setEventDateTime(new DateTime(referral.getReferralDetails().getDateReferralReceived()));
				
			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Two Week Wait - Pas mapping = TWO " + e.getMessage());
				return;
			}
		}
		else if (referral != null && referral.getUrgencyIsNotNull())
		{
			// Downgrade - Check the Event that needs to be instantiated - PAS mapping of type DGD required
			// WDEV-20575 - A downgrade only takes place if previous urgency was two week wait!
			if (prevReferralUrgency != null && prevReferralUrgency.getId() == ReferralUrgency.TWO_WEEK_WAIT.getId()
						&& !(referral.getUrgency().getId() == ReferralUrgency.TWO_WEEK_WAIT.getId()))
			{
				try 
				{
					ims.pathways.vo.EventVo pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "DGD");
					if (pthwEvent == null)
					{
						super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Downgrade from TwoWeekWait or National Screening or Consultant Upgrade - Pas mapping = DGD"); //WDEV-19700
						return;
					}
					patientEvent.setEvent(pthwEvent);
				}
				catch (DomainInterfaceException e) 
				{
					super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Downgrade from TwoWeekWait or National Screening or Consultant Upgrade - Pas mapping = DGD " + e.getMessage()); //WDEV-19700
					return;
				}
			}
		}
		
		//WDEV-19700 if prevurgency is equal to current urgency and cancerType is changed to instantiate a target that is different to its previous target, add target without an event
		if (prevReferralUrgency != null && referral.getUrgency()!=null && prevReferralUrgency.getId() == referral.getUrgency().getId() //WDEV-20026
			&& prevCancerType != null && referral.getCancerType()!=null && getPASTargetByCancerType(prevCancerType) != null && getPASTargetByCancerType(referral.getCancerType()) != null && !getPASTargetByCancerType(prevCancerType).equals(getPASTargetByCancerType(referral.getCancerType()))) //WDEV-21015
		{
			try 
			{
				if (target != null)
				{
					PatientPathwayJourneyRefVo journeyRefVo = new PatientPathwayJourneyRefVo(domReferral.getJourney().getId(), domReferral.getJourney().getVersion());
					hl7Impl.bringTargetIntoScopeWithoutEvent(target, journeyRefVo, new ims.framework.utils.Date());
				
					// Remove the other target if it exists
					TargetRefVo removeTarget=null;
					if (eventTargetPASMapping != null && eventTargetPASMapping.equals("31D"))
					{
						removeTarget=hl7Impl.getTargetByTaxonomyMap(TaxonomyType.PAS, "62D");
					}
					else if (eventTargetPASMapping != null && eventTargetPASMapping.equals("62D"))
					{
						removeTarget=hl7Impl.getTargetByTaxonomyMap(TaxonomyType.PAS, "31D");
					}
					if (removeTarget != null)
						hl7Impl.takeTargetOutOfScopeWithoutEvent(removeTarget, journeyRefVo); 
						        
				}
				
			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, e.getMessage());
			}
			return;
		}
		
		
		patientEvent.setJourney(PatientJourneyVoAssembler.create(domReferral.getJourney()));
		patientEvent.setPatient(referral.getPatient());
		patientEvent.setEventStatus(EventStatus.ACTIVE);

		if(patientEvent.getEvent() == null)// temporary	WDEV-19887 -  this should be fixed in WDEV-19700
			return;
		
		hl7Impl.instantiatePatientEvent(patientEvent, eventTargetPASMapping); //WDEV-19700
	
	}

	// WDEV-19700
	private CancerTypeItemConfigVo getCancerTypeItemConfig(CancerType cancerType)
	{
		if (cancerType==null)
			return null;
		
		CancerTypeConfig impl = (CancerTypeConfig) getDomainImpl(CancerTypeConfigImpl.class);
		CancerTypeConfigVo cancerTypeConfig = impl.getCancerTypeConfig();

		if (cancerTypeConfig == null || cancerTypeConfig.getCancerItemConfig() == null || cancerTypeConfig.getCancerItemConfig().size() == 0)
			return null;

		for (int i = 0; i < cancerTypeConfig.getCancerItemConfig().size(); i++)
		{
			if (cancerType.equals(cancerTypeConfig.getCancerItemConfig().get(i).getCancerType()))
				return cancerTypeConfig.getCancerItemConfig().get(i);
		}
		return null;
	}
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	public CatsReferralWizardVo saveReferraDetails(CatsReferralWizardVo record, Boolean bDiagnosticReferral) throws StaleObjectException, DomainInterfaceException
	{
		boolean isNewCatsReferral = record.getID_CatsReferral() == null;
		DomainFactory factory = getDomainFactory();

		// WDEV-18452 - before save of the catsReferral, I need to hold onto the original Urgency value
		LookupInstance prevReferralUrgency=null;
		LookupInstance prevCancerTypeLookInst=null; //WDEV-19700
		
		if (!isNewCatsReferral)
		{
			CatsReferral domCatsRef = (CatsReferral)factory.getDomainObject(CatsReferral.class, record.getID_CatsReferral());
			prevReferralUrgency = domCatsRef.getUrgency();
			
			prevCancerTypeLookInst=domCatsRef.getCancerType();//WDEV-19700	
		}
		
		if(record != null && record.getUrgency() != null && (prevReferralUrgency == null || (prevReferralUrgency != null && prevReferralUrgency.getId() != record.getUrgency().getID())))
		{
			if(record.getUrgencyUpdateHistory() == null)
			{
				record.setUrgencyUpdateHistory(new ReferralUrgencyUpdatesVoCollection());
			}
			
			record.getUrgencyUpdateHistory().add(createReferralUrgencyUpdateRecord(record.getUrgency()));
		}


		//wdev-18432
		//12. On saving the Referral, If PathwayID is entered in the Referral Transfer Object, this will be saved as the PathwayID in the CatsReferral as well as the ExtClockId in the 
		//PathwayClock. If this is not entered, the PathwayId will be the CatsReferralId formatted prepended with ORG Code. The field size is 20 characters and will be formatted with 3 
		//characters containing the organisation code followed by 0 padded CatsReferral Id. 
		//e.g. OrganisationCode = MK1, CatsReferral.id = 3421 - PathwayID = MK100000000000003421 

		CatsReferral domCatsReferral = null;
		HashMap hasMap = new HashMap();
		
		if (record.getPathwayID() == null)
		{
			if (record.getID_CatsReferral() == null)//wdev-18550
			{
				domCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record, hasMap);
				record = CatsReferralWizardVoAssembler.create(domCatsReferral);
			}

			if (record.getID_CatsReferral() != null)
			{
				String orgCode = "";
				String szZeros = "";
				String allZeros = "00000000000000000000";//20 chars

				if (record.getReferralDetails() != null
						&& record.getReferralDetails().getReferrerType() != null)
				{
					if(record.getReferralDetails().getReferrerType().equals(SourceOfReferral.TRANSFER) && record.getReferralTransfer() != null && record.getReferralTransfer().getOTherOrganisationCode() != null)
					{
						//WDEV-19698
						String extCode = getLookupService().getRemoteLookup(record.getReferralTransfer().getOTherOrganisationCode().getID(), "MAXIMS");;
						orgCode =extCode!=null ? extCode : "" ;
					}
					else
						orgCode = record.getReferralDetails().getPCT();
				}

				//WDEV-18816
				if (orgCode != null && orgCode.length() <= allZeros.length())			//wdev-20417
					szZeros = allZeros.subSequence(0, allZeros.length() - orgCode.length()).toString();

				if (szZeros.length() < record.getID_CatsReferral().toString().length())
					szZeros = "";
				else
					szZeros = szZeros.subSequence(0, szZeros.length() - record.getID_CatsReferral().toString().length()).toString();

				String pathwayId = (orgCode != null ? orgCode:"") + szZeros + record.getID_CatsReferral().toString();	//wdev-20417

				record.setPathwayID(pathwayId.length() > 20 ? pathwayId.subSequence(0, 19).toString(): pathwayId);
			}
		}
	
		//WDEV-7471
		boolean isCreateOrder = true;
		
		if(ReferralApptStatus.REFERRAL_REJECTED.equals(record.getCurrentStatus().getReferralStatus())  && record.getRejectReferralDetail() != null && record.getRejectReferralDetail().getID_ReferralReject() == null)
		{
			EventLiteVo hardCodedEvent = getHardCodedEvent(HardCodedEvents.REFERRALREJECTED.getID());
			if (hardCodedEvent != null)
			{
				try
				{
					createAndInstantiatePatientEvent(record, hardCodedEvent);
				}
				catch (DomainInterfaceException exception)
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "'HL7PathwayIfImpl.instantiatePatientEvent()' threw a DomainInterfaceException" + exception.getMessage());
				}
			}
			
			
			if(Boolean.TRUE.equals(record.getRTTClockImpact()))
			{
    			PathwayRTTStatusVo finalRTTStatus = createRTTStatus(NATIONAL_CODE_FOR_REJECTED_REFERRL, new DateTime(record.getReferralDetails().getDateOfReferral(), new Time(0,0)));
    			
    			PatientJourneyVo journey = getPatientJourney(record);
    			PathwayClockVo finalClock = journey.getCurrentClock();
    			
    			if (finalClock != null)
    			{
    				if (finalClock.getRTTStatusHistory() == null)
    					finalClock.setRTTStatusHistory(new PathwayRTTStatusRefVoCollection());
    
    				finalClock.setCurrentRTTStatus(finalRTTStatus);
    				finalClock.getRTTStatusHistory().add(finalRTTStatus);
    				
    				if (finalClock.getStartDate() != null && finalClock.getStopDate() == null)
        			{
        				finalClock.setStopDate(new ims.framework.utils.Date());
        			}
    			}
    			
    			domCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record);
    			domCatsReferral.setCurrentRTTStatus(PathwayRTTStatusVoAssembler.extractPathwayRTTStatus(factory, finalRTTStatus));
    			
    			PatientPathwayJourney doPatientJourney = PatientJourneyVoAssembler.extractPatientPathwayJourney(factory, journey);
    			factory.save(doPatientJourney);
    			
    			factory.save(domCatsReferral);
			}
		}
		//WDEV-19508
		else if (!Boolean.TRUE.equals(record.getIsCAB()) && !Boolean.TRUE.equals(record.getIsEmergencyReferral())) //WDEV-20944 
		{
    		// Save PatientJourney for this referral
    		PatientPathwayJourney journey = createJourney(factory, record);
    		domCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record, hasMap);
    		domCatsReferral.setJourney(journey);
    		
    		isCreateOrder = domCatsReferral.getId() == null;
    		
    		PathwayRTTStatus rttStatus = null;
    		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && isNewCatsReferral && Boolean.TRUE.equals(record.getRTTClockImpact()))
    		{
    			// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
    			// When a referral is created, use Date of Referral for RTT Status
    			Date eventDateTime = domCatsReferral.getReferralDetails().getDateOfReferral();
				rttStatus = createPathwayRTTStatus(domCatsReferral, eventDateTime);
    			domCatsReferral.setCurrentRTTStatus(rttStatus);
    		}
    		
    		if(isJourneyCurrentClockOpen(domCatsReferral))//WDEV-20058
    			resetRTTStatus(domCatsReferral); //WDEV-20383
    		
    		factory.save(domCatsReferral);
    		
    		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && isNewCatsReferral && Boolean.TRUE.equals(record.getRTTClockImpact()))
    		{
    			// WDEV-20578 - The date of the event
    			if (record.getReferralDetailsIsNotNull() && record.getReferralDetails().getDateOfReferralIsNotNull())
    				createPatientEvent(record, domCatsReferral, rttStatus, new DateTime(record.getReferralDetails().getDateOfReferral()));
    			else
    				createPatientEvent(record, domCatsReferral, rttStatus);
    		}
		}
		/*WDEV-23223else if (!isNewCatsReferral && ReferralApptStatus.REFERRAL_ACCEPTED.equals(record.getCurrentStatus().getReferralStatus())&& Boolean.TRUE.equals(record.getIsCAB()) && isNonDiagnosticAppointment(record))
		{
			// Save PatientJourney for this referral on Accept
    		PatientPathwayJourney journey = createJourney(factory, record);
    		domCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record);
    		domCatsReferral.setJourney(journey);
    		
    		isCreateOrder = domCatsReferral.getId() == null;
    		
    		PathwayRTTStatus rttStatus = null;
    		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && Boolean.TRUE.equals(record.getRTTClockImpact()))
    		{
    			rttStatus = createPathwayRTTStatus(domCatsReferral);
    			domCatsReferral.setCurrentRTTStatus(rttStatus);
    		}
    		
    		if(isJourneyCurrentClockOpen(domCatsReferral))//WDEV-20058
    			resetRTTStatus(domCatsReferral); //WDEV-20383
    		
    		factory.save(domCatsReferral);
    		
    		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && Boolean.TRUE.equals(record.getRTTClockImpact()))
    		{
    			createPatientEvent(record, domCatsReferral, rttStatus);
    		}
		}WDEV-23223*/
		else
		{
			domCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, record);
			isCreateOrder = domCatsReferral.getId() == null;
			factory.save(domCatsReferral);
		}
	
		//WDEV-7471
		if(bDiagnosticReferral)
			pukkaJMessaging(domCatsReferral, isCreateOrder);
		
		// WDEV-18548
		try 
		{
			ReferralUrgency prevUrgency=null;
			if (prevReferralUrgency != null)
				prevUrgency = new ReferralUrgency(prevReferralUrgency.getId());
			
			//WDEV-19700
			CancerType prevCancerType=null;
			if (prevCancerTypeLookInst != null)
				prevCancerType = new CancerType(prevCancerTypeLookInst.getId());
			
			// If this is an insert the vo won't have the id
			if (!record.getID_CatsReferralIsNotNull())
				record.setID_CatsReferral(domCatsReferral.getId());
			check62dayTarget(record, prevUrgency, prevCancerType);//WDEV-19700
		}
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();  // This is already system logged
		}
		
		
		// Create the RTT Clock Impact record for creating a referral
		if (Boolean.TRUE.equals(domCatsReferral.isRTTClockImpact()) && domCatsReferral.getJourney() != null && isNewCatsReferral)
		{
			PathwayClock finalClock = domCatsReferral.getJourney().getCurrentClock();
			PathwayRTTStatus finalStatus = domCatsReferral.getJourney().getCurrentClock() != null ? domCatsReferral.getJourney().getCurrentClock().getCurrentRTTStatus() : null;
			PatientPathwayJourney journey = domCatsReferral.getJourney();
			
			PathwaysRTTClockImpact clockImpact = createRTTClockImpactRecord(null, finalClock, null, finalStatus, null, journey, RTTClockImpactSource.REFERRAL_CREATED);
			
			if (domCatsReferral.getRTTClockImpacts() == null)
				domCatsReferral.setRTTClockImpacts(new ArrayList());
			domCatsReferral.getRTTClockImpacts().add(clockImpact);
			
			getDomainFactory().save(domCatsReferral);
		}
		
		
		return CatsReferralWizardVoAssembler.create(domCatsReferral);
	}
	
	private PathwaysRTTClockImpact createRTTClockImpactRecord(PathwayClock initialClock, PathwayClock finalClock, PathwayRTTStatus initialStatus, PathwayRTTStatus finalStatus,
																RTTStatusEventMap event, PatientPathwayJourney journey, RTTClockImpactSource source)
	{
		PathwaysRTTClockImpact clockImpact = new PathwaysRTTClockImpact();

		clockImpact.setInitialClock(initialClock);
		clockImpact.setFinalClock(finalClock);
		clockImpact.setInitialRTTStatus(initialStatus);
		clockImpact.setFinalRTTStatus(finalStatus);

		clockImpact.setOutcomeEvent(null);
		clockImpact.setJourney(journey);
		clockImpact.setSource(getDomLookup(source));

		clockImpact.setInitialClockState(getDomLookup(RTTClockState.NOT_PRESENT));
		clockImpact.setFinalClockState(getClockState(finalClock));


		clockImpact.setClockStarted(Boolean.FALSE);
		clockImpact.setClockStopped(Boolean.FALSE);

		//  Case 1 - If there was not clock initially and one clock was created
		if (initialClock == null && finalClock != null)
		{
			// New clock has a start date - mark the Clock Impact
			if (finalClock.getStartDate() != null)
				clockImpact.setClockStarted(Boolean.TRUE);

			if (finalClock.getStopDate() != null)
				clockImpact.setClockStopped(Boolean.TRUE);
		}

		// Case 2 - If there was a clock initially and there is no clock now
		if (initialClock != null && finalClock == null)
		{
			clockImpact.setClockStopped(Boolean.TRUE);
		}

		// Case 3 - If there was an initial clock and a clock is present now
		if (initialClock != null && finalClock != null)
		{
			// Case 3.1 - Initial and current clock are the same one
			if (initialClock.getId() == finalClock.getId())
			{
				if (initialClock.getStopDate() == null && finalClock.getStopDate() != null)
					clockImpact.setClockStopped(Boolean.TRUE);

				if (initialClock.getStopDate() != null && finalClock.getStopDate() == null)
					clockImpact.setClockStarted(Boolean.TRUE);

				if (initialClock.getStartDate() == null && finalClock.getStartDate() != null)
					clockImpact.setClockStarted(Boolean.TRUE);
			}

			// Case 3.2 - Initial and current clock are not ehe same one
			if (initialClock.getId() != finalClock.getId())
			{
				if (initialClock.getStopDate() == null)
					clockImpact.setClockStopped(Boolean.TRUE);

				if (finalClock.getStartDate() != null)
					clockImpact.setClockStarted(Boolean.TRUE);

				if (finalClock.getStopDate() != null)
					clockImpact.setClockStopped(Boolean.TRUE);
			}

		}

		return clockImpact;
	}
	
	
	private LookupInstance getClockState(PathwayClock finalClock)
	{
		if (finalClock == null)
			return getDomLookup(RTTClockState.NOT_PRESENT);
		
		if (finalClock.getStopDate() != null)
			return getDomLookup(RTTClockState.STOPPED);

		return getDomLookup(RTTClockState.STARTED);
	}

	
	private PatientJourneyVo getPatientJourney(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral());
		
		return PatientJourneyVoAssembler.create(doCatsReferral.getJourney());
	}
	
	private PathwayRTTStatusVo createRTTStatus(Integer nationalCode, DateTime eventDateTime)
	{
		if (nationalCode == null)
			return null;
		
		PathwayRTTStatusVo rttStatus = new PathwayRTTStatusVo();
		rttStatus.setRTTStatus(getRTTStatusPoint(nationalCode));
		rttStatus.setStatusDateTime(eventDateTime);
		
		Object mos = getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			rttStatus.setStatusBy((MemberOfStaffRefVo) mos);
		}

		return rttStatus;
	}
	
	private RTTStatusPointLiteVo getRTTStatusPoint(Integer nationalCode)
	{
		if (nationalCode == null)
			return null;
		
		String query = "SELECT statusPoint FROM RTTStatusPoint AS statusPoint WHERE statusPoint.nationalCode = :NAT_CODE";
		
		return RTTStatusPointLiteVoAssembler.create((RTTStatusPoint) getDomainFactory().findFirst(query, "NAT_CODE", nationalCode));
	}
	
	private PatientEventVo createAndInstantiatePatientEvent(CatsReferralWizardVo record, EventLiteVo eventLiteVo) throws DomainInterfaceException, StaleObjectException
	{
		PatientEventVo patEvent = new PatientEventVo();
		patEvent.setPatient(new PatientRefVo(record.getPatient().getID_Patient(), record.getPatient().getVersion_Patient()));
		patEvent.setEvent(eventLiteVo);
		patEvent.setEventDateTime(new DateTime());
		patEvent.setEventStatus(EventStatus.ACTIVE);
		patEvent.setJourney(getPatientJourney(record));
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		return impl.instantiatePatientEvent(patEvent);
	}
	
	private EventLiteVo getHardCodedEvent(int event_Id)
	{
		StringBuilder hqlBuilder = new StringBuilder("select event from Event as event left join event.status as s where event.id = :eventID and s.id = :statusID ");
		
		List <?> list = getDomainFactory().find(hqlBuilder.toString(),new String[] {"eventID", "statusID"},new Object[] {event_Id, PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if (list == null || list.size() == 0)
			return null;
		
		return EventLiteVoAssembler.create((Event)list.get(0));
	}
	
	private ReferralUrgencyUpdatesVo createReferralUrgencyUpdateRecord(ReferralUrgency referralUrgency)
	{
		ReferralUrgencyUpdatesVo record = new ReferralUrgencyUpdatesVo();
		
		record.setUrgency(referralUrgency);
		record.setRecordingDateTime(new DateTime());
		
		Object user = getMosUser();
		
		if(user instanceof MemberOfStaffLiteVo)
		{
			record.setRecordingUser((MemberOfStaffLiteVo) user);
		}
		
		return record;
	}
	
	private boolean isJourneyCurrentClockOpen(CatsReferral domCatsReferral)//WDEV-20058
	{
		if(domCatsReferral== null)
			return false;
		
		return domCatsReferral.getJourney()!=null 
				&& domCatsReferral.getJourney().getCurrentClock()!= null
				&& domCatsReferral.getJourney().getCurrentClock().getStartDate()!= null
				&& domCatsReferral.getJourney().getCurrentClock().getStopDate() == null;
	}
	//WDEV-19700
	private String getPASTargetByCancerType(CancerType prevCancerType)
	{
		if (prevCancerType==null)
			return null;
		
		CancerTypeItemConfigVo cancerTypeItemConfig = getCancerTypeItemConfig(prevCancerType);
		
		if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay31Target()))
		{
			return "31D";
		}
		else if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay62Target()))
		{
			return "62D";
		}
	
		return null;
	}

	private void createPatientEvent(CatsReferralWizardVo record, CatsReferral domCatsReferral, PathwayRTTStatus rttStatus) throws DomainInterfaceException, StaleObjectException
	{
		createPatientEvent(record, domCatsReferral, rttStatus, new DateTime());		
	}
	
	//WDEV-19508
	private void createPatientEvent(CatsReferralWizardVo record, CatsReferral domCatsReferral, PathwayRTTStatus rttStatus, DateTime eventDateTime) throws DomainInterfaceException, StaleObjectException
	{
		RTTStatusEventMapVo rttMap = getRTTStatusEventMap(rttStatus.getRTTStatus());
		
		if(rttMap != null && rttMap.getEvent() != null)
		{
			PatientEventVo patEvent = new PatientEventVo();
			patEvent.setPatient(record.getPatient());
			patEvent.setEvent(rttMap.getEvent());
			patEvent.setEventDateTime(eventDateTime);
			patEvent.setEventStatus(EventStatus.ACTIVE);
			patEvent.setJourney(PatientJourneyVoAssembler.create(domCatsReferral.getJourney()));
			
			HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
			impl.instantiatePatientEvent(patEvent);
		}
	}

	//WDEV-19508
	private boolean isNonDiagnosticAppointment(CatsReferralWizardVo record)
	{
		if(record != null && record.getDOS() != null && record.getDOS().getContract() != null && record.getDOS().getContract().getContractType() != null)
		{
			if(ReferralManagementContractType.DIAGNOSTIC.getID() == record.getDOS().getContract().getContractType().getId())
				return false;
		}
		
		return true;
	}
	//WDEV-7441 - 1.
	public void pukkaJMessaging(CatsReferral doCatsReferral, Boolean isCreateOrder) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		if(isCreateOrder)			
		{
			BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
			Object[] orderInvAndOrder = impl.createOrder(doCatsReferral, null);
			if(orderInvAndOrder != null)
			{
				OcsOrderSession doOcsOrder = (OcsOrderSession) orderInvAndOrder[1];
				OrderInvestigation doOrderInv = (OrderInvestigation) orderInvAndOrder[0];
				Booking_Appointment doBookedAppt = getBookedAppointment(doCatsReferral);
				if(doBookedAppt != null)
				{
					OrderInvAppt ordInvAppt = new OrderInvAppt();
					ordInvAppt.setOrderInvestigation(doOrderInv);
					ordInvAppt.setAppointment(doBookedAppt);
					ordInvAppt.getOrderInvestigation().setAppointmentDate(doBookedAppt.getAppointmentDate());
					ordInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
					doCatsReferral.getOrderInvAppts().add(ordInvAppt);
				}				
				doCatsReferral.getInvestigationOrders().add(doOcsOrder);
				doCatsReferral.setHasInvestigations(true);
				factory.save(doCatsReferral);
				
				//send message to PukkaJ
				if(doBookedAppt != null)
				{
					OCSExternalEvents implE = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
					implE.generateNewOrderEvent(new Booking_AppointmentRefVo(doBookedAppt.getId(), doBookedAppt.getVersion()) , new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
				}
			}
		}
		else
		{
			//check if bookedAppt exists
			Booking_Appointment doBookedAppt = getBookedAppointment(doCatsReferral);
			//if there is no investigations for referral
			if(doCatsReferral.getInvestigationOrders().size() == 0)
			{
				BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
				//create one investigation
				Object[] orderInvAndOrder = impl.createOrder(doCatsReferral, null);
				
				if (orderInvAndOrder != null)
				{
					OrderInvestigation doOrderInv = (OrderInvestigation) orderInvAndOrder[0];
					OcsOrderSession doOcsOrder = (OcsOrderSession) orderInvAndOrder[1];

					if(doBookedAppt != null)
					{
						OrderInvAppt ordInvAppt = new OrderInvAppt();
						ordInvAppt.setOrderInvestigation(doOrderInv);
						ordInvAppt.setAppointment(doBookedAppt);
						ordInvAppt.getOrderInvestigation().setAppointmentDate(doBookedAppt.getAppointmentDate());
						ordInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
						doCatsReferral.getOrderInvAppts().add(ordInvAppt);
					}
					doCatsReferral.getInvestigationOrders().add(doOcsOrder);
					doCatsReferral.setHasInvestigations(true);
					getDomainFactory().save(doCatsReferral);

					//send message to PukkaJ
					if(doBookedAppt != null)
					{
						OCSExternalEvents implE = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
						implE.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doBookedAppt.getId(), doBookedAppt.getVersion()) , new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
					}
				}
				
			}
			//if we reach here there is an investigation and an appointment but they were never linked because maybe the sdslookup failed
			//ie. the webservice method in BookAppointment - processAppointmentForPukkaJ was never called - this code is specific to C&B appointments and a manual(maxims) order
			else if(doCatsReferral.getOrderInvAppts().size() == 0 && doBookedAppt != null && doBookedAppt.isIsCABBooking() != null && doBookedAppt.isIsCABBooking())
			{
				OrderInvestigation doOrderInv = null;
				if(doCatsReferral.getInvestigationOrders().size() > 0)
				{
					Iterator itO = doCatsReferral.getInvestigationOrders().iterator();
					if(itO.hasNext())
					{
						OcsOrderSession doOcsOrder = (OcsOrderSession) itO.next();
						Iterator itI = doOcsOrder.getInvestigations().iterator();
						if(itI.hasNext())
							doOrderInv  = (OrderInvestigation) itI.next();
					}
						
				}
					
				OrderInvAppt ordInvAppt = new OrderInvAppt();
				ordInvAppt.setOrderInvestigation(doOrderInv);
				ordInvAppt.setAppointment(doBookedAppt);
				ordInvAppt.getOrderInvestigation().setAppointmentDate(doBookedAppt.getAppointmentDate());
				ordInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
				doCatsReferral.getOrderInvAppts().add(ordInvAppt);
				
				getDomainFactory().save(doCatsReferral);
				
				//send message to PukkaJ
				OCSExternalEvents implE = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
				implE.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doBookedAppt.getId(), doBookedAppt.getVersion()) , new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
			}					
		}
	}

	private Booking_Appointment getBookedAppointment(CatsReferral doCatsReferral)
	{
		Booking_Appointment doBookedAppt = null;
		if(doCatsReferral.getAppointments().size() > 0)
		{
			Iterator it = doCatsReferral.getAppointments().iterator();
			while(it.hasNext())
			{
				Booking_Appointment doAppt = (Booking_Appointment) it.next();
				if(doAppt.getApptStatus() != null && doAppt.getApptStatus().equals( getDomLookup(Status_Reason.BOOKED)))
				{
					doBookedAppt = doAppt;
					break;	
				}
						
			}
		}
		return doBookedAppt;
	}

	public ServiceVo getServiceById(ServiceVo voService) 
	{
		Service impl = (Service) getDomainImpl(ServiceImpl.class);
		return impl.getServiceById(voService);
	}

	public GpShortVo getPatientsGp(Integer idPatient)
	{
//		DomainFactory factory = getDomainFactory();
		ims.core.patient.domain.objects.Patient pat=null;
//		IMSCriteria imsc=new IMSCriteria(Patient.class,factory);
//		imsc.equal("this.id", idPatient);
//		List patients=imsc.find();
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from Patient where "); 
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
	
		hql.append(andStr + "id = :patient");
			markers.add("patient");
		values.add(idPatient);
			

		List patients = factory.find(hql.toString(), markers,values);
		if (patients!=null && patients.size()>0)
		{
			pat=(ims.core.patient.domain.objects.Patient) patients.get(0);
			if (pat.getGp()!=null)
				return GpShortVoAssembler.create(pat.getGp());
			else
				return null;
		}
		return null;
	}


	public MemberOfStaffVo getMemberOfStaff(MemberOfStaffShortVo mos) 
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.getMemberOfStaff(mos);
	}

	//WDEV-14160
	public CareContextShortVo getCareContext(CareContextRefVo careContextRef) 
	{
		if(careContextRef == null || !careContextRef.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("Cannot get CareContextShortVo on null CareContext Id.");
		
		return CareContextShortVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext()));
	}

	public CancerTypeConfigVo getCancerTypeConfig()
	{
		CancerTypeConfig impl = (CancerTypeConfig)getDomainImpl(CancerTypeConfigImpl.class);
		return impl.getCancerTypeConfig();
	}

	public Boolean hasLocationDiagnosicContracts(LocationRefVo location)
	{
		ReferralStatusList impl = (ReferralStatusList)getDomainImpl(ReferralStatusListImpl.class);
		return impl.hasLocationDiagnosicContracts(location);
	}

	//wdev-20946
	public ims.framework.utils.Date getEndDateKPI(CatsReferralWizardVo catsReferral)
	{
		if( catsReferral == null )
			throw new CodingRuntimeException("catsReferall is null or id not provided for method getReferralDetail");
		
		DomainFactory factory = getDomainFactory();
		
		if(catsReferral.getReferralDetails() != null && SourceOfReferral.NATIONAL_SCREENING.equals(catsReferral.getReferralDetails().getReferrerType()))
			return null;
				
		ExclusionDatesVo voExDate = listExclusionDates();
		Integer daysToFirstAppointment = null;
		ims.framework.utils.Date firstOPKPI = null;
		if( ReferralUrgency.TWO_WEEK_WAIT.equals(catsReferral.getUrgency()))
		{
			if(catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getService() != null && Boolean.TRUE.equals(catsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = TWO_WEEK_WAIT_TO_1ST_APP;
			}
		}
		else if (catsReferral.getContractIsNotNull()) //WDEV-21228 DRE fix
		{
			ContractConfig doContractConfig = (ContractConfig) factory.getDomainObject(catsReferral.getContract());
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(catsReferral.getContract(), catsReferral.getReferralDetails().getService());
			
			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysTo1stApptIsNotNull())
			{
				daysToFirstAppointment = contrServiceLocationConf.getDaysTo1stAppt();
			}
			else if (doContractConfig != null && catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getService() != null && Boolean.TRUE.equals(catsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = doContractConfig.getDaysTo1stAppt();
			}
		}
		
		if (daysToFirstAppointment != null)
		{
			if(catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getDateOfReferral() != null)
			{
				firstOPKPI = ExclusionDatesVo.addBusinessDays(catsReferral.getReferralDetails().getDateOfReferral(), daysToFirstAppointment, voExDate != null ? voExDate.getDates() : null, true);
			}
		}
		
		return firstOPKPI;
	}
	private ims.scheduling.vo.ExclusionDatesVo listExclusionDates()
	{
		ExclusionDates impl = (ExclusionDates) getDomainImpl(ExclusionDatesImpl.class);
		return impl.listExclusionDates();
	}
	private ContractServiceLocationsConfigVo getContractServiceLocConf(ContractConfigRefVo contract, ServiceRefVo service)
	{
		ContractConfiguration impl = (ContractConfiguration) getDomainImpl(ContractConfigurationImpl.class);
		return impl.getContractServiceLocConfByContractService(contract,service);
	}
}
