//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3618.29606)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.RefMan.domain.base.impl.BaseCATSReportComponentImpl;
import ims.RefMan.domain.objects.CatsReportNote;
import ims.RefMan.vo.CatsReportNoteVoCollection;
import ims.RefMan.vo.domain.CatsReportNoteVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

public class CATSReportComponentImpl extends BaseCATSReportComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getCatsReportNote
	*/
	public ims.RefMan.vo.CatsReportNoteVo getCatsReportNote(ims.RefMan.vo.CatsReferralRefVo catsRefVo)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from CatsReportNote crn"); 
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
	
		hql.append(" where crn.catsReferral.id = :catsId ");
		
		markers.add("catsId");
		values.add(catsRefVo.getID_CatsReferral());
		
		List listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			CatsReportNoteVoCollection voColl = CatsReportNoteVoAssembler.createCatsReportNoteVoCollectionFromCatsReportNote(listNotes);
			if(voColl != null && voColl.size() > 0) 
			{
				voColl.sort(SortOrder.DESCENDING);
				return voColl.get(0);
			}
		}
		return null;
	}

	/**
	* saveCatsReportNote
	*/
	public ims.RefMan.vo.CatsReportNoteVo saveCatsReportNote(ims.RefMan.vo.CatsReportNoteVo note) throws ims.domain.exceptions.StaleObjectException
	{
		if(note == null)
			throw new CodingRuntimeException("CatsReportNoteVo is null");
		if(!note.isValidated())
			throw new CodingRuntimeException("CatsReportNoteVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		CatsReportNote doCatsReportNote = CatsReportNoteVoAssembler.extractCatsReportNote(factory, note);
		factory.save(doCatsReportNote);
		
		return CatsReportNoteVoAssembler.create(doCatsReportNote);
	}
}
