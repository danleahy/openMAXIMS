//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.HashMap;
import java.util.List;

import ims.RefMan.domain.SuspensionDetails;
import ims.RefMan.domain.base.impl.BaseSuspensionDetailsImpl;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.SuspensionDetailsForPatientElectiveList;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.domain.PatientElectiveListForSuspensionDetailsVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListVoAssembler;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.generic.domain.objects.CommunicationChannel;
import ims.core.vo.domain.CommChannelVoAssembler;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.QueueType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.hl7adtout.domain.objects.ElectiveListMessageQueue;
import ims.ocrr.vo.lookups.OrderMessageStatus;

public class SuspensionDetailsImpl extends BaseSuspensionDetailsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.PatientElectiveListForSuspensionDetailsVo getPatientElectiveList(ims.RefMan.vo.PatientElectiveListRefVo patientElectiveList)
	{
		if(patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		PatientElectiveList doPatientElectiveList = (PatientElectiveList) factory.getDomainObject(PatientElectiveList.class, patientElectiveList.getID_PatientElectiveList());
		return PatientElectiveListForSuspensionDetailsVoAssembler.create(doPatientElectiveList);
	}

	public ims.RefMan.vo.PatientElectiveListForSuspensionDetailsVo savePatientElectiveList(ims.RefMan.vo.PatientElectiveListForSuspensionDetailsVo patientElectiveList) throws ims.domain.exceptions.StaleObjectException
	{
		if(patientElectiveList == null)
			throw new CodingRuntimeException("Cannot save a null PatientElectiveList.");
		
		if(!patientElectiveList.isValidated())
			throw new CodingRuntimeException("PatientElectiveList is not validated.");
		
		DomainFactory factory = getDomainFactory();	
		HashMap doMap=new HashMap();//WDEV-18308

		PatientElectiveList doPatientElectiveList = PatientElectiveListForSuspensionDetailsVoAssembler.extractPatientElectiveList(factory, patientElectiveList,doMap);//WDEV-18308
		
		//WDEV-19704 Trigger A08 HL7 message generation
		if(doPatientElectiveList.getSuspensions() != null)
		{
			PatientElectiveListVo patientElectList = PatientElectiveListVoAssembler.create(doPatientElectiveList);
			triggerElectiveListEvent(patientElectList);
		}

		factory.save(doPatientElectiveList);
		
		
		return PatientElectiveListForSuspensionDetailsVoAssembler.create(doPatientElectiveList);
	}

	
	//WDEV-19704 Create message queue trigger record(s) for each provider system for A08 HL7 message 
	public void triggerElectiveListEvent(PatientElectiveListVo patientElectList)  throws StaleObjectException
	{
		if(patientElectList != null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.ELECTIVELIST.getId()+")";
				java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				ElectiveListMessageQueue messageQueue = new ElectiveListMessageQueue();
				messageQueue.setPatientElectiveList((PatientElectiveList)factory.getDomainObject(patientElectList));
				messageQueue.setProviderSystem(providerSystem);
				messageQueue.setWasProcessed(Boolean.FALSE);
				messageQueue.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				messageQueue.setMsgType(getDomLookup(MsgEventType.A08));
				messageQueue.setQueueType(getDomLookup(QueueType.ELECTIVELIST));
				factory.save(messageQueue);
			}
		}
	}
		
}
