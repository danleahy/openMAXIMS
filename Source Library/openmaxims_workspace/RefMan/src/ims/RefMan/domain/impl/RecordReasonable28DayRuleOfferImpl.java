//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseRecordReasonable28DayRuleOfferImpl;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.vo.TCIForPatientElectiveListDetailsVo;
import ims.RefMan.vo.TCIForPatientElectiveListRefVo;
import ims.RefMan.vo.domain.TCIForPatientElectiveListDetailsVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class RecordReasonable28DayRuleOfferImpl extends BaseRecordReasonable28DayRuleOfferImpl
{
	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.TCIForPatientElectiveListDetailsVo save(ims.RefMan.vo.TCIForPatientElectiveListDetailsVo tci) throws ims.domain.exceptions.StaleObjectException
	{
		if(tci == null)
			throw new CodingRuntimeException("Cannot save a null TCIForPatientElectiveListDetailsVo");
		
		if(!tci.isValidated())
			throw new CodingRuntimeException("TCIForPatientElectiveListDetailsVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		TCIForPatientElectiveList doTci = TCIForPatientElectiveListDetailsVoAssembler.extractTCIForPatientElectiveList(factory, tci);
		factory.save(doTci);
		
		return TCIForPatientElectiveListDetailsVoAssembler.create(doTci);
	}

	public TCIForPatientElectiveListDetailsVo get(TCIForPatientElectiveListRefVo tci)
	{
		if(tci == null || tci.getID_TCIForPatientElectiveList() == null)
			return null;
		
		return TCIForPatientElectiveListDetailsVoAssembler.create((TCIForPatientElectiveList) getDomainFactory().getDomainObject(TCIForPatientElectiveList.class, tci.getID_TCIForPatientElectiveList()));
	}
}
