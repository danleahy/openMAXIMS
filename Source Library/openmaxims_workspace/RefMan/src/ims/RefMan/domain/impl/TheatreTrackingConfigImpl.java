//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4084.19189)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseTheatreTrackingConfigImpl;
import ims.RefMan.domain.objects.TrackStatusConfig;
import ims.RefMan.vo.TrackingStatusConfigVo;
import ims.RefMan.vo.domain.TrackingStatusConfigVoAssembler;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;

public class TheatreTrackingConfigImpl extends BaseTheatreTrackingConfigImpl
{

	private static final long serialVersionUID = 1L;

	public TrackingStatusConfigVo getTrackingStatus()
	{
		String query = "select settings from TrackStatusConfig as settings";

		return TrackingStatusConfigVoAssembler.create((TrackStatusConfig) getDomainFactory().findFirst(query));
	}

	public TrackingStatusConfigVo saveTrackingStatus(TrackingStatusConfigVo trackingStatus) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (trackingStatus == null)
			throw new DomainRuntimeException("Can not save a null record");
		
		if (!trackingStatus.isValidated())
			throw new DomainRuntimeException("Can not save a non validated record");
		
		
		// Check for previous settings
		if (!trackingStatus.getID_TrackStatusConfigIsNotNull() && getTrackingStatus() != null)
			throw new StaleObjectException(null);
		
		// Build domain object & save it
		TrackStatusConfig domSettings = TrackingStatusConfigVoAssembler.extractTrackStatusConfig(getDomainFactory(), trackingStatus);
		getDomainFactory().save(domSettings);
		
		// Returned saved VO
		return TrackingStatusConfigVoAssembler.create(domSettings);
	}
}
