//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5308.16958)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.vo.Icd10AmProcVo;
import ims.admin.vo.Opcs4Vo;
import ims.admin.vo.domain.Icd10AmProcVoAssembler;
import ims.admin.vo.domain.Opcs4VoAssembler;
import ims.RefMan.domain.MedicodeConfig;
import ims.RefMan.domain.base.impl.BaseReferralExternalCodingImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ReferralCoding;
import ims.RefMan.vo.AdmissionDetailForCodingListVo;
import ims.RefMan.vo.AdmissionDetailForCodingListVoCollection;
import ims.RefMan.vo.AdmissionDetailWithConsultantStaysForCodingVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ConsultantStayForPatientCodingListVo;
import ims.RefMan.vo.ConsultantStayForPatientCodingListVoCollection;
import ims.RefMan.vo.DischargedEpisodeForReferralExternalCodingVo;
import ims.RefMan.vo.PatientDiagnosisForReferralCodingVoCollection;
import ims.RefMan.vo.PatientProcedureForReferralCodingVoCollection;
import ims.RefMan.vo.ReferralExternalCodingListVoCollection;
import ims.RefMan.vo.ReferralExternalCodingVo;
import ims.RefMan.vo.domain.AdmissionDetailForCodingListVoAssembler;
import ims.RefMan.vo.domain.AdmissionDetailWithConsultantStaysForCodingVoAssembler;
import ims.RefMan.vo.domain.ConsultantStayForPatientCodingListVoAssembler;
import ims.RefMan.vo.domain.DischargedEpisodeForReferralExternalCodingVoAssembler;
import ims.RefMan.vo.domain.PatientDiagnosisForReferralCodingVoAssembler;
import ims.RefMan.vo.domain.PatientProcedureForReferralCodingVoAssembler;
import ims.RefMan.vo.domain.ReferralExternalCodingListVoAssembler;
import ims.RefMan.vo.domain.ReferralExternalCodingVoAssembler;
import ims.clinical.vo.CodingCommentVo;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.HrgConfig;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.ConsultantStay;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.vo.AdmissionDetailRefVo;
import ims.core.admin.pas.vo.AdmissionDetailRefVoCollection;
import ims.core.admin.pas.vo.ConsultantStayRefVo;
import ims.core.admin.pas.vo.DischargedEpisodeRefVo;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.coding.domain.objects.Icd10AmProc;
import ims.core.clinical.coding.domain.objects.Opcs4;
import ims.core.vo.ExternalCodingConfigVo;
import ims.core.vo.HrgConfigLiteVo;
import ims.core.vo.domain.HrgConfigLiteVoAssembler;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.vo.LookupInstanceCollection;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class ReferralExternalCodingImpl extends BaseReferralExternalCodingImpl
{
	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.AdmissionDetailWithConsultantStaysForCodingVo getAdmissionDetailWithFCEs(AdmissionDetailForCodingListVo admissionVo, LookupInstanceCollection codingStatuses)
	{
		if(admissionVo == null || admissionVo.getID_AdmissionDetail() == null)
			return null;
		
		StringBuilder hql = new StringBuilder();
		
		if (admissionVo.getDischargeDateTimeIsNotNull())
		{
			hql.append("select admissionDet, cStay, disch from DischargedEpisode as disch left join disch.admissionDetail as admissionDet left join disch.consultantStays as cStay ");
		}
		else
		{
			hql.append ("select admissionDet, cStay, inp from AdmissionDetail as admissionDet left join admissionDet.pasEvent as pasEvent, InpatientEpisode as inp left join inp.consultantStays as cStay left join inp.pasEvent as iPasEvent ");
		}

		String andStr = "";
		if (admissionVo != null)
		{	
			hql.append(andStr).append("where admissionDet.id = :ADMISSIONDETAILS_ID ");

			andStr = " and ";
			
			if (admissionVo.getDischargeDateTime() == null)
			{
				hql.append(andStr).append(" pasEvent.id = iPasEvent.id ");
				andStr = " and ";
			}
		}	
		
		if (codingStatuses != null && codingStatuses.size() > 0)
		{
			hql.append(andStr);
			hql.append(" (");
			hql.append("cStay.codingStatus.id in (" + getCodingStatusesIds(codingStatuses) + ")" );
			
			if(searchAfterUncoded(codingStatuses))
			{
				hql.append(" or cStay.codingStatus is null ");
			}
			hql.append(") "); 
			
			andStr = " and ";
		}
		
		hql.append(" order by cStay.transferDateTime asc "); //WDEV-22422
		
		DomainFactory factory = getDomainFactory();

		List<?> list = factory.find(hql.toString(), new String[]{"ADMISSIONDETAILS_ID"}, new Object[]{admissionVo.getID_AdmissionDetail()});
		
		if (list == null || list.isEmpty())
			return null;
		
		Iterator it = list.iterator();
		
		AdmissionDetailWithConsultantStaysForCodingVo voAdm = new AdmissionDetailWithConsultantStaysForCodingVo();
		ConsultantStayForPatientCodingListVoCollection coll = new ConsultantStayForPatientCodingListVoCollection();
		
		while(it.hasNext())
		{
    		Object[] itemInList = (Object[]) it.next();
    		
    		if (itemInList[0] instanceof AdmissionDetail)
    			voAdm = AdmissionDetailWithConsultantStaysForCodingVoAssembler.create((AdmissionDetail) itemInList[0]);
    		
    		ConsultantStayForPatientCodingListVo cStayVo = new ConsultantStayForPatientCodingListVo();
    			
    		if (itemInList[1] instanceof ConsultantStay)
    		{
    			cStayVo = ConsultantStayForPatientCodingListVoAssembler.create((ConsultantStay) itemInList[1]);
    			coll.add(cStayVo);		
    		}
    		
    		if(itemInList.length > 2)
    		{
        		if (itemInList[2] instanceof DischargedEpisode)
        		{
        			DischargedEpisodeForReferralExternalCodingVo dischargeEpisode = DischargedEpisodeForReferralExternalCodingVoAssembler.create((DischargedEpisode) itemInList[2]);
        			voAdm.setDischargeEpisode(dischargeEpisode);
        		}
        		else if(itemInList[2] instanceof InpatientEpisode)
        		{
        			voAdm.setInpatientEpisode(new InpatientEpisodeRefVo(((InpatientEpisode)itemInList[2]).getId(), ((InpatientEpisode)itemInList[2]).getVersion()));
        		}
    		}
		}

		voAdm.setConsultantStays(coll);
		
		return voAdm;
	}
	
	private boolean searchAfterUncoded(LookupInstanceCollection codingStatuses)
	{
		if(codingStatuses == null)
			return false;
		
		for(int i=0; i<codingStatuses.size(); i++)
		{
			if(codingStatuses.getIndex(i) == null)
				continue;
			
			if(CodingStatus.UNCODED.getID() == codingStatuses.getIndex(i).getID())
				return true;
		}
		
		return false;
	}

	private String getCodingStatusesIds(LookupInstanceCollection codingStatuses)
	{
		String commaStr = "";
		StringBuilder iDS = new StringBuilder();
		for (int i=0;i<codingStatuses.size();i++)
		{
			iDS.append(commaStr).append(codingStatuses.getIndex(i).getID());
			commaStr = ", ";
		}
		if (iDS.length() == 0)
			return null;

		return iDS.toString();
	}

	public AdmissionDetailForCodingListVoCollection listAdmissions(AdmissionDetailRefVoCollection admissionRefColl)
	{
		if (admissionRefColl == null)
			throw new CodingRuntimeException(" AdmissionDetailRefVoCollection argument cannot be null");
		StringBuilder hql = new StringBuilder();
		
		hql.append("select admissionDet, dischargedEpis.dischargeDateTime from DischargedEpisode as dischargedEpis right join dischargedEpis.admissionDetail as admissionDet where admissionDet.id in ( "  +  getAdmissionList(admissionRefColl) + ") ORDER BY admissionDet.admissionDateTime ASC"); //WDEV-23023
		DomainFactory factory = getDomainFactory();
		
		List<?> results = factory.find(hql.toString());
		
		
		if (results == null || results.isEmpty())
			return null;
		Iterator it = results.iterator();
		AdmissionDetailForCodingListVoCollection coll = new AdmissionDetailForCodingListVoCollection();
		
		while (it.hasNext())
		{
			Object[] itemInList = (Object[]) it.next();
			AdmissionDetailForCodingListVo adm = new AdmissionDetailForCodingListVo();
			
			if (itemInList[0] instanceof AdmissionDetail)
				adm = AdmissionDetailForCodingListVoAssembler.create((AdmissionDetail) itemInList[0]);
			if (itemInList[1] instanceof java.util.Date)
				adm.setDischargeDateTime(new DateTime((java.util.Date) itemInList[1]));
			
			coll.add(adm);
		}
		
		return coll;
	}

	private String getAdmissionList(AdmissionDetailRefVoCollection admissionRefColl)
	{
		if (admissionRefColl == null)
			return null;
		String str = "";
		StringBuilder idList = new StringBuilder();
		
		for (int i=0; i<admissionRefColl.size();i++)
		{
			idList.append(str).append(admissionRefColl.get(i).getID_AdmissionDetail());
			str = ",";
		}
		return idList.toString();		
	}

	public ReferralExternalCodingVo getReferralCoding(ConsultantStayRefVo fce)
	{
		if(fce == null || fce.getID_ConsultantStay() == null)
			return null;
		
		String query = "select rc from ReferralCoding as rc where rc.fCE.id = :ConsultantStay";
		
		List<?> coll = getDomainFactory().find(query, new String[] {"ConsultantStay"}, new Object[] {fce.getID_ConsultantStay()});
		
		if(coll == null || coll.size() == 0)
			return null;
		
		return ReferralExternalCodingVoAssembler.create((ReferralCoding) coll.get(0));
	}

	public ReferralExternalCodingVo saveReferralCoding(ReferralExternalCodingVo referralExternalCoding, AdmissionDetailRefVo admission, DischargedEpisodeRefVo dischargedEpisode, InpatientEpisodeRefVo inpatientEpisode) throws StaleObjectException
	{
		if(referralExternalCoding == null)
			throw new CodingRuntimeException("Cannot save a null ReferralExternalCodingVo.");
		
		if(!referralExternalCoding.isValidated())
			throw new CodingRuntimeException("ReferralExternalCodingVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		ReferralCoding doReferralCoding = ReferralExternalCodingVoAssembler.extractReferralCoding(factory, referralExternalCoding);
		
		factory.save(doReferralCoding);
		
		Set listCs = null;
		if(dischargedEpisode != null && dischargedEpisode.getID_DischargedEpisode() != null)
		{
			DischargedEpisode doDischarged = (DischargedEpisode) factory.getDomainObject(DischargedEpisode.class, dischargedEpisode.getID_DischargedEpisode());
			listCs = doDischarged.getConsultantStays();
		}
		else if(inpatientEpisode != null && inpatientEpisode.getID_InpatientEpisode() != null)
		{
			InpatientEpisode doInpatient = (InpatientEpisode) factory.getDomainObject(InpatientEpisode.class, inpatientEpisode.getID_InpatientEpisode());
			listCs = doInpatient.getConsultantStays();
		}
		
		if(listCs != null)
		{
			int iuncoded = 0;
			int icoded = 0;
			int iinprogress = 0;
			CodingStatus cStatus = null;
			
			//WDEV-22442
			Iterator it = listCs.iterator();
			while(it.hasNext())
			{
				Object item = it.next();
				
				if(!(item instanceof ConsultantStay))
					continue;
				
				ConsultantStay cs = (ConsultantStay) item;
				
				if (cs.getCodingStatus()==null)
				{
					iuncoded++;
				}
				else if(CodingStatus.FORREVIEW.getID() == cs.getCodingStatus().getId())
				{
					cStatus = CodingStatus.FORREVIEW;
					break;
				}
				else if(CodingStatus.CODED.getID() == cs.getCodingStatus().getId())
				{
					icoded++;
				}else if(CodingStatus.UNCODED.getID() == cs.getCodingStatus().getId())
				{
					iuncoded++;
				}
				else if(CodingStatus.INPROGRESS.getID() == cs.getCodingStatus().getId())
				{
					iinprogress++;
				}

			}
			
			if(cStatus == null)
			{
    			if(icoded == listCs.size())
    			{
    				cStatus = CodingStatus.CODED;
    			}
    			else if(icoded > 0)
    			{
    				cStatus = CodingStatus.INPROGRESS;
    			}
    			else if(iinprogress>0)
    			{
    				cStatus = CodingStatus.INPROGRESS;
    			}
    			else if(iuncoded > 0)
    			{
    				cStatus = CodingStatus.UNCODED;
    			}
			}
			
			if(admission != null && admission.getID_AdmissionDetail() != null)
			{
				AdmissionDetail doAdmission = (AdmissionDetail) factory.getDomainObject(AdmissionDetail.class, admission.getID_AdmissionDetail());
				
				doAdmission.setCodingStatus(getDomLookup(cStatus));
				factory.save(doAdmission);
			}
			//WDEV-22442
		}
		
		return ReferralExternalCodingVoAssembler.create(doReferralCoding);
	}

	public ExternalCodingConfigVo getExternalCodingConfig()
	{
		MedicodeConfig impl = (MedicodeConfig) getDomainImpl(MedicodeConfigImpl.class);
		
		return impl.getExternalCodingConfig();
	}

	public PatientProcedureForReferralCodingVoCollection listProcedure(EpisodeOfCareRefVo episodeOfCare)
	{
		if(episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();

		String hql = "select patproc from PatientProcedure as patproc left join patproc.episodeOfCare as ep where ep.id = :EpisodeOfCareId and patproc.procedureStatus = :performed order by patproc.procDate desc";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		markers.add("EpisodeOfCareId");
		values.add(episodeOfCare.getID_EpisodeOfCare());
		markers.add("performed");
		values.add(getDomLookup(PatientProcedureStatus.PERFORMED));

		return PatientProcedureForReferralCodingVoAssembler.createPatientProcedureForReferralCodingVoCollectionFromPatientProcedure(factory.find(hql, markers, values));
	}

	public PatientDiagnosisForReferralCodingVoCollection listDiagnosis(EpisodeOfCareRefVo episodeOfCare)
	{
		if(episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();

		String hql = "select patdiag from PatientDiagnosis as patdiag left join patdiag.episodeOfCare as ep where ep.id = :EpisodeOfCareId order by patdiag.diagnosedDate desc ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		markers.add("EpisodeOfCareId");
		values.add(episodeOfCare.getID_EpisodeOfCare());

		return PatientDiagnosisForReferralCodingVoAssembler.createPatientDiagnosisForReferralCodingVoCollectionFromPatientDiagnosis(factory.find(hql, markers, values));
	}

	public CatsReferralRefVo getCatsReferral(PASEventRefVo pasEvent)
	{
		if(pasEvent == null || pasEvent.getID_PASEvent() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		EpisodeOfCare ep = null;
		
		String query = "select ep from CareContext as cc left join cc.episodeOfCare as ep left join cc.pasEvent as pe where pe.id = :PasEventId";
		List listEpisodeOfCare = factory.find(query, new String[] {"PasEventId"}, new Object[] {pasEvent.getID_PASEvent()});
		
		if(listEpisodeOfCare != null && listEpisodeOfCare.size() > 0 && listEpisodeOfCare.get(0) instanceof EpisodeOfCare)
		{
			ep = (EpisodeOfCare) listEpisodeOfCare.get(0);
		}
		
		if(ep != null)
		{
    		String querySec = "select catsReferral from CatsReferral as catsReferral left join catsReferral.careContext as cc left join cc.episodeOfCare as epCare where epCare.id = :EpisodeOfCareId";
    		
    		List listCatsReferral = factory.find(querySec, new String[] {"EpisodeOfCareId"}, new Object[] {ep.getId()});
    		
    		if(listCatsReferral != null && listCatsReferral.size() > 0 && listCatsReferral.get(0) instanceof CatsReferral)
    		{
    			return new CatsReferralRefVo(((CatsReferral) listCatsReferral.get(0)).getId(), ((CatsReferral) listCatsReferral.get(0)).getVersion());
    		}
		}
		
		return null;
	}

	public EpisodeOfCareRefVo getEpisodeOfCare(PASEventRefVo pasEvent)
	{
		if(pasEvent == null || pasEvent.getID_PASEvent() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		EpisodeOfCare ep = null;
		
		String query = "select ep from CareContext as cc left join cc.episodeOfCare as ep left join cc.pasEvent as pe where pe.id = :PasEventId";
		List listEpisodeOfCare = factory.find(query, new String[] {"PasEventId"}, new Object[] {pasEvent.getID_PASEvent()});
		
		if(listEpisodeOfCare != null && listEpisodeOfCare.size() > 0 && listEpisodeOfCare.get(0) instanceof EpisodeOfCare)
		{
			ep = (EpisodeOfCare) listEpisodeOfCare.get(0);
		}
		
		if(ep != null)
		{
			return new EpisodeOfCareRefVo(ep.getId(), ep.getVersion());
		}
		
		return null;
	}

	public ReferralExternalCodingListVoCollection listReferralExternalCoding(String fceIds)
	{
		if(fceIds == null || fceIds.length() == 0)
			return null;
		
		String query = "select rc from ReferralCoding as rc left join rc.fCE as cs where cs.id in (" + fceIds + ")";
		DomainFactory factory = getDomainFactory();
		
		List listRc = factory.find(query);
		
		return ReferralExternalCodingListVoAssembler.createReferralExternalCodingListVoCollectionFromReferralCoding(listRc);
	}

	public Icd10AmProcVo getICD10(String code)
	{
		if(code == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String hqlList	= "select icd from Icd10AmProc icd where icd.code_id = :Code";

		List codesList = factory.find(hqlList, new String[] {"Code"}, new Object[] {code});
		
		if(codesList == null || codesList.size() == 0)
			return null;
			
		return Icd10AmProcVoAssembler.create((Icd10AmProc) codesList.get(0));
	}

	public Opcs4Vo getOPCS4(String code)
	{
		if(code == null)
			return null;
			
		DomainFactory factory = getDomainFactory();
		String hqlList	= "select opcs4 from Opcs4 opcs4 where opcs4.opcode = :Code";
		List codesList = factory.find(hqlList, new String[] {"Code"}, new Object[] {code});
		
		if(codesList == null || codesList.size() == 0)
			return null;
		
		return Opcs4VoAssembler.create((Opcs4) codesList.get(0));
	}

	public HrgConfigLiteVo getHRG(String code)
	{
		if(code == null)
			return null;
			
		DomainFactory factory = getDomainFactory();
		String hqlList	= "select hrg from HrgConfig as hrg where hrg.hRGCode = :Code";
		List codesList = factory.find(hqlList, new String[] {"Code"}, new Object[] {code});
		
		if(codesList == null || codesList.size() == 0)
			return null;
		
		return HrgConfigLiteVoAssembler.create((HrgConfig) codesList.get(0));
	}

	
	public CodingCommentVo saveComment(CodingCommentVo comment, AdmissionDetailRefVo admissionDetails) throws StaleObjectException
	{
		ims.RefMan.domain.CodingComment impl = (ims.RefMan.domain.CodingComment) getDomainImpl(CodingCommentImpl.class);
		return impl.saveComment(comment, admissionDetails);
	}
}
