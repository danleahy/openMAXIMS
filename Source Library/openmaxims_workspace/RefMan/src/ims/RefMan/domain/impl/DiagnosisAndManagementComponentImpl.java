//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.70 build 3547.20232)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.RefMan.domain.base.impl.BaseDiagnosisAndManagementComponentImpl;
import ims.RefMan.domain.objects.DiagnosisManagement;
import ims.RefMan.vo.DiagnosisManagementRefVo;
import ims.RefMan.vo.DiagnosisManagementVoCollection;
import ims.RefMan.vo.domain.DiagnosisManagementVoAssembler;
import ims.clinical.domain.DiagnosisComplications;
import ims.clinical.domain.Procedures;
import ims.clinical.domain.impl.DiagnosisComplicationsImpl;
import ims.clinical.domain.impl.PlannedProcedureImpl;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientDiagnosisShortVo;
import ims.core.vo.PatientDiagnosisShortVoCollection;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.domain.PatientDiagnosisShortVoAssembler;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.domain.DomainFactory;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

public class DiagnosisAndManagementComponentImpl extends BaseDiagnosisAndManagementComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.DiagnosisManagementVo getDiagnosisManagementVo(ims.RefMan.vo.CatsReferralRefVo refVoCatsReferral)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from DiagnosisManagement dm"); 
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
	
		hql.append(" where dm.catsReferral.id = :dmId");
		
		markers.add("dmId");
		values.add(refVoCatsReferral.getID_CatsReferral());
		
		List listNotes = factory.find(hql.toString(), markers,values);
		if(listNotes != null && listNotes.size() > 0)
		{ 
			DiagnosisManagementVoCollection voColl = DiagnosisManagementVoAssembler.createDiagnosisManagementVoCollectionFromDiagnosisManagement(listNotes);
			if(voColl != null && voColl.size() > 0) 
			{
				voColl.sort(SortOrder.DESCENDING);
				return voColl.get(0);
			}			
		}
		return null;
	}

	public ims.RefMan.vo.DiagnosisManagementVo getDiagnosis(DiagnosisManagementRefVo diagnosis)
	{
		if (diagnosis == null)
			throw new RuntimeException("Cannot get DiagnosisManagementVo for null DiagnosisManagementRefVo");

		DiagnosisManagement doDiagnosisManagement = (DiagnosisManagement) getDomainFactory().getDomainObject(DiagnosisManagement.class, diagnosis.getID_DiagnosisManagement());
		return DiagnosisManagementVoAssembler.create(doDiagnosisManagement);		
	}
	
	public PatientDiagnosisShortVo getPatientDiagnosisShort(Integer diagnosisID)
	{
		if (diagnosisID == null)
			throw new RuntimeException("Cannot get DiagnosisManagementVo for null DiagnosisManagementRefVo");

		PatientDiagnosis doPatientDiagnosis = (PatientDiagnosis) getDomainFactory().getDomainObject(PatientDiagnosis.class, diagnosisID);
		return PatientDiagnosisShortVoAssembler.create(doPatientDiagnosis);		
	}
	
	public ims.RefMan.vo.DiagnosisManagementVo saveDiagnosisManagementVo(ims.RefMan.vo.DiagnosisManagementVo voDiagnosisManagement) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if(voDiagnosisManagement == null)
			throw new CodingRuntimeException("ConsultationClinicalNotesVo is null");
		if(!voDiagnosisManagement.isValidated())
			throw new CodingRuntimeException("ConsultationClinicalNotesVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		DiagnosisManagement doDiagnosisManagement = DiagnosisManagementVoAssembler.extractDiagnosisManagement(factory, voDiagnosisManagement);
		factory.save(doDiagnosisManagement);
		
		return DiagnosisManagementVoAssembler.create(doDiagnosisManagement);
	}

	public PatientProcedureShortVoCollection listProcedures(PatientRefVo patient, PatientProcedureStatus status) {
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureByPatientAndStatus(patient, status);		
	}

	public PatientDiagnosisShortVoCollection listDiagnosis(PatientRefVo patient) {
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listPatientDiagnoses(patient);	
	}
}
