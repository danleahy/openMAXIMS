//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Silviu Checherita using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BasePatientCodingListImpl;
import ims.RefMan.vo.AdmissionDetailForPatientCodingListVo;
import ims.RefMan.vo.AdmissionDetailsWithConsultantAndWardStayVo;
import ims.RefMan.vo.BookingAppointmentForPatientCodingListVoCollection;
import ims.RefMan.vo.DischargeEpiosdeForPatientCodingListVo;
import ims.RefMan.vo.DischargeEpiosdeForPatientCodingListVoCollection;
import ims.RefMan.vo.DischargeEpisodeForPatientCodingListShortVo;
import ims.RefMan.vo.DischargeEpisodeWithAppointmentVo;
import ims.RefMan.vo.DischargeEpisodeWithAppointmentVoCollection;
import ims.RefMan.vo.InpatientEpisodeForPatientCodingListShortVo;
import ims.RefMan.vo.SearchCriteriaForPatientCodingListVo;
import ims.RefMan.vo.domain.AdmissionDetailForPatientCodingListVoAssembler;
import ims.RefMan.vo.domain.BookingAppointmentForPatientCodingListVoAssembler;
import ims.RefMan.vo.domain.DischargeEpiosdeForPatientCodingListVoAssembler;
import ims.RefMan.vo.domain.DischargeEpisodeForPatientCodingListShortVoAssembler;
import ims.RefMan.vo.domain.InpatientEpisodeForPatientCodingListShortVoAssembler;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.List;

public class PatientCodingListImpl extends BasePatientCodingListImpl
{

	private static final long serialVersionUID = 1L;

	public ArrayList getAdmissionDetailVo(SearchCriteriaForPatientCodingListVo searchFilter , PatientRefVo patRef) //WDEV-20075
	{
		if( searchFilter == null || patRef == null )
			throw new CodingRuntimeException("SearchCriteriaForPatientCodingListVo is null");
		
		DomainFactory factory = getDomainFactory();

		StringBuffer hqlConditions = new StringBuffer();
			
		StringBuffer hql = new StringBuffer("select a1_1, inp from AdmissionDetail as a1_1 left join a1_1.pasEvent as p1_1 left join p1_1.patient as pat left join a1_1.codingStatus as l1_1, InpatientEpisode as inp left join inp.pasEvent as inppas");
		StringBuffer hqldisch = new StringBuffer("select a1_1 , disch from DischargedEpisode as disch left join disch.pasEvent as p1_1 left join p1_1.patient as pat left join disch.admissionDetail as a1_1 left join a1_1.codingStatus as l1_1");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String andStr = "";
		boolean putfirstpharantesis = false;
		
		if( Boolean.TRUE.equals(searchFilter.getInProgress()) )
		{
									
			hqlConditions.append(andStr);
			
			hqlConditions.append("(");
			hqlConditions.append(" l1_1.id = :InProgress ");
			markers.add("InProgress");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.INPROGRESS).getId());
			
			if( !Boolean.TRUE.equals(searchFilter.getUncoded()) && !Boolean.TRUE.equals(searchFilter.getForReview())  && !Boolean.TRUE.equals(searchFilter.getCoded()))
				hqlConditions.append(")");
			
			
			andStr = " and ";
		}
		
		if( Boolean.TRUE.equals(searchFilter.getUncoded()) )
		{
			putfirstpharantesis = false;
			if( Boolean.TRUE.equals(searchFilter.getInProgress()))
			{
				andStr = " or ";
			}
			else
			{
				putfirstpharantesis = true;
			}
			
			hqlConditions.append(andStr);
			
			if( putfirstpharantesis == true)
				hqlConditions.append("(");
			
			hqlConditions.append(" (l1_1.id = :Uncoded OR l1_1 is null)");
			markers.add("Uncoded");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.UNCODED).getId());
			
			if( !Boolean.TRUE.equals(searchFilter.getForReview())  && !Boolean.TRUE.equals(searchFilter.getCoded()))
				hqlConditions.append(")");
			
			andStr = " and ";
		}
		
		if( Boolean.TRUE.equals(searchFilter.getForReview()) )
		{
			putfirstpharantesis = false;
			if( Boolean.TRUE.equals(searchFilter.getInProgress()) || Boolean.TRUE.equals(searchFilter.getUncoded()))
			{
				andStr = " or ";
			}
			else
			{
				putfirstpharantesis = true;
			}
			hqlConditions.append(andStr);
			
			if( putfirstpharantesis == true)
				hqlConditions.append("(");
			
			hqlConditions.append(" l1_1.id = :ForReview ");
			markers.add("ForReview");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.FORREVIEW).getId());
			
			if( !Boolean.TRUE.equals(searchFilter.getCoded()))
				hqlConditions.append(")");
			
			
			andStr = " and ";
		}
		
		if( Boolean.TRUE.equals(searchFilter.getCoded()) )
		{
			putfirstpharantesis = false;
			if( Boolean.TRUE.equals(searchFilter.getInProgress()) || Boolean.TRUE.equals(searchFilter.getUncoded()) || Boolean.TRUE.equals(searchFilter.getForReview()) )
			{
				andStr = " or ";
			}
			else
			{
				putfirstpharantesis = true;
			}
			hqlConditions.append(andStr);
			hqlConditions.append(" l1_1.id = :Coded ");
			markers.add("Coded");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.CODED).getId());
			
			if( putfirstpharantesis == false)
				hqlConditions.append(")");
			
			andStr = " and ";
		}
		
		if( Boolean.TRUE.equals(searchFilter.getAwaitingHistology()) )
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" a1_1.awaitingHistology.awaitingHistology  = :awaitHist ");
			markers.add("awaitHist");
			values.add(Boolean.TRUE);
			andStr = " and ";
		}
		
		hqlConditions.append(andStr);
		hqlConditions.append(" pat.id  = :patient ");
		markers.add("patient");
		values.add(patRef.getID_Patient());
		andStr = " and ";
		
		
		StringBuffer hqlConditions1 = new StringBuffer(hqlConditions);
		StringBuffer hqlConditions2 = new StringBuffer(hqlConditions);
				
		hqlConditions1.append(andStr);
		hqlConditions1.append(" p1_1.id = inppas.id ");
		
		//apply date search criteria only for dischargeEpisode
		ArrayList<String> markers2 = (ArrayList<String>)markers.clone();
		ArrayList<Object> values2 = (ArrayList<Object>)values.clone();
		
		if( searchFilter.getDateFromIsNotNull())
		{
			hqlConditions2.append(andStr);
			hqlConditions2.append(" disch.dischargeDateTime >= :datefrom ");
			markers2.add("datefrom");
			DateTime fromDateTime = new DateTime(searchFilter.getDateFrom(), new Time(0, 0));
			values2.add(fromDateTime.getJavaDate());
			andStr = " and ";	
		}
		
		if( searchFilter.getDateToIsNotNull())
		{
			hqlConditions2.append(andStr);
			hqlConditions2.append(" disch.dischargeDateTime <= :dateto ");
			markers2.add("dateto");
			DateTime toDateTime = new DateTime(searchFilter.getDateTo(), new Time(23, 59));
			values2.add(toDateTime.getJavaDate());
			andStr = " and ";
		}
		
		if (hqlConditions1.length() > 0)
		{
			hqlConditions1.insert(0, " where (");
			hqlConditions1.append(" ) ");
		}
					
		if (hqlConditions2.length() > 0)
		{
			hqlConditions2.insert(0, " where (");
			hqlConditions2.append(" ) ");
		}
		
		String strOrder = "";
		
		strOrder="order by a1_1.admissionDateTime desc";

		List<?> listinp = factory.find(hql.toString() + hqlConditions1.toString() + strOrder , markers, values, 2000);
		List<?> listdisch = factory.find(hqldisch.toString() + hqlConditions2.toString() + strOrder , markers2, values2, 2000);

		//List All Outpatients Appointments
		ArrayList<String> markersAppt = new ArrayList<String>();;
		ArrayList<Object> valuesAppt = new ArrayList<Object>();;
		
		String andStrAppt = " ";
		StringBuffer hqlAppt = new StringBuffer("select b1_1 from Booking_Appointment as b1_1 left join b1_1.theatreBooking as t1_1 ");
		StringBuffer hqlConditionsAppt=new StringBuffer();
		
		hqlConditionsAppt.append(andStrAppt);
		hqlConditionsAppt.append(" t1_1.id is null  and b1_1.patient.id = :PatID ");
		markersAppt.add("PatID");
		valuesAppt.add(patRef.getID_Patient());
		andStrAppt = " and ";
		
		if( searchFilter.getDateFromIsNotNull())
		{
			
			hqlConditionsAppt.append(andStrAppt);
			hqlConditionsAppt.append(" b1_1.appointmentDate >= :datefrom ");
			markersAppt.add("datefrom");
			DateTime fromDateTime = new DateTime(searchFilter.getDateFrom(), new Time(0, 0));
			valuesAppt.add(fromDateTime.getJavaDate());
			andStrAppt = " and ";
			
		}
		
		if( searchFilter.getDateToIsNotNull())
		{
			hqlConditionsAppt.append(andStrAppt);
			hqlConditionsAppt.append(" b1_1.appointmentDate <= :dateto ");
			markersAppt.add("dateto");
			DateTime toDateTime = new DateTime(searchFilter.getDateTo(), new Time(23, 59));
			valuesAppt.add(toDateTime.getJavaDate());
			andStrAppt = " and ";
		}
		
		if (hqlConditionsAppt.length() > 0)
		{
			hqlConditionsAppt.insert(0, " where (");
			hqlConditionsAppt.append(" ) order by b1_1.appointmentDate desc, b1_1.apptStartTime desc ");
		}
		
		List<?> listAppts = factory.find(hqlAppt.toString() + hqlConditionsAppt.toString() , markersAppt, valuesAppt, 2000);
		
		ArrayList listVo = new ArrayList();//WDEV-20075
		
		for(int i = 0; listinp!=null && i < listinp.size(); i++)
		{
			Object[] procObjects = (Object[]) listinp.get(i);
			if( procObjects != null )
			{
				AdmissionDetailsWithConsultantAndWardStayVo tempadmDetVo = new AdmissionDetailsWithConsultantAndWardStayVo();
				AdmissionDetailForPatientCodingListVo tempvo = null;
				if( procObjects[0] != null )
				{
    				tempvo = AdmissionDetailForPatientCodingListVoAssembler.create((AdmissionDetail) procObjects[0]);	
				}
				
				InpatientEpisodeForPatientCodingListShortVo inpVo = null;
				if( procObjects[1] != null )
				{
					inpVo = InpatientEpisodeForPatientCodingListShortVoAssembler.create((InpatientEpisode) procObjects[1]);
				}
				DischargeEpisodeForPatientCodingListShortVo dischVo = null;
				
				tempadmDetVo.setAdmissionDetail(tempvo);
				tempadmDetVo.setInpatientEpisode(inpVo);
				tempadmDetVo.setDischargeEpisode(dischVo);
				listVo.add(tempadmDetVo);
			}
		}
		
		for(int j = 0; listdisch!=null &&  j < listdisch.size();j++)
		{
			Object[] procObjects = (Object[]) listdisch.get(j);
			if( procObjects != null )
			{
				AdmissionDetailsWithConsultantAndWardStayVo tempadmDetVo = new AdmissionDetailsWithConsultantAndWardStayVo();
				AdmissionDetailForPatientCodingListVo tempvo = null;
				if( procObjects[0] != null )
				{
    				tempvo = AdmissionDetailForPatientCodingListVoAssembler.create((AdmissionDetail) procObjects[0]);
				}
				
				InpatientEpisodeForPatientCodingListShortVo inpVo = null;
				DischargeEpisodeForPatientCodingListShortVo dischVo = null;
				if( procObjects[1] != null )
				{
					dischVo = DischargeEpisodeForPatientCodingListShortVoAssembler.create((DischargedEpisode) procObjects[1]);
				}
				
				tempadmDetVo.setAdmissionDetail(tempvo);
				tempadmDetVo.setInpatientEpisode(inpVo);
				tempadmDetVo.setDischargeEpisode(dischVo);
				listVo.add(tempadmDetVo);
			}
		}
			
		if( listAppts != null && listAppts.size() > 0)
		{
			BookingAppointmentForPatientCodingListVoCollection tempVoColl = BookingAppointmentForPatientCodingListVoAssembler.createBookingAppointmentForPatientCodingListVoCollectionFromBooking_Appointment(listAppts);
			
			for (int i=0;i<tempVoColl.size();i++)
			{
				listVo.add(tempVoColl.get(i));
			}
		}
	
		if( listVo != null && listVo.size() == 0 )
			return null;
		
		return listVo;
	}

	public DischargeEpisodeWithAppointmentVoCollection getDischargeEpisode(SearchCriteriaForPatientCodingListVo searchFilter, PatientRefVo patRef)
	{
		if( searchFilter == null || patRef == null)
			throw new CodingRuntimeException("SearchCriteriaForPatientCodingListVo is null");
		
		
		DomainFactory factory = getDomainFactory();

		StringBuffer hqlConditions = new StringBuffer();
		
		StringBuffer hql = new StringBuffer("select d1_1 from DischargedEpisode as d1_1 left join d1_1.admissionDetail as a1_1 left join a1_1.pasEvent as p1_1 left join d1_1.pasEvent as p2_1 left join p2_1.patient as pat left join a1_1.codingStatus as l1_1");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String andStr = "";
		boolean putfirstpharantesis = false;
		
		if( searchFilter.getDateFromIsNotNull())
		{
			
			hqlConditions.append(andStr);
			hqlConditions.append(" d1_1.dischargeDateTime >= :datefrom ");
			markers.add("datefrom");
			DateTime fromDateTime = new DateTime(searchFilter.getDateFrom(), new Time(0, 0));
			values.add(fromDateTime.getJavaDate());
			andStr = " and ";
			
		}
		if( searchFilter.getDateToIsNotNull())
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" d1_1.dischargeDateTime <= :dateto ");
			markers.add("dateto");
			DateTime toDateTime = new DateTime(searchFilter.getDateTo(), new Time(23, 59));
			values.add(toDateTime.getJavaDate());
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(searchFilter.getInProgress()) )
		{
									
			hqlConditions.append(andStr);
			
			hqlConditions.append("(");
			hqlConditions.append(" l1_1.id = :InProgress ");
			markers.add("InProgress");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.INPROGRESS).getId());
			
			if( !Boolean.TRUE.equals(searchFilter.getUncoded()) && !Boolean.TRUE.equals(searchFilter.getForReview())  && !Boolean.TRUE.equals(searchFilter.getCoded()))
				hqlConditions.append(")");
			
			
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(searchFilter.getUncoded()) )
		{
			putfirstpharantesis = false;
			if( Boolean.TRUE.equals(searchFilter.getInProgress()))
			{
				andStr = " or ";
			}
			else
			{
				putfirstpharantesis = true;
			}
			
			hqlConditions.append(andStr);
			
			if( putfirstpharantesis == true)
				hqlConditions.append("(");
			
			hqlConditions.append(" l1_1.id = :Uncoded ");
			markers.add("Uncoded");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.UNCODED).getId());
			
			if( !Boolean.TRUE.equals(searchFilter.getForReview())  && !Boolean.TRUE.equals(searchFilter.getCoded()))
				hqlConditions.append(")");
			
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(searchFilter.getForReview()) )
		{
			putfirstpharantesis = false;
			if( Boolean.TRUE.equals(searchFilter.getInProgress()) || Boolean.TRUE.equals(searchFilter.getUncoded()))
			{
				andStr = " or ";
			}
			else
			{
				putfirstpharantesis = true;
			}
			hqlConditions.append(andStr);
			
			if( putfirstpharantesis == true)
				hqlConditions.append("(");
			
			hqlConditions.append(" l1_1.id = :ForReview ");
			markers.add("ForReview");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.FORREVIEW).getId());
			
			if( !Boolean.TRUE.equals(searchFilter.getCoded()))
				hqlConditions.append(")");
			
			
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(searchFilter.getCoded()) )
		{
			putfirstpharantesis = false;
			if( Boolean.TRUE.equals(searchFilter.getInProgress()) || Boolean.TRUE.equals(searchFilter.getUncoded()) || Boolean.TRUE.equals(searchFilter.getForReview()) )
			{
				andStr = " or ";
			}
			else
			{
				putfirstpharantesis = true;
			}
			hqlConditions.append(andStr);
			hqlConditions.append(" l1_1.id = :Coded ");
			markers.add("Coded");
			values.add(getDomLookup(ims.core.vo.lookups.CodingStatus.CODED).getId());
			
			if( putfirstpharantesis == false)
				hqlConditions.append(")");
			
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(searchFilter.getAwaitingHistology()) )
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" a1_1.awaitingHistology.awaitingHistology  = :awaitHist ");
			markers.add("awaitHist");
			values.add(Boolean.TRUE);
			andStr = " and ";
		}
		
		hqlConditions.append(andStr);
		hqlConditions.append(" pat.id  = :patient ");
		markers.add("patient");
		values.add(patRef.getID_Patient());
		andStr = " and ";
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}

		String strOrder = "";
		
		strOrder="order by d1_1.dischargeDateTime desc";
						
		List<?> list = factory.find(hql.toString() + hqlConditions.toString() + strOrder , markers, values, 2000);

		if (list == null || list.size() == 0)
			return null;
		
		
		DischargeEpiosdeForPatientCodingListVoCollection tempVoColl =  DischargeEpiosdeForPatientCodingListVoAssembler.createDischargeEpiosdeForPatientCodingListVoCollectionFromDischargedEpisode(list);
		if( tempVoColl != null )
		{
			DischargeEpisodeWithAppointmentVoCollection dischColl = new DischargeEpisodeWithAppointmentVoCollection();
			for(int j = 0; j < tempVoColl.size(); j++ )
			{
				DischargeEpisodeWithAppointmentVo dischVo = new DischargeEpisodeWithAppointmentVo();
				DischargeEpiosdeForPatientCodingListVo tempVo = tempVoColl.get(j);
				dischVo.setDischargeEpisode(tempVo);
				if( tempVo != null && tempVo.getAdmissionDetailIsNotNull() && tempVo.getAdmissionDetail().getPasEventIsNotNull() )
				{
					List<?> appts = factory.find(" select b1_1 from Booking_Appointment as b1_1 left join b1_1.theatreBooking as t1_1 left join b1_1.pASEvent as p1_1 where (t1_1.id is null  and b1_1.pASEvent.id = :admdetpas ) order by b1_1.appointmentDate desc, b1_1.apptStartTime desc", 
							new String[]{"admdetpas"},new Object[]{tempVo.getAdmissionDetail().getPasEvent().getID_PASEvent()});
					if( appts != null && appts.size() > 0)
					{
						BookingAppointmentForPatientCodingListVoCollection tempApptVoColl = BookingAppointmentForPatientCodingListVoAssembler.createBookingAppointmentForPatientCodingListVoCollectionFromBooking_Appointment(appts);
						dischVo.setAppointment(tempApptVoColl);
					}
				}
				dischColl.add(dischVo);
			}
			return dischColl;
			
		}
		else
			return null;
		

	}

	
}
