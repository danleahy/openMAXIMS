//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4161.27134)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseTheatreTrackingIdleConfigImpl;
import ims.RefMan.domain.objects.TheatreTrackingIdleConfig;
import ims.RefMan.vo.domain.TheatreTrackingIdleConfigVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class TheatreTrackingIdleConfigImpl extends BaseTheatreTrackingIdleConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.TheatreTrackingIdleConfigVo get()
	{
		DomainObject firstDo = getDomainFactory().findFirst("from TheatreTrackingIdleConfig");
		if (firstDo == null)
			return null;
		return TheatreTrackingIdleConfigVoAssembler.create((TheatreTrackingIdleConfig) firstDo);
	}

	public ims.RefMan.vo.TheatreTrackingIdleConfigVo save(ims.RefMan.vo.TheatreTrackingIdleConfigVo record) throws ims.domain.exceptions.StaleObjectException
	{
		if (!record.isValidated())
		{
			throw new CodingRuntimeException("Record not validated");
		}
		DomainFactory df = getDomainFactory();
		if (!record.getID_TheatreTrackingIdleConfigIsNotNull())
		{
			long norec = df.countWithHQL("select count(ttic.id) from TheatreTrackingIdleConfig ttic", new String[]{}, new Object[]{}); 
			if (norec > 0)
			{
				throw new StaleObjectException(null);
			}
		}
			
		TheatreTrackingIdleConfig doObj = TheatreTrackingIdleConfigVoAssembler.extractTheatreTrackingIdleConfig(df, record);
		df.save(doObj);
		return TheatreTrackingIdleConfigVoAssembler.create(doObj);
	}
}
