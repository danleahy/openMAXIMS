//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseViewPatientCodingRecordsImpl;
import ims.RefMan.domain.objects.ReferralCoding;
import ims.RefMan.vo.ReferralCodingForViewVo;
import ims.RefMan.vo.ReferralCodingForViewVoCollection;
import ims.RefMan.vo.ReferralCodingVo;
import ims.RefMan.vo.domain.ReferralCodingForViewVoAssembler;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.clinical.domain.objects.Diagnosis;
import ims.core.clinical.domain.objects.Procedure;
import ims.core.clinical.vo.DiagnosisRefVo;
import ims.core.clinical.vo.ProcedureRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.DischargedEpisodeForReferralCodingViewVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.domain.DiagnosisVoAssembler;
import ims.core.vo.domain.DischargedEpisodeForReferralCodingViewVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ProcedureVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.configuration.domain.objects.InvestigationIndex;
import ims.ocrr.configuration.vo.InvestigationIndexRefVo;
import ims.ocrr.vo.InvestigationIndexVo;
import ims.ocrr.vo.domain.InvestigationIndexVoAssembler;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class ViewPatientCodingRecordsImpl extends BaseViewPatientCodingRecordsImpl
{

	private static final long serialVersionUID = 1L;

	public ReferralCodingForViewVoCollection getReferralCodings(ims.core.patient.vo.PatientRefVo patientRef, ReferralCodingVo refCodingToBeExcluded)
	{
		if (patientRef == null || patientRef.getID_Patient()==null)
			throw new CodingRuntimeException("Cannot get ReferralCodingVo for a null Patient ");

		DomainFactory factory = getDomainFactory();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String hql= "select refCoding from ReferralCoding as refCoding left join refCoding.catsReferral as catsRef left join catsRef.patient as pat where pat.id=:patID ";
		markers.add("patID");
		values.add(patientRef.getID_Patient());
		
		if (refCodingToBeExcluded!=null && refCodingToBeExcluded.getAppointment()!=null)
		{
			hql+=" and refCoding.appointment.id <> :apptID"; 
			markers.add("apptID");
			values.add(refCodingToBeExcluded.getAppointment().getID_Booking_Appointment());
		}
		else if (refCodingToBeExcluded!=null && refCodingToBeExcluded.getPasEvent()!=null)
		{
			hql+=" and refCoding.pasEvent.id <> :pasEventID"; 
			markers.add("pasEventID");
			values.add(refCodingToBeExcluded.getPasEvent().getID_PASEvent());
		}
		
		List list = factory.find(hql,markers,values);
		
		return ReferralCodingForViewVoAssembler.createReferralCodingForViewVoCollectionFromReferralCoding(list);
	}

	public ims.core.vo.PatientShort getPatientByCatsRef(ims.RefMan.vo.CatsReferralRefVo catsRef)
	{
		if (catsRef == null || catsRef.getID_CatsReferral()==null)
			throw new CodingRuntimeException("Cannot get Patient for a null CatsRef ");

		DomainFactory factory = getDomainFactory();
		
		String hql= "select cats.patient from CatsReferral as cats where cats.id=:catsID ";
		
		List list = factory.find(hql, new String[]{"catsID"},new Object[]{catsRef.getID_CatsReferral()});
		
		if (list==null || list.size()==0)
			return null;
		
		return  PatientShortAssembler.create((Patient) list.get(0));
		
	}

	public ReferralCodingForViewVo getReferralCoding(ims.RefMan.vo.ReferralCodingRefVo referralCodingRef)
	{
		if (referralCodingRef == null || referralCodingRef.getID_ReferralCoding()==null)
			throw new CodingRuntimeException("Cannot get ReferralCodingVo for a null ID");

		DomainFactory factory = getDomainFactory();
		ReferralCoding domRefCoding = (ReferralCoding)factory.getDomainObject(ReferralCoding.class, referralCodingRef.getID_ReferralCoding());
		
		return ReferralCodingForViewVoAssembler.create(domRefCoding);
	}

	public DiagnosisVo getDiagnosisWithTaxonomyMappings(DiagnosisRefVo diagRefVo)
	{
		DomainFactory factory = getDomainFactory();
		Diagnosis med = (Diagnosis) factory.getDomainObject(Diagnosis.class, diagRefVo.getID_Diagnosis());
		return (DiagnosisVoAssembler.create(med));
	}

	public ProcedureVo getProcedureWithTaxonomyMappings(ProcedureRefVo procRefVo)
	{
		DomainFactory factory = getDomainFactory();
		Procedure proc = (Procedure) factory.getDomainObject(Procedure.class, procRefVo.getID_Procedure());
		return (ProcedureVoAssembler.create(proc));
	}

	public InvestigationIndexVo getInvestigationWithTaxonomyMappings(InvestigationIndexRefVo investigationRef)
	{
		DomainFactory factory = getDomainFactory();
		InvestigationIndex inv = (InvestigationIndex) factory.getDomainObject(InvestigationIndex.class, investigationRef.getID_InvestigationIndex());
		return InvestigationIndexVoAssembler.create(inv);
	}

	public DischargedEpisodeForReferralCodingViewVo getDischargedEpisodeByPasEvent(PASEventRefVo pasEventRef)
	{
		if (pasEventRef == null || pasEventRef.getID_PASEvent()==null)
			throw new CodingRuntimeException("Cannot get DischargedEpisode for a null PasEvent ");

		DomainFactory factory = getDomainFactory();
		
		String hql= "select dischEpisode from DischargedEpisode as dischEpisode	where (dischEpisode.pasEvent.id = :pasEventID)  ";
		
		List list = factory.find(hql, new String[]{"pasEventID"},new Object[]{pasEventRef.getID_PASEvent()});
		
		if (list==null || list.size()==0)
			return null;
		
		return  DischargedEpisodeForReferralCodingViewVoAssembler.create((DischargedEpisode) list.get(0));
		
	}
}
