//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3159.24578)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.ServiceConfiguration;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.domain.impl.ServiceConfigurationImpl;
import ims.RefMan.domain.CancerTypeConfig;
import ims.RefMan.domain.ClinicList;
import ims.RefMan.domain.ContractConfiguration;
import ims.RefMan.domain.RTTManagement;
import ims.RefMan.domain.ReferralStatusList;
import ims.RefMan.domain.ReferralWizard;
import ims.RefMan.domain.base.impl.BaseReferralDetailsComponentImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralService;
import ims.RefMan.vo.CancerTypeConfigVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ContractConfigForReferralDetailsComponentVoCollection;
import ims.RefMan.vo.ContractConfigurationVoCollection;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVoCollection;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.ReferralServiceFullVo;
import ims.RefMan.vo.ReferralUrgencyUpdatesVo;
import ims.RefMan.vo.ReferralUrgencyUpdatesVoCollection;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.ContractConfigForReferralDetailsComponentVoAssembler;
import ims.RefMan.vo.domain.ContractConfigurationVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListVoAssembler;
import ims.RefMan.vo.domain.ReferralServiceFullVoAssembler;
import ims.RefMan.vo.lookups.CancerType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.clinical.vo.ReferralLetterDetailsVo;
import ims.clinical.vo.domain.ReferralLetterDetailsVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.clinical.domain.objects.ReferralLetterDetails;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ReferralLetterDetailsRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.ContractConfig;
import ims.core.configuration.vo.ContractConfigRefVo;
import ims.core.configuration.vo.ContractConfigRefVoCollection;
import ims.core.domain.BedAdmissionComponent;
import ims.core.domain.impl.BedAdmissionComponentImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.domain.objects.Organisation;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.resource.place.vo.OrganisationRefVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.LocSiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.OrgShortVo;
import ims.core.vo.OrganisationLiteVo;
import ims.core.vo.OrganisationVoCollection;
import ims.core.vo.PatientWithGPForCCGVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ReferralSourceUrgencyVoCollection;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.ServiceVo;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.GpShortVoAssembler;
import ims.core.vo.domain.HcpAssembler;
import ims.core.vo.domain.LocSiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.PatientWithGPForCCGVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ReferralSourceUrgencyVoAssembler;
import ims.core.vo.domain.ServiceFunctionLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.QueueType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.domain.lookups.LookupInstance;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.hl7adtout.domain.objects.ElectiveListMessageQueue;
import ims.ocrr.vo.lookups.OrderMessageStatus;
import ims.pathways.configuration.domain.objects.RTTStatusPoint;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PathwayRTTStatus;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.scheduling.domain.DirectoryOfServiceAdmin;
import ims.scheduling.domain.impl.DirectoryOfServiceAdminImpl;
import ims.scheduling.domain.objects.SessionExclusionDate;
import ims.scheduling.vo.ExclusionDatesVo;
import ims.scheduling.vo.domain.ExclusionDatesVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class ReferralDetailsComponentImpl extends BaseReferralDetailsComponentImpl
{
	private static final long serialVersionUID = 1L;
	
	private static final int TWO_WEEK_WAIT_TO_1ST_APP = 14;

	public ims.core.vo.ServiceShortVoCollection getActiveServices()
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc = new IMSCriteria(Service.class, factory);
		imsc.equal("isActive", true);
		List services = imsc.find();
		if (!services.isEmpty())
			return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(services);
		return null;
	}

	public ims.scheduling.vo.ExclusionDatesVo listExclusionDates()
	{
		DomainFactory factory = getDomainFactory();
		List exDate = factory.find("from SessionExclusionDate exDate");
		if (exDate.size() > 0)
			return ExclusionDatesVoAssembler.create((SessionExclusionDate) exDate.get(0));

		return null;
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionsLite(ServiceRefVo service)
	{
		if (service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("service is null or id not provided for method listServiceFunctionsLite");

		ServiceFunctionLiteVoCollection services = new ServiceFunctionLiteVoCollection();
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc = new IMSCriteria(ims.core.clinical.domain.objects.ServiceFunction.class, factory);
		imsc.equal("this.service.id", service.getID_Service());
		imsc.equal("this.isActive", true);
		List serviceFunctions = imsc.find();
		for (int i = 0; i < serviceFunctions.size(); i++)
		{
			services.add(ServiceFunctionLiteVoAssembler.create((ims.core.clinical.domain.objects.ServiceFunction) serviceFunctions.get(i)));
		}
		if (services.size() > 0)
			return services;
		return null;

	}

	public ReferralServiceFullVo getReferralServices()
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ReferralService");

		List list = factory.find(hql.toString());
		if (list.size() > 0)
			return ReferralServiceFullVoAssembler.create((ReferralService) list.get(0));
		else
			return null;
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo catsReferral)
	{
		// If the argument is null or has no ID then return null;
		if (catsReferral == null || !catsReferral.getID_CatsReferralIsNotNull())
			return null;

		// Return the corresponding record from database
		CatsReferral doCats = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral());
		CatsReferralWizardVo cats = CatsReferralWizardVoAssembler.create(doCats);
		//WDEV-21176
		cats.setHasPatientJourneyLinked(doCats.getJourney() != null && !Boolean.TRUE.equals(doCats.getJourney().getIsRIE()));		
		ExclusionDatesVo voExDate = listExclusionDates();
		Integer daysToFirstAppointment = null;
		Date firstOPKPI = null;
		if (getDomLookup(ReferralUrgency.TWO_WEEK_WAIT).equals(doCats.getUrgency()))
		{
			daysToFirstAppointment = TWO_WEEK_WAIT_TO_1ST_APP;
		}
		else
		{
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(cats.getContract(), cats.getReferralDetails().getService());
			
			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysTo1stApptIsNotNull())
			{
				daysToFirstAppointment = contrServiceLocationConf.getDaysTo1stAppt();
			}
			else if (doCats.getContract() != null && doCats.getReferralDetails() != null && Boolean.TRUE.equals(doCats.getReferralDetails().getService().isIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = doCats.getContract().getDaysTo1stAppt();
			}
		}
		
		if (daysToFirstAppointment != null)
		{
			if(cats.getReferralDetails() != null && cats.getReferralDetails().getDateOfReferral() != null)
			{
				firstOPKPI = ExclusionDatesVo.addBusinessDays(cats.getReferralDetails().getDateOfReferral(), daysToFirstAppointment, voExDate != null ? voExDate.getDates() : null, true);
				cats.getReferralDetails().setEndDateKPI(firstOPKPI);
			}
		}
		
		return cats;
	}

	public ReferralLetterDetailsVo getReferral(ReferralLetterDetailsRefVo referral)
	{
		if (referral == null || !referral.getID_ReferralLetterDetailsIsNotNull())
			return null;

		return ReferralLetterDetailsVoAssembler.create((ReferralLetterDetails) getDomainFactory().getDomainObject(referral));
	}

	public GpShortVo getPatientGP(Integer patientId)
	{
		DomainFactory factory = getDomainFactory();
		Patient pat = null;
		IMSCriteria imsc = new IMSCriteria(Patient.class, factory);
		imsc.equal("id", patientId);
		List patients = imsc.find();
		if (patients != null && patients.size() > 0)
		{
			pat = (Patient) patients.get(0);
			if (pat.getGp() != null)
				return GpShortVoAssembler.create(pat.getGp());
			else
				return null;
		}
		return null;

	}
	//WDEV-20558
	public Boolean isStale(CatsReferralRefVo catsRef)
    {
        if (catsRef == null || catsRef.getID_CatsReferral() == null)
        {
            throw new CodingRuntimeException("Cannot get CatsReferral on null ID ");
        }
                                        
        DomainFactory factory = getDomainFactory();
        CatsReferral domainCats = (CatsReferral) factory.getDomainObject(CatsReferral.class, catsRef.getID_CatsReferral());
                
        if(domainCats == null)
        {
             return true;
        }
                
        if (domainCats.getVersion() > catsRef.getVersion_CatsReferral())
        {
            return true;
        }
                
        return false;
    }
	//WDEV-20888
	private RTTStatusPoint getRTTStatusPoint(int nationalCode)
	{
	
		String query = "select rtt from RTTStatusPoint as rtt where rtt.nationalCode = :NationalCode";
		
		List<?> rttList = getDomainFactory().find(query, new String[] {"NationalCode"}, new Object[] {nationalCode});
		
		if(rttList != null && rttList.size() > 0 && rttList.get(0) instanceof RTTStatusPoint)
		{
			return (RTTStatusPoint) rttList.get(0);
		}
		
		return null;
	}
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createPathwayRTTStatus(CatsReferral record, int nationalCode, java.util.Date eventDateTime) throws DomainInterfaceException
	{
		if(!ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
			return null;

		//WDEV-21657 if RTT Status is already set do not create a new one
		if (record.getCurrentRTTStatus() != null && record.getCurrentRTTStatus().getRTTStatus() != null && record.getCurrentRTTStatus().getRTTStatus().getNationalCode() != null 
			&& record.getCurrentRTTStatus().getRTTStatus().getNationalCode().equals(nationalCode))
		{
			return record.getCurrentRTTStatus();
		}
		
		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		
		if (rttStatusPoint == null)
			throw new DomainInterfaceException("No RTT Status Point was found for National Code: " + nationalCode);
		
		Object mos = getMosUser();
		MemberOfStaff doMos = null;
		
		if(mos instanceof MemberOfStaffLiteVo)
		{
			doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
		}
		
		PathwayRTTStatus pathwayRTTStatus = new PathwayRTTStatus();
		pathwayRTTStatus.setRTTStatus(rttStatusPoint);
		pathwayRTTStatus.setStatusBy(doMos);
		
		if(record.getReferralTransfer() != null && record.getReferralTransfer().getRTTStatusDate() != null)
			pathwayRTTStatus.setStatusDateTime(record.getReferralTransfer().getRTTStatusDate());
		else
			pathwayRTTStatus.setStatusDateTime(eventDateTime);

		if(record.getJourney() != null && record.getJourney().getCurrentClock() != null)
    	{
			record.getJourney().getCurrentClock().setCurrentRTTStatus(pathwayRTTStatus);
    			
    		if(record.getJourney().getCurrentClock().getRTTStatusHistory() == null)
    			record.getJourney().getCurrentClock().setRTTStatusHistory(new java.util.ArrayList());
    			
    		record.getJourney().getCurrentClock().getRTTStatusHistory().add(pathwayRTTStatus);
    		
    	}
		
		return pathwayRTTStatus;
	}

	private java.util.Date getTargetClockEnd(java.util.Date date, CatsReferralWizardVo referral)
	{
		int daysToRttBreachDate = 0;

		if (referral != null && referral.getReferralDetails() != null)
		{
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(referral.getContract(), referral.getReferralDetails().getService());

			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysToRTTBreachDate() != null)
			{
				daysToRttBreachDate = contrServiceLocationConf.getDaysToRTTBreachDate();
			}
			else if (referral.getContract() != null)
			{
				daysToRttBreachDate = referral.getContract().getDaysToRTTBreachDate();
			}
		}
		
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, daysToRttBreachDate); 
		 
		date = cal.getTime();

		return date;
	}
	//end WDEV-20888
	
	private void setCurrentClockOnReferralEdit(CatsReferral doCats, CatsReferralWizardVo catsReferralVo, PathwayRTTStatus rttStatus)
	{
		PathwayClock clock = new PathwayClock();
		clock.setExtClockId(doCats.getJourney().getReferral().getClockId());
		clock.setExtClockName("MaximsClock_1");
		clock.setStartDate(catsReferralVo != null && catsReferralVo.getReferralTransferIsNotNull() && catsReferralVo.getReferralTransfer().getRTTStartDateIsNotNull() ? catsReferralVo.getReferralTransfer().getRTTStartDate().getDate() : doCats.getJourney().getStartDate()); //WDEV-23189 - clock start date for IPT
		clock.setTargetClockEnd(getTargetClockEnd(clock.getStartDate(), catsReferralVo));
		
		clock.setCurrentRTTStatus(rttStatus);
		
		doCats.getJourney().setCurrentClock(clock);
		if(doCats.getJourney().getClockHistory() != null)
			doCats.getJourney().getClockHistory().add(clock);
	}
	
	public ReferralLetterDetailsVo save(ReferralLetterDetailsVo referralDetailsVo, CatsReferralWizardVo catsReferralVo, Boolean bDiagnosticReferral, Boolean bRemoveRTTData) throws StaleObjectException
	{
		if (referralDetailsVo == null)
			throw new CodingRuntimeException("referralDetailsVo is null in method save");
		
		boolean hasRTTClockImpactChangedToTrue = false;

		DomainFactory factory = getDomainFactory();

		if (bDiagnosticReferral)
			factory.setDirtyCheck(true);
		
		// WDEV-18452 - before save of the catsReferral, I need to hold onto the original Urgency value
		LookupInstance prevReferralUrgency=null;
		LookupInstance prevCancerTypeLookInst=null; //WDEV-19700
		if (catsReferralVo.getID_CatsReferralIsNotNull())
		{
			CatsReferral domCatsRef = (CatsReferral)factory.getDomainObject(CatsReferral.class, catsReferralVo.getID_CatsReferral());
			prevReferralUrgency = domCatsRef.getUrgency();
			
			prevCancerTypeLookInst=domCatsRef.getCancerType();//WDEV-19700	

			hasRTTClockImpactChangedToTrue = Boolean.TRUE.equals(catsReferralVo.getRTTClockImpact()) && !Boolean.TRUE.equals(domCatsRef.isRTTClockImpact());
		}
		
		if(catsReferralVo != null && catsReferralVo.getUrgency() != null && (prevReferralUrgency == null || (prevReferralUrgency != null && prevReferralUrgency.getId() != catsReferralVo.getUrgency().getID())))
		{
			if(catsReferralVo.getUrgencyUpdateHistory() == null)
			{
				catsReferralVo.setUrgencyUpdateHistory(new ReferralUrgencyUpdatesVoCollection());
			}
			
			catsReferralVo.getUrgencyUpdateHistory().add(createReferralUrgencyUpdateRecord(catsReferralVo.getUrgency()));
		}


		//WDEV-11535
		EpisodeofCareShortVo voEpisodeOfCare = null;
		ReferralLetterDetailsVo voRLDOnDb = null; 		//wdev-12357
		if(catsReferralVo.getReferralDetails() != null)	//wdev-12357
			voRLDOnDb = ReferralLetterDetailsVoAssembler.create((ReferralLetterDetails) factory.getDomainObject(catsReferralVo.getReferralDetails()));	
		
		//WDEV-11535 if service is null set it to DAD again		
		if (voRLDOnDb != null && voRLDOnDb.getService() != null && referralDetailsVo != null && referralDetailsVo.getServiceIsNotNull() && voRLDOnDb.getService().getID_Service() != referralDetailsVo.getService().getID_Service())
			voEpisodeOfCare  = updateEpisodeOfCareSpecialty(catsReferralVo, referralDetailsVo, factory);
		
		if (catsReferralVo.getPathwayID() == null )
		{
			String orgCode = "";
			String szZeros = "";
			String allZeros = "00000000000000000000";//20 chars

			if (catsReferralVo.getReferralDetails() != null
				&& catsReferralVo.getReferralDetails().getReferrerType() != null)
			{
				if (catsReferralVo.getReferralTransfer()!=null && catsReferralVo.getReferralDetails().getReferrerType().equals(SourceOfReferral.TRANSFER))//WDEV-18554
				{	
					//WDEV-19698 //WDEV-20048
					if (catsReferralVo.getReferralTransfer().getOTherOrganisationCode() != null)
					{	
						String extCode = getLookupService().getRemoteLookup(catsReferralVo.getReferralTransfer().getOTherOrganisationCode().getID(), "MAXIMS");
						if (extCode != null)
							orgCode = extCode;
					}

				}
				else if(catsReferralVo.getReferralDetails().getPCTIsNotNull())
					orgCode = catsReferralVo.getReferralDetails().getPCT();
			}
			

			//WDEV-18816
			if (orgCode != null && orgCode.length() <= allZeros.length())//WDEV-20618
				szZeros = allZeros.subSequence(0, allZeros.length() - orgCode.length()).toString();
			
			if (szZeros.length() < catsReferralVo.getID_CatsReferral().toString().length())
				szZeros = "";
			else
				szZeros = szZeros.subSequence(0, szZeros.length() - catsReferralVo.getID_CatsReferral().toString().length()).toString();
			
			String pathwayId = orgCode + szZeros + catsReferralVo.getID_CatsReferral().toString();
			
			catsReferralVo.setPathwayID(pathwayId.length() > 20 ? pathwayId.subSequence(0, 19).toString() : pathwayId);
		}

		//WDEV-20383
		if (catsReferralVo.getReferralTransfer() != null && catsReferralVo.getReferralDetails() != null && catsReferralVo.getReferralDetails().getReferrerType() != null && catsReferralVo.getReferralDetails().getReferrerType().equals(SourceOfReferral.TRANSFER))
		{	
			referralDetailsVo.setOriginalDateOfReferral(catsReferralVo.getReferralTransfer().getRTTStartDate());
		}
		
		CatsReferral doCats = CatsReferralWizardVoAssembler.extractCatsReferral(factory, catsReferralVo);
		
		/* this code is not needed anymore, modified below on createPathwayRTTStatus WDEV-21657
		if(doCats.getReferralTransfer() != null && doCats.getReferralTransfer().getId() == null && isJourneyCurrentClockOpen(doCats))
			resetRTTStatus(doCats);
		*/
		
		
		//WDEV-20888
		// Source of Referral is NATIONAL_SCREENING || RTT Clock Impact is FALSE
		if (SourceOfReferral.NATIONAL_SCREENING.equals(referralDetailsVo.getReferrerType()) || Boolean.FALSE.equals(catsReferralVo.getRTTClockImpact()))
		{
			doCats.setCurrentRTTStatus(null);
			if (doCats.getJourney() != null && doCats.getJourney().getCurrentClock() != null)
			{
				doCats.getJourney().setCurrentClock(null);
			}
		}
		else if (Boolean.TRUE.equals(catsReferralVo.getRTTClockImpact()) && hasRTTClockImpactChangedToTrue)
		{
			try 
			{
				PathwayRTTStatus rttStatus = null;
				
				// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
				// When a referral is created, use Date of Referral for RTT Status
				java.util.Date eventDateTime = catsReferralVo.getReferralDetails().getDateOfReferral().getDate();
				
				// Source of Referral is GP
				if (SourceOfReferral.GP.equals(referralDetailsVo.getReferrerType()))
				{
					//nationalCode = 10 if GP_SOURCE_OF_REFERRAL_NAT_CODE
					rttStatus = createPathwayRTTStatus(doCats, 10, eventDateTime);
					
					doCats.setCurrentRTTStatus(rttStatus);	
					
					if (doCats.getJourney() != null && doCats.getJourney().getCurrentClock() == null)
					{
						setCurrentClockOnReferralEdit(doCats, catsReferralVo, rttStatus);
					}
	
				}
				// Source of Referral is TRANSFER
				else if(SourceOfReferral.TRANSFER.equals(referralDetailsVo.getReferrerType()))
				{
					if (catsReferralVo.getReferralTransfer() != null && catsReferralVo.getReferralTransfer().getCurrentRTTStatus() != null && catsReferralVo.getReferralTransfer().getCurrentRTTStatus().getNationalCode() != null)
					{	
						rttStatus = createPathwayRTTStatus(doCats, catsReferralVo.getReferralTransfer().getCurrentRTTStatus().getNationalCode(), eventDateTime);
						
						doCats.setCurrentRTTStatus(rttStatus);
						
						if (doCats.getJourney() != null && doCats.getJourney().getCurrentClock() == null)
						{
							setCurrentClockOnReferralEdit(doCats, catsReferralVo, rttStatus);
						}
					}
				}
				// Source of Referral is not GP or TRANSFER
				else
				{
					//nationalCode = 12 if OTHER_SOURCE_OF_REFERRAL_NAT_CODE
					rttStatus = createPathwayRTTStatus(doCats, 12, eventDateTime);
					
					doCats.setCurrentRTTStatus(rttStatus);
					
					if (doCats.getJourney() != null && doCats.getJourney().getCurrentClock() == null)
					{
						setCurrentClockOnReferralEdit(doCats, catsReferralVo, rttStatus);
					}
				}

			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Domain Interface Exception occurred when saving referral - " + e.getMessage());
				e.printStackTrace();
			}	
		}
		//WDEV-21177 
		if (!Boolean.TRUE.equals(catsReferralVo.getIsEmergencyReferral()))
		{	
			referralDetailsVo.setEndDateKPI(getEndDateKPI(doCats, referralDetailsVo));
		}
		
		ReferralLetterDetails doLetterDetail = ReferralLetterDetailsVoAssembler.extractReferralLetterDetails(factory, referralDetailsVo);
		
		factory.save(doLetterDetail);
		
		//WDEV-21176
		if (ReferralUrgency.EMERGENCY.equals(catsReferralVo.getUrgency()) && Boolean.TRUE.equals(bRemoveRTTData))
		{			
			PatientPathwayJourney journeyDO = null;
			if (doCats.getJourney() != null)
				journeyDO = (PatientPathwayJourney) factory.getDomainObject(PatientPathwayJourney.class, doCats.getJourney().getId());
			if (journeyDO != null)
			{
				PathwayClock clockDO = journeyDO.getCurrentClock();
				if (clockDO != null)
					factory.markAsRie(PathwayClock.class, clockDO.getId(), null, doCats.getPatient().getId(), null, null, "RTT information removed as a result of referral urgency change to Emergency");
				doCats.setRTTClockImpact(false);
				factory.markAsRie(PatientPathwayJourney.class, journeyDO.getId(), null, doCats.getPatient().getId(), null, null, "RTT information removed as a result of referral urgency change to Emergency");
				doCats.setJourney(null);
				doCats.setCurrentRTTStatus(null);
				doCats.setCurrent31TargetDate(null);
				doCats.setCurrent62TargetDate(null);			
			}
		}

		doCats.setReferralDetails(doLetterDetail);
		
		factory.save(doCats);

		if (doCats.getAppointments().size() > 0 && referralDetailsVo.getTransportRequiredIsNotNull())
			updateReferralAppointments(doCats, factory, referralDetailsVo.getTransportRequired());

		ArrayList lstDirtyProperties = null;
		if (bDiagnosticReferral)
		{
			// WDEV-7513
			lstDirtyProperties = factory.getDirtyProperties();
			factory.setDirtyCheck(false);
			if (referralDetailsVo.getID_ReferralLetterDetails() == null || (serviceWasChanged(lstDirtyProperties) && doCats.getInvestigationOrders().isEmpty()))
			{
				ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
				impl.pukkaJMessaging(doCats, true);
			}
		}


		//WDEV-11535
		ReferralLetterDetailsVo voReferralLetterDetail = ReferralLetterDetailsVoAssembler.create(doLetterDetail);
		voReferralLetterDetail.setEpisodeOfCare(voEpisodeOfCare);
			
		// WDEV-18452, WDEV-18548
		try 
		{
			ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
			ReferralUrgency prevUrgency=null;
			if (prevReferralUrgency != null)
				prevUrgency = new ReferralUrgency(prevReferralUrgency.getId());
			
			//WDEV-19700
			CancerType prevCancerType=null;
			if (prevCancerTypeLookInst != null)
				prevCancerType = new CancerType(prevCancerTypeLookInst.getId());
			
			impl.check62dayTarget(catsReferralVo, prevUrgency, prevCancerType); //WDEV-19700
		}
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();  // This is already system logged
		}
	
		//WDEV-19704 Trigger A08 HL7 message generation for referral with a TCI (Patient Elective List)
		if(doCats.getId() != null)
		{
			String hql = " from PatientElectiveList o where o.referral = :id";
			PatientElectiveList pel = (PatientElectiveList)factory.findFirst(hql, new String[]{"id"}, new Object[]{doCats});
			if (pel != null)
			{
				PatientElectiveListVo patientElectList = PatientElectiveListVoAssembler.create(pel);
				triggerElectiveListEvent(patientElectList);
			}
		}
		
		return voReferralLetterDetail;
	}

	private boolean isJourneyCurrentClockOpen(CatsReferral domCatsReferral)//WDEV-20058
	{
		if(domCatsReferral== null)
			return false;
		
		return domCatsReferral.getJourney()!=null 
				&& domCatsReferral.getJourney().getCurrentClock()!= null
				&& domCatsReferral.getJourney().getCurrentClock().getStartDate()!= null
				&& domCatsReferral.getJourney().getCurrentClock().getStopDate() == null;
	}
	
	private ims.framework.utils.Date getEndDateKPI(CatsReferral doCats, ReferralLetterDetailsVo referralDetailsVo)
	{	
		if(doCats == null || referralDetailsVo == null)
			return null;
		
		if(SourceOfReferral.NATIONAL_SCREENING.equals(referralDetailsVo.getReferrerType()))
			return null;
		
		ExclusionDatesVo voExDate = listExclusionDates();
		Integer daysToFirstAppointment = null;
		ims.framework.utils.Date firstOPKPI = null;
		
		if(getDomLookup(ReferralUrgency.TWO_WEEK_WAIT).equals(doCats.getUrgency()))
		{
			if(Boolean.TRUE.equals(referralDetailsVo.getService().getIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = TWO_WEEK_WAIT_TO_1ST_APP;
			}
		}
		else if (doCats.getContract() != null) 
		{
			ContractConfig doContractConfig = doCats.getContract();
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = referralDetailsVo.getService() != null ? getContractServiceLocConf(new ContractConfigRefVo(doCats.getContract().getId(),doCats.getContract().getVersion()), new ServiceRefVo(referralDetailsVo.getService().getID_Service(),referralDetailsVo.getService().getVersion_Service())) : null;
			
			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysTo1stApptIsNotNull())
			{
				daysToFirstAppointment = contrServiceLocationConf.getDaysTo1stAppt();
			}
			else if (doContractConfig != null && Boolean.TRUE.equals(referralDetailsVo.getService().getIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = doContractConfig.getDaysTo1stAppt();
			}
		}
		
		if (daysToFirstAppointment != null)
		{
			if(referralDetailsVo.getDateOfReferral() != null)
			{
				firstOPKPI = ExclusionDatesVo.addBusinessDays(new Date(referralDetailsVo.getDateOfReferral()), daysToFirstAppointment.intValue(), voExDate != null ? voExDate.getDates() : null, true);
				
			}
		}
		
		return firstOPKPI;
	}
	
	private void resetRTTStatus(CatsReferral record)
	{
		// CurrentRTTStatus and StatusDateTime are mandatory
		if(record.getReferralTransfer() != null && record.getReferralTransfer().getCurrentRTTStatus() != null && record.getReferralTransfer().getRTTStatusDate() != null)
		{
			if(record.getJourney().getCurrentClock().getCurrentRTTStatus() == null)
				record.getJourney().getCurrentClock().setCurrentRTTStatus(new PathwayRTTStatus());
			record.getJourney().getCurrentClock().getCurrentRTTStatus().setRTTStatus(record.getReferralTransfer().getCurrentRTTStatus());
			record.getJourney().getCurrentClock().getCurrentRTTStatus().setStatusDateTime(record.getReferralTransfer().getRTTStatusDate());
			
			if(record.getCurrentRTTStatus() == null)
				record.setCurrentRTTStatus(new PathwayRTTStatus());
			record.getCurrentRTTStatus().setRTTStatus(record.getReferralTransfer().getCurrentRTTStatus());
			record.getCurrentRTTStatus().setStatusDateTime(record.getReferralTransfer().getRTTStatusDate());
		}
	}
	
	private ContractServiceLocationsConfigVo getContractServiceLocConf(ContractConfigRefVo contract, ServiceRefVo service)
	{
		ContractConfiguration impl = (ContractConfiguration) getDomainImpl(ContractConfigurationImpl.class);
		return impl.getContractServiceLocConfByContractService(contract,service);
	}
	
	private ReferralUrgencyUpdatesVo createReferralUrgencyUpdateRecord(ReferralUrgency referralUrgency)
	{
		ReferralUrgencyUpdatesVo record = new ReferralUrgencyUpdatesVo();
		
		record.setUrgency(referralUrgency);
		record.setRecordingDateTime(new DateTime());
		
		Object user = getMosUser();
		
		if(user instanceof MemberOfStaffLiteVo)
		{
			record.setRecordingUser((MemberOfStaffLiteVo) user);
		}
		
		return record;
	}

	
	//WDEV-19704
	public void triggerElectiveListEvent(PatientElectiveListVo patientElectList)  throws StaleObjectException
	{
		if(patientElectList != null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.ELECTIVELIST.getId()+")";

			java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				ElectiveListMessageQueue messageQueue = new ElectiveListMessageQueue();
				messageQueue.setPatientElectiveList((PatientElectiveList)factory.getDomainObject(patientElectList));
				messageQueue.setProviderSystem(providerSystem);
				messageQueue.setWasProcessed(Boolean.FALSE);
				messageQueue.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				messageQueue.setMsgType(getDomLookup(MsgEventType.A08));
				messageQueue.setQueueType(getDomLookup(QueueType.ELECTIVELIST));
				factory.save(messageQueue);
			}
		}
	}

	
	private EpisodeofCareShortVo updateEpisodeOfCareSpecialty(CatsReferralWizardVo catsReferralVo, ReferralLetterDetailsVo referralDetailsVo, DomainFactory factory) throws StaleObjectException
	{
		CareContextVo voCC = CareContextVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, catsReferralVo.getCareContext().getID_CareContext()));
		ServiceVo voServ = ServiceVoAssembler.create((ims.core.clinical.domain.objects.Service) getDomainFactory().getDomainObject(ims.core.clinical.domain.objects.Service.class, referralDetailsVo.getService().getID_Service()));

		EpisodeOfCare doEOC = (EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, voCC.getEpisodeOfCare().getID_EpisodeOfCare());
		if (doEOC != null)
		{
			//WDEV-11535 - if referral service.specialty is null set it back to DAD
			Specialty spec = null;
			if(voServ.getSpecialty() == null)
				spec = Specialty.DAD;
			else
				spec = voServ.getSpecialty();
			
			doEOC.setSpecialty(getDomLookup(spec));			
			factory.save(doEOC);
			
			return EpisodeofCareShortVoAssembler.create(doEOC);
		}
		
		return null;
	}

	// WDEV-7513
	private boolean serviceWasChanged(ArrayList lstDirtyProperties)
	{
		if (lstDirtyProperties != null)
		{
			for (int i = 0; i < lstDirtyProperties.size(); i++)
				if (lstDirtyProperties.get(i) instanceof String)
					if (lstDirtyProperties.get(i).equals(ReferralLetterDetails.FieldNames.Service))
						return true;
		}

		return false;
	}

	private void updateReferralAppointments(CatsReferral doCats, DomainFactory factory, YesNo ynLookup) throws StaleObjectException
	{
		CatsReferralVo voCats = CatsReferralVoAssembler.create(doCats);

		if (voCats.getConsultationApptIsNotNull() && voCats.getConsultationAppt().getApptStatus().equals(Status_Reason.BOOKED))
			voCats.getConsultationAppt().setIsTransportRequired(ynLookup.equals(YesNo.YES) ? Boolean.TRUE : Boolean.FALSE);

		for (int i = 0; voCats.getAppointmentsIsNotNull() && i < voCats.getAppointments().size(); i++)
		{
			if (voCats.getAppointments().get(i).getApptStatusIsNotNull() && voCats.getAppointments().get(i).getApptStatus().equals(Status_Reason.BOOKED))
				voCats.getAppointments().get(i).setIsTransportRequired(ynLookup.equals(YesNo.YES) ? Boolean.TRUE : Boolean.FALSE);

		}
		CatsReferral doCatsRef = CatsReferralVoAssembler.extractCatsReferral(factory, voCats);
		factory.save(doCatsRef);
	}

	public ProcedureLiteVoCollection listProcedures(String procedureName, ServiceLiteVo serviceLiteVo) throws DomainInterfaceException
	{
		if (serviceLiteVo == null || !serviceLiteVo.getID_ServiceIsNotNull())
			throw new DomainRuntimeException("serviceLiteVo not provided for get call. ");

		DomainFactory factory = getDomainFactory();

		Service domServ = (Service) factory.getDomainObject(Service.class, serviceLiteVo.getID_Service());
		ServiceVo serviceVo = ServiceVoAssembler.create(domServ);

		if (serviceVo.getSpecialty() == null)
			return null;

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		StringBuffer condStr = new StringBuffer();
		String hql = " select proc from ProcedureHotlist phot left join phot.hotlistItem as pitem left join pitem.procedure as proc ";
		String andStr = " ";

		if (serviceVo.getSpecialtyIsNotNull())
		{
			condStr.append(andStr + " phot.specialty.id = :specID");
			markers.add("specID");
			values.add(serviceVo.getSpecialty().getID());
			andStr = " and ";
		}

		condStr.append(andStr + " proc.procedureName like :pName");
		markers.add("pName");
		values.add("%" + procedureName + "%");
		andStr = " and ";

		condStr.append(andStr + " proc.isActive = :pAct");
		markers.add("pAct");
		values.add(Boolean.TRUE);

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		List pList = factory.find(hql, markers, values);
		if (pList.size() > 0)
			return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(pList);
		else
			return null;
	}

	public OrganisationVoCollection listOrganisations(OrgShortVo filter)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listOrganisation(null, true, true);
	}

	public LocationLiteVoCollection listLocationLite()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		return impl.listLocationLiteByName(null);
	}

	public CatsReferralWizardVo saveCatsReferral(CatsReferralWizardVo record) throws DomainInterfaceException, StaleObjectException
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.saveCatsReferral(record);
	}

	public LocationLiteVoCollection listLocationByOrganisation(OrganisationRefVo organisation, String name)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listLocationByOrganisation(organisation, name);
	}

	public ContractConfigForReferralDetailsComponentVoCollection listActiveContracts(OrganisationRefVo voOrgRef)
	{
		String hql = "from ContractConfig as cc where (cc.contractOrganisation.id = :orgID and cc.status.id = :active and cc.isRIE is null) order by upper(cc.contractName) asc";
		List<?> dos = getDomainFactory().find(hql,new String[]{"orgID", "active"},new Object[]{voOrgRef.getID_Organisation(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		if (dos == null || dos.size() == 0)
			return null;
		return ContractConfigForReferralDetailsComponentVoAssembler.createContractConfigForReferralDetailsComponentVoCollectionFromContractConfig(dos);
	}

	public ContractConfigRefVoCollection listAllContracts(OrganisationRefVo voOrgRef)
	{
		ReferralStatusList impl = (ReferralStatusList) getDomainImpl(ReferralStatusListImpl.class);
		return impl.listAllContracts(voOrgRef);
	}

	public OrganisationLiteVo getOrganisationByLocation(Integer locationId) 
	{
		ClinicList impl = (ClinicList) getDomainImpl(ClinicListImpl.class);
		return impl.getOrganisationByLocation(locationId);
	}

	//---------------------------------------------------------------------------------------------------------------------------------------------
	//	WDEV-12866
	//	Implemented functions needed to retrieve active ContractConfiguration records for current location
	//	fix: now the contracts for all organisations on the branch (up from provided location) are provided, not just the root organisation
	//---------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to list all active ContractConfiguration records for current location
	 * <br>This function will progress recursively backwards in tree to the root parent location, then by organisation,
	 * build a collection with all Organisations and the query for all active contracts for all Organisations in the collection
	 */
	public ContractConfigForReferralDetailsComponentVoCollection listActiveContractsForLocation(LocationRefVo location)
	{
		// If location is not provided
		if (location == null)
			return null;
		
		// Get root Location id
		Integer rootLocation = getRootLocationID(location.getID_Location());
		// Get the ID for all organisations on the branch up to root organisation
		ArrayList<Integer> organisations = listParentOrganisations(rootLocation);

		// If no organisations are found then return null
		if (organisations == null || organisations.size() == 0)
			return null;
		
		// Build query to retrieve all active contract for the organisations on the branch
		StringBuilder query = new StringBuilder();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("SELECT contract FROM ContractConfig AS contract WHERE contract.status.id = :ACTIVE AND contract.contractOrganisation.id IN (");
		paramNames.add("ACTIVE");
		paramValues.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
		
		String separator = "";
		
		for (int i = 0; i < organisations.size(); i++)
		{
			query.append(separator);
			query.append(organisations.get(i));
			
			separator = ", ";
		}
		
		query.append(") ORDER BY UPPER(contract.contractName) ASC");

		// Return the query results
		return ContractConfigForReferralDetailsComponentVoAssembler.createContractConfigForReferralDetailsComponentVoCollectionFromContractConfig(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	
	/**
	 *	This function will return the id of the top most location in the branch
	 *	It will recursively attempt to return the parent of provided location,
	 *	until it finds a location without a parent
	 *	If the provided location is null then it will return null 
	 */
	private Integer getRootLocationID(Integer location)
	{
		if (location == null)
			return null;
		
		Integer parentLocation = getParentLocationID(location);
		
		if (parentLocation != null)
			return getRootLocationID(parentLocation);
		
		return location;
	}

	/**
	 * This function will return the parent location for provided location id 
	 */
	private Integer getParentLocationID(Integer location)
	{
		String query = "select parentLocation from Location as parentLocation left join parentLocation.locations as loc where loc.id = " + location;
		Location result = (Location) getDomainFactory().findFirst(query);
		
		if (result == null)
			return null;
		
		return result.getId();
	}

	/**
	 * This function will return the list with the ID for all Organisation records on the branch for provided
	 * location all the way to the top
	 */
	private ArrayList<Integer> listParentOrganisations(Integer rootLocation)
	{
		ArrayList<Integer> organisations = null;
		
		String query = "select org from Organisation as org left join org.locationSites as loc where loc.id = " + rootLocation;
		
		Organisation organisation = (Organisation) getDomainFactory().findFirst(query);

		if (organisation != null)
		{
			organisations = new ArrayList<Integer>();
			organisations.add(organisation.getId());
			
			return listParentOrganisationsForOrganisation(organisation, organisations);
		}
		
		return organisations;
	}

	/**
	 * This function will recursively step from organisation to it's parent organisation all the way to the top
	 * and add their ID to organisation list 
	 */
	private ArrayList<Integer> listParentOrganisationsForOrganisation(Organisation organisation, ArrayList<Integer> organisations)
	{
		if (organisation == null)
			return organisations;
		
		if (organisation.getParentOrganisation() != null)
		{
			organisations.add(organisation.getParentOrganisation().getId());
			
			return listParentOrganisationsForOrganisation(organisation.getParentOrganisation(), organisations);
		}
		
		return organisations;
	}

	//wdev-13647
	public ContractServiceLocationsConfigVoCollection listLocationServiceByContract(ContractConfigRefVo contract) 
	{
		if(contract == null)
			return null;
		String hql = "from ContractConfig as c1_1 where (c1_1.id = :ContractId) ";
		List<?> dos = getDomainFactory().find(hql,new String[]{"ContractId"},new Object[]{contract.getID_ContractConfig()});
		if (dos != null && dos.size() > 0)
		{
			ContractConfigurationVoCollection contrVoColl = ContractConfigurationVoAssembler.createContractConfigurationVoCollectionFromContractConfig(dos);
			if(contrVoColl != null && contrVoColl.size() > 0)
				return contrVoColl.get(0).getServiceLocations();  
		}
		
		return null;
	}

	//wdev-13647
	public ContractServiceLocationsConfigVoCollection listLocationServiceByContractAndService(ContractConfigRefVo contract, ServiceRefVo service) 
	{
		if(contract == null || service == null)
			return null;
		String hql = "from ContractConfig as c1_1 where (c1_1.id = :ContractId) ";
		List<?> dos = getDomainFactory().find(hql,new String[]{"ContractId"},new Object[]{contract.getID_ContractConfig()});
		if (dos != null && dos.size() > 0)
		{
			ContractConfigurationVoCollection contrVoColl = ContractConfigurationVoAssembler.createContractConfigurationVoCollectionFromContractConfig(dos);
			if(contrVoColl != null && contrVoColl.size() > 0)
				return getContractServiceLocationsByServiceId(contrVoColl.get(0).getServiceLocations(),service);  
		}
		
		return null;
	}
	//wdev-13647
	private ContractServiceLocationsConfigVoCollection getContractServiceLocationsByServiceId(ContractServiceLocationsConfigVoCollection tempVoColl, ServiceRefVo service)
	{
		ContractServiceLocationsConfigVoCollection servLocVoColl = new ContractServiceLocationsConfigVoCollection();
		if(tempVoColl == null || service == null)
			return null;
		for(int i = 0;i < tempVoColl.size();i++ )
		{
			ContractServiceLocationsConfigVo tempVo = tempVoColl.get(i);
			if(tempVo == null)
				continue;
			if(tempVo.getService() != null && service.getID_Service().equals(tempVo.getService().getID_Service()))
				servLocVoColl.add(tempVo);
		}
		return servLocVoColl;
		
	}

	public LocSiteVo getPatientSurgery(PatientRefVo voPatientRef) 
	{
		DomainFactory factory = getDomainFactory();
		Patient pat = null;
		IMSCriteria imsc = new IMSCriteria(Patient.class, factory);
		imsc.equal("id", voPatientRef.getID_Patient());
		List patients = imsc.find();
		if (patients != null && patients.size() > 0)
		{
			pat = (Patient) patients.get(0);
			if (pat.getGpSurgery() != null)
				return LocSiteVoAssembler.create(pat.getGpSurgery());
			else
				return null;
		}
		return null;
	}

	//WDEV-18904
	public PatientWithGPForCCGVo getPatientWithGp(PatientRefVo patientRef)
	{
		if (patientRef == null || patientRef.getID_Patient() == null)
			return null;
		
		PatientWithGPForCCGVo patientWithGP = (PatientWithGPForCCGVo) PatientWithGPForCCGVoAssembler.create((ims.core.patient.domain.objects.Patient) getDomainFactory().getDomainObject(ims.core.patient.domain.objects.Patient.class, patientRef.getID_Patient()));
		
		return patientWithGP;
	}
	
	@SuppressWarnings("unchecked")
	public String getCCGCodeFromPostCode(String postCode)
	{
		if (postCode == null || postCode.length() == 0)
			return null;

		postCode = postCode.replace(" ","");
		String ccgQuery = "SELECT MAX(ccg.cCGCode) FROM CCGPCTPCCodes AS ccg WHERE REPLACE(ccg.postcode, ' ','') = :POST_CODE";
		List<String> ccgCodes = getDomainFactory().find(ccgQuery, "POST_CODE", postCode);

		if (ccgCodes != null && ccgCodes.size() > 0)
			return (String) ccgCodes.get(0);
		
		return null;
	}

	public Boolean hasActiveReferralForService(PatientRefVo patient, ServiceRefVo service, Date firstDate, Date lastDate)
	{
		if (patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("Parameter patient must be a patient record.");
		
		if (service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("Parameter service must be a service record.");
		
		
		StringBuilder query = new StringBuilder("SELECT COUNT(ref.id) ");
		query.append("FROM CatsReferral AS ref LEFT JOIN ref.patient AS patient LEFT JOIN ref.referralDetails AS details LEFT JOIN details.service AS service LEFT JOIN ref.currentStatus AS curStat LEFT JOIN curStat.referralStatus AS refStatus ");
		query.append("WHERE patient.id = :PATIENT_ID AND service.id = :SERVICE_ID AND (refStatus.id <> :CANCELLED_REFERRAL AND refStatus.id <> :END_OF_CARE_REFERRAL ) ");
		query.append("AND details.dateOfReferral >= :FIRST_DATE AND details.dateOfReferral <= :LAST_DATE ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("PATIENT_ID");		paramValues.add(patient.getID_Patient());
		paramNames.add("SERVICE_ID");		paramValues.add(service.getID_Service());
		
		paramNames.add("CANCELLED_REFERRAL");		paramValues.add(ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.getID());
		paramNames.add("END_OF_CARE_REFERRAL");		paramValues.add(ReferralApptStatus.END_OF_CARE.getID());
		
		paramNames.add("FIRST_DATE");				paramValues.add(firstDate.getDate());
		paramNames.add("LAST_DATE");				paramValues.add(lastDate.getDate());
		

		long count = getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));
		
		return count > 0;
	}

	//WDEV-19700
	public CancerTypeConfigVo getCancerTypeConfig()
	{
		CancerTypeConfig impl = (CancerTypeConfig)getDomainImpl(CancerTypeConfigImpl.class);
		return impl.getCancerTypeConfig();
	}

	//wdev-20056
	public ReferralSourceUrgencyVoCollection getSourceOfReferralConfigVoColl()
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ReferralSourceUrgency");
		List<?> list = factory.find(hql.toString());
		if( list != null && list.size() > 0 )
			return ReferralSourceUrgencyVoAssembler.createReferralSourceUrgencyVoCollectionFromReferralSourceUrgency(list);
		
		
		return null;
	}

	public Hcp getHCP(IMos hcpRef)
	{
		if(hcpRef == null || hcpRef.getIMosHcpId() == null)
			return null;
		
		return HcpAssembler.create((ims.core.resource.people.domain.objects.Hcp) getDomainFactory().getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, hcpRef.getIMosHcpId()));
	}

	public ServiceLiteVoCollection listServicesByContract(ContractConfigRefVo contractConfig)
	{
		if(contractConfig == null || contractConfig.getID_ContractConfig() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		// WDEV-21265 select distinct service as could be multiple returned per location configuration, these are filtered at front end, but this prevents > 200 rows returned error
		String query = "select distinct s from ContractConfig as cc left join cc.serviceLocations as sl left join sl.service as s where cc.id = :ContractConfig and s.isActive = 1";
		
		List doServices = factory.find(query, new String[] {"ContractConfig"}, new Object[] {contractConfig.getID_ContractConfig()});

		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(doServices);
	}

	/**
	 * WDEV-21265
	 * listServicesByContractAndWilcard
	 * This method will return the list of services for the given contract matching the wildcard value specified.
	 * @param contractConfig
	 * @param wildcardService
	 * @return
	 */
	public ServiceLiteVoCollection listServicesByContractAndWildcard(ContractConfigRefVo contractConfig, String wildcardService, Boolean isEmergencyAdmission) 
	{
		if(contractConfig == null || contractConfig.getID_ContractConfig() == null)
		{
			if(Boolean.TRUE.equals(isEmergencyAdmission))
			{
				return listServicesForEmergencyAdmission(wildcardService);
			}
			
			return null;
		}
		
		DomainFactory factory = getDomainFactory();
		
		List doServices=null;
		// WDEV-21265 select distinct service as could be multiple returned per location configuration, these are filtered at front end, but this prevents > 200 rows returned error
		StringBuffer query = new StringBuffer("select distinct s from ContractConfig as cc left join cc.serviceLocations as sl left join sl.service as s, ReferralService as rs left join rs.referralServices as rs1 where cc.id = :ContractConfig and s.isActive = 1 and s.id = rs1.id "); //WDEV-22951
		if (wildcardService != null)
		{
			query.append(" and s.upperName like :wildcardService order by s.upperName asc ");
			doServices = factory.find(query.toString(), new String[] {"ContractConfig", "wildcardService"}, new Object[] {contractConfig.getID_ContractConfig(), wildcardService.toUpperCase() + "%"});
		}
		else
		{
			query.append(" order by s.upperName asc ");
			doServices = factory.find(query.toString(), new String[] {"ContractConfig"}, new Object[] {contractConfig.getID_ContractConfig()});
		}

		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(doServices);
	}
	
	private ServiceLiteVoCollection listServicesForEmergencyAdmission(String name)
	{
		ServiceConfiguration domainImpl = (ServiceConfiguration) getDomainImpl(ServiceConfigurationImpl.class);
		return domainImpl.listServices(name, ServiceCategory.CLINICAL, null, true);
	}

	//wdev-20727
	public ServiceFunctionLiteVoCollection listServiceFunctionByService(ServiceRefVo service)
	{
		if(service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("service parameter is null or id not provided in method listServiceFunctionByService");
		
		DomainFactory factory = getDomainFactory();
		List servFuncs = factory.find("from ServiceFunction as servFunc where servFunc.service.id = :idService and servFunc.isActive = 1",new String[]{"idService"}, new Object[]{service.getID_Service()});
		return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(servFuncs);
	}

	public LocationLiteVoCollection listLocationByContractAndService(ContractConfigRefVo contract, ServiceRefVo service)
	{
		if(contract == null || contract.getID_ContractConfig() == null)
			return null;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		DomainFactory factory = getDomainFactory();
		
		String query = "select loc from ContractConfig as cc left join cc.serviceLocations as sl left join sl.service as s left join sl.location as loc where cc.id = :ContactId ";
		
		paramNames.add("ContactId");				
		paramValues.add(contract.getID_ContractConfig());
		
		if(service != null)
		{
			query += " and s.id = :ServiceId ";
			paramNames.add("ServiceId");				
			paramValues.add(service.getID_Service());
		}
		
		query += " order by loc.upperName asc";
		
		List<?> doLocations = factory.find(query, paramNames, paramValues);
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(doLocations);
	}
	
	//WDEV-21767 
	public String getCCGCodeForCurrentLocationOrg(ILocation iLoc)
	{
		BedAdmissionComponent impl = (BedAdmissionComponent) getDomainImpl(BedAdmissionComponentImpl.class);
		return impl.getCCGCodeForCurrentLocationOrg(iLoc);
	}

	
	public void updateReferralDate(Date newDate, CatsReferralRefVo referral) throws StaleObjectException
	{
		RTTManagement impl = (RTTManagement) getDomainImpl(RTTManagementImpl.class);
		impl.updateReferralDate(newDate, referral);
		
	}
}
