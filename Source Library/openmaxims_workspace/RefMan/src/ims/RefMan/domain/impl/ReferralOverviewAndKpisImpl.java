//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.65 build 3201.21898)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.ArrayList;

import ims.RefMan.domain.base.impl.BaseReferralOverviewAndKpisImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralForLinkRefVo;
import ims.RefMan.vo.CatsReferralForOverviewVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.domain.CatsReferralForLinkRefVoAssembler;
import ims.RefMan.vo.domain.CatsReferralForOverviewVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

public class ReferralOverviewAndKpisImpl extends BaseReferralOverviewAndKpisImpl
{

	private static final long serialVersionUID = 1L;

	public CatsReferralForOverviewVo getCatsReferral(CatsReferralRefVo catsReferralRef) 
	{
		if(catsReferralRef == null || catsReferralRef.getID_CatsReferral() == null)
			throw new DomainRuntimeException("CatsReferralRefVo not provided for get call. ");
		
		DomainFactory factory = getDomainFactory();
		
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, catsReferralRef.getID_CatsReferral());
		
		return CatsReferralForOverviewVoAssembler.create(doCatsReferral);
	}

	//wdev-20721
	public CatsReferralForLinkRefVo getParentCatsReferralByChild(CatsReferralRefVo catsRef)
	{
		if( catsRef == null)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT p1_1 FROM ");
		query.append(" CatsReferral as p1_1 left join p1_1.linkedReferrals as l1_1 left join l1_1.referral as c1_1  left join l1_1.referralRelationType as l2_1 ");
		query.append(" WHERE( (c1_1.isRIE = 0 OR c1_1.isRIE is null) and l1_1.referral.id = :childCatsReferralID) ");
				
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("childCatsReferralID");		paramValues.add(catsRef.getID_CatsReferral());
		//paramNames.add("ActionType");				paramValues.add(actionType.getID());
		
		CatsReferral catsReferral = (CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
		return CatsReferralForLinkRefVoAssembler.create(catsReferral);
	}

	public CatsReferralForLinkRefVo getParentCatsRef(CatsReferralRefVo catsRef)
	{
		if(catsRef == null || catsRef.getID_CatsReferral() == null)
			throw new DomainRuntimeException("CatsReferralRefVo not provided for get call. ");
		
		DomainFactory factory = getDomainFactory();
		
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, catsRef.getID_CatsReferral());
		
		return CatsReferralForLinkRefVoAssembler.create(doCatsReferral);
	
	}
}
