//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.base.impl.BaseEmergencyTheatreWorklistImpl;
import ims.core.domain.PendingEmergencyTheatreWorklist;
import ims.core.domain.impl.PendingEmergencyTheatreWorklistImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.StaleObjectException;
import ims.scheduling.vo.PendingEmergencyTheatreListVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.PendingEmergencyTheatreWorklistSearchCriteriaVo;

public class EmergencyTheatreWorklistImpl extends BaseEmergencyTheatreWorklistImpl
{

	private static final long serialVersionUID = 1L;

	public LocationLiteVoCollection listActiveHospitals(String name)
	{
		PendingEmergencyTheatreWorklist impl  = (PendingEmergencyTheatreWorklist) getDomainImpl(PendingEmergencyTheatreWorklistImpl.class);
		return impl.listActiveHospitals(name);
	}

	public LocationLiteVoCollection getWardsForHospital(ims.core.resource.place.vo.LocationRefVo location, String name)
	{
		if (location == null)
			return null;
		
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveWardsForHospitalByNameLite(location, name);
	}

	public PendingEmergencyTheatreListVoCollection listPendingEmergencyTheatreRecords(PendingEmergencyTheatreWorklistSearchCriteriaVo searchCriteria)
	{
		PendingEmergencyTheatreWorklist impl  = (PendingEmergencyTheatreWorklist) getDomainImpl(PendingEmergencyTheatreWorklistImpl.class);
		return impl.listPendingEmergencyTheatreRecords(searchCriteria);
	}
	
	public PatientShort getPatientShort(PatientRefVo patient)
	{
		PendingEmergencyTheatreWorklist impl  = (PendingEmergencyTheatreWorklist) getDomainImpl(PendingEmergencyTheatreWorklistImpl.class);
		return impl.getPatientShort(patient);
	}

	public PendingEmergencyTheatreVo getPendingEmergencyTheatre(PendingEmergencyTheatreRefVo pendingEmergencyTheatre)
	{
		PendingEmergencyTheatreWorklist impl  = (PendingEmergencyTheatreWorklist) getDomainImpl(PendingEmergencyTheatreWorklistImpl.class);
		return impl.getPendingEmergencyTheatre(pendingEmergencyTheatre);
	}

	public void savePendingEmergencyTheatre(PendingEmergencyTheatreVo pendingEmergencyTheatre) throws StaleObjectException
	{
		PendingEmergencyTheatreWorklist impl  = (PendingEmergencyTheatreWorklist) getDomainImpl(PendingEmergencyTheatreWorklistImpl.class);
		impl.savePendingEmergencyTheatre(pendingEmergencyTheatre);		
	}
}
