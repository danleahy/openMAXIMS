//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5332.26009)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseCodedRecordCcImpl;
import ims.RefMan.domain.objects.ReferralCoding;
import ims.RefMan.vo.ReferralExternalCodingVo;
import ims.RefMan.vo.domain.ReferralExternalCodingVoAssembler;
import ims.clinical.vo.lookups.HistologyStatus;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.ConsultantStay;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.vo.AdmissionDetailRefVo;
import ims.core.admin.pas.vo.DischargedEpisodeRefVo;
import ims.core.admin.pas.vo.InpatientEpisodeRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.Iterator;
import java.util.Set;

public class CodedRecordCcImpl extends BaseCodedRecordCcImpl
{
	private static final long serialVersionUID = 1L;

	public void saveHistology(ReferralExternalCodingVo referralCoding, AdmissionDetailRefVo admission, DischargedEpisodeRefVo discharged, InpatientEpisodeRefVo inpatientEpisode) throws StaleObjectException
	{
		if(referralCoding == null)
			throw new CodingRuntimeException("Cannot save a null ConsultantStayForPatientCodingListVo.");
		
		if(!referralCoding.isValidated())
			throw new CodingRuntimeException("ConsultantStayForPatientCodingListVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		ReferralCoding doReferralCoding = ReferralExternalCodingVoAssembler.extractReferralCoding(factory, referralCoding);
		
		factory.save(doReferralCoding);
		
		Set listCs = null;
		if(discharged != null && discharged.getID_DischargedEpisode() != null)
		{
			DischargedEpisode doDischarged = (DischargedEpisode) factory.getDomainObject(DischargedEpisode.class, discharged.getID_DischargedEpisode());
			listCs = doDischarged.getConsultantStays();
		}
		else if(inpatientEpisode != null && inpatientEpisode.getID_InpatientEpisode() != null)
		{
			InpatientEpisode doInpatient = (InpatientEpisode) factory.getDomainObject(InpatientEpisode.class, inpatientEpisode.getID_InpatientEpisode());
			listCs = doInpatient.getConsultantStays();
		}
		
		if(listCs != null)
		{
			HistologyStatus status = null;
			
			int received = 0;
				
			Iterator it = listCs.iterator();
			while(it.hasNext())
			{
				Object item = it.next();
					
				if(!(item instanceof ConsultantStay))
					continue;
					
				ConsultantStay csRec = (ConsultantStay) item;
					
				if(csRec.getHistologyStatus() == null)
					continue;
					
				if(csRec.getHistologyStatus().getId() == HistologyStatus.AWAITING.getID())
				{
					status = HistologyStatus.AWAITING;
					break;
				}
					
				if(csRec.getHistologyStatus().getId() == HistologyStatus.RECEIVED.getID())
				{
					received++;
				}
			}
				
			if(status == null)
			{
				if(received == listCs.size())
				{
					status = HistologyStatus.RECEIVED;
				}
				else
				{
					status = HistologyStatus.AWAITING;
				}
			}
			
			if(status != null && admission != null && admission.getID_AdmissionDetail() != null)
			{
				AdmissionDetail doAdmission = (AdmissionDetail) factory.getDomainObject(AdmissionDetail.class, admission.getID_AdmissionDetail());
				doAdmission.setHistologyStatus(getDomLookup(status));
				factory.save(doAdmission);
			}
		}
	}
}
