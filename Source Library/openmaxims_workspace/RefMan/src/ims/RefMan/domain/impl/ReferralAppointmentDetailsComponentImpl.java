//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3196.15076)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.PatientSearchConfiguration;
import ims.admin.domain.impl.PatientSearchConfigurationImpl;
import ims.admin.vo.PDSConfigurationVo;
import ims.RefMan.domain.BookAppointment;
import ims.RefMan.domain.ClinicList;
import ims.RefMan.domain.ElectiveListAddLaterDialog;
import ims.RefMan.domain.base.impl.BaseReferralAppointmentDetailsComponentImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.OrderInvApptListVo;
import ims.RefMan.vo.PatientElectiveListAddLaterVo;
import ims.RefMan.vo.PatientElectiveListAddLaterVoCollection;
import ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.PatientElevectiveListManagementVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.domain.CatsReferralCurrentStatusVoAssembler;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.domain.OrderInvApptListVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListAddLaterVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListForReferralDetailsVoAssembler;
import ims.RefMan.vo.domain.PatientElevectiveListManagementVoAssembler;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.domain.objects.PeriOpAnaesthticSignInTim;
import ims.clinical.domain.objects.PeriOpPatientArrivedTime;
import ims.clinical.domain.objects.PeriOpPatientLeftTheatre;
import ims.clinical.domain.objects.PeriOpPatientSentTime;
import ims.clinical.domain.objects.PeriOpReadyForDischargeTi;
import ims.clinical.domain.objects.PeriOpReadyForSurgeryTime;
import ims.clinical.domain.objects.PeriOpSafetyBriefTime;
import ims.clinical.domain.objects.PeriOpSurgeryStartTime;
import ims.clinical.domain.objects.PeriOpSurgeryStopTime;
import ims.clinical.domain.objects.PeriOpTimeOutComplete;
import ims.clinical.domain.objects.PeriOpTimeOutOfRecoveryTi;
import ims.clinical.vo.PeriOpAnaesthticSignInTimVo;
import ims.clinical.vo.PeriOpPatientArrivedTimeVo;
import ims.clinical.vo.PeriOpPatientLeftTheatreVo;
import ims.clinical.vo.PeriOpPatientSentTimeVo;
import ims.clinical.vo.PeriOpReadyForDischargeVo;
import ims.clinical.vo.PeriOpReadyForSurgeryTimeVo;
import ims.clinical.vo.PeriOpSafetyBriefTimeVo;
import ims.clinical.vo.PeriOpSurgeryStartTimeVo;
import ims.clinical.vo.PeriOpSurgeryStopTimeVo;
import ims.clinical.vo.PeriOpTimeOutCompleteVo;
import ims.clinical.vo.PeriOpTimeOutOfRecoveryVo;
import ims.clinical.vo.domain.PeriOpAnaesthticSignInTimVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientArrivedTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientLeftTheatreVoAssembler;
import ims.clinical.vo.domain.PeriOpPatientSentTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForDischargeVoAssembler;
import ims.clinical.vo.domain.PeriOpReadyForSurgeryTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSafetyBriefTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStartTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpSurgeryStopTimeVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutCompleteVoAssembler;
import ims.clinical.vo.domain.PeriOpTimeOutOfRecoveryVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.domain.PDSDemographics;
import ims.core.domain.impl.PDSDemographicsImpl;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MissingMappingVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceFunctionLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.PollStatus;
import ims.core.vo.lookups.QueueType;
import ims.core.vo.lookups.ServiceFunction;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppRole;
import ims.hl7adtout.domain.objects.ElectiveListMessageQueue;
import ims.ocrr.domain.ImportResultsCategory;
import ims.ocrr.domain.impl.ImportResultsCategoryImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ImportResultsConfigVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection;
import ims.ocrr.vo.domain.ReferralAppointmentDetailsOrderInvestigationVoAssembler;
import ims.ocrr.vo.domain.SpecimenWorkListItemLiteVoAssembler;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderMessageStatus;
import ims.scheduling.domain.AppointmentOutcomeDialog;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.PatientAppointmentManagement;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.TheatreSessionManagement;
import ims.scheduling.domain.impl.AppointmentOutcomeDialogImpl;
import ims.scheduling.domain.impl.OCSExternalEventsImpl;
import ims.scheduling.domain.impl.PatientAppointmentMangementRefManImpl;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.impl.TheatreSessionManagementImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.FutureAppointmentDetails;
import ims.scheduling.domain.objects.PendingEmergencyTheatre;
import ims.scheduling.domain.objects.Sch_Booking;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.FutureAppointmentDetailsRefVo;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.FutureAppointmentListVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreAppointmentVoCollection;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.domain.Appointment_StatusVoAssembler;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.domain.FutureAppointmentDetailsVoAssembler;
import ims.scheduling.vo.domain.FutureAppointmentListVoAssembler;
import ims.scheduling.vo.domain.PendingEmergencyTheatreAppointmentVoAssembler;
import ims.scheduling.vo.domain.PendingEmergencyTheatreVoAssembler;
import ims.scheduling.vo.lookups.CancelAppointmentReason;
import ims.scheduling.vo.lookups.FutureAppointmentSource;
import ims.scheduling.vo.lookups.Status_Reason;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class ReferralAppointmentDetailsComponentImpl extends BaseReferralAppointmentDetailsComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getBookingAppointment
	*/
	public ims.scheduling.vo.Booking_AppointmentVo getBookingAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
		return impl.getBookingAppointment(appt);
	}

	public SessionServiceAndSlotActivityVo getServiceAndActivityByAppt(Booking_AppointmentRefVo appt, Boolean isFlexible)
	{
		PatientAppointmentManagement impl = (PatientAppointmentManagement) getDomainImpl(PatientAppointmentMangementRefManImpl.class);
		return impl.getServiceAndActivityByAppt(appt, isFlexible);
	}

	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws DomainInterfaceException, StaleObjectException
	{
		ClinicList impl = (ClinicList) getDomainImpl(ClinicListImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	public CatsReferralVo getCatsReferral(CatsReferralRefVo voCatsRef) 
	{
		return CatsReferralVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral()));
	}

	public CatsReferralVo saveCatsReferral(CatsReferralVo record) throws DomainInterfaceException, StaleObjectException 
	{
		if(record == null)
			throw new DomainRuntimeException("Invalid referral wizard to save");
		if(!record.isValidated())
			throw new DomainRuntimeException("Record not validated before save");
		
		DomainFactory factory = getDomainFactory();
		CatsReferral domainObject = CatsReferralVoAssembler.extractCatsReferral(factory, record);		
		factory.save(domainObject);
		return CatsReferralVoAssembler.create(domainObject);
	}

	/**
	 *  List all SpecimenWorkListItems for the CatsReferral.investigationOrders.Investigations of type pathology that have 'ward' and 'datetocollect' as null and status is not cancelled
	 */
	public SpecimenWorkListItemLiteVoCollection listSpecimenWorKlistItemsForCatsReferral(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method listSpecimenWorKlistItemsForCatsReferral");
			
		DomainFactory factory = getDomainFactory();
		
		//specWork.dateToCollect is null and specWork.ward is null and 
		
		String hql = "from SpecimenWorkListItem specWork where specWork.specimen.id in (select ordInv.specimen.id from CatsReferral as cats join cats.investigationOrders as ord join ord.investigations as ordInv join ordInv.investigation as inv " +
				" where inv.investigationIndex.category = :category and cats.id = :idCatsRef and ordInv.ordInvCurrentStatus.ordInvStatus <> :status)";
		
		List<?> doWorkListItems =  factory.find(hql, new String[]{"category","idCatsRef","status"} , new Object[]{getDomLookup(Category.PATHOLOGY), catsReferral.getID_CatsReferral(), getDomLookup(Status_Reason.CANCELLED)});
		return SpecimenWorkListItemLiteVoAssembler.createSpecimenWorkListItemLiteVoCollectionFromSpecimenWorkListItem(doWorkListItems);
	}
	
	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		updateCatsReferralAdditionalInvStatus(catsReferral, null);
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo appt) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral, appt);
	}

	public void saveOrderInv(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv) throws StaleObjectException
	{
		if(voOrderInv == null)
			throw new CodingRuntimeException("voOrderInv is null in method saveOrderInv");
		
		DomainFactory factory = getDomainFactory();
		OrderInvestigation doOrderInv = ReferralAppointmentDetailsOrderInvestigationVoAssembler.extractOrderInvestigation(factory, voOrderInv);		
		factory.save(doOrderInv);
	}

	public ImportResultsConfigVo getImportResultsConfig() {
		ImportResultsCategory impl = (ImportResultsCategory) getDomainImpl(ImportResultsCategoryImpl.class);
		return impl.getImportResultsConfig();
	}

	public void saveOrdInvApptAndUpdateCatsReferral(OrderInvApptListVo ordInvAppt, CatsReferralRefVo catsRef) throws StaleObjectException
	{
		if(ordInvAppt == null)
			throw new CodingRuntimeException("ordInvAppt is null in method saveOrdInvAppt");
		
		//store new appointment to set back after assembler call
		Booking_AppointmentRefVo voNewAppt = ordInvAppt.getAppointment();
		DomainFactory factory = getDomainFactory();
		
		//retrieve current ordInvAppt record
		OrderInvAppt doCurrentOrdInvAppt = null;
		if(ordInvAppt.getID_OrderInvApptIsNotNull())
			doCurrentOrdInvAppt = (OrderInvAppt) factory.getDomainObject(ordInvAppt);
				
		OrderInvAppt doNewOrderInvAppt = null;
		//If the Cancel has not yet been processed by the OrderInvApptProcess Servlet need to call for current ordinvappt record
		if(doCurrentOrdInvAppt.getStatus() != null && doCurrentOrdInvAppt.getStatus().equals(getDomLookup(PollStatus.CANCELNOTPROCESSED)))
		{				
			OCSExternalEvents impl = (OCSExternalEvents)getDomainImpl(OCSExternalEventsImpl.class,factory.getDomainSession());	
			if(doCurrentOrdInvAppt.getAppointment() != null && doCurrentOrdInvAppt.getOrderInvestigation() != null)
			{
				impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doCurrentOrdInvAppt.getAppointment().getId(), doCurrentOrdInvAppt.getAppointment().getVersion()), new OrderInvestigationRefVo(doCurrentOrdInvAppt.getOrderInvestigation().getId(), doCurrentOrdInvAppt.getOrderInvestigation().getVersion()));
				doCurrentOrdInvAppt.setStatus(getDomLookup(PollStatus.CANCELPROCESSED));
			}
			else
				doCurrentOrdInvAppt.setStatus(getDomLookup(PollStatus.FAILED));
			
			factory.save(doCurrentOrdInvAppt);
		}
		//if was processed sucessfully then we want to reset the value for another possible cancel
		else if(doCurrentOrdInvAppt.getStatus() != null && doCurrentOrdInvAppt.getStatus().equals(getDomLookup(PollStatus.CANCELPROCESSED)))	
		{			
			doNewOrderInvAppt = OrderInvApptListVoAssembler.extractOrderInvAppt(factory, ordInvAppt);
			doNewOrderInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
		}
			
		//update the new domain OrderInvAppt record with the correct appointment
		if(doNewOrderInvAppt == null && doCurrentOrdInvAppt != null)	
		{
			ordInvAppt = OrderInvApptListVoAssembler.create(doCurrentOrdInvAppt);
			ordInvAppt.setAppointment(voNewAppt);
			doNewOrderInvAppt = OrderInvApptListVoAssembler.extractOrderInvAppt(factory, ordInvAppt);
		}
			
		//if was processed sucessfully then we want to reset the value for another possible cancel
		if(doNewOrderInvAppt != null)
		{
			if(doNewOrderInvAppt.getStatus() != null)
			{
				if(doNewOrderInvAppt.getStatus().equals(getDomLookup(PollStatus.CANCELPROCESSED)))
					doNewOrderInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
			}

			doNewOrderInvAppt.getOrderInvestigation().setAppointmentDate(doNewOrderInvAppt.getAppointment().getAppointmentDate());
			factory.save(doNewOrderInvAppt);
		}
						
		OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
		if(doNewOrderInvAppt != null && doNewOrderInvAppt.getAppointment() != null && doNewOrderInvAppt.getOrderInvestigation() != null)
			impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doNewOrderInvAppt.getAppointment().getId(), doNewOrderInvAppt.getAppointment().getVersion()), new OrderInvestigationRefVo(doNewOrderInvAppt.getOrderInvestigation().getId(), doNewOrderInvAppt.getOrderInvestigation().getVersion()));
		
		updateCatsReferralAdditionalInvStatus(catsRef, voNewAppt);
	}

	public TheatreProcedureServiceAndConsultantLiteVo getTheatreServiceProcedureAndConsultant(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreServiceProcedureAndConsultant");
		
		TheatreProcedureServiceAndConsultantLiteVo voPsc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(appt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voPsc = new TheatreProcedureServiceAndConsultantLiteVo();
			voPsc.setService(voService);
			voPsc.setProcedure(voProc);
			voPsc.setConsultant(voMos);
		}
		
		return voPsc;
	}

	public BookingAppointmentTheatreVo getTheatreAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreAppointment");
		
		return BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
	}

	public void updateCatsReferralCancelStatus(CatsReferralRefVo catsReferral) throws StaleObjectException //WDEV-19543
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralCancelStatus(catsReferral);	
	}

	public Appointment_StatusVoCollection listAppointmentHistory(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null)
			throw new CodingRuntimeException("Null appointment provided");
		if (!appointment.getID_Booking_AppointmentIsNotNull())
			throw new CodingRuntimeException("Appointment provided has a null ID");
		
		String hqlString = "select ah from Booking_Appointment as ba left join ba.apptStatusHistory as ah where	" +
				"(ba.id = :id) order by ah.systemInformation.creationDateTime desc"; 

		List<?> domObjs = getDomainFactory().find(hqlString,"id",appointment.getID_Booking_Appointment());
		if (domObjs == null || domObjs.size() == 0)
			return null;
		
		return Appointment_StatusVoAssembler.createAppointment_StatusVoCollectionFromAppointment_Status(domObjs);
	}

	public Boolean isReferralICPCompleted(CatsReferralRefVo catsReferral)
	{
		if (!ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		{
			return false;
		}
		if (catsReferral == null || !catsReferral.getID_CatsReferralIsNotNull())
			return false;
		String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.careContext as careC," +
				" CatsReferral as cats left join cats.careContext as catsCC " +
				"where (cats.id = :catsId and patICP.completedDateTime is not null and catsCC.id = careC.id)";
		long count = getDomainFactory().countWithHQL(hql,new String[]{"catsId"},new Object[]{catsReferral.getID_CatsReferral()});
		return count > 0;
	}

	//WDEV-18092 
	public PatientElectiveListForReferralDetailsVoCollection getWaitingListForReferral(CatsReferralRefVo referralRef)
	{
		if (referralRef == null)
			throw new CodingRuntimeException("Cannot get Waiting List on null Referral Id");

		String hqlString = "select list from PatientElectiveList as list left join list.referral as referral where referral.id = :ReferralId";

		List<?> list = getDomainFactory().find(hqlString, "ReferralId", referralRef.getID_CatsReferral());
		
		if (list == null || list.size() == 0)
			return null;

		return PatientElectiveListForReferralDetailsVoAssembler.createPatientElectiveListForReferralDetailsVoCollectionFromPatientElectiveList(list);
	}

	public void cancelTCI(PatientElectiveListRefVo patientWaitingListRef, TCIOutcomeForPatientElectiveListVo tciOutcome, Booking_AppointmentRefVo theatreApptThatIsNotCancelled) throws StaleObjectException
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		impl.cancelTCI(patientWaitingListRef, tciOutcome, theatreApptThatIsNotCancelled);
	}	
		
	//WDEV-19704 Create message queue trigger record(s) for each provider system for A38 HL7 message 
	public void triggerElectiveListEvent(PatientElectiveListVo patientElectiveList) throws StaleObjectException
	{	
		if(patientElectiveList != null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.ELECTIVELIST.getId()+")";

			java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				ElectiveListMessageQueue messageQueue = new ElectiveListMessageQueue();
				messageQueue.setPatientElectiveList((PatientElectiveList)factory.getDomainObject(patientElectiveList));
				messageQueue.setProviderSystem(providerSystem);
				messageQueue.setWasProcessed(Boolean.FALSE);
				messageQueue.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				messageQueue.setMsgType(getDomLookup(MsgEventType.A38));
				messageQueue.setQueueType(getDomLookup(QueueType.ELECTIVELIST));
				factory.save(messageQueue);
			}
		}
	}
	
	//WDEV-22845
	public void cancelTCIAndReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef, CancelAppointmentReason cancellationReason, String cancellationComments, Boolean isProviderCancellation,	Boolean isPatientCancellation, Boolean cancelledForNonmedicalReason) throws StaleObjectException //WDEV-18249
	{
		TheatreSessionManagement impl = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		impl.cancelTCIAndReferralEROD(catsReferral, apptRef, cancellationReason, cancellationComments, isProviderCancellation, isPatientCancellation, cancelledForNonmedicalReason);
	}	

	public Boolean thereAreActivePatientElectiveListsForCurrentCatsReferral(
			CatsReferralRefVo catsReferralVo) 
	{
		AppointmentOutcomeDialog impl = (AppointmentOutcomeDialog) getDomainImpl(AppointmentOutcomeDialogImpl.class);		
		return impl.thereAreActivePatientElectiveListsForCurrentCatsReferral(catsReferralVo);
	}

	//WDEV-18437
	public CatsReferralCurrentStatusVo getCatsReferralStatus(CatsReferralRefVo catsReferralRef)
	{
		if(catsReferralRef == null)
			throw new CodingRuntimeException("Cannot get ReferralStatus on null ReferralRef.");
		
		return CatsReferralCurrentStatusVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, catsReferralRef.getID_CatsReferral()));
	}

	public FutureAppointmentListVoCollection getFutureAppointmentsForReferral(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			return null; 
		
		List<?> list = getDomainFactory().find("select futureApp from FutureAppointmentDetails as futureApp left join futureApp.referral as catsReferral left join futureApp.source as source " +
				"where catsReferral.id = :referralID and source.id = :sourceID and (futureApp.isRIE = 0 or futureApp.isRIE is null)", 
				new String[] {"referralID", "sourceID"}, new Object[] {referral.getID_CatsReferral(), FutureAppointmentSource.APPOINTMENT_OUTCOME.getID()});
		
		if (list != null && list.size() > 0)
			return FutureAppointmentListVoAssembler.createFutureAppointmentListVoCollectionFromFutureAppointmentDetails(list);
		
		return null;
	}

	public void saveFutureAppointment(FutureAppointmentDetailsVo futureAppointment) throws StaleObjectException
	{
		if (futureAppointment == null)
			throw new CodingRuntimeException("Cannot save null Future Appointment");
		
		DomainFactory factory = getDomainFactory();
		
		FutureAppointmentDetails domAppt = FutureAppointmentDetailsVoAssembler.extractFutureAppointmentDetails(factory, futureAppointment);
		
		factory.save(domAppt);
		
	}

	public FutureAppointmentDetailsVo getFutureAppointmentDetails(FutureAppointmentDetailsRefVo futureAppt)
	{
		if (futureAppt == null || futureAppt.getID_FutureAppointmentDetails() == null)
			return null;
		
		return FutureAppointmentDetailsVoAssembler.create((FutureAppointmentDetails)getDomainFactory().getDomainObject(FutureAppointmentDetails.class, futureAppt.getID_FutureAppointmentDetails()));
	}

	public ServiceFunctionLiteVo getServiceFunction(ServiceRefVo service, ServiceFunction function)
	{
		if (service == null || service.getID_Service() == null || function == null)
			return null;
		
		List list = getDomainFactory().find("select servFunct from ServiceFunction as servFunct left join servFunct.service as serv left join servFunct.function as func where servFunct.isActive = 1 and serv.id = :serviceID and func.id = :functionID", 
				new String[] {"serviceID", "functionID"}, new Object[] {service.getID_Service(), function.getID()});
		
		if (list != null && list.size() > 0)
			return ServiceFunctionLiteVoAssembler.createServiceFunctionLiteVoCollectionFromServiceFunction(list).get(0);
		
		return null;
	}

	public PatientElevectiveListManagementVo getElectiveListManagement(PatientElectiveListRefVo electiveList)
	{
		if (electiveList == null || electiveList.getID_PatientElectiveList() == null)
			return null;
			
		return PatientElevectiveListManagementVoAssembler.create((PatientElectiveList)getDomainFactory().getDomainObject(PatientElectiveList.class, electiveList.getID_PatientElectiveList()));
	}

	public PendingEmergencyTheatreAppointmentVoCollection listPendingEmergencyTheatreRecords(CatsReferralRefVo catsReferral)
	{
		
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();

		String hql = "select PET from PendingEmergencyTheatre as PET left join PET.catsReferral as referral where referral.id = :referralID";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		
		markers.add("referralID");
		values.add(catsReferral.getID_CatsReferral());
		
		hql += (" order by PET.systemInformation.creationDateTime asc ");			
		
		return PendingEmergencyTheatreAppointmentVoAssembler.createPendingEmergencyTheatreAppointmentVoCollectionFromPendingEmergencyTheatre(factory.find(hql, markers, values));
	}

	public PendingEmergencyTheatreVo getPendingEmergencyTheatre(PendingEmergencyTheatreRefVo pendingEmergencyTheatre)
	{
		if (pendingEmergencyTheatre == null || pendingEmergencyTheatre.getID_PendingEmergencyTheatre() == null)
			return null;
		
		return PendingEmergencyTheatreVoAssembler.create((PendingEmergencyTheatre) getDomainFactory().getDomainObject(PendingEmergencyTheatre.class, pendingEmergencyTheatre.getID_PendingEmergencyTheatre()));
	}

	public void savePendingEmergencyTheatre(PendingEmergencyTheatreVo pendingEmergencyTheatre) throws StaleObjectException
	{
		if (pendingEmergencyTheatre == null)
			throw new CodingRuntimeException("Cannot save null Pending Emergency Theatre record");
		
		DomainFactory factory = getDomainFactory();
		
		PendingEmergencyTheatre domainPendingEmergencyTheatre = PendingEmergencyTheatreVoAssembler.extractPendingEmergencyTheatre(factory, pendingEmergencyTheatre);
		
		factory.save(domainPendingEmergencyTheatre);
		
	}
	
	//wdev-21043

	public PatientElectiveListAddLaterVoCollection saveWaitingListCard(PatientElectiveListAddLaterVo record) throws DomainInterfaceException, StaleObjectException
	{
		if( record == null)
			throw new CodingRuntimeException("Cannot save null PatientElectiveListAddLaterVo record");
		
		try
		{
			ElectiveListAddLaterDialog impl = (ElectiveListAddLaterDialog) getDomainImpl(ElectiveListAddLaterDialogImpl.class);
			impl.saveRecord(record);
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
		}
		
		return null;
	}

	public PatientElectiveListRefVo getPatientElectiveListForAppt(Booking_AppointmentRefVo appointment)
	{
		TheatreSessionManagement tsm = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		return tsm.getPatientElectiveListForAppt(appointment);
		
	}

	public PendingEmergencyTheatreRefVo getPendingEmergencyTheatreForAppt(Booking_AppointmentRefVo appointment)
	{
		TheatreSessionManagement tsm = (TheatreSessionManagement) getDomainImpl(TheatreSessionManagementImpl.class);
		return tsm.getPendingEmergencyTheatreForAppt(appointment);
		
	}

	public Patient updateLocalPatientWithPds(Patient lpiPatient, Patient pdsPatient, ArrayList errors, String samlXml, IAppRole appRole, MissingMappingVoCollection missingMappingVoCollection) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException 
	{
		PDSDemographics impl = (PDSDemographics) getDomainImpl(PDSDemographicsImpl.class);
		return impl.updateLocalPatientWithPds(lpiPatient, pdsPatient, errors, samlXml, appRole, missingMappingVoCollection);
	}

	public Patient getPatient(PatientShort patient) throws StaleObjectException 
	{
		PDSDemographics impl = (PDSDemographics) getDomainImpl(PDSDemographicsImpl.class);
		return impl.getPatient(patient);
	}


	public PDSConfigurationVo getPDSConfiguration() 
	{
		PatientSearchConfiguration impl = (PatientSearchConfiguration) getDomainImpl(PatientSearchConfigurationImpl.class);
		return impl.getPatientSearchConfig();		
	}

	//WDEV-22778
	public Boolean isAnyTimeRecordedAgainstCaseDetails(Booking_AppointmentRefVo appt)
	{
		if (appt == null)
			throw new CodingRuntimeException("appt is null in method isAnyTimeRecordedAgainstCaseDetails");
		
		PeriOpSafetyBriefTimeVo safetyBriefTime = PeriOpSafetyBriefTimeVoAssembler.create(PeriOpSafetyBriefTime.getPeriOpSafetyBriefTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (safetyBriefTime!=null)
			return true;
		
		PeriOpReadyForSurgeryTimeVo anaesRFS = PeriOpReadyForSurgeryTimeVoAssembler.create(PeriOpReadyForSurgeryTime.getPeriOpReadyForSurgeryTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (anaesRFS!=null)
			return true;
		
		PeriOpAnaesthticSignInTimVo anaesthticSignInTime = PeriOpAnaesthticSignInTimVoAssembler.create(PeriOpAnaesthticSignInTim.getPeriOpAnaesthticSignInTimFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (anaesthticSignInTime!=null)
			return true;
		
		PeriOpPatientArrivedTimeVo patientArrivedTime = PeriOpPatientArrivedTimeVoAssembler.create(PeriOpPatientArrivedTime.getPeriOpPatientArrivedTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (patientArrivedTime!=null)
			return true;
		
		PeriOpPatientLeftTheatreVo patientLeftTheatre = PeriOpPatientLeftTheatreVoAssembler.create(PeriOpPatientLeftTheatre.getPeriOpPatientLeftTheatreFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (patientLeftTheatre!=null)
			return true;
		
		PeriOpPatientSentTimeVo patientSentTime = PeriOpPatientSentTimeVoAssembler.create(PeriOpPatientSentTime.getPeriOpPatientSentTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (patientSentTime!=null)
			return true;
		
		PeriOpReadyForDischargeVo readyForDischarge = PeriOpReadyForDischargeVoAssembler.create(PeriOpReadyForDischargeTi.getPeriOpReadyForDischargeTiFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (readyForDischarge!=null)
			return true;
		
		PeriOpSurgeryStartTimeVo surgeryStartTime = PeriOpSurgeryStartTimeVoAssembler.create(PeriOpSurgeryStartTime.getPeriOpSurgeryStartTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (surgeryStartTime!=null)
			return true;
		
		PeriOpSurgeryStopTimeVo surgeryStopTime = PeriOpSurgeryStopTimeVoAssembler.create(PeriOpSurgeryStopTime.getPeriOpSurgeryStopTimeFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (surgeryStopTime!=null)
			return true;
		
		PeriOpTimeOutCompleteVo timeOutComplete = PeriOpTimeOutCompleteVoAssembler.create(PeriOpTimeOutComplete.getPeriOpTimeOutCompleteFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (timeOutComplete!=null)
			return true;
		
		PeriOpTimeOutOfRecoveryVo timeOutOfRecovery = PeriOpTimeOutOfRecoveryVoAssembler.create(PeriOpTimeOutOfRecoveryTi.getPeriOpTimeOutOfRecoveryTiFromTheatreAppointment(getDomainFactory(), appt.getID_Booking_Appointment()));
		if (timeOutOfRecovery!=null)
			return true;
		
		return false;
	}

	@Override
	public void updateBookingComment(Booking_AppointmentRefVo apptRefVo,String commentString) throws StaleObjectException//WDEV-23474
	{
		if (apptRefVo == null)
			return;
		
		DomainFactory domainFactory = getDomainFactory();
		DomainObject findFirst = domainFactory.findFirst("select sch from Sch_Booking as sch left join sch.appointments as appts where appts.id = :APPTID", new String[]{"APPTID"},new Object[]{apptRefVo.getID_Booking_Appointment()});
		
		if(findFirst!= null && findFirst instanceof Sch_Booking)
		{
			Sch_Booking booking = (Sch_Booking)findFirst;
			booking.setBookingComments(commentString);
			domainFactory.save(booking);
		}
			
		
	}	
}
