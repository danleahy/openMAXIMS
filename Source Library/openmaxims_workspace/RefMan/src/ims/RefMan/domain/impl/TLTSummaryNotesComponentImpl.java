//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3562.19378)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.RefMan.domain.base.impl.BaseTLTSummaryNotesComponentImpl;
import ims.RefMan.domain.objects.TltSummaryNote;
import ims.RefMan.vo.TltSummaryNoteRefVo;
import ims.RefMan.vo.TltSummaryNoteVoCollection;
import ims.RefMan.vo.domain.TltSummaryNoteVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

public class TLTSummaryNotesComponentImpl extends BaseTLTSummaryNotesComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listTLTSummaryNotes
	*/
	public ims.RefMan.vo.TltSummaryNoteVoCollection listTLTSummaryNotes(ims.RefMan.vo.CatsReferralRefVo catsRefVo)
	{
		if(catsRefVo == null || catsRefVo.getID_CatsReferral() == null) {
			throw new CodingRuntimeException("CatsReferralVo is null or id not provided");
		}
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select notes from TltSummaryNote as notes left join notes.catsReferral as cats ");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		hql.append("  where cats.id = :idCatsRefferal");
		names.add("idCatsRefferal");
		values.add(catsRefVo.getID_CatsReferral());	
				
		List result = factory.find(hql.toString(),names,values);
		
		if (result != null && result.size() > 0) {
			TltSummaryNoteVoCollection voColl = TltSummaryNoteVoAssembler.createTltSummaryNoteVoCollectionFromTltSummaryNote(result);
			if(voColl != null && voColl.size() > 0) 
			{
				voColl.sort(SortOrder.DESCENDING);
				return voColl;
			}
		}		
	
		return null;
	}

	/**
	* saveTLTSummaryNotes
	*/
	public ims.RefMan.vo.TltSummaryNoteVo saveTLTSummaryNotes(ims.RefMan.vo.TltSummaryNoteVo followUpNoteVo) throws ims.domain.exceptions.StaleObjectException
	{
		if(followUpNoteVo == null) {
			throw new CodingRuntimeException("FollowUpNoteVo is null");
		}	
		
		DomainFactory factory = getDomainFactory();
		TltSummaryNote dom = TltSummaryNoteVoAssembler.extractTltSummaryNote(factory, followUpNoteVo);
		factory.save(dom);
		
		return TltSummaryNoteVoAssembler.create(dom);
	}
	
	public ims.RefMan.vo.TltSummaryNoteVo getTLTNote(TltSummaryNoteRefVo note)
	{
		if (note == null)
			throw new RuntimeException("Cannot get FollowUpNoteVo for null FollowUpNoteRefVo");

		TltSummaryNote doTltSummaryNote = (TltSummaryNote) getDomainFactory().getDomainObject(TltSummaryNote.class, note.getID_TltSummaryNote());
		return TltSummaryNoteVoAssembler.create(doTltSummaryNote);		
	}	
}
