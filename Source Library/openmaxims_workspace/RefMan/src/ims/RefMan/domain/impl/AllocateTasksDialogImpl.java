//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3551.27961)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.ReferralStatusList;
import ims.RefMan.domain.base.impl.BaseAllocateTasksDialogImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.WorkAllocation;
import ims.RefMan.vo.CatsReferralListManualAssemblyVoCollection;
import ims.RefMan.vo.WorkAllocationVoCollection;
import ims.RefMan.vo.domain.WorkAllocationVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class AllocateTasksDialogImpl extends BaseAllocateTasksDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* save
	*/
	public Boolean saveAllocations(ims.RefMan.vo.WorkAllocationVoCollection voAllocations) throws ims.domain.exceptions.StaleObjectException
	{
		if(voAllocations == null)
			throw new CodingRuntimeException("Invalid voAllocations");
		if(!voAllocations.isValidated())
			throw new CodingRuntimeException("voAllocations not validated");
		
		DomainFactory factory = getDomainFactory();
		for (int i = 0 ; i < voAllocations.size() ; i++)
		{
			WorkAllocation domainObject = WorkAllocationVoAssembler.extractWorkAllocation(factory, voAllocations.get(i));
			factory.save(domainObject);
			
			//wdev-8480
			CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(voAllocations.get(i).getCatsReferral());
			if (voAllocations.get(i).getUnallocatedDateIsNotNull())
				doCatsReferral.setIsCurrentlyAllocated(Boolean.FALSE);
			else
				doCatsReferral.setIsCurrentlyAllocated(Boolean.TRUE);
			factory.save(doCatsReferral);
		}
		
		return true;
	}

	public ims.RefMan.vo.CatsReferralWizardVo getCatsReferral(ims.RefMan.vo.CatsReferralRefVo voCatsRef)
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	/**
	* list CATS referrals
	*/
	public CatsReferralListManualAssemblyVoCollection listCATSReferrals(ims.RefMan.vo.CATSReferralFilterVo voCATSFilter, Boolean bIncludeICPColumn, Boolean bIncludeELEColumn)
	{
		ReferralStatusList impl = (ReferralStatusList) getDomainImpl(ReferralStatusListImpl.class);
		return impl.listCATSReferrals(voCATSFilter, bIncludeICPColumn, false);
	}

	public WorkAllocationVoCollection listAllocatedTasks(String referralIDs) 
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer condStr = new StringBuffer();
		String hql = " from WorkAllocation as wa where wa.completedDateTime = null and wa.unallocatedDate = null and wa.catsReferral.id in ( " + referralIDs + " )";

		hql += condStr.toString();
		List dosList = factory.find(hql);
		
		return WorkAllocationVoAssembler.createWorkAllocationVoCollectionFromWorkAllocation(dosList);
	}

}
