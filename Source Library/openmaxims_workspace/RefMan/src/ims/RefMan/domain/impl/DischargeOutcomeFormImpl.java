//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseDischargeOutcomeFormImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ConsultationOutcome;
import ims.RefMan.vo.domain.ConsultationOutcomeVoAssembler;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.domain.ADT;
import ims.core.domain.impl.ADTImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.InpatientEpisodeVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.SortOrder;
import ims.icp.vo.PatientICPFullVo;
import ims.icp.vo.domain.PatientICPFullVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICP;

import java.util.List;

public class DischargeOutcomeFormImpl extends BaseDischargeOutcomeFormImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* save
	*/
	public ims.RefMan.vo.ConsultationOutcomeVo saveConsultationOutcome(ims.RefMan.vo.ConsultationOutcomeVo voConsultationOutcome) throws ims.domain.exceptions.StaleObjectException
	{
		if(voConsultationOutcome == null)
			throw new DomainRuntimeException("Invalid voConsultationOutcome to save");
		if(!voConsultationOutcome.isValidated())
			throw new DomainRuntimeException("Record not validated before save");
		
		DomainFactory factory = getDomainFactory();
		ConsultationOutcome domainObject = ConsultationOutcomeVoAssembler.extractConsultationOutcome(factory, voConsultationOutcome);		
		factory.save(domainObject);
		return ConsultationOutcomeVoAssembler.create(domainObject);
	}

	/**
	* Get
	*/
	public ims.RefMan.vo.ConsultationOutcomeVo getConsultationOutcome(ims.RefMan.vo.ConsultationOutcomeRefVo voConsOutcome)
	{
		DomainFactory factory = getDomainFactory();
		return ConsultationOutcomeVoAssembler.create((ConsultationOutcome) factory.getDomainObject(voConsOutcome));
	}

	public ims.RefMan.vo.ConsultationOutcomeVoCollection listAllConsultationOutcomesByCareContext(ims.core.admin.vo.CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();

		if (voCareContextRef != null && voCareContextRef.getID_CareContextIsNotNull())
		{
			java.util.List list = factory.find("from ConsultationOutcome ccOut where ccOut.careContext.id = :idCC", new String[]{"idCC"}, new Object[]{voCareContextRef.getID_CareContext()});
			return ConsultationOutcomeVoAssembler.createConsultationOutcomeVoCollectionFromConsultationOutcome(list).sort(SortOrder.DESCENDING);
		}

		return null;
	}

	public DischargedEpisodeVo dischargePatient(PatientShort patVo, DischargedEpisodeVo dischEpisVo, Boolean bFollowUp) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException
	{
		if(patVo == null)
			throw new DomainRuntimeException("Invalid PatientShort to save");
		if(!patVo.isValidated())
			throw new DomainRuntimeException("PatientShort Record not validated before save");
		if(dischEpisVo == null)
			throw new DomainRuntimeException("Invalid DischargedEpisodeVo to save");
		if(!dischEpisVo.isValidated())
			throw new DomainRuntimeException("DischargedEpisodeVo Record not validated before save");

		ADT implADT = (ADT)getDomainImpl(ADTImpl.class);
		implADT.dischargePatient(patVo, dischEpisVo,null);

		return null;
	}

	public InpatientEpisodeVo getInpatientEpisode(PatientRefVo patRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		ims.core.patient.domain.objects.Patient domPatient = (ims.core.patient.domain.objects.Patient)factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, patRefVo.getID_Patient().intValue());
			
		String hql = "from InpatientEpisode ip where ip.pasEvent.patient.id = :pat";
		List<?> l = factory.find(hql, new String[] {"pat"}, new Object[] {domPatient.getId()});		
		if (l != null && l.size() > 0)
			return InpatientEpisodeVoAssembler.create((InpatientEpisode) l.get(0));

		return null;
	}
}
