//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.vo.lookups.HardCodedEvents;
import ims.RefMan.domain.ContractConfiguration;
import ims.RefMan.domain.base.impl.BaseReferralTriageImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralForReferralTriageVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.ContractConfigForReferralDetailsComponentVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.LinkedDiagnosticVo;
import ims.RefMan.vo.ReferralServiceUpdatesVo;
import ims.RefMan.vo.ReferralServiceUpdatesVoCollection;
import ims.RefMan.vo.TriageOutcomeVo;
import ims.RefMan.vo.domain.CatsReferralForReferralTriageVoAssembler;
import ims.RefMan.vo.domain.ContractConfigForReferralDetailsComponentVoAssembler;
import ims.RefMan.vo.lookups.AcceptedActionsRequired;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.RefMan.vo.lookups.TriageOutcomeStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.Referral;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.domain.objects.ContractConfig;
import ims.core.configuration.domain.objects.ContractServiceLocationsConfig;
import ims.core.configuration.vo.ContractConfigRefVo;
import ims.core.domain.PatientCaseNotes;
import ims.core.domain.impl.PatientCaseNotesImpl;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ReferralType;
import ims.core.vo.lookups.ServiceFunction;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.pathways.configuration.domain.objects.Event;
import ims.pathways.configuration.domain.objects.RTTStatusPoint;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PathwayRTTStatus;
import ims.pathways.domain.objects.PathwaysRTTClockImpact;
import ims.pathways.domain.objects.PatientJourneyTarget;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.domain.objects.RTTStatusEventMap;
import ims.pathways.vo.EventLiteVo;
import ims.pathways.vo.PathwayClockVo;
import ims.pathways.vo.PathwayClockVoCollection;
import ims.pathways.vo.PathwayRTTStatusRefVoCollection;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.PatientJourneyVo;
import ims.pathways.vo.RTTStatusEventMapVo;
import ims.pathways.vo.RTTStatusPointLiteVo;
import ims.pathways.vo.domain.EventLiteVoAssembler;
import ims.pathways.vo.domain.PathwayRTTStatusVoAssembler;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.domain.RTTStatusEventMapVoAssembler;
import ims.pathways.vo.domain.RTTStatusPointLiteVoAssembler;
import ims.pathways.vo.lookups.EventStatus;
import ims.pathways.vo.lookups.RTTClockImpactSource;
import ims.pathways.vo.lookups.RTTClockState;
import ims.scheduling.domain.ExclusionDates;
import ims.scheduling.domain.impl.ExclusionDatesImpl;
import ims.scheduling.vo.ExclusionDatesVo;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

public class ReferralTriageImpl extends BaseReferralTriageImpl
{
	private static final long serialVersionUID = 1L;
	private static final int GP_SOURCE_OF_REFERRAL_NAT_CODE = 10;
	private static final int OTHER_SOURCE_OF_REFERRAL_NAT_CODE = 12;
	
	private static final int NATIONAL_CODE_FOR_REJECTED_REFERRL = 98;//WDEV-23586
	private static final int NATIONAL_CODE_FOR_SUBSEQUENT_ACTIVITI_DURING_REFERRAL_TREATMENT_PERIOD = 20;
	
	private static final int TWO_WEEK_WAIT_TO_1ST_APP = 14;	

	public ims.RefMan.vo.CatsReferralForReferralTriageVo getCatsReferral(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return null;
		
		return CatsReferralForReferralTriageVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral()));
	}

	public PatientShort getPatient(PatientRefVo patient)
	{
		if(patient == null || patient.getID_Patient() == null)
			return null;
		
		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patient.getID_Patient()));
	}
	
	private RTTStatusEventMapVo getRTTStatusEventMap(RTTStatusPoint rttStatusPoint)
	{
		if(rttStatusPoint == null)
			return null;
		
		String query = "select rttMap from RTTStatusEventMap as rttMap left join rttMap.currentRTTStatus as rtt where rtt.id = :RTTStatusPoint and rttMap.event is not null and rttMap.active = 1 and rttMap.encounterType is null";
		List<?> listRTTMap = getDomainFactory().find(query, new String[] {"RTTStatusPoint"}, new Object[] {rttStatusPoint.getId()});
		
		if(listRTTMap != null && listRTTMap.size() > 0 && listRTTMap.get(0) instanceof RTTStatusEventMap)
		{
			return RTTStatusEventMapVoAssembler.create((RTTStatusEventMap) listRTTMap.get(0));
		}
		
		return null;
	}
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createPathwayRTTStatus(CatsReferral record, java.util.Date eventDateTime) throws DomainInterfaceException
	{
		if(!ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
			return null;
		
		if(record == null)
			return null;
		
		int nationalCode = OTHER_SOURCE_OF_REFERRAL_NAT_CODE;
		
		if(record.getReferralDetails() != null && record.getReferralDetails().getReferrerType() != null && SourceOfReferral.GP.getID() == record.getReferralDetails().getReferrerType().getId())
		{
			nationalCode = GP_SOURCE_OF_REFERRAL_NAT_CODE;
		}
		
		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		
		//WDEV-19383
		if (rttStatusPoint == null)
			throw new DomainInterfaceException("No RTT Status Point was found for National Code: " + nationalCode);
		
		Object mos = getMosUser();
		MemberOfStaff doMos = null;
		
		if(mos instanceof MemberOfStaffLiteVo)
		{
			doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
		}
		
		PathwayRTTStatus pathwayRTTStatus = new PathwayRTTStatus();
		pathwayRTTStatus.setRTTStatus(rttStatusPoint);
		pathwayRTTStatus.setStatusBy(doMos);
		pathwayRTTStatus.setStatusDateTime(eventDateTime);
		
		if(record.getJourney() != null && record.getJourney().getCurrentClock() != null)
    	{
			record.getJourney().getCurrentClock().setCurrentRTTStatus(pathwayRTTStatus);
    			
    		if(record.getJourney().getCurrentClock().getRTTStatusHistory() == null)
    			record.getJourney().getCurrentClock().setRTTStatusHistory(new java.util.ArrayList());
    			
    		record.getJourney().getCurrentClock().getRTTStatusHistory().add(pathwayRTTStatus);
    		
    	}
		
		return pathwayRTTStatus;
	}
	
	private RTTStatusPoint getRTTStatusPoint(int nationalCode)
	{
		String query = "select rtt from RTTStatusPoint as rtt where rtt.nationalCode = :NationalCode";
		
		List<?> rttList = getDomainFactory().find(query, new String[] {"NationalCode"}, new Object[] {nationalCode});
		
		if(rttList != null && rttList.size() > 0 && rttList.get(0) instanceof RTTStatusPoint)
		{
			return (RTTStatusPoint) rttList.get(0);
		}
		
		return null;
	}
	
	private PatientPathwayJourney createJourney(DomainFactory factory, CatsReferralForReferralTriageVo referral) 
	{
		if (referral != null && referral.getID_CatsReferralIsNotNull())
		{
			CatsReferral domReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral());
			if (domReferral != null && domReferral.getJourney() != null)
				return domReferral.getJourney();
		}
		
		PatientJourneyVo journey = new PatientJourneyVo();		
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		try 
		{
			Referral domReferral = new Referral();
			domReferral.setAuthoringDateTime(new java.util.Date());			
			
			if (referral.getPathwayID()!=null && !referral.getPathwayID().equals(""))
				domReferral.setClockId(referral.getPathwayID());
			else
				domReferral.setClockId("MAXIMS_1");
			
			domReferral.setReferralType(factory.getLookupInstance(ReferralType.INTERNAL.getId()));
			
			 // WDEV-23419  Include user Id as part of external referral key
			int userId=0;
			ims.framework.interfaces.IAppUser user = super.getLoggedInUser();
			if (user != null)
				userId = user.getUserId();
			domReferral.setExtReferralKey("IMS_" + userId + "_" + new java.util.Date().getTime()); // WDEV-23419 Include UserId
			
			Patient doPatient = (ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, referral.getPatient().getID_Patient());
			domReferral.setPatient(doPatient);
			
			journey.setPatient(PatientShortAssembler.create(doPatient));

			factory.save(domReferral);
						
			journey.setReferral(new ReferralRefVo(domReferral.getId(), domReferral.getVersion()));
			
			if (referral.getReferralDetailsIsNotNull())
			{
				journey.setStartDate(referral.getReferralDetails().getDateOfReferral());
			}
			
			journey.setExtReferralKey(domReferral.getExtReferralKey());
						
			if(Boolean.TRUE.equals(referral.getRTTClockImpact()))
			{
    			PathwayClockVo clock = new PathwayClockVo();
    			clock.setExtClockId(domReferral.getClockId());
    			clock.setExtClockName("MaximsClock_1");
    			clock.setStartDate(journey.getStartDate());
    			clock.setTargetClockEnd(getTargetClockEnd(clock.getStartDate(), (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral())));
    			journey.setCurrentClock(clock);
    			if (!journey.getClockHistoryIsNotNull())
    				journey.setClockHistory(new PathwayClockVoCollection());
    			journey.getClockHistory().add(clock);
			}
			
			if (referral.getReferralDetailsIsNotNull() && referral.getReferralDetails().getServiceIsNotNull() && referral.getReferralDetails().getService().getSpecialtyIsNotNull())
				journey = impl.createPatientJourney(journey, null, referral.getReferralDetails().getService().getSpecialty(), null,null);			
			else	
				journey = impl.createPatientJourney(journey, null, Specialty.EMERGENCY, null,null);
			
			return PatientJourneyVoAssembler.extractPatientPathwayJourney(factory, journey);
		} 
		catch (DomainInterfaceException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Domain Interface Exception occurred creating patient journey - " + e.getMessage());
			return null;
		} 
		catch (StaleObjectException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Stale Object Exception occurred creating patient journey - " + e.getMessage());
			return null;
		}
	}
	
	private Date getTargetClockEnd(Date date, CatsReferral referral)
	{
		Date startDate = date.copy();

		int daysToRttBreachDate = 0;

		if (referral != null && referral.getReferralDetails() != null)
		{
			ContractConfigRefVo contractRefVo = referral.getContract() != null ? new ContractConfigRefVo(referral.getContract().getId(), referral.getContract().getVersion()) : null;
			ServiceRefVo serviceRefVo = referral.getReferralDetails().getService() != null ? new ServiceRefVo(referral.getReferralDetails().getService().getId(), referral.getReferralDetails().getService().getVersion()) : null;
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(contractRefVo, serviceRefVo);

			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysToRTTBreachDate() != null)
			{
				daysToRttBreachDate = contrServiceLocationConf.getDaysToRTTBreachDate();
			}
			else if (referral.getContract() != null)
			{
				daysToRttBreachDate = referral.getContract().getDaysToRTTBreachDate();
			}
		}

		return startDate.addDay(daysToRttBreachDate);
	}

	private ContractServiceLocationsConfigVo getContractServiceLocConf(ContractConfigRefVo contract, ServiceRefVo service)
	{
		ContractConfiguration impl = (ContractConfiguration) getDomainImpl(ContractConfigurationImpl.class);
		return impl.getContractServiceLocConfByContractService(contract,service);
	}

	private PathwayRTTStatusVo createRTTStatus(Integer nationalCode, DateTime eventDateTime)
	{
		if (nationalCode == null)
			return null;
		
		PathwayRTTStatusVo rttStatus = new PathwayRTTStatusVo();
		rttStatus.setRTTStatus(getRTTStatusPoint(nationalCode));
		rttStatus.setStatusDateTime(eventDateTime);
		
		Object mos = getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			rttStatus.setStatusBy((MemberOfStaffRefVo) mos);
		}

		return rttStatus;
	}
	
	private RTTStatusPointLiteVo getRTTStatusPoint(Integer nationalCode)
	{
		if (nationalCode == null)
			return null;
		
		String query = "SELECT statusPoint FROM RTTStatusPoint AS statusPoint WHERE statusPoint.nationalCode = :NAT_CODE";
		
		return RTTStatusPointLiteVoAssembler.create((RTTStatusPoint) getDomainFactory().findFirst(query, "NAT_CODE", nationalCode));
	}
	
	private PatientEventVo createAndInstantiatePatientEvent(CatsReferralForReferralTriageVo catsReferral, EventLiteVo eventLiteVo) throws DomainInterfaceException, StaleObjectException
	{
		PatientEventVo patEvent = new PatientEventVo();
		patEvent.setPatient(new PatientRefVo(catsReferral.getPatient().getID_Patient(), catsReferral.getPatient().getVersion_Patient()));
		patEvent.setEvent(eventLiteVo);
		patEvent.setEventDateTime(new DateTime());
		patEvent.setEventStatus(EventStatus.ACTIVE);
		patEvent.setJourney(getPatientJourney(catsReferral));
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		return impl.instantiatePatientEvent(patEvent);
	}
	
	private PatientJourneyVo getPatientJourney(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral());
		
		return PatientJourneyVoAssembler.create(doCatsReferral.getJourney());
	}
	
	private EventLiteVo getHardCodedEvent(int event_Id)
	{
		StringBuilder hqlBuilder = new StringBuilder("select event from Event as event left join event.status as s where event.id = :eventID and s.id = :statusID ");
		
		List <?> list = getDomainFactory().find(hqlBuilder.toString(),new String[] {"eventID", "statusID"},new Object[] {event_Id, PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if (list == null || list.size() == 0)
			return null;
		
		return EventLiteVoAssembler.create((Event)list.get(0));
	}

	public ServiceLiteVoCollection listReferralServices()
	{
		String query = "select s from ReferralService as rs left join rs.referralServices as s where s.isActive = 1 order by s.upperName asc ";
		DomainFactory factory = getDomainFactory();
		
		List services = factory.find(query);
		
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(services);
	}

	public CatsReferralForReferralTriageVo saveCatsReferral(CatsReferralForReferralTriageVo catsReferral, Boolean isReferralRejected) throws DomainInterfaceException, StaleObjectException
	{
		if(catsReferral == null)
			throw new CodingRuntimeException("Cannot save a null CatsReferralForReferralTriageVo.");
		
		if(!catsReferral.isValidated())
			throw new CodingRuntimeException("CatsReferralForReferralTriageVo is not validated.");
		
		boolean hasRTTClockImpactChangedToTrue = false;
		if (catsReferral.getID_CatsReferralIsNotNull())
		{
			CatsReferral domCatsRef = (CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral());
			hasRTTClockImpactChangedToTrue = Boolean.TRUE.equals(catsReferral.getRTTClockImpact()) && !Boolean.TRUE.equals(domCatsRef.isRTTClockImpact());
		}
		
		
		
		boolean acceptedDirectToList = catsReferral.getTriageOutcome() != null && catsReferral.getTriageOutcome().getAcceptedDetails() != null 
										&& (AcceptedActionsRequired.DIRECT_TO_LIST.equals(catsReferral.getTriageOutcome().getAcceptedDetails().getActionRequired()) 
												|| AcceptedActionsRequired.DIRECT_TO_LIST_AND_OPA.equals(catsReferral.getTriageOutcome().getAcceptedDetails().getActionRequired()));
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = CatsReferralForReferralTriageVoAssembler.extractCatsReferral(factory, catsReferral);
		
		if(catsReferral.getTriageOutcome() != null && TriageOutcomeStatus.REDIRECT.equals(catsReferral.getTriageOutcome().getTriageOutcomeStatus()))
		{
			if(catsReferral.getReferralDetails() != null)
			{
				setCatsReferralWhenServiceIsChanged(catsReferral, doCatsReferral, hasRTTClockImpactChangedToTrue);
			}
		}
		
		if(Boolean.TRUE.equals(isReferralRejected))
		{
			EventLiteVo hardCodedEvent = getHardCodedEvent(HardCodedEvents.REFERRALREJECTED.getID());
			if (hardCodedEvent != null)
			{
				try
				{
					createAndInstantiatePatientEvent(catsReferral, hardCodedEvent);
				}
				catch (DomainInterfaceException exception)
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "'HL7PathwayIfImpl.instantiatePatientEvent()' threw a DomainInterfaceException" + exception.getMessage());
				}
			}
			
			if(Boolean.TRUE.equals(doCatsReferral.isRTTClockImpact()))
			{
    			DateTime rejectionDateTime = new DateTime();
				PathwayRTTStatusVo finalRTTStatus = createRTTStatus(NATIONAL_CODE_FOR_REJECTED_REFERRL, rejectionDateTime);
    			
    			PatientJourneyVo journey = getPatientJourney(catsReferral);
    			
    			if(journey != null)
    			{
        			PathwayClockVo finalClock = journey.getCurrentClock();
        			
        			if (finalClock != null)
        			{
        				if (finalClock.getRTTStatusHistory() == null)
        					finalClock.setRTTStatusHistory(new PathwayRTTStatusRefVoCollection());
        
        				finalClock.setCurrentRTTStatus(finalRTTStatus);
        				finalClock.getRTTStatusHistory().add(finalRTTStatus);
        				
        				if (finalClock.getStartDate() != null && finalClock.getStopDate() == null)
            			{
            				finalClock.setStopDate(new Date());
            			}
        			}
        			
        			doCatsReferral.setCurrentRTTStatus(PathwayRTTStatusVoAssembler.extractPathwayRTTStatus(factory, finalRTTStatus));
        			PatientPathwayJourney doPatientJourney = PatientJourneyVoAssembler.extractPatientPathwayJourney(factory, journey);
    				
        			factory.save(doPatientJourney);
    			}
			}
		}
		
		/*WDEV-23223if(Boolean.TRUE.equals(catsReferral.getIsCAB()) && catsReferral.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_ACCEPTED.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{
			PatientPathwayJourney journey = createJourney(factory, catsReferral);
			doCatsReferral.setJourney(journey);
    		
    		PathwayRTTStatus rttStatus = null;
    		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && Boolean.TRUE.equals(doCatsReferral.isRTTClockImpact()))
    		{
    			rttStatus = createPathwayRTTStatus(doCatsReferral);
    			doCatsReferral.setCurrentRTTStatus(rttStatus);
    		}
    		
    		factory.save(doCatsReferral);
    		
    		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && Boolean.TRUE.equals(doCatsReferral.isRTTClockImpact()))
    		{
    			RTTStatusEventMapVo rttMap = getRTTStatusEventMap(rttStatus.getRTTStatus());
    			
    			if(rttMap != null && rttMap.getEvent() != null)
    			{
    				PatientEventVo patEvent = new PatientEventVo();
    				patEvent.setPatient(catsReferral.getPatient());
    				patEvent.setEvent(rttMap.getEvent());
    				patEvent.setEventDateTime(new DateTime());
    				patEvent.setEventStatus(EventStatus.ACTIVE);
    				patEvent.setJourney(PatientJourneyVoAssembler.create(doCatsReferral.getJourney()));
    				
    				HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
    				impl.instantiatePatientEvent(patEvent);
    			}
    		}
    		
    		return CatsReferralForReferralTriageVoAssembler.create(doCatsReferral);
		}WDEV-23223*/
		
		// WDEV-23293
		// Record the RTT Status 20 if the referral is Direct to Waiting List
		
		if (acceptedDirectToList)
		{
			// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
			// Adding a record to elective list, the authoring date/time (date on list) should be used.
			java.util.Date eventDateTime = catsReferral.getTriageOutcome().getAcceptedDetails().getWaitingList().getDateOnList().getDate();
			
			if (ElectiveListReason.DIAGNOSTIC.equals(catsReferral.getTriageOutcome().getAcceptedDetails().getWaitingList().getElectiveListReason()))
			{
				updateRTTStatus(doCatsReferral, RTTClockImpactSource.ADD_WAITING_LIST_DIAGNOSTIC, eventDateTime);
			}
			else if (ElectiveListReason.TREATMENT.equals(catsReferral.getTriageOutcome().getAcceptedDetails().getWaitingList().getElectiveListReason()))
			{
				updateRTTStatus(doCatsReferral, RTTClockImpactSource.ADD_WAITING_LIST_TREATMENT, eventDateTime);
			}
			
		}
		
		
		factory.save(doCatsReferral);
		
		return CatsReferralForReferralTriageVoAssembler.create(doCatsReferral);
	}

	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private void updateRTTStatus(CatsReferral referral, RTTClockImpactSource impactSource, java.util.Date eventDateTime)
	{
		if (Boolean.FALSE.equals(referral.isRTTClockImpact()))
			return;
		
		if (referral.getJourney() == null)
			throw new CodingRuntimeException("Referral should have had a Journey created at this point.");
		
		PathwayClock initialClock = referral.getJourney().getCurrentClock();
		PathwayClock finalClock = referral.getJourney().getCurrentClock();
		
		PathwayRTTStatus initialStatus = referral.getJourney().getCurrentClock().getCurrentRTTStatus();
		
		PathwayRTTStatus finalStatus = createNewRTTStatus(NATIONAL_CODE_FOR_SUBSEQUENT_ACTIVITI_DURING_REFERRAL_TREATMENT_PERIOD, eventDateTime);
		
		referral.setCurrentRTTStatus(finalStatus);
		referral.getJourney().getCurrentClock().setCurrentRTTStatus(finalStatus);
		referral.getJourney().getCurrentClock().getRTTStatusHistory().add(finalStatus);
		
		// Create the RTT Clock Impact
		PathwaysRTTClockImpact clockImpact = createRTTClockImpactRecord(initialClock, finalClock, initialStatus, finalStatus, null, referral.getJourney(), impactSource);
		
		if (referral.getRTTClockImpacts() == null) referral.setRTTClockImpacts(new ArrayList());
		referral.getRTTClockImpacts().add(clockImpact);
	}

	
	private PathwaysRTTClockImpact createRTTClockImpactRecord(PathwayClock initialClock, PathwayClock finalClock, PathwayRTTStatus initialStatus, PathwayRTTStatus finalStatus,
			RTTStatusEventMap eventMap, PatientPathwayJourney journey, RTTClockImpactSource source)
	{
		PathwaysRTTClockImpact clockImpact = new PathwaysRTTClockImpact();
		
		clockImpact.setInitialClock(initialClock);
		clockImpact.setFinalClock(finalClock);
		clockImpact.setInitialRTTStatus(initialStatus);
		clockImpact.setFinalRTTStatus(finalStatus);
		
		clockImpact.setOutcomeEvent(eventMap);
		clockImpact.setJourney(journey);
		clockImpact.setSource(getDomLookup(source));
		
		clockImpact.setInitialClockState(getClockState(initialClock));
		clockImpact.setFinalClockState(getClockState(finalClock));
		
		
		clockImpact.setClockStarted(Boolean.FALSE);
		clockImpact.setClockStopped(Boolean.FALSE);
		
		//  Case 1 - If there was not clock initially and one clock was created
		if (initialClock == null && finalClock != null)
		{
			// New clock has a start date - mark the Clock Impact
			if (finalClock.getStartDate() != null)
				clockImpact.setClockStarted(Boolean.TRUE);
			
			if (finalClock.getStopDate() != null)
				clockImpact.setClockStopped(Boolean.TRUE);
		}
		
		// Case 2 - If there was a clock initially and there is no clock now
		if (initialClock != null && finalClock == null)
		{
			clockImpact.setClockStopped(Boolean.TRUE);
		}
		
		// Case 3 - If there was an initial clock and a clock is present now
		if (initialClock != null && finalClock != null)
		{
			// Case 3.1 - Initial and current clock are the same one
			if (initialClock.getId() == finalClock.getId())
			{
				if (initialClock.getStopDate() == null && finalClock.getStopDate() != null)
					clockImpact.setClockStopped(Boolean.TRUE);
				
				if (initialClock.getStopDate() != null && finalClock.getStopDate() == null)
					clockImpact.setClockStarted(Boolean.TRUE);
				
				if (initialClock.getStartDate() == null && finalClock.getStartDate() != null)
					clockImpact.setClockStarted(Boolean.TRUE);
			}
			
			// Case 3.2 - Initial and current clock are not ehe same one
			if (initialClock.getId() != finalClock.getId())
			{
				if (initialClock.getStopDate() == null)
					clockImpact.setClockStopped(Boolean.TRUE);
				
				if (finalClock.getStartDate() != null)
					clockImpact.setClockStarted(Boolean.TRUE);
				
				if (finalClock.getStopDate() != null)
					clockImpact.setClockStopped(Boolean.TRUE);
			}
			
		}

		return clockImpact;
	}


	private LookupInstance getClockState(PathwayClock clock)
	{
		if (clock == null)
			return getDomLookup(RTTClockState.NOT_PRESENT);
		
		if (clock.getStopDate() != null)
			return getDomLookup(RTTClockState.STOPPED);

		return getDomLookup(RTTClockState.STARTED);
	}

	
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createNewRTTStatus(Integer nationalCode, java.util.Date eventDateTime)
	{
		if (nationalCode == null)
			return null;
		
		PathwayRTTStatus status = new PathwayRTTStatus();
		status.setRTTStatus(getDomRTTStatusPoint(nationalCode));
		status.setStatusDateTime(eventDateTime);
		
		Object mos = getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			status.setStatusBy((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, ((MemberOfStaffLiteVo) mos).getID_MemberOfStaff()));
		}

		return status;	}

	
	private RTTStatusPoint getDomRTTStatusPoint(Integer nationalCode)
	{
		if (nationalCode == null)
			return null;
		
		String query = "SELECT statusPoint FROM RTTStatusPoint AS statusPoint WHERE statusPoint.nationalCode = :NAT_CODE";
		
		return (RTTStatusPoint) getDomainFactory().findFirst(query, "NAT_CODE", nationalCode);
	}


	private void setCatsReferralWhenServiceIsChanged(CatsReferralForReferralTriageVo catsReferral, CatsReferral doCatsReferral, boolean hasRTTClockImpactChangedToTrue)
	{
		ContractConfigRefVo contract = new ContractConfigRefVo(doCatsReferral.getContract().getId(), doCatsReferral.getContract().getVersion());	
		ContractConfigForReferralDetailsComponentVo contractConfig = getContractConfig(contract);
		
		ServiceRefVo service = new ServiceRefVo(doCatsReferral.getReferralDetails().getService().getId(), doCatsReferral.getReferralDetails().getService().getVersion());
		Integer daysToRttBreachDate = getDaysToRttBreachDateByService(contractConfig, service);
		
		Date end18WW = calculateKPI(doCatsReferral, contractConfig, daysToRttBreachDate);
		doCatsReferral.getReferralDetails().setEnd18WW(end18WW != null ? end18WW.getDate() : null);
		
		Date endDateKPI = getEndDateKPI(catsReferral);
		doCatsReferral.getReferralDetails().setEndDateKPI(endDateKPI != null ? endDateKPI.getDate() : null);
		
		boolean rTTClockImpact = !Boolean.TRUE.equals(doCatsReferral.isIsEmergencyReferral()) && !SourceOfReferral.NATIONAL_SCREENING.equals(catsReferral.getReferralDetails().getReferrerType()) && catsReferral.getReferralDetails().getService() != null && Boolean.TRUE.equals(catsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()) && contactIsNotDiagnosticOrDiagnosticTriage(contractConfig);
		doCatsReferral.setRTTClockImpact(rTTClockImpact);
		
		setClockWhenServiceIsChanged(doCatsReferral, contractConfig, daysToRttBreachDate, rTTClockImpact, hasRTTClockImpactChangedToTrue);
	}

	private void setClockWhenServiceIsChanged(CatsReferral doCatsReferral, ContractConfigForReferralDetailsComponentVo contractConfig, Integer daysToRttBreachDate, boolean rTTClockImpact, boolean hasRTTClockImpactChangedToTrue)
	{
		if(doCatsReferral == null)
			return;
		
		if (getDomLookup(SourceOfReferral.NATIONAL_SCREENING).equals(doCatsReferral.getReferralDetails().getReferrerType()) || !Boolean.TRUE.equals(rTTClockImpact))
		{
			doCatsReferral.setCurrentRTTStatus(null);
			if (doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
			{
				doCatsReferral.getJourney().setCurrentClock(null);
				doCatsReferral.getJourney().setClockHistory(null);

				if(doCatsReferral.getJourney().getPatientTargets() != null)
				{
					Iterator it = doCatsReferral.getJourney().getPatientTargets().iterator();
					
					while(it.hasNext())
					{
						PatientJourneyTarget target = (PatientJourneyTarget) it.next();
						
						target.setJourneyClock(null);
					}
				}
			}
		}
		else if (Boolean.TRUE.equals(rTTClockImpact) && hasRTTClockImpactChangedToTrue)
		{
			try 
			{
				// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
				// When referral service is changed, use Date of referral
				java.util.Date eventDateTime = doCatsReferral.getReferralDetails().getDateOfReferral();
				
				
				// Source of Referral is GP
				if (getDomLookup(SourceOfReferral.GP).equals(doCatsReferral.getReferralDetails().getReferrerType()))
				{
					//nationalCode = 10 if GP_SOURCE_OF_REFERRAL_NAT_CODE
					doCatsReferral.setCurrentRTTStatus(createPathwayRTTStatus(10, eventDateTime));	
					if (doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
					{
						doCatsReferral.getJourney().getCurrentClock().setCurrentRTTStatus(createPathwayRTTStatus(10, eventDateTime));
					}
					else
					{
						setCurrentClockOnReferralEdit(doCatsReferral, contractConfig, daysToRttBreachDate, 10, eventDateTime);
					}

				}
				// Source of Referral is TRANSFER
				else if(getDomLookup(SourceOfReferral.TRANSFER).equals(doCatsReferral.getReferralDetails().getReferrerType()))
				{
					if (doCatsReferral.getReferralTransfer() != null && doCatsReferral.getReferralTransfer().getCurrentRTTStatus() != null && doCatsReferral.getReferralTransfer().getCurrentRTTStatus().getNationalCode() != null)
					{	
						doCatsReferral.setCurrentRTTStatus(createPathwayRTTStatus(doCatsReferral.getReferralTransfer().getCurrentRTTStatus().getNationalCode(), eventDateTime));
						if (doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
						{
							doCatsReferral.getJourney().getCurrentClock().setCurrentRTTStatus(createPathwayRTTStatus(doCatsReferral.getReferralTransfer().getCurrentRTTStatus().getNationalCode(), eventDateTime));
						}
					}	
					else
					{
						setCurrentClockOnReferralEdit(doCatsReferral, contractConfig, daysToRttBreachDate, doCatsReferral.getReferralTransfer().getCurrentRTTStatus().getNationalCode(), eventDateTime);
					}
				}
				// Source of Referral is not GP or TRANSFER
				else
				{
					//nationalCode = 12 if OTHER_SOURCE_OF_REFERRAL_NAT_CODE
					doCatsReferral.setCurrentRTTStatus(createPathwayRTTStatus(12, eventDateTime));
					if (doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
					{
						doCatsReferral.getJourney().getCurrentClock().setCurrentRTTStatus(createPathwayRTTStatus(12, eventDateTime));
					}
					else
					{
						setCurrentClockOnReferralEdit(doCatsReferral, contractConfig, daysToRttBreachDate, 12, eventDateTime);
					}
				}

			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Domain Interface Exception occurred when saving referral - " + e.getMessage());
				e.printStackTrace();
			}
		}
	}
		
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private void setCurrentClockOnReferralEdit(CatsReferral doCats, ContractConfigForReferralDetailsComponentVo contractConfig, Integer daysToRttBreachDate, int pathwayCode, java.util.Date eventDateTime)
	{
		PathwayClock clock = new PathwayClock();
		clock.setExtClockId(doCats.getJourney().getReferral().getClockId());
		clock.setExtClockName("MaximsClock_1");
		clock.setStartDate(doCats.getJourney().getStartDate());
		clock.setTargetClockEnd(getTargetClockEnd(clock.getStartDate(), contractConfig, daysToRttBreachDate));
		try 
		{
			clock.setCurrentRTTStatus(createPathwayRTTStatus(pathwayCode, eventDateTime));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
		}
		doCats.getJourney().setCurrentClock(clock);
		if(doCats.getJourney().getClockHistory() != null)
			doCats.getJourney().getClockHistory().add(clock);
	}
	
	private java.util.Date getTargetClockEnd(java.util.Date date, ContractConfigForReferralDetailsComponentVo contractConfig, Integer daysToRttBreachDate)
	{
		int intDaysToRttBreachDate = 0;

		if (daysToRttBreachDate != null)
		{
			intDaysToRttBreachDate = daysToRttBreachDate.intValue();
		}
		else if (contractConfig != null)
		{
			daysToRttBreachDate = contractConfig.getDaysToRTTBreachDate();
		}
		
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, intDaysToRttBreachDate); 
		 
		date = cal.getTime();

		return date;
	}
		
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createPathwayRTTStatus(int nationalCode, java.util.Date eventDateTime) throws DomainInterfaceException
	{
		if(!ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
			return null;

		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		
		if (rttStatusPoint == null)
			throw new DomainInterfaceException("No RTT Status Point was found for National Code: " + nationalCode);
		
		Object mos = getMosUser();
		MemberOfStaff doMos = null;
		
		if(mos instanceof MemberOfStaffLiteVo)
		{
			doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
		}

		PathwayRTTStatus pathwayRTTStatus = new PathwayRTTStatus();
		pathwayRTTStatus.setRTTStatus(rttStatusPoint);
		pathwayRTTStatus.setStatusBy(doMos);
		pathwayRTTStatus.setStatusDateTime(eventDateTime);

		return pathwayRTTStatus;
	}
	
	private boolean contactIsNotDiagnosticOrDiagnosticTriage(ContractConfigForReferralDetailsComponentVo value)
	{
		if(value == null)
			return false;
		
		if(ReferralManagementContractType.DIAGNOSTIC.equals(value.getContractType()) || ReferralManagementContractType.DIAGNOSTICTRIAGE.equals(value.getContractType()))
			return false;
		
		return true;
	}
	
	public ims.framework.utils.Date getEndDateKPI(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		if(catsReferral.getReferralDetails() != null && SourceOfReferral.NATIONAL_SCREENING.equals(catsReferral.getReferralDetails().getReferrerType()))
			return null;
				
		ExclusionDatesVo voExDate = listExclusionDates();
		
		Integer daysToFirstAppointment = null;
		ims.framework.utils.Date firstOPKPI = null;
		
		if( ReferralUrgency.TWO_WEEK_WAIT.equals(catsReferral.getUrgency()))
		{
			if(catsReferral.getReferralDetails() != null && Boolean.TRUE.equals(catsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = TWO_WEEK_WAIT_TO_1ST_APP;
			}
		}
		else if (catsReferral.getContractIsNotNull())
		{
			ContractConfig doContractConfig = (ContractConfig) factory.getDomainObject(catsReferral.getContract());
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(catsReferral.getContract(), catsReferral.getReferralDetails().getService());
			
			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysTo1stApptIsNotNull())
			{
				daysToFirstAppointment = contrServiceLocationConf.getDaysTo1stAppt();
			}
			else if (doContractConfig != null && catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getService() != null && Boolean.TRUE.equals(catsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()))
			{
				daysToFirstAppointment = doContractConfig.getDaysTo1stAppt();
			}
		}
		
		if (daysToFirstAppointment != null)
		{
			if(catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getDateOfReferral() != null)
			{
				firstOPKPI = ExclusionDatesVo.addBusinessDays(catsReferral.getReferralDetails().getDateOfReferral(), daysToFirstAppointment, voExDate != null ? voExDate.getDates() : null, true);
			}
		}
		
		return firstOPKPI;
	}
	
	private ims.scheduling.vo.ExclusionDatesVo listExclusionDates()
	{
		ExclusionDates impl = (ExclusionDates) getDomainImpl(ExclusionDatesImpl.class);
		return impl.listExclusionDates();
	}

	private Date calculateKPI(CatsReferral doCatsReferral, ContractConfigForReferralDetailsComponentVo contractConfig, Integer daysToRttBreachDate )
	{
		if(!getDomLookup(SourceOfReferral.NATIONAL_SCREENING).equals(doCatsReferral.getReferralDetails().getReferrerType()))
		{
    		if(!Boolean.TRUE.equals(doCatsReferral.isIsEmergencyReferral()))
    		{
        		boolean serviceIsSubjectToRTT = doCatsReferral.getReferralDetails().getService() != null && Boolean.TRUE.equals(doCatsReferral.getReferralDetails().getService().isIsSubjectToRTTClock());
        		
        		if(doCatsReferral.getReferralTransfer() != null)
        		{
        			if(doCatsReferral.getReferralTransfer().getRTTStartDate() != null && daysToRttBreachDate != null)
        			{
        				Date rttStartDate = new Date(doCatsReferral.getReferralTransfer().getRTTStartDate());
        				rttStartDate.addDay(daysToRttBreachDate);
        				
        				return rttStartDate;
        			}
        			else if(doCatsReferral.getReferralTransfer().getRTTStartDate() != null && contractConfig.getDaysToRTTBreachDateIsNotNull() && serviceIsSubjectToRTT)
        			{
        				Date rttStartDate = new Date(doCatsReferral.getReferralTransfer().getRTTStartDate());
        				rttStartDate.addDay(contractConfig.getDaysToRTTBreachDate());
        				
        				return rttStartDate;
        			}
        		}
        		else
        		{
        			if(doCatsReferral.getReferralDetails().getDateOfReferral() != null && daysToRttBreachDate!=null)
        			{
        				Date rttStartDate = new Date(doCatsReferral.getReferralDetails().getDateOfReferral());
        				rttStartDate.addDay(daysToRttBreachDate);
            		
        				return rttStartDate;
        			}
        			else if(doCatsReferral.getReferralDetails().getDateOfReferral() != null && contractConfig.getDaysToRTTBreachDateIsNotNull() && serviceIsSubjectToRTT)
        			{
        				Date rttStartDate = new Date(doCatsReferral.getReferralDetails().getDateOfReferral());
        				rttStartDate.addDay(contractConfig.getDaysToRTTBreachDate());
        				
        				return rttStartDate;
        			}
        		}
    		}
		}
		
		return null;
	}
	
	private Integer getDaysToRttBreachDateByService(ContractConfigForReferralDetailsComponentVo contract, ServiceRefVo service)
	{
		if (contract==null || service==null || service.getID_Service() == null)
			return null;
		
		for (int i=0;contract.getServiceLocations()!=null && i<contract.getServiceLocations().size();i++)
		{
			if (contract.getServiceLocations().get(i)!=null && service.getID_Service().equals(contract.getServiceLocations().get(i).getService().getID_Service()))
				return contract.getServiceLocations().get(i).getDaysToRTTBreachDate();
		}
		
		return null;
	}
	
	private ContractConfigForReferralDetailsComponentVo getContractConfig(ContractConfigRefVo contract)
	{
		if(contract == null || contract.getID_ContractConfig() == null)
			return null;
		
		return ContractConfigForReferralDetailsComponentVoAssembler.create((ContractConfig) getDomainFactory().getDomainObject(ContractConfig.class, contract.getID_ContractConfig()));
	}

	//WDEV-20976
	public ServiceShortVoCollection getServicesForCatsReferral(CatsReferralRefVo catsRefVo)
	{
		if (catsRefVo == null || !catsRefVo.getID_CatsReferralIsNotNull())
			return null;
		
		CatsReferral catsReferral = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, catsRefVo.getID_CatsReferral());
		if (catsReferral != null && catsReferral.getContract() != null && catsReferral.getContract().getServiceLocations() != null)
		{
			List <?> lstServices = catsReferral.getContract().getServiceLocations();
	
			List <Service> listServices = new ArrayList<Service>();
			for (Object object : lstServices)
			{
				ContractServiceLocationsConfig contractServiceLocConfig = (ContractServiceLocationsConfig) object;
				Service service = contractServiceLocConfig.getService();
				listServices.add(service);
			}
			if(listServices != null && listServices.size() > 0)
			{
				return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(listServices).sort();
			}
			return null;
		}
		return null;
	}

	public Boolean undoTriageOutcome(CatsReferralForReferralTriageVo catsReferral, FormName formName) throws StaleObjectException
	{
		if(catsReferral == null || catsReferral.getTriageOutcome() == null)
			return false;
		
		boolean hasRTTClockImpactChangedToTrue = false;
		if (catsReferral.getID_CatsReferralIsNotNull())
		{
			CatsReferral domCatsRef = (CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral());
			hasRTTClockImpactChangedToTrue = Boolean.TRUE.equals(catsReferral.getRTTClockImpact()) && !Boolean.TRUE.equals(domCatsRef.isRTTClockImpact());
		}
		
		TriageOutcomeVo triageOutcome = catsReferral.getTriageOutcome();
		Integer patientId = catsReferral.getPatient() != null ? catsReferral.getPatient().getID_Patient() : null;
		
		if(triageOutcome.getAcceptedDetails() != null)
		{
			markAsRie(triageOutcome.getAcceptedDetails(), formName, patientId, null, null, null);
		}
		if(triageOutcome.getTriagePendingDiagnosticResult() != null && triageOutcome.getTriagePendingDiagnosticResult().size() > 0)
		{
			for(LinkedDiagnosticVo diag : triageOutcome.getTriagePendingDiagnosticResult())
			{
				if(diag == null)
					continue;
					
				markAsRie(diag, formName, patientId, null, null, null);
			}
		}
		if(triageOutcome.getRedirectReferralDetails() != null)
		{
			markAsRie(triageOutcome.getRedirectReferralDetails(), formName, patientId, null, null, null);
		}
		
		markAsRie(triageOutcome, formName, patientId, null, null, null);
		
		boolean wasCatsReferralChanged = false;
		if(catsReferral.getAwaitingClinicalInfo() != null)
		{
			markAsRie(catsReferral.getAwaitingClinicalInfo(), formName, patientId, null, null, null);
			wasCatsReferralChanged = true;
		}
		
		boolean wasCatsReferralRejected = false;
		if(catsReferral.getRejectReferralDetail() != null)
		{
			markAsRie(catsReferral.getRejectReferralDetail(), formName, patientId, null, null, null);
			wasCatsReferralRejected = true;
			wasCatsReferralChanged = true;
		}
		
		DomainFactory factory = getDomainFactory();
		if(wasCatsReferralChanged)
		{
			CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral());
			catsReferral = CatsReferralForReferralTriageVoAssembler.create(doCatsReferral);
		}
		
		catsReferral.setIsAwaitingClinicalInfo(null);
		catsReferral.setTriageDateTime(null);
		catsReferral.setTriageOutcome(null);
		catsReferral.setConsultationActivityRequired(null);
		catsReferral.setRedirectCAB(null);
		
		CatsReferralStatusVo awaitingTriageStatus = createAcceptedStatus();
		
		catsReferral.setCurrentStatus(awaitingTriageStatus);
		
		if(catsReferral.getStatusHistory() == null)
			catsReferral.setStatusHistory(new CatsReferralStatusVoCollection());
		
		catsReferral.getStatusHistory().add(awaitingTriageStatus);
		
		boolean wasCatsReferralServiceChanged = false;
		if(catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getService() != null && catsReferral.getReferralDetails().getOriginalService() != null && !catsReferral.getReferralDetails().getOriginalService().equals(catsReferral.getReferralDetails().getService()))
		{
			Service doOrigService = (Service) factory.getDomainObject(Service.class, catsReferral.getReferralDetails().getOriginalService().getID_Service());
			ServiceLiteVo origService = ServiceLiteVoAssembler.create(doOrigService);
			
			catsReferral.getReferralDetails().setService(origService);
			catsReferral.getReferralDetails().setOriginalService(null);
			
			wasCatsReferralServiceChanged = true;
			
			ReferralServiceUpdatesVoCollection tempHistColl = catsReferral.getReferralDetails().getServiceUpdateHistory();
			if( tempHistColl == null )
			{
				tempHistColl = new ReferralServiceUpdatesVoCollection();
			}
			
			ReferralServiceUpdatesVo tempVo = new ReferralServiceUpdatesVo(); 
			tempVo.setRecordingDateTime(new DateTime());
			tempVo.setService(origService);
			
			Object mos = getMosUser();
			if(mos instanceof MemberOfStaffLiteVo)
			{
				tempVo.setRecordingUser((MemberOfStaffLiteVo) mos);
			}
			
			tempHistColl.add(tempVo);
			
			catsReferral.getReferralDetails().setServiceUpdateHistory(tempHistColl);
		}
		
		if(catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getConsultant() != null && !catsReferral.getReferralDetails().getConsultant().equals(catsReferral.getReferralDetails().getOriginalConsultant()))
		{
			catsReferral.getReferralDetails().setConsultant(catsReferral.getReferralDetails().getOriginalConsultant());
			catsReferral.getReferralDetails().setOriginalConsultant(null);
		}
		
		CatsReferral doCatsReferral = CatsReferralForReferralTriageVoAssembler.extractCatsReferral(factory, catsReferral);
		
		if(wasCatsReferralServiceChanged)
		{
			setCatsReferralWhenServiceIsChanged(catsReferral, doCatsReferral, hasRTTClockImpactChangedToTrue);
		}
		
		if(wasCatsReferralRejected)
		{
			PatientPathwayJourney journey = doCatsReferral.getJourney();
			if(journey != null)
			{
				PathwayClock finalClock = journey.getCurrentClock();
				PathwayRTTStatus currentRTTStatus = null;
				
				if (finalClock != null)
				{
					finalClock.setStopDate(null);
					
					PathwayRTTStatus finalRTTStatus = finalClock.getCurrentRTTStatus();

					List historyRTTStatus = finalClock.getRTTStatusHistory();
					historyRTTStatus = removeFinalStatus(finalRTTStatus, historyRTTStatus);
					
					currentRTTStatus = getPreviousRTTStatus(historyRTTStatus);
					finalClock.setCurrentRTTStatus(currentRTTStatus);
				}
			
				doCatsReferral.setCurrentRTTStatus(currentRTTStatus);
		
				factory.save(journey);
			}
		}
		
		factory.save(doCatsReferral);
		
		return true;
	}
	
	private List removeFinalStatus(PathwayRTTStatus finalRTTStatus, List historyRTTStatus)
	{
		if(finalRTTStatus != null && historyRTTStatus != null)
		{
    		for(int i=0; i<historyRTTStatus.size(); i++)
    		{
    			Object status = historyRTTStatus.get(i);
    			
    			if(status instanceof PathwayRTTStatus)
    			{
    				if(((PathwayRTTStatus) status).getId().equals(finalRTTStatus.getId()))
    				{
    					historyRTTStatus.remove(i);
    		
    					return historyRTTStatus;
    				}
    			}
    		}
		}
		
		return null;
	}

	private PathwayRTTStatus getPreviousRTTStatus(List historyRTTStatus)
	{
		if(historyRTTStatus == null || historyRTTStatus.size() == 0)
			return null;
		
		PathwayRTTStatus latestRTTStatus = null;
		
		if(historyRTTStatus.get(0) instanceof PathwayRTTStatus)
		{
			latestRTTStatus = (PathwayRTTStatus) historyRTTStatus.get(0);
		}
		
		for(int i=1; i<historyRTTStatus.size(); i++)
		{
			Object status = historyRTTStatus.get(i);
			
			if(status instanceof PathwayRTTStatus)
			{
				if(((PathwayRTTStatus) status).getStatusDateTime().after(latestRTTStatus.getStatusDateTime()))
				{
					latestRTTStatus = (PathwayRTTStatus) status;
				}
			}
		}
		
		return latestRTTStatus;
	}
	
	private CatsReferralStatusVo createAcceptedStatus()
	{
		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
		
		currentStatus.setReferralStatus(ReferralApptStatus.AWAITING_TRIAGE);
		
		Object mos = getMosUser();
		
		if(mos instanceof MemberOfStaffRefVo)
		{
			currentStatus.setAuthoringUser((MemberOfStaffRefVo) mos);
		}
		
		currentStatus.setStatusDateTime(new DateTime());
		
		return currentStatus;
	}

	public AppFormForTrackingVo getFormMenuAction(Integer formId)
	{
		if(formId == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formId);
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}

	public HcpLiteVoCollection listRedirectedHCPs(String value, ServiceRefVo service, HcpRefVo currentResponsibleHcpRef, ServiceFunction serviceFunction) //DEV-21062
	{

		if (value == null || value.length() == 0 || service == null)
			return null;

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		String query = " select h from Hcp h ";
		query += " left join h.serviceFunction as servf left join servf.service as serv ";
		query += " where h.isActive = 1 and (h.mos.name.upperSurname like :NAME or h.mos.name.upperForename like :NAME) ";
		query += " AND h.isHCPaResponsibleHCP = 1 ";
		query += " AND serv.id = :serviceID and servf.isActive = 1 ";

		paramNames.add("NAME");
		paramValues.add(value.toUpperCase() + "%");

		paramNames.add("serviceID");
		paramValues.add(service.getID_Service());


		//WDEV-21041
		if (currentResponsibleHcpRef != null)
		{
			query += " AND h.id <> :HCP_ID ";
			paramNames.add("HCP_ID");
			paramValues.add(currentResponsibleHcpRef.getID_Hcp());
		}

		if(serviceFunction != null)
		{
			query += " AND servf.function.id =:FUNCTION ";
			paramNames.add("FUNCTION");
			paramValues.add(serviceFunction.getID());
		}

		query += " ORDER BY h.mos.name.upperSurname";
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}
	//WDEV-21313
	public Boolean isConsultantAssociatedToRedirectedService(ServiceRefVo serviceRefVo, HcpRefVo hcpRef)
	{
		if (serviceRefVo == null || hcpRef == null)
			return false;

		String hql = "select count(hcp.id) from Hcp as hcp left join hcp.serviceFunction as servfunc left join servfunc.service as serv where hcp.id = :HCP_ID AND serv.id = :SERVICE_ID";

		DomainFactory factory = getDomainFactory();

		long count = factory.countWithHQL(hql, new String[]{"HCP_ID", "SERVICE_ID"}, new Object[]{hcpRef.getID_Hcp(),serviceRefVo.getID_Service()});

		return count > 0;
	}

	//WDEV-21973
	public void createCaseNoteFolderIfNone(PatientRefVo patient)
	{
		PatientCaseNotes impl = (PatientCaseNotes) getDomainImpl(PatientCaseNotesImpl.class);
		impl.createCaseNoteFolderIfNone(patient);
		
	}
}
