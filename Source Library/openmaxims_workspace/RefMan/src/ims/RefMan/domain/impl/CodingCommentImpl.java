//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Gabriel Maxim using IMS Development Environment (version 1.80 build 5308.16958)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseCodingCommentImpl;
import ims.RefMan.vo.ConsultantStayForPatientCodingListVo;
import ims.RefMan.vo.domain.AdmissionDetailForCoderWorklistVoAssembler;
import ims.RefMan.vo.domain.ConsultantStayForPatientCodingListVoAssembler;
import ims.clinical.domain.objects.CodingComment;
import ims.clinical.vo.CodingCommentVo;
import ims.clinical.vo.domain.CodingCommentVoAssembler;
import ims.clinical.vo.lookups.CodingCommentStatus;
import ims.core.admin.pas.domain.objects.AdmissionDetail;
import ims.core.admin.pas.domain.objects.ConsultantStay;
import ims.core.admin.pas.vo.AdmissionDetailRefVo;
import ims.core.admin.pas.vo.ConsultantStayRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class CodingCommentImpl extends BaseCodingCommentImpl
{
	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.AdmissionDetailForCoderWorklistVo getAdmissionDetail(ims.core.admin.pas.vo.AdmissionDetailRefVo admissionRefVo)
	{
		if (admissionRefVo == null)
			throw new CodingRuntimeException("Cannot retrieve AdmissionDetailForCoderWorklistVo record for null reference.");
		
		DomainFactory factory = getDomainFactory();
		
		AdmissionDetail admissionDetailDO = (AdmissionDetail) factory.getDomainObject(AdmissionDetail.class, admissionRefVo.getID_AdmissionDetail());
		
		return AdmissionDetailForCoderWorklistVoAssembler.create(admissionDetailDO);
	}

	public ims.RefMan.vo.AdmissionDetailForCoderWorklistVo saveAdmissionDetailWithCodingComment(ims.RefMan.vo.AdmissionDetailForCoderWorklistVo admissionDetVo) throws ims.domain.exceptions.StaleObjectException
	{
		if (admissionDetVo == null)
			throw new CodingRuntimeException("Cannot save null AdmissionDetailForCoderWorklistVo record.");
		if (!admissionDetVo.isValidated())
			throw new CodingRuntimeException("Cannot save invalid AdmissionDetailForCoderWorklistVo record.");

		DomainFactory factory = getDomainFactory();
		
		AdmissionDetail admissionDetailDO = AdmissionDetailForCoderWorklistVoAssembler.extractAdmissionDetail(factory, admissionDetVo);
		
		factory.save(admissionDetailDO);
		
		return AdmissionDetailForCoderWorklistVoAssembler.create(admissionDetailDO);
	}

	public ConsultantStayForPatientCodingListVo getFCE(ConsultantStayRefVo fceRef)
	{
		if(fceRef == null || fceRef.getID_ConsultantStay() == null)
			return null;
		
		return ConsultantStayForPatientCodingListVoAssembler.create((ConsultantStay) getDomainFactory().getDomainObject(ConsultantStay.class, fceRef.getID_ConsultantStay()));
	}

	public ConsultantStayForPatientCodingListVo saveFCE(ConsultantStayForPatientCodingListVo fce) throws StaleObjectException
	{
		if(fce == null)
			throw new CodingRuntimeException("Cannot save a null ConsultantStayForPatientCodingListVo.");
		
		if(!fce.isValidated())
			throw new CodingRuntimeException("ConsultantStayForPatientCodingListVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		ConsultantStay doCs = ConsultantStayForPatientCodingListVoAssembler.extractConsultantStay(factory, fce);
		
		factory.save(doCs);
		
		return ConsultantStayForPatientCodingListVoAssembler.create(doCs);
	}

	public CodingCommentVo saveComment(CodingCommentVo comment, AdmissionDetailRefVo admissionDetails) throws StaleObjectException
	{
		if(comment == null)
			throw new CodingRuntimeException("Cannot save a null CodingCommentVo.");
		
		if(!comment.isValidated())
			throw new CodingRuntimeException("CodingCommentVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		CodingComment doCodingComment = CodingCommentVoAssembler.extractCodingComment(factory, comment);
		
		factory.save(doCodingComment);
		
		if(admissionDetails != null && admissionDetails.getID_AdmissionDetail() != null)
		{
			AdmissionDetail doAdmissionDetails = (AdmissionDetail) factory.getDomainObject(AdmissionDetail.class, admissionDetails.getID_AdmissionDetail());
			
			if(doAdmissionDetails != null && doAdmissionDetails.getCodingComments() != null && doAdmissionDetails.getLastComment() != null && doAdmissionDetails.getLastComment().getId() == doCodingComment.getId())
			{
				CodingComment lastActiveComment = null;
				
				for(int i=0; i<doAdmissionDetails.getCodingComments().size(); i++)
				{
					if(doAdmissionDetails.getCodingComments().get(i) instanceof CodingComment)
					{
						CodingComment item = (CodingComment) doAdmissionDetails.getCodingComments().get(i);
						
						if(item.getCommentStatus() != null && item.getCommentStatus().getId() == CodingCommentStatus.ACTIVE.getID() && (lastActiveComment == null || lastActiveComment.getAuthoringDateTime().before(item.getAuthoringDateTime())))
						{
							lastActiveComment = item;
						}
					}
				}
				
				doAdmissionDetails.setLastComment(lastActiveComment);
				
				factory.save(doAdmissionDetails);
			}
		}
		
		return CodingCommentVoAssembler.create(doCodingComment);
	}
}
