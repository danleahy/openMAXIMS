//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.BookTheatre;
import ims.RefMan.domain.base.impl.BaseBookEmergencyTheatreImpl;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PendingEmergencyTheatreForBookVo;
import ims.RefMan.vo.domain.PendingEmergencyTheatreForBookVoAssembler;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppRole;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.PendingEmergencyTheatre;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.SessionParentChildSlot;
import ims.scheduling.vo.BookingAppointmentTheatreLiteVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.PendingEmergencyTheatreRefVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionEmergencyTheatreVo;
import ims.scheduling.vo.SessionEmergencyTheatreVoCollection;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionParentChildSlotVoCollection;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.domain.BookingAppointmentTheatreLiteVoAssembler;
import ims.scheduling.vo.domain.SessionEmergencyTheatreVoAssembler;
import ims.scheduling.vo.domain.SessionParentChildSlotVoAssembler;
import ims.scheduling.vo.domain.SessionTheatreVoAssembler;
import ims.scheduling.vo.lookups.SchProfileType;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class BookEmergencyTheatreImpl extends BaseBookEmergencyTheatreImpl
{

	private static final long serialVersionUID = 1L;

	public SessionEmergencyTheatreVoCollection listSessions(ims.RefMan.vo.BookEmergencyTheatreSearchCriteriaVo searchCriteria)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select sess, (select count(appt.id) from Booking_Appointment appt where appt.session.id = sess.id and appt.apptStatus.id <> :CANCELLED_STATUS) from Sch_Session as sess ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " where ";
		StringBuffer condStr = new StringBuffer();

		markers.add("CANCELLED_STATUS");
		values.add(Status_Reason.CANCELLED.getID());

		if (searchCriteria != null)
		{

			if (searchCriteria.getHospital() != null)
			{
				String ids = getLocationsIdsForHospital(searchCriteria.getHospital());

				hql += " left join sess.schLocation as location ";

				condStr.append(andStr + " location.id in ( " + ids + " ) ");
				andStr = " and ";

			}

			if (searchCriteria.getService() != null)
			{
				hql += " left join sess.service as serv ";

				condStr.append(andStr + " serv.id = :serviceID ");
				markers.add("serviceID");
				values.add(searchCriteria.getService().getID_Service());
				andStr = " and ";

			}

			if (searchCriteria.getDateFrom() != null)
			{
				condStr.append(andStr + " sess.sessionDate >= :startDate ");
				markers.add("startDate");
				values.add(searchCriteria.getDateFrom().getDate());
				andStr = " and ";
			}

			if (searchCriteria.getDateTo() != null)
			{
				condStr.append(andStr + " sess.sessionDate <= :endDate ");
				markers.add("endDate");
				values.add(searchCriteria.getDateTo().getDate());
				andStr = " and ";
			}

			if (searchCriteria.getTheatreType() != null)
			{
				condStr.append(andStr + " sess.theatreType.id = :theatreTypeID ");
				markers.add("theatreTypeID");
				values.add(searchCriteria.getTheatreType().getID());
				andStr = " and ";
			}
			else
			{
				condStr.append(andStr + " sess.theatreType.id <> :theatreTypeID ");
				markers.add("theatreTypeID");
				values.add(TheatreType.OP_CASE.getID());
				andStr = " and ";
			}

			if (!Boolean.TRUE.equals(searchCriteria.getAllowOverBook()))
			{
				if (searchCriteria.getTimeRequired() != null)
				{
					hql += " left join sess.theatreProceduresRemaining as theatreProcRemaining";

					condStr.append(andStr + " theatreProcRemaining.remainingTimeInMins >= :timeRequired ");
					markers.add("timeRequired");
					values.add(searchCriteria.getTimeRequired());

					andStr = " and ";
				}
			}
		}

		condStr.append(andStr + " sess.sessionProfileType.id = :THEATRE_SESSION  and sess.sessionStatus.id = :OPEN_STATUS ");

		markers.add("THEATRE_SESSION");
		values.add(SchProfileType.THEATRE.getID());

		markers.add("OPEN_STATUS");
		values.add(Session_Status_and_Reason.OPEN.getID());

		condStr.append(" order by sess.sessionDate asc ");

		hql += condStr.toString();

		List list = factory.find(hql, markers, values);

		if (list != null)
		{
			SessionEmergencyTheatreVoCollection collection = new SessionEmergencyTheatreVoCollection();

			for (int i = 0; i < list.size(); i++)
			{
				SessionEmergencyTheatreVo session = null;

				Object[] record = (Object[]) list.get(i);

				if (record == null)
					continue;

				if (record[0] instanceof Sch_Session)
				{
					session = SessionEmergencyTheatreVoAssembler.create((Sch_Session) record[0]);

					if (record[1] != null)
					{
						session.setNoOfAppointments(((Long) record[1]).intValue());
					}
				}

				collection.add(session);
			}

			return collection;
		}

		return null;
	}

	private String getLocationsIdsForHospital(LocationRefVo hospital)
	{
		//http://jira/browse/WDEV-21222
		OrganisationAndLocation impl = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.getTheatreAndProcedureRoomsIDsForLocation(hospital);
	}

	public LocationLiteVoCollection listHospitals()
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveHospitalsLite();
	}

	public IGenericItem[] listProcedures(String name)
	{
		CCIAdmin impl = (CCIAdmin) getDomainImpl(CCIAdminImpl.class);
		return impl.listIGenericItems(name, CciType.PROCEDURE, true);
	}

	public ServiceLiteVoCollection listServices()
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.listActiveCanBeScheduledService();
	}

	public SessionParentChildSlotVoCollection getSessionSlots(Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			return null;

		String query = "select slots from Sch_Session AS sess left join sess.parentChildSlots as slots where sess.id = :sessionID order by slots.startTime asc";

		return SessionParentChildSlotVoAssembler.createSessionParentChildSlotVoCollectionFromSessionParentChildSlot(getDomainFactory().find(query, new String[] { "sessionID" }, new Object[] { session.getID_Sch_Session() }));
	}

	public String getBookingCommentForAppt(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null)
			return null;

		Object obj = getDomainFactory().find("select sch.bookingComments from Sch_Booking as sch left join sch.appointments as appts where appts.id = :APPTID", new String[] { "APPTID" }, new Object[] { appointment.getID_Booking_Appointment() }).get(0);

		return obj != null && obj instanceof String ? (String) obj : null;
	}

	public Boolean hasBookingRights(IAppRole role, Sch_SessionRefVo session)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.hasBookingRights(role, session);
	}

	public SessionTheatreVo getSession(Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			return null;

		return SessionTheatreVoAssembler.create((Sch_Session) getDomainFactory().getDomainObject(Sch_Session.class, session.getID_Sch_Session()));
	}

	public CareContextRefVo getCareContextForReferral(CatsReferralRefVo catsReferral)
	{
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		List careContext = factory.find("select cc from CatsReferral AS referral left join referral.careContext as cc where referral.id = :referralID", new String[] { "referralID" }, new Object[] { catsReferral.getID_CatsReferral() });

		if (careContext != null && careContext.size() > 0 && careContext.get(0) instanceof CareContext)
			return new CareContextRefVo(((CareContext) careContext.get(0)).getId(), ((CareContext) careContext.get(0)).getVersion());

		return null;

	}

	public PendingEmergencyTheatreForBookVo getPendingEmergencyTheatre(PendingEmergencyTheatreRefVo pendingEmergencyTheatre)
	{
		if (pendingEmergencyTheatre == null || pendingEmergencyTheatre.getID_PendingEmergencyTheatre() == null)
			return null;

		return PendingEmergencyTheatreForBookVoAssembler.create((PendingEmergencyTheatre) getDomainFactory().getDomainObject(PendingEmergencyTheatre.class, pendingEmergencyTheatre.getID_PendingEmergencyTheatre()));
	}

	public LocationLiteVo getHospitalForLocation(LocationRefVo location)
	{
		if (location == null)
			return null;

		DomainFactory factory = getDomainFactory();

		Location currentHospital = getHospital((Location) factory.getDomainObject(Location.class, location.getID_Location()));

		if (currentHospital instanceof LocSite)
			return LocationLiteVoAssembler.create((Location) currentHospital);

		return null;
	}

	private Location getHospital(Location doLocation)
	{
		if (doLocation == null)
			return null;

		if (doLocation instanceof LocSite && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return doLocation;

		while (doLocation.getParentLocation() != null)
		{
			doLocation = doLocation.getParentLocation();
			if (doLocation instanceof LocSite && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return doLocation;
		}

		return null;
	}

	public void addSlotToSession(Sch_SessionRefVo session, SessionParentChildSlotVo slot) throws StaleObjectException
	{
		if (session == null || slot == null)
			throw new CodingRuntimeException("voSession or voSlot is null in method addSlotToSession");

		DomainFactory factory = getDomainFactory();

		Sch_Session doSession = (Sch_Session) factory.getDomainObject(session);

		SessionParentChildSlot doSlot = SessionParentChildSlotVoAssembler.extractSessionParentChildSlot(factory, slot);
		doSlot.setStatus(getDomLookup(Status_Reason.SLOTOPENED));
		doSlot.setSession(doSession);
		doSlot.setSessDateTime(doSession.getSessionDate());

		doSession.getParentChildSlots().add(doSlot);
		factory.save(doSession);

	}

	public BookingAppointmentTheatreLiteVo geTheatreAppointment(Booking_AppointmentRefVo appointment)
	{
		if( appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		return BookingAppointmentTheatreLiteVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(Booking_Appointment.class, appointment.getID_Booking_Appointment()));
	}
}
