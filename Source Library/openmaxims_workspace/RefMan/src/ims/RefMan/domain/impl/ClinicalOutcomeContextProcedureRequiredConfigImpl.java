//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseClinicalOutcomeContextProcedureRequiredConfigImpl;
import ims.RefMan.domain.objects.ClinicalOutcomeContextProcedureRequiredConfig;
import ims.RefMan.vo.ClinicalOutcomeContextProcedureRequiredConfigVo;
import ims.RefMan.vo.domain.ClinicalOutcomeContextProcedureRequiredConfigVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

public class ClinicalOutcomeContextProcedureRequiredConfigImpl extends BaseClinicalOutcomeContextProcedureRequiredConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.ClinicalOutcomeContextProcedureRequiredConfigVoCollection list()
	{
		String query = "select outcome from ClinicalOutcomeContextProcedureRequiredConfig as outcome where outcome.isRIE is null";
		
		return ClinicalOutcomeContextProcedureRequiredConfigVoAssembler.createClinicalOutcomeContextProcedureRequiredConfigVoCollectionFromClinicalOutcomeContextProcedureRequiredConfig(getDomainFactory().find(query));
	}

	public void save(ims.RefMan.vo.ClinicalOutcomeContextProcedureRequiredConfigVoCollection records) throws ims.domain.exceptions.StaleObjectException
	{

		// Check for valid record
		if (records == null)
			throw new DomainRuntimeException("Can not save null record");

		// Check record for validation
		if (!records.isValidated())
			throw new DomainRuntimeException("Can not save record not validated");

		// Get domain factory
		DomainFactory factory = getDomainFactory();

		// Extract ICP domain object
		for (ClinicalOutcomeContextProcedureRequiredConfigVo outcomeConfigVo : records)
		{
			ClinicalOutcomeContextProcedureRequiredConfig domainOutcome = ClinicalOutcomeContextProcedureRequiredConfigVoAssembler.extractClinicalOutcomeContextProcedureRequiredConfig(factory, outcomeConfigVo);

			// Save domain object
			factory.save(domainOutcome);
		}

		
	}
}
