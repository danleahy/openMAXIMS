//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.66 build 3236.16532)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.Iterator;
import java.util.List;

import ims.admin.vo.domain.PrintAgentVoAssembler;
import ims.RefMan.domain.base.impl.BaseMultiActivitySchedulerImpl;
import ims.core.admin.domain.objects.PrintAgent;
import ims.core.admin.domain.objects.TemplatePrinter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

public class MultiActivitySchedulerImpl extends BaseMultiActivitySchedulerImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listPrintAgents
	*/
	public ims.admin.vo.PrintAgentVoCollection listPrintAgents()
	{
		DomainFactory factory = getDomainFactory();

		//we list CARE_UK jobs only
		List list = factory.find("from PrintAgent pa where pa.jobType.id in (-1593) order by pa.id");

		return PrintAgentVoAssembler.createPrintAgentVoCollectionFromPrintAgent(list).sort();
	}

	/**
	* savePrintAgent
	*/
	public ims.admin.vo.PrintAgentVo savePrintAgent(ims.admin.vo.PrintAgentVo printAgent) throws ims.domain.exceptions.StaleObjectException
	{
		if (!printAgent.isValidated())
		{
			throw new DomainRuntimeException("PrintAgentVo has not been validated");
		}

		DomainFactory factory = getDomainFactory();
		PrintAgent doPrintAgent = PrintAgentVoAssembler.extractPrintAgent(factory, printAgent);

		Iterator it = doPrintAgent.getTemplatePrinters().iterator();

		while (it.hasNext())
			factory.save((TemplatePrinter) it.next());

		factory.save(doPrintAgent);
		return PrintAgentVoAssembler.create(doPrintAgent);
	}

	/**
	* getPrintAgent
	*/
	public ims.admin.vo.PrintAgentVo getPrintAgent(Integer jobId)
	{
		DomainFactory factory = getDomainFactory();
		PrintAgent obj = (PrintAgent) factory.getDomainObject(PrintAgent.class, jobId);
		factory.refresh(obj);
		return PrintAgentVoAssembler.create(obj);
	}
}
