//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.recorddelayedcodingreason;

import java.util.ArrayList;

import ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVo;
import ims.core.vo.CodingDelayVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.ReferralToSpecialtyTeamVo;
import ims.emergency.vo.enums.EDReferralToSpecialtyEvent;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		// TODO Auto-generated method stub
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args!=null && args.length>=1 && args[0] instanceof DischargedEpisodeForClinicalCodingWorklistVo)
		{
			form.getLocalContext().setDischargedEpisode((DischargedEpisodeForClinicalCodingWorklistVo) args[0]);
		}
		
		if (args!=null && args.length>=2 && args[1] instanceof FormMode)
		{
			form.setMode((FormMode) args[1]);
			
		}
		
		initialize();
		
		if (FormMode.VIEW.equals(form.getMode()))
		{
			open();
		}
		
	}
	
	private void initialize()
	{
		Object mos = domain.getMosUser();
		if(mos != null){
			form.cmbRecordingUser().newRow((MemberOfStaffLiteVo)mos, mos.toString());
			form.cmbRecordingUser().setValue((MemberOfStaffLiteVo)mos);
		}
		
		form.dtimRecordingDateTime().setValue(new DateTime());
		
	}
	private void open()
	{
		clearScreen();
		populateScreenFromData(form.getLocalContext().getDischargedEpisode().getCodingDelay());
	}
	
	private void clearScreen()
	{
		form.cmbCodingDelayReason().setValue(null);
		form.txtCodingDelayReason().setValue(null);
		form.cmbRecordingUser().setValue(null);
		form.dtimRecordingDateTime().setValue(null);
		
	}
	
	private void populateScreenFromData(CodingDelayVo codingDelay)
	{
		if (codingDelay==null)
			return;
		
		form.cmbCodingDelayReason().setValue(codingDelay.getCodingDelayReason());
		form.txtCodingDelayReason().setValue(codingDelay.getCodingDelayReasonText());
		
		if(codingDelay.getRecordingInfoIsNotNull())
		{
			MemberOfStaffLiteVo mos = codingDelay.getRecordingInfo().getRecordingUser();
			if(mos!=null){
				form.cmbRecordingUser().newRow(mos, mos.toString());
				form.cmbRecordingUser().setValue(mos);	
			}
			form.dtimRecordingDateTime().setValue(codingDelay.getRecordingInfo().getRecordingDateTime());;
		}
		
	}
	
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.NO);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}
	
	private boolean save()
	{
		DischargedEpisodeForClinicalCodingWorklistVo dischargedEpisodeToSave=populateDataFromScreen(form.getLocalContext().getDischargedEpisode());
		
		String[] errors = dischargedEpisodeToSave.validate(getUIErrors());
		
		if (errors!=null && errors.length>0 )
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.save(dischargedEpisodeToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.cmbCodingDelayReason().getValue() == null && form.txtCodingDelayReason().getValue()==null)
		{
			errors.add("Please complete 'Coding Delay Reason' or 'Coding Delay Reason Text'!");
		}
		
		if (form.cmbRecordingUser().getValue()==null)
		{
			errors.add("'Recording User' is mandatory!");
		}
		
		if (form.dtimRecordingDateTime().getValue()==null)
		{
			errors.add("'Recording Date/Time' is mandatory!");
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private DischargedEpisodeForClinicalCodingWorklistVo populateDataFromScreen(DischargedEpisodeForClinicalCodingWorklistVo dischargedEpisode)
	{
	
		CodingDelayVo codingDelay=null;
		if (dischargedEpisode.getCodingDelay()==null)
			codingDelay = new CodingDelayVo();
		else
			codingDelay = (CodingDelayVo) dischargedEpisode.getCodingDelay().clone();
		
		codingDelay.setPatient(form.getGlobalContext().Core.getPatientShort());
		codingDelay.setCodingDelayReason(form.cmbCodingDelayReason().getValue());
		codingDelay.setCodingDelayReasonText(form.txtCodingDelayReason().getValue());
		
		if (codingDelay.getRecordingInfo()==null)
		{
			RecordingUserInformationVo voRecordingUserInformation = new RecordingUserInformationVo();
			voRecordingUserInformation.setRecordingDateTime(form.dtimRecordingDateTime().getValue());
			voRecordingUserInformation.setRecordingUser(form.cmbRecordingUser().getValue());
			codingDelay.setRecordingInfo(voRecordingUserInformation);
		}
		else
		{
			codingDelay.getRecordingInfo().setRecordingDateTime(form.dtimRecordingDateTime().getValue());
			codingDelay.getRecordingInfo().setRecordingUser(form.cmbRecordingUser().getValue());
		}
		
		dischargedEpisode.setCodingDelay(codingDelay);
		
		return dischargedEpisode;
			
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
