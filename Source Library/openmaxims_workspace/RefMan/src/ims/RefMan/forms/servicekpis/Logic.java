//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Silviu Checherita using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.servicekpis;

import java.util.ArrayList;

import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer DAYS_FOR_WEEK = 7;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.getGlobalContext().RefMan.getSelectedServiceForKpi().getService().getIsSubjectToRTTClock()))
		{
			if (!validateUIRules())
			{
				return;
			}
		}
		populateDataFromScreen();
		engine.close(DialogResult.OK);
	}
	
	private void open()
	{
		populateScreenFromData();
		updateControlsState();
	}
	
	private void populateScreenFromData()
	{
		if (form.getGlobalContext().RefMan.getSelectedServiceForKpiIsNotNull())
		{
			ContractServiceLocationsConfigVo selectedService = form.getGlobalContext().RefMan.getSelectedServiceForKpi();
			
			if (selectedService.getDaysToRTTBreachDateIsNotNull())
				form.intWeekToTreatmentKpi().setValue(selectedService.getDaysToRTTBreachDate()/DAYS_FOR_WEEK);
			
			if (selectedService.getDaysTo1stApptIsNotNull())
			{
				form.intDaysToFirstActivityApp().setValue(selectedService.getDaysTo1stAppt());
			}
		}
	}
	
	private void populateDataFromScreen()
	{
		form.getGlobalContext().RefMan.getSelectedServiceForKpi().setDaysToRTTBreachDate(form.intWeekToTreatmentKpi().getValue() != null  && form.intWeekToTreatmentKpi().getValue() > 0 ? form.intWeekToTreatmentKpi().getValue()*DAYS_FOR_WEEK : null);
		form.getGlobalContext().RefMan.getSelectedServiceForKpi().setDaysTo1stAppt(form.intDaysToFirstActivityApp().getValue() != null && form.intDaysToFirstActivityApp().getValue() > 0 ? form.intDaysToFirstActivityApp().getValue() : null);
	}
	
	private void updateControlsState()
	{
		form.intWeekToTreatmentKpi().setRequired(Boolean.TRUE.equals(form.getGlobalContext().RefMan.getSelectedServiceForKpi().getService().getIsSubjectToRTTClock()));
		form.intDaysToFirstActivityApp().setRequired(Boolean.TRUE.equals(form.getGlobalContext().RefMan.getSelectedServiceForKpi().getService().getIsSubjectToRTTClock()));
	}
	
	private boolean validateUIRules()
	{
		ArrayList<String> errorList = new ArrayList<String>();

		if (form.intWeekToTreatmentKpi().getValue() == null)
		{
			errorList.add("Week(s) to Treatment KPI is mandatory.");
		}
		else if (form.intWeekToTreatmentKpi().getValue() != null && form.intWeekToTreatmentKpi().getValue() <=0)
		{
			errorList.add("Week(s) to Treatment KPI must be greater than 0.");
		}

		if (form.intDaysToFirstActivityApp().getValue() == null)
		{
			errorList.add("No. of Days to 1st Activity Appointment is mandatory.");
		}
		else if (form.intDaysToFirstActivityApp().getValue() != null && form.intDaysToFirstActivityApp().getValue() <=0)
		{
			errorList.add("No. of Days to 1st Activity Appointment must be greater than 0.");
		}

		if (errorList.size() > 0)
		{
			engine.showErrors(errorList.toArray(new String[errorList.size()]));
			return false;
		}
		return true;
	}
}
