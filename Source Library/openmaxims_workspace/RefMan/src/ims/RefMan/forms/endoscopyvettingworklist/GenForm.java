//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.endoscopyvettingworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbPlannedDateInComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
		{
			return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbRTTBreachDateInComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TimeUnitsSecondsToMonths getValue()
		{
			return (ims.core.vo.lookups.TimeUnitsSecondsToMonths)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TimeUnitsSecondsToMonths value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbProcedureTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ProcedureEndoscopyType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ProcedureEndoscopyType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ProcedureEndoscopyType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ProcedureEndoscopyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ProcedureEndoscopyType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ProcedureEndoscopyType getValue()
		{
			return (ims.core.vo.lookups.ProcedureEndoscopyType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ProcedureEndoscopyType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbUrgencyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReferralUrgency getValue()
		{
			return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
		{
			super.control.setValue(value);
		}
	}

	public static class GroupElectiveListTypeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 296, 16, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Surveillance / Planned  ", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 152, 16, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Waiting / Booked", startTabIndex.intValue() + 1);
		}
		public void setText(GroupElectiveListTypeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupElectiveListTypeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupElectiveListTypeEnumeration.None;
				case 0: return GroupElectiveListTypeEnumeration.rdoPlannedSurveillance;
				case 1: return GroupElectiveListTypeEnumeration.rdoWaitingBooked;
			}
			return null;
		}
		public void setValue(GroupElectiveListTypeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupElectiveListTypeEnumeration.None.id);
		}
		public boolean isEnabled(GroupElectiveListTypeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupElectiveListTypeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupElectiveListTypeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupElectiveListTypeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupElectiveListTypeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupElectiveListTypeEnumeration None = new GroupElectiveListTypeEnumeration(-1);
		public static GroupElectiveListTypeEnumeration rdoPlannedSurveillance = new GroupElectiveListTypeEnumeration(0);
		public static GroupElectiveListTypeEnumeration rdoWaitingBooked = new GroupElectiveListTypeEnumeration(1);
		private GroupElectiveListTypeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupElectiveListTypeEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.EndoscopyVettingWorklistSearchCritVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.EndoscopyVettingWorklistSearchCritVo' of the global context variable 'RefMan.EndoscopyVettingWorklistSearchCriteriaVo' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(135);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuEndoscopyVettingWorklist = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem = factory.createMenuItem(startControlID.intValue() + 1, "View Endoscopy Request", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6390001)))
			contextMenus.RefMan.contextMenuEndoscopyVettingWorklist.add(contextMenus.RefMan.contextMenuEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem);
		contextMenus.RefMan.contextMenuEndoscopyVettingWorklistADD_EDIT_COMMENTSItem = factory.createMenuItem(startControlID.intValue() + 2, "Add/Edit Comments", true, false, new Integer(102136), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6390002)))
			contextMenus.RefMan.contextMenuEndoscopyVettingWorklist.add(contextMenus.RefMan.contextMenuEndoscopyVettingWorklistADD_EDIT_COMMENTSItem);
		form.registerMenu(contextMenus.RefMan.contextMenuEndoscopyVettingWorklist);


		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 480, 40, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "General Anaesthetic?", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 93, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned Date within:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 143, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Breach Date within:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 480, 16, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type:", new Integer(1), null, new Integer(0)}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 208, 91, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPlannedDateInTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPlannedDateInTemp);
		cmbPlannedDateInComboBox cmbPlannedDateIn = (cmbPlannedDateInComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlannedDateInComboBox.class, m_cmbPlannedDateInTemp);
		super.addComboBox(cmbPlannedDateIn);
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 208, 64, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbRTTBreachDateInTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbRTTBreachDateInTemp);
		cmbRTTBreachDateInComboBox cmbRTTBreachDateIn = (cmbRTTBreachDateInComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRTTBreachDateInComboBox.class, m_cmbRTTBreachDateInTemp);
		super.addComboBox(cmbRTTBreachDateIn);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 152, 38, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbProcedureTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbProcedureTypeTemp);
		cmbProcedureTypeComboBox cmbProcedureType = (cmbProcedureTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProcedureTypeComboBox.class, m_cmbProcedureTypeTemp);
		super.addComboBox(cmbProcedureType);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 608, 14, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbUrgencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbUrgencyTemp);
		cmbUrgencyComboBox cmbUrgency = (cmbUrgencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgencyComboBox.class, m_cmbUrgencyTemp);
		super.addComboBox(cmbUrgency);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 608, 40, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 336, 93, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Include Past Planned Dates", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 336, 66, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Include Patients that have breached", Boolean.TRUE, null}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 832, 480, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.RefMan.contextMenuEndoscopyVettingWorklist, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 152, 91, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 152, 64, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 808, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 776, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupElectiveListType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupElectiveListType);
		GroupElectiveListTypeRadioButton GroupElectiveListType = (GroupElectiveListTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupElectiveListTypeRadioButton.class, tmpGroupElectiveListType);
		GroupElectiveListType.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupElectiveListType);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblPlannedDateIn()
	{
		return (Label)super.getControl(1);
	}
	public Label lblUrgency()
	{
		return (Label)super.getControl(4);
	}
	public cmbPlannedDateInComboBox cmbPlannedDateIn()
	{
		return (cmbPlannedDateInComboBox)super.getComboBox(0);
	}
	public cmbRTTBreachDateInComboBox cmbRTTBreachDateIn()
	{
		return (cmbRTTBreachDateInComboBox)super.getComboBox(1);
	}
	public cmbProcedureTypeComboBox cmbProcedureType()
	{
		return (cmbProcedureTypeComboBox)super.getComboBox(2);
	}
	public cmbUrgencyComboBox cmbUrgency()
	{
		return (cmbUrgencyComboBox)super.getComboBox(3);
	}
	public CheckBox chkGeneralAnaesthetic()
	{
		return (CheckBox)super.getControl(10);
	}
	public CheckBox chkIncludePastPlannedDates()
	{
		return (CheckBox)super.getControl(11);
	}
	public CheckBox chkIncludePatientsBreachedRTTDate()
	{
		return (CheckBox)super.getControl(12);
	}
	public DynamicGrid dyngrdResults()
	{
		return (DynamicGrid)super.getControl(13);
	}
	public IntBox intPlannedDateIn()
	{
		return (IntBox)super.getControl(14);
	}
	public IntBox intRTTBreachDateIn()
	{
		return (IntBox)super.getControl(15);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(16);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(17);
	}
	public GroupElectiveListTypeRadioButton GroupElectiveListType()
	{
		return (GroupElectiveListTypeRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ElectiveListAddLaterDialog = new LocalFormName(134247);
			}
			public final FormName ElectiveListAddLaterDialog;
		}

		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				CalculatorDisabled24 = new ImageHelper(102544, "Images/Core/calculator_disabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image CalculatorDisabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ClinicalOrderInvDate = new ims.framework.ContextVariable("ClinicalOrderInvDate", prefix + "_lv_RefMan.EndoscopyVettingWorklist.__internal_x_context__ClinicalOrderInvDate_" + componentIdentifier + "");
		}
		
		public boolean getClinicalOrderInvDateIsNotNull()
		{
			return !cxl_ClinicalOrderInvDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getClinicalOrderInvDate()
		{
			return (ims.framework.utils.Date)cxl_ClinicalOrderInvDate.getValue(context);
		}
		public void setClinicalOrderInvDate(ims.framework.utils.Date value)
		{
			cxl_ClinicalOrderInvDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalOrderInvDate = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EndoscopyVettingWorklist implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int VIEW_Endoscopy_Request = 1;
				public static final int ADD_EDIT_COMMENTS = 2;
			}
			public void disableAllEndoscopyVettingWorklistMenuItems()
			{
				this.contextMenuEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem.setEnabled(false);
				this.contextMenuEndoscopyVettingWorklistADD_EDIT_COMMENTSItem.setEnabled(false);
			}
			public void hideAllEndoscopyVettingWorklistMenuItems()
			{
				this.contextMenuEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem.setVisible(false);
				this.contextMenuEndoscopyVettingWorklistADD_EDIT_COMMENTSItem.setVisible(false);
			}
			private Menu contextMenuEndoscopyVettingWorklist;
			public ReadOnlyMenuItem getEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem()
			{
				return this.contextMenuEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem;
			}
			private MenuItem contextMenuEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem;
			public ReadOnlyMenuItem getEndoscopyVettingWorklistADD_EDIT_COMMENTSItem()
			{
				return this.contextMenuEndoscopyVettingWorklistADD_EDIT_COMMENTSItem;
			}
			private MenuItem contextMenuEndoscopyVettingWorklistADD_EDIT_COMMENTSItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[222];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REFERRAL", "Referral");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PRIORITY", "Priority");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-OPERATEONANTICOAGULANTCOMMENT", "OperateOnAnticoagulantComment");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-COMMENTS", "Comments");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TCIGIVEN", "TCIGiven");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TAKESLONGERTHANSTANDARDTIME", "TakesLongerThanStandardTime");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHETISTREQUIREDINTHEATRE", "AnaesthetistRequiredInTheatre");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CAREGIVEN", "CareGiven");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMITTEDIN", "AdmittedIn");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMITTEDINUNITOFTIME", "AdmittedInUnitOfTime");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLANAESTHETICTYPE", "WLAnaestheticType");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLAVAILABLEATSHORTNOTICE", "WLAvailableAtShortNotice");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLAVAILABLEATSHORTNOTICEPERIOD", "WLAvailableAtShortNoticePeriod");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLNOOFPREOPERATIVENIGHTS", "WLNoOfPreOperativeNights");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLANTICIPATEDSTAY", "WLAnticipatedStay");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-HDUBEDREQUIRED", "HDUBedRequired");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ITUBEDREQUIRED", "ITUBedRequired");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLPATIENTRECEIVINGANTICOAGULANTTHERAPY", "WLPatientReceivingAnticoagulantTherapy");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-LANGUAGE", "Language");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TRANSPORT", "Transport");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-POINTS", "Points");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ISSUITABLEFORTELEPHONEASSESSMENT", "IsSuitableForTelephoneAssessment");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-MULTISERVICECASE", "MultiServiceCase");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-VETTINGDATE", "VettingDate");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREASSESSMENTOUTCOME", "PreAssessmentOutcome");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
