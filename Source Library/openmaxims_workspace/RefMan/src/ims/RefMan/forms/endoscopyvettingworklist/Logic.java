//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Petru Rotariu using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.endoscopyvettingworklist;

import java.util.ArrayList;

import ims.RefMan.forms.endoscopyvettingworklist.GenForm.GroupElectiveListTypeEnumeration;
import ims.RefMan.vo.EndoscopyVettingWorklistSearchCritVo;
import ims.RefMan.vo.PatientElectiveListAddLaterVo;
import ims.RefMan.vo.PatientElectiveListForEndoscWorklistVo;
import ims.RefMan.vo.PatientElectiveListForEndoscWorklistVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientShortListVo;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String	COLUMN_PATIENT_NAME		= "0";
	private static final String	COLUMN_IDENTIFIER		= "1";
	private static final String	COLUMN_URGENCY        	= "2";
	private static final String	COLUMN_DATE_ON_LIST 	= "3";
	private static final String	COLUMN_RTT_BREACH		= "4";
	private static final String	COLUMN_PROCEDURE   		= "5";
	private static final String COLUMN_COMMENTS			= "6";
	

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	private void open()
	{
		if( form.getGlobalContext().RefMan.getEndoscopyVettingWorklistSearchCriteriaVo() != null )
		{
			populateSearchCriteriaFromData(form.getGlobalContext().RefMan.getEndoscopyVettingWorklistSearchCriteriaVo());
			doSearch();
		}
		
		updateControlsState();
	}
	
	private void populateSearchCriteriaFromData(EndoscopyVettingWorklistSearchCritVo searchCrit)
	{
		if (searchCrit == null )
			return;
		
			
		if( ElectiveAdmissionType.PLANNED_TYPE13.equals(searchCrit.getElectiveAdmissionType()))
		{
			form.GroupElectiveListType().setValue(GroupElectiveListTypeEnumeration.rdoPlannedSurveillance);
			
		}
		else if( ElectiveAdmissionType.ELECTIVE_TYPE11.equals(searchCrit.getElectiveAdmissionType()))
		{
			form.GroupElectiveListType().setValue(GroupElectiveListTypeEnumeration.rdoWaitingBooked);
		}
		else
			form.GroupElectiveListType().setValue(GroupElectiveListTypeEnumeration.None);
		
		
		form.cmbUrgency().setValue(searchCrit.getUrgency());				
		form.cmbProcedureType().setValue(searchCrit.getProcedureType());
		
		form.intRTTBreachDateIn().setValue(searchCrit.getRTTBreachDateIn());
		form.cmbRTTBreachDateIn().setValue(searchCrit.getRTTBReachDateUnits());
		form.chkIncludePatientsBreachedRTTDate().setValue(searchCrit.getIncludePatientsBreached());
		
		
		form.intPlannedDateIn().setValue(searchCrit.getPlannedDateInt());
		form.cmbPlannedDateIn().setValue(searchCrit.getPlaneDateUnits());
		form.chkIncludePastPlannedDates().setValue(searchCrit.getIncludePatientsBreached());
			
		
		if( YesNo.YES.equals(searchCrit.getGeneralAnaesthetic()))
		{
			form.chkGeneralAnaesthetic().setValue(Boolean.TRUE);
		}
		else
		{
			form.chkGeneralAnaesthetic().setValue(Boolean.FALSE);
		}
	}
	
	private void updateControlsState()
	{
		boolean selectedPlannedSurveilance = ims.RefMan.forms.endoscopyvettingworklist.GenForm.GroupElectiveListTypeEnumeration.rdoPlannedSurveillance.equals(form.GroupElectiveListType().getValue());

		form.lblPlannedDateIn().setVisible(selectedPlannedSurveilance);
		form.intPlannedDateIn().setVisible(selectedPlannedSurveilance);
		form.cmbPlannedDateIn().setVisible(selectedPlannedSurveilance);
		form.chkIncludePastPlannedDates().setVisible(selectedPlannedSurveilance);
		form.cmbUrgency().setVisible(!selectedPlannedSurveilance); //WDEV-22694
		form.lblUrgency().setVisible(!selectedPlannedSurveilance); //WDEV-22694

		form.getContextMenus().RefMan.hideAllEndoscopyVettingWorklistMenuItems();
		form.getContextMenus().RefMan.getEndoscopyVettingWorklistVIEW_Endoscopy_RequestItem().setVisible(form.dyngrdResults().getSelectedRow() != null);
		form.getContextMenus().RefMan.getEndoscopyVettingWorklistADD_EDIT_COMMENTSItem().setVisible(form.dyngrdResults().getSelectedRow() != null);
		
	}
	/*protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}*/
	private void clearScreen()
	{
		form.GroupElectiveListType().setValue(GroupElectiveListTypeEnumeration.None);
		form.cmbProcedureType().setValue(null);
		form.intRTTBreachDateIn().setValue(null);
		form.cmbRTTBreachDateIn().setValue(null);
		form.chkIncludePatientsBreachedRTTDate().setValue(null);
		form.intPlannedDateIn().setValue(null);
		form.cmbPlannedDateIn().setValue(null);
		form.chkIncludePastPlannedDates().setValue(null);
		form.cmbUrgency().setValue(null);
		form.chkGeneralAnaesthetic().setValue(null);
		form.dyngrdResults().getRows().clear();
	}
	
	/*protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}*/
	private void doSearch()
	{
		String[] errors = validateSearchCriteria();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		EndoscopyVettingWorklistSearchCritVo searchCrit = populateSearchCriteriaFromScreen();
		form.getGlobalContext().RefMan.setEndoscopyVettingWorklistSearchCriteriaVo(searchCrit);
		
		PatientElectiveListForEndoscWorklistVoCollection tempColl = domain.listPatientElectiveListEndoscopist(searchCrit);
		populateGreedFromList(tempColl);
		updateControlsState();
	}
	
	
	private String[] validateSearchCriteria()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.intRTTBreachDateIn().getValue() != null && form.cmbRTTBreachDateIn().getValue() == null)
		{
			errorList.add("RTT Breach Date time units value is mandatory.");
		}
		
		if (form.intPlannedDateIn().getValue() != null && form.cmbPlannedDateIn().getValue() == null)
		{
			errorList.add("Planned Date time units value is mandatory.");
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}
	
	
	private void populateGreedFromList(PatientElectiveListForEndoscWorklistVoCollection record)
	{
		form.dyngrdResults().getRows().clear();
		if( record == null || record.size() == 0)
		{
			engine.showMessage("No Records found.");
			return;
		}
		for(int i = 0; i < record.size();i++)
		{
			PatientElectiveListForEndoscWorklistVo patele  = record.get(i);
			if( patele != null )
			{
    			DynamicGridRow newRow = form.dyngrdResults().getRows().newRow();
    			DynamicGridCell cellPatient = newRow.getCells().newCell(getColumnById(COLUMN_PATIENT_NAME), DynamicCellType.STRING);
    			cellPatient.setReadOnly(true);
    			cellPatient.setValue( patele.getPatient() != null && patele.getPatient() != null ? patele.getPatient().getName().toStringSurnameFirst() : null);
    			cellPatient.setTooltip(patele.getPatient() != null && patele.getPatient().getName() != null ? patele.getPatient().getName().toStringSurnameFirst() : "");
    			
    			
    			DynamicGridCell cellPatID = newRow.getCells().newCell(getColumnById(COLUMN_IDENTIFIER), DynamicCellType.STRING);
    			cellPatID.setReadOnly(true);
    			cellPatID.setValue( patele.getPatient() != null && patele.getPatient().getDisplayId() != null ? patele.getPatient().getDisplayId().getIdValue() : null);
    			cellPatID.setTooltip(patele.getPatient() != null && patele.getPatient().getDisplayId() != null ? patele.getPatient().getDisplayId().getIdValue() : "");
    			
    			DynamicGridCell cellUrgency = newRow.getCells().newCell(getColumnById( COLUMN_URGENCY ), DynamicCellType.STRING);
    			cellUrgency.setReadOnly(true);
    			cellUrgency.setValue( patele.getPriority() != null ? patele.getPriority().toString() : null);
    			cellUrgency.setTooltip(patele.getPriority() != null ? patele.getPriority().toString() : "");
    			
    			
    			DynamicGridCell cellDateOnList = newRow.getCells().newCell(getColumnById( COLUMN_DATE_ON_LIST ), DynamicCellType.STRING);
    			cellDateOnList.setReadOnly(true);
    			cellDateOnList.setValue( patele.getDateOnList() != null ? patele.getDateOnList().toString() : null);
    			cellDateOnList.setTooltip(patele.getDateOnList() != null ? patele.getDateOnList().toString() : "");
    			
    			DynamicGridCell cellRTTBreach = newRow.getCells().newCell(getColumnById( COLUMN_RTT_BREACH ), DynamicCellType.STRING);
    			cellRTTBreach.setReadOnly(true);
    			cellRTTBreach.setValue( patele.getReferral() != null && patele.getReferral().getReferralDetails() != null && patele.getReferral().getReferralDetails().getEnd18WW() != null ? patele.getReferral().getReferralDetails().getEnd18WW().toString() : null);
    			cellRTTBreach.setTooltip(patele.getReferral() != null && patele.getReferral().getReferralDetails() != null && patele.getReferral().getReferralDetails().getEnd18WW() != null ? patele.getReferral().getReferralDetails().getEnd18WW().toString() : "");
    			
    			DynamicGridCell cellProcedure = newRow.getCells().newCell(getColumnById( COLUMN_PROCEDURE ), DynamicCellType.STRING);
    			cellProcedure.setReadOnly(true);
    			cellProcedure.setValue( patele.getPrimaryProcedure() != null && patele.getPrimaryProcedure().getProcedureName() != null ? patele.getPrimaryProcedure().getProcedureName() : null);
    			cellProcedure.setTooltip(patele.getPrimaryProcedure() != null && patele.getPrimaryProcedure().getProcedureName() != null ? patele.getPrimaryProcedure().getProcedureName() : "");
    			
    			DynamicGridCell cellComments = newRow.getCells().newCell(getColumnById( COLUMN_COMMENTS ), DynamicCellType.STRING);
    			cellComments.setReadOnly(true);
    			cellComments.setValue( patele.getComments());
    			cellComments.setTooltip(patele.getComments());
    			
    			newRow.setValue(patele);
    			
    			
			}
				
		}
	}
	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.dyngrdResults().getColumns().getByIdentifier(identifier);
	}

	private EndoscopyVettingWorklistSearchCritVo populateSearchCriteriaFromScreen()
	{
		EndoscopyVettingWorklistSearchCritVo searchCrit = new EndoscopyVettingWorklistSearchCritVo();
		if( ims.RefMan.forms.endoscopyvettingworklist.GenForm.GroupElectiveListTypeEnumeration.rdoPlannedSurveillance.equals(form.GroupElectiveListType().getValue()))
		{
			searchCrit.setElectiveAdmissionType(ElectiveAdmissionType.PLANNED_TYPE13);
		}
		else if( ims.RefMan.forms.endoscopyvettingworklist.GenForm.GroupElectiveListTypeEnumeration.rdoWaitingBooked.equals(form.GroupElectiveListType().getValue()))
		{
			searchCrit.setElectiveAdmissionType(ElectiveAdmissionType.ELECTIVE_TYPE11);
		}
		else
			searchCrit.setElectiveAdmissionType(null);
		
		if( form.cmbUrgency().getVisible() )
		{
			searchCrit.setUrgency(form.cmbUrgency().getValue());
		}
		else
		{
			searchCrit.setUrgency(null);
		}
		
		searchCrit.setProcedureType(form.cmbProcedureType().getValue());
		
		searchCrit.setRTTBreachDateIn(form.intRTTBreachDateIn().getValue());
		searchCrit.setRTTBReachDateUnits(form.cmbRTTBreachDateIn().getValue());
		searchCrit.setIncludePatientsBreached(form.chkIncludePatientsBreachedRTTDate().getValue());
		
		if( form.intPlannedDateIn().isVisible() )
		{
			searchCrit.setPlannedDateInt(form.intPlannedDateIn().getValue());
		}
		else
			searchCrit.setPlannedDateInt(null);
		
		if(form.cmbPlannedDateIn().getVisible() )
		{
			searchCrit.setPlaneDateUnits(form.cmbPlannedDateIn().getValue());
		}
		else
			searchCrit.setPlaneDateUnits(null);
		
		if( form.chkIncludePastPlannedDates().isVisible() )
		{
			searchCrit.setIncludePastPlannedDates(form.chkIncludePastPlannedDates().getValue());
		}
		else
			searchCrit.setIncludePastPlannedDates(null);
		
		
		/*if( GroupGeneralAnaestheticEnumeration.rdoYes.equals(form.GroupGeneralAnaesthetic().getValue()))
		{
			searchCrit.setGeneralAnaesthetic(YesNo.YES);
		}
		else if(GroupGeneralAnaestheticEnumeration.rdoNo.equals(form.GroupGeneralAnaesthetic().getValue()))
		{
			searchCrit.setGeneralAnaesthetic(YesNo.NO);
		}
		else
			searchCrit.setGeneralAnaesthetic(null); */
		
		if(Boolean.TRUE.equals(form.chkGeneralAnaesthetic().getValue()))
		{
			searchCrit.setGeneralAnaesthetic(YesNo.YES);
		}
		else
		{
			searchCrit.setGeneralAnaesthetic(null);
		}
		
		return searchCrit;
	}
	
	protected void onProcedureTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	private void initialise()
	{
		form.cmbPlannedDateIn().removeRow(TimeUnitsSecondsToMonths.HOURS);
		form.cmbPlannedDateIn().removeRow(TimeUnitsSecondsToMonths.MINUTES);
		form.cmbPlannedDateIn().removeRow(TimeUnitsSecondsToMonths.SECONDS);
		
		form.cmbRTTBreachDateIn().removeRow(TimeUnitsSecondsToMonths.HOURS);
		form.cmbRTTBreachDateIn().removeRow(TimeUnitsSecondsToMonths.MINUTES);
		form.cmbRTTBreachDateIn().removeRow(TimeUnitsSecondsToMonths.SECONDS);
		
		createDynamicGridResults();
	}
	private void createDynamicGridResults()
	{
		
		form.dyngrdResults().setSelectable(true);
		
		// Get default patient identifier
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		
		DynamicGridColumn column = form.dyngrdResults().getColumns().newColumn("Patient Name", COLUMN_PATIENT_NAME);
		
		column.setWidth(130);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn(dispIdType.getText(), COLUMN_IDENTIFIER);
		
		column.setWidth(90);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Urgency", COLUMN_URGENCY);
		
		column.setWidth(100);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Date on List", COLUMN_DATE_ON_LIST);
		
		column.setWidth(90);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("RTT Breach", COLUMN_RTT_BREACH);
		
		column.setWidth(90);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Procedure", COLUMN_PROCEDURE);
		
		column.setWidth(145);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdResults().getColumns().newColumn("Comments", COLUMN_COMMENTS);
		column.setWidth(-1);
		column.setAlignment(Alignment.LEFT);
		column.setReadOnly(true);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
	}

	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if( form.getForms().RefMan.ElectiveListAddLaterDialog.equals(formName))
		{
			if (DialogResult.OK.equals(result))
			{
				PatientElectiveListAddLaterVo electiveListLater = form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo();
				if( electiveListLater != null )
				{
					try
					{
						domain.savePatientElectiveList(electiveListLater);
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
					catch (UniqueKeyViolationException e)
					{
						// TODO Auto-generated catch block
						e.printStackTrace();
						engine.showMessage(e.getMessage());
					}
					
					open();
				}
			}
			else if (DialogResult.ABORT.equals(result))
			{
				open();
			}
			else if (DialogResult.CANCEL.equals(result)) //WDEV-22488
			{
				open();
			}
		}
		
		
	}

	
	protected void onRadioButtonGroupElectiveListTypeValueChanged() throws PresentationLogicException
	{
		if( ims.RefMan.forms.endoscopyvettingworklist.GenForm.GroupElectiveListTypeEnumeration.rdoPlannedSurveillance.equals(form.GroupElectiveListType().getValue()))
		{
			form.cmbUrgency().setValue(null);
						
		}
		else
		{
			form.intPlannedDateIn().setValue(null);
			form.cmbPlannedDateIn().setValue(null);
			form.chkIncludePastPlannedDates().setValue(null);
		}
		
		updateControlsState();
	}

	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.RefMan.forms.endoscopyvettingworklist.GenForm.ContextMenus.RefManNamespace.EndoscopyVettingWorklist.VIEW_Endoscopy_Request:
				editWaitingElectiveListCardDialog();
			break;
			case ims.RefMan.forms.endoscopyvettingworklist.GenForm.ContextMenus.RefManNamespace.EndoscopyVettingWorklist.ADD_EDIT_COMMENTS: //WDEV-22488
				PatientElectiveListAddLaterVo tempVo = domain.getPatientElectiveList((PatientElectiveListRefVo) form.dyngrdResults().getSelectedRow().getValue());
				form.getGlobalContext().RefMan.setCatsReferral(tempVo.getReferral());
    			if( tempVo.getElectiveAdmissionTypeIsNotNull() && (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(tempVo.getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(tempVo.getElectiveAdmissionType())))
    			{
    				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
    					tempVo.getCreatingAppointment(),
    					tempVo,
    					ElectiveListAddLaterDlgOpenMode.READ_ONLY, true},
    					"Waiting List Details");
    			}
    			else if( tempVo.getElectiveAdmissionTypeIsNotNull() && ElectiveAdmissionType.PLANNED_TYPE13.equals(tempVo.getElectiveAdmissionType()))
    			{
    				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
    					tempVo.getCreatingAppointment(),
    					tempVo,
    					ElectiveListAddLaterDlgOpenMode.READ_ONLY, true},
    					"Planned List Details");
    			}
			break;
		}
		
	}
	private void editWaitingElectiveListCardDialog()
	{
		PatientElectiveListAddLaterVo tempVo = domain.getPatientElectiveList((PatientElectiveListRefVo) form.dyngrdResults().getSelectedRow().getValue());
		if( tempVo != null)
		{
			HcpLiteVo tempUsrVo = (HcpLiteVo) domain.getHcpLiteUser();
			boolean isEndoscopist = tempUsrVo != null && Boolean.TRUE.equals(tempUsrVo.getIsHCPaEndoscopist());
			
			if( isEndoscopist)
			{
    			form.getGlobalContext().RefMan.setCatsReferral(tempVo.getReferral());
    			if( tempVo.getElectiveAdmissionTypeIsNotNull() && (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(tempVo.getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(tempVo.getElectiveAdmissionType())))
    			{
    				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
    					tempVo.getCreatingAppointment(),
    					tempVo,
    					ElectiveListAddLaterDlgOpenMode.EDIT},
    					"Waiting List Details");
    			}
    			else if( tempVo.getElectiveAdmissionTypeIsNotNull() && ElectiveAdmissionType.PLANNED_TYPE13.equals(tempVo.getElectiveAdmissionType()))
    			{
    				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
    					tempVo.getCreatingAppointment(),
    					tempVo,
    					ElectiveListAddLaterDlgOpenMode.EDIT},
    					"Planned List Details");
    			}
			}
			else
			{
				form.getGlobalContext().RefMan.setCatsReferral(tempVo.getReferral());
    			if( tempVo.getElectiveAdmissionTypeIsNotNull() && (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(tempVo.getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(tempVo.getElectiveAdmissionType())))
    			{
    				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
    					tempVo.getCreatingAppointment(),
    					tempVo,
    					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
    					"Waiting List Details");
    			}
    			else if( tempVo.getElectiveAdmissionTypeIsNotNull() && ElectiveAdmissionType.PLANNED_TYPE13.equals(tempVo.getElectiveAdmissionType()))
    			{
    				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
    					tempVo.getCreatingAppointment(),
    					tempVo,
    					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
    					"Planned List Details");
    			}
			}
		}
	}
	
	protected void onDyngrdResultsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
		//WDEV-22823
		if(row != null && row.getValue() != null)
		{
			PatientShortListVo patient = ((PatientElectiveListForEndoscWorklistVo) row.getValue()).getPatient();
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(patient));
		}
	}
	
	protected void onChkIncludePastPlannedDatesValueChanged() throws PresentationLogicException
	{
		if(Boolean.TRUE.equals(form.chkIncludePastPlannedDates().getValue()))
		{
    		if( form.intPlannedDateIn().getValue() == null || form.cmbPlannedDateIn().getValue() == null)
    		{
    			engine.showMessage("Planned Date Within Details are mandatory .");
    			form.chkIncludePastPlannedDates().setValue(Boolean.FALSE);
    		}
    		if( form.intPlannedDateIn().getValue() != null && form.intPlannedDateIn().getValue() < 0 )
    		{
    			engine.showMessage(" Use positive values for Planned Date Within .");
    			form.chkIncludePastPlannedDates().setValue(Boolean.FALSE);
    		}
		}
		
	}
	
	protected void onChkIncludePatientsBreachedRTTDateValueChanged() throws PresentationLogicException
	{
		if( Boolean.TRUE.equals(form.chkIncludePatientsBreachedRTTDate().getValue()))
		{
    		if( form.intRTTBreachDateIn() == null || form.cmbRTTBreachDateIn().getValue() == null)
    		{
    			engine.showMessage("RTT Breach Date Within Details are mandatory .");
    			form.chkIncludePatientsBreachedRTTDate().setValue(Boolean.FALSE);
    		}
    		if( form.intRTTBreachDateIn().getValue() != null && form.intRTTBreachDateIn().getValue() < 0 )
    		{
    			engine.showMessage(" Use positive values for RTT Breach Date Within .");
    			form.chkIncludePatientsBreachedRTTDate().setValue(Boolean.FALSE);
    		}
		}
		
	}
	
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}
	
	protected void onImbSearchClick() throws PresentationLogicException
	{
		doSearch();
		updateControlsState();
	}
		


}
