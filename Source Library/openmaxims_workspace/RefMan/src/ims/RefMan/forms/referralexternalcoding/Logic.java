//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referralexternalcoding;

import ims.admin.vo.Icd10AmProcVo;
import ims.admin.vo.Opcs4Vo;
import ims.RefMan.forms.referralexternalcoding.GenForm.grdEpisodeFCERow;
import ims.RefMan.forms.referralexternalcoding.GenForm.lyrReferralLayer.tabDiagProcContainer.grdDiagnosisProceduresRow;
import ims.RefMan.forms.referralexternalcoding.GenForm.lyrReferralLayer.tabDiagProcContainer.grdDiagnosisRow;
import ims.RefMan.forms.referralexternalcoding.GenForm.lyrReferralLayer.tabDiagProcContainer.grdProceduresRow;
import ims.RefMan.vo.AdmissionDetailForCoderWorklistVo;
import ims.RefMan.vo.AdmissionDetailForCodingListVoCollection;
import ims.RefMan.vo.AdmissionDetailWithConsultantStaysForCodingVo;
import ims.RefMan.vo.CSPrimaryDiagnosisForReferralCodingVoCollection;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ConsultantStayForPatientCodingListVo;
import ims.RefMan.vo.ConsultantStayForPatientCodingListVoCollection;
import ims.RefMan.vo.DischargedEpisodeForReferralExternalCodingVo;
import ims.RefMan.vo.PatientDiagnosisForReferralCodingVo;
import ims.RefMan.vo.PatientDiagnosisForReferralCodingVoCollection;
import ims.RefMan.vo.PatientProcedureForReferralCodingVo;
import ims.RefMan.vo.PatientProcedureForReferralCodingVoCollection;
import ims.RefMan.vo.ReferralExternalCodingItemVo;
import ims.RefMan.vo.ReferralExternalCodingItemVoCollection;
import ims.RefMan.vo.ReferralExternalCodingListVo;
import ims.RefMan.vo.ReferralExternalCodingListVoCollection;
import ims.RefMan.vo.ReferralExternalCodingVo;
import ims.RefMan.vo.StageCodeExportVo;
import ims.RefMan.vo.StageCodeExportVoCollection;
import ims.clinical.vo.CodingCommentVo;
import ims.clinical.vo.CodingCommentVoCollection;
import ims.clinical.vo.lookups.CodingCommentStatus;
import ims.clinical.vo.lookups.CodingCommentType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.AdmissionDetailRefVo;
import ims.core.admin.pas.vo.AdmissionDetailRefVoCollection;
import ims.core.admin.pas.vo.ConsultantStayRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.helper.MedicodeCodeExportImportHelper;
import ims.core.vo.HrgConfigLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.CodingStatus;
import ims.core.vo.lookups.CodingStatusCollection;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.CustomEvent;
import ims.framework.cn.events.ExternalCustomEvent;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.StringUtils;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COLUMN_COMMENT = new Integer(0);
	private static final String FILED = "FILED";

	private MedicodeCodeExportImportHelper helper = new MedicodeCodeExportImportHelper();
	
	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.lyrReferral().tabDiagProc().btnAddDiagnosis().setEnabled(form.lyrReferral().tabDiagProc().grdDiagnosis().getValue() != null && form.grdEpisodeFCE().getValue() != null);
			form.lyrReferral().tabDiagProc().btnRemoveDiagnosis().setEnabled(form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getValue() instanceof PatientDiagnosisForReferralCodingVo && form.grdEpisodeFCE().getValue() != null);
			form.lyrReferral().tabDiagProc().btnAddProcedure().setEnabled(form.lyrReferral().tabDiagProc().grdProcedures().getValue() != null && form.grdEpisodeFCE().getValue() != null);
			form.lyrReferral().tabDiagProc().btnRemoveProcedure().setEnabled(form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getValue() instanceof PatientProcedureForReferralCodingVo && form.grdEpisodeFCE().getValue() != null);
			
			// WDEV-20138
			form.getContextMenus().RefMan.getReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem().setVisible(form.lyrReferral().tabDiagProc().grdDiagnosis().getValue() != null && form.grdEpisodeFCE().getValue() != null);
			form.getContextMenus().RefMan.getReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem().setVisible(form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getValue() instanceof PatientDiagnosisForReferralCodingVo && form.grdEpisodeFCE().getValue() != null);
			// WDEV-20138
			form.getContextMenus().RefMan.getReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem().setVisible(form.lyrReferral().tabDiagProc().grdProcedures().getValue() != null && form.grdEpisodeFCE().getValue() != null);
			form.getContextMenus().RefMan.getReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem().setVisible(form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getValue() instanceof PatientProcedureForReferralCodingVo && form.grdEpisodeFCE().getValue() != null);
		
			form.getContextMenus().RefMan.getReferralExternalCodingCommentsMenuADD_COMMENTItem().setVisible(form.lyrReferral().tabComments().dyngrdComents().getValue() instanceof ConsultantStayForPatientCodingListVo);
			form.getContextMenus().RefMan.getReferralExternalCodingCommentsMenuSUPERCEDEDItem().setVisible(form.lyrReferral().tabComments().dyngrdComents().getValue() instanceof CodingCommentVo);
		
			form.lnkReturnToList().setVisible(form.getForms().RefMan.PatientCodingList.equals(engine.getPreviousNonDialogFormName()) || form.getForms().RefMan.InpatientClinicalCodingWorklist.equals(engine.getPreviousNonDialogFormName()));
			form.lnkReturnToList().setEnabled(form.getForms().RefMan.PatientCodingList.equals(engine.getPreviousNonDialogFormName()) || form.getForms().RefMan.InpatientClinicalCodingWorklist.equals(engine.getPreviousNonDialogFormName()));
		
			boolean uncodedFCE = form.grdEpisodeFCE().getValue() != null;// && (CodingStatus.UNCODED.equals(form.grdEpisodeFCE().getValue().getCodingStatus()) || form.grdEpisodeFCE().getValue().getCodingStatus() == null);
			//WDEV-22434
			boolean hasFCEStartEndDate = form.grdEpisodeFCE().getValue() != null && form.grdEpisodeFCE().getValue().getTransferDateTimeIsNotNull() && form.grdEpisodeFCE().getValue().getEndDateTimeIsNotNull();
			form.htmEncoder().setEnabled(uncodedFCE && hasFCEStartEndDate);
			form.btnEncoder().setVisible(uncodedFCE && hasFCEStartEndDate);
			form.btnEncoder().setEnabled(uncodedFCE && hasFCEStartEndDate);
			form.btnViewAudit().setVisible(uncodedFCE);
			form.btnViewAudit().setEnabled(uncodedFCE);
			form.lyrReferral().tabDiagProc().grdDiagnosis().setSelectable(uncodedFCE);
			form.lyrReferral().tabDiagProc().grdProcedures().setSelectable(uncodedFCE);
			form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().setSelectable(uncodedFCE);
		}
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (domain.getMosUser() == null)
		{
			throw new FormOpenException("Logged in user is not a Member of Staff and will not be able to view or edit data.");
		}
		
		initialise(args);
		initialiseMedicodeApplet();
		open();
	}
	
	private void open()
	{
		admissionSelected();
		form.setMode(FormMode.VIEW);		
	}

	private void initialise(Object[] args) throws FormOpenException
	{
		form.getLocalContext().setCodingConfig(domain.getExternalCodingConfig());
		
		if(form.getLocalContext().getCodingConfig() == null)
			throw new FormOpenException("Medicode Configuration is not set.");
		
		Object mos = domain.getMosUser();
		if(mos instanceof MemberOfStaffLiteVo)
		{
			form.getLocalContext().setLoggedMos((MemberOfStaffLiteVo) mos);
		}
		
		setDefaults();
		initialiseCommentsGrid();
		
		if (args != null && args.length > 0)
		{
			if (args[0] instanceof AdmissionDetailForCoderWorklistVo || args[0] instanceof AdmissionDetailRefVoCollection)
			{
				buildAdmissionsList(args[0]);
			}			
		}	
	}

	private void initialiseCommentsGrid()
	{
		form.lyrReferral().tabComments().dyngrdComents().clear();
		
		DynamicGridColumn columnName = form.lyrReferral().tabComments().dyngrdComents().getColumns().newColumn("Comments", COLUMN_COMMENT);
		columnName.setCanGrow(true);
		columnName.setWidth(-1);
	}

	private void setDefaults()
	{
		form.chkUncoded().setValue(true);
		form.chkInProgress().setValue(true);
		form.chkForReview().setValue(true);
		form.chkComplete().setValue(true);
		
		form.lyrReferral().showtabCoded();
	}

	private void buildAdmissionsList(Object object)
	{
		if (object == null)
			return;
		
		AdmissionDetailRefVoCollection refs = new AdmissionDetailRefVoCollection();
		if (object instanceof AdmissionDetailForCoderWorklistVo)
			refs.add((AdmissionDetailRefVo) object);
		else if (object instanceof AdmissionDetailRefVoCollection)
			refs = (AdmissionDetailRefVoCollection) object;

		form.getLocalContext().setSelectedAdmissionsForCodingRefs(refs);

		AdmissionDetailForCodingListVoCollection voColl = domain.listAdmissions(form.getLocalContext().getSelectedAdmissionsForCodingRefs());

		form.cmbAdmission().clear();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			StringBuffer sb = new StringBuffer();

			if (voColl.get(i)!=null) //WDEV-22404
			{
				sb.append(voColl.get(i).getAdmissionDateTimeIsNotNull() ? voColl.get(i).getAdmissionDateTime() : "");
				sb.append(" - ");
				sb.append(voColl.get(i).getDischargeDateTimeIsNotNull() ? voColl.get(i).getDischargeDateTime().toString() : "");

				form.cmbAdmission().newRow(voColl.get(i), sb.toString());

				if (voColl.size() == 1 && voColl.get(0) != null)
				{	
					form.cmbAdmission().setValue(voColl.get(0));
				}	
			}
		}		
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getForms().RefMan.SelectPreviousDiagnosisForReferralCoding.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				addSelectedPreviousDiagnosisToeGrid();
			}
		}
		
		else if(form.getForms().RefMan.CodingComment.equals(formName))
		{
			open();
		}
		
		updateControlsState();
	}
	
	private boolean save()
	{
		if(form.getLocalContext().getSelectedReferralCoding() == null)
			return false;
		
		String[] errors = form.getLocalContext().getSelectedReferralCoding().validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveReferralCoding(form.getLocalContext().getSelectedReferralCoding(), form.getLocalContext().getSelectedAdmission(), form.getLocalContext().getSelectedAdmission().getDischargeEpisode(), form.getLocalContext().getSelectedAdmission().getInpatientEpisode());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			open();
			return false;
		}
		
		return true;
	}

	private void addSelectedPreviousDiagnosisToeGrid()
	{
		if(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisForReferralCoding() == null)
			return;
		
		for (int i = 0; i < form.getGlobalContext().RefMan.getSelectedPatientDiagnosisForReferralCoding().size(); i++)
		{
			if (isInDiagnosisGrid(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisForReferralCoding().get(i)))
				continue;

			addDiagnosisRow(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisForReferralCoding().get(i));
		}
	}
	
	private boolean isInDiagnosisGrid(PatientDiagnosisForReferralCodingVo patientDiagnosis)
	{
		for (int i = 0; i < form.lyrReferral().tabDiagProc().grdDiagnosis().getRows().size(); i++)
		{
			if (patientDiagnosis.equals(form.lyrReferral().tabDiagProc().grdDiagnosis().getRows().get(i).getValue()))
				return true;
		}

		return false;
	}

	private void initialiseMedicodeApplet()
	{
		String debugValue = Boolean.TRUE.equals(engine.getLoggedInUser().getDebugMode()) ? "true" : "false";
		String defaultMessageValue = form.getLocalContext().getCodingConfig() != null && form.getLocalContext().getCodingConfig().getDefaultMessageValue() != null ? form.getLocalContext().getCodingConfig().getDefaultMessageValue() : "34307";
		
		String html="";
		html += "<object name='Medicode'"; 
		html += "   codebase='applet/'";
		html += "	code='Medicode.class'";
		html += "	id='medicodeApplet'";
		html += "	width='1' height='1'";
		html += "	archive='medicode.jar, jna.jar, platform.jar, commons.jar'";		
		html += "	mayscript='mayscript'>";				
		html += "		<param name='debug' value='" + debugValue +"'>";
		html += "		<param name='defaultMessageValue' value='" + defaultMessageValue + "'>";
		html += "		<param name='windowTitle' value='" + form.getLocalContext().getCodingConfig().getWindowTitle() + "'>";
		html += "		<param name='inputFilePath' value='" + form.getLocalContext().getCodingConfig().getCodeFileIn() + "'>";
		html += "		<param name='outputFilePath' value='" + form.getLocalContext().getCodingConfig().getCodeFileOut() + "'>";
		html += "		<param name='medicodePath' value='" + form.getLocalContext().getCodingConfig().getMedicodeProgName() + "'>";
		html += "		<param name='medicodeParameters' value='" + form.getLocalContext().getCodingConfig().getMedicodeParams() + "'>";
		html += "		<param name='separate_jvm' value='true'>";
		html += "		<param name='classloader_cache' value='false'>";
		html += "		<param name='permissions' value='all-permissions'>";
		html += "</object>";

		form.htmEncoder().setHTML(html);
	}

	private boolean isTheSamePatientandFCE(ReferralExternalCodingVo referralCodingVo)
	{
		
		//WDEV-23495
		if(referralCodingVo == null || referralCodingVo.getStagingCodeExport() == null)
			return false;
		
		StageCodeExportVo lastStageCodeExport = getLastStagingCodeExport(referralCodingVo.getStagingCodeExport());
		
		if(lastStageCodeExport == null)
			return false;
		
		String sFCEId = lastStageCodeExport.getReceivedFCEId();
		String sPatientId = lastStageCodeExport.getReceivedPatientId();
		
		int fceId = -1;
		//int patientId = -1;
		
		try
		{
			fceId = Integer.parseInt(sFCEId);
			//patientId = Integer.parseInt(sPatientId);
		}
		catch(NumberFormatException e)
		{
			return false;
		}
		
		if(form.getGlobalContext().Core.getPatientShort() == null)
			return false;
		
		if(form.grdEpisodeFCE().getValue() == null)
			return false;
		
		if (!sPatientId.equalsIgnoreCase(getExternalCodingPatientNumber(form.getGlobalContext().Core.getPatientShort().getIdentifiers(),PatIdType.getNegativeInstance(ims.configuration.gen.ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue())).getIdValue()))
			return false;			
		
		return true;
		//WDEV-23495
	}

	//WDEV-23495
	private PatientId getExternalCodingPatientNumber(
			PatientIdCollection identifiers, PatIdType patIdType) 
	{
		if (identifiers!=null && identifiers.size()>0)
		{
			for (PatientId item : identifiers)
			{
				if (item.getType().equals(patIdType))
					return item;
			}
		}
		
		return null;
	}
	//WDEV-23495

	private StageCodeExportVo getLastStagingCodeExport(StageCodeExportVoCollection stagingCodeExport)
	{
		if(stagingCodeExport == null)
			return null;
		
		StageCodeExportVo lastStage = null;
		
		for(StageCodeExportVo stage : stagingCodeExport)
		{
			if(stage == null)
				continue;
			
			if(lastStage == null)
				lastStage = stage;
			
			if(stage.getExportDateTime() != null && stage.getExportDateTime().isGreaterThan(lastStage.getExportDateTime()))
				lastStage = stage;
		}
		
		return lastStage;
	}

	private ReferralExternalCodingVo populateDataFromScreen(ReferralExternalCodingVo referralCoding, boolean isForEncoder)
	{
		if(referralCoding == null)
			referralCoding = new ReferralExternalCodingVo();
		
		if(referralCoding.getCatsReferral() == null)
		{
			referralCoding.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}
		
		if(isForEncoder)
		{
			referralCoding.setAuthoringDateTime(new DateTime());
			referralCoding.setAuthoringMOS(form.getLocalContext().getLoggedMos());
		}
		else
		{
			if(referralCoding.getAuthoringDateTime() == null)
			{
				referralCoding.setAuthoringDateTime(new DateTime());
			}
			
			if(referralCoding.getAuthoringMOS() == null)
			{
				referralCoding.setAuthoringMOS(form.getLocalContext().getLoggedMos());
			}
		}
		
		if(referralCoding.getPasEvent() == null)
		{
			referralCoding.setPasEvent(form.cmbAdmission().getValue().getPasEvent());
		}
		
		if(referralCoding.getFCE() == null)
		{
			referralCoding.setFCE(form.grdEpisodeFCE().getValue());
		}
		
		if(isForEncoder)
		{
    		ReferralExternalCodingItemVoCollection voColl = referralCoding.getCodingItems();
    		
    		if(voColl == null)
    			voColl = new ReferralExternalCodingItemVoCollection();
    		
    		for (int i = 0; i < form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().size(); i++)
    		{
    			ReferralExternalCodingItemVo voItem = new ReferralExternalCodingItemVo();
    
    			ValueObject value = form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().get(i).getValue();
    			
    			if(value instanceof PatientDiagnosisForReferralCodingVo)
    			{
    				voItem.setPatientDiagnosis((PatientDiagnosisForReferralCodingVo) value);
    			}
    			else if(value instanceof PatientProcedureForReferralCodingVo)
    			{
    				voItem.setPatientProcedure((PatientProcedureForReferralCodingVo) value);
    			}
    
    			voColl.add(voItem);
    		}
    
    		referralCoding.setCodingItems(voColl);
		}
		
		return referralCoding;
	}

	@Override
	protected void onBtnAddProcedureClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addProcedureToCodedItems();
		updateControlsState();
	}
	
	private void addProcedureToCodedItems()
	{
		if(form.lyrReferral().tabDiagProc().grdProcedures().getValue() == null)
			return;
		
		if(alreadyAdded(form.lyrReferral().tabDiagProc().grdProcedures().getValue()))
			return;
		
		grdDiagnosisProceduresRow newRow = form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().newRow();
		PatientProcedureForReferralCodingVo selectedProcedure = form.lyrReferral().tabDiagProc().grdProcedures().getValue();
		
		newRow.setColDiagProc(selectedProcedure.getProcedure() != null ? selectedProcedure.getProcedure().getProcedureName() : selectedProcedure.getProcedureDescription());
		newRow.setValue(selectedProcedure);
	}

	private boolean alreadyAdded(ValueObject value)
	{
		if(value == null)
			return false;
		
		for(int i=0; i<form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().size(); i++)
		{
			if(value.equals(form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().get(i).getValue()))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnRemoveProcedureClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().removeSelectedRow();
		updateControlsState();
	}
	
	@Override
	protected void onBtnRemoveDiagnosisClick() throws ims.framework.exceptions.PresentationLogicException
	{
		 form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().removeSelectedRow();
		 updateControlsState();
	}
	
	@Override
	protected void onBtnAddDiagnosisClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addDiagnosisToCodedItems();
		updateControlsState();
	}
	
	private void addDiagnosisToCodedItems()
	{
		if(form.lyrReferral().tabDiagProc().grdDiagnosis().getValue() == null)
			return;
		
		if(alreadyAdded(form.lyrReferral().tabDiagProc().grdDiagnosis().getValue()))
			return;
		
		grdDiagnosisProceduresRow newRow = form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().newRow();
		PatientDiagnosisForReferralCodingVo selectedDiagnosis = form.lyrReferral().tabDiagProc().grdDiagnosis().getValue();
		
		newRow.setColDiagProc(selectedDiagnosis.getDiagnosis() != null ? selectedDiagnosis.getDiagnosis().getDiagnosisName() : selectedDiagnosis.getDiagnosisDescription());
		newRow.setValue(selectedDiagnosis);
	}

	@Override
	protected void onGrdDiagnosisProceduresSelectionChanged()
	{
		form.lyrReferral().tabDiagProc().grdDiagnosis().setValue(null);
		form.lyrReferral().tabDiagProc().grdProcedures().setValue(null);
		
		updateControlsState();
	}
	
	@Override
	protected void onGrdProceduresSelectionChanged()
	{
		form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().setValue(null);
		form.lyrReferral().tabDiagProc().grdDiagnosis().setValue(null);
		
		updateControlsState();
	}
	
	@Override
	protected void onBtnPreviousDiagnosisClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().RefMan.SelectPreviousDiagnosisForReferralCoding, new Object[] {form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getSelectedEpisodeOfCare()});
	}
	
	@Override
	protected void onGrdDiagnosisSelectionChanged()
	{
		form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().setValue(null);
		form.lyrReferral().tabDiagProc().grdProcedures().setValue(null);
		
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingCommentsMenu.ADD_COMMENT:
				addFCEComment();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingCommentsMenu.SUPERCEDED:
				if(superceded())
					open();
			break;
			
			//WDEV-20138
			case GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingAddDiagnosisMenu.ADD_DIAGNOSIS:
				addDiagnosisToCodedItems();
			break;
			
			//WDEV-20138
			case GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingAddProcedureMenu.ADD_PROCEDURE:
				addProcedureToCodedItems();
			break;
			
			//WDEV-20138
			case GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingDiagnosisProcedureMenu.REMOVE_DIAGNOSIS:
				 form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().removeSelectedRow();
			break;
			
			//WDEV-20138
			case GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingDiagnosisProcedureMenu.REMOVE_PROCEDURE:
				form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().removeSelectedRow();
			break;
		}
		
		updateControlsState();
	}

	private boolean superceded()
	{
		if(!(form.lyrReferral().tabComments().dyngrdComents().getValue() instanceof CodingCommentVo))
			return false;
		
		CodingCommentVo comment = (CodingCommentVo) form.lyrReferral().tabComments().dyngrdComents().getValue();
		
		comment.setCommentStatus(CodingCommentStatus.SUPERCEDED);
		
		String[] errors = comment.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			AdmissionDetailRefVo admission = null;
			
			if(form.lyrReferral().tabComments().dyngrdComents().getSelectedRow() != null && form.lyrReferral().tabComments().dyngrdComents().getSelectedRow().getParent() != null && form.lyrReferral().tabComments().dyngrdComents().getSelectedRow().getParent().getValue() instanceof AdmissionDetailRefVo)
			{
				admission = (AdmissionDetailRefVo) form.lyrReferral().tabComments().dyngrdComents().getSelectedRow().getParent().getValue();
			}
			
			domain.saveComment(comment, admission);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private void addFCEComment()
	{
		if(!(form.lyrReferral().tabComments().dyngrdComents().getValue() instanceof ConsultantStayForPatientCodingListVo))
			return;
		
		form.getGlobalContext().RefMan.setSelectedFCE((ConsultantStayForPatientCodingListVo) form.lyrReferral().tabComments().dyngrdComents().getValue());
		engine.open(form.getForms().RefMan.CodingComment, new Object[] {FormMode.EDIT});
	}

	@Override
	protected void onCmbAdmissionValueChanged() 	throws PresentationLogicException
	{
		admissionSelected();
		updateControlsState();
	}

	private void admissionSelected()
	{
		form.getLocalContext().setSelectedEpisodeOfCare(form.cmbAdmission().getValue() != null ? domain.getEpisodeOfCare(form.cmbAdmission().getValue().getPasEvent()) : null);
		form.getGlobalContext().RefMan.setCatsReferral(form.cmbAdmission().getValue() != null ? domain.getCatsReferral(form.cmbAdmission().getValue().getPasEvent()) : null);
		
		AdmissionDetailWithConsultantStaysForCodingVo adm = domain.getAdmissionDetailWithFCEs(form.cmbAdmission().getValue(), getCodingStatusesFromScreen());
		form.getLocalContext().setSelectedAdmission(adm);
		
		displayConsultantStaysForAdmission(form.getLocalContext().getSelectedAdmission());
		populateDiagnosisAndProcedureTab();
		populateCommentsTab(form.getLocalContext().getSelectedAdmission());
		
		if(form.getLocalContext().getSelectedFCE() != null)
		{
			form.grdEpisodeFCE().setValue(form.getLocalContext().getSelectedFCE());
			
			fCESelected();
		}
	}

	private void populateCommentsTab(AdmissionDetailWithConsultantStaysForCodingVo selectedAdmission)
	{
		form.lyrReferral().tabComments().dyngrdComents().getRows().clear();
		
		if(selectedAdmission == null)
			return;
		
		DynamicGridRow newRow = form.lyrReferral().tabComments().dyngrdComents().getRows().newRow();
		newRow.setCollapsedImage(form.getImages().RefMan.Admission24);
		newRow.setExpandedImage(form.getImages().RefMan.Admission24);
		newRow.setExpanded(true);
		newRow.setReadOnly(true);
			
		DynamicGridCell rowCell = newRow.getCells().newCell(getColumn(COLUMN_COMMENT), DynamicCellType.STRING);
		
		String admissionText = "";
		admissionText += (selectedAdmission.getAdmissionDateTime() != null ? "<b>Admission Date: </b>" + selectedAdmission.getAdmissionDateTime() : "" );
		admissionText += ((selectedAdmission.getDischargeEpisode() != null && selectedAdmission.getDischargeEpisode().getDischargeDateTimeIsNotNull()) ? " -<b> Discharge Date: </b>" + selectedAdmission.getDischargeEpisode().getDischargeDateTime() : "");
		rowCell.setValue(admissionText);
		rowCell.setTooltip(admissionText);
		
		newRow.setValue(selectedAdmission);
		
		addAdmissionComments(newRow, selectedAdmission.getCodingComments());
		addFCE(newRow, selectedAdmission.getConsultantStays());
	}
	
	private void addFCE(DynamicGridRow row, ConsultantStayForPatientCodingListVoCollection consultantStays)
	{
		if(consultantStays == null)
			return;
		
		for(int i=0; i<consultantStays.size(); i++)
		{
			addFCE(row, consultantStays.get(i));
		}
	}

	private void addFCE(DynamicGridRow row, ConsultantStayForPatientCodingListVo consultantStay)
	{
		if(consultantStay == null)
			return;
		
		DynamicGridRow newRow = row.getRows().newRow();
		newRow.setReadOnly(true);
		
		newRow.setCollapsedImage(form.getImages().RefMan.Consultant24);
		newRow.setExpandedImage(form.getImages().RefMan.Consultant24);
		newRow.setExpanded(true);
		
		DynamicGridCell rowCell = newRow.getCells().newCell(getColumn(COLUMN_COMMENT), DynamicCellType.STRING);
		
		String consText = "";
		consText += (consultantStay.getConsultant() != null  && consultantStay.getConsultant().getMos() != null && consultantStay.getConsultant().getMos().getNameIsNotNull()) ? "<b>Consultant: </b>"+consultantStay.getConsultant().getMos().getName().toString():"";
		consText += consultantStay.getSpecialty() != null  ? " - <b>Specialty: </b>"+consultantStay.getSpecialty().getText():"";
		consText += consultantStay.getTransferDateTimeIsNotNull() ? " - <b>Start Date: </b>"+consultantStay.getTransferDateTime() :"";
		consText += consultantStay.getEndDateTimeIsNotNull() ? " - <b>End Date: </b>"+consultantStay.getEndDateTime() :"";
		
		rowCell.setValue(consText);
		rowCell.setTooltip(consText);
			
		newRow.setValue(consultantStay);
		
		addFCEComments(newRow, consultantStay.getCodingComment());
	}

	private void addFCEComments(DynamicGridRow newRow, CodingCommentVoCollection codingComment)
	{
		if(codingComment == null)
			return;
		
		for(int i=0; i<codingComment.size(); i++)
		{
			if(codingComment.get(i) == null || CodingCommentType.EXTERNAL.equals(codingComment.get(i).getCodingType()))
				continue;
			
			addCommentRow(newRow, codingComment.get(i));
		}
	}

	private void addAdmissionComments(DynamicGridRow row, CodingCommentVoCollection codingCommentVoCollection)
	{
		if(codingCommentVoCollection == null)
			return;
		
		for(int i=0; i<codingCommentVoCollection.size(); i++)
    	{
			addCommentRow(row, codingCommentVoCollection.get(i));
    	}
	}

	private void addCommentRow(DynamicGridRow row, CodingCommentVo comment)
	{
		if(comment == null || (comment != null && CodingCommentStatus.SUPERCEDED.equals(comment.getCommentStatus())))
			return;
		
		DynamicGridRow newRow = row.getRows().newRow();
		newRow.setReadOnly(true);
		
		DynamicGridCell rowCell = newRow.getCells().newCell(getColumn(COLUMN_COMMENT), DynamicCellType.STRING);
		
		StringBuffer commentText = new StringBuffer();
		commentText.append("<b>Comment: </b>");
		commentText.append(comment.getCommentText());
		
		if(comment.getCommentText() != null)
			commentText.append(",");
		
		if(comment.getAuthoringDateTime() != null)
		{
			commentText.append("<b> Recording Date Time: </b>");
			commentText.append(comment.getAuthoringDateTime());
			commentText.append(",");
		}
		
		if(comment.getAuthoringMOS() != null)
		{
			commentText.append("<b> Recording User: </b>");
			commentText.append(comment.getAuthoringMOS().getIMosName());
		}
		
		rowCell.setValue(commentText.toString());
		rowCell.setTooltip(commentText.toString());
		
		newRow.setValue(comment);
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.lyrReferral().tabComments().dyngrdComents().getColumns().getByIdentifier(identifier);
	}

	private void populateDiagnosisAndProcedureTab()
	{
		populateDiagnosisGrid(form.getLocalContext().getSelectedEpisodeOfCare());
		populateProceduresGrid(form.getLocalContext().getSelectedEpisodeOfCare());
	}

	private void populateProceduresGrid(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		form.lyrReferral().tabDiagProc().grdProcedures().getRows().clear();
		
		if(episodeOfCareRefVo == null)
			return;
		
		PatientProcedureForReferralCodingVoCollection procs = domain.listProcedure(episodeOfCareRefVo);
		
		if (procs!=null)
		{
			for(PatientProcedureForReferralCodingVo proc : procs)
			{
				addProcedureRow(proc);
			}
		}
	}

	private void addProcedureRow(PatientProcedureForReferralCodingVo proc)
	{
		if(proc == null)
			return;
		
		grdProceduresRow row = form.lyrReferral().tabDiagProc().grdProcedures().getRows().newRow();
		
		if (proc.getProcDateIsNotNull())
		{
			row.setColDate(proc.getProcDate().toString());
			row.setTooltipForColDate(row.getColDate());
		}

		if (proc.getProcedure() != null)
		{
			row.setColProcedure(proc.getProcedure().getProcedureName());
		}
		else if (proc.getProcedureDescriptionIsNotNull())
		{
			row.setColProcedure(proc.getProcedureDescription());
		}
		
		row.setTooltipForColProcedure(row.getColProcedure());

		if (proc.getInfoSourceIsNotNull() && !proc.getInfoSource().equals(SourceofInformation.CLINICALCONTACT))
			row.setColPMH(form.getImages().Core.Add);
		
		row.setValue(proc);
	}

	private void populateDiagnosisGrid(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		form.lyrReferral().tabDiagProc().grdDiagnosis().getRows().clear();
		
		if(episodeOfCareRefVo == null)
			return;
		
		PatientDiagnosisForReferralCodingVoCollection diagnosis = domain.listDiagnosis(episodeOfCareRefVo);
		
		if (diagnosis!= null)
		{
			for(PatientDiagnosisForReferralCodingVo diag : diagnosis)
			{
				addDiagnosisRow(diag);
			}
		}
	}

	private void addDiagnosisRow(PatientDiagnosisForReferralCodingVo diag)
	{
		if(diag == null)
			return;
		
		grdDiagnosisRow row = form.lyrReferral().tabDiagProc().grdDiagnosis().getRows().newRow();
		
		if (diag.getDiagnosedDateIsNotNull())
			row.setColDate(diag.getDiagnosedDate().toString());

		if (diag.getDiagnosis() != null)
		{
			row.setColDiagnosis(diag.getDiagnosis().getDiagnosisName());
		}

		else if (diag.getDiagnosisDescriptionIsNotNull())
		{
			row.setColDiagnosis(diag.getDiagnosisDescription());
		}
		row.setTooltipForColDiagnosis(row.getColDiagnosis());

		row.setColPrimary(isPrimaryDiagnosisActive(diag));

		if (Boolean.TRUE.equals(diag.getIsPMH()))
			row.setColPMH(form.getImages().Core.Add);
		
		row.setValue(diag);
	}
	
	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisForReferralCodingVoCollection csPrimaryDiagnosis)
	{
		for (int i = 0; i < csPrimaryDiagnosis.size(); i++)
		{
			boolean isActive = csPrimaryDiagnosis.get(i).getIsActiveIsNotNull() && csPrimaryDiagnosis.get(i).getIsActive().booleanValue();
			boolean sameDiagnosis = csPrimaryDiagnosis.get(i).getDiagnosisIsNotNull() && csPrimaryDiagnosis.get(i).getDiagnosis().equals(voPatDiagRef);
			boolean sameEpisodeOfCare = csPrimaryDiagnosis.get(i).getEpisodeOfCareIsNotNull() && csPrimaryDiagnosis.get(i).getEpisodeOfCare().equals(form.getLocalContext().getSelectedEpisodeOfCare());

			if (isActive && sameDiagnosis && sameEpisodeOfCare)
				return true;
		}
		return false;
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisForReferralCodingVo diag)
	{
		if (diag == null)
			return false;

		return isPrimaryDiagnosisActive(diag, diag.getPrimaryForCareSpells());
	}

	private CodingStatusCollection getCodingStatusesFromScreen() 
	{
		CodingStatusCollection codingStatuses = new CodingStatusCollection();
		
		if (form.chkComplete().getValue())
			codingStatuses.add(CodingStatus.CODED);
		if (form.chkUncoded().getValue())
			codingStatuses.add(CodingStatus.UNCODED);
		if (form.chkInProgress().getValue())
			codingStatuses.add(CodingStatus.INPROGRESS);
		if (form.chkForReview().getValue())
			codingStatuses.add(CodingStatus.FORREVIEW);
		
		return codingStatuses;
	}

	private void displayConsultantStaysForAdmission(AdmissionDetailWithConsultantStaysForCodingVo adm)
	{
		clearScreen();
		
		if(adm == null)
			return;
		
		ReferralExternalCodingListVoCollection referralCodingList = domain.listReferralExternalCoding(getFCEIds(adm.getConsultantStays()));
		
		if (adm.getConsultantStaysIsNotNull())
		{
			for (int i=0; i< adm.getConsultantStays().size();i++)
			{	
				if (adm.getConsultantStays().get(i) == null)
					continue;
				
				addConsultantStayRow(adm.getConsultantStays().get(i), getReferralCoding(referralCodingList, adm.getConsultantStays().get(i)));
			}
		}
	}

	private ReferralExternalCodingListVo getReferralCoding(ReferralExternalCodingListVoCollection referralCodingList, ConsultantStayRefVo cs)
	{
		if(cs == null || referralCodingList == null)
			return null;
		
		for(ReferralExternalCodingListVo rc : referralCodingList)
		{
			if(rc == null)
				continue;
			
			if(rc.getFCE() != null && rc.getFCE().equals(cs))
				return rc;
		}
		
		return null;
	}

	private String getFCEIds(ConsultantStayForPatientCodingListVoCollection consultantStays)
	{
		if(consultantStays == null)
			return null;
		
		StringBuffer ids = new StringBuffer();
		
		for(ConsultantStayForPatientCodingListVo cs : consultantStays)
		{
			if(cs == null)
				continue;
			
			if(ids.length() > 0)
			{
				ids.append(",");
			}
			
			ids.append(cs.getID_ConsultantStay());
		}
		
		return ids != null ? ids.toString() : null;
	}

	private void clearScreen()
	{
		form.grdEpisodeFCE().getRows().clear();
		form.lyrReferral().tabCoded().ccCodedRecord().setValue(null);
		form.lyrReferral().tabDiagProc().grdDiagnosis().getRows().clear();
		form.lyrReferral().tabDiagProc().grdProcedures().getRows().clear();
		form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().clear();
		form.lyrReferral().tabComments().dyngrdComents().getRows().clear();
	}

	private void addConsultantStayRow(ConsultantStayForPatientCodingListVo consultantStayForPatientCodingListVo, ReferralExternalCodingListVo referralExternalCodingListVo) //WDEV-20395
	{
		if (consultantStayForPatientCodingListVo == null)
			return;
		
		grdEpisodeFCERow row = form.grdEpisodeFCE().getRows().newRow();
		
		//WDEV-22404
		row.setColFCEStart(consultantStayForPatientCodingListVo.getTransferDateTime() != null ? consultantStayForPatientCodingListVo.getTransferDateTime().toString() : null);
		row.setCellColFCEStartTooltip(consultantStayForPatientCodingListVo.getTransferDateTime() != null ? consultantStayForPatientCodingListVo.getTransferDateTime().toString(): null);
		row.setColEnd(consultantStayForPatientCodingListVo.getEndDateTime() != null ? consultantStayForPatientCodingListVo.getEndDateTime().toString() : null);
		row.setCellColEndTooltip(consultantStayForPatientCodingListVo.getEndDateTime() != null ? consultantStayForPatientCodingListVo.getEndDateTime().toString(): null);
		row.setColCodedBy(null);
		row.setCellColCodedByTooltip(null);
		row.setColSpecialty(consultantStayForPatientCodingListVo.getConsultantIsNotNull()&&  consultantStayForPatientCodingListVo.getConsultant().getSpecialtyIsNotNull() ? consultantStayForPatientCodingListVo.getConsultant().getSpecialty().getText() : null); //WDEV-23905
		row.setCellColSpecialtyTooltip(consultantStayForPatientCodingListVo.getConsultantIsNotNull()&&  consultantStayForPatientCodingListVo.getConsultant().getSpecialtyIsNotNull() ? consultantStayForPatientCodingListVo.getConsultant().getSpecialty().getText() : null); //WDEV-23905
		row.setColService(consultantStayForPatientCodingListVo.getServiceIsNotNull() ? consultantStayForPatientCodingListVo.getService().getServiceName() : null);
		row.setCellColServiceTooltip(consultantStayForPatientCodingListVo.getServiceIsNotNull() ? consultantStayForPatientCodingListVo.getService().getServiceName() : null);
		row.setColHCP(consultantStayForPatientCodingListVo.getConsultantIsNotNull() ? consultantStayForPatientCodingListVo.getConsultant().getIMosName() : null);
		row.setCellColHCPTooltip(consultantStayForPatientCodingListVo.getConsultantIsNotNull() ? consultantStayForPatientCodingListVo.getConsultant().getIMosName() : null);
		row.setColCodingStatus(consultantStayForPatientCodingListVo.getCodingStatusIsNotNull() ? consultantStayForPatientCodingListVo.getCodingStatus().getText() : CodingStatus.UNCODED.getText());
		row.setCellColCodingStatusTooltip(consultantStayForPatientCodingListVo.getCodingStatusIsNotNull() ? consultantStayForPatientCodingListVo.getCodingStatus().getText() : CodingStatus.UNCODED.getText());
		
		if(referralExternalCodingListVo != null)
		{
			row.setColCodedBy(referralExternalCodingListVo.getAuthoringMOS() != null ? referralExternalCodingListVo.getAuthoringMOS().getIMosName() : null);
			row.setColCodedDate(referralExternalCodingListVo.getAuthoringDateTime() != null ? referralExternalCodingListVo.getAuthoringDateTime().toString() : null);
		}
		
		row.setValue(consultantStayForPatientCodingListVo);
	}

	@Override
	protected void onChkCompleteValueChanged() throws PresentationLogicException
	{
		admissionSelected();
		updateControlsState();
	}

	@Override
	protected void onChkForReviewValueChanged()	throws PresentationLogicException
	{
		admissionSelected();
		updateControlsState();
	}

	@Override
	protected void onChkInProgressValueChanged() throws PresentationLogicException
	{
		admissionSelected();
		updateControlsState();	
	}

	@Override
	protected void onChkUncodedValueChanged() throws PresentationLogicException
	{
		admissionSelected();
		updateControlsState();
	}

	@Override
	protected void onGrdEpisodeFCEGridButtonClicked(int column,	grdEpisodeFCERow row) throws PresentationLogicException 
	{
		engine.open(form.getForms().Core.ConsultantStayWardTransferDetails);
	}

	@Override
	protected void onGrdEpisodeFCESelectionChanged() throws PresentationLogicException
	{
		fCESelected();
		updateControlsState();
	}

	private void fCESelected()
	{
		form.getLocalContext().setSelectedReferralCoding(domain.getReferralCoding(form.grdEpisodeFCE().getValue()));
		form.getLocalContext().setSelectedFCE(form.grdEpisodeFCE().getValue());
		populateReferralCoding(form.getLocalContext().getSelectedReferralCoding());
		
		form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().getRows().clear();
	}

	private void populateReferralCoding(ReferralExternalCodingVo selectedReferralCoding)
	{
		form.lyrReferral().tabCoded().ccCodedRecord().initialise(form.cmbAdmission().getValue(), (form.getLocalContext().getSelectedAdmission() != null ? form.getLocalContext().getSelectedAdmission().getInpatientEpisode() : null), (form.getLocalContext().getSelectedAdmission() != null ? form.getLocalContext().getSelectedAdmission().getDischargeEpisode() : null));
		
		if(selectedReferralCoding == null  && form.grdEpisodeFCE().getValue() != null)
		{
			selectedReferralCoding = populateDataFromScreen(null, false);
		}
		
		form.lyrReferral().tabCoded().ccCodedRecord().setValue(selectedReferralCoding);
	}

	@Override
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		if(form.getForms().RefMan.PatientCodingList.equals(engine.getPreviousNonDialogFormName()))
		{
			engine.open(form.getForms().RefMan.PatientCodingList);
		}
		else if(form.getForms().RefMan.InpatientClinicalCodingWorklist.equals(engine.getPreviousNonDialogFormName()))
		{
			engine.open(form.getForms().RefMan.InpatientClinicalCodingWorklist);
		}
	}

	protected void onBtnViewAuditClick() throws PresentationLogicException 
	{
		form.getGlobalContext().RefMan.setReferralExternalCoding(form.getLocalContext().getSelectedReferralCoding());
		engine.open(form.getForms().RefMan.CodedRecordAudit);
	}

	@Override
	protected void onDyngrdComentsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onCustomEvent(CustomEvent event) throws PresentationLogicException 
	{
		if (event instanceof ExternalCustomEvent)
		{
			//String name = ((ExternalCustomEvent) event).getName();
			String action = ((ExternalCustomEvent) event).getAction();
			String value = ((ExternalCustomEvent) event).getValue();
			
			if (action!=null && action.equals(FILED))
			{
				ReferralExternalCodingVo referralCodingVo = form.getLocalContext().getSelectedReferralCoding();
				
				StringUtils strUtil = new StringUtils();
                
                helper.setFile_content(strUtil.decodeBase64(value));
                referralCodingVo = helper.importCodingData(referralCodingVo, helper.getFile_content());
                
                referralCodingVo = populateCodingItemsWithDescription(referralCodingVo);
				
				referralCodingVo.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
				
				form.getLocalContext().setSelectedReferralCoding(referralCodingVo);
				
				if(!isTheSamePatientandFCE(referralCodingVo))
				{
					engine.showMessage("Patient/FCE mismatch");
					open();
					return;
				}
				
				if(save())
					open();
			}
			else
			{
				open();
			}
		}
	}

	private ReferralExternalCodingVo populateCodingItemsWithDescription(ReferralExternalCodingVo referralCodingVo)
	{
		if(referralCodingVo == null || referralCodingVo.getCodingItems() == null)
			return null;
		
		for(ReferralExternalCodingItemVo item : referralCodingVo.getCodingItems())
		{
			if(item == null)
				continue;
			
			if(item.getID_ReferralCodingItem() == null || item.getItemDescription() == null)
			{
				if(item.getICD10() != null)
				{
					Icd10AmProcVo icd10Code = domain.getICD10(item.getICD10());
					item.setItemShortDescription(icd10Code != null ? icd10Code.getAscii_short_desc() : null);
					item.setItemDescription(icd10Code != null ? icd10Code.getAscii_desc() : null);
				}
				else if(item.getOPCS4() != null)
				{
					Opcs4Vo opcs4Code = domain.getOPCS4(item.getOPCS4());
					item.setItemShortDescription(opcs4Code != null ? opcs4Code.getOpname3() : null);
					item.setItemDescription(opcs4Code != null ? opcs4Code.getOpname4() : null);
				}
				else if(item.getHRG() != null)
				{
					HrgConfigLiteVo hrgCode = domain.getHRG(item.getHRG());
					item.setItemDescription(hrgCode != null ? hrgCode.getHRGDescription() : null);
				}
			}
		}
		
		return referralCodingVo;
	}

	@Override
	protected void onBtnEncoderClick() throws PresentationLogicException 
	{
		
		//WDEV-23787
		CatsReferralRefVo catsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		AdmissionDetailWithConsultantStaysForCodingVo admissionVo = form.getLocalContext().getSelectedAdmission();
		ConsultantStayForPatientCodingListVo FCEVo = form.grdEpisodeFCE().getValue();
		DischargedEpisodeForReferralExternalCodingVo dischargeVo = form.getLocalContext().getSelectedAdmission().getDischargeEpisode();
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		
		ReferralExternalCodingVo referralCodingVo = populateDataFromScreen(form.getLocalContext().getSelectedReferralCoding(), true);
		
		StringBuilder c = helper.exportCodingData(
				engine.getLoggedInUser(),
				catsReferral, 
				admissionVo, 
				FCEVo, 
				dischargeVo, 
				patient, 
				form.grdEpisodeFCE().getRows().size(), 
				form.grdEpisodeFCE().getSelectedRowIndex(), 
				form.grdEpisodeFCE().getSelectedRowIndex() == form.grdEpisodeFCE().getRows().size(), 
				referralCodingVo);
		
		form.getLocalContext().setSelectedReferralCoding(referralCodingVo);
		
		engine.writeMedicodeInputFile(c.toString());
		form.setMode(FormMode.EDIT);
		//WDEV-23787
	}

	@Override
	protected void onCcCodedRecordValueChanged() throws PresentationLogicException
	{
		open();
	}
}
