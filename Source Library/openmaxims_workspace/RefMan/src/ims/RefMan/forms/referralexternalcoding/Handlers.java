//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referralexternalcoding;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onCustomEvent(ims.framework.CustomEvent event) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEncoderClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewAuditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkReturnToListClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCompleteValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkForReviewValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkInProgressValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkUncodedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCcCodedRecordValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRemoveProcedureClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRemoveDiagnosisClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddDiagnosisClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosisProceduresSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdProceduresSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPreviousDiagnosisClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDiagnosisSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdComentsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdEpisodeFCEGridButtonClicked(int column, GenForm.grdEpisodeFCERow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdEpisodeFCESelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbAdmissionValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setCustomEventEvent(new CustomEvent()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.CustomEvent event) throws ims.framework.exceptions.PresentationLogicException
			{
				onCustomEvent(event);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnEncoder().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEncoderClick();
			}
		});
		this.form.btnViewAudit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewAuditClick();
			}
		});
		this.form.lnkReturnToList().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkReturnToListClick();
			}
		});
		this.form.chkComplete().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCompleteValueChanged();
			}
		});
		this.form.chkForReview().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkForReviewValueChanged();
			}
		});
		this.form.chkInProgress().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkInProgressValueChanged();
			}
		});
		this.form.chkUncoded().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkUncodedValueChanged();
			}
		});
		this.form.lyrReferral().tabCoded().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrReferraltabCodedActivated();
			}
		});
		this.form.lyrReferral().tabDiagProc().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrReferraltabDiagProcActivated();
			}
		});
		this.form.lyrReferral().tabComments().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrReferraltabCommentsActivated();
			}
		});
		this.form.lyrReferral().tabCoded().setccCodedRecordValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcCodedRecordValueChanged();
			}
		});
		this.form.lyrReferral().tabDiagProc().btnAddProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddProcedureClick();
			}
		});
		this.form.lyrReferral().tabDiagProc().btnRemoveProcedure().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRemoveProcedureClick();
			}
		});
		this.form.lyrReferral().tabDiagProc().btnRemoveDiagnosis().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRemoveDiagnosisClick();
			}
		});
		this.form.lyrReferral().tabDiagProc().btnAddDiagnosis().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddDiagnosisClick();
			}
		});
		this.form.lyrReferral().tabDiagProc().grdDiagnosisProcedures().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosisProceduresSelectionChanged();
			}
		});
		this.form.lyrReferral().tabDiagProc().grdProcedures().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdProceduresSelectionChanged();
			}
		});
		this.form.lyrReferral().tabDiagProc().btnPreviousDiagnosis().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPreviousDiagnosisClick();
			}
		});
		this.form.lyrReferral().tabDiagProc().grdDiagnosis().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDiagnosisSelectionChanged();
			}
		});
		this.form.lyrReferral().tabComments().dyngrdComents().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdComentsRowSelectionChanged(row);
			}
		});
		this.form.grdEpisodeFCE().setGridButtonClickedEvent(new GridButtonClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdEpisodeFCEGridButtonClicked(column, new GenForm.grdEpisodeFCERow(row));
			}
		});
		this.form.grdEpisodeFCE().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdEpisodeFCESelectionChanged();
			}
		});
		this.form.cmbAdmission().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbAdmissionValueChanged();
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingDiagnosisProcedureMenu.ADD_DIAGNOSIS, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingDiagnosisProcedureMenu.REMOVE_DIAGNOSIS, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingDiagnosisProcedureMenu.ADD_PROCEDURE, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingDiagnosisProcedureMenu.REMOVE_PROCEDURE, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingAddProcedureMenu.ADD_PROCEDURE, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingAddDiagnosisMenu.ADD_DIAGNOSIS, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingCommentsMenuADD_COMMENTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingCommentsMenu.ADD_COMMENT, sender);
			}
		});
		this.form.getContextMenus().RefMan.getReferralExternalCodingCommentsMenuSUPERCEDEDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.ReferralExternalCodingCommentsMenu.SUPERCEDED, sender);
			}
		});
	}
	private void onlyrReferraltabCodedActivated()
	{
		this.form.lyrReferral().showtabCoded();
	}
	private void onlyrReferraltabDiagProcActivated()
	{
		this.form.lyrReferral().showtabDiagProc();
	}
	private void onlyrReferraltabCommentsActivated()
	{
		this.form.lyrReferral().showtabComments();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
