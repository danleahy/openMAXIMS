//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referralexternalcoding;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrReferralLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCodedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 356, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccCodedRecordForm = loader.loadComponent(134259, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 8, skipContextValidation);
				//ims.framework.Control m_ccCodedRecordControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(824), new Integer(356), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8), m_ccCodedRecordForm, instance1 } );
				ims.framework.Control m_ccCodedRecordControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8), m_ccCodedRecordForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccCodedRecordControl);
				Menu[] menus1 = m_ccCodedRecordForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.codedrecordcc.IComponent ccCodedRecord()
			{
				return (ims.RefMan.forms.codedrecordcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccCodedRecordValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccCodedRecordVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccCodedRecordVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccCodedRecordEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccCodedRecordEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabDiagProcContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdDiagnosisProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagnosisProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiagProcReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiagProcReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiagProcOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDiagProc()
				{
					return (String)super.row.get(0);
				}
				public void setColDiagProc(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiagProcTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.row.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagnosisProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagnosisProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagnosisProceduresRow get(int index)
				{
					return new grdDiagnosisProceduresRow(super.collection.get(index));
				}
				public grdDiagnosisProceduresRow newRow()
				{
					return new grdDiagnosisProceduresRow(super.collection.newRow());
				}
				public grdDiagnosisProceduresRow newRow(boolean autoSelect)
				{
					return new grdDiagnosisProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdDiagnosisProceduresRow newRowAt(int index)
				{
					return new grdDiagnosisProceduresRow(super.collection.newRowAt(index));
				}
				public grdDiagnosisProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagnosisProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagnosisProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.vo.ValueObject[] getValues()
				{
					ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.grid.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.grid.setValue(value);
				}
				public grdDiagnosisProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagnosisProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagnosisProceduresRowCollection getRows()
				{
					return new grdDiagnosisProceduresRowCollection(super.grid.getRows());
				}
				public grdDiagnosisProceduresRow getRowByValue(ims.vo.ValueObject value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagnosisProceduresRow(row);
				}
				public void setColDiagProcHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiagProcHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public static class grdProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProcedureReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProcedureOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProcedure(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProcedure()
				{
					return (String)super.row.get(1);
				}
				public void setColProcedure(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProcedureTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPMHReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPMHReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPMHOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPMH(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getColPMH()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColPMH(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColPMHTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.RefMan.vo.PatientProcedureForReferralCodingVo getValue()
				{
					return (ims.RefMan.vo.PatientProcedureForReferralCodingVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientProcedureForReferralCodingVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProceduresRow get(int index)
				{
					return new grdProceduresRow(super.collection.get(index));
				}
				public grdProceduresRow newRow()
				{
					return new grdProceduresRow(super.collection.newRow());
				}
				public grdProceduresRow newRow(boolean autoSelect)
				{
					return new grdProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdProceduresRow newRowAt(int index)
				{
					return new grdProceduresRow(super.collection.newRowAt(index));
				}
				public grdProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.RefMan.vo.PatientProcedureForReferralCodingVoCollection getValues()
				{
					ims.RefMan.vo.PatientProcedureForReferralCodingVoCollection listOfValues = new ims.RefMan.vo.PatientProcedureForReferralCodingVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.PatientProcedureForReferralCodingVo getValue()
				{
					return (ims.RefMan.vo.PatientProcedureForReferralCodingVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientProcedureForReferralCodingVo value)
				{
					super.grid.setValue(value);
				}
				public grdProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProceduresRowCollection getRows()
				{
					return new grdProceduresRowCollection(super.grid.getRows());
				}
				public grdProceduresRow getRowByValue(ims.RefMan.vo.PatientProcedureForReferralCodingVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProceduresRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPMHHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPMHHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdDiagnosisRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagnosisRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDiagnosisReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDiagnosisReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDiagnosisOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDiagnosis(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColDiagnosis()
				{
					return (String)super.row.get(1);
				}
				public void setColDiagnosis(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDiagnosisTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPrimaryReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPrimaryReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPrimaryOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPrimary(String value)
				{
					super.row.setTooltip(2, value);
				}
				public boolean getColPrimary()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColPrimary(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColPrimaryTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColPMHReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColPMHReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColPMHOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColPMH(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.framework.utils.Image getColPMH()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColPMH(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColPMHTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.RefMan.vo.PatientDiagnosisForReferralCodingVo getValue()
				{
					return (ims.RefMan.vo.PatientDiagnosisForReferralCodingVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientDiagnosisForReferralCodingVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagnosisRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagnosisRow get(int index)
				{
					return new grdDiagnosisRow(super.collection.get(index));
				}
				public grdDiagnosisRow newRow()
				{
					return new grdDiagnosisRow(super.collection.newRow());
				}
				public grdDiagnosisRow newRow(boolean autoSelect)
				{
					return new grdDiagnosisRow(super.collection.newRow(autoSelect));
				}
				public grdDiagnosisRow newRowAt(int index)
				{
					return new grdDiagnosisRow(super.collection.newRowAt(index));
				}
				public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagnosisGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.RefMan.vo.PatientDiagnosisForReferralCodingVoCollection getValues()
				{
					ims.RefMan.vo.PatientDiagnosisForReferralCodingVoCollection listOfValues = new ims.RefMan.vo.PatientDiagnosisForReferralCodingVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.PatientDiagnosisForReferralCodingVo getValue()
				{
					return (ims.RefMan.vo.PatientDiagnosisForReferralCodingVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientDiagnosisForReferralCodingVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiagnosisRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagnosisRowCollection getRows()
				{
					return new grdDiagnosisRowCollection(super.grid.getRows());
				}
				public grdDiagnosisRow getRowByValue(ims.RefMan.vo.PatientDiagnosisForReferralCodingVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagnosisRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDiagnosisHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDiagnosisHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPrimaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPrimaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColPMHHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColPMHHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 352, 197, 32, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ">>", Boolean.FALSE, "Add Procedure", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 352, 224, 32, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<<", Boolean.FALSE, "Remove Procedure", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 352, 64, 32, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<", Boolean.FALSE, "Remove Diagnosis", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 352, 37, 32, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, ">>", Boolean.FALSE, "Add Diagnosis", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 136, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Previous Diagnosis", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 8, 424, 344, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdDiagnosisProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagnosisProceduresTemp);
				grdDiagnosisProceduresGrid grdDiagnosisProcedures = (grdDiagnosisProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisProceduresGrid.class, m_grdDiagnosisProceduresTemp);
				grdDiagnosisProcedures.addStringColumn("Diagnosis/Procedure", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdDiagnosisProcedures);
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 336, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				Grid m_grdProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralExternalCodingAddProcedureMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProceduresTemp);
				grdProceduresGrid grdProcedures = (grdProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresGrid.class, m_grdProceduresTemp);
				grdProcedures.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProcedures.addStringColumn("Procedure", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProcedures.addImageColumn("PMH", 0, 0, -1, true, 0);
				super.addGrid(grdProcedures);
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 336, 136, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralExternalCodingAddDiagnosisMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagnosisTemp);
				grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
				grdDiagnosis.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnosis.addStringColumn("Diagnosis", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnosis.addBoolColumn("Primary", 0, 0, 50, true, false, 0, true);
				grdDiagnosis.addImageColumn("PMH", 0, 0, -1, true, 0);
				super.addGrid(grdDiagnosis);
			}

			public Button btnAddProcedure()
			{
				return (Button)super.getControl(0);
			}
			public Button btnRemoveProcedure()
			{
				return (Button)super.getControl(1);
			}
			public Button btnRemoveDiagnosis()
			{
				return (Button)super.getControl(2);
			}
			public Button btnAddDiagnosis()
			{
				return (Button)super.getControl(3);
			}
			public Button btnPreviousDiagnosis()
			{
				return (Button)super.getControl(4);
			}
			public grdDiagnosisProceduresGrid grdDiagnosisProcedures()
			{
				return (grdDiagnosisProceduresGrid)super.getGrid(0);
			}
			public grdProceduresGrid grdProcedures()
			{
				return (grdProceduresGrid)super.getGrid(1);
			}
			public grdDiagnosisGrid grdDiagnosis()
			{
				return (grdDiagnosisGrid)super.getGrid(2);
			}
		}
		public static class tabCommentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 344, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdComents()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 832, 384, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCoded = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Coded Record", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabCodedContainer m_tabCodedContainer = (tabCodedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCodedContainer.class, m_tabCoded, factory);
			super.addContainer(m_tabCoded, m_tabCodedContainer);
			ims.framework.utils.SizeInfo m_tabCodedDesignSize = new ims.framework.utils.SizeInfo(832, 384);
			ims.framework.utils.SizeInfo m_tabCodedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
			m_tabCodedContainer.setContext(form, appForm, m_tabCoded, loader, form_images_local, contextMenus, startControlID, m_tabCodedDesignSize, m_tabCodedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 832, 384, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDiagProc = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diagnosis/Procedure Selection", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDiagProcContainer m_tabDiagProcContainer = (tabDiagProcContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDiagProcContainer.class, m_tabDiagProc, factory);
			super.addContainer(m_tabDiagProc, m_tabDiagProcContainer);
			ims.framework.utils.SizeInfo m_tabDiagProcDesignSize = new ims.framework.utils.SizeInfo(832, 384);
			ims.framework.utils.SizeInfo m_tabDiagProcRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabDiagProcContainer.setContext(form, appForm, m_tabDiagProc, loader, form_images_local, contextMenus, startControlID, m_tabDiagProcDesignSize, m_tabDiagProcRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 832, 384, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabComments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Comments", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabCommentsContainer m_tabCommentsContainer = (tabCommentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCommentsContainer.class, m_tabComments, factory);
			super.addContainer(m_tabComments, m_tabCommentsContainer);
			ims.framework.utils.SizeInfo m_tabCommentsDesignSize = new ims.framework.utils.SizeInfo(832, 384);
			ims.framework.utils.SizeInfo m_tabCommentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabCommentsContainer.setContext(form, appForm, m_tabComments, loader, form_images_local, contextMenus, startControlID, m_tabCommentsDesignSize, m_tabCommentsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCoded().setVisible(false);
			tabDiagProc().setVisible(false);
			tabComments().setVisible(false);
		}
		public void settabCodedEnabled(boolean value)
		{
			tabCoded().setEnabled(value);
		}
		public void settabDiagProcEnabled(boolean value)
		{
			tabDiagProc().setEnabled(value);
		}
		public void settabCommentsEnabled(boolean value)
		{
			tabComments().setEnabled(value);
		}
		public void showtabCoded()
		{
			tabDiagProc().setVisible(false);
			tabComments().setVisible(false);
			tabCoded().setVisible(true);
		}
		public void showtabDiagProc()
		{
			tabCoded().setVisible(false);
			tabComments().setVisible(false);
			tabDiagProc().setVisible(true);
		}
		public void showtabComments()
		{
			tabCoded().setVisible(false);
			tabDiagProc().setVisible(false);
			tabComments().setVisible(true);
		}

		public tabCodedContainer tabCoded()
		{
			return (tabCodedContainer)super.layers.get(0);
		}
		public tabDiagProcContainer tabDiagProc()
		{
			return (tabDiagProcContainer)super.layers.get(1);
		}
		public tabCommentsContainer tabComments()
		{
			return (tabCommentsContainer)super.layers.get(2);
		}
	}
	public static class cmbAdmissionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.AdmissionDetailForCodingListVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.AdmissionDetailForCodingListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.AdmissionDetailForCodingListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.AdmissionDetailForCodingListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.AdmissionDetailForCodingListVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.AdmissionDetailForCodingListVo getValue()
		{
			return (ims.RefMan.vo.AdmissionDetailForCodingListVo)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.AdmissionDetailForCodingListVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdEpisodeFCERow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdEpisodeFCERow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColFCEStartReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColFCEStartReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColFCEStartOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColFCEStart(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColFCEStart()
		{
			return (String)super.row.get(0);
		}
		public void setColFCEStart(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColFCEStartTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColEndReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColEndReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColEndOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColEnd(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColEnd()
		{
			return (String)super.row.get(1);
		}
		public void setColEnd(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColEndTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColHCPReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColHCPOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColHCP(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColHCP()
		{
			return (String)super.row.get(2);
		}
		public void setColHCP(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColHCPTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColSpecialtyReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColSpecialtyOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColSpecialty(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColSpecialty()
		{
			return (String)super.row.get(3);
		}
		public void setColSpecialty(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColSpecialtyTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColServiceReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColServiceReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColServiceOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColService(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColService()
		{
			return (String)super.row.get(4);
		}
		public void setColService(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColServiceTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColCodingStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColCodingStatusReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColCodingStatusOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColCodingStatus(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColCodingStatus()
		{
			return (String)super.row.get(5);
		}
		public void setColCodingStatus(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColCodingStatusTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColCodedByReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColCodedByReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColCodedByOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColCodedBy(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColCodedBy()
		{
			return (String)super.row.get(6);
		}
		public void setColCodedBy(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColCodedByTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColCodedDateReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColCodedDateReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColCodedDateOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColCodedDate(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getColCodedDate()
		{
			return (String)super.row.get(7);
		}
		public void setColCodedDate(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColCodedDateTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.RefMan.vo.ConsultantStayForPatientCodingListVo getValue()
		{
			return (ims.RefMan.vo.ConsultantStayForPatientCodingListVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.ConsultantStayForPatientCodingListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdEpisodeFCERowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdEpisodeFCERowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdEpisodeFCERow get(int index)
		{
			return new grdEpisodeFCERow(super.collection.get(index));
		}
		public grdEpisodeFCERow newRow()
		{
			return new grdEpisodeFCERow(super.collection.newRow());
		}
		public grdEpisodeFCERow newRow(boolean autoSelect)
		{
			return new grdEpisodeFCERow(super.collection.newRow(autoSelect));
		}
		public grdEpisodeFCERow newRowAt(int index)
		{
			return new grdEpisodeFCERow(super.collection.newRowAt(index));
		}
		public grdEpisodeFCERow newRowAt(int index, boolean autoSelect)
		{
			return new grdEpisodeFCERow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdEpisodeFCEGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.ConsultantStayForPatientCodingListVoCollection getValues()
		{
			ims.RefMan.vo.ConsultantStayForPatientCodingListVoCollection listOfValues = new ims.RefMan.vo.ConsultantStayForPatientCodingListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.ConsultantStayForPatientCodingListVo getValue()
		{
			return (ims.RefMan.vo.ConsultantStayForPatientCodingListVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.ConsultantStayForPatientCodingListVo value)
		{
			super.grid.setValue(value);
		}
		public grdEpisodeFCERow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdEpisodeFCERow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdEpisodeFCERowCollection getRows()
		{
			return new grdEpisodeFCERowCollection(super.grid.getRows());
		}
		public grdEpisodeFCERow getRowByValue(ims.RefMan.vo.ConsultantStayForPatientCodingListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdEpisodeFCERow(row);
		}
		public void setColFCEStartHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColFCEStartHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColEndHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColEndHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColServiceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColServiceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColCodingStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColCodingStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColCodedByHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColCodedByHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColCodedDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColCodedDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Diagnosis", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5850001)))
			contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem);
		contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Diagnosis", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5850002)))
			contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem);
		contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Procedure", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5850003)))
			contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem);
		contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Procedure", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5850004)))
			contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralExternalCodingDiagnosisProcedureMenu);
		contextMenus.RefMan.contextMenuReferralExternalCodingAddProcedureMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Procedure", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6090001)))
			contextMenus.RefMan.contextMenuReferralExternalCodingAddProcedureMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralExternalCodingAddProcedureMenu);
		contextMenus.RefMan.contextMenuReferralExternalCodingAddDiagnosisMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Diagnosis", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6080001)))
			contextMenus.RefMan.contextMenuReferralExternalCodingAddDiagnosisMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralExternalCodingAddDiagnosisMenu);
		contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenuADD_COMMENTItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Comment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6060001)))
			contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenuADD_COMMENTItem);
		contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenuSUPERCEDEDItem = factory.createMenuItem(startControlID.intValue() + 8, "Superseded", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6060002)))
			contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenu.add(contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenuSUPERCEDEDItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralExternalCodingCommentsMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 4, 0, 840, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Coding", new Integer(1), ""}));

		// Layer Clasess
		lyrReferralLayer m_lyrReferralLayer = (lyrReferralLayer)LayerFlyweightFactory.getInstance().createLayer(lyrReferralLayer.class, this, factory);
		super.addLayer(m_lyrReferralLayer);
		m_lyrReferralLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 456, 82, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "View:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 169, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finished Consultant Episode:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 50, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 744, 600, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Encoder", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 531, 600, 208, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "View Full Record / Audit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 80, 48, 760, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAdmissionTemp);
		cmbAdmissionComboBox cmbAdmission = (cmbAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmissionComboBox.class, m_cmbAdmissionTemp);
		super.addComboBox(cmbAdmission);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 752, 83, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Coded", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 664, 83, 78, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"For Review", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 576, 83, 79, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"In Progress", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 504, 83, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Uncoded", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 832, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdEpisodeFCETemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdEpisodeFCETemp);
		grdEpisodeFCEGrid grdEpisodeFCE = (grdEpisodeFCEGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEpisodeFCEGrid.class, m_grdEpisodeFCETemp);
		grdEpisodeFCE.addStringColumn("FCE Start", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("End", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("Consultant", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("Cons. Specialty", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("Service", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("Coding Status", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("Coded by", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEpisodeFCE.addStringColumn("Coded Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdEpisodeFCE);

		// Link Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 736, 16, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));

		// HTML Viewer Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 1, 1, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrReferralLayer lyrReferral()
	{
		return (lyrReferralLayer)super.getLayer(0);
	}
	public Label lbl2()
	{
		return (Label)super.getControl(5);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(6);
	}
	public Button btnEncoder()
	{
		return (Button)super.getControl(7);
	}
	public Button btnViewAudit()
	{
		return (Button)super.getControl(8);
	}
	public cmbAdmissionComboBox cmbAdmission()
	{
		return (cmbAdmissionComboBox)super.getComboBox(0);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(10);
	}
	public CheckBox chkForReview()
	{
		return (CheckBox)super.getControl(11);
	}
	public CheckBox chkInProgress()
	{
		return (CheckBox)super.getControl(12);
	}
	public CheckBox chkUncoded()
	{
		return (CheckBox)super.getControl(13);
	}
	public grdEpisodeFCEGrid grdEpisodeFCE()
	{
		return (grdEpisodeFCEGrid)super.getGrid(0);
	}
	public Link lnkReturnToList()
	{
		return (Link)super.getControl(15);
	}
	public HTMLViewer htmEncoder()
	{
		return (HTMLViewer)super.getControl(16);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				CodingRecordPreview = new LocalFormName(134249);
				PreviousReferralCodedRecords = new LocalFormName(134250);
				InpatientClinicalCodingWorklist = new LocalFormName(134238);
				PatientCodingList = new LocalFormName(134254);
				SelectPreviousDiagnosisForReferralCoding = new LocalFormName(134261);
				CodedRecordAudit = new LocalFormName(134263);
				CodingComment = new LocalFormName(134257);
			}
			public final FormName CodingRecordPreview;
			public final FormName PreviousReferralCodedRecords;
			public final FormName InpatientClinicalCodingWorklist;
			public final FormName PatientCodingList;
			public final FormName SelectPreviousDiagnosisForReferralCoding;
			public final FormName CodedRecordAudit;
			public final FormName CodingComment;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				ConsultantStayWardTransferDetails = new LocalFormName(102471);
			}
			public final FormName ConsultantStayWardTransferDetails;
		}

		public RefManForms RefMan;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image Add;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Admission16 = new ImageHelper(134151, "Images/RefMan/Admission16.png", new Integer(16), new Integer(16));
				Admission24 = new ImageHelper(134152, "Images/RefMan/Admission24.png", new Integer(24), new Integer(24));
				Consultant24 = new ImageHelper(134160, "Images/RefMan/Consultant24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Admission16;
			public final ims.framework.utils.Image Admission24;
			public final ims.framework.utils.Image Consultant24;
		}
		public final CoreImages Core;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedAdmissionsForCodingRefs = new ims.framework.ContextVariable("SelectedAdmissionsForCodingRefs", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedAdmissionsForCodingRefs_" + componentIdentifier + "");
			cxl_SelectedReferralCoding = new ims.framework.ContextVariable("SelectedReferralCoding", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier + "");
			cxl_LoggedMos = new ims.framework.ContextVariable("LoggedMos", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__LoggedMos_" + componentIdentifier + "");
			cxl_SelectedAdmission = new ims.framework.ContextVariable("SelectedAdmission", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedAdmission_" + componentIdentifier + "");
			cxl_SelectedEpisodeOfCare = new ims.framework.ContextVariable("SelectedEpisodeOfCare", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedEpisodeOfCare_" + componentIdentifier + "");
			cxl_CodingConfig = new ims.framework.ContextVariable("CodingConfig", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier + "");
			cxl_SelectedFCE = new ims.framework.ContextVariable("SelectedFCE", prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier + "");
		}
		
		public boolean getSelectedAdmissionsForCodingRefsIsNotNull()
		{
			return !cxl_SelectedAdmissionsForCodingRefs.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.AdmissionDetailRefVoCollection getSelectedAdmissionsForCodingRefs()
		{
			return (ims.core.admin.pas.vo.AdmissionDetailRefVoCollection)cxl_SelectedAdmissionsForCodingRefs.getValue(context);
		}
		public void setSelectedAdmissionsForCodingRefs(ims.core.admin.pas.vo.AdmissionDetailRefVoCollection value)
		{
			if(value != null)
			{
				for(int x = 0; x < value.size(); x++)
				{
					if(value.get(x) != null && (value.get(x).getBoId() == null || value.get(x).getBoId().intValue() < 1))
						throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id found in 'SelectedAdmissionsForCodingRefs' RefVoCollection context variable.");
				}
			}
			if(value == null)
				cxl_SelectedAdmissionsForCodingRefs.setValue(context, null);
			else
			{
				ims.core.admin.pas.vo.AdmissionDetailRefVoCollection copy = new ims.core.admin.pas.vo.AdmissionDetailRefVoCollection();
				for(int x = 0; x < value.size(); x++)
				{
					copy.add(value.get(x));
				}
				value.clear();
				for(int x = 0; x < copy.size(); x++)
				{
					if(copy.get(x) == null)
						value.add(null);
					else
						value.add(new ims.core.admin.pas.vo.AdmissionDetailRefVo(copy.get(x).getBoId(), copy.get(x).getBoVersion()));
				}
				cxl_SelectedAdmissionsForCodingRefs.setValue(context, value);
			}
		}
		private ims.framework.ContextVariable cxl_SelectedAdmissionsForCodingRefs = null;
		public boolean getSelectedReferralCodingIsNotNull()
		{
			return !cxl_SelectedReferralCoding.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralExternalCodingVo getSelectedReferralCoding()
		{
			return (ims.RefMan.vo.ReferralExternalCodingVo)cxl_SelectedReferralCoding.getValue(context);
		}
		public void setSelectedReferralCoding(ims.RefMan.vo.ReferralExternalCodingVo value)
		{
			cxl_SelectedReferralCoding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedReferralCoding = null;
		public boolean getLoggedMosIsNotNull()
		{
			return !cxl_LoggedMos.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffLiteVo getLoggedMos()
		{
			return (ims.core.vo.MemberOfStaffLiteVo)cxl_LoggedMos.getValue(context);
		}
		public void setLoggedMos(ims.core.vo.MemberOfStaffLiteVo value)
		{
			cxl_LoggedMos.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedMos = null;
		public boolean getSelectedAdmissionIsNotNull()
		{
			return !cxl_SelectedAdmission.getValueIsNull(context);
		}
		public ims.RefMan.vo.AdmissionDetailWithConsultantStaysForCodingVo getSelectedAdmission()
		{
			return (ims.RefMan.vo.AdmissionDetailWithConsultantStaysForCodingVo)cxl_SelectedAdmission.getValue(context);
		}
		public void setSelectedAdmission(ims.RefMan.vo.AdmissionDetailWithConsultantStaysForCodingVo value)
		{
			cxl_SelectedAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAdmission = null;
		public boolean getSelectedEpisodeOfCareIsNotNull()
		{
			return !cxl_SelectedEpisodeOfCare.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getSelectedEpisodeOfCare()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_SelectedEpisodeOfCare.getValue(context);
		}
		public void setSelectedEpisodeOfCare(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedEpisodeOfCare' RefVo context variable.");
			if(value == null)
				cxl_SelectedEpisodeOfCare.setValue(context, null);
			else
				cxl_SelectedEpisodeOfCare.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedEpisodeOfCare = null;
		public boolean getCodingConfigIsNotNull()
		{
			return !cxl_CodingConfig.getValueIsNull(context);
		}
		public ims.core.vo.ExternalCodingConfigVo getCodingConfig()
		{
			return (ims.core.vo.ExternalCodingConfigVo)cxl_CodingConfig.getValue(context);
		}
		public void setCodingConfig(ims.core.vo.ExternalCodingConfigVo value)
		{
			cxl_CodingConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CodingConfig = null;
		public boolean getSelectedFCEIsNotNull()
		{
			return !cxl_SelectedFCE.getValueIsNull(context);
		}
		public ims.RefMan.vo.ConsultantStayForPatientCodingListVo getSelectedFCE()
		{
			return (ims.RefMan.vo.ConsultantStayForPatientCodingListVo)cxl_SelectedFCE.getValue(context);
		}
		public void setSelectedFCE(ims.RefMan.vo.ConsultantStayForPatientCodingListVo value)
		{
			cxl_SelectedFCE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedFCE = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ReferralExternalCodingDiagnosisProcedureMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_DIAGNOSIS = 1;
				public static final int REMOVE_DIAGNOSIS = 2;
				public static final int ADD_PROCEDURE = 3;
				public static final int REMOVE_PROCEDURE = 4;
			}
			public void disableAllReferralExternalCodingDiagnosisProcedureMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem.setEnabled(false);
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem.setEnabled(false);
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem.setEnabled(false);
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem.setEnabled(false);
			}
			public void hideAllReferralExternalCodingDiagnosisProcedureMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem.setVisible(false);
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem.setVisible(false);
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem.setVisible(false);
				this.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem.setVisible(false);
			}
			private Menu contextMenuReferralExternalCodingDiagnosisProcedureMenu;
			public ReadOnlyMenuItem getReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem()
			{
				return this.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem;
			}
			private MenuItem contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_DIAGNOSISItem;
			public ReadOnlyMenuItem getReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem()
			{
				return this.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem;
			}
			private MenuItem contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_DIAGNOSISItem;
			public ReadOnlyMenuItem getReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem()
			{
				return this.contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem;
			}
			private MenuItem contextMenuReferralExternalCodingDiagnosisProcedureMenuADD_PROCEDUREItem;
			public ReadOnlyMenuItem getReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem()
			{
				return this.contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem;
			}
			private MenuItem contextMenuReferralExternalCodingDiagnosisProcedureMenuREMOVE_PROCEDUREItem;
			public final class ReferralExternalCodingAddProcedureMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_PROCEDURE = 5;
			}
			public void disableAllReferralExternalCodingAddProcedureMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem.setEnabled(false);
			}
			public void hideAllReferralExternalCodingAddProcedureMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem.setVisible(false);
			}
			private Menu contextMenuReferralExternalCodingAddProcedureMenu;
			public ReadOnlyMenuItem getReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem()
			{
				return this.contextMenuReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem;
			}
			private MenuItem contextMenuReferralExternalCodingAddProcedureMenuADD_PROCEDUREItem;
			public final class ReferralExternalCodingAddDiagnosisMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_DIAGNOSIS = 6;
			}
			public void disableAllReferralExternalCodingAddDiagnosisMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem.setEnabled(false);
			}
			public void hideAllReferralExternalCodingAddDiagnosisMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem.setVisible(false);
			}
			private Menu contextMenuReferralExternalCodingAddDiagnosisMenu;
			public ReadOnlyMenuItem getReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem()
			{
				return this.contextMenuReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem;
			}
			private MenuItem contextMenuReferralExternalCodingAddDiagnosisMenuADD_DIAGNOSISItem;
			public final class ReferralExternalCodingCommentsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_COMMENT = 7;
				public static final int SUPERCEDED = 8;
			}
			public void disableAllReferralExternalCodingCommentsMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingCommentsMenuADD_COMMENTItem.setEnabled(false);
				this.contextMenuReferralExternalCodingCommentsMenuSUPERCEDEDItem.setEnabled(false);
			}
			public void hideAllReferralExternalCodingCommentsMenuMenuItems()
			{
				this.contextMenuReferralExternalCodingCommentsMenuADD_COMMENTItem.setVisible(false);
				this.contextMenuReferralExternalCodingCommentsMenuSUPERCEDEDItem.setVisible(false);
			}
			private Menu contextMenuReferralExternalCodingCommentsMenu;
			public ReadOnlyMenuItem getReferralExternalCodingCommentsMenuADD_COMMENTItem()
			{
				return this.contextMenuReferralExternalCodingCommentsMenuADD_COMMENTItem;
			}
			private MenuItem contextMenuReferralExternalCodingCommentsMenuADD_COMMENTItem;
			public ReadOnlyMenuItem getReferralExternalCodingCommentsMenuSUPERCEDEDItem()
			{
				return this.contextMenuReferralExternalCodingCommentsMenuSUPERCEDEDItem;
			}
			private MenuItem contextMenuReferralExternalCodingCommentsMenuSUPERCEDEDItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[182];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-ID", "ID_ReferralCoding");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-CATSREFERRAL", "CatsReferral");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-PASEVENT", "PasEvent");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-APPOINTMENT", "Appointment");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-COMMENTS", "Comments");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralExternalCoding", "BO-1096100037-ACTIVE", "Active");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedFCE", "BO-1014100005-ID", "ID_ConsultantStay");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-ID", "ID_ReferralCoding");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-CATSREFERRAL", "CatsReferral");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-PASEVENT", "PasEvent");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-APPOINTMENT", "Appointment");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-COMMENTS", "Comments");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedReferralCoding_" + componentIdentifier, "BO-1096100037-ACTIVE", "Active");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__LoggedMos_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__LoggedMos_" + componentIdentifier, "BO-1006100006-INITIALS", "Initials");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__LoggedMos_" + componentIdentifier, "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedAdmission_" + componentIdentifier, "BO-1014100008-ID", "ID_AdmissionDetail");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedAdmission_" + componentIdentifier, "BO-1014100008-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedAdmission_" + componentIdentifier, "BO-1014100008-CODINGSTATUS", "CodingStatus");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedAdmission_" + componentIdentifier, "BO-1014100008-SOURCEOFADMISSION", "SourceOfAdmission");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedEpisodeOfCare_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-ID", "ID_ExternalCodingConfig");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-USEEXTERNALCODER", "UseExternalCoder");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-CODEFILEIN", "CodeFileIn");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-CODEFILEOUT", "CodeFileOut");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-WINDOWTITLE", "WindowTitle");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-DEBUG", "Debug");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-MEDICODEPROGNAME", "MedicodeProgName");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-MEDICODEPARAMS", "MedicodeParams");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__CodingConfig_" + componentIdentifier, "BO-1028100089-DEFAULTMESSAGEVALUE", "DefaultMessageValue");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier, "BO-1014100005-ID", "ID_ConsultantStay");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier, "BO-1014100005-TRANSFERDATETIME", "TransferDateTime");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier, "BO-1014100005-ENDDATETIME", "EndDateTime");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier, "BO-1014100005-SPECIALTY", "Specialty");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier, "BO-1014100005-CODINGSTATUS", "CodingStatus");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralExternalCoding.__internal_x_context__SelectedFCE_" + componentIdentifier, "BO-1014100005-HISTOLOGYSTATUS", "HistologyStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
