//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.manuallysetrttclockstatus;

import ims.RefMan.vo.CATSReferralManualRTTClockStatusVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.pathways.vo.PathwayClockVo;
import ims.pathways.vo.PathwayClockVoCollection;
import ims.pathways.vo.PathwayRTTStatusRefVoCollection;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.pathways.vo.RTTStatusPointLiteVo;
import ims.pathways.vo.RTTStatusPointLiteVoCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	//---------------------------------------------------------------------------------------------------------------------------------------
	//	Form event handlers
	//---------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		open();
	}


	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}


	@Override
	protected void onQmbNewRTTStatusTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateRTTStatus(domain.listRTTStatusPoints(value));
	}


	@Override
	protected void onQmbNewRTTStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		RTTStatusPointLiteVo rttStatusPoint = form.qmbNewRTTStatus().getValue();
		
		if (rttStatusPoint != null)
		{
			form.qmbNewRTTStatus().setTooltip(rttStatusPoint.getDescription());
		}
	}
	

	@Override
	protected void onChkCreateNewClockValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.dteCurrentClockEndDate().getValue() == null)
		{
			form.dteCurrentClockEndDate().setValue(new Date());
		}
		
		updateControlsState();
	}
	
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}


	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}	

	
	
	//---------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//---------------------------------------------------------------------------------------------------------------------------------------

	
	private void clearScreen()
	{
		form.lblDateOfReferral().setValue("-");
		form.lblUrgency().setValue("-");
		form.lblService().setValue("-");
		form.lblReferringConsultant().setValue("-");
		
		form.txtCurrentRTTStatus().setValue(null);
		form.dteCurrentClockStartDate().setValue(null);
		form.dteCurrentClockEndDate().setValue(null);
		form.qmbNewRTTStatus().clear();
		form.chkCreateNewClock().setValue(false);
		form.dteNewClockStartDate().setValue(null);
		form.dteNewClockEndDate().setValue(null);
	}
	
	private void open()
	{
		clearScreen();

		CATSReferralManualRTTClockStatusVo referral = domain.getReferral(form.getGlobalContext().RefMan.getCatsReferralSetRTTClockStatus());
		form.getLocalContext().setReferral(referral);
		
		populateInstanceControls(referral);
		
		form.setMode(FormMode.EDIT);
	}


	private boolean save()
	{
		try
		{
			if (form.getLocalContext().getReferral() == null)
				throw new CodingRuntimeException("Referral cannot be null at this point");

			DateTime eventDateTime = new DateTime();
			CATSReferralManualRTTClockStatusVo referral = setReferralClockStatus((CATSReferralManualRTTClockStatusVo) form.getLocalContext().getReferral().clone(), eventDateTime);

			String[] errors = referral.validate(validateUI());

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			form.getLocalContext().setReferral(domain.saveReferral(referral));

			return true;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	}


	private String[] validateUI()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (form.chkCreateNewClock().getValue() && form.dteNewClockStartDate().getValue() == null)
		{
			errorList.add("Cannot create a new clock without a start date.");
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}


	private void updateControlsState()
	{
		CATSReferralManualRTTClockStatusVo referral = form.getLocalContext().getReferral();
		
		form.dteCurrentClockStartDate().setEnabled(false);
		form.dteCurrentClockEndDate().setEnabled(referral.getJourney() != null && referral.getJourney().getCurrentClock() != null && referral.getJourney().getCurrentClock().getStopDate() == null);
		
		form.dteNewClockStartDate().setEnabled(true);
		form.dteNewClockStartDate().setVisible(form.chkCreateNewClock().getValue());
		form.lblStartDate().setVisible(form.chkCreateNewClock().getValue());
		
		form.dteNewClockEndDate().setEnabled(true);
		form.dteNewClockEndDate().setVisible(form.chkCreateNewClock().getValue());
		form.lblEndDate().setVisible(form.chkCreateNewClock().getValue());
	}

	
	private void populateInstanceControls(CATSReferralManualRTTClockStatusVo referral)
	{
		// Clear screen
		clearScreen();
		
		if (referral == null)
			return;
		
		form.lblDateOfReferral().setValue(referral.getReferralDetails().getDateOfReferral() != null ? referral.getReferralDetails().getDateOfReferral().toString() : "-");
		form.lblUrgency().setValue(referral.getUrgency() != null ? referral.getUrgency().getText() : "-");
		form.lblService().setValue(referral.getReferralDetails().getService() != null ? referral.getReferralDetails().getService().getServiceName() : "-");
		form.lblReferringConsultant().setValue(referral.getReferralDetails().getReferringConsultant() != null ? referral.getReferralDetails().getReferringConsultant().toString() : "-");
		
		// Display RTT Status & RTT Clock
		if (referral.getCurrentRTTStatus() != null)
		{
			form.txtCurrentRTTStatus().setValue(referral.getCurrentRTTStatus().getRTTStatus().getDescription());
		}
		
		if (referral.getJourney() != null && referral.getJourney().getCurrentClock() != null)
		{
			form.dteCurrentClockStartDate().setValue(referral.getJourney().getCurrentClock().getStartDate());
			form.dteCurrentClockEndDate().setValue(referral.getJourney().getCurrentClock().getStopDate());
		}
	}


	private void populateRTTStatus(RTTStatusPointLiteVoCollection listRTTStatusPoints)
	{
		form.qmbNewRTTStatus().clear();
		
		if (listRTTStatusPoints == null)
			return;
		
		for (RTTStatusPointLiteVo rttStatusPoint : listRTTStatusPoints)
		{
			form.qmbNewRTTStatus().newRow(rttStatusPoint, rttStatusPoint.getDescription());
		}
		
		if (listRTTStatusPoints.size() == 1)
		{
			form.qmbNewRTTStatus().setValue(listRTTStatusPoints.get(0));
		}
		else
		{
			form.qmbNewRTTStatus().showOpened();
		}
	}


	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private CATSReferralManualRTTClockStatusVo setReferralClockStatus(CATSReferralManualRTTClockStatusVo referral, DateTime eventDateTime)
	{
		if (referral == null)
			throw new CodingRuntimeException("Referral cannot be null at this point");
		
		// Update the clock end date if necessary (was manually changed)
		if (referral.getJourney() != null && referral.getJourney().getCurrentClock() != null && referral.getJourney().getCurrentClock().getStopDate() == null)
		{
			referral.getJourney().getCurrentClock().setStopDate(form.dteCurrentClockEndDate().getValue());
		}
		
		
		PathwayRTTStatusVo rttStatus = null;
		if (form.qmbNewRTTStatus().getValue() != null)
		{
			// Create a new RTT Status
			rttStatus = new PathwayRTTStatusVo();
			rttStatus.setRTTStatus(form.qmbNewRTTStatus().getValue());
			rttStatus.setStatusDateTime(eventDateTime);
			rttStatus.setStatusBy((MemberOfStaffRefVo) domain.getMosUser());
			
			referral.setCurrentRTTStatus(rttStatus);
		}
		
		
		if (referral.getJourney() != null)
		{
			if (form.chkCreateNewClock().getValue())
			{
				// Step 1 - Update the current clock in history, as the VO for current clock
				// will be set to a new VO and the modifications will be lost
				if (referral.getJourney().getClockHistory() != null && referral.getJourney().getCurrentClock() != null)
				{
					int currentClockIndex = referral.getJourney().getClockHistory().indexOf(referral.getJourney().getCurrentClock());
					referral.getJourney().getClockHistory().set(currentClockIndex, referral.getJourney().getCurrentClock());
				}
				
				// Step 2 - Create a new Clock
				int X = getNumberOfClocks(referral.getJourney().getClockHistory());

				PathwayClockVo clock = new PathwayClockVo();
				clock.setExtClockId("MAXIMS_" + X);
				clock.setExtClockName("MaximsClock_" + X);
				clock.setStartDate(form.dteNewClockStartDate().getValue());
				clock.setStopDate(form.dteNewClockEndDate().getValue());

				// Step 3 - Set RTT Status to new clock
				clock.setRTTStatusHistory(new PathwayRTTStatusRefVoCollection());
				clock.setCurrentRTTStatus(referral.getCurrentRTTStatus());
				clock.getRTTStatusHistory().add(referral.getCurrentRTTStatus());

				// Step 4 - Add new Clock to referral Journey
				if (referral.getJourney().getClockHistory() == null)
					referral.getJourney().setClockHistory(new PathwayClockVoCollection());

				referral.getJourney().setCurrentClock(clock);
				referral.getJourney().getClockHistory().add(clock);
			}
			else if (rttStatus != null)
			{
				// If a new RTT Status was set, but no new clock were created 
				// add the new RTT Status to current clock
				if (referral.getJourney().getCurrentClock().getRTTStatusHistory() == null)
					referral.getJourney().getCurrentClock().setRTTStatusHistory(new PathwayRTTStatusRefVoCollection());
				
				referral.getJourney().getCurrentClock().setCurrentRTTStatus(rttStatus);
				referral.getJourney().getCurrentClock().getRTTStatusHistory().add(rttStatus);
			}
		}
		
		return referral;
	}
	
	
	private int getNumberOfClocks(PathwayClockVoCollection pathwayClockCollection)
	{
		int X = 0;

		if (pathwayClockCollection == null || pathwayClockCollection.size() == 0)
			return ++X;

		return pathwayClockCollection.size() + 1;
	}

}
