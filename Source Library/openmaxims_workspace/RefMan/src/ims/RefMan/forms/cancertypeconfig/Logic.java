//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.cancertypeconfig;

import java.util.ArrayList;

import ims.RefMan.forms.cancertypeconfig.GenForm.grdCancerTypeRow;
import ims.RefMan.vo.CancerTypeConfigVo;
import ims.RefMan.vo.CancerTypeItemConfigVo;
import ims.RefMan.vo.CancerTypeItemConfigVoCollection;
import ims.RefMan.vo.lookups.CancerType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int COL_AVAILABLE_FOR_NATIONAL_SCREENING = 3;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdCancerType().getRows().size()>0);
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		
	}
	private void open()
	{
		CancerTypeConfigVo cancerTypeConfig = domain.getCancerTypeConfig();
		form.getLocalContext().setcancerTypeConfig(cancerTypeConfig);
		populateScreenFromData(cancerTypeConfig);
		
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromData(CancerTypeConfigVo cancerTypeConfig)
	{
		form.grdCancerType().getRows().clear();
		
		if (cancerTypeConfig==null)
		{
			initializeGridWithLookups();
		}
		else
		{
			populateGrid(cancerTypeConfig);
			populateGridWithLookupsAddedLater();//WDEV-20167
		}
	}
	
	//WDEV-20167
	private void populateGridWithLookupsAddedLater()
	{
		ims.RefMan.vo.lookups.CancerTypeCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getCancerType(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if (isInstanceInGrid(lookupCollection.get(x)))
				continue;
			
			grdCancerTypeRow row = form.grdCancerType().getRows().newRow();
			row.setColCancerType(lookupCollection.get(x).getText());
			row.setValue(lookupCollection.get(x));	 
		}
	}

	//WDEV-20167
	private boolean isInstanceInGrid(CancerType cancerType)
	{
		if (cancerType==null)
			return false;
		
		for (int i=0;i<form.grdCancerType().getRows().size();i++)
		{
			if (cancerType.equals(form.grdCancerType().getRows().get(i).getValue()))
			{
				return true;
			}
		}
		
		return false;
	}

	private void populateGrid(CancerTypeConfigVo cancerTypeConfig)
	{
		if (cancerTypeConfig==null || cancerTypeConfig.getCancerItemConfig()==null || cancerTypeConfig.getCancerItemConfig().size()==0 )
		{
			return;
		}
		
		for (int i=0; i<cancerTypeConfig.getCancerItemConfig().size();i++)
		{
			addRowToGrid(cancerTypeConfig.getCancerItemConfig().get(i));
		}
	}
	
	private void initializeGridWithLookups()
	{
		ims.RefMan.vo.lookups.CancerTypeCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getCancerType(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			grdCancerTypeRow row = form.grdCancerType().getRows().newRow();
			row.setColCancerType(lookupCollection.get(x).getText());
			row.setValue(lookupCollection.get(x));	 
		}
	}
	
	private void addRowToGrid(CancerTypeItemConfigVo cancerTypeItemConfigVo)
	{
		grdCancerTypeRow row = form.grdCancerType().getRows().newRow();
		
		row.setColCancerType(cancerTypeItemConfigVo.getCancerType().getText());
		row.setColDay31Target(cancerTypeItemConfigVo.getDay31Target());
		row.setColDay62Target(cancerTypeItemConfigVo.getDay62Target());
		row.setColAvailableForNatScreening(cancerTypeItemConfigVo.getAvailableForNationalScreening());
		row.setColNoReferralLetterRequiredReadOnly(!Boolean.TRUE.equals(cancerTypeItemConfigVo.getAvailableForNationalScreening()));
		row.setColNoReferralLetterRequired(Boolean.TRUE.equals(cancerTypeItemConfigVo.getNoReferralLetterRequired()));
		
		row.setValue(cancerTypeItemConfigVo.getCancerType());
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	private boolean save()
	{
		CancerTypeConfigVo cancerTypeConfigToSave=populateDataFromScreen(form.getLocalContext().getcancerTypeConfig()) ;
		
		String[] errors = cancerTypeConfigToSave.validate(getUIErrors());
		
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if (cancerTypeConfigToSave.getID_CancerTypeConfig()==null && domain.getCancerTypeConfig()!=null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			form.getLocalContext().setcancerTypeConfig(domain.save(cancerTypeConfigToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		return true;
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		for (int i=0;i<form.grdCancerType().getRows().size();i++)
		{
			grdCancerTypeRow row = form.grdCancerType().getRows().get(i);
			if (!Boolean.TRUE.equals(row.getColDay31Target())&& !Boolean.TRUE.equals(row.getColDay62Target()))
			{
				errors.add("For each Cancer Type please check '31 Day Target' or '62 Day  Target'.");
				break;
			}
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private CancerTypeConfigVo populateDataFromScreen(CancerTypeConfigVo cancerTypeConfig)
	{
		if (cancerTypeConfig==null)
			cancerTypeConfig=new CancerTypeConfigVo();
		else
			cancerTypeConfig=(CancerTypeConfigVo) cancerTypeConfig.clone();
		
		cancerTypeConfig.setCancerItemConfig(getCollCancerTypeItem());
		
		return cancerTypeConfig;
	}
	
	private CancerTypeItemConfigVoCollection getCollCancerTypeItem()
	{
		CancerTypeItemConfigVoCollection collCancerTypeItem = new CancerTypeItemConfigVoCollection();
		
		for (int i=0;i<form.grdCancerType().getRows().size();i++)
		{
			collCancerTypeItem.add(populateItemFromGrid(form.grdCancerType().getRows().get(i)));
		}
		
		return collCancerTypeItem;
	}
	
	private CancerTypeItemConfigVo populateItemFromGrid(grdCancerTypeRow row)
	{
		CancerTypeItemConfigVo cancerTypeItem = new CancerTypeItemConfigVo();
		
		cancerTypeItem.setCancerType(row.getValue());
		cancerTypeItem.setDay31Target(row.getColDay31Target());
		cancerTypeItem.setDay62Target(row.getColDay62Target());
		cancerTypeItem.setAvailableForNationalScreening(row.getColAvailableForNatScreening());
		cancerTypeItem.setNoReferralLetterRequired(row.getColNoReferralLetterRequired());
		
		return cancerTypeItem;
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onGrdCancerTypeGridCheckBoxClicked(int column, grdCancerTypeRow row, boolean isChecked) throws PresentationLogicException
	{
		if (isChecked)	
		{
			switch (column)
    		{
    			case 1:
    			row.setColDay62Target(false);
    			break;
    
    			case 2:
    			row.setColDay31Target(false);
    			break;
    		}
		}
		
		switch (column)
    	{
			case COL_AVAILABLE_FOR_NATIONAL_SCREENING:
				row.setColNoReferralLetterRequired(false);
				row.setColNoReferralLetterRequiredReadOnly(!isChecked);
			break;
    	}
	}
}
