//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5214.17710)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.undoremovalfromwaitinglist;

import java.util.ArrayList;

import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( args!=null && args.length > 0 )
		{
			if (args[0] !=null && args[0] instanceof PatientElectiveListRefVo)
				form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList((PatientElectiveListRefVo) args[0]));
		}
		
		initialize();
		//updateControlsState();
		//open();
	}
	private void initialize()
	{
		clearScreen();

		form.ccUndoRemovalBy().isRequired(true);
		form.ccUndoRemovalBy().initialize(MosType.ALL);
		Object mos = domain.getMosUser();

		if (mos != null && mos instanceof MemberOfStaffRefVo)
			form.ccUndoRemovalBy().setValue((MemberOfStaffLiteVo) mos);

		form.dtimUndoRemovalDateTime().setValue(new DateTime());
	}
	private void updateControlsState()
	{
		//form.cmbUndoRemovalReason().setEnabled(true);
				
	}
	private void clearScreen()
	{
		form.dtimUndoRemovalDateTime().setValue(null);
		form.ccUndoRemovalBy().setValue(null);
		form.cmbUndoRemovalReason().setValue(null);
		form.txtUndoRemovalComments().setValue(null);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save(true))
			engine.close(DialogResult.OK);
	}
	private boolean save( boolean details)
	{
		PatientElectiveListForTCIDetailsDialogVo record =  form.getLocalContext().getPatientElectiveList(); 
		String[] errors = validateUIRules();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		if( record != null )
		{
			record = setUndoRemovalStatus(record);
			String[] arrErrors = record.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return false;
			}
			try
			{
				record = domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return true;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			
		}
		
		return true;
		
	}
	private PatientElectiveListForTCIDetailsDialogVo setUndoRemovalStatus(PatientElectiveListForTCIDetailsDialogVo record )
	{
		if( record == null )
			return null;
		
		int siziehist = record.getElectiveListStatusHistory().size();
		if( siziehist > 1 )
		{
			
			ElectiveListStatusVo tempVo = record.getElectiveListStatusHistory().get(siziehist-2);
			// create a new electiveliststatus
			ElectiveListStatusVo electivStatus = new ElectiveListStatusVo();
			//set the values for the new created electiveliststatus 
			electivStatus.setElectiveListStatus(tempVo.getElectiveListStatus());
			electivStatus.setStatusDateTime(form.dtimUndoRemovalDateTime().getValue());
			
			electivStatus.setAuthoringUser((MemberOfStaffLiteVo) form.ccUndoRemovalBy().getValue());
			electivStatus.setUndoRemovalReason(form.cmbUndoRemovalReason().getValue());
			//electivStatus.setRemovalOtherReason(form.cmbRemovalOtherReason().getValue());
			electivStatus.setStatusComment(form.txtUndoRemovalComments().getValue());
		
    		//get the history
    		ElectiveListStatusVoCollection electListColl = record.getElectiveListStatusHistory();		
    		if( electListColl == null )
    			electListColl = new ElectiveListStatusVoCollection();
    		
    		electListColl.add(electivStatus);							//add to history the old electiveliststatus
    		record.setElectiveListStatusHistory(electListColl);
    		record.setElectiveListStatus(electivStatus);				//set the new electiveliststatus
		}
    
		return record;
		
		
	}
	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if( form.dtimUndoRemovalDateTime().getValue() == null )
		{
			errors.add("Undo Removal Date Time is mandatory!");
		}
		if( form.ccUndoRemovalBy().getValue() == null )
		{
			errors.add("Undo Removal By is mandatory!");
		}
		if( form.cmbUndoRemovalReason().getValue() == null)
		{
			errors.add("Undo Removal Reason is mandatory!");
		}
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
}
