//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.addemergencytheatre;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.RefMan.domain.AddEmergencyTheatre.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.RefMan.domain.AddEmergencyTheatre domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbTheatreTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTheatreType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.TheatreType existingInstance = (ims.scheduling.vo.lookups.TheatreType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTheatreTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.TheatreType)
		{
			ims.scheduling.vo.lookups.TheatreType instance = (ims.scheduling.vo.lookups.TheatreType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTheatreTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.TheatreType existingInstance = (ims.scheduling.vo.lookups.TheatreType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTheatreType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTheatreTypeLookup()
	{
		this.form.cmbTheatreType().clear();
		ims.scheduling.vo.lookups.TheatreTypeCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getTheatreType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTheatreType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTheatreTypeLookupValue(int id)
	{
		ims.scheduling.vo.lookups.TheatreType instance = ims.scheduling.vo.lookups.LookupHelper.getTheatreTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTheatreType().setValue(instance);
	}
	protected final void defaultcmbTheatreTypeLookupValue()
	{
		this.form.cmbTheatreType().setValue((ims.scheduling.vo.lookups.TheatreType)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.TheatreType.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.TheatreType.TYPE_ID));
	}
	protected final void oncmbLaterality2ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbLaterality2().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLaterality2Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLaterality2Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbLaterality2().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLaterality2Lookup()
	{
		this.form.cmbLaterality2().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbLaterality2().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLaterality2LookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbLaterality2().setValue(instance);
	}
	protected final void defaultcmbLaterality2LookupValue()
	{
		this.form.cmbLaterality2().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbLaterality1ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbLaterality1().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLaterality1Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLaterality1Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbLaterality1().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLaterality1Lookup()
	{
		this.form.cmbLaterality1().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbLaterality1().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLaterality1LookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbLaterality1().setValue(instance);
	}
	protected final void defaultcmbLaterality1LookupValue()
	{
		this.form.cmbLaterality1().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbUrgencyCategValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbUrgencyCateg().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory existingInstance = (ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUrgencyCategLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)
		{
			ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory instance = (ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUrgencyCategLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory existingInstance = (ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbUrgencyCateg().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUrgencyCategLookup()
	{
		this.form.cmbUrgencyCateg().clear();
		ims.scheduling.vo.lookups.PendingTheatreUrgencyCategoryCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getPendingTheatreUrgencyCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbUrgencyCateg().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUrgencyCategLookupValue(int id)
	{
		ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory instance = ims.scheduling.vo.lookups.LookupHelper.getPendingTheatreUrgencyCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbUrgencyCateg().setValue(instance);
	}
	protected final void defaultcmbUrgencyCategLookupValue()
	{
		this.form.cmbUrgencyCateg().setValue((ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.PendingTheatreUrgencyCategory.TYPE_ID));
	}
	protected final void oncmbCurrentLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCurrentLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation existingInstance = (ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCurrentLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation)
		{
			ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation instance = (ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCurrentLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation existingInstance = (ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCurrentLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCurrentLocationLookup()
	{
		this.form.cmbCurrentLocation().clear();
		ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocationCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getPendingEmergencyCurrentPatientLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCurrentLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCurrentLocationLookupValue(int id)
	{
		ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation instance = ims.scheduling.vo.lookups.LookupHelper.getPendingEmergencyCurrentPatientLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCurrentLocation().setValue(instance);
	}
	protected final void defaultcmbCurrentLocationLookupValue()
	{
		this.form.cmbCurrentLocation().setValue((ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.PendingEmergencyCurrentPatientLocation.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.RefMan.domain.AddEmergencyTheatre domain;
}
