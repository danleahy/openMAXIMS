//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.addemergencytheatre;

import ims.RefMan.forms.addemergencytheatre.GenForm.GroupProceduresEnumeration;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.LocationListVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.scheduling.vo.PendingEmergencyTheatreVo;
import ims.scheduling.vo.lookups.PendingEmergencyTheatreStatus;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( args != null && args.length > 0 &&  args[0] instanceof Boolean)
		{
			form.getLocalContext().setEnableOnlyHospitalAndWardControls((Boolean) args[0]);
		}
		
		if( args != null && args.length > 1 &&  args[1] instanceof Boolean)
		{
			form.getLocalContext().setDisableEditOption((Boolean) args[1]);
		}
		
		initialise();
		open();
	}

	private void initialise()
	{
		//WDEV-22760
		CatsReferralCurrentStatusVo catsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		boolean isAccepted = catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_ACCEPTED.equals(catsReferral.getCurrentStatus().getReferralStatus());
		boolean hasPendingEmergencyTheatre_Id = form.getGlobalContext().Scheduling.getPendingEmergencyTheatre()!= null && form.getGlobalContext().Scheduling.getPendingEmergencyTheatre().getID_PendingEmergencyTheatreIsNotNull();
		
		form.getLocalContext().setReferralResposibleHCP(catsReferral.getResponsibleHCP());
		//WDEV-22760 -- ends here
		
		if(hasPendingEmergencyTheatre_Id && !Boolean.TRUE.equals(form.getLocalContext().getDisableEditOption()))//WDEV-22769
			engine.setCaption("View/Edit Pending Emergency Theatre Details");
		else if(hasPendingEmergencyTheatre_Id && Boolean.TRUE.equals(form.getLocalContext().getDisableEditOption()))
			engine.setCaption("View Pending Emergency Theatre Details");
		else 
			engine.setCaption("Add Patient to Pending Emergency Theatre List");
		
		if(!Boolean.TRUE.equals(isAccepted))
		{
			engine.showMessage("Referral is not accepted");
			engine.close(DialogResult.CANCEL);
			return;
		}
		
		form.ccResponsibleHCP().initialize(MosType.HCP, HcpDisType.MEDICAL, Boolean.TRUE);
		form.ccResponsibleHCP().isRequired(Boolean.TRUE);
		
		form.cmbTheatreType().removeRow(TheatreType.OP_CASE);
		
		form.GroupProcedures().setValue(GroupProceduresEnumeration.rdoAllProcedures);
		showSecondProcedureControls(false);
		
		form.getLocalContext().setIsInpatient(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getWard() != null ? Boolean.TRUE : Boolean.FALSE);
		form.getLocalContext().setReferralService(domain.getReferralService(form.getGlobalContext().RefMan.getCatsReferral()));
	}

	private void open()
	{
		PendingEmergencyTheatreVo pendingEmergencyTheatre = domain.getPendingEmergencyTheatre(form.getGlobalContext().Scheduling.getPendingEmergencyTheatre());
		
		if (pendingEmergencyTheatre == null)
		{
			pendingEmergencyTheatre = domain.getPendingEmergencyTheatreForPatient(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().RefMan.getCatsReferral());
			
			if (pendingEmergencyTheatre != null)
			{
				engine.showMessage("This patient already has an active pending emergency theatre record");
				engine.close(DialogResult.CANCEL);
				return;
			}
		}
		
		form.getLocalContext().setSelectedRecord(pendingEmergencyTheatre);
		
		populateScreenFromData(pendingEmergencyTheatre);
		
		form.setMode(pendingEmergencyTheatre != null ? FormMode.VIEW : FormMode.EDIT);
		
	}
	
	private void populateScreenFromData(PendingEmergencyTheatreVo pendingEmergencyTheatre)
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getIsInpatient()))
		{
			form.lblCurrentWardValue().setValue(form.getGlobalContext().Core.getPatientShort().getWard().getName() != null ? form.getGlobalContext().Core.getPatientShort().getWard().getName() : "");
			form.lblCurrentHospitalValue().setValue(getHospitalForWard(form.getGlobalContext().Core.getPatientShort().getWard()));
		}
		
		if (pendingEmergencyTheatre == null)
		{
			//default values
			if (form.getLocalContext().getReferralService() != null)
			{
				form.qmbService().newRow(form.getLocalContext().getReferralService(), form.getLocalContext().getReferralService().getServiceName());
				form.qmbService().setValue(form.getLocalContext().getReferralService());
			}
			
			if (Boolean.TRUE.equals(form.getLocalContext().getIsInpatient()))
			{
				form.ccResponsibleHCP().setValue(domain.getResponsibleHcpForInpatient(form.getGlobalContext().Core.getPatientShort()));
			}
			//WDEV-22760
			else if (form.getLocalContext().getReferralResposibleHCPIsNotNull())
			{
				form.ccResponsibleHCP().setValue(form.getLocalContext().getReferralResposibleHCP());
			}
			
			return;
		}
		//WDEV-22733
		if (pendingEmergencyTheatre.getService() != null)
		{
			form.qmbService().newRow(pendingEmergencyTheatre.getService(), pendingEmergencyTheatre.getService().getServiceName());
			form.qmbService().setValue(pendingEmergencyTheatre.getService());
		}
		//WDEV-22733 ends here
		
		form.ccResponsibleHCP().setValue(pendingEmergencyTheatre.getResponsibleHCP());
		form.cmbUrgencyCateg().setValue(pendingEmergencyTheatre.getUrgencyCategory());
		
		if (pendingEmergencyTheatre.getPrimaryProcedure() != null)
		{
			form.qmbIntendedProcedure1().newRow(pendingEmergencyTheatre.getPrimaryProcedure(), pendingEmergencyTheatre.getPrimaryProcedure().getProcedureName());
			form.qmbIntendedProcedure1().setValue(pendingEmergencyTheatre.getPrimaryProcedure());
		}
		
		form.cmbLaterality1().setValue(pendingEmergencyTheatre.getProcLaterality());
		
		if (pendingEmergencyTheatre.getSecondaryProcedure() != null)
		{
			showSecondProcedureControls(true);
			form.qmbIntendedProcedure2().newRow(pendingEmergencyTheatre.getSecondaryProcedure(), pendingEmergencyTheatre.getSecondaryProcedure().getProcedureName());
			form.qmbIntendedProcedure2().setValue(pendingEmergencyTheatre.getSecondaryProcedure());
		}
		
		form.cmbLaterality2().setValue(pendingEmergencyTheatre.getSecondaryProcLaterality());
		
		form.txtDetails().setValue(pendingEmergencyTheatre.getProcedureDetails());
		form.intSurgeryTime().setValue(pendingEmergencyTheatre.getSurgeryTimeMins());
		form.cmbTheatreType().setValue(pendingEmergencyTheatre.getTheatreType());
		
		form.cmbCurrentLocation().setValue(pendingEmergencyTheatre.getCurrentLocationOfPatient());
		
		if (pendingEmergencyTheatre.getExpectedHospital() != null)
		{
			form.qmbExpectedHospital().newRow(pendingEmergencyTheatre.getExpectedHospital(), pendingEmergencyTheatre.getExpectedHospital().getName());
			form.qmbExpectedHospital().setValue(pendingEmergencyTheatre.getExpectedHospital());
		}
		
		if (pendingEmergencyTheatre.getExpectedWard() != null)
		{
			form.qmbExpectedWard().newRow(pendingEmergencyTheatre.getExpectedWard(), pendingEmergencyTheatre.getExpectedWard().getName());
			form.qmbExpectedWard().setValue(pendingEmergencyTheatre.getExpectedWard());
		}
		
		form.dtimExpected().setValue(pendingEmergencyTheatre.getExpectedDateTime());
	}

	private String getHospitalForWard(LocationLiteVo ward)
	{
		LocationListVo location = domain.getLocation(ward);
		
		if (location == null)
			return "";
		
		while (location.getParentLocation() != null)
		{
			
			if (LocationType.HOSP.equals(location.getParentLocation().getType()))
				return location.getParentLocation().getName();
			
			location = location.getParentLocation();
		
		}
		
		return "";
		
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onQmbExpectedWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateExpectedWards(domain.getWardsForHospital(form.qmbExpectedHospital().getValue(), value));
		
	}

	private void populateExpectedWards(LocationLiteVoCollection wards)
	{
		
		form.qmbExpectedWard().clear();
		
		if (wards == null)
			return;
		
		for (LocationLiteVo ward : wards)
		{
			form.qmbExpectedWard().newRow(ward, ward.getName());
		}
		
		if (wards.size() == 1)
		{
			form.qmbExpectedWard().setValue(wards.get(0));
		}
		else
		{
			form.qmbExpectedWard().showOpened();
		}
		
	}

	@Override
	protected void onQmbExpectedHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateExpectedHospitals(domain.listActiveHospitals(value));
		
	}
	
	private void populateExpectedHospitals(LocationLiteVoCollection hospitals)
	{
		form.qmbExpectedHospital().clear();
		form.qmbExpectedWard().clear();
		
		if (hospitals == null)
			return;
		
		for (LocationLiteVo hospital : hospitals)
		{
			form.qmbExpectedHospital().newRow(hospital, hospital.getName());
		}
		
		if (hospitals.size() == 1)
		{
			form.qmbExpectedHospital().setValue(hospitals.get(0));
		}
		else
		{
			form.qmbExpectedHospital().showOpened();
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		boolean enableOnlyHospitalAndWardControls = Boolean.TRUE.equals(form.getLocalContext().getEnableOnlyHospitalAndWardControls());
		
		form.ccResponsibleHCP().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		form.cmbUrgencyCateg().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		form.qmbService().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		form.imbAdd().setVisible(!Boolean.TRUE.equals(form.qmbIntendedProcedure2().getVisible()));
		form.imbAdd().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		form.imbRemove().setVisible(Boolean.TRUE.equals(form.qmbIntendedProcedure2().getVisible()));
		form.imbRemove().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		form.GroupProcedures().setVisible(GroupProceduresEnumeration.rdoSpecialtyHotlist, form.qmbService().getValue() != null && form.qmbService().getValue().getSpecialty() != null);
		form.GroupProcedures().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		boolean isPrimaryProcedureLateralityApplicable = form.qmbIntendedProcedure1().getValue() != null && Boolean.TRUE.equals(form.qmbIntendedProcedure1().getValue().getIsLateralityApplicable());
		boolean isSecondaryProcedureLateralityApplicable = form.qmbIntendedProcedure2().getValue() != null && Boolean.TRUE.equals(form.qmbIntendedProcedure2().getValue().getIsLateralityApplicable());
		
		form.qmbIntendedProcedure1().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		form.lblLaterality1().setVisible(isPrimaryProcedureLateralityApplicable);
		form.cmbLaterality1().setVisible(isPrimaryProcedureLateralityApplicable);
		form.cmbLaterality1().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls && isPrimaryProcedureLateralityApplicable);
		
		form.qmbIntendedProcedure2().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		form.lblLaterality2().setVisible(isSecondaryProcedureLateralityApplicable);
		form.cmbLaterality2().setVisible(isSecondaryProcedureLateralityApplicable);
		form.cmbLaterality2().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls && isSecondaryProcedureLateralityApplicable);
		
		form.txtDetails().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		form.intSurgeryTime().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		form.cmbTheatreType().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls);
		
		boolean showInpatientControls = Boolean.TRUE.equals(form.getLocalContext().getIsInpatient());
		boolean showOutpatientControls = !showInpatientControls || (form.getLocalContext().getSelectedRecord() != null && !Boolean.TRUE.equals(form.getLocalContext().getSelectedRecord().getWasInpatientWhenAddedToList()));
		
		form.pnlInpatientDetails().setVisible(showInpatientControls);
		form.lblCurrentHospital().setVisible(showInpatientControls);
		form.lblCurrentHospitalValue().setVisible(showInpatientControls);
		form.lblCurrentWard().setVisible(showInpatientControls);
		form.lblCurrentWardValue().setVisible(showInpatientControls);
		
		form.lblCurrentLocation().setVisible(showOutpatientControls);
		form.cmbCurrentLocation().setVisible(showOutpatientControls);
		form.cmbCurrentLocation().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls && showOutpatientControls);
		
		form.lblExpectedHospital().setVisible(showOutpatientControls);
		form.qmbExpectedHospital().setVisible(showOutpatientControls);
		form.qmbExpectedHospital().setEnabled(FormMode.EDIT.equals(form.getMode()) && showOutpatientControls);
		
		form.lblExpectedWard().setVisible(showOutpatientControls);
		form.qmbExpectedWard().setVisible(showOutpatientControls);
		form.qmbExpectedWard().setEnabled(FormMode.EDIT.equals(form.getMode()) && showOutpatientControls);
		
		form.lblExpectedDateTime().setVisible(showOutpatientControls);
		form.dtimExpected().setVisible(showOutpatientControls);
		form.dtimExpected().setEnabled(FormMode.EDIT.equals(form.getMode()) && !enableOnlyHospitalAndWardControls && showOutpatientControls);
		
		form.btnEdit().setVisible(!Boolean.TRUE.equals(form.getLocalContext().getDisableEditOption()) && FormMode.VIEW.equals(form.getMode()));
		
	}

	@Override
	protected void onQmbIntendedProcedure2TextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateSecondaryProcedure(getProcedures(value));
		updateControlsState();
		
	}

	private void populateSecondaryProcedure(ProcedureLiteVoCollection procedures)
	{
		form.qmbIntendedProcedure2().clear();
		form.cmbLaterality2().setValue(null);
		
		if (procedures == null)
			return;
		
		for (ProcedureLiteVo procedure : procedures)
		{
			form.qmbIntendedProcedure2().newRow(procedure, procedure.getProcedureName());
		}
		
		if (procedures.size() == 1)
		{
			form.qmbIntendedProcedure2().setValue(procedures.get(0));
			form.intSurgeryTime().setValue(null);
		}
		else
		{
			form.qmbIntendedProcedure2().showOpened();
		}
	}

	@Override
	protected void onRadioButtonGroupProceduresValueChanged() throws PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}

	private boolean save()
	{
		PendingEmergencyTheatreVo record = populateDataFromScreen(form.getLocalContext().getSelectedRecord() != null ? (PendingEmergencyTheatreVo)form.getLocalContext().getSelectedRecord().clone() : null);
		
		String[] errors = record.validate(validateUiRules());

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		//check no record has already been created
		if (record.getID_PendingEmergencyTheatre() == null && domain.getPendingEmergencyTheatreForPatient(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().RefMan.getCatsReferral()) != null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			domain.savePendingEmergencyTheatre(record);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private String[] validateUiRules()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		if(form.cmbLaterality1().getVisible() && form.cmbLaterality1().getValue() == null)
		{
			uiErrors.add("Primary Procedure Laterality is mandatory");
		}
		
		if(form.qmbIntendedProcedure2().getVisible() && form.qmbIntendedProcedure2().getValue() == null)
		{
			uiErrors.add("Secondary Procedure is mandatory");
		}
		
		if(form.cmbLaterality2().getVisible() && form.cmbLaterality2().getValue() == null)
		{
			uiErrors.add("Secondary Procedure Laterality is mandatory");
		}
		
		if(form.cmbCurrentLocation().getVisible() && form.cmbCurrentLocation().getValue() == null)
		{
			uiErrors.add("Current Location of Patient is mandatory");
		}
		
		if(form.intSurgeryTime().getValue() != null)
		{
			Integer primarySurgeryTime = 0;
			Integer secondarySurgeryTime = 0;
				
			if (form.qmbIntendedProcedure1().getValue() != null && form.qmbIntendedProcedure1().getValue().getDurationInMins() != null)
				primarySurgeryTime = form.qmbIntendedProcedure1().getValue().getDurationInMins();
			
			if (form.qmbIntendedProcedure2().getValue() != null && form.qmbIntendedProcedure2().getValue().getDurationInMins() != null)
				secondarySurgeryTime += form.qmbIntendedProcedure2().getValue().getDurationInMins();
			
			Integer highestTime = primarySurgeryTime >= secondarySurgeryTime ? primarySurgeryTime : secondarySurgeryTime;
			
			if (form.intSurgeryTime().getValue() < highestTime)
				uiErrors.add("Surgery Time cannot be less than " + highestTime + " mins");
		}
		
		if(form.qmbExpectedHospital().getVisible() && form.qmbExpectedHospital().getValue() == null)
		{
			uiErrors.add("Expected Hospital is mandatory");
		}
		
		if(form.qmbExpectedWard().getVisible() && form.qmbExpectedWard().getValue() == null)
		{
			uiErrors.add("Expected Ward is mandatory");
		}
		
		if(form.dtimExpected().isVisible() && form.dtimExpected().getValue() == null)
		{
			uiErrors.add("Expected Date Time is mandatory");
		}
		
		boolean isNewRecord = form.getLocalContext().getSelectedRecord() == null || (form.getLocalContext().getSelectedRecord() != null && form.getLocalContext().getSelectedRecord().getID_PendingEmergencyTheatre() == null);
		
		if(isNewRecord && form.dtimExpected().isVisible() && form.dtimExpected().getValue() != null && form.dtimExpected().getValue().getDate().isLessThan(new Date()))
		{
			uiErrors.add("Expected Date cannot be in the past");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private PendingEmergencyTheatreVo populateDataFromScreen(PendingEmergencyTheatreVo record)
	{
		
		if (record == null)
		{
			record = new PendingEmergencyTheatreVo();
			
			record.setPatient(form.getGlobalContext().Core.getPatientShort());
			record.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			record.setCurrentStatus(PendingEmergencyTheatreStatus.THEATRE_SLOT_TO_BE_BOOKED);
			record.setWasInpatientWhenAddedToList(Boolean.TRUE.equals(form.getLocalContext().getIsInpatient()));
		}
		
		record.setResponsibleHCP((Hcp) form.ccResponsibleHCP().getValue());
		record.setUrgencyCategory(form.cmbUrgencyCateg().getValue());
		record.setService(form.qmbService().getValue()); //WDEV-22733
		record.setPrimaryProcedure(form.qmbIntendedProcedure1().getValue());
		record.setProcLaterality(form.cmbLaterality1().getValue());
		
		boolean isEndoscopyProcedure = form.qmbIntendedProcedure1().getValue() != null && Boolean.TRUE.equals(form.qmbIntendedProcedure1().getValue().getIsEndoscopy());
		boolean isEndoscopySecondProcedure = form.qmbIntendedProcedure2().getValue() != null && Boolean.TRUE.equals(form.qmbIntendedProcedure2().getValue().getIsEndoscopy());
		
		record.setIsEndoscopyProcedure(isEndoscopyProcedure);
		record.setIsEndoscopySecondProcedure(isEndoscopySecondProcedure);
		record.setSecondaryProcedure(form.qmbIntendedProcedure2().getValue());
		record.setSecondaryProcLaterality(form.cmbLaterality2().getValue());
		record.setProcedureDetails(form.txtDetails().getValue());
		record.setSurgeryTimeMins(form.intSurgeryTime().getValue());
		record.setTheatreType(form.cmbTheatreType().getValue());
		record.setCurrentLocationOfPatient(form.cmbCurrentLocation().getValue());
		record.setExpectedHospital(form.qmbExpectedHospital().getValue());
		record.setExpectedWard(form.qmbExpectedWard().getValue());
		record.setExpectedDateTime(form.dtimExpected().getValue());
		
		return record;
	}

	@Override
	protected void onImbRemoveClick() throws PresentationLogicException
	{
		form.qmbIntendedProcedure2().clear();
		form.cmbLaterality2().setValue(null);
		form.intSurgeryTime().setValue(form.qmbIntendedProcedure1().getValue() != null  && form.qmbIntendedProcedure2().getValue() == null ? form.qmbIntendedProcedure1().getValue().getDurationInMins() : null);
		
		showSecondProcedureControls(false);
		
		updateControlsState();
	}

	private void showSecondProcedureControls(boolean show)
	{
		form.lblIntendedProcedure2().setVisible(show);
		form.qmbIntendedProcedure2().setVisible(show);
		
		form.lblLaterality2().setVisible(show);
		form.cmbLaterality2().setVisible(show);
		
	}

	@Override
	protected void onImbAddClick() throws PresentationLogicException
	{
		showSecondProcedureControls(true);
		
		updateControlsState();
		
	}

	@Override
	protected void onQmbIntendedProcedure1TextSubmited(String value) throws PresentationLogicException
	{
		populatePrimaryProcedure(getProcedures(value));
		updateControlsState();
		
	}

	private ProcedureLiteVoCollection getProcedures(String value)
	{
		if (GroupProceduresEnumeration.rdoSpecialtyHotlist.equals(form.GroupProcedures().getValue()) && form.qmbService().getValue() == null)
		{
			engine.showMessage("Please enter a Specialty");
			return null;
		}
		
		Specialty specialty = GroupProceduresEnumeration.rdoSpecialtyHotlist.equals(form.GroupProcedures().getValue()) && form.qmbService().getValue() != null ? form.qmbService().getValue().getSpecialty() : null;
		
		ProcedureLiteVoCollection procedures = null;
		
		try
		{
			procedures = domain.listProcedures(value, specialty);
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
		}
		
		return procedures;
	}

	private void populatePrimaryProcedure(ProcedureLiteVoCollection procedures)
	{
		form.qmbIntendedProcedure1().clear();
		form.cmbLaterality1().setValue(null);
		form.intSurgeryTime().setValue(null);
		
		if (procedures == null)
			return;
		
		for (ProcedureLiteVo procedure : procedures)
		{
			form.qmbIntendedProcedure1().newRow(procedure, procedure.getProcedureName());
		}
		
		if (procedures.size() == 1)
		{
			form.qmbIntendedProcedure1().setValue(procedures.get(0));
			form.intSurgeryTime().setValue(form.qmbIntendedProcedure2().getValue() == null ? procedures.get(0).getDurationInMins() : null);
		}
		else
		{
			form.qmbIntendedProcedure1().showOpened();
		}
		
	}

	@Override
	protected void onQmbIntendedProcedure2ValueChanged() throws PresentationLogicException
	{
		form.intSurgeryTime().setValue(form.qmbIntendedProcedure1().getValue() != null  && form.qmbIntendedProcedure2().getValue() == null ? form.qmbIntendedProcedure1().getValue().getDurationInMins() : null);
		updateControlsState();
		
	}

	@Override
	protected void onQmbIntendedProcedure1ValueChanged() throws PresentationLogicException
	{
	
		form.intSurgeryTime().setValue(form.qmbIntendedProcedure1().getValue() != null  && form.qmbIntendedProcedure2().getValue() == null ? form.qmbIntendedProcedure1().getValue().getDurationInMins() : null);
		updateControlsState();
		
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		if (form.qmbService().getValue() != null && form.qmbService().getValue().getSpecialty() == null)
			form.GroupProcedures().setValue(GroupProceduresEnumeration.rdoAllProcedures);
		
		//form.getLocalContext().setReferralService(form.qmbService().getValue()); //WDEV-22733
		updateControlsState();
		
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.GroupProcedures().setValue(GroupProceduresEnumeration.rdoAllProcedures);
		
		populateServices(domain.listServices(value));
		updateControlsState();
		
	}

	private void populateServices(ServiceLiteVoCollection services)
	{
		form.qmbService().clear();
		
		if (services == null)
			return;
		
		for (ServiceLiteVo service : services)
		{
			form.qmbService().newRow(service, service.getServiceName());
		}
		
		if (services.size() == 1)
		{
			form.qmbService().setValue(services.get(0));
		}
		else
		{
			form.qmbService().showOpened();
		}
		
	}
}
