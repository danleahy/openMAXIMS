//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.preassessmentoutcomedlg;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindgrdInformationRequiredReceivedColWaitingForLookup();
	abstract protected void bindcmbAnaesthetistTypeLookup();
	abstract protected void defaultcmbAnaesthetistTypeLookupValue();
	abstract protected void bindcmbActionsLookup();
	abstract protected void defaultcmbActionsLookupValue();
	abstract protected void bindcmbTypeLookup();
	abstract protected void defaultcmbTypeLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupReceivingAnticoagValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntPreoperativeNightsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDecHeightValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddWaitingForClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAddALertsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnWaitingListDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPatFitValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTxtCrossMarchCommentValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCrossMatchReqValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInformationRequiredReceivedSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdInformationRequiredReceivedGridComboBoxSelectionChanged(int column, GenForm.grdInformationRequiredReceivedRow row, Object value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupHDURequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkCriticalCareBedReqValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTxtCommentAnaesthetistValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSeniorAnaesthetistReqValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbAnaesthetistTypeValueSet(Object value);
	abstract protected void onCmbAnaesthetistTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupDaySurgMainTheatreValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntAnticipatedPostStayValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkPreoperativeOvernightValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntNoticeReqValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkShortNoticeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTxtCommentMobConsiderationsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkMobilityConsiderationsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbActionsValueSet(Object value);
	abstract protected void onCmbActionsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteDateOfLastCheckValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTypeValueSet(Object value);
	abstract protected void onCmbTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkPacemakerDifibrilatorValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupPatientDiabeticValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.GroupReceivingAnticoag().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupReceivingAnticoagValueChanged();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.intPreoperativeNights().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntPreoperativeNightsValueChanged();
			}
		});
		this.form.decHeight().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDecHeightValueChanged();
			}
		});
		this.form.btnAddWaitingFor().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddWaitingForClick();
			}
		});
		this.form.btnAddALerts().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAddALertsClick();
			}
		});
		this.form.btnWaitingListDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnWaitingListDetailsClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.GroupPatFit().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPatFitValueChanged();
			}
		});
		this.form.txtCrossMarchComment().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onTxtCrossMarchCommentValueChanged();
			}
		});
		this.form.chkCrossMatchReq().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCrossMatchReqValueChanged();
			}
		});
		this.form.grdInformationRequiredReceived().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInformationRequiredReceivedSelectionChanged();
			}
		});
		this.form.grdInformationRequiredReceived().setGridComboBoxSelectionChangedEvent(new GridComboBoxSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, Object value) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdInformationRequiredReceivedGridComboBoxSelectionChanged(column, new GenForm.grdInformationRequiredReceivedRow(row), value);
			}
		});
		this.form.GroupHDURequired().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupHDURequiredValueChanged();
			}
		});
		this.form.chkCriticalCareBedReq().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkCriticalCareBedReqValueChanged();
			}
		});
		this.form.txtCommentAnaesthetist().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onTxtCommentAnaesthetistValueChanged();
			}
		});
		this.form.chkSeniorAnaesthetistReq().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSeniorAnaesthetistReqValueChanged();
			}
		});
		this.form.cmbAnaesthetistType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAnaesthetistTypeValueSet(value);
			}
		});
		this.form.cmbAnaesthetistType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbAnaesthetistTypeValueChanged();
			}
		});
		this.form.GroupDaySurgMainTheatre().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupDaySurgMainTheatreValueChanged();
			}
		});
		this.form.intAnticipatedPostStay().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntAnticipatedPostStayValueChanged();
			}
		});
		this.form.chkPreoperativeOvernight().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPreoperativeOvernightValueChanged();
			}
		});
		this.form.intNoticeReq().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntNoticeReqValueChanged();
			}
		});
		this.form.chkShortNotice().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkShortNoticeValueChanged();
			}
		});
		this.form.txtCommentMobConsiderations().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onTxtCommentMobConsiderationsValueChanged();
			}
		});
		this.form.chkMobilityConsiderations().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkMobilityConsiderationsValueChanged();
			}
		});
		this.form.cmbActions().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbActionsValueSet(value);
			}
		});
		this.form.cmbActions().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbActionsValueChanged();
			}
		});
		this.form.dteDateOfLastCheck().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteDateOfLastCheckValueChanged();
			}
		});
		this.form.cmbType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTypeValueSet(value);
			}
		});
		this.form.cmbType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbTypeValueChanged();
			}
		});
		this.form.chkPacemakerDifibrilator().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPacemakerDifibrilatorValueChanged();
			}
		});
		this.form.GroupPatientDiabetic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupPatientDiabeticValueChanged();
			}
		});
		this.form.getContextMenus().RefMan.getInformationToBeReceivedREMOVE_INFORMATIONItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InformationToBeReceived.REMOVE_INFORMATION, sender);
			}
		});
		this.form.getContextMenus().RefMan.getInformationToBeReceivedSET_INFORMATION_AS_RECEIVEDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.RefManNamespace.InformationToBeReceived.SET_INFORMATION_AS_RECEIVED, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindgrdInformationRequiredReceivedColWaitingForLookup();
		bindcmbAnaesthetistTypeLookup();
		bindcmbActionsLookup();
		bindcmbTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindgrdInformationRequiredReceivedColWaitingForLookup();
		bindcmbAnaesthetistTypeLookup();
		bindcmbActionsLookup();
		bindcmbTypeLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbAnaesthetistTypeLookupValue();
		defaultcmbActionsLookupValue();
		defaultcmbTypeLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
