//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.preassessmentoutcomedlg;


import ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupHDURequiredEnumeration;
import ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupPatFitEnumeration;
import ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupPatientDiabeticEnumeration;
import ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupReceivingAnticoagEnumeration;
import ims.RefMan.forms.preassessmentoutcomedlg.GenForm.grdAnaestheticHazardRow;
import ims.RefMan.forms.preassessmentoutcomedlg.GenForm.grdInformationRequiredReceivedRow;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListForPreassessmentOutcVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PreAssessmentInformationVo;
import ims.RefMan.vo.PreAssessmentInformationVoCollection;
import ims.RefMan.vo.PreAssessmentOutcomeVo;
import ims.RefMan.vo.RecordingUserInformationForPreassessOutCVo;
import ims.RefMan.vo.VSMetricsForPreassesOutcVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientAlertLiteVoCollection;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.lookups.TheatreType;

import java.util.ArrayList;
import java.util.List;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer maxLenghtOfLblConsultant = 30;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null && args.length > 0  && args[0] != null && args[0] instanceof PatientElectiveListRefVo )
		{
			form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList((PatientElectiveListRefVo) args[0]));
			//form.getLocalContext().setOpenMode((Boolean) args[1]);
		}
		else 
			return;

		if( args.length > 1 && args[1] != null && args[1] instanceof Boolean)//WDEV-22780
		{
			form.getLocalContext().setIsEditOptionHidden((Boolean)args[1]);
		}

		
		
		open();
		
		
		
	}
	private String limitlblLength(String parent, Integer maxLenght)
	{
		if(parent == null && maxLenght == null)
			return null;
		
		if(parent.length()>maxLenght)
		{
			parent = parent.substring(0, maxLenght) + "...";
			return parent;
		}
		return parent;
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		if( form.getLocalContext().getPatientElectiveListIsNotNull())
		{
			populateScreenFromData();
			updateControlsState();
		}
		
	}
	
	//WDEV-20890
	private String shortenName(String value)
	{
		if(value != null && value.length() > 30)
		{
			value = value.substring(0, 30) + "...";
		}
		
		return value;
	}
	
	private void populateScreenFromData()
	{
		if( form.getLocalContext().getPatientElectiveListIsNotNull() )
		{
			form.lblCreatedByName().setValue(null);
			form.lblCreationDateDate().setValue(null);
			form.lblLastUpdatedByName().setValue(null);
			form.lblLastUpdatedDateDate().setValue(null);
			
			form.lblProcedureFirstName().setValue(null);
			form.lblLateralityFirstName().setValue(null);
			
			form.lblLateralitySecondName().setValue(null);
			form.lblProcedureSecondName().setValue(null);
			form.lblAnaestheticTypeName().setValue(null);
			
			PatientElectiveListForPreassessmentOutcVo patElectiveList =  form.getLocalContext().getPatientElectiveList();
			
			if( patElectiveList.getPreAssessmentOutcome() == null && !FormMode.EDIT.equals(form.getMode()))
				return;
			
			if( patElectiveList != null && patElectiveList.getPrimaryProcedureIsNotNull())
			{
				//WDEV-20890
				form.lblProcedureFirstName().setValue(shortenName(patElectiveList.getPrimaryProcedure().getProcedureName()));
				form.lblProcedureFirstName().setTooltip(patElectiveList.getPrimaryProcedure().getProcedureName());
			}
			if( patElectiveList != null && patElectiveList.getPrimaryProcedureIsNotNull() && Boolean.TRUE.equals(patElectiveList.getPrimaryProcedure().getIsLateralityApplicable()))
			{
				
				form.lblLateralityFirst().setVisible(Boolean.TRUE);
				form.lblLateralityFirstName().setVisible(Boolean.TRUE);
				if( patElectiveList.getProcLateralityIsNotNull() )
					form.lblLateralityFirstName().setValue(patElectiveList.getProcLaterality().getText());
				else
					form.lblLateralityFirstName().setValue(null);
					
			}
			else
			{
				form.lblLateralityFirst().setVisible(Boolean.FALSE);
				form.lblLateralityFirstName().setVisible(Boolean.FALSE);
			}
			
			if( patElectiveList!= null && patElectiveList.getSecondaryProcedureIsNotNull())
			{
				form.lblProcedureSecond().setVisible(Boolean.TRUE);
				form.lblProcedureSecondName().setVisible(Boolean.TRUE);
				form.lblProcedureSecondName().setValue(shortenName(patElectiveList.getSecondaryProcedure().getProcedureName()));//WDEV-20890
				form.lblProcedureSecondName().setTooltip(patElectiveList.getSecondaryProcedure().getProcedureName());
			}
			else
			{
				form.lblProcedureSecond().setVisible(Boolean.FALSE);
				form.lblProcedureSecondName().setVisible(Boolean.FALSE);
			}
			
			if( patElectiveList!= null && patElectiveList.getSecondaryProcedureIsNotNull() && Boolean.TRUE.equals(patElectiveList.getSecondaryProcedure().getIsLateralityApplicable()))
			{
				form.lblLateralitySecond().setVisible(Boolean.TRUE);
				form.lblLateralitySecondName().setVisible(Boolean.TRUE);
				if( patElectiveList.getSecondaryProcLateralityIsNotNull() )
					form.lblLateralitySecondName().setValue(patElectiveList.getSecondaryProcLaterality().getText());
				else
					form.lblLateralitySecondName().setValue(null);
			}
			else
			{
				form.lblLateralitySecond().setVisible(Boolean.FALSE);
				form.lblLateralitySecondName().setVisible(Boolean.FALSE);
			}
			if( patElectiveList != null && patElectiveList.getWLAnaestheticTypeIsNotNull())
			{
				form.lblAnaestheticTypeName().setValue(patElectiveList.getWLAnaestheticType().getText());
			}
			else
			{
				form.lblAnaestheticTypeName().setValue(null);
			}
			
			populateAnaestheticHazardsGrid(domain.listAlerts(form.getGlobalContext().Core.getPatientShort(), engine.getLoggedInRole()));	//wdev-20818
						
			if( form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcomeIsNotNull())
			{
				PreAssessmentOutcomeVo tempVo = form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome();
				if( tempVo.getMetricsIsNotNull() )
				{
					form.decWeight().setValue(tempVo.getMetrics().getWeightValue());
					form.decHeight().setValue(tempVo.getMetrics().getHeightValue());
					form.decBMI().setValue(tempVo.getMetrics().getBMI());
				}
				if( tempVo.getPatientDiabeticIsNotNull() && tempVo.getPatientDiabetic().equals(YesNo.YES) )
					form.GroupPatientDiabetic().setValue(GroupPatientDiabeticEnumeration.rdoYesPatientDiabetic);
				else if( tempVo.getPatientDiabeticIsNotNull() && tempVo.getPatientDiabetic().equals(YesNo.NO))
					form.GroupPatientDiabetic().setValue(GroupPatientDiabeticEnumeration.rdoNoPatientDiabetic);
				
				form.chkPacemakerDifibrilator().setValue(YesNo.YES.equals(tempVo.getPaceMakerDefib())? Boolean.TRUE:Boolean.FALSE);
				form.cmbType().setValue(tempVo.getPaceMakerType());
				form.dteDateOfLastCheck().setValue(tempVo.getDateLastCheckPacemaker());
				//form.chkPatReceivingAnticoagulant().setValue(YesNo.YES.equals(tempVo.getReceivingAntiCoag()) ? Boolean.TRUE : Boolean.FALSE);
				
				if( YesNoUnknown.YES.equals(tempVo.getReceivingAntiCoag()))
					form.GroupReceivingAnticoag().setValue(GroupReceivingAnticoagEnumeration.rdoYesAnticoag);
				else if( YesNoUnknown.NO.equals(tempVo.getReceivingAntiCoag()))
					form.GroupReceivingAnticoag().setValue(GroupReceivingAnticoagEnumeration.rdoNoAnticoag);
				else if( YesNoUnknown.UNKNOWN.equals(tempVo.getReceivingAntiCoag()))
					form.GroupReceivingAnticoag().setValue(GroupReceivingAnticoagEnumeration.rdoUnknownAnticoag);
				
				form.cmbActions().setValue(tempVo.getTherapyAction());
				form.chkMobilityConsiderations().setValue(tempVo.getMobilityConsideration());
				form.txtCommentMobConsiderations().setValue(tempVo.getMobilityComment());
				form.chkElectricBedReq().setValue(tempVo.getElectricBedNeeded());
				form.chkShortNotice().setValue(tempVo.getShortNotice());
				form.intNoticeReq().setValue(tempVo.getNoticePeriodValue());
				form.chkPreoperativeOvernight().setValue(tempVo.getPreOpOvernight());
				form.intPreoperativeNights().setValue(tempVo.getNights());
				form.intAnticipatedPostStay().setValue(tempVo.getPostOpStay());
				
				if( TheatreType.DAYCASE.equals(tempVo.getTheatreType()))
				{
					form.GroupDaySurgMainTheatre().setValue(ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.rdoDaySurgery);
				}
				else if( TheatreType.INPATIENT.equals(tempVo.getTheatreType()))
				{
					form.GroupDaySurgMainTheatre().setValue(ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.rdoInpatientTheatre);
				}
				
				form.txtAnticipatedComment().setValue(tempVo.getPostOpComments());
				form.cmbAnaesthetistType().setValue(tempVo.getAnaestheticType());
				form.chkSeniorAnaesthetistReq().setValue(tempVo.getSeniorAnaestRequired());
				form.txtCommentAnaesthetist().setValue(tempVo.getSeniorAnaestComments());
				
				//populateAnaestheticHazardsGrid(tempVo.getAnaestheticHazards());
				//populateAnaestheticHazardsGrid(domain.listAlerts(form.getGlobalContext().Core.getPatientShort(), engine.getLoggedInRole()));	//wdev-20818
				
				form.chkCriticalCareBedReq().setValue(tempVo.getCriticalCareBedRequired());
				if( Boolean.TRUE.equals(tempVo.getHduCriticalCareBed()))
					form.GroupHDURequired().setValue(GroupHDURequiredEnumeration.rdoHDU);
				else if( Boolean.TRUE.equals(tempVo.getItuCriticalCareBed()))
					form.GroupHDURequired().setValue(GroupHDURequiredEnumeration.rdoITU);
								
				populateWaitingForGrid(tempVo.getWaitingForDetails());
					
				form.chkCrossMatchReq().setValue(tempVo.getCrossmatchRequired());
				form.txtCrossMarchComment().setValue(tempVo.getCrossmatchComments());
				if( Boolean.TRUE.equals(tempVo.getFitToProceed()))
					form.GroupPatFit().setValue(GroupPatFitEnumeration.rdoYesPatFit);
				else if( Boolean.FALSE.equals(tempVo.getFitToProceed()))
					form.GroupPatFit().setValue(GroupPatFitEnumeration.rdoNoPatFit);
				
				form.txtCommentP().setValue(tempVo.getGeneralComments());
				
				if( tempVo.getRecordingInformationIsNotNull() && tempVo.getRecordingInformation().getRecordingUserIsNotNull())
				{
					if( tempVo.getRecordingInformation().getRecordingUser().getNameIsNotNull())//WDEV-22212
					{
						form.lblCreatedByName().setValue(limitlblLength(tempVo.getRecordingInformation().getRecordingUser().getName().toString(),maxLenghtOfLblConsultant));
						form.lblCreatedByName().setTooltip(null);
						form.lblCreatedByName().setTooltip(tempVo.getRecordingInformation().getRecordingUser().getName().toString());
					}
					if(tempVo.getRecordingInformation().getRecordingDateTimeIsNotNull())
						form.lblCreationDateDate().setValue(tempVo.getRecordingInformation().getRecordingDateTime().toString());
				}
				
				if( tempVo.getLastUpdatingInformationIsNotNull() && tempVo.getLastUpdatingInformation().getRecordingUserIsNotNull())
				{
					if( tempVo.getLastUpdatingInformation().getRecordingUser().getNameIsNotNull())//WDEV-22212
					{
						form.lblLastUpdatedByName().setValue(limitlblLength(tempVo.getLastUpdatingInformation().getRecordingUser().getName().toString(),maxLenghtOfLblConsultant));
						form.lblLastUpdatedByName().setTooltip(null);
						form.lblLastUpdatedByName().setTooltip(tempVo.getLastUpdatingInformation().getRecordingUser().getName().toString());
					}
					
					if(tempVo.getLastUpdatingInformation().getRecordingDateTimeIsNotNull())
						form.lblLastUpdatedDateDate().setValue(tempVo.getLastUpdatingInformation().getRecordingDateTime().toString());
				}
				
				

				
				
			}
			else
			{
				
				if( patElectiveList != null )
				{
					if( Boolean.TRUE.equals(patElectiveList.getHasPacemakerDefib()))
						form.chkPacemakerDifibrilator().setValue(patElectiveList.getHasPacemakerDefib());
					
					if( YesNoUnknown.YES.equals(patElectiveList.getWLPatientReceivingAnticoagulantTherapy()))
					{
						form.GroupReceivingAnticoag().setValue(GroupReceivingAnticoagEnumeration.rdoYesAnticoag);
					}
					else if( YesNoUnknown.NO.equals(patElectiveList.getWLPatientReceivingAnticoagulantTherapy())) 
					{
						form.GroupReceivingAnticoag().setValue(GroupReceivingAnticoagEnumeration.rdoNoAnticoag);
					}
					else if( YesNoUnknown.UNKNOWN.equals(patElectiveList.getWLPatientReceivingAnticoagulantTherapy())) 
					{
						form.GroupReceivingAnticoag().setValue(GroupReceivingAnticoagEnumeration.rdoUnknownAnticoag);
					}
					if( Boolean.TRUE.equals(patElectiveList.getWLAvailableAtShortNotice()))
						form.chkShortNotice().setValue(Boolean.TRUE);
					
					if( patElectiveList.getWLAvailableAtShortNoticePeriodIsNotNull())
						form.intNoticeReq().setValue(patElectiveList.getWLAvailableAtShortNoticePeriod());
					
					if( Boolean.TRUE.equals(patElectiveList.getWLPreOperativeOvernightStayRequired()))
					{
						form.chkPreoperativeOvernight().setValue(patElectiveList.getWLPreOperativeOvernightStayRequired());
					}
					if( patElectiveList.getWLNoOfPreOperativeNightsIsNotNull())
						form.intPreoperativeNights().setValue(patElectiveList.getWLNoOfPreOperativeNights());
					
					if( patElectiveList.getWLAnticipatedStayIsNotNull())
					{
						form.intAnticipatedPostStay().setValue(patElectiveList.getWLAnticipatedStay());
					}
					if( patElectiveList.getRequiredTheatreTypeIsNotNull() )
					{
						if( TheatreType.INPATIENT.equals(patElectiveList.getRequiredTheatreType()))
							form.GroupDaySurgMainTheatre().setValue(ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.rdoInpatientTheatre);
						else if( TheatreType.DAYCASE.equals(patElectiveList.getRequiredTheatreType()))
							form.GroupDaySurgMainTheatre().setValue(ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.rdoDaySurgery);
					}
					if( patElectiveList.getWLAnaestheticTypeIsNotNull())
					{
						form.cmbAnaesthetistType().setValue(patElectiveList.getWLAnaestheticType());
					}
					form.lblCreatedByName().setValue(null);
					form.lblCreationDateDate().setValue(null);
					form.lblLastUpdatedByName().setValue(null);
					form.lblLastUpdatedDateDate().setValue(null);
					
					
					//wdev-22267
					if( patElectiveList!= null && patElectiveList.getCriticalCareBedRequiredIsNotNull() && Boolean.TRUE.equals(patElectiveList.getCriticalCareBedRequired()))
					{
						form.chkCriticalCareBedReq().setValue(patElectiveList.getCriticalCareBedRequired());
					}
					
					
					//---end wdev-222
					
				
				}
				
			}
			
		}
		
	}
	private void populateAnaestheticHazardsGrid(PatientAlertLiteVoCollection tempColl)
	{
		form.grdAnaestheticHazard().getRows().clear();
		if( tempColl == null || tempColl.size() == 0)
			return;
		
		for(int i = 0 ; i < tempColl.size();i++)
		{
			PatientAlertLiteVo rowVo = tempColl.get(i);
			grdAnaestheticHazardRow row = form.grdAnaestheticHazard().getRows().newRow();
			if( rowVo != null && rowVo.getAlertTypeIsNotNull())
				row.setColumnAnaestheticHazards(rowVo.getAlertType().getText());
			row.setValue(rowVo);
		}
		
	}
	
	private void populateWaitingForGrid(PreAssessmentInformationVoCollection tempColl)
	{
		form.grdInformationRequiredReceived().getRows().clear();
		if( tempColl == null || tempColl.size() == 0)
			return;
		
		for(int i = 0 ; i < tempColl.size();i++)
		{
			PreAssessmentInformationVo rowVo = tempColl.get(i);
			grdInformationRequiredReceivedRow row  = form.grdInformationRequiredReceived().getRows().newRow();
			row.setColWaitingFor(rowVo.getInformationToBeReceived());
			if( Boolean.TRUE.equals(rowVo.getReceived()))
				row.setColAwaitingReceived("Received");
			else
				row.setColAwaitingReceived("Awaiting");
			
			row.setValue(rowVo);
		}
	}
	
	private void updateControlsState()
	{

		
		form.decBMI().setValue(bodyMassIndex(form.decHeight().getValue(), form.decWeight().getValue()));
		
		form.txtdummyPatientDiabetic().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode())&& !Boolean.TRUE.equals(form.getLocalContext().getIsEditOptionHidden()));//WDEV-22780
		form.lblType().setVisible(form.chkPacemakerDifibrilator().getValue());
		form.cmbType().setVisible(form.chkPacemakerDifibrilator().getValue());
		form.cmbType().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		PatientElectiveListForPreassessmentOutcVo tempVo = form.getLocalContext().getPatientElectiveList();
		/*if( tempVo != null && tempVo.getHasPacemakerDefibIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.chkPacemakerDifibrilator().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.chkPacemakerDifibrilator().setEnabled(Boolean.TRUE);
		}*/
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.chkPacemakerDifibrilator().setEnabled(Boolean.TRUE);
		
		form.lblDateOfLastCheck().setVisible(form.chkPacemakerDifibrilator().getValue());
		form.dteDateOfLastCheck().setVisible(form.chkPacemakerDifibrilator().getValue());
		form.dteDateOfLastCheck().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		
		if( GroupReceivingAnticoagEnumeration.rdoYesAnticoag.equals(form.GroupReceivingAnticoag().getValue()))
		{
			form.cmbActions().setVisible(true);
			form.lblActions().setVisible(true);
			
		}
		else
		{
			form.cmbActions().setVisible(false);
			form.lblActions().setVisible(false);
			
		}
		
			
		
		//form.lblActions().setVisible(form.chkPatReceivingAnticoagulant().getValue());
		//form.cmbActions().setVisible(form.chkPatReceivingAnticoagulant().getValue());
		form.cmbActions().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lblCommentMob().setVisible(form.chkMobilityConsiderations().getValue());
		form.txtCommentMobConsiderations().setVisible(form.chkMobilityConsiderations().getValue());
		form.txtCommentMobConsiderations().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		/*if( tempVo != null && tempVo.getWLAvailableAtShortNoticeIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.chkShortNotice().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.chkShortNotice().setEnabled(Boolean.TRUE);
		}*/
		
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.chkShortNotice().setEnabled(Boolean.TRUE);
		
		form.lblNoticeReq().setVisible(form.chkShortNotice().getValue());
		form.intNoticeReq().setVisible(form.chkShortNotice().getValue());
		
		/*if( tempVo != null && tempVo.getWLAvailableAtShortNoticePeriodIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.intNoticeReq().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.intNoticeReq().setEnabled(Boolean.TRUE);
		}*/
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.intNoticeReq().setEnabled(Boolean.TRUE);
		else
			form.intNoticeReq().setEnabled(Boolean.FALSE);
		
		form.lblNoticeReqDays().setVisible(form.chkShortNotice().getValue());
		
		/*if( tempVo != null && tempVo.getWLPreOperativeOvernightStayRequiredIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.chkPreoperativeOvernight().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.chkPreoperativeOvernight().setEnabled(Boolean.TRUE);
		}*/
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.chkPreoperativeOvernight().setEnabled(Boolean.TRUE);
		
		form.intPreoperativeNights().setVisible(form.chkPreoperativeOvernight().getValue());
		
		/*if( tempVo != null && tempVo.getWLNoOfPreOperativeNightsIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.intPreoperativeNights().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.intPreoperativeNights().setEnabled(Boolean.TRUE);
		}*/
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.intPreoperativeNights().setEnabled(Boolean.TRUE);
		else
			form.intPreoperativeNights().setEnabled(Boolean.FALSE);
		
		form.lblPreoperativeNights().setVisible(form.chkPreoperativeOvernight().getValue());
		
		/*if( tempVo != null && tempVo.getWLAnticipatedStayIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.intAnticipatedPostStay().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.intAnticipatedPostStay().setEnabled(Boolean.TRUE);
		}*/
		
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.intAnticipatedPostStay().setEnabled(Boolean.TRUE);
		
		if( form.intAnticipatedPostStay().getValue() != null && form.intAnticipatedPostStay().getValue() == 0 && !form.chkPreoperativeOvernight().getValue())
		{
			form.GroupDaySurgMainTheatre().setVisible(true);
			form.txtdummyTheatreType().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.GroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
		}
		else
		{
			form.GroupDaySurgMainTheatre().setVisible(false);
			form.GroupDaySurgMainTheatre().setValue(null);
			form.txtdummyTheatreType().setEnabled(false);
		}
		
		/*if( tempVo != null && tempVo.getWLAnaestheticTypeIsNotNull())
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.cmbAnaesthetistType().setEnabled(Boolean.FALSE);
		}
		else
		{
			if( FormMode.EDIT.equals(form.getMode()))
				form.cmbAnaesthetistType().setEnabled(Boolean.TRUE);
		}*/
		
		if( FormMode.EDIT.equals(form.getMode()))
			form.cmbAnaesthetistType().setEnabled(Boolean.TRUE);
		
		form.lblCommentAnaesthetistSen().setVisible(form.chkSeniorAnaesthetistReq().getValue());
		form.txtCommentAnaesthetist().setVisible(form.chkSeniorAnaesthetistReq().getValue());
		form.txtCommentAnaesthetist().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.txtdummyBedType().setEnabled(FormMode.EDIT.equals(form.getMode()));
		if( form.chkCriticalCareBedReq().getValue())
			form.txtdummyBedType().setEnabled(FormMode.EDIT.equals(form.getMode()));
		else
			form.txtdummyBedType().setEnabled(Boolean.FALSE);
		
		form.GroupHDURequired().setVisible(form.chkCriticalCareBedReq().getValue());
		form.GroupHDURequired().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		if( showPatientFitToProceed() == true)
		{
			form.txtdummyPatientFitToProceed().setEnabled(FormMode.EDIT.equals(form.getMode()));
			//form.lblPatientfittoproceed().setVisible(true);
			//form.GroupPatFit().setVisible(true);
			//form.GroupPatFit().setEnabled(true);
		}
		else
		{
			
			form.txtdummyPatientFitToProceed().setEnabled(false);
			//form.lblPatientfittoproceed().setVisible(false);
			//form.GroupPatFit().setVisible(false);
			//form.GroupPatFit().setEnabled(false);
		}
		form.GroupPatFit().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lblCrossMarchComment().setVisible(form.chkCrossMatchReq().getValue());
		form.txtCrossMarchComment().setVisible(form.chkCrossMatchReq().getValue());
		form.txtCrossMarchComment().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		// To DO for Patient fit to proceed? Radio Buttons 
 			
	}
	private void updateMenuContext()
	{
		form.getContextMenus().RefMan.hideAllInformationToBeReceivedMenuItems();
		form.getContextMenus().RefMan.getInformationToBeReceivedREMOVE_INFORMATIONItem().setVisible( FormMode.EDIT.equals(form.getMode()) && form.grdInformationRequiredReceived().getSelectedRow() != null );
		form.getContextMenus().RefMan.getInformationToBeReceivedSET_INFORMATION_AS_RECEIVEDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdInformationRequiredReceived().getSelectedRow() != null && form.grdInformationRequiredReceived().getSelectedRow().getValue() != null && !Boolean.TRUE.equals(form.grdInformationRequiredReceived().getSelectedRow().getValue().getReceived()));
	}
	protected void onBtnAddWaitingForClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PreAssessmentInformationVo rowVo = new PreAssessmentInformationVo();
		grdInformationRequiredReceivedRow row  = form.grdInformationRequiredReceived().getRows().newRow();
		row.setColAwaitingReceived("Awaiting");
		row.setValue(rowVo);
		updateMenuContext();
		updateControlsState();
	}
	
	protected void onBtnAddALertsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Core.AlertsForTriage);
	}
	
	protected void onBtnWaitingListDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		PatientElectiveListRefVo tempRef = form.getLocalContext().getPatientElectiveList();
		if( tempRef != null)
		{
			if( form.getLocalContext().getPatientElectiveList().getElectiveAdmissionTypeIsNotNull() && 
					(ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType())
						|| ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType())))
			{
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST,
					null,
					tempRef,
					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
					"Waiting List Details");
			}
			else if( form.getLocalContext().getPatientElectiveList().getElectiveAdmissionTypeIsNotNull() && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getPatientElectiveList().getElectiveAdmissionType()))
			{
				engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST,
					null,
					tempRef,
					ElectiveListAddLaterDlgOpenMode.READ_ONLY},
					"Planned List Details");
			}
				
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
		{
			engine.close(DialogResult.OK);
		}
	}
	private boolean save()
	{
		
		PatientElectiveListForPreassessmentOutcVo record = form.getLocalContext().getPatientElectiveList();
		record = populateDataFromScreen(record);
		
		String[] errors = record.validate(validateUIRules()); 
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		try
		{
			domain.save(record);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			
			e.printStackTrace();
			return true;
		}
		
		return true;
	}
	
	private String[] validateUIRules() 
	{
		List<String> errors = new ArrayList<String>();
		
		//if( form.GroupPatientDiabetic().getValue() == null || GroupPatientDiabeticEnumeration.None.equals(form.GroupPatientDiabetic().getValue()))
		//{
		//	errors.add("Is the patient diabetic is mandatory");
		//}
		if( form.cmbType().getVisible() && form.cmbType().getValue() == null )
		{
			errors.add("Type is mandatory");
		}
		if( form.dteDateOfLastCheck().isVisible() && form.dteDateOfLastCheck().getValue() == null )
		{
			errors.add("Date of Last Check is mandatory");
		}
		else if( form.dteDateOfLastCheck().isVisible() && form.dteDateOfLastCheck().getValue().isGreaterThan(new Date()))
		{
			errors.add("Date of Last Check should not be set in the future.");
		}
		if( form.cmbActions().getVisible() && form.cmbActions().getValue() == null)
		{
			errors.add("Actions are mandatory");
		}
		if( form.txtCommentMobConsiderations().isVisible() && form.txtCommentMobConsiderations().getValue() == null )
		{
			errors.add("Comment is mandatory");
		}
		if( form.intNoticeReq().isVisible() && form.intNoticeReq().getValue() == null )
		{
			errors.add("Notice required is mandatory");
		}
		if( form.intPreoperativeNights().isVisible() && form.intPreoperativeNights().getValue() == null )
		{
			errors.add("Nights is mandatory");
		}
		if( form.intAnticipatedPostStay().getValue() == null)
		{
			errors.add("Anticipated Post - Operative Stay is mandatory");
		}
		
		if( !form.chkPreoperativeOvernight().getValue() && form.intAnticipatedPostStay().getValue() != null && form.intAnticipatedPostStay().getValue().intValue() == 0 &&  (form.GroupDaySurgMainTheatre().getValue() == null || ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.None.equals(form.GroupDaySurgMainTheatre().getValue())))
		{
			errors.add("Theatre Type is mandatory");
		}
		if( form.cmbAnaesthetistType().getValue() == null )
		{
			errors.add("Anaesthetic Type is mandatory");
		}
		if( form.chkSeniorAnaesthetistReq().getValue() && form.txtCommentAnaesthetist().getValue() == null)
		{
			errors.add("Comment is mandatory");
		}
		if(form.chkCriticalCareBedReq().getValue() && (form.GroupHDURequired().getValue() == null || GroupHDURequiredEnumeration.None.equals(form.GroupHDURequired().getValue())))
		{
			errors.add("Bed Type is mandatory");
		}
		if( form.txtCrossMarchComment().isVisible() && form.txtCrossMarchComment().getValue() == null )
		{
			errors.add("Comment is mandatory");
		}
		/*if( showPatientFitToProceed() == true && (form.GroupPatFit().getValue() == null || GroupPatFitEnumeration.None.equals(form.GroupPatFit().getValue())))
		{
			errors.add("Patient fit to proceed is mandatory");
		}*/
		if( showPatientFitToProceed() == false )
		{
			if( form.GroupPatFit().getValue() != null &&  !GroupPatFitEnumeration.None.equals(form.GroupPatFit().getValue()))
			{
				errors.add(" All mandatory fields should be  completed and all Waiting For entries in the Information Required / Received grid should have the status of Received.");
			}
			
			
			
		}
		else
		{
			if( form.GroupPatFit().getValue() == null || GroupPatFitEnumeration.None.equals(form.GroupPatFit().getValue()))
			{
				errors.add("Patient fit to proceed is mandatory");
			}
		}
			
		
		String[] searchErrors = new String[errors.size()];
		errors.toArray(searchErrors);
		return searchErrors;		
	}
	
	private PatientElectiveListForPreassessmentOutcVo populateDataFromScreen(  PatientElectiveListForPreassessmentOutcVo patelect )
	{
		
		patelect=(PatientElectiveListForPreassessmentOutcVo)patelect.clone(); //WDEV-22544
		
		PreAssessmentOutcomeVo record = patelect.getPreAssessmentOutcome();
		if( record == null )
			record = new PreAssessmentOutcomeVo();
		
		if( record.getID_PreAssessmentOutcomeIsNotNull() )
		{
			RecordingUserInformationForPreassessOutCVo tempRecInf = record.getLastUpdatingInformation();
			if( tempRecInf == null )
				tempRecInf = new RecordingUserInformationForPreassessOutCVo();
			
			HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
			if( tempVo != null )
			{
				if( tempVo.getMosIsNotNull())
					tempRecInf.setRecordingUser(tempVo.getMos());
			}
			
			tempRecInf.setRecordingDateTime(new DateTime());
			record.setLastUpdatingInformation(tempRecInf);
			
		}
		else
		{
			RecordingUserInformationForPreassessOutCVo tempRecInf = new RecordingUserInformationForPreassessOutCVo();
			
			HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
			if( tempVo != null )
			{
				if( tempVo.getMosIsNotNull())
					tempRecInf.setRecordingUser(tempVo.getMos());
			}
			
			tempRecInf.setRecordingDateTime(new DateTime());
			record.setRecordingInformation(tempRecInf);
		}
		
				
		if((form.decHeight().getValue() == null) && (form.decWeight().getValue() == null))
		{
			record.setMetrics(null);
		}
		else
		{
			/*if ((form.decHeight().getValue() != null && form.decHeight().getValue() < 1) || (form.decWeight().getValue() != null && form.decWeight().getValue() < 1))
			{
				engine.showErrors(new String[] {"Height and Weight values cannot be less than 1."}); //WDEV-18762
				return;
			}
			else
			{*/
				
			VSMetricsForPreassesOutcVo voMetrics = record.getMetrics();
			if( voMetrics == null)
				voMetrics = new VSMetricsForPreassesOutcVo();
			
			voMetrics.setHeightValue(form.decHeight().getValue());
			voMetrics.setHeightEstimatedMeasured(Boolean.TRUE);
			voMetrics.setWeightValue(form.decWeight().getValue());
			voMetrics.setWeightEstimatedMeasured(Boolean.TRUE);
			voMetrics.setBMI(bodyMassIndex(form.decHeight().getValue(), form.decWeight().getValue()));
			voMetrics.setPatient(form.getLocalContext().getPatientElectiveList().getPatient());
				
			record.setMetrics(voMetrics);
			//}
		}
		
		record.setWaitingForDetails(getPreassessmentInformations());
		record.setDetailsOutstanding(getDetailsOutstanding());
		
		if( GroupPatientDiabeticEnumeration.rdoYesPatientDiabetic.equals(form.GroupPatientDiabetic().getValue()))
		{
			record.setPatientDiabetic(YesNo.YES);
		}
		else if( GroupPatientDiabeticEnumeration.rdoNoPatientDiabetic.equals(form.GroupPatientDiabetic().getValue()))
		{
			record.setPatientDiabetic(YesNo.NO);
		}
		else
		{
			record.setPatientDiabetic(null);
		}
		record.setPaceMakerDefib(form.chkPacemakerDifibrilator().getValue() ? YesNo.YES:YesNo.NO);
		record.setPaceMakerType(form.cmbType().getValue());
		record.setDateLastCheckPacemaker(form.dteDateOfLastCheck().getValue());
		//record.setReceivingAntiCoag(form.chkPatReceivingAnticoagulant().getValue() ? YesNo.YES:YesNo.NO);
		if( GroupReceivingAnticoagEnumeration.rdoYesAnticoag.equals(form.GroupReceivingAnticoag().getValue()))
		{
			record.setReceivingAntiCoag(YesNoUnknown.YES);
			patelect.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.YES);			//wdev-22364
			
		}
		else if( GroupReceivingAnticoagEnumeration.rdoNoAnticoag.equals(form.GroupReceivingAnticoag().getValue()))
		{
			record.setReceivingAntiCoag(YesNoUnknown.NO);
			patelect.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.NO);			//wdev-22364
			
		}
		else if( GroupReceivingAnticoagEnumeration.rdoUnknownAnticoag.equals(form.GroupReceivingAnticoag().getValue()))
		{
			record.setReceivingAntiCoag(YesNoUnknown.UNKNOWN);
			patelect.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.UNKNOWN);		//wdev-22364
			
		}
		else
		{
			record.setReceivingAntiCoag(null);
			patelect.setPatientReceivingAnticoagulantTherapy(null);						//wdev-22364
		}
		
		//------
		record.setTherapyAction(form.cmbActions().getValue());
		record.setMobilityConsideration(form.chkMobilityConsiderations().getValue());
		record.setMobilityComment(form.txtCommentMobConsiderations().getValue());
		record.setElectricBedNeeded(form.chkElectricBedReq().getValue());
		record.setShortNotice(form.chkShortNotice().getValue());
		record.setNoticePeriodValue(form.intNoticeReq().getValue());
		
		patelect.setAvailableAtShortNotice(form.chkShortNotice().getValue());			//wdev-22364
		patelect.setAvailableAtShortNoticePeriod(form.intNoticeReq().getValue());		//wdev-22364
		
		record.setPreOpOvernight(form.chkPreoperativeOvernight().getValue());
		record.setNights(form.intPreoperativeNights().getValue());
		//wdev-22364
		patelect.setPreOperativeOvernightStayRequired(form.chkPreoperativeOvernight().getValue());
		if( form.chkPreoperativeOvernight().getValue() == true)
		{
			patelect.setNoOfPreOperativeNights(form.intPreoperativeNights().getValue());
		}
		else
		{
			patelect.setNoOfPreOperativeNights(null);
		}
		//--------
		
		record.setPostOpStay(form.intAnticipatedPostStay().getValue());
		
		patelect.setAnticipatedStay(form.intAnticipatedPostStay().getValue());			//wdev-22364
		
		if( !form.chkPreoperativeOvernight().getValue() && form.intAnticipatedPostStay().getValue() != null && form.intAnticipatedPostStay().getValue().intValue() == 0 )
		{
		
    		if( ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.rdoDaySurgery.equals(form.GroupDaySurgMainTheatre().getValue()))
    		{
    			record.setTheatreType(TheatreType.DAYCASE);
    		}
    		else if(ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.rdoInpatientTheatre.equals(form.GroupDaySurgMainTheatre().getValue()))
    		{
    			record.setTheatreType(TheatreType.INPATIENT);
    		}
    		else
    		{
    			record.setTheatreType(null);
    		}
		}
		else
		{
			record.setTheatreType(TheatreType.INPATIENT);
		}
		
		if(form.chkPreoperativeOvernight().getValue() && form.intAnticipatedPostStay().getValue() != null && form.intAnticipatedPostStay().getValue().intValue() > 0)
		{
			patelect.setRequiredTheatreType(TheatreType.INPATIENT);
			patelect.setHospital(null);
		}
	
		record.setPostOpComments(form.txtAnticipatedComment().getValue());
		record.setAnaestheticType(form.cmbAnaesthetistType().getValue());
		
		patelect.setAnaestheticType(form.cmbAnaesthetistType().getValue());			//wdev-22364	
		
		record.setSeniorAnaestRequired(form.chkSeniorAnaesthetistReq().getValue());
		record.setSeniorAnaestComments(form.txtCommentAnaesthetist().getValue());
		
		record.setAnaestheticHazards(getAnaestheticHazards());
		
		record.setCriticalCareBedRequired(form.chkCriticalCareBedReq().getValue());
		record.setHduCriticalCareBed(GroupHDURequiredEnumeration.rdoHDU.equals(form.GroupHDURequired().getValue()) ? Boolean.TRUE:Boolean.FALSE);
		record.setItuCriticalCareBed(GroupHDURequiredEnumeration.rdoITU.equals(form.GroupHDURequired().getValue()) ? Boolean.TRUE:Boolean.FALSE);		
		record.setCrossmatchRequired(form.chkCrossMatchReq().getValue());
		record.setCrossmatchComments(form.txtCrossMarchComment().getValue());	
		
		//if( showPatientFitToProceed() == true)
		//{
		record.setFitToProceed(GroupPatFitEnumeration.rdoYesPatFit.equals(form.GroupPatFit().getValue())? Boolean.TRUE: (GroupPatFitEnumeration.rdoNoPatFit.equals(form.GroupPatFit().getValue()) ? Boolean.FALSE : null));
		if( GroupPatFitEnumeration.rdoYesPatFit.equals(form.GroupPatFit().getValue()) && form.getLocalContext().getPatientElectiveList()!=null && WaitingListStatus.CREATED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())) //WDEV-22544
		{
			// Elective List Status
			
			ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();
			
			electiveListStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
			
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
			electiveListStatus.setStatusDateTime(new DateTime());
			
			patelect.setElectiveListStatus(electiveListStatus);
			
			if( patelect.getElectiveListStatusHistory() == null)
				patelect.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

			patelect.getElectiveListStatusHistory().add(electiveListStatus);
			patelect.setFitForSurgery(YesNoUnknown.YES);
		}
		else if( GroupPatFitEnumeration.rdoNoPatFit.equals(form.GroupPatFit().getValue()))
		{
			patelect.setFitForSurgery(YesNoUnknown.NO);
		}
		else
		{
			
			patelect.setFitForSurgery(null);
		}
		//}
		//else
		//{
		//	record.setFitToProceed(null);
		//	patelect.setFitForSurgery(null);
		//}
		
		record.setGeneralComments(form.txtCommentP().getValue());
			
		patelect.setPreAssessmentOutcome(record);
		return patelect;
		
	}
	private PatientAlertLiteVoCollection getAnaestheticHazards()
	{
		if( form.grdAnaestheticHazard().getRows().size() == 0)
			return null;
		PatientAlertLiteVoCollection tempColl = new PatientAlertLiteVoCollection();
		for( int i = 0; i < form.grdAnaestheticHazard().getRows().size();i++)
		{
			PatientAlertLiteVo tempVo = form.grdAnaestheticHazard().getRows().get(i).getValue();
			tempColl.add(tempVo);
			
		}
		
		return tempColl;
		
	}
	private PreAssessmentInformationVoCollection getPreassessmentInformations()
	{
		 
		if( form.grdInformationRequiredReceived().getRows().size() == 0)
			return null;
		PreAssessmentInformationVoCollection tempColl = new PreAssessmentInformationVoCollection();
		for(int i = 0; i < form.grdInformationRequiredReceived().getRows().size();i++)
		{
			PreAssessmentInformationVo tempVo = form.grdInformationRequiredReceived().getRows().get(i).getValue();
			tempVo.setInformationToBeReceived(form.grdInformationRequiredReceived().getRows().get(i).getColWaitingFor());
			tempColl.add(tempVo);
			
		}
		
		return tempColl;
	}
	private boolean getDetailsOutstanding()
	{
		boolean DetailsOutstanding = false; 
		if( form.grdInformationRequiredReceived().getRows().size() == 0)
			return false;
		
		for(int i = 0; i < form.grdInformationRequiredReceived().getRows().size();i++)
		{
			PreAssessmentInformationVo tempVo = form.grdInformationRequiredReceived().getRows().get(i).getValue();
			
			if( !Boolean.TRUE.equals(tempVo.getReceived()))
			{
				DetailsOutstanding = true;
				break;
			}
		}
		return DetailsOutstanding;
	}
	private Float bodyMassIndex(Float height/*cm*/, Float weight/*kg*/)
	{
		if (height == null || weight  == null)
			return null;
		
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(weight.floatValue() / (height.floatValue() / 100.0 * height.floatValue() / 100.0)));
	}
	
	@Override
	protected void onRadioButtonGroupPatFitValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if( showPatientFitToProceed() == false )
		{
			engine.showMessage(" All mandatory fields should be  completed and all Waiting For entries in the Information Required / Received grid should have the status of Received.");
			form.GroupPatFit().setValue(null);
			
			
		}
		updateControlsState();
	}
	
	protected void onRadioButtonGroupHDURequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}
	
	protected void onRadioButtonGroupDaySurgMainTheatreValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}
	
	protected void onRadioButtonGroupPatientDiabeticValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	protected void onChkCrossMatchReqValueChanged() throws PresentationLogicException
	{
		
		if( form.chkCrossMatchReq().getValue() == false)
		{
			form.txtCrossMarchComment().setValue(null);
		}
		updateControlsState();
		
	}
	
	protected void onChkCriticalCareBedReqValueChanged() throws PresentationLogicException
	{
		if( form.chkCriticalCareBedReq().getValue() == false)
		{
			form.GroupHDURequired().setValue(null);
		}
		updateControlsState();
		
	}
	
	protected void onChkSeniorAnaesthetistReqValueChanged() throws PresentationLogicException
	{
		if( form.chkSeniorAnaesthetistReq().getValue() == false)
		{
			form.txtCommentAnaesthetist().setValue(null);
		}
		updateControlsState();
		
	}
	
	protected void onChkPreoperativeOvernightValueChanged() throws PresentationLogicException
	{
		if( form.chkPreoperativeOvernight().getValue() == false)
		{
			form.intPreoperativeNights().setValue(null);
			form.intPreoperativeNights().setValue(null);
		}
		updateControlsState();
		
	}
	
	protected void onChkMobilityConsiderationsValueChanged() throws PresentationLogicException
	{
		if( form.chkMobilityConsiderations().getValue() == false)
		{
			form.txtCommentMobConsiderations().setValue(null);
		}
		updateControlsState();
		
	}
	
	protected void onChkPatReceivingAnticoagulantValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onChkPacemakerDifibrilatorValueChanged() throws PresentationLogicException
	{
		if( form.chkPacemakerDifibrilator().getValue() == false)
		{
			form.cmbType().setValue(null);
			form.dteDateOfLastCheck().setValue(null);
		}
		
		updateControlsState();
		
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.RefMan.forms.preassessmentoutcomedlg.GenForm.ContextMenus.RefManNamespace.InformationToBeReceived.REMOVE_INFORMATION:
				form.grdInformationRequiredReceived().getRows().remove(form.grdInformationRequiredReceived().getSelectedRowIndex());
				updateMenuContext();
				updateControlsState();
			break;	
			case ims.RefMan.forms.preassessmentoutcomedlg.GenForm.ContextMenus.RefManNamespace.InformationToBeReceived.SET_INFORMATION_AS_RECEIVED:
				
				grdInformationRequiredReceivedRow row  = form.grdInformationRequiredReceived().getSelectedRow();
				PreAssessmentInformationVo rowVo = row.getValue();
				rowVo.setReceived(Boolean.TRUE);
				row.setColAwaitingReceived("Received");
				row.setValue(rowVo);
				updateControlsState();
				
			break;	
		}
		
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if( formName.equals(form.getForms().Core.AlertsForTriage) )
		{
			if(form.getGlobalContext().Core.getPatientShort() == null)
				return;
			
			populateAnaestheticHazardsGrid(domain.listAlerts(form.getGlobalContext().Core.getPatientShort(), engine.getLoggedInRole()));
		}
		
		
	}
	
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		if( form.getLocalContext().getPatientElectiveListIsNotNull() && !form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcomeIsNotNull())
		{
			populateScreenFromData();
			updateControlsState();
		}
		
	}
	
	protected void onDecHeightValueChanged() throws PresentationLogicException
	{
		form.decBMI().setValue(bodyMassIndex(form.decHeight().getValue(), form.decWeight().getValue()));
		
	}
	
	protected void onIntAnticipatedPostStayValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onChkShortNoticeValueChanged() throws PresentationLogicException
	{
		if( form.chkShortNotice().getValue() == false)
		{
			form.intNoticeReq().setValue(null);
		}
		updateControlsState();
		
	}
	
	protected void onGrdInformationRequiredReceivedSelectionChanged() throws PresentationLogicException
	{
		updateMenuContext();
		
	}
	
	protected void onGrdInformationRequiredReceivedGridComboBoxSelectionChanged(int column, grdInformationRequiredReceivedRow row, Object value) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	private boolean showPatientFitToProceed()
	{
		if( form.GroupPatientDiabetic().getValue() == null || GroupPatientDiabeticEnumeration.None.equals(form.GroupPatientDiabetic().getValue()))
		{
			return false;
		}
		if( form.chkPacemakerDifibrilator().getValue() && form.cmbType().getValue() == null )
		{
			return false;
		}
		if( form.chkPacemakerDifibrilator().getValue() && form.dteDateOfLastCheck().isVisible() && form.dteDateOfLastCheck().getValue() == null )
		{
			return false;
		}
		if( GroupReceivingAnticoagEnumeration.rdoYesAnticoag.equals(form.GroupReceivingAnticoag().getValue()) && form.cmbActions().getValue() == null)
		{
			return false;
		}
		if( form.chkMobilityConsiderations().getValue() && form.txtCommentMobConsiderations().getValue() == null )
		{
			return false;
		}
		if( form.chkShortNotice().getValue() && form.intNoticeReq().getValue() == null )
		{
			return false;
		}
		if( form.chkPreoperativeOvernight().getValue() && form.intPreoperativeNights().getValue() == null )
		{
			return false;
		}
		if( form.intAnticipatedPostStay().getValue() == null)
		{
			return false;
		}
		if( !form.chkPreoperativeOvernight().getValue() && form.intAnticipatedPostStay().getValue() != null && form.intAnticipatedPostStay().getValue().intValue() == 0 &&  (form.GroupDaySurgMainTheatre().getValue() == null || ims.RefMan.forms.preassessmentoutcomedlg.GenForm.GroupDaySurgMainTheatreEnumeration.None.equals(form.GroupDaySurgMainTheatre().getValue())))
		{
			return false;
		}
		if( form.cmbAnaesthetistType().getValue() == null )
		{
			return false;
		}
		if( form.chkSeniorAnaesthetistReq().getValue() && form.txtCommentAnaesthetist().getValue() == null)
		{
			return false;
		}
		if(form.chkCriticalCareBedReq().getValue() && (form.GroupHDURequired().getValue() == null || GroupHDURequiredEnumeration.None.equals(form.GroupHDURequired().getValue())))
		{
			return false;
		}
		if( form.chkCrossMatchReq().getValue() && form.txtCrossMarchComment().getValue() == null )
		{
			return false;
		}
		//if( form.GroupPatFit().getValue() == null || GroupPatFitEnumeration.None.equals(form.GroupPatFit().getValue()))
		//{
		//	return false;
		//}
		
		if( hasAllentriesInInformationRequiredStatusReceived() == false)
			return false;
		
		
		return true;

	}
	private boolean hasAllentriesInInformationRequiredStatusReceived() 
	{
		boolean DetailsOutstanding = true; 
		if( form.grdInformationRequiredReceived().getRows().size() == 0)
			return true;
		
		for(int i = 0; i < form.grdInformationRequiredReceived().getRows().size();i++)
		{
			PreAssessmentInformationVo tempVo = form.grdInformationRequiredReceived().getRows().get(i).getValue();
			
			if( !Boolean.TRUE.equals(tempVo.getReceived()))
			{
				DetailsOutstanding = false;
				break;
			}
		}
		return DetailsOutstanding;
	}
	
	protected void onIntPreoperativeNightsValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onTxtCrossMarchCommentValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onTxtCommentAnaesthetistValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onCmbAnaesthetistTypeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onIntNoticeReqValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onTxtCommentMobConsiderationsValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onCmbActionsValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onDteDateOfLastCheckValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	protected void onCmbTypeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	
	protected void onRadioButtonGroupReceivingAnticoagValueChanged() throws PresentationLogicException
	{
		if( !GroupReceivingAnticoagEnumeration.rdoYesAnticoag.equals( form.GroupReceivingAnticoag().getValue()))
		{
			form.cmbActions().setValue(null);
		}
		updateControlsState();
		
	}
}
