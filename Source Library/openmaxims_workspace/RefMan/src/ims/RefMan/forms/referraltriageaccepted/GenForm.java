//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referraltriageaccepted;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrActionsRequiredLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabOPAContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 104, 552, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccOPALinkedDiagnosticsForm = loader.loadComponent(134269, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 23, skipContextValidation);
				//ims.framework.Control m_ccOPALinkedDiagnosticsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(104), new Integer(552), new Integer(240), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 23), m_ccOPALinkedDiagnosticsForm, instance1 } );
				ims.framework.Control m_ccOPALinkedDiagnosticsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 23), m_ccOPALinkedDiagnosticsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOPALinkedDiagnosticsControl);
				Menu[] menus1 = m_ccOPALinkedDiagnosticsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 552, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccOPAForm = loader.loadComponent(134270, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 16, skipContextValidation);
				//ims.framework.Control m_ccOPAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(552), new Integer(104), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 16), m_ccOPAForm, instance2 } );
				ims.framework.Control m_ccOPAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 16), m_ccOPAForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccOPAControl);
				Menu[] menus2 = m_ccOPAForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
			}

			public ims.RefMan.forms.linkeddiagnosticcomponent.IComponent ccOPALinkedDiagnostics()
			{
				return (ims.RefMan.forms.linkeddiagnosticcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOPALinkedDiagnosticsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOPALinkedDiagnosticsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOPALinkedDiagnosticsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOPALinkedDiagnosticsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOPALinkedDiagnosticsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.RefMan.forms.opacomponent.IComponent ccOPA()
			{
				return (ims.RefMan.forms.opacomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccOPAValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccOPAVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccOPAVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccOPAEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccOPAEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
		}
		public static class tabLinkedOPAContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
		
			public static class GroupLinkedApptRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 320, 43, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "3", startTabIndex.intValue() + 37);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 272, 43, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "2", startTabIndex.intValue() + 36);
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 224, 43, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "1", startTabIndex.intValue() + 35);
				}
				public void setText(GroupLinkedApptEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupLinkedApptEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupLinkedApptEnumeration.None;
						case 0: return GroupLinkedApptEnumeration.rdoAppt3;
						case 1: return GroupLinkedApptEnumeration.rdoAppt2;
						case 2: return GroupLinkedApptEnumeration.rdoAppt1;
					}
					return null;
				}
				public void setValue(GroupLinkedApptEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupLinkedApptEnumeration.None.id);
				}
				public boolean isEnabled(GroupLinkedApptEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupLinkedApptEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupLinkedApptEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupLinkedApptEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupLinkedApptEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupLinkedApptEnumeration None = new GroupLinkedApptEnumeration(-1);
				public static GroupLinkedApptEnumeration rdoAppt3 = new GroupLinkedApptEnumeration(0);
				public static GroupLinkedApptEnumeration rdoAppt2 = new GroupLinkedApptEnumeration(1);
				public static GroupLinkedApptEnumeration rdoAppt1 = new GroupLinkedApptEnumeration(2);
				private GroupLinkedApptEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupLinkedApptEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 536, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Linked OPAs", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 88, 552, 256, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccLinkedOPALinkedDiagnosticsForm = loader.loadComponent(134269, appForm, startControlID * 10 + 3000, anchoringHelper7.getSize(), instance1, startTabIndex.intValue() + 39, skipContextValidation);
				//ims.framework.Control m_ccLinkedOPALinkedDiagnosticsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(0), new Integer(88), new Integer(552), new Integer(256), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 39), m_ccLinkedOPALinkedDiagnosticsForm, instance1 } );
				ims.framework.Control m_ccLinkedOPALinkedDiagnosticsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 39), m_ccLinkedOPALinkedDiagnosticsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccLinkedOPALinkedDiagnosticsControl);
				Menu[] menus1 = m_ccLinkedOPALinkedDiagnosticsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 193, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Number of Linked Appointments:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 384, 40, 144, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// RadioButton Controls
				RadioButton tmpGroupLinkedAppt = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupLinkedAppt);
				GroupLinkedApptRadioButton GroupLinkedAppt = (GroupLinkedApptRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupLinkedApptRadioButton.class, tmpGroupLinkedAppt);
				GroupLinkedAppt.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupLinkedAppt);
			}

			public Panel pnlLinkedOPA()
			{
				return (Panel)super.getControl(0);
			}
			public ims.RefMan.forms.linkeddiagnosticcomponent.IComponent ccLinkedOPALinkedDiagnostics()
			{
				return (ims.RefMan.forms.linkeddiagnosticcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccLinkedOPALinkedDiagnosticsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccLinkedOPALinkedDiagnosticsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccLinkedOPALinkedDiagnosticsVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccLinkedOPALinkedDiagnosticsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccLinkedOPALinkedDiagnosticsEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblLinkedOPANoLinkedAppt()
			{
				return (Label)super.getControl(2);
			}
			public Button btnAppointmentDetails()
			{
				return (Button)super.getControl(3);
			}
			public GroupLinkedApptRadioButton GroupLinkedAppt()
			{
				return (GroupLinkedApptRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabDirectToListContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 536, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Direct to List", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 552, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccDirectToListOPAForm = loader.loadComponent(134270, appForm, startControlID * 10 + 4000, anchoringHelper11.getSize(), instance1, startTabIndex.intValue() + 51, skipContextValidation);
				//ims.framework.Control m_ccDirectToListOPAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(0), new Integer(0), new Integer(552), new Integer(104), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 51), m_ccDirectToListOPAForm, instance1 } );
				ims.framework.Control m_ccDirectToListOPAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 51), m_ccDirectToListOPAForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDirectToListOPAControl);
				Menu[] menus1 = m_ccDirectToListOPAForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 176, 144, 248, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add Waiting List Request", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public Panel pnlDirectToList()
			{
				return (Panel)super.getControl(0);
			}
			public ims.RefMan.forms.opacomponent.IComponent ccDirectToListOPA()
			{
				return (ims.RefMan.forms.opacomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccDirectToListOPAValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccDirectToListOPAVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccDirectToListOPAVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccDirectToListOPAEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccDirectToListOPAEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Button btnAddWaitingList()
			{
				return (Button)super.getControl(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 232, 152, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOPA = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabOPAContainer m_tabOPAContainer = (tabOPAContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOPAContainer.class, m_tabOPA, factory);
			super.addContainer(m_tabOPA, m_tabOPAContainer);
			ims.framework.utils.SizeInfo m_tabOPADesignSize = new ims.framework.utils.SizeInfo(552, 368);
			ims.framework.utils.SizeInfo m_tabOPARuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabOPAContainer.setContext(form, appForm, m_tabOPA, loader, startControlID, m_tabOPADesignSize, m_tabOPARuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 232, 152, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLinkedOPA = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabLinkedOPAContainer m_tabLinkedOPAContainer = (tabLinkedOPAContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLinkedOPAContainer.class, m_tabLinkedOPA, factory);
			super.addContainer(m_tabLinkedOPA, m_tabLinkedOPAContainer);
			ims.framework.utils.SizeInfo m_tabLinkedOPADesignSize = new ims.framework.utils.SizeInfo(552, 368);
			ims.framework.utils.SizeInfo m_tabLinkedOPARuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabLinkedOPAContainer.setContext(form, appForm, m_tabLinkedOPA, loader, startControlID, m_tabLinkedOPADesignSize, m_tabLinkedOPARuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 232, 152, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDirectToList = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabDirectToListContainer m_tabDirectToListContainer = (tabDirectToListContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDirectToListContainer.class, m_tabDirectToList, factory);
			super.addContainer(m_tabDirectToList, m_tabDirectToListContainer);
			ims.framework.utils.SizeInfo m_tabDirectToListDesignSize = new ims.framework.utils.SizeInfo(552, 368);
			ims.framework.utils.SizeInfo m_tabDirectToListRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabDirectToListContainer.setContext(form, appForm, m_tabDirectToList, loader, startControlID, m_tabDirectToListDesignSize, m_tabDirectToListRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabOPA().setVisible(false);
			tabLinkedOPA().setVisible(false);
			tabDirectToList().setVisible(false);
		}
		public void showtabOPA()
		{
			tabLinkedOPA().setVisible(false);
			tabDirectToList().setVisible(false);
			tabOPA().setVisible(true);
		}
		public void showtabLinkedOPA()
		{
			tabOPA().setVisible(false);
			tabDirectToList().setVisible(false);
			tabLinkedOPA().setVisible(true);
		}
		public void showtabDirectToList()
		{
			tabOPA().setVisible(false);
			tabLinkedOPA().setVisible(false);
			tabDirectToList().setVisible(true);
		}

		public tabOPAContainer tabOPA()
		{
			return (tabOPAContainer)super.layers.get(0);
		}
		public tabLinkedOPAContainer tabLinkedOPA()
		{
			return (tabLinkedOPAContainer)super.layers.get(1);
		}
		public tabDirectToListContainer tabDirectToList()
		{
			return (tabDirectToListContainer)super.layers.get(2);
		}
	}
	public static class cmbFunctionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceFunctionLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceFunctionLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceFunctionLiteVo getValue()
		{
			return (ims.core.vo.ServiceFunctionLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceFunctionLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdCabRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdCabRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColApptDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColApptDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColApptDateOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColApptDate(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColApptDate()
		{
			return (String)super.row.get(0);
		}
		public void setColApptDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColApptDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColServiceReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColServiceReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColServiceOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColService(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColService()
		{
			return (String)super.row.get(1);
		}
		public void setColService(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColServiceTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLocationReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLocationOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColLocation(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColLocation()
		{
			return (String)super.row.get(2);
		}
		public void setColLocation(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColLocationTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColClinicReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColClinicReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColClinicOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColClinic(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColClinic()
		{
			return (String)super.row.get(3);
		}
		public void setColClinic(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColClinicTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColStatus(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColStatus()
		{
			return (String)super.row.get(4);
		}
		public void setColStatus(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.RefMan.vo.BookAppointmentForReferralTriageVo getValue()
		{
			return (ims.RefMan.vo.BookAppointmentForReferralTriageVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.BookAppointmentForReferralTriageVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdCabRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdCabRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdCabRow get(int index)
		{
			return new grdCabRow(super.collection.get(index));
		}
		public grdCabRow newRow()
		{
			return new grdCabRow(super.collection.newRow());
		}
		public grdCabRow newRow(boolean autoSelect)
		{
			return new grdCabRow(super.collection.newRow(autoSelect));
		}
		public grdCabRow newRowAt(int index)
		{
			return new grdCabRow(super.collection.newRowAt(index));
		}
		public grdCabRow newRowAt(int index, boolean autoSelect)
		{
			return new grdCabRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdCabGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection getValues()
		{
			ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection listOfValues = new ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.BookAppointmentForReferralTriageVo getValue()
		{
			return (ims.RefMan.vo.BookAppointmentForReferralTriageVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.BookAppointmentForReferralTriageVo value)
		{
			super.grid.setValue(value);
		}
		public grdCabRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdCabRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdCabRowCollection getRows()
		{
			return new grdCabRowCollection(super.grid.getRows());
		}
		public grdCabRow getRowByValue(ims.RefMan.vo.BookAppointmentForReferralTriageVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdCabRow(row);
		}
		public void setColApptDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColApptDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColServiceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColServiceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColClinicHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColClinicHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(790, 536);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 224, 296, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Actions Required", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 422, 128, 362, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccResponsibleHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper17.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccResponsibleHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(422), new Integer(128), new Integer(362), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccResponsibleHCPForm, instance1 } );
		ims.framework.Control m_ccResponsibleHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_ccResponsibleHCPForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccResponsibleHCPControl);
		Menu[] menus1 = m_ccResponsibleHCPForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrActionsRequiredLayer m_lyrActionsRequiredLayer = (lyrActionsRequiredLayer)LayerFlyweightFactory.getInstance().createLayer(lyrActionsRequiredLayer.class, this, factory);
		super.addLayer(m_lyrActionsRequiredLayer);
		m_lyrActionsRequiredLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 317, 104, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgency:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 19, 104, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 488, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 317, 130, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 19, 130, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Function:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 649, 101, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Update Urgency", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 504, 774, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(5000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 422, 102, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 79, 102, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 79, 128, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFunctionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFunctionTemp);
		cmbFunctionComboBox cmbFunction = (cmbFunctionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFunctionComboBox.class, m_cmbFunctionTemp);
		super.addComboBox(cmbFunction);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 411, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ," C&#38;B OPA and Direct To List", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 386, 208, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Change C&#38;B OPA and Direct To List", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 360, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Change C&#38;B OPA", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 168, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Linked Diagnostic(s)", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Direct To List and OPA", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Direct To List", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 176, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Linked OPAs and Diagnostic(s)", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 16, 216, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Linked OPAs", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 192, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"OPA", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 16, 240, 168, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"OPA and Linked Diagnostic(s)", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 774, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdCabTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdCabTemp);
		grdCabGrid grdCab = (grdCabGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCabGrid.class, m_grdCabTemp);
		grdCab.addStringColumn("Appt Date Time", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCab.addStringColumn("Service", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCab.addStringColumn("Location", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCab.addStringColumn("Clinic", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCab.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdCab);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccResponsibleHCP()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccResponsibleHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccResponsibleHCPVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccResponsibleHCPVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccResponsibleHCPEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccResponsibleHCPEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public lyrActionsRequiredLayer lyrActionsRequired()
	{
		return (lyrActionsRequiredLayer)super.getLayer(0);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(7);
	}
	public Label lbl2()
	{
		return (Label)super.getControl(8);
	}
	public Label lbl3()
	{
		return (Label)super.getControl(9);
	}
	public Button btnUpdateUrgency()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtUrgency()
	{
		return (TextBox)super.getControl(12);
	}
	public TextBox txtService()
	{
		return (TextBox)super.getControl(13);
	}
	public cmbFunctionComboBox cmbFunction()
	{
		return (cmbFunctionComboBox)super.getComboBox(0);
	}
	public CheckBox chkCABOPAandDirectToList()
	{
		return (CheckBox)super.getControl(15);
	}
	public CheckBox chkChangeCABOPAandDirectToList()
	{
		return (CheckBox)super.getControl(16);
	}
	public CheckBox chkChangeCABOPA()
	{
		return (CheckBox)super.getControl(17);
	}
	public CheckBox chkLinkedDiagnostics()
	{
		return (CheckBox)super.getControl(18);
	}
	public CheckBox chkDirectListAndOPA()
	{
		return (CheckBox)super.getControl(19);
	}
	public CheckBox chkDirectToList()
	{
		return (CheckBox)super.getControl(20);
	}
	public CheckBox chkLinkedOPAAndDiagnostics()
	{
		return (CheckBox)super.getControl(21);
	}
	public CheckBox chkLinkedOPA()
	{
		return (CheckBox)super.getControl(22);
	}
	public CheckBox chkOPA()
	{
		return (CheckBox)super.getControl(23);
	}
	public CheckBox chkOPAandLinkedDiagnostics()
	{
		return (CheckBox)super.getControl(24);
	}
	public grdCabGrid grdCab()
	{
		return (grdCabGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				LinkedAppointmentDetails = new LocalFormName(114124);
				LinkedAppointmentDetailsCB = new LocalFormName(114126);
			}
			public final FormName LinkedAppointmentDetails;
			public final FormName LinkedAppointmentDetailsCB;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ElectiveListAddLaterDialog = new LocalFormName(134247);
				UpdateUrgency = new LocalFormName(134275);
			}
			public final FormName ElectiveListAddLaterDialog;
			public final FormName UpdateUrgency;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CatsReferral = new ims.framework.ContextVariable("CatsReferral", prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier + "");
			cxl_ServiceTriageConfig = new ims.framework.ContextVariable("ServiceTriageConfig", prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier + "");
		}
		
		public boolean getCatsReferralIsNotNull()
		{
			return !cxl_CatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralForReferralTriageVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralForReferralTriageVo)cxl_CatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralForReferralTriageVo value)
		{
			cxl_CatsReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferral = null;
		public boolean getServiceTriageConfigIsNotNull()
		{
			return !cxl_ServiceTriageConfig.getValueIsNull(context);
		}
		public ims.core.vo.ServiceTriageActionVo getServiceTriageConfig()
		{
			return (ims.core.vo.ServiceTriageActionVo)cxl_ServiceTriageConfig.getValue(context);
		}
		public void setServiceTriageConfig(ims.core.vo.ServiceTriageActionVo value)
		{
			cxl_ServiceTriageConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceTriageConfig = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[292];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REFERRAL", "Referral");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PRIORITY", "Priority");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHETICTYPE", "AnaestheticType");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHESISRISKASSESSMENTREQUEST", "AnaesthesisRiskAssessmentRequest");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-OPERATEONANTICOAGULANTCOMMENT", "OperateOnAnticoagulantComment");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REQUIREDTHEATRETYPE", "RequiredTheatreType");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-COMMENTS", "Comments");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TCIGIVEN", "TCIGiven");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TAKESLONGERTHANSTANDARDTIME", "TakesLongerThanStandardTime");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANTICIPATEDPROCEDURELENGTH", "AnticipatedProcedureLength");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ANAESTHETISTREQUIREDINTHEATRE", "AnaesthetistRequiredInTheatre");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CAREGIVEN", "CareGiven");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PROCEDUREDTOBECARRIEDBY", "ProceduredToBeCarriedBy");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMISSIONTYPE", "AdmissionType");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMITTEDIN", "AdmittedIn");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ADMITTEDINUNITOFTIME", "AdmittedInUnitOfTime");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WASPOSSIBLEDATEGIVEN", "WasPossibleDateGiven");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DATEGIVENTOPATIENT", "DateGivenToPatient");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SECONDARYPROCLATERALITY", "SecondaryProcLaterality");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLANAESTHETICTYPE", "WLAnaestheticType");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLAVAILABLEATSHORTNOTICE", "WLAvailableAtShortNotice");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLAVAILABLEATSHORTNOTICEPERIOD", "WLAvailableAtShortNoticePeriod");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-NOOFPREOPERATIVENIGHTS", "NoOfPreOperativeNights");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLNOOFPREOPERATIVENIGHTS", "WLNoOfPreOperativeNights");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLANTICIPATEDSTAY", "WLAnticipatedStay");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CRITICALCAREBEDREQUIRED", "CriticalCareBedRequired");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-HDUBEDREQUIRED", "HDUBedRequired");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ITUBEDREQUIRED", "ITUBedRequired");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENTRECEIVINGANTICOAGULANTTHERAPY", "PatientReceivingAnticoagulantTherapy");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-WLPATIENTRECEIVINGANTICOAGULANTTHERAPY", "WLPatientReceivingAnticoagulantTherapy");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-FOLLOWPERIOPERATIVEGUIDELINES", "FollowPeriOperativeguidelines");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PERIOPNOREASONCOMMENTS", "PeriOpNoReasonComments");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-LANGUAGE", "Language");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TRANSPORT", "Transport");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[198] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SUSPECTEDGIBLEED", "SuspectedGIBleed");
			fields[199] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-POINTS", "Points");
			fields[200] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-SUITABLEFORTRAINING", "SuitableforTraining");
			fields[201] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-GENERALANAESTHETIC", "GeneralAnaesthetic");
			fields[202] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-CANNURSECARRYOUTPROCEDURE", "CanNurseCarryOutProcedure");
			fields[203] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DETAILSFORNONGAENDOPROCEDURE", "DetailsForNonGAEndoProcedure");
			fields[204] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREASSESSMENTREQUIRED", "PreAssessmentRequired");
			fields[205] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-MEDICATIONSHOULDBESTOPPEDORALBOWELPREP", "MedicationShouldBeStoppedOralBowelPrep");
			fields[206] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-DRUGINFORMATION", "DrugInformation");
			fields[207] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-HASPACEMAKERDEFIB", "HasPacemakerDefib");
			fields[208] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-RENALFUNCTIONASSESSMENT", "RenalFunctionAssessment");
			fields[209] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ARETHEREKEYTHERAPEUTIC", "AreThereKeyTherapeutic");
			fields[210] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-COGNITIVECOMMENTS", "CognitiveComments");
			fields[211] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TOBEPLANNEDIN", "ToBePlannedIn");
			fields[212] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-TOBEPLANNEDINUNIT", "ToBePlannedInUnit");
			fields[213] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PLANNEDDATE", "PlannedDate");
			fields[214] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-ISSUITABLEFORTELEPHONEASSESSMENT", "IsSuitableForTelephoneAssessment");
			fields[215] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-MULTISERVICECASE", "MultiServiceCase");
			fields[216] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-REQUIRESVETTING", "RequiresVetting");
			fields[217] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-VETTINGDATE", "VettingDate");
			fields[218] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[219] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PATIENTCATEGORY", "PatientCategory");
			fields[220] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PREASSESSMENTOUTCOME", "PreAssessmentOutcome");
			fields[221] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListAddLaterVo", "BO-1014100020-PRECOLONOSCOPYASSESSMENTREQUIRED", "PreColonoscopyAssessmentRequired");
			fields[222] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[223] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-APPOINTMENTS", "Appointments");
			fields[224] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SOURCE", "Source");
			fields[225] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SAMESERVICE", "SameService");
			fields[226] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SAMEDAY", "SameDay");
			fields[227] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-REQUESTTOSCHEDULE", "RequestToSchedule");
			fields[228] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-STARTINGWEEK", "StartingWeek");
			fields[229] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-MON", "Mon");
			fields[230] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-TUES", "Tues");
			fields[231] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-WED", "Wed");
			fields[232] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-THURS", "Thurs");
			fields[233] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-FRI", "Fri");
			fields[234] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SAT", "Sat");
			fields[235] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-SUN", "Sun");
			fields[236] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-COMMENTS", "Comments");
			fields[237] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-REFERRAL", "Referral");
			fields[238] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-NUMBEROFLINKEDRECURRINGAPPTSTOBOOK", "NumberOfLinkedRecurringApptsToBook");
			fields[239] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTFUNCTION", "FirstApptFunction");
			fields[240] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTPERIODVALUE", "FirstApptPeriodValue");
			fields[241] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTPERIODTYPE", "FirstApptPeriodType");
			fields[242] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_1STAPPTFUTUREAPPTBYDATE", "FirstApptFutureApptByDate");
			fields[243] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTFUNCTION", "SecondApptFunction");
			fields[244] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTPERIODVALUE", "SecondApptPeriodValue");
			fields[245] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTPERIODTYPE", "SecondApptPeriodType");
			fields[246] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_2NDAPPTFUTUREAPPTBYDATE", "SecondApptFutureApptByDate");
			fields[247] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTFUNCTION", "ThirdApptFunction");
			fields[248] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTPERIODVALUE", "ThirdApptPeriodValue");
			fields[249] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTPERIODTYPE", "ThirdApptPeriodType");
			fields[250] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-_3RDAPPTFUTUREAPPTBYDATE", "ThirdApptFutureApptByDate");
			fields[251] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-RECURRING", "Recurring");
			fields[252] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-ENDAFTERNOCCURRENCES", "EndAfterNOccurrences");
			fields[253] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-NOOFTIMESPERWEEK", "NoOfTimesPerWeek");
			fields[254] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-EVERYNMONTHS", "EveryNMonths");
			fields[255] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-WEEKINTHEMONTH", "WeekInTheMonth");
			fields[256] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-FUTUREAPPOINTMENTCOMMENTS", "FutureAppointmentComments");
			fields[257] = new ims.framework.ReportField(this.context, "_cv_Scheduling.LinkedOPA", "BO-1090100021-DONOTMOVEDATE", "DoNotMoveDate");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-PATIENT", "Patient");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-CONSULTATIONACTIVITYREQUIRED", "ConsultationActivityRequired");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-CONTRACT", "Contract");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-CHANGECBAPPOINTMENT", "ChangeCBAppointment");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-REDIRECTCAB", "RedirectCAB");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-CHANGECABOPAANDDIRECTTOLIST", "ChangeCABOPAandDirectToList");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-CABOPAANDDIRECTTOLIST", "CABOPAandDirectToList");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-ID", "ID_ServiceTriageAction");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-SERVICE", "Service");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-OPA", "OPA");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-DIRECTTOLIST", "DirectToList");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-DIRECTTOLISTANDOPA", "DirectToListAndOPA");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-SPR", "SPR");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-LINKEDDIAGNOSTIC", "LinkedDiagnostic");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-CONSULTANT", "Consultant");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-ASSOCIATESPECIALIST", "AssociateSpecialist");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-ANYDOCTORTOSEE", "AnyDoctorToSee");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-OTHERHCP", "OtherHCP");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-LINKEDOPASANDDIAGNOSTIC", "LinkedOPAsAndDiagnostic");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-OPAANDLINKEDDIAGOSTIC", "OPAAndLinkedDiagostic");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-LINKEDOPAS", "LinkedOPAs");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORMANUALREFERRAL", "DefaultActionForManualReferral");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORCABREFERRAL", "DefaultActionForCABReferral");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-CHANGECABOPA", "ChangeCABOPA");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-CHANGECABOPAANDDIRECTTOLIST", "ChangeCABOPAandDirectToList");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralTriageAccepted.__internal_x_context__ServiceTriageConfig_" + componentIdentifier, "BO-1005100010-CABOPAANDDIRECTTOLIST", "CABOPAandDirectToList");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
