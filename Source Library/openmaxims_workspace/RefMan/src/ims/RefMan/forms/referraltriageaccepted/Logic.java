//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referraltriageaccepted;

import ims.RefMan.forms.referraltriageaccepted.GenForm.grdCabRow;
import ims.RefMan.forms.referraltriageaccepted.GenForm.lyrActionsRequiredLayer.tabLinkedOPAContainer.GroupLinkedApptEnumeration;
import ims.RefMan.vo.BookAppointmentForReferralTriageVo;
import ims.RefMan.vo.BookAppointmentForReferralTriageVoCollection;
import ims.RefMan.vo.CatsReferralForReferralTriageVo;
import ims.RefMan.vo.CatsReferralListManualAssemblyVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralStatusVoCollection;
import ims.RefMan.vo.OutcomeAcceptedDetailsVo;
import ims.RefMan.vo.TriageOutcomeVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.lookups.AcceptedActionsRequired;
import ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral;
import ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.TriageOutcomeStatus;
import ims.configuration.AppRight;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceTriageActionVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ReferralTypeForTriageAction;
import ims.core.vo.lookups.ServiceFunction;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnAppointmentDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getCatsReferral() == null)
			return;
		
		ServiceLiteVo originalService = form.getLocalContext().getCatsReferral().getReferralDetails() != null ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null;
		ServiceFunction originalFunction = form.cmbFunction().getValue() != null ? form.cmbFunction().getValue().getFunction() : null;
		
		if(Boolean.TRUE.equals(form.getLocalContext().getCatsReferral().getIsCAB()))
		{
			engine.open(form.getForms().Scheduling.LinkedAppointmentDetailsCB, new Object[] {getNumberOfLinkedAppointmentsFromScreen(form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().getValue()), originalService, originalFunction, getCABAppointments(form.getLocalContext().getCatsReferral().getAppointments()), (FormMode.VIEW.equals(form.getMode()) ? FormMode.VIEW : null)});
		}
		else
		{
			engine.open(form.getForms().Scheduling.LinkedAppointmentDetails, new Object[] {getNumberOfLinkedAppointmentsFromScreen(form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().getValue()), originalService, originalFunction, (FormMode.VIEW.equals(form.getMode()) ? FormMode.VIEW : null)});
		}
	}
	
	private BookAppointmentForReferralTriageVoCollection getCABAppointments(BookAppointmentForReferralTriageVoCollection appointments)
	{
		if(appointments == null)
			return null;
		
		BookAppointmentForReferralTriageVoCollection appts = new BookAppointmentForReferralTriageVoCollection();
		
		for(BookAppointmentForReferralTriageVo appt : appointments)
		{
			if(appt == null || appt.getIsCABBooking() == null || Boolean.FALSE.equals(appt.getIsCABBooking()))
				continue;
			
			appts.add(appt);
		}
		
		appts.sort(new AppCreationComparator(SortOrder.DESCENDING)); //WDEV-23554
		
		return appts;
	}

	private Integer getNumberOfLinkedAppointmentsFromScreen(GroupLinkedApptEnumeration value)
	{
		if(value == null)
			return null;
		
		if(value.equals(GroupLinkedApptEnumeration.rdoAppt1))
			return 1;
		else if(value.equals(GroupLinkedApptEnumeration.rdoAppt2))
			return 2;
		else if(value.equals(GroupLinkedApptEnumeration.rdoAppt3))
			return 3;
		
		return null;
	}

	@Override
	protected void onBtnAddWaitingListClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ElectiveListAddLaterDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST, null,	form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo(), (FormMode.VIEW.equals(form.getMode()) ? ElectiveListAddLaterDlgOpenMode.READ_ONLY : ElectiveListAddLaterDlgOpenMode.EDIT), "Waiting List Details"}); 
	}
	
	@Override
	protected void onBtnUpdateUrgencyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().RefMan.UpdateUrgency);
	}
	
	@Override
	protected void onChkLinkedDiagnosticsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkLinkedDiagnostics().getValue())
		{
			form.chkOPA().setValue(null);
			form.chkLinkedOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
		
		updateControlsState();
	}
	
	@Override
	protected void onChkDirectListAndOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkDirectListAndOPA().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
		updateControlsState();
	}
	
	@Override
	protected void onChkDirectToListValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkDirectToList().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkOPA().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		updateControlsState();
	}
	
	@Override
	protected void onChkLinkedOPAAndDiagnosticsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkLinkedOPAAndDiagnostics().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPA().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
		updateControlsState();
	}
	
	@Override
	protected void onChkLinkedOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkLinkedOPA().getValue())
		{
			form.chkOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		updateControlsState();
	}
	
	@Override
	protected void onChkOPAValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkOPA().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
		updateControlsState();
	}

	
	
	@Override
	protected void onChkOPAandLinkedDiagnosticsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkOPAandLinkedDiagnostics().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPA().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
		form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
	
		updateControlsState();
	}

	
	
	public void setValue(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
		form.getLocalContext().setCatsReferral(domain.getCatsReferral(catsReferral));
		
		if(form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDetails() != null)
		{
			form.getLocalContext().setServiceTriageConfig(domain.getServiceTriageActions(form.getLocalContext().getCatsReferral().getReferralDetails().getService()));
		}
		
		populateScreenFromData(form.getLocalContext().getCatsReferral());
		updateControlsState();
	}
	
	//WDEV-23554
	public class AppCreationComparator implements Comparator<BookAppointmentForReferralTriageVo>
	{
		private int direction = 1;
		
		public AppCreationComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public AppCreationComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
		}
		
		public int compare(BookAppointmentForReferralTriageVo o1, BookAppointmentForReferralTriageVo o2)
		{	
			if(o1.getID_Booking_Appointment() == null)
				return -1*direction;
			
			if(o2.getID_Booking_Appointment() == null)
				return direction;
			
			return o1.getID_Booking_Appointment().compareTo(o2.getID_Booking_Appointment())*direction;
		}
	}
	//WDEV-23554 ends here
	
	private void populateApptGrid(BookAppointmentForReferralTriageVoCollection appts)
	{
		form.grdCab().getRows().clear();
		
		if(appts == null)
			return;
		
		for(BookAppointmentForReferralTriageVo appt : appts)
		{
			addApptRow(appt);
		}
		
		if(appts.size() > 0)
		{
			form.grdCab().setValue(appts.get(0));
		}
	}
	
	private void addApptRow(BookAppointmentForReferralTriageVo appt)
	{
		if(appt == null)
			return;
		
		grdCabRow newRow = form.grdCab().getRows().newRow();
		
		newRow.setColApptDate(appt.getAppointmentDate() != null ? appt.getAppointmentDate().toString() : null);
		newRow.setTooltipForColApptDate(newRow.getColApptDate());
		newRow.setColClinic(appt.getSession() != null ? appt.getSession().getName() : null);
		newRow.setTooltipForColClinic(newRow.getColClinic());
		
		StringBuffer location = new StringBuffer();
		
		if(appt.getSession() != null)
		{
			if(appt.getSession().getSch_Profile() != null && appt.getSession().getSch_Profile().getHospital() != null)
			{
				location.append(appt.getSession().getSch_Profile().getHospital().getName());
			}
			
			if(location.length() > 0)
			{
				location.append(" - ");
			}
			
			if(appt.getSession().getSchLocation() != null)
			{
				location.append(appt.getSession().getSchLocation().getName());
			}
		}
		
		newRow.setColLocation(location.toString());
		newRow.setTooltipForColLocation(newRow.getColLocation());
		newRow.setColService((appt.getSession() != null && appt.getSession().getService() != null) ? appt.getSession().getService().getServiceName() : null);
		newRow.setTooltipForColService(newRow.getColService());
		newRow.setColStatus((appt.getCurrentStatusRecord() != null && appt.getCurrentStatusRecord().getStatus() != null) ? appt.getCurrentStatusRecord().getStatus().getText() : null);
		newRow.setTooltipForColStatus(newRow.getColStatus());
		
		newRow.setValue(appt);
	}
	//WDEV-21047
	private void initializeActionRequired(boolean isCab) //WDEV-21421
	{
		ServiceTriageActionVo serviceTriageConfig = form.getLocalContext().getServiceTriageConfig();
		if (serviceTriageConfig == null)
			return;
		clearActionsRequired();
		if (!isCab && serviceTriageConfig.getDefaultActionForManualReferralIsNotNull())
		{
			DefaultTriageActionForManualReferral defaultActionForManualReferral = serviceTriageConfig.getDefaultActionForManualReferral();
			if(DefaultTriageActionForManualReferral.OPA.equals(defaultActionForManualReferral))
			{	
				form.chkOPA().setValue(Boolean.TRUE);
				form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
			}
			else if(DefaultTriageActionForManualReferral.LINKED_OPAS.equals(defaultActionForManualReferral))
				form.chkLinkedOPA().setValue(Boolean.TRUE);
		
			else if(DefaultTriageActionForManualReferral.OPA_AND_LINKED_DIAGNOSTIC.equals(defaultActionForManualReferral))
			{
				form.chkOPAandLinkedDiagnostics().setValue(Boolean.TRUE);
				form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
				form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
			}
			else if(DefaultTriageActionForManualReferral.DIRECT_TO_LIST.equals(defaultActionForManualReferral))
				form.chkDirectToList().setValue(Boolean.TRUE);
			
			else if(DefaultTriageActionForManualReferral.DIRECT_TO_LIST_AND_OPA.equals(defaultActionForManualReferral))
			{
				form.chkDirectListAndOPA().setValue(Boolean.TRUE);
				form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
			}
		}
		else if (isCab && serviceTriageConfig.getDefaultActionForCABReferralIsNotNull())
		{
			DefaultTriageActionForCABReferral defaultActionForCABReferral = serviceTriageConfig.getDefaultActionForCABReferral();
			if(DefaultTriageActionForCABReferral.LINKED_OPAS.equals(defaultActionForCABReferral))
				form.chkLinkedOPA().setValue(Boolean.TRUE);
			
			else if(DefaultTriageActionForCABReferral.LINKED_DIAGNOSTICS.equals(defaultActionForCABReferral))
			{
				form.chkLinkedDiagnostics().setValue(Boolean.TRUE);
				form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
			}
			else if(DefaultTriageActionForCABReferral.LINKED_OPAS_AND_DIAGNOSTICS.equals(defaultActionForCABReferral))
			{
				form.chkLinkedOPAAndDiagnostics().setValue(Boolean.TRUE);
				form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
			}
			else if(DefaultTriageActionForCABReferral.CHANGE_CAB_OPA.equals(defaultActionForCABReferral))
			{
				form.chkChangeCABOPA().setValue(true);
				form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
			}
			else if(DefaultTriageActionForCABReferral.CHANGE_CAB_OPA_AND_DIRECT_TO_LIST.equals(defaultActionForCABReferral)) //WDEV-23576
			{
				form.chkChangeCABOPAandDirectToList().setValue(true);
				form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
			}
			else if(DefaultTriageActionForCABReferral.CAB_OPA_AND_DIRECT_TO_LIST.equals(defaultActionForCABReferral)) //WDEV-23576
			{
				form.chkCABOPAandDirectToList().setValue(true);
			}
		}
	}
	
	
	private void populateScreenFromData(CatsReferralForReferralTriageVo cats)
	{
		clear();
		
		if (cats == null)
			return;
		
		boolean isCABReferral = Boolean.TRUE.equals(cats.getIsCAB());
		populateApptGrid(getCABAppointments(cats.getAppointments()));
		
		form.txtService().setValue((cats.getReferralDetails() != null && cats.getReferralDetails().getService() != null) ? cats.getReferralDetails().getService().getServiceName() : null);
		
		if(cats.getReferralDetails() != null && cats.getReferralDetails().getService() != null)
		{
			bindFunctions(cats.getReferralDetails().getService());
			form.cmbFunction().setValue(cats.getReferralDetails() != null ? cats.getReferralDetails().getFunction() : null);
		}
		
		form.txtUrgency().setValue(cats.getUrgency() != null ? cats.getUrgency().getText() : null);
		
		if(FormMode.EDIT.equals(form.getMode()))
		{	
			initializeActionRequired(isCABReferral);//WDEV-21047 //WDEV-21421
		}
		
		form.ccResponsibleHCP().initializeResponsibleHcp(MosType.HCP, true, cats.getReferralDetails() != null? cats.getReferralDetails().getService() : null, (cats.getReferralDetails() != null && cats.getReferralDetails().getFunction() != null) ? cats.getReferralDetails().getFunction().getFunction() : null);
		form.ccResponsibleHCP().setValue(cats.getReferralDetails() != null ? cats.getReferralDetails().getConsultant() : null);
		
		if(cats.getTriageOutcome() != null && cats.getTriageOutcome().getAcceptedDetails() != null)
		{
			form.chkOPA().setValue(AcceptedActionsRequired.OPA.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkLinkedOPA().setValue(AcceptedActionsRequired.LINKED_OPA.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkOPAandLinkedDiagnostics().setValue(AcceptedActionsRequired.OPA_AND_LINKED_DIAGNOSTICS.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkDirectToList().setValue(AcceptedActionsRequired.DIRECT_TO_LIST.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkDirectListAndOPA().setValue(AcceptedActionsRequired.DIRECT_TO_LIST_AND_OPA.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkLinkedOPAAndDiagnostics().setValue(AcceptedActionsRequired.LINKED_OPA_AND_DIAGNOSTICS.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkLinkedDiagnostics().setValue(AcceptedActionsRequired.LINKED_DIAGNOSTICS.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkChangeCABOPA().setValue(AcceptedActionsRequired.CHANGE_CAB_OPA.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			
			//WDEV-23576
			form.chkCABOPAandDirectToList().setValue(AcceptedActionsRequired.CAB_OPA_AND_DIRECT_TO_LIST.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			form.chkChangeCABOPAandDirectToList().setValue(AcceptedActionsRequired.CHANGE_CAB_OPA_AND_DIRECT_TO_LIST.equals(cats.getTriageOutcome().getAcceptedDetails().getActionRequired()));
			
			if(form.chkOPA().getValue())
			{
				form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
				form.lyrActionsRequired().tabOPA().ccOPA().setValue(cats.getTriageOutcome().getAcceptedDetails().getOPA());
			}
			else if(form.chkLinkedOPA().getValue())
			{
				form.getGlobalContext().Scheduling.setLinkedOPA(cats.getTriageOutcome().getAcceptedDetails().getLinkedOPA());
				form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setValue(getNumberOfLinkedAppointmentsFromData(cats.getTriageOutcome().getAcceptedDetails().getLinkedOPA() != null ? cats.getTriageOutcome().getAcceptedDetails().getLinkedOPA().getNumberOfLinkedRecurringApptsToBook() : null));
			}
			else if(form.chkOPAandLinkedDiagnostics().getValue())
			{
				form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
				form.lyrActionsRequired().tabOPA().ccOPA().setValue(cats.getTriageOutcome().getAcceptedDetails().getOPA());
				
				form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
				form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().setValue(cats.getTriageOutcome().getAcceptedDetails().getLinkedDiagnostics());
			}
			else if(form.chkDirectToList().getValue())
			{
				form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(cats.getTriageOutcome().getAcceptedDetails().getWaitingList());
			}
			else if(form.chkDirectListAndOPA().getValue())
			{
				form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
				form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().setValue(cats.getTriageOutcome().getAcceptedDetails().getOPA());
				
				form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(cats.getTriageOutcome().getAcceptedDetails().getWaitingList());
			}
			else if(form.chkLinkedOPAAndDiagnostics().getValue())
			{
				form.getGlobalContext().Scheduling.setLinkedOPA(cats.getTriageOutcome().getAcceptedDetails().getLinkedOPA());
				form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setValue(getNumberOfLinkedAppointmentsFromData(cats.getTriageOutcome().getAcceptedDetails().getLinkedOPA() != null ? cats.getTriageOutcome().getAcceptedDetails().getLinkedOPA().getNumberOfLinkedRecurringApptsToBook() : null));
				
				form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
				form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().setValue(cats.getTriageOutcome().getAcceptedDetails().getLinkedDiagnostics());
			}
			else if(form.chkLinkedDiagnostics().getValue())
			{
				form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().initialise(form.getLocalContext().getCatsReferral(), (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDocuments() != null) ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null, form.getLocalContext().getCatsReferral().getIsCAB(), false);
				form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().setValue(cats.getTriageOutcome().getAcceptedDetails().getLinkedDiagnostics());
			}
			else if(form.chkChangeCABOPA().getValue())
			{
				form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
				form.lyrActionsRequired().tabOPA().ccOPA().setValue(cats.getTriageOutcome().getAcceptedDetails().getOPA());
			}
			else if(form.chkCABOPAandDirectToList().getValue()) //WDEV-23576
			{
				form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(cats.getTriageOutcome().getAcceptedDetails().getWaitingList());
			}
			else if(form.chkChangeCABOPAandDirectToList().getValue()) //WDEV-23576
			{
				form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
				form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().setValue(cats.getTriageOutcome().getAcceptedDetails().getOPA());
				
				form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(cats.getTriageOutcome().getAcceptedDetails().getWaitingList());
			}
			
			form.txtComments().setValue(cats.getTriageOutcome().getAcceptedDetails().getComments());
		}
	}

	private GroupLinkedApptEnumeration getNumberOfLinkedAppointmentsFromData(Integer numOfLinkedAppts)
	{
		if(numOfLinkedAppts == null)
			return null;
		
		if(numOfLinkedAppts == 1)
			return GroupLinkedApptEnumeration.rdoAppt1;
		else if(numOfLinkedAppts == 2)
			return GroupLinkedApptEnumeration.rdoAppt2;
		else if(numOfLinkedAppts == 3)
			return GroupLinkedApptEnumeration.rdoAppt3;
		
		return null;
	}

	private void bindFunctions(ServiceLiteVo service)
	{
		form.cmbFunction().clear();
		
		if(service == null || service.getID_Service() == null)
			return;
		
		ServiceFunctionLiteVoCollection functions = domain.listServiceFunctions(service);
		
		if(functions == null)
			return;
		
		for(ServiceFunctionLiteVo func : functions)
		{
			if(func == null)
				return;
			
			form.cmbFunction().newRow(func, func.getFunction().getText());
		}
	}
	
	private void clear()
	{
		form.grdCab().getRows().clear();
		form.txtService().setValue(null);
		form.cmbFunction().setValue(null);
		form.txtUrgency().setValue(null);
		form.ccResponsibleHCP().setValue(null);
		
		form.chkOPA().setValue(null);
		form.chkLinkedOPA().setValue(null);
		form.chkOPAandLinkedDiagnostics().setValue(null);
		form.chkDirectToList().setValue(null);
		form.chkDirectListAndOPA().setValue(null);
		form.chkLinkedOPAAndDiagnostics().setValue(null);
		form.chkLinkedDiagnostics().setValue(null);
		form.chkChangeCABOPA().setValue(null);
		
		//WDEV-23576
		form.chkCABOPAandDirectToList().setValue(null);
		form.chkChangeCABOPAandDirectToList().setValue(null);
		
		clearActionsRequired();
		
		form.txtComments().setValue(null);
	}
	
	private void clearActionsRequired()
	{
		form.lyrActionsRequired().tabOPA().ccOPA().setValue(null);
		form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().setValue(null);
		
		form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().setValue(null);
		form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setValue(null);
		form.getGlobalContext().Scheduling.setLinkedOPA(null);
		form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(null);
		
		form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().setValue(null);
	}

	private void updateControlsState()
	{
		boolean isCab = form.getLocalContext().getCatsReferral() != null && Boolean.TRUE.equals(form.getLocalContext().getCatsReferral().getIsCAB());
		
		form.grdCab().setVisible(isCab);
		form.grdCab().setReadOnly(true);
		
		form.chkOPA().setVisible(!isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.MANUAL.equals(form.getLocalContext().getServiceTriageConfig().getOPA())));
		form.chkLinkedOPA().setVisible(form.getLocalContext().getServiceTriageConfig() != null && (((ReferralTypeForTriageAction.MANUAL.equals(form.getLocalContext().getServiceTriageConfig().getLinkedOPAs()) || ReferralTypeForTriageAction.BOTH.equals(form.getLocalContext().getServiceTriageConfig().getLinkedOPAs())) && !isCab) || ((ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(form.getLocalContext().getServiceTriageConfig().getLinkedOPAs()) || ReferralTypeForTriageAction.BOTH.equals(form.getLocalContext().getServiceTriageConfig().getLinkedOPAs())) && isCab)));
		form.chkOPAandLinkedDiagnostics().setVisible(!isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.MANUAL.equals(form.getLocalContext().getServiceTriageConfig().getOPAAndLinkedDiagostic())));
		form.chkDirectToList().setVisible(!isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.MANUAL.equals(form.getLocalContext().getServiceTriageConfig().getDirectToList())));
		form.chkDirectListAndOPA().setVisible(!isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.MANUAL.equals(form.getLocalContext().getServiceTriageConfig().getDirectToListAndOPA())));
		form.chkLinkedOPAAndDiagnostics().setVisible(isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(form.getLocalContext().getServiceTriageConfig().getLinkedOPAsAndDiagnostic())));
		form.chkLinkedDiagnostics().setVisible(isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(form.getLocalContext().getServiceTriageConfig().getLinkedDiagnostic())));
		form.chkChangeCABOPA().setVisible(isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(form.getLocalContext().getServiceTriageConfig().getChangeCABOPA())));
		
		//WDEV-23576
		form.chkCABOPAandDirectToList().setVisible(isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(form.getLocalContext().getServiceTriageConfig().getCABOPAandDirectToList())));
		form.chkChangeCABOPAandDirectToList().setVisible(isCab && form.getLocalContext().getServiceTriageConfig() != null && (ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(form.getLocalContext().getServiceTriageConfig().getChangeCABOPAandDirectToList())));
		
		form.lyrActionsRequired().tabOPA().ccOPA().setVisible(form.chkOPA().getValue() || form.chkOPAandLinkedDiagnostics().getValue() || form.chkChangeCABOPA().getValue()); 
		form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().setVisible(form.chkOPAandLinkedDiagnostics().getValue());
		form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().setVisible(form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedDiagnostics().getValue());
		form.lyrActionsRequired().tabLinkedOPA().pnlLinkedOPA().setVisible(form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedOPA().getValue());
		form.lyrActionsRequired().tabLinkedOPA().lblLinkedOPANoLinkedAppt().setVisible(form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedOPA().getValue());
		form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setVisible(GroupLinkedApptEnumeration.rdoAppt3, form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedOPA().getValue());
		form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setVisible(GroupLinkedApptEnumeration.rdoAppt2, form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedOPA().getValue());
		form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setVisible(GroupLinkedApptEnumeration.rdoAppt1, (form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedOPA().getValue()) && isCab);
		form.lyrActionsRequired().tabLinkedOPA().btnAppointmentDetails().setVisible((form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedOPA().getValue()) && !GroupLinkedApptEnumeration.None.equals(form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().getValue()));
		form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().setVisible(form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedDiagnostics().getValue());
		form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().setVisible(form.chkDirectListAndOPA().getValue() || form.chkChangeCABOPAandDirectToList().getValue()); //WDEV-23576
		form.lyrActionsRequired().tabDirectToList().pnlDirectToList().setVisible(form.chkDirectListAndOPA().getValue() || form.chkDirectToList().getValue() || form.chkCABOPAandDirectToList().getValue() || form.chkChangeCABOPAandDirectToList().getValue() ); //WDEV-23576
		form.lyrActionsRequired().tabDirectToList().btnAddWaitingList().setVisible(form.chkDirectListAndOPA().getValue() || form.chkDirectToList().getValue() || form.chkCABOPAandDirectToList().getValue() || form.chkChangeCABOPAandDirectToList().getValue() ); //WDEV-23576
		
		if(form.chkOPA().getValue() || form.chkOPAandLinkedDiagnostics().getValue() || form.chkChangeCABOPA().getValue() ) 
		{
			form.lyrActionsRequired().showtabOPA();
		}
		else if(form.chkLinkedOPA().getValue() || form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedDiagnostics().getValue())
		{
			form.lyrActionsRequired().showtabLinkedOPA();
		}
		else if(form.chkDirectToList().getValue() || form.chkDirectListAndOPA().getValue() || form.chkCABOPAandDirectToList().getValue() || form.chkChangeCABOPAandDirectToList().getValue())//WDEV-23576
		{
			form.lyrActionsRequired().showtabDirectToList();
		}
		
		form.lyrActionsRequired().tabOPA().ccOPA().setMode(form.getMode());
		form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().setMode(form.getMode());
		form.btnUpdateUrgency().setVisible(engine.hasRight(AppRight.CAN_UPDATE_REFERRAL_URGENCY));
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.chkOPA().setEnabled(false);
			form.chkLinkedOPA().setEnabled(false);
			form.chkOPAandLinkedDiagnostics().setEnabled(false);
			form.chkDirectToList().setEnabled(false);
			form.chkDirectListAndOPA().setEnabled(false);
			form.chkLinkedOPAAndDiagnostics().setEnabled(false);
			form.chkLinkedDiagnostics().setEnabled(false);
			form.chkChangeCABOPA().setEnabled(false);
			
			//WDEV-23576
			form.chkCABOPAandDirectToList().setEnabled(false);
			form.chkChangeCABOPAandDirectToList().setEnabled(false); 
			
			form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().setReadOnly(true);
			
			form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setEnabled(false);
			
			form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().setReadOnly(true);
			
			form.btnUpdateUrgency().setVisible(false);
		}
		//WDEV-21198
		form.lbl3().setVisible(form.cmbFunction().getValues().size()>0);
		form.cmbFunction().setVisible((form.cmbFunction().getValues().size()>0));
		form.cmbFunction().setEnabled(FormMode.EDIT.equals(form.getMode()));
		//end WDEV-21198
	}

	public void initialise()
	{
		
	}

	@Override
	protected void onCmbFunctionValueChanged() throws PresentationLogicException
	{
		form.ccResponsibleHCP().initializeResponsibleHcp(MosType.HCP, true, (form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getReferralDetails() != null ? form.getLocalContext().getCatsReferral().getReferralDetails().getService() : null), form.cmbFunction().getValue() != null ? form.cmbFunction().getValue().getFunction() : null);
		form.ccResponsibleHCP().setValue(null);
	}

	public CatsReferralForReferralTriageVo getValue()
	{
		return populateDataFromScreen(form.getLocalContext().getCatsReferral());
	}

	private CatsReferralForReferralTriageVo populateDataFromScreen(CatsReferralForReferralTriageVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getReferralDetails() == null)
			return null;
		
		catsReferral = (CatsReferralForReferralTriageVo) catsReferral.clone();
		
		catsReferral.getReferralDetails().setFunction(form.cmbFunction().getValue());
		catsReferral.getReferralDetails().setConsultant((HcpLiteVo) form.ccResponsibleHCP().getValue());
		
		MemberOfStaffRefVo mosUser = null;
		Object user = domain.getMosUser();
		
		if(user instanceof MemberOfStaffRefVo)
		{
			mosUser = (MemberOfStaffRefVo) user;
		}
		
		if(catsReferral.getTriageOutcome() == null)
		{
			catsReferral.setTriageOutcome(new TriageOutcomeVo());
			catsReferral.getTriageOutcome().setRecordingDateTime(new DateTime());
			catsReferral.getTriageOutcome().setRecordingUser(mosUser);
		}
		
		catsReferral.getTriageOutcome().setTriageOutcomeStatus(TriageOutcomeStatus.ACCEPT);
		catsReferral.getTriageOutcome().setAcceptedDetails(populateAcceptedDetailsFromScreen(catsReferral.getTriageOutcome().getAcceptedDetails()));
		
		CatsReferralStatusVo acceptedStatus = createAcceptedStatus(mosUser);
		
		catsReferral.setCurrentStatus(acceptedStatus);
		
		if(catsReferral.getStatusHistory() == null)
			catsReferral.setStatusHistory(new CatsReferralStatusVoCollection());
		
		catsReferral.getStatusHistory().add(acceptedStatus);
		
		if (Boolean.TRUE.equals(catsReferral.getIsCAB()))
			catsReferral.setIsAcceptedOnCAB(false);
		
		catsReferral.setTriageDateTime(new DateTime());
		
		//WDEV-23558
		boolean atLeastOneActionRequiedIsSelected = form.chkOPA().getValue() || form.chkLinkedOPA().getValue() || form.chkOPAandLinkedDiagnostics().getValue() || form.chkDirectListAndOPA().getValue() || form.chkLinkedOPAAndDiagnostics().getValue() || form.chkLinkedDiagnostics().getValue() || form.chkChangeCABOPA().getValue() || form.chkChangeCABOPAandDirectToList().getValue();
		if (!Boolean.TRUE.equals(catsReferral.getIsCAB()) || (Boolean.TRUE.equals(catsReferral.getIsCAB()) && atLeastOneActionRequiedIsSelected))
		{
			catsReferral.setConsultationActivityRequired(atLeastOneActionRequiedIsSelected);
		}
			
		catsReferral.setChangeCBAppointment(form.chkChangeCABOPA().getValue());//WDEV-23000
		
		//WDEV-23576
		catsReferral.setChangeCABOPAandDirectToList(form.chkChangeCABOPAandDirectToList().getValue());
		catsReferral.setCABOPAandDirectToList(form.chkCABOPAandDirectToList().getValue());
		
		return catsReferral;
	}

	private CatsReferralStatusVo createAcceptedStatus(MemberOfStaffRefVo mosUser)
	{
		CatsReferralStatusVo currentStatus = new CatsReferralStatusVo(); 		
		
		currentStatus.setReferralStatus(ReferralApptStatus.REFERRAL_ACCEPTED);
		currentStatus.setAuthoringUser(mosUser);
		currentStatus.setStatusDateTime(new DateTime());
		
		return currentStatus;
	}

	private OutcomeAcceptedDetailsVo populateAcceptedDetailsFromScreen(OutcomeAcceptedDetailsVo acceptedDetails)
	{
		if(acceptedDetails == null)
			acceptedDetails = new OutcomeAcceptedDetailsVo();
		
		acceptedDetails.setActionRequired(getActionRequired());
		
		if(form.chkOPA().getValue())
		{
			acceptedDetails.setOPA(form.lyrActionsRequired().tabOPA().ccOPA().getValue());
		}
		else if(form.chkLinkedOPA().getValue())
		{
			acceptedDetails.setLinkedOPA(form.getGlobalContext().Scheduling.getLinkedOPA());
		}
		else if(form.chkOPAandLinkedDiagnostics().getValue())
		{
			acceptedDetails.setOPA(form.lyrActionsRequired().tabOPA().ccOPA().getValue());
			acceptedDetails.setLinkedDiagnostics(form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().getValue());
		}
		else if(form.chkDirectToList().getValue())
		{
			acceptedDetails.setWaitingList(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo());
		}
		else if(form.chkDirectListAndOPA().getValue())
		{
			acceptedDetails.setWaitingList(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo());
			acceptedDetails.setOPA(form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().getValue());
		}
		else if(form.chkLinkedOPAAndDiagnostics().getValue())
		{
			acceptedDetails.setLinkedOPA(form.getGlobalContext().Scheduling.getLinkedOPA());
			acceptedDetails.setLinkedDiagnostics(form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().getValue());
		}
		else if(form.chkLinkedDiagnostics().getValue())
		{
			acceptedDetails.setLinkedDiagnostics(form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().getValue());
		}
		else if(form.chkChangeCABOPA().getValue()) 
		{
			acceptedDetails.setOPA(form.lyrActionsRequired().tabOPA().ccOPA().getValue());
		}
		else if(form.chkCABOPAandDirectToList().getValue()) //WDEV-23576
		{
			acceptedDetails.setWaitingList(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo());
		}
		else if(form.chkChangeCABOPAandDirectToList().getValue()) //WDEV-23576
		{
			acceptedDetails.setWaitingList(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo());
			acceptedDetails.setOPA(form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().getValue());
		}
		
		acceptedDetails.setComments(form.txtComments().getValue());
		
		return acceptedDetails.getActionRequired() != null ? acceptedDetails : null;
	}

	private AcceptedActionsRequired getActionRequired()
	{
		if(form.chkOPA().getValue())
			return AcceptedActionsRequired.OPA;
		else if(form.chkLinkedOPA().getValue())
			return AcceptedActionsRequired.LINKED_OPA;
		else if(form.chkOPAandLinkedDiagnostics().getValue())
			return AcceptedActionsRequired.OPA_AND_LINKED_DIAGNOSTICS;
		else if(form.chkDirectToList().getValue())
			return AcceptedActionsRequired.DIRECT_TO_LIST;
		else if(form.chkDirectListAndOPA().getValue())
			return AcceptedActionsRequired.DIRECT_TO_LIST_AND_OPA;
		else if(form.chkLinkedOPAAndDiagnostics().getValue())
			return AcceptedActionsRequired.LINKED_OPA_AND_DIAGNOSTICS;
		else if(form.chkLinkedDiagnostics().getValue())
			return AcceptedActionsRequired.LINKED_DIAGNOSTICS;
		else if(form.chkChangeCABOPA().getValue())
			return AcceptedActionsRequired.CHANGE_CAB_OPA;
		//WDEV-23576
		else if(form.chkChangeCABOPAandDirectToList().getValue())
			return AcceptedActionsRequired.CHANGE_CAB_OPA_AND_DIRECT_TO_LIST;
		else if(form.chkCABOPAandDirectToList().getValue())
			return AcceptedActionsRequired.CAB_OPA_AND_DIRECT_TO_LIST;
		return null;
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(form.getForms().Scheduling.LinkedAppointmentDetails.equals(formName) || form.getForms().Scheduling.LinkedAppointmentDetailsCB.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				if(form.getGlobalContext().Scheduling.getLinkedOPA() != null)
				{
					form.lyrActionsRequired().tabLinkedOPA().GroupLinkedAppt().setValue(getNumberOfLinkedAppointmentsFromData(form.getGlobalContext().Scheduling.getLinkedOPA().getNumberOfLinkedRecurringApptsToBook()));
				}
			}
		}
		else if(form.getForms().RefMan.UpdateUrgency.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				form.getLocalContext().setCatsReferral(domain.getCatsReferral(form.getLocalContext().getCatsReferral()));
				form.txtUrgency().setValue(form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getUrgency() != null ? form.getLocalContext().getCatsReferral().getUrgency().getText() : null);
			}
		}
		
		updateControlsState();
	}

	@Override
	protected void onRadioButtonGroupLinkedApptValueChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setLinkedOPA(null);
		
		updateControlsState();
	}

	public List<String> getErrors()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		boolean isCab = form.getLocalContext().getCatsReferral() != null && Boolean.TRUE.equals(form.getLocalContext().getCatsReferral().getIsCAB());
		
		boolean isOPAVisible = form.chkOPA().isVisible();
		boolean isLinkedOPAVisible = form.chkLinkedOPA().isVisible();
		boolean isOPAAndLinkedDiagnosticVisible = form.chkOPAandLinkedDiagnostics().isVisible();
		boolean isDirectToListVisible = form.chkDirectToList().isVisible();
		boolean isDirectToListAndOPAVisible = form.chkDirectListAndOPA().isVisible();
		
		if(!isCab)
    	{
			boolean isOneActionRequiredFilled = false;
			
			if(isOPAVisible  && form.chkOPA().getValue())
			{
				isOneActionRequiredFilled = true;
			}
			if(isLinkedOPAVisible && form.chkLinkedOPA().getValue())
			{
				isOneActionRequiredFilled = true;
			}
			if(isOPAAndLinkedDiagnosticVisible && form.chkOPAandLinkedDiagnostics().getValue())
			{
				isOneActionRequiredFilled = true;
			}
			if(isDirectToListVisible && form.chkDirectToList().getValue())
			{
				isOneActionRequiredFilled = true;
			}
			if(isDirectToListAndOPAVisible && form.chkDirectListAndOPA().getValue())
			{
				isOneActionRequiredFilled = true;
			}
			
    		if(!isOneActionRequiredFilled)
    		{
    			uiErrors.add("Actions Required is mandatory.");
    		}
    	}
		
		if(form.chkOPA().getValue())
		{
			uiErrors.addAll(form.lyrActionsRequired().tabOPA().ccOPA().getErrors());
		}
		else if(form.chkLinkedOPA().getValue())
		{
			if(form.getGlobalContext().Scheduling.getLinkedOPA() == null)
			{
				uiErrors.add("Linked Appointments is mandatory.");
			}
		}
		else if(form.chkOPAandLinkedDiagnostics().getValue())
		{
			uiErrors.addAll(form.lyrActionsRequired().tabOPA().ccOPA().getErrors());
			uiErrors.addAll(form.lyrActionsRequired().tabOPA().ccOPALinkedDiagnostics().getErrors());
		}
		else if(form.chkDirectToList().getValue())
		{
			if(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo() == null)
			{
				uiErrors.add("Waiting List is mandatory.");
			}
		}
		else if(form.chkDirectListAndOPA().getValue())
		{
			if(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo() == null)
			{
				uiErrors.add("Waiting List is mandatory.");
			}
			
			uiErrors.addAll(form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().getErrors());
		}
		else if(form.chkLinkedOPAAndDiagnostics().getValue())
		{
			if(form.getGlobalContext().Scheduling.getLinkedOPA() == null)
			{
				uiErrors.add("Linked Appointments is mandatory.");
			}
			uiErrors.addAll(form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().getErrors());
		}
		else if(form.chkLinkedDiagnostics().getValue())
		{
			uiErrors.addAll(form.lyrActionsRequired().tabLinkedOPA().ccLinkedOPALinkedDiagnostics().getErrors());
		}
		else if(form.chkChangeCABOPA().getValue())
		{
			uiErrors.addAll(form.lyrActionsRequired().tabOPA().ccOPA().getErrors());
		}
		else if (form.chkChangeCABOPAandDirectToList().getValue()) //WDEV-23576
		{
			if(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo() == null)
			{
				uiErrors.add("Waiting List is mandatory.");
			}
			
			uiErrors.addAll(form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().getErrors());
		}
		else if (form.chkCABOPAandDirectToList().getValue()) //WDEV-23576
		{
			if(form.getGlobalContext().RefMan.getPatientElectiveListAddLaterVo() == null)
			{
				uiErrors.add("Waiting List is mandatory.");
			}
		}
		
		return uiErrors;
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onChkChangeCABOPAValueChanged() throws PresentationLogicException
	{
		if(form.chkChangeCABOPA().getValue())
		{
			form.chkOPA().setValue(null);
			form.chkLinkedOPA().setValue(null);
			form.chkOPAandLinkedDiagnostics().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			
			//WDEV-23576
			form.chkChangeCABOPAandDirectToList().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		
		clearActionsRequired();
		
		form.lyrActionsRequired().tabOPA().ccOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
		updateControlsState();
	}

	//WDEV-23576
	@Override
	protected void onChkCABOPAandDirectToListValueChanged() throws PresentationLogicException
	{
		if(form.chkCABOPAandDirectToList().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPA().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			form.chkChangeCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		
		updateControlsState();
	}

	//WDEV-23576
	@Override
	protected void onChkChangeCABOPAandDirectToListValueChanged() throws PresentationLogicException
	{
		if(form.chkChangeCABOPAandDirectToList().getValue())
		{
			form.chkLinkedOPA().setValue(null);
			form.chkOPA().setValue(null);
			form.chkDirectToList().setValue(null);
			form.chkDirectListAndOPA().setValue(null);
			form.chkLinkedOPAAndDiagnostics().setValue(null);
			form.chkLinkedDiagnostics().setValue(null);
			form.chkChangeCABOPA().setValue(null);
			form.chkCABOPAandDirectToList().setValue(null);
		}
		clearActionsRequired();
		form.lyrActionsRequired().tabDirectToList().ccDirectToListOPA().initialise(form.getLocalContext().getCatsReferral(), form.getLocalContext().getServiceTriageConfig());
		updateControlsState();
	}
}
