//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3618.29606)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referralcoding;

import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabInpatientCodingContainer.grdCodingRow;
import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabInpatientCodingContainer.grdDiagnosesRow;
import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabInpatientCodingContainer.grdProceduresRow;
import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdDiagRow;
import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdInvRow;
import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdOutpatientCodingRow;
import ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdProcRow;
import ims.RefMan.vo.DischargeAndPASEventForReferralCodingVoCollection;
import ims.RefMan.vo.ReferralCodingItemVo;
import ims.RefMan.vo.ReferralCodingItemVoCollection;
import ims.RefMan.vo.ReferralCodingVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CSPrimaryDiagnosisVoCollection;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.core.vo.PatientDiagnosisShortVo;
import ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo;
import ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.LateralityLRB;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.ocrr.vo.InvestigationIndexVo;
import ims.ocrr.vo.OrderInvestigationLiteVo;
import ims.ocrr.vo.OrderInvestigationLiteVoCollection;
import ims.scheduling.vo.BookingAppointmentOutpatientCodingVo;
import ims.scheduling.vo.BookingAppointmentOutpatientCodingVoCollection;
import ims.vo.interfaces.IMos;
import ims.vo.interfaces.ITaxonomyMapCollection;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int OutpatientICD10Column = 5;
	private static final int OutpatientOPCS4Column = 7;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (domain.getMosUser() == null)
		{
			throw new FormOpenException("Logged in user is not a MOS and will not be able to view or edit data.");
		}

		initializeScreen();
		populateInpatientCoding(null);
	}

	private void initializeScreen()
	{
		form.getLocalContext().setCurrentCareContext(domain.getCareContext(form.getGlobalContext().RefMan.getCatsReferral()));

		form.lyrTabs().tabInpatientCoding().lblPASEvent().setVisible(false);
		form.lyrTabs().tabInpatientCoding().cmbPasEvents().setVisible(false);
		if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
		{
			form.lyrTabs().tabInpatientCoding().lblPASEvent().setVisible(true);
			form.lyrTabs().tabInpatientCoding().cmbPasEvents().setVisible(true);
			form.lyrTabs().tabInpatientCoding().cmbPasEvents().setRequired(true);
		}
		
		form.lyrTabs().showtabInpatientCoding();
	}

	private void populateInpatientCoding(ReferralCodingVo voRc)
	{
		populateDiagnosesGrid();
		populateProceduresGrid();

		if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
		{
			fillPASEventCombo(voRc);

			fillCodingGrid(Boolean.FALSE, form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue());
		}
		else
			fillCodingGrid(Boolean.FALSE, null);

		form.setMode(FormMode.VIEW);
	}

	private void fillPASEventCombo(ReferralCodingVo voRc)
	{
		DischargeAndPASEventForReferralCodingVoCollection voColl = domain.listPASEvents(form.getGlobalContext().RefMan.getCatsReferral());

		form.lyrTabs().tabInpatientCoding().cmbPasEvents().clear();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			StringBuffer sb = new StringBuffer();

			if (voColl.get(i).getDischargeEpisodeIsNotNull() && voColl.get(i).getDischargeEpisode().getPasEventIsNotNull())
			{
				sb.append(voColl.get(i).getDischargeEpisode().getPasEvent().getEventDateTimeIsNotNull() ? voColl.get(i).getDischargeEpisode().getPasEvent().getEventDateTime().toString() : "");
				sb.append(" - ");
				sb.append(voColl.get(i).getDischargeEpisode().getDischargeDateTimeIsNotNull() ? voColl.get(i).getDischargeEpisode().getDischargeDateTime().toString() : "");

				form.lyrTabs().tabInpatientCoding().cmbPasEvents().newRow(voColl.get(i).getDischargeEpisode().getPasEvent(), sb.toString());

				if (voRc != null && voRc.getPasEventIsNotNull() && voRc.getPasEvent().getID_PASEventIsNotNull() && voColl.get(i).getDischargeEpisode().getPasEvent().getID_PASEventIsNotNull() && voRc.getPasEvent().getID_PASEvent().equals(voColl.get(i).getDischargeEpisode().getPasEvent().getID_PASEvent()))
					form.lyrTabs().tabInpatientCoding().cmbPasEvents().setValue(voColl.get(i).getDischargeEpisode().getPasEvent());
			}

		}
		if (voColl.size() > 0 && voRc == null)
			if (voColl.get(0) != null && voColl.get(0).getDischargeEpisode() != null) // wdev-11853
				form.lyrTabs().tabInpatientCoding().cmbPasEvents().setValue(voColl.get(0).getDischargeEpisode().getPasEvent());
	}

	private boolean fillCodingGrid(Boolean bShowMessage, PasEventShortVo voPasEvent)
	{
		boolean bReturnValue = true;

		if (!ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			bReturnValue = populateGridFromCatsReferral(bShowMessage);
		else
			bReturnValue = populateCodingGrid(bShowMessage, voPasEvent, null);

		if (!bReturnValue)
			form.setMode(FormMode.VIEW);

		return bReturnValue;
	}

	private boolean populateCodingGrid(Boolean bShowMessage, PasEventShortVo voPasEvent, BookingAppointmentOutpatientCodingVo appointment)
	{
		boolean bReturnValue = true;
		ReferralCodingVo voRC = null;
		if (voPasEvent != null)
			voRC = domain.getReferralCoding(null, voPasEvent);
		else if (appointment != null)
			voRC = domain.getReferralCodingForAppointment(appointment);

		if (((voRC != null && form.getLocalContext().getCurrentRCVoIsNotNull() && form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() != voRC.getVersion_ReferralCoding()) || (voRC != null && form.getLocalContext().getCurrentRCVo() == null)) && bShowMessage)
		{
			engine.showMessage("The Referral Coding record has been changed by another user. Please review and edit again.");
			bReturnValue = false;
		}
		else if (voRC != null && form.getLocalContext().getCurrentRCVoIsNotNull() && form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() == voRC.getVersion_ReferralCoding() && bShowMessage)
		{
			form.getLocalContext().setCurrentRCVo(voRC);
			return true;
		}

		form.getLocalContext().setCurrentRCVo(voRC);

		populateRCGrid(voRC);

		return bReturnValue;
	}

	private boolean populateGridFromCatsReferral(Boolean bShowMessage)
	{
		boolean bReturnValue = true;
		ReferralCodingVo voRC = domain.getReferralCoding(form.getGlobalContext().RefMan.getCatsReferral(), null);
		if (((voRC != null && form.getLocalContext().getCurrentRCVoIsNotNull() && form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() != voRC.getVersion_ReferralCoding()) || (voRC != null && form.getLocalContext().getCurrentRCVo() == null)) && bShowMessage)
		{
			engine.showMessage("The Referral Coding record has been changed by another user. Please review and edit again.");
			bReturnValue = false;
		}
		else if (voRC != null && form.getLocalContext().getCurrentRCVoIsNotNull() && form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() == voRC.getVersion_ReferralCoding() && bShowMessage)
		{
			form.getLocalContext().setCurrentRCVo(voRC);
			return true;
		}
		form.lyrTabs().tabInpatientCoding().grdCoding().getRows().clear();
		form.getLocalContext().setCurrentRCVo(voRC);

		populateRCGrid(voRC);

		return bReturnValue;
	}

	private void populateRCGrid(ReferralCodingVo voRC)
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			populateInpatientRCGrid(voRC);
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			populateOutpatientRCGrid(voRC);
		}
	}

	private void populateOutpatientRCGrid(ReferralCodingVo voRC)
	{

		clearOutpatientValues();

		form.lyrTabs().tabOutpatientCoding().txtOutpatientComments().setValue(voRC != null ? voRC.getComments() : "");

		if (voRC == null)
			return;

		form.lyrTabs().tabOutpatientCoding().chkOutpatientActive().setValue(voRC.getActive());
		form.lyrTabs().tabOutpatientCoding().dtimRecording().setValue(voRC.getAuthoringDateTime());

		if (voRC.getAuthoringMOSIsNotNull() && voRC.getAuthoringMOS().getNameIsNotNull())
			form.lyrTabs().tabOutpatientCoding().txtRecUser().setValue(voRC.getAuthoringMOS().getName().toString());

		for (int i = 0; voRC != null && voRC.getCodingItemsIsNotNull() && i < voRC.getCodingItems().size(); i++)
		{
			ReferralCodingItemVo voItem = voRC.getCodingItems().get(i);

			if (voItem.getPatientProcedureIsNotNull())
				addProcedureToOutpatientCodingGrid(voItem.getPatientProcedure(), voItem.getOPCS4(), voItem.getICD10(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull());
			else if (voItem.getPatientDiagnosisIsNotNull())
				addDiagnosisToOutpatientCodingGrid(voItem.getPatientDiagnosis(), voItem.getICD10(), voItem.getOPCS4(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull());
			else if (voItem.getInvestigationIsNotNull())
				addInvestigationToOutpatientCodingGrid(voItem.getInvestigation(), voItem.getICD10(), voItem.getOPCS4(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull());
			else if (voItem.getOPCS4IsNotNull())
				addOPCS4ProcedureToOutpatientCodingGrid(voItem.getOPCS4(), voItem.getProcLaterality());
			else if (voItem.getICD10IsNotNull())
				addICD10DiagnosisToOutpatientCodingGrid(voItem.getICD10(), voItem.getProcLaterality());
		}
	}

	private void addProceduresForAppointment()
	{
		if (form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue() == null)
			return;

		boolean changeFormMode = false;

		int proceduresNo = form.lyrTabs().tabOutpatientCoding().grdProc().getRows().size();
		BookingAppointmentOutpatientCodingVo appointment = form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue();

		for (int i = 0; i < proceduresNo; i++)
		{
			PatientProcedureShortWithCareIntraOperativeVo procedure = form.lyrTabs().tabOutpatientCoding().grdProc().getRows().get(i).getValue();

			if (procedure.getProcDate() != null && appointment.getAppointmentDate() != null && procedure.getProcDate().equals(appointment.getAppointmentDate()))
			{
				if (!domain.procedureAlreadyAdded(form.getGlobalContext().RefMan.getCatsReferral(), procedure))
				{
					addProcedureToOutpatientCodingGrid(procedure, "", "", null, false);
					changeFormMode = true;
				}
			}
		}

		if (changeFormMode)
			form.setMode(FormMode.EDIT);
	}

	private void clearOutpatientValues()
	{
		form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().clear();
		form.lyrTabs().tabOutpatientCoding().txtOutpatientComments().setValue("");
		form.lyrTabs().tabOutpatientCoding().dtimRecording().setValue(null);
		form.lyrTabs().tabOutpatientCoding().txtRecUser().setValue("");
		form.lyrTabs().tabOutpatientCoding().chkOutpatientActive().setValue(false);
	}

	private void addICD10DiagnosisToOutpatientCodingGrid(String icd10, LateralityLRB lateralityLRB)
	{
		grdOutpatientCodingRow rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

		rowCoding.setColDiagProcInv("");
		rowCoding.setTooltipForColDiagProcInv("");
		rowCoding.setColDiagVo(null);

		rowCoding.setColICD10(icd10);
		rowCoding.setColOPCS4("");
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLaterality(lateralityLRB);

		rowCoding.setBackColor(Color.Orange);
		rowCoding.setValue(null);

	}

	private void addOPCS4ProcedureToOutpatientCodingGrid(String opcs4, LateralityLRB lateralityLRB)
	{
		grdOutpatientCodingRow rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

		rowCoding.setColDiagProcInv("");
		rowCoding.setTooltipForColDiagProcInv("");
		rowCoding.setColDiagVo(null);

		rowCoding.setColICD10("");
		rowCoding.setColOPCS4(opcs4);
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColLaterality(lateralityLRB);

		rowCoding.setBackColor(Color.LightBlue);
		rowCoding.setValue(null);

	}

	private void populateInpatientRCGrid(ReferralCodingVo voRC)
	{
		clearInpatientValues();

		form.lyrTabs().tabInpatientCoding().txtComments().setValue(voRC != null ? voRC.getComments() : "");

		if (voRC == null)
			return;

		form.lyrTabs().tabInpatientCoding().chkInpatientActive().setValue(voRC.getActive());
		form.lyrTabs().tabInpatientCoding().dtimRec().setValue(voRC.getAuthoringDateTime());

		if (voRC.getAuthoringMOSIsNotNull() && voRC.getAuthoringMOS().getNameIsNotNull())
			form.lyrTabs().tabInpatientCoding().txtMOS().setValue(voRC.getAuthoringMOS().getName().toString());

		for (int i = 0; voRC != null && voRC.getCodingItemsIsNotNull() && i < voRC.getCodingItems().size(); i++)
		{
			ReferralCodingItemVo voItem = voRC.getCodingItems().get(i);

			if (voItem.getPatientProcedureIsNotNull())
				addProcedureToCodingGrid(voItem.getPatientProcedure(), voItem.getOPCS4(), voItem.getICD10(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull());
			else if (voItem.getPatientDiagnosisIsNotNull())
				addDiagnosisToCodingGrid(voItem.getPatientDiagnosis(), voItem.getICD10(), voItem.getOPCS4(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull());
			else if (voItem.getOPCS4IsNotNull())
				addOPCS4ProcedureToCodingGrid(voItem.getOPCS4(), voItem.getProcLaterality());
			else if (voItem.getICD10IsNotNull())
				addICD10DiagnosisToCodingGrid(voItem.getICD10(), voItem.getProcLaterality());
		}
	}

	private void clearInpatientValues()
	{
		form.lyrTabs().tabInpatientCoding().grdCoding().getRows().clear();
		form.lyrTabs().tabInpatientCoding().txtComments().setValue("");
		form.lyrTabs().tabInpatientCoding().dtimRec().setValue(null);
		form.lyrTabs().tabInpatientCoding().txtMOS().setValue("");
		form.lyrTabs().tabInpatientCoding().chkInpatientActive().setValue(false);

	}

	private void addInvestigationToOutpatientCodingGrid(OrderInvestigationLiteVo investigation, String stringICD10, String stringOPCS4, LateralityLRB lateralityLRB, boolean bSavedRecord)
	{
		grdOutpatientCodingRow rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

		rowCoding.setColDiagProcInv(investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null ? investigation.getInvestigation().getInvestigationIndex().getName() : "");
		rowCoding.setTooltipForColDiagProcInv(rowCoding.getColDiagProcInv());

		if (investigation.getInvestigation() != null && investigation.getInvestigation().getInvestigationIndex() != null && investigation.getInvestigation().getInvestigationIndex().getID_InvestigationIndex() != null)
		{

			InvestigationIndexVo voInvWithMappings = domain.getInvestigationWithTaxonomyMappings(investigation.getInvestigation().getInvestigationIndex());
			rowCoding.setColInvVo(investigation);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voInvWithMappings.getTaxonomyMap()) : stringICD10);
			if (stringOPCS4.equals(""))
			{
				// WDEV-19730 
				// For investigations, we could have multiple OPCS4 codes.  These need to be output
				// to multiple lines
				ArrayList<String> opcsCodes = findOPCS4List(voInvWithMappings.getTaxonomyMap()) ;
				if (opcsCodes != null && opcsCodes.size() > 0)
				{
					rowCoding.setColOPCS4(opcsCodes.get(0));
					for (int i=1; i<opcsCodes.size(); i++)
					{
						grdOutpatientCodingRow opcsCodingRow = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();
						opcsCodingRow.setColOPCS4(opcsCodes.get(i));
					}
					
				}
				else
					rowCoding.setColOPCS4("");
			}
			else
				rowCoding.setColOPCS4(stringOPCS4);
		}

		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLateralityReadOnly(true);

		rowCoding.setBackColor(Color.LightYellow);
		rowCoding.setValue(null);

		form.lyrTabs().tabOutpatientCoding().grdInv().setValue(null);

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.lyrTabs().tabOutpatientCoding().chkOutpatientActive().setValue(true);
			form.lyrTabs().tabOutpatientCoding().dtimRecording().setValue(new DateTime());

			if (engine.getLoggedInUser() != null && engine.getLoggedInUser().getUserRealName() != null)
				form.lyrTabs().tabOutpatientCoding().txtRecUser().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}
	}

	private void addICD10DiagnosisToCodingGrid(String icd10, LateralityLRB lateralityLRB)
	{
		grdCodingRow rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().newRow();

		rowCoding.setColDiagProc("");
		rowCoding.setTooltipForColDiagProc("");
		rowCoding.setColDiagVo(null);

		rowCoding.setColICD10(icd10);
		rowCoding.setColOPCS4("");
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLaterality(lateralityLRB);

		rowCoding.setBackColor(Color.Orange);
		rowCoding.setValue(null);
	}

	private void addOPCS4ProcedureToCodingGrid(String string, LateralityLRB lateralityLRB)
	{
		grdCodingRow rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().newRow();

		rowCoding.setColDiagProc("");
		rowCoding.setTooltipForColDiagProc("");
		rowCoding.setColDiagVo(null);

		rowCoding.setColICD10("");
		rowCoding.setColOPCS4(string);
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColLaterality(lateralityLRB);

		rowCoding.setBackColor(Color.LightBlue);
		rowCoding.setValue(null);
	}

	private void populateProceduresGrid()
	{
		form.lyrTabs().tabInpatientCoding().grdProcedures().getRows().clear();

		PatientProcedureShortWithCareIntraOperativeVoCollection voCollNONSFSProcedures = domain.listNonSFSProcedures(form.getLocalContext().getCurrentCareContext());

		PatientProcedureShortWithCareIntraOperativeVoCollection voCollProcedures = domain.listProcedureForReferral(form.getLocalContext().getCurrentCareContext());

		List alreadyAddedProceduresIDs = domain.getAlreadyAddedProceduresIDs(form.getGlobalContext().RefMan.getCatsReferral());
		
		boolean isInpatientNoSFS = domain.isInpatientNonSuitableForSurgery(form.getGlobalContext().RefMan.getCatsReferral());

		if (voCollProcedures != null)
		{
			for (int i = 0; i < voCollProcedures.size(); i++)
			{
				grdProceduresRow row = form.lyrTabs().tabInpatientCoding().grdProcedures().getRows().newRow();

				if (voCollProcedures.get(i).getProcDateIsNotNull())
					row.setColDate(voCollProcedures.get(i).getProcDate().toString());

				if (voCollProcedures.get(i).getProcedure() != null)
				{
					row.setColProc(voCollProcedures.get(i).getProcedure().getProcedureName());
					row.setTooltipForColProc(voCollProcedures.get(i).getProcedure().getProcedureName());
				}
				else if (voCollProcedures.get(i).getProcedureDescriptionIsNotNull())
				{
					row.setColProc(voCollProcedures.get(i).getProcedureDescription());
					row.setTooltipForColProc(voCollProcedures.get(i).getProcedureDescription());
				}

				if (voCollProcedures.get(i).getInfoSourceIsNotNull() && !voCollProcedures.get(i).getInfoSource().equals(SourceofInformation.CLINICALCONTACT))
					row.setColPMH(form.getImages().Core.Add);
				else
					row.setColPMH(null);

				boolean alreadyAddedProcedure = alreadyAddedProceduresIDs != null && alreadyAddedProceduresIDs.contains(voCollProcedures.get(i).getID_PatientProcedure());

				if (alreadyAddedProcedure)
				{
					row.setBackColor(Color.Red);
				}
				else if (voCollNONSFSProcedures.contains(voCollProcedures.get(i)))
					row.setBackColor(Color.Green);
				else
					row.setBackColor(Color.LightBlue);

				//WDEV-15358 Set to selectable if the procedure has an intraoperative record, or if it's planned procedure has an intraoperative record
				//WDEV-19351 check if the referral service has CDS = INPATIENT_NO_SFS value, then coding is allowed regardless of whether the Intraoperative or Suitable For Surgery record exists or not
				row.setSelectable(!alreadyAddedProcedure && (isInpatientNoSFS || voCollProcedures.get(i).getIntraOperativeRecordIsNotNull() || voCollProcedures.get(i).getPlannedIntraoperativeRecordIsNotNull()));
				row.setValue(voCollProcedures.get(i));
			}
		}
	}

	private void populateDiagnosesGrid()
	{
		form.lyrTabs().tabInpatientCoding().grdDiagnoses().getRows().clear();

		PatientDiagnosisListVoCollection voCollDiags = domain.listDiagnosisComplicationsForReferral(form.getLocalContext().getCurrentCareContext());
		if (voCollDiags != null)
		{
			for (int i = 0; i < voCollDiags.size(); i++)
			{
				grdDiagnosesRow row = form.lyrTabs().tabInpatientCoding().grdDiagnoses().getRows().newRow();

				if (voCollDiags.get(i).getDiagnosedDateIsNotNull())
					row.setColDate(voCollDiags.get(i).getDiagnosedDate().toString());

				if (voCollDiags.get(i).getDiagnosisDescriptionIsNotNull())
				{
					row.setColDiag(voCollDiags.get(i).getDiagnosisDescription());
					row.setTooltipForColDiag(voCollDiags.get(i).getDiagnosisDescription());
				}

				if (voCollDiags.get(i).getDiagnosisDescriptionIsNotNull())
					row.setColDiag(voCollDiags.get(i).getDiagnosisDescription());

				row.setColPrimary(isPrimaryDiagnosisActive(voCollDiags.get(i)) ? form.getImages().Core.Pin : null);

				if (voCollDiags.get(i).getIsPMHIsNotNull() && voCollDiags.get(i).getIsPMH())
					row.setColPMH(form.getImages().Core.Add);
				else
					row.setColPMH(null);

				row.setBackColor(Color.Orange);

				row.setValue(voCollDiags.get(i));
			}
		}
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisListVo voPatDiagShort)
	{
		if (voPatDiagShort == null)
			return false;

		return isPrimaryDiagnosisActive(voPatDiagShort, voPatDiagShort.getPrimaryForCareSpells());
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			boolean isActive = voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue();
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagRef);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getLocalContext().getCurrentCareContext());

			if (isActive && sameDiagnosis && sameCareContext)
				return true;
		}
		return false;
	}

	@Override
	protected void onGrdCodingSelectionChanged()
	{
		updateControlsState();

		for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
		{
			grdCodingRow rowDisable = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i);
			rowDisable.setReadOnly(true);
			rowDisable.setReadOnly(true);
		}

		grdCodingRow rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow();
		rowCoding.setReadOnly(false);
		rowCoding.setReadOnly(false);

	}

	@Override
	protected void onGrdProceduresSelectionChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onGrdDiagnosesSelectionChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{

		if (form.getMode().equals(FormMode.VIEW) && form.lyrTabs().tabInpatientCoding().isVisible())
		{
			if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			{
				if (fillCodingGrid(Boolean.TRUE, form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue()) == false)
					return;
			}
			else
			{
				if (fillCodingGrid(Boolean.TRUE, null) == false)
					return;
			}
		}

		switch (menuItemID)
		{
			case GenForm.ContextMenus.LIP.New:
				if (form.lyrTabs().tabInpatientCoding().isVisible() && form.lyrTabs().tabInpatientCoding().grdDiagnoses().getSelectedRow() != null)
					addDiagnosisToCodingGrid(form.lyrTabs().tabInpatientCoding().grdDiagnoses().getSelectedRow().getValue(), "", "", null, false);
				else if (form.lyrTabs().tabOutpatientCoding().isVisible() && form.lyrTabs().tabOutpatientCoding().grdDiag().getSelectedRow() != null)
				{
					addDiagnosisToOutpatientCodingGrid(form.lyrTabs().tabOutpatientCoding().grdDiag().getSelectedRow().getValue(), "", "", null, false);
					form.setMode(FormMode.EDIT);
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCodingProcedureMenu.ADD_CODING:
				if (form.lyrTabs().tabInpatientCoding().isVisible() && form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow() != null)
					addProcedureToCodingGrid(form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow().getValue(), "", "", null, false);
				else if (form.lyrTabs().tabOutpatientCoding().isVisible() && form.lyrTabs().tabOutpatientCoding().grdProc().getSelectedRow() != null)
				{
					addProcedureToOutpatientCodingGrid(form.lyrTabs().tabOutpatientCoding().grdProc().getSelectedRow().getValue(), "", "", null, false);
					form.setMode(FormMode.EDIT);
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCodingProcedureMenu.NEW_SFS:
				if (form.lyrTabs().tabInpatientCoding().isVisible() && form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow() != null)
				{
					linkNewSFS(form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow().getValue());
					return;
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.MOVE_UP:
				if (form.lyrTabs().tabInpatientCoding().isVisible() && form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow() != null)
					form.lyrTabs().tabInpatientCoding().grdCoding().moveUp();
				else if (form.lyrTabs().tabOutpatientCoding().isVisible() && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow() != null)
					form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().moveUp();
				updateControlsState();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.MOVE_DOWN:
				if (form.lyrTabs().tabInpatientCoding().isVisible() && form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow() != null)
					form.lyrTabs().tabInpatientCoding().grdCoding().moveDown();
				else if (form.lyrTabs().tabOutpatientCoding().isVisible() && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow() != null)
					form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().moveDown();
				updateControlsState();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.ADD_ICD10:
				addNewRow(TaxonomyType.ICD10);
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.ADD_OPCS:
				addNewRow(TaxonomyType.OPCS4);
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.REMOVE:
				removeRow();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCodingInvestigationMenu.ADD_CODING:
				addInvestigationToOutpatientCodingGrid(form.lyrTabs().tabOutpatientCoding().grdInv().getSelectedRow().getValue(), "", "", null, false);
				form.setMode(FormMode.EDIT);
				break;
		}

		form.setMode(FormMode.EDIT);
	}

	private void addProcedureToOutpatientCodingGrid(PatientProcedureShortWithCareIntraOperativeVo voProc, String stringOPCS4, String stringICD10, LateralityLRB lateralityLRB, boolean bSavedRecord)
	{
		grdOutpatientCodingRow rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

		rowCoding.setColDiagProcInv(voProc.getProcedureDescription());
		rowCoding.setTooltipForColDiagProcInv(voProc.getProcedureDescription());
		if (voProc.getProcedureIsNotNull() && voProc.getProcedure().getID_ProcedureIsNotNull())
		{

			ProcedureVo voProcWithMappings = domain.getProcedureWithTaxonomyMappings(voProc.getProcedure());
			rowCoding.setColProcVo(voProc);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voProcWithMappings.getCciMappings()) : stringICD10);
			rowCoding.setColOPCS4(stringOPCS4 == "" ? findOPCS4(voProcWithMappings.getCciMappings()) : stringOPCS4);
		}
		if (voProc != null && voProc.getProcedure() == null)
		{
			rowCoding.setColProcVo(voProc);
			rowCoding.setColICD10(stringICD10);
			rowCoding.setColOPCS4(stringOPCS4);
		}

		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setBackColor(Color.LightBlue);
		rowCoding.setColLaterality(bSavedRecord ? lateralityLRB : voProc.getProcLaterality());

		rowCoding.setValue(null);

		form.lyrTabs().tabOutpatientCoding().grdProc().setValue(null);

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.lyrTabs().tabOutpatientCoding().chkOutpatientActive().setValue(true);

			form.lyrTabs().tabOutpatientCoding().dtimRecording().setValue(new DateTime());
			if (engine.getLoggedInUser() != null && engine.getLoggedInUser().getUserRealName() != null)
				form.lyrTabs().tabOutpatientCoding().txtRecUser().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}
	}

	private void addDiagnosisToOutpatientCodingGrid(PatientDiagnosisShortVo voDiag, String stringICD10, String stringOPCS4, LateralityLRB lateralityLRB, boolean bSavedRecord)
	{
		grdOutpatientCodingRow rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

		rowCoding.setColDiagProcInv(voDiag.getDiagnosisDescription());
		rowCoding.setTooltipForColDiagProcInv(voDiag.getDiagnosisDescription());

		if (voDiag.getDiagnosisIsNotNull() && voDiag.getDiagnosis().getID_DiagnosisIsNotNull())
		{
			DiagnosisVo voDiagWithMappings = domain.getDiagnosisWithTaxonomyMappings(voDiag.getDiagnosis());
			rowCoding.setColDiagVo(voDiag);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voDiagWithMappings.getCciMappings()) : stringICD10);
			rowCoding.setColOPCS4(stringOPCS4 == "" ? findOPCS4(voDiagWithMappings.getCciMappings()) : stringOPCS4);
		}

		if (voDiag != null && voDiag.getDiagnosis() == null)
		{
			rowCoding.setColDiagVo(voDiag);
			rowCoding.setColICD10(stringICD10);
			rowCoding.setColOPCS4(stringOPCS4);
		}

		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLaterality(bSavedRecord ? lateralityLRB : voDiag.getDiagLaterality());

		rowCoding.setBackColor(Color.Orange);
		rowCoding.setValue(null);

		form.lyrTabs().tabOutpatientCoding().grdDiag().setValue(null);

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.lyrTabs().tabOutpatientCoding().chkOutpatientActive().setValue(true);
			form.lyrTabs().tabOutpatientCoding().dtimRecording().setValue(new DateTime());

			if (engine.getLoggedInUser() != null && engine.getLoggedInUser().getUserRealName() != null)
				form.lyrTabs().tabOutpatientCoding().txtRecUser().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}
	}

	private void linkNewSFS(PatientProcedureShortWithCareIntraOperativeVo value)
	{
		if (form.lyrTabs().tabInpatientCoding().grdProcedures().getValue() != null && form.lyrTabs().tabInpatientCoding().grdProcedures().getValue().getPlannedProcIsNotNull())
		{
			PatientProcedureVo voProc = new PatientProcedureVo(form.lyrTabs().tabInpatientCoding().grdProcedures().getValue().getPlannedProc().getID_PatientProcedure(), form.lyrTabs().tabInpatientCoding().grdProcedures().getValue().getPlannedProc().getVersion_PatientProcedure());
			form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(voProc);
			engine.open(form.getForms().RefMan.ReferralCodingProcedureToSFSAssessmentDialog);
		}
	}

	private void removeRow()
	{
		updateGridsOnRemove();

		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			form.lyrTabs().tabInpatientCoding().grdCoding().getRows().remove(form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRowIndex());

		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().remove(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRowIndex());
		}

	}

	private void updateGridsOnRemove()
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			if (form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow() == null)
				return;
			
			boolean isInpatientNoSFS = domain.isInpatientNonSuitableForSurgery(form.getGlobalContext().RefMan.getCatsReferral());
			
			if (form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow().getColProcVo() != null)
			{
				for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdProcedures().getRows().size(); i++)
				{
					PatientProcedureShortWithCareIntraOperativeVo procedure = form.lyrTabs().tabInpatientCoding().grdProcedures().getRows().get(i).getValue();

					if (form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow().getColProcVo().equals(procedure))
					{
						form.lyrTabs().tabInpatientCoding().grdProcedures().getRows().get(i).setBackColor(Color.LightBlue);
						form.lyrTabs().tabInpatientCoding().grdProcedures().getRows().get(i).setSelectable(isInpatientNoSFS || procedure.getIntraOperativeRecord() != null  || procedure.getPlannedIntraoperativeRecord() != null);
						break;
					}
				}
			}
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow() == null)
				return;

			if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow().getColProcVo() != null)
			{
				for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdProc().getRows().size(); i++)
				{
					PatientProcedureShortWithCareIntraOperativeVo procedure = form.lyrTabs().tabOutpatientCoding().grdProc().getRows().get(i).getValue();

					if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow().getColProcVo().equals(procedure))
					{
						form.lyrTabs().tabOutpatientCoding().grdProc().getRows().get(i).setBackColor(Color.LightBlue);
						form.lyrTabs().tabOutpatientCoding().grdProc().getRows().get(i).setSelectable(true);
						break;
					}
				}
			}
			else if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow().getColInvVo() != null)
			{
				for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdInv().getRows().size(); i++)
				{
					OrderInvestigationLiteVo investigation = form.lyrTabs().tabOutpatientCoding().grdInv().getRows().get(i).getValue();

					if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow().getColInvVo().equals(investigation))
					{
						form.lyrTabs().tabOutpatientCoding().grdInv().getRows().get(i).setBackColor(Color.LightYellow);
						form.lyrTabs().tabOutpatientCoding().grdInv().getRows().get(i).setSelectable(true);
						break;
					}
				}
			}
		}

		updateControlsState();
	}

	private void addNewRow(TaxonomyType type)
	{
		TaxonomyMap voTaxonomy = new TaxonomyMap();
		voTaxonomy.setTaxonomyName(type);
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomy);

		form.getLocalContext().setSelectedInpatientRow(null);
		form.getLocalContext().setSelectedOutpatientRow(null);

		form.lyrTabs().tabInpatientCoding().grdCoding().setValue(null);
		form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().setValue(null);

		engine.open(form.getForms().Core.TaxonomySearch);

		updateControlsState();
	}

	private void addToCurrentRow(TaxonomyType type, grdCodingRow row)
	{
		TaxonomyMap voTaxonomy = new TaxonomyMap();
		voTaxonomy.setTaxonomyName(type);
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomy);

		form.getGlobalContext().Core.setTaxonomySearchForName(row.getColDiagProc());

		form.getLocalContext().setSelectedInpatientRow(row);
		engine.open(form.getForms().Core.TaxonomySearch);
		form.setMode(FormMode.EDIT);
	}

	private void addProcedureToCodingGrid(PatientProcedureShortWithCareIntraOperativeVo voProc, String stringOPCS4, String stringICD10, LateralityLRB lateralityLRB, boolean bSavedRecord)
	{
		grdCodingRow rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().newRow();

		rowCoding.setColDiagProc(voProc.getProcedureDescription());
		rowCoding.setTooltipForColDiagProc(voProc.getProcedureDescription());
		if (voProc.getProcedureIsNotNull() && voProc.getProcedure().getID_ProcedureIsNotNull())
		{

			ProcedureVo voProcWithMappings = domain.getProcedureWithTaxonomyMappings(voProc.getProcedure());
			rowCoding.setColProcVo(voProc);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voProcWithMappings.getCciMappings()) : stringICD10);
			rowCoding.setColOPCS4(stringOPCS4 == "" ? findOPCS4(voProcWithMappings.getCciMappings()) : stringOPCS4);
		}
		if (voProc != null && voProc.getProcedure() == null)
		{
			rowCoding.setColProcVo(voProc);
			rowCoding.setColICD10(stringICD10);
			rowCoding.setColOPCS4(stringOPCS4);
		}

		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setBackColor(Color.LightBlue);
		rowCoding.setColLaterality(bSavedRecord ? lateralityLRB : voProc.getProcLaterality());

		rowCoding.setValue(null);

		form.lyrTabs().tabInpatientCoding().grdProcedures().setValue(null);

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.lyrTabs().tabInpatientCoding().chkInpatientActive().setValue(true);
			form.lyrTabs().tabInpatientCoding().dtimRec().setValue(new DateTime());

			if (engine.getLoggedInUser() != null && engine.getLoggedInUser().getUserRealName() != null)
				form.lyrTabs().tabInpatientCoding().txtMOS().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}

		form.setMode(FormMode.EDIT);
	}

	private void addDiagnosisToCodingGrid(PatientDiagnosisShortVo voDiag, String stringICD10, String stringOPCS4, LateralityLRB lateralityLRB, boolean bSavedRecord)
	{
		grdCodingRow rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().newRow();

		rowCoding.setColDiagProc(voDiag.getDiagnosisDescription());
		rowCoding.setTooltipForColDiagProc(voDiag.getDiagnosisDescription());
		if (voDiag.getDiagnosisIsNotNull() && voDiag.getDiagnosis().getID_DiagnosisIsNotNull())
		{
			DiagnosisVo voDiagWithMappings = domain.getDiagnosisWithTaxonomyMappings(voDiag.getDiagnosis());
			rowCoding.setColDiagVo(voDiag);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voDiagWithMappings.getCciMappings()) : stringICD10);
			rowCoding.setColOPCS4(stringOPCS4 == "" ? findOPCS4(voDiagWithMappings.getCciMappings()) : stringOPCS4);
		}
		if (voDiag != null && voDiag.getDiagnosis() == null)
		{
			rowCoding.setColDiagVo(voDiag);
			rowCoding.setColICD10(stringICD10);
			rowCoding.setColOPCS4(stringOPCS4);
		}

		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLaterality(bSavedRecord ? lateralityLRB : voDiag.getDiagLaterality());

		rowCoding.setBackColor(Color.Orange);
		rowCoding.setValue(null);

		form.lyrTabs().tabInpatientCoding().grdDiagnoses().setValue(null);

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.lyrTabs().tabInpatientCoding().chkInpatientActive().setValue(true);
			form.lyrTabs().tabInpatientCoding().dtimRec().setValue(new DateTime());

			if (engine.getLoggedInUser() != null && engine.getLoggedInUser().getUserRealName() != null)
				form.lyrTabs().tabInpatientCoding().txtMOS().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}

		form.setMode(FormMode.EDIT);
	}

	private String findOPCS4(ITaxonomyMapCollection cciMappings)
	{
		for (int i = 0; cciMappings != null && i < cciMappings.size(); i++)
		{
			if (cciMappings.getITaxonomyMap(i).getTaxonomyNameIsNotNull() && cciMappings.getITaxonomyMap(i).getTaxonomyName().equals(TaxonomyType.OPCS4))
				return cciMappings.getITaxonomyMap(i).getTaxonomyCode();
		}
		return "";
	}
	
	private ArrayList<String> findOPCS4List(TaxonomyMapCollection cciMappings)
	{
		if (cciMappings == null || cciMappings.size() == 0)
			return null;
		
		ArrayList<String> opcs4Codes = new ArrayList<String>();
		
		for (int i = 0;  i < cciMappings.size(); i++)
		{
			if (cciMappings.get(i).getTaxonomyNameIsNotNull() && cciMappings.get(i).getTaxonomyName().equals(TaxonomyType.OPCS4))
			{
				opcs4Codes.add(cciMappings.get(i).getTaxonomyCode());
			}
		}
		return opcs4Codes;
	}

	private String findICD10(ITaxonomyMapCollection cciMappings)
	{
		for (int i = 0; cciMappings != null && i < cciMappings.size(); i++)
		{
			if (cciMappings.getITaxonomyMap(i).getTaxonomyNameIsNotNull() && cciMappings.getITaxonomyMap(i).getTaxonomyName().equals(TaxonomyType.ICD10))
				return cciMappings.getITaxonomyMap(i).getTaxonomyCode();
		}
		return "";
	}

	private void updateControlsState()
	{

		form.getContextMenus().RefMan.hideAllReferralCodingProcedureMenuMenuItems();
		form.getContextMenus().hideAllLIPMenuItems();
		form.getContextMenus().RefMan.hideAllReferralCodingMenuItems();
		form.getContextMenus().RefMan.hideAllReferralCodingProcedureMenuMenuItems();
		form.getContextMenus().RefMan.hideAllReferralCodingInvestigationMenuMenuItems();

		if (form.lyrTabs().tabInpatientCoding().isVisible())
			updateControlsStateForInpatientCoding();
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
			updateControlsStateForOutpatientCoding();

		boolean codingGridHasValues = (form.lyrTabs().tabInpatientCoding().isVisible() && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size() > 0) || (form.lyrTabs().tabOutpatientCoding().isVisible() && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size() > 0);

		form.getContextMenus().RefMan.getReferralCodingADD_ICD10Item().setVisible(findADiagnosisInGrid() && codingGridHasValues);
		form.getContextMenus().RefMan.getReferralCodingADD_ICD10Item().setEnabled(findADiagnosisInGrid() && codingGridHasValues);
		form.getContextMenus().RefMan.getReferralCodingADD_OPCSItem().setVisible(findAProcedureInGrid() && codingGridHasValues);
		form.getContextMenus().RefMan.getReferralCodingADD_OPCSItem().setEnabled(findAProcedureInGrid() && codingGridHasValues);

		form.lyrTabs().tabInpatientCoding().setHeaderEnabled(form.getMode().equals(FormMode.VIEW));
		form.lyrTabs().tabOutpatientCoding().setHeaderEnabled(form.getMode().equals(FormMode.VIEW));

		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentRCVo() != null);
		form.btnEdit().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getCurrentRCVo() != null);

		form.btnClose().setVisible(engine.isDialog() && form.getMode().equals(FormMode.VIEW));
		form.btnViewPatCodingRecords().setVisible(FormMode.VIEW.equals(form.getMode()) && Boolean.TRUE.equals(domain.hasPatientMoreReferralCodings(domain.getPatientRef(form.getGlobalContext().RefMan.getCatsReferral()), form.getLocalContext().getCurrentRCVo()))); //WDEV-19610
	}

	private void updateControlsStateForOutpatientCoding()
	{
		// Diagnoses
		if (form.lyrTabs().tabOutpatientCoding().grdDiag().getSelectedRow() != null && isDiagNotAlreadyCoded(form.lyrTabs().tabOutpatientCoding().grdDiag().getSelectedRow().getValue()))
		{
			form.getContextMenus().getLIPNewItem().setVisible(form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue() != null);
			form.getContextMenus().getLIPNewItem().setText("Add for coding");
		}

		// Procedures
		form.getContextMenus().RefMan.getReferralCodingProcedureMenuADD_CODINGItem().setVisible(form.lyrTabs().tabOutpatientCoding().grdProc().getSelectedRow() != null && form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue() != null && isProcNotAlreadyCoded(form.lyrTabs().tabOutpatientCoding().grdProc().getSelectedRow().getValue()));
		form.getContextMenus().RefMan.getReferralCodingProcedureMenuNEW_SFSItem().setVisible(false);

		// Coding Items
		boolean rowSelected = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getSelectedRow() != null;

		form.getContextMenus().RefMan.getReferralCodingMOVE_UPItem().setVisible(rowSelected && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().canMoveCurrentUp());
		form.getContextMenus().RefMan.getReferralCodingMOVE_UPItem().setEnabled(rowSelected && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().canMoveCurrentUp());
		form.getContextMenus().RefMan.getReferralCodingMOVE_DOWNItem().setVisible(rowSelected && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().canMoveCurrentDown());
		form.getContextMenus().RefMan.getReferralCodingMOVE_DOWNItem().setEnabled(rowSelected && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().canMoveCurrentDown());

		form.getContextMenus().RefMan.getReferralCodingREMOVEItem().setVisible(rowSelected);
		form.getContextMenus().RefMan.getReferralCodingREMOVEItem().setEnabled(rowSelected);

		boolean showAddMenuItem = form.lyrTabs().tabOutpatientCoding().grdInv().getSelectedRow() != null && form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue() != null && isInvNotAlreadyCoded(form.lyrTabs().tabOutpatientCoding().grdInv().getSelectedRow().getValue());

		form.getContextMenus().RefMan.getReferralCodingInvestigationMenuADD_CODINGItem().setVisible(showAddMenuItem);

	}

	private boolean isInvNotAlreadyCoded(OrderInvestigationLiteVo investigation)
	{
		if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColInvVo() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColInvVo().getID_OrderInvestigationIsNotNull() && investigation.getID_OrderInvestigation().equals(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColInvVo().getID_OrderInvestigation()))
					return false;
			}
		}

		return true;
	}

	private void updateControlsStateForInpatientCoding()
	{
		// Diagnoses
		if (form.lyrTabs().tabInpatientCoding().grdDiagnoses().getSelectedRow() != null && isDiagNotAlreadyCoded(form.lyrTabs().tabInpatientCoding().grdDiagnoses().getSelectedRow().getValue()))
		{
			form.getContextMenus().getLIPNewItem().setVisible(true);

			if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
				form.getContextMenus().getLIPNewItem().setVisible(form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue() != null);

			form.getContextMenus().getLIPNewItem().setText("Add for coding");
		}

		// Procedures
		if (form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow() != null && isProcNotAlreadyCoded(form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow().getValue())) // WDEV-15443
		{
			form.getContextMenus().RefMan.getReferralCodingProcedureMenuADD_CODINGItem().setVisible(true);

			if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
				form.getContextMenus().RefMan.getReferralCodingProcedureMenuADD_CODINGItem().setVisible(form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue() != null && !form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow().getBackColor().equals(Color.Green));

			if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
				form.getContextMenus().RefMan.getReferralCodingProcedureMenuNEW_SFSItem().setVisible(form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow().getBackColor().equals(Color.Green));
		}

		// Coding Items
		boolean rowSelected = form.lyrTabs().tabInpatientCoding().grdCoding().getSelectedRow() != null;

		form.getContextMenus().RefMan.getReferralCodingMOVE_UPItem().setVisible(rowSelected && form.lyrTabs().tabInpatientCoding().grdCoding().canMoveCurrentUp());
		form.getContextMenus().RefMan.getReferralCodingMOVE_UPItem().setEnabled(rowSelected && form.lyrTabs().tabInpatientCoding().grdCoding().canMoveCurrentUp());
		form.getContextMenus().RefMan.getReferralCodingMOVE_DOWNItem().setVisible(rowSelected && form.lyrTabs().tabInpatientCoding().grdCoding().canMoveCurrentDown());
		form.getContextMenus().RefMan.getReferralCodingMOVE_DOWNItem().setEnabled(rowSelected && form.lyrTabs().tabInpatientCoding().grdCoding().canMoveCurrentDown());

		form.getContextMenus().RefMan.getReferralCodingREMOVEItem().setVisible(rowSelected);
		form.getContextMenus().RefMan.getReferralCodingREMOVEItem().setEnabled(rowSelected);

	}

	private boolean findADiagnosisInGrid()
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagVo() != null)
					return true;
			}
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagVo() != null)
					return true;
			}
		}

		return false;
	}

	private boolean findAProcedureInGrid()
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColProcVo() != null)
					return true;
			}
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColProcVo() != null ||
						form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColInvVo() != null) // WDEV-19730
					return true;
			}
		}

		return false;
	}

	private boolean isProcNotAlreadyCoded(PatientProcedureShortWithCareIntraOperativeVo value)
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColProcVo() != null && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColProcVo().getID_PatientProcedureIsNotNull() && value.getID_PatientProcedure().equals(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColProcVo().getID_PatientProcedure()))
					return false;
			}
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColProcVo() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColProcVo().getID_PatientProcedureIsNotNull() && value.getID_PatientProcedure().equals(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColProcVo().getID_PatientProcedure()))
					return false;
			}
		}

		return true;
	}

	private boolean isDiagNotAlreadyCoded(PatientDiagnosisListVo value)
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagVo() != null && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagVo().getID_PatientDiagnosisIsNotNull() && value.getID_PatientDiagnosis().equals(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagVo().getID_PatientDiagnosis()))
					return false;
			}
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagVo() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagVo().getID_PatientDiagnosisIsNotNull() && value.getID_PatientDiagnosis().equals(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagVo().getID_PatientDiagnosis()))
					return false;
			}
		}

		return true;
	}

	@Override
	protected void onGrdCodingGridButtonClicked(int column, grdCodingRow row) throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			{
				if (fillCodingGrid(Boolean.TRUE, form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue()) == false)
					return;
			}
			else
			{
				if (fillCodingGrid(Boolean.TRUE, null) == false)
					return;
			}
		}

		if (column == 4)
			addToCurrentRow(TaxonomyType.ICD10, row);
		else if (column == 6)
			addToCurrentRow(TaxonomyType.OPCS4, row);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().RefMan.ReferralCodingProcedureToSFSAssessmentDialog))
		{
			form.lyrTabs().tabInpatientCoding().grdProcedures().getSelectedRow().setBackColor(Color.LightBlue);
		}
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().Core.TaxonomySearch))
		{
			if (form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyName().equals(TaxonomyType.ICD10))
			{
				if (form.lyrTabs().tabInpatientCoding().isVisible())
				{
					addICD10CodeForInpatient();
				}
				else if (form.lyrTabs().tabOutpatientCoding().isVisible())
				{
					addICD10CodeForOutpatient();
				}

			}
			else if (form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyName().equals(TaxonomyType.OPCS4))
			{
				if (form.lyrTabs().tabInpatientCoding().isVisible())
				{
					addOPCS4CodeForInpatient();
				}
				else if (form.lyrTabs().tabOutpatientCoding().isVisible())
				{
					addOPCS4CodeForOutpatient();
				}
			}
		}

		// WDEV-18539
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().RefMan.SelectPreviousDiagnoses))
		{
			for (int i = 0; form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollectionIsNotNull() && i < form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollection().size(); i++)
			{
				if (isInDiagnosisGrid(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollection().get(i)))
					continue;

				addRowToDiagnosisGrid(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollection().get(i));
			}
		}

		updateControlsState(); // WDEV-17956
	}

	private void addOPCS4CodeForOutpatient()
	{
		grdOutpatientCodingRow rowCoding = null;

		if (form.getLocalContext().getSelectedOutpatientRow() != null)
			rowCoding = form.getLocalContext().getSelectedOutpatientRow();
		else
		{
			rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

			rowCoding.setColDiagProcInv("");
			rowCoding.setTooltipForColDiagProcInv("");
			rowCoding.setColProcVo(null);

			rowCoding.setColEditICDReadOnly(true);
			rowCoding.setColEditOPCSReadOnly(true);

			rowCoding.setBackColor(Color.LightBlue);
			rowCoding.setValue(null);
		}

		rowCoding.setColICD10("");
		rowCoding.setColOPCS4(form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyCode());
		form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().setValue(null);

	}

	private void addOPCS4CodeForInpatient()
	{
		grdCodingRow rowCoding = null;
		if (form.getLocalContext().getSelectedInpatientRow() != null)
			rowCoding = form.getLocalContext().getSelectedInpatientRow();
		else
		{
			rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().newRow();

			rowCoding.setColDiagProc("");
			rowCoding.setTooltipForColDiagProc("");
			rowCoding.setColProcVo(null);

			rowCoding.setColEditICDReadOnly(true);
			rowCoding.setColEditOPCSReadOnly(true);

			rowCoding.setBackColor(Color.LightBlue);
			rowCoding.setValue(null);
		}
		rowCoding.setColICD10("");
		rowCoding.setColOPCS4(form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyCode());
		form.lyrTabs().tabInpatientCoding().grdCoding().setValue(null);
	}

	private void addICD10CodeForOutpatient()
	{
		grdOutpatientCodingRow rowCoding = null;

		if (form.getLocalContext().getSelectedOutpatientRow() != null)
			rowCoding = form.getLocalContext().getSelectedOutpatientRow();
		else
		{
			rowCoding = form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().newRow();

			rowCoding.setColDiagProcInv("");
			rowCoding.setTooltipForColDiagProcInv("");
			rowCoding.setColDiagVo(null);
			rowCoding.setColEditICDReadOnly(true);
			rowCoding.setColEditOPCSReadOnly(true);

			rowCoding.setBackColor(Color.Orange);
			rowCoding.setValue(null);
		}

		rowCoding.setColOPCS4("");
		rowCoding.setColICD10(form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyCode());
		form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().setValue(null);

	}

	private void addICD10CodeForInpatient()
	{
		grdCodingRow rowCoding = null;

		if (form.getLocalContext().getSelectedInpatientRow() != null)
			rowCoding = form.getLocalContext().getSelectedInpatientRow();
		else
		{
			rowCoding = form.lyrTabs().tabInpatientCoding().grdCoding().getRows().newRow();

			rowCoding.setColDiagProc("");
			rowCoding.setTooltipForColDiagProc("");
			rowCoding.setColDiagVo(null);
			rowCoding.setColEditICDReadOnly(true);
			rowCoding.setColEditOPCSReadOnly(true);

			rowCoding.setBackColor(Color.Orange);
			rowCoding.setValue(null);
		}

		rowCoding.setColOPCS4("");
		rowCoding.setColICD10(form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyCode());
		form.lyrTabs().tabInpatientCoding().grdCoding().setValue(null);
	}

	// WDEV-18539
	private boolean isInDiagnosisGrid(PatientDiagnosisListVo patientDiagnosisListVo)
	{
		for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdDiagnoses().getRows().size(); i++)
		{
			if (patientDiagnosisListVo.equals(form.lyrTabs().tabInpatientCoding().grdDiagnoses().getRows().get(i).getValue()))
				return true;
		}

		return false;
	}

	// WDEV-18539
	private void addRowToDiagnosisGrid(PatientDiagnosisListVo patientDiagnosisListVo)
	{
		if (patientDiagnosisListVo == null)
			return;

		grdDiagnosesRow row = form.lyrTabs().tabInpatientCoding().grdDiagnoses().getRows().newRow();

		row.setColDiag(patientDiagnosisListVo.getDiagnosisDescription());
		row.setTooltipForColDiag(patientDiagnosisListVo.getDiagnosisDescription());

		row.setColDate(patientDiagnosisListVo.getDiagnosedDate() != null ? patientDiagnosisListVo.getDiagnosedDate().toString() : "");
		row.setTooltipForColDate(patientDiagnosisListVo.getDiagnosedDate() != null ? patientDiagnosisListVo.getDiagnosedDate().toString() : "");

		row.setColPrimary(isPrimaryDiagnosisActive(patientDiagnosisListVo) ? form.getImages().Core.Pin : null);

		row.setColPMH(patientDiagnosisListVo.getIsPMHIsNotNull() && patientDiagnosisListVo.getIsPMH() ? form.getImages().Core.Add : null);

		row.setBackColor(Color.Orange);

		row.setValue(patientDiagnosisListVo);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue() && form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue() != null)
				populateInpatientCoding(domain.getReferralCoding(null, form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue()));
			else
				populateInpatientCoding(null);
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			populateOutpatientCodingTab(form.getLocalContext().getCurrentRCVo());
		}

		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{

		if (form.lyrTabs().tabInpatientCoding().isVisible())
		{
			saveInpatientCodingTab();
		}
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
		{
			saveOutpatientCodingTab();
		}

	}

	private void saveOutpatientCodingTab()
	{
		if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size() == 0)
		{
			engine.showMessage("No records to save. Please enter some records in the Coding Grid and save again.");
			return;
		}

		if (form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue() == null)
		{
			engine.showMessage("You need to choose an Appointment to save this Coding record against.");
			return;
		}

		StringBuffer sb = new StringBuffer();

		for (int i = 0; form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size() > 0 && i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
		{
			if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getBackColor().equals(Color.Orange) && (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColICD10() == null || (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColICD10() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColICD10().toString().trim().equals(""))))
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv().toString().length() > 0)
					sb.append("Please enter a ICD10 code for the '" + form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv() + "' Diagnosis.");
				else
					sb.append("Please enter a ICD10 code for the row with a missing value for Diagnosis.");
				sb.append("\n");
			}

			if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getBackColor().equals(Color.LightBlue) && (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4() == null || (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4().toString().trim().equals(""))))
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv().toString().length() > 0)
					sb.append("Please enter a OPCS4 code for the '" + form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv() + "' Procedure.");
				else
					sb.append("Please enter a OPCS4 code for the row with a missing value for Procedure.");
				sb.append("\n");
			}

			if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getBackColor().equals(Color.LightYellow) && (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4() == null || (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4().toString().trim().equals(""))))
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv().toString().length() > 0)
					sb.append("Please enter a OPCS4 code for the '" + form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv() + "' Investigation.");
				else
					sb.append("Please enter a OPCS4 code for the row with a missing value for Investigation.");
				sb.append("\n");
			}

			if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4().toString().trim().length() > 0 && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColICD10() != null && form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColICD10().toString().trim().length() > 0)
			{
				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getBackColor().equals(Color.LightBlue))
				{
					if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv().toString().length() > 0)
						sb.append("You should not have a ICD10 code for '" + form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv() + "' Procedure.");
					else
						sb.append("You should not have a ICD10 code for a Procedure.");
					sb.append("\n");
				}

				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getBackColor().equals(Color.LightYellow))
				{
					if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv().toString().length() > 0)
						sb.append("You should not have a ICD10 code for '" + form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv() + "' Investigation.");
					else
						sb.append("You should not have a ICD10 code for an Investigation.");
					sb.append("\n");
				}

				if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getBackColor().equals(Color.Orange))
				{
					if (form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv().toString().length() > 0)
						sb.append("You should not have a OPCS4 code for '" + form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagProcInv() + "' Diagnosis.");
					else
						sb.append("You should not have a OPCS4 code for a Diagnosis.");
				}
			}
		}
		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString(), "Warning", MessageButtons.OK, MessageIcon.WARNING); // WDEV-15364
			return;
		}

		if (save())
			populateOutpatientCodingTab(form.getLocalContext().getCurrentRCVo());

	}

	private void saveInpatientCodingTab()
	{
		if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size() == 0)
		{
			engine.showMessage("No records to save. Please enter some records in the Coding Grid and save again.");
			return;
		}

		if (ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue() && form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue() == null)
		{
			engine.showMessage("You need to choose an Admission to save this Coding record against.");
			return;
		}

		StringBuffer sb = new StringBuffer();

		for (int i = 0; form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size() > 0 && i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
		{
			if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getBackColor().equals(Color.Orange) && (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColICD10() == null || (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColICD10() != null && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColICD10().toString().trim().equals(""))))
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc().toString().length() > 0)
					sb.append("Please enter a ICD10 code for the '" + form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc() + "' Diagnosis.");
				else
					sb.append("Please enter a ICD10 code for the row with a missing value for Diagnosis.");
				sb.append("\n");
			}

			if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getBackColor().equals(Color.LightBlue) && (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColOPCS4() == null || (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColOPCS4() != null && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColOPCS4().toString().trim().equals(""))))
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc().toString().length() > 0)
					sb.append("Please enter a OPCS4 code for the '" + form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc() + "' Procedure.");
				else
					sb.append("Please enter a OPCS4 code for the row with a missing value for Procedure.");
				sb.append("\n");
			}
			if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColOPCS4() != null && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColOPCS4().toString().trim().length() > 0 && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColICD10() != null && form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColICD10().toString().trim().length() > 0)
			{
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getBackColor().equals(Color.LightBlue))
				{
					if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc().toString().length() > 0)
						sb.append("You should not have a ICD10 code for '" + form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc() + "' Procedure.");
					else
						sb.append("You should not have a ICD10 code for a Procedure.");
					sb.append("\n"); // WDEV-15364
				}
				if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getBackColor().equals(Color.Orange))
				{
					if (form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc().toString().length() > 0)
						sb.append("You should not have a OPCS4 code for '" + form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagProc() + "' Diagnosis.");
					else
						sb.append("You should not have a OPCS4 code for a Diagnosis.");
				}
			}
		}
		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString(), "Warning", MessageButtons.OK, MessageIcon.WARNING); // WDEV-15364
			return;
		}

		if (save())
			populateInpatientCoding(form.getLocalContext().getCurrentRCVo());
	}

	private Boolean save()
	{
		ReferralCodingVo voRc = null;

		if (form.lyrTabs().tabInpatientCoding().isVisible())
			voRc = populateInpatientReferralCodingFromScreen();
		else if (form.lyrTabs().tabOutpatientCoding().isVisible())
			voRc = populateOutpatientReferralCodingFromScreen();

		if (voRc != null)
		{
			String[] error = voRc.validate();
			if (error != null)
			{
				engine.showErrors(error);
				return false;
			}

			try
			{
				voRc = domain.saveReferralCoding(voRc, form.getGlobalContext().RefMan.getDischargedEpisodeForReferralCoding());
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				populateInpatientCoding(null);
				return false;
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				populateInpatientCoding(null);
				return false;
			}

			form.getLocalContext().setCurrentRCVo(voRc);
		}

		return true;
	}

	private ReferralCodingVo populateOutpatientReferralCodingFromScreen()
	{
		ReferralCodingVo voRC = form.getLocalContext().getCurrentRCVo();

		if (voRC == null)
			voRC = new ReferralCodingVo();

		if (voRC.getCatsReferral() == null)
			voRC.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (voRC.getAuthoringDateTime() == null)
			voRC.setAuthoringDateTime(new DateTime());

		if (voRC.getAuthoringMOS() == null)
		{
			MemberOfStaffLiteVo mosVo = new MemberOfStaffLiteVo();
			mosVo.setID_MemberOfStaff(((IMos) domain.getMosUser()).getIMosId());
			voRC.setAuthoringMOS(mosVo);
		}

		voRC.setActive(form.lyrTabs().tabOutpatientCoding().chkOutpatientActive().getValue());

		if (voRC.getPasEvent() == null)
			voRC.setAppointment(form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue());

		ReferralCodingItemVoCollection voColl = new ReferralCodingItemVoCollection();

		for (int i = 0; i < form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().size(); i++)
		{
			ReferralCodingItemVo voItem = new ReferralCodingItemVo();

			voItem.setPatientDiagnosis(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColDiagVo());
			voItem.setPatientProcedure(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColProcVo());
			voItem.setInvestigation(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColInvVo());
			voItem.setICD10(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColICD10());
			voItem.setOPCS4(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColOPCS4());
			voItem.setProcLaterality(form.lyrTabs().tabOutpatientCoding().grdOutpatientCoding().getRows().get(i).getColLaterality());

			voColl.add(voItem);
		}

		voRC.setCodingItems(voColl);

		voRC.setComments(form.lyrTabs().tabOutpatientCoding().txtOutpatientComments().getValue());
		form.getLocalContext().setCurrentRCVo(voRC);

		return voRC;

	}

	private ReferralCodingVo populateInpatientReferralCodingFromScreen()
	{
		ReferralCodingVo voRC = form.getLocalContext().getCurrentRCVo();

		if (voRC == null)
			voRC = new ReferralCodingVo();

		if (voRC.getCatsReferral() == null)
			voRC.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (voRC.getAuthoringDateTime() == null)
			voRC.setAuthoringDateTime(new DateTime());

		if (voRC.getAuthoringMOS() == null)
		{
			MemberOfStaffLiteVo mosVo = new MemberOfStaffLiteVo();
			mosVo.setID_MemberOfStaff(((IMos) domain.getMosUser()).getIMosId());
			voRC.setAuthoringMOS(mosVo);
		}

		voRC.setActive(form.lyrTabs().tabInpatientCoding().chkInpatientActive().getValue());

		if (voRC.getPasEvent() == null)
			voRC.setPasEvent(form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue());

		ReferralCodingItemVoCollection voColl = new ReferralCodingItemVoCollection();
		for (int i = 0; i < form.lyrTabs().tabInpatientCoding().grdCoding().getRows().size(); i++)
		{
			ReferralCodingItemVo voItem = new ReferralCodingItemVo();

			voItem.setPatientDiagnosis(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColDiagVo());
			voItem.setPatientProcedure(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColProcVo());
			voItem.setICD10(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColICD10());
			voItem.setOPCS4(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColOPCS4());
			voItem.setProcLaterality(form.lyrTabs().tabInpatientCoding().grdCoding().getRows().get(i).getColLaterality());

			voColl.add(voItem);
		}

		voRC.setCodingItems(voColl);

		voRC.setComments(form.lyrTabs().tabInpatientCoding().txtComments().getValue());// WDEV-18539
		form.getLocalContext().setCurrentRCVo(voRC);

		return voRC;
	}

	@Override
	protected void onFormModeChanged()
	{
		if (form.lyrTabs().tabInpatientCoding().isVisible() && ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			form.lyrTabs().tabInpatientCoding().cmbPasEvents().setEnabled(!form.getMode().equals(FormMode.EDIT));

		updateControlsState();
	}

	@Override
	protected void onCmbPasEventsValueChanged() throws PresentationLogicException
	{

		fillCodingGrid(Boolean.FALSE, form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue());

		form.lyrTabs().tabInpatientCoding().cmbPasEvents().setRequired(form.lyrTabs().tabInpatientCoding().cmbPasEvents().getValue() == null);

		form.setMode(FormMode.VIEW);
	}

	// wdev-18539
	@Override
	protected void onBtnPreviousDiagnosisClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setSelectedPatientDiagnosisListVoCollection(null);
		PatientRefVo patientRef = domain.getPatientRef(form.getGlobalContext().RefMan.getCatsReferral());
		engine.open(form.getForms().RefMan.SelectPreviousDiagnoses, new Object[] { form.getLocalContext().getCurrentCareContext(), patientRef });
	}

	// WDEV-18542
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onlyrTabsTabChanged(LayerBridge tab)
	{
		form.getLocalContext().setCurrentRCVo(null);

		if (tab.equals(form.lyrTabs().tabInpatientCoding()))
		{
			populateInpatientCoding(form.getLocalContext().getCurrentRCVo());
		}
		else if (tab.equals(form.lyrTabs().tabOutpatientCoding()))
		{
			populateOutpatientCodingTab(form.getLocalContext().getCurrentRCVo());
		}

	}

	private void populateOutpatientCodingTab(ReferralCodingVo voRc)
	{
		populateAppointmentsCombo();

		populateOutpatientDiagnosesGrid();
		populateOutpatientProceduresGrid();
		populateOutpatientInvestigationsGrid();

		form.setMode(FormMode.VIEW);
	}

	private void populateOutpatientInvestigationsGrid()
	{
		form.lyrTabs().tabOutpatientCoding().grdInv().getRows().clear();

		OrderInvestigationLiteVoCollection voCollInvs = domain.listResultedRadiologyInvForReferral(form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getCurrentRCVo());

		List alreadyAddedInvestigationsIDs = domain.getAlreadyAddedInvestigationsIDs(form.getGlobalContext().RefMan.getCatsReferral());

		if (voCollInvs != null)
		{
			for (int i = 0; i < voCollInvs.size(); i++)
			{

				grdInvRow row = form.lyrTabs().tabOutpatientCoding().grdInv().getRows().newRow();

				if (voCollInvs.get(i).getRepDateTime() != null)
					row.setColDate(voCollInvs.get(i).getRepDateTime().toString());

				if (voCollInvs.get(i).getInvestigation() != null && voCollInvs.get(i).getInvestigation().getInvestigationIndex() != null)
				{
					row.setColInvestigation(voCollInvs.get(i).getInvestigation().getInvestigationIndex().getName());
					row.setTooltipForColInvestigation(row.getColInvestigation());
				}

				if (alreadyAddedInvestigationsIDs != null && alreadyAddedInvestigationsIDs.contains(voCollInvs.get(i).getID_OrderInvestigation()))
				{
					row.setBackColor(Color.Red);
					row.setSelectable(false);
				}
				else
					row.setBackColor(Color.LightYellow);
				
				row.setValue(voCollInvs.get(i));
			}
		}
	}

	private void populateAppointmentsCombo()
	{
		form.lyrTabs().tabOutpatientCoding().cmbAppointments().clear();

		BookingAppointmentOutpatientCodingVoCollection appointments = domain.getSeenAppointmentsForReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (appointments == null || appointments.size() == 0)
			return;

		for (int i = 0; i < appointments.size(); i++)
		{
			BookingAppointmentOutpatientCodingVo appointment = appointments.get(i);

			StringBuffer sb = new StringBuffer();

			sb.append(appointment.getAppointmentDate() != null ? appointment.getAppointmentDate().toString() : "");
			sb.append(appointment.getApptStartTime() != null ? " " + appointment.getApptStartTime().toString() : "");
			sb.append(appointment.getSession() != null && appointment.getSession().getName() != null ? " - " + appointment.getSession().getName() : "");

			form.lyrTabs().tabOutpatientCoding().cmbAppointments().newRow(appointment, sb.toString());
		}

		form.lyrTabs().tabOutpatientCoding().cmbAppointments().setValue(form.getLocalContext().getSelectedAppointment());

		populateOutpatientCodingGrid(Boolean.FALSE, form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue());
	}

	private void populateOutpatientProceduresGrid()
	{
		form.lyrTabs().tabOutpatientCoding().grdProc().getRows().clear();

		PatientProcedureShortWithCareIntraOperativeVoCollection voCollProcedures = domain.listOutpatientCodingProceduresForReferral(form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getCurrentCareContext());

		List alreadyAddedProceduresIDs = domain.getAlreadyAddedProceduresIDs(form.getGlobalContext().RefMan.getCatsReferral());

		if (voCollProcedures != null)
		{
			for (int i = 0; i < voCollProcedures.size(); i++)
			{
				grdProcRow row = form.lyrTabs().tabOutpatientCoding().grdProc().getRows().newRow();

				if (voCollProcedures.get(i).getProcDateIsNotNull())
					row.setColDate(voCollProcedures.get(i).getProcDate().toString());

				if (voCollProcedures.get(i).getProcedure() != null)
				{
					row.setColProc(voCollProcedures.get(i).getProcedure().getProcedureName());
					row.setTooltipForColProc(voCollProcedures.get(i).getProcedure().getProcedureName());
				}
				else if (voCollProcedures.get(i).getProcedureDescriptionIsNotNull())
				{
					row.setColProc(voCollProcedures.get(i).getProcedureDescription());
					row.setTooltipForColProc(voCollProcedures.get(i).getProcedureDescription());
				}

				if (voCollProcedures.get(i).getInfoSourceIsNotNull() && !voCollProcedures.get(i).getInfoSource().equals(SourceofInformation.CLINICALCONTACT))
					row.setColPMH(form.getImages().Core.Add);
				else
					row.setColPMH(null);

				if (alreadyAddedProceduresIDs != null && alreadyAddedProceduresIDs.contains(voCollProcedures.get(i).getID_PatientProcedure()))
				{
					row.setBackColor(Color.Red);
					row.setSelectable(false);
				}
				else
					row.setBackColor(Color.LightBlue);

				row.setValue(voCollProcedures.get(i));
			}
		}
	}

	private void populateOutpatientDiagnosesGrid()
	{
		form.lyrTabs().tabOutpatientCoding().grdDiag().getRows().clear();

		PatientDiagnosisListVoCollection voCollDiags = domain.listDiagnosisComplicationsForReferral(form.getLocalContext().getCurrentCareContext());

		if (voCollDiags != null)
		{
			for (int i = 0; i < voCollDiags.size(); i++)
			{
				grdDiagRow row = form.lyrTabs().tabOutpatientCoding().grdDiag().getRows().newRow();

				if (voCollDiags.get(i).getDiagnosedDateIsNotNull())
					row.setColDate(voCollDiags.get(i).getDiagnosedDate().toString());

				if (voCollDiags.get(i).getDiagnosisDescriptionIsNotNull())
				{
					row.setColDiag(voCollDiags.get(i).getDiagnosisDescription());
					row.setTooltipForColDiag(voCollDiags.get(i).getDiagnosisDescription());
				}

				if (voCollDiags.get(i).getDiagnosisDescriptionIsNotNull())
					row.setColDiag(voCollDiags.get(i).getDiagnosisDescription());

				row.setColPrimary(isPrimaryDiagnosisActive(voCollDiags.get(i)) ? form.getImages().Core.Pin : null);

				if (voCollDiags.get(i).getIsPMHIsNotNull() && voCollDiags.get(i).getIsPMH())
					row.setColPMH(form.getImages().Core.Add);
				else
					row.setColPMH(null);

				row.setBackColor(Color.Orange);

				row.setValue(voCollDiags.get(i));
			}
		}
	}

	@Override
	protected void onGrdInvSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onGrdProcSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdOutpatientCodingSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onGrdDiagSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();

	}

	@Override
	protected void onCmbAppointmentsValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedAppointment(form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue());

		populateOutpatientCodingGrid(Boolean.FALSE, form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue());

		populateOutpatientDiagnosesGrid();
		populateOutpatientProceduresGrid();
		populateOutpatientInvestigationsGrid();

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			addProceduresForAppointment();
		}

		updateControlsState();

	}

	private void populateOutpatientCodingGrid(Boolean showMessage, BookingAppointmentOutpatientCodingVo appointment)
	{
		populateCodingGrid(showMessage, null, appointment);

	}

	@Override
	protected void onGrdOutpatientCodingGridButtonClicked(int column, grdOutpatientCodingRow row) throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (populateCodingGrid(Boolean.TRUE, null, form.lyrTabs().tabOutpatientCoding().cmbAppointments().getValue()) == false)
				return;
		}

		if (column == OutpatientICD10Column)
			addToCurrentOutpatientRow(TaxonomyType.ICD10, row);
		else if (column == OutpatientOPCS4Column)
			addToCurrentOutpatientRow(TaxonomyType.OPCS4, row);

	}

	private void addToCurrentOutpatientRow(TaxonomyType type, grdOutpatientCodingRow row)
	{
		TaxonomyMap voTaxonomy = new TaxonomyMap();
		voTaxonomy.setTaxonomyName(type);
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomy);

		form.getGlobalContext().Core.setTaxonomySearchForName(row.getColDiagProcInv());

		form.getLocalContext().setSelectedOutpatientRow(row);
		engine.open(form.getForms().Core.TaxonomySearch);
		form.setMode(FormMode.EDIT);

	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

	}

	//WDEV-19610
	@Override
	protected void onBtnViewPatCodingRecordsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ViewPatientCodingRecords, new Object[]  {form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getCurrentRCVo()});
	}

}
