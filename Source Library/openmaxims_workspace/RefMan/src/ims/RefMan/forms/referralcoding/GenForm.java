//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referralcoding;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabInpatientCodingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPasEventsComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.PasEventShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.PasEventShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.PasEventShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.PasEventShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.PasEventShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.PasEventShortVo getValue()
				{
					return (ims.core.vo.PasEventShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.PasEventShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdProceduresRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProceduresRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProcReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProcReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProcOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProc(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProc()
				{
					return (String)super.row.get(1);
				}
				public void setColProc(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProcTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPMHReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPMHReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPMHOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPMH(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getColPMH()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColPMH(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColPMHTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getValue()
				{
					return (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProceduresRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProceduresRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProceduresRow get(int index)
				{
					return new grdProceduresRow(super.collection.get(index));
				}
				public grdProceduresRow newRow()
				{
					return new grdProceduresRow(super.collection.newRow());
				}
				public grdProceduresRow newRow(boolean autoSelect)
				{
					return new grdProceduresRow(super.collection.newRow(autoSelect));
				}
				public grdProceduresRow newRowAt(int index)
				{
					return new grdProceduresRow(super.collection.newRowAt(index));
				}
				public grdProceduresRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProceduresRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProceduresGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection getValues()
				{
					ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection listOfValues = new ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getValue()
				{
					return (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					super.grid.setValue(value);
				}
				public grdProceduresRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProceduresRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProceduresRowCollection getRows()
				{
					return new grdProceduresRowCollection(super.grid.getRows());
				}
				public grdProceduresRow getRowByValue(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProceduresRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProcHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProcHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPMHHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPMHHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdCodingRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdCodingRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiagProcReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiagProcReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiagProcOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDiagProc(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDiagProc()
				{
					return (String)super.row.get(0);
				}
				public void setColDiagProc(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiagProcTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDiagVoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDiagVoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDiagVoOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDiagVo(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.PatientDiagnosisShortVo getColDiagVo()
				{
					return (ims.core.vo.PatientDiagnosisShortVo)super.row.get(1);
				}
				public void setColDiagVo(ims.core.vo.PatientDiagnosisShortVo value)
				{
					super.row.set(1, value);
				}
				public void setCellColDiagVoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColProcVoReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColProcVoReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColProcVoOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColProcVo(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getColProcVo()
				{
					return (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)super.row.get(2);
				}
				public void setColProcVo(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					super.row.set(2, value);
				}
				public void setCellColProcVoTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColICD10ReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColICD10ReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColICD10Opened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColICD10(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColICD10()
				{
					return (String)super.row.get(3);
				}
				public void setColICD10(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColICD10Tooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColEditICDReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColEditICDReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColEditICDOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColEditICD(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.framework.utils.Image getColEditICD()
				{
					return (ims.framework.utils.Image)super.row.get(4);
				}
				public void setColEditICD(ims.framework.utils.Image value)
				{
					super.row.set(4, value);
				}
				public void setCellColEditICDTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColOPCS4ReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColOPCS4ReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColOPCS4Opened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColOPCS4(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColOPCS4()
				{
					return (String)super.row.get(5);
				}
				public void setColOPCS4(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColOPCS4Tooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColEditOPCSReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColEditOPCSReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColEditOPCSOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColEditOPCS(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.framework.utils.Image getColEditOPCS()
				{
					return (ims.framework.utils.Image)super.row.get(6);
				}
				public void setColEditOPCS(ims.framework.utils.Image value)
				{
					super.row.set(6, value);
				}
				public void setCellColEditOPCSTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColLateralityReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColLateralityReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColLateralityOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColLaterality(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.core.vo.lookups.LateralityLRB getColLaterality()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.row.get(7);
				}
				public void setColLaterality(ims.core.vo.lookups.LateralityLRB value)
				{
					super.row.set(7, value, true);
				}
				public void setCellColLateralityTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.RefMan.vo.ReferralCodingItemVo getValue()
				{
					return (ims.RefMan.vo.ReferralCodingItemVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.ReferralCodingItemVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdCodingRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdCodingRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdCodingRow get(int index)
				{
					return new grdCodingRow(super.collection.get(index));
				}
				public grdCodingRow newRow()
				{
					return new grdCodingRow(super.collection.newRow());
				}
				public grdCodingRow newRow(boolean autoSelect)
				{
					return new grdCodingRow(super.collection.newRow(autoSelect));
				}
				public grdCodingRow newRowAt(int index)
				{
					return new grdCodingRow(super.collection.newRowAt(index));
				}
				public grdCodingRow newRowAt(int index, boolean autoSelect)
				{
					return new grdCodingRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdCodingGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.RefMan.vo.ReferralCodingItemVoCollection getValues()
				{
					ims.RefMan.vo.ReferralCodingItemVoCollection listOfValues = new ims.RefMan.vo.ReferralCodingItemVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.ReferralCodingItemVo getValue()
				{
					return (ims.RefMan.vo.ReferralCodingItemVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.ReferralCodingItemVo value)
				{
					super.grid.setValue(value);
				}
				public grdCodingRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdCodingRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdCodingRowCollection getRows()
				{
					return new grdCodingRowCollection(super.grid.getRows());
				}
				public grdCodingRow getRowByValue(ims.RefMan.vo.ReferralCodingItemVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdCodingRow(row);
				}
				public void setColDiagProcHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiagProcHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDiagVoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDiagVoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColProcVoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColProcVoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColICD10HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColICD10HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColEditICDHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColEditICDHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColOPCS4HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColOPCS4HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColEditOPCSHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColEditOPCSHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColLateralityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColLateralityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public GridComboBox ColLateralityComboBox()
				{
					return new GridComboBox(super.grid, 7);
				}
			}
			public static class grdDiagnosesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagnosesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDiagReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDiagReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDiagOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDiag(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColDiag()
				{
					return (String)super.row.get(1);
				}
				public void setColDiag(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDiagTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPrimaryReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPrimaryReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPrimaryOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPrimary(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getColPrimary()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColPrimary(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColPrimaryTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColPMHReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColPMHReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColPMHOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColPMH(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.framework.utils.Image getColPMH()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColPMH(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColPMHTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.core.vo.PatientDiagnosisListVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisListVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagnosesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagnosesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagnosesRow get(int index)
				{
					return new grdDiagnosesRow(super.collection.get(index));
				}
				public grdDiagnosesRow newRow()
				{
					return new grdDiagnosesRow(super.collection.newRow());
				}
				public grdDiagnosesRow newRow(boolean autoSelect)
				{
					return new grdDiagnosesRow(super.collection.newRow(autoSelect));
				}
				public grdDiagnosesRow newRowAt(int index)
				{
					return new grdDiagnosesRow(super.collection.newRowAt(index));
				}
				public grdDiagnosesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagnosesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagnosesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.PatientDiagnosisListVoCollection getValues()
				{
					ims.core.vo.PatientDiagnosisListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientDiagnosisListVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisListVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisListVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiagnosesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagnosesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagnosesRowCollection getRows()
				{
					return new grdDiagnosesRowCollection(super.grid.getRows());
				}
				public grdDiagnosesRow getRowByValue(ims.core.vo.PatientDiagnosisListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagnosesRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDiagHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDiagHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPrimaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPrimaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColPMHHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColPMHHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 840, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Referral Coding", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 328, 433, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 336, 87, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording User:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 336, 61, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording Date / Time:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 336, 36, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 309, 144, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Previous Diagnosis", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 328, 450, 496, 110, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 448, 85, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 448, 60, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 448, 34, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbPasEventsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPasEventsTemp);
				cmbPasEventsComboBox cmbPasEvents = (cmbPasEventsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPasEventsComboBox.class, m_cmbPasEventsTemp);
				super.addComboBox(cmbPasEvents);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 336, 110, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 336, 312, 224, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralCodingProcedureMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProceduresTemp);
				grdProceduresGrid grdProcedures = (grdProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresGrid.class, m_grdProceduresTemp);
				grdProcedures.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProcedures.addStringColumn("Procedure", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProcedures.addImageColumn("PMH", 0, 0, -1, true, 0);
				super.addGrid(grdProcedures);
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 328, 132, 496, 300, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdCodingTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralCoding, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdCodingTemp);
				grdCodingGrid grdCoding = (grdCodingGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCodingGrid.class, m_grdCodingTemp);
				grdCoding.addStringColumn("Diagnosis/Procedure", 0, 0, 240, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCoding.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCoding.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCoding.addStringColumn("ICD10", 0, 0, 60, false, false, 0, 25, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCoding.addButtonColumn(" ", 0, 0, 24, false, true);
				grdCoding.addStringColumn("OPCS4", 0, 0, 60, true, false, 0, 25, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCoding.addButtonColumn(" ", 0, 0, 24, false, true);
				grdCoding.addComboBoxColumn("Laterality", 0, 0, -1, false, true, false, false, true, -1);
				super.addGrid(grdCoding);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 36, 312, 270, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdDiagnosesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagnosesTemp);
				grdDiagnosesGrid grdDiagnoses = (grdDiagnosesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosesGrid.class, m_grdDiagnosesTemp);
				grdDiagnoses.addStringColumn("Date", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnoses.addStringColumn("Diagnosis", 0, 0, 135, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnoses.addImageColumn("Primary", 0, 0, 53, true, 0);
				grdDiagnoses.addImageColumn("PMH", 0, 0, -1, true, 0);
				super.addGrid(grdDiagnoses);
			}

			public Label lblComments()
			{
				return (Label)super.getControl(1);
			}
			public Label lblPASEvent()
			{
				return (Label)super.getControl(4);
			}
			public Button btnPreviousDiagnosis()
			{
				return (Button)super.getControl(5);
			}
			public TextBox txtComments()
			{
				return (TextBox)super.getControl(6);
			}
			public TextBox txtMOS()
			{
				return (TextBox)super.getControl(7);
			}
			public DateTimeControl dtimRec()
			{
				return (DateTimeControl)super.getControl(8);
			}
			public cmbPasEventsComboBox cmbPasEvents()
			{
				return (cmbPasEventsComboBox)super.getComboBox(0);
			}
			public CheckBox chkInpatientActive()
			{
				return (CheckBox)super.getControl(10);
			}
			public grdProceduresGrid grdProcedures()
			{
				return (grdProceduresGrid)super.getGrid(0);
			}
			public grdCodingGrid grdCoding()
			{
				return (grdCodingGrid)super.getGrid(1);
			}
			public grdDiagnosesGrid grdDiagnoses()
			{
				return (grdDiagnosesGrid)super.getGrid(2);
			}
		}
		public static class tabOutpatientCodingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAppointmentsComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.BookingAppointmentOutpatientCodingVo getValue()
				{
					return (ims.scheduling.vo.BookingAppointmentOutpatientCodingVo)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdInvRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInvRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColInvestigationReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColInvestigationReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColInvestigationOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColInvestigation(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColInvestigation()
				{
					return (String)super.row.get(1);
				}
				public void setColInvestigation(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColInvestigationTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.ocrr.vo.OrderInvestigationLiteVo getValue()
				{
					return (ims.ocrr.vo.OrderInvestigationLiteVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderInvestigationLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInvRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInvRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInvRow get(int index)
				{
					return new grdInvRow(super.collection.get(index));
				}
				public grdInvRow newRow()
				{
					return new grdInvRow(super.collection.newRow());
				}
				public grdInvRow newRow(boolean autoSelect)
				{
					return new grdInvRow(super.collection.newRow(autoSelect));
				}
				public grdInvRow newRowAt(int index)
				{
					return new grdInvRow(super.collection.newRowAt(index));
				}
				public grdInvRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInvRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInvGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.OrderInvestigationLiteVoCollection getValues()
				{
					ims.ocrr.vo.OrderInvestigationLiteVoCollection listOfValues = new ims.ocrr.vo.OrderInvestigationLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.OrderInvestigationLiteVo getValue()
				{
					return (ims.ocrr.vo.OrderInvestigationLiteVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderInvestigationLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdInvRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInvRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInvRowCollection getRows()
				{
					return new grdInvRowCollection(super.grid.getRows());
				}
				public grdInvRow getRowByValue(ims.ocrr.vo.OrderInvestigationLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInvRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColInvestigationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColInvestigationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdProcRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProcRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProcReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProcReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProcOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProc(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProc()
				{
					return (String)super.row.get(1);
				}
				public void setColProc(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProcTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPMHReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPMHReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPMHOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPMH(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getColPMH()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColPMH(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColPMHTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getValue()
				{
					return (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProcRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProcRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProcRow get(int index)
				{
					return new grdProcRow(super.collection.get(index));
				}
				public grdProcRow newRow()
				{
					return new grdProcRow(super.collection.newRow());
				}
				public grdProcRow newRow(boolean autoSelect)
				{
					return new grdProcRow(super.collection.newRow(autoSelect));
				}
				public grdProcRow newRowAt(int index)
				{
					return new grdProcRow(super.collection.newRowAt(index));
				}
				public grdProcRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProcRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProcGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection getValues()
				{
					ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection listOfValues = new ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getValue()
				{
					return (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					super.grid.setValue(value);
				}
				public grdProcRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProcRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProcRowCollection getRows()
				{
					return new grdProcRowCollection(super.grid.getRows());
				}
				public grdProcRow getRowByValue(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProcRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProcHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProcHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPMHHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPMHHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdOutpatientCodingRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdOutpatientCodingRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiagProcInvReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiagProcInvReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiagProcInvOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDiagProcInv(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDiagProcInv()
				{
					return (String)super.row.get(0);
				}
				public void setColDiagProcInv(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiagProcInvTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDiagVoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDiagVoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDiagVoOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDiagVo(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.PatientDiagnosisShortVo getColDiagVo()
				{
					return (ims.core.vo.PatientDiagnosisShortVo)super.row.get(1);
				}
				public void setColDiagVo(ims.core.vo.PatientDiagnosisShortVo value)
				{
					super.row.set(1, value);
				}
				public void setCellColDiagVoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColProcVoReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColProcVoReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColProcVoOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColProcVo(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getColProcVo()
				{
					return (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)super.row.get(2);
				}
				public void setColProcVo(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
				{
					super.row.set(2, value);
				}
				public void setCellColProcVoTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColInvVoReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColInvVoReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColInvVoOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColInvVo(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.ocrr.vo.OrderInvestigationLiteVo getColInvVo()
				{
					return (ims.ocrr.vo.OrderInvestigationLiteVo)super.row.get(3);
				}
				public void setColInvVo(ims.ocrr.vo.OrderInvestigationLiteVo value)
				{
					super.row.set(3, value);
				}
				public void setCellColInvVoTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColICD10ReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColICD10ReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColICD10Opened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColICD10(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColICD10()
				{
					return (String)super.row.get(4);
				}
				public void setColICD10(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColICD10Tooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColEditICDReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColEditICDReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColEditICDOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColEditICD(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.framework.utils.Image getColEditICD()
				{
					return (ims.framework.utils.Image)super.row.get(5);
				}
				public void setColEditICD(ims.framework.utils.Image value)
				{
					super.row.set(5, value);
				}
				public void setCellColEditICDTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColOPCS4ReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColOPCS4ReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColOPCS4Opened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColOPCS4(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColOPCS4()
				{
					return (String)super.row.get(6);
				}
				public void setColOPCS4(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColOPCS4Tooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColEditOPCSReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColEditOPCSReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColEditOPCSOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColEditOPCS(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.framework.utils.Image getColEditOPCS()
				{
					return (ims.framework.utils.Image)super.row.get(7);
				}
				public void setColEditOPCS(ims.framework.utils.Image value)
				{
					super.row.set(7, value);
				}
				public void setCellColEditOPCSTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColLateralityReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColLateralityReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColLateralityOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColLaterality(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.core.vo.lookups.LateralityLRB getColLaterality()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.row.get(8);
				}
				public void setColLaterality(ims.core.vo.lookups.LateralityLRB value)
				{
					super.row.set(8, value, true);
				}
				public void setCellColLateralityTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.RefMan.vo.ReferralCodingItemVo getValue()
				{
					return (ims.RefMan.vo.ReferralCodingItemVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.ReferralCodingItemVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdOutpatientCodingRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdOutpatientCodingRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdOutpatientCodingRow get(int index)
				{
					return new grdOutpatientCodingRow(super.collection.get(index));
				}
				public grdOutpatientCodingRow newRow()
				{
					return new grdOutpatientCodingRow(super.collection.newRow());
				}
				public grdOutpatientCodingRow newRow(boolean autoSelect)
				{
					return new grdOutpatientCodingRow(super.collection.newRow(autoSelect));
				}
				public grdOutpatientCodingRow newRowAt(int index)
				{
					return new grdOutpatientCodingRow(super.collection.newRowAt(index));
				}
				public grdOutpatientCodingRow newRowAt(int index, boolean autoSelect)
				{
					return new grdOutpatientCodingRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdOutpatientCodingGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.RefMan.vo.ReferralCodingItemVoCollection getValues()
				{
					ims.RefMan.vo.ReferralCodingItemVoCollection listOfValues = new ims.RefMan.vo.ReferralCodingItemVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.ReferralCodingItemVo getValue()
				{
					return (ims.RefMan.vo.ReferralCodingItemVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.ReferralCodingItemVo value)
				{
					super.grid.setValue(value);
				}
				public grdOutpatientCodingRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdOutpatientCodingRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdOutpatientCodingRowCollection getRows()
				{
					return new grdOutpatientCodingRowCollection(super.grid.getRows());
				}
				public grdOutpatientCodingRow getRowByValue(ims.RefMan.vo.ReferralCodingItemVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdOutpatientCodingRow(row);
				}
				public void setColDiagProcInvHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiagProcInvHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDiagVoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDiagVoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColProcVoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColProcVoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColInvVoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColInvVoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColICD10HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColICD10HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColEditICDHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColEditICDHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColOPCS4HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColOPCS4HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColEditOPCSHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColEditOPCSHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColLateralityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColLateralityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public GridComboBox ColLateralityComboBox()
				{
					return new GridComboBox(super.grid, 8);
				}
			}
			public static class grdDiagRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDate(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDiagReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDiagReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDiagOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDiag(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColDiag()
				{
					return (String)super.row.get(1);
				}
				public void setColDiag(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDiagTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPrimaryReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPrimaryReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPrimaryOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPrimary(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getColPrimary()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColPrimary(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColPrimaryTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColPMHReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColPMHReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColPMHOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColPMH(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.framework.utils.Image getColPMH()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColPMH(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColPMHTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.core.vo.PatientDiagnosisListVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisListVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagRow get(int index)
				{
					return new grdDiagRow(super.collection.get(index));
				}
				public grdDiagRow newRow()
				{
					return new grdDiagRow(super.collection.newRow());
				}
				public grdDiagRow newRow(boolean autoSelect)
				{
					return new grdDiagRow(super.collection.newRow(autoSelect));
				}
				public grdDiagRow newRowAt(int index)
				{
					return new grdDiagRow(super.collection.newRowAt(index));
				}
				public grdDiagRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.PatientDiagnosisListVoCollection getValues()
				{
					ims.core.vo.PatientDiagnosisListVoCollection listOfValues = new ims.core.vo.PatientDiagnosisListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientDiagnosisListVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisListVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisListVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiagRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagRowCollection getRows()
				{
					return new grdDiagRowCollection(super.grid.getRows());
				}
				public grdDiagRow getRowByValue(ims.core.vo.PatientDiagnosisListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDiagHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDiagHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPrimaryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPrimaryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColPMHHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColPMHHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 0, 2, 840, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Referral Coding", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 328, 432, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording User:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 92, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording Date / Time:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment:", new Integer(0), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 328, 450, 496, 110, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 64, 704, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 90, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 120, 38, 704, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAppointmentsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbAppointmentsTemp);
				cmbAppointmentsComboBox cmbAppointments = (cmbAppointmentsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAppointmentsComboBox.class, m_cmbAppointmentsTemp);
				super.addComboBox(cmbAppointments);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 328, 92, 60, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 432, 312, 128, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdInvTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralCodingInvestigationMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInvTemp);
				grdInvGrid grdInv = (grdInvGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvGrid.class, m_grdInvTemp);
				grdInv.addStringColumn("Date", 0, 0, 110, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInv.addStringColumn("Investigation", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInv);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 277, 312, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdProcTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralCodingProcedureMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProcTemp);
				grdProcGrid grdProc = (grdProcGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProcGrid.class, m_grdProcTemp);
				grdProc.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProc.addStringColumn("Procedure", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProc.addImageColumn("PMH", 0, 0, -1, true, 0);
				super.addGrid(grdProc);
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 328, 120, 496, 304, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdOutpatientCodingTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralCoding, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdOutpatientCodingTemp);
				grdOutpatientCodingGrid grdOutpatientCoding = (grdOutpatientCodingGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOutpatientCodingGrid.class, m_grdOutpatientCodingTemp);
				grdOutpatientCoding.addStringColumn("Diagnosis/Procedure/Investigation", 0, 0, 240, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOutpatientCoding.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOutpatientCoding.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOutpatientCoding.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOutpatientCoding.addStringColumn("ICD10", 0, 0, 60, false, false, 0, 25, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOutpatientCoding.addButtonColumn(" ", 0, 0, 24, false, true);
				grdOutpatientCoding.addStringColumn("OPCS4", 0, 0, 60, false, false, 0, 25, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOutpatientCoding.addButtonColumn(" ", 0, 0, 24, false, true);
				grdOutpatientCoding.addComboBoxColumn("Laterality", 0, 0, -1, false, true, false, false, true, -1);
				super.addGrid(grdOutpatientCoding);
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 121, 312, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdDiagTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagTemp);
				grdDiagGrid grdDiag = (grdDiagGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagGrid.class, m_grdDiagTemp);
				grdDiag.addStringColumn("Date", 0, 0, 75, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiag.addStringColumn("Diagnosis", 0, 0, 135, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiag.addImageColumn("Primary", 0, 0, 53, true, 0);
				grdDiag.addImageColumn("PMH", 0, 0, -1, true, 0);
				super.addGrid(grdDiag);
			}

			public Label lblOutpatientComments()
			{
				return (Label)super.getControl(1);
			}
			public Label lblAppointments()
			{
				return (Label)super.getControl(4);
			}
			public TextBox txtOutpatientComments()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtRecUser()
			{
				return (TextBox)super.getControl(6);
			}
			public DateTimeControl dtimRecording()
			{
				return (DateTimeControl)super.getControl(7);
			}
			public cmbAppointmentsComboBox cmbAppointments()
			{
				return (cmbAppointmentsComboBox)super.getComboBox(0);
			}
			public CheckBox chkOutpatientActive()
			{
				return (CheckBox)super.getControl(9);
			}
			public grdInvGrid grdInv()
			{
				return (grdInvGrid)super.getGrid(0);
			}
			public grdProcGrid grdProc()
			{
				return (grdProcGrid)super.getGrid(1);
			}
			public grdOutpatientCodingGrid grdOutpatientCoding()
			{
				return (grdOutpatientCodingGrid)super.getGrid(2);
			}
			public grdDiagGrid grdDiag()
			{
				return (grdDiagGrid)super.getGrid(3);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInpatientCoding = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Inpatient Coding", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInpatientCodingContainer m_tabInpatientCodingContainer = (tabInpatientCodingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInpatientCodingContainer.class, m_tabInpatientCoding, factory);
			super.addContainer(m_tabInpatientCoding, m_tabInpatientCodingContainer);
			ims.framework.utils.SizeInfo m_tabInpatientCodingDesignSize = new ims.framework.utils.SizeInfo(848, 592);
			ims.framework.utils.SizeInfo m_tabInpatientCodingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper29.getWidth(), anchoringHelper29.getHeight());
			m_tabInpatientCodingContainer.setContext(form, appForm, m_tabInpatientCoding, loader, form_images_local, contextMenus, startControlID, m_tabInpatientCodingDesignSize, m_tabInpatientCodingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 848, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOutpatientCoding = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outpatient Coding", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOutpatientCodingContainer m_tabOutpatientCodingContainer = (tabOutpatientCodingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutpatientCodingContainer.class, m_tabOutpatientCoding, factory);
			super.addContainer(m_tabOutpatientCoding, m_tabOutpatientCodingContainer);
			ims.framework.utils.SizeInfo m_tabOutpatientCodingDesignSize = new ims.framework.utils.SizeInfo(848, 592);
			ims.framework.utils.SizeInfo m_tabOutpatientCodingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper30.getWidth(), anchoringHelper30.getHeight());
			m_tabOutpatientCodingContainer.setContext(form, appForm, m_tabOutpatientCoding, loader, form_images_local, contextMenus, startControlID, m_tabOutpatientCodingDesignSize, m_tabOutpatientCodingRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabInpatientCoding().setVisible(false);
			tabOutpatientCoding().setVisible(false);
		}
		public void settabInpatientCodingEnabled(boolean value)
		{
			tabInpatientCoding().setEnabled(value);
		}
		public void settabOutpatientCodingEnabled(boolean value)
		{
			tabOutpatientCoding().setEnabled(value);
		}
		public void showtabInpatientCoding()
		{
			tabOutpatientCoding().setVisible(false);
			tabInpatientCoding().setVisible(true);
		}
		public void showtabOutpatientCoding()
		{
			tabInpatientCoding().setVisible(false);
			tabOutpatientCoding().setVisible(true);
		}

		public tabInpatientCodingContainer tabInpatientCoding()
		{
			return (tabInpatientCodingContainer)super.layers.get(0);
		}
		public tabOutpatientCodingContainer tabOutpatientCoding()
		{
			return (tabOutpatientCodingContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getCurrentRCVo();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuLIP = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuLIPNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPNewItem);
		contextMenus.contextMenuLIPUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPUpdateItem);
		form.registerMenu(contextMenus.contextMenuLIP);
		contextMenus.RefMan.contextMenuReferralCodingProcedureMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuReferralCodingProcedureMenuADD_CODINGItem = factory.createMenuItem(startControlID.intValue() + 3, "Add for coding", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4430001)))
			contextMenus.RefMan.contextMenuReferralCodingProcedureMenu.add(contextMenus.RefMan.contextMenuReferralCodingProcedureMenuADD_CODINGItem);
		contextMenus.RefMan.contextMenuReferralCodingProcedureMenuNEW_SFSItem = factory.createMenuItem(startControlID.intValue() + 4, "Link new SFS Assessment", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4430002)))
			contextMenus.RefMan.contextMenuReferralCodingProcedureMenu.add(contextMenus.RefMan.contextMenuReferralCodingProcedureMenuNEW_SFSItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralCodingProcedureMenu);
		contextMenus.RefMan.contextMenuReferralCoding = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuReferralCodingMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 5, "Move UP", true, false, new Integer(102114), true, false);
		contextMenus.RefMan.contextMenuReferralCoding.add(contextMenus.RefMan.contextMenuReferralCodingMOVE_UPItem);
		contextMenus.RefMan.contextMenuReferralCodingMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102108), true, false);
		contextMenus.RefMan.contextMenuReferralCoding.add(contextMenus.RefMan.contextMenuReferralCodingMOVE_DOWNItem);
		contextMenus.RefMan.contextMenuReferralCodingADD_OPCSItem = factory.createMenuItem(startControlID.intValue() + 7, "Add OPCS4 coding entry ", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3300001)))
			contextMenus.RefMan.contextMenuReferralCoding.add(contextMenus.RefMan.contextMenuReferralCodingADD_OPCSItem);
		contextMenus.RefMan.contextMenuReferralCodingADD_ICD10Item = factory.createMenuItem(startControlID.intValue() + 8, "Add ICD10 coding entry", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3300002)))
			contextMenus.RefMan.contextMenuReferralCoding.add(contextMenus.RefMan.contextMenuReferralCodingADD_ICD10Item);
		contextMenus.RefMan.contextMenuReferralCodingREMOVEItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3300003)))
			contextMenus.RefMan.contextMenuReferralCoding.add(contextMenus.RefMan.contextMenuReferralCodingREMOVEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralCoding);
		contextMenus.RefMan.contextMenuReferralCodingInvestigationMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.RefMan.contextMenuReferralCodingInvestigationMenuADD_CODINGItem = factory.createMenuItem(startControlID.intValue() + 10, "Add for coding", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5720001)))
			contextMenus.RefMan.contextMenuReferralCodingInvestigationMenu.add(contextMenus.RefMan.contextMenuReferralCodingInvestigationMenuADD_CODINGItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralCodingInvestigationMenu);


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 330, 600, 200, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "View Patient Coding Records", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 693, 600, 72, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 72, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 72, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}
	public Button btnViewPatCodingRecords()
	{
		return (Button)super.getControl(2);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			RefMan = new RefManForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName TaxonomySearch;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ReferralCodingProcedureToSFSAssessmentDialog = new LocalFormName(134214);
				SelectPreviousDiagnoses = new LocalFormName(134237);
				ReferralCodingForClinicalCodingWorklist = new LocalFormName(134239);
				ViewPatientCodingRecords = new LocalFormName(134246);
			}
			public final FormName ReferralCodingProcedureToSFSAssessmentDialog;
			public final FormName SelectPreviousDiagnoses;
			public final FormName ReferralCodingForClinicalCodingWorklist;
			public final FormName ViewPatientCodingRecords;
		}

		public CoreForms Core;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Pin = new ImageHelper(102212, "Images/Core/Push Pin.gif", new Integer(16), new Integer(16));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pin;
			public final ims.framework.utils.Image Add;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentCareContext = new ims.framework.ContextVariable("CurrentCareContext", prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentCareContext_" + componentIdentifier + "");
			cxl_CurrentRCVo = new ims.framework.ContextVariable("CurrentRCVo", prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier + "");
			cxl_SelectedInpatientRow = new ims.framework.ContextVariable("SelectedInpatientRow", prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedInpatientRow_" + componentIdentifier + "");
			cxl_SelectedAppointment = new ims.framework.ContextVariable("SelectedAppointment", prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedAppointment_" + componentIdentifier + "");
			cxl_SelectedOutpatientRow = new ims.framework.ContextVariable("SelectedOutpatientRow", prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedOutpatientRow_" + componentIdentifier + "");
		}
		
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cxl_CurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextLiteVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextLiteVo)cxl_CurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextLiteVo value)
		{
			cxl_CurrentCareContext.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentCareContext = null;
		public boolean getCurrentRCVoIsNotNull()
		{
			return !cxl_CurrentRCVo.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralCodingVo getCurrentRCVo()
		{
			return (ims.RefMan.vo.ReferralCodingVo)cxl_CurrentRCVo.getValue(context);
		}
		public void setCurrentRCVo(ims.RefMan.vo.ReferralCodingVo value)
		{
			cxl_CurrentRCVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRCVo = null;
		public boolean getSelectedInpatientRowIsNotNull()
		{
			return !cxl_SelectedInpatientRow.getValueIsNull(context);
		}
		public ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabInpatientCodingContainer.grdCodingRow getSelectedInpatientRow()
		{
			return (ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabInpatientCodingContainer.grdCodingRow)cxl_SelectedInpatientRow.getValue(context);
		}
		public void setSelectedInpatientRow(ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabInpatientCodingContainer.grdCodingRow value)
		{
			cxl_SelectedInpatientRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInpatientRow = null;
		public boolean getSelectedAppointmentIsNotNull()
		{
			return !cxl_SelectedAppointment.getValueIsNull(context);
		}
		public ims.scheduling.vo.BookingAppointmentOutpatientCodingVo getSelectedAppointment()
		{
			return (ims.scheduling.vo.BookingAppointmentOutpatientCodingVo)cxl_SelectedAppointment.getValue(context);
		}
		public void setSelectedAppointment(ims.scheduling.vo.BookingAppointmentOutpatientCodingVo value)
		{
			cxl_SelectedAppointment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAppointment = null;
		public boolean getSelectedOutpatientRowIsNotNull()
		{
			return !cxl_SelectedOutpatientRow.getValueIsNull(context);
		}
		public ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdOutpatientCodingRow getSelectedOutpatientRow()
		{
			return (ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdOutpatientCodingRow)cxl_SelectedOutpatientRow.getValue(context);
		}
		public void setSelectedOutpatientRow(ims.RefMan.forms.referralcoding.GenForm.lyrTabsLayer.tabOutpatientCodingContainer.grdOutpatientCodingRow value)
		{
			cxl_SelectedOutpatientRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedOutpatientRow = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class LIP implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Update = 2;
		}
		public void disableAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setEnabled(false);
			this.contextMenuLIPUpdateItem.setEnabled(false);
		}
		public void hideAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setVisible(false);
			this.contextMenuLIPUpdateItem.setVisible(false);
		}
		private Menu contextMenuLIP;
		public MenuItem getLIPNewItem()
		{
			return this.contextMenuLIPNewItem;
		}
		private MenuItem contextMenuLIPNewItem;
		public MenuItem getLIPUpdateItem()
		{
			return this.contextMenuLIPUpdateItem;
		}
		private MenuItem contextMenuLIPUpdateItem;
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ReferralCodingProcedureMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_CODING = 3;
				public static final int NEW_SFS = 4;
			}
			public void disableAllReferralCodingProcedureMenuMenuItems()
			{
				this.contextMenuReferralCodingProcedureMenuADD_CODINGItem.setEnabled(false);
				this.contextMenuReferralCodingProcedureMenuNEW_SFSItem.setEnabled(false);
			}
			public void hideAllReferralCodingProcedureMenuMenuItems()
			{
				this.contextMenuReferralCodingProcedureMenuADD_CODINGItem.setVisible(false);
				this.contextMenuReferralCodingProcedureMenuNEW_SFSItem.setVisible(false);
			}
			private Menu contextMenuReferralCodingProcedureMenu;
			public ReadOnlyMenuItem getReferralCodingProcedureMenuADD_CODINGItem()
			{
				return this.contextMenuReferralCodingProcedureMenuADD_CODINGItem;
			}
			private MenuItem contextMenuReferralCodingProcedureMenuADD_CODINGItem;
			public ReadOnlyMenuItem getReferralCodingProcedureMenuNEW_SFSItem()
			{
				return this.contextMenuReferralCodingProcedureMenuNEW_SFSItem;
			}
			private MenuItem contextMenuReferralCodingProcedureMenuNEW_SFSItem;
			public final class ReferralCoding implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int MOVE_UP = 5;
				public static final int MOVE_DOWN = 6;
				public static final int ADD_OPCS = 7;
				public static final int ADD_ICD10 = 8;
				public static final int REMOVE = 9;
			}
			public void disableAllReferralCodingMenuItems()
			{
				this.contextMenuReferralCodingMOVE_UPItem.setEnabled(false);
				this.contextMenuReferralCodingMOVE_DOWNItem.setEnabled(false);
				this.contextMenuReferralCodingADD_OPCSItem.setEnabled(false);
				this.contextMenuReferralCodingADD_ICD10Item.setEnabled(false);
				this.contextMenuReferralCodingREMOVEItem.setEnabled(false);
			}
			public void hideAllReferralCodingMenuItems()
			{
				this.contextMenuReferralCodingMOVE_UPItem.setVisible(false);
				this.contextMenuReferralCodingMOVE_DOWNItem.setVisible(false);
				this.contextMenuReferralCodingADD_OPCSItem.setVisible(false);
				this.contextMenuReferralCodingADD_ICD10Item.setVisible(false);
				this.contextMenuReferralCodingREMOVEItem.setVisible(false);
			}
			private Menu contextMenuReferralCoding;
			public ReadOnlyMenuItem getReferralCodingMOVE_UPItem()
			{
				return this.contextMenuReferralCodingMOVE_UPItem;
			}
			private MenuItem contextMenuReferralCodingMOVE_UPItem;
			public ReadOnlyMenuItem getReferralCodingMOVE_DOWNItem()
			{
				return this.contextMenuReferralCodingMOVE_DOWNItem;
			}
			private MenuItem contextMenuReferralCodingMOVE_DOWNItem;
			public ReadOnlyMenuItem getReferralCodingADD_OPCSItem()
			{
				return this.contextMenuReferralCodingADD_OPCSItem;
			}
			private MenuItem contextMenuReferralCodingADD_OPCSItem;
			public ReadOnlyMenuItem getReferralCodingADD_ICD10Item()
			{
				return this.contextMenuReferralCodingADD_ICD10Item;
			}
			private MenuItem contextMenuReferralCodingADD_ICD10Item;
			public ReadOnlyMenuItem getReferralCodingREMOVEItem()
			{
				return this.contextMenuReferralCodingREMOVEItem;
			}
			private MenuItem contextMenuReferralCodingREMOVEItem;
			public final class ReferralCodingInvestigationMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_CODING = 10;
			}
			public void disableAllReferralCodingInvestigationMenuMenuItems()
			{
				this.contextMenuReferralCodingInvestigationMenuADD_CODINGItem.setEnabled(false);
			}
			public void hideAllReferralCodingInvestigationMenuMenuItems()
			{
				this.contextMenuReferralCodingInvestigationMenuADD_CODINGItem.setVisible(false);
			}
			private Menu contextMenuReferralCodingInvestigationMenu;
			public ReadOnlyMenuItem getReferralCodingInvestigationMenuADD_CODINGItem()
			{
				return this.contextMenuReferralCodingInvestigationMenuADD_CODINGItem;
			}
			private MenuItem contextMenuReferralCodingInvestigationMenuADD_CODINGItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[194];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCDATE", "ProcDate");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SITETEXT", "SiteText");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCTIME", "ProcTime");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-NOTES", "Notes");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCSITE", "ProcSite");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-LOCATION", "Location");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SPECIALTY", "Specialty");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDSTATUS", "ConfirmedStatus");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EXCLUDEFROMOTHERS", "ExcludeFromOthers");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLOCATION", "ProcLocation");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDREASON", "CancelledReason");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SURGEONSGRADE", "SurgeonsGrade");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDTIME", "ProcEndTime");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SIGNIFPROC", "SignifProc");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.DischargedEpisodeForReferralCoding", "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentCareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentCareContext_" + componentIdentifier, "BO-1004100019-CONTEXT", "Context");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentCareContext_" + componentIdentifier, "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentCareContext_" + componentIdentifier, "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier, "BO-1096100037-ID", "ID_ReferralCoding");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier, "BO-1096100037-CATSREFERRAL", "CatsReferral");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier, "BO-1096100037-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier, "BO-1096100037-PASEVENT", "PasEvent");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier, "BO-1096100037-COMMENTS", "Comments");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__CurrentRCVo_" + componentIdentifier, "BO-1096100037-ACTIVE", "Active");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedAppointment_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedAppointment_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedAppointment_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedAppointment_" + componentIdentifier, "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralCoding.__internal_x_context__SelectedAppointment_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
