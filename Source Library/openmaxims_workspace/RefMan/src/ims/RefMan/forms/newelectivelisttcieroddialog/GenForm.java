//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.newelectivelisttcieroddialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTCIOfferedMethodComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.TCIOfferMethod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.TCIOfferMethod value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.TCIOfferMethod getValue()
		{
			return (ims.core.vo.lookups.TCIOfferMethod)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.TCIOfferMethod value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbBreachReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason getValue()
		{
			return (ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.RTTWeekWaitOr28DayRuleBreachReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbERODReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ERODReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ERODReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ERODReason getValue()
		{
			return (ims.RefMan.vo.lookups.ERODReason)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ERODReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLateralityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.LateralityLRB getValue()
		{
			return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.LateralityLRB value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbInterpreterRequiredComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Language value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Language value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Language value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Language getValue()
		{
			return (ims.core.vo.lookups.Language)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Language value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTransportRequiredComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptTransportType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ApptTransportType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ApptTransportType getValue()
		{
			return (ims.scheduling.vo.lookups.ApptTransportType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ApptTransportType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbIntendedManagementComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ManagementIntention value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ManagementIntention getValue()
		{
			return (ims.core.vo.lookups.ManagementIntention)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ManagementIntention value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.ReferralUrgency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.ReferralUrgency value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.ReferralUrgency getValue()
		{
			return (ims.RefMan.vo.lookups.ReferralUrgency)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.ReferralUrgency value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbElectiveListReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.emergency.vo.lookups.ElectiveListReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.emergency.vo.lookups.ElectiveListReason getValue()
		{
			return (ims.emergency.vo.lookups.ElectiveListReason)super.control.getValue();
		}
		public void setValue(ims.emergency.vo.lookups.ElectiveListReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbElectiveListComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.ElectiveListConfigurationVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.ElectiveListConfigurationVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.ElectiveListConfigurationVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.ElectiveListConfigurationVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.ElectiveListConfigurationVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.ElectiveListConfigurationVo getValue()
		{
			return (ims.admin.vo.ElectiveListConfigurationVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.ElectiveListConfigurationVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbIntendedProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ProcedureLiteVo getValue()
		{
			return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ProcedureLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdDateEventRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDateEventRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolEventReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolEventReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolEventOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolEvent()
		{
			return (String)super.row.get(1);
		}
		public void setcolEvent(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolEventTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDateEventRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDateEventRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDateEventRow get(int index)
		{
			return new grdDateEventRow(super.collection.get(index));
		}
		public grdDateEventRow newRow()
		{
			return new grdDateEventRow(super.collection.newRow());
		}
		public grdDateEventRow newRow(boolean autoSelect)
		{
			return new grdDateEventRow(super.collection.newRow(autoSelect));
		}
		public grdDateEventRow newRowAt(int index)
		{
			return new grdDateEventRow(super.collection.newRowAt(index));
		}
		public grdDateEventRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDateEventRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDateEventGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdDateEventRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDateEventRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDateEventRowCollection getRows()
		{
			return new grdDateEventRowCollection(super.grid.getRows());
		}
		public grdDateEventRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDateEventRow(row);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolEventHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolEventHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdNoteCommentsAddRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdNoteCommentsAddRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNoteCommentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNoteCommentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNoteCommentOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolNoteComment()
		{
			return (String)super.row.get(0);
		}
		public void setcolNoteComment(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNoteCommentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolRecordingDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolRecordingDateTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolRecordingDateTimeOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolRecordingDateTime()
		{
			return (String)super.row.get(1);
		}
		public void setcolRecordingDateTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolRecordingDateTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolRecordingUserReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolRecordingUserReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolRecordingUserOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolRecordingUser()
		{
			return (String)super.row.get(2);
		}
		public void setcolRecordingUser(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolRecordingUserTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getValue()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdNoteCommentsAddRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdNoteCommentsAddRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdNoteCommentsAddRow get(int index)
		{
			return new grdNoteCommentsAddRow(super.collection.get(index));
		}
		public grdNoteCommentsAddRow newRow()
		{
			return new grdNoteCommentsAddRow(super.collection.newRow());
		}
		public grdNoteCommentsAddRow newRow(boolean autoSelect)
		{
			return new grdNoteCommentsAddRow(super.collection.newRow(autoSelect));
		}
		public grdNoteCommentsAddRow newRowAt(int index)
		{
			return new grdNoteCommentsAddRow(super.collection.newRowAt(index));
		}
		public grdNoteCommentsAddRow newRowAt(int index, boolean autoSelect)
		{
			return new grdNoteCommentsAddRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdNoteCommentsAddGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVoCollection getValues()
		{
			ims.RefMan.vo.PatientElectiveListNotesVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListNotesVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getValue()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			super.grid.setValue(value);
		}
		public grdNoteCommentsAddRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdNoteCommentsAddRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdNoteCommentsAddRowCollection getRows()
		{
			return new grdNoteCommentsAddRowCollection(super.grid.getRows());
		}
		public grdNoteCommentsAddRow getRowByValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdNoteCommentsAddRow(row);
		}
		public void setcolNoteCommentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNoteCommentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolRecordingDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolRecordingDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolRecordingUserHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolRecordingUserHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdNoteCommentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdNoteCommentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNoteCommentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNoteCommentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNoteCommentOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolNoteComment()
		{
			return (String)super.row.get(0);
		}
		public void setcolNoteComment(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNoteCommentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolRecordingDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolRecordingDateTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolRecordingDateTimeOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolRecordingDateTime()
		{
			return (String)super.row.get(1);
		}
		public void setcolRecordingDateTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolRecordingDateTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolRecordingUserReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolRecordingUserReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolRecordingUserOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolRecordingUser()
		{
			return (String)super.row.get(2);
		}
		public void setcolRecordingUser(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolRecordingUserTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getValue()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdNoteCommentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdNoteCommentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdNoteCommentsRow get(int index)
		{
			return new grdNoteCommentsRow(super.collection.get(index));
		}
		public grdNoteCommentsRow newRow()
		{
			return new grdNoteCommentsRow(super.collection.newRow());
		}
		public grdNoteCommentsRow newRow(boolean autoSelect)
		{
			return new grdNoteCommentsRow(super.collection.newRow(autoSelect));
		}
		public grdNoteCommentsRow newRowAt(int index)
		{
			return new grdNoteCommentsRow(super.collection.newRowAt(index));
		}
		public grdNoteCommentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdNoteCommentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdNoteCommentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVoCollection getValues()
		{
			ims.RefMan.vo.PatientElectiveListNotesVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListNotesVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getValue()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			super.grid.setValue(value);
		}
		public grdNoteCommentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdNoteCommentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdNoteCommentsRowCollection getRows()
		{
			return new grdNoteCommentsRowCollection(super.grid.getRows());
		}
		public grdNoteCommentsRow getRowByValue(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdNoteCommentsRow(row);
		}
		public void setcolNoteCommentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNoteCommentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolRecordingDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolRecordingDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolRecordingUserHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolRecordingUserHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class GroupPlanInRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 116, 414, 53, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Days", startTabIndex.intValue() + 28);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 228, 414, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Months", startTabIndex.intValue() + 30);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 168, 414, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Weeks", startTabIndex.intValue() + 29);
		}
		public void setText(GroupPlanInEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupPlanInEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupPlanInEnumeration.None;
				case 0: return GroupPlanInEnumeration.rdoDays;
				case 1: return GroupPlanInEnumeration.rdoMonths;
				case 2: return GroupPlanInEnumeration.rdoWeeks;
			}
			return null;
		}
		public void setValue(GroupPlanInEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupPlanInEnumeration.None.id);
		}
		public boolean isEnabled(GroupPlanInEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupPlanInEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupPlanInEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupPlanInEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupPlanInEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupPlanInEnumeration None = new GroupPlanInEnumeration(-1);
		public static GroupPlanInEnumeration rdoDays = new GroupPlanInEnumeration(0);
		public static GroupPlanInEnumeration rdoMonths = new GroupPlanInEnumeration(1);
		public static GroupPlanInEnumeration rdoWeeks = new GroupPlanInEnumeration(2);
		private GroupPlanInEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupPlanInEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 672);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1 = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1ADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410001)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1ADDItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1EDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410002)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1EDITItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1VIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410003)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1VIEWItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1RIEItem = factory.createMenuItem(startControlID.intValue() + 4, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5410004)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1RIEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2 = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2ADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5420001)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2ADDItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2EDITItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5420002)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2EDITItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2VIEWItem = factory.createMenuItem(startControlID.intValue() + 7, "View", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5420003)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2VIEWItem);
		contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2RIEItem = factory.createMenuItem(startControlID.intValue() + 8, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5420004)))
			contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2.add(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2RIEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2);


		// Panel Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 536, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"TCI Details ", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 552, 384, 288, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"EROD Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 376, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 176, 67, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccRespHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper7.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_ccRespHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(176), new Integer(67), new Integer(328), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccRespHCPForm, instance1 } );
		ims.framework.Control m_ccRespHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccRespHCPForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccRespHCPControl);
		Menu[] menus1 = m_ccRespHCPForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 305, 404, 96, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested \nPlanned Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 13, 414, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan TCI In:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 81, 561, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<TCI Outcome Value>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 13, 561, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Outcome:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 13, 442, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 13, 468, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 13, 487, 68, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Breach\nReason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 13, 522, 60, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date \nOffered:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 216, 523, 64, 28, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Offered \nMethod:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 200, 414, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 13, 414, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 560, 512, 120, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Reason  \nComment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 561, 464, 104, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Available \nfrom Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 561, 426, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Second Date Offered:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 561, 402, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Earliest Date Offered:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 561, 492, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 504, 212, 252, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure To Be Carried Out by Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 24, 212, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 504, 69, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date on List:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 718, 13, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Last Review Date>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 606, 13, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Last Review Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 144, 13, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Last Review By>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 53, 13, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Last Review By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 656, 260, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Days", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 736, 36, 65, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<date>", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 504, 296, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "No. of days notice:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 24, 236, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 40, 344, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Special Requirements", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 504, 260, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anticipated Stay:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 40, 320, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Interpreter Required", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 520, 320, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Transport Required", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 24, 140, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 24, 116, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 24, 164, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Intended Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 24, 188, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 24, 260, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Intended Management:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 24, 92, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 24, 69, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 637, 36, 110, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Breach Date: ", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 510, 34, 65, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<type>", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 321, 34, 202, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective Admission Type: ", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 144, 34, 79, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<status>", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 24, 34, 124, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Status:", new Integer(1), null, new Integer(1)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 520, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Remove", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 453, 558, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel TCI", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 200, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Dashboard", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 284, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add TCI", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 362, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Add EROD", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 765, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 688, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 440, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Suspend", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 712, 555, 112, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View EROD History", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 765, 649, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 696, 512, 128, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(1500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 176, 186, 648, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 176, 344, 648, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 394, 412, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 81, 412, 103, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 81, 530, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 696, 464, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 696, 424, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 696, 400, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 592, 67, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 288, 531, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTCIOfferedMethodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTCIOfferedMethodTemp);
		cmbTCIOfferedMethodComboBox cmbTCIOfferedMethod = (cmbTCIOfferedMethodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTCIOfferedMethodComboBox.class, m_cmbTCIOfferedMethodTemp);
		super.addComboBox(cmbTCIOfferedMethod);
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 81, 497, 407, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbBreachReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbBreachReasonTemp);
		cmbBreachReasonComboBox cmbBreachReason = (cmbBreachReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBreachReasonComboBox.class, m_cmbBreachReasonTemp);
		super.addComboBox(cmbBreachReason);
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 696, 490, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbERODReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbERODReasonTemp);
		cmbERODReasonComboBox cmbERODReason = (cmbERODReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbERODReasonComboBox.class, m_cmbERODReasonTemp);
		super.addComboBox(cmbERODReason);
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 176, 210, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLateralityTemp);
		cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
		super.addComboBox(cmbLaterality);
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 176, 320, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbInterpreterRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbInterpreterRequiredTemp);
		cmbInterpreterRequiredComboBox cmbInterpreterRequired = (cmbInterpreterRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInterpreterRequiredComboBox.class, m_cmbInterpreterRequiredTemp);
		super.addComboBox(cmbInterpreterRequired);
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 640, 320, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbTransportRequiredTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTransportRequiredTemp);
		cmbTransportRequiredComboBox cmbTransportRequired = (cmbTransportRequiredComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportRequiredComboBox.class, m_cmbTransportRequiredTemp);
		super.addComboBox(cmbTransportRequired);
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 176, 258, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbIntendedManagementTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbIntendedManagementTemp);
		cmbIntendedManagementComboBox cmbIntendedManagement = (cmbIntendedManagementComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIntendedManagementComboBox.class, m_cmbIntendedManagementTemp);
		super.addComboBox(cmbIntendedManagement);
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 176, 234, 648, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 176, 114, 648, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbElectiveListReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbElectiveListReasonTemp);
		cmbElectiveListReasonComboBox cmbElectiveListReason = (cmbElectiveListReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbElectiveListReasonComboBox.class, m_cmbElectiveListReasonTemp);
		super.addComboBox(cmbElectiveListReason);
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 176, 138, 520, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbElectiveListTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbElectiveListTemp);
		cmbElectiveListComboBox cmbElectiveList = (cmbElectiveListComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbElectiveListComboBox.class, m_cmbElectiveListTemp);
		super.addComboBox(cmbElectiveList);
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 176, 90, 648, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbServiceTemp);
		cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
		super.addComboBox(cmbService);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 81, 466, 447, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbWardTemp);
		qmbWardComboBox qmbWard = (qmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbWardComboBox.class, m_qmbWardTemp);
		super.addComboBox(qmbWard);
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 81, 440, 447, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbHospitalTemp);
		qmbHospitalComboBox qmbHospital = (qmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHospitalComboBox.class, m_qmbHospitalTemp);
		super.addComboBox(qmbHospital);
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 176, 162, 648, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbIntendedProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbIntendedProcedureTemp);
		qmbIntendedProcedureComboBox qmbIntendedProcedure = (qmbIntendedProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbIntendedProcedureComboBox.class, m_qmbIntendedProcedureTemp);
		super.addComboBox(qmbIntendedProcedure);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 560, 448, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Extended Delay", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 696, 448, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Reasonable offer", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 808, 214, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 24, 320, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 504, 320, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 24, 344, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 216, 296, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Available at short notice?", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 712, 140, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Extended Search", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 24, 524, 416, 58, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdDateEventTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDateEventTemp);
		grdDateEventGrid grdDateEvent = (grdDateEventGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDateEventGrid.class, m_grdDateEventTemp);
		grdDateEvent.addStringColumn("Date", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDateEvent.addStringColumn("Event", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDateEvent);
		RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 8, 385, 832, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdNoteCommentsAddTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuNewElectiveListNotesMenu1, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdNoteCommentsAddTemp);
		grdNoteCommentsAddGrid grdNoteCommentsAdd = (grdNoteCommentsAddGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNoteCommentsAddGrid.class, m_grdNoteCommentsAddTemp);
		grdNoteCommentsAdd.addStringColumn("Note/Comment", 0, 0, 425, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdNoteCommentsAdd.addStringColumn("Recording Date/Time", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdNoteCommentsAdd.addStringColumn("Recording User", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdNoteCommentsAdd);
		RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 8, 588, 832, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdNoteCommentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuNewElectiveListNotesMenu2, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdNoteCommentsTemp);
		grdNoteCommentsGrid grdNoteComments = (grdNoteCommentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNoteCommentsGrid.class, m_grdNoteCommentsTemp);
		grdNoteComments.addStringColumn("Note/Comment", 0, 0, 425, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdNoteComments.addStringColumn("Recording Date/Time", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdNoteComments.addStringColumn("Recording User", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdNoteComments);

		// Time Controls
		RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 238, 412, 45, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 81, 412, 28, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 640, 296, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 608, 258, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(3)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 504, 495, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.Edit, this.getImages().Core.EditDisabled, "Enter Other Reason", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 504, 410, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.History16, this.getImages().Core.History16, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 24, 9, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.History16, this.getImages().Core.History16, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupPlanIn = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupPlanIn);
		GroupPlanInRadioButton GroupPlanIn = (GroupPlanInRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPlanInRadioButton.class, tmpGroupPlanIn);
		GroupPlanIn.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupPlanIn);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 24, 288, 800, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 800, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlTCIDetails()
	{
		return (Panel)super.getControl(0);
	}
	public Panel pnlERODDetails()
	{
		return (Panel)super.getControl(1);
	}
	public ims.core.forms.mosquery.IComponent ccRespHCP()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
	}
	public void setccRespHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
	}
	public void setccRespHCPVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(3)).setVisible(value);
	}
	public boolean isccRespHCPVisible()
	{
		return ((ims.framework.Control)super.getControl(3)).isVisible();
	}
	public void setccRespHCPEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(3)).setEnabled(value);
	}
	public boolean isccRespHCPEnabled()
	{
		return ((ims.framework.Control)super.getControl(3)).isEnabled();
	}
	public Label lblPlannedDate()
	{
		return (Label)super.getControl(4);
	}
	public Label lblPlanTciIn()
	{
		return (Label)super.getControl(5);
	}
	public Label lblTCIOutcomeValue()
	{
		return (Label)super.getControl(6);
	}
	public Label lblTCIOutcome()
	{
		return (Label)super.getControl(7);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(8);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(9);
	}
	public Label lblBreachReason()
	{
		return (Label)super.getControl(10);
	}
	public Label lblDateOffered()
	{
		return (Label)super.getControl(11);
	}
	public Label lblTCIOfferedMethod()
	{
		return (Label)super.getControl(12);
	}
	public Label lblTCITime()
	{
		return (Label)super.getControl(13);
	}
	public Label lblTCIDate()
	{
		return (Label)super.getControl(14);
	}
	public Label lblERODComment()
	{
		return (Label)super.getControl(15);
	}
	public Label lblPatientAvailableFromDate()
	{
		return (Label)super.getControl(16);
	}
	public Label lblSecondDateOffered()
	{
		return (Label)super.getControl(17);
	}
	public Label lblEarliestDateOffered()
	{
		return (Label)super.getControl(18);
	}
	public Label lblERODReason()
	{
		return (Label)super.getControl(19);
	}
	public Label lblLastReviewDateValue()
	{
		return (Label)super.getControl(23);
	}
	public Label lblLastReviewDate()
	{
		return (Label)super.getControl(24);
	}
	public Label lblLastReviewByValue()
	{
		return (Label)super.getControl(25);
	}
	public Label lblLastReviewBy()
	{
		return (Label)super.getControl(26);
	}
	public Label lblDate()
	{
		return (Label)super.getControl(28);
	}
	public Label lblNoOfDayNotice()
	{
		return (Label)super.getControl(29);
	}
	public Label lblAdmissionType()
	{
		return (Label)super.getControl(43);
	}
	public Label lblStatus()
	{
		return (Label)super.getControl(45);
	}
	public Button btnRemove()
	{
		return (Button)super.getControl(47);
	}
	public Button btnCancelTCI()
	{
		return (Button)super.getControl(48);
	}
	public Button btnDashboard()
	{
		return (Button)super.getControl(49);
	}
	public Button btnAddTCI()
	{
		return (Button)super.getControl(50);
	}
	public Button btnAddEROD()
	{
		return (Button)super.getControl(51);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(52);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(53);
	}
	public Button btnSuspend()
	{
		return (Button)super.getControl(54);
	}
	public Button btnViewERODHistory()
	{
		return (Button)super.getControl(55);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(56);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(57);
	}
	public TextBox txtERODComment()
	{
		return (TextBox)super.getControl(58);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(59);
	}
	public TextBox txtSpecialRequrements()
	{
		return (TextBox)super.getControl(60);
	}
	public DateControl dtePlannedDate()
	{
		return (DateControl)super.getControl(61);
	}
	public DateControl dteTCIDate()
	{
		return (DateControl)super.getControl(62);
	}
	public DateControl dteDateOffered()
	{
		return (DateControl)super.getControl(63);
	}
	public DateControl dtePatientAvailableFromDate()
	{
		return (DateControl)super.getControl(64);
	}
	public DateControl dteSecondDateOffered()
	{
		return (DateControl)super.getControl(65);
	}
	public DateControl dteEarliestDateOffered()
	{
		return (DateControl)super.getControl(66);
	}
	public DateControl dteDateOnList()
	{
		return (DateControl)super.getControl(67);
	}
	public cmbTCIOfferedMethodComboBox cmbTCIOfferedMethod()
	{
		return (cmbTCIOfferedMethodComboBox)super.getComboBox(0);
	}
	public cmbBreachReasonComboBox cmbBreachReason()
	{
		return (cmbBreachReasonComboBox)super.getComboBox(1);
	}
	public cmbERODReasonComboBox cmbERODReason()
	{
		return (cmbERODReasonComboBox)super.getComboBox(2);
	}
	public cmbLateralityComboBox cmbLaterality()
	{
		return (cmbLateralityComboBox)super.getComboBox(3);
	}
	public cmbInterpreterRequiredComboBox cmbInterpreterRequired()
	{
		return (cmbInterpreterRequiredComboBox)super.getComboBox(4);
	}
	public cmbTransportRequiredComboBox cmbTransportRequired()
	{
		return (cmbTransportRequiredComboBox)super.getComboBox(5);
	}
	public cmbIntendedManagementComboBox cmbIntendedManagement()
	{
		return (cmbIntendedManagementComboBox)super.getComboBox(6);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(7);
	}
	public cmbElectiveListReasonComboBox cmbElectiveListReason()
	{
		return (cmbElectiveListReasonComboBox)super.getComboBox(8);
	}
	public cmbElectiveListComboBox cmbElectiveList()
	{
		return (cmbElectiveListComboBox)super.getComboBox(9);
	}
	public cmbServiceComboBox cmbService()
	{
		return (cmbServiceComboBox)super.getComboBox(10);
	}
	public qmbWardComboBox qmbWard()
	{
		return (qmbWardComboBox)super.getComboBox(11);
	}
	public qmbHospitalComboBox qmbHospital()
	{
		return (qmbHospitalComboBox)super.getComboBox(12);
	}
	public qmbIntendedProcedureComboBox qmbIntendedProcedure()
	{
		return (qmbIntendedProcedureComboBox)super.getComboBox(13);
	}
	public CheckBox chkEXTDelay()
	{
		return (CheckBox)super.getControl(82);
	}
	public CheckBox chkReasonableOffer()
	{
		return (CheckBox)super.getControl(83);
	}
	public CheckBox chkProcedureToBeCarriedOutByConsultant()
	{
		return (CheckBox)super.getControl(84);
	}
	public CheckBox chkInterpreterRequired()
	{
		return (CheckBox)super.getControl(85);
	}
	public CheckBox chkTransportRequired()
	{
		return (CheckBox)super.getControl(86);
	}
	public CheckBox chkSpecialRequirements()
	{
		return (CheckBox)super.getControl(87);
	}
	public CheckBox chkAvailableAtShortNoticed()
	{
		return (CheckBox)super.getControl(88);
	}
	public CheckBox chkExtendedSearch()
	{
		return (CheckBox)super.getControl(89);
	}
	public grdDateEventGrid grdDateEvent()
	{
		return (grdDateEventGrid)super.getGrid(0);
	}
	public grdNoteCommentsAddGrid grdNoteCommentsAdd()
	{
		return (grdNoteCommentsAddGrid)super.getGrid(1);
	}
	public grdNoteCommentsGrid grdNoteComments()
	{
		return (grdNoteCommentsGrid)super.getGrid(2);
	}
	public TimeControl timTCITime()
	{
		return (TimeControl)super.getControl(93);
	}
	public IntBox intPlanICIIn()
	{
		return (IntBox)super.getControl(94);
	}
	public IntBox intNoOfDaysNotice()
	{
		return (IntBox)super.getControl(95);
	}
	public IntBox intAnticipatedStay()
	{
		return (IntBox)super.getControl(96);
	}
	public ImageButton imbOtherReason()
	{
		return (ImageButton)super.getControl(97);
	}
	public ImageButton imbTCIHistory()
	{
		return (ImageButton)super.getControl(98);
	}
	public ImageButton imbElectiveListHistory()
	{
		return (ImageButton)super.getControl(99);
	}
	public GroupPlanInRadioButton GroupPlanIn()
	{
		return (GroupPlanInRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ERODHistoryDialog = new LocalFormName(134226);
				CancelTCIForPatientElectiveListDialog = new LocalFormName(134227);
				SuspensionDetails = new LocalFormName(134225);
				PatientElectiveListNotes = new LocalFormName(134228);
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
				RemoveFromElectiveList = new LocalFormName(134229);
				UndoRemovalFromWaitingList = new LocalFormName(134220);
				ReasonForBookingPast28DayKPI = new LocalFormName(134241);
			}
			public final FormName ERODHistoryDialog;
			public final FormName CancelTCIForPatientElectiveListDialog;
			public final FormName SuspensionDetails;
			public final FormName PatientElectiveListNotes;
			public final FormName NewElectiveListTCIErodDialog;
			public final FormName RemoveFromElectiveList;
			public final FormName UndoRemovalFromWaitingList;
			public final FormName ReasonForBookingPast28DayKPI;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				AppointmentOutcomeDialog = new LocalFormName(114171);
			}
			public final FormName AppointmentOutcomeDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}

		public RefManForms RefMan;
		public SchedulingForms Scheduling;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Nursing = new NursingImages();
			Core = new CoreImages();
		}
		public final class NursingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingImages()
			{
				History48 = new ImageHelper(100156, "Images/Nursing/history_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image History48;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				History16 = new ImageHelper(102555, "Images/Core/history_context_menu.png", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image History16;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
		}
		public final NursingImages Nursing;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ActionPressed = new ims.framework.ContextVariable("ActionPressed", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ActionPressed_" + componentIdentifier + "");
			cxl_Referral = new ims.framework.ContextVariable("Referral", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier + "");
			cxl_AdmissionType = new ims.framework.ContextVariable("AdmissionType", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__AdmissionType_" + componentIdentifier + "");
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_SuspensionMessageBoxId = new ims.framework.ContextVariable("SuspensionMessageBoxId", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__SuspensionMessageBoxId_" + componentIdentifier + "");
			cxl_RIENoteRecord = new ims.framework.ContextVariable("RIENoteRecord", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__RIENoteRecord_" + componentIdentifier + "");
			cxl_ApptStatus = new ims.framework.ContextVariable("ApptStatus", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier + "");
			cxl_CatsReferralListV = new ims.framework.ContextVariable("CatsReferralListV", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier + "");
			cxl_bLinkAsCreatingAppointment = new ims.framework.ContextVariable("bLinkAsCreatingAppointment", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__bLinkAsCreatingAppointment_" + componentIdentifier + "");
			cxl_ReasonableDateMessageBoxId = new ims.framework.ContextVariable("ReasonableDateMessageBoxId", prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ReasonableDateMessageBoxId_" + componentIdentifier + "");
		}
		
		public boolean getActionPressedIsNotNull()
		{
			return !cxl_ActionPressed.getValueIsNull(context);
		}
		public ims.admin.vo.enums.ElectiveListDetails getActionPressed()
		{
			return (ims.admin.vo.enums.ElectiveListDetails)cxl_ActionPressed.getValue(context);
		}
		public void setActionPressed(ims.admin.vo.enums.ElectiveListDetails value)
		{
			cxl_ActionPressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionPressed = null;
		public boolean getReferralIsNotNull()
		{
			return !cxl_Referral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralforElectiveListDetailsVo getReferral()
		{
			return (ims.RefMan.vo.CatsReferralforElectiveListDetailsVo)cxl_Referral.getValue(context);
		}
		public void setReferral(ims.RefMan.vo.CatsReferralforElectiveListDetailsVo value)
		{
			cxl_Referral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Referral = null;
		public boolean getAdmissionTypeIsNotNull()
		{
			return !cxl_AdmissionType.getValueIsNull(context);
		}
		public ims.RefMan.vo.lookups.ElectiveAdmissionType getAdmissionType()
		{
			return (ims.RefMan.vo.lookups.ElectiveAdmissionType)cxl_AdmissionType.getValue(context);
		}
		public void setAdmissionType(ims.RefMan.vo.lookups.ElectiveAdmissionType value)
		{
			cxl_AdmissionType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AdmissionType = null;
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListDetailsToSaveVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListDetailsToSaveVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListDetailsToSaveVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getSuspensionMessageBoxIdIsNotNull()
		{
			return !cxl_SuspensionMessageBoxId.getValueIsNull(context);
		}
		public Integer getSuspensionMessageBoxId()
		{
			return (Integer)cxl_SuspensionMessageBoxId.getValue(context);
		}
		public void setSuspensionMessageBoxId(Integer value)
		{
			cxl_SuspensionMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SuspensionMessageBoxId = null;
		public boolean getRIENoteRecordIsNotNull()
		{
			return !cxl_RIENoteRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListNotesVo getRIENoteRecord()
		{
			return (ims.RefMan.vo.PatientElectiveListNotesVo)cxl_RIENoteRecord.getValue(context);
		}
		public void setRIENoteRecord(ims.RefMan.vo.PatientElectiveListNotesVo value)
		{
			cxl_RIENoteRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIENoteRecord = null;
		public boolean getApptStatusIsNotNull()
		{
			return !cxl_ApptStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.Appointment_StatusVo getApptStatus()
		{
			return (ims.scheduling.vo.Appointment_StatusVo)cxl_ApptStatus.getValue(context);
		}
		public void setApptStatus(ims.scheduling.vo.Appointment_StatusVo value)
		{
			cxl_ApptStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptStatus = null;
		public boolean getCatsReferralListVIsNotNull()
		{
			return !cxl_CatsReferralListV.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralListVo getCatsReferralListV()
		{
			return (ims.RefMan.vo.CatsReferralListVo)cxl_CatsReferralListV.getValue(context);
		}
		public void setCatsReferralListV(ims.RefMan.vo.CatsReferralListVo value)
		{
			cxl_CatsReferralListV.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferralListV = null;
		public boolean getbLinkAsCreatingAppointmentIsNotNull()
		{
			return !cxl_bLinkAsCreatingAppointment.getValueIsNull(context);
		}
		public Boolean getbLinkAsCreatingAppointment()
		{
			return (Boolean)cxl_bLinkAsCreatingAppointment.getValue(context);
		}
		public void setbLinkAsCreatingAppointment(Boolean value)
		{
			cxl_bLinkAsCreatingAppointment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bLinkAsCreatingAppointment = null;
		public boolean getReasonableDateMessageBoxIdIsNotNull()
		{
			return !cxl_ReasonableDateMessageBoxId.getValueIsNull(context);
		}
		public Integer getReasonableDateMessageBoxId()
		{
			return (Integer)cxl_ReasonableDateMessageBoxId.getValue(context);
		}
		public void setReasonableDateMessageBoxId(Integer value)
		{
			cxl_ReasonableDateMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReasonableDateMessageBoxId = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class NewElectiveListNotesMenu1 implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int VIEW = 3;
				public static final int RIE = 4;
			}
			public void disableAllNewElectiveListNotesMenu1MenuItems()
			{
				this.contextMenuNewElectiveListNotesMenu1ADDItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu1EDITItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu1VIEWItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu1RIEItem.setEnabled(false);
			}
			public void hideAllNewElectiveListNotesMenu1MenuItems()
			{
				this.contextMenuNewElectiveListNotesMenu1ADDItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu1EDITItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu1VIEWItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu1RIEItem.setVisible(false);
			}
			private Menu contextMenuNewElectiveListNotesMenu1;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1ADDItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1ADDItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1ADDItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1EDITItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1EDITItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1EDITItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1VIEWItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1VIEWItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1VIEWItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu1RIEItem()
			{
				return this.contextMenuNewElectiveListNotesMenu1RIEItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu1RIEItem;
			public final class NewElectiveListNotesMenu2 implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 5;
				public static final int EDIT = 6;
				public static final int VIEW = 7;
				public static final int RIE = 8;
			}
			public void disableAllNewElectiveListNotesMenu2MenuItems()
			{
				this.contextMenuNewElectiveListNotesMenu2ADDItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu2EDITItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu2VIEWItem.setEnabled(false);
				this.contextMenuNewElectiveListNotesMenu2RIEItem.setEnabled(false);
			}
			public void hideAllNewElectiveListNotesMenu2MenuItems()
			{
				this.contextMenuNewElectiveListNotesMenu2ADDItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu2EDITItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu2VIEWItem.setVisible(false);
				this.contextMenuNewElectiveListNotesMenu2RIEItem.setVisible(false);
			}
			private Menu contextMenuNewElectiveListNotesMenu2;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu2ADDItem()
			{
				return this.contextMenuNewElectiveListNotesMenu2ADDItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu2ADDItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu2EDITItem()
			{
				return this.contextMenuNewElectiveListNotesMenu2EDITItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu2EDITItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu2VIEWItem()
			{
				return this.contextMenuNewElectiveListNotesMenu2VIEWItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu2VIEWItem;
			public ReadOnlyMenuItem getNewElectiveListNotesMenu2RIEItem()
			{
				return this.contextMenuNewElectiveListNotesMenu2RIEItem;
			}
			private MenuItem contextMenuNewElectiveListNotesMenu2RIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[281];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-REFERRAL", "Referral");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-BED", "Bed");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PRIORITY", "Priority");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-LANGUAGE", "Language");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-TRANSPORT", "Transport");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-CURRENTSUSPENSIONENDDATE", "CurrentSuspensionEndDate");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-NUMBEROFPROVIDERTCICANCELLATIONS", "NumberOfProviderTCICancellations");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListNotes", "BO-1096100065-ID", "ID_NotesForPatientElectiveList");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListNotes", "BO-1096100065-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListNotes", "BO-1096100065-NOTES", "Notes");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-ID", "ID_TCIOutcomeForPatientElectiveList");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOME", "Outcome");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CHANGEBY", "ChangeBy");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-STATUSDATETIME", "StatusDateTime");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOMEREASON", "OutcomeReason");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLEDFORNONMEDICALREASON", "CancelledForNonMedicalReason");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLATIONREASON", "CancellationReason");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-REASONCOMMENTS", "ReasonComments");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-PATIENT", "Patient");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-CANCERTYPE", "CancerType");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__Referral_" + componentIdentifier, "BO-1004100035-PATIENTCATEGORY", "PatientCategory");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CURRENTSUSPENSIONENDDATE", "CurrentSuspensionEndDate");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCLATERALITY", "ProcLaterality");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ISCONSULTANTPERFORMINGPROCEDURE", "IsConsultantPerformingProcedure");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CREATINGAPPOINTMENT", "CreatingAppointment");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-APPOINTMENTOUTCOMEACTION", "AppointmentOutcomeAction");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-NUMBEROFPROVIDERTCICANCELLATIONS", "NumberOfProviderTCICancellations");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WAS28DAYRULEAPPLIED", "Was28DayRuleApplied");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PREOPERATIVEOVERNIGHTSTAYREQUIRED", "PreOperativeOvernightStayRequired");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WLPREOPERATIVEOVERNIGHTSTAYREQUIRED", "WLPreOperativeOvernightStayRequired");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__RIENoteRecord_" + componentIdentifier, "BO-1096100065-ID", "ID_NotesForPatientElectiveList");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__RIENoteRecord_" + componentIdentifier, "BO-1096100065-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__RIENoteRecord_" + componentIdentifier, "BO-1096100065-NOTES", "Notes");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-ID", "ID_Appointment_Status");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-STATUS", "Status");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-STATUSREASON", "StatusReason");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-APPTDATE", "ApptDate");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-APPTTIME", "ApptTime");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-PASCLINIC", "PASClinic");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-DOS", "DoS");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-PRIORITY", "Priority");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-COMMENT", "Comment");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-WASLETTERPRINTED", "WasLetterPrinted");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-COULDNOTBESEEN", "Couldnotbeseen");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-CAREPROFESSIONALREADYTOSEE", "CareProfessionalReadyToSee");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-CAREPROFESSIONALNOTREADYTOSEE", "CareProfessionalNotReadyToSee");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__ApptStatus_" + componentIdentifier, "BO-1055100008-SESSION", "Session");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISFLAGGEDFORREVIEW", "IsFlaggedForReview");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASTLTSTARTCONTACT", "HasTLTStartContact");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-HASTHEATREAPPT", "HasTheatreAppt");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISCURRENTLYALLOCATED", "IsCurrentlyAllocated");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-OPDLOCATION", "OPDLocation");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-SUITABLEFORSURGERYDATE", "SuitableForSurgeryDate");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-NUMPROVIDERCANCELLEDAPPTS", "NumProviderCancelledAppts");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-NUMPATIENTCANCELLEDAPPTS", "NumPatientCancelledAppts");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-CONSULTATIONACTIVITYREQUIRED", "ConsultationActivityRequired");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-PATIENTCATEGORY", "PatientCategory");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.NewElectiveListTCIErodDialog.__internal_x_context__CatsReferralListV_" + componentIdentifier, "BO-1004100035-ISEMERGENCYREFERRAL", "IsEmergencyReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
