//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.newelectivelisttcieroddialog;

import ims.admin.vo.ElectiveListConfigurationVo;
import ims.admin.vo.ElectiveListConfigurationVoCollection;
import ims.admin.vo.enums.ElectiveListDetails;
import ims.RefMan.forms.newelectivelisttcieroddialog.GenForm.GroupPlanInEnumeration;
import ims.RefMan.forms.newelectivelisttcieroddialog.GenForm.grdNoteCommentsAddRow;
import ims.RefMan.forms.newelectivelisttcieroddialog.GenForm.grdNoteCommentsRow;
import ims.RefMan.vo.Booking_AppointmentElectiveListVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralforElectiveListDetailsVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListDetailsToSaveVo;
import ims.RefMan.vo.PatientElectiveListNotesVo;
import ims.RefMan.vo.PatientElectiveListNotesVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveListTCIVo;
import ims.RefMan.vo.PatientElectiveListTCIVoCollection;
import ims.RefMan.vo.ReasonRTTWeekWaitBreachVo;
import ims.RefMan.vo.ReferralERODVo;
import ims.RefMan.vo.ReviewPatientElectiveListVo;
import ims.RefMan.vo.ReviewPatientElectiveListVoCollection;
import ims.RefMan.vo.SuitableForSurgeryAssessmentForNewelectivelisttcieroddialogVo;
import ims.RefMan.vo.SuspensionDetailsForPatientElectiveListVo;
import ims.RefMan.vo.SuspensionDetailsForPatientElectiveListVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVoCollection;
import ims.RefMan.vo.enums.TCITheatreAppointmentKPIs;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ManagementIntention;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.UrlParam;
import ims.framework.WindowParam;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;




public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int REASONABLE_DAYS_LIMIT = 21;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		if (args != null)
		{
			//WDEV-19382
			if (args.length > 0 && args[0] != null && args[0] instanceof ElectiveListDetails)
				form.getLocalContext().setActionPressed((ElectiveListDetails) args[0]);
			if (args.length > 1 && args[1] != null && args[1] instanceof Boolean)
				form.getLocalContext().setbLinkAsCreatingAppointment((Boolean) args[1]);
			//WDEV-19382 --- end
		}
		else
			return;

		initialise();
		open();
		form.setMode((ElectiveListDetails.VIEWEDIT.equals(form.getLocalContext().getActionPressed()) || ElectiveListDetails.CANCELTCI.equals(form.getLocalContext().getActionPressed())) ? FormMode.VIEW : FormMode.EDIT);
		
		//if cancel TCI, open the CancelTciDialog
		if (ElectiveListDetails.CANCELTCI.equals(form.getLocalContext().getActionPressed()))
		{
			cancelTCI();
		}
		//wdev-18384
		if( ElectiveListDetails.REMOVE_ELECTIVE_LIST.equals(form.getLocalContext().getActionPressed()))
		{
			removeElectiveListEntry();
		}
		//-----------
		//wdev-19393
		if( ElectiveListDetails.UNDO_REMOVAL_ELECTIVE_LIST.equals(form.getLocalContext().getActionPressed()))
		{
			undoremoveElectiveListEntry();
		}
		//-----------
		
	}
	//wdev-18384
	private void removeElectiveListEntry()
	{
		PatientElectiveListRefVo tempVo = form.getGlobalContext().RefMan.getPatientElectiveListRef();
		engine.open(form.getForms().RefMan.RemoveFromElectiveList, new Object[] {tempVo}); 
		
	}
	//------------
	//wdev-19393
	private void undoremoveElectiveListEntry()
	{
		PatientElectiveListRefVo tempVo = form.getGlobalContext().RefMan.getPatientElectiveListRef();
		engine.open(form.getForms().RefMan.UndoRemovalFromWaitingList, new Object[] {tempVo}); 
		
	}
	//------------
	private void initialise()
	{
		form.getLocalContext().setReferral(domain.getReferralDetails(form.getGlobalContext().RefMan.getCatsReferral()));
		
		Boolean hasNonDiagnosticPEL = domain.hasNonDiagnosticPatientElectiveList(form.getGlobalContext().RefMan.getCatsReferral());
		bindElectiveListReason(hasNonDiagnosticPEL);
		
		CatsReferralforElectiveListDetailsVo referralDetais = form.getLocalContext().getReferral();

		form.ccRespHCP().initialize(MosType.HCP);
		
		if (referralDetais != null)
		{
			if (referralDetais.getReferralDetails() != null)
			{
				form.lblDate().setValue(referralDetais.getReferralDetails().getEnd18WW() != null ? referralDetais.getReferralDetails().getEnd18WW().toString() : "");
				form.ccRespHCP().setValue(referralDetais.getReferralDetails().getConsultant());
				
				if (referralDetais.getReferralDetails().getService() != null)
				{
					form.cmbService().newRow(referralDetais.getReferralDetails().getService(), referralDetais.getReferralDetails().getService().getServiceName());
					form.cmbService().setValue(referralDetais.getReferralDetails().getService());

					// if referral service has a maternity indicator, default to Maternity, else remove maternity
					
					if(!Boolean.TRUE.equals(hasNonDiagnosticPEL))
					{
    					if (Boolean.TRUE.equals(referralDetais.getReferralDetails().getService().getMaternityIndicator()))
    					{
    						form.cmbElectiveListReason().setValue(ElectiveListReason.MATERNITY);
    					}
    					else
    					{
    						form.cmbElectiveListReason().removeRow(ElectiveListReason.MATERNITY);
    						form.cmbElectiveListReason().setValue(ElectiveListReason.TREATMENT);
    					}
					}
				}
			}
			
			form.cmbPriority().setValue(referralDetais.getUrgency());
		}

		// populate Elective Admission Type label
		if (ElectiveListDetails.ADDTOBOOKEDLIST.equals(form.getLocalContext().getActionPressed()))
		{
			form.getLocalContext().setAdmissionType(ElectiveAdmissionType.BOOKED_TYPE12);
			form.lblAdmissionType().setValue(ElectiveAdmissionType.BOOKED_TYPE12.getText());
		}
		else if (ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()))
		{
			form.getLocalContext().setAdmissionType(ElectiveAdmissionType.PLANNED_TYPE13);
			form.lblAdmissionType().setValue(ElectiveAdmissionType.PLANNED_TYPE13.getText());
		}
		else if (ElectiveListDetails.ADDTOWAITINGLIST.equals(form.getLocalContext().getActionPressed()))
		{
			form.getLocalContext().setAdmissionType(ElectiveAdmissionType.ELECTIVE_TYPE11);
			form.lblAdmissionType().setValue(ElectiveAdmissionType.ELECTIVE_TYPE11.getText());
			
		}
		
		if (form.getGlobalContext().RefMan.getPatientElectiveListRef() == null)
		{
			form.lblStatus().setValue(WaitingListStatus.CREATED.getText());
			form.lblStatus().setTooltip("Current Status: " +  WaitingListStatus.CREATED.getText());   //WDEV-18597 

			populateElectiveListCombo(ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) ? true : false);
			defaultIntendedProcedure();
			initialiseIntendedManagement();
			//WDEV-18603
			form.dteDateOnList().setValue(new Date());
			
			if (referralDetais != null && referralDetais.getReferralDetails() != null)
			{
				if (YesNo.YES.equals(referralDetais.getReferralDetails().getInterpreterRequired()))
				{
					form.chkInterpreterRequired().setValue(true);
					form.cmbInterpreterRequired().setValue(referralDetais.getReferralDetails().getLanguage());
				}

				if (YesNo.YES.equals(referralDetais.getReferralDetails().getTransportRequired()))
				{
					form.chkTransportRequired().setValue(true);
					form.cmbTransportRequired().setValue(referralDetais.getReferralDetails().getTransport());
				}

				if (referralDetais.getReferralDetails().getSpecialRequirements() != null)
				{
					form.chkSpecialRequirements().setValue(true);
					form.txtSpecialRequrements().setValue(referralDetais.getReferralDetails().getSpecialRequirements());
				}

			}
		}
		
		//WDEV-18388
		//initialiseWardCombo();
		form.lblLastReviewByValue().setValue(null);
		form.lblLastReviewDateValue().setValue(null);
		//WDEV-18464 
		form.lblTCIOutcomeValue().setValue(null);
		
	}

	private void bindElectiveListReason(Boolean hasNonDiagnosticPEL)
	{
		if(Boolean.TRUE.equals(hasNonDiagnosticPEL) && form.cmbElectiveListReason().getValues().size() > 0)
		{
			for(int i = form.cmbElectiveListReason().getValues().size() - 1; i >= 0; i--)
			{
				if(!(form.cmbElectiveListReason().getValues().get(i) instanceof ElectiveListReason))
					continue;
				
				if(ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValues().get(i)))
					continue;
				
				form.cmbElectiveListReason().removeRow((ElectiveListReason) form.cmbElectiveListReason().getValues().get(i));
			}
		}
		
		if(form.cmbElectiveListReason().getValues().size() == 1)
		{
			form.cmbElectiveListReason().setValue((ElectiveListReason) form.cmbElectiveListReason().getValues().get(0));
		}
	}
	
	private void initialiseWardCombo()
	{
		//WDEv-18388
		if (form.qmbHospital().getValue()==null)
			return;
		
		LocationLiteVoCollection wards = domain.listWards(form.qmbWard().getEditedText(),form.qmbHospital().getValue());
		
		if (wards == null)
			return;
		
		for (int i = 0; i < wards.size(); i++)
		{
			form.qmbWard().newRow(wards.get(i), wards.get(i).getName());//WDEV-18388
		}
	}

	private void initialiseIntendedManagement()
	{
		
		//WDEV-18388 //WDEV-19428 - removed duplicate lookup references
		if (ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()))
		{
			form.cmbIntendedManagement().removeRow(ManagementIntention.DAY_CASE);
			form.cmbIntendedManagement().removeRow(ManagementIntention.OVERNIGHT);			
		}
		else if (ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()))
		{
			form.cmbIntendedManagement().removeRow(ManagementIntention.TYPE3_SEQUENCEATLEASTONENIGHT);
			form.cmbIntendedManagement().removeRow(ManagementIntention.TYPE4_SEQUENCENOOVERNIGHSTAY);
			form.cmbIntendedManagement().removeRow(ManagementIntention.TYPE5_SEQUENCEOVERNIGHTANDHOME);
			
		}
		else if (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()))
		{
			form.cmbIntendedManagement().removeRow(ManagementIntention.TYPE3_SEQUENCEATLEASTONENIGHT);
			form.cmbIntendedManagement().removeRow(ManagementIntention.TYPE4_SEQUENCENOOVERNIGHSTAY);
			form.cmbIntendedManagement().removeRow(ManagementIntention.TYPE5_SEQUENCEOVERNIGHTANDHOME);
		}

		defaultIntendedManagement();
		
	}

	private void defaultIntendedManagement()
	{
		if (form.intAnticipatedStay().getValue() != null  && (ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()) || ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType())))
		{
			if (form.intAnticipatedStay().getValue() > 1)
			{
				form.cmbIntendedManagement().setValue(ManagementIntention.OVERNIGHT); //WDEV-19428 - removed duplicate lookup references
			}
			else if (form.intAnticipatedStay().getValue() == 1)
			{
				form.cmbIntendedManagement().setValue(ManagementIntention.DAY_CASE); //WDEV-19428 - removed duplicate lookup references
			}
		}
		else
			form.cmbIntendedManagement().setValue(null);
	}

	private void defaultIntendedProcedure()
	{
		ProcedureLiteVo sfsProcedure = domain.getProcedureFromSuitableForSurgery(form.getLocalContext().getReferral().getCareContext());

		if (sfsProcedure != null)
		{
			form.qmbIntendedProcedure().newRow(sfsProcedure, sfsProcedure.getProcedureName());
			form.qmbIntendedProcedure().setValue(sfsProcedure);
			form.txtDescription().setValue(sfsProcedure.getProcedureName());
			form.intAnticipatedStay().setValue(sfsProcedure != null ? sfsProcedure.getLOS() : null);
		}

	}

	private void populateElectiveListCombo(boolean isDiagnosticReason)
	{
		form.cmbElectiveList().clear();

		if (!isDiagnosticReason)
		{
    		ElectiveListConfigurationVoCollection electiveListConfigForService = new ElectiveListConfigurationVoCollection();
    		ElectiveListConfigurationVoCollection electiveListConfigForHCP = new ElectiveListConfigurationVoCollection();
    		ElectiveListConfigurationVoCollection electiveListConfigForAllServices = new ElectiveListConfigurationVoCollection();
    
    		electiveListConfigForService = domain.getElectiveListConfigForService(form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service());
    
    		if (form.ccRespHCP().getValue() != null)
    		{
    			electiveListConfigForHCP = domain.getElectiveListConfigForHCP(form.ccRespHCP().getValue().getIMosId(), form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service());
    		}
    
    		if (Boolean.TRUE.equals(form.chkExtendedSearch().getValue()) && form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty() != null)
    		{
    			electiveListConfigForAllServices = domain.getElectiveListsBySpecialty(form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty().getID());
    
    			addRowsToElectiveListCombo(electiveListConfigForAllServices, false);
    		}
    		else
    		// join the electiveListConfigForHCP and electiveListConfigForService
    		{
    			for (int i = 0; i < electiveListConfigForService.size(); i++)
    			{
    				electiveListConfigForHCP.add(electiveListConfigForService.get(i));
    			}
    
    			addRowsToElectiveListCombo(electiveListConfigForHCP, false);
    		}
		}
		else
		{
			ElectiveListConfigurationVoCollection electiveListConfig = domain.getElectiveList();
			addRowsToElectiveListCombo(electiveListConfig, true);
		}
	}

	private void addRowsToElectiveListCombo(ElectiveListConfigurationVoCollection electiveListConfig, boolean isDiagnosticReason)
	{
		ElectiveListConfigurationVoCollection tempListConfig = new ElectiveListConfigurationVoCollection();
		
		int nrOfListsHcpIsDefault = 0;
		ElectiveListConfigurationVo defaultHcpList = null;
		
		for (int i = 0; i < electiveListConfig.size(); i++)
		{

			// check if HCP if default for this ElectiveListConfiguration add instances
			if (!isDiagnosticReason && form.ccRespHCP().getValue() != null && isDefaultHcpOnListConfig(electiveListConfig.get(i)))
			{
				form.cmbElectiveList().newRow(electiveListConfig.get(i), electiveListConfig.get(i).getWaitingListName()+(electiveListConfig.get(i).getServiceIsNotNull() ? " ("+electiveListConfig.get(i).getService().getServiceName()+")":"" ), Color.Red);
				
				if (nrOfListsHcpIsDefault == 0) //set the defaultHcpList to the first default elective List found for the HCP
				{
					defaultHcpList = electiveListConfig.get(i);
				}
				
				nrOfListsHcpIsDefault++;
			}
			else
				// add to a temporary list
				tempListConfig.add(electiveListConfig.get(i));
		}

		ServiceLiteVo referralService = (form.getLocalContext().getReferral()!=null && form.getLocalContext().getReferral().getReferralDetails()!=null ? form.getLocalContext().getReferral().getReferralDetails().getService(): null); //WDEV-18388 
		// add the remaining ElectiveListConfiguration items to the combo
		for (int i = 0; i < tempListConfig.size(); i++)
		{
			form.cmbElectiveList().newRow(tempListConfig.get(i), tempListConfig.get(i).getWaitingListName()+ (tempListConfig.get(i).getServiceIsNotNull()  &&  referralService!=null && referralService.getID_Service().intValue() != tempListConfig.get(i).getService().getID_Service().intValue() ? " (Service: "+ tempListConfig.get(i).getService().getServiceName()+")" : ""));
		}

		if (electiveListConfig.size() == 1)
			form.cmbElectiveList().setValue(electiveListConfig.get(0));
		else if (nrOfListsHcpIsDefault == 1) // if the HCP has only one default Elective List, default it.
			form.cmbElectiveList().setValue(defaultHcpList);
	}

	private boolean isDefaultHcpOnListConfig(ElectiveListConfigurationVo electiveListConfig)
	{
		for (int j = 0; electiveListConfig.getHCPs() != null && j < electiveListConfig.getHCPs().size(); j++)
		{
			if (Boolean.TRUE.equals(electiveListConfig.getHCPs().get(j).getDefaultForHCP()) && electiveListConfig.getHCPs().get(j).getHCP().equals(form.ccRespHCP().getValue()))
			{
				return true;
			}
		}

		return false;
	}

	private void open()
	{	
		form.btnSuspend().setTooltip(null); //WDEV-18519
		populateScreenFromData();
	}

	private void populateScreenFromData()
	{
		if (form.getGlobalContext().RefMan.getPatientElectiveListRef() == null)
			return;
		
		PatientElectiveListDetailsToSaveVo patientElectiveList = null;
		
		if (form.getForms().Scheduling.AppointmentOutcomeDialog.equals(engine.getPreviosFormName())
				&& form.getGlobalContext().RefMan.getPatientElectiveListRef().getID_PatientElectiveList() == null
				&& form.getGlobalContext().RefMan.getPatientElectiveListRef() instanceof PatientElectiveListDetailsToSaveVo)
		{
			patientElectiveList = (PatientElectiveListDetailsToSaveVo) form.getGlobalContext().RefMan.getPatientElectiveListRef();
		}
		else
		{
			patientElectiveList = domain.getPatientElectiveList(form.getGlobalContext().RefMan.getPatientElectiveListRef());
		}
		
		if (patientElectiveList == null)
			return;
		
		form.getLocalContext().setPatientElectiveList(patientElectiveList);
		
		//WDEV-18519
		if (form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getID_PatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getSuspensions() != null)
		{	
			SuspensionDetailsForPatientElectiveListVoCollection suspensions = domain.getSuspensionsForPatientElectiveList(form.getGlobalContext().RefMan.getPatientElectiveListRef());
			form.btnSuspend().setTooltip(populateSuspensionsTooltip(suspensions));
		}
		populateElectiveListDetails();
		populateTCIDetails();
		populateErodDetails();
		populateCommentsAndNotesGrid(ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()));
	}

	private String populateSuspensionsTooltip(SuspensionDetailsForPatientElectiveListVoCollection suspensions)
	{
		if (suspensions == null || (suspensions != null && suspensions.size() == 0))
			return null;

		StringBuffer tooltip = new StringBuffer();

		tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<tr><td style=\" border:1px solid black;\"><b>Start Date  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>End Date  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>Initiator  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>Reason and Comments &nbsp &nbsp </b></td></tr>");
		for (int i = 0; i < suspensions.size(); i++)
		{
			if (suspensions.get(i).getIsRIE() != null && suspensions.get(i).getIsRIE())
				continue;
			
			tooltip.append("<tr>");
			SuspensionDetailsForPatientElectiveListVo suspension = suspensions.get(i);
			
			if (suspension==null)
				continue;
			
			tooltip.append("<td style=\" border:1px solid black;\"><b>" +(suspension.getStartDateIsNotNull() ?  suspension.getStartDate().toString():"") 
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(suspension.getEndDateIsNotNull() ? suspension.getEndDate().toString():"")
							+ "</b></td><td style=\" border:1px solid black;\"><b>" + (suspension.getInitatorIsNotNull() ? suspension.getInitator().getText() : "")
							+ "</b></td><td style=\" border:1px solid black;\">" + ((suspension.getSuspensionReasonIsNotNull() ? "<b>Suspension Reason:</b> " + suspension.getSuspensionReason().getText() : "" )+ (suspension.getCommentsIsNotNull() ? "<br/><b>Comments:</b> " + suspension.getComments() : "")
							+ "</b></td></tr>"));
		}
		tooltip.append("</table>");

		return tooltip.toString();
		
	}
	private void populateCommentsAndNotesGrid(boolean isWaitingListEntry)
	{
		form.grdNoteCommentsAdd().getRows().clear();//WDEV-18360
		form.grdNoteComments().getRows().clear();//WDEV-18360

		PatientElectiveListNotesVoCollection notesList = form.getLocalContext().getPatientElectiveList().getNotes();

		if (notesList == null || notesList.size() == 0)
			return;

		if (isWaitingListEntry)
		{	
			for (int i = 0; i < notesList.size(); i++)
			{
				PatientElectiveListNotesVo note = notesList.get(i);
				grdNoteCommentsAddRow row = form.grdNoteCommentsAdd().getRows().newRow();

				row.setcolNoteComment(note.getNotes());
				row.setcolRecordingDateTime(note.getAuthoringDateTime().toString());
				row.setcolRecordingUser(note.getAuthoringUser().toString());

				row.setValue(note);
			}
		}
		else
		{	
			for (int j = 0; j < notesList.size(); j++)
			{
				PatientElectiveListNotesVo elNote = notesList.get(j);
				grdNoteCommentsRow newRow = form.grdNoteComments().getRows().newRow();

				newRow.setcolNoteComment(elNote.getNotes());
				newRow.setcolRecordingDateTime(elNote.getAuthoringDateTime().toString());
				newRow.setcolRecordingUser(elNote.getAuthoringUser().toString());

				newRow.setValue(elNote);
			}
		}
	}

	private void populateElectiveListDetails()
	{
		PatientElectiveListDetailsToSaveVo patientElectiveList = form.getLocalContext().getPatientElectiveList();
		
		form.getLocalContext().setAdmissionType(patientElectiveList.getElectiveAdmissionType());
		
		initialiseIntendedManagement();
		
		//WDEV-18388
		
		form.lblStatus().setValue(patientElectiveList.getElectiveListStatus() != null ? patientElectiveList.getElectiveListStatus().getElectiveListStatus().getText() : "");
		//wdev-18597
		if( patientElectiveList.getElectiveListStatus() != null && patientElectiveList.getElectiveListStatus().getElectiveListStatus() != null && patientElectiveList.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED ))
		{
			String strStatus = new String();
			strStatus = "<b>Current Status : </b>" +  patientElectiveList.getElectiveListStatus().getElectiveListStatus().getText() + "<br>";
			strStatus += "<b>Removal Reason : </b>" + (patientElectiveList.getElectiveListStatus().getRemovalReason() != null ? patientElectiveList.getElectiveListStatus().getRemovalReason().getText():"");
			form.lblStatus().setTooltip( strStatus);
		}
		else if( patientElectiveList.getElectiveListStatus() != null && patientElectiveList.getElectiveListStatus().getElectiveListStatus() != null )
			form.lblStatus().setTooltip("<b>Current Status: </b>" +  patientElectiveList.getElectiveListStatus().getElectiveListStatus().getText());
		//--------
			
		form.lblAdmissionType().setValue(patientElectiveList.getElectiveAdmissionType() != null ? patientElectiveList.getElectiveAdmissionType().getText() : "");
		
		//WDEV-18603
		form.dteDateOnList().setValue(patientElectiveList.getDateOnList());
		form.ccRespHCP().setValue((IMos) patientElectiveList.getConsultant());
		ServiceLiteVo referralService = (form.getLocalContext().getReferral()!=null && form.getLocalContext().getReferral().getReferralDetails()!=null ? form.getLocalContext().getReferral().getReferralDetails().getService(): null); //WDEV-18388
		if (patientElectiveList.getElectiveList() != null && !form.cmbElectiveList().getValues().contains(patientElectiveList.getElectiveList())) //WDEV-20267
			form.cmbElectiveList().newRow(patientElectiveList.getElectiveList(), patientElectiveList.getElectiveList().getWaitingListName()+(patientElectiveList.getElectiveList().getServiceIsNotNull() && referralService!=null && referralService.getID_Service().intValue() != patientElectiveList.getElectiveList().getService().getID_Service().intValue()  ? " (Service: " + patientElectiveList.getElectiveList().getService().getServiceName() + ")": ""));//WDEV-18388
		
		form.cmbElectiveList().setValue(patientElectiveList.getElectiveList());
		form.cmbElectiveListReason().setValue(patientElectiveList.getElectiveListReason());
		//WDEV-20267
		if (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getID_PatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getElectiveList() == null && WaitingListStatus.TO_BE_ADDED_LATER.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())) //WDEV-20267
		{
			populateElectiveListCombo(ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) ? true : false);
		}
		
		if (patientElectiveList.getPrimaryProcedure() != null)
		{
			form.qmbIntendedProcedure().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());
			form.qmbIntendedProcedure().setValue(patientElectiveList.getPrimaryProcedure());
		}
		
		form.txtDescription().setValue(patientElectiveList.getProcedureDescription());
		//wdev-18673
		SuitableForSurgeryAssessmentForNewelectivelisttcieroddialogVo tempvo = null; 
		if( form.getLocalContext().getReferralIsNotNull())
		    tempvo = domain.getSuitableForSurgeryAssessmentByCareContext(form.getLocalContext().getReferral().getCareContext());
		if( tempvo != null && tempvo.getProcedureIsNotNull() && tempvo.getProcedure().getProcLateralityIsNotNull())
		{
			form.cmbLaterality().setValue(tempvo.getProcedure().getProcLaterality());
			
		}
		else if( patientElectiveList.getProcLateralityIsNotNull())
		{
			form.cmbLaterality().setValue(patientElectiveList.getProcLaterality());
			
			
		}
		else
		{
			form.cmbLaterality().setValue(null);
			
		}
		
		form.chkProcedureToBeCarriedOutByConsultant().setValue(patientElectiveList.getIsConsultantPerformingProcedure());
		//------------
		form.cmbPriority().setValue(patientElectiveList.getPriority());
		form.cmbIntendedManagement().setValue(patientElectiveList.getIntendedManagement());
		form.intAnticipatedStay().setValue(patientElectiveList.getAnticipatedStay());
		form.chkAvailableAtShortNoticed().setValue(patientElectiveList.getAvailableAtShortNotice());
		form.intNoOfDaysNotice().setValue(patientElectiveList.getAvailableAtShortNoticePeriod());
		//form.chkPreAdmissionRequired().setValue(patientElectiveList.getPreOperativeOvernightStayRequired());	//wdev-20561
		form.chkInterpreterRequired().setValue(patientElectiveList.getInterpretatorRequired());
		form.cmbInterpreterRequired().setValue(patientElectiveList.getLanguage());
		form.chkTransportRequired().setValue(patientElectiveList.getTransportRequired());
		form.cmbTransportRequired().setValue(patientElectiveList.getTransport());
		form.chkSpecialRequirements().setValue(patientElectiveList.getSpecialRequirements()/*patientElectiveList.getAvailableAtShortNotice()*/);
		form.txtSpecialRequrements().setValue(patientElectiveList.getSpecialRequirementsDetails());
		
		//WDEV-18388
		if (patientElectiveList.getReviews() != null)
		{
			ReviewPatientElectiveListVoCollection collPrevReviews = patientElectiveList.getReviews().sort(SortOrder.ASCENDING);
			form.imbElectiveListHistory().setTooltip(populateElectiveListHistoryTooltip(collPrevReviews));

			ReviewPatientElectiveListVo lastReview = collPrevReviews!=null && collPrevReviews.size()>0 && collPrevReviews.get(collPrevReviews.size()-1)!=null ?  collPrevReviews.get(collPrevReviews.size()-1) : null;

			//WDEV-19133
			if(lastReview!=null && lastReview.getReviewedBy()!=null)
			{
				String reviewMosName = lastReview.getReviewedBy().getIMosName().length() > 35 ? 
										lastReview.getReviewedBy().getIMosName().subSequence(0, 35)+"...":
										lastReview.getReviewedBy().getIMosName();
							
						form.lblLastReviewByValue().setValue(reviewMosName);
			}
			
			form.lblLastReviewDateValue().setValue(lastReview!=null  && lastReview.getReviewedDate()!=null? lastReview.getReviewedDate().toString(): null);
			form.imbTCIHistory().setTooltip(populateTCiHistoryTooltip(patientElectiveList.getTCIHistory()));
		}
	}

	//WDEV-18388
	private String populateElectiveListHistoryTooltip(ReviewPatientElectiveListVoCollection reviews)
	{
		if (reviews == null || (reviews != null && reviews.size() == 0))
			return null;

		StringBuffer tooltip = new StringBuffer();

		tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<tr><td style=\" border:1px solid black;\"><b>Review Date  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>Review By &nbsp &nbsp </b></td></tr>");
		for (int i = 0; i < reviews.size(); i++)
		{
			tooltip.append("<tr>");
			ReviewPatientElectiveListVo review = reviews.get(i);
			
			if (review==null)
				continue;
			
			tooltip.append("<td style=\" border:1px solid black;\"><b>" +( review.getReviewedDate()!=null ? review.getReviewedDate():"") 
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(review.getReviewedBy()!=null && review.getReviewedBy().getName()!=null ? review.getReviewedBy().getName():"" )
							+ "</b></td></tr>");
		}
		tooltip.append("</table>");

		return tooltip.toString();
		
	}

	//WDEV-18388
	private String populateTCiHistoryTooltip(PatientElectiveListTCIVoCollection tciHistory)
	{
		if (tciHistory == null || (tciHistory != null && tciHistory.size() == 0))
			return null;

		StringBuffer tooltip = new StringBuffer();

		tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<tr><td style=\" border:1px solid black;\"><b>TCI Date  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>TCI Time &nbsp &nbsp </b></td><td style=\" border:1px solid black;\"><b>Outcome &nbsp &nbsp </b></td></tr>");
		for (int i = 0; i < tciHistory.size(); i++)
		{
			tooltip.append("<tr>");
			PatientElectiveListTCIVo tci = tciHistory.get(i);
			
			if (tci==null)
				continue;
			
			tooltip.append("<td style=\" border:1px solid black;\"><b>" +( tci.getTCIDate()!=null ? tci.getTCIDate():"") 
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(tci.getTCITime()!=null ? tci.getTCITime():"" )
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(tci.getCurrentOutcome()!=null && tci.getCurrentOutcome().getOutcome()!=null? tci.getCurrentOutcome().getOutcome():"") + "</b></td></tr>");
		}
		tooltip.append("</table>");

		return tooltip.toString();
	}

	private void populateTCIDetails()
	{
		PatientElectiveListTCIVo tciDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails();
		
		if (tciDetails == null)
		{
			clearTCIDetails();
			return;
		}
		
		//WDEV-19615
		form.dtePlannedDate().setValue(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()) && form.dtePlannedDate().isVisible() ? tciDetails.getPlannedTCIDate() : null);
	
		form.dteTCIDate().setValue(form.dteTCIDate().isVisible() ? tciDetails.getTCIDate() : null);
		form.timTCITime().setValue(form.timTCITime().isVisible() ? tciDetails.getTCITime() : null);
		
		//WDEV-18388
		if (tciDetails.getTCIWard()!=null)
		{
			form.qmbWard().newRow(tciDetails.getTCIWard(), tciDetails.getTCIWard().getName());
			form.qmbWard().setValue(tciDetails.getTCIWard());
		}
		
		//WDEV-18388
		if (tciDetails.getTCIHospital()!=null)
		{
			form.qmbHospital().newRow(tciDetails.getTCIHospital(),tciDetails.getTCIHospital().getName());
			form.qmbHospital().setValue(tciDetails.getTCIHospital());
		}
		
		form.cmbBreachReason().setValue(tciDetails.getRTTBreachReason());
		form.imbOtherReason().setTooltip( tciDetails.getRTTBreachComment() != null ? "Other Breach Reason: <b>" + tciDetails.getRTTBreachComment() + "</b>" : "Enter Other Reason");
		form.dteDateOffered().setValue(tciDetails.getDateTCIOffered());
		form.cmbTCIOfferedMethod().setValue(tciDetails.getTCIOfferMethod());
		//WDEV-18464
		form.lblTCIOutcomeValue().setValue("");
		form.lblTCIOutcomeValue().setTooltip("");
		if (tciDetails.getCurrentOutcomeIsNotNull() 
			&& tciDetails.getCurrentOutcome().getOutcomeIsNotNull())
		{
			form.lblTCIOutcomeValue().setValue( tciDetails.getCurrentOutcome().getOutcome().getText().length() > 60 ? tciDetails.getCurrentOutcome().getOutcome().getText().substring(0 , 60) : tciDetails.getCurrentOutcome().getOutcome().getText());
			form.lblTCIOutcomeValue().setTooltip(tciDetails.getCurrentOutcome().getOutcome().getText().length() > 60 ? tciDetails.getCurrentOutcome().getOutcome().getText() : tciDetails.getCurrentOutcome().getOutcome().getText());
		}
			
	}

	private void clearTCIDetails()
	{
		form.dteTCIDate().setValue(null);
		form.dtePlannedDate().setValue(null);//WDEV-19615
		form.timTCITime().setValue(null);
		form.qmbWard().setValue(null);//WDEV-18388
		form.qmbHospital().setValue(null);//WDEV-18388
		form.cmbBreachReason().setValue(null);
		form.imbOtherReason().setTooltip("Enter Other Reason");		
		form.dteDateOffered().setValue(null);
		form.cmbTCIOfferedMethod().setValue(null);
		form.lblTCIOutcomeValue().setValue(null);//WDEV-18464
		form.lblTCIOutcomeValue().setTooltip(null);//WDEV-18464
	}

	private void populateErodDetails()
	{
		 ReferralERODVo erodDetails = form.getLocalContext().getPatientElectiveList().getEROD();
		
		 if (erodDetails == null)
		 {
			 clearERODDetails(); //WDEV-18513 
			 return;
		 }
		 
		 form.dteEarliestDateOffered().setValue(erodDetails.getERODDate1());
		 form.dteSecondDateOffered().setValue(erodDetails.getERODDate2());
		 form.chkReasonableOffer().setValue(erodDetails.getReasonableOffer());
		 form.dtePatientAvailableFromDate().setValue(erodDetails.getPatAvailFromDate());
		 form.cmbERODReason().setValue(erodDetails.getERODReason());
		 form.txtERODComment().setValue(erodDetails.getERODReasonComment());
		 form.chkEXTDelay().setValue(erodDetails.getIsExtendedDelay());//wdev-20431
 	}

	//WDEV-18513 
	private void clearERODDetails()
	{
		 form.dteEarliestDateOffered().setValue(null);
		 form.dteSecondDateOffered().setValue(null);
		 form.chkReasonableOffer().setValue(false);
		 form.dtePatientAvailableFromDate().setValue(null);	
		 form.cmbERODReason().setValue(null);
		 form.txtERODComment().setValue(null);
		 form.chkEXTDelay().setValue(null);//wdev-20431
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (ElectiveListDetails.VIEWEDIT.equals(form.getLocalContext().getActionPressed())
			|| ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed())
			|| ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()))
		{
			open();
			form.getLocalContext().setActionPressed(null);//WDEV-19203
			form.setMode(FormMode.VIEW);
		}
		else
		{
			//wdev-18320
			if( ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()) )
			{
				
				PatientElectiveListDetailsToSaveVo patientElectiveList = form.getLocalContext().getPatientElectiveList();
				
				ReviewPatientElectiveListVo tempVo = new ReviewPatientElectiveListVo();
				tempVo.setReviewedDate(new DateTime());
				tempVo.setReviewedBy((MemberOfStaffLiteVo) domain.getMosUser());
				ReviewPatientElectiveListVoCollection tempColl = patientElectiveList.getReviews();
				if( tempColl == null )
					tempColl = new ReviewPatientElectiveListVoCollection();
				tempColl.add(tempVo);
				patientElectiveList.setReviews(tempColl);
				form.getLocalContext().setPatientElectiveList(patientElectiveList);
				
				save(false,false,false, false);
				
			}
			engine.close(DialogResult.CANCEL);
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save(true, true, true, false))
		{
			open();
			//WDEV-18388
			form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
			form.setMode(FormMode.VIEW);
		}
	}

	private boolean save(boolean checkReasonableOffer, boolean populateFromScreen, boolean check28DayRuleBreach, boolean bCancelledTCIForNonMedicalReasons)
	{
		PatientElectiveListDetailsToSaveVo patElectiveListToSave = (populateFromScreen ? populateDataFromScreen(form.getLocalContext().getPatientElectiveList()) : form.getLocalContext().getPatientElectiveList());
		
		//WDEV-18449 -- start
		Booking_AppointmentElectiveListVo appointmentsDetails = null;
		Integer tciID = null;
		if (form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointmentIsNotNull())
		{
			tciID = form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveList();
			appointmentsDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment();
			form.getLocalContext().setApptStatus(setAppointmentStatus(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList()));
		}
		//WDEV-18449 -- end
		
		if( populateFromScreen == true)   //wdev-18320
		{
    		if (!validateUIRules(patElectiveListToSave)) //WDEV-20655
    			return false;
		}
		
		String[] errors = patElectiveListToSave.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if (form.chkReasonableOffer().isVisible() && checkReasonableOffer) 	//wdev-19200
		{
			if( checkReasonableOffer() == false )
				return false;
		}
		if (check28DayRuleBreach)
		{
			if (isKpi28DayRuleBreached())
			{	
				engine.open(form.getForms().RefMan.ReasonForBookingPast28DayKPI, new Object[]{TCITheatreAppointmentKPIs.KPI_28DAY_TCI});
				return false;
			}
		}
		boolean isNewERODSaved = patElectiveListToSave.getEROD() != null && patElectiveListToSave.getEROD().getID_ReferralEROD() == null;;
		//WDEV-18345
		if (engine.getPreviosFormName().equals(form.getForms().Scheduling.AppointmentOutcomeDialog))
		{
			form.getGlobalContext().RefMan.setPatientElectiveList(patElectiveListToSave);
			engine.close(DialogResult.OK);
			return false;
		}
		
		try 
		{
			patElectiveListToSave = domain.save(patElectiveListToSave, bCancelledTCIForNonMedicalReasons);
			
			if (patElectiveListToSave.getTCIDetails() != null && patElectiveListToSave.getTCIDetails().getTCIHospital()!=null) //WDEV-20064
			{
				LocationLiteVo caseNoteLocation=getCaseNoteLocAssociatedWithHospital(patElectiveListToSave.getElectiveList(), patElectiveListToSave.getTCIDetails().getTCIHospital());
				
				domain.createCaseNoteRequests(patElectiveListToSave.getTCIDetails().getID_TCIForPatientElectiveList(), form.getGlobalContext().Core.getPatientShort(), caseNoteLocation);
			}
			
			//WDEV-19704 Trigger HL7 message moved here from impl as per WDEV-20793
			domain.triggerElectiveListEvent(patElectiveListToSave);
			
			form.getGlobalContext().RefMan.setPatientElectiveListRef(patElectiveListToSave);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
				
		if(isNewERODSaved && patElectiveListToSave.getTCIDetails() == null && !WaitingListStatus.SUSPENDED.equals(patElectiveListToSave.getElectiveListStatus().getElectiveListStatus()) && !isSuspensionRecordRelevant(patElectiveListToSave)) //WDEV-20196 
		{
			form.getLocalContext().setSuspensionMessageBoxId(engine.showMessage("Do you want to create a suspension record?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
		}
		
		// WDEV-18449 -- start
		if(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()) &&
			patElectiveListToSave != null && (patElectiveListToSave.getTCIDetails() == null ||(patElectiveListToSave.getTCIDetailsIsNotNull() && !patElectiveListToSave.getTCIDetails().getID_TCIForPatientElectiveList().equals(tciID)))  && appointmentsDetails != null && appointmentsDetails.getTheatreBooking() != null)
		{
			cancelTCILinkedAppointments(appointmentsDetails);
		}
		// WDEV-18449 -- end
		
		return true;
	}

	//WDEV-20064
	private LocationLiteVo getCaseNoteLocAssociatedWithHospital(ElectiveListConfigurationVo electiveList, LocationLiteVo tciHospital)
	{
		if (electiveList==null || electiveList.getListLocations()==null )
			return null;
		
		for (int i=0;i<electiveList.getListLocations().size();i++)
		{
			if (tciHospital.equals(electiveList.getListLocations().get(i).getListLocation()))
			{
				return electiveList.getListLocations().get(i).getCaseNoteFolderLocation();
			}
		}
		
		return null;
	}
	private boolean checkReasonableOffer()
	{
		String warnings = "";
		int numberOfDates = 0;

		//if (Boolean.TRUE.equals(form.chkReasonableOffer().getValue()))
		//{

			if (form.dteEarliestDateOffered().getValue() != null && form.dteEarliestDateOffered().getValue().isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT)))
			{
				warnings += "'Earliest Date Offered' is less than " + REASONABLE_DAYS_LIMIT + " days";
				numberOfDates++;
			}

			if (form.dteSecondDateOffered().getValue() != null && form.dteSecondDateOffered().getValue().isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT)))
			{
				warnings += (warnings.length() > 0 ? "\n" : "") + "'Second Date Offered' is less than " + REASONABLE_DAYS_LIMIT + " days";
				numberOfDates++;
			}

			if (warnings.length() > 0)
			{
				warnings += "\nDid the patient confirm " + (numberOfDates == 2 ? "these dates" : "this date") + "?";
			}

			if (warnings.length() > 0)
			{
				form.getLocalContext().setReasonableDateMessageBoxId(engine.showMessage(warnings, "Warning", MessageButtons.YESNO, MessageIcon.WARNING));	//wdev-19200
				return false;
			}
			//else
			//	save(false, true);
		//}
		return true;
	}
	
	private boolean isKpi28DayRuleBreached()
	{
		/*if (form.getLocalContext().getPatientElectiveListIsNotNull())
		{
			if (FormMode.EDIT.equals(form.getMode()) && (!ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed())) && (ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()) || ElectiveListDetails.NEW_EDIT_TCI_EDIT_MODE.equals(form.getLocalContext().getActionPressed()) || ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed())))  
			{
				if (form.dteTCIDate().getValue() != null && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getTCICancelledByProvider()) && (form.getLocalContext().getPatientElectiveList().getRequiresTCIBy() != null  &&  form.dteTCIDate().getValue().isGreaterThan(form.getLocalContext().getPatientElectiveList().getRequiresTCIBy())))
					return true;
			}
		}*/
		return false;
	}
	
	
	private PatientElectiveListDetailsToSaveVo populateDataFromScreen(PatientElectiveListDetailsToSaveVo patientElectiveList)
	{
		//WDEV-18388
		if (patientElectiveList == null)
			patientElectiveList = new PatientElectiveListDetailsToSaveVo();
		else
			patientElectiveList=(PatientElectiveListDetailsToSaveVo) patientElectiveList.clone();
		
		CatsReferralforElectiveListDetailsVo currentReferral = form.getLocalContext().getReferral();
		
		patientElectiveList.setPatient(currentReferral.getPatient());
		patientElectiveList.setReferral(currentReferral);
		patientElectiveList.setEpisodeOfCare(currentReferral.getCareContext().getEpisodeOfCare());
		
		patientElectiveList.setElectiveList(form.cmbElectiveList().getValue());
		patientElectiveList.setElectiveListReason(form.cmbElectiveListReason().getValue());
		
		patientElectiveList.setPrimaryProcedure(form.qmbIntendedProcedure().getValue());
		patientElectiveList.setProcedureDescription(form.txtDescription().getValue());
		
		//wdev-18673
		patientElectiveList.setProcLaterality(form.cmbLaterality().getValue());
		patientElectiveList.setIsConsultantPerformingProcedure(form.chkProcedureToBeCarriedOutByConsultant().getValue());
		
		//----------
		
		patientElectiveList.setPriority(form.cmbPriority().getValue());
		patientElectiveList.setIntendedManagement(form.cmbIntendedManagement().getValue());
		
		patientElectiveList.setAnticipatedStay(form.intAnticipatedStay().getValue());
		
		patientElectiveList.setAvailableAtShortNotice(form.chkAvailableAtShortNoticed().getValue());
		patientElectiveList.setAvailableAtShortNoticePeriod(form.intNoOfDaysNotice().getValue());
		
		//patientElectiveList.setPreOperativeOvernightStayRequired(form.chkPreAdmissionRequired().getValue());		//wdev-20561
		
		patientElectiveList.setOperativeProcedureStatus(form.qmbIntendedProcedure().getValue() != null);
		
		
		//WDEV-18388
		if (ElectiveListDetails.CANCELTCI.equals(form.getLocalContext().getActionPressed()) 
				&& patientElectiveList.getTCIDetails()!=null)
		{
			PatientElectiveListTCIVo tciToBeCancelled = (PatientElectiveListTCIVo) patientElectiveList.getTCIDetails().clone();
			 
			patientElectiveList.setTCIDetails(null);
			tciToBeCancelled.setCurrentOutcome(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList());
			
			if(tciToBeCancelled.getOutcomeHistory() == null)
				tciToBeCancelled.setOutcomeHistory(new TCIOutcomeForPatientElectiveListVoCollection());
			
			tciToBeCancelled.getOutcomeHistory().add(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList());
			
			if(patientElectiveList.getTCIHistory() == null)
				patientElectiveList.setTCIHistory(new PatientElectiveListTCIVoCollection());
			
			patientElectiveList.getTCIHistory().add(tciToBeCancelled);
		}
		
		if(atLeastOneTCIFieldCompleted())
		{
			PatientElectiveListTCIVo tciDetails = patientElectiveList.getTCIDetails();
			
			if (tciDetails == null) 
				tciDetails = new PatientElectiveListTCIVo();
			
			//WDEV-19615
			tciDetails.setPlannedTCIDate(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()) && form.dtePlannedDate().isVisible() ? form.dtePlannedDate().getValue() : null);
			
			tciDetails.setTCIDate(form.dteTCIDate().isVisible() ? form.dteTCIDate().getValue() : null);
			tciDetails.setTCITime(form.timTCITime().isVisible() ? form.timTCITime().getValue() : null);
			
			tciDetails.setTCIWard(form.qmbWard().getValue());//WDEV-18388
			tciDetails.setTCIHospital(form.qmbHospital().getValue());//WDEV-18388
			tciDetails.setRTTBreachReason(form.cmbBreachReason().getValue());
			tciDetails.setRTTBreachComment(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreachIsNotNull() ? form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment() : null); //WDEV-19445
			tciDetails.setDateTCIOffered(form.dteDateOffered().getValue());
			tciDetails.setTCIOfferMethod(form.cmbTCIOfferedMethod().getValue());
			tciDetails.setTCIConsultant((HcpLiteVo) form.ccRespHCP().getValue());
			tciDetails.setIsActive(Boolean.TRUE);
			
			if (form.getGlobalContext().RefMan.getReason28DayRuleBreachIsNotNull())
			{					
				tciDetails.setDay28BreachReason(form.getGlobalContext().RefMan.getReason28DayRuleBreach().getReason());
				tciDetails.setDay28BreachComment(form.getGlobalContext().RefMan.getReason28DayRuleBreach().getComment());
			}
			
			patientElectiveList.setTCIDetails(tciDetails);
			//patientElectiveList.setRequiresTCIBy(null);			//wdev-18419
			patientElectiveList.setWas28DayRuleApplied(false);//WDEV-20221
		}
		else
			patientElectiveList.setTCIDetails(null);
		
		if (atLeastOneERODFieldCompleted())
		{
			ReferralERODVo erodDetails = patientElectiveList.getEROD();
			
			if(erodDetails == null)
			{
				erodDetails = new ReferralERODVo();
				// WDEV-18436  
				if (ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()))
					erodDetails.setERODType(ERODType.DIAGNOSTIC);
				else
					erodDetails.setERODType(ERODType.ELECTIVE);
			}
			
			erodDetails.setERODDate1(form.dteEarliestDateOffered().getValue());
			erodDetails.setERODDate2(form.dteSecondDateOffered().getValue());
			erodDetails.setReasonableOffer(form.chkReasonableOffer().getValue());
			erodDetails.setPatAvailFromDate(form.dtePatientAvailableFromDate().getValue());
			erodDetails.setPathWayClock(currentReferral.getJourneyIsNotNull() ? currentReferral.getJourney().getCurrentClock():null);
			erodDetails.setIsActive(Boolean.TRUE);
			//WDEV-19616 
			erodDetails.setERODReason(form.cmbERODReason().getValue());
			erodDetails.setERODReasonComment(form.txtERODComment().getValue());
			erodDetails.setIsExtendedDelay(form.chkEXTDelay().getValue());//wdev-20431

			patientElectiveList.setEROD(erodDetails);
		}
		else
			patientElectiveList.setEROD(null);
		
		if (patientElectiveList.getElectiveListStatus() == null)
		{
			ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();

			//WDEV-19615
			if (patientElectiveList.getTCIDetails() != null && form.dteTCIDate().isVisible() && form.dteTCIDate().getValue()!=null)
				electiveListStatus.setElectiveListStatus(WaitingListStatus.TCI_GIVEN);//wdev-18569
			else if (patientElectiveList.getTCIDetails() != null && form.dtePlannedDate().isVisible() && form.dtePlannedDate().getValue()!=null )
				electiveListStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
			else
				electiveListStatus.setElectiveListStatus(WaitingListStatus.CREATED);
			
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
			electiveListStatus.setStatusDateTime(new DateTime());

			patientElectiveList.setElectiveListStatus(electiveListStatus);

			if (patientElectiveList.getElectiveListStatusHistory() == null)
				patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

			patientElectiveList.getElectiveListStatusHistory().add(electiveListStatus);
		}
		else if (patientElectiveList.getTCIDetails() != null && patientElectiveList.getTCIDetails().getTCIDate()!=null  //WDEV-19615
				&& (WaitingListStatus.REQUIRES_TCI.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) 
					|| WaitingListStatus.CREATED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) //WDEV-19107
						|| (WaitingListStatus.SUSPENDED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) && !isSuspensionRecordRelevant(patientElectiveList)))) //WDEV-20196
		{
			ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();

			electiveListStatus.setElectiveListStatus(WaitingListStatus.TCI_GIVEN);
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
			electiveListStatus.setStatusDateTime(new DateTime());

			patientElectiveList.setElectiveListStatus(electiveListStatus);

			if (patientElectiveList.getElectiveListStatusHistory() == null)
				patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

			patientElectiveList.getElectiveListStatusHistory().add(electiveListStatus);
		}
		//wdev-18320
		else if(ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()) 
				&& WaitingListStatus.CREATED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()))
		{
			ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();

			if (patientElectiveList.getTCIDetails() == null)
				electiveListStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
			else
				electiveListStatus.setElectiveListStatus(WaitingListStatus.TCI_GIVEN);
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
			electiveListStatus.setStatusDateTime(new DateTime());

			patientElectiveList.setElectiveListStatus(electiveListStatus);

			if (patientElectiveList.getElectiveListStatusHistory() == null)
				patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

			patientElectiveList.getElectiveListStatusHistory().add(electiveListStatus);
		}
		else if(ElectiveListDetails.CANCELTCI.equals(form.getLocalContext().getActionPressed()) && !(WaitingListStatus.SUSPENDED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) && isSuspensionRecordRelevant(patientElectiveList))) //WDEV-20196
		{
			if (patientElectiveList.getTCIDetails() == null)
			{
				ElectiveListStatusVo status=populateElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
				patientElectiveList.setElectiveListStatus(status);
				
				if(patientElectiveList.getElectiveListStatusHistory() == null)
					patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());
				
				patientElectiveList.getElectiveListStatusHistory().add(status);
				
			}
			else
			{
				ElectiveListStatusVo statusPrev=populateElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
				ElectiveListStatusVo statusCurrent=populateElectiveListStatus(WaitingListStatus.TCI_GIVEN);
				
				patientElectiveList.setElectiveListStatus(statusCurrent);
				
				if(patientElectiveList.getElectiveListStatusHistory() == null)
					patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());
				
				patientElectiveList.getElectiveListStatusHistory().add(statusPrev);
				patientElectiveList.getElectiveListStatusHistory().add(statusCurrent);
			}
		}
		
		//wdev-18320
		if( ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()))
		{
			ReviewPatientElectiveListVo tempVo = new ReviewPatientElectiveListVo();
			tempVo.setReviewedDate(new DateTime());
			tempVo.setReviewedBy((MemberOfStaffLiteVo) domain.getMosUser());
			ReviewPatientElectiveListVoCollection tempColl = patientElectiveList.getReviews();
			if( tempColl == null )
				tempColl = new ReviewPatientElectiveListVoCollection();
			tempColl.add(tempVo);
			patientElectiveList.setReviews(tempColl);
			//form.getLocalContext().setReviewdByWasSaved(true);
			
		}
		
		patientElectiveList.setConsultant((HcpLiteVo) form.ccRespHCP().getValue());
		
		//WDEV-18603
		patientElectiveList.setDateOnList(form.dteDateOnList().getValue());
		
		patientElectiveList.setElectiveAdmissionType(form.getLocalContext().getAdmissionType());
		
		patientElectiveList.setInterpretatorRequired(form.chkInterpreterRequired().getValue());
		patientElectiveList.setLanguage(form.cmbInterpreterRequired().getValue());
		
		patientElectiveList.setTransportRequired(form.chkTransportRequired().getValue());
		patientElectiveList.setTransport(form.cmbTransportRequired().getValue());
		
		patientElectiveList.setSpecialRequirements(form.chkSpecialRequirements().getValue());
		patientElectiveList.setSpecialRequirementsDetails(form.txtSpecialRequrements().getValue());
		
		//WDEV-18344 to fix a NPE
		if(!ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()))
			patientElectiveList.setPathwayClock(currentReferral.getJourneyIsNotNull() ? currentReferral.getJourney().getCurrentClock():null);
		
		patientElectiveList.setNotes(populateNotesFromScreen());//WDEV-18360 
		
		//WDEV-19382
		if (Boolean.TRUE.equals(form.getLocalContext().getbLinkAsCreatingAppointment())
				&& (ElectiveListDetails.ADDTOBOOKEDLIST.equals(form.getLocalContext().getActionPressed())
					||	ElectiveListDetails.ADDTOWAITINGLIST.equals(form.getLocalContext().getActionPressed())
						||	ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed())))
		{
			if (form.getGlobalContext().Scheduling.getBookingAppointmentRef() != null && form.getGlobalContext().Scheduling.getBookingAppointmentRef().getID_Booking_Appointment() != null) 
				patientElectiveList.setCreatingAppointment(new Booking_AppointmentRefVo(form.getGlobalContext().Scheduling.getBookingAppointmentRef().getID_Booking_Appointment(), form.getGlobalContext().Scheduling.getBookingAppointmentRef().getVersion_Booking_Appointment()));
		}					
		
		return patientElectiveList;
	}
	//WDEV-20196
	private boolean isSuspensionRecordRelevant(PatientElectiveListDetailsToSaveVo patientElectiveList)
	{
		if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null || patientElectiveList.getElectiveListStatus() == null || !WaitingListStatus.SUSPENDED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()))
			return false;
		if (patientElectiveList.getCurrentSuspensionEndDate() == null || patientElectiveList.getCurrentSuspensionEndDate().isGreaterThan(new DateTime()))
			return true;
		
		return false;
	}
	//WDEV-18388
	private ElectiveListStatusVo populateElectiveListStatus(WaitingListStatus requiresTci)
	{
		ElectiveListStatusVo status = new ElectiveListStatusVo();
		status.setElectiveListStatus(requiresTci);
		status.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		status.setStatusDateTime(new DateTime());
		
		return status;
	}

	//WDEV-18360
	private PatientElectiveListNotesVoCollection populateNotesFromScreen()
	{
		if (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()))
		{
			return form.grdNoteCommentsAdd().getValues();
		}
		else
		{
			return form.grdNoteComments().getValues();
		}
	}
	
	private boolean atLeastOneERODFieldCompleted()
	{
		if (form.dteEarliestDateOffered().getValue() != null || form.dteSecondDateOffered().getValue() != null 
			|| form.dtePatientAvailableFromDate().getValue() != null 
			|| form.cmbERODReason().getValue() != null || form.txtERODComment().getValue() != null || Boolean.TRUE.equals(form.chkEXTDelay().getValue()))//wdev-20431
			return true;
		
		return false;
	}

	private boolean atLeastOneTCIFieldCompleted()
	{
		if (form.dteTCIDate().getValue() != null || form.timTCITime().getValue() != null || form.dtePlannedDate().getValue()!=null || form.qmbWard().getValue() != null || form.cmbBreachReason().getValue() != null || form.dteDateOffered().getValue() != null || form.cmbTCIOfferedMethod().getValue() != null) //WDEv-18388  //WDEV-19615
			return true;
			
		return false;
	}

	private boolean validateUIRules(PatientElectiveListDetailsToSaveVo patElectiveListToSave) //WDEV-20655
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.cmbElectiveList().getValue() == null)
		{
			errors.add("Elective List is mandatory.");
		}
		
		if (form.cmbElectiveListReason().getValue() == null)
		{
			errors.add("Elective List Reason is mandatory.");
		}
		
		if (form.cmbIntendedManagement().getValue() == null && form.cmbIntendedManagement().isEnabled() && form.cmbIntendedManagement().isRequired())
		{
			errors.add("Intended Management is mandatory.");
		}
		
		//WDEV-18388
		if (form.txtDescription().isEnabled() && form.txtDescription().getValue()==null) //WDEV-18489
		{
			errors.add("Details are mandatory.");
		}
		
		if (form.cmbInterpreterRequired().getValue() == null && form.cmbInterpreterRequired().isEnabled() && form.cmbInterpreterRequired().isRequired())
		{
			errors.add("Interpreter is mandatory.");
		}
		
		if (form.cmbTransportRequired().getValue() == null && form.cmbTransportRequired().isEnabled() && form.cmbTransportRequired().isRequired())
		{
			errors.add("Transport is mandatory.");
		}
		
		if (form.txtSpecialRequrements().getValue() == null && form.txtSpecialRequrements().isEnabled() && form.txtSpecialRequrements().isRequired())
		{
			errors.add("Special Requirements are mandatory.");
		}
		
		if (form.dteTCIDate().getValue() == null && form.dteTCIDate().isVisible() && form.dteTCIDate().isEnabled() && form.dteTCIDate().isRequired()) //WDEV-19615
		{
			errors.add("TCI Date is mandatory.");
		}
		
		//WDEV-20502
		if(form.dteEarliestDateOffered().getValue() != null && form.dteTCIDate().getValue() != null && form.dteEarliestDateOffered().isEnabled() && form.dteEarliestDateOffered().getValue().isGreaterOrEqualThan(form.dteTCIDate().getValue()))
		{
			errors.add("The Earliest Date Offered must be set before the TCI Date.");
		}
		
		if(form.dteSecondDateOffered().getValue() != null && form.dteTCIDate().getValue() != null && form.dteSecondDateOffered().getValue().isGreaterOrEqualThan(form.dteTCIDate().getValue()))
		{
			errors.add("The Second Date Offered must be set before the TCI Date.");
		}
		
		if(form.dteEarliestDateOffered().getValue() != null && form.dteDateOffered().getValue() != null && form.dteEarliestDateOffered().getValue().isGreaterOrEqualThan(form.dteDateOffered().getValue()))
		{
			errors.add("The Earliest Date Offered must be set before the TCI Date Offered.");
		}
		
		if(form.dteSecondDateOffered().getValue() != null && form.dteDateOffered().getValue() != null && form.dteSecondDateOffered().getValue().isGreaterOrEqualThan(form.dteDateOffered().getValue()))
		{
			errors.add("The Second Date Offered must be set before the TCI Date Offered.");
		}
		//WDEV-20655
		
		SuspensionDetailsForPatientElectiveListVoCollection collSuspensions =form.getGlobalContext().RefMan.getPatientElectiveListRef()!=null ? domain.getSuspensionsForPatientElectiveList(form.getGlobalContext().RefMan.getPatientElectiveListRef()) : null;
		if (patElectiveListToSave.getTCIDetailsIsNotNull() && patElectiveListToSave.getTCIDetails().getID_TCIForPatientElectiveList()==null  && form.dteTCIDate().getValue() != null && isDateInSuspendedPeriod(form.dteTCIDate().getValue(), collSuspensions))
		{
			errors.add("TCI Date is in suspended period.");
			errors=populateSuspensionsInValidateUIMessage(errors,collSuspensions);
		}
		
		if (patElectiveListToSave.getERODIsNotNull() && patElectiveListToSave.getEROD().getID_ReferralEROD()==null  && form.dteEarliestDateOffered().getValue() != null && isDateInSuspendedPeriod(form.dteEarliestDateOffered().getValue(), collSuspensions) )
		{
			errors.add("Earliest Date Offered is in suspended period.");
			errors=populateSuspensionsInValidateUIMessage(errors,collSuspensions);
		}
		
		
		//WDEV-20346
		if (form.qmbWard().getValue() == null && form.qmbWard().isEnabled() && form.qmbWard().getVisible() && form.qmbWard().isRequired())
		{
			errors.add("Ward is mandatory.");
		}
		//WDEV-19615 //WDEV-19940
		if (form.dtePlannedDate().getValue() == null && form.dtePlannedDate().isVisible() && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()))
		{
			if (form.intPlanICIIn().isVisible() && (form.intPlanICIIn().getValue()==null || (!GroupPlanInEnumeration.rdoDays.equals(form.GroupPlanIn().getValue()) && !GroupPlanInEnumeration.rdoMonths.equals(form.GroupPlanIn().getValue()) && !GroupPlanInEnumeration.rdoWeeks.equals(form.GroupPlanIn().getValue()))))
			{
				errors.add("'Plan TCI In' or 'Requested Planned Date' is mandatory.");
			}
			else if (!(form.dteTCIDate().isVisible() && form.dteTCIDate().isRequired()))
			{
				errors.add("'Requested Planned Date' is mandatory.");
			}
		}
		
		if (form.cmbBreachReason().getValue() == null && form.cmbBreachReason().getVisible() && form.cmbBreachReason().isEnabled() && form.cmbBreachReason().isRequired()) //WDEV-19940 
		{
			errors.add("Breach Reason is mandatory.");
		}
		
		if (form.dteDateOffered().getValue() == null && form.dteDateOffered().isVisible() && form.dteDateOffered().isEnabled() && form.dteDateOffered().isRequired()) //WDEV-19940
		{
			errors.add("Date Offered is mandatory.");
		}
		
		if (form.dteEarliestDateOffered().getValue() == null && form.dteEarliestDateOffered().isEnabled() && ((form.dteSecondDateOffered().getValue() != null || Boolean.TRUE.equals(form.chkReasonableOffer().getValue()) || form.dtePatientAvailableFromDate().getValue() != null) || form.dteEarliestDateOffered().isRequired())) //WDEV-18513 
		{
			errors.add("Earliest Date Offered is mandatory.");
		}
		
		if (form.dteSecondDateOffered().getValue() == null 
				&& form.dteSecondDateOffered().isEnabled()
				&& ((form.dteEarliestDateOffered().getValue() != null 
					|| Boolean.FALSE.equals(form.chkReasonableOffer().getValue()) 
					|| form.dtePatientAvailableFromDate().getValue() != null) 
					|| form.dteSecondDateOffered().isRequired())) // WDEV-18513 
		{
			if (form.dteEarliestDateOffered().getValue() != null && Boolean.FALSE.equals(form.chkEXTDelay().getValue()))//wdev-20431
				errors.add("Second Date Offered is mandatory.");
		}
		
		if (form.dteEarliestDateOffered().getValue() != null && form.dteSecondDateOffered().getValue() != null && form.dteEarliestDateOffered().getValue().isGreaterOrEqualThan(form.dteSecondDateOffered().getValue()))
		{
			errors.add("'Second Date Offered' must be greater than 'Earliest Date Offered '");
		}
		
		if ((form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getEROD() == null)) && form.dteEarliestDateOffered().getValue() != null && new Date().isGreaterThan(form.dteEarliestDateOffered().getValue()))
		{
			errors.add("'Earliest Date Offered ' must be greater than or equal to Today");
		}
		
		int errorCount = errors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) errors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	//WDEV-20655
	private ArrayList<String> populateSuspensionsInValidateUIMessage(ArrayList<String> errors, SuspensionDetailsForPatientElectiveListVoCollection suspensions)
	{
		if (suspensions == null || (suspensions != null && suspensions.size() == 0))
			return null;

		errors.add("Suspension Periods:");
		for (int i = 0; i < suspensions.size(); i++)
		{
			if (suspensions.get(i).getIsRIE() != null && suspensions.get(i).getIsRIE())
				continue;
			
			SuspensionDetailsForPatientElectiveListVo suspension = suspensions.get(i);
			
			if (suspension==null)
				continue;
			
			errors.add("Start date: " +(suspension.getStartDateIsNotNull() ?  suspension.getStartDate().toString():"")  
							+ "   End Date: " +(suspension.getEndDateIsNotNull() ? suspension.getEndDate().toString():""));
		}
		
		return errors;
	}
	
	//WDEV-20655
	private boolean isDateInSuspendedPeriod(Date date, SuspensionDetailsForPatientElectiveListVoCollection collSuspensions)
	{	
		//SuspensionDetailsForPatientElectiveListVoCollection collSuspensions = domain.getSuspensionsForPatientElectiveList(form.getGlobalContext().RefMan.getPatientElectiveListRef());
		
		if (date==null || collSuspensions==null || collSuspensions.size()==0)
			return false;
		
		for (int i=0;i<collSuspensions.size();i++)
		{
			SuspensionDetailsForPatientElectiveListVo suspension = collSuspensions.get(i);
			if (suspension.getStartDateIsNotNull() && suspension.getEndDateIsNotNull() && date.isGreaterOrEqualThan(suspension.getStartDate()) && date.isLessOrEqualThan(suspension.getEndDate()))
			{
				return true;
			}
			else if (suspension.getStartDateIsNotNull() && suspension.getEndDate()==null && date.isGreaterOrEqualThan(suspension.getStartDate()))
			{
				return true;
			}
		}
		
		return false;
	}
	
	@Override
	protected void onBtnSuspendClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-18308
		engine.open(form.getForms().RefMan.SuspensionDetails, new Object[]{form.getLocalContext().getPatientElectiveList(),true});
	}

	@Override
	protected void onBtnViewERODHistoryClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ERODHistoryDialog);
	}

	@Override
	protected void onBtnCancelTCIClick() throws ims.framework.exceptions.PresentationLogicException
	{
		cancelTCI();
	}

	private void cancelTCILinkedAppointments(Booking_AppointmentElectiveListVo appointmentsDetails)
	{
		int repeats = 0;

		do
		{
			try 
			{
				Booking_AppointmentVo voApptFull = domain.getBookingAppointment(appointmentsDetails);

				if (voApptFull.getApptStatusIsNotNull()
						&& appointmentsDetails.getApptStatusIsNotNull()
						&&  !voApptFull.getApptStatus().equals(appointmentsDetails.getApptStatus()) )
				{
					engine.showMessage("The Status of the appointment has already been changed.");
					return;
				}

				if(form.getLocalContext().getApptStatusIsNotNull()) //WDEV-19382 - fixed misspelling
				{
					// appt status and status history
					voApptFull.setApptStatus(Status_Reason.CANCELLED);

					Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
					voApptFull.setCurrentStatusRecord(voApptStatus);

					voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
					voApptFull.setApptStatusReas(form.getLocalContext().getApptStatus().getStatusReason());
					//WDEV-19445
					if (Boolean.TRUE.equals(form.getLocalContext().getApptStatus().getCancelTCI()) && Boolean.TRUE.equals(form.getLocalContext().getApptStatus().getCancelledForNonMedicalReason()) && Status_Reason.HOSPITALCANCELLED.equals(form.getLocalContext().getApptStatus().getStatusReason()) && form.getLocalContext().getApptStatus().getStatusChangeDateTimeIsNotNull() && form.getLocalContext().getApptStatus().getStatusChangeDateTime().getDate().equals(form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()))
					{
						voApptFull.setDate28DayRuleBreach(new DateTime(voApptFull.getAppointmentDate(), voApptFull.getApptStartTime()).addDays(28).getDate());					
					}
				}
				if (voApptFull.getSessionSlotIsNotNull())
					voApptFull.getSessionSlot().setStatus(voApptFull.getSession().getAppropiateSessionSlotStatus()); //WDEV-18940

				String[] arrErrors = voApptFull.validate();
				if(arrErrors != null)
				{
					engine.showErrors(arrErrors);
					return;
				}

				//WDEV-18860 - start
				PatientElectiveListDetailsToSaveVo tempVo = form.getLocalContext().getPatientElectiveList();
				CatsReferralListVo voRef = domain.getCatsReferral(tempVo.getReferral());
				form.getLocalContext().setCatsReferralListV(voRef);

				if( tempVo != null && tempVo.getReferralIsNotNull())
				{
					String[] arrErrors2 = voRef.validate();
					if( arrErrors2 != null)
					{
						engine.showErrors(arrErrors2);
						return;
					}
					form.getLocalContext().setCatsReferralListV(voRef);
				}
				//WDEV-18860 - end

				voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");

				domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral()); //WDEV-18860

				return;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (DomainInterfaceException e)
			{
				repeats++;
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
		}
		while (repeats < 3);
		
		engine.showMessage("An Error occured during the process. Please try again or start the process again.");
	}
	
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus)
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
	
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getLocalContext().getApptStatusIsNotNull()) //WDEV-19382 - fixed misspelling
			{
				voApptStatus.setStatus(form.getLocalContext().getApptStatus().getStatus());
				voApptStatus.setStatusReason(form.getLocalContext().getApptStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getLocalContext().getApptStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getLocalContext().getApptStatus().getRebookSelected());
				voApptStatus.setComment(form.getLocalContext().getApptStatus().getComment());
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();	
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	private void cancelTCI()
	{
		//WDEV-18541
		if (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null)
		{
			TCIOutcomeForPatientElectiveListVo dummyTCIOutcome = new TCIOutcomeForPatientElectiveListVo();
			dummyTCIOutcome.setTciId(form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveList());
			
			form.getGlobalContext().RefMan.setTCIOutcomeForPatientElectiveList(dummyTCIOutcome);
		}
		
		engine.open(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog);
	}

	@Override
	protected void onChkInterpreterRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!Boolean.TRUE.equals(form.chkInterpreterRequired().getValue()))
			form.cmbInterpreterRequired().setValue(null);

		updateControlsState();
	}

	@Override
	protected void onChkTransportRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!Boolean.TRUE.equals(form.chkTransportRequired().getValue()))
			form.cmbTransportRequired().setValue(null);

		updateControlsState();
	}

	@Override
	protected void onChkSpecialRequirementsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!Boolean.TRUE.equals(form.chkSpecialRequirements().getValue()))
			form.txtSpecialRequrements().setValue(null);

		updateControlsState();
	}

	@Override
	protected void onChkExtendedSearchValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		populateElectiveListCombo(false);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setActionPressed(ElectiveListDetails.EDIT_ELECTIVE_LIST); //WDEV-18513 
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState() //WDEV-18426
	{
		boolean addEditTciOrErod=ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()) || ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()); 
		form.ccRespHCP().setEnabled(FormMode.EDIT.equals(form.getMode()) && !ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()) && !addEditTciOrErod);  //wdev-18320 // 
		boolean admissionTypeBookedOrWaiting = ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()) || ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType());
		
		//disable Elective List if PatientElectiveList has been recorded
		form.dteDateOnList().setEnabled(FormMode.EDIT.equals(form.getMode()) && !addEditTciOrErod); //WDEV-20606
		form.cmbLaterality().setEnabled(FormMode.EDIT.equals(form.getMode()) && !addEditTciOrErod); //WDEV-20606
		form.cmbElectiveList().setEnabled(FormMode.EDIT.equals(form.getMode()) && (form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList().getElectiveList() == null && WaitingListStatus.TO_BE_ADDED_LATER.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()))) && !ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()) && form.cmbElectiveListReason().getValue() != null && !addEditTciOrErod); //wdev-18320; WDEV-18412 //WDEV-20267  
		form.chkExtendedSearch().setEnabled(FormMode.EDIT.equals(form.getMode()) && (form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList().getElectiveList() == null && WaitingListStatus.TO_BE_ADDED_LATER.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()))) && !ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) && form.cmbElectiveListReason().getValue() != null && !addEditTciOrErod); //WDEV-20267
		form.cmbIntendedManagement().setRequired(FormMode.EDIT.equals(form.getMode()) && (ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()) || ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()))); //wdev-18320; WDEV-18412 
		form.cmbElectiveListReason().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getPatientElectiveList() == null && !ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed()) && !addEditTciOrErod); //WDEV-18412 
		
		form.chkAvailableAtShortNoticed().setVisible(admissionTypeBookedOrWaiting);
		form.chkAvailableAtShortNoticed().setEnabled(FormMode.EDIT.equals(form.getMode()) && !addEditTciOrErod);
		
		form.lblNoOfDayNotice().setVisible(admissionTypeBookedOrWaiting);
		form.intNoOfDaysNotice().setVisible(admissionTypeBookedOrWaiting);
		form.intNoOfDaysNotice().setEnabled(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkAvailableAtShortNoticed().getValue()) && !addEditTciOrErod);

		//form.lblPreAdmissionRequired().setVisible(admissionTypeBookedOrWaiting);	//wdev-20561
		//form.chkPreAdmissionRequired().setVisible(admissionTypeBookedOrWaiting);
		//form.chkPreAdmissionRequired().setEnabled(FormMode.EDIT.equals(form.getMode()) && !Boolean.TRUE.equals(domain.isFitForSurgery(form.getLocalContext().getReferral().getCareContext())) && !addEditTciOrErod); //wdev-18341

		form.cmbInterpreterRequired().setEnabled(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkInterpreterRequired().getValue()) && !addEditTciOrErod);
		form.cmbInterpreterRequired().setRequired(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkInterpreterRequired().getValue()));

		form.cmbTransportRequired().setEnabled(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkTransportRequired().getValue()) && !addEditTciOrErod);
		form.cmbTransportRequired().setRequired(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkTransportRequired().getValue()));

		form.txtSpecialRequrements().setEnabled(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkSpecialRequirements().getValue()) && !addEditTciOrErod);
		form.txtSpecialRequrements().setRequired(FormMode.EDIT.equals(form.getMode()) && Boolean.TRUE.equals(form.chkSpecialRequirements().getValue()));
		
		//If TCI Details have been recorded disable TCI Date
		boolean disableTciDate = form.getLocalContext().getPatientElectiveList() !=  null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null ;
		
		//If EROD Details have been recorded disable Earliest Date Offered
		boolean disableEarliestOfferedDate = form.getLocalContext().getPatientElectiveList() !=  null && form.getLocalContext().getPatientElectiveList().getEROD() != null ;
		
	
		//---
		boolean enableTCIDetails = FormMode.EDIT.equals(form.getMode()) && ((!ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) && form.getLocalContext().getPatientElectiveList() == null) || ( form.getLocalContext().getPatientElectiveList() !=  null )) && !ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed());  //wdev-18085  //WDEV-19203
		boolean statusRequiresTCI = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null && WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus());
		boolean isElectiveListSuspended = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getElectiveListStatusIsNotNull() && WaitingListStatus.SUSPENDED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) && isSuspensionRecordRelevant(form.getLocalContext().getPatientElectiveList());
		
		form.dteTCIDate().setRequired(FormMode.EDIT.equals(form.getMode()) && !isElectiveListSuspended &&
				(!ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) && !statusRequiresTCI
						|| (ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()) || ElectiveListDetails.NEW_EDIT_TCI_EDIT_MODE.equals(form.getLocalContext().getActionPressed()))));//WDEV-18388 //WDEV-19203 //WDEV-20196
		form.dteTCIDate().setEnabled(!ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed()) 
				&& FormMode.EDIT.equals(form.getMode()) 
				&& ((!ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) && !disableTciDate) 
						|| ( form.getLocalContext().getPatientElectiveList() !=  null 
								&& (form.getLocalContext().getPatientElectiveList().getTCIDetails() == null || (form.getLocalContext().getPatientElectiveList().getTCIDetails() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()==null)))  //WDEV-19615
								|| (ElectiveListDetails.CANCELTCI.equals(form.getLocalContext().getActionPressed())))); //WDEV-18388  //WDEV-19203
		form.timTCITime().setEnabled(enableTCIDetails);
		form.qmbWard().setEnabled(enableTCIDetails && form.cmbElectiveList().getValue()!= null);//WDEV-18388 //WDEV-20346
		form.qmbWard().setRequired(form.qmbWard().getVisible() && enableTCIDetails && form.cmbElectiveList().getValue()!= null && !isElectiveListSuspended); //WDEV-20346
		form.qmbHospital().setEnabled(enableTCIDetails && form.cmbElectiveList().getValue()!= null);//WDEV-18388  //WDEV-20065
				
		boolean isBreachReasonMandatory =  form.dteTCIDate().getValue() != null && form.getLocalContext().getReferral().getReferralDetails() != null && form.getLocalContext().getReferral().getReferralDetails().getEnd18WW() != null && form.dteTCIDate().getValue().isGreaterOrEqualThan(form.getLocalContext().getReferral().getReferralDetails().getEnd18WW()) && !isElectiveListSuspended && (isFirstTCIBreachedForPelEntry(form.getLocalContext().getPatientElectiveList()) || form.getLocalContext().getPatientElectiveList() == null); //WDEV-19445 //WDEV-20196
		boolean enableBreachReason = isBreachReasonMandatory && FormMode.EDIT.equals(form.getMode()) && ((ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()) && form.getLocalContext().getPatientElectiveList() == null) || ( form.getLocalContext().getPatientElectiveList() !=  null));	//wdev-18085 //WDEV-19445
		
		updateRTTBreachReasonControlsState(isBreachReasonMandatory, enableBreachReason);
		
		form.dteDateOffered().setEnabled(!ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed()) && FormMode.EDIT.equals(form.getMode()) && ((!ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) && form.getLocalContext().getPatientElectiveList() == null) || (form.getLocalContext().getPatientElectiveList() !=  null ))); //wdev-18085 //WDEV-19203
		
		form.cmbTCIOfferedMethod().setEnabled(enableTCIDetails);
		
		boolean enableERODDetails = FormMode.EDIT.equals(form.getMode()) 
								&& (form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus()!=null && !WaitingListStatus.ADMITTED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())) && !ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()) //WDEV-20503
									&&((ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()) && form.getLocalContext().getPatientElectiveList() == null)
									    || ( form.getLocalContext().getPatientElectiveList() !=  null )) /*&& !ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed())*/;		//wdev-18085
		
		boolean addErod = ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) || ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed()); //WDEV-18513  //WDEV-19203 
		
		form.dteEarliestDateOffered().setRequired(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getPatientElectiveList() != null && (form.getLocalContext().getPatientElectiveList().getEROD() != null || addErod)); //WDEV-18513 
		form.dteEarliestDateOffered().setEnabled(/*!ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()) && */FormMode.EDIT.equals(form.getMode()) && (form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getElectiveListStatus()!=null && !WaitingListStatus.ADMITTED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())) && !ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()) && ((ElectiveAdmissionType.BOOKED_TYPE12.equals(form.getLocalContext().getAdmissionType()) && !disableEarliestOfferedDate) || (form.getLocalContext().getPatientElectiveList() !=  null && form.getLocalContext().getPatientElectiveList().getEROD() == null)));	//wdev-18085  //WDEV-20503
		
		//---
		
		form.dteSecondDateOffered().setRequired(FormMode.EDIT.equals(form.getMode()) 
				&& form.getLocalContext().getPatientElectiveList() != null 
				&& (form.getLocalContext().getPatientElectiveList().getEROD() != null || addErod)
				&& !form.chkEXTDelay().getValue()); //WDEV-18513 
		
		form.dteSecondDateOffered().setEnabled(enableERODDetails);
		
		form.chkReasonableOffer().setEnabled(false/*enableERODDetails*/);	//wdev-19200 Reasonable Offer should be read only
		form.dtePatientAvailableFromDate().setEnabled(enableERODDetails);
		//WDEV-19616 
		form.cmbERODReason().setEnabled(enableERODDetails);
		form.txtERODComment().setEnabled(enableERODDetails);
		form.chkEXTDelay().setEnabled(enableERODDetails);
		//WDEV-18464
		boolean hasCurrentTCIOutcome = form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getCurrentOutcomeIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getCurrentOutcome().getOutcome() != null;
		form.btnCancelTCI().setVisible(!hasCurrentTCIOutcome && form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()!=null);//WDEV-18388; WDEV-18464  //WDEV-19615 
		form.btnCancelTCI().setEnabled(!hasCurrentTCIOutcome && (!ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed())&& form.getLocalContext().getPatientElectiveList() !=  null && form.getLocalContext().getPatientElectiveList().getTCIDetails() != null  && form.getLocalContext().getPatientElectiveList().getTCIDetails().getID_TCIForPatientElectiveListIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getTCIDetails().getIsActive()) && (FormMode.VIEW.equals(form.getMode())  || (FormMode.EDIT.equals(form.getMode()) && !ElectiveListDetails.CANCELTCI.equals(form.getLocalContext().getActionPressed())))));//WDEV-18388 //WDEV-18464 //WDEV-18527 //WDEV-19203 
		
		form.btnViewERODHistory().setVisible(true);//WDEV-18388
		form.btnViewERODHistory().setEnabled(true);//WDEV-18388
		
		//WDEV-18308; WDEV-18344 //WDEV-18519 
		boolean isElectiveListRemoved = form.getLocalContext().getPatientElectiveList() != null 
				&& form.getLocalContext().getPatientElectiveList().getElectiveListStatusIsNotNull() 
				&& WaitingListStatus.REMOVED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus());
		
		//WDEV-19134 - 1 - added "&& FormMode.VIEW.equals(form.getMode()"
		form.btnSuspend().setVisible(form.getLocalContext().getPatientElectiveList() != null 
				&& FormMode.VIEW.equals(form.getMode()));
		form.btnSuspend().setEnabled(!isElectiveListRemoved);
				
		//WDEV-18344
		boolean isWaitingList = ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) && !ElectiveListDetails.REVIEW.equals(form.getLocalContext().getActionPressed())&& !ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_TCI_EDIT_MODE.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed()) && (form.getLocalContext().getPatientElectiveList()==null || (form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getTCIDetails()==null && form.getLocalContext().getPatientElectiveList().getEROD()==null ));//WDEV-18388 //WDEV-19203
		hideTCIDetails(isWaitingList);
		hideERODDetails(isWaitingList);
		showNotesGridValidForContext(isWaitingList);
		
		//WDEV-18360
		form.getContextMenus().RefMan.hideAllNewElectiveListNotesMenu1MenuItems();
		form.getContextMenus().RefMan.hideAllNewElectiveListNotesMenu2MenuItems();
		
		boolean firstGridNotesRowSelected = form.grdNoteCommentsAdd().getValue()!=null;
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu1ADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && isWaitingList);
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu1VIEWItem().setVisible(firstGridNotesRowSelected && isWaitingList);
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu1RIEItem().setVisible(FormMode.VIEW.equals(form.getMode()) && firstGridNotesRowSelected&& isWaitingList && engine.hasRight(ims.configuration.AppRight.ALLOW_DELETION_OF_ELECTIVE_LIST_NOTES));
		
		boolean secondGridNotesRowSelected = form.grdNoteComments().getValue()!=null;
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu2ADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && !isWaitingList && !addEditTciOrErod);
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu2VIEWItem().setVisible(secondGridNotesRowSelected && !isWaitingList && !addEditTciOrErod);
		form.getContextMenus().RefMan.getNewElectiveListNotesMenu2RIEItem().setVisible(FormMode.VIEW.equals(form.getMode()) && secondGridNotesRowSelected && !isWaitingList && engine.hasRight(ims.configuration.AppRight.ALLOW_DELETION_OF_ELECTIVE_LIST_NOTES) && !addEditTciOrErod); 
		
		//WDEV=18388 //WDEV-19203
		form.btnAddTCI().setVisible(!ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_TCI_EDIT_MODE.equals(form.getLocalContext().getActionPressed())
					&& form.getLocalContext().getPatientElectiveList() != null
					&& form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null 
					&& (WaitingListStatus.CREATED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) 
							|| WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) 
							|| WaitingListStatus.SUSPENDED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) )
					&& (form.getLocalContext().getPatientElectiveList().getTCIDetails() == null || (form.getLocalContext().getPatientElectiveList().getTCIDetails()!=null && form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()==null))); //WDEV-19107  //WDEV-19940
		
		//WDEV-19134 - 2
		form.btnAddEROD().setVisible(!ElectiveListDetails.NEWEDITEROD.equals(form.getLocalContext().getActionPressed()) && !ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE.equals(form.getLocalContext().getActionPressed())
					&& form.getLocalContext().getPatientElectiveList() != null
					&& form.getLocalContext().getPatientElectiveList().getElectiveListStatus() != null
					&& !ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType())  //WDEV-20503
					&& ((WaitingListStatus.REQUIRES_TCI.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()))
							|| WaitingListStatus.CREATED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())
							|| WaitingListStatus.TO_BE_ADDED_LATER.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus())
							|| WaitingListStatus.SUSPENDED.equals(form.getLocalContext().getPatientElectiveList().getElectiveListStatus().getElectiveListStatus()) )
					&& form.getLocalContext().getPatientElectiveList().getEROD()== null
					&& form.getLocalContext().getPatientElectiveList().getTCIDetails() == null); //WDEV-19107
		form.btnRemove().setVisible(form.getForms().Scheduling.AppointmentOutcomeDialog.equals(engine.getPreviosFormName()) && form.getLocalContext().getPatientElectiveList() != null);
				
		//WDEV-20656
		form.btnAddTCI().setEnabled(FormMode.VIEW.equals(form.getMode()) || form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getEROD() != null && FormMode.EDIT.equals(form.getMode()));
		
		form.grdDateEvent().setVisible(false);
		form.imbElectiveListHistory().setEnabled(false);
		form.imbTCIHistory().setEnabled(false);
		form.txtDescription().setRequired(true);
		
		form.imbElectiveListHistory().setVisible(form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getReviews()!=null &&  form.getLocalContext().getPatientElectiveList().getReviews().size()>0 );
		form.lblLastReviewBy().setVisible(form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getReviews()!=null &&  form.getLocalContext().getPatientElectiveList().getReviews().size()>0);
		form.lblLastReviewByValue().setVisible(form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getReviews()!=null &&  form.getLocalContext().getPatientElectiveList().getReviews().size()>0);
		form.lblLastReviewDate().setVisible(form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getReviews()!=null &&  form.getLocalContext().getPatientElectiveList().getReviews().size()>0);
		form.lblLastReviewDateValue().setVisible(form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getReviews()!=null &&  form.getLocalContext().getPatientElectiveList().getReviews().size()>0);
		form.imbTCIHistory().setVisible(!isWaitingList && form.getLocalContext().getPatientElectiveList()!=null && form.getLocalContext().getPatientElectiveList().getTCIHistoryIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIHistory().size()>0);
		
		//WDEV-18426
		form.qmbIntendedProcedure().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.txtDescription().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.cmbPriority().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.chkInterpreterRequired().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.cmbIntendedManagement().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.intAnticipatedStay().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.chkSpecialRequirements().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		form.chkTransportRequired().setEnabled(FormMode.EDIT.equals(form.getMode())&& !addEditTciOrErod);
		
		form.cmbLaterality().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.cmbLaterality().getValue() == null);	//wdev-18673
		form.chkProcedureToBeCarriedOutByConsultant().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-18673
		
		//WDEV-19615
		form.lblPlanTciIn().setEnabled(enableTCIDetails); 
		form.intPlanICIIn().setEnabled(enableTCIDetails);
		form.GroupPlanIn().setEnabled(enableTCIDetails);
		form.lblPlannedDate().setEnabled(enableTCIDetails);
		form.dtePlannedDate().setEnabled(enableTCIDetails);
		form.dtePlannedDate().setRequired(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()) && !form.intPlanICIIn().isVisible());//WDEV-19940
		
		form.dteDateOffered().setRequired(form.dteDateOffered().isVisible() && form.dteDateOffered().isEnabled() && !isElectiveListSuspended); //WDEV-20196 
		form.pnlTCIDetails().setValue(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()) ? "Planned TCI Details " : "TCI Details" ); //WDEV-19940
		
	}
	private void updateRTTBreachReasonControlsState(boolean isBreachReasonMandatory, boolean enableBreachReason)
	{
		form.cmbBreachReason().setEnabled(enableBreachReason);
		form.imbOtherReason().setEnabled(enableBreachReason);
		boolean isTCIAmend = form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && ims.admin.vo.enums.ElectiveListDetails.NEWEDITTCI.equals(form.getLocalContext().getActionPressed());
		form.cmbBreachReason().setRequired(isBreachReasonMandatory && isTCIAmend ?  form.getLocalContext().getPatientElectiveList().getTCIDetails().getRTTBreachComment() == null : (form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach() == null || form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment() == null)); //WDEV-19445
	}
	//WDEV-19445
	private boolean isFirstTCIBreachedForPelEntry(PatientElectiveListDetailsToSaveVo patientElectiveList)
	{
		PatientElectiveListTCIVo currentTciDetails = form.getLocalContext().getPatientElectiveList() != null ? form.getLocalContext().getPatientElectiveList().getTCIDetails() : null;
		if (patientElectiveList != null)
		{	
			if ((patientElectiveList.getTCIHistory() == null || patientElectiveList.getTCIHistory().size() == 0 || isNoTCIBreached(patientElectiveList.getTCIHistory()))
					&&	(patientElectiveList.getTCIDetails() == null || 	patientElectiveList.getTCIDetails().getID_TCIForPatientElectiveList() == null || (currentTciDetails != null && patientElectiveList.getTCIDetails().equals(currentTciDetails))))
				return true;	
		}
		return false;
	}
	private boolean isNoTCIBreached(PatientElectiveListTCIVoCollection tciHistory)
	{
		for (int i=0;i<tciHistory.size();i++)
		{
			if (tciHistory.get(i) == null)
				continue;
			if (tciHistory.get(i).getRTTBreachCommentIsNotNull() || tciHistory.get(i).getRTTBreachReasonIsNotNull())
				return false;
		}
		return true;
	}
	private void hideTCIDetails(boolean isWaitingListEntry)
	{
		boolean isPlannedListEntry = ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType()); //WDEV-19940
		
		form.pnlTCIDetails().setVisible(!isWaitingListEntry );
		form.dteTCIDate().setVisible(!isWaitingListEntry && !ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()) ); //WDEV-19615
		form.lblTCIDate().setVisible(!isWaitingListEntry && !ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()) );//WDEV-19615;
		form.lblTCITime().setVisible(!isWaitingListEntry && !ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()) ); //WDEV-19615;
		form.timTCITime().setVisible(!isWaitingListEntry && !ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()) ); //WDEV-19615;
		
		//WDEV-19615
		form.lblPlanTciIn().setVisible(ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()) && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType())); 
		form.intPlanICIIn().setVisible(ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed())&&  ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType())); 
		form.GroupPlanIn().setVisible( ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getActionPressed()) && ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType())); 
		form.lblPlannedDate().setVisible(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType())); 
		form.dtePlannedDate().setVisible(ElectiveAdmissionType.PLANNED_TYPE13.equals(form.getLocalContext().getAdmissionType())); 
			
		form.lblWard().setVisible(!isWaitingListEntry);
		form.qmbWard().setVisible(!isWaitingListEntry);//WDEV-18388
		form.qmbHospital().setVisible(!isWaitingListEntry);//WDEV-18388
		form.lblBreachReason().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.cmbBreachReason().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.imbOtherReason().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.lblDateOffered().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.dteDateOffered().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.lblTCIOfferedMethod().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.cmbTCIOfferedMethod().setVisible(!isWaitingListEntry && !isPlannedListEntry);//WDEV-19940
		form.grdDateEvent().setVisible(!isWaitingListEntry);
		form.btnCancelTCI().setVisible(!isWaitingListEntry && form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()!=null);//WDEV-18388  //WDEV-19615
		form.imbTCIHistory().setVisible(!isWaitingListEntry);//WDEV-18388
		form.lblTCIOutcome().setVisible(!isWaitingListEntry && !isPlannedListEntry); //WDEV-18464 //WDEV-19940
		form.lblTCIOutcomeValue().setVisible(!isWaitingListEntry && !isPlannedListEntry); //WDEV-18464 //WDEV-19940
	}
	
	private void hideERODDetails(boolean isWaitingListEntry)
	{
		form.pnlERODDetails().setVisible(!isWaitingListEntry);
		form.lblEarliestDateOffered().setVisible(!isWaitingListEntry);
		form.dteEarliestDateOffered().setVisible(!isWaitingListEntry);
		form.lblSecondDateOffered().setVisible(!isWaitingListEntry);
		form.dteSecondDateOffered().setVisible(!isWaitingListEntry);
		form.lblPatientAvailableFromDate().setVisible(!isWaitingListEntry);
		form.dtePatientAvailableFromDate().setVisible(!isWaitingListEntry);
		form.chkReasonableOffer().setVisible(!isWaitingListEntry);
		form.btnViewERODHistory().setVisible(!isWaitingListEntry);//WDEV-18388
		//WDEV-19616 
		form.lblERODReason().setVisible(!isWaitingListEntry);
		form.cmbERODReason().setVisible(!isWaitingListEntry);
		form.lblERODComment().setVisible(!isWaitingListEntry);
		form.txtERODComment().setVisible(!isWaitingListEntry);
	    form.chkEXTDelay().setVisible(!isWaitingListEntry);//wdev-20431

	}
	
	private void showNotesGridValidForContext(boolean isWaitingListEntry)
	{
		form.grdNoteComments().setVisible(!isWaitingListEntry);
		form.grdNoteCommentsAdd().setVisible(isWaitingListEntry);
	}
	
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
				
		engine.close(DialogResult.ABORT);//WDEV-18439
	}

	@Override
	protected void onChkAvailableAtShortNoticedValueChanged() throws PresentationLogicException
	{
		if (!Boolean.TRUE.equals(form.chkAvailableAtShortNoticed().getValue()))
			form.intNoOfDaysNotice().setValue(null);

		updateControlsState();

	}

	@Override
	protected void onQmbIntendedProcedureValueChanged() throws PresentationLogicException
	{
		resetProcedureDescription();
		
		form.intAnticipatedStay().setValue(form.qmbIntendedProcedure().getValue() != null ? form.qmbIntendedProcedure().getValue().getLOS() : null);
		defaultIntendedManagement();
		
		updateControlsState();
	}

	private void resetProcedureDescription()
	{
		if (form.qmbIntendedProcedure().getValue() != null)
		{
			form.txtDescription().setValue(form.qmbIntendedProcedure().getValue().getProcedureName());
		}
		else
			form.txtDescription().setValue(null);
		
	}

	@Override
	protected void onQmbIntendedProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbIntendedProcedure().clear();
		form.txtDescription().setValue(null);
		
		ProcedureLiteVoCollection procedureCollection = new ProcedureLiteVoCollection();
		
		try
		{
			procedureCollection = domain.listProcedures(value);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		for (int i=0; i < procedureCollection.size(); i++)
		{
			addRow(procedureCollection.get(i));
		}
		
		if (procedureCollection.size() == 1)
		{
			form.qmbIntendedProcedure().setValue(procedureCollection.get(0));
			resetProcedureDescription();
			updateControlsState();
		}
		else if (procedureCollection.size() > 1)
			form.qmbIntendedProcedure().showOpened();
		
		
	}

	private void addRow(ProcedureLiteVo procedureLiteVo)
	{
		form.qmbIntendedProcedure().newRow(procedureLiteVo, procedureLiteVo.getProcedureName());
	}

	@Override
	protected void onIntAnticipatedStayValueChanged() throws PresentationLogicException
	{
		defaultIntendedManagement();
	}

	@Override
	protected void onCcRespHCPValueChanged() throws PresentationLogicException
	{
		if (form.getLocalContext().getPatientElectiveList() == null && form.cmbElectiveListReason().getValue() != null && !ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()))
		{
			populateElectiveListCombo(false);
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getSuspensionMessageBoxId() != null && form.getLocalContext().getSuspensionMessageBoxId() == messageBoxId)
		{
			if(DialogResult.YES.equals(result))
			{
				engine.open(form.getForms().RefMan.SuspensionDetails);
			}
			
			form.getLocalContext().setSuspensionMessageBoxId(null);
			
			return;
		}
		
		if (DialogResult.YES.equals(result))
		{
			//wdev-19200
			if( form.getLocalContext().getReasonableDateMessageBoxIdIsNotNull() && form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId )
			{
				form.chkReasonableOffer().setValue(true);
			}
			save(false, true, true, false);
			open();
			form.setMode(FormMode.VIEW);
			form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
		}
		else
		{
			form.chkReasonableOffer().setValue(false);
			//wdev-19200
			if( form.getLocalContext().getReasonableDateMessageBoxIdIsNotNull() && form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId && DialogResult.NO.equals(result))
			{
				
				if( ConfigFlag.DOM.EROD_SAVE_ONLY_REASONABLE_OFFERS.getValue() == false )	
				{
					save(false, true, true, false);
					open();
					form.setMode(FormMode.VIEW);
					form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
				}
			}
		}
		
		//wdev-19200
		if( form.getLocalContext().getReasonableDateMessageBoxIdIsNotNull() && form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId )
		{
			form.getLocalContext().setReasonableDateMessageBoxId(null);
		}
		
		
	}

	@Override
	protected void onDteTCIDateValueChanged() throws PresentationLogicException
	{
		form.cmbBreachReason().setValue(null);
		form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(null); //WDEV-19445 
		form.getGlobalContext().RefMan.setReason28DayRuleBreach(null); //WDEV-19445
		form.imbOtherReason().setTooltip("Enter Other Reason");
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog)
				&& DialogResult.OK.equals(result) && FormMode.VIEW.equals(form.getMode()))//WDEV-18388
		{
			PatientElectiveListDetailsToSaveVo patientElectiveList = form.getLocalContext().getPatientElectiveList();	
			
			//WDEV-18449 -- start
			Booking_AppointmentElectiveListVo appointmentsDetails = null;
			if (form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointmentIsNotNull())
			{
				appointmentsDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment();
				form.getLocalContext().setApptStatus(setAppointmentStatus(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList()));
			}
			//WDEV-18449 -- end
			
			ElectiveListStatusVo status = new ElectiveListStatusVo();
			status.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
			status.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
			status.setStatusDateTime(new DateTime());
						
			//wdev-18384 //WDEV-20196
			if( !patientElectiveList.getElectiveListStatusIsNotNull() || (!WaitingListStatus.REMOVED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) &&  !WaitingListStatus.SUSPENDED.equals(patientElectiveList.getElectiveListStatus().getElectiveListStatus()) && !isSuspensionRecordRelevant(patientElectiveList))) //WDEV-20196
			{
				patientElectiveList.setElectiveListStatus(status);
				//wdev-18419 //WDEV-19863
				if(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveListIsNotNull() &&
						(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getOutcome())) && 
							Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelledForNonMedicalReason()) &&
								form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getStatusDateTimeIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull() &&
									form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getStatusDateTime().getDate().equals(form.getLocalContext().getPatientElectiveList().getTCIDetails().getTCIDate()))
				{
										
					Date dtnow = new Date();
					dtnow.addDay(28);
					//patientElectiveList.setRequiresTCIBy(dtnow);
					patientElectiveList.setWas28DayRuleApplied(true);//WDEV-20221
					patientElectiveList.setTCICancelledByProvider(true);
					int numberOfProviderTCICancellations = patientElectiveList.getNumberOfProviderTCICancellationsIsNotNull() ? patientElectiveList.getNumberOfProviderTCICancellations().intValue() : 0;
					numberOfProviderTCICancellations=numberOfProviderTCICancellations+1;
					patientElectiveList.setNumberOfProviderTCICancellations(numberOfProviderTCICancellations); //WDEV-20221
					/*if( form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getOutcomeIsNotNull())
					{
						form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
						
					}*/
				}
				//---------
			
				if(patientElectiveList.getElectiveListStatusHistory() == null)
					patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());
			
				patientElectiveList.getElectiveListStatusHistory().add(status);
			}
			PatientElectiveListTCIVo tciDetails = (PatientElectiveListTCIVo) patientElectiveList.getTCIDetails().clone();
			 
			patientElectiveList.setTCIDetails(null);
			tciDetails.setCurrentOutcome(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList());
			
			if(tciDetails.getOutcomeHistory() == null)
				tciDetails.setOutcomeHistory(new TCIOutcomeForPatientElectiveListVoCollection());
			
			tciDetails.getOutcomeHistory().add(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList());
			
			if(patientElectiveList.getTCIHistory() == null)
				patientElectiveList.setTCIHistory(new PatientElectiveListTCIVoCollection());
			
			patientElectiveList.getTCIHistory().add(tciDetails);
			
			save(false, false, false, form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelledForNonMedicalReason()
					&& (AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getOutcome())
						|| AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getOutcome())) );
			
			//WDEV-19489
			try
			{
				domain.cancelCaseNoteRequests(tciDetails.getID_TCIForPatientElectiveList());
			}
			catch (StaleObjectException e)
			{
				e.printStackTrace();
			}
			
			open();
			form.setMode(FormMode.VIEW);
			form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
			
			// WDEV-18449 -- start
			if(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()) &&
				form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() == null && appointmentsDetails != null && appointmentsDetails.getTheatreBooking() != null)
			{
				cancelTCILinkedAppointments(appointmentsDetails);
			}
			// WDEV-18449 -- end
		}
		else if (formName.equals(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog) 
				&& DialogResult.OK.equals(result) && FormMode.EDIT.equals(form.getMode()))//WDEV-18388
		{
			clearTCIDetails();
			form.getLocalContext().setActionPressed(ElectiveListDetails.CANCELTCI);
			form.getLocalContext().getActionPressed();
			updateControlsState();	
		}
		else if(formName.equals(form.getForms().RefMan.SuspensionDetails))
		{
			open();
			//WDEV-19203
			if (DialogResult.OK.equals(result))
			{
				form.setMode(FormMode.VIEW);
			}
			else
			{
				updateControlsState(); 
			}
		}
		else if( formName.equals(form.getForms().RefMan.RemoveFromElectiveList))     //wdev-18384
		{
			open();
			form.setMode(FormMode.VIEW);
			form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
		}
		else if( formName.equals(form.getForms().RefMan.UndoRemovalFromWaitingList))     //wdev-19393
		{
			open();
			form.setMode(FormMode.VIEW);
			form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
		}
		else if(DialogResult.OK.equals(result) && formName.equals(form.getForms().RefMan.PatientElectiveListNotes)) //WDEV-18360
		{
			if (ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()))
			{
				addRowToGrdNoteCommentsAdd(form.getGlobalContext().RefMan.getPatientElectiveListNotes());
			}
			else
			{
				addRowToGrdNoteComments(form.getGlobalContext().RefMan.getPatientElectiveListNotes());
			}
			
		}
		else if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
			open();
			updateControlsState();
		}
		//WDEV-19445 starts here
		else if (formName.equals(form.getForms().RefMan.ReasonForBookingPast28DayKPI) && DialogResult.OK.equals(result)) //WDEV-19445
		{
			if (form.getGlobalContext().RefMan.getReason28DayRuleBreachIsNotNull())
			{
				PatientElectiveListTCIVo tCIDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails();

				if (tCIDetails != null)
				{	
					tCIDetails.setDay28BreachReason(form.getGlobalContext().RefMan.getReason28DayRuleBreach().getReason());
					tCIDetails.setDay28BreachComment(form.getGlobalContext().RefMan.getReason28DayRuleBreach().getComment());
				}
				form.getLocalContext().getPatientElectiveList().setTCIDetails(tCIDetails);
				boolean isTCINotPopulated = form.getLocalContext().getPatientElectiveList() != null && tCIDetails == null;
				if (save(false,isTCINotPopulated, false, false))
				{	
					open();
					form.setMode(FormMode.VIEW);
					form.getLocalContext().setActionPressed(ElectiveListDetails.VIEWEDIT);
				}
			}
			if (form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreachIsNotNull())
			{
				if ( form.getLocalContext().getPatientElectiveList() != null)
				{	
					PatientElectiveListTCIVo tCIDetails = form.getLocalContext().getPatientElectiveList().getTCIDetails();

					if (tCIDetails != null)
					{	
						tCIDetails.setRTTBreachReason(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getReason());
						tCIDetails.setRTTBreachComment(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment());
					}
					form.getLocalContext().getPatientElectiveList().setTCIDetails(tCIDetails);
				}

				form.cmbBreachReason().setValue(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getReason());
				form.imbOtherReason().setTooltip(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment() != null ? "Other RTT Breach Reason: <b>" + form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment() + "</b>" : "Enter Other Reason");

				updateRTTBreachReasonControlsState(form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach() != null && form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach().getComment() != null, true);
			}
			//WDEV-19445 --ends here
		}		
	}

	//WDEV-18449 
	private Appointment_StatusVo setAppointmentStatus(TCIOutcomeForPatientElectiveListVo tciOutcomeForPatientElectiveList)
	{
		if (tciOutcomeForPatientElectiveList != null)
		{
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			voApptStatus.setStatusReason(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(tciOutcomeForPatientElectiveList.getOutcome()) ? 
					Status_Reason.PATIENTCANCELLED : Status_Reason.HOSPITALCANCELLED);
			voApptStatus.setRebookSelected(false);
			//WDEV-19445
			voApptStatus.setStatusChangeDateTime(tciOutcomeForPatientElectiveList.getStatusDateTime());
			voApptStatus.setCancelledForNonMedicalReason(tciOutcomeForPatientElectiveList.getCancelledForNonMedicalReason());
			voApptStatus.setCancellationReason(tciOutcomeForPatientElectiveList.getCancellationReason());
			
			return voApptStatus;
		}
		return null;
	}
	
	//WDEV-18360	
	private void doRIE()
	{
		boolean isStale = false;
		
		if(domain.isStaleNote(form.getLocalContext().getRIENoteRecord()))
		{
			isStale = true;
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try
		{
			domain.markAsRie(form.getLocalContext().getRIENoteRecord(), form.getForms().RefMan.NewElectiveListTCIErodDialog, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null,
							form.getGlobalContext().Core.getCurrentCareContextIsNotNull()?form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
							form.getGlobalContext().Core.getRieMessage());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
	//WDEV-18360	
	private void addRowToGrdNoteComments(PatientElectiveListNotesVo note)
	{
		if (note==null)
			return;
		
		grdNoteCommentsRow row = form.grdNoteComments().getRows().newRow();

		row.setcolNoteComment(note.getNotes());
		row.setcolRecordingDateTime(note.getAuthoringDateTime().toString());
		row.setcolRecordingUser(note.getAuthoringUser().toString());

		row.setValue(note);
		form.grdNoteComments().setValue(note);
	}
	
	//WDEV-18360
	private void addRowToGrdNoteCommentsAdd(PatientElectiveListNotesVo note)
	{
		if (note==null)
			return;
		
		grdNoteCommentsAddRow row = form.grdNoteCommentsAdd().getRows().newRow();

		row.setcolNoteComment(note.getNotes());
		row.setcolRecordingDateTime(note.getAuthoringDateTime().toString());
		row.setcolRecordingUser(note.getAuthoringUser().toString());

		row.setValue(note);
		form.grdNoteCommentsAdd().setValue(note);
	}

	//WDEV-18360
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu1.ADD:
				addNote();		
				break;
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu1.VIEW:
				viewNote();	
			break;	
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu1.RIE:
				markRecordAsRie();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu2.ADD:
				addNote();	
				break;
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu2.VIEW:
				viewNote();		
			break;
			
			case GenForm.ContextMenus.RefManNamespace.NewElectiveListNotesMenu2.RIE:
				markRecordAsRie();	
			break;
		}
		
		updateControlsState();
	}
	
	//WDEV-18360
	private void markRecordAsRie()
	{
		form.getLocalContext().setRIENoteRecord(ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) ? form.grdNoteCommentsAdd().getValue() : form.grdNoteComments().getValue());
		if(form.getLocalContext().getRIENoteRecord() != null)
		{
			engine.open(form.getForms().Core.RieConfirmationDialog);
		}
	}
	
	//WDEV-18360
	private void viewNote()
	{
		form.getGlobalContext().RefMan.setPatientElectiveListNotes(ElectiveAdmissionType.ELECTIVE_TYPE11.equals(form.getLocalContext().getAdmissionType()) ? form.grdNoteCommentsAdd().getValue() : form.grdNoteComments().getValue());
		engine.open(form.getForms().RefMan.PatientElectiveListNotes,new Object[]{FormMode.VIEW});
	}

	//WDEV-18360
	private void addNote()
	{
		form.getGlobalContext().RefMan.setPatientElectiveListNotes(null);
		form.grdNoteComments().setValue(null);
		form.grdNoteCommentsAdd().setValue(null);
		engine.open(form.getForms().RefMan.PatientElectiveListNotes, new Object[]{FormMode.EDIT});
	}

	//WDEV-18360
	@Override
	protected void onGrdNoteCommentsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	//WDEV-18360
	@Override
	protected void onGrdNoteCommentsAddSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	//WDEV-18388 //WDEV-19428 - removed duplicate lookup references, fixed condition to depend on DAY_CASE
	@Override
	protected void onCmbIntendedManagementValueChanged() throws PresentationLogicException
	{
		if (ManagementIntention.DAY_CASE.equals(form.cmbIntendedManagement().getValue())) 
		{
			form.intAnticipatedStay().setValue(1);
		}
	}

	//WDEV-18388
	@Override
	protected void onBtnAddTCIClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(form.getMode().equals(FormMode.VIEW) ? ElectiveListDetails.NEWEDITTCI : ElectiveListDetails.NEW_EDIT_TCI_EDIT_MODE);//WDEV-19203
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.setMode(FormMode.EDIT);
			return;
		}
		updateControlsState();
	}

	//WDEV-18388
	@Override
	protected void onBtnAddERODClick() throws PresentationLogicException
	{
		form.getLocalContext().setActionPressed(form.getMode().equals(FormMode.VIEW) ? ElectiveListDetails.NEWEDITEROD : ElectiveListDetails.NEW_EDIT_EROD_EDIT_MODE); //WDEV-19203
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.setMode(FormMode.EDIT);
			return;
		}
		updateControlsState();
	}

	//WDEV-18388
	@Override
	protected void onQmbWardTextSubmited(String value) throws PresentationLogicException
	{
		if (form.qmbHospital().getValue()==null)
			return;
		
		LocationLiteVoCollection wards = domain.listWards(value,form.qmbHospital().getValue());
		
		if (wards == null || wards.size()==0)
			return;
		
		for (int i = 0; i < wards.size(); i++)
		{
			form.qmbWard().newRow(wards.get(i), wards.get(i).getName());
		}
		
		if (wards.size()==1)
		{
			form.qmbWard().setValue(wards.get(0));
		}
		else
		{
			form.qmbWard().showOpened();
		}
	}

	//WDEV-18388
	@Override
	protected void onQmbHospitalValueChanged() throws PresentationLogicException
	{
		form.qmbWard().clear();
		updateControlsState();
	}

	//WDEV-18388
	@Override
	protected void onQmbHospitalTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbWard().clear();
		
		//WDEV-20065
		form.qmbHospital().clear();
		
		ElectiveListConfigurationVo selectedElectiveList = form.cmbElectiveList().getValue();
		
		if (selectedElectiveList==null)
			return ;
		
		LocationLiteVoCollection hospitals = domain.listHospitalsByElectiveList(selectedElectiveList, value);
		
		if (hospitals == null || hospitals.size()==0)
			return;
			
		for (int i = 0; i < hospitals.size(); i++)
		{
			form.qmbHospital().newRow(hospitals.get(i), hospitals.get(i).getName());
		}
		
		if (hospitals.size()==1)
		{
			form.qmbHospital().setValue(hospitals.get(0));
		}
		else
		{
			form.qmbHospital().showOpened();
		}
		
		updateControlsState(); //WDEV-18656
	}
	
	@Override
	protected void onDteEarliestDateOfferedValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	@Override
	protected void onCmbElectiveListReasonValueChanged() throws PresentationLogicException
	{
		form.chkExtendedSearch().setValue(false);
		
		if (form.cmbElectiveListReason().getValue() != null)
			populateElectiveListCombo(ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) ? true : false);
		else
			form.cmbElectiveList().clear();
		
		updateControlsState();		
	}
	@Override
	protected void onBtnDashboardClick() throws PresentationLogicException
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			if(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("PATIENT_DASHBOARD_URL config flag was not set.");
				return;
			}
			
			//WDEV-22837
			List<UrlParam> params = new ArrayList<UrlParam>();
			if(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())
				params.add(new UrlParam("PID", form.getGlobalContext().Core.getPatientShort().getID_Patient().toString()));
			engine.openDashboardCloseableOnContextChange(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue(), params);

			/*
			String url = ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() + "&PID=" + form.getGlobalContext().Core.getPatientShort().getID_Patient();
			List<WindowParam> params = new ArrayList<WindowParam>(); 
			params.add(new WindowParam("FullScreen","false")); 
			params.add(new WindowParam("ToolBar","false")); 
			params.add(new WindowParam("StatusBar","false")); 
			params.add(new WindowParam("StatusBar","false")); 
			params.add(new WindowParam("MenuBar","false")); 
			params.add(new WindowParam("AddressBar","false")); 
			params.add(new WindowParam("Resizable","true")); 
			params.add(new WindowParam("Visible","true"));
			params.add(new WindowParam("Width","1440")); 
			params.add(new WindowParam("Height","1000")); 

			engine.openCustomUrlCloseableOnContextChange(url, params, true);
			*/
		}
		
	}
	
	//WDEV-19615
	@Override
	protected void onRadioButtonGroupPlanInValueChanged() throws PresentationLogicException
	{
		Date planedDate = new Date();
		if( form.GroupPlanIn().getValue().equals( GroupPlanInEnumeration.rdoWeeks) )
		{
			planedDate=new Date().addDay(form.intPlanICIIn().getValue() != null &&  form.intPlanICIIn().getValue() > 0 ? form.intPlanICIIn().getValue() * 7 : 0);
		}
		else if( form.GroupPlanIn().getValue().equals( GroupPlanInEnumeration.rdoMonths) )
		{
			planedDate=new Date().addMonth( form.intPlanICIIn().getValue() != null &&  form.intPlanICIIn().getValue() > 0 ? form.intPlanICIIn().getValue() : 0);
		}
		else if( form.GroupPlanIn().getValue().equals( GroupPlanInEnumeration.rdoDays) )
		{
			planedDate=new Date().addDay(form.intPlanICIIn().getValue() != null &&  form.intPlanICIIn().getValue() > 0 ? form.intPlanICIIn().getValue() : 0);
		}
		
		form.dtePlannedDate().setValue(planedDate);
	}
	
	//WDEV-19615
	@Override
	protected void onDtePlannedDateValueChanged() throws PresentationLogicException
	{
		form.intPlanICIIn().setValue(null);
		form.GroupPlanIn().setValue(null);
	}
	
	
	@Override
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		PatientElectiveListDetailsToSaveVo patElectiveListToSave = populateDataFromScreen(form.getLocalContext().getPatientElectiveList());
		form.getGlobalContext().RefMan.setPatientElectiveList(patElectiveListToSave);
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onImbOtherBreachReasonClick() throws PresentationLogicException
	{
				
		ReasonRTTWeekWaitBreachVo rTTBreachReason = form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreachIsNotNull() ? form.getGlobalContext().RefMan.getReasonRTTWeekWaitBreach() : new ReasonRTTWeekWaitBreachVo();
		rTTBreachReason.setReason(form.cmbBreachReason().getValue());
		if (form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull())
		{
			rTTBreachReason.setComment(form.getLocalContext().getPatientElectiveList().getTCIDetails().getRTTBreachComment());
			rTTBreachReason.setReason(form.getLocalContext().getPatientElectiveList().getTCIDetails().getRTTBreachReason());
		}	
		form.getGlobalContext().RefMan.setReasonRTTWeekWaitBreach(rTTBreachReason);
		
		engine.open(form.getForms().RefMan.ReasonForBookingPast28DayKPI, new Object[]{TCITheatreAppointmentKPIs.KPI_RTT});		
		
	}
	
	//WDEV-19940
	@Override
	protected void onIntPlanICIInValueChanged() throws PresentationLogicException
	{
		onRadioButtonGroupPlanInValueChanged();
	}
	
	//WDEV-20065
	@Override
	protected void onCmbElectiveListValueChanged() throws PresentationLogicException
	{
		form.qmbHospital().clear();
		updateControlsState();
		
	}
	@Override
	protected void onChkEXTDelayValueChanged() throws PresentationLogicException 
	{
		form.dteSecondDateOffered().setRequired(!form.chkEXTDelay().getValue()); 
	}
}
