//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.65 build 3218.18820)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.referralreviewdetails;

import ims.RefMan.forms.referralreviewdetails.GenForm.lyrLayer.tabSummaryContainer.grdSummaryRow;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralReviewDetailVo;
import ims.RefMan.vo.ReviewReferralDetailVo;
import ims.RefMan.vo.ReviewReferralDetailVoCollection;
import ims.RefMan.vo.enums.ReferralReviewDetail;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.vo.SystemInformation;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save()) 
			open();	
	}
	
	private void open()
	{
		populateScreenFromData(form.getGlobalContext().RefMan.getCatsReferral(), ReferralReviewDetail.REVIEW);
		form.setMode(FormMode.VIEW);
		
	}

	private boolean save() 
	{
		if (form.getGlobalContext().RefMan.getCatsReferral() == null)
			return false;
		
		CatsReferralReviewDetailVo voCatsReferral = populateCatsReferralVo(form.getGlobalContext().RefMan.getCatsReferral());			
		if (voCatsReferral == null)
			return true;
		
		String[] errors = getUIErrors();
		String[] str = voCatsReferral.validate(errors);
		if (str != null && str.length > 0)
		{
			engine.showErrors("Invalid Referral Review Details",str);
			return false;
		}
		
		try 
		{
			CatsReferralReviewDetailVo vo = domain.saveReferral(voCatsReferral);
			form.getGlobalContext().RefMan.setCatsReferral(vo);
		}
		catch (StaleObjectException e) 
		{			
			engine.showMessage(e.getMessage());
			form.getGlobalContext().RefMan.setReferralReviewDetailsMode(ReferralReviewDetail.REVIEW);
			initialize();
			return false;
		}
		
		return true;
	}
	private CatsReferralReviewDetailVo populateCatsReferralVo(CatsReferralRefVo catsReferral) 
	{
		if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull()) 
		{	
			CatsReferralReviewDetailVo vo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			if (form.getLocalContext().getCurrectReferral().getVersion_CatsReferral() != vo.getVersion_CatsReferral())
			{
				engine.showMessage("The Referral has been edited by another user. The screen will be refreshed. Please review.");
				initialize();
				return vo;
			}
			ReviewReferralDetailVoCollection voReviewDetailColl = vo.getCurrentReviewDetail();
			ReviewReferralDetailVo voReviewDetail = form.getLocalContext().getSelectedRecord();
			ReviewReferralDetailVoCollection voReviewHistoryColl = vo.getReviewHistory();
			
			if (voReviewDetail == null) 
			{
				voReviewDetail = new ReviewReferralDetailVo();
			}
			
			if (form.getGlobalContext().RefMan.getReferralReviewDetailsModeIsNotNull())
			{
				if (form.getGlobalContext().RefMan.getReferralReviewDetailsMode().equals(ReferralReviewDetail.RECORDING))
				{
					vo.setIsFlaggedForReview(Boolean.TRUE);
					
					voReviewDetail.setRecordingUser(null);
					Object mos = domain.getMosUser();
					SystemInformation sys = new SystemInformation();
					if (mos != null) 
					{
						PersonName user = ((MemberOfStaffLiteVo) mos).getName();			
						sys.setCreationUser(user != null ?  user.toString() : null);
						sys.setCreationDateTime(new DateTime());
						voReviewDetail.setRecordingUser(((MemberOfStaffLiteVo) mos));//wdev-8362
					}
					voReviewDetail.setSysInfo(sys);			
					voReviewDetail.setReasonNotes(form.lyr().tabRecording().txtReason().getValue());
					voReviewDetail.setReviewType(form.lyr().tabRecording().cmbType().getValue());

					if (voReviewDetailColl == null) 
						voReviewDetailColl = new ReviewReferralDetailVoCollection();
					
					voReviewDetailColl.add(voReviewDetail);
					
					vo.setCurrentReviewDetail(voReviewDetailColl);
				}
				if (form.getGlobalContext().RefMan.getReferralReviewDetailsMode().equals(ReferralReviewDetail.REVIEW))
				{
					voReviewDetail.setReviewedBy((MemberOfStaffLiteVo) form.lyr().tabReview().ccReviewBy().getValue());
					voReviewDetail.setReviewedDate(form.lyr().tabReview().dtimReview().getValue());
					voReviewDetail.setReviewNotes(form.lyr().tabReview().txtNotes().getValue());
					
					if (voReviewHistoryColl == null) 
						voReviewHistoryColl = new ReviewReferralDetailVoCollection();

					voReviewHistoryColl.add(voReviewDetail);
					
					vo.getCurrentReviewDetail().remove(voReviewDetail);
					
					vo.setReviewHistory(voReviewHistoryColl);
								
					if (vo.getIsFlaggedForReviewIsNotNull() && vo.getIsFlaggedForReview() && vo.getCurrentReviewDetail().size() == 0) 
						vo.setIsFlaggedForReview(null);
				}
			}
			
			return vo;
		}
		
		return null;
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		initialize();						
	}
	
	private void initialize() 
	{		
		form.setMode(FormMode.VIEW);
		clearControls();
		if (form.getGlobalContext().RefMan.getReferralReviewDetailsMode().equals(ReferralReviewDetail.RECORDING))
			populateRecordingUserAndDateTime();
		
		populateScreenFromData(form.getGlobalContext().RefMan.getCatsReferral(), form.getGlobalContext().RefMan.getReferralReviewDetailsMode());		
	}
	
	private void populateRecordingUserAndDateTime()
	{		
		Object mos = domain.getMosUser();
		if (mos != null) 
		{
			 String userDisplayName = ((MemberOfStaffLiteVo) mos).getIMosName(); //WDEV-19720 minor fix
			form.lyr().tabRecording().txtRecordingUser().setValue(userDisplayName != null ?  userDisplayName : null);
		}
		form.lyr().tabRecording().dtimRecordingDateTime().setValue(new DateTime());
	}
	
	private void populateReviewUserAndDateTime()
	{		
		Object mos = domain.getMosUser();
		if (mos != null) 
			form.lyr().tabReview().ccReviewBy().setValue((IMos) mos);

		form.lyr().tabReview().dtimReview().setValue(new DateTime());
	}
	
	private void populateScreenFromData(CatsReferralRefVo catsReferral, ReferralReviewDetail referralReviewDetail) 
	{
		if (form.getGlobalContext().RefMan.getCatsReferral() == null)
			return;
		
		if (referralReviewDetail.equals(ReferralReviewDetail.RECORDING))
		{	
			form.lyr().showtabRecording();
			form.setMode(FormMode.EDIT);
		}	
		else if (referralReviewDetail.equals(ReferralReviewDetail.REVIEW))
			form.lyr().showtabSummary();
			
		CatsReferralReviewDetailVo vo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		form.getLocalContext().setCurrectReferral(vo);
		
		form.lyr().tabSummary().grdSummary().getRows().clear();

		ReviewReferralDetailVoCollection voReviewDetailColl = vo.getCurrentReviewDetail();		
		if (voReviewDetailColl == null)
			return;
		
		if (vo.getIsFlaggedForReview() == null 
			|| (vo.getIsFlaggedForReviewIsNotNull() 
				&& !vo.getIsFlaggedForReview())) 
			return;
		
		if (referralReviewDetail != null)
		{
			for (int i = 0 ; i < voReviewDetailColl.size() ; i++)
			{
				grdSummaryRow rowReview = form.lyr().tabSummary().grdSummary().getRows().newRow();
				rowReview.setColType(voReviewDetailColl.get(i).getReviewTypeIsNotNull() ? voReviewDetailColl.get(i).getReviewType().getText() : "");
				rowReview.setColRecBy(voReviewDetailColl.get(i).getRecordingUserIsNotNull() ? voReviewDetailColl.get(i).getRecordingUser().getName().toString() : "");
				rowReview.setColRecDate(voReviewDetailColl.get(i).getSysInfoIsNotNull() ? voReviewDetailColl.get(i).getSysInfo().getCreationDateTime().toString() : "");
				rowReview.setValue(voReviewDetailColl.get(i));
			}
		}
	}
	
	private String[] getUIErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.lyr().tabReview().isHeaderVisible())
		{
			if (form.lyr().tabReview().ccReviewBy().getValue() == null) 
			{
				errors.add("Review By is mandatory");
			}
			if (form.lyr().tabReview().dtimReview().getValue() == null) 
			{
				errors.add("Review Date/Time is mandatory");
			}
		}
		if (errors.size() > 0) 
		{
			String[] err = errors.toArray(new String[errors.size()]);			
			if (ReferralReviewDetail.REVIEW.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()))
				form.lyr().showtabReview(); //WDEV-19720
			engine.showErrors("Invalid Referral Review Details", err);
			return err;
		}
		
		return null;
	}
	
	private void clearControls() 
	{
		form.lyr().tabRecording().cmbType().setValue(null);
		form.lyr().tabRecording().txtReason().setValue(null);		

		clearReviewControls();
	}

	private void clearReviewControls()
	{
		form.lyr().tabReview().txtNotes().setValue(null);
		form.lyr().tabReview().ccReviewBy().setValue(null);
		form.lyr().tabReview().ccReviewBy().isRequired(true);
		form.lyr().tabReview().dtimReview().setValue(new DateTime());
	}

	@Override
	protected void onGrdSummarySelectionChanged() throws PresentationLogicException 
	{
		ReviewReferralDetailVo voReviewDetail = form.lyr().tabSummary().grdSummary().getSelectedRow().getValue();
		form.lyr().tabRecording().txtRecordingUser().setValue(voReviewDetail.getRecordingUserIsNotNull() ? voReviewDetail.getRecordingUser().getName().toString() :  null);
		form.lyr().tabRecording().dtimRecordingDateTime().setValue(voReviewDetail.getSysInfoIsNotNull() ? voReviewDetail.getSysInfo().getCreationDateTime() :  null);				

		form.lyr().tabRecording().cmbType().setValue(voReviewDetail.getReviewTypeIsNotNull() ? voReviewDetail.getReviewType() :  null);
		form.lyr().tabRecording().txtReason().setValue(voReviewDetail.getReasonNotesIsNotNull() ? voReviewDetail.getReasonNotes() :  null);
		
		Object mos = domain.getMosUser();
		form.lyr().tabReview().ccReviewBy().setValue((mos  != null ? (IMos) mos : null));
		form.lyr().tabReview().ccReviewBy().isRequired(true);
		form.lyr().tabReview().dtimReview().setValue(new DateTime());			
		
		form.getLocalContext().setSelectedRecord(voReviewDetail);
		
		form.lyr().showtabRecording();	
		
		updateControlsState();
	}

	private void RemoveUsedTypes()
	{
		for (int i = 0 ; i < form.lyr().tabSummary().grdSummary().getRows().size() ; i++)
		{
			ReviewReferralDetailVo voReview = form.lyr().tabSummary().grdSummary().getRows().get(i).getValue();
			
			if (voReview.getReviewTypeIsNotNull())
				form.lyr().tabRecording().cmbType().removeRow(voReview.getReviewType());
		}
	}
	@Override
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		if ( ! checkReferralIsUnchaged())
			return;

		clearControls();
		populateRecordingUserAndDateTime();
		form.lyr().showtabRecording();
		form.getGlobalContext().RefMan.setReferralReviewDetailsMode(ReferralReviewDetail.RECORDING);
		form.getLocalContext().setSelectedRecord(new ReviewReferralDetailVo());
				
		RemoveUsedTypes();		
		form.setMode(FormMode.EDIT);
		
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		if ( ! checkReferralIsUnchaged())
			return;		
		
		form.lyr().showtabReview();
		clearReviewControls();
		populateReviewUserAndDateTime();
		form.getGlobalContext().RefMan.setReferralReviewDetailsMode(ReferralReviewDetail.REVIEW);
		form.setMode(FormMode.EDIT);
	}

	private boolean checkReferralIsUnchaged() 
	{
		CatsReferralReviewDetailVo vo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (form.getLocalContext().getCurrectReferral().getVersion_CatsReferral() != vo.getVersion_CatsReferral())
		{
			form.getGlobalContext().RefMan.setReferralReviewDetailsMode(ReferralReviewDetail.REVIEW);
			engine.showMessage("The Referral has been edited by another user. The screen will be refreshed. Please review.");
			initialize();
			return false;
		}
		return true;
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
				
	}
	//WDEV-19720
	private void updateControlsState() 
	{
		boolean enableRecordingTabs  = (FormMode.VIEW.equals(form.getMode()) && ReferralReviewDetail.RECORDING.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode())) || FormMode.EDIT.equals(form.getMode());
		boolean enableReviewTabs = FormMode.VIEW.equals(form.getMode()) && ReferralReviewDetail.REVIEW.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode());
		
		form.lyr().tabRecording().setHeaderVisible(enableReviewTabs || enableRecordingTabs);
		form.lyr().tabRecording().setHeaderEnabled((form.lyr().tabSummary().grdSummary().getValue() != null && FormMode.VIEW.equals(form.getMode()) || (FormMode.EDIT.equals(form.getMode()) && ReferralReviewDetail.REVIEW.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()))));
		form.lyr().tabRecording().setEnabled(ReferralReviewDetail.RECORDING.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()) && FormMode.EDIT.equals(form.getMode()));
				
		form.lyr().settabReviewEnabled(FormMode.EDIT.equals(form.getMode()) &&  ReferralReviewDetail.REVIEW.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()));
		form.lyr().settabRecordingEnabled(FormMode.EDIT.equals(form.getMode()) &&  ReferralReviewDetail.RECORDING.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()));
		
		form.lyr().tabReview().setHeaderVisible((ReferralReviewDetail.REVIEW.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode())) ||  (ReferralReviewDetail.RECORDING.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()) && FormMode.VIEW.equals(form.getMode())));
		form.lyr().tabReview().setHeaderEnabled(form.lyr().tabSummary().grdSummary().getValue() != null && FormMode.EDIT.equals(form.getMode()));		
	
		form.lyr().tabSummary().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()) || (ReferralReviewDetail.RECORDING.equals(form.getGlobalContext().RefMan.getReferralReviewDetailsMode()) && FormMode.VIEW.equals(form.getMode())));
		
		form.btnEdit().setVisible(form.lyr().tabSummary().grdSummary().getValue() != null && FormMode.VIEW.equals(form.getMode()));		
	}	
}
