//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.medicodeconfig;

import ims.core.vo.ExternalCodingConfigVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.io.File;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		open();
	}

	private void open()
	{
		form.getLocalContext().setExternalCodingConfig(domain.getExternalCodingConfig());
		populateScreenFromData(form.getLocalContext().getExternalCodingConfig());
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData(ExternalCodingConfigVo externalCodingConfig)
	{
		clearScreen();

		if (externalCodingConfig==null)
			return;
		
		form.chkUseExternalCoder().setValue(externalCodingConfig.getUseExternalCoder());
		form.txtCodeFileIn().setValue(externalCodingConfig.getCodeFileIn());
		form.txtCodeFileOut().setValue(externalCodingConfig.getCodeFileOut());
		form.txtWindowTitle().setValue(externalCodingConfig.getWindowTitle());
		form.chkDebug().setValue(externalCodingConfig.getDebug());
		form.txtMedicodeProgName().setValue(externalCodingConfig.getMedicodeProgName());
		form.txtMedicodeParams().setValue(externalCodingConfig.getMedicodeParams());
		form.txtDefaultMessageValue().setValue(externalCodingConfig.getDefaultMessageValue());
		
	}

	private void clearScreen()
	{
		form.chkUseExternalCoder().setValue(null);
		form.txtCodeFileIn().setValue(null);
		form.txtCodeFileOut().setValue(null);
		form.txtWindowTitle().setValue(null);
		form.chkDebug().setValue(null);
		form.txtMedicodeProgName().setValue(null);
		form.txtMedicodeParams().setValue(null);
		form.txtDefaultMessageValue().setValue(null);
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save()
	{
		ExternalCodingConfigVo externalCodingConfig=populateDataFromScreen(form.getLocalContext().getExternalCodingConfig()) ;
		
		String[] errors = externalCodingConfig.validate(getUIErrors());
		
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if (externalCodingConfig.getID_ExternalCodingConfig()==null && domain.getExternalCodingConfig()!=null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			form.getLocalContext().setExternalCodingConfig(domain.save(externalCodingConfig));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		return true;
	}
	
	private ExternalCodingConfigVo populateDataFromScreen(ExternalCodingConfigVo externalCodingConfig)
	{
		if (externalCodingConfig==null)
			externalCodingConfig=new ExternalCodingConfigVo();
		else
			externalCodingConfig=(ExternalCodingConfigVo) externalCodingConfig.clone();
		
		externalCodingConfig.setUseExternalCoder(form.chkUseExternalCoder().getValue());
		externalCodingConfig.setCodeFileIn(form.txtCodeFileIn().getValue());
		externalCodingConfig.setCodeFileOut(form.txtCodeFileOut().getValue());
		externalCodingConfig.setWindowTitle(form.txtWindowTitle().getValue());
		externalCodingConfig.setDebug(form.chkDebug().getValue());
		externalCodingConfig.setMedicodeProgName(form.txtMedicodeProgName().getValue());
		externalCodingConfig.setMedicodeParams(form.txtMedicodeParams().getValue());
		externalCodingConfig.setDefaultMessageValue(form.txtDefaultMessageValue().getValue());
		
		return externalCodingConfig;
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		/*
		if (form.txtCodeFileIn().getValue()!=null && !isValidPath(form.txtCodeFileIn().getValue()))
		{
			errors.add("Please add a valid path for Code File In");
		}
		*/
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		
		
		return null;
	}
	
	private boolean isValidPath(String stringPath)
	{  
	      try{
	         File f = new File(stringPath);
	         
	         // create new canonical form file object
	         f.getCanonicalPath();
	         
	         // if the file path exists
	         return f.exists();
	         
	      }catch(Exception e)
	      {
	         // if any error occurs
	         e.printStackTrace();
	         return false;
	      }
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

}
