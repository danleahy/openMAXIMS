//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistaddlaterdialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.RefMan.domain.ElectiveListAddLaterDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.RefMan.domain.ElectiveListAddLaterDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbPatientCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPatientCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientStatus existingInstance = (ims.core.vo.lookups.PatientStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatientStatus)
		{
			ims.core.vo.lookups.PatientStatus instance = (ims.core.vo.lookups.PatientStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientStatus existingInstance = (ims.core.vo.lookups.PatientStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPatientCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientCategoryLookup()
	{
		this.form.cmbPatientCategory().clear();
		ims.core.vo.lookups.PatientStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatientStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPatientCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientCategoryLookupValue(int id)
	{
		ims.core.vo.lookups.PatientStatus instance = ims.core.vo.lookups.LookupHelper.getPatientStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPatientCategory().setValue(instance);
	}
	protected final void defaultcmbPatientCategoryLookupValue()
	{
		this.form.cmbPatientCategory().setValue((ims.core.vo.lookups.PatientStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatientStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PatientStatus.TYPE_ID));
	}
	protected final void oncmbTransportRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.ApptTransportType)
		{
			ims.scheduling.vo.lookups.ApptTransportType instance = (ims.scheduling.vo.lookups.ApptTransportType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportRequiredLookup()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().clear();
		ims.scheduling.vo.lookups.ApptTransportTypeCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getApptTransportType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportRequiredLookupValue(int id)
	{
		ims.scheduling.vo.lookups.ApptTransportType instance = ims.scheduling.vo.lookups.LookupHelper.getApptTransportTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue(instance);
	}
	protected final void defaultcmbTransportRequiredLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue((ims.scheduling.vo.lookups.ApptTransportType)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.ApptTransportType.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.ApptTransportType.TYPE_ID));
	}
	protected final void oncmbInterpreterRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInterpreterRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Language)
		{
			ims.core.vo.lookups.Language instance = (ims.core.vo.lookups.Language)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInterpreterRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInterpreterRequiredLookup()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().clear();
		ims.core.vo.lookups.LanguageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInterpreterRequiredLookupValue(int id)
	{
		ims.core.vo.lookups.Language instance = ims.core.vo.lookups.LookupHelper.getLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue(instance);
	}
	protected final void defaultcmbInterpreterRequiredLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue((ims.core.vo.lookups.Language)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Language.class, engine.getFormName().getID(), ims.core.vo.lookups.Language.TYPE_ID));
	}
	protected final void oncmbLateralitySecondValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLateralitySecondLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLateralitySecondLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLateralitySecondLookup()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLateralitySecondLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(instance);
	}
	protected final void defaultcmbLateralitySecondLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbLateralityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLateralityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLateralityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLateralityLookup()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLateralityLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue(instance);
	}
	protected final void defaultcmbLateralityLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbPriorityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPriorityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.ReferralUrgency)
		{
			ims.RefMan.vo.lookups.ReferralUrgency instance = (ims.RefMan.vo.lookups.ReferralUrgency)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPriorityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPriorityLookup()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().clear();
		ims.RefMan.vo.lookups.ReferralUrgencyCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPriorityLookupValue(int id)
	{
		ims.RefMan.vo.lookups.ReferralUrgency instance = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgencyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(instance);
	}
	protected final void defaultcmbPriorityLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue((ims.RefMan.vo.lookups.ReferralUrgency)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.ReferralUrgency.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.ReferralUrgency.TYPE_ID));
	}
	protected final void oncmbAnaestheticTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.AnaestheticType existingInstance = (ims.clinical.vo.lookups.AnaestheticType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAnaestheticTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.AnaestheticType)
		{
			ims.clinical.vo.lookups.AnaestheticType instance = (ims.clinical.vo.lookups.AnaestheticType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAnaestheticTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.AnaestheticType existingInstance = (ims.clinical.vo.lookups.AnaestheticType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAnaestheticTypeLookup()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().clear();
		ims.clinical.vo.lookups.AnaestheticTypeCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getAnaestheticType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAnaestheticTypeLookupValue(int id)
	{
		ims.clinical.vo.lookups.AnaestheticType instance = ims.clinical.vo.lookups.LookupHelper.getAnaestheticTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(instance);
	}
	protected final void defaultcmbAnaestheticTypeLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue((ims.clinical.vo.lookups.AnaestheticType)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.AnaestheticType.class, engine.getFormName().getID(), ims.clinical.vo.lookups.AnaestheticType.TYPE_ID));
	}
	protected final void oncmbTransportRequiredMedicalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportRequiredMedicalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.ApptTransportType)
		{
			ims.scheduling.vo.lookups.ApptTransportType instance = (ims.scheduling.vo.lookups.ApptTransportType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportRequiredMedicalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportRequiredMedicalLookup()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().clear();
		ims.scheduling.vo.lookups.ApptTransportTypeCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getApptTransportType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportRequiredMedicalLookupValue(int id)
	{
		ims.scheduling.vo.lookups.ApptTransportType instance = ims.scheduling.vo.lookups.LookupHelper.getApptTransportTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setValue(instance);
	}
	protected final void defaultcmbTransportRequiredMedicalLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setValue((ims.scheduling.vo.lookups.ApptTransportType)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.ApptTransportType.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.ApptTransportType.TYPE_ID));
	}
	protected final void oncmbInterpreterRequiredMedicalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInterpreterRequiredMedicalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Language)
		{
			ims.core.vo.lookups.Language instance = (ims.core.vo.lookups.Language)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInterpreterRequiredMedicalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInterpreterRequiredMedicalLookup()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().clear();
		ims.core.vo.lookups.LanguageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInterpreterRequiredMedicalLookupValue(int id)
	{
		ims.core.vo.lookups.Language instance = ims.core.vo.lookups.LookupHelper.getLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue(instance);
	}
	protected final void defaultcmbInterpreterRequiredMedicalLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue((ims.core.vo.lookups.Language)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Language.class, engine.getFormName().getID(), ims.core.vo.lookups.Language.TYPE_ID));
	}
	protected final void oncmbPriorityMedicalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPriorityMedicalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.ReferralUrgency)
		{
			ims.RefMan.vo.lookups.ReferralUrgency instance = (ims.RefMan.vo.lookups.ReferralUrgency)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPriorityMedicalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPriorityMedicalLookup()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().clear();
		ims.RefMan.vo.lookups.ReferralUrgencyCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPriorityMedicalLookupValue(int id)
	{
		ims.RefMan.vo.lookups.ReferralUrgency instance = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgencyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(instance);
	}
	protected final void defaultcmbPriorityMedicalLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue((ims.RefMan.vo.lookups.ReferralUrgency)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.ReferralUrgency.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.ReferralUrgency.TYPE_ID));
	}
	protected final void oncmbLateralitySecondMedicalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLateralitySecondMedicalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLateralitySecondMedicalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLateralitySecondMedicalLookup()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLateralitySecondMedicalLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(instance);
	}
	protected final void defaultcmbLateralitySecondMedicalLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbLateralityMedicalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLateralityMedicalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLateralityMedicalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLateralityMedicalLookup()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLateralityMedicalLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue(instance);
	}
	protected final void defaultcmbLateralityMedicalLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbTransportRequiredEndoscopyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportRequiredEndoscopyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.ApptTransportType)
		{
			ims.scheduling.vo.lookups.ApptTransportType instance = (ims.scheduling.vo.lookups.ApptTransportType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportRequiredEndoscopyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportRequiredEndoscopyLookup()
	{
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().clear();
		ims.scheduling.vo.lookups.ApptTransportTypeCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getApptTransportType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportRequiredEndoscopyLookupValue(int id)
	{
		ims.scheduling.vo.lookups.ApptTransportType instance = ims.scheduling.vo.lookups.LookupHelper.getApptTransportTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue(instance);
	}
	protected final void defaultcmbTransportRequiredEndoscopyLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue((ims.scheduling.vo.lookups.ApptTransportType)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.ApptTransportType.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.ApptTransportType.TYPE_ID));
	}
	protected final void oncmbInterpreterRequiredEndoscopyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInterpreterRequiredEndoscopyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Language)
		{
			ims.core.vo.lookups.Language instance = (ims.core.vo.lookups.Language)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInterpreterRequiredEndoscopyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInterpreterRequiredEndoscopyLookup()
	{
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().clear();
		ims.core.vo.lookups.LanguageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInterpreterRequiredEndoscopyLookupValue(int id)
	{
		ims.core.vo.lookups.Language instance = ims.core.vo.lookups.LookupHelper.getLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue(instance);
	}
	protected final void defaultcmbInterpreterRequiredEndoscopyLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue((ims.core.vo.lookups.Language)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Language.class, engine.getFormName().getID(), ims.core.vo.lookups.Language.TYPE_ID));
	}
	protected final void oncmbUrgencyEndoscopyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUrgencyEndoscopyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.ReferralUrgency)
		{
			ims.RefMan.vo.lookups.ReferralUrgency instance = (ims.RefMan.vo.lookups.ReferralUrgency)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUrgencyEndoscopyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUrgencyEndoscopyLookup()
	{
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().clear();
		ims.RefMan.vo.lookups.ReferralUrgencyCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUrgencyEndoscopyLookupValue(int id)
	{
		ims.RefMan.vo.lookups.ReferralUrgency instance = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgencyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(instance);
	}
	protected final void defaultcmbUrgencyEndoscopyLookupValue()
	{
		this.form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue((ims.RefMan.vo.lookups.ReferralUrgency)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.ReferralUrgency.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.ReferralUrgency.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.RefMan.domain.ElectiveListAddLaterDialog domain;
}
