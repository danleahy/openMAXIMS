//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.electivelistaddlaterdialog;

import ims.admin.vo.enums.ElectiveListDetails;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.GroupAdmissionTypeEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupAnticoagulantReceivingEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupAssessmentOfRenalFunctionEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupElectiveListReasonEndoscopyEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupGeneralAnaestheticEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupKeyTherapeuticEquipmentEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupPatientMedicationStopEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupPlanedProceduresEndoscopyEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupPrecolonoscopyReqEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageEndoscopyContainer.GroupProcCarriedByNurseEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageMedicalContainer.GroupAdditionalProcedureMedicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageMedicalContainer.GroupElectiveListReasonMedicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageMedicalContainer.GroupPlanedProceduresMedicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageMedicalContainer.GroupPrimaryProcedureMedicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupAdditionalProcedureSurgicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupDaySurgMainTheatreEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupElectiveListReasonEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupPerioperativeEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupPlanedProceduresSurgicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupPrimaryProcedureSurgicalEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupProcedureCarriedOutEnumeration;
import ims.RefMan.forms.electivelistaddlaterdialog.GenForm.lyrWaitingListDetailsLayer.tabPageSurgicalContainer.GroupQuestion1Enumeration;
import ims.RefMan.vo.CatsReferralforElectiveListDetailsVo;
import ims.RefMan.vo.ElectiveListConfigurationWLVoCollection;
import ims.RefMan.vo.ElectiveListHospitalConfigurationWLVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListAddLaterVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.RecordingUserInformationForWLCVo;
import ims.RefMan.vo.enums.ElectiveListAddLaterDlgOpenMode;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.ProcedureExecutant;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.RefMan.vo.lookups.WaitingCardAdmissionType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.ProcedureVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LateralityLRB;
import ims.core.vo.lookups.ProcedureEndoscopyType;
import ims.core.vo.lookups.TimeUnitsSecondsToMonths;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int PATIENTAGEFORPREASSESSMENTREQUIRED = 16;

	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if( domain.getMosUser() == null )
		{
			engine.showMessage("The Logged in user is not a Member Of Staff");
			engine.close(DialogResult.CANCEL);
		}
		
		
		if (args != null)
		{
			if (args.length >= 3 && args.length > 0 && args[0] != null && args[0] instanceof ElectiveListDetails  )
			{
				form.getLocalContext().setAction((ElectiveListDetails) args[0]);
				if(ElectiveListDetails.ADDTOWAITINGLIST.equals(args[0]))//WDEV-22957
					engine.setCaption("Waiting List Details");
						
				
				if( args[1] != null && args[1] instanceof BookingAppointmentOutcomeVo)
					form.getLocalContext().setAppointment((BookingAppointmentOutcomeVo) args[1]);
				else
					form.getLocalContext().setAppointment(null);

				if (args[2] != null && args[2] instanceof PatientElectiveListAddLaterVo)
				{
					form.getLocalContext().setPatientElectiveList((PatientElectiveListAddLaterVo) args[2]);
				}
				else if( args[2] != null && args[2] instanceof PatientElectiveListRefVo)
				{
					form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList((PatientElectiveListRefVo) args[2]));
				}
				else
				{
					form.getLocalContext().setPatientElectiveList(null);
				}
			}
		}
		else
			return;
		
		initialise();
		hiddenTabs();
		open();

		if (args != null && args.length >= 4 && args[3] instanceof ElectiveListAddLaterDlgOpenMode )
		{
			form.getLocalContext().setElectiveListAddLaterDlgOpenMode((ElectiveListAddLaterDlgOpenMode) args[3]);
			if( form.getLocalContext().getElectiveListAddLaterDlgOpenMode().equals(ElectiveListAddLaterDlgOpenMode.READ_ONLY) || ElectiveListAddLaterDlgOpenMode.UNDOOUTCOME.equals(form.getLocalContext().getElectiveListAddLaterDlgOpenMode()))
				form.setMode(FormMode.VIEW);
			else if( ElectiveListAddLaterDlgOpenMode.EDIT.equals(form.getLocalContext().getElectiveListAddLaterDlgOpenMode()) )
				form.setMode(FormMode.EDIT);
		
		}
		else
			form.setMode(FormMode.VIEW);
		
		//WDEV-22488
		if (args.length>=5 && args[4] != null && args[4] instanceof Boolean)
		{
			form.getLocalContext().setAddEditComments((Boolean)args[4]);
		}
	}
	private void hiddenTabs()
	{
		form.lyrWaitingListDetails().tabPageSurgical().setVisible(false);
		form.lyrWaitingListDetails().tabPageMedical().setVisible(false);
		form.lyrWaitingListDetails().tabPageEndoscopy().setVisible(false);
	}

	
	protected void onFormModeChanged()
	{
		enabledisable(FormMode.EDIT.equals(form.getMode()));
		updateControlsState();
	}
	
	
	private void initialise()
	{
		form.getLocalContext().setReferral(domain.getReferralDetails(form.getGlobalContext().RefMan.getCatsReferral()));
		if( form.getLocalContext().getReferralIsNotNull())	//wdev-20561
		{
			form.getLocalContext().setPatientSHort(domain.getPatientShort(form.getLocalContext().getReferral().getPatient()));
			if( !form.getLocalContext().getReferral().getUrgencyIsNotNull()  || (!ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))) //WDEV-21853
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.NATIONAL_SCREENING);
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
				
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.NATIONAL_SCREENING);
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
				
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.NATIONAL_SCREENING);
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
				
				
			}
			
			//WDEV-21853
			if (!form.getLocalContext().getReferral().getUrgencyIsNotNull() || !ReferralUrgency.EMERGENCY.equals(form.getLocalContext().getReferral().getUrgency()))
			{
				
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.EMERGENCY); 
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.EMERGENCY);
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.EMERGENCY);
			}
		}
		
		
		
		//form.lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().initialize(MosType.HCP);
		
		//-//form.GroupHaveGivenThisPatientTCI().setValue(GroupHaveGivenThisPatientTCIEnumeration.rdoNoHaveYouGivenThisPatientTCI);	//wdev-19666
		//cmbAnaestheticTypeValueChanged(true);
		
		
		
		
		//loadHospitals();
		
		//chkShortNoticeValueChanged();
		
		
		//question1ValueChanged(false);
		
		HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
		form.getLocalContext().setHcpLiteUser(tempVo);			//wdev-22310
		form.getLocalContext().setLoggedInUser(null);			//wdev-21295
		
		
		form.getLocalContext().setHCPFromReferral(domain.getHCPLiteFromReferral(form.getGlobalContext().RefMan.getCatsReferral()));		//wdev-22465
				
		//wdev-20561
		if( tempVo != null && tempVo instanceof HcpLiteVo)
		{
			
			//wdev-21151
			ServiceLiteVo  servicelt = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null;
			form.getLocalContext().setLoggedInUserHCpAssociatedWithService(Boolean.TRUE.equals(domain.isLoggedInUserForService(tempVo, servicelt)) ? tempVo : null);
			form.getLocalContext().setisLoggedInUserMedicByHcpAndService(domain.isLoggedInUserMedicByHcpAndService(tempVo, servicelt));	//wdev-21295
			if( Boolean.TRUE.equals(form.getLocalContext().getisLoggedInUserMedicByHcpAndService()))
			{
			
				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(true);	//wdev0-21295
				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(tempVo.getIHcpName()!= null && tempVo.getIHcpName().length() > 12 ? tempVo.getIHcpName().substring(0, 12) : (tempVo.getIHcpName()!= null ? tempVo.getIHcpName():""));	//wdev-22467
				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setTooltip(tempVo.getIHcpName());
				form.getLocalContext().setLoggedInUser(tempVo);		//wdev-21295
			}
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(null);
				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
			}
		}
		else
		{
			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
			form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(null);
			form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
		}
		//end wdev-20561
		
		//wdev-20561
		form.getLocalContext().setShowSecondSurgicalProcedure(Boolean.FALSE);
		form.getLocalContext().setShowSecondMedicalProcedure(Boolean.FALSE);
		form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().initializeResponsibleHcp(MosType.MEDIC, Boolean.TRUE, form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null, null);
		form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().isRequired(Boolean.TRUE);
		form.lyrWaitingListDetails().tabPageEndoscopy().lblCompleteAPaper().setTextColor(Color.Red);
		form.lyrWaitingListDetails().tabPageEndoscopy().lblPleaserequestUAndEsCreatinineandeGFR().setTextColor(Color.Red);
		form.lyrWaitingListDetails().tabPageSurgical().lblEmailLetterToPreAssessmnetAnaesthetist().setTextColor(Color.Red);
		
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().initializeResponsibleHcp(MosType.MEDIC, Boolean.TRUE, form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null, null);		//wdev-22465
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().isRequired(Boolean.TRUE);	//wdev-22465	
		
		form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().initializeResponsibleHcp(MosType.MEDIC, Boolean.TRUE, form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null, null);		//wdev-22465
		form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().isRequired(Boolean.TRUE);	//wdev-22465
		
		form.ccRecordingMOS().initialize(MosType.ALL);		//wdev-22310
		
		
		
		
	}
			
	private void enabledisable(boolean enabledis)
	{
		//-//form.GroupAdmissionType().setEnabled(enabledis);
		//-//
		/*form.intBookPatientForTCIIn().setEnabled(enabledis);
		form.GroupBookPatForTCI().setEnabled(enabledis);
		//form.dteTCIOfferedDate().setEnabled(enabledis);
		form.qmbProcedure().setEnabled(enabledis);
		form.txtdetails().setEnabled(enabledis);
		form.cmbLaterality().setEnabled(enabledis);
		form.cmbPriority().setEnabled(enabledis);
		form.GroupElectiveListReason().setEnabled(enabledis);
		form.intAnticipatedDays().setEnabled(enabledis);
		form.GroupProcedureCarriedOut().setEnabled(enabledis);
		form.GroupHaveGivenThisPatientTCI().setEnabled(enabledis);
		form.GroupAnaesthetistRequiredInTheatre().setEnabled(enabledis);
		form.GroupIsAnticipatedProcedureWillTakeLonger().setEnabled(enabledis);
		form.intProcedureLength().setEnabled(enabledis);
		form.ccNamedConsultant().setEnabled(enabledis);
		form.cmbHospital().setEnabled(enabledis);
		form.GroupPropPostop().setEnabled(enabledis);
		form.chkShortNotice().setEnabled(enabledis);
		form.intNumberOfDaysOfNoticeReq().setEnabled(enabledis);
		form.cmbAnaestheticType().setEnabled(enabledis);
		form.GroupQuestion1().setEnabled(enabledis);
		form.txtComment().setEnabled(enabledis);*/
	}
	
	void open()
	{
		populateScreenFromData();
		updateControlsState();
	}
	private void updateControlsState()
	{
		
		PatientElectiveListAddLaterVo patientElectiveList = form.getLocalContext().getPatientElectiveList();	//wdev-21151
		//wdev-21152
		form.GroupAdmissionType().setEnabled(FormMode.EDIT.equals(form.getMode()) && !engine.getPreviosFormName().equals(form.getForms().RefMan.EndoscopyVettingWorklist ));
		form.cmbPatientCategory().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
				
		//wdev-20561
		
	//	form.lyrWaitingListDetails().tabPageSurgical().setHeaderVisible(Boolean.FALSE);
	//	form.lyrWaitingListDetails().tabPageSurgical().setVisible(false);
	//	form.lyrWaitingListDetails().tabPageMedical().setHeaderVisible(false);
	//	form.lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.FALSE);
	//	form.lyrWaitingListDetails().tabPageEndoscopy().setHeaderVisible(false);
	//	form.lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.FALSE);
		
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
		{
			form.lyrWaitingListDetails().showtabPageSurgical();
			form.lyrWaitingListDetails().tabPageSurgical().setHeaderVisible(Boolean.TRUE);
			form.lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.FALSE);
			form.lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.FALSE);
		}
		else if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
		{
			form.lyrWaitingListDetails().showtabPageMedical();
			form.lyrWaitingListDetails().tabPageSurgical().setVisible(Boolean.FALSE);
			form.lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.TRUE);
			form.lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.FALSE);
		} 
		else if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
		{
			form.lyrWaitingListDetails().showtabPageEndoscopy();
			form.lyrWaitingListDetails().tabPageSurgical().setVisible(Boolean.FALSE);
			form.lyrWaitingListDetails().tabPageMedical().setVisible(Boolean.FALSE);
			form.lyrWaitingListDetails().tabPageEndoscopy().setVisible(Boolean.TRUE);
		}
		//form.lyrWaitingListDetails().tabPageSurgical().setVisible(GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()));
		//form.lyrWaitingListDetails().tabPageMedical().setVisible(GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()));
		//form.lyrWaitingListDetails().tabPageEndoscopy().setVisible(GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()));
		
		//wdev - 22310
		form.lblRecordingDateTime().setVisible(Boolean.FALSE);
		form.lblRecordingMOS().setVisible(Boolean.FALSE);
		form.dtimRecordingDateTime().setVisible(Boolean.FALSE);
		form.ccRecordingMOS().setVisible(Boolean.FALSE);
		form.ccAuthoringHCPDT().setVisible(Boolean.FALSE);
		//-------
		
		updatetabSurgicalControlsState();
		updatetabMedicalControlsState();
		updatetabEndoscopyControlsState();
		//-----
		
		boolean isOpenedByPreassessmentOutcomeDialog = engine.getPreviosFormName().equals(form.getForms().RefMan.PreAssessmentOutcomeDlg);	//wdev-21151
		boolean isOpenedByPreassessmentWorklis = engine.getPreviosFormName().equals(form.getForms().RefMan.PreAssessmentWorklist);			//wdev-21151
		boolean isOpenedByEndoscopyVettingWorklist = engine.getPreviosFormName().equals(form.getForms().RefMan.EndoscopyVettingWorklist);  	//WDEV-22766
		
		form.btnSave().setVisible((FormMode.EDIT.equals(form.getMode()) 
									&& (GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()) 
											|| GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()) 
											|| GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))) 
										|| Boolean.TRUE.equals(form.getLocalContext().getAddEditComments())); //WDEV-22488
		
		form.btnRIE().setVisible(patientElectiveList != null 
									&& patientElectiveList.getID_PatientElectiveListIsNotNull() 
									&& !isOpenedByPreassessmentOutcomeDialog 
									&& !isOpenedByPreassessmentWorklis
									&& !ElectiveListAddLaterDlgOpenMode.READ_ONLY.equals(form.getLocalContext().getElectiveListAddLaterDlgOpenMode()) //wdev-21151
									&& !isOpenedByEndoscopyVettingWorklist);	//WDEV-22766
		
		/*if (form.getLocalContext().getPatientElectiveList() == null)
		{
			form.btnRemove().setVisible(false);
			//form.btnSave().setText("Save");
		}
		else
		{
			if( ElectiveListAddLaterDlgOpenMode.UNDOOUTCOME.equals(form.getLocalContext().getElectiveListAddLaterDlgOpenMode()))
				form.btnRemove().setVisible(true);
			else
				form.btnRemove().setVisible(false);
			//form.btnSave().setText("Update");
		}*/
		
		form.btnCancel().setText(FormMode.EDIT.equals(form.getMode()) || Boolean.TRUE.equals(form.getLocalContext().getAddEditComments()) ? "Cancel" : "Close" ); //WDEV-22488
		
		boolean formsForbtnSuitableForTelephonePreAssessment = isOpenedByPreassessmentOutcomeDialog || isOpenedByPreassessmentWorklis;		//wdev-21151
		
		boolean hasPreassessmentOutcomeRecorded = form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome() != null && form.getLocalContext().getPatientElectiveList().getPreAssessmentOutcome().getID_PreAssessmentOutcome() != null; 
		
		//WDEV-21037
		form.lblSuitableForTelephonePreAssessment().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsSuitableForTelephonePreAssessment()) 
				|| (form.getLocalContext().getPatientElectiveListIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getPatientElectiveList().getIsSuitableForTelephoneAssessment())));
		form.btnUndoSuitableForTelephonePreAssessment().setVisible(form.lblSuitableForTelephonePreAssessment().isVisible());
		form.btnSuitableForTelephonePreAssessment().setVisible(!form.lblSuitableForTelephonePreAssessment().isVisible() && !hasPreassessmentOutcomeRecorded && formsForbtnSuitableForTelephonePreAssessment);	//wdev-21151
	}
	
	
	//wdev-20561
	private void updatetabSurgicalControlsState()
	{
		
		
		form.lyrWaitingListDetails().tabPageSurgical().lblPlanProcedureInSurgical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageSurgical().lblRequestedPlannedDateSurgical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		
		form.lyrWaitingListDetails().tabPageSurgical().lblPosibleDateGivenToPatient().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().lblDateGivenToPatient().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setEnabled(FormMode.EDIT.equals(form.getMode()));
				
		ProcedureLiteVo procprim = form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue();
		form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageSurgical().lblLaterality().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		boolean showSecond = Boolean.TRUE.equals(form.getLocalContext().getShowSecondSurgicalProcedure());
		form.lyrWaitingListDetails().tabPageSurgical().btnShowSecondSurgicalProcedure().setVisible(!showSecond);
		form.lyrWaitingListDetails().tabPageSurgical().btnShowSecondSurgicalProcedure().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setVisible(showSecond);
		form.lyrWaitingListDetails().tabPageSurgical().lblIntendedProcedureSecond().setVisible(showSecond);
		form.lyrWaitingListDetails().tabPageSurgical().btnHideSecondSurgicalProcedure().setVisible(showSecond);								//wdev-20832
		form.lyrWaitingListDetails().tabPageSurgical().btnHideSecondSurgicalProcedure().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-20832
		
		form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().setVisible(showSecond);		//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().setVisible(GroupAdditionalProcedureSurgicalEnumeration.rdoSpecialtyHotlistForAdditionalProceduresSurgical, showSecond && !Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().getValue()));	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().setVisible(GroupAdditionalProcedureSurgicalEnumeration.rdoAllProceduresForAdditionalProcedureSurgical, showSecond && !Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().getValue()));	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		ProcedureLiteVo procsec = form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue();
		
		form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageSurgical().lblLateralitySecond().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().lblShortNotice().setVisible(AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setVisible(AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setEnabled(FormMode.EDIT.equals(form.getMode()));

		form.lyrWaitingListDetails().tabPageSurgical().lblDaysOfNoticeReq().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().lblnumberofdaysofnoticerequired().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setEnabled(FormMode.EDIT.equals(form.getMode()));
		//form.lyrWaitingListDetails().tabPageSurgical().lblDaysOfNoticeReq().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		
		form.lyrWaitingListDetails().tabPageSurgical().lblCriticalCareBedRequired().setVisible(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue() != null && !AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setVisible(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue() != null && !AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setVisible(GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		if( GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()) )
		{
			
			form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalPerioperative().setEnabled(FormMode.EDIT.equals(form.getMode()));
			
		}
		else
			form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalPerioperative().setEnabled(false);
		
		form.lyrWaitingListDetails().tabPageSurgical().lblHappyToFollowPerioperativeGuidelines1().setVisible(GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().lblHappyToFollowPerioperativeGuidelines2().setVisible(GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		//form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalPerioperative().setEnabled(GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		
		form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalQuestion1().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().lblReason().setVisible(GroupPerioperativeEnumeration.rdoNoPerioperative.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()) && GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().txtReason().setVisible(GroupPerioperativeEnumeration.rdoNoPerioperative.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()) && GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()));
		form.lyrWaitingListDetails().tabPageSurgical().txtReason().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().lblpreoperativeOverNights().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		if( (form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == null || (form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0 )  )&& !form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue())
		{
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(true);
			form.getLocalContext().setIsVisibleSurgicalTheatreType(true);
			form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
		}
		else if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() > 0   && !form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() )
		{
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
			form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
			form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
			
			//wdev-21530
			
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.None);
			form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(null);
							
			
			
			/*if( !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible())
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null &&   form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS() == null)
				{
					form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(true);
					form.getLocalContext().setIsVisibleSurgicalTheatreType(true);
					form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
					form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
				}
				else
				{
					form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
					form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
					form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
				}
				
				
			}
			else
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null)
				{
					if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS() == null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS() == null)
					{
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(true);
						form.getLocalContext().setIsVisibleSurgicalTheatreType(true);
						form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
					}
					else
					{
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
						form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
						form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
					}
				
				}
				else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() == null)
				{
					if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS() == null )
					{
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(true);
						form.getLocalContext().setIsVisibleSurgicalTheatreType(true);
						form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
					}
					else
					{
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
						form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
						form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
					}
				}
				else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() == null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null)
				{
					if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS() == null )
					{
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(true);
						form.getLocalContext().setIsVisibleSurgicalTheatreType(true);
						form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setEnabled(FormMode.EDIT.equals(form.getMode()));
					}
					else
					{
						form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
						form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
						form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
					}
				}
				else
				{
					form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
					form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
					form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
				}
			}*/
			
		}
		else
		{
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setVisible(false);
			form.getLocalContext().setIsVisibleSurgicalTheatreType(false);
			form.lyrWaitingListDetails().tabPageSurgical().txtdummyGroupDaySurgMainTheatre().setEnabled(false);
			
			//wdev-21530
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.None);
			form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(null);
							
			
		}
		
		boolean showPeripheralLocation = Boolean.TRUE.equals(form.getLocalContext().getIsVisibleSurgicalTheatreType()) && GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue());	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setVisible(showPeripheralLocation);	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().lblPeripheralHospital().setVisible(showPeripheralLocation);	//wdev-21151
		
		//wdev-21295
		HcpLiteVo tempVo = form.getLocalContext().getLoggedInUser();//(HcpLiteVo) domain.getHcpLiteUser();
		//form.getLocalContext().setLoggedInUser(null);				
		if( tempVo != null && tempVo instanceof HcpLiteVo)
		{
			
			
			//ServiceLiteVo  servicelt = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null;
			////
			if( !Boolean.TRUE.equals(form.getLocalContext().getisLoggedInUserMedicByHcpAndService()))
			{
				form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
			}
		}
		else
		{
			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, false);
			form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(false);
		}
		
		
		PatientElectiveListAddLaterVo patientElectiveList = form.getLocalContext().getPatientElectiveList();		//wdev-21295
		if( patientElectiveList != null && patientElectiveList.getConsultantIsNotNull())
		{
			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn, true);
			form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setVisible(true);
			
		}
		//-------------
		form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoAny, true);
		form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoAnyConsultant, true);
		form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant, true);
		form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setVisible(GroupProcedureCarriedOutEnumeration.rdoOther, true);		//wdev-22465
		form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		//form.lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setVisible(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue().equals(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant));
		
		form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setVisible(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue().equals(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant)); //wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-21295
			
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-22465
		
		
		//wdev-20829
		//form.lyrWaitingListDetails().tabPageSurgical().lblDoyouwantthispatientohaveanassessmentofriskbyanAnaesthetist().setVisible(!AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		
		//form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().setVisible(!AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		//form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalRiskByAnaesthetist().setVisible(!AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
		//form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalRiskByAnaesthetist().setEnabled(FormMode.EDIT.equals(form.getMode()));
		//form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().setEnabled(FormMode.EDIT.equals(form.getMode()));
		//---
		
		
		form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().getValue());
		form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		boolean hasServiceMaternityIndicator = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getReferral().getReferralDetails().getService().getMaternityIndicator());	//wdev-21469
		
		Integer age  = form.getLocalContext().getPatientSHortIsNotNull() ? form.getLocalContext().getPatientSHort().calculateAge():null;
		boolean showPreassesmentReq =   form.getLocalContext().getPatientSHortIsNotNull() 
                                		&& age != null 
                                		&& age.intValue() < PATIENTAGEFORPREASSESSMENTREQUIRED 
                                		&& (AnaestheticType.GA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) 
                                		|| AnaestheticType.SEDATION.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue())	
                                		/*|| AnaestheticType.LA_PRE_ASSESSMENT.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue())*/);
                                		
		form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setVisible(showPreassesmentReq && !hasServiceMaternityIndicator);	//wdev-21469
		form.lyrWaitingListDetails().tabPageSurgical().lblPreAssessmentRequired().setVisible(showPreassesmentReq && !hasServiceMaternityIndicator);	//wdev-21469
		form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setEnabled(showPreassesmentReq && !hasServiceMaternityIndicator && FormMode.EDIT.equals(form.getMode()));	//wdev-21469
		
		
		//wdev-21151
		boolean bPreAssessmentRequired = form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().getValue() == true;
		form.lyrWaitingListDetails().tabPageSurgical().lblDoyouwantthispatientohaveanassessmentofriskbyanAnaesthetist().setVisible(!( AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || (showPreassesmentReq && !bPreAssessmentRequired)));	//wdev-21750
		form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setVisible(!( AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || (showPreassesmentReq && !bPreAssessmentRequired)));								//wdev-21750
		form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageSurgical().lblEmailLetterToPreAssessmnetAnaesthetist().setVisible(form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().getValue() == true && ( !( AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || (showPreassesmentReq && !bPreAssessmentRequired))));		//wdev-21750
		
		//---
		
		
		form.lyrWaitingListDetails().tabPageSurgical().lblPriority().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageSurgical().btnUpdateUrgencySurgical().setVisible(FormMode.EDIT.equals(form.getMode()) && !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && engine.hasRight(AppRight.CAN_UPDATE_REFERRAL_URGENCY));
		
		if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
		{
			if( (ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.TWO_WEEK_WAIT.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue())) || (ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.CONSULTANT_UPGRADE.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue())) || (ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.NATIONAL_SCREENING.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue())))
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setEnabled(Boolean.FALSE);
			}
		}
		
		//wdev - 22310
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
		{
			//form.lblRecordingDateTime().setVisible(Boolean.TRUE);
			//form.lblRecordingMOS().setVisible(Boolean.TRUE);
    		//form.dtimRecordingDateTime().setVisible(Boolean.TRUE);
    		//form.dtimRecordingDateTime().setEnabled(FormMode.EDIT.equals(form.getMode()));
    		//form.ccRecordingMOS().setVisible(Boolean.TRUE);
    		//form.ccRecordingMOS().setEnabled(FormMode.EDIT.equals(form.getMode()));
    		//form.ccRecordingMOS().isRequired(Boolean.TRUE);
    		
    		form.ccAuthoringHCPDT().setVisible(Boolean.TRUE);
    		form.ccAuthoringHCPDT().setEnabledAuthoringHCP(FormMode.EDIT.equals(form.getMode()));
    		form.ccAuthoringHCPDT().setEnabledDateTime(FormMode.EDIT.equals(form.getMode()));
    		form.ccAuthoringHCPDT().setIsRequiredPropertyToControls(Boolean.TRUE);
		}
		//-------
		
		
		
	}
	//wdev-20561
	private void updatetabMedicalControlsState()
	{
		
		form.lyrWaitingListDetails().tabPageMedical().lblPlanProcedureInMedical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageMedical().lblRequestedPlannedMedical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().txtDummyElectiveReasonMedical().setVisible(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().lblPosibleDateGivenToPatientMedical().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		form.lyrWaitingListDetails().tabPageMedical().lblDateGivenToPatientMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		ProcedureLiteVo procprim = form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue();
		form.lyrWaitingListDetails().tabPageMedical().lblLateralityMedical().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setVisible(procprim != null && Boolean.TRUE.equals(procprim.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		boolean showSecond = Boolean.TRUE.equals(form.getLocalContext().getShowSecondMedicalProcedure());
		form.lyrWaitingListDetails().tabPageMedical().btnShowSecondMedicalProcedure().setVisible(!showSecond);
		form.lyrWaitingListDetails().tabPageMedical().btnShowSecondMedicalProcedure().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setVisible(showSecond);
		form.lyrWaitingListDetails().tabPageMedical().lblIntendedProcedureSecondMedical().setVisible(showSecond);
		form.lyrWaitingListDetails().tabPageMedical().btnHideSecondMedicalProcedure().setVisible(showSecond);									//wdev-20832
		form.lyrWaitingListDetails().tabPageMedical().btnHideSecondMedicalProcedure().setEnabled(FormMode.EDIT.equals(form.getMode()));			//wdev-20832
		
		form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().setVisible(GroupAdditionalProcedureMedicalEnumeration.rdoSpecialtyHotListAdditionalProcMedical, showSecond);	//wdev-21151
		form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().setVisible(GroupAdditionalProcedureMedicalEnumeration.rdoAllProceduresAdditionalProcMedical, showSecond);
		form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		ProcedureLiteVo procsec = form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue();
		
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageMedical().lblLateralitySecondMedical().setVisible(showSecond && procsec != null && Boolean.TRUE.equals(procsec.getIsLateralityApplicable()));
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().lblDaysMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().lblnumberofdaysofnoticerequiredMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		
		form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setEnabled(FormMode.EDIT.equals(form.getMode()));	//wdev-22582
		
		form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setVisible(form.lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().getValue());
		form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		
		
		form.lyrWaitingListDetails().tabPageMedical().lblPriorityMedical().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.lyrWaitingListDetails().tabPageMedical().btnUpdateUrgencyMedical().setVisible(FormMode.EDIT.equals(form.getMode()) && !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && engine.hasRight(AppRight.CAN_UPDATE_REFERRAL_URGENCY));
		
		if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
		{
			if( (ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.TWO_WEEK_WAIT.equals(form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue())) || (ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.CONSULTANT_UPGRADE.equals(form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue())) || (ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.NATIONAL_SCREENING.equals(form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue())))
			{
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setEnabled(Boolean.FALSE);
			}
		}
		
		
		//wdev - 22310
		if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
		{
			//form.lblRecordingDateTime().setVisible(Boolean.TRUE);
			//form.lblRecordingMOS().setVisible(Boolean.TRUE);
    		//form.dtimRecordingDateTime().setVisible(Boolean.TRUE);
    		//form.dtimRecordingDateTime().setEnabled(FormMode.EDIT.equals(form.getMode()));
    		//form.ccRecordingMOS().setVisible(Boolean.TRUE);
    		//form.ccRecordingMOS().setEnabled(FormMode.EDIT.equals(form.getMode()));
    		//form.ccRecordingMOS().isRequired(Boolean.TRUE);
    		
    		form.ccAuthoringHCPDT().setVisible(Boolean.TRUE);
    		form.ccAuthoringHCPDT().setEnabledAuthoringHCP(FormMode.EDIT.equals(form.getMode()));
    		form.ccAuthoringHCPDT().setEnabledDateTime(FormMode.EDIT.equals(form.getMode()));
    		form.ccAuthoringHCPDT().setIsRequiredPropertyToControls(Boolean.TRUE);
		}
		//-------
		
		
		
		
	}
	private void updatetabEndoscopyControlsState()
	{
			
		form.lyrWaitingListDetails().tabPageEndoscopy().lblPlannedProcedureInEndoscopy().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		Boolean isEditMode = FormMode.EDIT.equals(form.getMode());//WDEV-22822
		form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().lblRequestedPlannedEndoscopy().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setVisible(ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setEnabled(isEditMode);
			
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyElectiveReasonEndoscopy().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyGeneralAnaesthetic().setEnabled(isEditMode);
		//form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAnticoag().setVisible(FormMode.EDIT.equals(form.getMode()));
		
		
		ProcedureVo procEnd = form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
		
		boolean islblCompleteAPaperVisible = procEnd != null && (ProcedureEndoscopyType.ERCP.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.PEG.equals(procEnd.getEndoscopyType()));
		boolean isERCPORPRG = islblCompleteAPaperVisible;	//wdev-21151
		
		boolean isColonoscopy = procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType());		//wdev-22467
		
		boolean isBronchoOrThora = procEnd != null && ( ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())); //wdev-21151
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblCompleteAPaper().setVisible(islblCompleteAPaperVisible);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblSuspectedGIBleed().setVisible(procEnd != null && ProcedureEndoscopyType.GASTROSCOPY.equals(procEnd.getEndoscopyType()) && !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setVisible(procEnd != null && ProcedureEndoscopyType.GASTROSCOPY.equals(procEnd.getEndoscopyType()) && !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setEnabled(isEditMode);
		
		boolean newRecord = form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getID_PatientElectiveList() == null);
		
		HcpLiteVo tempVo = null;
		
		if (newRecord)
		{
			if (form.ccAuthoringHCPDT().getValue() != null)
				tempVo = form.ccAuthoringHCPDT().getValue().getAuthoringHcp();
		}
		else
			tempVo = (HcpLiteVo) domain.getHcpLiteUser();
		
		boolean isEndoscopist = tempVo != null && Boolean.TRUE.equals(tempVo.getIsHCPaEndoscopist());
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblPoints().setVisible(procEnd != null && isEndoscopist && (!ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())) );
		form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setVisible(procEnd != null && isEndoscopist && (!ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())) );
		form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setRequired(isEndoscopist); //WDEV-22306
		
		if( isBronchoOrThora )			//wdev-22351
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblProcedureLengthEndoscopy().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblMinutesEndoscopy().setVisible(true);
		}
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblProcedureLengthEndoscopy().setVisible(isEndoscopist);
			form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setVisible(isEndoscopist);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblMinutesEndoscopy().setVisible(isEndoscopist);
		}
		
		//form.lyrWaitingListDetails().tabPageEndoscopy().lblProcedureLengthEndoscopy().setVisible(isEndoscopist);
		//form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setVisible(isEndoscopist);
		form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setEnabled(isEditMode);
		//form.lyrWaitingListDetails().tabPageEndoscopy().lblMinutesEndoscopy().setVisible(isEndoscopist);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setVisible(isEndoscopist && procEnd != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));	//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setEnabled(isEditMode);
		
		//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setVisible(procEnd != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));
		form.lyrWaitingListDetails().tabPageEndoscopy().lblGeneralAnaesthetic().setVisible(procEnd != null  && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyGeneralAnaesthetic().setVisible(procEnd != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()));
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyGeneralAnaesthetic().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setEnabled(isEditMode);
		//----
		
		if( GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()) && procEnd != null &&  !ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()))
		{
			if( isEndoscopist )
			{
				if( !ProcedureEndoscopyType.ERCP.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.PEG.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()))	//wdev-21151
				{
        			form.lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(true);
        			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(true);
        			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(isEditMode);	//wdev-21418
        			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(true);
        			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(isEditMode);
        			form.lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(true);
        			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(true);
				}
				else
				{
					form.lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(false);								//wdev-21151
	    			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(false);
	    			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(isEditMode);	//wdev-21418
	    			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(false);
	    			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
	    			
	    			form.lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(false);
	    			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(false);
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(false);
    			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(false);
    			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(isEditMode);	//wdev-21418
    			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(false);
    			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
    			
    			form.lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(false);
    			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(false);
			}
			
			
		}
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setEnabled(isEditMode);	//wdev-21418
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(false);
		}
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setEnabled(isEditMode);
		
		
		//wdev-22467
		boolean isNoselectGroupGeneralAnaesthetic = isColonoscopy && GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue());
		form.lyrWaitingListDetails().tabPageEndoscopy().lblIsPreColonoscopyRequired1().setVisible(isNoselectGroupGeneralAnaesthetic);
		form.lyrWaitingListDetails().tabPageEndoscopy().lblIsPreColonoscopyRequired2().setVisible(isNoselectGroupGeneralAnaesthetic);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setVisible(isNoselectGroupGeneralAnaesthetic);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyIsPreColonscopy().setVisible(isNoselectGroupGeneralAnaesthetic);//WDEV-22822
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyIsPreColonscopy().setEnabled(isEditMode);//WDEV-22822
		
		//---------
		

		
		//wdev-21151
		/*if( isEndoscopist && procEnd != null && (ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())))
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblCanProcedureCarriedoutByNurse().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.lyrWaitingListDetails().tabPageEndoscopy().lblDetailsEndoscopy().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setVisible(true);
		}*/
		
		boolean hasServiceMaternityIndicator = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getReferral().getReferralDetails().getService().getMaternityIndicator());	//wdev-21469
		
		Integer age  = form.getLocalContext().getPatientSHortIsNotNull() ? form.getLocalContext().getPatientSHort().calculateAge():null;
		boolean showPreassessmentReq = GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()) 
        								&& form.getLocalContext().getPatientSHortIsNotNull() 
        								&& age != null 
        								&& age.intValue() < PATIENTAGEFORPREASSESSMENTREQUIRED
        								&& !isBronchoOrThora;	//wdev-21151
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblPreassessmentRequiredEndoscopy().setVisible(showPreassessmentReq && !hasServiceMaternityIndicator);		//wdev-21469
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setVisible(showPreassessmentReq && !hasServiceMaternityIndicator);		//wdev-21469
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setEnabled(showPreassessmentReq && !hasServiceMaternityIndicator && isEditMode);	//wdev-21469
		
		
		if( procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()) && !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()))
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblPatientMedicationStop().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setEnabled(isEditMode);	//wdev-21418
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyForBowelPreparation().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyForBowelPreparation().setEnabled(isEditMode);
		}
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblPatientMedicationStop().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setEnabled(isEditMode);	//wdev-21418
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyForBowelPreparation().setVisible(false);
		}
			
		form.lyrWaitingListDetails().tabPageEndoscopy().lblDrugInformation().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) 
				&& (GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()) 
						|| GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue())));
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) 
				&& (GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()) 
						|| GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue())));
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setEnabled(isEditMode);
		
		if( procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()) 
				&& !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()))
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblAssessmentOfRenalFunction().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyDidPatienthaveAs().setVisible(true);									//wdev-21151
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyDidPatienthaveAs().setEnabled(isEditMode);	//wdev-21151
			//form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAssessmentOfRenalFunction().setEnabled(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblPleaserequestUAndEsCreatinineandeGFR().setVisible(GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().getValue()));//wdev-22419
		}
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblAssessmentOfRenalFunction().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyDidPatienthaveAs().setVisible(false);									//wdev-21151	
			form.lyrWaitingListDetails().tabPageEndoscopy().lblPleaserequestUAndEsCreatinineandeGFR().setVisible(false); //wdev-22419
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(GroupAssessmentOfRenalFunctionEnumeration.None);//wdev-22419
			//form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAssessmentOfRenalFunction().setEnabled(false);
		}
		
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setEnabled(isEditMode);
		
		
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setVisible(form.lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().getValue());
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setEnabled(isEditMode);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setVisible(form.lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().getValue());
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setEnabled(isEditMode);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setVisible(form.lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().getValue());
		form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setEnabled(isEditMode);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblUrgencyEndoscopy().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()));
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().btnUpdateUrgencyEndoscopy().setVisible(FormMode.EDIT.equals(form.getMode()) && !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && engine.hasRight(AppRight.CAN_UPDATE_REFERRAL_URGENCY)); 
		
		//---
		 
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblAnticoagulantReceiving().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG);  	//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG);	//wdev-21151	
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setEnabled(isEditMode);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAnticoag().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG);				//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAnticoag().setEnabled(isEditMode);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblPacemakerDefibrilatorEndoscopy().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora);	//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora);	//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setEnabled(isEditMode);
		
		boolean isKeyTherapeutiRadioButtonsVisible = !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora;	//wdev-22291
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblKeyTherapeuticEquipment().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora);		//wdev-21151	
		form.lyrWaitingListDetails().tabPageEndoscopy().lblKeyTherapeuticEquipment1().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora);		//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora);	//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAreThereKeyTherapeu().setVisible(!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora);		//wdev-21151
		form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAreThereKeyTherapeu().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setEnabled(isEditMode);
		
		
		
		form.lyrWaitingListDetails().tabPageEndoscopy().lblKeyTherapeuticEquipmentComment().setVisible(isKeyTherapeutiRadioButtonsVisible && GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue())/*!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction())*/); 	//wdev-22291
		form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setVisible(isKeyTherapeutiRadioButtonsVisible && GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue())/*!ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction())*/);			//wdev-22291
		form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setEnabled(isEditMode);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setRequired(isKeyTherapeutiRadioButtonsVisible && GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue()));	//wdev-22291
		
		//wdev-21979
		form.lyrWaitingListDetails().tabPageEndoscopy().lblElectiveListEndoscopy().setVisible(false);
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setVisible(false);
		//-----end 21979
		
		
		//----
		
		
		
		if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
		{
			if( (ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.TWO_WEEK_WAIT.equals(form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValue())) || (ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.CONSULTANT_UPGRADE.equals(form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValue())) || (ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()) && ReferralUrgency.NATIONAL_SCREENING.equals(form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValue())))
			{
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setEnabled(Boolean.FALSE);
			}
		}
		 //WDEV-22488
		form.lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().setEnabled(isEditMode || Boolean.TRUE.equals(form.getLocalContext().getAddEditComments())); 
		form.btnAddEditComments().setVisible(form.getForms().RefMan.EndoscopyVettingWorklist.equals(engine.getPreviousNonDialogFormName()) && FormMode.VIEW.equals(form.getMode()) && ! isEndoscopist && !Boolean.TRUE.equals(form.getLocalContext().getIsAddEditCommentsButtonPressed()) && !Boolean.TRUE.equals(form.getLocalContext().getAddEditComments()));
		
		//wdev - 22310
		//wdev-22776
		if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
		{
			//form.lblRecordingDateTime().setVisible(Boolean.TRUE);
			//form.lblRecordingMOS().setVisible(Boolean.TRUE);
			//form.dtimRecordingDateTime().setVisible(Boolean.TRUE);
			//form.dtimRecordingDateTime().setEnabled(FormMode.EDIT.equals(form.getMode()));
			//form.ccRecordingMOS().setVisible(Boolean.TRUE);
			//form.ccRecordingMOS().setEnabled(FormMode.EDIT.equals(form.getMode()));
			//form.ccRecordingMOS().isRequired(Boolean.TRUE);
			//form.ccAuthoringHCPDT().setVisible(Boolean.FALSE);
			form.ccAuthoringHCPDT().setVisible(Boolean.TRUE);
			form.ccAuthoringHCPDT().setIsRequiredPropertyToControls(Boolean.TRUE);
			
			boolean enableAuthoringControls = isEditMode && newRecord;
			
			form.ccAuthoringHCPDT().setMode(enableAuthoringControls ? FormMode.EDIT : FormMode.VIEW);
			form.ccAuthoringHCPDT().setEnabledAuthoringHCP(enableAuthoringControls);
    		form.ccAuthoringHCPDT().setEnabledDateTime(enableAuthoringControls);
		}
		
		//-------
		
		form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setEnabled(isEditMode);	//wdev-22465
		
	}
	//---------------
	
	private void populateScreenFromData()
	{
		clearScreen();
		//if( form.getGlobalContext().RefMan.getPatientElectiveListRef() == null)
		//	return;
		
		 PatientElectiveListAddLaterVo patientElectiveList = form.getLocalContext().getPatientElectiveList(); //domain.getPatientElectiveList(form.getGlobalContext().RefMan.getPatientElectiveListRef());
		// form.getLocalContext().setPatientElectiveList(patientElectiveList);
		 
		 if (patientElectiveList != null)
		 {
			 form.cmbPatientCategory().setValue(patientElectiveList.getPatientCategory());
		 }
		 else if (form.getLocalContext().getReferral() != null)
		 {
			 form.cmbPatientCategory().setValue(form.getLocalContext().getReferral().getPatientCategory());
		 }
		 
		 if( patientElectiveList != null )
		 {
			 if( WaitingCardAdmissionType.SURGICAL.equals(patientElectiveList.getAdmissionType()))
			 {
				 form.GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoSurgical);
				 form.lyrWaitingListDetails().tabPageSurgical().GroupPrimaryProcedureSurgical().setValue(GroupPrimaryProcedureSurgicalEnumeration.rdoSpecialtyHotListSurgical);									//wdev-21151
				 form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().setValue(GroupAdditionalProcedureSurgicalEnumeration.rdoSpecialtyHotlistForAdditionalProceduresSurgical);	//wdev-21151
					
				 populateSurgicalTabFromData(patientElectiveList);
				 //qmbProcedurePrimarySurgicalValueChanged();
			 }
			 else if( WaitingCardAdmissionType.MEDICAL.equals(patientElectiveList.getAdmissionType()))
			 {
			 
				 form.GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoMedical);
				 form.lyrWaitingListDetails().tabPageMedical().GroupPrimaryProcedureMedical().setValue(GroupPrimaryProcedureMedicalEnumeration.rdoSpecialtyHotlistPrinaryProcMedical);			//wdev-21151
				 form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().setValue(GroupAdditionalProcedureMedicalEnumeration.rdoSpecialtyHotListAdditionalProcMedical);	//wdev-21151
    			 populateMedicalTabFromData(patientElectiveList);
    			 //qmbProcedureMedicalValueChanged();
			 }
			 else if( WaitingCardAdmissionType.ENDOSCOPY.equals(patientElectiveList.getAdmissionType()))
			 {
				 form.GroupAdmissionType().setValue(GroupAdmissionTypeEnumeration.rdoEndoscopy);
				 populateEndoscopyTabFromData(patientElectiveList);
			 }
			 
			  		 
		 }
		 else
		 {
			 if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
			 {
			 
    			 if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
    			 {
    					if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
    						form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(ReferralUrgency.TWO_WEEK_WAIT);
    					else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
    						form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(ReferralUrgency.ROUTINE);
    			 }
			 }
			 else  if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
			 {
				 if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
				 {
						if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
							form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(ReferralUrgency.TWO_WEEK_WAIT);
						else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
							form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(ReferralUrgency.ROUTINE);
				 }
			 }
			 else  if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
			 {
				 if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
					{
						if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
							form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(ReferralUrgency.TWO_WEEK_WAIT);
						else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
							form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(ReferralUrgency.ROUTINE);
					}
											
					
				 
			 }
			 
			//wdev-21151
			form.lyrWaitingListDetails().tabPageEndoscopy().lblAuthoringHCP().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForAuthoringHCP().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblVettingEndoscopist().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setVisible(false);
			
			//wdev-22310
			HcpLiteVo tempVo = form.getLocalContext().getHcpLiteUser();
			
			if(  tempVo != null && tempVo instanceof HcpLiteVo && ( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()) || GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue())) )	//wdev-22776
			{
				AuthoringInformationVo tempAuthVo =  new AuthoringInformationVo();
				
				tempAuthVo.setAuthoringHcp(tempVo);
				tempAuthVo.setAuthoringDateTime(new DateTime());
				form.ccAuthoringHCPDT().setValue(tempAuthVo);
			}
			
			MemberOfStaffLiteVo tempMOS = (MemberOfStaffLiteVo) domain.getMosUser();
			if( tempMOS != null )
			{
				form.ccRecordingMOS().setValue(tempMOS);
				form.dtimRecordingDateTime().setValue(new DateTime());
			}
			
			//wdev-22465
			tempVo = 	form.getLocalContext().getLoggedInUserHCpAssociatedWithService(); 
			
			if( tempVo != null && tempVo instanceof HcpLiteVo && Boolean.TRUE.equals(tempVo.getIsHCPaResponsibleHCP()))
			{
				form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(tempVo);
				ccResponsibleHCPValueChanged();
				form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setValue(tempVo);
				
			}
			else
			{
			
				tempVo = form.getLocalContext().getHCPFromReferral();
				form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(tempVo);
				ccResponsibleHCPValueChanged();
				form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setValue(tempVo);
			}
			
			//---------------
		 }
			//--------
			 
		 
		 
		 
		
	}
	//wdev-20561
	private void populateSurgicalTabFromData(PatientElectiveListAddLaterVo patientElectiveList)
	{
		if( patientElectiveList == null )
		{
			if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
			{
				//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
				//	form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(ReferralUrgency.TWO_WEEK_WAIT);
				//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
					form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(form.getLocalContext().getReferral().getUrgency());
			}
			
			return;
		}
		
		
		
		if( ElectiveListReason.TREATMENT.equals(patientElectiveList.getElectiveListReason()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(GroupElectiveListReasonEnumeration.rdoTreatment);
		else if( ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(GroupElectiveListReasonEnumeration.rdoDiagnostic);
		
		
		
		form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setValue(patientElectiveList.getToBePlannedIn());
		if( TimeUnitsSecondsToMonths.DAYS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.rdoDays);
		else if( TimeUnitsSecondsToMonths.WEEKS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.rdoWeeks);
		else if( TimeUnitsSecondsToMonths.MONTHS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(GroupPlanedProceduresSurgicalEnumeration.rdoMonth);
		
		form.lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setValue(patientElectiveList.getPlannedDate());
		
		
		
		form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setValue(patientElectiveList.getWasPossibleDateGiven());
		form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setValue(patientElectiveList.getDateGivenToPatient());
		
		if( patientElectiveList.getPrimaryProcedureIsNotNull())
		{
			
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setValue(patientElectiveList.getPrimaryProcedure());
		}
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getIsBilateralListingApplicable()))
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValues() != null && !form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().removeRow(LateralityLRB.BILATERAL);
			}
		}
		if( patientElectiveList.getProcLateralityIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValues() != null && !form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValues().contains(patientElectiveList.getProcLaterality()))
		{
			form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().newRow(patientElectiveList.getProcLaterality(),patientElectiveList.getProcLaterality().getIItemText());
			form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue(patientElectiveList.getProcLaterality());
		}
		else			
			form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue(patientElectiveList.getProcLaterality());
		
		//--------------
		
		form.getLocalContext().setShowSecondSurgicalProcedure(patientElectiveList.getSecondaryProcedureIsNotNull() ? Boolean.TRUE:Boolean.FALSE);
		
		form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().setValue(patientElectiveList.getMultiServiceCase());		//wdev-21151 
		
		if( patientElectiveList.getSecondaryProcedureIsNotNull())
		{
			
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().newRow(patientElectiveList.getSecondaryProcedure(), patientElectiveList.getSecondaryProcedure().getProcedureName());
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setValue(patientElectiveList.getSecondaryProcedure());
		}
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getIsBilateralListingApplicable()))
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValues() != null && !form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().removeRow(LateralityLRB.BILATERAL);
			}
		}
		if( patientElectiveList.getSecondaryProcLateralityIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValues() != null && !form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValues().contains(patientElectiveList.getSecondaryProcLaterality()))
		{
			form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().newRow(patientElectiveList.getSecondaryProcLaterality(),patientElectiveList.getSecondaryProcLaterality().getIItemText());
			form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(patientElectiveList.getSecondaryProcLaterality());
		}
		else
			form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(patientElectiveList.getSecondaryProcLaterality());
		//--------
		
		
		form.lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(patientElectiveList.getProcedureDescription());
		
		if( form.getLocalContext().getReferral() != null && patientElectiveList.getPriority() == null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
		{
			//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
			//	form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(ReferralUrgency.TWO_WEEK_WAIT);
			//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
			//	form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(ReferralUrgency.ROUTINE);
			form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(form.getLocalContext().getReferral().getUrgency());
			
		}
		else
			form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(patientElectiveList.getPriority());
		
		
		form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(patientElectiveList.getWLAnaestheticType());
		form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setValue(patientElectiveList.getPreAssessmentRequired());
		form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setValue(patientElectiveList.getWLAvailableAtShortNotice());
		form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setValue(patientElectiveList.getWLAvailableAtShortNoticePeriod());
		form.lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setValue(patientElectiveList.getCriticalCareBedRequired());
		
		//form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().setValue(Boolean.TRUE.equals(patientElectiveList.getAnaesthesisRiskAssessmentRequest())?GroupAnaesthetistEnumeration.rdoYesAnaesthetist:GroupAnaesthetistEnumeration.rdoNoAnaesthetist);
		
		form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setValue(patientElectiveList.getAnaesthesisRiskAssessmentRequest());	//wdev-21151
		
		if( YesNoUnknown.YES.equals(patientElectiveList.getWLPatientReceivingAnticoagulantTherapy()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoYesQuestion1);
		else if( YesNoUnknown.NO.equals(patientElectiveList.getWLPatientReceivingAnticoagulantTherapy()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoNoQuestion1);
		else if( YesNoUnknown.UNKNOWN.equals(patientElectiveList.getWLPatientReceivingAnticoagulantTherapy()))
			form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(GroupQuestion1Enumeration.rdoUnknownQuestion1);
			
		if( YesNo.YES.equals(patientElectiveList.getFollowPeriOperativeguidelines()) )
			form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValue(GroupPerioperativeEnumeration.rdoYesPerioperative);
		else if( YesNo.NO.equals(patientElectiveList.getFollowPeriOperativeguidelines()) )
			form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValue(GroupPerioperativeEnumeration.rdoNoPerioperative);
		
		form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(patientElectiveList.getAnticipatedProcedureLength());
		form.lyrWaitingListDetails().tabPageSurgical().txtReason().setValue(patientElectiveList.getPeriOpNoReasonComments());
		
				
		if( patientElectiveList.getProceduredToBeCarriedByIsNotNull() )
   		{
       		 if( ProcedureExecutant.LOGGED_IN_CLINICIAN.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       		 {
       			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn);
       			//wdev-21295
       			if( patientElectiveList.getConsultantIsNotNull())
       			{
       				
       				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setValue(patientElectiveList.getConsultant().getIHcpName() != null && patientElectiveList.getConsultant().getIHcpName().length() > 12 ? patientElectiveList.getConsultant().getIHcpName().substring(0, 12) : (patientElectiveList.getConsultant().getIHcpName() != null ?patientElectiveList.getConsultant().getIHcpName():""));	//wdev-22467
       				form.lyrWaitingListDetails().tabPageSurgical().lblNameOfClinicianLoggedIn().setTooltip(patientElectiveList.getConsultant().getIHcpName());
       				
       			}
       		 }
       		 else if( ProcedureExecutant.ANY_CONSULTANT.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       			 form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoAnyConsultant);
       		 else if( ProcedureExecutant.NAMED_CONSULTANT.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       		 {
       			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoNamedConsultant);
       			if( patientElectiveList.getProcedureCarriedOutByIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValues() != null  && !form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValues().contains(patientElectiveList.getProcedureCarriedOutBy()))
       			{
       				form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().newRow(patientElectiveList.getProcedureCarriedOutBy(), patientElectiveList.getProcedureCarriedOutBy().getIHcpName());
       			}
       			else if( patientElectiveList.getProcedureCarriedOutByIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValues() == null)
       			{
       				form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().newRow(patientElectiveList.getProcedureCarriedOutBy(), patientElectiveList.getProcedureCarriedOutBy().getIHcpName());
       			}
       			
       			form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setValue(patientElectiveList.getProcedureCarriedOutBy());	//wdev-21151
       			
       		 }
       		 else if( ProcedureExecutant.ANY.equals(patientElectiveList.getProceduredToBeCarriedBy()))
       			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoAny);
       		 else if( ProcedureExecutant.OTHER.equals(patientElectiveList.getProceduredToBeCarriedBy()))	//wdev-22467
       			form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(GroupProcedureCarriedOutEnumeration.rdoOther);
       		 
   		}
		
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setValue(patientElectiveList.getResponsibleHCP());			//wdev-22465,wdev-22582
		
		//form.lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setValue(patientElectiveList.getProcedureCarriedOutBy());
		
		
		form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().setValue(patientElectiveList.getWLPreOperativeOvernightStayRequired());
		form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setValue(patientElectiveList.getWLNoOfPreOperativeNights());
		form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(patientElectiveList.getWLAnticipatedStay());
		
		if( patientElectiveList.getElectiveListIsNotNull() )
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().newRow(patientElectiveList.getElectiveList(), patientElectiveList.getElectiveList().getWaitingListName());
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(patientElectiveList.getElectiveList());
			electivelistValueChanged();	//wdev-21151
			
		}
		
		if( !patientElectiveList.getHospitalIsNotNull() && patientElectiveList.getRequiredTheatreTypeIsNotNull() )	//wdev-21151
		{
			 if( TheatreType.INPATIENT.equals(patientElectiveList.getRequiredTheatreType()))
				 form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.rdoMainTheatre);
			 else if( patientElectiveList.getRequiredTheatreType().equals( TheatreType.DAYCASE  ))
				 form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.rdoDaySurgery);
		}
		if( patientElectiveList.getHospitalIsNotNull() )	//wdev-21151
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().getValues() != null && form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().getValues().contains(patientElectiveList.getHospital()))
				form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(patientElectiveList.getHospital());
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().newRow(patientElectiveList.getHospital(), patientElectiveList.getHospital().getName());
				form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(patientElectiveList.getHospital());
			}
			form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation);
		}
		
		
		
		
		form.lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().setValue(patientElectiveList.getInterpretatorRequired());
		form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue(patientElectiveList.getLanguage());
		form.lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().setValue(patientElectiveList.getTransportRequired());
		form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue(patientElectiveList.getTransport());
		form.lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().setValue(patientElectiveList.getSpecialRequirements());
		form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setValue(patientElectiveList.getSpecialRequirementsDetails());
		form.lyrWaitingListDetails().tabPageSurgical().txtComment().setValue(patientElectiveList.getComments());
		
		
		//wdev - 22310
		
		form.ccAuthoringHCPDT().setValue(patientElectiveList.getAuthoringInfo());
		if( patientElectiveList.getRecordingUserIsNotNull())
		{
			form.ccRecordingMOS().setValue(patientElectiveList.getRecordingUser().getRecordingUser());
			form.dtimRecordingDateTime().setValue(patientElectiveList.getRecordingUser().getRecordingDateTime());
		}
		//------------
		
		
		
		
	}
	//wdev-20561
	private void populateMedicalTabFromData(PatientElectiveListAddLaterVo patientElectiveList)
	{
		if( patientElectiveList == null )
		{
			if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
			{
				//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
				//	form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(ReferralUrgency.TWO_WEEK_WAIT);
				//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
				//	form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(ReferralUrgency.ROUTINE);
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(form.getLocalContext().getReferral().getUrgency());
				
			}
			
			return;
		}
			
		
		if( ElectiveListReason.TREATMENT.equals(patientElectiveList.getElectiveListReason()))
			form.lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().setValue(GroupElectiveListReasonMedicalEnumeration.rdoTreatmentMedical);
		else if( ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
			form.lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().setValue(GroupElectiveListReasonMedicalEnumeration.rdoDiagnosticMedical);
		
		
		form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setValue(patientElectiveList.getWasPossibleDateGiven());
		form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setValue(patientElectiveList.getDateGivenToPatient());
		
		form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setValue(patientElectiveList.getToBePlannedIn());
		if( TimeUnitsSecondsToMonths.DAYS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.rdoDaysPlannedMedical);
		else if( TimeUnitsSecondsToMonths.WEEKS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.rdoWeeksPlannedMedical);
		else if( TimeUnitsSecondsToMonths.MONTHS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(GroupPlanedProceduresMedicalEnumeration.rdoMonthPlannedMedical);
		
		form.lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setValue(patientElectiveList.getPlannedDate());

		//wdev-21299
		if( patientElectiveList.getHospitalIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValues() != null && !form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValues().contains(patientElectiveList.getHospital()))
		{
			form.lyrWaitingListDetails().tabPageMedical().cmbHospital().newRow(patientElectiveList.getHospital(), patientElectiveList.getHospital().getIItemText());
		}
		else if(  patientElectiveList.getHospitalIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValues() == null)
		{
			form.lyrWaitingListDetails().tabPageMedical().cmbHospital().newRow(patientElectiveList.getHospital(), patientElectiveList.getHospital().getIItemText());
		}
		form.lyrWaitingListDetails().tabPageMedical().cmbHospital().setValue(patientElectiveList.getHospital());
		 
		//form.lyrWaitingListDetails().tabPageMedical().qmbWard().setValue(patientElectiveList.getTCIDetailsIsNotNull() ? patientElectiveList.getTCIDetails().getTCIWard():null);
		
		//wdev-21299
		if( patientElectiveList.getWardIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().qmbWard().getValues() != null && !form.lyrWaitingListDetails().tabPageMedical().qmbWard().getValues().contains(patientElectiveList.getWard()))
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbWard().newRow(patientElectiveList.getWard(), patientElectiveList.getWard().getIItemText());
		}
		else if( patientElectiveList.getWardIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().qmbWard().getValues() == null)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbWard().newRow(patientElectiveList.getWard(), patientElectiveList.getWard().getIItemText());
		}
		
		form.lyrWaitingListDetails().tabPageMedical().qmbWard().setValue(patientElectiveList.getWard());	//wdev-21151	
		
		
		if( patientElectiveList.getPrimaryProcedureIsNotNull() )
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());
			
		}
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setValue(patientElectiveList.getPrimaryProcedure());
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getIsBilateralListingApplicable()))
			{
				if( form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValues() != null && !form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().removeRow(LateralityLRB.BILATERAL);
			}
		}
		
		if( patientElectiveList.getProcLateralityIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValues() != null && !form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValues().contains(patientElectiveList.getProcLaterality()))
		{
			form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().newRow(patientElectiveList.getProcLaterality(),patientElectiveList.getProcLaterality().getIItemText());
			form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue(patientElectiveList.getProcLaterality());
		}
		else
			form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue(patientElectiveList.getProcLaterality());
		//----------
		
		form.getLocalContext().setShowSecondMedicalProcedure(patientElectiveList.getSecondaryProcedureIsNotNull() ? Boolean.TRUE:Boolean.FALSE);
		
		if( patientElectiveList.getSecondaryProcedureIsNotNull())
		{
			
			form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().newRow(patientElectiveList.getSecondaryProcedure(), patientElectiveList.getSecondaryProcedure().getProcedureName());
		}
			
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setValue(patientElectiveList.getSecondaryProcedure());
		
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getIsBilateralListingApplicable()))
			{
				if( form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValues() != null && !form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().removeRow(LateralityLRB.BILATERAL);
			}
		}
		if( patientElectiveList.getSecondaryProcLateralityIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValues() != null && !form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValues().contains(patientElectiveList.getSecondaryProcLaterality()))
		{
			form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().newRow(patientElectiveList.getSecondaryProcLaterality(),patientElectiveList.getSecondaryProcLaterality().getIItemText());
			form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(patientElectiveList.getSecondaryProcLaterality());
			
		}
		else
			form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(patientElectiveList.getSecondaryProcLaterality());
		
		form.lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(patientElectiveList.getProcedureDescription());
		
		
		if( form.getLocalContext().getReferral() != null && patientElectiveList.getPriority() == null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
		{
			//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
			//	form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(ReferralUrgency.TWO_WEEK_WAIT);
			//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(form.getLocalContext().getReferral().getUrgency());
		}
		else
			form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(patientElectiveList.getPriority()); 
		
		
			
		form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().setValue(patientElectiveList.getWLAvailableAtShortNotice());
		

		form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setValue(patientElectiveList.getWLAvailableAtShortNoticePeriod());
		
		form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(patientElectiveList.getWLAnticipatedStay());
		
		form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(patientElectiveList.getResponsibleHCP());		//wdev-22582	
		
		if( patientElectiveList.getElectiveListIsNotNull() )
			form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().newRow(patientElectiveList.getElectiveList(),patientElectiveList.getElectiveList().getWaitingListName());
		form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValue(patientElectiveList.getElectiveList());
		
		
		form.lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().setValue(patientElectiveList.getInterpretatorRequired());
		
		form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue(patientElectiveList.getLanguage());
		
		form.lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().setValue(patientElectiveList.getTransportRequired());
		form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setValue(patientElectiveList.getTransport());
		
		form.lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().setValue(patientElectiveList.getSpecialRequirements());
		
		form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setValue(patientElectiveList.getSpecialRequirementsDetails());
		
		form.lyrWaitingListDetails().tabPageMedical().txtCommentMedical().setValue(patientElectiveList.getComments());
		
		
		//wdev - 22310
		form.ccAuthoringHCPDT().setValue(patientElectiveList.getAuthoringInfo());
		if( patientElectiveList.getRecordingUserIsNotNull())
		{
			form.ccRecordingMOS().setValue(patientElectiveList.getRecordingUser().getRecordingUser());
			form.dtimRecordingDateTime().setValue(patientElectiveList.getRecordingUser().getRecordingDateTime());
		}
		//------------
				
	}
	
	//wdev-20561
	private void populateEndoscopyTabFromData(PatientElectiveListAddLaterVo patientElectiveList)
	{
		if( patientElectiveList == null )
		{
			if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
			{
				//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
				//	form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(ReferralUrgency.TWO_WEEK_WAIT);
				//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
					form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(form.getLocalContext().getReferral().getUrgency());
			}
			
			return;
		}
		
		
		
		if( ElectiveListReason.TREATMENT.equals(patientElectiveList.getElectiveListReason()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(GroupElectiveListReasonEndoscopyEnumeration.rdoTreatmentEndoscopy);
		else if( ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(GroupElectiveListReasonEndoscopyEnumeration.rdoDiagnosticEndoscopy);
		
		
		form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setValue(patientElectiveList.getToBePlannedIn());
		if( TimeUnitsSecondsToMonths.DAYS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.rdoDaysEndoscopy);
		else if( TimeUnitsSecondsToMonths.WEEKS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.rdoWeeksEndoscopy);
		else if( TimeUnitsSecondsToMonths.MONTHS.equals(patientElectiveList.getToBePlannedInUnit()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(GroupPlanedProceduresEndoscopyEnumeration.MonthsEndoscopy);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setValue(patientElectiveList.getPlannedDate());
		
		if( patientElectiveList.getPrimaryProcedureIsNotNull())
			form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().newRow(patientElectiveList.getPrimaryProcedure(), patientElectiveList.getPrimaryProcedure().getProcedureName());
		
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setValue(patientElectiveList.getPrimaryProcedure());
		form.lyrWaitingListDetails().tabPageEndoscopy().txtEndoscopyDetails().setValue(patientElectiveList.getProcedureDescription());
		
		if( form.getLocalContext().getReferral() != null && patientElectiveList.getPriority() == null && form.getLocalContext().getReferral().getUrgencyIsNotNull() )
		{
			//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
			//	form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(ReferralUrgency.TWO_WEEK_WAIT);
			//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(form.getLocalContext().getReferral().getUrgency());
		}
		else
			form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(patientElectiveList.getPriority());
		
		
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setValue(patientElectiveList.getSuspectedGIBleed());
		form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValue(patientElectiveList.getPoints());
		form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(patientElectiveList.getAnticipatedProcedureLength());
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setValue(patientElectiveList.getSuitableforTraining());
		
		if( YesNo.YES.equals(patientElectiveList.getGeneralAnaesthetic()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic);
		else if( YesNo.NO.equals(patientElectiveList.getGeneralAnaesthetic()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic);
		
		//wdev-21151
		//if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null && (ProcedureEndoscopyType.BRONCHOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType())))
		//{
		//	form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(GroupGeneralAnaestheticEnumeration.None);
		//}
		
		
		if( Boolean.TRUE.equals(patientElectiveList.getCanNurseCarryOutProcedure()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(GroupProcCarriedByNurseEnumeration.rdoYesProcCarriedByNurse);
		else if( Boolean.FALSE.equals(patientElectiveList.getCanNurseCarryOutProcedure()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(GroupProcCarriedByNurseEnumeration.rdoNoProcCarriedByNurse);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(patientElectiveList.getDetailsForNonGAEndoProcedure());
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setValue(patientElectiveList.getPreAssessmentRequired());
		
		//wdev-22467
		if( YesNo.YES.equals(patientElectiveList.getPreColonoscopyAssessmentRequired()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setValue(GroupPrecolonoscopyReqEnumeration.rdoYesPreColonoscopyR);
		else if( YesNo.NO.equals(patientElectiveList.getPreColonoscopyAssessmentRequired()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setValue(GroupPrecolonoscopyReqEnumeration.rdoNoPreColonoscopyR);
		//---------
		
		
		if( YesNoUnknown.YES.equals(patientElectiveList.getWLPatientReceivingAnticoagulantTherapy()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving);
		else if( YesNoUnknown.NO.equals(patientElectiveList.getWLPatientReceivingAnticoagulantTherapy()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoNoAnticoagulantReceiving);
		else if( YesNoUnknown.UNKNOWN.equals(patientElectiveList.getWLPatientReceivingAnticoagulantTherapy())) 
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(GroupAnticoagulantReceivingEnumeration.rdoUnknownAnticoagulantReceiving);
		
		
		
		if( Boolean.TRUE.equals(patientElectiveList.getMedicationShouldBeStoppedOralBowelPrep()))
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop);
		}
		else if( Boolean.FALSE.equals(patientElectiveList.getMedicationShouldBeStoppedOralBowelPrep()))
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(GroupPatientMedicationStopEnumeration.rdoNoPatientMedicationStop);
		}
		//WDEV-22315
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(GroupPatientMedicationStopEnumeration.rdoUnknownPatientMedicationStop);
		} //WDEV-22315
			
		
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setValue(patientElectiveList.getDrugInformation());
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setValue(patientElectiveList.getHasPacemakerDefib());
		
		if( YesNo.YES.equals(patientElectiveList.getRenalFunctionAssessment()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(GroupAssessmentOfRenalFunctionEnumeration.rdoYesAssessmentOfRenalFunction);
		else if( YesNo.NO.equals(patientElectiveList.getRenalFunctionAssessment()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().setValue(patientElectiveList.getCognitiveComments());	//should be added a field to PatientElectiveList Bo for this
		if( Boolean.TRUE.equals(patientElectiveList.getAreThereKeyTherapeutic()))
				form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValue(GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment);
		else if( Boolean.FALSE.equals(patientElectiveList.getAreThereKeyTherapeutic()))
			form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValue(GroupKeyTherapeuticEquipmentEnumeration.rdoNoKeyTherapeuticEquipment);
		
		form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setValue(patientElectiveList.getResponsibleHCP());	//wdev-22582
		
		//if( patientElectiveList.getElectiveListIsNotNull())
		//	form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().newRow(patientElectiveList.getElectiveList(), patientElectiveList.getElectiveList().getWaitingListName());
		//form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setValue(patientElectiveList.getElectiveList());
		form.lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().setValue(patientElectiveList.getInterpretatorRequired());
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue(patientElectiveList.getLanguage());
		form.lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().setValue(patientElectiveList.getTransportRequired());
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue(patientElectiveList.getTransport());
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().setValue(patientElectiveList.getSpecialRequirements());
		form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setValue(patientElectiveList.getSpecialRequirementsDetails());
		form.lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().setValue(patientElectiveList.getComments());
		
		//wdev-21151
		if( patientElectiveList.getAuthoringInfoIsNotNull() && patientElectiveList.getAuthoringInfo().getAuthoringHcpIsNotNull() )
		{
			//form.lyrWaitingListDetails().tabPageEndoscopy().lblAuthoringHCP().setVisible(true);
			//form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForAuthoringHCP().setVisible(true);
			//form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForAuthoringHCP().setValue(patientElectiveList.getAuthoringInfo().getAuthoringHcp().getIHcpName());
			
			//wdev-22776
			form.lyrWaitingListDetails().tabPageEndoscopy().lblAuthoringHCP().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForAuthoringHCP().setVisible(false);
			form.ccAuthoringHCPDT().setValue(patientElectiveList.getAuthoringInfo());
			//-----------
			
		}
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblAuthoringHCP().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForAuthoringHCP().setVisible(false);
		}
		
		if( patientElectiveList.getVettingHCPIsNotNull() )
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblVettingEndoscopist().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setVisible(true);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setValue(patientElectiveList.getVettingHCP().getIHcpName());
		}
		else
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().lblVettingEndoscopist().setVisible(false);
			form.lyrWaitingListDetails().tabPageEndoscopy().lblValueForVettingEndoscopist().setVisible(false);
		}
		
		
		//---------
		
		//wdev - 22310
		if( patientElectiveList.getRecordingUserIsNotNull())
		{
			form.ccRecordingMOS().setValue(patientElectiveList.getRecordingUser().getRecordingUser());
			form.dtimRecordingDateTime().setValue(patientElectiveList.getRecordingUser().getRecordingDateTime());
		}
		//------------
		
		
	}
	
	
	private void clearScreen()
	{
		form.cmbPatientCategory().setValue(null);
		
		cleartabSurgical();
		cleartabMedical();
		cleartabEndoscopy();
		
		//-//
		/*form.GroupBookPatForTCI().setValue(null);
		//form.dteTCIOfferedDate().setValue(null);
		form.GroupAdmissionType().setValue(null);
		form.GroupBookPatForTCI().setValue(GroupBookPatForTCIEnumeration.rdoDays);
		form.qmbProcedure().setValue(null);
		form.txtdetails().setValue(null);
		form.cmbLaterality().setValue(null);
		form.cmbPriority().setValue(null);
		form.cmbAnaestheticType().setValue(null);
		form.GroupAnaesthetistRequiredInTheatre().setValue(null);
		form.GroupHDURequired().setValue(null);
		form.GroupAnaesthetist().setValue(null);
		form.chkShortNotice().setValue(null);
		form.intNumberOfDaysOfNoticeReq().setValue(null);
		form.GroupQuestion1().setValue(null);
		form.txtthispatientisonanticoagulanttherapy().setValue(null);
		form.GroupIsAnticipatedProcedureWillTakeLonger().setValue(null);
		form.intProcedureLength().setValue(null);
		form.GroupProcedureCarriedOut().setValue(null);
		form.ccNamedConsultant().setValue(null);
		form.GroupElectiveListReason().setValue(null);
		form.cmbHospital().setValue(null);
		form.intAnticipatedDays().setValue(null);
		form.GroupDaySurgMainTheatre().setValue(null);
		form.GroupDoesThisPatient().setValue(null);
		form.GroupPropPostop().setValue(null);
		form.txtComment().setValue(null);*/
		
		
	}
	//wdev-20561
	
	private void cleartabSurgical()
	{
		form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().setValue(null);
		//form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().setValue(null);	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().txtReason().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().setValue(null);
		//form.lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setValue(null);	//wdev-21151
		form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().txtComment().setValue(null);
				
		
	}
	
	private void cleartabMedical()
	{
		form.lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().cmbHospital().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().qmbWard().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().txtCommentMedical().setValue(null);
		
			
	}
	
	private void cleartabEndoscopy()
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtEndoscopyDetails().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().setValue(null);

		
	}
	
	protected void onRadioButtonGroupBookPatForTCIValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		
		/*if( form.GroupBookPatForTCI().getValue().equals( GroupBookPatForTCIEnumeration.rdoWeeks) )
		{
			form.dteTCIOfferedDate().setValue(new Date().addDay(form.intBookPatientForTCIIn() != null && form.intBookPatientForTCIIn().getValue() != null &&  form.intBookPatientForTCIIn().getValue() > 0 ? form.intBookPatientForTCIIn().getValue() * 7 : 0));
		}
		else if( form.GroupBookPatForTCI().getValue().equals( GroupBookPatForTCIEnumeration.rdoMonths) )
		{
			form.dteTCIOfferedDate().setValue(new Date().addMonth(form.intBookPatientForTCIIn() != null && form.intBookPatientForTCIIn().getValue() != null &&  form.intBookPatientForTCIIn().getValue() > 0 ? form.intBookPatientForTCIIn().getValue() : 0));
		}
		else if( form.GroupBookPatForTCI().getValue().equals( GroupBookPatForTCIEnumeration.rdoDays) )
		{
			form.dteTCIOfferedDate().setValue(new Date().addDay(form.intBookPatientForTCIIn() != null && form.intBookPatientForTCIIn().getValue() != null &&  form.intBookPatientForTCIIn().getValue() > 0 ? form.intBookPatientForTCIIn().getValue() : 0));
		}*/
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException 
	{
		//WDEV-22488
		if (Boolean.TRUE.equals(form.getLocalContext().getIsAddEditCommentsButtonPressed()))
		{
			openAfterAddingComments();	
		}
		else
		{
			engine.close(DialogResult.CANCEL);
		}
		
	}
	
	//WDEV-22488
	private void openAfterAddingComments()
	{
		form.getLocalContext().setIsAddEditCommentsButtonPressed(null);
		form.getLocalContext().setAddEditComments(null);
		if (form.getLocalContext().getPatientElectiveListIsNotNull())
		{
			form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList(form.getLocalContext().getPatientElectiveList()));
		}
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-22488
		if( save())
		{
			if (Boolean.TRUE.equals(form.getLocalContext().getIsAddEditCommentsButtonPressed()))
			{
				openAfterAddingComments();
			}
			else
			{
				engine.close(DialogResult.OK);
			}
		}
	}
	private boolean save()
	{
		PatientElectiveListAddLaterVo  patElectiveListToSave = populateDataFromScreen(form.getLocalContext().getPatientElectiveList());
		
		String[] errors = patElectiveListToSave.validate(validateUIErrors());
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		//WDEV-22488
		if (Boolean.TRUE.equals(form.getLocalContext().getIsAddEditCommentsButtonPressed()))
		{
        	try
        	{
        		patElectiveListToSave = domain.saveRecord(patElectiveListToSave);
        	} 
        	catch (StaleObjectException e) 
        	{
        		engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        		openAfterAddingComments();
        		return false;
        	}
        	catch (UniqueKeyViolationException e)
        	{
        		e.printStackTrace();
        		engine.showMessage(e.getMessage());
        		return false;
        	}
		}
		else
		{	
    		form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(patElectiveListToSave);
    		form.getGlobalContext().RefMan.setPatientElectiveListRef(patElectiveListToSave);
		}
		
		return true;
	}
	
	private PatientElectiveListAddLaterVo populateDataFromScreen(PatientElectiveListAddLaterVo patientElectiveList)
	{
		
		if (patientElectiveList == null)
			patientElectiveList = new PatientElectiveListAddLaterVo();
		else
			patientElectiveList=(PatientElectiveListAddLaterVo) patientElectiveList.clone();
		
		CatsReferralforElectiveListDetailsVo currentReferral = form.getLocalContext().getReferral();
		
		patientElectiveList.setPatient( currentReferral!= null ? currentReferral.getPatient() : null);
		patientElectiveList.setReferral(currentReferral);
		
		if( form.getLocalContext().getAppointmentIsNotNull())	//wdev-21152
			patientElectiveList.setCreatingAppointment(form.getLocalContext().getAppointment());
		
				
		//Elective Admission Type
		if( form.getLocalContext().getActionIsNotNull() )
		{
			if( ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST.equals(form.getLocalContext().getAction()))
			{
				patientElectiveList.setElectiveAdmissionType(ElectiveAdmissionType.ELECTIVE_TYPE11);
			}
			else if( ims.admin.vo.enums.ElectiveListDetails.ADDTOBOOKEDLIST.equals(form.getLocalContext().getAction()))
			{
				patientElectiveList.setElectiveAdmissionType(ElectiveAdmissionType.BOOKED_TYPE12);
			}
			if( ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()))
			{
				patientElectiveList.setElectiveAdmissionType(ElectiveAdmissionType.PLANNED_TYPE13);
			}
				
		}
		
		// Patient Category
		patientElectiveList.setPatientCategory(form.cmbPatientCategory().getValue());
		
		//wdev-22529
		if(patientElectiveList.getID_PatientElectiveList() == null)
			patientElectiveList.setDateOnList((form.ccAuthoringHCPDT().getValue() != null && form.ccAuthoringHCPDT().getValue().getAuthoringDateTime() != null) ? form.ccAuthoringHCPDT().getValue().getAuthoringDateTime().getDate() : null);
		
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
		{
			patientElectiveList.setAdmissionType(WaitingCardAdmissionType.SURGICAL);
			patientElectiveList = populateDataFromSurgicalTab(patientElectiveList);
		}
		else if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
		{
			patientElectiveList.setAdmissionType(WaitingCardAdmissionType.MEDICAL);
			patientElectiveList = populateDataFromMedicalTab(patientElectiveList);
		}
		else if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
		{
			patientElectiveList.setAdmissionType(WaitingCardAdmissionType.ENDOSCOPY);
			patientElectiveList = populateDataFromEndoscopyTab(patientElectiveList);
		}
		
		
		return patientElectiveList;
	}
	
	//wdev-20561
	private PatientElectiveListAddLaterVo populateDataFromSurgicalTab(PatientElectiveListAddLaterVo patientElectiveList)
	{
		//---
		
		if( GroupElectiveListReasonEnumeration.rdoTreatment.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().getValue()))
			patientElectiveList.setElectiveListReason(ElectiveListReason.TREATMENT);
		else if( GroupElectiveListReasonEnumeration.rdoDiagnostic.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().getValue()))
			patientElectiveList.setElectiveListReason(ElectiveListReason.DIAGNOSTIC);
		
		
		patientElectiveList.setWasPossibleDateGiven(form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue());
		
		
		if( form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().isVisible())
			patientElectiveList.setDateGivenToPatient(form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().getValue());
		else
			patientElectiveList.setDateGivenToPatient(null);
		
		if( ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()))
		{
			patientElectiveList.setToBePlannedIn(form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().getValue());
    		if( GroupPlanedProceduresSurgicalEnumeration.rdoDays.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.DAYS);
    		else if( GroupPlanedProceduresSurgicalEnumeration.rdoMonth.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.MONTHS);
    		else if( GroupPlanedProceduresSurgicalEnumeration.rdoWeeks.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.WEEKS);
    			
    		
    		
    		patientElectiveList.setPlannedDate(form.lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().getValue());
    		
    		if (patientElectiveList.getPlannedDate() == null)
    		{
    			if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
    				patientElectiveList.setPlannedDate(calculateDate(new Date(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    			else
    				patientElectiveList.setPlannedDate(calculateDate(patientElectiveList.getSystemInformation().getCreationDateTime().getDate(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    		}
		}
		else
		{
			patientElectiveList.setToBePlannedIn(null);
			patientElectiveList.setToBePlannedInUnit(null);
			patientElectiveList.setPlannedDate(null);
		}
		
		patientElectiveList.setPrimaryProcedure(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue());
		
		patientElectiveList.setOperativeProcedureStatus(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null);
		
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getVisible())
			patientElectiveList.setProcLaterality(form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValue());
		else
			patientElectiveList.setProcLaterality(null);
		
		
		patientElectiveList.setMultiServiceCase(form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().getValue());  //wdev-21151
			
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible())
		{
			patientElectiveList.setSecondaryProcedure(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue());
		}
		else
			patientElectiveList.setSecondaryProcedure(null);
		
		
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getVisible())
		{
			patientElectiveList.setSecondaryProcLaterality(form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValue());
			
		}
		else
			patientElectiveList.setSecondaryProcLaterality(null);
	
		
		patientElectiveList.setProcedureDescription(form.lyrWaitingListDetails().tabPageSurgical().txtdetails().getValue());
		
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getVisible())
		{
			patientElectiveList.setPriority(form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue());
		}
		else
			patientElectiveList.setPriority(null);
			
		
		if( AnaestheticType.LA_PRE_ASSESSMENT.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()))
		{
			patientElectiveList.setWLAnaestheticType(AnaestheticType.LA);
    		patientElectiveList.setAnaestheticType(AnaestheticType.LA);
		}
		else
		{
    		patientElectiveList.setWLAnaestheticType(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue());
    		patientElectiveList.setAnaestheticType(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue());
		}
		
		
		
		if( form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().isVisible())
		{
			patientElectiveList.setPreAssessmentRequired(form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().getValue());
			
			//if( AnaestheticType.LA_PRE_ASSESSMENT.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()))
			//	patientElectiveList.setPreAssessmentRequired(Boolean.TRUE);
			
		}
		else
		{
			
			boolean hasServiceMaternityIndicator = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getReferral().getReferralDetails().getService().getMaternityIndicator());	//wdev-21469
			
			if( hasServiceMaternityIndicator == true )	//wdev-21469
			{
				patientElectiveList.setPreAssessmentRequired(Boolean.FALSE);
			}
			else
			{
			
    			Integer age  = form.getLocalContext().getPatientSHortIsNotNull() ? form.getLocalContext().getPatientSHort().calculateAge():null;
    			boolean setPreassesmentReqForGAAndSedation =   form.getLocalContext().getPatientSHortIsNotNull() 
    	                                		&& ( age == null ||  age.intValue() >= PATIENTAGEFORPREASSESSMENTREQUIRED ) 	//wdev-21423
    	                                		&& ( AnaestheticType.GA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) 
    	                                			 || AnaestheticType.SEDATION.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue())	
    	                                		/*|| AnaestheticType.LA_PRE_ASSESSMENT.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue())*/
    	                                		   );
    			
    			boolean setPreassesmentReq =   AnaestheticType.LA_PRE_ASSESSMENT.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) || setPreassesmentReqForGAAndSedation;
    	        
    	        if( setPreassesmentReq == true)
    	        	patientElectiveList.setPreAssessmentRequired(Boolean.TRUE);
    	        else
    	        	patientElectiveList.setPreAssessmentRequired(Boolean.FALSE);
			}
		}
		
		if(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().isVisible())
		{
			patientElectiveList.setWLAvailableAtShortNotice(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
			patientElectiveList.setAvailableAtShortNotice(form.lyrWaitingListDetails().tabPageSurgical().chkShortNotice().getValue());
		}
		else
		{
			patientElectiveList.setWLAvailableAtShortNotice(null);
			patientElectiveList.setAvailableAtShortNotice(null);
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().isVisible())
		{
			patientElectiveList.setWLAvailableAtShortNoticePeriod(form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().getValue());
			patientElectiveList.setAvailableAtShortNoticePeriod(form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().getValue());
		}
		else
		{
			patientElectiveList.setWLAvailableAtShortNoticePeriod(null);
			patientElectiveList.setAvailableAtShortNoticePeriod(null);
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().isVisible())
		{
			patientElectiveList.setCriticalCareBedRequired(form.lyrWaitingListDetails().tabPageSurgical().chkCriticalCareBedRequired().getValue());
		}
		else
		{
			patientElectiveList.setCriticalCareBedRequired(null);
		}
		
		/*if( GroupAnaesthetistEnumeration.rdoYesAnaesthetist.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().getValue()))
		{
			patientElectiveList.setAnaesthesisRiskAssessmentRequest(Boolean.TRUE);
		}
		else if( GroupAnaesthetistEnumeration.rdoYesAnaesthetist.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().getValue()))
		{
			patientElectiveList.setAnaesthesisRiskAssessmentRequest(Boolean.FALSE);
		}
		else
			patientElectiveList.setAnaesthesisRiskAssessmentRequest(null);*/
		
		
		patientElectiveList.setAnaesthesisRiskAssessmentRequest(form.lyrWaitingListDetails().tabPageSurgical().chkAnaesthesisRiskAssessmentRequest().getValue());		//wdev-21151
		
		if( GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()))
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(YesNoUnknown.YES);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.YES);
		}
		else if( GroupQuestion1Enumeration.rdoNoQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()))
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(YesNoUnknown.NO);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.NO);
		}
		else if( GroupQuestion1Enumeration.rdoUnknownQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()))
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(YesNoUnknown.UNKNOWN);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.UNKNOWN);
		}
		else
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(null);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(null);
		}
		
		if( form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().isVisible(GroupPerioperativeEnumeration.rdoYesPerioperative) &&  form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().isVisible(GroupPerioperativeEnumeration.rdoNoPerioperative))
		{
			if( GroupPerioperativeEnumeration.rdoYesPerioperative.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()))
			{
				patientElectiveList.setFollowPeriOperativeguidelines(YesNo.YES);
			}
			else if( GroupPerioperativeEnumeration.rdoNoPerioperative.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()))
			{
				patientElectiveList.setFollowPeriOperativeguidelines(YesNo.NO);
			}
			else
				patientElectiveList.setFollowPeriOperativeguidelines(null);
		}
		else
		{
			patientElectiveList.setFollowPeriOperativeguidelines(null);
		}
			
		if( form.lyrWaitingListDetails().tabPageSurgical().txtReason().isVisible())
		{
			patientElectiveList.setPeriOpNoReasonComments(form.lyrWaitingListDetails().tabPageSurgical().txtReason().getValue());
		}
		else
			patientElectiveList.setPeriOpNoReasonComments(null);
		
		patientElectiveList.setAnticipatedProcedureLength(form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue());
		
		if( GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
		{
			patientElectiveList.setProceduredToBeCarriedBy(ProcedureExecutant.LOGGED_IN_CLINICIAN);
			//wdev-21295
			if( !patientElectiveList.getID_PatientElectiveListIsNotNull())
			{
				patientElectiveList.setConsultant(form.getLocalContext().getLoggedInUser());
				patientElectiveList.setProcedureCarriedOutBy(form.getLocalContext().getLoggedInUser());		//wdev-21669
			}
			else
			{
				if( !patientElectiveList.getConsultantIsNotNull())
				{
					patientElectiveList.setConsultant(form.getLocalContext().getLoggedInUser());
				}
				
				if( !patientElectiveList.getProcedureCarriedOutByIsNotNull())
				{
					patientElectiveList.setProcedureCarriedOutBy(form.getLocalContext().getLoggedInUser());		//wdev-21669
				}
			}
			
		}
		else if( GroupProcedureCarriedOutEnumeration.rdoAnyConsultant.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
		{
			patientElectiveList.setProceduredToBeCarriedBy(ProcedureExecutant.ANY_CONSULTANT);
			patientElectiveList.setConsultant(null);
		}
		else if( GroupProcedureCarriedOutEnumeration.rdoNamedConsultant.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
		{
			patientElectiveList.setProceduredToBeCarriedBy(ProcedureExecutant.NAMED_CONSULTANT);
			patientElectiveList.setConsultant(null);
		}
		else if( GroupProcedureCarriedOutEnumeration.rdoAny.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
		{
			patientElectiveList.setProceduredToBeCarriedBy(ProcedureExecutant.ANY);
			patientElectiveList.setConsultant(null);
		}
		else if( GroupProcedureCarriedOutEnumeration.rdoOther.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))		//wdev-22465
		{
			patientElectiveList.setProceduredToBeCarriedBy(ProcedureExecutant.OTHER);
			patientElectiveList.setConsultant(null);
		}
		else
		{
			patientElectiveList.setProceduredToBeCarriedBy(null);
			patientElectiveList.setConsultant(null);
		}
		
		
		//if( form.lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().isVisible())
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getVisible())	//wdev-21151
		{
			patientElectiveList.setProcedureCarriedOutBy((HcpLiteVo) form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue());
		}
		else
		{
			if( !GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))	//wdev-21669
				patientElectiveList.setProcedureCarriedOutBy(null);
		}
		
		//WDEV-22519
		IMos ccRespHcpSurgical = form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue();
		patientElectiveList.setResponsibleHCP(ccRespHcpSurgical instanceof MedicVo ? ((Hcp)ccRespHcpSurgical).toHcpLiteVo() : (ccRespHcpSurgical instanceof HcpLiteVo ? (HcpLiteVo)ccRespHcpSurgical:null));//domain.getHcpLiteFromMedic((HcpRefVo) form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue()));		//wdev-22465
		
		patientElectiveList.setWLPreOperativeOvernightStayRequired(form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue());
		patientElectiveList.setPreOperativeOvernightStayRequired(form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue());
				
		if( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible())
		{
			patientElectiveList.setWLNoOfPreOperativeNights(form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue());	
			patientElectiveList.setNoOfPreOperativeNights(form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue());
		}
		else
		{
			patientElectiveList.setWLNoOfPreOperativeNights(null);	
			patientElectiveList.setNoOfPreOperativeNights(null);
		}
		
		patientElectiveList.setWLAnticipatedStay(form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue());
		patientElectiveList.setAnticipatedStay(form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue());
		
		if( Boolean.TRUE.equals(form.getLocalContext().getIsVisibleSurgicalTheatreType()) /*form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().isVisible(GroupDaySurgMainTheatreEnumeration.rdoMainTheatre) && form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().isVisible(GroupDaySurgMainTheatreEnumeration.rdoDaySurgery)*/)
		{
			if( GroupDaySurgMainTheatreEnumeration.rdoMainTheatre.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				patientElectiveList.setRequiredTheatreType(TheatreType.INPATIENT);
				patientElectiveList.setHospital(null);	//wdev-21151
			}
			else if( GroupDaySurgMainTheatreEnumeration.rdoDaySurgery.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				patientElectiveList.setRequiredTheatreType(TheatreType.DAYCASE);
				patientElectiveList.setHospital(null);	//wdev-21151
			}
			else if( GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))	//wdev-21151
			{
				patientElectiveList.setHospital(form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().getValue());
				patientElectiveList.setRequiredTheatreType(TheatreType.DAYCASE);
			}
			else
				patientElectiveList.setRequiredTheatreType(null);
		}
		else
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() || ( !form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() >= 1))
			{
				patientElectiveList.setRequiredTheatreType(TheatreType.INPATIENT);
			}
			else
				patientElectiveList.setRequiredTheatreType(null);
		}
		
			
		patientElectiveList.setElectiveList(form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().getValue());
		patientElectiveList.setInterpretatorRequired(form.lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().getValue());
		
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().getVisible())
			patientElectiveList.setLanguage(form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().getValue());
		else
			patientElectiveList.setLanguage(null);
			
			
		patientElectiveList.setTransportRequired(form.lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().getValue());
		
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().getVisible())
		{
			patientElectiveList.setTransport(form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().getValue());
		}
		else
			patientElectiveList.setTransport(null);
		
		patientElectiveList.setSpecialRequirements(form.lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().getValue());
		
		if( form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().isVisible())
		{
			patientElectiveList.setSpecialRequirementsDetails(form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().getValue());
		}
		else
			patientElectiveList.setSpecialRequirementsDetails(null);
		
		patientElectiveList.setComments(form.lyrWaitingListDetails().tabPageSurgical().txtComment().getValue());
		
		
		//wdev-20754
		
		// Elective List Status
		ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();
		if( Boolean.TRUE.equals(patientElectiveList.getPreAssessmentRequired() ))
			electiveListStatus.setElectiveListStatus(WaitingListStatus.CREATED);
		else
			electiveListStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
		
		electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		electiveListStatus.setStatusDateTime(new DateTime());
		
		patientElectiveList.setElectiveListStatus(electiveListStatus);
		
		if( patientElectiveList.getElectiveListStatusHistory() == null)
			patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

		patientElectiveList.getElectiveListStatusHistory().add(electiveListStatus);

		
		//----------
		
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().chkPatientDateGivenToPatient().getValue() == true &&  form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient() != null)
			patientElectiveList.setElectiveAdmissionType(ElectiveAdmissionType.BOOKED_TYPE12);
		
		
		
		/*if( ElectiveAdmissionType.ELECTIVE_TYPE11.equals(patientElectiveList.getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(patientElectiveList.getElectiveAdmissionType()))
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible() 
				&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() != null 
				&& form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null
				&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() == 0 
				&& form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0 )
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.DAY_CASE);
			}
			else if(( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible() 
					&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() != null
					&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() > 0)
					||
				   (  form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null
					&& form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() > 0)	)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.OVERNIGHT);
			}
			else
				patientElectiveList.setIntendedManagement(null);
					
				
		}
		else if( ElectiveAdmissionType.PLANNED_TYPE13.equals(patientElectiveList.getElectiveAdmissionType()))
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible() 
					&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() != null 
					&& form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null
					&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() == 0 
					&& form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0 )
				{
					patientElectiveList.setIntendedManagement(ManagementIntention.TYPE4_SEQUENCENOOVERNIGHSTAY);
				}
				else if(( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible() 
						&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() != null
						&& form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() > 0)
						||
					   (  form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null
						&& form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() > 0)	)
				{
					patientElectiveList.setIntendedManagement(ManagementIntention.TYPE3_SEQUENCEATLEASTONENIGHT);
				}
				else
					patientElectiveList.setIntendedManagement(null);
		}*/
		//-----
		
		//wdev-22310
		
		if( form.ccAuthoringHCPDT().getValue() != null )
		{
    		AuthoringInformationVo tempAuthVo = patientElectiveList.getAuthoringInfo();
    		if( tempAuthVo == null )
    			tempAuthVo = new AuthoringInformationVo();
    			
    		
    			tempAuthVo.setAuthoringHcp(form.ccAuthoringHCPDT().getValue().getAuthoringHcp());
    			tempAuthVo.setAuthoringDateTime(form.ccAuthoringHCPDT().getValue().getAuthoringDateTime());
    		
    		patientElectiveList.setAuthoringInfo(tempAuthVo);
		}
		//}
		
		RecordingUserInformationForWLCVo tempRecInf = patientElectiveList.getRecordingUser();
		if( tempRecInf == null )
			tempRecInf = new RecordingUserInformationForWLCVo();
		
		MemberOfStaffLiteVo MosLiteVo = (MemberOfStaffLiteVo) form.ccRecordingMOS().getValue();
		if( MosLiteVo != null )
		{
			tempRecInf.setRecordingUser(MosLiteVo);
			
		}
		
		tempRecInf.setRecordingDateTime(form.dtimRecordingDateTime().getValue());
		patientElectiveList.setRecordingUser(tempRecInf);
		
		//---------end wdev-22310
		
		
		
		
		
		return patientElectiveList;
	}
	
	private Date calculateDate(Date offsetDate, Integer toBePlannedIn, TimeUnitsSecondsToMonths toBePlannedInUnit)
	{
		if (toBePlannedIn == null || toBePlannedInUnit == null)
			return null;
		
		if (TimeUnitsSecondsToMonths.DAYS.equals(toBePlannedInUnit))
		{
			return offsetDate.addDay(toBePlannedIn);
		}
		else if (TimeUnitsSecondsToMonths.WEEKS.equals(toBePlannedInUnit))
		{
			return offsetDate.addDay(7 * toBePlannedIn);
		}
		else if (TimeUnitsSecondsToMonths.MONTHS.equals(toBePlannedInUnit))
		{
			return offsetDate.addMonth(toBePlannedIn);
		}
		
		return offsetDate;
	}
	
	
	
	//wdev-20561
	private PatientElectiveListAddLaterVo populateDataFromMedicalTab(PatientElectiveListAddLaterVo patientElectiveList)
	{
		
		if( GroupElectiveListReasonMedicalEnumeration.rdoTreatmentMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().getValue()))
			patientElectiveList.setElectiveListReason(ElectiveListReason.TREATMENT);
		else if( GroupElectiveListReasonMedicalEnumeration.rdoDiagnosticMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().getValue()))
			patientElectiveList.setElectiveListReason(ElectiveListReason.DIAGNOSTIC);
		
		patientElectiveList.setWasPossibleDateGiven(form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue());
		
		if( form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().isVisible())
			patientElectiveList.setDateGivenToPatient(form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().getValue());
		else
			patientElectiveList.setDateGivenToPatient(null);
		
		
		if( ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()))
		{
			patientElectiveList.setToBePlannedIn(form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().getValue());
    		if( GroupPlanedProceduresMedicalEnumeration.rdoDaysPlannedMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.DAYS);
    		else if( GroupPlanedProceduresMedicalEnumeration.rdoMonthPlannedMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.MONTHS);
    		else if( GroupPlanedProceduresMedicalEnumeration.rdoWeeksPlannedMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.WEEKS);
    			
    		
    		
    		patientElectiveList.setPlannedDate(form.lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().getValue());
    		if (patientElectiveList.getPlannedDate() == null)
    		{
    			if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
    				patientElectiveList.setPlannedDate(calculateDate(new Date(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    			else
    				patientElectiveList.setPlannedDate(calculateDate(patientElectiveList.getSystemInformation().getCreationDateTime().getDate(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    		}
		}
		else
		{
			patientElectiveList.setToBePlannedIn(null);
			patientElectiveList.setToBePlannedInUnit(null);
			patientElectiveList.setPlannedDate(null);
		}
		
		patientElectiveList.setHospital(form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValue());
		patientElectiveList.setWard(form.lyrWaitingListDetails().tabPageMedical().qmbWard().getValue());		//wdev-21151
		
		/*if(!patientElectiveList.getTCIDetailsIsNotNull())
		{
			patientElectiveList.setTCIDetails(new TCIForPatientElectivetListWLVo());
			patientElectiveList.getTCIDetails().setIsActive(Boolean.TRUE);
		}
		
		patientElectiveList.getTCIDetails().setTCIWard(form.lyrWaitingListDetails().tabPageMedical().qmbWard().getValue());
		patientElectiveList.getTCIDetails().setTCIHospital(form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValue());*/
		
		patientElectiveList.setPrimaryProcedure(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue());
		patientElectiveList.setOperativeProcedureStatus(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null);
		
		
		if( form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getVisible())
			patientElectiveList.setProcLaterality(form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValue());
		else
			patientElectiveList.setProcLaterality(null);
			
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getVisible())
		{
			patientElectiveList.setSecondaryProcedure(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue());
		}
		else
			patientElectiveList.setSecondaryProcedure(null);
		
		
		if( form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getVisible())
		{
			patientElectiveList.setSecondaryProcLaterality(form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValue());
			
		}
		else
			patientElectiveList.setSecondaryProcLaterality(null);
	
		
		patientElectiveList.setProcedureDescription(form.lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().getValue());
		if( form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getVisible())
		{
			patientElectiveList.setPriority(form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue());
		}
		else
			patientElectiveList.setPriority(null);
		
		patientElectiveList.setWLAnaestheticType(null);
		patientElectiveList.setAnaestheticType(null);
		
		if( form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().isVisible())
		{
			patientElectiveList.setWLAvailableAtShortNotice(form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
			patientElectiveList.setAvailableAtShortNotice(form.lyrWaitingListDetails().tabPageMedical().chkShortNoticeMedical().getValue());
		}
		else
		{
			patientElectiveList.setWLAvailableAtShortNotice(null);
			patientElectiveList.setAvailableAtShortNotice(null);
		}
		if( form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().isVisible())
		{
			patientElectiveList.setWLAvailableAtShortNoticePeriod(form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().getValue());
			patientElectiveList.setAvailableAtShortNoticePeriod(form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().getValue());
		}
		else
		{
			patientElectiveList.setWLAvailableAtShortNoticePeriod(null);
			patientElectiveList.setAvailableAtShortNoticePeriod(null);
		}
		
		patientElectiveList.setCriticalCareBedRequired(null);
		patientElectiveList.setAnaesthesisRiskAssessmentRequest(null);
		
		patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(null);
		patientElectiveList.setPatientReceivingAnticoagulantTherapy(null);
		patientElectiveList.setFollowPeriOperativeguidelines(null);
		patientElectiveList.setPeriOpNoReasonComments(null);
		
		patientElectiveList.setAnticipatedProcedureLength(null);
		patientElectiveList.setProceduredToBeCarriedBy(null);	
		patientElectiveList.setProcedureCarriedOutBy(null);
		
		patientElectiveList.setWLPreOperativeOvernightStayRequired(null);
		patientElectiveList.setPreOperativeOvernightStayRequired(null);
		
		patientElectiveList.setWLNoOfPreOperativeNights(null);	
		patientElectiveList.setNoOfPreOperativeNights(null);
		
		
		patientElectiveList.setWLAnticipatedStay(form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue());
		patientElectiveList.setAnticipatedStay(form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue());
		
		patientElectiveList.setRequiredTheatreType(null);
		
		//patientElectiveList.setConsultant((HcpLiteVo) form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue());
		//WDEV-22519
		IMos ccRespHcpMedical = form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue();
		patientElectiveList.setResponsibleHCP(ccRespHcpMedical instanceof MedicVo ? ((Hcp)ccRespHcpMedical).toHcpLiteVo() : (ccRespHcpMedical instanceof HcpLiteVo ? (HcpLiteVo)ccRespHcpMedical:null));	//wdev-22465
		
		patientElectiveList.setElectiveList(form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().getValue());
		patientElectiveList.setInterpretatorRequired(form.lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().getValue());
		
		if( form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().getVisible())
			patientElectiveList.setLanguage(form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().getValue());
		else
			patientElectiveList.setLanguage(null);
		
		patientElectiveList.setTransportRequired(form.lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().getValue());
		
		if( form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().getVisible())
		{
			patientElectiveList.setTransport(form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().getValue());
		}
		else
			patientElectiveList.setTransport(null);
		
		patientElectiveList.setSpecialRequirements(form.lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().getValue());
		
		if( form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().isVisible())
		{
			patientElectiveList.setSpecialRequirementsDetails(form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().getValue());
		}
		else
			patientElectiveList.setSpecialRequirementsDetails(null);
		
		patientElectiveList.setComments(form.lyrWaitingListDetails().tabPageMedical().txtCommentMedical().getValue());
		
		//wdev-21469
		boolean hasServiceMaternityIndicator = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getReferral().getReferralDetails().getService().getMaternityIndicator());	//wdev-21469
		if( hasServiceMaternityIndicator == true )	
		{
			patientElectiveList.setPreAssessmentRequired(Boolean.FALSE);
		}
		//-----
		
		//wdev-20754
		
		// Elective List Status
		ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();
		electiveListStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
		electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		electiveListStatus.setStatusDateTime(new DateTime());
		
		patientElectiveList.setElectiveListStatus(electiveListStatus);
		
		if( patientElectiveList.getElectiveListStatusHistory() == null)
			patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

		patientElectiveList.getElectiveListStatusHistory().add(electiveListStatus);

		
		//----------
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().isVisible() && form.lyrWaitingListDetails().tabPageMedical().chkPatientDateGivenToPatientMedical().getValue() == true &&  form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical() != null)
			patientElectiveList.setElectiveAdmissionType(ElectiveAdmissionType.BOOKED_TYPE12);
		
		/*if( ElectiveAdmissionType.ELECTIVE_TYPE11.equals(patientElectiveList.getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(patientElectiveList.getElectiveAdmissionType()))
		{
			if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() == 0 )
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.DAY_CASE);
			}
			else if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() != null &&  form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() > 0	)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.OVERNIGHT);
			}
			else
				patientElectiveList.setIntendedManagement(null);
					
				
		}
		else if( ElectiveAdmissionType.PLANNED_TYPE13.equals(patientElectiveList.getElectiveAdmissionType()))
		{
			if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() == 0)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.TYPE4_SEQUENCENOOVERNIGHSTAY);
			}
			else if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() > 0	)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.TYPE3_SEQUENCEATLEASTONENIGHT);
			}
			else
				patientElectiveList.setIntendedManagement(null);
		}*/
		//-----
		
		
		//-----
		
		//wdev-22310
		
		if( form.ccAuthoringHCPDT().getValue() != null )
		{
    		AuthoringInformationVo tempAuthVo = patientElectiveList.getAuthoringInfo();
    		if( tempAuthVo == null )
    			tempAuthVo = new AuthoringInformationVo();
    			
    		
    			tempAuthVo.setAuthoringHcp(form.ccAuthoringHCPDT().getValue().getAuthoringHcp());
    			tempAuthVo.setAuthoringDateTime(form.ccAuthoringHCPDT().getValue().getAuthoringDateTime());
    		
    		patientElectiveList.setAuthoringInfo(tempAuthVo);
		}
		//}
		
		RecordingUserInformationForWLCVo tempRecInf = patientElectiveList.getRecordingUser();
		if( tempRecInf == null )
			tempRecInf = new RecordingUserInformationForWLCVo();
		
		MemberOfStaffLiteVo MosLiteVo = (MemberOfStaffLiteVo) form.ccRecordingMOS().getValue();
		if( MosLiteVo != null )
		{
			tempRecInf.setRecordingUser(MosLiteVo);
			
		}
		
		tempRecInf.setRecordingDateTime(form.dtimRecordingDateTime().getValue());
		patientElectiveList.setRecordingUser(tempRecInf);
		
		//---------end wdev-22310

		
			
		return patientElectiveList;
	}
	
	//wdev-20561
	private PatientElectiveListAddLaterVo populateDataFromEndoscopyTab(PatientElectiveListAddLaterVo patientElectiveList)
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getAddEditComments())) //WDEV-22488
		{
			patientElectiveList.setComments(form.lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().getValue());
			return patientElectiveList;
		}
		
		if( GroupElectiveListReasonEndoscopyEnumeration.rdoTreatmentEndoscopy.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().getValue()))
			patientElectiveList.setElectiveListReason(ElectiveListReason.TREATMENT);
		else if( GroupElectiveListReasonEndoscopyEnumeration.rdoDiagnosticEndoscopy.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().getValue()))
			patientElectiveList.setElectiveListReason(ElectiveListReason.DIAGNOSTIC);
		
		
		
		if( ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()))
		{
			patientElectiveList.setToBePlannedIn(form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().getValue());
    		if( GroupPlanedProceduresEndoscopyEnumeration.rdoDaysEndoscopy.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.DAYS);
    		else if( GroupPlanedProceduresEndoscopyEnumeration.MonthsEndoscopy.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.MONTHS);
    		else if( GroupPlanedProceduresEndoscopyEnumeration.rdoWeeksEndoscopy.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
    			patientElectiveList.setToBePlannedInUnit(TimeUnitsSecondsToMonths.WEEKS);
    			
    		
    		
    		patientElectiveList.setPlannedDate(form.lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().getValue());
    		if (patientElectiveList.getPlannedDate() == null)
    		{
    			if (patientElectiveList == null || patientElectiveList.getID_PatientElectiveList() == null)
    				patientElectiveList.setPlannedDate(calculateDate(new Date(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    			else
    				patientElectiveList.setPlannedDate(calculateDate(patientElectiveList.getSystemInformation().getCreationDateTime().getDate(), patientElectiveList.getToBePlannedIn(), patientElectiveList.getToBePlannedInUnit()));
    		}
		}
		else
		{
			patientElectiveList.setToBePlannedIn(null);
			patientElectiveList.setToBePlannedInUnit(null);
			patientElectiveList.setPlannedDate(null);
		}
		
		patientElectiveList.setWasPossibleDateGiven(null);
		patientElectiveList.setDateGivenToPatient(null);
		patientElectiveList.setWLAvailableAtShortNotice(null);
		patientElectiveList.setAvailableAtShortNotice(null);
		patientElectiveList.setWLAvailableAtShortNoticePeriod(null);
		patientElectiveList.setAvailableAtShortNoticePeriod(null);
		patientElectiveList.setCriticalCareBedRequired(null);
		patientElectiveList.setAnaesthesisRiskAssessmentRequest(null);
		patientElectiveList.setFollowPeriOperativeguidelines(null);
		patientElectiveList.setPeriOpNoReasonComments(null);
		
		patientElectiveList.setWLPreOperativeOvernightStayRequired(null);
		patientElectiveList.setPreOperativeOvernightStayRequired(null);
		
		patientElectiveList.setWLNoOfPreOperativeNights(null);	
		patientElectiveList.setNoOfPreOperativeNights(null);
		
		patientElectiveList.setWLAnticipatedStay(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() != null ? form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS():null);	//wdev-21151
		patientElectiveList.setAnticipatedStay(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() != null ? form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS():null);		//wdev-21151
		patientElectiveList.setRequiredTheatreType(null);
		
		patientElectiveList.setPrimaryProcedure(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue());
		patientElectiveList.setOperativeProcedureStatus(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null);
		
		
		patientElectiveList.setProcLaterality(null);
		patientElectiveList.setSecondaryProcedure(null);
		patientElectiveList.setSecondaryProcLaterality(null);
		patientElectiveList.setProcedureDescription(form.lyrWaitingListDetails().tabPageEndoscopy().txtEndoscopyDetails().getValue());
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getVisible())
		{
			patientElectiveList.setPriority(form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValue());
		}
		else
			patientElectiveList.setPriority(null);
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().isVisible())
		{
			patientElectiveList.setSuspectedGIBleed(form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().getValue());
		}
		else
			patientElectiveList.setSuspectedGIBleed(null);
			
		if( form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().isVisible())
		{
			patientElectiveList.setPoints(form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().getValue());
			
			if(  form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().isVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().getValue() == null )
			{
				ProcedureVo procEnd = form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
	    		
		    	if( !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()))
		    	{
		    		if( form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().getValue() != null)
		    			form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().getValue().intValue() * 20);
		    	}
			}
		}
		else
			patientElectiveList.setPoints(null);
		
				
		if( form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().isVisible())
		{
			patientElectiveList.setAnticipatedProcedureLength(form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().getValue());
		}
		else
			patientElectiveList.setAnticipatedProcedureLength(null);
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().isVisible())
		{
			patientElectiveList.setSuitableforTraining(form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().getValue());
		}
		else
			patientElectiveList.setSuitableforTraining(null);
		
		
		patientElectiveList.setWLAnaestheticType(null);						//wdev-21979
		patientElectiveList.setAnaestheticType(null);						//wdev-21979
		
		if( GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()))
		{
			patientElectiveList.setGeneralAnaesthetic(YesNo.YES);
			
			patientElectiveList.setWLAnaestheticType(AnaestheticType.GA);	//wdev-21979
			patientElectiveList.setAnaestheticType(AnaestheticType.GA);		//wdev-21979
		}
		else if(GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()))
		{
			patientElectiveList.setGeneralAnaesthetic(YesNo.NO);
		}
		else
			patientElectiveList.setGeneralAnaesthetic(null);
		
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null && (ProcedureEndoscopyType.BRONCHOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType())))
		{
			patientElectiveList.setGeneralAnaesthetic(YesNo.NO);
		}
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().isVisible(GroupProcCarriedByNurseEnumeration.rdoYesProcCarriedByNurse) && form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().isVisible(GroupProcCarriedByNurseEnumeration.rdoNoProcCarriedByNurse))
		{
			if( GroupProcCarriedByNurseEnumeration.rdoYesProcCarriedByNurse.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().getValue()))
			{
				patientElectiveList.setCanNurseCarryOutProcedure(Boolean.TRUE);
			}
			else if( GroupProcCarriedByNurseEnumeration.rdoNoProcCarriedByNurse.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().getValue()))
			{
				patientElectiveList.setCanNurseCarryOutProcedure(Boolean.FALSE);
			}
			else
				patientElectiveList.setCanNurseCarryOutProcedure(null);
		}
		else
		{
			patientElectiveList.setCanNurseCarryOutProcedure(null);
		}
				
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().isVisible())
		{
			patientElectiveList.setDetailsForNonGAEndoProcedure(form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().getValue());
		}
		else
			patientElectiveList.setDetailsForNonGAEndoProcedure(null);
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().isVisible())
		{
			patientElectiveList.setPreAssessmentRequired(form.lyrWaitingListDetails().tabPageEndoscopy().chkPreassessmentRequiredEndoscopy().getValue());
		}
		else
		{
			//wdev-21469
			boolean hasServiceMaternityIndicator = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getReferral().getReferralDetails().getService().getMaternityIndicator());	//wdev-21469
			if( hasServiceMaternityIndicator == true )	
			{
				patientElectiveList.setPreAssessmentRequired(Boolean.FALSE);
			}
			else
			{
			
    			Integer age  = form.getLocalContext().getPatientSHortIsNotNull() ? form.getLocalContext().getPatientSHort().calculateAge():null;
    			boolean showPreassessmentReq = GroupGeneralAnaestheticEnumeration.rdoYesGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()) 
    	        								&& form.getLocalContext().getPatientSHortIsNotNull() 
    	        								&& (age == null || age.intValue() >= PATIENTAGEFORPREASSESSMENTREQUIRED);
    			
    			if( showPreassessmentReq == true)
    				patientElectiveList.setPreAssessmentRequired(Boolean.TRUE);
    			else
    				patientElectiveList.setPreAssessmentRequired(Boolean.FALSE);
    			
    			//wdev-21151
    			if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null && (ProcedureEndoscopyType.BRONCHOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType())))
    			{
    				patientElectiveList.setPreAssessmentRequired(Boolean.FALSE);
    			}
			}
		}
		
		//WDEV-23075
		ProcedureLiteVo procEnd = form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
		boolean isColonoscopy = procEnd != null && ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType());
		if(isColonoscopy && GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue()))
		{
			//wdev-22467
			if( GroupPrecolonoscopyReqEnumeration.rdoYesPreColonoscopyR.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().getValue()))
				patientElectiveList.setPreColonoscopyAssessmentRequired(YesNo.YES);
			else if( GroupPrecolonoscopyReqEnumeration.rdoNoPreColonoscopyR.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().getValue()))
				patientElectiveList.setPreColonoscopyAssessmentRequired(YesNo.NO);
			//---------
		}
		
		if( GroupAnticoagulantReceivingEnumeration.rdoYesAnticoagulantReceiving.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()))
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(YesNoUnknown.YES);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.YES);
		}
		else if( GroupAnticoagulantReceivingEnumeration.rdoNoAnticoagulantReceiving.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()))
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(YesNoUnknown.NO);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.NO);
		}
		else if( GroupAnticoagulantReceivingEnumeration.rdoUnknownAnticoagulantReceiving.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()))
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(YesNoUnknown.UNKNOWN);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(YesNoUnknown.UNKNOWN);
		}
		else
		{
			patientElectiveList.setWLPatientReceivingAnticoagulantTherapy(null);
			patientElectiveList.setPatientReceivingAnticoagulantTherapy(null);
		}
		
		
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().isVisible(GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop) 
				&& form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().isVisible(GroupPatientMedicationStopEnumeration.rdoNoPatientMedicationStop)
				//WDEV-22315
				&& form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().isVisible(GroupPatientMedicationStopEnumeration.rdoUnknownPatientMedicationStop) //WDEV-22315
				)
		{
			if( GroupPatientMedicationStopEnumeration.rdoYesPatientMedicationStop.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue()))
			{
				patientElectiveList.setMedicationShouldBeStoppedOralBowelPrep(Boolean.TRUE);
			}
			else if( GroupPatientMedicationStopEnumeration.rdoNoPatientMedicationStop.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue()))
			{
				patientElectiveList.setMedicationShouldBeStoppedOralBowelPrep(Boolean.FALSE);
			}
			//WDEV-22315
//			else
//				patientElectiveList.setMedicationShouldBeStoppedOralBowelPrep(null);
			else if (GroupPatientMedicationStopEnumeration.rdoUnknownPatientMedicationStop.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue()))
			{
				patientElectiveList.setMedicationShouldBeStoppedOralBowelPrep(null);
			} //WDEV-22315
				
		}
		else
		{
			patientElectiveList.setMedicationShouldBeStoppedOralBowelPrep(null);
		}
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().isVisible())
		{
			patientElectiveList.setDrugInformation(form.lyrWaitingListDetails().tabPageEndoscopy().txtDrugInformation().getValue());
		}
		else
			patientElectiveList.setDrugInformation(null);
			
		patientElectiveList.setHasPacemakerDefib(form.lyrWaitingListDetails().tabPageEndoscopy().chkPacemakerDefibrilatorEndoscopy().getValue());
				
		if( form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().isVisible(GroupAssessmentOfRenalFunctionEnumeration.rdoYesAssessmentOfRenalFunction) && form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().isVisible(GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction))
		{
			if( GroupAssessmentOfRenalFunctionEnumeration.rdoYesAssessmentOfRenalFunction.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().getValue()))
			{
				patientElectiveList.setRenalFunctionAssessment(YesNo.YES);
			}
			else if( GroupAssessmentOfRenalFunctionEnumeration.rdoNoAssessmentOfRenalFunction.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().getValue()))
			{
				patientElectiveList.setRenalFunctionAssessment(YesNo.NO);
			}
			else
				patientElectiveList.setRenalFunctionAssessment(null);
				
		}
		else
		{
			patientElectiveList.setRenalFunctionAssessment(null);
		}
			
		
		
		patientElectiveList.setCognitiveComments(form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().getValue());
		
		if( GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue()))
		{
			patientElectiveList.setAreThereKeyTherapeutic(Boolean.TRUE);
		}
		else if( GroupKeyTherapeuticEquipmentEnumeration.rdoNoKeyTherapeuticEquipment.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue()))
		{
			patientElectiveList.setAreThereKeyTherapeutic(Boolean.FALSE);
		}
		else
		{
			patientElectiveList.setAreThereKeyTherapeutic(null);
		}
		
		//patientElectiveList.setElectiveList(form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().getValue());#
		//WDEV-22519
		IMos respHcpEndoscopy = form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().getValue();
		patientElectiveList.setResponsibleHCP(respHcpEndoscopy instanceof MedicVo ? ((Hcp)respHcpEndoscopy).toHcpLiteVo() : (respHcpEndoscopy instanceof HcpLiteVo ? (HcpLiteVo)respHcpEndoscopy:null)); //domain.getHcpLiteFromMedic((HcpRefVo) form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().getValue()));	//wdev-22465
		patientElectiveList.setElectiveList(null);	//wdev-21979
		patientElectiveList.setInterpretatorRequired(form.lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().getValue());
		if( form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().getVisible())
		{
			patientElectiveList.setLanguage(form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().getValue());
		}
		else
			patientElectiveList.setLanguage(null);
		
		patientElectiveList.setTransportRequired(form.lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().getValue());
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().getVisible())
		{
			patientElectiveList.setTransport(form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().getValue());
		}
		else
			patientElectiveList.setTransport(null);
		
		patientElectiveList.setSpecialRequirements(form.lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().getValue());
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().isVisible())
		{
			patientElectiveList.setSpecialRequirementsDetails(form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().getValue());
		}
		else
			patientElectiveList.setSpecialRequirementsDetails(null);
		
		patientElectiveList.setComments(form.lyrWaitingListDetails().tabPageEndoscopy().txtCommentEndoscopy().getValue());
		
		
		//wdev-20754
		
		// Elective List Status
		ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();
		if( Boolean.TRUE.equals(patientElectiveList.getPreAssessmentRequired() ))
			electiveListStatus.setElectiveListStatus(WaitingListStatus.CREATED);
		else
			electiveListStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
		
		electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		electiveListStatus.setStatusDateTime(new DateTime());
		
		patientElectiveList.setElectiveListStatus(electiveListStatus);
		
		if( patientElectiveList.getElectiveListStatusHistory() == null)
			patientElectiveList.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

		patientElectiveList.getElectiveListStatusHistory().add(electiveListStatus);

		//wdev-22776
		HcpLiteVo tempVo = null;
		
		if(FormMode.EDIT.equals(form.ccAuthoringHCPDT().getMode())) // this is only in edit mode when creating a new record. Check is done after the Authoring HCP
		{
			if (form.ccAuthoringHCPDT().getValue() != null)
			{
				AuthoringInformationVo tempAuthVo = patientElectiveList.getAuthoringInfo();
				if (tempAuthVo == null)
					tempAuthVo = new AuthoringInformationVo();

				tempAuthVo.setAuthoringHcp(form.ccAuthoringHCPDT().getValue().getAuthoringHcp());
				tempVo = form.ccAuthoringHCPDT().getValue().getAuthoringHcp();
				tempAuthVo.setAuthoringDateTime(form.ccAuthoringHCPDT().getValue().getAuthoringDateTime());

				patientElectiveList.setAuthoringInfo(tempAuthVo);
			}
		}
		else //Not a new record, check is done after the Logged-In User
		//wdev-21151
		tempVo = (HcpLiteVo) domain.getHcpLiteUser();
		
		boolean isEndoscopist = tempVo != null && Boolean.TRUE.equals(tempVo.getIsHCPaEndoscopist());
		
		if( patientElectiveList.getID_PatientElectiveList() == null )
		{
			if( !isEndoscopist )		//if on creation the HCP is not endoscopist 
			{
				
				 //AuthoringInformationVo tempAuthVo = new AuthoringInformationVo();
				 //tempAuthVo.setAuthoringHcp(tempVo);
				// tempAuthVo.setAuthoringDateTime(new DateTime());
				// patientElectiveList.setAuthoringInfo(tempAuthVo);
				 
				if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()))
				{
    				// AuthoringInformationVo tempAuthVo = new AuthoringInformationVo();
    				// tempAuthVo.setAuthoringHcp(tempVo);
    				// tempAuthVo.setAuthoringDateTime(new DateTime());
    				// patientElectiveList.setAuthoringInfo(tempAuthVo);
    				 patientElectiveList.setRequiresVetting(Boolean.TRUE);
				}
				else
				{
					//patientElectiveList.setVettingDate(new DateTime());
					//patientElectiveList.setVettingHCP(tempVo);
					 patientElectiveList.setRequiresVetting(Boolean.FALSE);
				}
			}
			else					//if on creation the HCP is endoscopist
			{
				
				if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()))
				{
					patientElectiveList.setVettingDate(new DateTime());
					patientElectiveList.setVettingHCP(tempVo);
				}
				/*else if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null)
				{
					 AuthoringInformationVo tempAuthVo = new AuthoringInformationVo();
					 tempAuthVo.setAuthoringHcp(tempVo);
					 tempAuthVo.setAuthoringDateTime(new DateTime());
					 patientElectiveList.setAuthoringInfo(tempAuthVo);
				}*/
				patientElectiveList.setRequiresVetting(Boolean.FALSE);
			}
		}
		else
		{
			if( isEndoscopist && Boolean.TRUE.equals(patientElectiveList.getRequiresVetting())) //if on updating the HCP is endoscopist
			{
				if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null && !ProcedureEndoscopyType.BRONCHOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getEndoscopyType()))
				{
    				patientElectiveList.setVettingDate(new DateTime());
    				patientElectiveList.setVettingHCP(tempVo);
				}
				patientElectiveList.setRequiresVetting(Boolean.FALSE);
			}
		}

		/*if( ElectiveAdmissionType.ELECTIVE_TYPE11.equals(patientElectiveList.getElectiveAdmissionType()) || ElectiveAdmissionType.BOOKED_TYPE12.equals(patientElectiveList.getElectiveAdmissionType()))
		{
			if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() == 0)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.DAY_CASE);
			}
			else if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() > 0	)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.OVERNIGHT);
			}
			else
			{
				patientElectiveList.setIntendedManagement(null);
			}
					
				
		}
		else if( ElectiveAdmissionType.PLANNED_TYPE13.equals(patientElectiveList.getElectiveAdmissionType()))
		{
			if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() == 0)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.TYPE4_SEQUENCENOOVERNIGHSTAY);
			}
			else if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() != null  && form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getLOS() > 0	)
			{
				patientElectiveList.setIntendedManagement(ManagementIntention.TYPE3_SEQUENCEATLEASTONENIGHT);
			}
			else
				patientElectiveList.setIntendedManagement(null);
		}*/
		//---------------
		
		
		//wdev-22310
				
		RecordingUserInformationForWLCVo tempRecInf = patientElectiveList.getRecordingUser();
		if( tempRecInf == null )
			tempRecInf = new RecordingUserInformationForWLCVo();
		
		MemberOfStaffLiteVo MosLiteVo = (MemberOfStaffLiteVo) form.ccRecordingMOS().getValue();
		if( MosLiteVo != null )
		{
			tempRecInf.setRecordingUser(MosLiteVo);
			
		}
		
		tempRecInf.setRecordingDateTime(form.dtimRecordingDateTime().getValue());
		patientElectiveList.setRecordingUser(tempRecInf);
		
		//---------end wdev-22310
		
		return patientElectiveList;
	}
	protected void onQmbProcedureValueChanged() throws PresentationLogicException
	{
		qmbProcedurePrimarySurgicalValueChanged();
	}
	
	void qmbProcedurePrimarySurgicalValueChanged()
	{
		if( !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible())
		{
			form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null ? form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS() : null);
			form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null ? form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMins() : null);
			
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDefaultAnaestheticTypeIsNotNull())	//wdev-21151
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDefaultAnaestheticType());
			}
			
			
		}
		else
		{
			form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(null);
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null)
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull())
				{
    				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS().intValue() > form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS().intValue())
    				{
    					form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS());
    				}
    				else
    				{
    					form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS());
    				}
				}
				else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull() )
				{
					form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS());
				}
				else if(  form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull())
				{
					form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS());
				}
				//wdev - 21063
				else if( !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull() && !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull())
				{
					form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(null);
				}
				
				
				
			}
			else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() == null)
			{
				form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS());
			}
			else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() == null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null)
			{
				form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS());
			}
			
			//wdev-21151
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() == null || ( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDefaultAnaestheticTypeIsNotNull()))	
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDefaultAnaestheticTypeIsNotNull())
					form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDefaultAnaestheticType());
			}
			
			
			//---
		}
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getIsBilateralListingApplicable()))
			{
				if( !form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().removeRow(LateralityLRB.BILATERAL);
			}
		}
		
		
		
		updateControlsState();
		
		//cmbAnaestheticTypeValueChanged(false);
		
		//---------------
	}
	
	//wdev-20561
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().clear();
		form.lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(null);
		ProcedureVoCollection procedureCollection = new ProcedureVoCollection();
		
		try
		{
			if( GroupPrimaryProcedureSurgicalEnumeration.rdoSpecialtyHotListSurgical.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPrimaryProcedureSurgical().getValue()))  //wdev-21151
				procedureCollection = domain.listSurgicalProcedures(value, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.FALSE);
			else if( GroupPrimaryProcedureSurgicalEnumeration.rdoAllProceduresSurgical.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPrimaryProcedureSurgical().getValue()))
				procedureCollection = domain.listSurgicalProcedures(value, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.TRUE);
			else
			{
				engine.showMessage("Select a filter");
			}
				
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		if( procedureCollection == null )
			return;
		
		for( int i=0; i < procedureCollection.size(); i++)
		{
			addRowPrimaryProcSurgical(procedureCollection.get(i));
		}
		
		if( procedureCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().setValue(procedureCollection.get(0));
			qmbProcedurePrimarySurgicalValueChanged();	//wdev-21063
			//resetProcedureDescription();
			updateControlsState();
			
		}
		else if( procedureCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().showOpened();
		
	}
	private void addRowPrimaryProcSurgical(ProcedureVo procedureVo)
	{
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().newRow(procedureVo, procedureVo.getProcedureName());
	}
	private void addRowSecondProcSurgical(ProcedureVo procedureVo)
	{
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().newRow(procedureVo, procedureVo.getProcedureName());
	}
	private void addRowPrimaryProcMedical(ProcedureVo procedureVo)
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().newRow(procedureVo, procedureVo.getProcedureName());
	}
	private void addRowSecondProcMedical(ProcedureVo procedureVo)
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().newRow(procedureVo, procedureVo.getProcedureName());
	}
	private void addRowProcEndoscopy(ProcedureVo procedureVo)
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().newRow(procedureVo, procedureVo.getProcedureName());
	}
	private void resetProcedureDescription()
	{
		
		if (form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null)
		{
			form.lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getProcedureName());
		}
		else
			form.lyrWaitingListDetails().tabPageSurgical().txtdetails().setValue(null);
		
	}
	private void resetProcedureMedicalDescription()
	{
		
		if (form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null)
		{
			form.lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getProcedureName());
		}
		else
			form.lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(null);
		
	}
	private void resetProcedureEndoscopyDescription()
	{
		
		if (form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() != null)
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue().getProcedureName());
		}
		else
			form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(null);
		
	}
	public String[] validateUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if( form.GroupAdmissionType().getValue() == null )
		{
			errors.add("Admission Type is mandatory.");
		}
		
		if( GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
		{
			errors = validateUIErrorsSurgicalTab();
		}
		else if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
		{
			errors = validateUIErrorsMedicalTab();
		}
		else if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
		{
			errors = validateUIErrorsEndoscopyTab();
		}
		
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	//wdev-20561
	private ArrayList<String> validateUIErrorsSurgicalTab()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		//if( form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().getValue() == null )
		//{
		//	errors.add("Elective List Reason is mandatory.");
		//}
		
		if( form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().getValue() != null )
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue() == null || GroupPlanedProceduresSurgicalEnumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
			{
				errors.add("Please select Days, Weeks or Months.");
			}
			
		}
		else if( form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().getValue() == null)
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue() != null && !GroupPlanedProceduresSurgicalEnumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().getValue()))
			{
				errors.add("Please enter a value for Plan Procedure In.");
			}
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().dteDateGivenToPatient().getValue() == null)
		{
			errors.add("Date given to patient is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() == null)
		{
			errors.add("Primary Procedure is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getVisible() && form.lyrWaitingListDetails().tabPageSurgical().cmbLaterality().getValue() == null )
		{
			errors.add("Laterality is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible() && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() == null )
		{
			errors.add("Additional Procedure is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible() && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null)
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().equals(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue()))
			{
				errors.add(" The same procedure cannot be used for both Intended Procedure fields.");
			}
		}
		
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getVisible() && form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValue() == null )
		{
			errors.add("Laterality is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getVisible() &&  form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue() == null)
		{
			errors.add("Urgency is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue() == null )
		{
			errors.add("Anaesthetic Type is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().isVisible() &&  form.lyrWaitingListDetails().tabPageSurgical().intNumberOfDaysOfNoticeReq().getValue() == null)
		{
			errors.add("Notice required is mandatory.");
		}
		/*if( GroupAnaesthetistEnumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupAnaesthetist().getValue() ) && !AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()))  //wdev-20829
		{
			errors.add("Do you want this patient to have an assessment of risk by an Anaesthetist? is mandatory.");
		}*/
		if( GroupQuestion1Enumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()) )
		{
			errors.add("Is this patient currently receiving anticoagulant / antiplatelet therapy? is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().txtdummySurgicalPerioperative().isEnabled())
		{
			if( GroupPerioperativeEnumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupPerioperative().getValue()))
			{
				errors.add("Are you happy to follow the Trust's Perioperative Guidelines in relation to stopping medication?  is mandatory.");
			}
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().txtReason().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().txtReason().getValue() == null )
		{
			errors.add("Reason is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue() == null )
		{
			errors.add("Procedure Length is mandatory.");
		}
		else
		{
			if( !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible())
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMinsIsNotNull())
				{
					if(  form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMins().intValue())
					{
						errors.add("Procedure Length should not be less than the number of minutes of selected procedure");
					}
				}
				
				
			}
        	else
        	{
        		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMinsIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDurationInMinsIsNotNull())
        		{
        			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMins().intValue() > form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDurationInMins().intValue())
        			{
        				if(  form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMins().intValue())
    					{
    						errors.add("Procedure Length should not be less than the number of minutes of selected procedure");
    					}
        				
        			}
        			else
        			{
        				if(  form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDurationInMins().intValue())
    					{
    						errors.add("Procedure Length should not be less than the number of minutes of selected procedure");
    					}
        			}
        		}
        		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMinsIsNotNull() && ( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() == null || form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDurationInMins() == null ))
        		{
        			if(  form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMins().intValue())
					{
						errors.add("Procedure Length should not be less than the number of minutes of selected procedure");
					}
    			
        		}
        		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null && ( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() == null || form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDurationInMins() == null ) && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDurationInMinsIsNotNull())
        		{
        			if(  form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDurationInMins().intValue())
					{
						errors.add("Procedure Length should not be less than the number of minutes of selected procedure");
					}
        		}
        	}

		}
		
		if( GroupProcedureCarriedOutEnumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
		{
			errors.add("This procedure is to be carried out by is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getVisible() == true && form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue() == null )
		{
			errors.add("Named Consultant is mandatory.");
		}
		//wdev-22465
		if( form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue() == null )
		{
			errors.add("Responsible HCP is mandatory.");
		}
		//----
		if( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() == null)
		{
			errors.add("Number of Nights is mandatory.");
		}
		else if( form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue().intValue() == 0)
		{
			errors.add(" Number of Nights  must be greater than or equal to 1 .");
			 

		}
		
		if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == null )
		{
			errors.add("Anticipated Post - Operative Stay is mandatory.");
		}
		
		/*  //WDEV-23468
		if( form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() && form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null)
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().intPreoperativeOverNights().getValue().intValue())
			{
				errors.add("Anticipated Post - Operative Stay should not be less than Number of Nights.");
			}
		}
		*/
		/*if( !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getVisible())
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null &&  form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS() != null &&  form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS().intValue())
			{
				errors.add("Anticipated Post - Operative Stay should not be less than the Length of Stay of selected Procedure.");
			}
		}
		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null)
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull())
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS().intValue() > form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS().intValue())
				{
					if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS().intValue())
					{
						errors.add("Anticipated Post - Operative Stay should not be less than the Length of Stay of selected Procedure.");
					}
					
				}
				else
				{
					if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS().intValue())
					{
						errors.add("Anticipated Post - Operative Stay should not be less than the Length of Stay of selected Procedure.");
					}
				}
			}
			else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS() == null )
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS().intValue())
				{
					errors.add("Anticipated Post - Operative Stay should not be less than the Length of Stay of selected Procedure.");
				}
			}
			else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS() == null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull())
			{
				if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue().intValue() < form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS().intValue())
				{
					errors.add("Anticipated Post - Operative Stay should not be less than the Length of Stay of selected Procedure.");
				}
			}
			
		}*/
		
		
		if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() == 0 && !form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue() )
		{
			if( GroupDaySurgMainTheatreEnumeration.None.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				errors.add("Theatre Type is mandatory.");
			}
			if( GroupDaySurgMainTheatreEnumeration.rdoPeripheralLocation.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()) && form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().getValue() == null) //wdev-21151
			{
				errors.add("Hospital is mandatory.");
			}
		}
		
		
		else if( form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().getValue() > 1 && !form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue())
		{
			if( GroupDaySurgMainTheatreEnumeration.rdoDaySurgery.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().getValue()))
			{
				errors.add("Day Surgery Theatre cannot be selected if the procedure involves an overnight stay.");
			}
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().getValue() == null )
		{
			errors.add("Elective List is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().getVisible() && form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().getValue() == null)
		{
			errors.add("Interpreter Required is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().getVisible() && form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().getValue() == null )
		{
			errors.add("Transport Required is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().isVisible() && form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().getValue() == null)
		{
			errors.add("Special Requirements is mandatory.");
		}
		//WDEV-22866
		if(form.ccAuthoringHCPDT().getErrors() != null)
		{
			errors.add(form.ccAuthoringHCPDT().getErrors());
		}
		///if( form.ccRecordingMOS().getValue() == null || form.dtimRecordingDateTime().getValue() == null)
		//{
		//	errors.add(" Recording MOS and Recording Date / Time are mandatory." );
		//}
		//-----
		
		
		return errors;
	}
	//wdev-20561
	private ArrayList<String> validateUIErrorsMedicalTab()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		//if( GroupElectiveListReasonMedicalEnumeration.None.equals(form.lyrWaitingListDetails().tabPageMedical().GroupElectiveListReasonMedical().getValue()))
		//{
		//	errors.add("Elective List Reason is mandatory.");
		//}
		
		if( form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().isVisible() &&  form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().getValue() != null )
		{
			if( form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue() == null || GroupPlanedProceduresMedicalEnumeration.None.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
			{
				errors.add("Please select Days, Weeks or Months.");
			}
			
		}
		else if(  form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().isVisible() &&  form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().getValue() == null)
		{
			if( form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue() != null && !GroupPlanedProceduresMedicalEnumeration.None.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().getValue()))
			{
				errors.add("Please enter a value for Plan Procedure In.");
			}
		}
		if( form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().isVisible() && form.lyrWaitingListDetails().tabPageMedical().dteDateGivemToPatientMedical().getValue() == null)
		{
			errors.add("Date given to patient is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() == null)
		{
			errors.add("Primary Procedure is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getVisible() && form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValue() == null )
		{
			errors.add("Laterality is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getVisible() && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() == null )
		{
			errors.add("Additional Procedure is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getVisible() && form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValue() == null )
		{
			errors.add("Laterality is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getVisible() && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null )
		{
			if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().equals(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue()))
			{
				errors.add(" The same procedure cannot be used for both Intended Procedure fields.");
			}
		}
		
		if( form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getVisible() &&  form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue() == null)
		{
			errors.add("Urgency is mandatory.");
		}
		
		if( form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().isVisible() &&  form.lyrWaitingListDetails().tabPageMedical().intNumberOfDaysOfNoticeReqMedical().getValue() == null)
		{
			errors.add("Notice required is mandatory.");
		}
		
		
		if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue() == null )
		{
			errors.add("Anticipated Stay is mandatory.");
		}
		else 
		{
			/*if( !form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getVisible())
			{
				if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull())
				{
					
					if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue().intValue() <  form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS().intValue())
					{
						errors.add("Anticipated Stay cannot be less than Length of Stay of selected procedure");
					}
				
				}
			}
			else
			{
	    		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null
	    				&& form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull()
	    				&& form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull()
	    				)
	    		{
	    			if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS().intValue() > form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS().intValue())
	    			{

	    				if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue().intValue() < form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS().intValue())
	    				{
	    					errors.add("Anticipated Stay cannot be less than LOS of selected procedure");
	    				}
	    			}
	    			else
	    			{
	    				if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue().intValue() < form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS().intValue())
	    				{
	    					errors.add("Anticipated Stay cannot be less than LOS of selected procedure");
	    				}
	    			}
	    			
	    			
	    		}
	    		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull())
	    		{
	    			if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue().intValue() < form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS().intValue())
    				{
    					errors.add("Anticipated Stay cannot be less than LOS of selected procedure");
    				}
	    		}
	    		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull())
	    		{
	    			if( form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().getValue().intValue() < form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS().intValue())
    				{
    					errors.add("Anticipated Stay cannot be less than LOS of selected procedure");
    				}
	    		}
	    			
			}*/
		}
		
		
		
		if(form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue() == null)
		{
			errors.add("Responsible HCP is mandatory.");
		}
		
		if( form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().getValue() == null )
		{
			errors.add("Elective List is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().getVisible() && form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().getValue() == null)
		{
			errors.add("Interpreter Required is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().getVisible() && form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().getValue() == null )
		{
			errors.add("Transport Required is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().isVisible() && form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().getValue() == null)
		{
			errors.add("Special Requirements is mandatory.");
		}
		//WDEV-22866
		if(form.ccAuthoringHCPDT().getErrors() != null)
		{
			errors.add(form.ccAuthoringHCPDT().getErrors());
		}
		//if( form.ccRecordingMOS().getValue() == null || form.dtimRecordingDateTime().getValue() == null)
		//{
		//	errors.add(" Recording MOS and Recording Date / Time are mandatory." );
		//}
		//-----
		
		return errors;
	}
	//wdev-20561
	private ArrayList<String> validateUIErrorsEndoscopyTab()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		//if( form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().getValue() == null )
		//{
		//	errors.add("Elective List Reason is mandatory.");
		//}
		
		if (Boolean.TRUE.equals(form.getLocalContext().getAddEditComments())) //WDEV-22488
		{
			return errors;
		}
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().isVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().getValue() != null )
		{
			if( form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue() == null || GroupPlanedProceduresEndoscopyEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
			{
				errors.add("Please select Days, Weeks or Months.");
			}
			
		}
		else if( form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().isVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().getValue() == null)
		{
			if( form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue() != null && !GroupPlanedProceduresEndoscopyEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().getValue()))
			{
				errors.add("Please enter a value for Plan Procedure In.");
			}
		}
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue() == null)
		{
			errors.add("Primary Procedure is mandatory.");
		}
		/*if( form.lyrWaitingListDetails().tabPageEndoscopy().txtEndoscopyDetails().getValue() == null)
		{
			errors.add("Details are mandatory.");
		}*/
		if( form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getVisible() &&  form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValue() == null)
		{
			errors.add("Urgency is mandatory.");
		}
		
		if (form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().isVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().isEnabled()
				&& form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().isRequired() && form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().getValue() == null)
		{
			errors.add("Points is mandatory.");
		}
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().lblGeneralAnaesthetic().isVisible() && GroupGeneralAnaestheticEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue() ))
		{
			errors.add("General Anaesthetic? is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageEndoscopy().lblIsPreColonoscopyRequired1().isVisible() && GroupPrecolonoscopyReqEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().getValue() ))
		{
			errors.add("'Is pre-colonoscopy assessment required?' is mandatory.");
		}

		ProcedureVo procEnd = form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
		
		HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
		boolean isEndoscopist = tempVo != null && Boolean.TRUE.equals(tempVo.getIsHCPaEndoscopist());
		if( GroupGeneralAnaestheticEnumeration.rdoNoGeneralAnaesthetic.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupGeneralAnaesthetic().getValue() ) && procEnd != null && !ProcedureEndoscopyType.COLONOSCOPY.equals(procEnd.getEndoscopyType()))
		{
			if( form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyProcCarriedByNurse().isVisible() && GroupProcCarriedByNurseEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().getValue()) && isEndoscopist)
			{
				errors.add("Can this procedure be carried out by a Nurse? is mandatory.");
			}
		}
		
		boolean isERCPORPRG  = procEnd != null && (ProcedureEndoscopyType.ERCP.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.PEG.equals(procEnd.getEndoscopyType()));	//wdev-21151
		
		boolean isBronchoOrThora = procEnd != null && ( ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())); //wdev - 22291
		
		boolean isKeyTherapeutiRadioButtonsVisible = !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && !isERCPORPRG && !isBronchoOrThora;	//wdev-22291
		if( isKeyTherapeutiRadioButtonsVisible && GroupKeyTherapeuticEquipmentEnumeration.rdoYesKeyTherapeuticEquipment.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue()) && ( form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().getValue() == null || form.lyrWaitingListDetails().tabPageEndoscopy().txtKeyTherapeuticEquipment().getValue().trim().equals("") )) //wdev-22291
		{
			errors.add(" Comment is mandatory. ");
		}

		
		
		if( !ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST.equals(form.getLocalContext().getAction()) && GroupAnticoagulantReceivingEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAnticoagulantReceiving().getValue()) && !isERCPORPRG)
		{
			errors.add("Is this patient currently receiving anticoagulant / antiplatelet therapy? is mandatory.");
		}
		//wdev-22465
		if( form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().getValue() == null )
		{
			errors.add("Responsible HCP is mandatory.");
		}
		//----
		/*if( form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().getValue() == null )
		{
			errors.add("Elective List is mandatory.");
		}*/
		if( form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().getVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().getValue() == null)
		{
			errors.add("Interpreter Required is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().getVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().getValue() == null )
		{
			errors.add("Transport Required is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().isVisible() && form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().getValue() == null)
		{
			errors.add("Special Requirements is mandatory.");
		}
		//wdev-21151
		
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyForBowelPreparation().isVisible() && GroupPatientMedicationStopEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupPatientMedicationStop().getValue()))
		{
			errors.add("Is this patient on any medication that should be stopped prior to oral bowel preparation? is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyDidPatienthaveAs().isVisible() && GroupAssessmentOfRenalFunctionEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupAssessmentOfRenalFunction().getValue()))
		{
			errors.add("Did patient have an assessment of Renal Function in the last 3 months? is mandatory.");
		}
		if( form.lyrWaitingListDetails().tabPageEndoscopy().txtdummyAreThereKeyTherapeu().isVisible() && GroupKeyTherapeuticEquipmentEnumeration.None.equals(form.lyrWaitingListDetails().tabPageEndoscopy().GroupKeyTherapeuticEquipment().getValue()))
		{
			errors.add("Are there key therapeutic equipment and / or patient cognitive or physical capacity issues not covered by this form? is mandatory.");
		}
		//wdev-22310
		//if( form.ccRecordingMOS().getValue() == null || form.dtimRecordingDateTime().getValue() == null)
		//{
		//	errors.add(" Recording MOS and Recording Date / Time are mandatory." );
		//}
		//-----
		
		//wdev-22776
		//WDEV-22866
		if(form.ccAuthoringHCPDT().getErrors() != null)
		{
			errors.add(form.ccAuthoringHCPDT().getErrors());
		}
		//------------
		
		return errors;
	}
	
	//wdev-19666
	protected void onRadioButtonGroupHDURequiredValueChanged() throws PresentationLogicException
	{
		/* to do if( form.GroupHDURequired().getValue().equals(GroupHDURequiredEnumeration.rdoYesHDURequired))
		{
			if( form.GroupITURequired().getValue().equals(GroupITURequiredEnumeration.rdoYesITURequired))
			{
				form.GroupITURequired().setValue(null);
			}
		}*/
		
	}
	
	protected void onRadioButtonGroupDoesThisPatientValueChanged() throws PresentationLogicException
	{
		radioButtonGroupDoesThisPatientValueChanged();
		
	}
	private void radioButtonGroupDoesThisPatientValueChanged()
	{
		//-//
		/*
		if( form.GroupDoesThisPatient().isVisible(GroupDoesThisPatientEnumeration.rdoYesDoesthispatientrequireanovernightstay) && form.GroupDoesThisPatient().getValue().equals(GroupDoesThisPatientEnumeration .rdoYesDoesthispatientrequireanovernightstay ))
		{
			form.GroupPropPostop().setVisible(true);
		}
		else
		{
			form.GroupPropPostop().setVisible(false);
			form.GroupPropPostop().setValue(null);
		}*///-//
	}
	//wdev-19666
	protected void onRadioButtonGroupDaySurgMainTheatreValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	
	//wdev-19666
	protected void onRadioButtonGroupQuestion1ValueChanged() throws PresentationLogicException
	{
		
		if( GroupQuestion1Enumeration.rdoYesQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()) 
				|| GroupQuestion1Enumeration.rdoUnknownQuestion1.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupQuestion1().getValue()))  //wdev-21151
		{
			Integer age  = form.getLocalContext().getPatientSHortIsNotNull() ? form.getLocalContext().getPatientSHort().calculateAge():null;
			boolean showMessage =   form.getLocalContext().getPatientSHortIsNotNull() 
	                                		&& age != null 
	                                		&& age.intValue() < PATIENTAGEFORPREASSESSMENTREQUIRED 
	                                		&& (AnaestheticType.GA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) 
	                                		|| AnaestheticType.SEDATION.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()));
			
			if( AnaestheticType.LA.equals(form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().getValue()) 
				||( showMessage && form.lyrWaitingListDetails().tabPageSurgical().chkPreassessmentRequired().getValue() == false)	)
			{
				engine.showMessage("It is the clinician's responsibility to inform the patient of medication changes. ", "Information", MessageButtons.OK, MessageIcon.INFORMATION); //WDEV-22905
			}

		
				
		}
		
		updateControlsState();//question1ValueChanged(true);
		
	}
	
	//wdev-19666
	
	//wdev-19666
	protected void onChkShortNoticeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
		
	}
	
	
	//wdev-19666
	protected void onRadioButtonGroupAnaesthetistValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	//wdev-19666
	protected void onCmbAnaestheticTypeValueChanged() throws PresentationLogicException
	{
		//cmbAnaestheticTypeValueChanged(true);
		updateControlsState();
	}
	
	//wdev-19666
	
	//wdev-19666
	
	//wdev-19666
	
	private void clearControlsForAnaestheticType_GA()
	{
		//-//
		/*
		form.GroupAnaesthetist().setValue(null);
		form.GroupHDURequired().setValue(null);
		form.GroupDaySurgMainTheatre().setValue(null);
		form.GroupDoesThisPatient().setValue(null);
		form.GroupPropPostop().setValue(null);
		*/
	}
	//wdev-19666
	
	
	
	
	
	//wdev-19666
	
	private void clearControlsForAnaestheticType_LA_Preassessment()
	{
		//-//
		/*
		form.GroupDaySurgMainTheatre().setValue(null);
		form.GroupDoesThisPatient().setValue(null);
		form.GroupPropPostop().setValue(null);
		*/
		
		
	}
	
	//wdev-19666
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(form.getLocalContext().getPatientElectiveList());
		engine.close(DialogResult.CONFIRM);
		
	}
	//wdev-19666
	protected void onDteTCIOfferedDateValueChanged() throws PresentationLogicException
	{
		//-//form.GroupBookPatForTCI().setValue(null);
		//-//form.intBookPatientForTCIIn().setValue(null);
		
	}
	//wdev-19666
	protected void onRadioButtonGroupProcedureCarriedOutValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().clear();	//wdev-22465
		form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().clear();		//wdev-22465
		form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().clear();
		if( GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue())
			|| GroupProcedureCarriedOutEnumeration.rdoAny.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue())
			|| GroupProcedureCarriedOutEnumeration.rdoAnyConsultant.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue())
			|| GroupProcedureCarriedOutEnumeration.rdoOther.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))		//wdev-22465
		
		{
			
			populateResponsibleHCPqcmbSurgical();	//wdev-22465
			procedureIsToBeCarriedOutBy();
		}
		
		{
			
		}
		updateControlsState();
		
		
	}
	//wdev-22465
	private void populateResponsibleHCPqcmbSurgical()
	{
		
		
		//HcpLiteVo tempVo =  form.getLocalContext().getHcpLiteUser();
		HcpLiteVo tempVo = 	form.getLocalContext().getLoggedInUserHCpAssociatedWithService(); 
		if( tempVo != null && tempVo instanceof HcpLiteVo && Boolean.TRUE.equals(tempVo.getIsHCPaResponsibleHCP()))
		{
			
			form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setValue(tempVo);
			return;
		}
		
		tempVo = form.getLocalContext().getHCPFromReferral();
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setValue(tempVo);
		
	}
	//----------
	//wdev-19666
	
	//wdev-19666
	protected void onRadioButtonGroupIsAnticipatedProcedureWillTakeLongerValueChanged() throws PresentationLogicException
	{
		radioButtonGroupIsAnticipatedProcedureWillTakeLongerValueChanged();
		
	}
	//wdev-19666
	private void radioButtonGroupIsAnticipatedProcedureWillTakeLongerValueChanged()
	{
		//-//
		/*
		if( form.GroupIsAnticipatedProcedureWillTakeLonger().getValue().equals(GroupIsAnticipatedProcedureWillTakeLongerEnumeration.rdoYesIsAnticipatedProcedureWillTakeLonger))
		{
			form.lblProcedureLength().setVisible(true);
			form.intProcedureLength().setVisible(true);
			form.intProcedureLength().setValue(null);
		}
		else
		{
			form.lblProcedureLength().setVisible(false);
			form.intProcedureLength().setVisible(false);
		}
		*/
		
	}
	//wdev-19666
	protected void onRadioButtonGroupHaveGivenThisPatientTCIValueChanged() throws PresentationLogicException
	{
		radioButtonGroupHaveGivenThisPatientTCIValueChanged();
		
	}
	//wdev-19666
	private void radioButtonGroupHaveGivenThisPatientTCIValueChanged()
	{
		//-//
		/*
		if( form.GroupHaveGivenThisPatientTCI().getValue().equals(GroupHaveGivenThisPatientTCIEnumeration.rdoYesHaveYouGivenThisPatientTCI) )
		{
			form.lblBookpatientforTCIin().setVisible(true);
			form.intBookPatientForTCIIn().setVisible(true);
			form.GroupBookPatForTCI().setVisible(true);
			if( form.GroupBookPatForTCI().getValue() == null || form.GroupBookPatForTCI().getValue().equals(GroupBookPatForTCIEnumeration.None))
				form.GroupBookPatForTCI().setValue(GroupBookPatForTCIEnumeration.rdoDays);
			//form.lblTCIOfferedDate().setVisible(true);
			//form.dteTCIOfferedDate().setVisible(true);
		}
		else
		{
			form.lblBookpatientforTCIin().setVisible(false);
			form.intBookPatientForTCIIn().setVisible(false);
			form.GroupBookPatForTCI().setVisible(false);
			//form.lblTCIOfferedDate().setVisible(false);
			//form.dteTCIOfferedDate().setVisible(false);
			//form.dteTCIOfferedDate().setValue(null);
			form.intBookPatientForTCIIn().setValue(null);
			form.GroupBookPatForTCI().setValue(null);
		}
		*///-//
	}
	//wdev-19666
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		
		//-//
		/*
		if( form.getLocalContext().getAnticoagulantTherapyIsNotNull() && form.getLocalContext().getAnticoagulantTherapy().equals(messageBoxId))
		{
			if( DialogResult.YES.equals(result))
			{
				form.txtthispatientisonanticoagulanttherapy().setEnabled(true);
			}
			else
			{
				form.GroupQuestion1().setValue(null);
				form.txtthispatientisonanticoagulanttherapy().setEnabled(false);
				
			}
				
		}
		*///-//
		
		
	}
	
	protected void onRadioButtonGroupAdmissionTypeValueChanged() throws PresentationLogicException
	{
		
		PatientElectiveListAddLaterVo patientElectiveList = form.getLocalContext().getPatientElectiveList();
		
		form.lyrWaitingListDetails().tabPageSurgical().GroupPrimaryProcedureSurgical().setValue(GroupPrimaryProcedureSurgicalEnumeration.rdoSpecialtyHotListSurgical);				//wdev-21151
		form.lyrWaitingListDetails().tabPageMedical().GroupPrimaryProcedureMedical().setValue(GroupPrimaryProcedureMedicalEnumeration.rdoSpecialtyHotlistPrinaryProcMedical);		//wdev-21151
		
		if (patientElectiveList == null)
		{
			
			HcpLiteVo hcpUser = form.getLocalContext().getHcpLiteUser();
			
			AuthoringInformationVo tempAuthVo =  new AuthoringInformationVo();
			tempAuthVo.setAuthoringDateTime(new DateTime());
			
			if( hcpUser != null && hcpUser instanceof HcpLiteVo )
			{
				//wdev-22776
				if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
				{
					HcpDisType hcptype =getParentNodeHcp(hcpUser.getHcpType()); 
				
					if( hcptype != null && hcptype.equals(HcpDisType.MEDICAL))
					{
						tempAuthVo.setAuthoringHcp(hcpUser);
					}
					else
						tempAuthVo.setAuthoringHcp(null);
					
				}//WDEV-22790
				else
				{
					tempAuthVo.setAuthoringHcp(hcpUser);
				}
			}
			
			form.ccAuthoringHCPDT().setValue(tempAuthVo);
			
			if (GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
			{
				// For Surgical - default to Treatment
				form.lyrWaitingListDetails().tabPageSurgical().GroupElectiveListReason().setValue(GroupElectiveListReasonEnumeration.rdoTreatment);
				
       			if (form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() && form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().getValue() == null )
       			{
       					//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
       					//	form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(ReferralUrgency.TWO_WEEK_WAIT);
       					//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
       						form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(form.getLocalContext().getReferral().getUrgency());
       			}
       			
       			if( form.getLocalContext().getReferralIsNotNull() )
       			{
       				if( form.getLocalContext().getReferral().getReferralDetailsIsNotNull() )
       				{
       					if( form.getLocalContext().getReferral().getReferralDetails().getLanguageIsNotNull() )
       					{
       						form.lyrWaitingListDetails().tabPageSurgical().chkInterpreterRequired().setValue(true);
       						form.lyrWaitingListDetails().tabPageSurgical().cmbInterpreterRequired().setValue(form.getLocalContext().getReferral().getReferralDetails().getLanguage());
       					}
       					if( form.getLocalContext().getReferral().getReferralDetails().getTransportIsNotNull() )
       					{
       						form.lyrWaitingListDetails().tabPageSurgical().chkTransportRequired().setValue(true);
       						form.lyrWaitingListDetails().tabPageSurgical().cmbTransportRequired().setValue(form.getLocalContext().getReferral().getReferralDetails().getTransport());
       					}
       					if( form.getLocalContext().getReferral().getReferralDetails().getSpecialRequirementsIsNotNull())
       					{
       						form.lyrWaitingListDetails().tabPageSurgical().chkSpecialRequirements().setValue(true);
       						form.lyrWaitingListDetails().tabPageSurgical().txtSpecialRequirements().setValue(form.getLocalContext().getReferral().getReferralDetails().getSpecialRequirements());
       					}

       				}
       				
       			}
			 }
			 else  if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
			 {
				if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() && form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().getValue() == null)
				{
						//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
						//	form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(ReferralUrgency.TWO_WEEK_WAIT);
						//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
							form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(form.getLocalContext().getReferral().getUrgency());
				}
				if( form.getLocalContext().getReferralIsNotNull() )
       			{
       				if( form.getLocalContext().getReferral().getReferralDetailsIsNotNull() )
       				{
       					if( form.getLocalContext().getReferral().getReferralDetails().getLanguageIsNotNull() )
       					{
       						form.lyrWaitingListDetails().tabPageMedical().chkInterpreterRequiredMedical().setValue(true);
       						form.lyrWaitingListDetails().tabPageMedical().cmbInterpreterRequiredMedical().setValue(form.getLocalContext().getReferral().getReferralDetails().getLanguage());
       					}
       					if( form.getLocalContext().getReferral().getReferralDetails().getTransportIsNotNull() )
       					{
       						form.lyrWaitingListDetails().tabPageMedical().chkTransportRequiredNedical().setValue(true);
       						form.lyrWaitingListDetails().tabPageMedical().cmbTransportRequiredMedical().setValue(form.getLocalContext().getReferral().getReferralDetails().getTransport());
       					}
       					if( form.getLocalContext().getReferral().getReferralDetails().getSpecialRequirementsIsNotNull())
       					{
       						form.lyrWaitingListDetails().tabPageMedical().chkSpecialRequirementsMedical().setValue(true);
       						form.lyrWaitingListDetails().tabPageMedical().txtSpecialRequirementsMedical().setValue(form.getLocalContext().getReferral().getReferralDetails().getSpecialRequirements());
       					}

       				}
       				
       			}
				HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
				
				//wdev-20561
				if( tempVo != null && tempVo instanceof HcpLiteVo && Boolean.TRUE.equals(tempVo.getIsHCPaResponsibleHCP()))
				{
					if( Boolean.TRUE.equals(domain.isLoggedInUserForService(tempVo, form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null)))
					{
						form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(tempVo);
						ccResponsibleHCPValueChanged();	//wdev-21151
					}
				}
				else	//wdev-22465
				{
					tempVo = form.getLocalContext().getHCPFromReferral();
					form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().setValue(tempVo);
				}
			 }
			 else  if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
			 {
				// For Endoscopy - default to Diagnostic
				form.lyrWaitingListDetails().tabPageEndoscopy().GroupElectiveListReasonEndoscopy().setValue(GroupElectiveListReasonEndoscopyEnumeration.rdoDiagnosticEndoscopy);
				 
				 
				if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull() && form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().getValue() == null)
				{
						//if( ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))
						//	form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(ReferralUrgency.TWO_WEEK_WAIT);
						//else if( !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()))
							form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(form.getLocalContext().getReferral().getUrgency());
				}
				if( form.getLocalContext().getReferralIsNotNull() )
       			{
       				if( form.getLocalContext().getReferral().getReferralDetailsIsNotNull() )
       				{
       					if( form.getLocalContext().getReferral().getReferralDetails().getLanguageIsNotNull() )
       					{
       						form.lyrWaitingListDetails().tabPageEndoscopy().chkInterpreterRequiredEndoscopy().setValue(true);
       						form.lyrWaitingListDetails().tabPageEndoscopy().cmbInterpreterRequiredEndoscopy().setValue(form.getLocalContext().getReferral().getReferralDetails().getLanguage());
       					}
       					if( form.getLocalContext().getReferral().getReferralDetails().getTransportIsNotNull() )
       					{
       						form.lyrWaitingListDetails().tabPageEndoscopy().chkTransportRequiredEndoscopy().setValue(true);
       						form.lyrWaitingListDetails().tabPageEndoscopy().cmbTransportRequiredEndoscopy().setValue(form.getLocalContext().getReferral().getReferralDetails().getTransport());
       					}
       					if( form.getLocalContext().getReferral().getReferralDetails().getSpecialRequirementsIsNotNull())
       					{
       						form.lyrWaitingListDetails().tabPageEndoscopy().chkSpecialRequirementsEndoscopy().setValue(true);
       						form.lyrWaitingListDetails().tabPageEndoscopy().txtSpecialRequiredEndoscopy().setValue(form.getLocalContext().getReferral().getReferralDetails().getSpecialRequirements());
       					}

       				}
       				
       			}
				
				//wdev-22465
				HcpLiteVo tempVo = form.getLocalContext().getLoggedInUserHCpAssociatedWithService(); 	//wdev-22582
				if( tempVo != null && tempVo instanceof HcpLiteVo && Boolean.TRUE.equals(tempVo.getIsHCPaResponsibleHCP()))
				{
					form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setValue(tempVo);
					
				}
				else
				{
					tempVo = form.getLocalContext().getHCPFromReferral();
					form.lyrWaitingListDetails().tabPageEndoscopy().ccResponsibleHCPEndoscopy().setValue(tempVo);
				}
				//----------
				 
			 }
		}
		
		updateControlsState();
		
		
	}
	//
	
	//wdev-22776
	private HcpDisType getParentNodeHcp(HcpDisType hcpvo)
	{
		if(hcpvo == null)
			return null;
		if(hcpvo.getParent() == null)
			return hcpvo;
		else
			return getParentNodeHcp(hcpvo.getParent());
	}
		
	//--- 
	private void AdmissionType_Medical()
	{
		//-//
		/*
		form.lblLaterality().setVisible(false);
		form.cmbLaterality().setVisible(false);
		
		form.lblAnaestheticType().setVisible(false);
		form.cmbAnaestheticType().setVisible(false);
		form.cmbAnaestheticType().setValue(null);
		cmbAnaestheticTypeValueChanged(true);
		
		
		form.lblShortNotice().setVisible(true);
		form.chkShortNotice().setVisible(true);
		chkShortNoticeValueChanged();
		
		form.lblIfthispatientisonanticoagulanttherapyareyouhapytooperatewithoutstoppingorchangingthis().setVisible(false);
		form.lblIfthispatientisonanticoagulanttherapyareyouhapytooperatewithoutstoppingorchangingthis1().setVisible(false);
		form.GroupQuestion1().setVisible(false);
		form.txtthispatientisonanticoagulanttherapy().setVisible(false);
		
		form.lblIsAnticipatedThatProcedureWillTakeLonger().setVisible(false);
		form.lblIsAnticipatedThatProcedureWillTakeLonger1().setVisible(false);
		form.GroupIsAnticipatedProcedureWillTakeLonger().setVisible(false);
		form.lblProcedureLength().setVisible(false);
		form.intProcedureLength().setVisible(false);
		
		form.lblIsProcedureToBeCarriedOutByConsultant().setVisible(false);
		form.lblIsProcedureToBeCarriedOutByConsultant1().setVisible(false);
		
		form.GroupProcedureCarriedOut().setVisible(false);
		
		form.lblNameOfClinicianLoggedIn().setVisible(false);
		form.lblNamedConsultant().setVisible(false);
		form.ccNamedConsultant().setVisible(false);
		
		form.GroupDaySurgMainTheatre().setVisible(false);
		form.lblDoesthispatientrequireanovernightstay().setVisible(false);
		form.GroupDoesThisPatient().setVisible(false);
		form.GroupPropPostop().setVisible(false);
		*///-//
	}
	
	
	//----

	//wdev-20561
	


	
	protected void onRadioButtonGroupProcCarriedByNurseValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onRadioButtonGroupGeneralAnaestheticValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPrecolonoscopyReq().setValue(GroupPrecolonoscopyReqEnumeration.rdoYesPreColonoscopyR);//WDEV-22822
		updateControlsState();
		
	}


	@Override
	protected void onRadioButtonGroupElectiveListReasonEndoscopyValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}


	//wdev-20561
	protected void onChkPreoperativeOvernightStayValueChanged() throws PresentationLogicException
	{
		//wdev-21530
		//if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().chkPreoperativeOvernightStay().getValue()))
		//{
		//	form.lyrWaitingListDetails().tabPageSurgical().GroupDaySurgMainTheatre().setValue(GroupDaySurgMainTheatreEnumeration.None);
		//	form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(null);
						
		//}
		
		updateControlsState();
		
	}


		
	protected void onChkPatientDateGivenToPatientValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onRadioButtonGroupPerioperativeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onChkPatientDateGivenToPatientMedicalValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onChkShortNoticeMedicalValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onRadioButtonGroupAssessmentOfRenalFunctionValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onBtnShowSecondSurgicalProcedureClick() throws PresentationLogicException
	{
		form.getLocalContext().setShowSecondSurgicalProcedure(Boolean.TRUE);
		form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().setValue(GroupAdditionalProcedureSurgicalEnumeration.rdoSpecialtyHotlistForAdditionalProceduresSurgical);		//wdev-21151
		updateControlsState();
		
		
	}


	
	protected void onBtnShowSecondMedicalProcedureClick() throws PresentationLogicException
	{
		form.getLocalContext().setShowSecondMedicalProcedure(Boolean.TRUE);
		form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().setValue(GroupAdditionalProcedureMedicalEnumeration.rdoSpecialtyHotListAdditionalProcMedical);	//wdev-21151
		updateControlsState();
		
	}


	
	
	protected void onChkSpecialRequirementsValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onChkTransportRequiredValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onChkInterpreterRequiredValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	protected void onQmbProcedureSecondValueChanged() throws PresentationLogicException
	{
		onqmbProcedureSecondValueChanged();
		
	}
	
	private void onqmbProcedureSecondValueChanged()
	{
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null
				&& form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull()
				&& form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull()
				)
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS().intValue() > form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS().intValue())
			{
				form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS());
			}
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS());
			}
			
			
		}
		//wdev-21063
		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null
				&& !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull()
				&& !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull() )
		{
			form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(null);
		}
		//wdev-21063
		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null
				&& !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull()
				&& form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull() )
		{
			form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOS());
		}
		//wdev-21063
		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null
				&& form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull()
				&& !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getLOSIsNotNull())
		{
			form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOS());
		}
		//wdev-21063
		else if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() == null
				&& !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getLOSIsNotNull())
		{
			form.lyrWaitingListDetails().tabPageSurgical().intAnticipatedNights().setValue(null);
		}
		
		form.lyrWaitingListDetails().tabPageSurgical().intProcedureLength().setValue(null);
		
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() == null || ( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue() != null && !form.lyrWaitingListDetails().tabPageSurgical().qmbProcedure().getValue().getDefaultAnaestheticTypeIsNotNull()))	
		{
			if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null && form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDefaultAnaestheticTypeIsNotNull())
				form.lyrWaitingListDetails().tabPageSurgical().cmbAnaestheticType().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getDefaultAnaestheticType());
		}
		
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().getValue().getIsBilateralListingApplicable()))
			{
				if( !form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().removeRow(LateralityLRB.BILATERAL);
			}
		}
		
		//-----
		
		
		
		updateControlsState();
	}



	//wdev-20561
	protected void onQmbProcedureSecondTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().clear();
		
		ProcedureVoCollection procedureCollection = new ProcedureVoCollection();
		
		try
		{
		
			if( !Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageSurgical().chkMultiserviceCase().getValue()))
			{
    			if( GroupAdditionalProcedureSurgicalEnumeration.rdoSpecialtyHotlistForAdditionalProceduresSurgical.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().getValue()))  //wdev-21151
    				procedureCollection = domain.listSurgicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.FALSE);	//hotlist procedures
    			else if( GroupAdditionalProcedureSurgicalEnumeration.rdoAllProceduresForAdditionalProcedureSurgical.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupAdditionalProcedureSurgical().getValue()))
    				procedureCollection = domain.listSurgicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.TRUE);  	//all procedures
    			else
    			{
    				engine.showMessage("Select a filter");
    			}
			}
			else
			{
				procedureCollection = domain.listSurgicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.TRUE); //all procedures
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		if( procedureCollection == null)
			return;
		
		for( int i=0; i < procedureCollection.size(); i++)
		{
			addRowSecondProcSurgical(procedureCollection.get(i));
		}
		
		if( procedureCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().setValue(procedureCollection.get(0));
			onqmbProcedureSecondValueChanged();			//wdev-21063
			updateControlsState();
			
			
		}
		else if( procedureCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().showOpened();
		
	}


	//wdev-20561
	protected void onQmbProcedureSecondMedicalValueChanged() throws PresentationLogicException
	{
		
		qmbProcedureSecondMedicalValueChanged(); //wdev-21063
		
	}
	private void qmbProcedureSecondMedicalValueChanged()
	{
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null
				&& form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull()
				&& form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull()
				)
		{
			if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS().intValue() > form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS().intValue())
			{
				form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS());
			}
			else
			{
				form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS());
			}
			
			
		}
		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull())
		{
			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS());
		}
		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull() ) 
		{
			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS());
		}
		//wdev-21063
		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null
				&& !form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull()
				&& !form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull())
		{
			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(null);
		}
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getIsBilateralListingApplicable()))
			{
				if( !form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().removeRow(LateralityLRB.BILATERAL);
			}
		}
		
		
		updateControlsState();
	}


	//wdev-20561
	protected void onQmbProcedureSecondMedicalTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().clear();
		
		ProcedureVoCollection procedureCollection = new ProcedureVoCollection();
		
		try
		{
			if( GroupAdditionalProcedureMedicalEnumeration.rdoSpecialtyHotListAdditionalProcMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().getValue())) 	//wdev-21151
				procedureCollection = domain.listMedicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.FALSE);	//hotlist
			else if( GroupAdditionalProcedureMedicalEnumeration.rdoAllProceduresAdditionalProcMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupAdditionalProcedureMedical().getValue()))
				procedureCollection = domain.listMedicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.TRUE);	//all procedures
			else
			{
				engine.showMessage("Select a filter");
			}
				
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		if( procedureCollection == null )
			return;
		
		for( int i=0; i < procedureCollection.size(); i++)
		{
			addRowSecondProcMedical(procedureCollection.get(i));
		}
		
		if( procedureCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().setValue(procedureCollection.get(0));
			qmbProcedureSecondMedicalValueChanged();	//wdev-21063
			updateControlsState();
			
			
		}
		else if( procedureCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().showOpened();
		
	}


	//wdev-20561
	protected void onQmbProcedureMedicalValueChanged() throws PresentationLogicException
	{
		
		qmbProcedureMedicalValueChanged();
	}
	private void qmbProcedureMedicalValueChanged()
	{
		if( !form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getVisible())
		{
			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null ? form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS() : null);
		}
		else
		{
    		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null
    				&& form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull()
    				&& form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull()
    				)
    		{
    			if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS().intValue() > form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS().intValue())
    			{
    				form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS());
    			}
    			else
    			{
    				form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS());
    			}
    			
    			
    		}
    		//wdev-21063
    		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null
    				&& !form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull()
    				&& !form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull()
    				)
    		{
    			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(null);
    		}
    		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOSIsNotNull())
    		{
    			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getLOS());
    		}
    		else if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue() != null && form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOSIsNotNull() ) 
    		{
    			form.lyrWaitingListDetails().tabPageMedical().intAnticipatedNightsMedical().setValue(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().getValue().getLOS());
    		}
		}
		
		//wdev-21151
		if( form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue() != null  )	
		{
			if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().getValue().getIsBilateralListingApplicable()))
			{
				if( !form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().getValues().contains(LateralityLRB.BILATERAL))
				{
					form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().newRow(LateralityLRB.BILATERAL,LateralityLRB.BILATERAL.getIItemText());
				}
			}
			else
			{
				form.lyrWaitingListDetails().tabPageMedical().cmbLateralityMedical().removeRow(LateralityLRB.BILATERAL);
			}
		}
		
		updateControlsState();

	}


	//wdev-20561
	protected void onQmbProcedureMedicalTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().clear();
		form.lyrWaitingListDetails().tabPageMedical().txtdetailsMedical().setValue(null);
		ProcedureVoCollection procedureCollection = new ProcedureVoCollection();
		
		try
		{
			if( GroupPrimaryProcedureMedicalEnumeration.rdoSpecialtyHotlistPrinaryProcMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPrimaryProcedureMedical().getValue()))		//wdev-21151
				procedureCollection = domain.listMedicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.FALSE);
			else if( GroupPrimaryProcedureMedicalEnumeration.rdoAllProceduresPrimaryProcMedical.equals(form.lyrWaitingListDetails().tabPageMedical().GroupPrimaryProcedureMedical().getValue()))
				procedureCollection = domain.listMedicalProcedures(value,(form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() && form.getLocalContext().getReferral().getReferralDetails().getServiceIsNotNull() ?form.getLocalContext().getReferral().getReferralDetails().getService().getSpecialty():null),Boolean.TRUE);
			else
				engine.showMessage("Select a filter");
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		if( procedureCollection == null )
			return;
		
		for( int i=0; i < procedureCollection.size(); i++)
		{
			addRowPrimaryProcMedical(procedureCollection.get(i));
		}
		
		if( procedureCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().setValue(procedureCollection.get(0));
			qmbProcedureMedicalValueChanged();	//wdev-21063
			//resetProcedureMedicalDescription();
			updateControlsState();
			
		}
		else if( procedureCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageMedical().qmbProcedureMedical().showOpened();
		
	}


	//wdev-20561
	protected void onQmbProcedureEndoscopyValueChanged() throws PresentationLogicException
	{
		
		qmbProcedureEndoscopyValueChanged(); //wdev-21063
    	
		
	}
	private void qmbProcedureEndoscopyValueChanged()
	{
		ProcedureVo procEnd = form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
		
    	form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(null);
    	if( procEnd != null && (ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) || ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType())))
    	{
    		form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(procEnd.getDurationInMins());
    	}
    		
    	form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValue(null);
		
		updateControlsState();
	}


	//wdev-20561
	protected void onQmbProcedureEndoscopyTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().clear();
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(null);
		ProcedureVoCollection procedureCollection = new ProcedureVoCollection();
		
		try
		{
			procedureCollection = domain.listEndoscopyProcedures(value,null,Boolean.TRUE);	//wdev-21151
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		if( procedureCollection == null)
			return;
		
		for( int i=0; i < procedureCollection.size(); i++)
		{
			addRowProcEndoscopy(procedureCollection.get(i));
		}
		
		if( procedureCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().setValue(procedureCollection.get(0));
			qmbProcedureEndoscopyValueChanged();	//wdev-21063
			resetProcedureEndoscopyDescription();
			updateControlsState();
			
		}
		else if( procedureCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().showOpened();
		
	}


	//wdev-21151
	protected void onQmbElectiveListValueChanged() throws PresentationLogicException
	{
		
		electivelistValueChanged();
	}
	private void electivelistValueChanged()
	{
		if( form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().getValue() != null)
			populatePeripheralHospitals(form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().getValue().getListLocations());
	}
	


	//wdev-20561
	protected void onQmbElectiveListTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().clear();
		
		ElectiveListConfigurationWLVoCollection eleConfCollection = new ElectiveListConfigurationWLVoCollection();
		
		if( form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue() == null )
		{
			engine.showMessage("Responsible HCP is mandatory.");
			return;
		}
		
		try
		{
			IMos respHcpSurgical = form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue();

			HcpLiteVo tempVo = respHcpSurgical instanceof MedicVo ? ((Hcp) respHcpSurgical).toHcpLiteVo() : (respHcpSurgical instanceof HcpLiteVo ? (HcpLiteVo) respHcpSurgical:null);	//wdev-22465
			
			if( GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
			{
				//HcpLiteVo tempVo = (HcpLiteVo) domain.getHcpLiteUser();
				Integer  servltId =  form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null; //wdev-21151
				eleConfCollection = domain.getElectiveListConfigByService(value, servltId,tempVo);	//wdev-21151
			}
			else if( GroupProcedureCarriedOutEnumeration.rdoNamedConsultant.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
			{
				//if( form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue() == null)
				//{
				//	engine.showMessage("Select a Consultant");
				//	return;
				//}
				//HcpLiteVo tempVo = (HcpLiteVo) form.lyrWaitingListDetails().tabPageSurgical().ccNamedConsultant().getValue();
				Integer  servltId =  form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null; //wdev-21151
				//HcpLiteVo tempVo = form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue();	//wdev-21151
				if( tempVo != null)
					eleConfCollection = domain.getElectiveListConfigByService(value, servltId,tempVo);	//wdev-21151
			}
			else
			{
				eleConfCollection = domain.getElectiveListConfigByService(value, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null),tempVo);		//wdev-22465
			}
			
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		if( eleConfCollection == null )
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(null);
			return;
		}
		
		for( int i = 0; i < eleConfCollection.size(); i++)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().newRow(eleConfCollection.get(i), eleConfCollection.get(i).getWaitingListName());
		}
		
		if( eleConfCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(eleConfCollection.get(0));
			electivelistValueChanged();
			
			
		}
		else if( eleConfCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().showOpened();
		
	}


	//wdev-20561
	protected void onQmbElectiveListMedicalValueChanged() throws PresentationLogicException
	{
		electiveListMedicalValueChanged();
		
	}
	private void electiveListMedicalValueChanged()
	{
		if( form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().getValue() != null)
			populateHospitals(form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().getValue().getListLocations());
		
		form.lyrWaitingListDetails().tabPageMedical().qmbWard().clear();
	}
	//wdev-20561
	
	private void populateHospitals(ElectiveListHospitalConfigurationWLVoCollection  recordcoll)
	{
		form.lyrWaitingListDetails().tabPageMedical().cmbHospital().clear();
		if( recordcoll == null || recordcoll.size() == 0)
			return;
		for(int i = 0; i < recordcoll.size();i++)
		{
			
			form.lyrWaitingListDetails().tabPageMedical().cmbHospital().newRow(recordcoll.get(i).getListLocation(), recordcoll.get(i).getListLocation().getName());
		}
		
		if( recordcoll.size() == 1 )	//wdev - 22288
		{
			form.lyrWaitingListDetails().tabPageMedical().cmbHospital().setValue(recordcoll.get(0).getListLocation());
		}
	}
	private void populatePeripheralHospitals(ElectiveListHospitalConfigurationWLVoCollection  recordcoll)
	{
		form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().clear();
		if( recordcoll == null || recordcoll.size() == 0)
			return;
		for(int i = 0; i < recordcoll.size();i++)
		{
			
			form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().newRow(recordcoll.get(i).getListLocation(), recordcoll.get(i).getListLocation().getName());
		}
		if( recordcoll.size() == 1 )		//wdev-22288
		{
			form.lyrWaitingListDetails().tabPageSurgical().cmbPeripheralLocation().setValue(recordcoll.get(0).getListLocation());
		}
	} 


	//wdev-20561
	protected void onQmbElectiveListMedicalTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().clear();
		
		if( form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue() == null )
		{
			engine.showMessage("Select a Responsible HCP ");
			return;
		}
		
		ElectiveListConfigurationWLVoCollection eleConfCollection = new ElectiveListConfigurationWLVoCollection();
		
		try
		{
			IMos respHcpSurgical = form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue();

			HcpLiteVo tempVo = respHcpSurgical instanceof MedicVo ? ((Hcp) respHcpSurgical).toHcpLiteVo() : (respHcpSurgical instanceof HcpLiteVo ? (HcpLiteVo)respHcpSurgical:null);	//wdev-22465
			//HcpLiteVo tempVo = (HcpLiteVo) form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue();//(HcpLiteVo) domain.getHcpLiteUser();
			
			
			eleConfCollection = domain.getElectiveListConfigByService(value, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null),tempVo);	//wdev-21151
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		if( eleConfCollection == null )
			return;
		
		for( int i = 0; i < eleConfCollection.size(); i++)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().newRow(eleConfCollection.get(i), eleConfCollection.get(i).getWaitingListName());
		}
		
		if( eleConfCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValue(eleConfCollection.get(0));
			electiveListMedicalValueChanged();
			
			
		}
		else if( eleConfCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().showOpened();
		
	}


	@Override
	protected void onQmbElectiveListEndoscopyValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}


	//wdev-20561
	protected void onQmbElectiveListEndoscopyTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().clear();
		
		ElectiveListConfigurationWLVoCollection eleConfCollection = new ElectiveListConfigurationWLVoCollection();
		
		try
		{
			eleConfCollection = domain.getElectiveListConfigByService(value, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null),null);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		if( eleConfCollection == null )
			return;
		
		for( int i = 0; i < eleConfCollection.size(); i++)
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().newRow(eleConfCollection.get(i), eleConfCollection.get(i).getWaitingListName());
		}
		
		if( eleConfCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().setValue(eleConfCollection.get(0));
			
			
		}
		else if( eleConfCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageEndoscopy().qmbElectiveListEndoscopy().showOpened();
		
	}


	//wdev-20561
	protected void onChkSpecialRequirementsMedicalValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onChkTransportRequiredNedicalValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onChkInterpreterRequiredMedicalValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbWard().clear();
		
	}


	//wdev-20561
	protected void onChkSpecialRequirementsEndoscopyValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onChkTransportRequiredEndoscopyValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onChkInterpreterRequiredEndoscopyValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onRadioButtonGroupPatientMedicationStopValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	//wdev-20561
	protected void onRadioButtonGroupAnticoagulantReceivingValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}


	
	//wdev-20561
	protected void onIntPointsValueChanged() throws PresentationLogicException
	{
		ProcedureVo procEnd = form.lyrWaitingListDetails().tabPageEndoscopy().qmbProcedureEndoscopy().getValue();
    		
    	if( !ProcedureEndoscopyType.BRONCHOSCOPY.equals(procEnd.getEndoscopyType()) && !ProcedureEndoscopyType.THORACOSCOPY.equals(procEnd.getEndoscopyType()))
    	{
    		if( form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().getValue() != null)
    			form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().getValue().intValue() * 20);
    	}
    		
		
		
	}
	//wdev-20561
	protected void onQmbWardValueChanged() throws PresentationLogicException
	{
				
	}
	//wdev-20561
	protected void onQmbWardTextSubmited(String value) throws PresentationLogicException
	{
		if( form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValue() == null)
		{
			engine.showMessage("Select a Hospital.");
			return;
		}
		
		form.lyrWaitingListDetails().tabPageMedical().qmbWard().clear();
		
		LocationLiteVoCollection loclitCollection = new LocationLiteVoCollection();
		
		
		loclitCollection = domain.listWardsForHospital(form.lyrWaitingListDetails().tabPageMedical().cmbHospital().getValue(), value);
		
		
		if( loclitCollection == null )
			return;
		
		for( int i = 0; i < loclitCollection.size(); i++)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbWard().newRow(loclitCollection.get(i), loclitCollection.get(i).getName());
		}
		
		if( loclitCollection.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageMedical().qmbWard().setValue(loclitCollection.get(0));
			
			
		}
		else if( loclitCollection.size() > 1)
			form.lyrWaitingListDetails().tabPageMedical().qmbWard().showOpened();

		
	}
	//wdev-20561
	protected void onTabPageSurgicalClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	//wdev-20561
	protected void onDteRequestedPlannedDateSurgicalValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().GroupPlanedProceduresSurgical().setValue(null);
		form.lyrWaitingListDetails().tabPageSurgical().intPlanProcedureIn().setValue(null);
		
	}
	//wdev-20561
	protected void onRadioButtonGroupPlanedProceduresSurgicalValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().dteRequestedPlannedDateSurgical().setValue(null);
		
	}
	//wdev-20561
	protected void onIntPlanProcedureInValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	//wdev-20561
	protected void onDteRequestedPlannedMedicalValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageMedical().GroupPlanedProceduresMedical().setValue(null);
		form.lyrWaitingListDetails().tabPageMedical().intPlanProcedureInMedical().setValue(null);
		
	}
	//wdev-20561
	protected void onRadioButtonGroupPlanedProceduresMedicalValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageMedical().dteRequestedPlannedMedical().setValue(null);
		
	}
	//wdev-20561
	protected void onIntPlanProcedureInMedicalValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	
	//wdev-20561
	protected void onDteRequestedPlannedEndoscopyValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupPlanedProceduresEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().intPlannedProcedureInEndoscopy().setValue(null);
		
	}
	//wdev-20561
	protected void onRadioButtonGroupPlanedProceduresEndoscopyValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().dteRequestedPlannedEndoscopy().setValue(null);
		
	}
	//wdev-20561
	protected void onIntPlannedProcedureInEndoscopyValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	//wdev-20754
	protected void onCcNamedConsultantValueChanged() throws PresentationLogicException
	{
		form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().clear();
		
	}
	//wdev-20832
	protected void onBtnHideSecondSurgicalProcedureClick() throws PresentationLogicException
	{
		form.getLocalContext().setShowSecondSurgicalProcedure(Boolean.FALSE);
		form.lyrWaitingListDetails().tabPageSurgical().qmbProcedureSecond().clear();
		form.lyrWaitingListDetails().tabPageSurgical().cmbLateralitySecond().setValue(null);
		updateControlsState();
		onQmbProcedureValueChanged();	//wdev-21063
		
		updateControlsState();
		
	}
	//wdev-20832
	protected void onBtnHideSecondMedicalProcedureClick() throws PresentationLogicException
	{
		form.getLocalContext().setShowSecondMedicalProcedure(Boolean.FALSE);
		form.lyrWaitingListDetails().tabPageMedical().qmbProcedureSecondMedical().clear();
		form.lyrWaitingListDetails().tabPageMedical().cmbLateralitySecondMedical().setValue(null);
		updateControlsState();
		qmbProcedureMedicalValueChanged();	//wdev-21063
		updateControlsState();
		
	}
	
	//WDEV-21037
	@Override
	protected void onBtnUndoSuitableForTelephonePreAssessmentClick() throws PresentationLogicException
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			if (saveSuitableForTelephone(false))
			{
				open();
				form.setMode(FormMode.VIEW);
			}
		}
		else
		{
			form.getLocalContext().setIsSuitableForTelephonePreAssessment(true);
			updateControlsState();
		}
	}
	
	//WDEV-21037
	@Override
	protected void onBtnSuitableForTelephonePreAssessmentClick() throws PresentationLogicException
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			if (saveSuitableForTelephone(true))
			{
				open();
				form.setMode(FormMode.VIEW);
			}
		}
		else
		{
			form.getLocalContext().setIsSuitableForTelephonePreAssessment(true);
			updateControlsState();
		}
	}
	
	//WDEV-21037
	private boolean saveSuitableForTelephone(boolean suitableForSurgery)
	{
		PatientElectiveListAddLaterVo patElectiveListToSave = (PatientElectiveListAddLaterVo)form.getLocalContext().getPatientElectiveList().clone();

		patElectiveListToSave.setIsSuitableForTelephoneAssessment(suitableForSurgery);
		String[] errors = patElectiveListToSave.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			patElectiveListToSave = domain.saveSuitableForTelephonePreAssessment(patElectiveListToSave);
			form.getLocalContext().setPatientElectiveList(patElectiveListToSave);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return false;
		}
		
		return true;
	}
	//wdev-21151
	protected void onChkMultiserviceCaseValueChanged() throws PresentationLogicException
	{
		updatetabSurgicalControlsState();	
		
	}
	//wdev-21151
	protected void onChkAnaesthesisRiskAssessmentRequestValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		domain.isLoggedInUserForService(null, null);
	}
	//wdev-21151
	protected void onQmbConsultantNameTextSubmited(String value) throws PresentationLogicException
	{
		
		
		
	}
	//wdev-21151
	protected void onQmbNamedConsultantValueChanged() throws PresentationLogicException
	{
		
		onNamedConsultantValueChanged();	//wdev-22582
	}
	//wdev-22582
	private void onNamedConsultantValueChanged()
	{
		//wdev-22465
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().clear();
		form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().setValue(form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue());
		//--------
		
		procedureIsToBeCarriedOutBy();	
	}
	//---------
	//wdev-21151
	protected void onQmbNamedConsultantTextSubmited(String value) throws PresentationLogicException
	{
				
		ServiceLiteVo  servicelt = form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService():null;
		HcpLiteVoCollection tempColl = domain.getMedicsByServices(servicelt,form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getEditedText(),null);
		form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().clear();
		
		if( tempColl == null || tempColl.size() == 0)
			return;
		
		
		for(int i = 0; i < tempColl.size();i++)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().newRow(tempColl.get(i), tempColl.get(i).getIMosName());
		}
		
		
		if( tempColl.size() == 1)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().setValue(tempColl.get(0));
			onNamedConsultantValueChanged();	//wdev-22582
						
		}
		else if( tempColl.size() > 1)
			form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().showOpened();
		
	}
	//wdev-21151
	protected void onBtnRIEClick() throws PresentationLogicException
	{
		form.getLocalContext().setRIERecord(domain.getPatientElectiveList(form.getLocalContext().getPatientElectiveList()));
		engine.open(form.getForms().Core.RieConfirmationDialog);
		
	}
	private boolean doRIE()
	{
		PatientElectiveListAddLaterVo forRieVo = form.getLocalContext().getRIERecord();
		
		
		ElectiveListStatusVo tempElVo = new ElectiveListStatusVo();
		tempElVo.setStatusDateTime(new DateTime());
		tempElVo.setElectiveListStatus(WaitingListStatus.REMOVED);
		tempElVo.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
		
		forRieVo.setElectiveListStatus(tempElVo);

		if (forRieVo.getElectiveListStatusHistory() == null)
			forRieVo.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());

		forRieVo.getElectiveListStatusHistory().add(tempElVo);
		
	
				
		
		try
		{
						
			domain.saveAndMarkAsRie(forRieVo, form.getForms().RefMan.ElectiveListAddLaterDialog, forRieVo.getPatient().getID_Patient(), null, null,form.getGlobalContext().Core.getRieMessage());
						
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (UniqueKeyViolationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	//wdev-21151
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			if (engine.getPreviosFormName().equals(form.getForms().Scheduling.AppointmentOutcomeDialog))
			{
				form.getGlobalContext().RefMan.setPatientElectiveListAddLaterVo(form.getLocalContext().getPatientElectiveList());
				engine.close(DialogResult.CONFIRM);
				return;
			}
				
			
			if( doRIE() == true)
			{
				form.getLocalContext().setPatientElectiveList(domain.getPatientElectiveList(form.getLocalContext().getPatientElectiveList()));
				engine.close(DialogResult.ABORT);	
				
			}
			
				
		}
		else if(form.getForms().RefMan.UpdateUrgency.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				if(FormMode.EDIT.equals(form.getMode()))
				{
					initialiseReferralAndUrgency();
					populateUrgency();
				}
				
				updateControlsState();
			}
		}
	}
	
	private void populateUrgency()
	{
		if (GroupAdmissionTypeEnumeration.rdoSurgical.equals(form.GroupAdmissionType().getValue()))
		{
			if (form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull())
   			{
   				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().setValue(form.getLocalContext().getReferral().getUrgency());
   			}
		}
		else  if( GroupAdmissionTypeEnumeration.rdoMedical.equals(form.GroupAdmissionType().getValue()))
		{
			if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull())
			{
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().setValue(form.getLocalContext().getReferral().getUrgency());
			}
		}
		else  if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
		{
			if( form.getLocalContext().getReferral() != null && form.getLocalContext().getReferral().getUrgencyIsNotNull())
			{
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().setValue(form.getLocalContext().getReferral().getUrgency());
			}
		}
	}
	
	private void initialiseReferralAndUrgency()
	{
		form.getLocalContext().setReferral(domain.getReferralDetails(form.getGlobalContext().RefMan.getCatsReferral()));
		if(form.getLocalContext().getReferralIsNotNull())
		{
			bindcmbPriorityLookup();
			bindcmbPriorityMedicalLookup();
			bindcmbUrgencyEndoscopyLookup();
			
			if( !form.getLocalContext().getReferral().getUrgencyIsNotNull()  || (!ReferralUrgency.CONSULTANT_UPGRADE.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.NATIONAL_SCREENING.equals(form.getLocalContext().getReferral().getUrgency()) && !ReferralUrgency.TWO_WEEK_WAIT.equals(form.getLocalContext().getReferral().getUrgency()))) //WDEV-21853
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.NATIONAL_SCREENING);
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
				
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.NATIONAL_SCREENING);
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
				
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.CONSULTANT_UPGRADE);
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.NATIONAL_SCREENING);
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.TWO_WEEK_WAIT);
			}
			
			if (!form.getLocalContext().getReferral().getUrgencyIsNotNull() || !ReferralUrgency.EMERGENCY.equals(form.getLocalContext().getReferral().getUrgency()))
			{
				form.lyrWaitingListDetails().tabPageSurgical().cmbPriority().removeRow(ReferralUrgency.EMERGENCY); 
				form.lyrWaitingListDetails().tabPageMedical().cmbPriorityMedical().removeRow(ReferralUrgency.EMERGENCY);
				form.lyrWaitingListDetails().tabPageEndoscopy().cmbUrgencyEndoscopy().removeRow(ReferralUrgency.EMERGENCY);
			}
		}
	}
	
	//wdev-21151
	protected void onIntAnticipatedNightsValueChanged() throws PresentationLogicException
	{
				
		updateControlsState();
		
	}
	//wdev-21151
	protected void onCcResponsibleHCPValueChanged() throws PresentationLogicException
	{
		ccResponsibleHCPValueChanged();
		
	}
	private void ccResponsibleHCPValueChanged()
	{
		form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().clear();
		IMos respHcpValue = form.lyrWaitingListDetails().tabPageMedical().ccResponsibleHCP().getValue();
		if( respHcpValue != null )
		{
			ElectiveListConfigurationWLVoCollection eleConfCollection = new ElectiveListConfigurationWLVoCollection();
			
			try
			{
				HcpLiteVo tempVo = respHcpValue instanceof MedicVo ? ((Hcp) respHcpValue).toHcpLiteVo() : (respHcpValue instanceof HcpLiteVo ? (HcpLiteVo)respHcpValue:null);	//wdev-22465
				
				eleConfCollection = domain.getElectiveListConfigByService(null, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null),tempVo, true);	//wdev-21151 //WDEV-23222
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}	
			
			if( eleConfCollection == null )
				return;
			
			//WDEV-23222
			for( int i = 0; i < eleConfCollection.size(); i++)
			{
				form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().newRow(eleConfCollection.get(i), eleConfCollection.get(i).getWaitingListName());
			}
			
			if( eleConfCollection.size() == 1)
			{
				form.lyrWaitingListDetails().tabPageMedical().qmbElectiveListMedical().setValue(eleConfCollection.get(0));
				electiveListMedicalValueChanged();		
			}
			
		}
	}
	//wdev-21151
	private void procedureIsToBeCarriedOutBy()
	{
		
		form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().clear();
		ElectiveListConfigurationWLVoCollection eleConfCollection = new ElectiveListConfigurationWLVoCollection();
		
		try
		{
			//WDEV-22519
			IMos respHcpSurgical = form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue();
			if( GroupProcedureCarriedOutEnumeration.rdoNameOfClinicianLoggedIn.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
			{
				PatientElectiveListAddLaterVo patele = form.getLocalContext().getPatientElectiveList();
				HcpLiteVo tempVo = null;
				/*if( patele == null || !patele.getID_PatientElectiveListIsNotNull())
					tempVo = (HcpLiteVo) domain.getHcpLiteUser();
				else
					tempVo = patele.getConsultant();*/
				/*if( respHcpSurgical == null )	//wdev-22465
				{
					engine.showMessage("Select a Responsible HCP");
					return;
				}*/
				
				//tempVo = (HcpLiteVo) form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue();	//wdev-22465
				tempVo = respHcpSurgical instanceof MedicVo ? ((Hcp) respHcpSurgical).toHcpLiteVo() : (respHcpSurgical instanceof HcpLiteVo ? (HcpLiteVo)respHcpSurgical:null );	//wdev-22465
				Integer  servltId =  form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null; //wdev-21151
				eleConfCollection = domain.getElectiveListConfigByService(null, servltId,tempVo, true);	//wdev-21151 //WDEV-23222
			}
			else if( GroupProcedureCarriedOutEnumeration.rdoNamedConsultant.equals(form.lyrWaitingListDetails().tabPageSurgical().GroupProcedureCarriedOut().getValue()))
			{
				/*if( form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue() == null)
				{
					engine.showMessage("Select a Consultant");
					return;
				}*/
				/*if( respHcpSurgical == null )	//wdev-22465
				{
					engine.showMessage("Select a Responsible HCP");
					return;
				}*/
				
				//HcpLiteVo tempVo = (HcpLiteVo) form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue();	//wdev-22465
				//WDEV-22519
				HcpLiteVo tempVo = respHcpSurgical instanceof MedicVo ? ((Hcp) respHcpSurgical).toHcpLiteVo() : (respHcpSurgical instanceof HcpLiteVo ? (HcpLiteVo)respHcpSurgical:null );	//wdev-22465
				Integer  servltId =  form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null; //wdev-21151
				//HcpLiteVo tempVo = form.lyrWaitingListDetails().tabPageSurgical().qmbNamedConsultant().getValue();	//wdev-21151
				if( tempVo != null)
					eleConfCollection = domain.getElectiveListConfigByService(null, servltId,tempVo, true);	//wdev-21151 //WDEV-23222
				
			}
			else
			{
				//if( respHcpSurgical == null )	//wdev-22465
				//{
				//	engine.showMessage("Select a Responsible HCP");
				//	return;
				//}
				
				//HcpLiteVo tempVo = (HcpLiteVo) form.lyrWaitingListDetails().tabPageSurgical().ccResponsibleHCPSUrgical().getValue();	//wdev-22465
				HcpLiteVo tempVo = respHcpSurgical instanceof MedicVo ? ((Hcp) respHcpSurgical).toHcpLiteVo() : (respHcpSurgical instanceof HcpLiteVo ? (HcpLiteVo)respHcpSurgical:null );	//wdev-22465
				
				//eleConfCollection = domain.getElectiveListConfigByService(null, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null),null);
				eleConfCollection = domain.getElectiveListConfigByService(null, (form.getLocalContext().getReferralIsNotNull() && form.getLocalContext().getReferral().getReferralDetailsIsNotNull() ? form.getLocalContext().getReferral().getReferralDetails().getService().getID_Service():null),tempVo, true);	//wdev-22465  //WDEV-23222
			}
			
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		if( eleConfCollection == null )
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(null);
			return;
		}
		
		//WDEV-23222
		for( int i = 0; i < eleConfCollection.size(); i++)
		{
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().newRow(eleConfCollection.get(i), eleConfCollection.get(i).getWaitingListName());
		}
		
		if( eleConfCollection.size() == 1)
		{			
			form.lyrWaitingListDetails().tabPageSurgical().qmbElectiveList().setValue(eleConfCollection.get(0));
			electivelistValueChanged();	
		}
		
	}
	//wdev-21750
	protected void onChkPreassessmentRequiredValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	//wdev-22291
	protected void onRadioButtonGroupKeyTherapeuticEquipmentValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
	//wdev-22465
	protected void onCcResponsibleHCPSUrgicalValueChanged() throws PresentationLogicException
	{
		onResponsibleHCPSUrgicalValueChanged();
		
	}
	//wdev-22465
	private void onResponsibleHCPSUrgicalValueChanged()
	{
		procedureIsToBeCarriedOutBy();
	}
	
	//wdev-22467
	protected void onChkSuspectedGIBleedValueChanged() throws PresentationLogicException
	{
		if( Boolean.TRUE.equals(form.lyrWaitingListDetails().tabPageEndoscopy().chkSuspectedGIBleed().getValue()))
		{
			engine.showMessage("Please add Blatchford Score in Comments field");
		}
		
	}
	
	//WDEV-22488
	@Override
	protected void onBtnAddEditCommentsClick() throws PresentationLogicException
	{
		form.getLocalContext().setIsAddEditCommentsButtonPressed(true);
		form.getLocalContext().setAddEditComments(true);
		updateControlsState();
	}
	
	@Override
	protected void onCcAuthoringHCPDTValueChanged() throws PresentationLogicException
	{
		if( GroupAdmissionTypeEnumeration.rdoEndoscopy.equals(form.GroupAdmissionType().getValue()))
		{
			clearVettingControls();
			updatetabEndoscopyControlsState();
		}
		
	}
	
	private void clearVettingControls()
	{
		form.lyrWaitingListDetails().tabPageEndoscopy().intProcedureLengthEndoscopy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().intPoints().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().chkSuitableforCaseStudy().setValue(null);
		form.lyrWaitingListDetails().tabPageEndoscopy().GroupProcCarriedByNurse().setValue(GroupProcCarriedByNurseEnumeration.None);
		form.lyrWaitingListDetails().tabPageEndoscopy().txtDetailsEndoscopy().setValue(null);
		
	}
	
	//WDEV-23222
	@Override
	protected void onCcResponsibleHCPEndoscopyValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}
	@Override
	protected void onBtnUpdateUrgencySurgicalClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.UpdateUrgency, new Object[]{form.getMode()});
	}
	
	@Override
	protected void onBtnUpdateUrgencyMedicalClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.UpdateUrgency, new Object[]{form.getMode()});
	}
	
	@Override
	protected void onBtnUpdateUrgencyEndoscopyClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.UpdateUrgency, new Object[]{form.getMode()});
	}
}
